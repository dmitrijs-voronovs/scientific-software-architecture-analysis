id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:103,Testability,test,tests,103,"// It does not work properly! Look, the bins with the same labels; // are different ones and still the tests passes! This is not; // consistent with TH1::Merge()",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge with some different labels method for 2D Profiles",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:103,Testability,test,tests,103,"// It does not work properly! Look, the bins with the same labels; // are different ones and still the tests passes! This is not; // consistent with TH1::Merge()",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge with some different labels method for 3D Profiles",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:103,Testability,test,tests,103,"// It does not work properly! Look, the bins with the same labels; // are different ones and still the tests passes! This is not; // consistent with TH1::Merge()",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method with fully equally labelled 1D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,test,test,3,"// test to re-order some histos",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method with fully equally labelled 2D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method with fully equally labelled 3D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method with fully equally labelled 1D Profiles",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method with fully equally labelled 2D Profiles",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method with fully equally labelled 3D Profiles",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:29,Testability,test,test,29,"//LM: Dec 2010 : rmeake this test as; // a test of histogram with some different labels not all filled",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:43,Testability,test,test,43,"//LM: Dec 2010 : rmeake this test as; // a test of histogram with some different labels not all filled",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:28,Integrability,message,message,28,"// // to suppress a Warning message; // Warning in <TH1D::Merge>: Histogram FirstClone contains non-empty bins without labels -; // falling back to bin numbering mode",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method with fully differently labelled 1D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:38,Testability,test,test,38,"// use for h3 same label as for h2 to test the merging",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method with differently labelled 2D Histograms; // This tests verify to perforl a merge using labels for the X axis and; // a numeric merge for the Y axis.; // Note: in case of underflow/overflow in x axis not clear how merge should proceed; // when merging with labels underflow/overflow will not be considered",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:75,Testability,test,tests,75,"// Tests the merge method with differently labelled 2D Histograms; // This tests verify to perforl a merge using labels for the X axis and; // a numeric merge for the Y axis.; // Note: in case of underflow/overflow in x axis not clear how merge should proceed; // when merging with labels underflow/overflow will not be considered",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:229,Usability,clear,clear,229,"// Tests the merge method with differently labelled 2D Histograms; // This tests verify to perforl a merge using labels for the X axis and; // a numeric merge for the Y axis.; // Note: in case of underflow/overflow in x axis not clear how merge should proceed; // when merging with labels underflow/overflow will not be considered",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:38,Testability,test,test,38,"// use for h3 same label as for h2 to test the merging",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:259,Modifiability,extend,extended,259,"// the x axis will be full labels while the y axis will be numeric; // avoid underflow-overflow in x; // should the merge not use labels if underflow-overflows are presents ?; // when merging with labels underflow/overflow are ignored and; //NB when axis are extended underflow/overflow are set to zero",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:71,Safety,avoid,avoid,71,"// the x axis will be full labels while the y axis will be numeric; // avoid underflow-overflow in x; // should the merge not use labels if underflow-overflows are presents ?; // when merging with labels underflow/overflow are ignored and; //NB when axis are extended underflow/overflow are set to zero",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:225,Modifiability,extend,extended,225,"// Tests the merge method with fully differently labelled 3D Histograms; // Make the tests such that merge is done withouy using labels for all axis.; // All label sizes are less than number of bins, therefore axis cannot be extended; // and merge is done then numerically and not in label mode; // use smaller numberOfBins to have all labels filled in h4",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method with fully differently labelled 3D Histograms; // Make the tests such that merge is done withouy using labels for all axis.; // All label sizes are less than number of bins, therefore axis cannot be extended; // and merge is done then numerically and not in label mode; // use smaller numberOfBins to have all labels filled in h4",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:85,Testability,test,tests,85,"// Tests the merge method with fully differently labelled 3D Histograms; // Make the tests such that merge is done withouy using labels for all axis.; // All label sizes are less than number of bins, therefore axis cannot be extended; // and merge is done then numerically and not in label mode; // use smaller numberOfBins to have all labels filled in h4",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:38,Testability,test,test,38,"// use for h3 same label as for h2 to test the merging",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method with fully differently labelled 3D weighted; // histograms; // This tests use first axis numerically and then set labels; // and it is different than wiorkflow in previous one; // It is the same as in TProfile3D test case, where we do not have support for filling with labels; // use less bins",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:94,Testability,test,tests,94,"// Tests the merge method with fully differently labelled 3D weighted; // histograms; // This tests use first axis numerically and then set labels; // and it is different than wiorkflow in previous one; // It is the same as in TProfile3D test case, where we do not have support for filling with labels; // use less bins",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:238,Testability,test,test,238,"// Tests the merge method with fully differently labelled 3D weighted; // histograms; // This tests use first axis numerically and then set labels; // and it is different than wiorkflow in previous one; // It is the same as in TProfile3D test case, where we do not have support for filling with labels; // use less bins",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:259,Modifiability,extend,extended,259,"// the x axis will be full labels while the y axis will be numeric; // avoid underflow-overflow in x; // should the merge not use labels if underflow-overflows are presents ?; // when merging with labels underflow/overflow are ignored and; //NB when axis are extended underflow/overflow are set to zero; // profile3d has not yet filling with labels implemented.; // test filling with x but be careful in filling reference histogram h4",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:71,Safety,avoid,avoid,71,"// the x axis will be full labels while the y axis will be numeric; // avoid underflow-overflow in x; // should the merge not use labels if underflow-overflows are presents ?; // when merging with labels underflow/overflow are ignored and; //NB when axis are extended underflow/overflow are set to zero; // profile3d has not yet filling with labels implemented.; // test filling with x but be careful in filling reference histogram h4",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:366,Testability,test,test,366,"// the x axis will be full labels while the y axis will be numeric; // avoid underflow-overflow in x; // should the merge not use labels if underflow-overflows are presents ?; // when merging with labels underflow/overflow are ignored and; //NB when axis are extended underflow/overflow are set to zero; // profile3d has not yet filling with labels implemented.; // test filling with x but be careful in filling reference histogram h4",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Safety,avoid,avoid,3,"// avoid underflow/overflows in label axis",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,test,test,3,"// test also case that labels are not ordered",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:81,Testability,test,test,81,"//h2->GetYaxis()->SetBinLabel(i, ylabel);; // use for h3 same label as for h2 to test the merging",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method with fully differently labelled 1D Profiles",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:38,Testability,test,test,38,"// use for h3 same label as for h2 to test the merging",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method with fully differently labelled 2D Profiles; // use less bins",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:38,Testability,test,test,38,"// use for h3 same label as for h2 to test the merging",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:259,Modifiability,extend,extended,259,"// the x axis will be full labels while the y axis will be numeric; // avoid underflow-overflow in x; // should the merge not use labels if underflow-overflows are presents ?; // when merging with labels underflow/overflow are ignored and; //NB when axis are extended underflow/overflow are set to zero",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:71,Safety,avoid,avoid,71,"// the x axis will be full labels while the y axis will be numeric; // avoid underflow-overflow in x; // should the merge not use labels if underflow-overflows are presents ?; // when merging with labels underflow/overflow are ignored and; //NB when axis are extended underflow/overflow are set to zero",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method with fully differently labelled 3D Profiles; // use less bins",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:259,Modifiability,extend,extended,259,"// the x axis will be full labels while the y axis will be numeric; // avoid underflow-overflow in x; // should the merge not use labels if underflow-overflows are presents ?; // when merging with labels underflow/overflow are ignored and; //NB when axis are extended underflow/overflow are set to zero; // profile3d has not yet filling with labels implemented.; // test filling with x but be careful in filling reference histogram p4",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:71,Safety,avoid,avoid,71,"// the x axis will be full labels while the y axis will be numeric; // avoid underflow-overflow in x; // should the merge not use labels if underflow-overflows are presents ?; // when merging with labels underflow/overflow are ignored and; //NB when axis are extended underflow/overflow are set to zero; // profile3d has not yet filling with labels implemented.; // test filling with x but be careful in filling reference histogram p4",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:366,Testability,test,test,366,"// the x axis will be full labels while the y axis will be numeric; // avoid underflow-overflow in x; // should the merge not use labels if underflow-overflows are presents ?; // when merging with labels underflow/overflow are ignored and; //NB when axis are extended underflow/overflow are set to zero; // profile3d has not yet filling with labels implemented.; // test filling with x but be careful in filling reference histogram p4",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:81,Testability,test,test,81,"//p2->GetYaxis()->SetBinLabel(i, ylabel);; // use for h3 same label as for h2 to test the merging",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method with differently labelled 2D Histograms in one axis; // and with new limits in the other axis (see issue 10928)",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:38,Testability,test,test,38,"// use for h3 same label as for h2 to test the merging",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:71,Safety,avoid,avoid,71,"// the x axis will be full labels while the y axis will be numeric; // avoid underflow-overflow in x; // Inflate Y axis to new limits for y axis of h2 but not h3",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:46,Availability,error,error,46,"// need to generate in the range otherwise an error in TH1::Merge is correctly produced; // since we cannot merge in that case",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:46,Availability,error,error,46,"// need to generate in the range otherwise an error in TH1::Merge is produced",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method with different binned 1D Histograms; // test also case when the first histogram is empty (bug Savannah 95190)",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:66,Testability,test,test,66,"// Tests the merge method with different binned 1D Histograms; // test also case when the first histogram is empty (bug Savannah 95190)",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:99,Modifiability,extend,extended,99,"// resulting histogram will have the bigger range and the larger bin width; // eventually range is extended by half bin width to have correct bin boundaries; // of largest bin width histogram",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:154,Integrability,rout,routine,154,"// Tests the merge method with different binned 2D Histograms; //LM. t.b.u.: for 1D can make h3 with 330 bins , while in 2D if I make h3 with 33 bins; // routine which check axis fails. Needs to be improved ???",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method with different binned 2D Histograms; //LM. t.b.u.: for 1D can make h3 with 330 bins , while in 2D if I make h3 with 33 bins; // routine which check axis fails. Needs to be improved ???",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method with different binned 3D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method with different binned 1D Profile; // Stats fail, for a reason I do not know :S",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method with different binned 2D Profile; // This tests fails! It should not!",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:68,Testability,test,tests,68,"// Tests the merge method with different binned 2D Profile; // This tests fails! It should not!",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:94,Availability,Fault,Fault,94,"// Tests the merge method with different binned 3D Profile; // This tests fails! Segmentation Fault!!It should not!",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method with different binned 3D Profile; // This tests fails! Segmentation Fault!!It should not!",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:68,Testability,test,tests,68,"// Tests the merge method with different binned 3D Profile; // This tests fails! Segmentation Fault!!It should not!",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:47,Testability,test,test,47,"// exclude statistics in comparison since chi2 test will fail with low; // bin statistics",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method for diferent 1D Histograms; // when axis can rebin (e.g. for time histograms)",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:74,Modifiability,extend,extended,74,"// Tests the merge method for diferent 1D Histograms; // when axis can be extended (e.g. for time histograms)",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method for diferent 1D Histograms; // when axis can be extended (e.g. for time histograms)",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:74,Modifiability,extend,extended,74,"// Tests the merge method for diferent 1D Histograms; // when axis can be extended (e.g. for time histograms)",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method for diferent 1D Histograms; // when axis can be extended (e.g. for time histograms)",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method for diferent 1D Histograms; // when axis can rebin (e.g. for time histograms)",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method for different 1D Histograms; // where different axis are used, BUT the largest bin width must be; // a multiple of the smallest bin width",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests labelling a 1D Histogram, test ordering of labels (TH1::LabelsOption); // build histogram with extra labels to test also TH1::LabelsDeflate",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:35,Testability,test,test,35,"// Tests labelling a 1D Histogram, test ordering of labels (TH1::LabelsOption); // build histogram with extra labels to test also TH1::LabelsDeflate",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:120,Testability,test,test,120,"// Tests labelling a 1D Histogram, test ordering of labels (TH1::LabelsOption); // build histogram with extra labels to test also TH1::LabelsDeflate",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:44,Testability,test,test,44,"// set bin label in random order in bins to test ordering when labels are filled randomly",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,test,test,3,"// test ordering label in content ascending order",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,test,test,3,"// test ordering label alphabetically",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests labelling a 2D Histogram with labels in the X axis (TH1::LabelsOption); // build histogram with extra labels to test also TH1::LabelsDeflate",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:121,Testability,test,test,121,"// Tests labelling a 2D Histogram with labels in the X axis (TH1::LabelsOption); // build histogram with extra labels to test also TH1::LabelsDeflate",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:44,Testability,test,test,44,"// set bin label in random order in bins to test ordering when labels are filled randomly",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,test,test,3,"// test ordering label in content descending order",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,test,test,3,"// test ordering label alphabetically",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests labelling a 2D Histogram and test ordering of labels in Y axis (TH1::LabelsOption); // build histogram with extra labels to test also TH1::LabelsDeflate",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:38,Testability,test,test,38,"// Tests labelling a 2D Histogram and test ordering of labels in Y axis (TH1::LabelsOption); // build histogram with extra labels to test also TH1::LabelsDeflate",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:133,Testability,test,test,133,"// Tests labelling a 2D Histogram and test ordering of labels in Y axis (TH1::LabelsOption); // build histogram with extra labels to test also TH1::LabelsDeflate",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:48,Testability,test,test,48,"// try here without shuffling the labels to not test random label order in list",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:21,Modifiability,extend,extended,21,"// axis of h2 is not extended, make it to have 0 statistics",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,test,test,3,"// test ordering label in content ascending order",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:43,Modifiability,extend,extendable,43,"// note in this test label axis (y) is not extendable because labels are matching the bins; // and we can test also the Mean and RMS; // reset stats so h2 will have a fake mean,stddev; // by setting labels in h1 we make its axis extendable and we get zero statistics in Y",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:229,Modifiability,extend,extendable,229,"// note in this test label axis (y) is not extendable because labels are matching the bins; // and we can test also the Mean and RMS; // reset stats so h2 will have a fake mean,stddev; // by setting labels in h1 we make its axis extendable and we get zero statistics in Y",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:16,Testability,test,test,16,"// note in this test label axis (y) is not extendable because labels are matching the bins; // and we can test also the Mean and RMS; // reset stats so h2 will have a fake mean,stddev; // by setting labels in h1 we make its axis extendable and we get zero statistics in Y",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:106,Testability,test,test,106,"// note in this test label axis (y) is not extendable because labels are matching the bins; // and we can test also the Mean and RMS; // reset stats so h2 will have a fake mean,stddev; // by setting labels in h1 we make its axis extendable and we get zero statistics in Y",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests labelling a 1D Histogram, test ordering of labels (TH1::LabelsOption); // build histogram with extra labels to test also TH1::LabelsDeflate",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:35,Testability,test,test,35,"// Tests labelling a 1D Histogram, test ordering of labels (TH1::LabelsOption); // build histogram with extra labels to test also TH1::LabelsDeflate",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:120,Testability,test,test,120,"// Tests labelling a 1D Histogram, test ordering of labels (TH1::LabelsOption); // build histogram with extra labels to test also TH1::LabelsDeflate",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:44,Testability,test,test,44,"// set bin label in random order in bins to test ordering when labels are filled randomly",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:21,Modifiability,extend,extended,21,"// axis of h2 is not extended, make it to have 0 statistics",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,test,test,3,"// test ordering label in content descending order",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,test,test,3,"// test ordering label alphabetically",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests labelling a 1D Histogram, test ordering of labels (TH1::LabelsOption); // build histogram with extra labels to test also TH1::LabelsDeflate",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:35,Testability,test,test,35,"// Tests labelling a 1D Histogram, test ordering of labels (TH1::LabelsOption); // build histogram with extra labels to test also TH1::LabelsDeflate",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:120,Testability,test,test,120,"// Tests labelling a 1D Histogram, test ordering of labels (TH1::LabelsOption); // build histogram with extra labels to test also TH1::LabelsDeflate",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:44,Testability,test,test,44,"// set bin label in random order in bins to test ordering when labels are filled randomly",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,test,test,3,"// test also setting a label in x axis",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:17,Modifiability,extend,extendable,17,"// make axis not extendable otherwise statistics in X will be set to zero",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:19,Modifiability,extend,extendable,19,"// but make y axis extendable",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,test,test,3,"// test ordering label in content descending order",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,test,test,3,"// test ordering label alphabetically",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests labelling a 3D Histogram, test ordering of labels (TH1::LabelsOption); // build histogram with extra labels to test also TH1::LabelsDeflate",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:35,Testability,test,test,35,"// Tests labelling a 3D Histogram, test ordering of labels (TH1::LabelsOption); // build histogram with extra labels to test also TH1::LabelsDeflate",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:120,Testability,test,test,120,"// Tests labelling a 3D Histogram, test ordering of labels (TH1::LabelsOption); // build histogram with extra labels to test also TH1::LabelsDeflate",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:44,Testability,test,test,44,"// set bin label in random order in bins to test ordering when labels are filled randomly",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,test,test,3,"// test ordering label in content descending order",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,test,test,3,"// test ordering label alphabetically",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests labelling a 1D Profile, test ordering of labels (TH1::LabelsOption); // build histogram with extra labels to test also TH1::LabelsDeflate; // test also case of labels not ordered (bug present in LabelsOptions before Sep2020)",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:33,Testability,test,test,33,"// Tests labelling a 1D Profile, test ordering of labels (TH1::LabelsOption); // build histogram with extra labels to test also TH1::LabelsDeflate; // test also case of labels not ordered (bug present in LabelsOptions before Sep2020)",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:118,Testability,test,test,118,"// Tests labelling a 1D Profile, test ordering of labels (TH1::LabelsOption); // build histogram with extra labels to test also TH1::LabelsDeflate; // test also case of labels not ordered (bug present in LabelsOptions before Sep2020)",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:151,Testability,test,test,151,"// Tests labelling a 1D Profile, test ordering of labels (TH1::LabelsOption); // build histogram with extra labels to test also TH1::LabelsDeflate; // test also case of labels not ordered (bug present in LabelsOptions before Sep2020)",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:44,Testability,test,test,44,"// set bin label in random order in bins to test ordering when labels are filled randomly",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,test,test,3,"// test ordering label in content ascending order",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,test,test,3,"// test ordering label alphabetically",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests labelling a 1D Profile, test only ordering of labels with content; // test case when profile have weights (issue #)",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:33,Testability,test,test,33,"// Tests labelling a 1D Profile, test only ordering of labels with content; // test case when profile have weights (issue #)",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:79,Testability,test,test,79,"// Tests labelling a 1D Profile, test only ordering of labels with content; // test case when profile have weights (issue #)",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:7,Testability,test,test,7,"// add test with weights",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:44,Testability,test,test,44,"// set bin label in random order in bins to test ordering when labels are filled randomly",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,test,test,3,"// test ordering label in content ascending order",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,test,test,3,"// test ordering label alphabetically",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests labelling a 2D Histogram with labels in the X axis (TH1::LabelsOption); // build histogram with extra labels to test also TH1::LabelsDeflate",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:121,Testability,test,test,121,"// Tests labelling a 2D Histogram with labels in the X axis (TH1::LabelsOption); // build histogram with extra labels to test also TH1::LabelsDeflate",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:44,Testability,test,test,44,"// set bin label in random order in bins to test ordering when labels are filled randomly",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:89,Modifiability,extend,extendable,89,"// labels in h1 are set in alphabetic order; // by setting labels in h1 we make its axis extendable",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:27,Testability,test,test,27,"//h2->LabelsDeflate();; // test ordering label in content descending order",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,test,test,3,"// test ordering label alphabetically",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests labelling a 2D Histogram and test ordering of labels in Y axis (TH1::LabelsOption); // build histogram with extra labels to test also TH1::LabelsDeflate",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:38,Testability,test,test,38,"// Tests labelling a 2D Histogram and test ordering of labels in Y axis (TH1::LabelsOption); // build histogram with extra labels to test also TH1::LabelsDeflate",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:133,Testability,test,test,133,"// Tests labelling a 2D Histogram and test ordering of labels in Y axis (TH1::LabelsOption); // build histogram with extra labels to test also TH1::LabelsDeflate",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:31,Testability,test,test,31,"// try shuffling the labels to test random label order in list",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,test,test,3,"// test ordering label in content ascending order; //h2->LabelsOption(""<"", ""y"");; //TProfile2D* h0 = static_cast<TProfile2D*> ( h2->Clone(""h2clone"") );; // then order labels alphabetically",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:44,Modifiability,extend,extendable,44,"// by setting labels in h1 we make its axis extendable",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:43,Modifiability,extend,extendable,43,"// note in this test label axis (y) is not extendable because labels are matching the bins; // and we can test also the Mean and RMS",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:16,Testability,test,test,16,"// note in this test label axis (y) is not extendable because labels are matching the bins; // and we can test also the Mean and RMS",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:106,Testability,test,test,106,"// note in this test label axis (y) is not extendable because labels are matching the bins; // and we can test also the Mean and RMS",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests labelling a 1D Profile",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests interpolation method for 1D Histogram",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:52,Modifiability,variab,variable,52,"// Tests interpolation method for 1D Histogram with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests interpolation method for 1D Histogram with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests interpolation method for 2D Histogram",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests interpolation method for 3D Histogram",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,test,test,3,"// test first nentries",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,test,test,3,"// test first nentries",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:19,Availability,toler,tolerance,19,"// don't need high tolerance (use 10-4)",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,test,test,3,"// test first nentries",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:19,Availability,toler,tolerance,19,"// don't need high tolerance (use 10-4); //double igf = gaus->Integral(x1,x2,y1,y2,z1,z2,1.E-4); // don't need high tolerance",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:116,Availability,toler,tolerance,116,"// don't need high tolerance (use 10-4); //double igf = gaus->Integral(x1,x2,y1,y2,z1,z2,1.E-4); // don't need high tolerance",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,test,test,3,"// test histogram buffer",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:7,Testability,test,test,7,"// now test that functions are consistent; //itest = (h1->GetMean() != h2->GetMean() );",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,test,test,3,"// test histogram buffer with weights",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:84,Availability,error,errors,84,"// We use 30 epsilon below because some platforms (ARM64, x86_64); // have rounding errors exceeding a few ulps and make the test fail.",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:125,Testability,test,test,125,"// We use 30 epsilon below because some platforms (ARM64, x86_64); // have rounding errors exceeding a few ulps and make the test fail.",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,test,test,3,"// test adding an extra fill",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,test,test,3,"// test adding extra fills with weights",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:67,Testability,test,test,67,"// be sure to have some underflow/overflow before expanding; // to test that case",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:116,Modifiability,extend,extending,116,"// do not want underflow/overflow in h2; // if (h1->GetYaxis()->GetBinWidth(1) < 2. && y > 10.) {; // std::cout << ""extending the histogram for "" << x << "" "" << y << std::endl;; // }",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:159,Availability,error,error,159,"// std::cout << ""\ti: "" << i; // << "" x: "";; // std::copy(x1, x1+ndim, ostream_iterator<double>(std::cout, "" ""));; // std::cout << "" val: "" << value1; // << "" error: "" << error1; // << std::endl;",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:17,Availability,ERROR,ERROR,17,"// std::cout << ""ERROR FINDING BIN!"" << std::endl;",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:277,Availability,error,error,277,"// std::cout << ""\ti: "" << i; // << "" min: "";; // std::copy(min.begin(), min.end(), ostream_iterator<double>(std::cout, "" ""));; // std::cout << "" max: "";; // std::copy(max.begin(), max.end(), ostream_iterator<double>(std::cout, "" ""));; // std::cout << "" val: "" << val; // << "" error: "" << error; // << std::endl;",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:289,Availability,error,error,289,"// std::cout << ""\ti: "" << i; // << "" min: "";; // std::copy(min.begin(), min.end(), ostream_iterator<double>(std::cout, "" ""));; // std::cout << "" max: "";; // std::copy(max.begin(), max.end(), ostream_iterator<double>(std::cout, "" ""));; // std::cout << "" val: "" << val; // << "" error: "" << error; // << std::endl;",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:17,Availability,ERROR,ERROR,17,"// std::cout << ""ERROR FINDING BIN!"" << std::endl;",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests consistency with a reference file for 1D Histogram",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:20,Availability,failure,failure,20,"// true indicates a failure",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests consistency with a reference file for 1D Profile",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:20,Availability,failure,failure,20,"// true indicates a failure",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests consistency with a reference file for 2D Histogram",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:20,Availability,failure,failure,20,"// true indicates a failure",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests consistency with a reference file for 2D Profile",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:20,Availability,failure,failure,20,"// true indicates a failure",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests consistency with a reference file for 3D Histogram",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:20,Availability,failure,failure,20,"// true indicates a failure",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests consistency with a reference file for 3D Profile",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:20,Availability,failure,failure,20,"// true indicates a failure",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests consistency with a reference file for Sparse Histogram",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:20,Availability,failure,failure,20,"// true indicates a failure",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests rebin method with an integer as input for 1D Histogram",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests rebin method with an integer as input for 1D Profile",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests rebin method with an integer as input and without name for 1D Histogram",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests rebin method with an integer as input and without name for 1D Profile",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests rebin method with an array as input for 1D Histogram",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests rebin method with an array as input for 1D Profile",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests rebin method for 2D Histogram",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests rebin method for 2D Histogram",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests rebin method for 2D Profile Histogram",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests rebin method for n-dim Histogram",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:86,Testability,test,testing,86,"// In case of deviation, the profiles' content will not work anymore; // try only for testing the statistics",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:29,Testability,test,tests,29,"// This class implements the tests for all types of projections of; // all the classes tested in this file.; //public:",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:87,Testability,test,tested,87,"// This class implements the tests for all types of projections of; // all the classes tested in this file.; //public:",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:59,Modifiability,variab,variable,59,"// The bit is set for all the histograms (It's a statistic variable)",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:26,Testability,test,test,26,"// reference histogram to test with option W.; // need to use bin center for the weight",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,test,test,3,"// test directly project3dprofile",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,test,test,3,"// test option E of ProjectionXY",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:41,Availability,error,error,41,"// test option W of ProjectionXY; // The error fails when built with weights. It is not properly calculated",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,test,test,3,"// test option W of ProjectionXY; // The error fails when built with weights. It is not properly calculated",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,test,test,3,"// test 1D histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:6,Testability,test,testing,6,"// 1D testing direct profiles",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:6,Testability,test,testing,6,"// 1D testing e profiles",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:33,Availability,error,error,33,"// 1D testing w profiles; // The error is not properly propagated when build with weights :S",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:6,Testability,test,testing,6,"// 1D testing w profiles; // The error is not properly propagated when build with weights :S",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:10,Testability,test,test,10,"// actual test of profile projections",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:177,Modifiability,Inherit,InheritsFrom,177,"// On windows there is an order of initialization problem that lead to; // 'Int_t not being in the list of types when TProfile's TClass is; // initialized (via a call to IsA()->InheritsFrom(); on linux this is; // not a problem because G__Base1 is initialized early; on windows with; // root.exe this is not a problem because GetListOfType(kTRUE) is called; // via a call to TClass::GetClass induces by the initialization of the; // plugin manager.",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:433,Modifiability,plugin,plugin,433,"// On windows there is an order of initialization problem that lead to; // 'Int_t not being in the list of types when TProfile's TClass is; // initialized (via a call to IsA()->InheritsFrom(); on linux this is; // not a problem because G__Base1 is initialized early; on windows with; // root.exe this is not a problem because GetListOfType(kTRUE) is called; // via a call to TClass::GetClass induces by the initialization of the; // plugin manager.",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Safety,avoid,avoid,3,"// avoid cleaning histogram when running a single test suite",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:50,Testability,test,test,50,"// avoid cleaning histogram when running a single test suite",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Test,3,"// Test 1",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:48,Availability,error,error,48,"// to avoid cases in chi2-test of profiles when error is zero",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:6,Safety,avoid,avoid,6,"// to avoid cases in chi2-test of profiles when error is zero",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:26,Testability,test,test,26,"// to avoid cases in chi2-test of profiles when error is zero",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Test,3,"// Test 3-4",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Test,3,"// Test 5; // Range Tests",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:20,Testability,Test,Tests,20,"// Test 5; // Range Tests",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Test,3,"// Test 6",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Test,3,"// Test 7; // Add Tests",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:18,Testability,Test,Tests,18,"// Test 7; // Add Tests",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Test,3,"// Test 8; // Multiply Tests",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:23,Testability,Test,Tests,23,"// Test 8; // Multiply Tests",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Test,3,"// Test 9; // Divide Tests",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:21,Testability,Test,Tests,21,"// Test 9; // Divide Tests",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:120,Availability,error,errors,120,"// Still to do: Division for profiles; // The division methods for the profiles have to be changed to; // calculate the errors correctly.; // Test 10; // Copy Tests",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:142,Testability,Test,Test,142,"// Still to do: Division for profiles; // The division methods for the profiles have to be changed to; // calculate the errors correctly.; // Test 10; // Copy Tests",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:159,Testability,Test,Tests,159,"// Still to do: Division for profiles; // The division methods for the profiles have to be changed to; // calculate the errors correctly.; // Test 10; // Copy Tests",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Test,3,"// Test 11; // WriteRead Tests",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:25,Testability,Test,Tests,25,"// Test 11; // WriteRead Tests",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Test,3,"// Test 12; // Merge Tests same axis",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:21,Testability,Test,Tests,21,"// Test 12; // Merge Tests same axis",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Test,3,"// Test 13; // Merge Tests with labels",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:21,Testability,Test,Tests,21,"// Test 13; // Merge Tests with labels",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Test,3,"// Test 14; // Merge Tests with differen axes",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:21,Testability,Test,Tests,21,"// Test 14; // Merge Tests with differen axes",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:32,Modifiability,extend,extendable,32,"// Test 15; // Merge Tests with extendable axes",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Test,3,"// Test 15; // Merge Tests with extendable axes",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:21,Testability,Test,Tests,21,"// Test 15; // Merge Tests with extendable axes",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,test,tests,3,"// tests failing testMerge3DExtendX, testMerge3DExtendZ,",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Test,3,"// Test 16; // Label Tests",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:21,Testability,Test,Tests,21,"// Test 16; // Label Tests",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Test,3,"// Test 17; // Interpolation Tests",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:29,Testability,Test,Tests,29,"// Test 17; // Interpolation Tests",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Test,3,"// Test 18; // Scale Tests",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:21,Testability,Test,Tests,21,"// Test 18; // Scale Tests",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Test,3,"// Test 19; // Integral Tests",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:24,Testability,Test,Tests,24,"// Test 19; // Integral Tests",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Test,3,"// Test 20; // Histogram buffer Tests",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:32,Testability,Test,Tests,32,"// Test 20; // Histogram buffer Tests",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:25,Modifiability,extend,extend,25,"// Test 21; // Histogram extend axis Tests",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Test,3,"// Test 21; // Histogram extend axis Tests",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:37,Testability,Test,Tests,37,"// Test 21; // Histogram extend axis Tests",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Test,3,"// Test 22; // TH1-THn[Sparse] Conversions Tests",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:43,Testability,Test,Tests,43,"// Test 22; // TH1-THn[Sparse] Conversions Tests",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Test,3,"// Test 23; // FillData Tests",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:24,Testability,Test,Tests,24,"// Test 23; // FillData Tests",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:18,Testability,test,tests,18,"// Combination of tests",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Test,3,"// Test 24; // Reference Tests: compare with a reference old file",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:25,Testability,Test,Tests,25,"// Test 24; // Reference Tests: compare with a reference old file",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:21,Testability,test,test,21,"// when running this test order is important for random number. Need to keep same order as; // in reference file",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:15,Deployability,update,updated,15,"// needs to be updated // ref time on pcbrun4",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:154,Availability,ERROR,ERRORLIMIT,154,"// Statistical tests:; // No statistical tests possible for THnBase so far...; // if ( compareStats ); // differents += compareStatistics( h1, h2, debug, ERRORLIMIT);",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:15,Testability,test,tests,15,"// Statistical tests:; // No statistical tests possible for THnBase so far...; // if ( compareStats ); // differents += compareStatistics( h1, h2, debug, ERRORLIMIT);",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:41,Testability,test,tests,41,"// Statistical tests:; // No statistical tests possible for THnBase so far...; // if ( compareStats ); // differents += compareStatistics( h1, h2, debug, ERRORLIMIT);",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:15,Testability,test,tests,15,"// Statistical tests:",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:15,Testability,test,tests,15,"// Statistical tests:",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:15,Testability,test,tests,15,"// Statistical tests:",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:37,Testability,test,test,37,"// switch off Info mesaage from chi2 test",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:64,Availability,error,error,64,"// for profiles in 2D and 3D avoid problems with bins with zero error",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:29,Safety,avoid,avoid,29,"// for profiles in 2D and 3D avoid problems with bins with zero error",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Axel Naumann, 2011-01-11; /////////////////////////////////////////////////////////////////; //; // Stress test (functionality and timing) for C++ interpreter.; //; /////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/stressInterpreter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx:141,Testability,test,test,141,"// @(#)root/test:$Id$; // Author: Axel Naumann, 2011-01-11; /////////////////////////////////////////////////////////////////; //; // Stress test (functionality and timing) for C++ interpreter.; //; /////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/stressInterpreter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx:89,Performance,perform,performance,89,"/////////////////////////////////////////////////////////////////; // Test function call performance",MatchSource.CODE_COMMENT,test/stressInterpreter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx:70,Testability,Test,Test,70,"/////////////////////////////////////////////////////////////////; // Test function call performance",MatchSource.CODE_COMMENT,test/stressInterpreter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx:70,Testability,Test,Test,70,"/////////////////////////////////////////////////////////////////; // Test custom STL dictionary / calls",MatchSource.CODE_COMMENT,test/stressInterpreter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx:70,Testability,Test,Test,70,"/////////////////////////////////////////////////////////////////; // Test reflection query, reflection-based function call",MatchSource.CODE_COMMENT,test/stressInterpreter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx:70,Testability,Test,Test,70,"/////////////////////////////////////////////////////////////////; // Test nested compound statements (if, switch, for,...)",MatchSource.CODE_COMMENT,test/stressInterpreter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx:12,Testability,test,test,12,"// only run test if it was selected",MatchSource.CODE_COMMENT,test/stressInterpreter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx:14,Integrability,rout,routine,14,"// Since this routine can be called (almost) directly from the command line and is used; // in automated test, it must return 0 in case of success",MatchSource.CODE_COMMENT,test/stressInterpreter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx:105,Testability,test,test,105,"// Since this routine can be called (almost) directly from the command line and is used; // in automated test, it must return 0 in case of success",MatchSource.CODE_COMMENT,test/stressInterpreter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:721,Availability,avail,availability,721,"// @(#)root/test:$Id$; // Author: David Smith 20/10/14; /////////////////////////////////////////////////////////////////; //; //___A test for I/O plugins by reading files___; //; // The files used in this test have been generated by; // stress.cxx and preplaced on some data servers.; // stressIOPlugins reads the remote files via various data; // access protocols to test ROOT IO plugins. The data read are; // tested via tests based on some of stress.cxx tests.; //; // Can be run as:; // stressIOPlugins [name]; //; // The name parameter is a protocol name, as expected; // in a url. The supported names are: xroot, root, http, https.; // If the name is omitted a selection of schemes are tested; // based on feature availability:; //; // feature protocol multithreaded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavix",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:779,Availability,avail,available,779,"// @(#)root/test:$Id$; // Author: David Smith 20/10/14; /////////////////////////////////////////////////////////////////; //; //___A test for I/O plugins by reading files___; //; // The files used in this test have been generated by; // stress.cxx and preplaced on some data servers.; // stressIOPlugins reads the remote files via various data; // access protocols to test ROOT IO plugins. The data read are; // tested via tests based on some of stress.cxx tests.; //; // Can be run as:; // stressIOPlugins [name]; //; // The name parameter is a protocol name, as expected; // in a url. The supported names are: xroot, root, http, https.; // If the name is omitted a selection of schemes are tested; // based on feature availability:; //; // feature protocol multithreaded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavix",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:356,Integrability,protocol,protocols,356,"// @(#)root/test:$Id$; // Author: David Smith 20/10/14; /////////////////////////////////////////////////////////////////; //; //___A test for I/O plugins by reading files___; //; // The files used in this test have been generated by; // stress.cxx and preplaced on some data servers.; // stressIOPlugins reads the remote files via various data; // access protocols to test ROOT IO plugins. The data read are; // tested via tests based on some of stress.cxx tests.; //; // Can be run as:; // stressIOPlugins [name]; //; // The name parameter is a protocol name, as expected; // in a url. The supported names are: xroot, root, http, https.; // If the name is omitted a selection of schemes are tested; // based on feature availability:; //; // feature protocol multithreaded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavix",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:547,Integrability,protocol,protocol,547,"// @(#)root/test:$Id$; // Author: David Smith 20/10/14; /////////////////////////////////////////////////////////////////; //; //___A test for I/O plugins by reading files___; //; // The files used in this test have been generated by; // stress.cxx and preplaced on some data servers.; // stressIOPlugins reads the remote files via various data; // access protocols to test ROOT IO plugins. The data read are; // tested via tests based on some of stress.cxx tests.; //; // Can be run as:; // stressIOPlugins [name]; //; // The name parameter is a protocol name, as expected; // in a url. The supported names are: xroot, root, http, https.; // If the name is omitted a selection of schemes are tested; // based on feature availability:; //; // feature protocol multithreaded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavix",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:751,Integrability,protocol,protocol,751,"// @(#)root/test:$Id$; // Author: David Smith 20/10/14; /////////////////////////////////////////////////////////////////; //; //___A test for I/O plugins by reading files___; //; // The files used in this test have been generated by; // stress.cxx and preplaced on some data servers.; // stressIOPlugins reads the remote files via various data; // access protocols to test ROOT IO plugins. The data read are; // tested via tests based on some of stress.cxx tests.; //; // Can be run as:; // stressIOPlugins [name]; //; // The name parameter is a protocol name, as expected; // in a url. The supported names are: xroot, root, http, https.; // If the name is omitted a selection of schemes are tested; // based on feature availability:; //; // feature protocol multithreaded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavix",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:1059,Integrability,protocol,protocol,1059,"// @(#)root/test:$Id$; // Author: David Smith 20/10/14; /////////////////////////////////////////////////////////////////; //; //___A test for I/O plugins by reading files___; //; // The files used in this test have been generated by; // stress.cxx and preplaced on some data servers.; // stressIOPlugins reads the remote files via various data; // access protocols to test ROOT IO plugins. The data read are; // tested via tests based on some of stress.cxx tests.; //; // Can be run as:; // stressIOPlugins [name]; //; // The name parameter is a protocol name, as expected; // in a url. The supported names are: xroot, root, http, https.; // If the name is omitted a selection of schemes are tested; // based on feature availability:; //; // feature protocol multithreaded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavix",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:147,Modifiability,plugin,plugins,147,"// @(#)root/test:$Id$; // Author: David Smith 20/10/14; /////////////////////////////////////////////////////////////////; //; //___A test for I/O plugins by reading files___; //; // The files used in this test have been generated by; // stress.cxx and preplaced on some data servers.; // stressIOPlugins reads the remote files via various data; // access protocols to test ROOT IO plugins. The data read are; // tested via tests based on some of stress.cxx tests.; //; // Can be run as:; // stressIOPlugins [name]; //; // The name parameter is a protocol name, as expected; // in a url. The supported names are: xroot, root, http, https.; // If the name is omitted a selection of schemes are tested; // based on feature availability:; //; // feature protocol multithreaded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavix",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:382,Modifiability,plugin,plugins,382,"// @(#)root/test:$Id$; // Author: David Smith 20/10/14; /////////////////////////////////////////////////////////////////; //; //___A test for I/O plugins by reading files___; //; // The files used in this test have been generated by; // stress.cxx and preplaced on some data servers.; // stressIOPlugins reads the remote files via various data; // access protocols to test ROOT IO plugins. The data read are; // tested via tests based on some of stress.cxx tests.; //; // Can be run as:; // stressIOPlugins [name]; //; // The name parameter is a protocol name, as expected; // in a url. The supported names are: xroot, root, http, https.; // If the name is omitted a selection of schemes are tested; // based on feature availability:; //; // feature protocol multithreaded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavix",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:1356,Modifiability,plugin,plugin,1356," access protocols to test ROOT IO plugins. The data read are; // tested via tests based on some of stress.cxx tests.; //; // Can be run as:; // stressIOPlugins [name]; //; // The name parameter is a protocol name, as expected; // in a url. The supported names are: xroot, root, http, https.; // If the name is omitted a selection of schemes are tested; // based on feature availability:; //; // feature protocol multithreaded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... OK; // Test 4 : Filename formats when adding files to TChain.......... using Event_8a.root and Event_8b.root; // : treename in chain..................................... OK; // : treename to AddFile................................... OK; // : treename in filenames, slash-suffix sty",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:1580,Modifiability,plugin,plugin,1580,"d; // in a url. The supported names are: xroot, root, http, https.; // If the name is omitted a selection of schemes are tested; // based on feature availability:; //; // feature protocol multithreaded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... OK; // Test 4 : Filename formats when adding files to TChain.......... using Event_8a.root and Event_8b.root; // : treename in chain..................................... OK; // : treename to AddFile................................... OK; // : treename in filenames, slash-suffix style............. OK; // : bad treename to AddFile, good in filename............. OK; // : treename and url query in filename.................... OK; // : treename given in url frag in filename................ OK; // : filenam",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:1804,Modifiability,plugin,plugin,1804,"aded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... OK; // Test 4 : Filename formats when adding files to TChain.......... using Event_8a.root and Event_8b.root; // : treename in chain..................................... OK; // : treename to AddFile................................... OK; // : treename in filenames, slash-suffix style............. OK; // : bad treename to AddFile, good in filename............. OK; // : treename and url query in filename.................... OK; // : treename given in url frag in filename................ OK; // : filename with a url query in Add...................... OK; // ****************************************************************************; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:1957,Modifiability,plugin,plugin,1957,"aded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... OK; // Test 4 : Filename formats when adding files to TChain.......... using Event_8a.root and Event_8b.root; // : treename in chain..................................... OK; // : treename to AddFile................................... OK; // : treename in filenames, slash-suffix style............. OK; // : bad treename to AddFile, good in filename............. OK; // : treename and url query in filename.................... OK; // : treename given in url frag in filename................ OK; // : filename with a url query in Add...................... OK; // ****************************************************************************; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:349,Security,access,access,349,"// @(#)root/test:$Id$; // Author: David Smith 20/10/14; /////////////////////////////////////////////////////////////////; //; //___A test for I/O plugins by reading files___; //; // The files used in this test have been generated by; // stress.cxx and preplaced on some data servers.; // stressIOPlugins reads the remote files via various data; // access protocols to test ROOT IO plugins. The data read are; // tested via tests based on some of stress.cxx tests.; //; // Can be run as:; // stressIOPlugins [name]; //; // The name parameter is a protocol name, as expected; // in a url. The supported names are: xroot, root, http, https.; // If the name is omitted a selection of schemes are tested; // based on feature availability:; //; // feature protocol multithreaded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavix",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: David Smith 20/10/14; /////////////////////////////////////////////////////////////////; //; //___A test for I/O plugins by reading files___; //; // The files used in this test have been generated by; // stress.cxx and preplaced on some data servers.; // stressIOPlugins reads the remote files via various data; // access protocols to test ROOT IO plugins. The data read are; // tested via tests based on some of stress.cxx tests.; //; // Can be run as:; // stressIOPlugins [name]; //; // The name parameter is a protocol name, as expected; // in a url. The supported names are: xroot, root, http, https.; // If the name is omitted a selection of schemes are tested; // based on feature availability:; //; // feature protocol multithreaded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavix",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:134,Testability,test,test,134,"// @(#)root/test:$Id$; // Author: David Smith 20/10/14; /////////////////////////////////////////////////////////////////; //; //___A test for I/O plugins by reading files___; //; // The files used in this test have been generated by; // stress.cxx and preplaced on some data servers.; // stressIOPlugins reads the remote files via various data; // access protocols to test ROOT IO plugins. The data read are; // tested via tests based on some of stress.cxx tests.; //; // Can be run as:; // stressIOPlugins [name]; //; // The name parameter is a protocol name, as expected; // in a url. The supported names are: xroot, root, http, https.; // If the name is omitted a selection of schemes are tested; // based on feature availability:; //; // feature protocol multithreaded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavix",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:206,Testability,test,test,206,"// @(#)root/test:$Id$; // Author: David Smith 20/10/14; /////////////////////////////////////////////////////////////////; //; //___A test for I/O plugins by reading files___; //; // The files used in this test have been generated by; // stress.cxx and preplaced on some data servers.; // stressIOPlugins reads the remote files via various data; // access protocols to test ROOT IO plugins. The data read are; // tested via tests based on some of stress.cxx tests.; //; // Can be run as:; // stressIOPlugins [name]; //; // The name parameter is a protocol name, as expected; // in a url. The supported names are: xroot, root, http, https.; // If the name is omitted a selection of schemes are tested; // based on feature availability:; //; // feature protocol multithreaded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavix",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:369,Testability,test,test,369,"// @(#)root/test:$Id$; // Author: David Smith 20/10/14; /////////////////////////////////////////////////////////////////; //; //___A test for I/O plugins by reading files___; //; // The files used in this test have been generated by; // stress.cxx and preplaced on some data servers.; // stressIOPlugins reads the remote files via various data; // access protocols to test ROOT IO plugins. The data read are; // tested via tests based on some of stress.cxx tests.; //; // Can be run as:; // stressIOPlugins [name]; //; // The name parameter is a protocol name, as expected; // in a url. The supported names are: xroot, root, http, https.; // If the name is omitted a selection of schemes are tested; // based on feature availability:; //; // feature protocol multithreaded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavix",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:413,Testability,test,tested,413,"// @(#)root/test:$Id$; // Author: David Smith 20/10/14; /////////////////////////////////////////////////////////////////; //; //___A test for I/O plugins by reading files___; //; // The files used in this test have been generated by; // stress.cxx and preplaced on some data servers.; // stressIOPlugins reads the remote files via various data; // access protocols to test ROOT IO plugins. The data read are; // tested via tests based on some of stress.cxx tests.; //; // Can be run as:; // stressIOPlugins [name]; //; // The name parameter is a protocol name, as expected; // in a url. The supported names are: xroot, root, http, https.; // If the name is omitted a selection of schemes are tested; // based on feature availability:; //; // feature protocol multithreaded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavix",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:424,Testability,test,tests,424,"// @(#)root/test:$Id$; // Author: David Smith 20/10/14; /////////////////////////////////////////////////////////////////; //; //___A test for I/O plugins by reading files___; //; // The files used in this test have been generated by; // stress.cxx and preplaced on some data servers.; // stressIOPlugins reads the remote files via various data; // access protocols to test ROOT IO plugins. The data read are; // tested via tests based on some of stress.cxx tests.; //; // Can be run as:; // stressIOPlugins [name]; //; // The name parameter is a protocol name, as expected; // in a url. The supported names are: xroot, root, http, https.; // If the name is omitted a selection of schemes are tested; // based on feature availability:; //; // feature protocol multithreaded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavix",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:458,Testability,test,tests,458,"// @(#)root/test:$Id$; // Author: David Smith 20/10/14; /////////////////////////////////////////////////////////////////; //; //___A test for I/O plugins by reading files___; //; // The files used in this test have been generated by; // stress.cxx and preplaced on some data servers.; // stressIOPlugins reads the remote files via various data; // access protocols to test ROOT IO plugins. The data read are; // tested via tests based on some of stress.cxx tests.; //; // Can be run as:; // stressIOPlugins [name]; //; // The name parameter is a protocol name, as expected; // in a url. The supported names are: xroot, root, http, https.; // If the name is omitted a selection of schemes are tested; // based on feature availability:; //; // feature protocol multithreaded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavix",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:693,Testability,test,tested,693,"// @(#)root/test:$Id$; // Author: David Smith 20/10/14; /////////////////////////////////////////////////////////////////; //; //___A test for I/O plugins by reading files___; //; // The files used in this test have been generated by; // stress.cxx and preplaced on some data servers.; // stressIOPlugins reads the remote files via various data; // access protocols to test ROOT IO plugins. The data read are; // tested via tests based on some of stress.cxx tests.; //; // Can be run as:; // stressIOPlugins [name]; //; // The name parameter is a protocol name, as expected; // in a url. The supported names are: xroot, root, http, https.; // If the name is omitted a selection of schemes are tested; // based on feature availability:; //; // feature protocol multithreaded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavix",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:774,Testability,test,test,774,"// @(#)root/test:$Id$; // Author: David Smith 20/10/14; /////////////////////////////////////////////////////////////////; //; //___A test for I/O plugins by reading files___; //; // The files used in this test have been generated by; // stress.cxx and preplaced on some data servers.; // stressIOPlugins reads the remote files via various data; // access protocols to test ROOT IO plugins. The data read are; // tested via tests based on some of stress.cxx tests.; //; // Can be run as:; // stressIOPlugins [name]; //; // The name parameter is a protocol name, as expected; // in a url. The supported names are: xroot, root, http, https.; // If the name is omitted a selection of schemes are tested; // based on feature availability:; //; // feature protocol multithreaded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavix",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:882,Testability,test,test,882,"// @(#)root/test:$Id$; // Author: David Smith 20/10/14; /////////////////////////////////////////////////////////////////; //; //___A test for I/O plugins by reading files___; //; // The files used in this test have been generated by; // stress.cxx and preplaced on some data servers.; // stressIOPlugins reads the remote files via various data; // access protocols to test ROOT IO plugins. The data read are; // tested via tests based on some of stress.cxx tests.; //; // Can be run as:; // stressIOPlugins [name]; //; // The name parameter is a protocol name, as expected; // in a url. The supported names are: xroot, root, http, https.; // If the name is omitted a selection of schemes are tested; // based on feature availability:; //; // feature protocol multithreaded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavix",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:901,Testability,test,tests,901,"// @(#)root/test:$Id$; // Author: David Smith 20/10/14; /////////////////////////////////////////////////////////////////; //; //___A test for I/O plugins by reading files___; //; // The files used in this test have been generated by; // stress.cxx and preplaced on some data servers.; // stressIOPlugins reads the remote files via various data; // access protocols to test ROOT IO plugins. The data read are; // tested via tests based on some of stress.cxx tests.; //; // Can be run as:; // stressIOPlugins [name]; //; // The name parameter is a protocol name, as expected; // in a url. The supported names are: xroot, root, http, https.; // If the name is omitted a selection of schemes are tested; // based on feature availability:; //; // feature protocol multithreaded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavix",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:1050,Testability,test,test,1050,"// @(#)root/test:$Id$; // Author: David Smith 20/10/14; /////////////////////////////////////////////////////////////////; //; //___A test for I/O plugins by reading files___; //; // The files used in this test have been generated by; // stress.cxx and preplaced on some data servers.; // stressIOPlugins reads the remote files via various data; // access protocols to test ROOT IO plugins. The data read are; // tested via tests based on some of stress.cxx tests.; //; // Can be run as:; // stressIOPlugins [name]; //; // The name parameter is a protocol name, as expected; // in a url. The supported names are: xroot, root, http, https.; // If the name is omitted a selection of schemes are tested; // based on feature availability:; //; // feature protocol multithreaded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavix",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:1079,Testability,Test,Test,1079,"// @(#)root/test:$Id$; // Author: David Smith 20/10/14; /////////////////////////////////////////////////////////////////; //; //___A test for I/O plugins by reading files___; //; // The files used in this test have been generated by; // stress.cxx and preplaced on some data servers.; // stressIOPlugins reads the remote files via various data; // access protocols to test ROOT IO plugins. The data read are; // tested via tests based on some of stress.cxx tests.; //; // Can be run as:; // stressIOPlugins [name]; //; // The name parameter is a protocol name, as expected; // in a url. The supported names are: xroot, root, http, https.; // If the name is omitted a selection of schemes are tested; // based on feature availability:; //; // feature protocol multithreaded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavix",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:1249,Testability,Test,Test,1249,"been generated by; // stress.cxx and preplaced on some data servers.; // stressIOPlugins reads the remote files via various data; // access protocols to test ROOT IO plugins. The data read are; // tested via tests based on some of stress.cxx tests.; //; // Can be run as:; // stressIOPlugins [name]; //; // The name parameter is a protocol name, as expected; // in a url. The supported names are: xroot, root, http, https.; // If the name is omitted a selection of schemes are tested; // based on feature availability:; //; // feature protocol multithreaded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... OK; // Test 4 : Filename formats when adding files to TChain.......... using Event_8a.root and Event_8b.root; // : treename in chain.................",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:1473,Testability,Test,Test,1473,"; // stressIOPlugins [name]; //; // The name parameter is a protocol name, as expected; // in a url. The supported names are: xroot, root, http, https.; // If the name is omitted a selection of schemes are tested; // based on feature availability:; //; // feature protocol multithreaded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... OK; // Test 4 : Filename formats when adding files to TChain.......... using Event_8a.root and Event_8b.root; // : treename in chain..................................... OK; // : treename to AddFile................................... OK; // : treename in filenames, slash-suffix style............. OK; // : bad treename to AddFile, good in filename............. OK; // : treename and url query in filename...............",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:1482,Testability,Test,Test,1482,"; // stressIOPlugins [name]; //; // The name parameter is a protocol name, as expected; // in a url. The supported names are: xroot, root, http, https.; // If the name is omitted a selection of schemes are tested; // based on feature availability:; //; // feature protocol multithreaded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... OK; // Test 4 : Filename formats when adding files to TChain.......... using Event_8a.root and Event_8b.root; // : treename in chain..................................... OK; // : treename to AddFile................................... OK; // : treename in filenames, slash-suffix style............. OK; // : bad treename to AddFile, good in filename............. OK; // : treename and url query in filename...............",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:1635,Testability,Test,Test,1635," // If the name is omitted a selection of schemes are tested; // based on feature availability:; //; // feature protocol multithreaded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... OK; // Test 4 : Filename formats when adding files to TChain.......... using Event_8a.root and Event_8b.root; // : treename in chain..................................... OK; // : treename to AddFile................................... OK; // : treename in filenames, slash-suffix style............. OK; // : bad treename to AddFile, good in filename............. OK; // : treename and url query in filename.................... OK; // : treename given in url frag in filename................ OK; // : filename with a url query in Add...................... OK; // ************",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:1697,Testability,Test,Test,1697,"eature availability:; //; // feature protocol multithreaded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... OK; // Test 4 : Filename formats when adding files to TChain.......... using Event_8a.root and Event_8b.root; // : treename in chain..................................... OK; // : treename to AddFile................................... OK; // : treename in filenames, slash-suffix style............. OK; // : bad treename to AddFile, good in filename............. OK; // : treename and url query in filename.................... OK; // : treename given in url frag in filename................ OK; // : filename with a url query in Add...................... OK; // ****************************************************************************; //_______",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:2074,Testability,Test,Test,2074,"aded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... OK; // Test 4 : Filename formats when adding files to TChain.......... using Event_8a.root and Event_8b.root; // : treename in chain..................................... OK; // : treename to AddFile................................... OK; // : treename in filenames, slash-suffix style............. OK; // : bad treename to AddFile, good in filename............. OK; // : treename and url query in filename.................... OK; // : treename given in url frag in filename................ OK; // : filename with a url query in Add...................... OK; // ****************************************************************************; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:9,Testability,test,test,9,"// Print test program number and its title",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:37,Testability,test,test,37,"//Main control function invoking all test programs",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:110,Testability,Test,Test,110,"////////////////////////////////////////////////////////////////////////////////; /// based on stress5(); /// Test of Postscript.; /// Make a complex picture. Verify number of lines on ps file; /// Testing automatically the graphics package is a complex problem.; /// The best way we have found is to generate a Postscript image; /// of a complex canvas containing many objects.; /// The number of lines in the ps file is compared with a reference run.; /// A few lines (up to 2 or 3) of difference may be expected because; /// Postscript works with floats. The date and time of the run are also; /// different.; /// You can also inspect visually the ps file with a ps viewer.",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:198,Testability,Test,Testing,198,"////////////////////////////////////////////////////////////////////////////////; /// based on stress5(); /// Test of Postscript.; /// Make a complex picture. Verify number of lines on ps file; /// Testing automatically the graphics package is a complex problem.; /// The best way we have found is to generate a Postscript image; /// of a complex canvas containing many objects.; /// The number of lines in the ps file is compared with a reference run.; /// A few lines (up to 2 or 3) of difference may be expected because; /// Postscript works with floats. The date and time of the run are also; /// different.; /// You can also inspect visually the ps file with a ps viewer.",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:36,Testability,test,test,36,"//Get objects generated in previous test",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:29,Usability,learn,learn,29,"//one entry is sufficient to learn",MatchSource.CODE_COMMENT,test/stressIOPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIterators.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Anar Manafov 01/04/2008; //----------------------------------------------------------------; // This is a tests ROOT Iterators and STL algorithms.; // The test project covers the following cases:; // 1 - TList with std::for_each (Full iteration: from the Begin up to the End); // 2 - TList with std::find_if; // 3 - TList with std::count_if; // 4 - TObjArray with std::for_each (Full iteration: from the Begin up to the End); // 5 - TObjArray with std::find_if; // 6 - TObjArray with std::count_if; // 7 - TMap with std::for_each (Full iteration: from the Begin up to the End); // 8 - TMap with std::for_each (Partial iteration: from the Begin up to the 3rd element); // 9 - TMap with std::find_if; // 10 - TMap with std::count_if; // 11 - TBtree with std::for_each (Full iteration: from the Begin up to the End); // 12 - TBtree with std::find_if; // 13 - TBtree with std::count_if; // 14 - TOrdCollection with std::for_each (Full iteration: from the Begin up to the End); // 15 - TOrdCollection with std::find_if; // 16 - TOrdCollection with std::count_if; // 17 - TRefArray with std::for_each (Full iteration: from the Begin up to the End); // 18 - TRefArray with std::find_if; // 19 - TRefArray with std::count_if; // STD",MatchSource.CODE_COMMENT,test/stressIterators.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIterators.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIterators.cxx:140,Testability,test,tests,140,"// @(#)root/test:$Id$; // Author: Anar Manafov 01/04/2008; //----------------------------------------------------------------; // This is a tests ROOT Iterators and STL algorithms.; // The test project covers the following cases:; // 1 - TList with std::for_each (Full iteration: from the Begin up to the End); // 2 - TList with std::find_if; // 3 - TList with std::count_if; // 4 - TObjArray with std::for_each (Full iteration: from the Begin up to the End); // 5 - TObjArray with std::find_if; // 6 - TObjArray with std::count_if; // 7 - TMap with std::for_each (Full iteration: from the Begin up to the End); // 8 - TMap with std::for_each (Partial iteration: from the Begin up to the 3rd element); // 9 - TMap with std::find_if; // 10 - TMap with std::count_if; // 11 - TBtree with std::for_each (Full iteration: from the Begin up to the End); // 12 - TBtree with std::find_if; // 13 - TBtree with std::count_if; // 14 - TOrdCollection with std::for_each (Full iteration: from the Begin up to the End); // 15 - TOrdCollection with std::find_if; // 16 - TOrdCollection with std::count_if; // 17 - TRefArray with std::for_each (Full iteration: from the Begin up to the End); // 18 - TRefArray with std::find_if; // 19 - TRefArray with std::count_if; // STD",MatchSource.CODE_COMMENT,test/stressIterators.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIterators.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIterators.cxx:189,Testability,test,test,189,"// @(#)root/test:$Id$; // Author: Anar Manafov 01/04/2008; //----------------------------------------------------------------; // This is a tests ROOT Iterators and STL algorithms.; // The test project covers the following cases:; // 1 - TList with std::for_each (Full iteration: from the Begin up to the End); // 2 - TList with std::find_if; // 3 - TList with std::count_if; // 4 - TObjArray with std::for_each (Full iteration: from the Begin up to the End); // 5 - TObjArray with std::find_if; // 6 - TObjArray with std::count_if; // 7 - TMap with std::for_each (Full iteration: from the Begin up to the End); // 8 - TMap with std::for_each (Partial iteration: from the Begin up to the 3rd element); // 9 - TMap with std::find_if; // 10 - TMap with std::count_if; // 11 - TBtree with std::for_each (Full iteration: from the Begin up to the End); // 12 - TBtree with std::find_if; // 13 - TBtree with std::count_if; // 14 - TOrdCollection with std::for_each (Full iteration: from the Begin up to the End); // 15 - TOrdCollection with std::find_if; // 16 - TOrdCollection with std::count_if; // 17 - TRefArray with std::for_each (Full iteration: from the Begin up to the End); // 18 - TRefArray with std::find_if; // 19 - TRefArray with std::count_if; // STD",MatchSource.CODE_COMMENT,test/stressIterators.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIterators.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressIterators.h:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Anar Manafov 18/04/2008",MatchSource.CODE_COMMENT,test/stressIterators.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIterators.h
https://github.com/root-project/root/tree/v6-32-06/test/stressIterators.h:67,Testability,test,test,67,"// Here we have a collection of functors and functions used by the test suit; //______________________________________________________________________________",MatchSource.CODE_COMMENT,test/stressIterators.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIterators.h
https://github.com/root-project/root/tree/v6-32-06/test/stressLinear.cxx:83,Testability,Test,Test,83,"//; //------------------------------------------------------------------------; // Test matrix promises; //",MatchSource.CODE_COMMENT,test/stressLinear.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressLinear.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressLinear.cxx:8,Testability,test,test,8,"// Next test disabled because it produces (of course) a Warning",MatchSource.CODE_COMMENT,test/stressLinear.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressLinear.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressLinear.cxx:3,Integrability,contract,contracting,3,"// contracting matrix",MatchSource.CODE_COMMENT,test/stressLinear.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressLinear.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressLinear.cxx:3,Integrability,contract,contracting,3,"// contracting matrix",MatchSource.CODE_COMMENT,test/stressLinear.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressLinear.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressLinear.cxx:3,Performance,Perform,Perform,3,"// Perform the SVD decomposition of the transposed matrix.",MatchSource.CODE_COMMENT,test/stressLinear.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressLinear.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressLinear.cxx:40,Testability,test,tested,40,"// General matrix EigenVector algorithm tested on symmetric matrix",MatchSource.CODE_COMMENT,test/stressLinear.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressLinear.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressLinear.cxx:83,Testability,Test,Test,83,"//; //------------------------------------------------------------------------; // Test decomposition I/O; //",MatchSource.CODE_COMMENT,test/stressLinear.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressLinear.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:1164,Modifiability,variab,variable,1164,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathCore Benchmark test suite; // ==============================; //; // This program performs tests :; // - mathematical functions in particular the statistical functions by estimating; // pdf, cdf and quantiles. cdf are estimated directly and compared with calculated integral from pdf; // - physics vectors (2D, 3D and 4D) including I/O for every type and for both double and Double32_t; // - SMatrix and SVectors including I/O for double and Double32_t types; // - I/O of complex objects which dictionary has been generated using CINT (default) or Reflex; // TrackD and TrackD32 which contain physics vectors of double and Double32_t; // TrackErrD and TrackErrD32 which contain physics vectors and an SMatrix of double and Double32_t; // VecTrackD which contains an std::vector<TrackD>; //; //; // the program cun run only in compiled mode.; // To run outside ROOT do:; //; // > cd $ROOTSYS/test; // > make stressMathMore; // > ./stressMathMore; //; // to run using REflex set before compiling the environment variable useReflex.; //; // > export useReflex=1; // > make stressMathMore; // > ./stressMathMore; //; // to run inside ROOT using ACliC; // for using CINT you need first to have the library libTrackMathCoreDict.so; // (type: make libTrackMathCoreDict.so to make it); //; // root> gSystem->Load(""libMathCore"");; // root> gSystem->Load(""libTree"");; // root> gSystem->Load(""libHist"");; // root> .x stressMathCore.cxx+; //; // for using Reflex dictionaries you need first to have the library libTrackMathCoreRflx.so; // (type: make libTrackMathCoreRflx.so to make it); //; // root> gSystem->Load(""libMathCore"");; // root> gSystem->Load(""libTree"");; // root> gSystem->Load(""libHist"");; // root> gSystem->Load(""libReflex"");; // root> gSystem->SetIncludePath(""-DUSE_REFLEX"");; // root> .x stressMathCore.cxx+; //; //",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:236,Performance,perform,performs,236,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathCore Benchmark test suite; // ==============================; //; // This program performs tests :; // - mathematical functions in particular the statistical functions by estimating; // pdf, cdf and quantiles. cdf are estimated directly and compared with calculated integral from pdf; // - physics vectors (2D, 3D and 4D) including I/O for every type and for both double and Double32_t; // - SMatrix and SVectors including I/O for double and Double32_t types; // - I/O of complex objects which dictionary has been generated using CINT (default) or Reflex; // TrackD and TrackD32 which contain physics vectors of double and Double32_t; // TrackErrD and TrackErrD32 which contain physics vectors and an SMatrix of double and Double32_t; // VecTrackD which contains an std::vector<TrackD>; //; //; // the program cun run only in compiled mode.; // To run outside ROOT do:; //; // > cd $ROOTSYS/test; // > make stressMathMore; // > ./stressMathMore; //; // to run using REflex set before compiling the environment variable useReflex.; //; // > export useReflex=1; // > make stressMathMore; // > ./stressMathMore; //; // to run inside ROOT using ACliC; // for using CINT you need first to have the library libTrackMathCoreDict.so; // (type: make libTrackMathCoreDict.so to make it); //; // root> gSystem->Load(""libMathCore"");; // root> gSystem->Load(""libTree"");; // root> gSystem->Load(""libHist"");; // root> .x stressMathCore.cxx+; //; // for using Reflex dictionaries you need first to have the library libTrackMathCoreRflx.so; // (type: make libTrackMathCoreRflx.so to make it); //; // root> gSystem->Load(""libMathCore"");; // root> gSystem->Load(""libTree"");; // root> gSystem->Load(""libHist"");; // root> gSystem->Load(""libReflex"");; // root> gSystem->SetIncludePath(""-DUSE_REFLEX"");; // root> .x stressMathCore.cxx+; //; //",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:1454,Performance,Load,Load,1454,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathCore Benchmark test suite; // ==============================; //; // This program performs tests :; // - mathematical functions in particular the statistical functions by estimating; // pdf, cdf and quantiles. cdf are estimated directly and compared with calculated integral from pdf; // - physics vectors (2D, 3D and 4D) including I/O for every type and for both double and Double32_t; // - SMatrix and SVectors including I/O for double and Double32_t types; // - I/O of complex objects which dictionary has been generated using CINT (default) or Reflex; // TrackD and TrackD32 which contain physics vectors of double and Double32_t; // TrackErrD and TrackErrD32 which contain physics vectors and an SMatrix of double and Double32_t; // VecTrackD which contains an std::vector<TrackD>; //; //; // the program cun run only in compiled mode.; // To run outside ROOT do:; //; // > cd $ROOTSYS/test; // > make stressMathMore; // > ./stressMathMore; //; // to run using REflex set before compiling the environment variable useReflex.; //; // > export useReflex=1; // > make stressMathMore; // > ./stressMathMore; //; // to run inside ROOT using ACliC; // for using CINT you need first to have the library libTrackMathCoreDict.so; // (type: make libTrackMathCoreDict.so to make it); //; // root> gSystem->Load(""libMathCore"");; // root> gSystem->Load(""libTree"");; // root> gSystem->Load(""libHist"");; // root> .x stressMathCore.cxx+; //; // for using Reflex dictionaries you need first to have the library libTrackMathCoreRflx.so; // (type: make libTrackMathCoreRflx.so to make it); //; // root> gSystem->Load(""libMathCore"");; // root> gSystem->Load(""libTree"");; // root> gSystem->Load(""libHist"");; // root> gSystem->Load(""libReflex"");; // root> gSystem->SetIncludePath(""-DUSE_REFLEX"");; // root> .x stressMathCore.cxx+; //; //",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:1494,Performance,Load,Load,1494,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathCore Benchmark test suite; // ==============================; //; // This program performs tests :; // - mathematical functions in particular the statistical functions by estimating; // pdf, cdf and quantiles. cdf are estimated directly and compared with calculated integral from pdf; // - physics vectors (2D, 3D and 4D) including I/O for every type and for both double and Double32_t; // - SMatrix and SVectors including I/O for double and Double32_t types; // - I/O of complex objects which dictionary has been generated using CINT (default) or Reflex; // TrackD and TrackD32 which contain physics vectors of double and Double32_t; // TrackErrD and TrackErrD32 which contain physics vectors and an SMatrix of double and Double32_t; // VecTrackD which contains an std::vector<TrackD>; //; //; // the program cun run only in compiled mode.; // To run outside ROOT do:; //; // > cd $ROOTSYS/test; // > make stressMathMore; // > ./stressMathMore; //; // to run using REflex set before compiling the environment variable useReflex.; //; // > export useReflex=1; // > make stressMathMore; // > ./stressMathMore; //; // to run inside ROOT using ACliC; // for using CINT you need first to have the library libTrackMathCoreDict.so; // (type: make libTrackMathCoreDict.so to make it); //; // root> gSystem->Load(""libMathCore"");; // root> gSystem->Load(""libTree"");; // root> gSystem->Load(""libHist"");; // root> .x stressMathCore.cxx+; //; // for using Reflex dictionaries you need first to have the library libTrackMathCoreRflx.so; // (type: make libTrackMathCoreRflx.so to make it); //; // root> gSystem->Load(""libMathCore"");; // root> gSystem->Load(""libTree"");; // root> gSystem->Load(""libHist"");; // root> gSystem->Load(""libReflex"");; // root> gSystem->SetIncludePath(""-DUSE_REFLEX"");; // root> .x stressMathCore.cxx+; //; //",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:1530,Performance,Load,Load,1530,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathCore Benchmark test suite; // ==============================; //; // This program performs tests :; // - mathematical functions in particular the statistical functions by estimating; // pdf, cdf and quantiles. cdf are estimated directly and compared with calculated integral from pdf; // - physics vectors (2D, 3D and 4D) including I/O for every type and for both double and Double32_t; // - SMatrix and SVectors including I/O for double and Double32_t types; // - I/O of complex objects which dictionary has been generated using CINT (default) or Reflex; // TrackD and TrackD32 which contain physics vectors of double and Double32_t; // TrackErrD and TrackErrD32 which contain physics vectors and an SMatrix of double and Double32_t; // VecTrackD which contains an std::vector<TrackD>; //; //; // the program cun run only in compiled mode.; // To run outside ROOT do:; //; // > cd $ROOTSYS/test; // > make stressMathMore; // > ./stressMathMore; //; // to run using REflex set before compiling the environment variable useReflex.; //; // > export useReflex=1; // > make stressMathMore; // > ./stressMathMore; //; // to run inside ROOT using ACliC; // for using CINT you need first to have the library libTrackMathCoreDict.so; // (type: make libTrackMathCoreDict.so to make it); //; // root> gSystem->Load(""libMathCore"");; // root> gSystem->Load(""libTree"");; // root> gSystem->Load(""libHist"");; // root> .x stressMathCore.cxx+; //; // for using Reflex dictionaries you need first to have the library libTrackMathCoreRflx.so; // (type: make libTrackMathCoreRflx.so to make it); //; // root> gSystem->Load(""libMathCore"");; // root> gSystem->Load(""libTree"");; // root> gSystem->Load(""libHist"");; // root> gSystem->Load(""libReflex"");; // root> gSystem->SetIncludePath(""-DUSE_REFLEX"");; // root> .x stressMathCore.cxx+; //; //",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:1752,Performance,Load,Load,1752,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathCore Benchmark test suite; // ==============================; //; // This program performs tests :; // - mathematical functions in particular the statistical functions by estimating; // pdf, cdf and quantiles. cdf are estimated directly and compared with calculated integral from pdf; // - physics vectors (2D, 3D and 4D) including I/O for every type and for both double and Double32_t; // - SMatrix and SVectors including I/O for double and Double32_t types; // - I/O of complex objects which dictionary has been generated using CINT (default) or Reflex; // TrackD and TrackD32 which contain physics vectors of double and Double32_t; // TrackErrD and TrackErrD32 which contain physics vectors and an SMatrix of double and Double32_t; // VecTrackD which contains an std::vector<TrackD>; //; //; // the program cun run only in compiled mode.; // To run outside ROOT do:; //; // > cd $ROOTSYS/test; // > make stressMathMore; // > ./stressMathMore; //; // to run using REflex set before compiling the environment variable useReflex.; //; // > export useReflex=1; // > make stressMathMore; // > ./stressMathMore; //; // to run inside ROOT using ACliC; // for using CINT you need first to have the library libTrackMathCoreDict.so; // (type: make libTrackMathCoreDict.so to make it); //; // root> gSystem->Load(""libMathCore"");; // root> gSystem->Load(""libTree"");; // root> gSystem->Load(""libHist"");; // root> .x stressMathCore.cxx+; //; // for using Reflex dictionaries you need first to have the library libTrackMathCoreRflx.so; // (type: make libTrackMathCoreRflx.so to make it); //; // root> gSystem->Load(""libMathCore"");; // root> gSystem->Load(""libTree"");; // root> gSystem->Load(""libHist"");; // root> gSystem->Load(""libReflex"");; // root> gSystem->SetIncludePath(""-DUSE_REFLEX"");; // root> .x stressMathCore.cxx+; //; //",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:1792,Performance,Load,Load,1792,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathCore Benchmark test suite; // ==============================; //; // This program performs tests :; // - mathematical functions in particular the statistical functions by estimating; // pdf, cdf and quantiles. cdf are estimated directly and compared with calculated integral from pdf; // - physics vectors (2D, 3D and 4D) including I/O for every type and for both double and Double32_t; // - SMatrix and SVectors including I/O for double and Double32_t types; // - I/O of complex objects which dictionary has been generated using CINT (default) or Reflex; // TrackD and TrackD32 which contain physics vectors of double and Double32_t; // TrackErrD and TrackErrD32 which contain physics vectors and an SMatrix of double and Double32_t; // VecTrackD which contains an std::vector<TrackD>; //; //; // the program cun run only in compiled mode.; // To run outside ROOT do:; //; // > cd $ROOTSYS/test; // > make stressMathMore; // > ./stressMathMore; //; // to run using REflex set before compiling the environment variable useReflex.; //; // > export useReflex=1; // > make stressMathMore; // > ./stressMathMore; //; // to run inside ROOT using ACliC; // for using CINT you need first to have the library libTrackMathCoreDict.so; // (type: make libTrackMathCoreDict.so to make it); //; // root> gSystem->Load(""libMathCore"");; // root> gSystem->Load(""libTree"");; // root> gSystem->Load(""libHist"");; // root> .x stressMathCore.cxx+; //; // for using Reflex dictionaries you need first to have the library libTrackMathCoreRflx.so; // (type: make libTrackMathCoreRflx.so to make it); //; // root> gSystem->Load(""libMathCore"");; // root> gSystem->Load(""libTree"");; // root> gSystem->Load(""libHist"");; // root> gSystem->Load(""libReflex"");; // root> gSystem->SetIncludePath(""-DUSE_REFLEX"");; // root> .x stressMathCore.cxx+; //; //",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:1828,Performance,Load,Load,1828,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathCore Benchmark test suite; // ==============================; //; // This program performs tests :; // - mathematical functions in particular the statistical functions by estimating; // pdf, cdf and quantiles. cdf are estimated directly and compared with calculated integral from pdf; // - physics vectors (2D, 3D and 4D) including I/O for every type and for both double and Double32_t; // - SMatrix and SVectors including I/O for double and Double32_t types; // - I/O of complex objects which dictionary has been generated using CINT (default) or Reflex; // TrackD and TrackD32 which contain physics vectors of double and Double32_t; // TrackErrD and TrackErrD32 which contain physics vectors and an SMatrix of double and Double32_t; // VecTrackD which contains an std::vector<TrackD>; //; //; // the program cun run only in compiled mode.; // To run outside ROOT do:; //; // > cd $ROOTSYS/test; // > make stressMathMore; // > ./stressMathMore; //; // to run using REflex set before compiling the environment variable useReflex.; //; // > export useReflex=1; // > make stressMathMore; // > ./stressMathMore; //; // to run inside ROOT using ACliC; // for using CINT you need first to have the library libTrackMathCoreDict.so; // (type: make libTrackMathCoreDict.so to make it); //; // root> gSystem->Load(""libMathCore"");; // root> gSystem->Load(""libTree"");; // root> gSystem->Load(""libHist"");; // root> .x stressMathCore.cxx+; //; // for using Reflex dictionaries you need first to have the library libTrackMathCoreRflx.so; // (type: make libTrackMathCoreRflx.so to make it); //; // root> gSystem->Load(""libMathCore"");; // root> gSystem->Load(""libTree"");; // root> gSystem->Load(""libHist"");; // root> gSystem->Load(""libReflex"");; // root> gSystem->SetIncludePath(""-DUSE_REFLEX"");; // root> .x stressMathCore.cxx+; //; //",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:1864,Performance,Load,Load,1864,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathCore Benchmark test suite; // ==============================; //; // This program performs tests :; // - mathematical functions in particular the statistical functions by estimating; // pdf, cdf and quantiles. cdf are estimated directly and compared with calculated integral from pdf; // - physics vectors (2D, 3D and 4D) including I/O for every type and for both double and Double32_t; // - SMatrix and SVectors including I/O for double and Double32_t types; // - I/O of complex objects which dictionary has been generated using CINT (default) or Reflex; // TrackD and TrackD32 which contain physics vectors of double and Double32_t; // TrackErrD and TrackErrD32 which contain physics vectors and an SMatrix of double and Double32_t; // VecTrackD which contains an std::vector<TrackD>; //; //; // the program cun run only in compiled mode.; // To run outside ROOT do:; //; // > cd $ROOTSYS/test; // > make stressMathMore; // > ./stressMathMore; //; // to run using REflex set before compiling the environment variable useReflex.; //; // > export useReflex=1; // > make stressMathMore; // > ./stressMathMore; //; // to run inside ROOT using ACliC; // for using CINT you need first to have the library libTrackMathCoreDict.so; // (type: make libTrackMathCoreDict.so to make it); //; // root> gSystem->Load(""libMathCore"");; // root> gSystem->Load(""libTree"");; // root> gSystem->Load(""libHist"");; // root> .x stressMathCore.cxx+; //; // for using Reflex dictionaries you need first to have the library libTrackMathCoreRflx.so; // (type: make libTrackMathCoreRflx.so to make it); //; // root> gSystem->Load(""libMathCore"");; // root> gSystem->Load(""libTree"");; // root> gSystem->Load(""libHist"");; // root> gSystem->Load(""libReflex"");; // root> gSystem->SetIncludePath(""-DUSE_REFLEX"");; // root> .x stressMathCore.cxx+; //; //",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathCore Benchmark test suite; // ==============================; //; // This program performs tests :; // - mathematical functions in particular the statistical functions by estimating; // pdf, cdf and quantiles. cdf are estimated directly and compared with calculated integral from pdf; // - physics vectors (2D, 3D and 4D) including I/O for every type and for both double and Double32_t; // - SMatrix and SVectors including I/O for double and Double32_t types; // - I/O of complex objects which dictionary has been generated using CINT (default) or Reflex; // TrackD and TrackD32 which contain physics vectors of double and Double32_t; // TrackErrD and TrackErrD32 which contain physics vectors and an SMatrix of double and Double32_t; // VecTrackD which contains an std::vector<TrackD>; //; //; // the program cun run only in compiled mode.; // To run outside ROOT do:; //; // > cd $ROOTSYS/test; // > make stressMathMore; // > ./stressMathMore; //; // to run using REflex set before compiling the environment variable useReflex.; //; // > export useReflex=1; // > make stressMathMore; // > ./stressMathMore; //; // to run inside ROOT using ACliC; // for using CINT you need first to have the library libTrackMathCoreDict.so; // (type: make libTrackMathCoreDict.so to make it); //; // root> gSystem->Load(""libMathCore"");; // root> gSystem->Load(""libTree"");; // root> gSystem->Load(""libHist"");; // root> .x stressMathCore.cxx+; //; // for using Reflex dictionaries you need first to have the library libTrackMathCoreRflx.so; // (type: make libTrackMathCoreRflx.so to make it); //; // root> gSystem->Load(""libMathCore"");; // root> gSystem->Load(""libTree"");; // root> gSystem->Load(""libHist"");; // root> gSystem->Load(""libReflex"");; // root> gSystem->SetIncludePath(""-DUSE_REFLEX"");; // root> .x stressMathCore.cxx+; //; //",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:159,Testability,Benchmark,Benchmark,159,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathCore Benchmark test suite; // ==============================; //; // This program performs tests :; // - mathematical functions in particular the statistical functions by estimating; // pdf, cdf and quantiles. cdf are estimated directly and compared with calculated integral from pdf; // - physics vectors (2D, 3D and 4D) including I/O for every type and for both double and Double32_t; // - SMatrix and SVectors including I/O for double and Double32_t types; // - I/O of complex objects which dictionary has been generated using CINT (default) or Reflex; // TrackD and TrackD32 which contain physics vectors of double and Double32_t; // TrackErrD and TrackErrD32 which contain physics vectors and an SMatrix of double and Double32_t; // VecTrackD which contains an std::vector<TrackD>; //; //; // the program cun run only in compiled mode.; // To run outside ROOT do:; //; // > cd $ROOTSYS/test; // > make stressMathMore; // > ./stressMathMore; //; // to run using REflex set before compiling the environment variable useReflex.; //; // > export useReflex=1; // > make stressMathMore; // > ./stressMathMore; //; // to run inside ROOT using ACliC; // for using CINT you need first to have the library libTrackMathCoreDict.so; // (type: make libTrackMathCoreDict.so to make it); //; // root> gSystem->Load(""libMathCore"");; // root> gSystem->Load(""libTree"");; // root> gSystem->Load(""libHist"");; // root> .x stressMathCore.cxx+; //; // for using Reflex dictionaries you need first to have the library libTrackMathCoreRflx.so; // (type: make libTrackMathCoreRflx.so to make it); //; // root> gSystem->Load(""libMathCore"");; // root> gSystem->Load(""libTree"");; // root> gSystem->Load(""libHist"");; // root> gSystem->Load(""libReflex"");; // root> gSystem->SetIncludePath(""-DUSE_REFLEX"");; // root> .x stressMathCore.cxx+; //; //",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:169,Testability,test,test,169,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathCore Benchmark test suite; // ==============================; //; // This program performs tests :; // - mathematical functions in particular the statistical functions by estimating; // pdf, cdf and quantiles. cdf are estimated directly and compared with calculated integral from pdf; // - physics vectors (2D, 3D and 4D) including I/O for every type and for both double and Double32_t; // - SMatrix and SVectors including I/O for double and Double32_t types; // - I/O of complex objects which dictionary has been generated using CINT (default) or Reflex; // TrackD and TrackD32 which contain physics vectors of double and Double32_t; // TrackErrD and TrackErrD32 which contain physics vectors and an SMatrix of double and Double32_t; // VecTrackD which contains an std::vector<TrackD>; //; //; // the program cun run only in compiled mode.; // To run outside ROOT do:; //; // > cd $ROOTSYS/test; // > make stressMathMore; // > ./stressMathMore; //; // to run using REflex set before compiling the environment variable useReflex.; //; // > export useReflex=1; // > make stressMathMore; // > ./stressMathMore; //; // to run inside ROOT using ACliC; // for using CINT you need first to have the library libTrackMathCoreDict.so; // (type: make libTrackMathCoreDict.so to make it); //; // root> gSystem->Load(""libMathCore"");; // root> gSystem->Load(""libTree"");; // root> gSystem->Load(""libHist"");; // root> .x stressMathCore.cxx+; //; // for using Reflex dictionaries you need first to have the library libTrackMathCoreRflx.so; // (type: make libTrackMathCoreRflx.so to make it); //; // root> gSystem->Load(""libMathCore"");; // root> gSystem->Load(""libTree"");; // root> gSystem->Load(""libHist"");; // root> gSystem->Load(""libReflex"");; // root> gSystem->SetIncludePath(""-DUSE_REFLEX"");; // root> .x stressMathCore.cxx+; //; //",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:245,Testability,test,tests,245,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathCore Benchmark test suite; // ==============================; //; // This program performs tests :; // - mathematical functions in particular the statistical functions by estimating; // pdf, cdf and quantiles. cdf are estimated directly and compared with calculated integral from pdf; // - physics vectors (2D, 3D and 4D) including I/O for every type and for both double and Double32_t; // - SMatrix and SVectors including I/O for double and Double32_t types; // - I/O of complex objects which dictionary has been generated using CINT (default) or Reflex; // TrackD and TrackD32 which contain physics vectors of double and Double32_t; // TrackErrD and TrackErrD32 which contain physics vectors and an SMatrix of double and Double32_t; // VecTrackD which contains an std::vector<TrackD>; //; //; // the program cun run only in compiled mode.; // To run outside ROOT do:; //; // > cd $ROOTSYS/test; // > make stressMathMore; // > ./stressMathMore; //; // to run using REflex set before compiling the environment variable useReflex.; //; // > export useReflex=1; // > make stressMathMore; // > ./stressMathMore; //; // to run inside ROOT using ACliC; // for using CINT you need first to have the library libTrackMathCoreDict.so; // (type: make libTrackMathCoreDict.so to make it); //; // root> gSystem->Load(""libMathCore"");; // root> gSystem->Load(""libTree"");; // root> gSystem->Load(""libHist"");; // root> .x stressMathCore.cxx+; //; // for using Reflex dictionaries you need first to have the library libTrackMathCoreRflx.so; // (type: make libTrackMathCoreRflx.so to make it); //; // root> gSystem->Load(""libMathCore"");; // root> gSystem->Load(""libTree"");; // root> gSystem->Load(""libHist"");; // root> gSystem->Load(""libReflex"");; // root> gSystem->SetIncludePath(""-DUSE_REFLEX"");; // root> .x stressMathCore.cxx+; //; //",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:1045,Testability,test,test,1045,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathCore Benchmark test suite; // ==============================; //; // This program performs tests :; // - mathematical functions in particular the statistical functions by estimating; // pdf, cdf and quantiles. cdf are estimated directly and compared with calculated integral from pdf; // - physics vectors (2D, 3D and 4D) including I/O for every type and for both double and Double32_t; // - SMatrix and SVectors including I/O for double and Double32_t types; // - I/O of complex objects which dictionary has been generated using CINT (default) or Reflex; // TrackD and TrackD32 which contain physics vectors of double and Double32_t; // TrackErrD and TrackErrD32 which contain physics vectors and an SMatrix of double and Double32_t; // VecTrackD which contains an std::vector<TrackD>; //; //; // the program cun run only in compiled mode.; // To run outside ROOT do:; //; // > cd $ROOTSYS/test; // > make stressMathMore; // > ./stressMathMore; //; // to run using REflex set before compiling the environment variable useReflex.; //; // > export useReflex=1; // > make stressMathMore; // > ./stressMathMore; //; // to run inside ROOT using ACliC; // for using CINT you need first to have the library libTrackMathCoreDict.so; // (type: make libTrackMathCoreDict.so to make it); //; // root> gSystem->Load(""libMathCore"");; // root> gSystem->Load(""libTree"");; // root> gSystem->Load(""libHist"");; // root> .x stressMathCore.cxx+; //; // for using Reflex dictionaries you need first to have the library libTrackMathCoreRflx.so; // (type: make libTrackMathCoreRflx.so to make it); //; // root> gSystem->Load(""libMathCore"");; // root> gSystem->Load(""libTree"");; // root> gSystem->Load(""libHist"");; // root> gSystem->Load(""libReflex"");; // root> gSystem->SetIncludePath(""-DUSE_REFLEX"");; // root> .x stressMathCore.cxx+; //; //",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:28,Availability,failure,failures,28,"// print out reason of test failures",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:23,Testability,test,test,23,"// print out reason of test failures",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:15,Modifiability,variab,variable,15,"// global test variable",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:10,Testability,test,test,10,"// global test variable",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:16,Testability,test,test,16,"//scale for cdf test (integral)",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:21,Testability,test,test,21,"//scale for quantile test",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:3,Testability,test,test,3,"// test cumulative function",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:30,Performance,cache,cached,30,"// implement explicitly using cached parameter values",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:3,Testability,test,test,3,"// test cdf at value f",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:18,Testability,test,testing,18,"// value used for testing",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:32,Availability,error,error,32,"// use a larger scale (integral error is 10-9)",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:3,Testability,test,test,3,"// test the quantile",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:14,Deployability,Integrat,IntegratorOneDimOptions,14,"//ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(""Gauss"");",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:14,Integrability,Integrat,IntegratorOneDimOptions,14,"//ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(""Gauss"");",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:18,Testability,test,testing,18,"// value used for testing",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:32,Availability,error,error,32,"// use a larger scale (integral error is 10-9)",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:3,Testability,test,test,3,"// test the quantile",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:3,Testability,test,test,3,"// test statistical functions",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:20,Testability,test,test,20,"// if enlarge scale test fails",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:20,Testability,test,test,20,"// if enlarge scale test fails",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:132,Testability,test,tests,132,"//*******************************************************************************************************************; // GenVector tests; //*******************************************************************************************************************; // trait for getting vector name",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:15,Modifiability,variab,variables,15,"// global data variables",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:29,Testability,test,testing,29,"// total sum of x,y,z,t (for testing first addition)",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:44,Testability,test,tests,44,"// use a fixed seed to be able to reproduce tests",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:44,Testability,test,tests,44,"// use a fixed seed to be able to reproduce tests",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:3,Testability,test,test,3,"// test methods",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:33,Testability,test,testDotProduct,33,"// template <class V>; // double testDotProduct( const std::vector<V *> & dataV) {; // //unsigned int n = std::min(n2Loop, dataV.size() );; // double tot = 0;; // V v0 = *(dataV[0]);; // Timer t;; // for (unsigned int i = 0; i < nGen-1; ++i) {; // V & v1 = *(dataV[i]);; // tot += v0.Dot(v1);; // }; // return tot;; // }",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:93,Safety,avoid,avoid,93,"//std::cout << ""reading typeID : "" << typeid(*v1).name() << std::endl;; // cast to void * to avoid a warning",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:3,Testability,test,test,3,"// test of SVEctor's or SMatrix",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:93,Testability,test,test,93,"//--------------------------------------------------------------------------------------; // test of all physics vector (GenVector's); //--------------------------------------------------------------------------------------",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:3,Testability,test,test,3,"// test io vector 2",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:23,Availability,error,error,23,"// gcc 4.3.2 gives and error for RhoEtaPhiVector for 32 bits",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:3,Testability,test,test,3,"// test io of double 32 for vector 1",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:93,Testability,test,test,93,"//--------------------------------------------------------------------------------------; // test of Svector of dim 3 or 4; //--------------------------------------------------------------------------------------",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:3,Testability,test,test,3,"// test the io",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:92,Testability,test,test,92,"//std::cout << ""File size = "" << fsize << "" estimated "" << 8 * Dim * ngen << std::endl;; // test Double32",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:93,Testability,test,test,93,"//--------------------------------------------------------------------------------------; // test of generic Svector; //--------------------------------------------------------------------------------------",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:3,Testability,test,test,3,"// test the matrix if D2 is not equal to 1",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:3,Testability,test,test,3,"// test the io",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:93,Testability,test,test,93,"//--------------------------------------------------------------------------------------; // test of generic SMatrix; //--------------------------------------------------------------------------------------",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:3,Testability,test,test,3,"// test the matrix if D2 is not equal to 1",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:3,Testability,test,test,3,"// test the io",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:92,Testability,test,test,92,"//std::cout << ""File size = "" << fsize << "" estimated "" << 8 * Dim * ngen << std::endl;; // test storing as Double32_t; // dictionay exist only for square matrices between 3 and 6",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:28,Availability,error,errors,28,"//we read back float (scale errors then)",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:93,Testability,test,test,93,"//--------------------------------------------------------------------------------------; // test of a track an object containing vector and matrices; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:3,Testability,test,test,3,"// test now matrices and vectors",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:20,Performance,Load,Load,20,"// iret |= gSystem->Load(""libMathCore"");; // iret |= gSystem->Load(""libMathMore"");; // if (iret !=0) return iret;",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:62,Performance,Load,Load,62,"// iret |= gSystem->Load(""libMathCore"");; // iret |= gSystem->Load(""libMathMore"");; // if (iret !=0) return iret;",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:32,Testability,test,test,32,"//std::cout << ""StressMathCore: test number n = "" << n << std::endl;",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:15,Deployability,update,updated,15,"// needs to be updated // ref time on pcbrun4",MatchSource.CODE_COMMENT,test/stressMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:269,Deployability,integrat,integration,269,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathMore Benchmark test suite; // ==============================; //; // This program performs tests :; // - numerical integration, derivation and root finders; // - it compares for various values of the gamma and beta distribution); // - the numerical calculated integral of pdf with cdf function,; // - the calculated derivative of cdf with pdf; // - the inverse (using root finder) of cdf with quantile; //; // to run the program outside ROOT do:; // > make stressMathMore; // > ./stressMathMore; //; // to run the program in ROOT; // root> gSystem->Load(""libMathMore""); // root> .x stressMathMore.cxx+; //",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:269,Integrability,integrat,integration,269,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathMore Benchmark test suite; // ==============================; //; // This program performs tests :; // - numerical integration, derivation and root finders; // - it compares for various values of the gamma and beta distribution); // - the numerical calculated integral of pdf with cdf function,; // - the calculated derivative of cdf with pdf; // - the inverse (using root finder) of cdf with quantile; //; // to run the program outside ROOT do:; // > make stressMathMore; // > ./stressMathMore; //; // to run the program in ROOT; // root> gSystem->Load(""libMathMore""); // root> .x stressMathMore.cxx+; //",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:236,Performance,perform,performs,236,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathMore Benchmark test suite; // ==============================; //; // This program performs tests :; // - numerical integration, derivation and root finders; // - it compares for various values of the gamma and beta distribution); // - the numerical calculated integral of pdf with cdf function,; // - the calculated derivative of cdf with pdf; // - the inverse (using root finder) of cdf with quantile; //; // to run the program outside ROOT do:; // > make stressMathMore; // > ./stressMathMore; //; // to run the program in ROOT; // root> gSystem->Load(""libMathMore""); // root> .x stressMathMore.cxx+; //",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:703,Performance,Load,Load,703,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathMore Benchmark test suite; // ==============================; //; // This program performs tests :; // - numerical integration, derivation and root finders; // - it compares for various values of the gamma and beta distribution); // - the numerical calculated integral of pdf with cdf function,; // - the calculated derivative of cdf with pdf; // - the inverse (using root finder) of cdf with quantile; //; // to run the program outside ROOT do:; // > make stressMathMore; // > ./stressMathMore; //; // to run the program in ROOT; // root> gSystem->Load(""libMathMore""); // root> .x stressMathMore.cxx+; //",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathMore Benchmark test suite; // ==============================; //; // This program performs tests :; // - numerical integration, derivation and root finders; // - it compares for various values of the gamma and beta distribution); // - the numerical calculated integral of pdf with cdf function,; // - the calculated derivative of cdf with pdf; // - the inverse (using root finder) of cdf with quantile; //; // to run the program outside ROOT do:; // > make stressMathMore; // > ./stressMathMore; //; // to run the program in ROOT; // root> gSystem->Load(""libMathMore""); // root> .x stressMathMore.cxx+; //",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:159,Testability,Benchmark,Benchmark,159,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathMore Benchmark test suite; // ==============================; //; // This program performs tests :; // - numerical integration, derivation and root finders; // - it compares for various values of the gamma and beta distribution); // - the numerical calculated integral of pdf with cdf function,; // - the calculated derivative of cdf with pdf; // - the inverse (using root finder) of cdf with quantile; //; // to run the program outside ROOT do:; // > make stressMathMore; // > ./stressMathMore; //; // to run the program in ROOT; // root> gSystem->Load(""libMathMore""); // root> .x stressMathMore.cxx+; //",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:169,Testability,test,test,169,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathMore Benchmark test suite; // ==============================; //; // This program performs tests :; // - numerical integration, derivation and root finders; // - it compares for various values of the gamma and beta distribution); // - the numerical calculated integral of pdf with cdf function,; // - the calculated derivative of cdf with pdf; // - the inverse (using root finder) of cdf with quantile; //; // to run the program outside ROOT do:; // > make stressMathMore; // > ./stressMathMore; //; // to run the program in ROOT; // root> gSystem->Load(""libMathMore""); // root> .x stressMathMore.cxx+; //",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:245,Testability,test,tests,245,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathMore Benchmark test suite; // ==============================; //; // This program performs tests :; // - numerical integration, derivation and root finders; // - it compares for various values of the gamma and beta distribution); // - the numerical calculated integral of pdf with cdf function,; // - the calculated derivative of cdf with pdf; // - the inverse (using root finder) of cdf with quantile; //; // to run the program outside ROOT do:; // > make stressMathMore; // > ./stressMathMore; //; // to run the program in ROOT; // root> gSystem->Load(""libMathMore""); // root> .x stressMathMore.cxx+; //",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:28,Availability,failure,failures,28,"// print out reason of test failures",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:23,Testability,test,test,23,"// print out reason of test failures",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:12,Usability,simpl,simple,12,"//implement simple functor",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:21,Testability,test,test,21,"//scale for integral test",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:16,Testability,test,test,16,"//scale for der test",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:20,Testability,test,test,20,"//scale for inverse test",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:3,Testability,test,test,3,"// test integral with cdf function",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:3,Testability,test,test,3,"// test derivative from cdf to pdf function",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:3,Testability,test,test,3,"// test root finding algorithm for finding inverse of cdf",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:3,Testability,test,test,3,"// test root finding algorithm for finding inverse of cdf using drivatives",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:17,Performance,cache,cached,17,"// use esplicity cached param values",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:3,Testability,test,test,3,"// test integral of function",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:10,Deployability,Integrat,Integrator,10,"// create Integrator",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:10,Integrability,Integrat,Integrator,10,"// create Integrator",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:18,Testability,test,testing,18,"// value used for testing",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:32,Availability,error,error,32,"// use a larger scale (integral error is 10-9)",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:50,Availability,error,error,50,"//std::cout << ""integral result is = "" << q2 << "" error is "" << err << std::endl;; // Gauss integral sometimes returns an error of 0",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:122,Availability,error,error,122,"//std::cout << ""integral result is = "" << q2 << "" error is "" << err << std::endl;; // Gauss integral sometimes returns an error of 0",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:18,Testability,test,testing,18,"// value used for testing",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:58,Safety,avoid,avoid,58,"//NFuncTest = 4;; // scan all values from 0.05 to 0.95 to avoid problem at the border of definitions",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:3,Testability,test,test,3,"// test ROOT finder algorithm function without derivative",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:18,Testability,test,testing,18,"// value used for testing",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:3,Testability,test,test,3,"// test that quantile value correspond:",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:13,Availability,toler,tolerance,13,"// put lower tolerance",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:59,Safety,avoid,avoid,59,"//NFuncTest = 10;; // scan all values from 0.05 to 0.95 to avoid problem at the border of definitions",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:42,Safety,avoid,avoid,42,"// starting root is always on the left to avoid to go negative; // it is very sensible at the starting point",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:2,Integrability,depend,depends,2,"//depends on function shape; // test ROOT finder algorithm function with derivative",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:32,Testability,test,test,32,"//depends on function shape; // test ROOT finder algorithm function with derivative",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:18,Testability,test,testing,18,"// value used for testing",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:3,Testability,test,test,3,"// test that quantile value correspond:",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:3,Testability,test,test,3,"// test intergal. derivative and inverse(Rootfinder)",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:7,Testability,test,tests,7,"// few tests fail here",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:7,Testability,test,tests,7,"// few tests fail here; // vary shape of gamma parameter",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:3,Testability,test,test,3,"// test intergal. derivative and inverse(Rootfinder)",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:3,Safety,avoid,avoid,3,"// avoid case alpha or beta = 1",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:3,Testability,test,test,3,"// test failed for k=5",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:32,Testability,test,test,32,"//std::cout << ""StressMathMore: test number n = "" << n << std::endl;",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:8,Deployability,update,updated,8,"//to be updated // ref time on pcbrun4",MatchSource.CODE_COMMENT,test/stressMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:1274,Availability,failure,failure,1274,"e run as a standalone program or with the interpreter. * //; // * To run as a standalone program: * //; // * * //; // * $ cd $ROOTSYS/test * //; // * $ make stressProof * //; // * * //; // * Run stressProof with '-h' to get the list of supported options * //; // * $ ./stressProof -h * //; // * * //; // * To run interactively: * //; // * $ root * //; // * root[] .include $ROOTSYS/tutorials * //; // * root[] .L stressProof.cxx+ * //; // * root[] stressProof(master, tests, wrks, verbose, logfile, dyn, \ * //; // * dyn, skipds, h1src, eventsrc, dryrun) * //; // * * //; // * The arguments have the same meaning as above except for * //; // * verbose [Int_t] increasing verbosity (0 == minimal) * //; // * dyn [Bool_t] if kTRUE run in dynamic startup mode * //; // * skipds [Bool_t] if kTRUE the dataset related tests are skipped * //; // * * //; // * A certain number of swithces can also be controlled via environment * //; // * variables: check './stressProof -h' * //; // * * //; // * The stressProof function returns 0 on success, 1 on failure. * //; // * * //; // * The successful output looks like this: * //; // * * //; // * ****************************************************************** * //; // * * Starting P R O O F - S T R E S S suite * * //; // * ****************************************************************** * //; // * * Log file: /tmp/ProofStress_XrcwBe * //; // * ****************************************************************** * //; // * Test 1 : Open a session ................................... OK * * //; // * Test 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; // * Test 5 : H1: chain processing ............................. OK * * //; // * Test 6 : H1: file collection processing ................... OK * * //; // * Test 7 : H1: file collection, TPacketizerAdaptive ......... OK * * //; // * ",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:1164,Modifiability,variab,variables,1164,"// ************************************************************************* //; // * * //; // * s t r e s s P r o o f * //; // * * //; // * This file contains a set of test of PROOF related functionality. * //; // * The tests can be run as a standalone program or with the interpreter. * //; // * To run as a standalone program: * //; // * * //; // * $ cd $ROOTSYS/test * //; // * $ make stressProof * //; // * * //; // * Run stressProof with '-h' to get the list of supported options * //; // * $ ./stressProof -h * //; // * * //; // * To run interactively: * //; // * $ root * //; // * root[] .include $ROOTSYS/tutorials * //; // * root[] .L stressProof.cxx+ * //; // * root[] stressProof(master, tests, wrks, verbose, logfile, dyn, \ * //; // * dyn, skipds, h1src, eventsrc, dryrun) * //; // * * //; // * The arguments have the same meaning as above except for * //; // * verbose [Int_t] increasing verbosity (0 == minimal) * //; // * dyn [Bool_t] if kTRUE run in dynamic startup mode * //; // * skipds [Bool_t] if kTRUE the dataset related tests are skipped * //; // * * //; // * A certain number of swithces can also be controlled via environment * //; // * variables: check './stressProof -h' * //; // * * //; // * The stressProof function returns 0 on success, 1 on failure. * //; // * * //; // * The successful output looks like this: * //; // * * //; // * ****************************************************************** * //; // * * Starting P R O O F - S T R E S S suite * * //; // * ****************************************************************** * //; // * * Log file: /tmp/ProofStress_XrcwBe * //; // * ****************************************************************** * //; // * Test 1 : Open a session ................................... OK * * //; // * Test 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; /",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:4533,Performance,perform,performing,4533," * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 : H1 dataset: selector by object ................... OK * * //; // * Test 29 : Chain with TTree in subdirs ...................... OK * * //; // * * All registered tests have been passed :-) * * //; // * ****************************************************************** * //; // * * //; // * The application redirects the processing logs to a log file which is * //; // * normally deleted at the end of a successful run; if the test fails * //; // * the caller is asked if she/he wants to keep the log file; if the * //; // * specifies a log file path of her/his choice, the log file is never * //; // * deleted. * //; // * * //; // * SKIPPED means that the test cannot be run. * //; // * * //; // * New tests can be easily added by providing a function performing the * //; // * test and a name for the test; see examples below. * //; // * * //; // * It is also possible to trigger the automatic PROOF valgrind setup by * //; // * means of the env GETPROOF_VALGRIND. * //; // * E.g. to run the master in valgrind do * //; // * * //; // * $ export GETPROOF_VALGRIND=""valgrind=master"" * //; // * or * //; // * $ export GETPROOF_VALGRIND=""valgrind=workers"" * //; // * * //; // * before running stressProof. The syntax is the same as for standard * //; // * PROOF valgrind runs. * //; // * * //; // ************************************************************************* //",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:169,Testability,test,test,169,"// ************************************************************************* //; // * * //; // * s t r e s s P r o o f * //; // * * //; // * This file contains a set of test of PROOF related functionality. * //; // * The tests can be run as a standalone program or with the interpreter. * //; // * To run as a standalone program: * //; // * * //; // * $ cd $ROOTSYS/test * //; // * $ make stressProof * //; // * * //; // * Run stressProof with '-h' to get the list of supported options * //; // * $ ./stressProof -h * //; // * * //; // * To run interactively: * //; // * $ root * //; // * root[] .include $ROOTSYS/tutorials * //; // * root[] .L stressProof.cxx+ * //; // * root[] stressProof(master, tests, wrks, verbose, logfile, dyn, \ * //; // * dyn, skipds, h1src, eventsrc, dryrun) * //; // * * //; // * The arguments have the same meaning as above except for * //; // * verbose [Int_t] increasing verbosity (0 == minimal) * //; // * dyn [Bool_t] if kTRUE run in dynamic startup mode * //; // * skipds [Bool_t] if kTRUE the dataset related tests are skipped * //; // * * //; // * A certain number of swithces can also be controlled via environment * //; // * variables: check './stressProof -h' * //; // * * //; // * The stressProof function returns 0 on success, 1 on failure. * //; // * * //; // * The successful output looks like this: * //; // * * //; // * ****************************************************************** * //; // * * Starting P R O O F - S T R E S S suite * * //; // * ****************************************************************** * //; // * * Log file: /tmp/ProofStress_XrcwBe * //; // * ****************************************************************** * //; // * Test 1 : Open a session ................................... OK * * //; // * Test 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; /",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:221,Testability,test,tests,221,"// ************************************************************************* //; // * * //; // * s t r e s s P r o o f * //; // * * //; // * This file contains a set of test of PROOF related functionality. * //; // * The tests can be run as a standalone program or with the interpreter. * //; // * To run as a standalone program: * //; // * * //; // * $ cd $ROOTSYS/test * //; // * $ make stressProof * //; // * * //; // * Run stressProof with '-h' to get the list of supported options * //; // * $ ./stressProof -h * //; // * * //; // * To run interactively: * //; // * $ root * //; // * root[] .include $ROOTSYS/tutorials * //; // * root[] .L stressProof.cxx+ * //; // * root[] stressProof(master, tests, wrks, verbose, logfile, dyn, \ * //; // * dyn, skipds, h1src, eventsrc, dryrun) * //; // * * //; // * The arguments have the same meaning as above except for * //; // * verbose [Int_t] increasing verbosity (0 == minimal) * //; // * dyn [Bool_t] if kTRUE run in dynamic startup mode * //; // * skipds [Bool_t] if kTRUE the dataset related tests are skipped * //; // * * //; // * A certain number of swithces can also be controlled via environment * //; // * variables: check './stressProof -h' * //; // * * //; // * The stressProof function returns 0 on success, 1 on failure. * //; // * * //; // * The successful output looks like this: * //; // * * //; // * ****************************************************************** * //; // * * Starting P R O O F - S T R E S S suite * * //; // * ****************************************************************** * //; // * * Log file: /tmp/ProofStress_XrcwBe * //; // * ****************************************************************** * //; // * Test 1 : Open a session ................................... OK * * //; // * Test 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; /",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:366,Testability,test,test,366,"// ************************************************************************* //; // * * //; // * s t r e s s P r o o f * //; // * * //; // * This file contains a set of test of PROOF related functionality. * //; // * The tests can be run as a standalone program or with the interpreter. * //; // * To run as a standalone program: * //; // * * //; // * $ cd $ROOTSYS/test * //; // * $ make stressProof * //; // * * //; // * Run stressProof with '-h' to get the list of supported options * //; // * $ ./stressProof -h * //; // * * //; // * To run interactively: * //; // * $ root * //; // * root[] .include $ROOTSYS/tutorials * //; // * root[] .L stressProof.cxx+ * //; // * root[] stressProof(master, tests, wrks, verbose, logfile, dyn, \ * //; // * dyn, skipds, h1src, eventsrc, dryrun) * //; // * * //; // * The arguments have the same meaning as above except for * //; // * verbose [Int_t] increasing verbosity (0 == minimal) * //; // * dyn [Bool_t] if kTRUE run in dynamic startup mode * //; // * skipds [Bool_t] if kTRUE the dataset related tests are skipped * //; // * * //; // * A certain number of swithces can also be controlled via environment * //; // * variables: check './stressProof -h' * //; // * * //; // * The stressProof function returns 0 on success, 1 on failure. * //; // * * //; // * The successful output looks like this: * //; // * * //; // * ****************************************************************** * //; // * * Starting P R O O F - S T R E S S suite * * //; // * ****************************************************************** * //; // * * Log file: /tmp/ProofStress_XrcwBe * //; // * ****************************************************************** * //; // * Test 1 : Open a session ................................... OK * * //; // * Test 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; /",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:700,Testability,test,tests,700,"// ************************************************************************* //; // * * //; // * s t r e s s P r o o f * //; // * * //; // * This file contains a set of test of PROOF related functionality. * //; // * The tests can be run as a standalone program or with the interpreter. * //; // * To run as a standalone program: * //; // * * //; // * $ cd $ROOTSYS/test * //; // * $ make stressProof * //; // * * //; // * Run stressProof with '-h' to get the list of supported options * //; // * $ ./stressProof -h * //; // * * //; // * To run interactively: * //; // * $ root * //; // * root[] .include $ROOTSYS/tutorials * //; // * root[] .L stressProof.cxx+ * //; // * root[] stressProof(master, tests, wrks, verbose, logfile, dyn, \ * //; // * dyn, skipds, h1src, eventsrc, dryrun) * //; // * * //; // * The arguments have the same meaning as above except for * //; // * verbose [Int_t] increasing verbosity (0 == minimal) * //; // * dyn [Bool_t] if kTRUE run in dynamic startup mode * //; // * skipds [Bool_t] if kTRUE the dataset related tests are skipped * //; // * * //; // * A certain number of swithces can also be controlled via environment * //; // * variables: check './stressProof -h' * //; // * * //; // * The stressProof function returns 0 on success, 1 on failure. * //; // * * //; // * The successful output looks like this: * //; // * * //; // * ****************************************************************** * //; // * * Starting P R O O F - S T R E S S suite * * //; // * ****************************************************************** * //; // * * Log file: /tmp/ProofStress_XrcwBe * //; // * ****************************************************************** * //; // * Test 1 : Open a session ................................... OK * * //; // * Test 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; /",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:722,Testability,log,logfile,722,"// ************************************************************************* //; // * * //; // * s t r e s s P r o o f * //; // * * //; // * This file contains a set of test of PROOF related functionality. * //; // * The tests can be run as a standalone program or with the interpreter. * //; // * To run as a standalone program: * //; // * * //; // * $ cd $ROOTSYS/test * //; // * $ make stressProof * //; // * * //; // * Run stressProof with '-h' to get the list of supported options * //; // * $ ./stressProof -h * //; // * * //; // * To run interactively: * //; // * $ root * //; // * root[] .include $ROOTSYS/tutorials * //; // * root[] .L stressProof.cxx+ * //; // * root[] stressProof(master, tests, wrks, verbose, logfile, dyn, \ * //; // * dyn, skipds, h1src, eventsrc, dryrun) * //; // * * //; // * The arguments have the same meaning as above except for * //; // * verbose [Int_t] increasing verbosity (0 == minimal) * //; // * dyn [Bool_t] if kTRUE run in dynamic startup mode * //; // * skipds [Bool_t] if kTRUE the dataset related tests are skipped * //; // * * //; // * A certain number of swithces can also be controlled via environment * //; // * variables: check './stressProof -h' * //; // * * //; // * The stressProof function returns 0 on success, 1 on failure. * //; // * * //; // * The successful output looks like this: * //; // * * //; // * ****************************************************************** * //; // * * Starting P R O O F - S T R E S S suite * * //; // * ****************************************************************** * //; // * * Log file: /tmp/ProofStress_XrcwBe * //; // * ****************************************************************** * //; // * Test 1 : Open a session ................................... OK * * //; // * Test 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; /",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:1045,Testability,test,tests,1045,"// ************************************************************************* //; // * * //; // * s t r e s s P r o o f * //; // * * //; // * This file contains a set of test of PROOF related functionality. * //; // * The tests can be run as a standalone program or with the interpreter. * //; // * To run as a standalone program: * //; // * * //; // * $ cd $ROOTSYS/test * //; // * $ make stressProof * //; // * * //; // * Run stressProof with '-h' to get the list of supported options * //; // * $ ./stressProof -h * //; // * * //; // * To run interactively: * //; // * $ root * //; // * root[] .include $ROOTSYS/tutorials * //; // * root[] .L stressProof.cxx+ * //; // * root[] stressProof(master, tests, wrks, verbose, logfile, dyn, \ * //; // * dyn, skipds, h1src, eventsrc, dryrun) * //; // * * //; // * The arguments have the same meaning as above except for * //; // * verbose [Int_t] increasing verbosity (0 == minimal) * //; // * dyn [Bool_t] if kTRUE run in dynamic startup mode * //; // * skipds [Bool_t] if kTRUE the dataset related tests are skipped * //; // * * //; // * A certain number of swithces can also be controlled via environment * //; // * variables: check './stressProof -h' * //; // * * //; // * The stressProof function returns 0 on success, 1 on failure. * //; // * * //; // * The successful output looks like this: * //; // * * //; // * ****************************************************************** * //; // * * Starting P R O O F - S T R E S S suite * * //; // * ****************************************************************** * //; // * * Log file: /tmp/ProofStress_XrcwBe * //; // * ****************************************************************** * //; // * Test 1 : Open a session ................................... OK * * //; // * Test 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; /",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:1578,Testability,Log,Log,1578,"essProof -h * //; // * * //; // * To run interactively: * //; // * $ root * //; // * root[] .include $ROOTSYS/tutorials * //; // * root[] .L stressProof.cxx+ * //; // * root[] stressProof(master, tests, wrks, verbose, logfile, dyn, \ * //; // * dyn, skipds, h1src, eventsrc, dryrun) * //; // * * //; // * The arguments have the same meaning as above except for * //; // * verbose [Int_t] increasing verbosity (0 == minimal) * //; // * dyn [Bool_t] if kTRUE run in dynamic startup mode * //; // * skipds [Bool_t] if kTRUE the dataset related tests are skipped * //; // * * //; // * A certain number of swithces can also be controlled via environment * //; // * variables: check './stressProof -h' * //; // * * //; // * The stressProof function returns 0 on success, 1 on failure. * //; // * * //; // * The successful output looks like this: * //; // * * //; // * ****************************************************************** * //; // * * Starting P R O O F - S T R E S S suite * * //; // * ****************************************************************** * //; // * * Log file: /tmp/ProofStress_XrcwBe * //; // * ****************************************************************** * //; // * Test 1 : Open a session ................................... OK * * //; // * Test 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; // * Test 5 : H1: chain processing ............................. OK * * //; // * Test 6 : H1: file collection processing ................... OK * * //; // * Test 7 : H1: file collection, TPacketizerAdaptive ......... OK * * //; // * Test 8 : H1: by-name processing ........................... OK * * //; // * Test 9 : H1: multi dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' ",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:1701,Testability,Test,Test,1701,"essProof -h * //; // * * //; // * To run interactively: * //; // * $ root * //; // * root[] .include $ROOTSYS/tutorials * //; // * root[] .L stressProof.cxx+ * //; // * root[] stressProof(master, tests, wrks, verbose, logfile, dyn, \ * //; // * dyn, skipds, h1src, eventsrc, dryrun) * //; // * * //; // * The arguments have the same meaning as above except for * //; // * verbose [Int_t] increasing verbosity (0 == minimal) * //; // * dyn [Bool_t] if kTRUE run in dynamic startup mode * //; // * skipds [Bool_t] if kTRUE the dataset related tests are skipped * //; // * * //; // * A certain number of swithces can also be controlled via environment * //; // * variables: check './stressProof -h' * //; // * * //; // * The stressProof function returns 0 on success, 1 on failure. * //; // * * //; // * The successful output looks like this: * //; // * * //; // * ****************************************************************** * //; // * * Starting P R O O F - S T R E S S suite * * //; // * ****************************************************************** * //; // * * Log file: /tmp/ProofStress_XrcwBe * //; // * ****************************************************************** * //; // * Test 1 : Open a session ................................... OK * * //; // * Test 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; // * Test 5 : H1: chain processing ............................. OK * * //; // * Test 6 : H1: file collection processing ................... OK * * //; // * Test 7 : H1: file collection, TPacketizerAdaptive ......... OK * * //; // * Test 8 : H1: by-name processing ........................... OK * * //; // * Test 9 : H1: multi dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' ",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:1777,Testability,Test,Test,1777,"run) * //; // * * //; // * The arguments have the same meaning as above except for * //; // * verbose [Int_t] increasing verbosity (0 == minimal) * //; // * dyn [Bool_t] if kTRUE run in dynamic startup mode * //; // * skipds [Bool_t] if kTRUE the dataset related tests are skipped * //; // * * //; // * A certain number of swithces can also be controlled via environment * //; // * variables: check './stressProof -h' * //; // * * //; // * The stressProof function returns 0 on success, 1 on failure. * //; // * * //; // * The successful output looks like this: * //; // * * //; // * ****************************************************************** * //; // * * Starting P R O O F - S T R E S S suite * * //; // * ****************************************************************** * //; // * * Log file: /tmp/ProofStress_XrcwBe * //; // * ****************************************************************** * //; // * Test 1 : Open a session ................................... OK * * //; // * Test 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; // * Test 5 : H1: chain processing ............................. OK * * //; // * Test 6 : H1: file collection processing ................... OK * * //; // * Test 7 : H1: file collection, TPacketizerAdaptive ......... OK * * //; // * Test 8 : H1: by-name processing ........................... OK * * //; // * Test 9 : H1: multi dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:1798,Testability,log,logs,1798,"run) * //; // * * //; // * The arguments have the same meaning as above except for * //; // * verbose [Int_t] increasing verbosity (0 == minimal) * //; // * dyn [Bool_t] if kTRUE run in dynamic startup mode * //; // * skipds [Bool_t] if kTRUE the dataset related tests are skipped * //; // * * //; // * A certain number of swithces can also be controlled via environment * //; // * variables: check './stressProof -h' * //; // * * //; // * The stressProof function returns 0 on success, 1 on failure. * //; // * * //; // * The successful output looks like this: * //; // * * //; // * ****************************************************************** * //; // * * Starting P R O O F - S T R E S S suite * * //; // * ****************************************************************** * //; // * * Log file: /tmp/ProofStress_XrcwBe * //; // * ****************************************************************** * //; // * Test 1 : Open a session ................................... OK * * //; // * Test 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; // * Test 5 : H1: chain processing ............................. OK * * //; // * Test 6 : H1: file collection processing ................... OK * * //; // * Test 7 : H1: file collection, TPacketizerAdaptive ......... OK * * //; // * Test 8 : H1: by-name processing ........................... OK * * //; // * Test 9 : H1: multi dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:1853,Testability,Test,Test,1853,"* //; // * verbose [Int_t] increasing verbosity (0 == minimal) * //; // * dyn [Bool_t] if kTRUE run in dynamic startup mode * //; // * skipds [Bool_t] if kTRUE the dataset related tests are skipped * //; // * * //; // * A certain number of swithces can also be controlled via environment * //; // * variables: check './stressProof -h' * //; // * * //; // * The stressProof function returns 0 on success, 1 on failure. * //; // * * //; // * The successful output looks like this: * //; // * * //; // * ****************************************************************** * //; // * * Starting P R O O F - S T R E S S suite * * //; // * ****************************************************************** * //; // * * Log file: /tmp/ProofStress_XrcwBe * //; // * ****************************************************************** * //; // * Test 1 : Open a session ................................... OK * * //; // * Test 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; // * Test 5 : H1: chain processing ............................. OK * * //; // * Test 6 : H1: file collection processing ................... OK * * //; // * Test 7 : H1: file collection, TPacketizerAdaptive ......... OK * * //; // * Test 8 : H1: by-name processing ........................... OK * * //; // * Test 9 : H1: multi dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin fun",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:1929,Testability,Test,Test,1929,"n [Bool_t] if kTRUE run in dynamic startup mode * //; // * skipds [Bool_t] if kTRUE the dataset related tests are skipped * //; // * * //; // * A certain number of swithces can also be controlled via environment * //; // * variables: check './stressProof -h' * //; // * * //; // * The stressProof function returns 0 on success, 1 on failure. * //; // * * //; // * The successful output looks like this: * //; // * * //; // * ****************************************************************** * //; // * * Starting P R O O F - S T R E S S suite * * //; // * ****************************************************************** * //; // * * Log file: /tmp/ProofStress_XrcwBe * //; // * ****************************************************************** * //; // * Test 1 : Open a session ................................... OK * * //; // * Test 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; // * Test 5 : H1: chain processing ............................. OK * * //; // * Test 6 : H1: file collection processing ................... OK * * //; // * Test 7 : H1: file collection, TPacketizerAdaptive ......... OK * * //; // * Test 8 : H1: by-name processing ........................... OK * * //; // * Test 9 : H1: multi dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:2005,Testability,Test,Test,2005,"_t] if kTRUE the dataset related tests are skipped * //; // * * //; // * A certain number of swithces can also be controlled via environment * //; // * variables: check './stressProof -h' * //; // * * //; // * The stressProof function returns 0 on success, 1 on failure. * //; // * * //; // * The successful output looks like this: * //; // * * //; // * ****************************************************************** * //; // * * Starting P R O O F - S T R E S S suite * * //; // * ****************************************************************** * //; // * * Log file: /tmp/ProofStress_XrcwBe * //; // * ****************************************************************** * //; // * Test 1 : Open a session ................................... OK * * //; // * Test 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; // * Test 5 : H1: chain processing ............................. OK * * //; // * Test 6 : H1: file collection processing ................... OK * * //; // * Test 7 : H1: file collection, TPacketizerAdaptive ......... OK * * //; // * Test 8 : H1: by-name processing ........................... OK * * //; // * Test 9 : H1: multi dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : E",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:2081,Testability,Test,Test,2081,"n number of swithces can also be controlled via environment * //; // * variables: check './stressProof -h' * //; // * * //; // * The stressProof function returns 0 on success, 1 on failure. * //; // * * //; // * The successful output looks like this: * //; // * * //; // * ****************************************************************** * //; // * * Starting P R O O F - S T R E S S suite * * //; // * ****************************************************************** * //; // * * Log file: /tmp/ProofStress_XrcwBe * //; // * ****************************************************************** * //; // * Test 1 : Open a session ................................... OK * * //; // * Test 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; // * Test 5 : H1: chain processing ............................. OK * * //; // * Test 6 : H1: file collection processing ................... OK * * //; // * Test 7 : H1: file collection, TPacketizerAdaptive ......... OK * * //; // * Test 8 : H1: by-name processing ........................... OK * * //; // * Test 9 : H1: multi dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:2157,Testability,Test,Test,2157," check './stressProof -h' * //; // * * //; // * The stressProof function returns 0 on success, 1 on failure. * //; // * * //; // * The successful output looks like this: * //; // * * //; // * ****************************************************************** * //; // * * Starting P R O O F - S T R E S S suite * * //; // * ****************************************************************** * //; // * * Log file: /tmp/ProofStress_XrcwBe * //; // * ****************************************************************** * //; // * Test 1 : Open a session ................................... OK * * //; // * Test 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; // * Test 5 : H1: chain processing ............................. OK * * //; // * Test 6 : H1: file collection processing ................... OK * * //; // * Test 7 : H1: file collection, TPacketizerAdaptive ......... OK * * //; // * Test 8 : H1: by-name processing ........................... OK * * //; // * Test 9 : H1: multi dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resi",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:2233,Testability,Test,Test,2233,"ction returns 0 on success, 1 on failure. * //; // * * //; // * The successful output looks like this: * //; // * * //; // * ****************************************************************** * //; // * * Starting P R O O F - S T R E S S suite * * //; // * ****************************************************************** * //; // * * Log file: /tmp/ProofStress_XrcwBe * //; // * ****************************************************************** * //; // * Test 1 : Open a session ................................... OK * * //; // * Test 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; // * Test 5 : H1: chain processing ............................. OK * * //; // * Test 6 : H1: file collection processing ................... OK * * //; // * Test 7 : H1: file collection, TPacketizerAdaptive ......... OK * * //; // * Test 8 : H1: by-name processing ........................... OK * * //; // * Test 9 : H1: multi dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 :",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:2309,Testability,Test,Test,2309,"output looks like this: * //; // * * //; // * ****************************************************************** * //; // * * Starting P R O O F - S T R E S S suite * * //; // * ****************************************************************** * //; // * * Log file: /tmp/ProofStress_XrcwBe * //; // * ****************************************************************** * //; // * Test 1 : Open a session ................................... OK * * //; // * Test 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; // * Test 5 : H1: chain processing ............................. OK * * //; // * Test 6 : H1: file collection processing ................... OK * * //; // * Test 7 : H1: file collection, TPacketizerAdaptive ......... OK * * //; // * Test 8 : H1: by-name processing ........................... OK * * //; // * Test 9 : H1: multi dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : F",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:2385,Testability,Test,Test,2385,"********************************** * //; // * * Starting P R O O F - S T R E S S suite * * //; // * ****************************************************************** * //; // * * Log file: /tmp/ProofStress_XrcwBe * //; // * ****************************************************************** * //; // * Test 1 : Open a session ................................... OK * * //; // * Test 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; // * Test 5 : H1: chain processing ............................. OK * * //; // * Test 6 : H1: file collection processing ................... OK * * //; // * Test 7 : H1: file collection, TPacketizerAdaptive ......... OK * * //; // * Test 8 : H1: by-name processing ........................... OK * * //; // * Test 9 : H1: multi dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : Fil",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:2462,Testability,Test,Test,2462,"S S suite * * //; // * ****************************************************************** * //; // * * Log file: /tmp/ProofStress_XrcwBe * //; // * ****************************************************************** * //; // * Test 1 : Open a session ................................... OK * * //; // * Test 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; // * Test 5 : H1: chain processing ............................. OK * * //; // * Test 6 : H1: file collection processing ................... OK * * //; // * Test 7 : H1: file collection, TPacketizerAdaptive ......... OK * * //; // * Test 8 : H1: by-name processing ........................... OK * * //; // * Test 9 : H1: multi dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TT",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:2539,Testability,Test,Test,2539,"**************** * //; // * * Log file: /tmp/ProofStress_XrcwBe * //; // * ****************************************************************** * //; // * Test 1 : Open a session ................................... OK * * //; // * Test 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; // * Test 5 : H1: chain processing ............................. OK * * //; // * Test 6 : H1: file collection processing ................... OK * * //; // * Test 7 : H1: file collection, TPacketizerAdaptive ......... OK * * //; // * Test 8 : H1: by-name processing ........................... OK * * //; // * Test 9 : H1: multi dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 :",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:2616,Testability,Test,Test,2616,"*************************************************************** * //; // * Test 1 : Open a session ................................... OK * * //; // * Test 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; // * Test 5 : H1: chain processing ............................. OK * * //; // * Test 6 : H1: file collection processing ................... OK * * //; // * Test 7 : H1: file collection, TPacketizerAdaptive ......... OK * * //; // * Test 8 : H1: by-name processing ........................... OK * * //; // * Test 9 : H1: multi dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 :",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:2693,Testability,Test,Test,2693,"Test 1 : Open a session ................................... OK * * //; // * Test 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; // * Test 5 : H1: chain processing ............................. OK * * //; // * Test 6 : H1: file collection processing ................... OK * * //; // * Test 7 : H1: file collection, TPacketizerAdaptive ......... OK * * //; // * Test 8 : H1: by-name processing ........................... OK * * //; // * Test 9 : H1: multi dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 ",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:2770,Testability,Test,Test,2770,"st 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; // * Test 5 : H1: chain processing ............................. OK * * //; // * Test 6 : H1: file collection processing ................... OK * * //; // * Test 7 : H1: file collection, TPacketizerAdaptive ......... OK * * //; // * Test 8 : H1: by-name processing ........................... OK * * //; // * Test 9 : H1: multi dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 ",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:2847,Testability,Test,Test,2847,"est 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; // * Test 5 : H1: chain processing ............................. OK * * //; // * Test 6 : H1: file collection processing ................... OK * * //; // * Test 7 : H1: file collection, TPacketizerAdaptive ......... OK * * //; // * Test 8 : H1: by-name processing ........................... OK * * //; // * Test 9 : H1: multi dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 : H1 dataset: selector by object ................... OK * * //; // * Test 2",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:2924,Testability,Test,Test,2924,"Dataset handling with H1 files ................... OK * * //; // * Test 5 : H1: chain processing ............................. OK * * //; // * Test 6 : H1: file collection processing ................... OK * * //; // * Test 7 : H1: file collection, TPacketizerAdaptive ......... OK * * //; // * Test 8 : H1: by-name processing ........................... OK * * //; // * Test 9 : H1: multi dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 : H1 dataset: selector by object ................... OK * * //; // * Test 29 : Chain with TTree in subdirs ...................... OK * * //; // * * All registe",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3001,Testability,Test,Test,3001," 5 : H1: chain processing ............................. OK * * //; // * Test 6 : H1: file collection processing ................... OK * * //; // * Test 7 : H1: file collection, TPacketizerAdaptive ......... OK * * //; // * Test 8 : H1: by-name processing ........................... OK * * //; // * Test 9 : H1: multi dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 : H1 dataset: selector by object ................... OK * * //; // * Test 29 : Chain with TTree in subdirs ...................... OK * * //; // * * All registered tests have been passed :-) * * //; // * ****************************",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3078,Testability,Test,Test,3078,"1: file collection processing ................... OK * * //; // * Test 7 : H1: file collection, TPacketizerAdaptive ......... OK * * //; // * Test 8 : H1: by-name processing ........................... OK * * //; // * Test 9 : H1: multi dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 : H1 dataset: selector by object ................... OK * * //; // * Test 29 : Chain with TTree in subdirs ...................... OK * * //; // * * All registered tests have been passed :-) * * //; // * ****************************************************************** * //; // * * //; // * The application redir",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3155,Testability,Test,Test,3155,"H1: file collection, TPacketizerAdaptive ......... OK * * //; // * Test 8 : H1: by-name processing ........................... OK * * //; // * Test 9 : H1: multi dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 : H1 dataset: selector by object ................... OK * * //; // * Test 29 : Chain with TTree in subdirs ...................... OK * * //; // * * All registered tests have been passed :-) * * //; // * ****************************************************************** * //; // * * //; // * The application redirects the processing logs to a log file which is * //; // * normally delete",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3232,Testability,Test,Test,3232,"ame processing ........................... OK * * //; // * Test 9 : H1: multi dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 : H1 dataset: selector by object ................... OK * * //; // * Test 29 : Chain with TTree in subdirs ...................... OK * * //; // * * All registered tests have been passed :-) * * //; // * ****************************************************************** * //; // * * //; // * The application redirects the processing logs to a log file which is * //; // * normally deleted at the end of a successful run; if the test fails * //; // * the caller is asked i",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3309,Testability,Test,Test,3309,"lti dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 : H1 dataset: selector by object ................... OK * * //; // * Test 29 : Chain with TTree in subdirs ...................... OK * * //; // * * All registered tests have been passed :-) * * //; // * ****************************************************************** * //; // * * //; // * The application redirects the processing logs to a log file which is * //; // * normally deleted at the end of a successful run; if the test fails * //; // * the caller is asked if she/he wants to keep the log file; if the * //; // * specifies a log file",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3386,Testability,Test,Test,3386,"ulti dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 : H1 dataset: selector by object ................... OK * * //; // * Test 29 : Chain with TTree in subdirs ...................... OK * * //; // * * All registered tests have been passed :-) * * //; // * ****************************************************************** * //; // * * //; // * The application redirects the processing logs to a log file which is * //; // * normally deleted at the end of a successful run; if the test fails * //; // * the caller is asked if she/he wants to keep the log file; if the * //; // * specifies a log file path of her/his choice, the log file is never * //; // * deleted. * //; //",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3463,Testability,Test,Test,3463,"e management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 : H1 dataset: selector by object ................... OK * * //; // * Test 29 : Chain with TTree in subdirs ...................... OK * * //; // * * All registered tests have been passed :-) * * //; // * ****************************************************************** * //; // * * //; // * The application redirects the processing logs to a log file which is * //; // * normally deleted at the end of a successful run; if the test fails * //; // * the caller is asked if she/he wants to keep the log file; if the * //; // * specifies a log file path of her/his choice, the log file is never * //; // * deleted. * //; // * * //; // * SKIPPED means that the test cannot be run. * //; // * * //; // *",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3540,Testability,Test,Test,3540,"Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 : H1 dataset: selector by object ................... OK * * //; // * Test 29 : Chain with TTree in subdirs ...................... OK * * //; // * * All registered tests have been passed :-) * * //; // * ****************************************************************** * //; // * * //; // * The application redirects the processing logs to a log file which is * //; // * normally deleted at the end of a successful run; if the test fails * //; // * the caller is asked if she/he wants to keep the log file; if the * //; // * specifies a log file path of her/his choice, the log file is never * //; // * deleted. * //; // * * //; // * SKIPPED means that the test cannot be run. * //; // * * //; // * New tests can be easily added by providing a function performing the * ",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3617,Testability,Test,Test,3617,"Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 : H1 dataset: selector by object ................... OK * * //; // * Test 29 : Chain with TTree in subdirs ...................... OK * * //; // * * All registered tests have been passed :-) * * //; // * ****************************************************************** * //; // * * //; // * The application redirects the processing logs to a log file which is * //; // * normally deleted at the end of a successful run; if the test fails * //; // * the caller is asked if she/he wants to keep the log file; if the * //; // * specifies a log file path of her/his choice, the log file is never * //; // * deleted. * //; // * * //; // * SKIPPED means that the test cannot be run. * //; // * * //; // * New tests can be easily added by providing a function performing the * //; // * test and a name for the test; see examples below. * //; // * * //; /",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3694,Testability,Test,Test,3694,"nput data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 : H1 dataset: selector by object ................... OK * * //; // * Test 29 : Chain with TTree in subdirs ...................... OK * * //; // * * All registered tests have been passed :-) * * //; // * ****************************************************************** * //; // * * //; // * The application redirects the processing logs to a log file which is * //; // * normally deleted at the end of a successful run; if the test fails * //; // * the caller is asked if she/he wants to keep the log file; if the * //; // * specifies a log file path of her/his choice, the log file is never * //; // * deleted. * //; // * * //; // * SKIPPED means that the test cannot be run. * //; // * * //; // * New tests can be easily added by providing a function performing the * //; // * test and a name for the test; see examples below. * //; // * * //; // * It is also possible to trigger the automatic PROOF valgrind setup by * //;",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3771,Testability,Test,Test,3771," Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 : H1 dataset: selector by object ................... OK * * //; // * Test 29 : Chain with TTree in subdirs ...................... OK * * //; // * * All registered tests have been passed :-) * * //; // * ****************************************************************** * //; // * * //; // * The application redirects the processing logs to a log file which is * //; // * normally deleted at the end of a successful run; if the test fails * //; // * the caller is asked if she/he wants to keep the log file; if the * //; // * specifies a log file path of her/his choice, the log file is never * //; // * deleted. * //; // * * //; // * SKIPPED means that the test cannot be run. * //; // * * //; // * New tests can be easily added by providing a function performing the * //; // * test and a name for the test; see examples below. * //; // * * //; // * It is also possible to trigger the automatic PROOF valgrind setup by * //; // * means of the env GETPROOF_VALGRIND. * //; // * E.g. to run the master in ",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3848,Testability,Test,Test,3848,"min functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 : H1 dataset: selector by object ................... OK * * //; // * Test 29 : Chain with TTree in subdirs ...................... OK * * //; // * * All registered tests have been passed :-) * * //; // * ****************************************************************** * //; // * * //; // * The application redirects the processing logs to a log file which is * //; // * normally deleted at the end of a successful run; if the test fails * //; // * the caller is asked if she/he wants to keep the log file; if the * //; // * specifies a log file path of her/his choice, the log file is never * //; // * deleted. * //; // * * //; // * SKIPPED means that the test cannot be run. * //; // * * //; // * New tests can be easily added by providing a function performing the * //; // * test and a name for the test; see examples below. * //; // * * //; // * It is also possible to trigger the automatic PROOF valgrind setup by * //; // * means of the env GETPROOF_VALGRIND. * //; // * E.g. to run the master in valgrind do * //; // * * //; // * $ export GETPROOF_VALGRIND=""valgrind=mast",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3942,Testability,test,tests,3942," // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 : H1 dataset: selector by object ................... OK * * //; // * Test 29 : Chain with TTree in subdirs ...................... OK * * //; // * * All registered tests have been passed :-) * * //; // * ****************************************************************** * //; // * * //; // * The application redirects the processing logs to a log file which is * //; // * normally deleted at the end of a successful run; if the test fails * //; // * the caller is asked if she/he wants to keep the log file; if the * //; // * specifies a log file path of her/his choice, the log file is never * //; // * deleted. * //; // * * //; // * SKIPPED means that the test cannot be run. * //; // * * //; // * New tests can be easily added by providing a function performing the * //; // * test and a name for the test; see examples below. * //; // * * //; // * It is also possible to trigger the automatic PROOF valgrind setup by * //; // * means of the env GETPROOF_VALGRIND. * //; // * E.g. to run the master in valgrind do * //; // * * //; // * $ export GETPROOF_VALGRIND=""valgrind=master"" * //; // * or * //; // * $ export GETPROOF_VALGRIND=""valgrind=workers"" * //; // * * //; // * before running stressProof. The syntax is the same as for standard * //; // * PROOF valgrind runs. * //; // * * //; // ************************************************************************* /",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:4112,Testability,log,logs,4112," // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 : H1 dataset: selector by object ................... OK * * //; // * Test 29 : Chain with TTree in subdirs ...................... OK * * //; // * * All registered tests have been passed :-) * * //; // * ****************************************************************** * //; // * * //; // * The application redirects the processing logs to a log file which is * //; // * normally deleted at the end of a successful run; if the test fails * //; // * the caller is asked if she/he wants to keep the log file; if the * //; // * specifies a log file path of her/his choice, the log file is never * //; // * deleted. * //; // * * //; // * SKIPPED means that the test cannot be run. * //; // * * //; // * New tests can be easily added by providing a function performing the * //; // * test and a name for the test; see examples below. * //; // * * //; // * It is also possible to trigger the automatic PROOF valgrind setup by * //; // * means of the env GETPROOF_VALGRIND. * //; // * E.g. to run the master in valgrind do * //; // * * //; // * $ export GETPROOF_VALGRIND=""valgrind=master"" * //; // * or * //; // * $ export GETPROOF_VALGRIND=""valgrind=workers"" * //; // * * //; // * before running stressProof. The syntax is the same as for standard * //; // * PROOF valgrind runs. * //; // * * //; // ************************************************************************* /",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:4122,Testability,log,log,4122," // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 : H1 dataset: selector by object ................... OK * * //; // * Test 29 : Chain with TTree in subdirs ...................... OK * * //; // * * All registered tests have been passed :-) * * //; // * ****************************************************************** * //; // * * //; // * The application redirects the processing logs to a log file which is * //; // * normally deleted at the end of a successful run; if the test fails * //; // * the caller is asked if she/he wants to keep the log file; if the * //; // * specifies a log file path of her/his choice, the log file is never * //; // * deleted. * //; // * * //; // * SKIPPED means that the test cannot be run. * //; // * * //; // * New tests can be easily added by providing a function performing the * //; // * test and a name for the test; see examples below. * //; // * * //; // * It is also possible to trigger the automatic PROOF valgrind setup by * //; // * means of the env GETPROOF_VALGRIND. * //; // * E.g. to run the master in valgrind do * //; // * * //; // * $ export GETPROOF_VALGRIND=""valgrind=master"" * //; // * or * //; // * $ export GETPROOF_VALGRIND=""valgrind=workers"" * //; // * * //; // * before running stressProof. The syntax is the same as for standard * //; // * PROOF valgrind runs. * //; // * * //; // ************************************************************************* /",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:4207,Testability,test,test,4207," // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 : H1 dataset: selector by object ................... OK * * //; // * Test 29 : Chain with TTree in subdirs ...................... OK * * //; // * * All registered tests have been passed :-) * * //; // * ****************************************************************** * //; // * * //; // * The application redirects the processing logs to a log file which is * //; // * normally deleted at the end of a successful run; if the test fails * //; // * the caller is asked if she/he wants to keep the log file; if the * //; // * specifies a log file path of her/his choice, the log file is never * //; // * deleted. * //; // * * //; // * SKIPPED means that the test cannot be run. * //; // * * //; // * New tests can be easily added by providing a function performing the * //; // * test and a name for the test; see examples below. * //; // * * //; // * It is also possible to trigger the automatic PROOF valgrind setup by * //; // * means of the env GETPROOF_VALGRIND. * //; // * E.g. to run the master in valgrind do * //; // * * //; // * $ export GETPROOF_VALGRIND=""valgrind=master"" * //; // * or * //; // * $ export GETPROOF_VALGRIND=""valgrind=workers"" * //; // * * //; // * before running stressProof. The syntax is the same as for standard * //; // * PROOF valgrind runs. * //; // * * //; // ************************************************************************* /",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:4277,Testability,log,log,4277," // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 : H1 dataset: selector by object ................... OK * * //; // * Test 29 : Chain with TTree in subdirs ...................... OK * * //; // * * All registered tests have been passed :-) * * //; // * ****************************************************************** * //; // * * //; // * The application redirects the processing logs to a log file which is * //; // * normally deleted at the end of a successful run; if the test fails * //; // * the caller is asked if she/he wants to keep the log file; if the * //; // * specifies a log file path of her/his choice, the log file is never * //; // * deleted. * //; // * * //; // * SKIPPED means that the test cannot be run. * //; // * * //; // * New tests can be easily added by providing a function performing the * //; // * test and a name for the test; see examples below. * //; // * * //; // * It is also possible to trigger the automatic PROOF valgrind setup by * //; // * means of the env GETPROOF_VALGRIND. * //; // * E.g. to run the master in valgrind do * //; // * * //; // * $ export GETPROOF_VALGRIND=""valgrind=master"" * //; // * or * //; // * $ export GETPROOF_VALGRIND=""valgrind=workers"" * //; // * * //; // * before running stressProof. The syntax is the same as for standard * //; // * PROOF valgrind runs. * //; // * * //; // ************************************************************************* /",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:4317,Testability,log,log,4317," // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 : H1 dataset: selector by object ................... OK * * //; // * Test 29 : Chain with TTree in subdirs ...................... OK * * //; // * * All registered tests have been passed :-) * * //; // * ****************************************************************** * //; // * * //; // * The application redirects the processing logs to a log file which is * //; // * normally deleted at the end of a successful run; if the test fails * //; // * the caller is asked if she/he wants to keep the log file; if the * //; // * specifies a log file path of her/his choice, the log file is never * //; // * deleted. * //; // * * //; // * SKIPPED means that the test cannot be run. * //; // * * //; // * New tests can be easily added by providing a function performing the * //; // * test and a name for the test; see examples below. * //; // * * //; // * It is also possible to trigger the automatic PROOF valgrind setup by * //; // * means of the env GETPROOF_VALGRIND. * //; // * E.g. to run the master in valgrind do * //; // * * //; // * $ export GETPROOF_VALGRIND=""valgrind=master"" * //; // * or * //; // * $ export GETPROOF_VALGRIND=""valgrind=workers"" * //; // * * //; // * before running stressProof. The syntax is the same as for standard * //; // * PROOF valgrind runs. * //; // * * //; // ************************************************************************* /",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:4354,Testability,log,log,4354," // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 : H1 dataset: selector by object ................... OK * * //; // * Test 29 : Chain with TTree in subdirs ...................... OK * * //; // * * All registered tests have been passed :-) * * //; // * ****************************************************************** * //; // * * //; // * The application redirects the processing logs to a log file which is * //; // * normally deleted at the end of a successful run; if the test fails * //; // * the caller is asked if she/he wants to keep the log file; if the * //; // * specifies a log file path of her/his choice, the log file is never * //; // * deleted. * //; // * * //; // * SKIPPED means that the test cannot be run. * //; // * * //; // * New tests can be easily added by providing a function performing the * //; // * test and a name for the test; see examples below. * //; // * * //; // * It is also possible to trigger the automatic PROOF valgrind setup by * //; // * means of the env GETPROOF_VALGRIND. * //; // * E.g. to run the master in valgrind do * //; // * * //; // * $ export GETPROOF_VALGRIND=""valgrind=master"" * //; // * or * //; // * $ export GETPROOF_VALGRIND=""valgrind=workers"" * //; // * * //; // * before running stressProof. The syntax is the same as for standard * //; // * PROOF valgrind runs. * //; // * * //; // ************************************************************************* /",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:4437,Testability,test,test,4437," * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 : H1 dataset: selector by object ................... OK * * //; // * Test 29 : Chain with TTree in subdirs ...................... OK * * //; // * * All registered tests have been passed :-) * * //; // * ****************************************************************** * //; // * * //; // * The application redirects the processing logs to a log file which is * //; // * normally deleted at the end of a successful run; if the test fails * //; // * the caller is asked if she/he wants to keep the log file; if the * //; // * specifies a log file path of her/his choice, the log file is never * //; // * deleted. * //; // * * //; // * SKIPPED means that the test cannot be run. * //; // * * //; // * New tests can be easily added by providing a function performing the * //; // * test and a name for the test; see examples below. * //; // * * //; // * It is also possible to trigger the automatic PROOF valgrind setup by * //; // * means of the env GETPROOF_VALGRIND. * //; // * E.g. to run the master in valgrind do * //; // * * //; // * $ export GETPROOF_VALGRIND=""valgrind=master"" * //; // * or * //; // * $ export GETPROOF_VALGRIND=""valgrind=workers"" * //; // * * //; // * before running stressProof. The syntax is the same as for standard * //; // * PROOF valgrind runs. * //; // * * //; // ************************************************************************* //",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:4483,Testability,test,tests,4483," * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 : H1 dataset: selector by object ................... OK * * //; // * Test 29 : Chain with TTree in subdirs ...................... OK * * //; // * * All registered tests have been passed :-) * * //; // * ****************************************************************** * //; // * * //; // * The application redirects the processing logs to a log file which is * //; // * normally deleted at the end of a successful run; if the test fails * //; // * the caller is asked if she/he wants to keep the log file; if the * //; // * specifies a log file path of her/his choice, the log file is never * //; // * deleted. * //; // * * //; // * SKIPPED means that the test cannot be run. * //; // * * //; // * New tests can be easily added by providing a function performing the * //; // * test and a name for the test; see examples below. * //; // * * //; // * It is also possible to trigger the automatic PROOF valgrind setup by * //; // * means of the env GETPROOF_VALGRIND. * //; // * E.g. to run the master in valgrind do * //; // * * //; // * $ export GETPROOF_VALGRIND=""valgrind=master"" * //; // * or * //; // * $ export GETPROOF_VALGRIND=""valgrind=workers"" * //; // * * //; // * before running stressProof. The syntax is the same as for standard * //; // * PROOF valgrind runs. * //; // * * //; // ************************************************************************* //",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:4559,Testability,test,test,4559," * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 : H1 dataset: selector by object ................... OK * * //; // * Test 29 : Chain with TTree in subdirs ...................... OK * * //; // * * All registered tests have been passed :-) * * //; // * ****************************************************************** * //; // * * //; // * The application redirects the processing logs to a log file which is * //; // * normally deleted at the end of a successful run; if the test fails * //; // * the caller is asked if she/he wants to keep the log file; if the * //; // * specifies a log file path of her/his choice, the log file is never * //; // * deleted. * //; // * * //; // * SKIPPED means that the test cannot be run. * //; // * * //; // * New tests can be easily added by providing a function performing the * //; // * test and a name for the test; see examples below. * //; // * * //; // * It is also possible to trigger the automatic PROOF valgrind setup by * //; // * means of the env GETPROOF_VALGRIND. * //; // * E.g. to run the master in valgrind do * //; // * * //; // * $ export GETPROOF_VALGRIND=""valgrind=master"" * //; // * or * //; // * $ export GETPROOF_VALGRIND=""valgrind=workers"" * //; // * * //; // * before running stressProof. The syntax is the same as for standard * //; // * PROOF valgrind runs. * //; // * * //; // ************************************************************************* //",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:4583,Testability,test,test,4583," * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 : H1 dataset: selector by object ................... OK * * //; // * Test 29 : Chain with TTree in subdirs ...................... OK * * //; // * * All registered tests have been passed :-) * * //; // * ****************************************************************** * //; // * * //; // * The application redirects the processing logs to a log file which is * //; // * normally deleted at the end of a successful run; if the test fails * //; // * the caller is asked if she/he wants to keep the log file; if the * //; // * specifies a log file path of her/his choice, the log file is never * //; // * deleted. * //; // * * //; // * SKIPPED means that the test cannot be run. * //; // * * //; // * New tests can be easily added by providing a function performing the * //; // * test and a name for the test; see examples below. * //; // * * //; // * It is also possible to trigger the automatic PROOF valgrind setup by * //; // * means of the env GETPROOF_VALGRIND. * //; // * E.g. to run the master in valgrind do * //; // * * //; // * $ export GETPROOF_VALGRIND=""valgrind=master"" * //; // * or * //; // * $ export GETPROOF_VALGRIND=""valgrind=workers"" * //; // * * //; // * before running stressProof. The syntax is the same as for standard * //; // * PROOF valgrind runs. * //; // * * //; // ************************************************************************* //",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:1862,Usability,Simpl,Simple,1862,"* //; // * verbose [Int_t] increasing verbosity (0 == minimal) * //; // * dyn [Bool_t] if kTRUE run in dynamic startup mode * //; // * skipds [Bool_t] if kTRUE the dataset related tests are skipped * //; // * * //; // * A certain number of swithces can also be controlled via environment * //; // * variables: check './stressProof -h' * //; // * * //; // * The stressProof function returns 0 on success, 1 on failure. * //; // * * //; // * The successful output looks like this: * //; // * * //; // * ****************************************************************** * //; // * * Starting P R O O F - S T R E S S suite * * //; // * ****************************************************************** * //; // * * Log file: /tmp/ProofStress_XrcwBe * //; // * ****************************************************************** * //; // * Test 1 : Open a session ................................... OK * * //; // * Test 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; // * Test 5 : H1: chain processing ............................. OK * * //; // * Test 6 : H1: file collection processing ................... OK * * //; // * Test 7 : H1: file collection, TPacketizerAdaptive ......... OK * * //; // * Test 8 : H1: by-name processing ........................... OK * * //; // * Test 9 : H1: multi dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin fun",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:2626,Usability,Simpl,Simple,2626,"*************************************************************** * //; // * Test 1 : Open a session ................................... OK * * //; // * Test 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; // * Test 5 : H1: chain processing ............................. OK * * //; // * Test 6 : H1: file collection processing ................... OK * * //; // * Test 7 : H1: file collection, TPacketizerAdaptive ......... OK * * //; // * Test 8 : H1: by-name processing ........................... OK * * //; // * Test 9 : H1: multi dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 :",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:2784,Usability,Simpl,Simple,2784,"st 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; // * Test 5 : H1: chain processing ............................. OK * * //; // * Test 6 : H1: file collection processing ................... OK * * //; // * Test 7 : H1: file collection, TPacketizerAdaptive ......... OK * * //; // * Test 8 : H1: by-name processing ........................... OK * * //; // * Test 9 : H1: multi dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 ",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3704,Usability,Simpl,Simple,3704,"nput data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 : H1 dataset: selector by object ................... OK * * //; // * Test 29 : Chain with TTree in subdirs ...................... OK * * //; // * * All registered tests have been passed :-) * * //; // * ****************************************************************** * //; // * * //; // * The application redirects the processing logs to a log file which is * //; // * normally deleted at the end of a successful run; if the test fails * //; // * the caller is asked if she/he wants to keep the log file; if the * //; // * specifies a log file path of her/his choice, the log file is never * //; // * deleted. * //; // * * //; // * SKIPPED means that the test cannot be run. * //; // * * //; // * New tests can be easily added by providing a function performing the * //; // * test and a name for the test; see examples below. * //; // * * //; // * It is also possible to trigger the automatic PROOF valgrind setup by * //;",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Deployability,Release,Release,86,"////////////////////////////////////////////////////////////////////////////////; /// Release the memory cache associated with file 'fn'.",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:105,Performance,cache,cache,105,"////////////////////////////////////////////////////////////////////////////////; /// Release the memory cache associated with file 'fn'.",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:30,Testability,test,testing,30,"//; // Auxilliary classes for testing; //",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:29,Testability,test,test,29,"// Sequential number for the test",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:35,Testability,test,test,35,"// Function to be executed for the test",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:8,Integrability,depend,dependencies,8,"// Test dependencies, e.g. ""1,3""",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Test,Test,3,"// Test dependencies, e.g. ""1,3""",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:17,Testability,test,test,17,"// kTRUE if this test is enabled",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:24,Testability,test,test,24,"// CPU time used by the test",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:25,Testability,test,test,25,"// Real time used by the test",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:19,Testability,log,logs,19,"// #2: Get session logs",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:7,Usability,Simpl,Simple,7,"// #3: Simple random number generation",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:8,Usability,Simpl,Simple,8,"// #13: Simple 'event' generation",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:12,Usability,Simpl,Simple,12,"// #15: H1, Simple: async mode",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:8,Usability,Simpl,Simple,8,"// #26: Simple generation: merge-via-file",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:8,Usability,Simpl,Simple,8,"// #27: Simple random number generation by TSelector object",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:24,Integrability,depend,dependency,24,"// Return index of next dependency or -1 if none (or no more); // If reset is kTRUE, reset the internal counter before acting.",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:107,Integrability,depend,dependency,107,"////////////////////////////////////////////////////////////////////////////////; /// Return index of next dependency or -1 if none (or no more); /// If reset is kTRUE, reset the internal counter before acting.",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:148,Availability,error,error,148,"////////////////////////////////////////////////////////////////////////////////; /// Generic stress steering function; returns 0 on success, -1 on error",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Test,Test,3,"// Test functions",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Deployability,Update,Update,3,"// Update the statistics",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:6,Usability,progress bar,progress bar,6,"// No progress bar if not tty or explicitly not requested (i.e. for ctest)",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:9,Performance,cache,cache,9,"// Clear cache",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear cache",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Log,Log,3,"// Log file path",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:16,Testability,test,tests,16,"//; // Register tests; //",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Simpl,Simple,3,"// Simple open",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:7,Testability,log,logs,7,"// Get logs",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Simpl,Simple,3,"// Simple histogram generation",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Test,Test,3,"// Test of data set handling with the H1 http files",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:26,Energy Efficiency,adapt,adaptive,26,"// H1 analysis over HTTP: adaptive packetizer",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:26,Modifiability,adapt,adaptive,26,"// H1 analysis over HTTP: adaptive packetizer",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Test,Test,3,"// Test package management with 'event'",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Test,Test,3,"// Test package argument passing",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Simpl,Simple,3,"// Simple event analysis",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Test,Test,3,"// Test input data propagation (it only works in the static startup mode)",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Test,Test,3,"// Test asynchronous running",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Test,Test,3,"// Test admin functionality",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Test,Test,3,"// Test merging via submergers",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Test,Test,3,"// Test range chain and dataset processing EventProc",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Test,Test,3,"// Test range chain and dataset processing EventProc with TPacketizerAdaptive",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Test,Test,3,"// Test TProofOutputFile technology for ntuple creation",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Test,Test,3,"// Test TProofOutputFile technology for ntuple creation using submergers",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Test,Test,3,"// Test TProofOutputFile technology for dataset creation (tests TProofDraw too)",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:58,Testability,test,tests,58,"// Test TProofOutputFile technology for dataset creation (tests TProofDraw too)",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Test,Test,3,"// Test selecting different TTrees in same files",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Test,Test,3,"// Test TPacketizerFile and TTree friends in separate files",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Test,Test,3,"// Test TPacketizerFile and TTree friends in same file",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Test,Test,3,"// Test handling output via file",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Simpl,Simple,3,"// Simple histogram generation by TSelector object",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Test,Test,3,"// Test TPacketizerFile and TTree friends in separate files",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:25,Testability,test,tests,25,"// Disable first all the tests",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:34,Testability,test,tests,34,"// Process one by one all enabled tests",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:23,Testability,test,tests,23,"// Enable the required tests",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:23,Testability,test,test,23,"// Enable the required test",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:22,Testability,test,tests,22,"// Notify the enabled tests",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:15,Testability,test,tests,15,"//; // Run the tests; //",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:10,Testability,log,log,10,"// Remove log file",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:17,Testability,log,logs,17,"// Save also the logs from the workers",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:95,Security,access,accessing,95,"// Display all logfiles directly on this terminal. Useful for getting; // test results without accessing the test machine (i.e. with CDash)",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:15,Testability,log,logfiles,15,"// Display all logfiles directly on this terminal. Useful for getting; // test results without accessing the test machine (i.e. with CDash)",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:74,Testability,test,test,74,"// Display all logfiles directly on this terminal. Useful for getting; // test results without accessing the test machine (i.e. with CDash)",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:109,Testability,test,test,109,"// Display all logfiles directly on this terminal. Useful for getting; // test results without accessing the test machine (i.e. with CDash)",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:10,Testability,log,log,10,"// Remove log file if not passed by the user",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:27,Testability,test,tests,27,"// Average from the single tests",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:51,Testability,test,test,51,"// If not PROOF-Lite, stop the daemon used for the test",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Deployability,Release,Release,86,"////////////////////////////////////////////////////////////////////////////////; /// Release memory cache associated with the H1 files at 'h1src', if it; /// makes any sense, i.e. are local ...",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:101,Performance,cache,cache,101,"////////////////////////////////////////////////////////////////////////////////; /// Release memory cache associated with the H1 files at 'h1src', if it; /// makes any sense, i.e. are local ...",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Deployability,Release,Release,3,"// Release the zip file ...",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:125,Availability,avail,available,125,"////////////////////////////////////////////////////////////////////////////////; /// Make sure that the needed H1 files are available at 'src'; /// If 'src' is ""download"", the files are download under <tutdir>/h1",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:162,Availability,down,download,162,"////////////////////////////////////////////////////////////////////////////////; /// Make sure that the needed H1 files are available at 'src'; /// If 'src' is ""download"", the files are download under <tutdir>/h1",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:187,Availability,down,download,187,"////////////////////////////////////////////////////////////////////////////////; /// Make sure that the needed H1 files are available at 'src'; /// If 'src' is ""download"", the files are download under <tutdir>/h1",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Deployability,Release,Release,86,"////////////////////////////////////////////////////////////////////////////////; /// Release memory cache associated with the event files at 'eventsrc', if it; /// makes any sense, i.e. are local ...",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:101,Performance,cache,cache,101,"////////////////////////////////////////////////////////////////////////////////; /// Release memory cache associated with the event files at 'eventsrc', if it; /// makes any sense, i.e. are local ...",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:130,Availability,avail,available,130,"////////////////////////////////////////////////////////////////////////////////; /// Make sure that the needed 'event' files are available at 'src'; /// If 'src' is ""download"", the files are download under <tutdir>/event .; /// By default 10 files are checked; maximum is 50 (idx 1->50 not 0->49).",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:167,Availability,down,download,167,"////////////////////////////////////////////////////////////////////////////////; /// Make sure that the needed 'event' files are available at 'src'; /// If 'src' is ""download"", the files are download under <tutdir>/event .; /// By default 10 files are checked; maximum is 50 (idx 1->50 not 0->49).",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:192,Availability,down,download,192,"////////////////////////////////////////////////////////////////////////////////; /// Make sure that the needed 'event' files are available at 'src'; /// If 'src' is ""download"", the files are download under <tutdir>/event .; /// By default 10 files are checked; maximum is 50 (idx 1->50 not 0->49).",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:122,Availability,avail,available,122,"////////////////////////////////////////////////////////////////////////////////; /// Make sure that the needed files are available under the specified; /// tutorial directory, setting the relevant variables",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:198,Modifiability,variab,variables,198,"////////////////////////////////////////////////////////////////////////////////; /// Make sure that the needed files are available under the specified; /// tutorial directory, setting the relevant variables",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear dsname",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test session opening",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:33,Safety,avoid,avoid,33,"// Force '/tmp' under macosx, to avoid problems with lengths and symlinks",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:29,Testability,log,logged,29,"// Re-check locality: if the logged user name is different from the local one, we may; // not have all the rights we need, so we go no-local",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:9,Performance,Cache,Cache,9,"// Clear Cache",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear Cache",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:47,Modifiability,sandbox,sandbox,47,"// Get some useful info about the cluster (the sandbox dir ...)",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:47,Testability,sandbox,sandbox,47,"// Get some useful info about the cluster (the sandbox dir ...)",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test log retrieving",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:91,Testability,log,log,91,"////////////////////////////////////////////////////////////////////////////////; /// Test log retrieving",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test run for the ProofSimple analysis (see tutorials)",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear the list of query results",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test output handling via file using ProofSimple (see tutorials)",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:29,Testability,test,tested,29,"// Merged file pptions to be tested",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear the list of query results",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Test,Test,3,"// Test dataset creationg with a ntuple",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test run for the H1 analysis as a chain reading the data from HTTP",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Assert,Assert,3,"// Assert the files, if needed",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:27,Performance,cache,cache,27,"// Clear associated memory cache",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear associated memory cache",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear the list of query results",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test run for the H1 analysis as a file collection reading the data from HTTP",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Assert,Assert,3,"// Assert the files, if needed",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:27,Performance,cache,cache,27,"// Clear associated memory cache",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear associated memory cache",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear the list of query results",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test run for the H1 analysis as a named dataset reading the data from HTTP",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:27,Performance,cache,cache,27,"// Clear associated memory cache",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear associated memory cache",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear the list of query results",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test run for the H1 analysis as a named dataset reading the data from HTTP",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:27,Performance,cache,cache,27,"// Clear associated memory cache",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear associated memory cache",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear the list of query results",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test run using the H1 analysis for the multi-dataset functionality and; /// entry-lists",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:27,Performance,cache,cache,27,"// Clear associated memory cache",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear associated memory cache",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear the list of query results",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:27,Performance,cache,cache,27,"// Clear associated memory cache",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear associated memory cache",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test dataset registration, verification, usage, removal.; /// Use H1 analysis files on HTTP as example",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Assert,Assert,3,"// Assert the files, if needed",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Test,Test,3,"// Test removal",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test package clearing, uploading, enabling, removal.; /// Use event.par as example.",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:99,Usability,clear,clearing,99,"////////////////////////////////////////////////////////////////////////////////; /// Test package clearing, uploading, enabling, removal.; /// Use event.par as example.",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:31,Availability,avail,available,31,"// Remove the packages already available",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Test,Test,3,"// Test cleanup",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test run for the ProofEvent analysis (see tutorials)",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear the list of query results",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test input data functionality",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:14,Testability,test,test,14,"// Create the test information to be send via input and retrieved",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:11,Testability,test,test,11,"// Type of test",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear the list of query results",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Test,Test,3,"// Test how many workers got everything successfully",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Testability,Test,Testing,86,"////////////////////////////////////////////////////////////////////////////////; /// Testing passing arguments to packages",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:11,Testability,test,test,11,"// Type of test",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear the list of query results",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Modifiability,Variab,Variable,3,"// Variable to check",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Test,Test,3,"// Test how many workers got everything successfully",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:34,Integrability,depend,dependencies,34,"// Testing recursive enabling via dependencies: upload packtest3",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Test,Testing,3,"// Testing recursive enabling via dependencies: upload packtest3",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:11,Testability,test,test,11,"// Type of test",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear the list of query results",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Modifiability,Variab,Variable,3,"// Variable to check",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Test,Test,3,"// Test how many workers got everything successfully",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test run for the H1 and Simple analysis in asynchronous mode",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:110,Usability,Simpl,Simple,110,"////////////////////////////////////////////////////////////////////////////////; /// Test run for the H1 and Simple analysis in asynchronous mode",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Assert,Assert,3,"// Assert the files, if needed",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:27,Performance,cache,cache,27,"// Clear associated memory cache",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear associated memory cache",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear the list of query results",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:24,Availability,avail,available,24,"// Retrieve the list of available query results",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test run for the admin functionality",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:22,Testability,test,test,22,"// Directory for this test",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:18,Testability,test,test,18,"// Create a small test file",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:13,Security,checksum,checksum,13,"// Reference checksum",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:24,Modifiability,sandbox,sandbox,24,"// Send the file to the sandbox",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:24,Testability,sandbox,sandbox,24,"// Send the file to the sandbox",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Test,Test,3,"// Test 'ls'",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Test,Test,3,"// Test 'more'",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Test,Test,3,"// Test 'stat'",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:8,Availability,failure,failure,8,"// Stat failure",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:8,Availability,failure,failure,8,"// Stat failure",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Test,Test,3,"// Test 'cp' and 'md5sum;",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:6,Availability,failure,failure,6,"// Cp failure",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test processing of sub-samples (entries-from-first) from files with the; /// 'event' structures",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Test,Test,3,"// Test first with a chain",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Assert,Assert,3,"// Assert the files, if needed",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:27,Performance,cache,cache,27,"// Clear associated memory cache",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear associated memory cache",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear the list of query results",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Performance,Load,Load,3,"// Load special class for event ranges checks",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:30,Testability,test,test,30,"// We are done if not dataset test possible",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:27,Performance,cache,cache,27,"// Clear associated memory cache",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear associated memory cache",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test TProofOutputFile technology to create a ntuple, with or without; /// submergers",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear the list of query results",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test TProofOutputFile technology to create a dataset",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear the list of query results",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test processing of multiple trees in the same files",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:63,Security,validat,validated,63,"// There must be a dataset 'testNtuple' already registered and validated",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:28,Testability,test,testNtuple,28,"// There must be a dataset 'testNtuple' already registered and validated",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test processing of TTree friends in PROOF",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear the list of query results",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear the files created by this run",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test processing of TTree in subdirectories",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear the list of query results",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear the files created by this run",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test run for the ProofSimple analysis (see tutorials) passing the; /// selector by object",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear the list of query results",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:49,Safety,avoid,avoid,49,"// Define TSelector object. We use reflection to avoid including the header,; // so being able to change the tutorial directory",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test run for the H1 analysis as a chain reading the data from HTTP and; /// passing the selector by object",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Testability,Assert,Assert,3,"// Assert the files, if needed",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:27,Performance,cache,cache,27,"// Clear associated memory cache",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear associated memory cache",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Usability,Clear,Clear,3,"// Clear the list of query results",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Performance,Load,Load,3,"// Load TSelector",MatchSource.CODE_COMMENT,test/stressProof.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressShapes.cxx:95,Testability,test,test,95,"//--- This macro creates a simple geometry based on all shapes known; //--- by TGeo. The first test generates 1 million random points inside; //--- the bounding box of each shape and computes the volume of the; //--- shape as Vbbox*Ninside/Ntotal.; //--- The second test tracks 100K random rays in the geometry, histogramming; //--- the length of all segments passing through each different shape.; //--- It computes mean, RMS and sum of lengths of all segments inside a; //--- given shape and compares with reference values.; //; // This test program is automatically created by $ROOTSYS/test/Makefile.; // To run it in batch, execute stressGeom.; // To run this test with interactive CINT, do; // root > .x stressShapes.cxx++; // or; // root > .x stressShapes.cxx",MatchSource.CODE_COMMENT,test/stressShapes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressShapes.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressShapes.cxx:266,Testability,test,test,266,"//--- This macro creates a simple geometry based on all shapes known; //--- by TGeo. The first test generates 1 million random points inside; //--- the bounding box of each shape and computes the volume of the; //--- shape as Vbbox*Ninside/Ntotal.; //--- The second test tracks 100K random rays in the geometry, histogramming; //--- the length of all segments passing through each different shape.; //--- It computes mean, RMS and sum of lengths of all segments inside a; //--- given shape and compares with reference values.; //; // This test program is automatically created by $ROOTSYS/test/Makefile.; // To run it in batch, execute stressGeom.; // To run this test with interactive CINT, do; // root > .x stressShapes.cxx++; // or; // root > .x stressShapes.cxx",MatchSource.CODE_COMMENT,test/stressShapes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressShapes.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressShapes.cxx:539,Testability,test,test,539,"//--- This macro creates a simple geometry based on all shapes known; //--- by TGeo. The first test generates 1 million random points inside; //--- the bounding box of each shape and computes the volume of the; //--- shape as Vbbox*Ninside/Ntotal.; //--- The second test tracks 100K random rays in the geometry, histogramming; //--- the length of all segments passing through each different shape.; //--- It computes mean, RMS and sum of lengths of all segments inside a; //--- given shape and compares with reference values.; //; // This test program is automatically created by $ROOTSYS/test/Makefile.; // To run it in batch, execute stressGeom.; // To run this test with interactive CINT, do; // root > .x stressShapes.cxx++; // or; // root > .x stressShapes.cxx",MatchSource.CODE_COMMENT,test/stressShapes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressShapes.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressShapes.cxx:589,Testability,test,test,589,"//--- This macro creates a simple geometry based on all shapes known; //--- by TGeo. The first test generates 1 million random points inside; //--- the bounding box of each shape and computes the volume of the; //--- shape as Vbbox*Ninside/Ntotal.; //--- The second test tracks 100K random rays in the geometry, histogramming; //--- the length of all segments passing through each different shape.; //--- It computes mean, RMS and sum of lengths of all segments inside a; //--- given shape and compares with reference values.; //; // This test program is automatically created by $ROOTSYS/test/Makefile.; // To run it in batch, execute stressGeom.; // To run this test with interactive CINT, do; // root > .x stressShapes.cxx++; // or; // root > .x stressShapes.cxx",MatchSource.CODE_COMMENT,test/stressShapes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressShapes.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressShapes.cxx:664,Testability,test,test,664,"//--- This macro creates a simple geometry based on all shapes known; //--- by TGeo. The first test generates 1 million random points inside; //--- the bounding box of each shape and computes the volume of the; //--- shape as Vbbox*Ninside/Ntotal.; //--- The second test tracks 100K random rays in the geometry, histogramming; //--- the length of all segments passing through each different shape.; //--- It computes mean, RMS and sum of lengths of all segments inside a; //--- given shape and compares with reference values.; //; // This test program is automatically created by $ROOTSYS/test/Makefile.; // To run it in batch, execute stressGeom.; // To run this test with interactive CINT, do; // root > .x stressShapes.cxx++; // or; // root > .x stressShapes.cxx",MatchSource.CODE_COMMENT,test/stressShapes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressShapes.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressShapes.cxx:27,Usability,simpl,simple,27,"//--- This macro creates a simple geometry based on all shapes known; //--- by TGeo. The first test generates 1 million random points inside; //--- the bounding box of each shape and computes the volume of the; //--- shape as Vbbox*Ninside/Ntotal.; //--- The second test tracks 100K random rays in the geometry, histogramming; //--- the length of all segments passing through each different shape.; //--- It computes mean, RMS and sum of lengths of all segments inside a; //--- given shape and compares with reference values.; //; // This test program is automatically created by $ROOTSYS/test/Makefile.; // To run it in batch, execute stressGeom.; // To run this test with interactive CINT, do; // root > .x stressShapes.cxx++; // or; // root > .x stressShapes.cxx",MatchSource.CODE_COMMENT,test/stressShapes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressShapes.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressShapes.cxx:16,Testability,test,test,16,"// New geometry test suite. Creates a geometry containing all shape; // types. Loop over all volumes and compute the following :; // - generate 1 million random points and count how many are inside; // each shape -> compute volume of each shape; // - generate 10000 random directions and propagate from the center; // of each volume -> compute total step length to exit current shape",MatchSource.CODE_COMMENT,test/stressShapes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressShapes.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressSpectrum.cxx:1134,Performance,perform,performance,1134,"////////////////////////////////////////////////////; //; // TSPectrum test suite; // ====================; //; // This stress program tests many elements of the TSpectrum, TSpectrum2 classes.; //; // To run in batch, do; // stressSpectrum : run 100 experiments with graphics (default); // stressSpectrum 1000 : run 1000 experiments with graphics; // stressSpectrum -b 200 : run 200 experiments in batch mode; // stressSpectrum -b : run 100 experiments in batch mode; //; // To run interactively, do; // root -b; // Root > .x stressSpectrum.cxx : run 100 experiments with graphics (default); // Root > .x stressSpectrum.cxx(20) : run 20 experiments; // Root > .x stressSpectrum.cxx+(30) : run 30 experiments via ACLIC; //; // Several tests are run sequentially. Each test will produce one line (Test OK or Test FAILED) .; // At the end of the test a table is printed showing the global results; // Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 3.0 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; //; //////////////////////////////////////////////////////////////////////////; // //; //****************************************************************************; //* Starting stress S P E C T R U M *; //****************************************************************************; //Peak1 : found = 70.21/ 73.75, good = 65.03/ 68.60, ghost = 8.54/ 8.39,--- OK; //Peak2 : found =163/300, good =163, ghost =8,---------------------------- OK; //****************************************************************************; //stressSpectrum: Real Time = 19.86 seconds Cpu Time = 19.04 seconds; //****************************************************************************; //* ROOTMARKS = 810.9 * Root5.09/01 20051216/1229; //***********************************************************",MatchSource.CODE_COMMENT,test/stressSpectrum.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressSpectrum.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressSpectrum.cxx:12,Testability,test,test,12,"// @(#)root/test:$name: $:$id: stressSpectrum.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Author: Rene Brun 17/01/2006; /////////////////////////////////////////////////////////////////; //; // TSPectrum test suite; // ====================; //; // This stress program tests many elements of the TSpectrum, TSpectrum2 classes.; //; // To run in batch, do; // stressSpectrum : run 100 experiments with graphics (default); // stressSpectrum 1000 : run 1000 experiments with graphics; // stressSpectrum -b 200 : run 200 experiments in batch mode; // stressSpectrum -b : run 100 experiments in batch mode; //; // To run interactively, do; // root -b; // Root > .x stressSpectrum.cxx : run 100 experiments with graphics (default); // Root > .x stressSpectrum.cxx(20) : run 20 experiments; // Root > .x stressSpectrum.cxx+(30) : run 30 experiments via ACLIC; //; // Several tests are run sequentially. Each test will produce one line (Test OK or Test FAILED) .; // At the end of the test a table is printed showing the global results; // Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 3.0 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; //; //////////////////////////////////////////////////////////////////////////; // //; //****************************************************************************; //* Starting stress S P E C T R U M *; //****************************************************************************; //Peak1 : found = 70.21/ 73.75, good = 65.03/ 68.60, ghost = 8.54/ 8.39,--- OK; //Peak2 : found =163/300, good =163, ghost =8,---------------------------- OK; //****************************************************************************; //stressSpectrum: Real Time = 19.86 seconds Cpu Time = 19.04 seconds; //*********************************************************",MatchSource.CODE_COMMENT,test/stressSpectrum.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressSpectrum.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressSpectrum.cxx:205,Testability,test,test,205,"// @(#)root/test:$name: $:$id: stressSpectrum.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Author: Rene Brun 17/01/2006; /////////////////////////////////////////////////////////////////; //; // TSPectrum test suite; // ====================; //; // This stress program tests many elements of the TSpectrum, TSpectrum2 classes.; //; // To run in batch, do; // stressSpectrum : run 100 experiments with graphics (default); // stressSpectrum 1000 : run 1000 experiments with graphics; // stressSpectrum -b 200 : run 200 experiments in batch mode; // stressSpectrum -b : run 100 experiments in batch mode; //; // To run interactively, do; // root -b; // Root > .x stressSpectrum.cxx : run 100 experiments with graphics (default); // Root > .x stressSpectrum.cxx(20) : run 20 experiments; // Root > .x stressSpectrum.cxx+(30) : run 30 experiments via ACLIC; //; // Several tests are run sequentially. Each test will produce one line (Test OK or Test FAILED) .; // At the end of the test a table is printed showing the global results; // Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 3.0 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; //; //////////////////////////////////////////////////////////////////////////; // //; //****************************************************************************; //* Starting stress S P E C T R U M *; //****************************************************************************; //Peak1 : found = 70.21/ 73.75, good = 65.03/ 68.60, ghost = 8.54/ 8.39,--- OK; //Peak2 : found =163/300, good =163, ghost =8,---------------------------- OK; //****************************************************************************; //stressSpectrum: Real Time = 19.86 seconds Cpu Time = 19.04 seconds; //*********************************************************",MatchSource.CODE_COMMENT,test/stressSpectrum.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressSpectrum.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressSpectrum.cxx:269,Testability,test,tests,269,"// @(#)root/test:$name: $:$id: stressSpectrum.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Author: Rene Brun 17/01/2006; /////////////////////////////////////////////////////////////////; //; // TSPectrum test suite; // ====================; //; // This stress program tests many elements of the TSpectrum, TSpectrum2 classes.; //; // To run in batch, do; // stressSpectrum : run 100 experiments with graphics (default); // stressSpectrum 1000 : run 1000 experiments with graphics; // stressSpectrum -b 200 : run 200 experiments in batch mode; // stressSpectrum -b : run 100 experiments in batch mode; //; // To run interactively, do; // root -b; // Root > .x stressSpectrum.cxx : run 100 experiments with graphics (default); // Root > .x stressSpectrum.cxx(20) : run 20 experiments; // Root > .x stressSpectrum.cxx+(30) : run 30 experiments via ACLIC; //; // Several tests are run sequentially. Each test will produce one line (Test OK or Test FAILED) .; // At the end of the test a table is printed showing the global results; // Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 3.0 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; //; //////////////////////////////////////////////////////////////////////////; // //; //****************************************************************************; //* Starting stress S P E C T R U M *; //****************************************************************************; //Peak1 : found = 70.21/ 73.75, good = 65.03/ 68.60, ghost = 8.54/ 8.39,--- OK; //Peak2 : found =163/300, good =163, ghost =8,---------------------------- OK; //****************************************************************************; //stressSpectrum: Real Time = 19.86 seconds Cpu Time = 19.04 seconds; //*********************************************************",MatchSource.CODE_COMMENT,test/stressSpectrum.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressSpectrum.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressSpectrum.cxx:868,Testability,test,tests,868,"// @(#)root/test:$name: $:$id: stressSpectrum.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Author: Rene Brun 17/01/2006; /////////////////////////////////////////////////////////////////; //; // TSPectrum test suite; // ====================; //; // This stress program tests many elements of the TSpectrum, TSpectrum2 classes.; //; // To run in batch, do; // stressSpectrum : run 100 experiments with graphics (default); // stressSpectrum 1000 : run 1000 experiments with graphics; // stressSpectrum -b 200 : run 200 experiments in batch mode; // stressSpectrum -b : run 100 experiments in batch mode; //; // To run interactively, do; // root -b; // Root > .x stressSpectrum.cxx : run 100 experiments with graphics (default); // Root > .x stressSpectrum.cxx(20) : run 20 experiments; // Root > .x stressSpectrum.cxx+(30) : run 30 experiments via ACLIC; //; // Several tests are run sequentially. Each test will produce one line (Test OK or Test FAILED) .; // At the end of the test a table is printed showing the global results; // Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 3.0 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; //; //////////////////////////////////////////////////////////////////////////; // //; //****************************************************************************; //* Starting stress S P E C T R U M *; //****************************************************************************; //Peak1 : found = 70.21/ 73.75, good = 65.03/ 68.60, ghost = 8.54/ 8.39,--- OK; //Peak2 : found =163/300, good =163, ghost =8,---------------------------- OK; //****************************************************************************; //stressSpectrum: Real Time = 19.86 seconds Cpu Time = 19.04 seconds; //*********************************************************",MatchSource.CODE_COMMENT,test/stressSpectrum.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressSpectrum.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressSpectrum.cxx:901,Testability,test,test,901,"// @(#)root/test:$name: $:$id: stressSpectrum.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Author: Rene Brun 17/01/2006; /////////////////////////////////////////////////////////////////; //; // TSPectrum test suite; // ====================; //; // This stress program tests many elements of the TSpectrum, TSpectrum2 classes.; //; // To run in batch, do; // stressSpectrum : run 100 experiments with graphics (default); // stressSpectrum 1000 : run 1000 experiments with graphics; // stressSpectrum -b 200 : run 200 experiments in batch mode; // stressSpectrum -b : run 100 experiments in batch mode; //; // To run interactively, do; // root -b; // Root > .x stressSpectrum.cxx : run 100 experiments with graphics (default); // Root > .x stressSpectrum.cxx(20) : run 20 experiments; // Root > .x stressSpectrum.cxx+(30) : run 30 experiments via ACLIC; //; // Several tests are run sequentially. Each test will produce one line (Test OK or Test FAILED) .; // At the end of the test a table is printed showing the global results; // Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 3.0 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; //; //////////////////////////////////////////////////////////////////////////; // //; //****************************************************************************; //* Starting stress S P E C T R U M *; //****************************************************************************; //Peak1 : found = 70.21/ 73.75, good = 65.03/ 68.60, ghost = 8.54/ 8.39,--- OK; //Peak2 : found =163/300, good =163, ghost =8,---------------------------- OK; //****************************************************************************; //stressSpectrum: Real Time = 19.86 seconds Cpu Time = 19.04 seconds; //*********************************************************",MatchSource.CODE_COMMENT,test/stressSpectrum.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressSpectrum.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressSpectrum.cxx:929,Testability,Test,Test,929,"// @(#)root/test:$name: $:$id: stressSpectrum.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Author: Rene Brun 17/01/2006; /////////////////////////////////////////////////////////////////; //; // TSPectrum test suite; // ====================; //; // This stress program tests many elements of the TSpectrum, TSpectrum2 classes.; //; // To run in batch, do; // stressSpectrum : run 100 experiments with graphics (default); // stressSpectrum 1000 : run 1000 experiments with graphics; // stressSpectrum -b 200 : run 200 experiments in batch mode; // stressSpectrum -b : run 100 experiments in batch mode; //; // To run interactively, do; // root -b; // Root > .x stressSpectrum.cxx : run 100 experiments with graphics (default); // Root > .x stressSpectrum.cxx(20) : run 20 experiments; // Root > .x stressSpectrum.cxx+(30) : run 30 experiments via ACLIC; //; // Several tests are run sequentially. Each test will produce one line (Test OK or Test FAILED) .; // At the end of the test a table is printed showing the global results; // Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 3.0 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; //; //////////////////////////////////////////////////////////////////////////; // //; //****************************************************************************; //* Starting stress S P E C T R U M *; //****************************************************************************; //Peak1 : found = 70.21/ 73.75, good = 65.03/ 68.60, ghost = 8.54/ 8.39,--- OK; //Peak2 : found =163/300, good =163, ghost =8,---------------------------- OK; //****************************************************************************; //stressSpectrum: Real Time = 19.86 seconds Cpu Time = 19.04 seconds; //*********************************************************",MatchSource.CODE_COMMENT,test/stressSpectrum.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressSpectrum.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressSpectrum.cxx:940,Testability,Test,Test,940,"// @(#)root/test:$name: $:$id: stressSpectrum.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Author: Rene Brun 17/01/2006; /////////////////////////////////////////////////////////////////; //; // TSPectrum test suite; // ====================; //; // This stress program tests many elements of the TSpectrum, TSpectrum2 classes.; //; // To run in batch, do; // stressSpectrum : run 100 experiments with graphics (default); // stressSpectrum 1000 : run 1000 experiments with graphics; // stressSpectrum -b 200 : run 200 experiments in batch mode; // stressSpectrum -b : run 100 experiments in batch mode; //; // To run interactively, do; // root -b; // Root > .x stressSpectrum.cxx : run 100 experiments with graphics (default); // Root > .x stressSpectrum.cxx(20) : run 20 experiments; // Root > .x stressSpectrum.cxx+(30) : run 30 experiments via ACLIC; //; // Several tests are run sequentially. Each test will produce one line (Test OK or Test FAILED) .; // At the end of the test a table is printed showing the global results; // Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 3.0 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; //; //////////////////////////////////////////////////////////////////////////; // //; //****************************************************************************; //* Starting stress S P E C T R U M *; //****************************************************************************; //Peak1 : found = 70.21/ 73.75, good = 65.03/ 68.60, ghost = 8.54/ 8.39,--- OK; //Peak2 : found =163/300, good =163, ghost =8,---------------------------- OK; //****************************************************************************; //stressSpectrum: Real Time = 19.86 seconds Cpu Time = 19.04 seconds; //*********************************************************",MatchSource.CODE_COMMENT,test/stressSpectrum.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressSpectrum.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressSpectrum.cxx:977,Testability,test,test,977,"(#)root/test:$name: $:$id: stressSpectrum.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Author: Rene Brun 17/01/2006; /////////////////////////////////////////////////////////////////; //; // TSPectrum test suite; // ====================; //; // This stress program tests many elements of the TSpectrum, TSpectrum2 classes.; //; // To run in batch, do; // stressSpectrum : run 100 experiments with graphics (default); // stressSpectrum 1000 : run 1000 experiments with graphics; // stressSpectrum -b 200 : run 200 experiments in batch mode; // stressSpectrum -b : run 100 experiments in batch mode; //; // To run interactively, do; // root -b; // Root > .x stressSpectrum.cxx : run 100 experiments with graphics (default); // Root > .x stressSpectrum.cxx(20) : run 20 experiments; // Root > .x stressSpectrum.cxx+(30) : run 30 experiments via ACLIC; //; // Several tests are run sequentially. Each test will produce one line (Test OK or Test FAILED) .; // At the end of the test a table is printed showing the global results; // Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 3.0 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; //; //////////////////////////////////////////////////////////////////////////; // //; //****************************************************************************; //* Starting stress S P E C T R U M *; //****************************************************************************; //Peak1 : found = 70.21/ 73.75, good = 65.03/ 68.60, ghost = 8.54/ 8.39,--- OK; //Peak2 : found =163/300, good =163, ghost =8,---------------------------- OK; //****************************************************************************; //stressSpectrum: Real Time = 19.86 seconds Cpu Time = 19.04 seconds; //*************************************************************",MatchSource.CODE_COMMENT,test/stressSpectrum.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressSpectrum.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressSpectrum.cxx:1317,Testability,test,tests,1317,"//////////////////////////////////; //; // TSPectrum test suite; // ====================; //; // This stress program tests many elements of the TSpectrum, TSpectrum2 classes.; //; // To run in batch, do; // stressSpectrum : run 100 experiments with graphics (default); // stressSpectrum 1000 : run 1000 experiments with graphics; // stressSpectrum -b 200 : run 200 experiments in batch mode; // stressSpectrum -b : run 100 experiments in batch mode; //; // To run interactively, do; // root -b; // Root > .x stressSpectrum.cxx : run 100 experiments with graphics (default); // Root > .x stressSpectrum.cxx(20) : run 20 experiments; // Root > .x stressSpectrum.cxx+(30) : run 30 experiments via ACLIC; //; // Several tests are run sequentially. Each test will produce one line (Test OK or Test FAILED) .; // At the end of the test a table is printed showing the global results; // Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 3.0 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; //; //////////////////////////////////////////////////////////////////////////; // //; //****************************************************************************; //* Starting stress S P E C T R U M *; //****************************************************************************; //Peak1 : found = 70.21/ 73.75, good = 65.03/ 68.60, ghost = 8.54/ 8.39,--- OK; //Peak2 : found =163/300, good =163, ghost =8,---------------------------- OK; //****************************************************************************; //stressSpectrum: Real Time = 19.86 seconds Cpu Time = 19.04 seconds; //****************************************************************************; //* ROOTMARKS = 810.9 * Root5.09/01 20051216/1229; //****************************************************************************",MatchSource.CODE_COMMENT,test/stressSpectrum.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressSpectrum.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx:1195,Integrability,rout,routine,1195,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathCore Benchmark test suite; // ==============================; //; // This program performs tests of ROOT::Math 4D LorentzVectors comparing with TLorentzVector; // The time performing various vector operations on a collection of vectors is measured.; // The benchmarked operations are:; // - vector construction from 4 values; // - construction using a setter method; // - simple addition of all the vector pairs in the collection; // - calculation of deltaR = phi**2 + eta**2 of all vector pairs in the collection; // - two simple analysis:; // - the first requires some cut (on pt and eta) and on the invariant mass; // of the selected pairs; // - the second requires just some cut in pt, eta and delta R on all the; // vector pair; // - conversion between XYZTVectors to PtRhoEtaPhi based vectors; //; // The two analysis demostrates, especially in the second case, the advantage of using; // vector based on cylindrical coordinate, given the fact that the time spent in the conversion is; // much less than the time spent in the analysis routine.; //; // To run the program do:; // stressVector : run standard test with collection of 1000 vectors; // stressVector 10000 : run with a collection of 10000 vectors; //; ///////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/stressVector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx:236,Performance,perform,performs,236,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathCore Benchmark test suite; // ==============================; //; // This program performs tests of ROOT::Math 4D LorentzVectors comparing with TLorentzVector; // The time performing various vector operations on a collection of vectors is measured.; // The benchmarked operations are:; // - vector construction from 4 values; // - construction using a setter method; // - simple addition of all the vector pairs in the collection; // - calculation of deltaR = phi**2 + eta**2 of all vector pairs in the collection; // - two simple analysis:; // - the first requires some cut (on pt and eta) and on the invariant mass; // of the selected pairs; // - the second requires just some cut in pt, eta and delta R on all the; // vector pair; // - conversion between XYZTVectors to PtRhoEtaPhi based vectors; //; // The two analysis demostrates, especially in the second case, the advantage of using; // vector based on cylindrical coordinate, given the fact that the time spent in the conversion is; // much less than the time spent in the analysis routine.; //; // To run the program do:; // stressVector : run standard test with collection of 1000 vectors; // stressVector 10000 : run with a collection of 10000 vectors; //; ///////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/stressVector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx:326,Performance,perform,performing,326,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathCore Benchmark test suite; // ==============================; //; // This program performs tests of ROOT::Math 4D LorentzVectors comparing with TLorentzVector; // The time performing various vector operations on a collection of vectors is measured.; // The benchmarked operations are:; // - vector construction from 4 values; // - construction using a setter method; // - simple addition of all the vector pairs in the collection; // - calculation of deltaR = phi**2 + eta**2 of all vector pairs in the collection; // - two simple analysis:; // - the first requires some cut (on pt and eta) and on the invariant mass; // of the selected pairs; // - the second requires just some cut in pt, eta and delta R on all the; // vector pair; // - conversion between XYZTVectors to PtRhoEtaPhi based vectors; //; // The two analysis demostrates, especially in the second case, the advantage of using; // vector based on cylindrical coordinate, given the fact that the time spent in the conversion is; // much less than the time spent in the analysis routine.; //; // To run the program do:; // stressVector : run standard test with collection of 1000 vectors; // stressVector 10000 : run with a collection of 10000 vectors; //; ///////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/stressVector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathCore Benchmark test suite; // ==============================; //; // This program performs tests of ROOT::Math 4D LorentzVectors comparing with TLorentzVector; // The time performing various vector operations on a collection of vectors is measured.; // The benchmarked operations are:; // - vector construction from 4 values; // - construction using a setter method; // - simple addition of all the vector pairs in the collection; // - calculation of deltaR = phi**2 + eta**2 of all vector pairs in the collection; // - two simple analysis:; // - the first requires some cut (on pt and eta) and on the invariant mass; // of the selected pairs; // - the second requires just some cut in pt, eta and delta R on all the; // vector pair; // - conversion between XYZTVectors to PtRhoEtaPhi based vectors; //; // The two analysis demostrates, especially in the second case, the advantage of using; // vector based on cylindrical coordinate, given the fact that the time spent in the conversion is; // much less than the time spent in the analysis routine.; //; // To run the program do:; // stressVector : run standard test with collection of 1000 vectors; // stressVector 10000 : run with a collection of 10000 vectors; //; ///////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/stressVector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx:159,Testability,Benchmark,Benchmark,159,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathCore Benchmark test suite; // ==============================; //; // This program performs tests of ROOT::Math 4D LorentzVectors comparing with TLorentzVector; // The time performing various vector operations on a collection of vectors is measured.; // The benchmarked operations are:; // - vector construction from 4 values; // - construction using a setter method; // - simple addition of all the vector pairs in the collection; // - calculation of deltaR = phi**2 + eta**2 of all vector pairs in the collection; // - two simple analysis:; // - the first requires some cut (on pt and eta) and on the invariant mass; // of the selected pairs; // - the second requires just some cut in pt, eta and delta R on all the; // vector pair; // - conversion between XYZTVectors to PtRhoEtaPhi based vectors; //; // The two analysis demostrates, especially in the second case, the advantage of using; // vector based on cylindrical coordinate, given the fact that the time spent in the conversion is; // much less than the time spent in the analysis routine.; //; // To run the program do:; // stressVector : run standard test with collection of 1000 vectors; // stressVector 10000 : run with a collection of 10000 vectors; //; ///////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/stressVector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx:169,Testability,test,test,169,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathCore Benchmark test suite; // ==============================; //; // This program performs tests of ROOT::Math 4D LorentzVectors comparing with TLorentzVector; // The time performing various vector operations on a collection of vectors is measured.; // The benchmarked operations are:; // - vector construction from 4 values; // - construction using a setter method; // - simple addition of all the vector pairs in the collection; // - calculation of deltaR = phi**2 + eta**2 of all vector pairs in the collection; // - two simple analysis:; // - the first requires some cut (on pt and eta) and on the invariant mass; // of the selected pairs; // - the second requires just some cut in pt, eta and delta R on all the; // vector pair; // - conversion between XYZTVectors to PtRhoEtaPhi based vectors; //; // The two analysis demostrates, especially in the second case, the advantage of using; // vector based on cylindrical coordinate, given the fact that the time spent in the conversion is; // much less than the time spent in the analysis routine.; //; // To run the program do:; // stressVector : run standard test with collection of 1000 vectors; // stressVector 10000 : run with a collection of 10000 vectors; //; ///////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/stressVector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx:245,Testability,test,tests,245,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathCore Benchmark test suite; // ==============================; //; // This program performs tests of ROOT::Math 4D LorentzVectors comparing with TLorentzVector; // The time performing various vector operations on a collection of vectors is measured.; // The benchmarked operations are:; // - vector construction from 4 values; // - construction using a setter method; // - simple addition of all the vector pairs in the collection; // - calculation of deltaR = phi**2 + eta**2 of all vector pairs in the collection; // - two simple analysis:; // - the first requires some cut (on pt and eta) and on the invariant mass; // of the selected pairs; // - the second requires just some cut in pt, eta and delta R on all the; // vector pair; // - conversion between XYZTVectors to PtRhoEtaPhi based vectors; //; // The two analysis demostrates, especially in the second case, the advantage of using; // vector based on cylindrical coordinate, given the fact that the time spent in the conversion is; // much less than the time spent in the analysis routine.; //; // To run the program do:; // stressVector : run standard test with collection of 1000 vectors; // stressVector 10000 : run with a collection of 10000 vectors; //; ///////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/stressVector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx:411,Testability,benchmark,benchmarked,411,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathCore Benchmark test suite; // ==============================; //; // This program performs tests of ROOT::Math 4D LorentzVectors comparing with TLorentzVector; // The time performing various vector operations on a collection of vectors is measured.; // The benchmarked operations are:; // - vector construction from 4 values; // - construction using a setter method; // - simple addition of all the vector pairs in the collection; // - calculation of deltaR = phi**2 + eta**2 of all vector pairs in the collection; // - two simple analysis:; // - the first requires some cut (on pt and eta) and on the invariant mass; // of the selected pairs; // - the second requires just some cut in pt, eta and delta R on all the; // vector pair; // - conversion between XYZTVectors to PtRhoEtaPhi based vectors; //; // The two analysis demostrates, especially in the second case, the advantage of using; // vector based on cylindrical coordinate, given the fact that the time spent in the conversion is; // much less than the time spent in the analysis routine.; //; // To run the program do:; // stressVector : run standard test with collection of 1000 vectors; // stressVector 10000 : run with a collection of 10000 vectors; //; ///////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/stressVector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx:1267,Testability,test,test,1267,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathCore Benchmark test suite; // ==============================; //; // This program performs tests of ROOT::Math 4D LorentzVectors comparing with TLorentzVector; // The time performing various vector operations on a collection of vectors is measured.; // The benchmarked operations are:; // - vector construction from 4 values; // - construction using a setter method; // - simple addition of all the vector pairs in the collection; // - calculation of deltaR = phi**2 + eta**2 of all vector pairs in the collection; // - two simple analysis:; // - the first requires some cut (on pt and eta) and on the invariant mass; // of the selected pairs; // - the second requires just some cut in pt, eta and delta R on all the; // vector pair; // - conversion between XYZTVectors to PtRhoEtaPhi based vectors; //; // The two analysis demostrates, especially in the second case, the advantage of using; // vector based on cylindrical coordinate, given the fact that the time spent in the conversion is; // much less than the time spent in the analysis routine.; //; // To run the program do:; // stressVector : run standard test with collection of 1000 vectors; // stressVector 10000 : run with a collection of 10000 vectors; //; ///////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/stressVector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx:526,Usability,simpl,simple,526,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathCore Benchmark test suite; // ==============================; //; // This program performs tests of ROOT::Math 4D LorentzVectors comparing with TLorentzVector; // The time performing various vector operations on a collection of vectors is measured.; // The benchmarked operations are:; // - vector construction from 4 values; // - construction using a setter method; // - simple addition of all the vector pairs in the collection; // - calculation of deltaR = phi**2 + eta**2 of all vector pairs in the collection; // - two simple analysis:; // - the first requires some cut (on pt and eta) and on the invariant mass; // of the selected pairs; // - the second requires just some cut in pt, eta and delta R on all the; // vector pair; // - conversion between XYZTVectors to PtRhoEtaPhi based vectors; //; // The two analysis demostrates, especially in the second case, the advantage of using; // vector based on cylindrical coordinate, given the fact that the time spent in the conversion is; // much less than the time spent in the analysis routine.; //; // To run the program do:; // stressVector : run standard test with collection of 1000 vectors; // stressVector 10000 : run with a collection of 10000 vectors; //; ///////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/stressVector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx:678,Usability,simpl,simple,678,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathCore Benchmark test suite; // ==============================; //; // This program performs tests of ROOT::Math 4D LorentzVectors comparing with TLorentzVector; // The time performing various vector operations on a collection of vectors is measured.; // The benchmarked operations are:; // - vector construction from 4 values; // - construction using a setter method; // - simple addition of all the vector pairs in the collection; // - calculation of deltaR = phi**2 + eta**2 of all vector pairs in the collection; // - two simple analysis:; // - the first requires some cut (on pt and eta) and on the invariant mass; // of the selected pairs; // - the second requires just some cut in pt, eta and delta R on all the; // vector pair; // - conversion between XYZTVectors to PtRhoEtaPhi based vectors; //; // The two analysis demostrates, especially in the second case, the advantage of using; // vector based on cylindrical coordinate, given the fact that the time spent in the conversion is; // much less than the time spent in the analysis routine.; //; // To run the program do:; // stressVector : run standard test with collection of 1000 vectors; // stressVector 10000 : run with a collection of 10000 vectors; //; ///////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/stressVector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx:15,Modifiability,variab,variables,15,"// global data variables",MatchSource.CODE_COMMENT,test/stressVector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx:3,Testability,test,test,3,"// test matrix vector multiplication",MatchSource.CODE_COMMENT,test/stressVector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx:3,Testability,test,test,3,"// test Rotations on Vectors",MatchSource.CODE_COMMENT,test/stressVector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx:3,Testability,test,test,3,"// test rotations using the matrix for multiplications",MatchSource.CODE_COMMENT,test/stressVector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx:3,Testability,test,test,3,"// test Boost",MatchSource.CODE_COMMENT,test/stressVector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx:3,Testability,test,test,3,"// test Boost (2)",MatchSource.CODE_COMMENT,test/stressVector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx:3,Testability,test,test,3,"// test BoostX",MatchSource.CODE_COMMENT,test/stressVector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx:3,Testability,test,test,3,"// test Boost (2)",MatchSource.CODE_COMMENT,test/stressVector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx:3,Testability,test,test,3,"// test TLorentzVector => ROOT::Math::PxPyPzEVector conversion.",MatchSource.CODE_COMMENT,test/stressVector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TBench.cxx:33,Performance,perform,performance,33,"// set of classes to compare the performance of STL vector versus; // native Root TClonesArray.; // See main program bench.cxx",MatchSource.CODE_COMMENT,test/TBench.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TBench.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TBench.cxx:19,Usability,Clear,Clear,19,"// hitCount.print(""Clear"");",MatchSource.CODE_COMMENT,test/TBench.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TBench.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TBench.cxx:25,Usability,Clear,Clear,25,"//hitCount.print(""End of Clear"");",MatchSource.CODE_COMMENT,test/TBench.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TBench.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TBench.cxx:10,Usability,Clear,Clear,10,"//fList3->Clear();",MatchSource.CODE_COMMENT,test/TBench.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TBench.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Nikolay Root 05/07/98",MatchSource.CODE_COMMENT,test/tcollbm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:31,Security,access,access,31,"//; // This program benchmarks access time to objects by name or index; // for TObjArray,TOrdCollection,TList,TSortedList,THashList,TBtree,; // TClonesArray and THashTable collections.; //; // Usage: tcollbm -h - to print a usage info; // tcollbm [-n|-i|-m] [nobjects] [ntimes] - to run tests; //; // switches:; // -n - benchmark access by name (default); // -i - benchmark access by index; // -m - benchmark of objects allocation; //; // parameters:; // nobjects - number of objects to be inserted into collections; // ntimes - number of random lookups in the collection; //; // default values ( adjusted in 'main' according 'moda' value )",MatchSource.CODE_COMMENT,test/tcollbm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:330,Security,access,access,330,"//; // This program benchmarks access time to objects by name or index; // for TObjArray,TOrdCollection,TList,TSortedList,THashList,TBtree,; // TClonesArray and THashTable collections.; //; // Usage: tcollbm -h - to print a usage info; // tcollbm [-n|-i|-m] [nobjects] [ntimes] - to run tests; //; // switches:; // -n - benchmark access by name (default); // -i - benchmark access by index; // -m - benchmark of objects allocation; //; // parameters:; // nobjects - number of objects to be inserted into collections; // ntimes - number of random lookups in the collection; //; // default values ( adjusted in 'main' according 'moda' value )",MatchSource.CODE_COMMENT,test/tcollbm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:374,Security,access,access,374,"//; // This program benchmarks access time to objects by name or index; // for TObjArray,TOrdCollection,TList,TSortedList,THashList,TBtree,; // TClonesArray and THashTable collections.; //; // Usage: tcollbm -h - to print a usage info; // tcollbm [-n|-i|-m] [nobjects] [ntimes] - to run tests; //; // switches:; // -n - benchmark access by name (default); // -i - benchmark access by index; // -m - benchmark of objects allocation; //; // parameters:; // nobjects - number of objects to be inserted into collections; // ntimes - number of random lookups in the collection; //; // default values ( adjusted in 'main' according 'moda' value )",MatchSource.CODE_COMMENT,test/tcollbm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:20,Testability,benchmark,benchmarks,20,"//; // This program benchmarks access time to objects by name or index; // for TObjArray,TOrdCollection,TList,TSortedList,THashList,TBtree,; // TClonesArray and THashTable collections.; //; // Usage: tcollbm -h - to print a usage info; // tcollbm [-n|-i|-m] [nobjects] [ntimes] - to run tests; //; // switches:; // -n - benchmark access by name (default); // -i - benchmark access by index; // -m - benchmark of objects allocation; //; // parameters:; // nobjects - number of objects to be inserted into collections; // ntimes - number of random lookups in the collection; //; // default values ( adjusted in 'main' according 'moda' value )",MatchSource.CODE_COMMENT,test/tcollbm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:287,Testability,test,tests,287,"//; // This program benchmarks access time to objects by name or index; // for TObjArray,TOrdCollection,TList,TSortedList,THashList,TBtree,; // TClonesArray and THashTable collections.; //; // Usage: tcollbm -h - to print a usage info; // tcollbm [-n|-i|-m] [nobjects] [ntimes] - to run tests; //; // switches:; // -n - benchmark access by name (default); // -i - benchmark access by index; // -m - benchmark of objects allocation; //; // parameters:; // nobjects - number of objects to be inserted into collections; // ntimes - number of random lookups in the collection; //; // default values ( adjusted in 'main' according 'moda' value )",MatchSource.CODE_COMMENT,test/tcollbm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:320,Testability,benchmark,benchmark,320,"//; // This program benchmarks access time to objects by name or index; // for TObjArray,TOrdCollection,TList,TSortedList,THashList,TBtree,; // TClonesArray and THashTable collections.; //; // Usage: tcollbm -h - to print a usage info; // tcollbm [-n|-i|-m] [nobjects] [ntimes] - to run tests; //; // switches:; // -n - benchmark access by name (default); // -i - benchmark access by index; // -m - benchmark of objects allocation; //; // parameters:; // nobjects - number of objects to be inserted into collections; // ntimes - number of random lookups in the collection; //; // default values ( adjusted in 'main' according 'moda' value )",MatchSource.CODE_COMMENT,test/tcollbm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:364,Testability,benchmark,benchmark,364,"//; // This program benchmarks access time to objects by name or index; // for TObjArray,TOrdCollection,TList,TSortedList,THashList,TBtree,; // TClonesArray and THashTable collections.; //; // Usage: tcollbm -h - to print a usage info; // tcollbm [-n|-i|-m] [nobjects] [ntimes] - to run tests; //; // switches:; // -n - benchmark access by name (default); // -i - benchmark access by index; // -m - benchmark of objects allocation; //; // parameters:; // nobjects - number of objects to be inserted into collections; // ntimes - number of random lookups in the collection; //; // default values ( adjusted in 'main' according 'moda' value )",MatchSource.CODE_COMMENT,test/tcollbm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:399,Testability,benchmark,benchmark,399,"//; // This program benchmarks access time to objects by name or index; // for TObjArray,TOrdCollection,TList,TSortedList,THashList,TBtree,; // TClonesArray and THashTable collections.; //; // Usage: tcollbm -h - to print a usage info; // tcollbm [-n|-i|-m] [nobjects] [ntimes] - to run tests; //; // switches:; // -n - benchmark access by name (default); // -i - benchmark access by index; // -m - benchmark of objects allocation; //; // parameters:; // nobjects - number of objects to be inserted into collections; // ntimes - number of random lookups in the collection; //; // default values ( adjusted in 'main' according 'moda' value )",MatchSource.CODE_COMMENT,test/tcollbm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:13,Security,access,access,13,"// Default - access by name; //_____________________________________________________________",MatchSource.CODE_COMMENT,test/tcollbm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:237,Performance,perform,perform,237,"// We needs only one static object of this class; //_______________________________________________________________; //; // Just for fun, I introduce the class 'Tester' to collect; // a 'TNamed' objects. I use a objects of this class to perform a real; // tests.",MatchSource.CODE_COMMENT,test/tcollbm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:161,Testability,Test,Tester,161,"// We needs only one static object of this class; //_______________________________________________________________; //; // Just for fun, I introduce the class 'Tester' to collect; // a 'TNamed' objects. I use a objects of this class to perform a real; // tests.",MatchSource.CODE_COMMENT,test/tcollbm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:256,Testability,test,tests,256,"// We needs only one static object of this class; //_______________________________________________________________; //; // Just for fun, I introduce the class 'Tester' to collect; // a 'TNamed' objects. I use a objects of this class to perform a real; // tests.",MatchSource.CODE_COMMENT,test/tcollbm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:21,Performance,perform,perform,21,"// How many times to perform a test",MatchSource.CODE_COMMENT,test/tcollbm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:31,Testability,test,test,31,"// How many times to perform a test",MatchSource.CODE_COMMENT,test/tcollbm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:19,Testability,test,test,19,"// What we need to test",MatchSource.CODE_COMMENT,test/tcollbm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:20,Testability,test,test,20,"// Collection under test",MatchSource.CODE_COMMENT,test/tcollbm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:21,Testability,test,test,21,"// Memory allocation test",MatchSource.CODE_COMMENT,test/tcollbm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:3,Testability,benchmark,benchmark,3,"// benchmark by name",MatchSource.CODE_COMMENT,test/tcollbm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:3,Testability,benchmark,benchmark,3,"// benchmark by index",MatchSource.CODE_COMMENT,test/tcollbm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:3,Testability,Test,Tests,3,"// Tests multiplexsor",MatchSource.CODE_COMMENT,test/tcollbm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:3,Testability,benchmark,benchmark,3,"// benchmark memory allocation",MatchSource.CODE_COMMENT,test/tcollbm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:13,Security,access,access,13,"// benchmark access by index",MatchSource.CODE_COMMENT,test/tcollbm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:3,Testability,benchmark,benchmark,3,"// benchmark access by index",MatchSource.CODE_COMMENT,test/tcollbm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:13,Security,access,access,13,"// benchmark access by name",MatchSource.CODE_COMMENT,test/tcollbm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:3,Testability,benchmark,benchmark,3,"// benchmark access by name",MatchSource.CODE_COMMENT,test/tcollbm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:27,Testability,test,tested,27,"// Number of classes to be tested",MatchSource.CODE_COMMENT,test/tcollbm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:3,Testability,benchmark,benchmark,3,"// benchmark results",MatchSource.CODE_COMMENT,test/tcollbm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:40,Testability,test,test,40,"//; // Set defaults values for selected test; //",MatchSource.CODE_COMMENT,test/tcollbm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:46,Testability,test,test,46,"// Skip classes without operator[] from index test",MatchSource.CODE_COMMENT,test/tcollbm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Fons Rademakers 19/08/96",MatchSource.CODE_COMMENT,test/tcollex.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx:32,Integrability,protocol,protocol,32,"// To focus on basic collection protocol, this sample program uses; // simple classes inheriting from TObject. One class, TObjString, is a; // collectable string class (a TString wrapped in a TObject) provided; // by the ROOT system. The other class we define below, is an integer; // wrapped in a TObject, just like TObjString.; // TObjNum is a simple container for an integer.",MatchSource.CODE_COMMENT,test/tcollex.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx:179,Integrability,wrap,wrapped,179,"// To focus on basic collection protocol, this sample program uses; // simple classes inheriting from TObject. One class, TObjString, is a; // collectable string class (a TString wrapped in a TObject) provided; // by the ROOT system. The other class we define below, is an integer; // wrapped in a TObject, just like TObjString.; // TObjNum is a simple container for an integer.",MatchSource.CODE_COMMENT,test/tcollex.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx:285,Integrability,wrap,wrapped,285,"// To focus on basic collection protocol, this sample program uses; // simple classes inheriting from TObject. One class, TObjString, is a; // collectable string class (a TString wrapped in a TObject) provided; // by the ROOT system. The other class we define below, is an integer; // wrapped in a TObject, just like TObjString.; // TObjNum is a simple container for an integer.",MatchSource.CODE_COMMENT,test/tcollex.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx:86,Modifiability,inherit,inheriting,86,"// To focus on basic collection protocol, this sample program uses; // simple classes inheriting from TObject. One class, TObjString, is a; // collectable string class (a TString wrapped in a TObject) provided; // by the ROOT system. The other class we define below, is an integer; // wrapped in a TObject, just like TObjString.; // TObjNum is a simple container for an integer.",MatchSource.CODE_COMMENT,test/tcollex.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx:71,Usability,simpl,simple,71,"// To focus on basic collection protocol, this sample program uses; // simple classes inheriting from TObject. One class, TObjString, is a; // collectable string class (a TString wrapped in a TObject) provided; // by the ROOT system. The other class we define below, is an integer; // wrapped in a TObject, just like TObjString.; // TObjNum is a simple container for an integer.",MatchSource.CODE_COMMENT,test/tcollex.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx:346,Usability,simpl,simple,346,"// To focus on basic collection protocol, this sample program uses; // simple classes inheriting from TObject. One class, TObjString, is a; // collectable string class (a TString wrapped in a TObject) provided; // by the ROOT system. The other class we define below, is an integer; // wrapped in a TObject, just like TObjString.; // TObjNum is a simple container for an integer.",MatchSource.CODE_COMMENT,test/tcollex.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx:38,Availability,error,error,38,"// a[10] = &n6; // gives out-of-bound error",MatchSource.CODE_COMMENT,test/tcollex.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx:30,Security,access,access,30,"// can also use operator[] to access elements",MatchSource.CODE_COMMENT,test/tcollex.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx:79,Integrability,depend,depends,79,"// TIter encapsulates the actual class iterator. The type of iterator; // used depends on the type of the collection.",MatchSource.CODE_COMMENT,test/tcollex.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx:27,Usability,clear,clear,27,"// Delete heap objects and clear list. Attention: do this only when you; // own all objects stored in the collection. When you stored aliases to; // the actual objects (i.e. you did not create the objects) use Clear(); // instead.",MatchSource.CODE_COMMENT,test/tcollex.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx:210,Usability,Clear,Clear,210,"// Delete heap objects and clear list. Attention: do this only when you; // own all objects stored in the collection. When you stored aliases to; // the actual objects (i.e. you did not create the objects) use Clear(); // instead.",MatchSource.CODE_COMMENT,test/tcollex.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx:27,Usability,clear,clear,27,"// delete heap objects and clear list",MatchSource.CODE_COMMENT,test/tcollex.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx:12,Security,hash,hash,12,"// Create a hash table with an initial size of 20 (actually the next prime; // above 20). No automatic rehashing.",MatchSource.CODE_COMMENT,test/tcollex.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx:28,Energy Efficiency,reduce,reduce,28,"// rehash the hash table to reduce the collission rate",MatchSource.CODE_COMMENT,test/tcollex.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx:14,Security,hash,hash,14,"// rehash the hash table to reduce the collission rate",MatchSource.CODE_COMMENT,test/tcollex.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx:12,Security,hash,hash,12,"// Create a hash table and trigger automatic rehashing when average; // collision rate becomes larger than 5.",MatchSource.CODE_COMMENT,test/tcollex.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx
https://github.com/root-project/root/tree/v6-32-06/test/test2html.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Rene Brun 23/08/96",MatchSource.CODE_COMMENT,test/test2html.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/test2html.cxx
https://github.com/root-project/root/tree/v6-32-06/test/test2html.cxx:159,Testability,test,test,159,"// this macro can be called from an interactive ROOT session via the command:; // Root > .x test2html.cxx; // It generates the html files for some of the ROOT test programs.",MatchSource.CODE_COMMENT,test/test2html.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/test2html.cxx
https://github.com/root-project/root/tree/v6-32-06/test/testbits.cxx:6,Testability,test,testbits,6,"/*; * testbits.cxx -- unit tests for the new functionality in the TBits class; * by Filip Pizlo, 2004; */",MatchSource.CODE_COMMENT,test/testbits.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/testbits.cxx
https://github.com/root-project/root/tree/v6-32-06/test/testbits.cxx:27,Testability,test,tests,27,"/*; * testbits.cxx -- unit tests for the new functionality in the TBits class; * by Filip Pizlo, 2004; */",MatchSource.CODE_COMMENT,test/testbits.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/testbits.cxx
https://github.com/root-project/root/tree/v6-32-06/test/testbits.cxx:14,Security,access,access,14,"// don't have access to a 64-bit machine at the moment so long test would be; // pointless...",MatchSource.CODE_COMMENT,test/testbits.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/testbits.cxx
https://github.com/root-project/root/tree/v6-32-06/test/testbits.cxx:63,Testability,test,test,63,"// don't have access to a 64-bit machine at the moment so long test would be; // pointless...",MatchSource.CODE_COMMENT,test/testbits.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/testbits.cxx
https://github.com/root-project/root/tree/v6-32-06/test/testGenVectorVc.cxx:14,Availability,mask,mask,14,"// return the mask indicating which results should be used",MatchSource.CODE_COMMENT,test/testGenVectorVc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/testGenVectorVc.cxx
https://github.com/root-project/root/tree/v6-32-06/test/testGenVectorVc.cxx:43,Deployability,update,update,43,"// change position to reflection point and update direction",MatchSource.CODE_COMMENT,test/testGenVectorVc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/testGenVectorVc.cxx
https://github.com/root-project/root/tree/v6-32-06/test/testGenVectorVc.cxx:43,Deployability,update,update,43,"// change position to reflection point and update direction",MatchSource.CODE_COMMENT,test/testGenVectorVc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/testGenVectorVc.cxx
https://github.com/root-project/root/tree/v6-32-06/test/testGenVectorVc.cxx:7,Testability,test,test,7,"// Now test Transformation3D",MatchSource.CODE_COMMENT,test/testGenVectorVc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/testGenVectorVc.cxx
https://github.com/root-project/root/tree/v6-32-06/test/testGenVectorVc.cxx:23,Testability,test,tests,23,"// now run some timing tests",MatchSource.CODE_COMMENT,test/testGenVectorVc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/testGenVectorVc.cxx
https://github.com/root-project/root/tree/v6-32-06/test/testGenVectorVc.cxx:29,Safety,avoid,avoid,29,"// Must be multiple of 16 to avoid padding issues below...",MatchSource.CODE_COMMENT,test/testGenVectorVc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/testGenVectorVc.cxx
https://github.com/root-project/root/tree/v6-32-06/test/testGenVectorVc.cxx:13,Testability,test,tests,13,"// number of tests to run; // scalar data",MatchSource.CODE_COMMENT,test/testGenVectorVc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/testGenVectorVc.cxx
https://github.com/root-project/root/tree/v6-32-06/test/testGenVectorVc.cxx:115,Safety,safe,safety,115,"// assert that the vector time is roughly Vc::double_v::Size times smaller than the scalar time; // allow 25% for 'safety'; // if (std::fabs((best_time_vector * Vc::double_v::Size) - best_time_scalar) > 0.25 * best_time_scalar) {; // ++ret;; // }",MatchSource.CODE_COMMENT,test/testGenVectorVc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/testGenVectorVc.cxx
https://github.com/root-project/root/tree/v6-32-06/test/testGenVectorVc.cxx:3,Testability,assert,assert,3,"// assert that the vector time is roughly Vc::double_v::Size times smaller than the scalar time; // allow 25% for 'safety'; // if (std::fabs((best_time_vector * Vc::double_v::Size) - best_time_scalar) > 0.25 * best_time_scalar) {; // ++ret;; // }",MatchSource.CODE_COMMENT,test/testGenVectorVc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/testGenVectorVc.cxx
https://github.com/root-project/root/tree/v6-32-06/test/testVc.cxx:906,Integrability,contract,contract,906,"/* This file is part of the Vc project; Copyright (C) 2009-2010 Matthias Kretz <kretz@kde.org>. Permission to use, copy, modify, and distribute this software; and its documentation for any purpose and without fee is hereby; granted, provided that the above copyright notice appear in all; copies and that both that the copyright notice and this; permission notice and warranty disclaimer appear in supporting; documentation, and that the name of the author not be used in; advertising or publicity pertaining to distribution of the; software without specific, written prior permission. The author disclaim all warranties with regard to this; software, including all implied warranties of merchantability; and fitness. In no event shall the author be liable for any; special, indirect or consequential damages or any damages; whatsoever resulting from loss of use, data or profits, whether; in an action of contract, negligence or other tortious action,; arising out of or in connection with the use or performance of; this software. */",MatchSource.CODE_COMMENT,test/testVc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/testVc.cxx
https://github.com/root-project/root/tree/v6-32-06/test/testVc.cxx:1002,Performance,perform,performance,1002,"/* This file is part of the Vc project; Copyright (C) 2009-2010 Matthias Kretz <kretz@kde.org>. Permission to use, copy, modify, and distribute this software; and its documentation for any purpose and without fee is hereby; granted, provided that the above copyright notice appear in all; copies and that both that the copyright notice and this; permission notice and warranty disclaimer appear in supporting; documentation, and that the name of the author not be used in; advertising or publicity pertaining to distribution of the; software without specific, written prior permission. The author disclaim all warranties with regard to this; software, including all implied warranties of merchantability; and fitness. In no event shall the author be liable for any; special, indirect or consequential damages or any damages; whatsoever resulting from loss of use, data or profits, whether; in an action of contract, negligence or other tortious action,; arising out of or in connection with the use or performance of; this software. */",MatchSource.CODE_COMMENT,test/testVc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/testVc.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Peter Malzacher 19/06/99",MatchSource.CODE_COMMENT,test/TestVectors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:3,Testability,test,test,3,"// test constructors:",MatchSource.CODE_COMMENT,test/TestVectors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:3,Testability,test,test,3,"// test assignment:",MatchSource.CODE_COMMENT,test/TestVectors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:3,Testability,test,test,3,"// test addition:",MatchSource.CODE_COMMENT,test/TestVectors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:3,Testability,test,test,3,"// test subtraction",MatchSource.CODE_COMMENT,test/TestVectors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:3,Testability,test,test,3,"// test unary minus:",MatchSource.CODE_COMMENT,test/TestVectors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:3,Testability,test,test,3,"// test scaling:",MatchSource.CODE_COMMENT,test/TestVectors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:3,Testability,test,testing,3,"// testing scalar and vector product:",MatchSource.CODE_COMMENT,test/TestVectors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:3,Testability,test,testing,3,"// testing ptot and pt:",MatchSource.CODE_COMMENT,test/TestVectors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:3,Testability,test,testing,3,"// testing angles:",MatchSource.CODE_COMMENT,test/TestVectors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:3,Testability,test,testing,3,"// testing rotations",MatchSource.CODE_COMMENT,test/TestVectors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:3,Testability,test,test,3,"// test rotation maticies:",MatchSource.CODE_COMMENT,test/TestVectors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:3,Testability,test,test,3,"// test constructors:",MatchSource.CODE_COMMENT,test/TestVectors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:3,Testability,test,testing,3,"// testing assignment",MatchSource.CODE_COMMENT,test/TestVectors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:2,Testability,test,testing,2,"//testing addition and subtraction:",MatchSource.CODE_COMMENT,test/TestVectors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:3,Testability,test,testing,3,"// testing scalar products:",MatchSource.CODE_COMMENT,test/TestVectors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:3,Testability,test,testing,3,"// testing components:",MatchSource.CODE_COMMENT,test/TestVectors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:3,Testability,test,testing,3,"// testing boosts:",MatchSource.CODE_COMMENT,test/TestVectors.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx:333,Performance,Load,Load,333,"// @(#)root/test:$Id$; // Author: Valeriy Onuchin & Fons Rademakers 04/10/98; ///////////////////////////////////////////////////////////////////; // ROOT implementation of the simple Tetris game; // Layout and some hints were taken from Qt /examples/tetris; //; // To run this game do the following:; // $ root; // root [0] gSystem.Load(""libGpad""); // root [1] gSystem.Load(""Tetris""); // root [2] Tetris t; // <play game>; // root [2] .q; //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/Tetris.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx:370,Performance,Load,Load,370,"// @(#)root/test:$Id$; // Author: Valeriy Onuchin & Fons Rademakers 04/10/98; ///////////////////////////////////////////////////////////////////; // ROOT implementation of the simple Tetris game; // Layout and some hints were taken from Qt /examples/tetris; //; // To run this game do the following:; // $ root; // root [0] gSystem.Load(""libGpad""); // root [1] gSystem.Load(""Tetris""); // root [2] Tetris t; // <play game>; // root [2] .q; //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/Tetris.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Valeriy Onuchin & Fons Rademakers 04/10/98; ///////////////////////////////////////////////////////////////////; // ROOT implementation of the simple Tetris game; // Layout and some hints were taken from Qt /examples/tetris; //; // To run this game do the following:; // $ root; // root [0] gSystem.Load(""libGpad""); // root [1] gSystem.Load(""Tetris""); // root [2] Tetris t; // <play game>; // root [2] .q; //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/Tetris.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx:177,Usability,simpl,simple,177,"// @(#)root/test:$Id$; // Author: Valeriy Onuchin & Fons Rademakers 04/10/98; ///////////////////////////////////////////////////////////////////; // ROOT implementation of the simple Tetris game; // Layout and some hints were taken from Qt /examples/tetris; //; // To run this game do the following:; // $ root; // root [0] gSystem.Load(""libGpad""); // root [1] gSystem.Load(""Tetris""); // root [2] Tetris t; // <play game>; // root [2] .q; //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/Tetris.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx:33,Testability,test,test,33,"// coordinates of piece boxes at test position",MatchSource.CODE_COMMENT,test/Tetris.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx:17,Availability,down,down,17,"// Move one line down. Returns kTRUE if succeeded.",MatchSource.CODE_COMMENT,test/Tetris.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx:35,Deployability,update,update,35,"// piece can't move -> stop moving update state of TetrisBoard",MatchSource.CODE_COMMENT,test/Tetris.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx:10,Usability,clear,clear,10,"// Delete/clear all objects.",MatchSource.CODE_COMMENT,test/Tetris.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx:3,Usability,clear,clear,3,"// clear board map",MatchSource.CODE_COMMENT,test/Tetris.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx:3,Deployability,update,update,3,"// update number of non empty lines",MatchSource.CODE_COMMENT,test/Tetris.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx:3,Deployability,update,update,3,"// update score policy (could be modified)",MatchSource.CODE_COMMENT,test/Tetris.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx:12,Testability,test,testing,12,"// Used for testing",MatchSource.CODE_COMMENT,test/Tetris.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx:72,Usability,Pause,PauseButton,72,"///////////////////////////////////////////////////////////////////; // PauseButton - push button; // ExecuteEvent mehtod used to pause the game; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/Tetris.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx:130,Usability,pause,pause,130,"///////////////////////////////////////////////////////////////////; // PauseButton - push button; // ExecuteEvent mehtod used to pause the game; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/Tetris.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx:3,Usability,Pause,Pause,3,"// Pause button constructor",MatchSource.CODE_COMMENT,test/Tetris.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx:72,Deployability,Update,UpdateLevelTimer,72,"///////////////////////////////////////////////////////////////////; // UpdateLevelTimer; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/Tetris.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx:3,Deployability,Update,Update,3,"// Update level timer constructor",MatchSource.CODE_COMMENT,test/Tetris.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx:3,Usability,Pause,Pause,3,"// Pause the game",MatchSource.CODE_COMMENT,test/Tetris.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx:14,Availability,down,down,14,"// Drop piece down",MatchSource.CODE_COMMENT,test/Tetris.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Tetris.h:255,Performance,Load,Load,255,"///////////////////////////////////////////////////////////////////; // ROOT implementation of the simple Tetris game; // Layout and some hints were taken from Qt /examples/tetris; //; // To run this game do the following:; // $ root; // root [0] gSystem.Load(""Tetris""); // root [1] Tetris t; // <play game>; // root [2] .q; //; // Other ROOT fun examples: Hello, Aclock ...; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/Tetris.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.h
https://github.com/root-project/root/tree/v6-32-06/test/Tetris.h:99,Usability,simpl,simple,99,"///////////////////////////////////////////////////////////////////; // ROOT implementation of the simple Tetris game; // Layout and some hints were taken from Qt /examples/tetris; //; // To run this game do the following:; // $ root; // root [0] gSystem.Load(""Tetris""); // root [1] Tetris t; // <play game>; // root [2] .q; //; // Other ROOT fun examples: Hello, Aclock ...; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/Tetris.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.h
https://github.com/root-project/root/tree/v6-32-06/test/Tetris.h:57,Availability,avail,available,57,"// TetrisPiece skeleton shape (up to 10 different shapes available)",MatchSource.CODE_COMMENT,test/Tetris.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.h
https://github.com/root-project/root/tree/v6-32-06/test/Tetris.h:72,Usability,Pause,PauseButton,72,"///////////////////////////////////////////////////////////////////; // PauseButton - push button; // ExecuteEvent mehtod used to pause the game; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/Tetris.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.h
https://github.com/root-project/root/tree/v6-32-06/test/Tetris.h:130,Usability,pause,pause,130,"///////////////////////////////////////////////////////////////////; // PauseButton - push button; // ExecuteEvent mehtod used to pause the game; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/Tetris.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.h
https://github.com/root-project/root/tree/v6-32-06/test/Tetris.h:72,Deployability,Update,UpdateLevelTimer,72,"///////////////////////////////////////////////////////////////////; // UpdateLevelTimer used to periodically update game level; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/Tetris.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.h
https://github.com/root-project/root/tree/v6-32-06/test/Tetris.h:110,Deployability,update,update,110,"///////////////////////////////////////////////////////////////////; // UpdateLevelTimer used to periodically update game level; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/Tetris.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.h
https://github.com/root-project/root/tree/v6-32-06/test/Tetris.h:3,Usability,pause,pause,3,"// pause/continue button",MatchSource.CODE_COMMENT,test/Tetris.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.h
https://github.com/root-project/root/tree/v6-32-06/test/Tetris.h:16,Deployability,update,updates,16,"// periodically updates game level",MatchSource.CODE_COMMENT,test/Tetris.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test of tformula neeeded to be run",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:83,Testability,test,test,83,"// We need a softer way to reason about equality in 32 bits; // Being this a quick test, doing the check at runtime is really no problem.",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test composition of functions",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test linear function used in fitting",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test copying and deleting of linear functions",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test the operator ^",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test also nested operators",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test the exponent notations in numbers",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test the operator ""? : """,MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test with ::",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test parameters order",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test GetExpFormula",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test GetExpFormula",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test GetExpFormula",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test GetExpFormula",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test Eval for TF1",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test Eval for TF2",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test Eval for TF3",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test parameter order with more than 10 parameters",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test parsing polynomials (bug ROOT-7312)",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test chebyshev",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test I/O for parameter ordering",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test with copy",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:6,Testability,test,test,6,"//cms test",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:33,Availability,toler,tolerance,33,"// this fails on 32 bits - put a tolerance",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,tests,3,"// tests with scientific notations",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test same prelacements",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test sign function",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test ssq function",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test nested expressions and conflict with sqrt",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test composition of two functions",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test hexadecimal numbers",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test whitespaces in par name and cloning",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test polynomial are linear and have right number",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test new bigaus pre-defined funcition",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test for bug 8105",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test for similar pre-defined functions",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test for mixed dim functions",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test for inserting correcting polynomials (bug ROOT-8496)",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test for missing parameters (bug ROOT-8182)",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test special characters in parameter names (bug ROOT-8303); // test with operator ^, @ and predefined functions (pol, gaus, etc..)",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:66,Testability,test,test,66,"// test special characters in parameter names (bug ROOT-8303); // test with operator ^, @ and predefined functions (pol, gaus, etc..)",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:16,Modifiability,variab,variables,16,"// test parsing variables/parameters of user-defined functions",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test parsing variables/parameters of user-defined functions",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:7,Testability,test,test,7,"// and test [p0] notation",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:8,Modifiability,variab,variable,8,"// Test variable/parameter parsing for parametrized functions",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,Test,Test,3,"// Test variable/parameter parsing for parametrized functions",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:7,Modifiability,variab,variable-counting,7,"// old variable-counting method",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:8,Modifiability,variab,variable,8,"// Test variable parsing when using form x[N]",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,Test,Test,3,"// Test variable parsing when using form x[N]",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test whether value of parameter name carries through",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test whether user-defined and parametrized functions can be nested",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test dealing with whitespace in parameter names; // inlcuding cloning tests (see ROOT-8971)",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:73,Testability,test,tests,73,"// test dealing with whitespace in parameter names; // inlcuding cloning tests (see ROOT-8971)",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test multi-dim formula (like new xyzgaus)",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test mod operator; // one needs to convert always to integer because % works only for int",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test creating two identical functions; // and reading back from a file; // ROOT-9467; // The bug woruld need to exit ROOT and when the file already esists",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test copy consttructor in case of lazy initialization (i.e. when reading from a file)",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test detailed printing of function",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:13,Availability,error,error,13,"//switch off error messages to have test passing",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:19,Integrability,message,messages,19,"//switch off error messages to have test passing",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:36,Testability,test,test,36,"//switch off error messages to have test passing",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:66,Availability,avail,available,66,"// test for bug 10815; // mixing user previous defined functions (available in gROOT); // and pre-defined functions",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,test,test,3,"// test for bug 10815; // mixing user previous defined functions (available in gROOT); // and pre-defined functions",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Testability,Test,Test,3,"// Test if a formula with linear terms in each parameter is correctly expanded,; // even if some earlier terms are substrings of later terms.",MatchSource.CODE_COMMENT,test/TFormulaParsingTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaTests.cxx:8,Testability,test,test,8,"//x_1- [test]^(TMath::Sin(pi*var*TMath::DegToRad())) - var1pol2(0) + gausn(0)*ylandau(0)+zexpo(10)",MatchSource.CODE_COMMENT,test/TFormulaTests.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaTests.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaTests.cxx:27,Modifiability,variab,variables,27,"// new version with only 4 variables but n-parameters",MatchSource.CODE_COMMENT,test/TFormulaTests.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaTests.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaTests.cxx:48,Modifiability,variab,variables,48,"// gBenchmark->Start(TString::Format(""Adding %d variables\n"",n));; // test->AddVariables(vars,n);; // gBenchmark->Show(TString::Format(""Adding %d variables\n"",n));",MatchSource.CODE_COMMENT,test/TFormulaTests.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaTests.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaTests.cxx:146,Modifiability,variab,variables,146,"// gBenchmark->Start(TString::Format(""Adding %d variables\n"",n));; // test->AddVariables(vars,n);; // gBenchmark->Show(TString::Format(""Adding %d variables\n"",n));",MatchSource.CODE_COMMENT,test/TFormulaTests.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaTests.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaTests.cxx:70,Testability,test,test,70,"// gBenchmark->Start(TString::Format(""Adding %d variables\n"",n));; // test->AddVariables(vars,n);; // gBenchmark->Show(TString::Format(""Adding %d variables\n"",n));",MatchSource.CODE_COMMENT,test/TFormulaTests.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaTests.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaTests.cxx:2,Testability,test,test,2,"//test->Print(""v"");",MatchSource.CODE_COMMENT,test/TFormulaTests.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaTests.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaTests.cxx:48,Modifiability,variab,variables,48,"// gBenchmark->Start(TString::Format(""Adding %d variables\n"",n));; // test->AddVariables(vars,n);; // gBenchmark->Show(TString::Format(""Adding %d variables\n"",n));",MatchSource.CODE_COMMENT,test/TFormulaTests.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaTests.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaTests.cxx:146,Modifiability,variab,variables,146,"// gBenchmark->Start(TString::Format(""Adding %d variables\n"",n));; // test->AddVariables(vars,n);; // gBenchmark->Show(TString::Format(""Adding %d variables\n"",n));",MatchSource.CODE_COMMENT,test/TFormulaTests.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaTests.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaTests.cxx:70,Testability,test,test,70,"// gBenchmark->Start(TString::Format(""Adding %d variables\n"",n));; // test->AddVariables(vars,n);; // gBenchmark->Show(TString::Format(""Adding %d variables\n"",n));",MatchSource.CODE_COMMENT,test/TFormulaTests.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaTests.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaTests.cxx:2,Testability,test,testOld,2,"//testOld->Print(""v"");",MatchSource.CODE_COMMENT,test/TFormulaTests.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaTests.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaTests.cxx:2,Testability,test,testFormula,2,"//testFormula = ""x - [test]^(TMath::Sin(pi*y*TMath::DegToRad())) - pol2(0) + gausn(0)*landau(0)+expo(10)"";",MatchSource.CODE_COMMENT,test/TFormulaTests.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaTests.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaTests.cxx:22,Testability,test,test,22,"//testFormula = ""x - [test]^(TMath::Sin(pi*y*TMath::DegToRad())) - pol2(0) + gausn(0)*landau(0)+expo(10)"";",MatchSource.CODE_COMMENT,test/TFormulaTests.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaTests.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaVecTests.h:26,Integrability,interface,interface,26,"// check passing double_v interface",MatchSource.CODE_COMMENT,test/TFormulaVecTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaVecTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaVecTests.h:3,Testability,test,test,3,"// test first by vectorizing in the constructor",MatchSource.CODE_COMMENT,test/TFormulaVecTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaVecTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaVecTests.h:3,Testability,test,test,3,"// test by vectorizing afterwards calling SetVectorized",MatchSource.CODE_COMMENT,test/TFormulaVecTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaVecTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaVecTests.h:3,Testability,test,test,3,"// test by removing vectorization",MatchSource.CODE_COMMENT,test/TFormulaVecTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaVecTests.h
https://github.com/root-project/root/tree/v6-32-06/test/TFormulaVecTests.h:26,Integrability,interface,interface,26,"// check passing double_v interface",MatchSource.CODE_COMMENT,test/TFormulaVecTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaVecTests.h
https://github.com/root-project/root/tree/v6-32-06/test/threads.cxx:104,Performance,perform,perform,104,"/*; ** Module name : threads; **; ** Description :; ** This file implements four functions, which shall perform some; ** actions on objects like histograms and a canvas.; */; // a global canvas for the drawing of histograms",MatchSource.CODE_COMMENT,test/threads.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/threads.cxx
https://github.com/root-project/root/tree/v6-32-06/test/threads.cxx:44,Security,access,accessed,44,"// a global histogram object, which will be accessed both by mhs and mhs1",MatchSource.CODE_COMMENT,test/threads.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/threads.cxx
https://github.com/root-project/root/tree/v6-32-06/test/threads.cxx:39,Safety,avoid,avoid,39,"// filling of a histogram is locked to avoid data loss",MatchSource.CODE_COMMENT,test/threads.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/threads.cxx
https://github.com/root-project/root/tree/v6-32-06/test/threads.cxx:64,Availability,down,down,64,"// sleep for 1 ms: sleep not necessary, slows things only a bit down; // because the threads are actually doing nothing, which is eventually; // very fast ;-)",MatchSource.CODE_COMMENT,test/threads.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/threads.cxx
https://github.com/root-project/root/tree/v6-32-06/test/threads.cxx:11,Safety,avoid,avoids,11,"// locking avoids data loss",MatchSource.CODE_COMMENT,test/threads.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/threads.cxx
https://github.com/root-project/root/tree/v6-32-06/test/threads.cxx:23,Performance,perform,perform,23,"// thread to run Ps(): perform every 5 seconds a TThread::Ps()",MatchSource.CODE_COMMENT,test/threads.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/threads.cxx
https://github.com/root-project/root/tree/v6-32-06/test/threads.cxx:44,Security,access,accessed,44,"// a global histogram object, which will be accessed both by mhs and mhs1",MatchSource.CODE_COMMENT,test/threads.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/threads.cxx
https://github.com/root-project/root/tree/v6-32-06/test/TrackMathCore.h:25,Testability,test,testing,25,"// dummy track class for testing I/o of matric; //#ifdef USE_REFLEX; //#define G__DICTIONARY; //#endif",MatchSource.CODE_COMMENT,test/TrackMathCore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TrackMathCore.h
https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Fons Rademakers 19/08/96",MatchSource.CODE_COMMENT,test/tstring.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx:64,Security,access,access,64,"// use ""const char*"" operator and the Data() member function to access; // the string as a const char*",MatchSource.CODE_COMMENT,test/tstring.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx:95,Availability,error,error,95,"// return 13th character and replace it by 't', getting 14th character; // should result in an error message since operator[] uses range checking",MatchSource.CODE_COMMENT,test/tstring.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx:101,Integrability,message,message,101,"// return 13th character and replace it by 't', getting 14th character; // should result in an error message since operator[] uses range checking",MatchSource.CODE_COMMENT,test/tstring.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx:99,Availability,error,error,99,"// return 13th character and replace it by 'p', getting 14th character; // should NOT result in an error message since operator() does not use; // range checking",MatchSource.CODE_COMMENT,test/tstring.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx:105,Integrability,message,message,105,"// return 13th character and replace it by 'p', getting 14th character; // should NOT result in an error message since operator() does not use; // range checking",MatchSource.CODE_COMMENT,test/tstring.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx:3,Testability,test,test,3,"// test IsNull",MatchSource.CODE_COMMENT,test/tstring.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx:3,Testability,test,test,3,"// test IsAscii",MatchSource.CODE_COMMENT,test/tstring.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx:3,Testability,test,test,3,"// test Resize and Strip",MatchSource.CODE_COMMENT,test/tstring.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx:3,Testability,test,test,3,"// test comparisons",MatchSource.CODE_COMMENT,test/tstring.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx:13,Security,access,access,13,"// test file access",MatchSource.CODE_COMMENT,test/tstring.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx:3,Testability,test,test,3,"// test file access",MatchSource.CODE_COMMENT,test/tstring.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx:21,Testability,test,test,21,"// read '// @(#)root/test:$Id: tstring.cxx 38977...""",MatchSource.CODE_COMMENT,test/tstring.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx
https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx:3,Testability,test,test,3,"// test tokenizer",MatchSource.CODE_COMMENT,test/tstring.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vlazy.cxx:197,Availability,down,downsampling,197,"// @(#)root/test:$Id$; // Author: Fons Rademakers 14/11/97; //; // Sample code showing off a few advanced features; // and comparing them (time-wise) with traditional ones.; //; // Simple example: downsampling a matrix, that is, creating a matrix; // that is 4 times (twice in each dimension) smaller than the original; // matrix, by picking every other sample of the latter.; //",MatchSource.CODE_COMMENT,test/vlazy.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vlazy.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vlazy.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Fons Rademakers 14/11/97; //; // Sample code showing off a few advanced features; // and comparing them (time-wise) with traditional ones.; //; // Simple example: downsampling a matrix, that is, creating a matrix; // that is 4 times (twice in each dimension) smaller than the original; // matrix, by picking every other sample of the latter.; //",MatchSource.CODE_COMMENT,test/vlazy.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vlazy.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vlazy.cxx:181,Usability,Simpl,Simple,181,"// @(#)root/test:$Id$; // Author: Fons Rademakers 14/11/97; //; // Sample code showing off a few advanced features; // and comparing them (time-wise) with traditional ones.; //; // Simple example: downsampling a matrix, that is, creating a matrix; // that is 4 times (twice in each dimension) smaller than the original; // matrix, by picking every other sample of the latter.; //",MatchSource.CODE_COMMENT,test/vlazy.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vlazy.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vlazy.cxx:3,Availability,Down,Downsample,3,"// Downsample matrix - new style",MatchSource.CODE_COMMENT,test/vlazy.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vlazy.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vlazy.cxx:41,Availability,down,downsampled,41,"// Just figure out the dimensions of the downsampled (lazy) matrix",MatchSource.CODE_COMMENT,test/vlazy.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vlazy.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vlazy.cxx:3,Availability,Down,Downsample,3,"// Downsample in the traditional style",MatchSource.CODE_COMMENT,test/vlazy.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vlazy.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Fons Rademakers and Eddy Offermann Nov 2003; //////////////////////////////////////////////////////////////////////////; // //; // Linear Algebra Package -- Matrix Verifications. //; // //; // This file implements a large set of TMat operation tests. //; // ******************************************************************* //; // * Starting Matrix - S T R E S S suite //; // ******************************************************************* //; // Test 1 : Allocation, Resizing.................................. OK //; // Test 2 : Filling, Inserting, Using............................. OK //; // Test 3 : Uniform matrix operations............................. OK //; // Test 4 : Binary Matrix element-by-element operations............OK //; // Test 5 : Matrix transposition...................................OK //; // Test 6 : Haar/Hilbert Matrix....................................OK //; // Test 7 : Matrix promises........................................OK //; // Test 8 : Matrix Norms...........................................OK //; // Test 9 : Matrix Determinant.....................................OK //; // Test 10 : General Matrix Multiplications.........................OK //; // Test 11 : Symmetric Matrix Multiplications.......................OK //; // Test 12 : Matrix Vector Multiplications..........................OK //; // Test 13 : Matrix Inversion.......................................OK //; // Test 14 : Matrix Persistence.....................................OK //; // ******************************************************************* //; // //; //////////////////////////////////////////////////////////////////////////; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/vmatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:278,Testability,test,tests,278,"// @(#)root/test:$Id$; // Author: Fons Rademakers and Eddy Offermann Nov 2003; //////////////////////////////////////////////////////////////////////////; // //; // Linear Algebra Package -- Matrix Verifications. //; // //; // This file implements a large set of TMat operation tests. //; // ******************************************************************* //; // * Starting Matrix - S T R E S S suite //; // ******************************************************************* //; // Test 1 : Allocation, Resizing.................................. OK //; // Test 2 : Filling, Inserting, Using............................. OK //; // Test 3 : Uniform matrix operations............................. OK //; // Test 4 : Binary Matrix element-by-element operations............OK //; // Test 5 : Matrix transposition...................................OK //; // Test 6 : Haar/Hilbert Matrix....................................OK //; // Test 7 : Matrix promises........................................OK //; // Test 8 : Matrix Norms...........................................OK //; // Test 9 : Matrix Determinant.....................................OK //; // Test 10 : General Matrix Multiplications.........................OK //; // Test 11 : Symmetric Matrix Multiplications.......................OK //; // Test 12 : Matrix Vector Multiplications..........................OK //; // Test 13 : Matrix Inversion.......................................OK //; // Test 14 : Matrix Persistence.....................................OK //; // ******************************************************************* //; // //; //////////////////////////////////////////////////////////////////////////; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/vmatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:487,Testability,Test,Test,487,"// @(#)root/test:$Id$; // Author: Fons Rademakers and Eddy Offermann Nov 2003; //////////////////////////////////////////////////////////////////////////; // //; // Linear Algebra Package -- Matrix Verifications. //; // //; // This file implements a large set of TMat operation tests. //; // ******************************************************************* //; // * Starting Matrix - S T R E S S suite //; // ******************************************************************* //; // Test 1 : Allocation, Resizing.................................. OK //; // Test 2 : Filling, Inserting, Using............................. OK //; // Test 3 : Uniform matrix operations............................. OK //; // Test 4 : Binary Matrix element-by-element operations............OK //; // Test 5 : Matrix transposition...................................OK //; // Test 6 : Haar/Hilbert Matrix....................................OK //; // Test 7 : Matrix promises........................................OK //; // Test 8 : Matrix Norms...........................................OK //; // Test 9 : Matrix Determinant.....................................OK //; // Test 10 : General Matrix Multiplications.........................OK //; // Test 11 : Symmetric Matrix Multiplications.......................OK //; // Test 12 : Matrix Vector Multiplications..........................OK //; // Test 13 : Matrix Inversion.......................................OK //; // Test 14 : Matrix Persistence.....................................OK //; // ******************************************************************* //; // //; //////////////////////////////////////////////////////////////////////////; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/vmatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:561,Testability,Test,Test,561,"// @(#)root/test:$Id$; // Author: Fons Rademakers and Eddy Offermann Nov 2003; //////////////////////////////////////////////////////////////////////////; // //; // Linear Algebra Package -- Matrix Verifications. //; // //; // This file implements a large set of TMat operation tests. //; // ******************************************************************* //; // * Starting Matrix - S T R E S S suite //; // ******************************************************************* //; // Test 1 : Allocation, Resizing.................................. OK //; // Test 2 : Filling, Inserting, Using............................. OK //; // Test 3 : Uniform matrix operations............................. OK //; // Test 4 : Binary Matrix element-by-element operations............OK //; // Test 5 : Matrix transposition...................................OK //; // Test 6 : Haar/Hilbert Matrix....................................OK //; // Test 7 : Matrix promises........................................OK //; // Test 8 : Matrix Norms...........................................OK //; // Test 9 : Matrix Determinant.....................................OK //; // Test 10 : General Matrix Multiplications.........................OK //; // Test 11 : Symmetric Matrix Multiplications.......................OK //; // Test 12 : Matrix Vector Multiplications..........................OK //; // Test 13 : Matrix Inversion.......................................OK //; // Test 14 : Matrix Persistence.....................................OK //; // ******************************************************************* //; // //; //////////////////////////////////////////////////////////////////////////; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/vmatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:635,Testability,Test,Test,635,"// @(#)root/test:$Id$; // Author: Fons Rademakers and Eddy Offermann Nov 2003; //////////////////////////////////////////////////////////////////////////; // //; // Linear Algebra Package -- Matrix Verifications. //; // //; // This file implements a large set of TMat operation tests. //; // ******************************************************************* //; // * Starting Matrix - S T R E S S suite //; // ******************************************************************* //; // Test 1 : Allocation, Resizing.................................. OK //; // Test 2 : Filling, Inserting, Using............................. OK //; // Test 3 : Uniform matrix operations............................. OK //; // Test 4 : Binary Matrix element-by-element operations............OK //; // Test 5 : Matrix transposition...................................OK //; // Test 6 : Haar/Hilbert Matrix....................................OK //; // Test 7 : Matrix promises........................................OK //; // Test 8 : Matrix Norms...........................................OK //; // Test 9 : Matrix Determinant.....................................OK //; // Test 10 : General Matrix Multiplications.........................OK //; // Test 11 : Symmetric Matrix Multiplications.......................OK //; // Test 12 : Matrix Vector Multiplications..........................OK //; // Test 13 : Matrix Inversion.......................................OK //; // Test 14 : Matrix Persistence.....................................OK //; // ******************************************************************* //; // //; //////////////////////////////////////////////////////////////////////////; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/vmatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:709,Testability,Test,Test,709,"// @(#)root/test:$Id$; // Author: Fons Rademakers and Eddy Offermann Nov 2003; //////////////////////////////////////////////////////////////////////////; // //; // Linear Algebra Package -- Matrix Verifications. //; // //; // This file implements a large set of TMat operation tests. //; // ******************************************************************* //; // * Starting Matrix - S T R E S S suite //; // ******************************************************************* //; // Test 1 : Allocation, Resizing.................................. OK //; // Test 2 : Filling, Inserting, Using............................. OK //; // Test 3 : Uniform matrix operations............................. OK //; // Test 4 : Binary Matrix element-by-element operations............OK //; // Test 5 : Matrix transposition...................................OK //; // Test 6 : Haar/Hilbert Matrix....................................OK //; // Test 7 : Matrix promises........................................OK //; // Test 8 : Matrix Norms...........................................OK //; // Test 9 : Matrix Determinant.....................................OK //; // Test 10 : General Matrix Multiplications.........................OK //; // Test 11 : Symmetric Matrix Multiplications.......................OK //; // Test 12 : Matrix Vector Multiplications..........................OK //; // Test 13 : Matrix Inversion.......................................OK //; // Test 14 : Matrix Persistence.....................................OK //; // ******************************************************************* //; // //; //////////////////////////////////////////////////////////////////////////; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/vmatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:783,Testability,Test,Test,783,"// @(#)root/test:$Id$; // Author: Fons Rademakers and Eddy Offermann Nov 2003; //////////////////////////////////////////////////////////////////////////; // //; // Linear Algebra Package -- Matrix Verifications. //; // //; // This file implements a large set of TMat operation tests. //; // ******************************************************************* //; // * Starting Matrix - S T R E S S suite //; // ******************************************************************* //; // Test 1 : Allocation, Resizing.................................. OK //; // Test 2 : Filling, Inserting, Using............................. OK //; // Test 3 : Uniform matrix operations............................. OK //; // Test 4 : Binary Matrix element-by-element operations............OK //; // Test 5 : Matrix transposition...................................OK //; // Test 6 : Haar/Hilbert Matrix....................................OK //; // Test 7 : Matrix promises........................................OK //; // Test 8 : Matrix Norms...........................................OK //; // Test 9 : Matrix Determinant.....................................OK //; // Test 10 : General Matrix Multiplications.........................OK //; // Test 11 : Symmetric Matrix Multiplications.......................OK //; // Test 12 : Matrix Vector Multiplications..........................OK //; // Test 13 : Matrix Inversion.......................................OK //; // Test 14 : Matrix Persistence.....................................OK //; // ******************************************************************* //; // //; //////////////////////////////////////////////////////////////////////////; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/vmatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:857,Testability,Test,Test,857,"// @(#)root/test:$Id$; // Author: Fons Rademakers and Eddy Offermann Nov 2003; //////////////////////////////////////////////////////////////////////////; // //; // Linear Algebra Package -- Matrix Verifications. //; // //; // This file implements a large set of TMat operation tests. //; // ******************************************************************* //; // * Starting Matrix - S T R E S S suite //; // ******************************************************************* //; // Test 1 : Allocation, Resizing.................................. OK //; // Test 2 : Filling, Inserting, Using............................. OK //; // Test 3 : Uniform matrix operations............................. OK //; // Test 4 : Binary Matrix element-by-element operations............OK //; // Test 5 : Matrix transposition...................................OK //; // Test 6 : Haar/Hilbert Matrix....................................OK //; // Test 7 : Matrix promises........................................OK //; // Test 8 : Matrix Norms...........................................OK //; // Test 9 : Matrix Determinant.....................................OK //; // Test 10 : General Matrix Multiplications.........................OK //; // Test 11 : Symmetric Matrix Multiplications.......................OK //; // Test 12 : Matrix Vector Multiplications..........................OK //; // Test 13 : Matrix Inversion.......................................OK //; // Test 14 : Matrix Persistence.....................................OK //; // ******************************************************************* //; // //; //////////////////////////////////////////////////////////////////////////; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/vmatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:931,Testability,Test,Test,931,"// @(#)root/test:$Id$; // Author: Fons Rademakers and Eddy Offermann Nov 2003; //////////////////////////////////////////////////////////////////////////; // //; // Linear Algebra Package -- Matrix Verifications. //; // //; // This file implements a large set of TMat operation tests. //; // ******************************************************************* //; // * Starting Matrix - S T R E S S suite //; // ******************************************************************* //; // Test 1 : Allocation, Resizing.................................. OK //; // Test 2 : Filling, Inserting, Using............................. OK //; // Test 3 : Uniform matrix operations............................. OK //; // Test 4 : Binary Matrix element-by-element operations............OK //; // Test 5 : Matrix transposition...................................OK //; // Test 6 : Haar/Hilbert Matrix....................................OK //; // Test 7 : Matrix promises........................................OK //; // Test 8 : Matrix Norms...........................................OK //; // Test 9 : Matrix Determinant.....................................OK //; // Test 10 : General Matrix Multiplications.........................OK //; // Test 11 : Symmetric Matrix Multiplications.......................OK //; // Test 12 : Matrix Vector Multiplications..........................OK //; // Test 13 : Matrix Inversion.......................................OK //; // Test 14 : Matrix Persistence.....................................OK //; // ******************************************************************* //; // //; //////////////////////////////////////////////////////////////////////////; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/vmatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:1005,Testability,Test,Test,1005,"// @(#)root/test:$Id$; // Author: Fons Rademakers and Eddy Offermann Nov 2003; //////////////////////////////////////////////////////////////////////////; // //; // Linear Algebra Package -- Matrix Verifications. //; // //; // This file implements a large set of TMat operation tests. //; // ******************************************************************* //; // * Starting Matrix - S T R E S S suite //; // ******************************************************************* //; // Test 1 : Allocation, Resizing.................................. OK //; // Test 2 : Filling, Inserting, Using............................. OK //; // Test 3 : Uniform matrix operations............................. OK //; // Test 4 : Binary Matrix element-by-element operations............OK //; // Test 5 : Matrix transposition...................................OK //; // Test 6 : Haar/Hilbert Matrix....................................OK //; // Test 7 : Matrix promises........................................OK //; // Test 8 : Matrix Norms...........................................OK //; // Test 9 : Matrix Determinant.....................................OK //; // Test 10 : General Matrix Multiplications.........................OK //; // Test 11 : Symmetric Matrix Multiplications.......................OK //; // Test 12 : Matrix Vector Multiplications..........................OK //; // Test 13 : Matrix Inversion.......................................OK //; // Test 14 : Matrix Persistence.....................................OK //; // ******************************************************************* //; // //; //////////////////////////////////////////////////////////////////////////; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/vmatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:1079,Testability,Test,Test,1079,"// @(#)root/test:$Id$; // Author: Fons Rademakers and Eddy Offermann Nov 2003; //////////////////////////////////////////////////////////////////////////; // //; // Linear Algebra Package -- Matrix Verifications. //; // //; // This file implements a large set of TMat operation tests. //; // ******************************************************************* //; // * Starting Matrix - S T R E S S suite //; // ******************************************************************* //; // Test 1 : Allocation, Resizing.................................. OK //; // Test 2 : Filling, Inserting, Using............................. OK //; // Test 3 : Uniform matrix operations............................. OK //; // Test 4 : Binary Matrix element-by-element operations............OK //; // Test 5 : Matrix transposition...................................OK //; // Test 6 : Haar/Hilbert Matrix....................................OK //; // Test 7 : Matrix promises........................................OK //; // Test 8 : Matrix Norms...........................................OK //; // Test 9 : Matrix Determinant.....................................OK //; // Test 10 : General Matrix Multiplications.........................OK //; // Test 11 : Symmetric Matrix Multiplications.......................OK //; // Test 12 : Matrix Vector Multiplications..........................OK //; // Test 13 : Matrix Inversion.......................................OK //; // Test 14 : Matrix Persistence.....................................OK //; // ******************************************************************* //; // //; //////////////////////////////////////////////////////////////////////////; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/vmatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:1153,Testability,Test,Test,1153,"// @(#)root/test:$Id$; // Author: Fons Rademakers and Eddy Offermann Nov 2003; //////////////////////////////////////////////////////////////////////////; // //; // Linear Algebra Package -- Matrix Verifications. //; // //; // This file implements a large set of TMat operation tests. //; // ******************************************************************* //; // * Starting Matrix - S T R E S S suite //; // ******************************************************************* //; // Test 1 : Allocation, Resizing.................................. OK //; // Test 2 : Filling, Inserting, Using............................. OK //; // Test 3 : Uniform matrix operations............................. OK //; // Test 4 : Binary Matrix element-by-element operations............OK //; // Test 5 : Matrix transposition...................................OK //; // Test 6 : Haar/Hilbert Matrix....................................OK //; // Test 7 : Matrix promises........................................OK //; // Test 8 : Matrix Norms...........................................OK //; // Test 9 : Matrix Determinant.....................................OK //; // Test 10 : General Matrix Multiplications.........................OK //; // Test 11 : Symmetric Matrix Multiplications.......................OK //; // Test 12 : Matrix Vector Multiplications..........................OK //; // Test 13 : Matrix Inversion.......................................OK //; // Test 14 : Matrix Persistence.....................................OK //; // ******************************************************************* //; // //; //////////////////////////////////////////////////////////////////////////; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/vmatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:1228,Testability,Test,Test,1228,"// @(#)root/test:$Id$; // Author: Fons Rademakers and Eddy Offermann Nov 2003; //////////////////////////////////////////////////////////////////////////; // //; // Linear Algebra Package -- Matrix Verifications. //; // //; // This file implements a large set of TMat operation tests. //; // ******************************************************************* //; // * Starting Matrix - S T R E S S suite //; // ******************************************************************* //; // Test 1 : Allocation, Resizing.................................. OK //; // Test 2 : Filling, Inserting, Using............................. OK //; // Test 3 : Uniform matrix operations............................. OK //; // Test 4 : Binary Matrix element-by-element operations............OK //; // Test 5 : Matrix transposition...................................OK //; // Test 6 : Haar/Hilbert Matrix....................................OK //; // Test 7 : Matrix promises........................................OK //; // Test 8 : Matrix Norms...........................................OK //; // Test 9 : Matrix Determinant.....................................OK //; // Test 10 : General Matrix Multiplications.........................OK //; // Test 11 : Symmetric Matrix Multiplications.......................OK //; // Test 12 : Matrix Vector Multiplications..........................OK //; // Test 13 : Matrix Inversion.......................................OK //; // Test 14 : Matrix Persistence.....................................OK //; // ******************************************************************* //; // //; //////////////////////////////////////////////////////////////////////////; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/vmatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:1303,Testability,Test,Test,1303,"// @(#)root/test:$Id$; // Author: Fons Rademakers and Eddy Offermann Nov 2003; //////////////////////////////////////////////////////////////////////////; // //; // Linear Algebra Package -- Matrix Verifications. //; // //; // This file implements a large set of TMat operation tests. //; // ******************************************************************* //; // * Starting Matrix - S T R E S S suite //; // ******************************************************************* //; // Test 1 : Allocation, Resizing.................................. OK //; // Test 2 : Filling, Inserting, Using............................. OK //; // Test 3 : Uniform matrix operations............................. OK //; // Test 4 : Binary Matrix element-by-element operations............OK //; // Test 5 : Matrix transposition...................................OK //; // Test 6 : Haar/Hilbert Matrix....................................OK //; // Test 7 : Matrix promises........................................OK //; // Test 8 : Matrix Norms...........................................OK //; // Test 9 : Matrix Determinant.....................................OK //; // Test 10 : General Matrix Multiplications.........................OK //; // Test 11 : Symmetric Matrix Multiplications.......................OK //; // Test 12 : Matrix Vector Multiplications..........................OK //; // Test 13 : Matrix Inversion.......................................OK //; // Test 14 : Matrix Persistence.....................................OK //; // ******************************************************************* //; // //; //////////////////////////////////////////////////////////////////////////; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/vmatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:1378,Testability,Test,Test,1378,"// @(#)root/test:$Id$; // Author: Fons Rademakers and Eddy Offermann Nov 2003; //////////////////////////////////////////////////////////////////////////; // //; // Linear Algebra Package -- Matrix Verifications. //; // //; // This file implements a large set of TMat operation tests. //; // ******************************************************************* //; // * Starting Matrix - S T R E S S suite //; // ******************************************************************* //; // Test 1 : Allocation, Resizing.................................. OK //; // Test 2 : Filling, Inserting, Using............................. OK //; // Test 3 : Uniform matrix operations............................. OK //; // Test 4 : Binary Matrix element-by-element operations............OK //; // Test 5 : Matrix transposition...................................OK //; // Test 6 : Haar/Hilbert Matrix....................................OK //; // Test 7 : Matrix promises........................................OK //; // Test 8 : Matrix Norms...........................................OK //; // Test 9 : Matrix Determinant.....................................OK //; // Test 10 : General Matrix Multiplications.........................OK //; // Test 11 : Symmetric Matrix Multiplications.......................OK //; // Test 12 : Matrix Vector Multiplications..........................OK //; // Test 13 : Matrix Inversion.......................................OK //; // Test 14 : Matrix Persistence.....................................OK //; // ******************************************************************* //; // //; //////////////////////////////////////////////////////////////////////////; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/vmatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:1453,Testability,Test,Test,1453,"// @(#)root/test:$Id$; // Author: Fons Rademakers and Eddy Offermann Nov 2003; //////////////////////////////////////////////////////////////////////////; // //; // Linear Algebra Package -- Matrix Verifications. //; // //; // This file implements a large set of TMat operation tests. //; // ******************************************************************* //; // * Starting Matrix - S T R E S S suite //; // ******************************************************************* //; // Test 1 : Allocation, Resizing.................................. OK //; // Test 2 : Filling, Inserting, Using............................. OK //; // Test 3 : Uniform matrix operations............................. OK //; // Test 4 : Binary Matrix element-by-element operations............OK //; // Test 5 : Matrix transposition...................................OK //; // Test 6 : Haar/Hilbert Matrix....................................OK //; // Test 7 : Matrix promises........................................OK //; // Test 8 : Matrix Norms...........................................OK //; // Test 9 : Matrix Determinant.....................................OK //; // Test 10 : General Matrix Multiplications.........................OK //; // Test 11 : Symmetric Matrix Multiplications.......................OK //; // Test 12 : Matrix Vector Multiplications..........................OK //; // Test 13 : Matrix Inversion.......................................OK //; // Test 14 : Matrix Persistence.....................................OK //; // ******************************************************************* //; // //; //////////////////////////////////////////////////////////////////////////; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/vmatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:92,Testability,test,test,92,"////////////////////////////////////////////////////////////////////////////////; /// Print test program number and its title; /// const Int_t kMAX = 65;; /// TString header = TString(""Test "")+Form(""%2d"",id)+"" : ""+title;; /// const Int_t nch = header.Length();; /// for (Int_t i = nch; i < kMAX; i++) header += '.';; /// std::cout << header << (status ? ""OK"" : ""FAILED"") << std::endl;; /// Print test program number and its title",MatchSource.CODE_COMMENT,test/vmatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:185,Testability,Test,Test,185,"////////////////////////////////////////////////////////////////////////////////; /// Print test program number and its title; /// const Int_t kMAX = 65;; /// TString header = TString(""Test "")+Form(""%2d"",id)+"" : ""+title;; /// const Int_t nch = header.Length();; /// for (Int_t i = nch; i < kMAX; i++) header += '.';; /// std::cout << header << (status ? ""OK"" : ""FAILED"") << std::endl;; /// Print test program number and its title",MatchSource.CODE_COMMENT,test/vmatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:396,Testability,test,test,396,"////////////////////////////////////////////////////////////////////////////////; /// Print test program number and its title; /// const Int_t kMAX = 65;; /// TString header = TString(""Test "")+Form(""%2d"",id)+"" : ""+title;; /// const Int_t nch = header.Length();; /// for (Int_t i = nch; i < kMAX; i++) header += '.';; /// std::cout << header << (status ? ""OK"" : ""FAILED"") << std::endl;; /// Print test program number and its title",MatchSource.CODE_COMMENT,test/vmatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:79,Testability,Test,Test,79,"//------------------------------------------------------------------------; // Test allocation functions and compatibility check; //",MatchSource.CODE_COMMENT,test/vmatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:83,Testability,Test,Test,83,"//; //------------------------------------------------------------------------; // Test Filling of matrix; //",MatchSource.CODE_COMMENT,test/vmatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:83,Testability,Test,Test,83,"//; //------------------------------------------------------------------------; // Test uniform element operations; //",MatchSource.CODE_COMMENT,test/vmatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:83,Testability,Test,Test,83,"//; //------------------------------------------------------------------------; // Test binary matrix element-by-element operations; //",MatchSource.CODE_COMMENT,test/vmatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:83,Testability,Test,Test,83,"//; //------------------------------------------------------------------------; // Test special matrix creation; //",MatchSource.CODE_COMMENT,test/vmatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:83,Testability,Test,Test,83,"//; //------------------------------------------------------------------------; // Test matrix promises; //",MatchSource.CODE_COMMENT,test/vmatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:3,Integrability,contract,contracting,3,"// contracting matrix",MatchSource.CODE_COMMENT,test/vmatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:83,Testability,Test,Test,83,"//; //------------------------------------------------------------------------; // Test matrix I/O; //",MatchSource.CODE_COMMENT,test/vmatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Fons Rademakers and Eddy Offermann Nov 2003; //////////////////////////////////////////////////////////////////////////; // //; // Linear Algebra Package -- Vector Verifications. //; // //; // This file implements a large set of TVectorD operation tests. //; // ******************************************************************* //; // * Starting Vector - S T R E S S suite //; // ******************************************************************* //; // Test 1 : Allocation, Filling, Resizing......................... OK //; // Test 2 : Uniform vector operations............................. OK //; // Test 3 : Binary vector element-by-element operations............OK //; // Test 4 : Vector Norms...........................................OK //; // Test 5 : Matrix Slices to Vectors...............................OK //; // Test 6 : Vector Persistence.....................................OK //; // ******************************************************************* //; // //; //////////////////////////////////////////////////////////////////////////; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/vvector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx:282,Testability,test,tests,282,"// @(#)root/test:$Id$; // Author: Fons Rademakers and Eddy Offermann Nov 2003; //////////////////////////////////////////////////////////////////////////; // //; // Linear Algebra Package -- Vector Verifications. //; // //; // This file implements a large set of TVectorD operation tests. //; // ******************************************************************* //; // * Starting Vector - S T R E S S suite //; // ******************************************************************* //; // Test 1 : Allocation, Filling, Resizing......................... OK //; // Test 2 : Uniform vector operations............................. OK //; // Test 3 : Binary vector element-by-element operations............OK //; // Test 4 : Vector Norms...........................................OK //; // Test 5 : Matrix Slices to Vectors...............................OK //; // Test 6 : Vector Persistence.....................................OK //; // ******************************************************************* //; // //; //////////////////////////////////////////////////////////////////////////; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/vvector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx:491,Testability,Test,Test,491,"// @(#)root/test:$Id$; // Author: Fons Rademakers and Eddy Offermann Nov 2003; //////////////////////////////////////////////////////////////////////////; // //; // Linear Algebra Package -- Vector Verifications. //; // //; // This file implements a large set of TVectorD operation tests. //; // ******************************************************************* //; // * Starting Vector - S T R E S S suite //; // ******************************************************************* //; // Test 1 : Allocation, Filling, Resizing......................... OK //; // Test 2 : Uniform vector operations............................. OK //; // Test 3 : Binary vector element-by-element operations............OK //; // Test 4 : Vector Norms...........................................OK //; // Test 5 : Matrix Slices to Vectors...............................OK //; // Test 6 : Vector Persistence.....................................OK //; // ******************************************************************* //; // //; //////////////////////////////////////////////////////////////////////////; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/vvector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx:565,Testability,Test,Test,565,"// @(#)root/test:$Id$; // Author: Fons Rademakers and Eddy Offermann Nov 2003; //////////////////////////////////////////////////////////////////////////; // //; // Linear Algebra Package -- Vector Verifications. //; // //; // This file implements a large set of TVectorD operation tests. //; // ******************************************************************* //; // * Starting Vector - S T R E S S suite //; // ******************************************************************* //; // Test 1 : Allocation, Filling, Resizing......................... OK //; // Test 2 : Uniform vector operations............................. OK //; // Test 3 : Binary vector element-by-element operations............OK //; // Test 4 : Vector Norms...........................................OK //; // Test 5 : Matrix Slices to Vectors...............................OK //; // Test 6 : Vector Persistence.....................................OK //; // ******************************************************************* //; // //; //////////////////////////////////////////////////////////////////////////; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/vvector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx:639,Testability,Test,Test,639,"// @(#)root/test:$Id$; // Author: Fons Rademakers and Eddy Offermann Nov 2003; //////////////////////////////////////////////////////////////////////////; // //; // Linear Algebra Package -- Vector Verifications. //; // //; // This file implements a large set of TVectorD operation tests. //; // ******************************************************************* //; // * Starting Vector - S T R E S S suite //; // ******************************************************************* //; // Test 1 : Allocation, Filling, Resizing......................... OK //; // Test 2 : Uniform vector operations............................. OK //; // Test 3 : Binary vector element-by-element operations............OK //; // Test 4 : Vector Norms...........................................OK //; // Test 5 : Matrix Slices to Vectors...............................OK //; // Test 6 : Vector Persistence.....................................OK //; // ******************************************************************* //; // //; //////////////////////////////////////////////////////////////////////////; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/vvector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx:713,Testability,Test,Test,713,"// @(#)root/test:$Id$; // Author: Fons Rademakers and Eddy Offermann Nov 2003; //////////////////////////////////////////////////////////////////////////; // //; // Linear Algebra Package -- Vector Verifications. //; // //; // This file implements a large set of TVectorD operation tests. //; // ******************************************************************* //; // * Starting Vector - S T R E S S suite //; // ******************************************************************* //; // Test 1 : Allocation, Filling, Resizing......................... OK //; // Test 2 : Uniform vector operations............................. OK //; // Test 3 : Binary vector element-by-element operations............OK //; // Test 4 : Vector Norms...........................................OK //; // Test 5 : Matrix Slices to Vectors...............................OK //; // Test 6 : Vector Persistence.....................................OK //; // ******************************************************************* //; // //; //////////////////////////////////////////////////////////////////////////; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/vvector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx:787,Testability,Test,Test,787,"// @(#)root/test:$Id$; // Author: Fons Rademakers and Eddy Offermann Nov 2003; //////////////////////////////////////////////////////////////////////////; // //; // Linear Algebra Package -- Vector Verifications. //; // //; // This file implements a large set of TVectorD operation tests. //; // ******************************************************************* //; // * Starting Vector - S T R E S S suite //; // ******************************************************************* //; // Test 1 : Allocation, Filling, Resizing......................... OK //; // Test 2 : Uniform vector operations............................. OK //; // Test 3 : Binary vector element-by-element operations............OK //; // Test 4 : Vector Norms...........................................OK //; // Test 5 : Matrix Slices to Vectors...............................OK //; // Test 6 : Vector Persistence.....................................OK //; // ******************************************************************* //; // //; //////////////////////////////////////////////////////////////////////////; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/vvector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx:861,Testability,Test,Test,861,"// @(#)root/test:$Id$; // Author: Fons Rademakers and Eddy Offermann Nov 2003; //////////////////////////////////////////////////////////////////////////; // //; // Linear Algebra Package -- Vector Verifications. //; // //; // This file implements a large set of TVectorD operation tests. //; // ******************************************************************* //; // * Starting Vector - S T R E S S suite //; // ******************************************************************* //; // Test 1 : Allocation, Filling, Resizing......................... OK //; // Test 2 : Uniform vector operations............................. OK //; // Test 3 : Binary vector element-by-element operations............OK //; // Test 4 : Vector Norms...........................................OK //; // Test 5 : Matrix Slices to Vectors...............................OK //; // Test 6 : Vector Persistence.....................................OK //; // ******************************************************************* //; // //; //////////////////////////////////////////////////////////////////////////; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/vvector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx:9,Testability,test,test,9,"// Print test program number and its title; // const Int_t kMAX = 65;; // TString header = TString(""Test "")+Form(""%2d"",id)+"" : ""+title;; // const Int_t nch = header.Length();; // for (Int_t i = nch; i < kMAX; i++) header += '.';; // std::cout << header << (status ? ""OK"" : ""FAILED"") << std::endl;; // Print test program number and its title",MatchSource.CODE_COMMENT,test/vvector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx:100,Testability,Test,Test,100,"// Print test program number and its title; // const Int_t kMAX = 65;; // TString header = TString(""Test "")+Form(""%2d"",id)+"" : ""+title;; // const Int_t nch = header.Length();; // for (Int_t i = nch; i < kMAX; i++) header += '.';; // std::cout << header << (status ? ""OK"" : ""FAILED"") << std::endl;; // Print test program number and its title",MatchSource.CODE_COMMENT,test/vvector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx:307,Testability,test,test,307,"// Print test program number and its title; // const Int_t kMAX = 65;; // TString header = TString(""Test "")+Form(""%2d"",id)+"" : ""+title;; // const Int_t nch = header.Length();; // for (Int_t i = nch; i < kMAX; i++) header += '.';; // std::cout << header << (status ? ""OK"" : ""FAILED"") << std::endl;; // Print test program number and its title",MatchSource.CODE_COMMENT,test/vvector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx:79,Testability,Test,Test,79,"//------------------------------------------------------------------------; // Test allocation functions and compatibility check; //",MatchSource.CODE_COMMENT,test/vvector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx:83,Testability,Test,Test,83,"//; //------------------------------------------------------------------------; // Test uniform element operations; //",MatchSource.CODE_COMMENT,test/vvector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx:83,Testability,Test,Test,83,"//; //------------------------------------------------------------------------; // Test binary vector operations; //",MatchSource.CODE_COMMENT,test/vvector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx:83,Testability,Test,Test,83,"//; //------------------------------------------------------------------------; // Test operations with vectors and matrix slices; //",MatchSource.CODE_COMMENT,test/vvector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx:83,Testability,Test,Test,83,"//; //------------------------------------------------------------------------; // Test vector I/O; //",MatchSource.CODE_COMMENT,test/vvector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/histviewer/canvsave.cxx:107,Integrability,interface,interface,107,"//----------------------------------------------------; //; // A small panel destined to provide graphical interface; // for ""Canvas Save"" action; //; // Author: Dmitry Vasiliev (LNS, Catania); //; //----------------------------------------------------; //",MatchSource.CODE_COMMENT,test/histviewer/canvsave.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/histviewer/canvsave.cxx
https://github.com/root-project/root/tree/v6-32-06/test/histviewer/canvsave.cxx:75,Deployability,update,updated,75,"//otherwise the current directory in the file view; //window is not always updated when a picture is saved",MatchSource.CODE_COMMENT,test/histviewer/canvsave.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/histviewer/canvsave.cxx
https://github.com/root-project/root/tree/v6-32-06/test/histviewer/canvsave.h:110,Integrability,interface,interface,110,"//-------------------------------------------------------; //; // A small panel destined to provide graphical interface; // for ""Canvas Save"" action; //; // Author: Dmitry Vasiliev (LNS, Catania); //; //-------------------------------------------------------",MatchSource.CODE_COMMENT,test/histviewer/canvsave.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/histviewer/canvsave.h
https://github.com/root-project/root/tree/v6-32-06/test/histviewer/histaction.cxx:355,Availability,error,error,355,"//-------------------------------------------------------------------; //; // importFromFile(const char *filename); //; // Imports histogrammes from a file with the name ""filename"".; // Opens the file, scans it, if finds an object of the class TH1F or TH2F,; // imports it.; // All the other objects are ignored.; // In case of not a ROOT file returns an error message and takes no further; // action.; // This function is called when a user doubly clicks on the file icon; // in the file list view.; //; //--------------------------------------------------------------------",MatchSource.CODE_COMMENT,test/histviewer/histaction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/histviewer/histaction.cxx
https://github.com/root-project/root/tree/v6-32-06/test/histviewer/histaction.cxx:361,Integrability,message,message,361,"//-------------------------------------------------------------------; //; // importFromFile(const char *filename); //; // Imports histogrammes from a file with the name ""filename"".; // Opens the file, scans it, if finds an object of the class TH1F or TH2F,; // imports it.; // All the other objects are ignored.; // In case of not a ROOT file returns an error message and takes no further; // action.; // This function is called when a user doubly clicks on the file icon; // in the file list view.; //; //--------------------------------------------------------------------",MatchSource.CODE_COMMENT,test/histviewer/histaction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/histviewer/histaction.cxx
https://github.com/root-project/root/tree/v6-32-06/test/histviewer/histaction.cxx:173,Deployability,Update,Updates,173,"//-----------------------------------------------------------; //; // processBoxB(Int_t par); //; // Processes information from the listbox ""Non empty bins"" (ListBoxB).; // Updates the fields ""Bin content"" and ""Bin range"".; // Higlights the selected bin on the canvas cB.; // Called when an item in the listbox ""Non empty bins"" is highlighted.; // Input parameter - bin index.; //; //------------------------------------------------------------",MatchSource.CODE_COMMENT,test/histviewer/histaction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/histviewer/histaction.cxx
https://github.com/root-project/root/tree/v6-32-06/test/histviewer/histaction.cxx:70,Usability,clear,clearScan,70,"//-----------------------------------------------------------; //; // clearScan(); //; // Clears all the fields in the scan panel (panel B).; //; //-----------------------------------------------------------",MatchSource.CODE_COMMENT,test/histviewer/histaction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/histviewer/histaction.cxx
https://github.com/root-project/root/tree/v6-32-06/test/histviewer/histaction.cxx:90,Usability,Clear,Clears,90,"//-----------------------------------------------------------; //; // clearScan(); //; // Clears all the fields in the scan panel (panel B).; //; //-----------------------------------------------------------",MatchSource.CODE_COMMENT,test/histviewer/histaction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/histviewer/histaction.cxx
https://github.com/root-project/root/tree/v6-32-06/test/histviewer/histaction.cxx:148,Energy Efficiency,green,green,148,"//-------------------------------------------------------------; //; // toGreen(Window_t id); //; // The same as above except changing the color to green.; //; //-------------------------------------------------------------",MatchSource.CODE_COMMENT,test/histviewer/histaction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/histviewer/histaction.cxx
https://github.com/root-project/root/tree/v6-32-06/test/histviewer/histaction.cxx:270,Safety,detect,detected,270,"//--------------------------------------------------------------------; //; // paintHist(); //; // Draws a histo in the canvas cA in case of the user defined display layout.; // The latest display layout has the highest priority. If an overlap; // with existing pads is detected, they are deleted from cA.; // Algorithm virtually divides cA into subpads with the matrix layout (4x4).; // A real pad in which histo will be drawn is constructed from virtual subpads.; // The number of virtual subpads for the real pad can change in the range 1-16.; // Arrays histInd[16] and pads[16] keep the ""id"" of the histo and the; // address of the real pad; //; // -----------------; // | | | | |; // | 1 | 2 | 3 | 4 |; // |---|---|---|---|; // | | | | |; // | 5 | 6 | 7 | 8 |; // |---|---|---|---|; // | | | | |; // | 9 | 10| 11| 12|; // |---|---|---|---|; // | | | | |; // | 13| 14| 15| 16|; // -----------------; //; //; // If a histo with id=20 must be drawn in a pad which embraces virtual subpads; // 1,2,5,6 then; // histInd[0] = 20 pads[0] = address of the real pad; // histInd[1] = 20 pads[1] = NULL; // histInd[4] = 20 pads[4] = NULL; // histInd[5] = 20 pads[5] = NULL; //; // To search for the pads to be deleted the algorithm uses only array; // histInd[].; // Only one of the virtual subpads of the real pad keeps the address; // to avoid double deleting of the same object.; // If there is an overlap between the pads which contain the histo with; // the same ""id"", then only the latest version is drawn.; // All the other pads with this histo (even non overlapping with the current; // one) will be deleted from the canvas.; // To have several versions of the same histo drawn in the canvas one has; // to avoid pads overlapping when setting display layout.; //--------------------------------------------------------------------",MatchSource.CODE_COMMENT,test/histviewer/histaction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/histviewer/histaction.cxx
https://github.com/root-project/root/tree/v6-32-06/test/histviewer/histaction.cxx:1334,Safety,avoid,avoid,1334,"//--------------------------------------------------------------------; //; // paintHist(); //; // Draws a histo in the canvas cA in case of the user defined display layout.; // The latest display layout has the highest priority. If an overlap; // with existing pads is detected, they are deleted from cA.; // Algorithm virtually divides cA into subpads with the matrix layout (4x4).; // A real pad in which histo will be drawn is constructed from virtual subpads.; // The number of virtual subpads for the real pad can change in the range 1-16.; // Arrays histInd[16] and pads[16] keep the ""id"" of the histo and the; // address of the real pad; //; // -----------------; // | | | | |; // | 1 | 2 | 3 | 4 |; // |---|---|---|---|; // | | | | |; // | 5 | 6 | 7 | 8 |; // |---|---|---|---|; // | | | | |; // | 9 | 10| 11| 12|; // |---|---|---|---|; // | | | | |; // | 13| 14| 15| 16|; // -----------------; //; //; // If a histo with id=20 must be drawn in a pad which embraces virtual subpads; // 1,2,5,6 then; // histInd[0] = 20 pads[0] = address of the real pad; // histInd[1] = 20 pads[1] = NULL; // histInd[4] = 20 pads[4] = NULL; // histInd[5] = 20 pads[5] = NULL; //; // To search for the pads to be deleted the algorithm uses only array; // histInd[].; // Only one of the virtual subpads of the real pad keeps the address; // to avoid double deleting of the same object.; // If there is an overlap between the pads which contain the histo with; // the same ""id"", then only the latest version is drawn.; // All the other pads with this histo (even non overlapping with the current; // one) will be deleted from the canvas.; // To have several versions of the same histo drawn in the canvas one has; // to avoid pads overlapping when setting display layout.; //--------------------------------------------------------------------",MatchSource.CODE_COMMENT,test/histviewer/histaction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/histviewer/histaction.cxx
https://github.com/root-project/root/tree/v6-32-06/test/histviewer/histaction.cxx:1709,Safety,avoid,avoid,1709,"//--------------------------------------------------------------------; //; // paintHist(); //; // Draws a histo in the canvas cA in case of the user defined display layout.; // The latest display layout has the highest priority. If an overlap; // with existing pads is detected, they are deleted from cA.; // Algorithm virtually divides cA into subpads with the matrix layout (4x4).; // A real pad in which histo will be drawn is constructed from virtual subpads.; // The number of virtual subpads for the real pad can change in the range 1-16.; // Arrays histInd[16] and pads[16] keep the ""id"" of the histo and the; // address of the real pad; //; // -----------------; // | | | | |; // | 1 | 2 | 3 | 4 |; // |---|---|---|---|; // | | | | |; // | 5 | 6 | 7 | 8 |; // |---|---|---|---|; // | | | | |; // | 9 | 10| 11| 12|; // |---|---|---|---|; // | | | | |; // | 13| 14| 15| 16|; // -----------------; //; //; // If a histo with id=20 must be drawn in a pad which embraces virtual subpads; // 1,2,5,6 then; // histInd[0] = 20 pads[0] = address of the real pad; // histInd[1] = 20 pads[1] = NULL; // histInd[4] = 20 pads[4] = NULL; // histInd[5] = 20 pads[5] = NULL; //; // To search for the pads to be deleted the algorithm uses only array; // histInd[].; // Only one of the virtual subpads of the real pad keeps the address; // to avoid double deleting of the same object.; // If there is an overlap between the pads which contain the histo with; // the same ""id"", then only the latest version is drawn.; // All the other pads with this histo (even non overlapping with the current; // one) will be deleted from the canvas.; // To have several versions of the same histo drawn in the canvas one has; // to avoid pads overlapping when setting display layout.; //--------------------------------------------------------------------",MatchSource.CODE_COMMENT,test/histviewer/histaction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/histviewer/histaction.cxx
https://github.com/root-project/root/tree/v6-32-06/test/histviewer/histaction.cxx:20,Integrability,message,message,20,"//used to construct message panel when Close button is clicked",MatchSource.CODE_COMMENT,test/histviewer/histaction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/histviewer/histaction.cxx
https://github.com/root-project/root/tree/v6-32-06/test/histviewer/histaction.cxx:5,Deployability,update,update,5,"//to update layout of list boxes",MatchSource.CODE_COMMENT,test/histviewer/histaction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/histviewer/histaction.cxx
https://github.com/root-project/root/tree/v6-32-06/test/histviewer/histaction.cxx:11,Availability,down,down,11,"// One bin down in ListBoxB (non empty bins)",MatchSource.CODE_COMMENT,test/histviewer/histaction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/histviewer/histaction.cxx
https://github.com/root-project/root/tree/v6-32-06/test/histviewer/histaction.cxx:13,Availability,down,down,13,"// One histo down in ListBoxA",MatchSource.CODE_COMMENT,test/histviewer/histaction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/histviewer/histaction.cxx
https://github.com/root-project/root/tree/v6-32-06/test/histviewer/histaction.cxx:51,Deployability,update,updated,51,"//otherwise the current directory is; //not always updated",MatchSource.CODE_COMMENT,test/histviewer/histaction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/histviewer/histaction.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbDefs.h:19,Testability,Log,Log,19,/*; * $Header$; * $Log$; */,MatchSource.CODE_COMMENT,test/periodic/NdbDefs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbDefs.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbEndfIO.cxx:3,Availability,error,error,3,"// error(ERR_INVALID_RECORD);",MatchSource.CODE_COMMENT,test/periodic/NdbEndfIO.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbEndfIO.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbEndfIO.cxx:51,Availability,error,error,51,/* if something is still in source then we have an error number */,MatchSource.CODE_COMMENT,test/periodic/NdbEndfIO.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbEndfIO.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbEndfIO.cxx:3,Availability,error,error,3,"// error(ERR_INVALID_REAL_NUMBER);",MatchSource.CODE_COMMENT,test/periodic/NdbEndfIO.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbEndfIO.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbEndfIO.cxx:7,Deployability,Update,Update,7,"// --- Update pointers if necessary ---",MatchSource.CODE_COMMENT,test/periodic/NdbEndfIO.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbEndfIO.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbEndfIO.h:3,Security,Access,Access,3,"// Access functions",MatchSource.CODE_COMMENT,test/periodic/NdbEndfIO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbEndfIO.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbEndfIO.h:50,Modifiability,variab,variable,50,"// Return a substring of current line in a static variable",MatchSource.CODE_COMMENT,test/periodic/NdbEndfIO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbEndfIO.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMaterial.h:7,Security,Access,Access,7,"// --- Access functions ---",MatchSource.CODE_COMMENT,test/periodic/NdbMaterial.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMaterial.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMF.cxx:77,Availability,avail,available,77,"// Add; /* ---------- EnumerateENDFType ---------- */; /* Enumerates all the available sections inside the ENDF file; * @param sec Find the next section after <B>sec</B>; * @return Next available section in ENDF file, -1 if EOF; */",MatchSource.CODE_COMMENT,test/periodic/NdbMF.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMF.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMF.cxx:186,Availability,avail,available,186,"// Add; /* ---------- EnumerateENDFType ---------- */; /* Enumerates all the available sections inside the ENDF file; * @param sec Find the next section after <B>sec</B>; * @return Next available section in ENDF file, -1 if EOF; */",MatchSource.CODE_COMMENT,test/periodic/NdbMF.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMF.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMF.h:3,Security,Access,Access,3,"// Access functions",MatchSource.CODE_COMMENT,test/periodic/NdbMF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMF.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMT.h:3,Security,Access,Access,3,"// Access functions",MatchSource.CODE_COMMENT,test/periodic/NdbMT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMT.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMTDir.cxx:26,Performance,Load,LoadENDF,26,// ~NdbMTDir; /* -------- LoadENDF -------- */,MatchSource.CODE_COMMENT,test/periodic/NdbMTDir.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMTDir.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMTDir.cxx:3,Performance,Load,LoadENDF,3,"// LoadENDF",MatchSource.CODE_COMMENT,test/periodic/NdbMTDir.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMTDir.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMTDir.h:14,Energy Efficiency,energy,energy,14,"// Excitation energy",MatchSource.CODE_COMMENT,test/periodic/NdbMTDir.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMTDir.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMTDir.h:20,Integrability,rout,routines,20,"// --- Input/Output routines ---",MatchSource.CODE_COMMENT,test/periodic/NdbMTDir.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMTDir.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMTReacDesc.cxx:9,Energy Efficiency,Allocate,Allocate,9,/* ----- Allocate memory ----- */,MatchSource.CODE_COMMENT,test/periodic/NdbMTReacDesc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMTReacDesc.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMTReacDesc.h:133,Availability,avail,available,133,"/* ========= NdbMTReactionXS ============ */; // This class provides the descriptions and comments of all the reactions; // that are available in MF=3",MatchSource.CODE_COMMENT,test/periodic/NdbMTReacDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMTReacDesc.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMTReacDesc.h:7,Security,Access,Access,7,"// --- Access functions ---",MatchSource.CODE_COMMENT,test/periodic/NdbMTReacDesc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMTReacDesc.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMTReactionXS.cxx:12,Performance,Load,LoadENDF,12,/* -------- LoadENDF -------- */,MatchSource.CODE_COMMENT,test/periodic/NdbMTReactionXS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMTReactionXS.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMTReactionXS.cxx:3,Performance,load,loadENDF,3,// loadENDF; /* -------- BinSearch -------- */,MatchSource.CODE_COMMENT,test/periodic/NdbMTReactionXS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMTReactionXS.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMTReactionXS.h:3,Energy Efficiency,Energy,Energy,3,"// Energy in eV",MatchSource.CODE_COMMENT,test/periodic/NdbMTReactionXS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMTReactionXS.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMTReactionXS.h:33,Energy Efficiency,energy,energy,33,"// reaction Q for the lowest; // energy state",MatchSource.CODE_COMMENT,test/periodic/NdbMTReactionXS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMTReactionXS.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMTReactionXS.h:7,Security,Access,Access,7,"// --- Access functions ---",MatchSource.CODE_COMMENT,test/periodic/NdbMTReactionXS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMTReactionXS.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMTReactionXS.h:20,Integrability,rout,routines,20,"// --- Input/Output routines ---",MatchSource.CODE_COMMENT,test/periodic/NdbMTReactionXS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMTReactionXS.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMTReactionXS.h:21,Integrability,rout,routines,21,"// --- Interpolation routines ---",MatchSource.CODE_COMMENT,test/periodic/NdbMTReactionXS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMTReactionXS.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbParticle.h:12,Energy Efficiency,charge,charge,12,"// Particle charge",MatchSource.CODE_COMMENT,test/periodic/NdbParticle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbParticle.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbParticle.h:7,Security,Access,Access,7,"// --- Access Functions ---",MatchSource.CODE_COMMENT,test/periodic/NdbParticle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbParticle.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbParticleList.h:7,Security,Access,Access,7,"// --- Access Functions ---",MatchSource.CODE_COMMENT,test/periodic/NdbParticleList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbParticleList.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbParticleList.h:9,Energy Efficiency,charge,charge,9,"// Total charge",MatchSource.CODE_COMMENT,test/periodic/NdbParticleList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbParticleList.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSElementDlg.cxx:19,Testability,Log,Log,19,/*; * $Header$; * $Log$; */,MatchSource.CODE_COMMENT,test/periodic/XSElementDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSElementDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSElementDlg.cxx:33,Energy Efficiency,Charge,Charge,33,"// ------------- Table Sorted by Charge -------------",MatchSource.CODE_COMMENT,test/periodic/XSElementDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSElementDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSElementDlg.cxx:11,Integrability,message,message,11,"// Issue a message to select an Element",MatchSource.CODE_COMMENT,test/periodic/XSElementDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSElementDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSElementDlg.h:19,Testability,Log,Log,19,/*; * $Header$; * $Log$; */,MatchSource.CODE_COMMENT,test/periodic/XSElementDlg.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSElementDlg.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSElementList.cxx:19,Testability,Log,Log,19,"/*; * $Header$; * $Log$; *; * Fills a listbox with the elements sorted, by name, mnemonic, or Z; */",MatchSource.CODE_COMMENT,test/periodic/XSElementList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSElementList.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSElementList.cxx:7,Performance,Perform,Perform,7,"// --- Perform a bubble sort ---",MatchSource.CODE_COMMENT,test/periodic/XSElementList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSElementList.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSElementList.h:19,Testability,Log,Log,19,/*; * $Header$; * $Log$; *; * Array of Elements with names and mnemonics; */,MatchSource.CODE_COMMENT,test/periodic/XSElementList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSElementList.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSElements.cxx:19,Testability,Log,Log,19,/*; * $Header$; * $Log$; */,MatchSource.CODE_COMMENT,test/periodic/XSElements.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSElements.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSElements.cxx:70,Energy Efficiency,allocate,allocates,70,// IsotopeInfo; /* ------- ReadLine ------- */; /* Reads one line and allocates a string for it */,MatchSource.CODE_COMMENT,test/periodic/XSElements.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSElements.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSElements.h:19,Testability,Log,Log,19,/*; * $Header$; * $Log$; */,MatchSource.CODE_COMMENT,test/periodic/XSElements.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSElements.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSGraph.h:19,Testability,Log,Log,19,/*; * $Header$; * $Log$; */,MatchSource.CODE_COMMENT,test/periodic/XSGraph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSGraph.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSGui.cxx:49,Integrability,interface,interface,49,/*; * $Header$; * $Log$; *; * The graphical user interface for the Neutron Cross section database; */,MatchSource.CODE_COMMENT,test/periodic/XSGui.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSGui.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSGui.cxx:19,Testability,Log,Log,19,/*; * $Header$; * $Log$; *; * The graphical user interface for the Neutron Cross section database; */,MatchSource.CODE_COMMENT,test/periodic/XSGui.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSGui.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSGui.cxx:15,Integrability,message,messages,15,"// Menu button messages are handled by the main frame (i.e. ""this""); // ProcessMessage() method.",MatchSource.CODE_COMMENT,test/periodic/XSGui.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSGui.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSGui.cxx:13,Integrability,message,message,13,"// Got close message for this MainFrame. Calls parent CloseWindow(); // (which destroys the window) and terminate the application.; // The close message is generated by the window manager when its close; // window menu item is selected.",MatchSource.CODE_COMMENT,test/periodic/XSGui.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSGui.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSGui.cxx:145,Integrability,message,message,145,"// Got close message for this MainFrame. Calls parent CloseWindow(); // (which destroys the window) and terminate the application.; // The close message is generated by the window manager when its close; // window menu item is selected.",MatchSource.CODE_COMMENT,test/periodic/XSGui.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSGui.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSGui.cxx:10,Integrability,message,messages,10,"// Handle messages send to the XSGui object.",MatchSource.CODE_COMMENT,test/periodic/XSGui.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSGui.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSGui.h:19,Testability,Log,Log,19,/*; * $Header$; * $Log$; */,MatchSource.CODE_COMMENT,test/periodic/XSGui.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSGui.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSGui.h:23,Availability,avail,available,23,/* ---- Define all the available commands ----- */,MatchSource.CODE_COMMENT,test/periodic/XSGui.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSGui.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSPeriodicTable.cxx:19,Testability,Log,Log,19,/*; * $Header$; * $Log$; *; * Implements the periodic table of elements; */,MatchSource.CODE_COMMENT,test/periodic/XSPeriodicTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSPeriodicTable.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSPeriodicTable.cxx:185,Energy Efficiency,Green,Green,185,"//#define w 0xFFFFFFL // White; //#define A 0xCCCCCCL // Gray; //#define B 0xCCCCFFL // Blue; //#define Y 0xFFFFCCL // Yellow; //#define O 0xFFCCCCL // Orange; //#define G 0xCCFFCCL // Green",MatchSource.CODE_COMMENT,test/periodic/XSPeriodicTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSPeriodicTable.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSPeriodicTable.h:19,Testability,Log,Log,19,/*; * $Header$; * $Log$; */,MatchSource.CODE_COMMENT,test/periodic/XSPeriodicTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSPeriodicTable.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx:19,Testability,Log,Log,19,/*; * $Header$; * $Log$; */,MatchSource.CODE_COMMENT,test/periodic/XSReactionDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx:24,Deployability,Update,UpdateContainer,24,// CreatePath; /* ----- UpdateContainer ----- */,MatchSource.CODE_COMMENT,test/periodic/XSReactionDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx:21,Deployability,update,update,21,"// Scan directory to update the combo box",MatchSource.CODE_COMMENT,test/periodic/XSReactionDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx:3,Deployability,Update,UpdateContainer,3,// UpdateContainer; /* ----- UpdateIsotopes ------ */,MatchSource.CODE_COMMENT,test/periodic/XSReactionDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx:29,Deployability,Update,UpdateIsotopes,29,// UpdateContainer; /* ----- UpdateIsotopes ------ */,MatchSource.CODE_COMMENT,test/periodic/XSReactionDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx:7,Deployability,Update,Update,7,"// --- Update the isotopes ---",MatchSource.CODE_COMMENT,test/periodic/XSReactionDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx:3,Deployability,Update,UpdateIsotopes,3,// UpdateIsotopes; /* ----- UpdateProjectile ------ */,MatchSource.CODE_COMMENT,test/periodic/XSReactionDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx:28,Deployability,Update,UpdateProjectile,28,// UpdateIsotopes; /* ----- UpdateProjectile ------ */,MatchSource.CODE_COMMENT,test/periodic/XSReactionDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx:7,Deployability,Update,Update,7,"// --- Update the projectiles ---",MatchSource.CODE_COMMENT,test/periodic/XSReactionDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx:3,Deployability,Update,UpdateProjectile,3,// UpdateProjectile; /* ----- UpdateDatabase ------ */,MatchSource.CODE_COMMENT,test/periodic/XSReactionDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx:30,Deployability,Update,UpdateDatabase,30,// UpdateProjectile; /* ----- UpdateDatabase ------ */,MatchSource.CODE_COMMENT,test/periodic/XSReactionDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx:7,Deployability,Update,Update,7,"// --- Update the databases ---",MatchSource.CODE_COMMENT,test/periodic/XSReactionDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx:3,Deployability,Update,UpdateDatabase,3,// UpdateDatabase; /* ----- UpdateReactions ------ */,MatchSource.CODE_COMMENT,test/periodic/XSReactionDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx:28,Deployability,Update,UpdateReactions,28,// UpdateDatabase; /* ----- UpdateReactions ------ */,MatchSource.CODE_COMMENT,test/periodic/XSReactionDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx:3,Deployability,Update,UpdateReactions,3,// UpdateReactions; /* ----- UpdateCurIsotope ----- */,MatchSource.CODE_COMMENT,test/periodic/XSReactionDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx:29,Deployability,Update,UpdateCurIsotope,29,// UpdateReactions; /* ----- UpdateCurIsotope ----- */,MatchSource.CODE_COMMENT,test/periodic/XSReactionDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx:7,Deployability,Update,Update,7,"// --- Update combos depending on isotope ---",MatchSource.CODE_COMMENT,test/periodic/XSReactionDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx:21,Integrability,depend,depending,21,"// --- Update combos depending on isotope ---",MatchSource.CODE_COMMENT,test/periodic/XSReactionDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx:3,Deployability,Update,UpdateCurIsotope,3,// UpdateCurIsotope; /* ----- SetElement ----- */,MatchSource.CODE_COMMENT,test/periodic/XSReactionDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx:7,Deployability,Update,Update,7,"// --- Update several values for element ---",MatchSource.CODE_COMMENT,test/periodic/XSReactionDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx:43,Deployability,Update,Update,43,"// --------------------------------; // ---Update the rest of combos ---; // --------------------------------",MatchSource.CODE_COMMENT,test/periodic/XSReactionDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx:7,Availability,Error,Error,7,"// --- Error Entry ---; // issue message and put the old one",MatchSource.CODE_COMMENT,test/periodic/XSReactionDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx:33,Integrability,message,message,33,"// --- Error Entry ---; // issue message and put the old one",MatchSource.CODE_COMMENT,test/periodic/XSReactionDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx:33,Deployability,Update,UpdateGraph,33,// ElementEntryChanged; /* ----- UpdateGraph ---- */,MatchSource.CODE_COMMENT,test/periodic/XSReactionDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx:42,Deployability,update,update,42,"//!!! --- Only if new ---; //!!! --- Else update the old one ---",MatchSource.CODE_COMMENT,test/periodic/XSReactionDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx:54,Energy Efficiency,Energy,Energy,54,"// gr->GetGraph()->GetHistogram()->SetXTitle(TString(""Energy (eV)""));; // gr->GetGraph()->GetHistogram()->SetYTitle(TString(""Cross Section (barn)""));",MatchSource.CODE_COMMENT,test/periodic/XSReactionDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx:3,Deployability,Update,UpdateGraph,3,// UpdateGraph; /* ----- ExecCommand ---- */,MatchSource.CODE_COMMENT,test/periodic/XSReactionDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx:7,Performance,Load,Load,7,"// --- Load the data base ---",MatchSource.CODE_COMMENT,test/periodic/XSReactionDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx:12,Availability,error,error,12,"// Ooops an error in the code",MatchSource.CODE_COMMENT,test/periodic/XSReactionDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx:11,Integrability,Message,Message,11,"// printf(""Message = %d (%d)\n"", GET_MSG(msg), GET_SUBMSG(msg));",MatchSource.CODE_COMMENT,test/periodic/XSReactionDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.h:19,Testability,Log,Log,19,/*; * $Header$; * $Log$; */,MatchSource.CODE_COMMENT,test/periodic/XSReactionDlg.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSReactionDlg.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSStepButton.cxx:19,Testability,Log,Log,19,/*; * $Header$; * $Log$; */,MatchSource.CODE_COMMENT,test/periodic/XSStepButton.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSStepButton.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSStepButton.cxx:11,Security,XSS,XSStepButton,11,//ClassImp(XSStepButton);; /* ----- XSStepButton ----- */,MatchSource.CODE_COMMENT,test/periodic/XSStepButton.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSStepButton.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSStepButton.cxx:36,Security,XSS,XSStepButton,36,//ClassImp(XSStepButton);; /* ----- XSStepButton ----- */,MatchSource.CODE_COMMENT,test/periodic/XSStepButton.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSStepButton.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSStepButton.cxx:3,Security,XSS,XSStepButton,3,// XSStepButton; /* ----- ~XSStepButton ----- */,MatchSource.CODE_COMMENT,test/periodic/XSStepButton.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSStepButton.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSStepButton.cxx:27,Security,XSS,XSStepButton,27,// XSStepButton; /* ----- ~XSStepButton ----- */,MatchSource.CODE_COMMENT,test/periodic/XSStepButton.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSStepButton.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSStepButton.cxx:4,Security,XSS,XSStepButton,4,// ~XSStepButton; /* ----- ProcessMessage ----- */,MatchSource.CODE_COMMENT,test/periodic/XSStepButton.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSStepButton.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSStepButton.cxx:10,Integrability,message,message,10,"// Send a message",MatchSource.CODE_COMMENT,test/periodic/XSStepButton.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSStepButton.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSStepButton.h:19,Testability,Log,Log,19,/*; * $Header$; * $Log$; */,MatchSource.CODE_COMMENT,test/periodic/XSStepButton.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSStepButton.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSStepButton.h:7,Integrability,Message,Messages,7,/* --- Messages that generate ---- */,MatchSource.CODE_COMMENT,test/periodic/XSStepButton.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSStepButton.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSStepButton.h:15,Security,XSS,XSStepButton,15,/* =========== XSStepButton ============== */,MatchSource.CODE_COMMENT,test/periodic/XSStepButton.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSStepButton.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSStepButton.h:27,Integrability,message,messages,27,"// window handling listbox messages",MatchSource.CODE_COMMENT,test/periodic/XSStepButton.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSStepButton.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSStepButton.h:19,Security,XSS,XSStepButton,19,"//ClassDefOverride(XSStepButton,1)",MatchSource.CODE_COMMENT,test/periodic/XSStepButton.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSStepButton.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSStepButton.h:3,Security,XSS,XSStepButton,3,"// XSStepButton",MatchSource.CODE_COMMENT,test/periodic/XSStepButton.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSStepButton.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSVarious.cxx:38,Integrability,rout,routines,38,"/*; * $Header$; * $Log$; *; * Various routines, and global variables; */",MatchSource.CODE_COMMENT,test/periodic/XSVarious.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSVarious.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSVarious.cxx:59,Modifiability,variab,variables,59,"/*; * $Header$; * $Log$; *; * Various routines, and global variables; */",MatchSource.CODE_COMMENT,test/periodic/XSVarious.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSVarious.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSVarious.cxx:19,Testability,Log,Log,19,"/*; * $Header$; * $Log$; *; * Various routines, and global variables; */",MatchSource.CODE_COMMENT,test/periodic/XSVarious.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSVarious.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSVarious.cxx:22,Modifiability,variab,variables,22,"// --- Initialise GUI variables ---",MatchSource.CODE_COMMENT,test/periodic/XSVarious.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSVarious.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSVarious.cxx:27,Deployability,update,update,27,"/* --- Scan all graphs and update the canvas --- */; // ....",MatchSource.CODE_COMMENT,test/periodic/XSVarious.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSVarious.cxx
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSVarious.h:38,Integrability,rout,routines,38,"/*; * $Header$; * $Log$; *; * Various routines, and global variables; */",MatchSource.CODE_COMMENT,test/periodic/XSVarious.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSVarious.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSVarious.h:59,Modifiability,variab,variables,59,"/*; * $Header$; * $Log$; *; * Various routines, and global variables; */",MatchSource.CODE_COMMENT,test/periodic/XSVarious.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSVarious.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSVarious.h:19,Testability,Log,Log,19,"/*; * $Header$; * $Log$; *; * Various routines, and global variables; */",MatchSource.CODE_COMMENT,test/periodic/XSVarious.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSVarious.h
https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSVarious.h:27,Modifiability,Variab,Variables,27,/* ---------------- Global Variables -------------------- */,MatchSource.CODE_COMMENT,test/periodic/XSVarious.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSVarious.h
https://github.com/root-project/root/tree/v6-32-06/test/ProofBench/EventTree_NoProc.h:240,Integrability,rout,routine,240,"// The Init() function is called when the selector needs to initialize; // a new tree or chain. Typically here the branch addresses of the tree; // will be set. It is normaly not necessary to make changes to the; // generated code, but the routine can be extended by the user if needed.; // Init() will be called many times when running with PROOF.; // Set branch addresses",MatchSource.CODE_COMMENT,test/ProofBench/EventTree_NoProc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/ProofBench/EventTree_NoProc.h
https://github.com/root-project/root/tree/v6-32-06/test/ProofBench/EventTree_NoProc.h:255,Modifiability,extend,extended,255,"// The Init() function is called when the selector needs to initialize; // a new tree or chain. Typically here the branch addresses of the tree; // will be set. It is normaly not necessary to make changes to the; // generated code, but the routine can be extended by the user if needed.; // Init() will be called many times when running with PROOF.; // Set branch addresses",MatchSource.CODE_COMMENT,test/ProofBench/EventTree_NoProc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/ProofBench/EventTree_NoProc.h
https://github.com/root-project/root/tree/v6-32-06/test/ProofBench/EventTree_NoProc.h:308,Integrability,rout,routine,308,"// The Notify() function is called when a new file is opened. This; // can be either for a new TTree in a TChain or when when a new TTree; // is started when using PROOF. Typically here the branch pointers; // will be retrieved. It is normaly not necessary to make changes; // to the generated code, but the routine can be extended by the; // user if needed.; // Get branch pointers",MatchSource.CODE_COMMENT,test/ProofBench/EventTree_NoProc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/ProofBench/EventTree_NoProc.h
https://github.com/root-project/root/tree/v6-32-06/test/ProofBench/EventTree_NoProc.h:323,Modifiability,extend,extended,323,"// The Notify() function is called when a new file is opened. This; // can be either for a new TTree in a TChain or when when a new TTree; // is started when using PROOF. Typically here the branch pointers; // will be retrieved. It is normaly not necessary to make changes; // to the generated code, but the routine can be extended by the; // user if needed.; // Get branch pointers",MatchSource.CODE_COMMENT,test/ProofBench/EventTree_NoProc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/ProofBench/EventTree_NoProc.h
https://github.com/root-project/root/tree/v6-32-06/test/ProofBench/EventTree_Proc.h:240,Integrability,rout,routine,240,"// The Init() function is called when the selector needs to initialize; // a new tree or chain. Typically here the branch addresses of the tree; // will be set. It is normaly not necessary to make changes to the; // generated code, but the routine can be extended by the user if needed.; // Init() will be called many times when running with PROOF.; // Set branch addresses",MatchSource.CODE_COMMENT,test/ProofBench/EventTree_Proc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/ProofBench/EventTree_Proc.h
https://github.com/root-project/root/tree/v6-32-06/test/ProofBench/EventTree_Proc.h:255,Modifiability,extend,extended,255,"// The Init() function is called when the selector needs to initialize; // a new tree or chain. Typically here the branch addresses of the tree; // will be set. It is normaly not necessary to make changes to the; // generated code, but the routine can be extended by the user if needed.; // Init() will be called many times when running with PROOF.; // Set branch addresses",MatchSource.CODE_COMMENT,test/ProofBench/EventTree_Proc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/ProofBench/EventTree_Proc.h
https://github.com/root-project/root/tree/v6-32-06/test/ProofBench/EventTree_Proc.h:308,Integrability,rout,routine,308,"// The Notify() function is called when a new file is opened. This; // can be either for a new TTree in a TChain or when when a new TTree; // is started when using PROOF. Typically here the branch pointers; // will be retrieved. It is normaly not necessary to make changes; // to the generated code, but the routine can be extended by the; // user if needed.; // Get branch pointers",MatchSource.CODE_COMMENT,test/ProofBench/EventTree_Proc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/ProofBench/EventTree_Proc.h
https://github.com/root-project/root/tree/v6-32-06/test/ProofBench/EventTree_Proc.h:323,Modifiability,extend,extended,323,"// The Notify() function is called when a new file is opened. This; // can be either for a new TTree in a TChain or when when a new TTree; // is started when using PROOF. Typically here the branch pointers; // will be retrieved. It is normaly not necessary to make changes; // to the generated code, but the routine can be extended by the; // user if needed.; // Get branch pointers",MatchSource.CODE_COMMENT,test/ProofBench/EventTree_Proc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/ProofBench/EventTree_Proc.h
https://github.com/root-project/root/tree/v6-32-06/test/ProofBench/EventTree_ProcOpt.h:240,Integrability,rout,routine,240,"// The Init() function is called when the selector needs to initialize; // a new tree or chain. Typically here the branch addresses of the tree; // will be set. It is normaly not necessary to make changes to the; // generated code, but the routine can be extended by the user if needed.; // Init() will be called many times when running with PROOF.; // Set branch addresses",MatchSource.CODE_COMMENT,test/ProofBench/EventTree_ProcOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/ProofBench/EventTree_ProcOpt.h
https://github.com/root-project/root/tree/v6-32-06/test/ProofBench/EventTree_ProcOpt.h:255,Modifiability,extend,extended,255,"// The Init() function is called when the selector needs to initialize; // a new tree or chain. Typically here the branch addresses of the tree; // will be set. It is normaly not necessary to make changes to the; // generated code, but the routine can be extended by the user if needed.; // Init() will be called many times when running with PROOF.; // Set branch addresses",MatchSource.CODE_COMMENT,test/ProofBench/EventTree_ProcOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/ProofBench/EventTree_ProcOpt.h
https://github.com/root-project/root/tree/v6-32-06/test/ProofBench/EventTree_ProcOpt.h:308,Integrability,rout,routine,308,"// The Notify() function is called when a new file is opened. This; // can be either for a new TTree in a TChain or when when a new TTree; // is started when using PROOF. Typically here the branch pointers; // will be retrieved. It is normaly not necessary to make changes; // to the generated code, but the routine can be extended by the; // user if needed.; // Get branch pointers",MatchSource.CODE_COMMENT,test/ProofBench/EventTree_ProcOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/ProofBench/EventTree_ProcOpt.h
https://github.com/root-project/root/tree/v6-32-06/test/ProofBench/EventTree_ProcOpt.h:323,Modifiability,extend,extended,323,"// The Notify() function is called when a new file is opened. This; // can be either for a new TTree in a TChain or when when a new TTree; // is started when using PROOF. Typically here the branch pointers; // will be retrieved. It is normaly not necessary to make changes; // to the generated code, but the routine can be extended by the; // user if needed.; // Get branch pointers",MatchSource.CODE_COMMENT,test/ProofBench/EventTree_ProcOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/ProofBench/EventTree_ProcOpt.h
https://github.com/root-project/root/tree/v6-32-06/test/rhtml/rhtml.cxx:12,Testability,test,test,12,"// @(#)root/test/rhtml/:$Id$; // Author: Bertrand Bellenot 09/05/2007; /*************************************************************************; * Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,test/rhtml/rhtml.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/rhtml/rhtml.cxx
https://github.com/root-project/root/tree/v6-32-06/test/rhtml/rhtml.h:12,Testability,test,test,12,"// @(#)root/test/rhtml/:$Id$; // Author: Bertrand Bellenot 09/05/2007; /*************************************************************************; * Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,test/rhtml/rhtml.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/rhtml/rhtml.h
https://github.com/root-project/root/tree/v6-32-06/test/rhtml/rhtml.h:9,Performance,Load,Loading,9,"// ""Stop Loading"" picture button",MatchSource.CODE_COMMENT,test/rhtml/rhtml.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/rhtml/rhtml.h
https://github.com/root-project/root/tree/v6-32-06/test/rhtml/rhtml.h:8,Usability,simpl,simple,8,"// very simple html browser",MatchSource.CODE_COMMENT,test/rhtml/rhtml.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/rhtml/rhtml.h
https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/main.cxx:12,Testability,test,test,12,"// @(#)root/test/RootIDE/:$Id$; // Author: Bertrand Bellenot 20/04/2007; /*************************************************************************; * Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,test/RootIDE/main.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/main.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/main.cxx:37,Safety,avoid,avoid,37,"// don't pass filename arg to TRint (avoid processing file)",MatchSource.CODE_COMMENT,test/RootIDE/main.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/main.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx:2925,Availability,avail,available,2925,"king on the desired location //; // with the left mouse button. To highlight some text, press the mouse //; // and drag the mouse while holding the left button pressed. //; // To select a word, double-click on it; //; // to select the text line - triple-click on it; //; // to select all do quadruple-click. //; // //; // Cut, Copy, Paste //; // //; // After selecting some text, you can cut or copy it to the clipboard. //; // A subsequent paste operation will insert the contents of the //; // clipboard at the current cursor location. //; // //; // Text Search //; // //; // The editor uses a standard Search dialog. You can specify a forward //; // or backward search direction starting from the current cursor //; // location according to the selection made of a case sensitive mode //; // or not. The last search can be repeated by pressing F3. //; // //; // Text Font //; // //; // You can change the text font by selecting Edit menu / Set Font. //; // The Font Dialog pops up and shows the Name, Style, and Size of any //; // available font. The selected font sample is shown in the preview //; // area. //; // //; // Executing Macros //; // //; // You can execute the currently loaded macro in the editor by //; // selecting Tools menu / Execute Macro; by clicking on the //; // corresponding toolbar button, or by using Ctrl+F5 accelerator keys. //; // This is identical to the command "".x macro.C"" in the root prompt //; // command line. //; // //; // Compiling Macros //; // //; // The currently loaded macro can be compiled with ACLiC if you select //; // Tools menu / Compile Macro; by clicking on the corresponding //; // toolbar button, or by using Ctrl+F7 accelerator keys. //; // This is identical to the command "".L macro.C++"" in the root prompt //; // command line. //; // //; // Interrupting a Running Macro //; // //; // You can interrupt a running macro by selecting the Tools menu / //; // Interrupt; by clicking on the corresponding toolbar button, or by //; // using Shift+F5",MatchSource.CODE_COMMENT,test/RootIDE/TGRootIDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx:4462,Availability,Down,Down,4462,"u / Compile Macro; by clicking on the corresponding //; // toolbar button, or by using Ctrl+F7 accelerator keys. //; // This is identical to the command "".L macro.C++"" in the root prompt //; // command line. //; // //; // Interrupting a Running Macro //; // //; // You can interrupt a running macro by selecting the Tools menu / //; // Interrupt; by clicking on the corresponding toolbar button, or by //; // using Shift+F5 accelerator keys. //; // //; // Interface to CINT Interpreter //; // //; // Any command entered in the Command combo box will be passed to //; // the CINT interpreter. This combo box will keep the commands history //; // and will allow you to re-execute the same commands during an editor //; // session. //; // //; // Keyboard Bindings //; // //; // The following table lists the keyboard shortcuts and accelerator //; // keys. //; // //; // Key: Action: //; // ==== ======= //; // //; // Up Move cursor up. //; // Shift+Up Move cursor up and extend selection. //; // Down Move cursor down. //; // Shift+Down Move cursor down and extend selection. //; // Left Move cursor left. //; // Shift+Left Move cursor left and extend selection. //; // Right Move cursor right. //; // Shift+Right Move cursor right and extend selection. //; // Home Move cursor to begin of line. //; // Shift+Home Move cursor to begin of line and extend selection.//; // Ctrl+Home Move cursor to top of page. //; // End Move cursor to end of line. //; // Shift+End Move cursor to end of line and extend selection. //; // Ctrl+End Move cursor to end of page. //; // PgUp Move cursor up one page. //; // Shift+PgUp Move cursor up one page and extend selection. //; // PgDn Move cursor down one page. //; // Shift+PgDn Move cursor down one page and extend selection. //; // Delete Delete character after cursor, or text selection. //; // BackSpace Delete character before cursor, or text selection.//; // Ctrl+B Move cursor left. //; // Ctrl+D Delete character after cursor, or text selection. //; // Ctrl+",MatchSource.CODE_COMMENT,test/RootIDE/TGRootIDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx:4479,Availability,down,down,4479,"u / Compile Macro; by clicking on the corresponding //; // toolbar button, or by using Ctrl+F7 accelerator keys. //; // This is identical to the command "".L macro.C++"" in the root prompt //; // command line. //; // //; // Interrupting a Running Macro //; // //; // You can interrupt a running macro by selecting the Tools menu / //; // Interrupt; by clicking on the corresponding toolbar button, or by //; // using Shift+F5 accelerator keys. //; // //; // Interface to CINT Interpreter //; // //; // Any command entered in the Command combo box will be passed to //; // the CINT interpreter. This combo box will keep the commands history //; // and will allow you to re-execute the same commands during an editor //; // session. //; // //; // Keyboard Bindings //; // //; // The following table lists the keyboard shortcuts and accelerator //; // keys. //; // //; // Key: Action: //; // ==== ======= //; // //; // Up Move cursor up. //; // Shift+Up Move cursor up and extend selection. //; // Down Move cursor down. //; // Shift+Down Move cursor down and extend selection. //; // Left Move cursor left. //; // Shift+Left Move cursor left and extend selection. //; // Right Move cursor right. //; // Shift+Right Move cursor right and extend selection. //; // Home Move cursor to begin of line. //; // Shift+Home Move cursor to begin of line and extend selection.//; // Ctrl+Home Move cursor to top of page. //; // End Move cursor to end of line. //; // Shift+End Move cursor to end of line and extend selection. //; // Ctrl+End Move cursor to end of page. //; // PgUp Move cursor up one page. //; // Shift+PgUp Move cursor up one page and extend selection. //; // PgDn Move cursor down one page. //; // Shift+PgDn Move cursor down one page and extend selection. //; // Delete Delete character after cursor, or text selection. //; // BackSpace Delete character before cursor, or text selection.//; // Ctrl+B Move cursor left. //; // Ctrl+D Delete character after cursor, or text selection. //; // Ctrl+",MatchSource.CODE_COMMENT,test/RootIDE/TGRootIDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx:4498,Availability,Down,Down,4498,"sponding //; // toolbar button, or by using Ctrl+F7 accelerator keys. //; // This is identical to the command "".L macro.C++"" in the root prompt //; // command line. //; // //; // Interrupting a Running Macro //; // //; // You can interrupt a running macro by selecting the Tools menu / //; // Interrupt; by clicking on the corresponding toolbar button, or by //; // using Shift+F5 accelerator keys. //; // //; // Interface to CINT Interpreter //; // //; // Any command entered in the Command combo box will be passed to //; // the CINT interpreter. This combo box will keep the commands history //; // and will allow you to re-execute the same commands during an editor //; // session. //; // //; // Keyboard Bindings //; // //; // The following table lists the keyboard shortcuts and accelerator //; // keys. //; // //; // Key: Action: //; // ==== ======= //; // //; // Up Move cursor up. //; // Shift+Up Move cursor up and extend selection. //; // Down Move cursor down. //; // Shift+Down Move cursor down and extend selection. //; // Left Move cursor left. //; // Shift+Left Move cursor left and extend selection. //; // Right Move cursor right. //; // Shift+Right Move cursor right and extend selection. //; // Home Move cursor to begin of line. //; // Shift+Home Move cursor to begin of line and extend selection.//; // Ctrl+Home Move cursor to top of page. //; // End Move cursor to end of line. //; // Shift+End Move cursor to end of line and extend selection. //; // Ctrl+End Move cursor to end of page. //; // PgUp Move cursor up one page. //; // Shift+PgUp Move cursor up one page and extend selection. //; // PgDn Move cursor down one page. //; // Shift+PgDn Move cursor down one page and extend selection. //; // Delete Delete character after cursor, or text selection. //; // BackSpace Delete character before cursor, or text selection.//; // Ctrl+B Move cursor left. //; // Ctrl+D Delete character after cursor, or text selection. //; // Ctrl+E Move cursor to end of line. //; // Ctrl+H ",MatchSource.CODE_COMMENT,test/RootIDE/TGRootIDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx:4515,Availability,down,down,4515,"sponding //; // toolbar button, or by using Ctrl+F7 accelerator keys. //; // This is identical to the command "".L macro.C++"" in the root prompt //; // command line. //; // //; // Interrupting a Running Macro //; // //; // You can interrupt a running macro by selecting the Tools menu / //; // Interrupt; by clicking on the corresponding toolbar button, or by //; // using Shift+F5 accelerator keys. //; // //; // Interface to CINT Interpreter //; // //; // Any command entered in the Command combo box will be passed to //; // the CINT interpreter. This combo box will keep the commands history //; // and will allow you to re-execute the same commands during an editor //; // session. //; // //; // Keyboard Bindings //; // //; // The following table lists the keyboard shortcuts and accelerator //; // keys. //; // //; // Key: Action: //; // ==== ======= //; // //; // Up Move cursor up. //; // Shift+Up Move cursor up and extend selection. //; // Down Move cursor down. //; // Shift+Down Move cursor down and extend selection. //; // Left Move cursor left. //; // Shift+Left Move cursor left and extend selection. //; // Right Move cursor right. //; // Shift+Right Move cursor right and extend selection. //; // Home Move cursor to begin of line. //; // Shift+Home Move cursor to begin of line and extend selection.//; // Ctrl+Home Move cursor to top of page. //; // End Move cursor to end of line. //; // Shift+End Move cursor to end of line and extend selection. //; // Ctrl+End Move cursor to end of page. //; // PgUp Move cursor up one page. //; // Shift+PgUp Move cursor up one page and extend selection. //; // PgDn Move cursor down one page. //; // Shift+PgDn Move cursor down one page and extend selection. //; // Delete Delete character after cursor, or text selection. //; // BackSpace Delete character before cursor, or text selection.//; // Ctrl+B Move cursor left. //; // Ctrl+D Delete character after cursor, or text selection. //; // Ctrl+E Move cursor to end of line. //; // Ctrl+H ",MatchSource.CODE_COMMENT,test/RootIDE/TGRootIDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx:5149,Availability,down,down,5149,"rresponding toolbar button, or by //; // using Shift+F5 accelerator keys. //; // //; // Interface to CINT Interpreter //; // //; // Any command entered in the Command combo box will be passed to //; // the CINT interpreter. This combo box will keep the commands history //; // and will allow you to re-execute the same commands during an editor //; // session. //; // //; // Keyboard Bindings //; // //; // The following table lists the keyboard shortcuts and accelerator //; // keys. //; // //; // Key: Action: //; // ==== ======= //; // //; // Up Move cursor up. //; // Shift+Up Move cursor up and extend selection. //; // Down Move cursor down. //; // Shift+Down Move cursor down and extend selection. //; // Left Move cursor left. //; // Shift+Left Move cursor left and extend selection. //; // Right Move cursor right. //; // Shift+Right Move cursor right and extend selection. //; // Home Move cursor to begin of line. //; // Shift+Home Move cursor to begin of line and extend selection.//; // Ctrl+Home Move cursor to top of page. //; // End Move cursor to end of line. //; // Shift+End Move cursor to end of line and extend selection. //; // Ctrl+End Move cursor to end of page. //; // PgUp Move cursor up one page. //; // Shift+PgUp Move cursor up one page and extend selection. //; // PgDn Move cursor down one page. //; // Shift+PgDn Move cursor down one page and extend selection. //; // Delete Delete character after cursor, or text selection. //; // BackSpace Delete character before cursor, or text selection.//; // Ctrl+B Move cursor left. //; // Ctrl+D Delete character after cursor, or text selection. //; // Ctrl+E Move cursor to end of line. //; // Ctrl+H Delete character before cursor, or text selection.//; // Ctrl+K Delete characters from current position to the //; // end of line. //; // Ctrl+U Delete current line. //; // //; //Begin_Html; /*; <img src=""gif/TGRootIDE.gif"">; */; //End_Html; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/RootIDE/TGRootIDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx:5194,Availability,down,down,5194,"rresponding toolbar button, or by //; // using Shift+F5 accelerator keys. //; // //; // Interface to CINT Interpreter //; // //; // Any command entered in the Command combo box will be passed to //; // the CINT interpreter. This combo box will keep the commands history //; // and will allow you to re-execute the same commands during an editor //; // session. //; // //; // Keyboard Bindings //; // //; // The following table lists the keyboard shortcuts and accelerator //; // keys. //; // //; // Key: Action: //; // ==== ======= //; // //; // Up Move cursor up. //; // Shift+Up Move cursor up and extend selection. //; // Down Move cursor down. //; // Shift+Down Move cursor down and extend selection. //; // Left Move cursor left. //; // Shift+Left Move cursor left and extend selection. //; // Right Move cursor right. //; // Shift+Right Move cursor right and extend selection. //; // Home Move cursor to begin of line. //; // Shift+Home Move cursor to begin of line and extend selection.//; // Ctrl+Home Move cursor to top of page. //; // End Move cursor to end of line. //; // Shift+End Move cursor to end of line and extend selection. //; // Ctrl+End Move cursor to end of page. //; // PgUp Move cursor up one page. //; // Shift+PgUp Move cursor up one page and extend selection. //; // PgDn Move cursor down one page. //; // Shift+PgDn Move cursor down one page and extend selection. //; // Delete Delete character after cursor, or text selection. //; // BackSpace Delete character before cursor, or text selection.//; // Ctrl+B Move cursor left. //; // Ctrl+D Delete character after cursor, or text selection. //; // Ctrl+E Move cursor to end of line. //; // Ctrl+H Delete character before cursor, or text selection.//; // Ctrl+K Delete characters from current position to the //; // end of line. //; // Ctrl+U Delete current line. //; // //; //Begin_Html; /*; <img src=""gif/TGRootIDE.gif"">; */; //End_Html; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/RootIDE/TGRootIDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx:3925,Integrability,Interface,Interface,3925,"view //; // area. //; // //; // Executing Macros //; // //; // You can execute the currently loaded macro in the editor by //; // selecting Tools menu / Execute Macro; by clicking on the //; // corresponding toolbar button, or by using Ctrl+F5 accelerator keys. //; // This is identical to the command "".x macro.C"" in the root prompt //; // command line. //; // //; // Compiling Macros //; // //; // The currently loaded macro can be compiled with ACLiC if you select //; // Tools menu / Compile Macro; by clicking on the corresponding //; // toolbar button, or by using Ctrl+F7 accelerator keys. //; // This is identical to the command "".L macro.C++"" in the root prompt //; // command line. //; // //; // Interrupting a Running Macro //; // //; // You can interrupt a running macro by selecting the Tools menu / //; // Interrupt; by clicking on the corresponding toolbar button, or by //; // using Shift+F5 accelerator keys. //; // //; // Interface to CINT Interpreter //; // //; // Any command entered in the Command combo box will be passed to //; // the CINT interpreter. This combo box will keep the commands history //; // and will allow you to re-execute the same commands during an editor //; // session. //; // //; // Keyboard Bindings //; // //; // The following table lists the keyboard shortcuts and accelerator //; // keys. //; // //; // Key: Action: //; // ==== ======= //; // //; // Up Move cursor up. //; // Shift+Up Move cursor up and extend selection. //; // Down Move cursor down. //; // Shift+Down Move cursor down and extend selection. //; // Left Move cursor left. //; // Shift+Left Move cursor left and extend selection. //; // Right Move cursor right. //; // Shift+Right Move cursor right and extend selection. //; // Home Move cursor to begin of line. //; // Shift+Home Move cursor to begin of line and extend selection.//; // Ctrl+Home Move cursor to top of page. //; // End Move cursor to end of line. //; // Shift+End Move cursor to end of line and extend selection. //; /",MatchSource.CODE_COMMENT,test/RootIDE/TGRootIDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx:4437,Modifiability,extend,extend,4437," with ACLiC if you select //; // Tools menu / Compile Macro; by clicking on the corresponding //; // toolbar button, or by using Ctrl+F7 accelerator keys. //; // This is identical to the command "".L macro.C++"" in the root prompt //; // command line. //; // //; // Interrupting a Running Macro //; // //; // You can interrupt a running macro by selecting the Tools menu / //; // Interrupt; by clicking on the corresponding toolbar button, or by //; // using Shift+F5 accelerator keys. //; // //; // Interface to CINT Interpreter //; // //; // Any command entered in the Command combo box will be passed to //; // the CINT interpreter. This combo box will keep the commands history //; // and will allow you to re-execute the same commands during an editor //; // session. //; // //; // Keyboard Bindings //; // //; // The following table lists the keyboard shortcuts and accelerator //; // keys. //; // //; // Key: Action: //; // ==== ======= //; // //; // Up Move cursor up. //; // Shift+Up Move cursor up and extend selection. //; // Down Move cursor down. //; // Shift+Down Move cursor down and extend selection. //; // Left Move cursor left. //; // Shift+Left Move cursor left and extend selection. //; // Right Move cursor right. //; // Shift+Right Move cursor right and extend selection. //; // Home Move cursor to begin of line. //; // Shift+Home Move cursor to begin of line and extend selection.//; // Ctrl+Home Move cursor to top of page. //; // End Move cursor to end of line. //; // Shift+End Move cursor to end of line and extend selection. //; // Ctrl+End Move cursor to end of page. //; // PgUp Move cursor up one page. //; // Shift+PgUp Move cursor up one page and extend selection. //; // PgDn Move cursor down one page. //; // Shift+PgDn Move cursor down one page and extend selection. //; // Delete Delete character after cursor, or text selection. //; // BackSpace Delete character before cursor, or text selection.//; // Ctrl+B Move cursor left. //; // Ctrl+D Delete character afte",MatchSource.CODE_COMMENT,test/RootIDE/TGRootIDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx:4524,Modifiability,extend,extend,4524,"sponding //; // toolbar button, or by using Ctrl+F7 accelerator keys. //; // This is identical to the command "".L macro.C++"" in the root prompt //; // command line. //; // //; // Interrupting a Running Macro //; // //; // You can interrupt a running macro by selecting the Tools menu / //; // Interrupt; by clicking on the corresponding toolbar button, or by //; // using Shift+F5 accelerator keys. //; // //; // Interface to CINT Interpreter //; // //; // Any command entered in the Command combo box will be passed to //; // the CINT interpreter. This combo box will keep the commands history //; // and will allow you to re-execute the same commands during an editor //; // session. //; // //; // Keyboard Bindings //; // //; // The following table lists the keyboard shortcuts and accelerator //; // keys. //; // //; // Key: Action: //; // ==== ======= //; // //; // Up Move cursor up. //; // Shift+Up Move cursor up and extend selection. //; // Down Move cursor down. //; // Shift+Down Move cursor down and extend selection. //; // Left Move cursor left. //; // Shift+Left Move cursor left and extend selection. //; // Right Move cursor right. //; // Shift+Right Move cursor right and extend selection. //; // Home Move cursor to begin of line. //; // Shift+Home Move cursor to begin of line and extend selection.//; // Ctrl+Home Move cursor to top of page. //; // End Move cursor to end of line. //; // Shift+End Move cursor to end of line and extend selection. //; // Ctrl+End Move cursor to end of page. //; // PgUp Move cursor up one page. //; // Shift+PgUp Move cursor up one page and extend selection. //; // PgDn Move cursor down one page. //; // Shift+PgDn Move cursor down one page and extend selection. //; // Delete Delete character after cursor, or text selection. //; // BackSpace Delete character before cursor, or text selection.//; // Ctrl+B Move cursor left. //; // Ctrl+D Delete character after cursor, or text selection. //; // Ctrl+E Move cursor to end of line. //; // Ctrl+H ",MatchSource.CODE_COMMENT,test/RootIDE/TGRootIDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx:4611,Modifiability,extend,extend,4611,"entical to the command "".L macro.C++"" in the root prompt //; // command line. //; // //; // Interrupting a Running Macro //; // //; // You can interrupt a running macro by selecting the Tools menu / //; // Interrupt; by clicking on the corresponding toolbar button, or by //; // using Shift+F5 accelerator keys. //; // //; // Interface to CINT Interpreter //; // //; // Any command entered in the Command combo box will be passed to //; // the CINT interpreter. This combo box will keep the commands history //; // and will allow you to re-execute the same commands during an editor //; // session. //; // //; // Keyboard Bindings //; // //; // The following table lists the keyboard shortcuts and accelerator //; // keys. //; // //; // Key: Action: //; // ==== ======= //; // //; // Up Move cursor up. //; // Shift+Up Move cursor up and extend selection. //; // Down Move cursor down. //; // Shift+Down Move cursor down and extend selection. //; // Left Move cursor left. //; // Shift+Left Move cursor left and extend selection. //; // Right Move cursor right. //; // Shift+Right Move cursor right and extend selection. //; // Home Move cursor to begin of line. //; // Shift+Home Move cursor to begin of line and extend selection.//; // Ctrl+Home Move cursor to top of page. //; // End Move cursor to end of line. //; // Shift+End Move cursor to end of line and extend selection. //; // Ctrl+End Move cursor to end of page. //; // PgUp Move cursor up one page. //; // Shift+PgUp Move cursor up one page and extend selection. //; // PgDn Move cursor down one page. //; // Shift+PgDn Move cursor down one page and extend selection. //; // Delete Delete character after cursor, or text selection. //; // BackSpace Delete character before cursor, or text selection.//; // Ctrl+B Move cursor left. //; // Ctrl+D Delete character after cursor, or text selection. //; // Ctrl+E Move cursor to end of line. //; // Ctrl+H Delete character before cursor, or text selection.//; // Ctrl+K Delete characters from ",MatchSource.CODE_COMMENT,test/RootIDE/TGRootIDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx:4702,Modifiability,extend,extend,4702,"/ Interrupting a Running Macro //; // //; // You can interrupt a running macro by selecting the Tools menu / //; // Interrupt; by clicking on the corresponding toolbar button, or by //; // using Shift+F5 accelerator keys. //; // //; // Interface to CINT Interpreter //; // //; // Any command entered in the Command combo box will be passed to //; // the CINT interpreter. This combo box will keep the commands history //; // and will allow you to re-execute the same commands during an editor //; // session. //; // //; // Keyboard Bindings //; // //; // The following table lists the keyboard shortcuts and accelerator //; // keys. //; // //; // Key: Action: //; // ==== ======= //; // //; // Up Move cursor up. //; // Shift+Up Move cursor up and extend selection. //; // Down Move cursor down. //; // Shift+Down Move cursor down and extend selection. //; // Left Move cursor left. //; // Shift+Left Move cursor left and extend selection. //; // Right Move cursor right. //; // Shift+Right Move cursor right and extend selection. //; // Home Move cursor to begin of line. //; // Shift+Home Move cursor to begin of line and extend selection.//; // Ctrl+Home Move cursor to top of page. //; // End Move cursor to end of line. //; // Shift+End Move cursor to end of line and extend selection. //; // Ctrl+End Move cursor to end of page. //; // PgUp Move cursor up one page. //; // Shift+PgUp Move cursor up one page and extend selection. //; // PgDn Move cursor down one page. //; // Shift+PgDn Move cursor down one page and extend selection. //; // Delete Delete character after cursor, or text selection. //; // BackSpace Delete character before cursor, or text selection.//; // Ctrl+B Move cursor left. //; // Ctrl+D Delete character after cursor, or text selection. //; // Ctrl+E Move cursor to end of line. //; // Ctrl+H Delete character before cursor, or text selection.//; // Ctrl+K Delete characters from current position to the //; // end of line. //; // Ctrl+U Delete current line. //; // //; ",MatchSource.CODE_COMMENT,test/RootIDE/TGRootIDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx:4813,Modifiability,extend,extend,4813," / //; // Interrupt; by clicking on the corresponding toolbar button, or by //; // using Shift+F5 accelerator keys. //; // //; // Interface to CINT Interpreter //; // //; // Any command entered in the Command combo box will be passed to //; // the CINT interpreter. This combo box will keep the commands history //; // and will allow you to re-execute the same commands during an editor //; // session. //; // //; // Keyboard Bindings //; // //; // The following table lists the keyboard shortcuts and accelerator //; // keys. //; // //; // Key: Action: //; // ==== ======= //; // //; // Up Move cursor up. //; // Shift+Up Move cursor up and extend selection. //; // Down Move cursor down. //; // Shift+Down Move cursor down and extend selection. //; // Left Move cursor left. //; // Shift+Left Move cursor left and extend selection. //; // Right Move cursor right. //; // Shift+Right Move cursor right and extend selection. //; // Home Move cursor to begin of line. //; // Shift+Home Move cursor to begin of line and extend selection.//; // Ctrl+Home Move cursor to top of page. //; // End Move cursor to end of line. //; // Shift+End Move cursor to end of line and extend selection. //; // Ctrl+End Move cursor to end of page. //; // PgUp Move cursor up one page. //; // Shift+PgUp Move cursor up one page and extend selection. //; // PgDn Move cursor down one page. //; // Shift+PgDn Move cursor down one page and extend selection. //; // Delete Delete character after cursor, or text selection. //; // BackSpace Delete character before cursor, or text selection.//; // Ctrl+B Move cursor left. //; // Ctrl+D Delete character after cursor, or text selection. //; // Ctrl+E Move cursor to end of line. //; // Ctrl+H Delete character before cursor, or text selection.//; // Ctrl+K Delete characters from current position to the //; // end of line. //; // Ctrl+U Delete current line. //; // //; //Begin_Html; /*; <img src=""gif/TGRootIDE.gif"">; */; //End_Html; // //; //////////////////////////////////",MatchSource.CODE_COMMENT,test/RootIDE/TGRootIDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx:4962,Modifiability,extend,extend,4962,"rresponding toolbar button, or by //; // using Shift+F5 accelerator keys. //; // //; // Interface to CINT Interpreter //; // //; // Any command entered in the Command combo box will be passed to //; // the CINT interpreter. This combo box will keep the commands history //; // and will allow you to re-execute the same commands during an editor //; // session. //; // //; // Keyboard Bindings //; // //; // The following table lists the keyboard shortcuts and accelerator //; // keys. //; // //; // Key: Action: //; // ==== ======= //; // //; // Up Move cursor up. //; // Shift+Up Move cursor up and extend selection. //; // Down Move cursor down. //; // Shift+Down Move cursor down and extend selection. //; // Left Move cursor left. //; // Shift+Left Move cursor left and extend selection. //; // Right Move cursor right. //; // Shift+Right Move cursor right and extend selection. //; // Home Move cursor to begin of line. //; // Shift+Home Move cursor to begin of line and extend selection.//; // Ctrl+Home Move cursor to top of page. //; // End Move cursor to end of line. //; // Shift+End Move cursor to end of line and extend selection. //; // Ctrl+End Move cursor to end of page. //; // PgUp Move cursor up one page. //; // Shift+PgUp Move cursor up one page and extend selection. //; // PgDn Move cursor down one page. //; // Shift+PgDn Move cursor down one page and extend selection. //; // Delete Delete character after cursor, or text selection. //; // BackSpace Delete character before cursor, or text selection.//; // Ctrl+B Move cursor left. //; // Ctrl+D Delete character after cursor, or text selection. //; // Ctrl+E Move cursor to end of line. //; // Ctrl+H Delete character before cursor, or text selection.//; // Ctrl+K Delete characters from current position to the //; // end of line. //; // Ctrl+U Delete current line. //; // //; //Begin_Html; /*; <img src=""gif/TGRootIDE.gif"">; */; //End_Html; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/RootIDE/TGRootIDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx:5107,Modifiability,extend,extend,5107,"rresponding toolbar button, or by //; // using Shift+F5 accelerator keys. //; // //; // Interface to CINT Interpreter //; // //; // Any command entered in the Command combo box will be passed to //; // the CINT interpreter. This combo box will keep the commands history //; // and will allow you to re-execute the same commands during an editor //; // session. //; // //; // Keyboard Bindings //; // //; // The following table lists the keyboard shortcuts and accelerator //; // keys. //; // //; // Key: Action: //; // ==== ======= //; // //; // Up Move cursor up. //; // Shift+Up Move cursor up and extend selection. //; // Down Move cursor down. //; // Shift+Down Move cursor down and extend selection. //; // Left Move cursor left. //; // Shift+Left Move cursor left and extend selection. //; // Right Move cursor right. //; // Shift+Right Move cursor right and extend selection. //; // Home Move cursor to begin of line. //; // Shift+Home Move cursor to begin of line and extend selection.//; // Ctrl+Home Move cursor to top of page. //; // End Move cursor to end of line. //; // Shift+End Move cursor to end of line and extend selection. //; // Ctrl+End Move cursor to end of page. //; // PgUp Move cursor up one page. //; // Shift+PgUp Move cursor up one page and extend selection. //; // PgDn Move cursor down one page. //; // Shift+PgDn Move cursor down one page and extend selection. //; // Delete Delete character after cursor, or text selection. //; // BackSpace Delete character before cursor, or text selection.//; // Ctrl+B Move cursor left. //; // Ctrl+D Delete character after cursor, or text selection. //; // Ctrl+E Move cursor to end of line. //; // Ctrl+H Delete character before cursor, or text selection.//; // Ctrl+K Delete characters from current position to the //; // end of line. //; // Ctrl+U Delete current line. //; // //; //Begin_Html; /*; <img src=""gif/TGRootIDE.gif"">; */; //End_Html; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/RootIDE/TGRootIDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx:5212,Modifiability,extend,extend,5212,"rresponding toolbar button, or by //; // using Shift+F5 accelerator keys. //; // //; // Interface to CINT Interpreter //; // //; // Any command entered in the Command combo box will be passed to //; // the CINT interpreter. This combo box will keep the commands history //; // and will allow you to re-execute the same commands during an editor //; // session. //; // //; // Keyboard Bindings //; // //; // The following table lists the keyboard shortcuts and accelerator //; // keys. //; // //; // Key: Action: //; // ==== ======= //; // //; // Up Move cursor up. //; // Shift+Up Move cursor up and extend selection. //; // Down Move cursor down. //; // Shift+Down Move cursor down and extend selection. //; // Left Move cursor left. //; // Shift+Left Move cursor left and extend selection. //; // Right Move cursor right. //; // Shift+Right Move cursor right and extend selection. //; // Home Move cursor to begin of line. //; // Shift+Home Move cursor to begin of line and extend selection.//; // Ctrl+Home Move cursor to top of page. //; // End Move cursor to end of line. //; // Shift+End Move cursor to end of line and extend selection. //; // Ctrl+End Move cursor to end of page. //; // PgUp Move cursor up one page. //; // Shift+PgUp Move cursor up one page and extend selection. //; // PgDn Move cursor down one page. //; // Shift+PgDn Move cursor down one page and extend selection. //; // Delete Delete character after cursor, or text selection. //; // BackSpace Delete character before cursor, or text selection.//; // Ctrl+B Move cursor left. //; // Ctrl+D Delete character after cursor, or text selection. //; // Ctrl+E Move cursor to end of line. //; // Ctrl+H Delete character before cursor, or text selection.//; // Ctrl+K Delete characters from current position to the //; // end of line. //; // Ctrl+U Delete current line. //; // //; //Begin_Html; /*; <img src=""gif/TGRootIDE.gif"">; */; //End_Html; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/RootIDE/TGRootIDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx:3078,Performance,load,loaded,3078,"e text line - triple-click on it; //; // to select all do quadruple-click. //; // //; // Cut, Copy, Paste //; // //; // After selecting some text, you can cut or copy it to the clipboard. //; // A subsequent paste operation will insert the contents of the //; // clipboard at the current cursor location. //; // //; // Text Search //; // //; // The editor uses a standard Search dialog. You can specify a forward //; // or backward search direction starting from the current cursor //; // location according to the selection made of a case sensitive mode //; // or not. The last search can be repeated by pressing F3. //; // //; // Text Font //; // //; // You can change the text font by selecting Edit menu / Set Font. //; // The Font Dialog pops up and shows the Name, Style, and Size of any //; // available font. The selected font sample is shown in the preview //; // area. //; // //; // Executing Macros //; // //; // You can execute the currently loaded macro in the editor by //; // selecting Tools menu / Execute Macro; by clicking on the //; // corresponding toolbar button, or by using Ctrl+F5 accelerator keys. //; // This is identical to the command "".x macro.C"" in the root prompt //; // command line. //; // //; // Compiling Macros //; // //; // The currently loaded macro can be compiled with ACLiC if you select //; // Tools menu / Compile Macro; by clicking on the corresponding //; // toolbar button, or by using Ctrl+F7 accelerator keys. //; // This is identical to the command "".L macro.C++"" in the root prompt //; // command line. //; // //; // Interrupting a Running Macro //; // //; // You can interrupt a running macro by selecting the Tools menu / //; // Interrupt; by clicking on the corresponding toolbar button, or by //; // using Shift+F5 accelerator keys. //; // //; // Interface to CINT Interpreter //; // //; // Any command entered in the Command combo box will be passed to //; // the CINT interpreter. This combo box will keep the commands history //; // and will a",MatchSource.CODE_COMMENT,test/RootIDE/TGRootIDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx:3399,Performance,load,loaded,3399,"/ //; // The editor uses a standard Search dialog. You can specify a forward //; // or backward search direction starting from the current cursor //; // location according to the selection made of a case sensitive mode //; // or not. The last search can be repeated by pressing F3. //; // //; // Text Font //; // //; // You can change the text font by selecting Edit menu / Set Font. //; // The Font Dialog pops up and shows the Name, Style, and Size of any //; // available font. The selected font sample is shown in the preview //; // area. //; // //; // Executing Macros //; // //; // You can execute the currently loaded macro in the editor by //; // selecting Tools menu / Execute Macro; by clicking on the //; // corresponding toolbar button, or by using Ctrl+F5 accelerator keys. //; // This is identical to the command "".x macro.C"" in the root prompt //; // command line. //; // //; // Compiling Macros //; // //; // The currently loaded macro can be compiled with ACLiC if you select //; // Tools menu / Compile Macro; by clicking on the corresponding //; // toolbar button, or by using Ctrl+F7 accelerator keys. //; // This is identical to the command "".L macro.C++"" in the root prompt //; // command line. //; // //; // Interrupting a Running Macro //; // //; // You can interrupt a running macro by selecting the Tools menu / //; // Interrupt; by clicking on the corresponding toolbar button, or by //; // using Shift+F5 accelerator keys. //; // //; // Interface to CINT Interpreter //; // //; // Any command entered in the Command combo box will be passed to //; // the CINT interpreter. This combo box will keep the commands history //; // and will allow you to re-execute the same commands during an editor //; // session. //; // //; // Keyboard Bindings //; // //; // The following table lists the keyboard shortcuts and accelerator //; // keys. //; // //; // Key: Action: //; // ==== ======= //; // //; // Up Move cursor up. //; // Shift+Up Move cursor up and extend selection. //; /",MatchSource.CODE_COMMENT,test/RootIDE/TGRootIDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx:12,Testability,test,test,12,"// @(#)root/test/RootIDE/:$Id$; // Author: Bertrand Bellenot 20/04/2007; /*************************************************************************; * Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // TGRootIDE //; // //; // A simple IDE editor that uses the TGTextEdit widget. //; // It provides all functionalities of TGTextEdit as copy, paste, cut, //; // search, go to a given line number. In addition, it provides the //; // possibilities for compiling, executing or interrupting a running //; // macro. //; // //; // This class can be used in following ways: //; // - with file name as argument: //; // new TGRootIDE(""hsimple.C""); //; // - with a TMacro* as argument: //; // TMacro *macro = new TMacro(""hsimple.C""); //; // new TGRootIDE(macro); //; // //; // Basic Features: //; // //; // New Document //; // //; // To create a new blank document, select File menu / New, or click //; // the New toolbar button. It will create a new instance of //; // TGRootIDE. //; // //; // Open/Save File //; // //; // To open a file, select File menu / Open or click on the Open //; // toolbar button. This will bring up the standard File Dialog for //; // opening files. //; // If the current document has not been saved yet, you will be asked //; // either to save or abandon the changes. //; // To save the file using the same name, select File menu / Save or //; // the toolbar Save button. To change the file name use File menu / //; // Save As... or corresponding SaveAs button on the toolbar. //; // //; // Text Selection //; // //; // You can move the cursor by simply clicking on the desired location //; // with the left mouse button. To highlight some text, press the mouse //; //",MatchSource.CODE_COMMENT,test/RootIDE/TGRootIDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx:543,Usability,simpl,simple,543,"// @(#)root/test/RootIDE/:$Id$; // Author: Bertrand Bellenot 20/04/2007; /*************************************************************************; * Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // TGRootIDE //; // //; // A simple IDE editor that uses the TGTextEdit widget. //; // It provides all functionalities of TGTextEdit as copy, paste, cut, //; // search, go to a given line number. In addition, it provides the //; // possibilities for compiling, executing or interrupting a running //; // macro. //; // //; // This class can be used in following ways: //; // - with file name as argument: //; // new TGRootIDE(""hsimple.C""); //; // - with a TMacro* as argument: //; // TMacro *macro = new TMacro(""hsimple.C""); //; // new TGRootIDE(macro); //; // //; // Basic Features: //; // //; // New Document //; // //; // To create a new blank document, select File menu / New, or click //; // the New toolbar button. It will create a new instance of //; // TGRootIDE. //; // //; // Open/Save File //; // //; // To open a file, select File menu / Open or click on the Open //; // toolbar button. This will bring up the standard File Dialog for //; // opening files. //; // If the current document has not been saved yet, you will be asked //; // either to save or abandon the changes. //; // To save the file using the same name, select File menu / Save or //; // the toolbar Save button. To change the file name use File menu / //; // Save As... or corresponding SaveAs button on the toolbar. //; // //; // Text Selection //; // //; // You can move the cursor by simply clicking on the desired location //; // with the left mouse button. To highlight some text, press the mouse //; //",MatchSource.CODE_COMMENT,test/RootIDE/TGRootIDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx:1880,Usability,simpl,simply,1880,"//; // - with file name as argument: //; // new TGRootIDE(""hsimple.C""); //; // - with a TMacro* as argument: //; // TMacro *macro = new TMacro(""hsimple.C""); //; // new TGRootIDE(macro); //; // //; // Basic Features: //; // //; // New Document //; // //; // To create a new blank document, select File menu / New, or click //; // the New toolbar button. It will create a new instance of //; // TGRootIDE. //; // //; // Open/Save File //; // //; // To open a file, select File menu / Open or click on the Open //; // toolbar button. This will bring up the standard File Dialog for //; // opening files. //; // If the current document has not been saved yet, you will be asked //; // either to save or abandon the changes. //; // To save the file using the same name, select File menu / Save or //; // the toolbar Save button. To change the file name use File menu / //; // Save As... or corresponding SaveAs button on the toolbar. //; // //; // Text Selection //; // //; // You can move the cursor by simply clicking on the desired location //; // with the left mouse button. To highlight some text, press the mouse //; // and drag the mouse while holding the left button pressed. //; // To select a word, double-click on it; //; // to select the text line - triple-click on it; //; // to select all do quadruple-click. //; // //; // Cut, Copy, Paste //; // //; // After selecting some text, you can cut or copy it to the clipboard. //; // A subsequent paste operation will insert the contents of the //; // clipboard at the current cursor location. //; // //; // Text Search //; // //; // The editor uses a standard Search dialog. You can specify a forward //; // or backward search direction starting from the current cursor //; // location according to the selection made of a case sensitive mode //; // or not. The last search can be repeated by pressing F3. //; // //; // Text Font //; // //; // You can change the text font by selecting Edit menu / Set Font. //; // The Font Dialog pops up and sho",MatchSource.CODE_COMMENT,test/RootIDE/TGRootIDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx:86,Performance,Load,Load,86,"////////////////////////////////////////////////////////////////////////////////; /// Load a file into the editor. If fname is 0, a TGFileDialog will popup.",MatchSource.CODE_COMMENT,test/RootIDE/TGRootIDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx:86,Usability,Clear,Clear,86,"////////////////////////////////////////////////////////////////////////////////; /// Clear text edit widget.",MatchSource.CODE_COMMENT,test/RootIDE/TGRootIDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx:25,Availability,avail,available,25,"// check if some text is available in the clipboard",MatchSource.CODE_COMMENT,test/RootIDE/TGRootIDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx:51,Modifiability,variab,variable,51,"// here copy the string from text buffer to return variable",MatchSource.CODE_COMMENT,test/RootIDE/TGRootIDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx:36,Availability,error,error,36,"// something went wrong --> display error",MatchSource.CODE_COMMENT,test/RootIDE/TGRootIDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx:36,Availability,error,error,36,"// something went wrong --> display error",MatchSource.CODE_COMMENT,test/RootIDE/TGRootIDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx:99,Performance,Load,Loading,99,"////////////////////////////////////////////////////////////////////////////////; /// Handle ""Stop Loading"" navigation button.; /// Not active for the time being.",MatchSource.CODE_COMMENT,test/RootIDE/TGRootIDE.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/GButtonFrame.cxx:42,Deployability,update,updated,42,"// switch state; // make sure window gets updated...",MatchSource.CODE_COMMENT,test/RootShower/GButtonFrame.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/GButtonFrame.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/GTitleFrame.cxx:103,Testability,log,logo,103,"////////////////////////////////////////////////////////////////////////////////; /// Change the right logo ( used for animation ).",MatchSource.CODE_COMMENT,test/RootShower/GTitleFrame.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/GTitleFrame.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/GTitleFrame.h:9,Testability,log,logo,9,"// Right logo layout",MatchSource.CODE_COMMENT,test/RootShower/GTitleFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/GTitleFrame.h
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/GTitleFrame.h:8,Testability,log,logo,8,"// Left logo layout",MatchSource.CODE_COMMENT,test/RootShower/GTitleFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/GTitleFrame.h
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/GTitleFrame.h:15,Testability,log,logo,15,"// Right icon (logo)",MatchSource.CODE_COMMENT,test/RootShower/GTitleFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/GTitleFrame.h
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/GTitleFrame.h:15,Testability,log,logo,15,"// Right icon (logo)",MatchSource.CODE_COMMENT,test/RootShower/GTitleFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/GTitleFrame.h
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyDetector.cxx:97,Safety,detect,detector,97,"////////////////////////////////////////////////////////////////////////////////; /// Initialize detector with material and dimensions",MatchSource.CODE_COMMENT,test/RootShower/MyDetector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyDetector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyDetector.cxx:29,Energy Efficiency,Energy,Energy,29,"// in GeV/cm...; // Critical Energy in MeV",MatchSource.CODE_COMMENT,test/RootShower/MyDetector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyDetector.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyDetector.h:443,Safety,detect,detector,443,"// Author: Bertrand Bellenot 22/08/02; /*************************************************************************; * Copyright (C) 1995-2002, Bertrand Bellenot. *; * All rights reserved. *; * *; * For the licensing terms see the LICENSE file. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // MyDetector //; // defines a simple detector class with one geometry, one material //; // and the physical properties of the detector's material //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/RootShower/MyDetector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyDetector.h
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyDetector.h:532,Safety,detect,detector,532,"// Author: Bertrand Bellenot 22/08/02; /*************************************************************************; * Copyright (C) 1995-2002, Bertrand Bellenot. *; * All rights reserved. *; * *; * For the licensing terms see the LICENSE file. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // MyDetector //; // defines a simple detector class with one geometry, one material //; // and the physical properties of the detector's material //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/RootShower/MyDetector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyDetector.h
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyDetector.h:436,Usability,simpl,simple,436,"// Author: Bertrand Bellenot 22/08/02; /*************************************************************************; * Copyright (C) 1995-2002, Bertrand Bellenot. *; * All rights reserved. *; * *; * For the licensing terms see the LICENSE file. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // MyDetector //; // defines a simple detector class with one geometry, one material //; // and the physical properties of the detector's material //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/RootShower/MyDetector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyDetector.h
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyDetector.h:3,Safety,Detect,Detector,3,"// Detector min. boundaries",MatchSource.CODE_COMMENT,test/RootShower/MyDetector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyDetector.h
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyDetector.h:3,Safety,Detect,Detector,3,"// Detector max. boundaries",MatchSource.CODE_COMMENT,test/RootShower/MyDetector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyDetector.h
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyDetector.h:3,Safety,Detect,Detector,3,"// Detector dimensions",MatchSource.CODE_COMMENT,test/RootShower/MyDetector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyDetector.h
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyDetector.h:12,Energy Efficiency,Energy,Energy,12,"// Critical Energy for current material (in MeV)",MatchSource.CODE_COMMENT,test/RootShower/MyDetector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyDetector.h
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyDetector.h:9,Energy Efficiency,Energy,Energy,9,"// Total Energy loss by particles into the detector",MatchSource.CODE_COMMENT,test/RootShower/MyDetector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyDetector.h
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyDetector.h:43,Safety,detect,detector,43,"// Total Energy loss by particles into the detector",MatchSource.CODE_COMMENT,test/RootShower/MyDetector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyDetector.h
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyDetector.h:3,Safety,Detect,Detector,3,"// Detector structure",MatchSource.CODE_COMMENT,test/RootShower/MyDetector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyDetector.h
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:189,Modifiability,variab,variables,189,"////////////////////////////////////////////////////////////////////////////////; /// Create an Event object.; /// When the constructor is invoked for the first time, the; /// class static variables fgParticles and fgTracks is 0 and; /// the TClonesArray fgParticles is created.",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:120,Safety,detect,detector,120,"////////////////////////////////////////////////////////////////////////////////; /// Initialize event ...; /// creates detector and set initial values",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:99,Energy Efficiency,energy,energy,99,"// generate array of energies threshold used; // to give a track color related to the particle; // energy",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:86,Usability,Clear,Clear,86,"////////////////////////////////////////////////////////////////////////////////; /// Clear tracks and particles arrays",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:154,Safety,avoid,avoid,154,"////////////////////////////////////////////////////////////////////////////////; /// Add a new particle to the list of particles for this event.; /// To avoid calling the very time consuming operator new for each track,; /// the standard but not well know C++ operator ""new with placement""; /// is called. If particle[i] is 0, a new MyParticle object will be created; /// otherwise the previous particle[i] will be overwritten.",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:34,Safety,detect,detector,34,"// check if moved too far (out of detector's bouds)",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:149,Availability,alive,alive,149,"// if distance covered is greater than particle's decay length,; // apply pair production and check if particle is dead. If not,; // increment total alive particles by the two created children,; // then set the particle status as dead",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:67,Energy Efficiency,charge,charged,67,"// particle is not a photon or neutrino; // if current particle is charged, apply magnetic field influence",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:34,Safety,detect,detector,34,"// check if moved too far (out of detector's bouds)",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:9,Energy Efficiency,energy,energy,9,"// check energy loss, and if too much energy loss; // ( particle at rest ) set its status as dead",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:38,Energy Efficiency,energy,energy,38,"// check energy loss, and if too much energy loss; // ( particle at rest ) set its status as dead",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:24,Availability,alive,alive,24,"// else increment total alive particles by amount; // of particle's children",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:201,Availability,alive,alive,201,"// if not at end of particle's life time, check if distance; // covered is greater than particle's decay length, apply; // defined decay type and check if particle is dead. If not,; // increment total alive particles by the two created children,; // then set the particle status as dead",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:172,Safety,detect,detector,172,"////////////////////////////////////////////////////////////////////////////////; /// Check if bremsstrahlung is allowed and generate; /// a random decay length related to detector's material; /// radiation length (X0)",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:26,Energy Efficiency,energy,energy,26,"// compute the particle's energy ratio...",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:60,Energy Efficiency,energy,energy,60,"// create first child if fact, electron continues with less energy; // and in a different direction. To that end the electron is added; // to its own list of children, because otherwise it would vanish.",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:23,Energy Efficiency,energy,energy,23,"// Add this particle's energy loss at the total; // energy loss into the detector",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:52,Energy Efficiency,energy,energy,52,"// Add this particle's energy loss at the total; // energy loss into the detector",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:73,Safety,detect,detector,73,"// Add this particle's energy loss at the total; // energy loss into the detector",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:66,Availability,alive,alive,66,"// Mark the particle's status as dead and decrement; // the total alive particles",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:123,Safety,detect,detector,123,"////////////////////////////////////////////////////////////////////////////////; /// Compute de/dx for particle ""id"" into detector material; /// for more infos, please refer to the particle data booklet; /// from which the formulas has been extracted",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:17,Energy Efficiency,energy,energy,17,"// if particle's energy is equal to its mass, it is at rest,; // so set its status as dead",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:11,Energy Efficiency,energy,energy,11,"// Compute energy loss in detector's material; // cf Bethe Bloch formula",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:26,Safety,detect,detector,26,"// Compute energy loss in detector's material; // cf Bethe Bloch formula",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:6,Energy Efficiency,energy,energy,6,"// if energy loss leave less energy to the particle than; // its mass, set its momentum equal to its mass; // (minimum allowed value for momentum)",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:29,Energy Efficiency,energy,energy,29,"// if energy loss leave less energy to the particle than; // its mass, set its momentum equal to its mass; // (minimum allowed value for momentum)",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:21,Energy Efficiency,energy,energy,21,"// else decrease its energy by calculated energy loss",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:42,Energy Efficiency,energy,energy,42,"// else decrease its energy by calculated energy loss",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:18,Energy Efficiency,energy,energy,18,"// Add calculated energy loss at total particle's energy loss",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:50,Energy Efficiency,energy,energy,50,"// Add calculated energy loss at total particle's energy loss",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:96,Availability,avail,available,96,"////////////////////////////////////////////////////////////////////////////////; /// Give next available particle's id.",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:181,Integrability,rout,routine,181,"////////////////////////////////////////////////////////////////////////////////; /// Extrapolate track in a constant field oriented along X axis; /// translated to C++ from GEANT3 routine GHELX3.",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:119,Deployability,update,update,119,"////////////////////////////////////////////////////////////////////////////////; /// Move particle ""id"" by step dist, update the distance covered; /// then check if out of detector's bounds.",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:173,Safety,detect,detector,173,"////////////////////////////////////////////////////////////////////////////////; /// Move particle ""id"" by step dist, update the distance covered; /// then check if out of detector's bounds.",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:173,Safety,detect,detector,173,"////////////////////////////////////////////////////////////////////////////////; /// Check if pair production is allowed and generate; /// a random decay length related to detector's material; /// radiation length (X0).",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:127,Energy Efficiency,energy,energy,127,"////////////////////////////////////////////////////////////////////////////////; /// Return color index related to particle's energy.; ///Int_t ctable[11] = {2,50,46,45,44,43,42,41,21,19,5};",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:117,Safety,detect,detector,117,"////////////////////////////////////////////////////////////////////////////////; /// Compute scatter angle into the detector's material; /// for the current particle; /// for more infos, please refer to the particle data booklet; /// from which the formulas has been extracted :; /// Multiple scattering through small angles.",MatchSource.CODE_COMMENT,test/RootShower/MyEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyParticle.h:30,Availability,ALIVE,ALIVE,30,"// Particle's status (CREATED,ALIVE,DEAD)",MatchSource.CODE_COMMENT,test/RootShower/MyParticle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyParticle.h
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyParticle.h:9,Energy Efficiency,Energy,Energy,9,"// Total Energy loss into the detector",MatchSource.CODE_COMMENT,test/RootShower/MyParticle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyParticle.h
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyParticle.h:30,Safety,detect,detector,30,"// Total Energy loss into the detector",MatchSource.CODE_COMMENT,test/RootShower/MyParticle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyParticle.h
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx:40,Energy Efficiency,energy,energy,40,"// Creation of histogram for particle's energy loss",MatchSource.CODE_COMMENT,test/RootShower/RootShower.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx:96,Integrability,message,message,96,"////////////////////////////////////////////////////////////////////////////////; /// Got close message for this RootShower. The EventDislay and the; /// application will be terminated.",MatchSource.CODE_COMMENT,test/RootShower/RootShower.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx:93,Integrability,message,messages,93,"////////////////////////////////////////////////////////////////////////////////; /// Handle messages send to the RootShower object.",MatchSource.CODE_COMMENT,test/RootShower/RootShower.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx:115,Modifiability,layers,layers,115,"////////////////////////////////////////////////////////////////////////////////; /// Add recursively stations and layers (and cells) in TGListTree.",MatchSource.CODE_COMMENT,test/RootShower/RootShower.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx:35,Availability,down,down,35,"// Update display here to not slow down too much...",MatchSource.CODE_COMMENT,test/RootShower/RootShower.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx:3,Deployability,Update,Update,3,"// Update display here to not slow down too much...",MatchSource.CODE_COMMENT,test/RootShower/RootShower.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx:3,Deployability,Update,Update,3,"// Update display here if fast machine...",MatchSource.CODE_COMMENT,test/RootShower/RootShower.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx:13,Testability,log,logo,13,"// animation logo handling",MatchSource.CODE_COMMENT,test/RootShower/RootShower.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx:13,Energy Efficiency,charge,charged,13,"// Show only charged and massive particles...",MatchSource.CODE_COMMENT,test/RootShower/RootShower.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx:33,Energy Efficiency,energy,energy,33,"// Fill histogram for particle's energy loss",MatchSource.CODE_COMMENT,test/RootShower/RootShower.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx:13,Safety,detect,detector,13,"// take back detector dimensions for selection geometry",MatchSource.CODE_COMMENT,test/RootShower/RootShower.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx:33,Energy Efficiency,energy,energy,33,"// Fill histogram for particle's energy loss",MatchSource.CODE_COMMENT,test/RootShower/RootShower.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx:86,Testability,Log,Logo,86,"////////////////////////////////////////////////////////////////////////////////; /// Logo animation timer handling.",MatchSource.CODE_COMMENT,test/RootShower/RootShower.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.h:26,Modifiability,variab,variables,26,"// RootShower environment variables; // MenuBar Frame",MatchSource.CODE_COMMENT,test/RootShower/RootShower.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.h
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.h:27,Energy Efficiency,energy,energy,27,"// histogram of particle's energy loss",MatchSource.CODE_COMMENT,test/RootShower/RootShower.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.h
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.h:20,Energy Efficiency,energy,energy,20,"// Initial particle energy",MatchSource.CODE_COMMENT,test/RootShower/RootShower.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.h
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RSAbout.cxx:94,Integrability,message,messages,94,"////////////////////////////////////////////////////////////////////////////////; /// Process messages sent to this dialog.",MatchSource.CODE_COMMENT,test/RootShower/RSAbout.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RSAbout.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RSAbout.h:434,Integrability,message,message,434,"// Author: Bertrand Bellenot 22/08/02; /*************************************************************************; * Copyright (C) 1995-2002, Bertrand Bellenot. *; * All rights reserved. *; * *; * For the licensing terms see the LICENSE file. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // Definition of the ""About"" message box for the RootShower application //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/RootShower/RSAbout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RSAbout.h
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RSMsgBox.cxx:94,Integrability,message,messages,94,"////////////////////////////////////////////////////////////////////////////////; /// Process messages sent to this dialog.",MatchSource.CODE_COMMENT,test/RootShower/RSMsgBox.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RSMsgBox.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RSMsgBox.h:431,Integrability,message,message,431,"// Author: Bertrand Bellenot 22/08/02; /*************************************************************************; * Copyright (C) 1995-2002, Bertrand Bellenot. *; * All rights reserved. *; * *; * For the licensing terms see the LICENSE file. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // Definition of a simple message box for the RootShower application //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/RootShower/RSMsgBox.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RSMsgBox.h
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RSMsgBox.h:424,Usability,simpl,simple,424,"// Author: Bertrand Bellenot 22/08/02; /*************************************************************************; * Copyright (C) 1995-2002, Bertrand Bellenot. *; * All rights reserved. *; * *; * For the licensing terms see the LICENSE file. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // Definition of a simple message box for the RootShower application //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/RootShower/RSMsgBox.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RSMsgBox.h
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/SettingsDlg.cxx:98,Availability,avail,available,98,"// definition of structure used to retrieve; // PDG number and particle name into the list; // of available primaries",MatchSource.CODE_COMMENT,test/RootShower/SettingsDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/SettingsDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/SettingsDlg.cxx:106,Security,access,accessing,106,"//_________________________________________________; // SettingsDialog; //; // SettingsDialog is a dialog accessing the RootShowerhower parameters.",MatchSource.CODE_COMMENT,test/RootShower/SettingsDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/SettingsDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/SettingsDlg.cxx:64,Testability,test,testing,64,"//--------- create Tab widget and some composite frames for Tab testing",MatchSource.CODE_COMMENT,test/RootShower/SettingsDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/SettingsDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/SettingsDlg.cxx:12,Integrability,message,message,12,"// make the message box non-resizable",MatchSource.CODE_COMMENT,test/RootShower/SettingsDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/SettingsDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/SettingsDlg.cxx:93,Testability,test,test,93,"////////////////////////////////////////////////////////////////////////////////; /// Delete test dialog widgets.",MatchSource.CODE_COMMENT,test/RootShower/SettingsDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/SettingsDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/SettingsDlg.cxx:94,Integrability,message,messages,94,"////////////////////////////////////////////////////////////////////////////////; /// Process messages coming from widgets associated with the dialog.",MatchSource.CODE_COMMENT,test/RootShower/SettingsDlg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/SettingsDlg.cxx
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/SettingsDlg.h:443,Security,access,access,443,"// Author: Bertrand Bellenot 22/08/02; /*************************************************************************; * Copyright (C) 1995-2002, Bertrand Bellenot. *; * All rights reserved. *; * *; * For the licensing terms see the LICENSE file. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // Definition of a dialog box used to access the main shower parameters //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/RootShower/SettingsDlg.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/SettingsDlg.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyAdaBoost.h:201,Deployability,integrat,integrated,201,"// @(#)root/tmva/pymva $Id$; // Authors: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodPyAdaBoost *; * Web : http://oproject.org *; * *; * Description: *; * scikit-learn package AdaBoostClassifier method based on python *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyAdaBoost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyAdaBoost.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyAdaBoost.h:201,Integrability,integrat,integrated,201,"// @(#)root/tmva/pymva $Id$; // Authors: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodPyAdaBoost *; * Web : http://oproject.org *; * *; * Description: *; * scikit-learn package AdaBoostClassifier method based on python *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyAdaBoost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyAdaBoost.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyAdaBoost.h:366,Usability,learn,learn,366,"// @(#)root/tmva/pymva $Id$; // Authors: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodPyAdaBoost *; * Web : http://oproject.org *; * *; * Description: *; * scikit-learn package AdaBoostClassifier method based on python *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyAdaBoost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyAdaBoost.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyAdaBoost.h:3,Performance,perform,performs,3,"// performs classifier testing",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyAdaBoost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyAdaBoost.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyAdaBoost.h:23,Testability,test,testing,23,"// performs classifier testing",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyAdaBoost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyAdaBoost.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyAdaBoost.h:13,Modifiability,variab,variables,13,"// number of variables",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyAdaBoost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyAdaBoost.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyAdaBoost.h:33,Usability,Learn,Learning,33,"//loat, optional (default=1.); //Learning rate shrinks the contribution of each classifier by; //``learning_rate``. There is a trade-off between ``learning_rate`` and ``n_estimators``.",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyAdaBoost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyAdaBoost.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyAdaBoost.h:338,Availability,error,error,338,"//{'SAMME', 'SAMME.R'}, optional (default='SAMME.R'); //If 'SAMME.R' then use the SAMME.R real boosting algorithm.; //``base_estimator`` must support calculation of class probabilities.; //If 'SAMME' then use the SAMME discrete boosting algorithm.; //The SAMME.R algorithm typically converges faster than SAMME,; //achieving a lower test error with fewer boosting iterations.",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyAdaBoost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyAdaBoost.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyAdaBoost.h:333,Testability,test,test,333,"//{'SAMME', 'SAMME.R'}, optional (default='SAMME.R'); //If 'SAMME.R' then use the SAMME.R real boosting algorithm.; //``base_estimator`` must support calculation of class probabilities.; //If 'SAMME' then use the SAMME discrete boosting algorithm.; //The SAMME.R algorithm typically converges faster than SAMME,; //achieving a lower test error with fewer boosting iterations.",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyAdaBoost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyAdaBoost.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyAdaBoost.h:309,Integrability,message,message,309,"//int, RandomState instance or None, optional (default=None); //If int, random_state is the seed used by the random number generator;; //If RandomState instance, random_state is the random number generator;; //If None, the random number generator is the RandomState instance used by `np.random`.; // get help message text",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyAdaBoost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyAdaBoost.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h:201,Deployability,integrat,integrated,201,"// @(#)root/tmva/pymva $Id$; // Authors: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodPyGTB *; * Web : http://oproject.org *; * *; * Description: *; * scikit-learn Package GradientBoostingClassifier method based on python *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyGTB.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h:201,Integrability,integrat,integrated,201,"// @(#)root/tmva/pymva $Id$; // Authors: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodPyGTB *; * Web : http://oproject.org *; * *; * Description: *; * scikit-learn Package GradientBoostingClassifier method based on python *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyGTB.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h:361,Usability,learn,learn,361,"// @(#)root/tmva/pymva $Id$; // Authors: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodPyGTB *; * Web : http://oproject.org *; * *; * Description: *; * scikit-learn Package GradientBoostingClassifier method based on python *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyGTB.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h:13,Modifiability,variab,variables,13,"// number of variables",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyGTB.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h:247,Availability,recover,recovers,247,"// {'deviance', 'exponential'}, optional (default='deviance'); //loss function to be optimized. 'deviance' refers to; //deviance (= logistic regression) for classification; //with probabilistic outputs. For loss 'exponential' gradient; //boosting recovers the AdaBoost algorithm.",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyGTB.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h:85,Performance,optimiz,optimized,85,"// {'deviance', 'exponential'}, optional (default='deviance'); //loss function to be optimized. 'deviance' refers to; //deviance (= logistic regression) for classification; //with probabilistic outputs. For loss 'exponential' gradient; //boosting recovers the AdaBoost algorithm.",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyGTB.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h:247,Safety,recover,recovers,247,"// {'deviance', 'exponential'}, optional (default='deviance'); //loss function to be optimized. 'deviance' refers to; //deviance (= logistic regression) for classification; //with probabilistic outputs. For loss 'exponential' gradient; //boosting recovers the AdaBoost algorithm.",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyGTB.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h:132,Testability,log,logistic,132,"// {'deviance', 'exponential'}, optional (default='deviance'); //loss function to be optimized. 'deviance' refers to; //deviance (= logistic regression) for classification; //with probabilistic outputs. For loss 'exponential' gradient; //boosting recovers the AdaBoost algorithm.",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyGTB.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h:35,Usability,learn,learning,35,"//float, optional (default=0.1); //learning rate shrinks the contribution of each tree by `learning_rate`.; //There is a trade-off between learning_rate and n_estimators.",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyGTB.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h:105,Usability,learn,learners,105,"//float, optional (default=1.0); //The fraction of samples to be used for fitting the individual base; //learners. If smaller than 1.0 this results in Stochastic Gradient; //Boosting. `subsample` interacts with the parameter `n_estimators`.; //Choosing `subsample < 1.0` leads to a reduction of variance; //and an increase in bias.",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyGTB.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h:211,Integrability,depend,depends,211,"//integer, optional (default=3); //maximum depth of the individual regression estimators. The maximum; //depth limits the number of nodes in the tree. Tune this parameter; //for best performance; the best value depends on the interaction; //of the input variables.; //Ignored if ``max_leaf_nodes`` is not None.",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyGTB.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h:254,Modifiability,variab,variables,254,"//integer, optional (default=3); //maximum depth of the individual regression estimators. The maximum; //depth limits the number of nodes in the tree. Tune this parameter; //for best performance; the best value depends on the interaction; //of the input variables.; //Ignored if ``max_leaf_nodes`` is not None.",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyGTB.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h:151,Performance,Tune,Tune,151,"//integer, optional (default=3); //maximum depth of the individual regression estimators. The maximum; //depth limits the number of nodes in the tree. Tune this parameter; //for best performance; the best value depends on the interaction; //of the input variables.; //Ignored if ``max_leaf_nodes`` is not None.",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyGTB.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h:183,Performance,perform,performance,183,"//integer, optional (default=3); //maximum depth of the individual regression estimators. The maximum; //depth limits the number of nodes in the tree. Tune this parameter; //for best performance; the best value depends on the interaction; //of the input variables.; //Ignored if ``max_leaf_nodes`` is not None.",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyGTB.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h:109,Safety,predict,predictions,109,"//BaseEstimator, None, optional (default=None); //An estimator object that is used to compute the initial; //predictions. ``init`` has to provide ``fit`` and ``predict``.; //If None it uses ``loss.init_estimator``.",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyGTB.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h:160,Safety,predict,predict,160,"//BaseEstimator, None, optional (default=None); //An estimator object that is used to compute the initial; //predictions. ``init`` has to provide ``fit`` and ``predict``.; //If None it uses ``loss.init_estimator``.",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyGTB.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h:205,Integrability,message,message,205,"//bool, optional (default=False); //When set to ``True``, reuse the solution of the previous call to fit; //and add more estimators to the ensemble, otherwise, just fit a whole; //new forest.; // get help message text",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyGTB.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h:165,Deployability,integrat,integrated,165,"// @(#)root/tmva/pymva $Id$; // Author: Stefan Wunsch; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodPyKeras *; * *; * *; * Description: *; * Interface for Keras python package which is a wrapper for the Theano and *; * Tensorflow libraries *; * *; * Authors (alphabetical): *; * Stefan Wunsch <stefan.wunsch@cern.ch> - KIT, Germany *; * *; * Copyright (c) 2016: *; * CERN, Switzerland *; * KIT, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyKeras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h:165,Integrability,integrat,integrated,165,"// @(#)root/tmva/pymva $Id$; // Author: Stefan Wunsch; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodPyKeras *; * *; * *; * Description: *; * Interface for Keras python package which is a wrapper for the Theano and *; * Tensorflow libraries *; * *; * Authors (alphabetical): *; * Stefan Wunsch <stefan.wunsch@cern.ch> - KIT, Germany *; * *; * Copyright (c) 2016: *; * CERN, Switzerland *; * KIT, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyKeras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h:294,Integrability,Interface,Interface,294,"// @(#)root/tmva/pymva $Id$; // Author: Stefan Wunsch; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodPyKeras *; * *; * *; * Description: *; * Interface for Keras python package which is a wrapper for the Theano and *; * Tensorflow libraries *; * *; * Authors (alphabetical): *; * Stefan Wunsch <stefan.wunsch@cern.ch> - KIT, Germany *; * *; * Copyright (c) 2016: *; * CERN, Switzerland *; * KIT, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyKeras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h:340,Integrability,wrap,wrapper,340,"// @(#)root/tmva/pymva $Id$; // Author: Stefan Wunsch; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodPyKeras *; * *; * *; * Description: *; * Interface for Keras python package which is a wrapper for the Theano and *; * Tensorflow libraries *; * *; * Authors (alphabetical): *; * Stefan Wunsch <stefan.wunsch@cern.ch> - KIT, Germany *; * *; * Copyright (c) 2016: *; * CERN, Switzerland *; * KIT, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyKeras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h:3,Performance,Load,Load,3,"// Load weights from previous training",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyKeras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h:36,Security,validat,validation,36,"// Store only weights with smallest validation loss",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyKeras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h:20,Security,validat,validation,20,"// Stop training if validation loss is not decreasing for several epochs",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyKeras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h:11,Usability,learn,learning,11,"// Set new learning rate at specific epochs",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyKeras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h:9,Testability,log,log,9,"// Store log files during training",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyKeras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h:40,Security,validat,validation,40,"// option string defining the number of validation events",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyKeras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h:68,Performance,load,loading,68,"// filename of an optional user script that will be executed before loading the Keras model",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyKeras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h:3,Modifiability,variab,variables,3,"// variables array used for GetMvaValue",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyKeras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h:13,Modifiability,variab,variables,13,"// number of variables",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyKeras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h:21,Modifiability,variab,variables,21,"// setups the needed variables, loads the model",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyKeras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h:32,Performance,load,loads,32,"// setups the needed variables, loads the model",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyKeras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h:3,Performance,optimiz,optimizes,3,"// optimizes model for evaluation",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyKeras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h:17,Security,validat,validation,17,"// get number of validation events according to given option",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyKeras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyRandomForest.h:201,Deployability,integrat,integrated,201,"// @(#)root/tmva/pymva $Id$; // Authors: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodPyRandomForest *; * Web : http://oproject.org *; * *; * Description: *; * scikit-learn Package RandomForestClassifier method based on python *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyRandomForest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyRandomForest.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyRandomForest.h:201,Integrability,integrat,integrated,201,"// @(#)root/tmva/pymva $Id$; // Authors: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodPyRandomForest *; * Web : http://oproject.org *; * *; * Description: *; * scikit-learn Package RandomForestClassifier method based on python *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyRandomForest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyRandomForest.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyRandomForest.h:370,Usability,learn,learn,370,"// @(#)root/tmva/pymva $Id$; // Authors: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodPyRandomForest *; * Web : http://oproject.org *; * *; * Description: *; * scikit-learn Package RandomForestClassifier method based on python *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyRandomForest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyRandomForest.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyRandomForest.h:3,Performance,perform,performs,3,"// performs classifier testing",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyRandomForest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyRandomForest.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyRandomForest.h:23,Testability,test,testing,23,"// performs classifier testing",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyRandomForest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyRandomForest.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyRandomForest.h:13,Modifiability,variab,variables,13,"// number of variables",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyRandomForest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyRandomForest.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyRandomForest.h:70,Availability,error,error,70,"//Whether to use out-of-bag samples to estimate; //the generalization error.",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyRandomForest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyRandomForest.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyRandomForest.h:94,Safety,predict,predict,94,"// integer, optional (default=1); //The number of jobs to run in parallel for both `fit` and `predict`.; //If -1, then the number of jobs is set to the number of cores.",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyRandomForest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyRandomForest.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyRandomForest.h:790,Integrability,message,message,790,"//dict, list of dicts, ""auto"", ""subsample"" or None, optional; //Weights associated with classes in the form ``{class_label: weight}``.; //If not given, all classes are supposed to have weight one. For; //multi-output problems, a list of dicts can be provided in the same; //order as the columns of y.; //The ""auto"" mode uses the values of y to automatically adjust; //weights inversely proportional to class frequencies in the input data.; //The ""subsample"" mode is the same as ""auto"" except that weights are; //computed based on the bootstrap sample for every tree grown.; //For multi-output, the weights of each column of y will be multiplied.; //Note that these weights will be multiplied with sample_weight (passed; //through the fit method) if sample_weight is specified.; // get help message text",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyRandomForest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyRandomForest.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyTorch.h:171,Deployability,integrat,integrated,171,"// @(#)root/tmva/pymva $Id$; // Author: Anirudh Dagar, 2020; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodPyTorch *; * *; * *; * Description: *; * Interface for PyTorch python based scientific package supporting *; * automatic differentiation for machine learning. *; * *; * Authors (alphabetical): *; * Anirudh Dagar <anirudhdagar6@gmail.com> - IIT, Roorkee *; * *; * Copyright (c) 2020: *; * CERN, Switzerland *; * IIT, Roorkee *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyTorch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyTorch.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyTorch.h:171,Integrability,integrat,integrated,171,"// @(#)root/tmva/pymva $Id$; // Author: Anirudh Dagar, 2020; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodPyTorch *; * *; * *; * Description: *; * Interface for PyTorch python based scientific package supporting *; * automatic differentiation for machine learning. *; * *; * Authors (alphabetical): *; * Anirudh Dagar <anirudhdagar6@gmail.com> - IIT, Roorkee *; * *; * Copyright (c) 2020: *; * CERN, Switzerland *; * IIT, Roorkee *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyTorch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyTorch.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyTorch.h:300,Integrability,Interface,Interface,300,"// @(#)root/tmva/pymva $Id$; // Author: Anirudh Dagar, 2020; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodPyTorch *; * *; * *; * Description: *; * Interface for PyTorch python based scientific package supporting *; * automatic differentiation for machine learning. *; * *; * Authors (alphabetical): *; * Anirudh Dagar <anirudhdagar6@gmail.com> - IIT, Roorkee *; * *; * Copyright (c) 2020: *; * CERN, Switzerland *; * IIT, Roorkee *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyTorch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyTorch.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyTorch.h:408,Usability,learn,learning,408,"// @(#)root/tmva/pymva $Id$; // Author: Anirudh Dagar, 2020; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodPyTorch *; * *; * *; * Description: *; * Interface for PyTorch python based scientific package supporting *; * automatic differentiation for machine learning. *; * *; * Authors (alphabetical): *; * Anirudh Dagar <anirudhdagar6@gmail.com> - IIT, Roorkee *; * *; * Copyright (c) 2020: *; * CERN, Switzerland *; * IIT, Roorkee *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyTorch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyTorch.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyTorch.h:3,Performance,Load,Load,3,"// Load weights from previous training",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyTorch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyTorch.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyTorch.h:36,Security,validat,validation,36,"// Store only weights with smallest validation loss",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyTorch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyTorch.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyTorch.h:11,Usability,learn,learning,11,"// Set new learning rate at specific epochs",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyTorch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyTorch.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyTorch.h:40,Security,validat,validation,40,"// option string defining the number of validation events",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyTorch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyTorch.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyTorch.h:60,Performance,load,loading,60,"// filename of the user script that will be executed before loading the PyTorch model",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyTorch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyTorch.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyTorch.h:25,Performance,load,loaded,25,"// flag whether model is loaded, needed for getMvaValue during evaluation",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyTorch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyTorch.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyTorch.h:3,Modifiability,variab,variables,3,"// variables array used for GetMvaValue",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyTorch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyTorch.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyTorch.h:13,Modifiability,variab,variables,13,"// number of variables",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyTorch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyTorch.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyTorch.h:21,Modifiability,variab,variables,21,"// setups the needed variables, loads the model",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyTorch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyTorch.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyTorch.h:32,Performance,load,loads,32,"// setups the needed variables, loads the model",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyTorch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyTorch.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyTorch.h:17,Security,validat,validation,17,"// get number of validation events according to given option",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/MethodPyTorch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyTorch.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/PyMethodBase.h:221,Deployability,integrat,integrated,221,"// @(#)root/tmva/pymva $Id$; // Authors: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer 2015, Stefan Wunsch 2017; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : PyMethodBase *; * Web : http://oproject.org *; * *; * Description: *; * Virtual base class for all MVA method based on Python *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/PyMethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/PyMethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/PyMethodBase.h:221,Integrability,integrat,integrated,221,"// @(#)root/tmva/pymva $Id$; // Authors: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer 2015, Stefan Wunsch 2017; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : PyMethodBase *; * Web : http://oproject.org *; * *; * Description: *; * Virtual base class for all MVA method based on Python *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/PyMethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/PyMethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/PyMethodBase.h:86,Deployability,install,installed,86,"/// Function to find current Python executable; /// used by ROOT; /// If ""Python3"" is installed, return ""python3""",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/PyMethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/PyMethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/PyMethodBase.h:24,Testability,Test,Testing,24,"// constructor used for Testing + Application of the MVA, only (no training),; // using given weight file",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/PyMethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/PyMethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/PyMethodBase.h:13,Performance,load,load,13,"// Module to load",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/PyMethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/PyMethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/PyMethodBase.h:56,Availability,error,error,56,"// runs python code from string in local namespace with error handling",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/PyMethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/PyMethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/PyMethodBase.h:15,Performance,load,load,15,"// Function to load PyObject information from string",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/PyMethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/PyMethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/RModelParser_Keras.h:175,Deployability,integrat,integrated,175,"// @(#)root/tmva/pymva $Id$; // Author: Sanjiban Sengupta, 2021; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * *; * *; * Description: *; * Functionality for parsing a saved Keras .H5 model into RModel object *; * *; * Authors (alphabetical): *; * Sanjiban Sengupta <sanjiban.sg@gmail.com> *; * *; * Copyright (c) 2021: *; * CERN, Switzerland *; * *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/RModelParser_Keras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/RModelParser_Keras.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/RModelParser_Keras.h:175,Integrability,integrat,integrated,175,"// @(#)root/tmva/pymva $Id$; // Author: Sanjiban Sengupta, 2021; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * *; * *; * Description: *; * Functionality for parsing a saved Keras .H5 model into RModel object *; * *; * Authors (alphabetical): *; * Sanjiban Sengupta <sanjiban.sg@gmail.com> *; * *; * Copyright (c) 2021: *; * CERN, Switzerland *; * *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/RModelParser_Keras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/RModelParser_Keras.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/RModelParser_PyTorch.h:175,Deployability,integrat,integrated,175,"// @(#)root/tmva/pymva $Id$; // Author: Sanjiban Sengupta, 2021; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * *; * *; * Description: *; * Functionality for parsing a saved PyTorch .PT model into RModel object *; * *; * Authors (alphabetical): *; * Sanjiban Sengupta <sanjiban.sg@gmail.com> *; * *; * Copyright (c) 2021: *; * CERN, Switzerland *; * *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/RModelParser_PyTorch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/RModelParser_PyTorch.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/RModelParser_PyTorch.h:175,Integrability,integrat,integrated,175,"// @(#)root/tmva/pymva $Id$; // Author: Sanjiban Sengupta, 2021; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * *; * *; * Description: *; * Functionality for parsing a saved PyTorch .PT model into RModel object *; * *; * Authors (alphabetical): *; * Sanjiban Sengupta <sanjiban.sg@gmail.com> *; * *; * Copyright (c) 2021: *; * CERN, Switzerland *; * *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/inc/TMVA/RModelParser_PyTorch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/RModelParser_PyTorch.h
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx:201,Deployability,integrat,integrated,201,"// @(#)root/tmva/pymva $Id$; // Authors: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodPyAdaBoost *; * Web : http://oproject.org *; * *; * Description: *; * AdaBoost Classifier from Scikit learn *; * *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyAdaBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx:201,Integrability,integrat,integrated,201,"// @(#)root/tmva/pymva $Id$; // Authors: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodPyAdaBoost *; * Web : http://oproject.org *; * *; * Description: *; * AdaBoost Classifier from Scikit learn *; * *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyAdaBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx:391,Usability,learn,learn,391,"// @(#)root/tmva/pymva $Id$; // Authors: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodPyAdaBoost *; * Web : http://oproject.org *; * *; * Description: *; * AdaBoost Classifier from Scikit learn *; * *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyAdaBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx:33,Safety,avoid,avoid,33,"// Needs to be included first to avoid redefinition of _POSIX_C_SOURCE",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyAdaBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx:96,Performance,load,load,96,"//_______________________________________________________________________; // Check options and load them to local python namespace",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyAdaBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx:52,Performance,load,load,52,"//require to use numpy arrays; // Check options and load them to local python namespace",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyAdaBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx:3,Performance,Load,Load,3,"// Load training data (data, classes, weights) to python arrays",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyAdaBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx:52,Modifiability,variab,variable,52,"// Fit classifier; // NOTE: We dump the output to a variable so that the call does not pollute stdout",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyAdaBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx:3,Performance,Load,Load,3,"// Load model if not already done",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyAdaBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx:7,Safety,predict,prediction,7,"// Get prediction from classifier",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyAdaBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx:20,Availability,error,error,20,"// cannot determine error",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyAdaBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx:3,Performance,Load,Load,3,"// Load model if not already done",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyAdaBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx:25,Performance,load,load,25,"// Get current event and load to python array",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyAdaBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx:7,Safety,predict,prediction,7,"// Get prediction from classifier",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyAdaBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx:3,Performance,Load,Load,3,"// Load model if not already done",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyAdaBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx:25,Performance,load,load,25,"// Get current event and load to python array",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyAdaBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx:7,Safety,predict,prediction,7,"// Get prediction from classifier",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyAdaBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx:3,Performance,Load,Load,3,"// Load classifier from file",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyAdaBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx:3,Performance,Load,Load,3,"// Load data properties; // NOTE: This has to be repeated here for the reader application",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyAdaBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx:86,Modifiability,variab,variables,86,"// Get feature importance from classifier as an array with length equal; // number of variables, higher value signals a higher importance",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyAdaBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx:72,Modifiability,variab,variable,72,"// The python object is null if the base estimator does not support; // variable ranking. Then, return NULL, which disables ranking.",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyAdaBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx:201,Deployability,integrat,integrated,201,"// @(#)root/tmva/pymva $Id$; // Authors: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodPyGTB *; * Web : http://oproject.org *; * *; * Description: *; * GradientBoostingClassifier Classifiear from Scikit learn *; * *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyGTB.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx:201,Integrability,integrat,integrated,201,"// @(#)root/tmva/pymva $Id$; // Authors: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodPyGTB *; * Web : http://oproject.org *; * *; * Description: *; * GradientBoostingClassifier Classifiear from Scikit learn *; * *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyGTB.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx:405,Usability,learn,learn,405,"// @(#)root/tmva/pymva $Id$; // Authors: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodPyGTB *; * Web : http://oproject.org *; * *; * Description: *; * GradientBoostingClassifier Classifiear from Scikit learn *; * *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyGTB.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx:33,Safety,avoid,avoid,33,"// Needs to be included first to avoid redefinition of _POSIX_C_SOURCE",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyGTB.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx:96,Performance,load,load,96,"//_______________________________________________________________________; // Check options and load them to local python namespace",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyGTB.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx:52,Performance,load,load,52,"//require to use numpy arrays; // Check options and load them to local python namespace",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyGTB.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx:3,Performance,Load,Load,3,"// Load training data (data, classes, weights) to python arrays",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyGTB.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx:52,Modifiability,variab,variable,52,"// Fit classifier; // NOTE: We dump the output to a variable so that the call does not pollute stdout",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyGTB.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx:3,Performance,Load,Load,3,"// Load model if not already done",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyGTB.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx:7,Safety,predict,prediction,7,"// Get prediction from classifier",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyGTB.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx:20,Availability,error,error,20,"// cannot determine error",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyGTB.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx:3,Performance,Load,Load,3,"// Load model if not already done",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyGTB.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx:25,Performance,load,load,25,"// Get current event and load to python array",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyGTB.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx:7,Safety,predict,prediction,7,"// Get prediction from classifier",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyGTB.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx:3,Performance,Load,Load,3,"// Load model if not already done",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyGTB.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx:25,Performance,load,load,25,"// Get current event and load to python array",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyGTB.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx:7,Safety,predict,prediction,7,"// Get prediction from classifier",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyGTB.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx:3,Performance,Load,Load,3,"// Load classifier from file",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyGTB.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx:3,Performance,Load,Load,3,"// Load data properties; // NOTE: This has to be repeated here for the reader application",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyGTB.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx:86,Modifiability,variab,variables,86,"// Get feature importance from classifier as an array with length equal; // number of variables, higher value signals a higher importance",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyGTB.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyGTB.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:42,Energy Efficiency,schedul,scheduler,42,"// empty string deactivates learning rate scheduler",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:28,Usability,learn,learning,28,"// empty string deactivates learning rate scheduler",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:42,Energy Efficiency,schedul,scheduler,42,"// empty string deactivates learning rate scheduler",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:28,Usability,learn,learning,28,"// empty string deactivates learning rate scheduler",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:86,Security,Validat,Validation,86,"////////////////////////////////////////////////////////////////////////////////; /// Validation of the ValidationSize option. Allowed formats are 20%, 0.2 and; /// 100 etc.; /// - 20% and 0.2 selects 20% of the training set as validation data.; /// - 100 selects 100 events as the validation data.; ///; /// @return number of samples in validation set; ///",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:104,Security,Validat,ValidationSize,104,"////////////////////////////////////////////////////////////////////////////////; /// Validation of the ValidationSize option. Allowed formats are 20%, 0.2 and; /// 100 etc.; /// - 20% and 0.2 selects 20% of the training set as validation data.; /// - 100 selects 100 events as the validation data.; ///; /// @return number of samples in validation set; ///",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:228,Security,validat,validation,228,"////////////////////////////////////////////////////////////////////////////////; /// Validation of the ValidationSize option. Allowed formats are 20%, 0.2 and; /// 100 etc.; /// - 20% and 0.2 selects 20% of the training set as validation data.; /// - 100 selects 100 events as the validation data.; ///; /// @return number of samples in validation set; ///",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:282,Security,validat,validation,282,"////////////////////////////////////////////////////////////////////////////////; /// Validation of the ValidationSize option. Allowed formats are 20%, 0.2 and; /// 100 etc.; /// - 20% and 0.2 selects 20% of the training set as validation data.; /// - 100 selects 100 events as the validation data.; ///; /// @return number of samples in validation set; ///",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:338,Security,validat,validation,338,"////////////////////////////////////////////////////////////////////////////////; /// Validation of the ValidationSize option. Allowed formats are 20%, 0.2 and; /// 100 etc.; /// - 20% and 0.2 selects 20% of the training set as validation data.; /// - 100 selects 100 events as the validation data.; ///; /// @return number of samples in validation set; ///",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:13,Security,Validat,Validation,13,"// Parsing + Validation; // --------------------",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:9,Security,validat,validation,9,"// Value validation; // ----------------",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:79,Modifiability,variab,variable,79,"// initialize first Keras. This is done only here when class has; // all state variable set from options or read from XML file; // Import Keras",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:202,Deployability,release,releases,202,"// only version 2.3 is latest multi-backend version.; // version 2.4 is just tf.keras and should not be used in standalone and will not work in this workflow; // see https://github.com/keras-team/keras/releases/tag/2.4.0; // for example variable keras.backend.tensorflow_backend will not exist anymore in keras 2.4",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:237,Modifiability,variab,variable,237,"// only version 2.3 is latest multi-backend version.; // version 2.4 is just tf.keras and should not be used in standalone and will not work in this workflow; // see https://github.com/keras-team/keras/releases/tag/2.4.0; // for example variable keras.backend.tensorflow_backend will not exist anymore in keras 2.4",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:170,Deployability,release,releases,170,"// if keras 2.3 and tensorflow 2 are found. Use tf.keras or keras ?; // at the moment default is tf.keras=false to keep compatibility; // but this might change in future releases",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:68,Modifiability,Config,ConfigProto,68,"// extra options for tensorflow; // use different naming in tf2 for ConfigProto and Session",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:53,Safety,avoid,avoid,53,"// applying GPU options such as allow_growth=True to avoid allocating all memory on GPU; // that prevents running later TMVA-GPU; // Also new Nvidia RTX cards (e.g. RTX 2070) require this option",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:6,Performance,Load,Load,6,/*; * Load Keras model from file; */,MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:3,Performance,Load,Load,3,"// Load initial model or already trained model",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:11,Modifiability,variab,variables,11,"/*; * Init variables and weights; */; // Get variables, classes and target numbers",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:45,Modifiability,variab,variables,45,"/*; * Init variables and weights; */; // Get variables, classes and target numbers",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:61,Performance,optimiz,optimizations,61,"///Setting up model for evaluation; /// Add here some needed optimizations like disabling eager execution",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:89,Performance,load,loading,89,"// disable eager execution (model will evaluate > 100 faster); // need to be done before loading the model",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:16,Modifiability,variab,variables,16,"// setup output variables",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:61,Usability,clear,cleared,61,"// required to use numpy arrays; // NOTE: sys.argv has to be cleared because otherwise TensorFlow breaks",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:6,Performance,Load,Load,6,/*; * Load training data to numpy array; */,MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:8,Modifiability,variab,variables,8,"// Fill variables",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:6,Performance,Load,Load,6,"/*; * Load validation data to numpy array; */; // NOTE: from TMVA, we get the validation data as a subset of all the training data; // we will not use test data for validation. They will be used for the real testing",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:11,Security,validat,validation,11,"/*; * Load validation data to numpy array; */; // NOTE: from TMVA, we get the validation data as a subset of all the training data; // we will not use test data for validation. They will be used for the real testing",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:78,Security,validat,validation,78,"/*; * Load validation data to numpy array; */; // NOTE: from TMVA, we get the validation data as a subset of all the training data; // we will not use test data for validation. They will be used for the real testing",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:165,Security,validat,validation,165,"/*; * Load validation data to numpy array; */; // NOTE: from TMVA, we get the validation data as a subset of all the training data; // we will not use test data for validation. They will be used for the real testing",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:151,Testability,test,test,151,"/*; * Load validation data to numpy array; */; // NOTE: from TMVA, we get the validation data as a subset of all the training data; // we will not use test data for validation. They will be used for the real testing",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:208,Testability,test,testing,208,"/*; * Load validation data to numpy array; */; // NOTE: from TMVA, we get the validation data as a subset of all the training data; // we will not use test data for validation. They will be used for the real testing",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:2,Security,validat,validation,2,"//validation events follows the trainig one in the TMVA training vector",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:8,Modifiability,variab,variables,8,"// Fill variables",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:45,Security,validat,validation,45,"// Callback: Save only weights with smallest validation loss",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:54,Security,validat,validation,54,"// Callback: Stop training early if no improvement in validation loss is observed",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:27,Energy Efficiency,schedul,scheduler,27,"// Callback: Learning rate scheduler",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:13,Usability,Learn,Learning,13,"// Callback: Learning rate scheduler",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:46,Usability,learn,learning,46,"// Setup a python dictionary with the desired learning rate steps",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:7,Energy Efficiency,schedul,scheduler,7,"// Set scheduler function as piecewise function with given steps",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:146,Availability,checkpoint,checkpoint,146,"//#endif; /*; * Store trained model to file (only if option 'SaveBestOnly' is NOT activated,; * because we do not want to override the best model checkpoint); */",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:20,Availability,error,error,20,"// Cannot determine error",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:3,Performance,Load,Load,3,"// Load data to numpy array",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:7,Safety,predict,prediction,7,"// Get prediction for all events",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:3,Performance,Load,Load,3,"// Load predictions to double vector; // NOTE: The signal probability is given at the output",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:8,Safety,predict,predictions,8,"// Load predictions to double vector; // NOTE: The signal probability is given at the output",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:23,Performance,load,load,23,"// Setup the model and load weights; //std::cout << ""setup model for evaluation"" << std::endl;; //PyRunString(""tf.compat.v1.disable_eager_execution()"",""Failed to disable eager execution"");",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:23,Performance,load,load,23,"// Setup the model and load weights",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyKeras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx:201,Deployability,integrat,integrated,201,"// @(#)root/tmva/pymva $Id$; // Authors: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodPyRandomForest *; * Web : http://oproject.org *; * *; * Description: *; * Random Forest Classifiear from Scikit learn *; * *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyRandomForest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx:201,Integrability,integrat,integrated,201,"// @(#)root/tmva/pymva $Id$; // Authors: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodPyRandomForest *; * Web : http://oproject.org *; * *; * Description: *; * Random Forest Classifiear from Scikit learn *; * *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyRandomForest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx:401,Usability,learn,learn,401,"// @(#)root/tmva/pymva $Id$; // Authors: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodPyRandomForest *; * Web : http://oproject.org *; * *; * Description: *; * Random Forest Classifiear from Scikit learn *; * *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyRandomForest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx:33,Safety,avoid,avoid,33,"// Needs to be included first to avoid redefinition of _POSIX_C_SOURCE",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyRandomForest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx:96,Performance,load,load,96,"//_______________________________________________________________________; // Check options and load them to local python namespace",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyRandomForest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx:52,Performance,load,load,52,"//require to use numpy arrays; // Check options and load them to local python namespace",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyRandomForest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx:3,Performance,Load,Load,3,"// Load training data (data, classes, weights) to python arrays",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyRandomForest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx:52,Modifiability,variab,variable,52,"// Fit classifier; // NOTE: We dump the output to a variable so that the call does not pollute stdout",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyRandomForest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx:3,Performance,Load,Load,3,"// Load model if not already done",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyRandomForest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx:7,Safety,predict,prediction,7,"// Get prediction from classifier",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyRandomForest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx:20,Availability,error,error,20,"// cannot determine error",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyRandomForest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx:3,Performance,Load,Load,3,"// Load model if not already done",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyRandomForest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx:25,Performance,load,load,25,"// Get current event and load to python array",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyRandomForest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx:7,Safety,predict,prediction,7,"// Get prediction from classifier",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyRandomForest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx:3,Performance,Load,Load,3,"// Load model if not already done",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyRandomForest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx:25,Performance,load,load,25,"// Get current event and load to python array",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyRandomForest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx:7,Safety,predict,prediction,7,"// Get prediction from classifier",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyRandomForest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx:3,Performance,Load,Load,3,"// Load classifier from file",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyRandomForest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx:3,Performance,Load,Load,3,"// Load data properties; // NOTE: This has to be repeated here for the reader application",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyRandomForest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx:86,Modifiability,variab,variables,86,"// Get feature importance from classifier as an array with length equal; // number of variables, higher value signals a higher importance",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyRandomForest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyRandomForest.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:42,Energy Efficiency,schedul,scheduler,42,"// empty string deactivates learning rate scheduler",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:28,Usability,learn,learning,28,"// empty string deactivates learning rate scheduler",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:42,Energy Efficiency,schedul,scheduler,42,"// empty string deactivates learning rate scheduler",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:28,Usability,learn,learning,28,"// empty string deactivates learning rate scheduler",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:86,Security,Validat,Validation,86,"////////////////////////////////////////////////////////////////////////////////; /// Validation of the ValidationSize option. Allowed formats are 20%, 0.2 and; /// 100 etc.; /// - 20% and 0.2 selects 20% of the training set as validation data.; /// - 100 selects 100 events as the validation data.; ///; /// @return number of samples in validation set; ///",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:104,Security,Validat,ValidationSize,104,"////////////////////////////////////////////////////////////////////////////////; /// Validation of the ValidationSize option. Allowed formats are 20%, 0.2 and; /// 100 etc.; /// - 20% and 0.2 selects 20% of the training set as validation data.; /// - 100 selects 100 events as the validation data.; ///; /// @return number of samples in validation set; ///",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:228,Security,validat,validation,228,"////////////////////////////////////////////////////////////////////////////////; /// Validation of the ValidationSize option. Allowed formats are 20%, 0.2 and; /// 100 etc.; /// - 20% and 0.2 selects 20% of the training set as validation data.; /// - 100 selects 100 events as the validation data.; ///; /// @return number of samples in validation set; ///",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:282,Security,validat,validation,282,"////////////////////////////////////////////////////////////////////////////////; /// Validation of the ValidationSize option. Allowed formats are 20%, 0.2 and; /// 100 etc.; /// - 20% and 0.2 selects 20% of the training set as validation data.; /// - 100 selects 100 events as the validation data.; ///; /// @return number of samples in validation set; ///",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:338,Security,validat,validation,338,"////////////////////////////////////////////////////////////////////////////////; /// Validation of the ValidationSize option. Allowed formats are 20%, 0.2 and; /// 100 etc.; /// - 20% and 0.2 selects 20% of the training set as validation data.; /// - 100 selects 100 events as the validation data.; ///; /// @return number of samples in validation set; ///",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:13,Security,Validat,Validation,13,"// Parsing + Validation; // --------------------",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:9,Security,validat,validation,9,"// Value validation; // ----------------",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:152,Performance,perform,perform,152,"// - set up number of threads for CPU if NumThreads option was specified; // `torch.set_num_threads` sets the number of threads that can be used to; // perform cpu operations like conv or mm (usually used by OpenMP or MKL).",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:6,Performance,Load,Load,6,/*; * Load PyTorch model from file; */,MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:9,Performance,Optimiz,Optimizer,9,"// Setup Optimizer. Use SGD Optimizer as Default",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:28,Performance,Optimiz,Optimizer,28,"// Setup Optimizer. Use SGD Optimizer as Default",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:13,Safety,predict,predict,13,"// Setup the predict method",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:3,Performance,Load,Load,3,"// Load already trained model or initial model",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:11,Modifiability,variab,variables,11,"/*; * Init variables and weights; */; // Get variables, classes and target numbers",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:45,Modifiability,variab,variables,45,"/*; * Init variables and weights; */; // Get variables, classes and target numbers",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:6,Performance,Load,Load,6,/*; * Load training data to numpy array. ; * NOTE: These are later forced to be converted into torch tensors throught the training loop which may not be the ideal method.; */,MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:8,Modifiability,variab,variables,8,"// Fill variables",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:6,Performance,Load,Load,6,"/*; * Load validation data to numpy array; */; // NOTE: TMVA Validation data is a subset of all the training data; // we will not use test data for validation. They will be used for the real testing",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:11,Security,validat,validation,11,"/*; * Load validation data to numpy array; */; // NOTE: TMVA Validation data is a subset of all the training data; // we will not use test data for validation. They will be used for the real testing",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:61,Security,Validat,Validation,61,"/*; * Load validation data to numpy array; */; // NOTE: TMVA Validation data is a subset of all the training data; // we will not use test data for validation. They will be used for the real testing",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:148,Security,validat,validation,148,"/*; * Load validation data to numpy array; */; // NOTE: TMVA Validation data is a subset of all the training data; // we will not use test data for validation. They will be used for the real testing",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:134,Testability,test,test,134,"/*; * Load validation data to numpy array; */; // NOTE: TMVA Validation data is a subset of all the training data; // we will not use test data for validation. They will be used for the real testing",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:191,Testability,test,testing,191,"/*; * Load validation data to numpy array; */; // NOTE: TMVA Validation data is a subset of all the training data; // we will not use test data for validation. They will be used for the real testing",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:2,Security,validat,validation,2,"//validation events follows the trainig one in the TMVA training vector",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:8,Modifiability,variab,variables,8,"// Fill variables",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:19,Security,Validat,Validation,19,"// Prepare PyTorch Validation DataSet",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:19,Security,validat,validation,19,"// Prepare PyTorch validation Dataloader",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:17,Energy Efficiency,Schedul,Scheduler,17,"// Learning Rate Scheduler",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:3,Usability,Learn,Learning,3,"// Learning Rate Scheduler",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:46,Usability,learn,learning,46,"// Setup a python dictionary with the desired learning rate steps",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:7,Energy Efficiency,schedul,scheduler,7,"// Set scheduler function as piecewise function with given steps",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:35,Security,validat,validation,35,"// Save only weights with smallest validation loss",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:299,Availability,checkpoint,checkpoint,299,"// Note: PyTorch doesn't store training history data unlike Keras. A user can append and save the loss, ; // accuracy, other metrics etc to a file for later use.; /*; * Store trained model to file (only if option 'SaveBestOnly' is NOT activated,; * because we do not want to override the best model checkpoint); */",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:20,Availability,error,error,20,"// Cannot determine error",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:3,Performance,Load,Load,3,"// Load data to numpy array",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:7,Safety,predict,prediction,7,"// Get prediction for all events",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:30,Safety,predict,predict,30,"// Using PyTorch User Defined predict function for predictions",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:51,Safety,predict,predictions,51,"// Using PyTorch User Defined predict function for predictions",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:3,Performance,Load,Load,3,"// Load predictions to double vector; // NOTE: The signal probability is given at the output",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:8,Safety,predict,predictions,8,"// Load predictions to double vector; // NOTE: The signal probability is given at the output",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:23,Performance,load,load,23,"// Setup the model and load weights",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:23,Performance,load,load,23,"// Setup the model and load weights",MatchSource.CODE_COMMENT,tmva/pymva/src/MethodPyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/PyMethodBase.cxx:221,Deployability,integrat,integrated,221,"// @(#)root/tmva/pymva $Id$; // Authors: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer 2015, Stefan Wunsch 2017; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : PyMethodBase *; * *; * Description: *; * Virtual base class for all MVA method based on python *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/src/PyMethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/PyMethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/PyMethodBase.cxx:221,Integrability,integrat,integrated,221,"// @(#)root/tmva/pymva $Id$; // Authors: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer 2015, Stefan Wunsch 2017; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : PyMethodBase *; * *; * Description: *; * Virtual base class for all MVA method based on python *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/src/PyMethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/PyMethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/PyMethodBase.cxx:33,Safety,avoid,avoid,33,"// Needs to be included first to avoid redefinition of _POSIX_C_SOURCE",MatchSource.CODE_COMMENT,tmva/pymva/src/PyMethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/PyMethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/PyMethodBase.cxx:353,Modifiability,variab,variables,353,"///////////////////////////////////////////////////////////////////////////////; /// Initialize Python interpreter; ///; /// NOTE: We introduce a shared global namespace `fGlobalNS`, but using; /// a private local namespace `fLocalNS`. This prohibits the interference; /// of instances of the same method with the same factory, e.g., by overriding; /// variables in the same local namespace.",MatchSource.CODE_COMMENT,tmva/pymva/src/PyMethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/PyMethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/PyMethodBase.cxx:69,Availability,alive,alive,69,"// fEval and fOpen are borrowed referencers and we need to keep them alive",MatchSource.CODE_COMMENT,tmva/pymva/src/PyMethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/PyMethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/PyMethodBase.cxx:264,Availability,Error,Error,264,"///////////////////////////////////////////////////////////////////////////////; /// Unserialize Python object; ///; /// \param[in] path Path to serialized Python object; /// \param[in] obj Python object where the unserialized Python object is loaded; /// \return Error code",MatchSource.CODE_COMMENT,tmva/pymva/src/PyMethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/PyMethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/PyMethodBase.cxx:244,Performance,load,loaded,244,"///////////////////////////////////////////////////////////////////////////////; /// Unserialize Python object; ///; /// \param[in] path Path to serialized Python object; /// \param[in] obj Python object where the unserialized Python object is loaded; /// \return Error code",MatchSource.CODE_COMMENT,tmva/pymva/src/PyMethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/PyMethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/PyMethodBase.cxx:3,Performance,Load,Load,3,"// Load file",MatchSource.CODE_COMMENT,tmva/pymva/src/PyMethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/PyMethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/PyMethodBase.cxx:3,Performance,Load,Load,3,"// Load object from file using pickle",MatchSource.CODE_COMMENT,tmva/pymva/src/PyMethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/PyMethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/PyMethodBase.cxx:181,Availability,error,errorMessage,181,"///////////////////////////////////////////////////////////////////////////////; /// Execute Python code from string; ///; /// \param[in] code Python code as string; /// \param[in] errorMessage Error message which shall be shown if the execution fails; /// \param[in] start Start symbol; ///; /// Helper function to run python code from string in local namespace with; /// error handling; /// `start` defines the start symbol defined in PyRun_String (Py_eval_input,; /// Py_single_input, Py_file_input)",MatchSource.CODE_COMMENT,tmva/pymva/src/PyMethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/PyMethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/PyMethodBase.cxx:194,Availability,Error,Error,194,"///////////////////////////////////////////////////////////////////////////////; /// Execute Python code from string; ///; /// \param[in] code Python code as string; /// \param[in] errorMessage Error message which shall be shown if the execution fails; /// \param[in] start Start symbol; ///; /// Helper function to run python code from string in local namespace with; /// error handling; /// `start` defines the start symbol defined in PyRun_String (Py_eval_input,; /// Py_single_input, Py_file_input)",MatchSource.CODE_COMMENT,tmva/pymva/src/PyMethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/PyMethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/PyMethodBase.cxx:373,Availability,error,error,373,"///////////////////////////////////////////////////////////////////////////////; /// Execute Python code from string; ///; /// \param[in] code Python code as string; /// \param[in] errorMessage Error message which shall be shown if the execution fails; /// \param[in] start Start symbol; ///; /// Helper function to run python code from string in local namespace with; /// error handling; /// `start` defines the start symbol defined in PyRun_String (Py_eval_input,; /// Py_single_input, Py_file_input)",MatchSource.CODE_COMMENT,tmva/pymva/src/PyMethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/PyMethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/PyMethodBase.cxx:200,Integrability,message,message,200,"///////////////////////////////////////////////////////////////////////////////; /// Execute Python code from string; ///; /// \param[in] code Python code as string; /// \param[in] errorMessage Error message which shall be shown if the execution fails; /// \param[in] start Start symbol; ///; /// Helper function to run python code from string in local namespace with; /// error handling; /// `start` defines the start symbol defined in PyRun_String (Py_eval_input,; /// Py_single_input, Py_file_input)",MatchSource.CODE_COMMENT,tmva/pymva/src/PyMethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/PyMethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/PyMethodBase.cxx:383,Availability,error,error,383,"///////////////////////////////////////////////////////////////////////////////; /// Execute Python code from string; ///; /// \param[in] code Python code as string; /// \param[in] globalNS Global Namespace for Python Session; /// \param[in] localNS Local Namespace for Python Session; ///; /// Overloaded static Helper function to run python code; /// from string and throw runtime error if the Python session; /// is unable to execute the code",MatchSource.CODE_COMMENT,tmva/pymva/src/PyMethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/PyMethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/PyMethodBase.cxx:242,Availability,error,error,242,"//////////////////////////////////////////////////////////////////////////////////; /// \brief Utility function which checks if a given key is present in a Python; /// dictionary object and returns the associated value or throws runtime; /// error.; ///; /// \param[in] listObject Python Dict object; /// \return Associated value PyObject",MatchSource.CODE_COMMENT,tmva/pymva/src/PyMethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/PyMethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx:175,Deployability,integrat,integrated,175,"// @(#)root/tmva/pymva $Id$; // Author: Sanjiban Sengupta 2021; /**********************************************************************************; * Project : TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package : TMVA *; * Function: TMVA::Experimental::SOFIE::PyKeras::Parse *; * *; * Description: *; * Parser function for translating Keras .h5 model to RModel object *; * *; * Example Usage: *; * ~~~ {.cpp} *; * using TMVA::Experimental::SOFIE; *; * RModel model = PyKeras::Parse(""trained_model_dense.h5""); *; * ~~~ *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/src/RModelParser_Keras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx:175,Integrability,integrat,integrated,175,"// @(#)root/tmva/pymva $Id$; // Author: Sanjiban Sengupta 2021; /**********************************************************************************; * Project : TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package : TMVA *; * Function: TMVA::Experimental::SOFIE::PyKeras::Parse *; * *; * Description: *; * Parser function for translating Keras .h5 model to RModel object *; * *; * Example Usage: *; * ~~~ {.cpp} *; * using TMVA::Experimental::SOFIE; *; * RModel model = PyKeras::Parse(""trained_model_dense.h5""); *; * ~~~ *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/src/RModelParser_Keras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx:42,Modifiability,layers,layers,42,"// Declaring Internal Functions for Keras layers which don't have activation as an additional attribute",MatchSource.CODE_COMMENT,tmva/pymva/src/RModelParser_Keras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx:98,Modifiability,layers,layers,98,"// For instantiating ROperator for Keras Identity Layer; // Declaring Internal function for Keras layers which have additional activation attribute",MatchSource.CODE_COMMENT,tmva/pymva/src/RModelParser_Keras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx:18,Modifiability,layers,layers,18,"// For activation layers",MatchSource.CODE_COMMENT,tmva/pymva/src/RModelParser_Keras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx:7,Modifiability,layers,layers,7,"// For layers with activation attributes",MatchSource.CODE_COMMENT,tmva/pymva/src/RModelParser_Keras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx:464,Modifiability,layers,layers,464,"//////////////////////////////////////////////////////////////////////////////////; /// \brief Adds equivalent ROperator with respect to Keras model layer; /// into the referenced RModel object; ///; /// \param[in] rmodel RModel object; /// \param[in] fLayer Python Keras layer as a Dictionary object; /// \param[out] RModel object with the added ROperator; ///; /// Function adds equivalent ROperator into the referenced RModel object.; /// Keras models can have layers like Dense and Conv which have activation; /// function as an attribute. Function first searches if layer object is among; /// the ones which don't have activation attribute and then calls the respective; /// preparation function to get the ROperator object, which is then added; /// into the RModel object. If passed layer is among the ones which may have activation; /// attribute, then it checks for the activation attribute, if present then first adds; /// the primary operator into the RModel object, and then adds the operator for the; /// activation function with appropriate changes in the names of input and output; /// tensors for both of them.; /// Example of such layers is the Dense Layer. For a dense layer with input tensor name; /// dense2BiasAdd0 and output tensor name dense3Relu0 with relu as activation attribute; /// will be transformed into a ROperator_Gemm with input tensor name dense2BiasAdd0; /// & output tensor name dense3Dense (layerName+layerType), and a subsequent; /// ROperator_Relu with input tensor name as dense3Dense and output tensor name; /// as dense3Relu0.; ///; /// For developing new preparatory functions for supporting Keras layers in future,; /// all one needs is to extract the required properties and attributes from the fLayer; /// dictionary which contains all the information about any Keras layer and after; /// any required transformations, these are passed for instantiating the ROperator; /// object.; ///; /// The fLayer dictionary which holds all the information about a Ke",MatchSource.CODE_COMMENT,tmva/pymva/src/RModelParser_Keras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx:1147,Modifiability,layers,layers,1147,"layer; /// into the referenced RModel object; ///; /// \param[in] rmodel RModel object; /// \param[in] fLayer Python Keras layer as a Dictionary object; /// \param[out] RModel object with the added ROperator; ///; /// Function adds equivalent ROperator into the referenced RModel object.; /// Keras models can have layers like Dense and Conv which have activation; /// function as an attribute. Function first searches if layer object is among; /// the ones which don't have activation attribute and then calls the respective; /// preparation function to get the ROperator object, which is then added; /// into the RModel object. If passed layer is among the ones which may have activation; /// attribute, then it checks for the activation attribute, if present then first adds; /// the primary operator into the RModel object, and then adds the operator for the; /// activation function with appropriate changes in the names of input and output; /// tensors for both of them.; /// Example of such layers is the Dense Layer. For a dense layer with input tensor name; /// dense2BiasAdd0 and output tensor name dense3Relu0 with relu as activation attribute; /// will be transformed into a ROperator_Gemm with input tensor name dense2BiasAdd0; /// & output tensor name dense3Dense (layerName+layerType), and a subsequent; /// ROperator_Relu with input tensor name as dense3Dense and output tensor name; /// as dense3Relu0.; ///; /// For developing new preparatory functions for supporting Keras layers in future,; /// all one needs is to extract the required properties and attributes from the fLayer; /// dictionary which contains all the information about any Keras layer and after; /// any required transformations, these are passed for instantiating the ROperator; /// object.; ///; /// The fLayer dictionary which holds all the information about a Keras layer has; /// following structure:-; ///; /// dict fLayer { 'layerType' : Type of the Keras layer; /// 'layerAttributes' : Attributes of the ke",MatchSource.CODE_COMMENT,tmva/pymva/src/RModelParser_Keras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx:1641,Modifiability,layers,layers,1641,"ced RModel object.; /// Keras models can have layers like Dense and Conv which have activation; /// function as an attribute. Function first searches if layer object is among; /// the ones which don't have activation attribute and then calls the respective; /// preparation function to get the ROperator object, which is then added; /// into the RModel object. If passed layer is among the ones which may have activation; /// attribute, then it checks for the activation attribute, if present then first adds; /// the primary operator into the RModel object, and then adds the operator for the; /// activation function with appropriate changes in the names of input and output; /// tensors for both of them.; /// Example of such layers is the Dense Layer. For a dense layer with input tensor name; /// dense2BiasAdd0 and output tensor name dense3Relu0 with relu as activation attribute; /// will be transformed into a ROperator_Gemm with input tensor name dense2BiasAdd0; /// & output tensor name dense3Dense (layerName+layerType), and a subsequent; /// ROperator_Relu with input tensor name as dense3Dense and output tensor name; /// as dense3Relu0.; ///; /// For developing new preparatory functions for supporting Keras layers in future,; /// all one needs is to extract the required properties and attributes from the fLayer; /// dictionary which contains all the information about any Keras layer and after; /// any required transformations, these are passed for instantiating the ROperator; /// object.; ///; /// The fLayer dictionary which holds all the information about a Keras layer has; /// following structure:-; ///; /// dict fLayer { 'layerType' : Type of the Keras layer; /// 'layerAttributes' : Attributes of the keras layer as returned by layer.get_config(); /// 'layerInput' : List of names of input tensors; /// 'layerOutput' : List of names of output tensors; /// 'layerDType' : Data-type of the Keras layer; /// 'layerWeight' : List of weight tensor names of Keras layers; /// }",MatchSource.CODE_COMMENT,tmva/pymva/src/RModelParser_Keras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx:2404,Modifiability,layers,layers,2404,"ced RModel object.; /// Keras models can have layers like Dense and Conv which have activation; /// function as an attribute. Function first searches if layer object is among; /// the ones which don't have activation attribute and then calls the respective; /// preparation function to get the ROperator object, which is then added; /// into the RModel object. If passed layer is among the ones which may have activation; /// attribute, then it checks for the activation attribute, if present then first adds; /// the primary operator into the RModel object, and then adds the operator for the; /// activation function with appropriate changes in the names of input and output; /// tensors for both of them.; /// Example of such layers is the Dense Layer. For a dense layer with input tensor name; /// dense2BiasAdd0 and output tensor name dense3Relu0 with relu as activation attribute; /// will be transformed into a ROperator_Gemm with input tensor name dense2BiasAdd0; /// & output tensor name dense3Dense (layerName+layerType), and a subsequent; /// ROperator_Relu with input tensor name as dense3Dense and output tensor name; /// as dense3Relu0.; ///; /// For developing new preparatory functions for supporting Keras layers in future,; /// all one needs is to extract the required properties and attributes from the fLayer; /// dictionary which contains all the information about any Keras layer and after; /// any required transformations, these are passed for instantiating the ROperator; /// object.; ///; /// The fLayer dictionary which holds all the information about a Keras layer has; /// following structure:-; ///; /// dict fLayer { 'layerType' : Type of the Keras layer; /// 'layerAttributes' : Attributes of the keras layer as returned by layer.get_config(); /// 'layerInput' : List of names of input tensors; /// 'layerOutput' : List of names of output tensors; /// 'layerDType' : Data-type of the Keras layer; /// 'layerWeight' : List of weight tensor names of Keras layers; /// }",MatchSource.CODE_COMMENT,tmva/pymva/src/RModelParser_Keras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx:6,Modifiability,layers,layers,6,"//For layers without additional activation attribute",MatchSource.CODE_COMMENT,tmva/pymva/src/RModelParser_Keras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx:6,Modifiability,layers,layers,6,"//For layers like Dense & Conv which has additional activation attribute",MatchSource.CODE_COMMENT,tmva/pymva/src/RModelParser_Keras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx:521,Integrability,depend,depending,521,"//////////////////////////////////////////////////////////////////////////////////; /// \brief Prepares a ROperator object for Keras Conv Layer; ///; /// \param[in] fLayer Python Keras layer as a Dictionary object; /// \return Unique pointer to ROperator object; ///; /// For Keras's Conv layer, the names of the input tensor, output tensor, and; /// weight tensors are extracted, along with attributes like dilation_rate,; /// groups, kernel size, padding, strides. Padding attribute is then; /// computed for ROperator depending on Keras' attribute parameter.",MatchSource.CODE_COMMENT,tmva/pymva/src/RModelParser_Keras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx:296,Modifiability,layers,layers,296,"//////////////////////////////////////////////////////////////////////////////////; /// \brief Prepares a ROperator object for Keras activation layer; ///; /// \param[in] fLayer Python Keras layer as a Dictionary object; /// \return Unique pointer to ROperator object; ///; /// For Keras's keras.layers.Activation layer, the activation attribute is; /// extracted and appropriate function for adding the function is called.",MatchSource.CODE_COMMENT,tmva/pymva/src/RModelParser_Keras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx:54,Safety,avoid,avoided,54,"// Adding the permute dimensions if present, else are avoided to use default values.",MatchSource.CODE_COMMENT,tmva/pymva/src/RModelParser_Keras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx:779,Integrability,rout,routines,779,"//INTERNAL; //////////////////////////////////////////////////////////////////////////////////; /// \param[in] filename file location of Keras .h5; /// \return Parsed RModel object; ///; /// The `Parse()` function defined in `TMVA::Experimental::SOFIE::PyKeras` will; /// parse a trained Keras .h5 model into a RModel Object. After loading the model; /// in a Python Session, the included layers are extracted with properties; /// like Layer type, Attributes, Input tensor names, Output tensor names, data-type; /// and names of the weight/initialized tensors.; /// The extracted layers from the model are then passed into `AddKerasLayer()`; /// which prepares the specific ROperator and adds them into the RModel object.; /// The layers are also checked for adding any required routines for executing; /// the generated Inference code.; ///; /// For adding the Initialized tensors into the RModel object, the weights are; /// extracted from the Keras model in the form of NumPy arrays, which are then; /// passed into `AddInitializedTensor()` after appropriate casting.; ///; /// Input tensor infos are required to be added which will contain their names,; /// shapes and data-types. For keras models with single input tensors, the tensor; /// shape is returned as a Tuple object, whereas for multi-input models,; /// the tensor shape is returned as a List of Tuple object containing the shape; /// of the individual input tensors. SOFIE's RModel also requires that the Keras; /// models are initialized with Batch Size. The `GetDataFromTuple()` are called; /// on the Tuple objects, which then returns the shape vector required to call; /// the `AddInputTensorInfo()`.; ///; /// For adding the Output Tensor infos, only the names of the model's output; /// tensors are extracted and are then passed into `AddOutputTensorNameList()`.; ///; /// Provide optionally a batch size that can be used to overwrite the one given by the; /// model. If a batch size is not given 1 is used if the model does not ",MatchSource.CODE_COMMENT,tmva/pymva/src/RModelParser_Keras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx:389,Modifiability,layers,layers,389,"//INTERNAL; //////////////////////////////////////////////////////////////////////////////////; /// \param[in] filename file location of Keras .h5; /// \return Parsed RModel object; ///; /// The `Parse()` function defined in `TMVA::Experimental::SOFIE::PyKeras` will; /// parse a trained Keras .h5 model into a RModel Object. After loading the model; /// in a Python Session, the included layers are extracted with properties; /// like Layer type, Attributes, Input tensor names, Output tensor names, data-type; /// and names of the weight/initialized tensors.; /// The extracted layers from the model are then passed into `AddKerasLayer()`; /// which prepares the specific ROperator and adds them into the RModel object.; /// The layers are also checked for adding any required routines for executing; /// the generated Inference code.; ///; /// For adding the Initialized tensors into the RModel object, the weights are; /// extracted from the Keras model in the form of NumPy arrays, which are then; /// passed into `AddInitializedTensor()` after appropriate casting.; ///; /// Input tensor infos are required to be added which will contain their names,; /// shapes and data-types. For keras models with single input tensors, the tensor; /// shape is returned as a Tuple object, whereas for multi-input models,; /// the tensor shape is returned as a List of Tuple object containing the shape; /// of the individual input tensors. SOFIE's RModel also requires that the Keras; /// models are initialized with Batch Size. The `GetDataFromTuple()` are called; /// on the Tuple objects, which then returns the shape vector required to call; /// the `AddInputTensorInfo()`.; ///; /// For adding the Output Tensor infos, only the names of the model's output; /// tensors are extracted and are then passed into `AddOutputTensorNameList()`.; ///; /// Provide optionally a batch size that can be used to overwrite the one given by the; /// model. If a batch size is not given 1 is used if the model does not ",MatchSource.CODE_COMMENT,tmva/pymva/src/RModelParser_Keras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx:580,Modifiability,layers,layers,580,"//INTERNAL; //////////////////////////////////////////////////////////////////////////////////; /// \param[in] filename file location of Keras .h5; /// \return Parsed RModel object; ///; /// The `Parse()` function defined in `TMVA::Experimental::SOFIE::PyKeras` will; /// parse a trained Keras .h5 model into a RModel Object. After loading the model; /// in a Python Session, the included layers are extracted with properties; /// like Layer type, Attributes, Input tensor names, Output tensor names, data-type; /// and names of the weight/initialized tensors.; /// The extracted layers from the model are then passed into `AddKerasLayer()`; /// which prepares the specific ROperator and adds them into the RModel object.; /// The layers are also checked for adding any required routines for executing; /// the generated Inference code.; ///; /// For adding the Initialized tensors into the RModel object, the weights are; /// extracted from the Keras model in the form of NumPy arrays, which are then; /// passed into `AddInitializedTensor()` after appropriate casting.; ///; /// Input tensor infos are required to be added which will contain their names,; /// shapes and data-types. For keras models with single input tensors, the tensor; /// shape is returned as a Tuple object, whereas for multi-input models,; /// the tensor shape is returned as a List of Tuple object containing the shape; /// of the individual input tensors. SOFIE's RModel also requires that the Keras; /// models are initialized with Batch Size. The `GetDataFromTuple()` are called; /// on the Tuple objects, which then returns the shape vector required to call; /// the `AddInputTensorInfo()`.; ///; /// For adding the Output Tensor infos, only the names of the model's output; /// tensors are extracted and are then passed into `AddOutputTensorNameList()`.; ///; /// Provide optionally a batch size that can be used to overwrite the one given by the; /// model. If a batch size is not given 1 is used if the model does not ",MatchSource.CODE_COMMENT,tmva/pymva/src/RModelParser_Keras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx:731,Modifiability,layers,layers,731,"//INTERNAL; //////////////////////////////////////////////////////////////////////////////////; /// \param[in] filename file location of Keras .h5; /// \return Parsed RModel object; ///; /// The `Parse()` function defined in `TMVA::Experimental::SOFIE::PyKeras` will; /// parse a trained Keras .h5 model into a RModel Object. After loading the model; /// in a Python Session, the included layers are extracted with properties; /// like Layer type, Attributes, Input tensor names, Output tensor names, data-type; /// and names of the weight/initialized tensors.; /// The extracted layers from the model are then passed into `AddKerasLayer()`; /// which prepares the specific ROperator and adds them into the RModel object.; /// The layers are also checked for adding any required routines for executing; /// the generated Inference code.; ///; /// For adding the Initialized tensors into the RModel object, the weights are; /// extracted from the Keras model in the form of NumPy arrays, which are then; /// passed into `AddInitializedTensor()` after appropriate casting.; ///; /// Input tensor infos are required to be added which will contain their names,; /// shapes and data-types. For keras models with single input tensors, the tensor; /// shape is returned as a Tuple object, whereas for multi-input models,; /// the tensor shape is returned as a List of Tuple object containing the shape; /// of the individual input tensors. SOFIE's RModel also requires that the Keras; /// models are initialized with Batch Size. The `GetDataFromTuple()` are called; /// on the Tuple objects, which then returns the shape vector required to call; /// the `AddInputTensorInfo()`.; ///; /// For adding the Output Tensor infos, only the names of the model's output; /// tensors are extracted and are then passed into `AddOutputTensorNameList()`.; ///; /// Provide optionally a batch size that can be used to overwrite the one given by the; /// model. If a batch size is not given 1 is used if the model does not ",MatchSource.CODE_COMMENT,tmva/pymva/src/RModelParser_Keras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx:332,Performance,load,loading,332,"//INTERNAL; //////////////////////////////////////////////////////////////////////////////////; /// \param[in] filename file location of Keras .h5; /// \return Parsed RModel object; ///; /// The `Parse()` function defined in `TMVA::Experimental::SOFIE::PyKeras` will; /// parse a trained Keras .h5 model into a RModel Object. After loading the model; /// in a Python Session, the included layers are extracted with properties; /// like Layer type, Attributes, Input tensor names, Output tensor names, data-type; /// and names of the weight/initialized tensors.; /// The extracted layers from the model are then passed into `AddKerasLayer()`; /// which prepares the specific ROperator and adds them into the RModel object.; /// The layers are also checked for adding any required routines for executing; /// the generated Inference code.; ///; /// For adding the Initialized tensors into the RModel object, the weights are; /// extracted from the Keras model in the form of NumPy arrays, which are then; /// passed into `AddInitializedTensor()` after appropriate casting.; ///; /// Input tensor infos are required to be added which will contain their names,; /// shapes and data-types. For keras models with single input tensors, the tensor; /// shape is returned as a Tuple object, whereas for multi-input models,; /// the tensor shape is returned as a List of Tuple object containing the shape; /// of the individual input tensors. SOFIE's RModel also requires that the Keras; /// models are initialized with Batch Size. The `GetDataFromTuple()` are called; /// on the Tuple objects, which then returns the shape vector required to call; /// the `AddInputTensorInfo()`.; ///; /// For adding the Output Tensor infos, only the names of the model's output; /// tensors are extracted and are then passed into `AddOutputTensorNameList()`.; ///; /// Provide optionally a batch size that can be used to overwrite the one given by the; /// model. If a batch size is not given 1 is used if the model does not ",MatchSource.CODE_COMMENT,tmva/pymva/src/RModelParser_Keras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx:30,Modifiability,layers,layers,30,"// Traversing through all the layers and passing the Layer object to `AddKerasLayer()`; // for adding the equivalent ROperators into the RModel object.",MatchSource.CODE_COMMENT,tmva/pymva/src/RModelParser_Keras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx:23,Integrability,rout,routines,23,"// Adding any required routines depending on the Layer types for generating; // inference code.",MatchSource.CODE_COMMENT,tmva/pymva/src/RModelParser_Keras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx:32,Integrability,depend,depending,32,"// Adding any required routines depending on the Layer types for generating; // inference code.",MatchSource.CODE_COMMENT,tmva/pymva/src/RModelParser_Keras.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_PyTorch.cxx:175,Deployability,integrat,integrated,175,"// @(#)root/tmva/pymva $Id$; // Author: Sanjiban Sengupta 2021; /**********************************************************************************; * Project : TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package : TMVA *; * Function: TMVA::Experimental::SOFIE::PyTorch::Parse *; * *; * Description: *; * Parser function for translating PyTorch .pt model to RModel object *; * *; * Example Usage: *; * ~~~ {.cpp} *; * using TMVA::Experimental::SOFIE; *; * // Building the vector of input tensor shapes *; * std::vector<size_t> s1{120,1}; *; * std::vector<std::vector<size_t>> inputShape{s1}; *; * RModel model = PyTorch::Parse(""trained_model_dense.pt"",inputShape); *; * ~~~ *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/src/RModelParser_PyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_PyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_PyTorch.cxx:175,Integrability,integrat,integrated,175,"// @(#)root/tmva/pymva $Id$; // Author: Sanjiban Sengupta 2021; /**********************************************************************************; * Project : TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package : TMVA *; * Function: TMVA::Experimental::SOFIE::PyTorch::Parse *; * *; * Description: *; * Parser function for translating PyTorch .pt model to RModel object *; * *; * Example Usage: *; * ~~~ {.cpp} *; * using TMVA::Experimental::SOFIE; *; * // Building the vector of input tensor shapes *; * std::vector<size_t> s1{120,1}; *; * std::vector<std::vector<size_t>> inputShape{s1}; *; * RModel model = PyTorch::Parse(""trained_model_dense.pt"",inputShape); *; * ~~~ *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/pymva/src/RModelParser_PyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_PyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_PyTorch.cxx:1218,Integrability,rout,routines,1218,"// \param[in] inputDTypes vector of ETensorType for data-types of Input tensors; /// \return Parsed RModel object; ///; /// The `Parse()` function defined in `TMVA::Experimental::SOFIE::PyTorch` will; /// parse a trained PyTorch .pt model into a RModel Object. The parser uses; /// internal functions of PyTorch to convert any PyTorch model into its; /// equivalent ONNX Graph. For this conversion, dummy inputs are built which are; /// passed through the model and the applied operators are recorded for populating; /// the ONNX graph. The `Parse()` function requires the shapes and data-types of; /// the input tensors which are used for building the dummy inputs.; /// After the said conversion, the nodes of the ONNX graph are then traversed to; /// extract properties like Node type, Attributes, input & output tensor names.; /// Function `AddOperator()` is then called on the extracted nodes to add the; /// operator into the RModel object. The nodes are also checked for adding any; /// required routines for executing the generated Inference code.; ///; /// The internal function used to convert the model to graph object returns a list; /// which contains a Graph object and a dictionary of weights. This dictionary is; /// used to extract the Initialized tensors for the model. The names and data-types; /// of the Initialized tensors are extracted along with their values in NumPy array,; /// and after approapriate type-conversions, they are added into the RModel object.; ///; /// For adding the Input tensor infos, the names of the input tensors are extracted; /// from the PyTorch ONNX graph object. The vector of shapes & data-types passed; /// into the `Parse()` function are used to extract the data-type and the shape; /// of the input tensors. Extracted input tensor infos are then added into the; /// RModel object by calling the `AddInputTensorInfo()` function.; ///; /// For the output tensor infos, names of the output tensors are also extracted; /// from the Graph object and ",MatchSource.CODE_COMMENT,tmva/pymva/src/RModelParser_PyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_PyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_PyTorch.cxx:52,Integrability,depend,dependency,52,"// The '_node_get' helper function is used to avoid dependency on onnx submodule; // (for the subscript operator of torch._C.Node), as done in https://github.com/pytorch/pytorch/pull/82628",MatchSource.CODE_COMMENT,tmva/pymva/src/RModelParser_PyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_PyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_PyTorch.cxx:46,Safety,avoid,avoid,46,"// The '_node_get' helper function is used to avoid dependency on onnx submodule; // (for the subscript operator of torch._C.Node), as done in https://github.com/pytorch/pytorch/pull/82628",MatchSource.CODE_COMMENT,tmva/pymva/src/RModelParser_PyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_PyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_PyTorch.cxx:19,Integrability,rout,routines,19,"// Adding required routines for inference code generation",MatchSource.CODE_COMMENT,tmva/pymva/src/RModelParser_PyTorch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_PyTorch.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModelClassification.py:30,Performance,Optimiz,Optimizer,30,"# Construct loss function and Optimizer.",MatchSource.CODE_COMMENT,tmva/pymva/test/generatePyTorchModelClassification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModelClassification.py
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModelClassification.py:2,Security,Validat,Validation,2,"# Validation Loop; # Set to eval mode",MatchSource.CODE_COMMENT,tmva/pymva/test/generatePyTorchModelClassification.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModelClassification.py
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModelMulticlass.py:30,Performance,Optimiz,Optimizer,30,"# Construct loss function and Optimizer.",MatchSource.CODE_COMMENT,tmva/pymva/test/generatePyTorchModelMulticlass.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModelMulticlass.py
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModelMulticlass.py:2,Security,Validat,Validation,2,"# Validation Loop; # Set to eval mode",MatchSource.CODE_COMMENT,tmva/pymva/test/generatePyTorchModelMulticlass.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModelMulticlass.py
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModelRegression.py:30,Performance,Optimiz,Optimizer,30,"# Construct loss function and Optimizer.",MatchSource.CODE_COMMENT,tmva/pymva/test/generatePyTorchModelRegression.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModelRegression.py
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModelRegression.py:2,Security,Validat,Validation,2,"# Validation Loop; # Set to eval mode",MatchSource.CODE_COMMENT,tmva/pymva/test/generatePyTorchModelRegression.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModelRegression.py
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModels.py:29,Performance,optimiz,optimizer,29,"#Construct loss function and optimizer",MatchSource.CODE_COMMENT,tmva/pymva/test/generatePyTorchModels.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModels.py
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModels.py:21,Testability,test,test,21,"#Constructing random test dataset",MatchSource.CODE_COMMENT,tmva/pymva/test/generatePyTorchModels.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModels.py
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModels.py:29,Performance,optimiz,optimizer,29,"#Construct loss function and optimizer",MatchSource.CODE_COMMENT,tmva/pymva/test/generatePyTorchModels.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModels.py
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModels.py:21,Testability,test,test,21,"#Constructing random test dataset",MatchSource.CODE_COMMENT,tmva/pymva/test/generatePyTorchModels.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModels.py
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModels.py:29,Performance,optimiz,optimizer,29,"#Construct loss function and optimizer",MatchSource.CODE_COMMENT,tmva/pymva/test/generatePyTorchModels.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModels.py
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModels.py:21,Testability,test,test,21,"#Constructing random test dataset",MatchSource.CODE_COMMENT,tmva/pymva/test/generatePyTorchModels.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModels.py
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h:198,Deployability,integrat,integrated,198,"// @(#)root/tmva/rmva $Id$; // Author: Omar Zapata,Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RMethodC50 *; * *; * Description: *; * R´s Package C50 method based on ROOTR *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodC50.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h:198,Integrability,integrat,integrated,198,"// @(#)root/tmva/rmva $Id$; // Author: Omar Zapata,Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RMethodC50 *; * *; * Description: *; * R´s Package C50 method based on ROOTR *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodC50.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h:3,Performance,perform,performs,3,"// performs classifier testing",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodC50.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h:23,Testability,test,testing,23,"// performs classifier testing",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodC50.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h:4,Testability,log,logical,4,"//A logical: should the tree be decomposed into a rule-based model?; //Control options see C5.0Control",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodC50.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h:58,Safety,predict,predictors,58,"//A logical: should the model evaluate groups of discrete predictors for splits?",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodC50.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h:4,Testability,log,logical,4,"//A logical: should the model evaluate groups of discrete predictors for splits?",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodC50.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h:21,Safety,predict,predictor,21,"// A logical: should predictor winnowing (i.e feature selection) be used?",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodC50.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h:5,Testability,log,logical,5,"// A logical: should predictor winnowing (i.e feature selection) be used?",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodC50.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h:15,Deployability,toggle,toggle,15,"//A logical to toggle whether the final, global pruning step to simplify the tree.",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodC50.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h:4,Testability,log,logical,4,"//A logical to toggle whether the final, global pruning step to simplify the tree.",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodC50.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h:64,Usability,simpl,simplify,64,"//A logical to toggle whether the final, global pruning step to simplify the tree.",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodC50.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h:12,Deployability,toggle,toggle,12,"//A logical toggle to evaluate possible advanced splits of the data. See Quinlan (1993) for details and examples.",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodC50.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h:4,Testability,log,logical,4,"//A logical toggle to evaluate possible advanced splits of the data. See Quinlan (1993) for details and examples.",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodC50.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h:14,Deployability,toggle,toggle,14,"// logical to toggle whether the internal method for stopping boosting should be used.",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodC50.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h:3,Testability,log,logical,3,"// logical to toggle whether the internal method for stopping boosting should be used.",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodC50.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h:12,Integrability,message,message,12,"// get help message text",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodC50.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSNNS.h:198,Deployability,integrat,integrated,198,"// @(#)root/tmva/rmva $Id$; // Author: Omar Zapata,Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RMethodRSNNS *; * *; * Description: *; * R´s Package RSNNS method based on ROOTR *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRSNNS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSNNS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSNNS.h:198,Integrability,integrat,integrated,198,"// @(#)root/tmva/rmva $Id$; // Author: Omar Zapata,Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RMethodRSNNS *; * *; * Description: *; * R´s Package RSNNS method based on ROOTR *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRSNNS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSNNS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSNNS.h:3,Performance,perform,performs,3,"// performs classifier testing",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRSNNS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSNNS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSNNS.h:23,Testability,test,testing,23,"// performs classifier testing",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRSNNS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSNNS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSNNS.h:27,Usability,learn,learn,27,"//maximum of iterations to learn",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRSNNS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSNNS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSNNS.h:6,Usability,learn,learning,6,"//the learning function to use",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRSNNS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSNNS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSNNS.h:25,Usability,learn,learning,25,"//the parameters for the learning function",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRSNNS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSNNS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSNNS.h:6,Deployability,update,update,6,"//the update function to use",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRSNNS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSNNS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSNNS.h:25,Deployability,update,update,25,"//the parameters for the update function",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRSNNS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSNNS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSNNS.h:64,Testability,log,logistic,64,"//sets the activation function of the output units to linear or logistic",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRSNNS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSNNS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSNNS.h:12,Integrability,message,message,12,"// get help message text",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRSNNS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSNNS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h:198,Deployability,integrat,integrated,198,"// @(#)root/tmva/rmva $Id$; // Author: Omar Zapata,Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RMethodRSVM *; * *; * Description: *; * R´s Package RSVM method based on ROOTR *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRSVM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h:198,Integrability,integrat,integrated,198,"// @(#)root/tmva/rmva $Id$; // Author: Omar Zapata,Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RMethodRSVM *; * *; * Description: *; * R´s Package RSVM method based on ROOTR *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRSVM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h:3,Performance,perform,performs,3,"// performs classifier testing",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRSVM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h:23,Testability,test,testing,23,"// performs classifier testing",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRSVM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h:34,Modifiability,variab,variables,34,"//A logical vector indicating the variables to be scaled. If; //‘scale’ is of length 1, the value is recycled as many times; //as needed. Per default, data are scaled internally (both ‘x’; //and ‘y’ variables) to zero mean and unit variance. The center; //and scale values are returned and used for later predictions.",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRSVM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h:199,Modifiability,variab,variables,199,"//A logical vector indicating the variables to be scaled. If; //‘scale’ is of length 1, the value is recycled as many times; //as needed. Per default, data are scaled internally (both ‘x’; //and ‘y’ variables) to zero mean and unit variance. The center; //and scale values are returned and used for later predictions.",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRSVM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h:305,Safety,predict,predictions,305,"//A logical vector indicating the variables to be scaled. If; //‘scale’ is of length 1, the value is recycled as many times; //as needed. Per default, data are scaled internally (both ‘x’; //and ‘y’ variables) to zero mean and unit variance. The center; //and scale values are returned and used for later predictions.",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRSVM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h:4,Testability,log,logical,4,"//A logical vector indicating the variables to be scaled. If; //‘scale’ is of length 1, the value is recycled as many times; //as needed. Per default, data are scaled internally (both ‘x’; //and ‘y’ variables) to zero mean and unit variance. The center; //and scale values are returned and used for later predictions.",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRSVM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h:103,Integrability,Depend,Depending,103,"//‘svm’ can be used as a classification machine, as a; //regression machine, or for novelty detection. Depending of; //whether ‘y’ is a factor or not, the default setting for; //‘type’ is ‘C-classification’ or ‘eps-regression’,; //respectively, but may be overwritten by setting an explicit value.; //Valid options are:; // - ‘C-classification’; // - ‘nu-classification’; // - ‘one-classification’ (for novelty detection); // - ‘eps-regression’; // - ‘nu-regression’",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRSVM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h:92,Safety,detect,detection,92,"//‘svm’ can be used as a classification machine, as a; //regression machine, or for novelty detection. Depending of; //whether ‘y’ is a factor or not, the default setting for; //‘type’ is ‘C-classification’ or ‘eps-regression’,; //respectively, but may be overwritten by setting an explicit value.; //Valid options are:; // - ‘C-classification’; // - ‘nu-classification’; // - ‘one-classification’ (for novelty detection); // - ‘eps-regression’; // - ‘nu-regression’",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRSVM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h:411,Safety,detect,detection,411,"//‘svm’ can be used as a classification machine, as a; //regression machine, or for novelty detection. Depending of; //whether ‘y’ is a factor or not, the default setting for; //‘type’ is ‘C-classification’ or ‘eps-regression’,; //respectively, but may be overwritten by setting an explicit value.; //Valid options are:; // - ‘C-classification’; // - ‘nu-classification’; // - ‘one-classification’ (for novelty detection); // - ‘eps-regression’; // - ‘nu-regression’",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRSVM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h:111,Integrability,depend,depending,111,"//the kernel used in training and predicting. You might; //consider changing some of the following parameters, depending on the kernel type.; //linear: u'*v; //polynomial: (gamma*u'*v + coef0)^degree; //radial basis: exp(-gamma*|u-v|^2); //sigmoid: tanh(gamma*u'*v + coef0)",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRSVM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h:34,Safety,predict,predicting,34,"//the kernel used in training and predicting. You might; //consider changing some of the following parameters, depending on the kernel type.; //linear: u'*v; //polynomial: (gamma*u'*v + coef0)^degree; //radial basis: exp(-gamma*|u-v|^2); //sigmoid: tanh(gamma*u'*v + coef0)",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRSVM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h:2,Performance,cache,cache,2,"//cache memory in MB (default 40)",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRSVM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h:2,Availability,toler,tolerance,2,"//tolerance of termination criterion (default: 0.001)",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRSVM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h:202,Availability,Error,Error,202,"//if a integer value k>0 is specified, a k-fold cross; //validation on the training data is performed to assess the; //quality of the model: the accuracy rate for classification; //and the Mean Squared Error for regression",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRSVM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h:92,Performance,perform,performed,92,"//if a integer value k>0 is specified, a k-fold cross; //validation on the training data is performed to assess the; //quality of the model: the accuracy rate for classification; //and the Mean Squared Error for regression",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRSVM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h:57,Security,validat,validation,57,"//if a integer value k>0 is specified, a k-fold cross; //validation on the training data is performed to assess the; //quality of the model: the accuracy rate for classification; //and the Mean Squared Error for regression",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRSVM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h:68,Safety,predict,predictions,68,"//logical indicating whether the model should allow for probability predictions.",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRSVM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h:2,Testability,log,logical,2,"//logical indicating whether the model should allow for probability predictions.",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRSVM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h:2,Testability,log,logical,2,"//logical indicating whether the fitted values should be computed and included in the model or not (default: ‘TRUE’)",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRSVM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h:12,Integrability,message,message,12,"// get help message text",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRSVM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRXGB.h:198,Deployability,integrat,integrated,198,"// @(#)root/tmva/rmva $Id$; // Author: Omar Zapata,Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RMethodRXGB *; * *; * Description: *; * R´s Package xgboost method based on ROOTR *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRXGB.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRXGB.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRXGB.h:198,Integrability,integrat,integrated,198,"// @(#)root/tmva/rmva $Id$; // Author: Omar Zapata,Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RMethodRXGB *; * *; * Description: *; * R´s Package xgboost method based on ROOTR *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRXGB.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRXGB.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRXGB.h:3,Performance,perform,performs,3,"// performs classifier testing",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRXGB.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRXGB.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRXGB.h:23,Testability,test,testing,23,"// performs classifier testing",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRXGB.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRXGB.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRXGB.h:12,Integrability,message,message,12,"// get help message text",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/MethodRXGB.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRXGB.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/RMethodBase.h:198,Deployability,integrat,integrated,198,"// @(#)root/tmva/rmva $Id$; // Author: Omar Zapata,Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RMethodBase *; * *; * Description: *; * Virtual base class for all MVA method based on ROOTR *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/RMethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/RMethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/RMethodBase.h:198,Integrability,integrat,integrated,198,"// @(#)root/tmva/rmva $Id$; // Author: Omar Zapata,Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RMethodBase *; * *; * Description: *; * Virtual base class for all MVA method based on ROOTR *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/RMethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/RMethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/RMethodBase.h:24,Testability,Test,Testing,24,"// constructor used for Testing + Application of the MVA, only (no training),; // using given weight file",MatchSource.CODE_COMMENT,tmva/rmva/inc/TMVA/RMethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/RMethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodC50.cxx:198,Deployability,integrat,integrated,198,"// @(#)root/tmva/rmva $Id$; // Author: Omar Zapata,Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodC50 *; * Web : http://oproject.org *; * *; * Description: *; * Decision Trees and Rule-Based Models *; * *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/rmva/src/MethodC50.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodC50.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodC50.cxx:198,Integrability,integrat,integrated,198,"// @(#)root/tmva/rmva $Id$; // Author: Omar Zapata,Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodC50 *; * Web : http://oproject.org *; * *; * Description: *; * Decision Trees and Rule-Based Models *; * *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/rmva/src/MethodC50.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodC50.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodC50.cxx:2,Safety,predict,predict,2,"//predict(""predict""),",MatchSource.CODE_COMMENT,tmva/rmva/src/MethodC50.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodC50.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodC50.cxx:11,Safety,predict,predict,11,"//predict(""predict""),",MatchSource.CODE_COMMENT,tmva/rmva/src/MethodC50.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodC50.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodC50.cxx:12,Integrability,message,message,12,"// get help message text; //; // typical length of text line:; // ""|--------------------------------------------------------------|""",MatchSource.CODE_COMMENT,tmva/rmva/src/MethodC50.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodC50.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodRSNNS.cxx:198,Deployability,integrat,integrated,198,"// @(#)root/tmva/rmva $Id$; // Author: Omar Zapata,Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodRSNNS *; * Web : http://oproject.org *; * *; * Description: *; * Neural Networks in R using the Stuttgart Neural Network Simulator *; * *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/rmva/src/MethodRSNNS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodRSNNS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodRSNNS.cxx:198,Integrability,integrat,integrated,198,"// @(#)root/tmva/rmva $Id$; // Author: Omar Zapata,Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodRSNNS *; * Web : http://oproject.org *; * *; * Description: *; * Neural Networks in R using the Stuttgart Neural Network Simulator *; * *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/rmva/src/MethodRSNNS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodRSNNS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodRSNNS.cxx:3,Testability,assert,assert,3,"// assert(probValues.size() == 2*mvaValues.size());; // std::copy(probValues.begin()+nEvents, probValues.end(), mvaValues.begin() ); ",MatchSource.CODE_COMMENT,tmva/rmva/src/MethodRSNNS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodRSNNS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodRSNNS.cxx:12,Integrability,message,message,12,"// get help message text; //; // typical length of text line:; // ""|--------------------------------------------------------------|""",MatchSource.CODE_COMMENT,tmva/rmva/src/MethodRSNNS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodRSNNS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodRSVM.cxx:198,Deployability,integrat,integrated,198,"// @(#)root/tmva/rmva $Id$; // Author: Omar Zapata,Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodRSVM- *; * Web : http://oproject.org *; * *; * Description: *; * Support Vector Machines *; * *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/rmva/src/MethodRSVM.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodRSVM.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodRSVM.cxx:198,Integrability,integrat,integrated,198,"// @(#)root/tmva/rmva $Id$; // Author: Omar Zapata,Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodRSVM- *; * Web : http://oproject.org *; * *; * Description: *; * Support Vector Machines *; * *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/rmva/src/MethodRSVM.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodRSVM.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodRSVM.cxx:12,Integrability,message,message,12,"// get help message text; //; // typical length of text line:; // ""|--------------------------------------------------------------|""",MatchSource.CODE_COMMENT,tmva/rmva/src/MethodRSVM.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodRSVM.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodRXGB.cxx:198,Deployability,integrat,integrated,198,"// @(#)root/tmva/rmva $Id$; // Author: Omar Zapata,Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodRXGB *; * Web : http://oproject.org *; * *; * Description: *; * R eXtreme Gradient Boosting *; * *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/rmva/src/MethodRXGB.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodRXGB.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodRXGB.cxx:198,Integrability,integrat,integrated,198,"// @(#)root/tmva/rmva $Id$; // Author: Omar Zapata,Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodRXGB *; * Web : http://oproject.org *; * *; * Description: *; * R eXtreme Gradient Boosting *; * *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/rmva/src/MethodRXGB.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodRXGB.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodRXGB.cxx:12,Integrability,message,message,12,"// get help message text; //; // typical length of text line:; // ""|--------------------------------------------------------------|""",MatchSource.CODE_COMMENT,tmva/rmva/src/MethodRXGB.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodRXGB.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/RMethodBase.cxx:198,Deployability,integrat,integrated,198,"// @(#)root/tmva/rmva $Id$; // Author: Omar Zapata,Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RMethodBase *; * *; * Description: *; * Virtual base class for all MVA method based on ROOTR *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/rmva/src/RMethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/RMethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/RMethodBase.cxx:198,Integrability,integrat,integrated,198,"// @(#)root/tmva/rmva $Id$; // Author: Omar Zapata,Lorenzo Moneta, Sergei Gleyzer 2015; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RMethodBase *; * *; * Description: *; * Virtual base class for all MVA method based on ROOTR *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/rmva/src/RMethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/RMethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/RMethodBase.cxx:31,Performance,Load,Loading,31,"///////////////////////////; //Loading Training Data //; ///////////////////////////",MatchSource.CODE_COMMENT,tmva/rmva/src/RMethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/RMethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/RMethodBase.cxx:28,Performance,Load,Loading,28,"////////////////////////; //Loading Test Data //; ////////////////////////",MatchSource.CODE_COMMENT,tmva/rmva/src/RMethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/RMethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/RMethodBase.cxx:36,Testability,Test,Test,36,"////////////////////////; //Loading Test Data //; ////////////////////////",MatchSource.CODE_COMMENT,tmva/rmva/src/RMethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/RMethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/RMethodBase.cxx:59,Testability,test,testing,59,"//array of columns for every var to create a dataframe for testing",MatchSource.CODE_COMMENT,tmva/rmva/src/RMethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/RMethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/RMethodBase.cxx:65,Testability,test,testing,65,"//array of columns for every spectator to create a dataframe for testing",MatchSource.CODE_COMMENT,tmva/rmva/src/RMethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/RMethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/FunctionList.hxx:3,Deployability,Update,Update,3,"// Update functions",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/FunctionList.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/FunctionList.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/RFunction_MLP.hxx:13,Modifiability,Layers,Layers,13,"// Number of Layers in MLP",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/RFunction_MLP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/RFunction_MLP.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/RModel_GNN.hxx:3,Deployability,update,update,3,"// update blocks",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/RModel_GNN.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/RModel_GNN.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/RModel_GNN.hxx:3,Deployability,update,update,3,"// update function for edges, nodes & global attributes",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/RModel_GNN.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/RModel_GNN.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/RModel_GraphIndependent.hxx:3,Deployability,update,update,3,"// update blocks",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/RModel_GraphIndependent.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/RModel_GraphIndependent.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_BasicBinary.hxx:3,Deployability,Update,Update,3,"// Update the data and the shape of A",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_BasicBinary.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_BasicBinary.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_BasicBinary.hxx:10,Deployability,update,update,10,"// do not update tensor B but add broadcasted one (since it can be input to some other operators)",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_BasicBinary.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_BasicBinary.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Comparision.hxx:3,Deployability,Update,Update,3,"// Update the data and the shape of A",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_Comparision.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Comparision.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Comparision.hxx:3,Deployability,Update,Update,3,"// Update the data and the shape of B",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_Comparision.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Comparision.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Comparision.hxx:94,Modifiability,variab,variable,94,"// check if this is not output operators to add a specific line for definining the tensor_xxx variable",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_Comparision.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Comparision.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Comparision.hxx:56,Modifiability,variab,variable,56,"// since output is a boolean need to add the tensor_xxx variable since it is not defined as a pointer to a boolean std::vector",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_Comparision.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Comparision.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Concat.hxx:3,Deployability,patch,patch,3,"// patch for concat for case {1,x} with {y} remove the 1 in first tensor; // if (fInputShapes.size() == 2) {; // if (fInputShapes[1].size() < fInputShapes[0].size()) {; // if (fInputShapes[0].front().dim == 1) {; // std::cout << ""Patch concat and make first input with shape "" << ConvertDynamicShapeToString(fInputShapes[0]); // << "" compatible with second input "" << ConvertDynamicShapeToString(fInputShapes[1]) << ""by removing firs dim"" << std::endl;; // fInputShapes[0].erase(fInputShapes[0].begin());; // }; // }; // }",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_Concat.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Concat.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Concat.hxx:230,Deployability,Patch,Patch,230,"// patch for concat for case {1,x} with {y} remove the 1 in first tensor; // if (fInputShapes.size() == 2) {; // if (fInputShapes[1].size() < fInputShapes[0].size()) {; // if (fInputShapes[0].front().dim == 1) {; // std::cout << ""Patch concat and make first input with shape "" << ConvertDynamicShapeToString(fInputShapes[0]); // << "" compatible with second input "" << ConvertDynamicShapeToString(fInputShapes[1]) << ""by removing firs dim"" << std::endl;; // fInputShapes[0].erase(fInputShapes[0].begin());; // }; // }; // }",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_Concat.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Concat.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Conv.hxx:42,Integrability,depend,depending,42,"// add extra padding at beginning or end (depending if SAME_UPPER or SAME_LOWER); // need to check this!",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_Conv.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Conv.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Conv.hxx:67,Modifiability,variab,variables,67,"// include a separate scope to avoid defining unique operator temp variables",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_Conv.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Conv.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Conv.hxx:31,Safety,avoid,avoid,31,"// include a separate scope to avoid defining unique operator temp variables",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_Conv.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Conv.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Conv.hxx:28,Integrability,rout,routines,28,/*! \brief Returns the blas routines needed to compile the generated code; */,MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_Conv.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Conv.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_ConvTranspose.hxx:28,Integrability,rout,routines,28,/*! \brief Returns the blas routines needed to compile the generated code; */,MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_ConvTranspose.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_ConvTranspose.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Expand.hxx:3,Deployability,Update,Update,3,"// Update the data and the shape of X",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_Expand.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Expand.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_EyeLike.hxx:28,Safety,avoid,avoid,28,"// add a dummy statement to avoid warning for unused input",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_EyeLike.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_EyeLike.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Gather.hxx:3,Deployability,update,update,3,"// update indices data in case of negative dim values",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_Gather.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Gather.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Gather.hxx:25,Modifiability,variab,variables,25,"// add a scope for local variables",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_Gather.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Gather.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Gemm.hxx:67,Modifiability,variab,variables,67,"// include a separate scope to avoid defining unique operator temp variables",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_Gemm.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Gemm.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Gemm.hxx:31,Safety,avoid,avoid,31,"// include a separate scope to avoid defining unique operator temp variables",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_Gemm.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Gemm.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_GRU.hxx:26,Modifiability,layers,layers,26,"///< Number of the hidden layers",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_GRU.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_GRU.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_GRU.hxx:387,Modifiability,layers,layers,387,/*! \brief Constructor of ROperator_GRU from the attributes; *; * \param activation_alpha scaling values used by some activation functions; * \param activation_beta scaling values used by some activation functions; * \param activations activation functions; * \param clip clip threshold; * \param direction direction of processing of the sequneces; * \param hidden_size number of hidden layers; * \param layout data layout; * \param linear_before_reset Linear layer before the reset gate; * \param nameX name of the input tensor; * \param nameW name of the weight tensor; * \param nameR name of the recurrence tensor; * \param nameB name of the bias tensor; * \param nameSequence_lens name of the length of the sequences; * \param nameInitial_h name of the initial value of the hidden states; * \param nameY name of the output; * \param nameY_h name of the last sequence of the output; */,MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_GRU.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_GRU.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_GRU.hxx:28,Integrability,rout,routines,28,/*! \brief Returns the blas routines needed to compile the generated code; */,MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_GRU.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_GRU.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_LSTM.hxx:26,Modifiability,layers,layers,26,"///< Number of the hidden layers",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_LSTM.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_LSTM.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_LSTM.hxx:388,Modifiability,layers,layers,388,/*! \brief Constructor of ROperator_LSTM from the attributes; *; * \param activation_alpha scaling values used by some activation functions; * \param activation_beta scaling values used by some activation functions; * \param activations activation functions; * \param clip clip threshold; * \param direction direction of processing of the sequneces; * \param hidden_size number of hidden layers; * \param input_forget forget gate; * \param layout data layout; * \param nameX name of the input tensor; * \param nameW name of the weight tensor; * \param nameR name of the recurrence tensor; * \param nameB name of the bias tensor; * \param nameSequence_lens name of the length of the sequences; * \param nameInitial_h name of the initial value of the hidden states; * \param nameInitial_c name of the initial value of the cell states; * \param nameP name of the peepholes tensor; * \param nameY name of the output; * \param nameY_h name of the last sequence of the output; * \param nameY_c name of the last sequence of the cell states; */,MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_LSTM.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_LSTM.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_LSTM.hxx:28,Integrability,rout,routines,28,/*! \brief Returns the blas routines needed to compile the generated code; */,MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_LSTM.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_LSTM.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Pool.hxx:42,Integrability,depend,depending,42,"// add extra padding at beginning or end (depending if SAME_UPPER or SAME_LOWER); // need to check this!",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_Pool.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Pool.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Pool.hxx:25,Safety,avoid,avoid,25,"// create a new scope to avoid name clash",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_Pool.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Pool.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Pool.hxx:11,Modifiability,layers,layers,11,"// loop on layers of filtered region",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_Pool.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Pool.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Pool.hxx:18,Modifiability,layers,layers,18,"// end loop on k (layers of image)",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_Pool.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Pool.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Reduce.hxx:16,Energy Efficiency,reduce,reduced,16,"// set to 1 the reduced dims",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_Reduce.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Reduce.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Reduce.hxx:9,Energy Efficiency,reduce,reduced,9,"// erase reduced dimensions, but keep last one",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_Reduce.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Reduce.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Reduce.hxx:18,Energy Efficiency,reduce,reduced,18,"// check where is reduced axes are last one. In this case we can do a faster implementation",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_Reduce.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Reduce.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Reduce.hxx:17,Energy Efficiency,reduce,reduced,17,"// if k is not a reduced axis is not last ones",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_Reduce.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Reduce.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Reduce.hxx:11,Energy Efficiency,reduce,reduced,11,"// loop on reduced axis",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_Reduce.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Reduce.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Reduce.hxx:48,Energy Efficiency,reduce,reduced,48,"// end loop on input elements; // normalize for reduced mean",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_Reduce.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Reduce.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_RNN.hxx:26,Modifiability,layers,layers,26,"///< Number of the hidden layers",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_RNN.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_RNN.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_RNN.hxx:387,Modifiability,layers,layers,387,/*! \brief Constructor of ROperator_RNN from the attributes; *; * \param activation_alpha scaling values used by some activation functions; * \param activation_beta scaling values used by some activation functions; * \param activations activation functions; * \param clip clip threshold; * \param direction direction of processing of the sequneces; * \param hidden_size number of hidden layers; * \param layout data layout; * \param nameX name of the input tensor; * \param nameW name of the weight tensor; * \param nameR name of the recurrence tensor; * \param nameB name of the bias tensor; * \param nameSequence_lens name of the length of the sequences; * \param nameInitial_h name of the initial value of the hidden states; * \param nameY name of the output; * \param nameY_h name of the last sequence of the output; */,MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_RNN.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_RNN.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_RNN.hxx:28,Integrability,rout,routines,28,/*! \brief Returns the blas routines needed to compile the generated code; */,MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_RNN.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_RNN.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Shape.hxx:28,Safety,avoid,avoid,28,"// add a dummy statement to avoid warning for unused input",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_Shape.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Shape.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Slice.hxx:119,Availability,avail,available,119,"// output shape data; // saved Start/End.Steps are corrected from initial ONNX for negative/default values; // and are available for each axis",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_Slice.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Slice.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Slice.hxx:26,Integrability,depend,depending,26,"// loop on the dimensions depending no the orders",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_Slice.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Slice.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Softmax.hxx:7,Safety,safe,safe,7,"// use safe numerically implementation by subtracting max of tensor",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_Softmax.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Softmax.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_TopK.hxx:7,Testability,log,logic,7,"//main logic",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/ROperator_TopK.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_TopK.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/SOFIEHelpers.hxx:40,Integrability,wrap,wrap,40,"///Helper class used by SOFIEFunctor to wrap the; ///infer signature interface to RDataFrame",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/SOFIEHelpers.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/SOFIEHelpers.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/SOFIEHelpers.hxx:69,Integrability,interface,interface,69,"///Helper class used by SOFIEFunctor to wrap the; ///infer signature interface to RDataFrame",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/SOFIEHelpers.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/SOFIEHelpers.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/SOFIEHelpers.hxx:27,Integrability,wrap,wrap,27,"/// SofieFunctor : used to wrap the infer function of the; /// generated model by SOFIE in a RDF compatible signature.; /// The number of slots is an optional parameter used to; /// create multiple SOFIE Sessions, which can be run in a parallel; /// model evaluation. One should use as number of slots the number of slots used by; /// RDataFrame. By default, in case of `nslots=0`, only a single Session will be created; /// and the Functor cannot be run in parallel.; /// Examples of using the SofieFunctor are the C++ tutorial TMVA_SOFIE_RDataFrame.C; /// and the Python tutorial TMVA_SOFIE_RDataFrame.py which makes use of the ROOT JIT; /// to compile on the fly the generated SOFIE model.",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/SOFIEHelpers.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/SOFIEHelpers.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/SOFIE_common.hxx:3,Deployability,Update,Update,3,"// Update current length",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/SOFIE_common.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/SOFIE_common.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/SOFIE_common.hxx:3,Deployability,Update,Update,3,"// Update broadcasted data",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/SOFIE_common.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/SOFIE_common.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/SOFIE_common.hxx:3,Deployability,Update,Update,3,"// Update the number of arrays",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/SOFIE_common.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/SOFIE_common.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/SOFIE_common.hxx:13,Energy Efficiency,efficient,efficient,13,"/// im2col : efficient function to re-arrange input data of convolution to a matrix; /// that can be used by BLAS; /// Use trick to loop on each element of filtered region first and follow input data layout; /// By doing this reads and writes are of consecutive data in memory and one gains in efficiency; /// The resulting matrix will be already transposed and can be used directly in BLAS; /// since output will be a matrix : (channels*kernel_h*kernel_w , output_h*output_w); /// Example: with an input matrix; /// a1 a2 a3; /// b1 b2 b3 and a 2x2 kernel (k1,k2,k3,k4) and padding 1 :; /// c1 c2 c3; /// outpout will be a matrix (4 x 16); /// the routine will follow output order :; // first all elements which will be operated by k1 then k2 then k3; /// -> ( 0 0 0 0 0 a1 a2 a3 0 b1 b2 b3 0 c1 c2 c3 ) all elements for k1; /// ( 0 0 0 0 a1 a2 a3 0 b1 b2 b3 0 c1 c2 c3 0 ) for k2; /// ( 0 a1 a2 a3 0 b1 b2 b3 0 c1 c2 c3 0 0 0 0 ) for k3; /// ( a1 a2 a3 0 b1 b2 b3 0 c1 c2 c3 0 0 0 0 0 ) for k4; ///",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/SOFIE_common.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/SOFIE_common.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/SOFIE_common.hxx:649,Integrability,rout,routine,649,"/// im2col : efficient function to re-arrange input data of convolution to a matrix; /// that can be used by BLAS; /// Use trick to loop on each element of filtered region first and follow input data layout; /// By doing this reads and writes are of consecutive data in memory and one gains in efficiency; /// The resulting matrix will be already transposed and can be used directly in BLAS; /// since output will be a matrix : (channels*kernel_h*kernel_w , output_h*output_w); /// Example: with an input matrix; /// a1 a2 a3; /// b1 b2 b3 and a 2x2 kernel (k1,k2,k3,k4) and padding 1 :; /// c1 c2 c3; /// outpout will be a matrix (4 x 16); /// the routine will follow output order :; // first all elements which will be operated by k1 then k2 then k3; /// -> ( 0 0 0 0 0 a1 a2 a3 0 b1 b2 b3 0 c1 c2 c3 ) all elements for k1; /// ( 0 0 0 0 a1 a2 a3 0 b1 b2 b3 0 c1 c2 c3 0 ) for k2; /// ( 0 a1 a2 a3 0 b1 b2 b3 0 c1 c2 c3 0 0 0 0 ) for k3; /// ( a1 a2 a3 0 b1 b2 b3 0 c1 c2 c3 0 0 0 0 0 ) for k4; ///",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/SOFIE_common.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/SOFIE_common.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/SOFIE_common.hxx:2,Testability,assert,assert,2,"//assert(input_row*width+input_col < height * width * channels);; //assert(data_col - data_col_0 < output_h*output_w*channels);; // std::cout << ""COL2IM: input_row"" << "" "" << input_row << "" "" << input_col; // << "" <---- "" << data_col - data_col_0 << "" values: ""; // << data_im[input_row * width + input_col] << "" <--- "" << *data_col << std::endl;",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/SOFIE_common.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/SOFIE_common.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/SOFIE_common.hxx:68,Testability,assert,assert,68,"//assert(input_row*width+input_col < height * width * channels);; //assert(data_col - data_col_0 < output_h*output_w*channels);; // std::cout << ""COL2IM: input_row"" << "" "" << input_row << "" "" << input_col; // << "" <---- "" << data_col - data_col_0 << "" values: ""; // << data_im[input_row * width + input_col] << "" <--- "" << *data_col << std::endl;",MatchSource.CODE_COMMENT,tmva/sofie/inc/TMVA/SOFIE_common.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/SOFIE_common.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RFunction_MLP.cxx:27,Modifiability,layers,layers,27,"// assuming all the linear layers has a kernel and a bias initialized tensors",MatchSource.CODE_COMMENT,tmva/sofie/src/RFunction_MLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RFunction_MLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel.cxx:19,Integrability,rout,routines,19,"// add needed blas routines and libs",MatchSource.CODE_COMMENT,tmva/sofie/src/RModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel.cxx:9,Energy Efficiency,allocate,allocate,9,"// don't allocate pointer since boolean vector don't have the .data() member",MatchSource.CODE_COMMENT,tmva/sofie/src/RModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel.cxx:57,Energy Efficiency,allocate,allocated,57,"// include also dynamic tensors since the vectors can be allocated with a size larger than their output; // we need a special handling for bool type allocated as vector<bool>",MatchSource.CODE_COMMENT,tmva/sofie/src/RModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel.cxx:149,Energy Efficiency,allocate,allocated,149,"// include also dynamic tensors since the vectors can be allocated with a size larger than their output; // we need a special handling for bool type allocated as vector<bool>",MatchSource.CODE_COMMENT,tmva/sofie/src/RModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel.cxx:44,Energy Efficiency,allocate,allocate,44,"// now we have passed the parameters we can allocate the dynamic tensors",MatchSource.CODE_COMMENT,tmva/sofie/src/RModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GNN.cxx:49,Deployability,Update,Update,49,"// Generating Infer function definition for Edge Update function",MatchSource.CODE_COMMENT,tmva/sofie/src/RModel_GNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GNN.cxx:38,Deployability,update,updates,38,"// there are 4 input tensors for edge updates: {edges, receiver nodes, sender nodes, globals }",MatchSource.CODE_COMMENT,tmva/sofie/src/RModel_GNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GNN.cxx:49,Deployability,Update,Update,49,"// Generating Infer function definition for Node Update function; // num_node_features is the output one; //block_size = num_nodes;; // there are 3 input tensors for node updates: {received edges, nodes, globals }",MatchSource.CODE_COMMENT,tmva/sofie/src/RModel_GNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GNN.cxx:171,Deployability,update,updates,171,"// Generating Infer function definition for Node Update function; // num_node_features is the output one; //block_size = num_nodes;; // there are 3 input tensors for node updates: {received edges, nodes, globals }",MatchSource.CODE_COMMENT,tmva/sofie/src/RModel_GNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GNN.cxx:51,Deployability,Update,Update,51,"// Generating Infer function definition for Global Update function",MatchSource.CODE_COMMENT,tmva/sofie/src/RModel_GNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GNN.cxx:82,Deployability,update,update,82,"// correct for difference in global size (check shape[1] of output of the globals update)",MatchSource.CODE_COMMENT,tmva/sofie/src/RModel_GNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GNN.cxx:40,Deployability,update,updates,40,"// create temp vector for edge and node updates",MatchSource.CODE_COMMENT,tmva/sofie/src/RModel_GNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GNN.cxx:13,Deployability,update,updated,13,"// computing updated edge attributes",MatchSource.CODE_COMMENT,tmva/sofie/src/RModel_GNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GNN.cxx:13,Deployability,update,updated,13,"// computing updated node attributes",MatchSource.CODE_COMMENT,tmva/sofie/src/RModel_GNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GNN.cxx:43,Energy Efficiency,allocate,allocate,43,"// approximate number of receivers/node to allocate vector",MatchSource.CODE_COMMENT,tmva/sofie/src/RModel_GNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GNN.cxx:13,Deployability,update,updated,13,"// computing updated node attributes",MatchSource.CODE_COMMENT,tmva/sofie/src/RModel_GNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GNN.cxx:40,Deployability,update,update,40,"// aggregating edges & nodes for global update",MatchSource.CODE_COMMENT,tmva/sofie/src/RModel_GNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GNN.cxx:13,Deployability,update,updated,13,"// computing updated global attributes",MatchSource.CODE_COMMENT,tmva/sofie/src/RModel_GNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GraphIndependent.cxx:48,Deployability,update,update,48,"//Generating Infer function definition for Edge update function",MatchSource.CODE_COMMENT,tmva/sofie/src/RModel_GraphIndependent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GraphIndependent.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GraphIndependent.cxx:49,Deployability,Update,Update,49,"// Generating Infer function definition for Node Update function; // num_node_features is the output one",MatchSource.CODE_COMMENT,tmva/sofie/src/RModel_GraphIndependent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GraphIndependent.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GraphIndependent.cxx:51,Deployability,Update,Update,51,"// Generating Infer function definition for Global Update function",MatchSource.CODE_COMMENT,tmva/sofie/src/RModel_GraphIndependent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GraphIndependent.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GraphIndependent.cxx:13,Deployability,update,updated,13,"// computing updated edge attributes; // could use std::span",MatchSource.CODE_COMMENT,tmva/sofie/src/RModel_GraphIndependent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GraphIndependent.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GraphIndependent.cxx:13,Deployability,update,updated,13,"// computing updated node attributes",MatchSource.CODE_COMMENT,tmva/sofie/src/RModel_GraphIndependent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GraphIndependent.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GraphIndependent.cxx:13,Deployability,update,updated,13,"// computing updated node attributes",MatchSource.CODE_COMMENT,tmva/sofie/src/RModel_GraphIndependent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GraphIndependent.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GraphIndependent.cxx:13,Deployability,update,updated,13,"// computing updated global attributes",MatchSource.CODE_COMMENT,tmva/sofie/src/RModel_GraphIndependent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RModel_GraphIndependent.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/Conv1dModelGenerator.py:20,Testability,test,test,20,"# evaluate model in test mode",MatchSource.CODE_COMMENT,tmva/sofie/test/Conv1dModelGenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/Conv1dModelGenerator.py
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/Conv2dModelGenerator.py:20,Testability,test,test,20,"# evaluate model in test mode",MatchSource.CODE_COMMENT,tmva/sofie/test/Conv2dModelGenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/Conv2dModelGenerator.py
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/Conv3dModelGenerator.py:20,Testability,test,test,20,"# evaluate model in test mode",MatchSource.CODE_COMMENT,tmva/sofie/test/Conv3dModelGenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/Conv3dModelGenerator.py
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/ConvTrans2dModelGenerator.py:20,Testability,test,test,20,"# evaluate model in test mode",MatchSource.CODE_COMMENT,tmva/sofie/test/ConvTrans2dModelGenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/ConvTrans2dModelGenerator.py
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/RecurrentModelGenerator.py:20,Testability,test,test,20,"# evaluate model in test mode",MatchSource.CODE_COMMENT,tmva/sofie/test/RecurrentModelGenerator.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/RecurrentModelGenerator.py
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromONNX.cxx:54,Availability,TOLER,TOLERANCE,54,"/*TEST(ONNX, Linear32RootFeature); {; constexpr float TOLERANCE = DEFAULT_TOLERANCE;. // Preparing the standard all-ones input; std::vector<float> input(3200);; std::fill_n(input.data(), input.size(), 1.0f);; TMVA_SOFIE_Linear32RootFeacture::Session s(""Linear_32_FromONNX.root"");; std::vector<float> output = s.infer(input.data());. // Checking output size; EXPECT_EQ(output.size(), sizeof(Linear_32_ExpectedOutput::all_ones) / sizeof(float));. float *correct = Linear_32_ExpectedOutput::all_ones;. // Checking every output value, one by one; for (size_t i = 0; i < output.size(); ++i) {; EXPECT_LE(std::abs(output[i] - correct[i]), TOLERANCE);; }; }*/",MatchSource.CODE_COMMENT,tmva/sofie/test/TestCustomModelsFromONNX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromONNX.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromONNX.cxx:633,Availability,TOLER,TOLERANCE,633,"/*TEST(ONNX, Linear32RootFeature); {; constexpr float TOLERANCE = DEFAULT_TOLERANCE;. // Preparing the standard all-ones input; std::vector<float> input(3200);; std::fill_n(input.data(), input.size(), 1.0f);; TMVA_SOFIE_Linear32RootFeacture::Session s(""Linear_32_FromONNX.root"");; std::vector<float> output = s.infer(input.data());. // Checking output size; EXPECT_EQ(output.size(), sizeof(Linear_32_ExpectedOutput::all_ones) / sizeof(float));. float *correct = Linear_32_ExpectedOutput::all_ones;. // Checking every output value, one by one; for (size_t i = 0; i < output.size(); ++i) {; EXPECT_LE(std::abs(output[i] - correct[i]), TOLERANCE);; }; }*/",MatchSource.CODE_COMMENT,tmva/sofie/test/TestCustomModelsFromONNX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromONNX.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromONNX.cxx:2,Testability,TEST,TEST,2,"/*TEST(ONNX, Linear32RootFeature); {; constexpr float TOLERANCE = DEFAULT_TOLERANCE;. // Preparing the standard all-ones input; std::vector<float> input(3200);; std::fill_n(input.data(), input.size(), 1.0f);; TMVA_SOFIE_Linear32RootFeacture::Session s(""Linear_32_FromONNX.root"");; std::vector<float> output = s.infer(input.data());. // Checking output size; EXPECT_EQ(output.size(), sizeof(Linear_32_ExpectedOutput::all_ones) / sizeof(float));. float *correct = Linear_32_ExpectedOutput::all_ones;. // Checking every output value, one by one; for (size_t i = 0; i < output.size(); ++i) {; EXPECT_LE(std::abs(output[i] - correct[i]), TOLERANCE);; }; }*/",MatchSource.CODE_COMMENT,tmva/sofie/test/TestCustomModelsFromONNX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromONNX.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromONNX.cxx:12,Testability,test,test,12,"// Disables test (asymmetric padding not supported)",MatchSource.CODE_COMMENT,tmva/sofie/test/TestCustomModelsFromONNX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromONNX.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromONNX.cxx:7,Testability,test,tests,7,"// GRU tests",MatchSource.CODE_COMMENT,tmva/sofie/test/TestCustomModelsFromONNX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromONNX.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromONNX.cxx:52,Availability,TOLER,TOLERANCE,52,"/*; TEST(ONNX, ConvTranspose3d); {; constexpr float TOLERANCE = DEFAULT_TOLERANCE;. // Preparing the standard all-ones input; std::vector<float> input(8);; std::iota(input.begin(), input.end(), 0.0f);; TMVA_SOFIE_ConvTranspose3d::Session s(""ConvTranspose3d_FromONNX.dat"");; std::vector<float> output(s.infer(input.data()));. // Checking output size; EXPECT_EQ(output.size(), sizeof(ConvTranspose3d_ExpectedOutput::output) / sizeof(float));. float *correct = ConvTranspose3d_ExpectedOutput::output;. // Checking every output value, one by one; for (size_t i = 0; i < output.size(); ++i) {; EXPECT_LE(std::abs(output[i] - correct[i]), TOLERANCE);; }; }; */",MatchSource.CODE_COMMENT,tmva/sofie/test/TestCustomModelsFromONNX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromONNX.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromONNX.cxx:633,Availability,TOLER,TOLERANCE,633,"/*; TEST(ONNX, ConvTranspose3d); {; constexpr float TOLERANCE = DEFAULT_TOLERANCE;. // Preparing the standard all-ones input; std::vector<float> input(8);; std::iota(input.begin(), input.end(), 0.0f);; TMVA_SOFIE_ConvTranspose3d::Session s(""ConvTranspose3d_FromONNX.dat"");; std::vector<float> output(s.infer(input.data()));. // Checking output size; EXPECT_EQ(output.size(), sizeof(ConvTranspose3d_ExpectedOutput::output) / sizeof(float));. float *correct = ConvTranspose3d_ExpectedOutput::output;. // Checking every output value, one by one; for (size_t i = 0; i < output.size(); ++i) {; EXPECT_LE(std::abs(output[i] - correct[i]), TOLERANCE);; }; }; */",MatchSource.CODE_COMMENT,tmva/sofie/test/TestCustomModelsFromONNX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromONNX.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromONNX.cxx:4,Testability,TEST,TEST,4,"/*; TEST(ONNX, ConvTranspose3d); {; constexpr float TOLERANCE = DEFAULT_TOLERANCE;. // Preparing the standard all-ones input; std::vector<float> input(8);; std::iota(input.begin(), input.end(), 0.0f);; TMVA_SOFIE_ConvTranspose3d::Session s(""ConvTranspose3d_FromONNX.dat"");; std::vector<float> output(s.infer(input.data()));. // Checking output size; EXPECT_EQ(output.size(), sizeof(ConvTranspose3d_ExpectedOutput::output) / sizeof(float));. float *correct = ConvTranspose3d_ExpectedOutput::output;. // Checking every output value, one by one; for (size_t i = 0; i < output.size(); ++i) {; EXPECT_LE(std::abs(output[i] - correct[i]), TOLERANCE);; }; }; */",MatchSource.CODE_COMMENT,tmva/sofie/test/TestCustomModelsFromONNX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromONNX.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromROOT.cxx:3,Testability,Test,Testing,3,"// Testing the actual and expected output sizes",MatchSource.CODE_COMMENT,tmva/sofie/test/TestCustomModelsFromROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromROOT.cxx:3,Testability,Test,Testing,3,"// Testing the actual and expected output values",MatchSource.CODE_COMMENT,tmva/sofie/test/TestCustomModelsFromROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromROOT.cxx:45,Availability,TOLER,TOLERANCE,45,"/*; TEST(ROOT, Linear32); {; constexpr float TOLERANCE = DEFAULT_TOLERANCE;. // Preparing the standard all-ones input; std::vector<float> input(3200);; std::fill_n(input.data(), input.size(), 1.0f);; TMVA_SOFIE_Linear_32::Session s(""Linear_32_FromROOT.dat"");; std::vector<float> output = s.infer(input.data());. // Testing the actual and expected output sizes; EXPECT_EQ(output.size(), sizeof(Linear_32_ExpectedOutput::all_ones) / sizeof(float));. float *correct = Linear_32_ExpectedOutput::all_ones;. // Testing the actual and expected output values; for (size_t i = 0; i < output.size(); ++i) {; EXPECT_LE(std::abs(output[i] - correct[i]), TOLERANCE);; }; }. TEST(ROOT, Linear64); {; constexpr float TOLERANCE = DEFAULT_TOLERANCE;. // Preparing the standard all-ones input; std::vector<float> input(6400);; std::fill_n(input.data(), input.size(), 1.0f);; TMVA_SOFIE_Linear_64::Session s(""Linear_64_FromROOT.dat"");; std::vector<float> output = s.infer(input.data());. // Testing the actual and expected output values; EXPECT_EQ(output.size(), sizeof(Linear_64_ExpectedOutput::all_ones) / sizeof(float));. float *correct = Linear_64_ExpectedOutput::all_ones;. // Testing the actual and expected output values; for (size_t i = 0; i < output.size(); ++i) {; EXPECT_LE(std::abs(output[i] - correct[i]), TOLERANCE);; }; }; */",MatchSource.CODE_COMMENT,tmva/sofie/test/TestCustomModelsFromROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromROOT.cxx:642,Availability,TOLER,TOLERANCE,642,"/*; TEST(ROOT, Linear32); {; constexpr float TOLERANCE = DEFAULT_TOLERANCE;. // Preparing the standard all-ones input; std::vector<float> input(3200);; std::fill_n(input.data(), input.size(), 1.0f);; TMVA_SOFIE_Linear_32::Session s(""Linear_32_FromROOT.dat"");; std::vector<float> output = s.infer(input.data());. // Testing the actual and expected output sizes; EXPECT_EQ(output.size(), sizeof(Linear_32_ExpectedOutput::all_ones) / sizeof(float));. float *correct = Linear_32_ExpectedOutput::all_ones;. // Testing the actual and expected output values; for (size_t i = 0; i < output.size(); ++i) {; EXPECT_LE(std::abs(output[i] - correct[i]), TOLERANCE);; }; }. TEST(ROOT, Linear64); {; constexpr float TOLERANCE = DEFAULT_TOLERANCE;. // Preparing the standard all-ones input; std::vector<float> input(6400);; std::fill_n(input.data(), input.size(), 1.0f);; TMVA_SOFIE_Linear_64::Session s(""Linear_64_FromROOT.dat"");; std::vector<float> output = s.infer(input.data());. // Testing the actual and expected output values; EXPECT_EQ(output.size(), sizeof(Linear_64_ExpectedOutput::all_ones) / sizeof(float));. float *correct = Linear_64_ExpectedOutput::all_ones;. // Testing the actual and expected output values; for (size_t i = 0; i < output.size(); ++i) {; EXPECT_LE(std::abs(output[i] - correct[i]), TOLERANCE);; }; }; */",MatchSource.CODE_COMMENT,tmva/sofie/test/TestCustomModelsFromROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromROOT.cxx:702,Availability,TOLER,TOLERANCE,702,"/*; TEST(ROOT, Linear32); {; constexpr float TOLERANCE = DEFAULT_TOLERANCE;. // Preparing the standard all-ones input; std::vector<float> input(3200);; std::fill_n(input.data(), input.size(), 1.0f);; TMVA_SOFIE_Linear_32::Session s(""Linear_32_FromROOT.dat"");; std::vector<float> output = s.infer(input.data());. // Testing the actual and expected output sizes; EXPECT_EQ(output.size(), sizeof(Linear_32_ExpectedOutput::all_ones) / sizeof(float));. float *correct = Linear_32_ExpectedOutput::all_ones;. // Testing the actual and expected output values; for (size_t i = 0; i < output.size(); ++i) {; EXPECT_LE(std::abs(output[i] - correct[i]), TOLERANCE);; }; }. TEST(ROOT, Linear64); {; constexpr float TOLERANCE = DEFAULT_TOLERANCE;. // Preparing the standard all-ones input; std::vector<float> input(6400);; std::fill_n(input.data(), input.size(), 1.0f);; TMVA_SOFIE_Linear_64::Session s(""Linear_64_FromROOT.dat"");; std::vector<float> output = s.infer(input.data());. // Testing the actual and expected output values; EXPECT_EQ(output.size(), sizeof(Linear_64_ExpectedOutput::all_ones) / sizeof(float));. float *correct = Linear_64_ExpectedOutput::all_ones;. // Testing the actual and expected output values; for (size_t i = 0; i < output.size(); ++i) {; EXPECT_LE(std::abs(output[i] - correct[i]), TOLERANCE);; }; }; */",MatchSource.CODE_COMMENT,tmva/sofie/test/TestCustomModelsFromROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromROOT.cxx:1300,Availability,TOLER,TOLERANCE,1300,"/*; TEST(ROOT, Linear32); {; constexpr float TOLERANCE = DEFAULT_TOLERANCE;. // Preparing the standard all-ones input; std::vector<float> input(3200);; std::fill_n(input.data(), input.size(), 1.0f);; TMVA_SOFIE_Linear_32::Session s(""Linear_32_FromROOT.dat"");; std::vector<float> output = s.infer(input.data());. // Testing the actual and expected output sizes; EXPECT_EQ(output.size(), sizeof(Linear_32_ExpectedOutput::all_ones) / sizeof(float));. float *correct = Linear_32_ExpectedOutput::all_ones;. // Testing the actual and expected output values; for (size_t i = 0; i < output.size(); ++i) {; EXPECT_LE(std::abs(output[i] - correct[i]), TOLERANCE);; }; }. TEST(ROOT, Linear64); {; constexpr float TOLERANCE = DEFAULT_TOLERANCE;. // Preparing the standard all-ones input; std::vector<float> input(6400);; std::fill_n(input.data(), input.size(), 1.0f);; TMVA_SOFIE_Linear_64::Session s(""Linear_64_FromROOT.dat"");; std::vector<float> output = s.infer(input.data());. // Testing the actual and expected output values; EXPECT_EQ(output.size(), sizeof(Linear_64_ExpectedOutput::all_ones) / sizeof(float));. float *correct = Linear_64_ExpectedOutput::all_ones;. // Testing the actual and expected output values; for (size_t i = 0; i < output.size(); ++i) {; EXPECT_LE(std::abs(output[i] - correct[i]), TOLERANCE);; }; }; */",MatchSource.CODE_COMMENT,tmva/sofie/test/TestCustomModelsFromROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromROOT.cxx:4,Testability,TEST,TEST,4,"/*; TEST(ROOT, Linear32); {; constexpr float TOLERANCE = DEFAULT_TOLERANCE;. // Preparing the standard all-ones input; std::vector<float> input(3200);; std::fill_n(input.data(), input.size(), 1.0f);; TMVA_SOFIE_Linear_32::Session s(""Linear_32_FromROOT.dat"");; std::vector<float> output = s.infer(input.data());. // Testing the actual and expected output sizes; EXPECT_EQ(output.size(), sizeof(Linear_32_ExpectedOutput::all_ones) / sizeof(float));. float *correct = Linear_32_ExpectedOutput::all_ones;. // Testing the actual and expected output values; for (size_t i = 0; i < output.size(); ++i) {; EXPECT_LE(std::abs(output[i] - correct[i]), TOLERANCE);; }; }. TEST(ROOT, Linear64); {; constexpr float TOLERANCE = DEFAULT_TOLERANCE;. // Preparing the standard all-ones input; std::vector<float> input(6400);; std::fill_n(input.data(), input.size(), 1.0f);; TMVA_SOFIE_Linear_64::Session s(""Linear_64_FromROOT.dat"");; std::vector<float> output = s.infer(input.data());. // Testing the actual and expected output values; EXPECT_EQ(output.size(), sizeof(Linear_64_ExpectedOutput::all_ones) / sizeof(float));. float *correct = Linear_64_ExpectedOutput::all_ones;. // Testing the actual and expected output values; for (size_t i = 0; i < output.size(); ++i) {; EXPECT_LE(std::abs(output[i] - correct[i]), TOLERANCE);; }; }; */",MatchSource.CODE_COMMENT,tmva/sofie/test/TestCustomModelsFromROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromROOT.cxx:315,Testability,Test,Testing,315,"/*; TEST(ROOT, Linear32); {; constexpr float TOLERANCE = DEFAULT_TOLERANCE;. // Preparing the standard all-ones input; std::vector<float> input(3200);; std::fill_n(input.data(), input.size(), 1.0f);; TMVA_SOFIE_Linear_32::Session s(""Linear_32_FromROOT.dat"");; std::vector<float> output = s.infer(input.data());. // Testing the actual and expected output sizes; EXPECT_EQ(output.size(), sizeof(Linear_32_ExpectedOutput::all_ones) / sizeof(float));. float *correct = Linear_32_ExpectedOutput::all_ones;. // Testing the actual and expected output values; for (size_t i = 0; i < output.size(); ++i) {; EXPECT_LE(std::abs(output[i] - correct[i]), TOLERANCE);; }; }. TEST(ROOT, Linear64); {; constexpr float TOLERANCE = DEFAULT_TOLERANCE;. // Preparing the standard all-ones input; std::vector<float> input(6400);; std::fill_n(input.data(), input.size(), 1.0f);; TMVA_SOFIE_Linear_64::Session s(""Linear_64_FromROOT.dat"");; std::vector<float> output = s.infer(input.data());. // Testing the actual and expected output values; EXPECT_EQ(output.size(), sizeof(Linear_64_ExpectedOutput::all_ones) / sizeof(float));. float *correct = Linear_64_ExpectedOutput::all_ones;. // Testing the actual and expected output values; for (size_t i = 0; i < output.size(); ++i) {; EXPECT_LE(std::abs(output[i] - correct[i]), TOLERANCE);; }; }; */",MatchSource.CODE_COMMENT,tmva/sofie/test/TestCustomModelsFromROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromROOT.cxx:505,Testability,Test,Testing,505,"/*; TEST(ROOT, Linear32); {; constexpr float TOLERANCE = DEFAULT_TOLERANCE;. // Preparing the standard all-ones input; std::vector<float> input(3200);; std::fill_n(input.data(), input.size(), 1.0f);; TMVA_SOFIE_Linear_32::Session s(""Linear_32_FromROOT.dat"");; std::vector<float> output = s.infer(input.data());. // Testing the actual and expected output sizes; EXPECT_EQ(output.size(), sizeof(Linear_32_ExpectedOutput::all_ones) / sizeof(float));. float *correct = Linear_32_ExpectedOutput::all_ones;. // Testing the actual and expected output values; for (size_t i = 0; i < output.size(); ++i) {; EXPECT_LE(std::abs(output[i] - correct[i]), TOLERANCE);; }; }. TEST(ROOT, Linear64); {; constexpr float TOLERANCE = DEFAULT_TOLERANCE;. // Preparing the standard all-ones input; std::vector<float> input(6400);; std::fill_n(input.data(), input.size(), 1.0f);; TMVA_SOFIE_Linear_64::Session s(""Linear_64_FromROOT.dat"");; std::vector<float> output = s.infer(input.data());. // Testing the actual and expected output values; EXPECT_EQ(output.size(), sizeof(Linear_64_ExpectedOutput::all_ones) / sizeof(float));. float *correct = Linear_64_ExpectedOutput::all_ones;. // Testing the actual and expected output values; for (size_t i = 0; i < output.size(); ++i) {; EXPECT_LE(std::abs(output[i] - correct[i]), TOLERANCE);; }; }; */",MatchSource.CODE_COMMENT,tmva/sofie/test/TestCustomModelsFromROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromROOT.cxx:661,Testability,TEST,TEST,661,"/*; TEST(ROOT, Linear32); {; constexpr float TOLERANCE = DEFAULT_TOLERANCE;. // Preparing the standard all-ones input; std::vector<float> input(3200);; std::fill_n(input.data(), input.size(), 1.0f);; TMVA_SOFIE_Linear_32::Session s(""Linear_32_FromROOT.dat"");; std::vector<float> output = s.infer(input.data());. // Testing the actual and expected output sizes; EXPECT_EQ(output.size(), sizeof(Linear_32_ExpectedOutput::all_ones) / sizeof(float));. float *correct = Linear_32_ExpectedOutput::all_ones;. // Testing the actual and expected output values; for (size_t i = 0; i < output.size(); ++i) {; EXPECT_LE(std::abs(output[i] - correct[i]), TOLERANCE);; }; }. TEST(ROOT, Linear64); {; constexpr float TOLERANCE = DEFAULT_TOLERANCE;. // Preparing the standard all-ones input; std::vector<float> input(6400);; std::fill_n(input.data(), input.size(), 1.0f);; TMVA_SOFIE_Linear_64::Session s(""Linear_64_FromROOT.dat"");; std::vector<float> output = s.infer(input.data());. // Testing the actual and expected output values; EXPECT_EQ(output.size(), sizeof(Linear_64_ExpectedOutput::all_ones) / sizeof(float));. float *correct = Linear_64_ExpectedOutput::all_ones;. // Testing the actual and expected output values; for (size_t i = 0; i < output.size(); ++i) {; EXPECT_LE(std::abs(output[i] - correct[i]), TOLERANCE);; }; }; */",MatchSource.CODE_COMMENT,tmva/sofie/test/TestCustomModelsFromROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromROOT.cxx:972,Testability,Test,Testing,972,"/*; TEST(ROOT, Linear32); {; constexpr float TOLERANCE = DEFAULT_TOLERANCE;. // Preparing the standard all-ones input; std::vector<float> input(3200);; std::fill_n(input.data(), input.size(), 1.0f);; TMVA_SOFIE_Linear_32::Session s(""Linear_32_FromROOT.dat"");; std::vector<float> output = s.infer(input.data());. // Testing the actual and expected output sizes; EXPECT_EQ(output.size(), sizeof(Linear_32_ExpectedOutput::all_ones) / sizeof(float));. float *correct = Linear_32_ExpectedOutput::all_ones;. // Testing the actual and expected output values; for (size_t i = 0; i < output.size(); ++i) {; EXPECT_LE(std::abs(output[i] - correct[i]), TOLERANCE);; }; }. TEST(ROOT, Linear64); {; constexpr float TOLERANCE = DEFAULT_TOLERANCE;. // Preparing the standard all-ones input; std::vector<float> input(6400);; std::fill_n(input.data(), input.size(), 1.0f);; TMVA_SOFIE_Linear_64::Session s(""Linear_64_FromROOT.dat"");; std::vector<float> output = s.infer(input.data());. // Testing the actual and expected output values; EXPECT_EQ(output.size(), sizeof(Linear_64_ExpectedOutput::all_ones) / sizeof(float));. float *correct = Linear_64_ExpectedOutput::all_ones;. // Testing the actual and expected output values; for (size_t i = 0; i < output.size(); ++i) {; EXPECT_LE(std::abs(output[i] - correct[i]), TOLERANCE);; }; }; */",MatchSource.CODE_COMMENT,tmva/sofie/test/TestCustomModelsFromROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromROOT.cxx:1163,Testability,Test,Testing,1163,"/*; TEST(ROOT, Linear32); {; constexpr float TOLERANCE = DEFAULT_TOLERANCE;. // Preparing the standard all-ones input; std::vector<float> input(3200);; std::fill_n(input.data(), input.size(), 1.0f);; TMVA_SOFIE_Linear_32::Session s(""Linear_32_FromROOT.dat"");; std::vector<float> output = s.infer(input.data());. // Testing the actual and expected output sizes; EXPECT_EQ(output.size(), sizeof(Linear_32_ExpectedOutput::all_ones) / sizeof(float));. float *correct = Linear_32_ExpectedOutput::all_ones;. // Testing the actual and expected output values; for (size_t i = 0; i < output.size(); ++i) {; EXPECT_LE(std::abs(output[i] - correct[i]), TOLERANCE);; }; }. TEST(ROOT, Linear64); {; constexpr float TOLERANCE = DEFAULT_TOLERANCE;. // Preparing the standard all-ones input; std::vector<float> input(6400);; std::fill_n(input.data(), input.size(), 1.0f);; TMVA_SOFIE_Linear_64::Session s(""Linear_64_FromROOT.dat"");; std::vector<float> output = s.infer(input.data());. // Testing the actual and expected output values; EXPECT_EQ(output.size(), sizeof(Linear_64_ExpectedOutput::all_ones) / sizeof(float));. float *correct = Linear_64_ExpectedOutput::all_ones;. // Testing the actual and expected output values; for (size_t i = 0; i < output.size(); ++i) {; EXPECT_LE(std::abs(output[i] - correct[i]), TOLERANCE);; }; }; */",MatchSource.CODE_COMMENT,tmva/sofie/test/TestCustomModelsFromROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx:50,Modifiability,variab,variable,50,"// increment session Id to avoid clash in session variable name",MatchSource.CODE_COMMENT,tmva/sofie/test/TestSofieModels.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx:27,Safety,avoid,avoid,27,"// increment session Id to avoid clash in session variable name",MatchSource.CODE_COMMENT,tmva/sofie/test/TestSofieModels.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx:138,Testability,test,testSofie,138,"// inference code for gInterpreter->Declare + gROOT->ProcessLine; // one could also use TMacro build with correct signature; // TMacro m(""testSofie""); m.AddLine(""std::vector<float> testSofie(float *x) { return s.infer(x);}""); // std::vector<float> * result = (std::vector<float> *)m.Exec(Form(float*)0x%lx , xinput.data));",MatchSource.CODE_COMMENT,tmva/sofie/test/TestSofieModels.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx:181,Testability,test,testSofie,181,"// inference code for gInterpreter->Declare + gROOT->ProcessLine; // one could also use TMacro build with correct signature; // TMacro m(""testSofie""); m.AddLine(""std::vector<float> testSofie(float *x) { return s.infer(x);}""); // std::vector<float> * result = (std::vector<float> *)m.Exec(Form(float*)0x%lx , xinput.data));",MatchSource.CODE_COMMENT,tmva/sofie/test/TestSofieModels.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx:29,Testability,test,test,29,"// read reference value from test file",MatchSource.CODE_COMMENT,tmva/sofie/test/TestSofieModels.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx:25,Usability,simpl,simplifications,25,"// some model needs some simplifications",MatchSource.CODE_COMMENT,tmva/sofie/test/TestSofieModels.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx:29,Testability,test,test,29,"// read reference value from test file",MatchSource.CODE_COMMENT,tmva/sofie/test/TestSofieModels.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx:11,Usability,simpl,simplify,11,"// need to simplify obtained recurrent ONNX model",MatchSource.CODE_COMMENT,tmva/sofie/test/TestSofieModels.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx:29,Testability,test,test,29,"// read reference value from test file",MatchSource.CODE_COMMENT,tmva/sofie/test/TestSofieModels.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx:29,Testability,test,test,29,"// read reference value from test file",MatchSource.CODE_COMMENT,tmva/sofie/test/TestSofieModels.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx:3,Testability,test,test,3,"// test batch =4 (equal output size)",MatchSource.CODE_COMMENT,tmva/sofie/test/TestSofieModels.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx:3,Testability,test,test,3,"// test with batch normalization",MatchSource.CODE_COMMENT,tmva/sofie/test/TestSofieModels.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx:3,Testability,test,test,3,"// test with max pooling",MatchSource.CODE_COMMENT,tmva/sofie/test/TestSofieModels.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx:3,Testability,test,test,3,"// test with avg pooling",MatchSource.CODE_COMMENT,tmva/sofie/test/TestSofieModels.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx:3,Testability,test,test,3,"// test conv1d",MatchSource.CODE_COMMENT,tmva/sofie/test/TestSofieModels.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx:3,Testability,test,test,3,"// test conv3d",MatchSource.CODE_COMMENT,tmva/sofie/test/TestSofieModels.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx:30,Testability,test,test,30,"// Tets recurrent network; // test with avg pooling",MatchSource.CODE_COMMENT,tmva/sofie/test/TestSofieModels.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/GNN/EmitGNN.cxx:90,Testability,test,testing,90,"// Author: Sanjiban Sengupta; // Description:; // This program generates a RModel_GNN for testing",MatchSource.CODE_COMMENT,tmva/sofie/test/GNN/EmitGNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/GNN/EmitGNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/GNN/EmitGraphIndependent.cxx:103,Testability,test,testing,103,"// Author: Sanjiban Sengupta; // Description:; // This program generates a RModel_GraphIndependent for testing",MatchSource.CODE_COMMENT,tmva/sofie/test/GNN/EmitGraphIndependent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/GNN/EmitGraphIndependent.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie_parsers/src/ParseBasicUnary.cxx:9,Testability,Log,Log,9,"// Parse Log",MatchSource.CODE_COMMENT,tmva/sofie_parsers/src/ParseBasicUnary.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie_parsers/src/ParseBasicUnary.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie_parsers/src/ParseGather.cxx:65,Availability,error,error,65,"// indices_type can be an initialized tensor, no need to emit an error if it is not registered",MatchSource.CODE_COMMENT,tmva/sofie_parsers/src/ParseGather.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie_parsers/src/ParseGather.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie_parsers/src/ParseReduce.cxx:9,Energy Efficiency,Reduce,ReduceMean,9,"// Parse ReduceMean",MatchSource.CODE_COMMENT,tmva/sofie_parsers/src/ParseReduce.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie_parsers/src/ParseReduce.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie_parsers/src/ParseReduce.cxx:9,Energy Efficiency,Reduce,ReduceSumsquare,9,"// Parse ReduceSumsquare",MatchSource.CODE_COMMENT,tmva/sofie_parsers/src/ParseReduce.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie_parsers/src/ParseReduce.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie_parsers/src/ParseReduce.cxx:9,Energy Efficiency,Reduce,ReduceProd,9,"// Parse ReduceProd",MatchSource.CODE_COMMENT,tmva/sofie_parsers/src/ParseReduce.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie_parsers/src/ParseReduce.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie_parsers/src/ParseReduce.cxx:9,Energy Efficiency,Reduce,ReduceSum,9,"// Parse ReduceSum",MatchSource.CODE_COMMENT,tmva/sofie_parsers/src/ParseReduce.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie_parsers/src/ParseReduce.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie_parsers/src/RModelParser_ONNX.cxx:3,Energy Efficiency,Reduce,Reduce,3,"// Reduce operators",MatchSource.CODE_COMMENT,tmva/sofie_parsers/src/RModelParser_ONNX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie_parsers/src/RModelParser_ONNX.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie_parsers/src/RModelParser_ONNX.cxx:3,Energy Efficiency,Reduce,Reduce,3,"// Reduce operators",MatchSource.CODE_COMMENT,tmva/sofie_parsers/src/RModelParser_ONNX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie_parsers/src/RModelParser_ONNX.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie_parsers/src/RModelParser_ONNX.cxx:50,Integrability,message,message,50,"// in case this TensorShapeProto has no dimension message: ONNX IR defines this to be a scalar",MatchSource.CODE_COMMENT,tmva/sofie_parsers/src/RModelParser_ONNX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie_parsers/src/RModelParser_ONNX.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BDTEventWrapper.h:110,Deployability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : BDTEventWrapper *; * *; * *; * Description: *; * *; * *; * Author: Doug Schouten (dschoute@sfu.ca) *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * U. of Texas at Austin, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BDTEventWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BDTEventWrapper.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BDTEventWrapper.h:110,Integrability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : BDTEventWrapper *; * *; * *; * Description: *; * *; * *; * Author: Doug Schouten (dschoute@sfu.ca) *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * U. of Texas at Austin, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BDTEventWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BDTEventWrapper.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BDTEventWrapper.h:24,Modifiability,variab,variable,24,// Set the index of the variable to compare on; /**; * @param iVar - index of the variable in fEvent to use; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BDTEventWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BDTEventWrapper.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BDTEventWrapper.h:82,Modifiability,variab,variable,82,// Set the index of the variable to compare on; /**; * @param iVar - index of the variable in fEvent to use; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BDTEventWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BDTEventWrapper.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BDTEventWrapper.h:23,Modifiability,variab,variable,23,// Return the value of variable fVarIndex for this event; /**; * @return value of variable fVarIndex for this event; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BDTEventWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BDTEventWrapper.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BDTEventWrapper.h:82,Modifiability,variab,variable,82,// Return the value of variable fVarIndex for this event; /**; * @return value of variable fVarIndex for this event; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BDTEventWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BDTEventWrapper.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BDTEventWrapper.h:16,Modifiability,variab,variable,16,"// index of the variable to sort on",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BDTEventWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BDTEventWrapper.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : BinarySearchTree *; * *; * *; * Description: *; * BinarySearchTree incl. volume Search method *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : BinarySearchTree *; * *; * *; * Description: *; * BinarySearchTree incl. volume Search method *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:119,Usability,simpl,simple,119,"//////////////////////////////////////////////////////////////////////////; // //; // BinarySearchTree //; // //; // A simple Binary search tree including volume search method //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:29,Modifiability,variab,variables,29,"//set the periode (number of variables)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:29,Modifiability,variab,variables,29,"// return periode (number of variables)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:71,Modifiability,variab,variables,71,"// Create the search tree from the event collection; // using ONLY the variables specified in ""theVars""",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:71,Modifiability,variab,variables,71,"// create the search tree from the events in a TTree; // using ALL the variables specified included in the Event",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:54,Modifiability,variab,variable,54,"/// access to mean for signal and background for each variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:4,Security,access,access,4,"/// access to mean for signal and background for each variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:53,Modifiability,variab,variable,53,"/// access to RMS for signal and background for each variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:4,Security,access,access,4,"/// access to RMS for signal and background for each variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:57,Modifiability,variab,variable,57,"/// access to Minimum for signal and background for each variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:4,Security,access,access,4,"/// access to Minimum for signal and background for each variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:57,Modifiability,variab,variable,57,"/// access to Maximum for signal and background for each variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:4,Security,access,access,4,"/// access to Maximum for signal and background for each variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:27,Modifiability,variab,variable,27,"/// access to RMS for each variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:4,Security,access,access,4,"/// access to RMS for each variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:17,Modifiability,variab,variables,17,"//check of Event variables lie with the volume",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:30,Modifiability,variab,variables,30,"///< periode (number of event variables)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:14,Modifiability,variab,variable,14,"///< internal variable, counting the depth of the tree during insertion",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:45,Modifiability,variab,variable,45,"///< mean for signal and background for each variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:44,Modifiability,variab,variable,44,"///< RMS for signal and background for each variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:44,Modifiability,variab,variable,44,"///< RMS for signal and background for each variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:44,Modifiability,variab,variable,44,"///< RMS for signal and background for each variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:44,Modifiability,variab,variable,44,"///< Sum for signal and background for each variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:52,Modifiability,variab,variable,52,"///< Squared Sum for signal and background for each variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTreeNode.h:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: Node, NodeID *; * *; * *; * Description: *; * Node for the BinarySearch *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTreeNode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTreeNode.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTreeNode.h:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: Node, NodeID *; * *; * *; * Description: *; * Node for the BinarySearch *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTreeNode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTreeNode.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTreeNode.h:3,Testability,test,test,3,"// test event if it descends the tree at this node to the right",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTreeNode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTreeNode.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTreeNode.h:3,Testability,test,test,3,"// test event if it descends the tree at this node to the left",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTreeNode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTreeNode.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTreeNode.h:3,Testability,test,test,3,"// test event if it is equal to the event that ""makes the node"" (just for the ""search tree""",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTreeNode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTreeNode.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTreeNode.h:17,Modifiability,variab,variable,17,"/// set index of variable used for discrimination at this node",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTreeNode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTreeNode.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTreeNode.h:20,Modifiability,variab,variable,20,"/// return index of variable used for discrimination at this node",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTreeNode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTreeNode.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTreeNode.h:14,Modifiability,variab,variable,14,"///< index of variable used in node selection (decision tree)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinarySearchTreeNode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTreeNode.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinaryTree.h:218,Deployability,integrat,integrated,218,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : BinaryTree *; * *; * *; * Description: *; * BinaryTree: A base class for BinarySearch- or Decision-Trees *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinaryTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinaryTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinaryTree.h:218,Integrability,integrat,integrated,218,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : BinaryTree *; * *; * *; * Description: *; * BinaryTree: A base class for BinarySearch- or Decision-Trees *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinaryTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinaryTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinaryTree.h:73,Deployability,update,updates,73,"// count the number of Nodes in the Tree by looping through the tree and updates; // the stored number. (e.g. useful when pruning, as the number count is updated when; // building the tree.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinaryTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinaryTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinaryTree.h:154,Deployability,update,updated,154,"// count the number of Nodes in the Tree by looping through the tree and updates; // the stored number. (e.g. useful when pruning, as the number count is updated when; // building the tree.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/BinaryTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinaryTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CCPruner.h:110,Deployability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : CCPruner *; * *; * *; * Description: Cost Complexity Pruning *; *; * Author: Doug Schouten (dschoute@sfu.ca); *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Texas at Austin, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////////////////////////////////////////////; // CCPruner - a helper class to prune a decision tree using the Cost Complexity method //; // (see Classification and Regression Trees by Leo Breiman et al) //; // //; // Some definitions: //; // //; // T_max - the initial, usually highly overtrained tree, that is to be pruned back //; // R(T) - quality index (Gini, misclassification rate, or other) of a tree T //; // ~T - set of terminal nodes in T //; // T' - the pruned subtree of T_max that has the best quality index R(T') //; // alpha - the prune strength parameter in Cost Complexity pruning (R_alpha(T) = R(T) + alpha// |~T|) //; // //; // There are two running modes in CCPruner: (i) one may select a prune strength and prune back //; // the tree T_max until the criterion //; // R(T) - R(t) //; // alpha < ---------- //; // |~T_t| - 1 //; // //; // is true for all nodes t in T, or (ii) the algorithm finds the sequence of critical points //; // alpha_k < alpha_k+1 ... < alpha_K such that T_K = root(T_max) and then selects the optimally-pruned //; // subtree, defined to be the subtree with the best quality index for the validation sample. //; ////////////////////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/CCPruner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CCPruner.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CCPruner.h:110,Integrability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : CCPruner *; * *; * *; * Description: Cost Complexity Pruning *; *; * Author: Doug Schouten (dschoute@sfu.ca); *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Texas at Austin, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////////////////////////////////////////////; // CCPruner - a helper class to prune a decision tree using the Cost Complexity method //; // (see Classification and Regression Trees by Leo Breiman et al) //; // //; // Some definitions: //; // //; // T_max - the initial, usually highly overtrained tree, that is to be pruned back //; // R(T) - quality index (Gini, misclassification rate, or other) of a tree T //; // ~T - set of terminal nodes in T //; // T' - the pruned subtree of T_max that has the best quality index R(T') //; // alpha - the prune strength parameter in Cost Complexity pruning (R_alpha(T) = R(T) + alpha// |~T|) //; // //; // There are two running modes in CCPruner: (i) one may select a prune strength and prune back //; // the tree T_max until the criterion //; // R(T) - R(t) //; // alpha < ---------- //; // |~T_t| - 1 //; // //; // is true for all nodes t in T, or (ii) the algorithm finds the sequence of critical points //; // alpha_k < alpha_k+1 ... < alpha_K such that T_K = root(T_max) and then selects the optimally-pruned //; // subtree, defined to be the subtree with the best quality index for the validation sample. //; ////////////////////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/CCPruner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CCPruner.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CCPruner.h:1882,Security,validat,validation,1882,"*********************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : CCPruner *; * *; * *; * Description: Cost Complexity Pruning *; *; * Author: Doug Schouten (dschoute@sfu.ca); *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Texas at Austin, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////////////////////////////////////////////; // CCPruner - a helper class to prune a decision tree using the Cost Complexity method //; // (see Classification and Regression Trees by Leo Breiman et al) //; // //; // Some definitions: //; // //; // T_max - the initial, usually highly overtrained tree, that is to be pruned back //; // R(T) - quality index (Gini, misclassification rate, or other) of a tree T //; // ~T - set of terminal nodes in T //; // T' - the pruned subtree of T_max that has the best quality index R(T') //; // alpha - the prune strength parameter in Cost Complexity pruning (R_alpha(T) = R(T) + alpha// |~T|) //; // //; // There are two running modes in CCPruner: (i) one may select a prune strength and prune back //; // the tree T_max until the criterion //; // R(T) - R(t) //; // alpha < ---------- //; // |~T_t| - 1 //; // //; // is true for all nodes t in T, or (ii) the algorithm finds the sequence of critical points //; // alpha_k < alpha_k+1 ... < alpha_K such that T_K = root(T_max) and then selects the optimally-pruned //; // subtree, defined to be the subtree with the best quality index for the validation sample. //; ////////////////////////////////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/CCPruner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CCPruner.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CCPruner.h:37,Security,validat,validation,37,"// return the quality index from the validation sample for the optimal subtree T'",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/CCPruner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CCPruner.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CCTreeWrapper.h:110,Deployability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : CCTreeWrapper *; * *; * *; * Description: a light wrapper of a decision tree, used to perform cost *; * complexity pruning ""in-place"" Cost Complexity Pruning *; * *; * Author: Doug Schouten (dschoute@sfu.ca) *; * *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Texas at Austin, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/CCTreeWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CCTreeWrapper.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CCTreeWrapper.h:110,Integrability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : CCTreeWrapper *; * *; * *; * Description: a light wrapper of a decision tree, used to perform cost *; * complexity pruning ""in-place"" Cost Complexity Pruning *; * *; * Author: Doug Schouten (dschoute@sfu.ca) *; * *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Texas at Austin, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/CCTreeWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CCTreeWrapper.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CCTreeWrapper.h:242,Integrability,wrap,wrapper,242,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : CCTreeWrapper *; * *; * *; * Description: a light wrapper of a decision tree, used to perform cost *; * complexity pruning ""in-place"" Cost Complexity Pruning *; * *; * Author: Doug Schouten (dschoute@sfu.ca) *; * *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Texas at Austin, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/CCTreeWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CCTreeWrapper.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CCTreeWrapper.h:278,Performance,perform,perform,278,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : CCTreeWrapper *; * *; * *; * Description: a light wrapper of a decision tree, used to perform cost *; * complexity pruning ""in-place"" Cost Complexity Pruning *; * *; * Author: Doug Schouten (dschoute@sfu.ca) *; * *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Texas at Austin, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/CCTreeWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CCTreeWrapper.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CCTreeWrapper.h:87,Integrability,wrap,wrapper,87,"/////////////////////////////////////////////////////////////; // CCTreeNode - a light wrapper of a decision tree node //; // //; /////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/CCTreeWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CCTreeWrapper.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CCTreeWrapper.h:26,Integrability,wrap,wrapped,26,"// get the pointer to the wrapped DT node",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/CCTreeWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CCTreeWrapper.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CCTreeWrapper.h:3,Testability,test,test,3,"// test event if it descends the tree at this node to the right",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/CCTreeWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CCTreeWrapper.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CCTreeWrapper.h:3,Testability,test,test,3,"// test event if it descends the tree at this node to the left",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/CCTreeWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CCTreeWrapper.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CCTreeWrapper.h:15,Integrability,wrap,wrapped,15,"//! pointer to wrapped node in the decision tree",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/CCTreeWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CCTreeWrapper.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CCTreeWrapper.h:60,Security,validat,validation,60,"// return the misclassification rate of a pruned tree for a validation event sample",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/CCTreeWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CCTreeWrapper.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CCTreeWrapper.h:28,Integrability,wrap,wrapped,28,"///<! the root node of the (wrapped) decision Tree",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/CCTreeWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CCTreeWrapper.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h:1890,Availability,ERROR,ERROR,1890,"me extra options in a string; * like ""V:Color:Transformations=I;D;P;U;G:Silent:DrawProgressBar:ModelPersistence:Jobs=2"" where:; * V = verbose output; * Color = coloured screen output; * Silent = batch mode: boolean silent flag inhibiting any output from TMVA; * Transformations = list of transformations to test.; * DrawProgressBar = draw progress bar to display training and testing.; * ModelPersistence = to save the trained model in xml or serialized files.; * Jobs = number of ml methods to test/train in parallel using MultiProc, requires to call Evaluate method.; * Basic example.; * \code; void classification(UInt_t jobs = 2); {; TMVA::Tools::Instance();. TFile *input(0);; TString fname = ""./tmva_class_example.root"";; if (!gSystem->AccessPathName(fname)) {; input = TFile::Open(fname); // check if file in local directory exists; } else {; TFile::SetCacheFileDir(""."");; input = TFile::Open(""http://root.cern/files/tmva_class_example.root"", ""CACHEREAD"");; }; if (!input) {; std::cout << ""ERROR: could not open data file"" << std::endl;; exit(1);; }. // Register the training and test trees. TTree *signalTree = (TTree *)input->Get(""TreeS"");; TTree *background = (TTree *)input->Get(""TreeB"");. TMVA::DataLoader *dataloader = new TMVA::DataLoader(""dataset"");. dataloader->AddVariable(""myvar1 := var1+var2"", 'F');; dataloader->AddVariable(""myvar2 := var1-var2"", ""Expression 2"", """", 'F');; dataloader->AddVariable(""var3"", ""Variable 3"", ""units"", 'F');; dataloader->AddVariable(""var4"", ""Variable 4"", ""units"", 'F');. dataloader->AddSpectator(""spec1 := var1*2"", ""Spectator 1"", ""units"", 'F');; dataloader->AddSpectator(""spec2 := var1*3"", ""Spectator 2"", ""units"", 'F');. // global event weights per tree (see below for setting event-wise weights); Double_t signalWeight = 1.0;; Double_t backgroundWeight = 1.0;. dataloader->SetBackgroundWeightExpression(""weight"");. TMVA::Experimental::Classification *cl = new TMVA::Experimental::Classification(dataloader, Form(""Jobs=%d"", jobs));. cl->BookMethod(TMVA:",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Classification.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h:692,Modifiability,config,configure,692,"/*! \class TMVA::ClassificationResult; * Class to save the results of the classifier.; * Every machine learning method booked have an object for the results; * in the classification process, in this class is stored the mvas,; * data loader name and ml method name and title.; * You can to display the results calling the method Show, get the ROC-integral with the; * method GetROCIntegral or get the TMVA::ROCCurve object calling GetROC.; \ingroup TMVA; */; /*! \class TMVA::Classification; * Class to perform two class classification.; * The first step before any analysis is to prepare the data,; * to do that you need to create an object of TMVA::DataLoader,; * in this object you need to configure the variables and the number of events; * to train/test.; * The class TMVA::Experimental::Classification needs a TMVA::DataLoader object,; * optional a TFile object to save the results and some extra options in a string; * like ""V:Color:Transformations=I;D;P;U;G:Silent:DrawProgressBar:ModelPersistence:Jobs=2"" where:; * V = verbose output; * Color = coloured screen output; * Silent = batch mode: boolean silent flag inhibiting any output from TMVA; * Transformations = list of transformations to test.; * DrawProgressBar = draw progress bar to display training and testing.; * ModelPersistence = to save the trained model in xml or serialized files.; * Jobs = number of ml methods to test/train in parallel using MultiProc, requires to call Evaluate method.; * Basic example.; * \code; void classification(UInt_t jobs = 2); {; TMVA::Tools::Instance();. TFile *input(0);; TString fname = ""./tmva_class_example.root"";; if (!gSystem->AccessPathName(fname)) {; input = TFile::Open(fname); // check if file in local directory exists; } else {; TFile::SetCacheFileDir(""."");; input = TFile::Open(""http://root.cern/files/tmva_class_example.root"", ""CACHEREAD"");; }; if (!input) {; std::cout << ""ERROR: could not open data file"" << std::endl;; exit(1);; }. // Register the training and test trees. TTree *si",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Classification.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h:706,Modifiability,variab,variables,706,"/*! \class TMVA::ClassificationResult; * Class to save the results of the classifier.; * Every machine learning method booked have an object for the results; * in the classification process, in this class is stored the mvas,; * data loader name and ml method name and title.; * You can to display the results calling the method Show, get the ROC-integral with the; * method GetROCIntegral or get the TMVA::ROCCurve object calling GetROC.; \ingroup TMVA; */; /*! \class TMVA::Classification; * Class to perform two class classification.; * The first step before any analysis is to prepare the data,; * to do that you need to create an object of TMVA::DataLoader,; * in this object you need to configure the variables and the number of events; * to train/test.; * The class TMVA::Experimental::Classification needs a TMVA::DataLoader object,; * optional a TFile object to save the results and some extra options in a string; * like ""V:Color:Transformations=I;D;P;U;G:Silent:DrawProgressBar:ModelPersistence:Jobs=2"" where:; * V = verbose output; * Color = coloured screen output; * Silent = batch mode: boolean silent flag inhibiting any output from TMVA; * Transformations = list of transformations to test.; * DrawProgressBar = draw progress bar to display training and testing.; * ModelPersistence = to save the trained model in xml or serialized files.; * Jobs = number of ml methods to test/train in parallel using MultiProc, requires to call Evaluate method.; * Basic example.; * \code; void classification(UInt_t jobs = 2); {; TMVA::Tools::Instance();. TFile *input(0);; TString fname = ""./tmva_class_example.root"";; if (!gSystem->AccessPathName(fname)) {; input = TFile::Open(fname); // check if file in local directory exists; } else {; TFile::SetCacheFileDir(""."");; input = TFile::Open(""http://root.cern/files/tmva_class_example.root"", ""CACHEREAD"");; }; if (!input) {; std::cout << ""ERROR: could not open data file"" << std::endl;; exit(1);; }. // Register the training and test trees. TTree *si",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Classification.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h:2320,Modifiability,Variab,Variable,2320,"elPersistence = to save the trained model in xml or serialized files.; * Jobs = number of ml methods to test/train in parallel using MultiProc, requires to call Evaluate method.; * Basic example.; * \code; void classification(UInt_t jobs = 2); {; TMVA::Tools::Instance();. TFile *input(0);; TString fname = ""./tmva_class_example.root"";; if (!gSystem->AccessPathName(fname)) {; input = TFile::Open(fname); // check if file in local directory exists; } else {; TFile::SetCacheFileDir(""."");; input = TFile::Open(""http://root.cern/files/tmva_class_example.root"", ""CACHEREAD"");; }; if (!input) {; std::cout << ""ERROR: could not open data file"" << std::endl;; exit(1);; }. // Register the training and test trees. TTree *signalTree = (TTree *)input->Get(""TreeS"");; TTree *background = (TTree *)input->Get(""TreeB"");. TMVA::DataLoader *dataloader = new TMVA::DataLoader(""dataset"");. dataloader->AddVariable(""myvar1 := var1+var2"", 'F');; dataloader->AddVariable(""myvar2 := var1-var2"", ""Expression 2"", """", 'F');; dataloader->AddVariable(""var3"", ""Variable 3"", ""units"", 'F');; dataloader->AddVariable(""var4"", ""Variable 4"", ""units"", 'F');. dataloader->AddSpectator(""spec1 := var1*2"", ""Spectator 1"", ""units"", 'F');; dataloader->AddSpectator(""spec2 := var1*3"", ""Spectator 2"", ""units"", 'F');. // global event weights per tree (see below for setting event-wise weights); Double_t signalWeight = 1.0;; Double_t backgroundWeight = 1.0;. dataloader->SetBackgroundWeightExpression(""weight"");. TMVA::Experimental::Classification *cl = new TMVA::Experimental::Classification(dataloader, Form(""Jobs=%d"", jobs));. cl->BookMethod(TMVA::Types::kBDT, ""BDTG"", ""!H:!V:NTrees=2000:MinNodeSize=2.5%:BoostType=Grad:Shrinkage=0.10:""; ""UseBaggedBoost:BaggedSampleFraction=0.5:nCuts=20:MaxDepth=2"");; cl->BookMethod(TMVA::Types::kSVM, ""SVM"", ""Gamma=0.25:Tol=0.001:VarTransform=Norm"");. cl->Evaluate(); // Train and Test all methods. auto &results = cl->GetResults();. TCanvas *c = new TCanvas(Form(""ROC""));; c->SetTitle(""ROC-Integral Cu",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Classification.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h:2382,Modifiability,Variab,Variable,2382,"elPersistence = to save the trained model in xml or serialized files.; * Jobs = number of ml methods to test/train in parallel using MultiProc, requires to call Evaluate method.; * Basic example.; * \code; void classification(UInt_t jobs = 2); {; TMVA::Tools::Instance();. TFile *input(0);; TString fname = ""./tmva_class_example.root"";; if (!gSystem->AccessPathName(fname)) {; input = TFile::Open(fname); // check if file in local directory exists; } else {; TFile::SetCacheFileDir(""."");; input = TFile::Open(""http://root.cern/files/tmva_class_example.root"", ""CACHEREAD"");; }; if (!input) {; std::cout << ""ERROR: could not open data file"" << std::endl;; exit(1);; }. // Register the training and test trees. TTree *signalTree = (TTree *)input->Get(""TreeS"");; TTree *background = (TTree *)input->Get(""TreeB"");. TMVA::DataLoader *dataloader = new TMVA::DataLoader(""dataset"");. dataloader->AddVariable(""myvar1 := var1+var2"", 'F');; dataloader->AddVariable(""myvar2 := var1-var2"", ""Expression 2"", """", 'F');; dataloader->AddVariable(""var3"", ""Variable 3"", ""units"", 'F');; dataloader->AddVariable(""var4"", ""Variable 4"", ""units"", 'F');. dataloader->AddSpectator(""spec1 := var1*2"", ""Spectator 1"", ""units"", 'F');; dataloader->AddSpectator(""spec2 := var1*3"", ""Spectator 2"", ""units"", 'F');. // global event weights per tree (see below for setting event-wise weights); Double_t signalWeight = 1.0;; Double_t backgroundWeight = 1.0;. dataloader->SetBackgroundWeightExpression(""weight"");. TMVA::Experimental::Classification *cl = new TMVA::Experimental::Classification(dataloader, Form(""Jobs=%d"", jobs));. cl->BookMethod(TMVA::Types::kBDT, ""BDTG"", ""!H:!V:NTrees=2000:MinNodeSize=2.5%:BoostType=Grad:Shrinkage=0.10:""; ""UseBaggedBoost:BaggedSampleFraction=0.5:nCuts=20:MaxDepth=2"");; cl->BookMethod(TMVA::Types::kSVM, ""SVM"", ""Gamma=0.25:Tol=0.001:VarTransform=Norm"");. cl->Evaluate(); // Train and Test all methods. auto &results = cl->GetResults();. TCanvas *c = new TCanvas(Form(""ROC""));; c->SetTitle(""ROC-Integral Cu",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Classification.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h:233,Performance,load,loader,233,"/*! \class TMVA::ClassificationResult; * Class to save the results of the classifier.; * Every machine learning method booked have an object for the results; * in the classification process, in this class is stored the mvas,; * data loader name and ml method name and title.; * You can to display the results calling the method Show, get the ROC-integral with the; * method GetROCIntegral or get the TMVA::ROCCurve object calling GetROC.; \ingroup TMVA; */; /*! \class TMVA::Classification; * Class to perform two class classification.; * The first step before any analysis is to prepare the data,; * to do that you need to create an object of TMVA::DataLoader,; * in this object you need to configure the variables and the number of events; * to train/test.; * The class TMVA::Experimental::Classification needs a TMVA::DataLoader object,; * optional a TFile object to save the results and some extra options in a string; * like ""V:Color:Transformations=I;D;P;U;G:Silent:DrawProgressBar:ModelPersistence:Jobs=2"" where:; * V = verbose output; * Color = coloured screen output; * Silent = batch mode: boolean silent flag inhibiting any output from TMVA; * Transformations = list of transformations to test.; * DrawProgressBar = draw progress bar to display training and testing.; * ModelPersistence = to save the trained model in xml or serialized files.; * Jobs = number of ml methods to test/train in parallel using MultiProc, requires to call Evaluate method.; * Basic example.; * \code; void classification(UInt_t jobs = 2); {; TMVA::Tools::Instance();. TFile *input(0);; TString fname = ""./tmva_class_example.root"";; if (!gSystem->AccessPathName(fname)) {; input = TFile::Open(fname); // check if file in local directory exists; } else {; TFile::SetCacheFileDir(""."");; input = TFile::Open(""http://root.cern/files/tmva_class_example.root"", ""CACHEREAD"");; }; if (!input) {; std::cout << ""ERROR: could not open data file"" << std::endl;; exit(1);; }. // Register the training and test trees. TTree *si",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Classification.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h:502,Performance,perform,perform,502,"/*! \class TMVA::ClassificationResult; * Class to save the results of the classifier.; * Every machine learning method booked have an object for the results; * in the classification process, in this class is stored the mvas,; * data loader name and ml method name and title.; * You can to display the results calling the method Show, get the ROC-integral with the; * method GetROCIntegral or get the TMVA::ROCCurve object calling GetROC.; \ingroup TMVA; */; /*! \class TMVA::Classification; * Class to perform two class classification.; * The first step before any analysis is to prepare the data,; * to do that you need to create an object of TMVA::DataLoader,; * in this object you need to configure the variables and the number of events; * to train/test.; * The class TMVA::Experimental::Classification needs a TMVA::DataLoader object,; * optional a TFile object to save the results and some extra options in a string; * like ""V:Color:Transformations=I;D;P;U;G:Silent:DrawProgressBar:ModelPersistence:Jobs=2"" where:; * V = verbose output; * Color = coloured screen output; * Silent = batch mode: boolean silent flag inhibiting any output from TMVA; * Transformations = list of transformations to test.; * DrawProgressBar = draw progress bar to display training and testing.; * ModelPersistence = to save the trained model in xml or serialized files.; * Jobs = number of ml methods to test/train in parallel using MultiProc, requires to call Evaluate method.; * Basic example.; * \code; void classification(UInt_t jobs = 2); {; TMVA::Tools::Instance();. TFile *input(0);; TString fname = ""./tmva_class_example.root"";; if (!gSystem->AccessPathName(fname)) {; input = TFile::Open(fname); // check if file in local directory exists; } else {; TFile::SetCacheFileDir(""."");; input = TFile::Open(""http://root.cern/files/tmva_class_example.root"", ""CACHEREAD"");; }; if (!input) {; std::cout << ""ERROR: could not open data file"" << std::endl;; exit(1);; }. // Register the training and test trees. TTree *si",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Classification.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h:1844,Performance,CACHE,CACHEREAD,1844,"me extra options in a string; * like ""V:Color:Transformations=I;D;P;U;G:Silent:DrawProgressBar:ModelPersistence:Jobs=2"" where:; * V = verbose output; * Color = coloured screen output; * Silent = batch mode: boolean silent flag inhibiting any output from TMVA; * Transformations = list of transformations to test.; * DrawProgressBar = draw progress bar to display training and testing.; * ModelPersistence = to save the trained model in xml or serialized files.; * Jobs = number of ml methods to test/train in parallel using MultiProc, requires to call Evaluate method.; * Basic example.; * \code; void classification(UInt_t jobs = 2); {; TMVA::Tools::Instance();. TFile *input(0);; TString fname = ""./tmva_class_example.root"";; if (!gSystem->AccessPathName(fname)) {; input = TFile::Open(fname); // check if file in local directory exists; } else {; TFile::SetCacheFileDir(""."");; input = TFile::Open(""http://root.cern/files/tmva_class_example.root"", ""CACHEREAD"");; }; if (!input) {; std::cout << ""ERROR: could not open data file"" << std::endl;; exit(1);; }. // Register the training and test trees. TTree *signalTree = (TTree *)input->Get(""TreeS"");; TTree *background = (TTree *)input->Get(""TreeB"");. TMVA::DataLoader *dataloader = new TMVA::DataLoader(""dataset"");. dataloader->AddVariable(""myvar1 := var1+var2"", 'F');; dataloader->AddVariable(""myvar2 := var1-var2"", ""Expression 2"", """", 'F');; dataloader->AddVariable(""var3"", ""Variable 3"", ""units"", 'F');; dataloader->AddVariable(""var4"", ""Variable 4"", ""units"", 'F');. dataloader->AddSpectator(""spec1 := var1*2"", ""Spectator 1"", ""units"", 'F');; dataloader->AddSpectator(""spec2 := var1*3"", ""Spectator 2"", ""units"", 'F');. // global event weights per tree (see below for setting event-wise weights); Double_t signalWeight = 1.0;; Double_t backgroundWeight = 1.0;. dataloader->SetBackgroundWeightExpression(""weight"");. TMVA::Experimental::Classification *cl = new TMVA::Experimental::Classification(dataloader, Form(""Jobs=%d"", jobs));. cl->BookMethod(TMVA:",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Classification.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h:1635,Security,Access,AccessPathName,1635,"o configure the variables and the number of events; * to train/test.; * The class TMVA::Experimental::Classification needs a TMVA::DataLoader object,; * optional a TFile object to save the results and some extra options in a string; * like ""V:Color:Transformations=I;D;P;U;G:Silent:DrawProgressBar:ModelPersistence:Jobs=2"" where:; * V = verbose output; * Color = coloured screen output; * Silent = batch mode: boolean silent flag inhibiting any output from TMVA; * Transformations = list of transformations to test.; * DrawProgressBar = draw progress bar to display training and testing.; * ModelPersistence = to save the trained model in xml or serialized files.; * Jobs = number of ml methods to test/train in parallel using MultiProc, requires to call Evaluate method.; * Basic example.; * \code; void classification(UInt_t jobs = 2); {; TMVA::Tools::Instance();. TFile *input(0);; TString fname = ""./tmva_class_example.root"";; if (!gSystem->AccessPathName(fname)) {; input = TFile::Open(fname); // check if file in local directory exists; } else {; TFile::SetCacheFileDir(""."");; input = TFile::Open(""http://root.cern/files/tmva_class_example.root"", ""CACHEREAD"");; }; if (!input) {; std::cout << ""ERROR: could not open data file"" << std::endl;; exit(1);; }. // Register the training and test trees. TTree *signalTree = (TTree *)input->Get(""TreeS"");; TTree *background = (TTree *)input->Get(""TreeB"");. TMVA::DataLoader *dataloader = new TMVA::DataLoader(""dataset"");. dataloader->AddVariable(""myvar1 := var1+var2"", 'F');; dataloader->AddVariable(""myvar2 := var1-var2"", ""Expression 2"", """", 'F');; dataloader->AddVariable(""var3"", ""Variable 3"", ""units"", 'F');; dataloader->AddVariable(""var4"", ""Variable 4"", ""units"", 'F');. dataloader->AddSpectator(""spec1 := var1*2"", ""Spectator 1"", ""units"", 'F');; dataloader->AddSpectator(""spec2 := var1*3"", ""Spectator 2"", ""units"", 'F');. // global event weights per tree (see below for setting event-wise weights); Double_t signalWeight = 1.0;; Double_t backgroundWeig",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Classification.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h:753,Testability,test,test,753,"/*! \class TMVA::ClassificationResult; * Class to save the results of the classifier.; * Every machine learning method booked have an object for the results; * in the classification process, in this class is stored the mvas,; * data loader name and ml method name and title.; * You can to display the results calling the method Show, get the ROC-integral with the; * method GetROCIntegral or get the TMVA::ROCCurve object calling GetROC.; \ingroup TMVA; */; /*! \class TMVA::Classification; * Class to perform two class classification.; * The first step before any analysis is to prepare the data,; * to do that you need to create an object of TMVA::DataLoader,; * in this object you need to configure the variables and the number of events; * to train/test.; * The class TMVA::Experimental::Classification needs a TMVA::DataLoader object,; * optional a TFile object to save the results and some extra options in a string; * like ""V:Color:Transformations=I;D;P;U;G:Silent:DrawProgressBar:ModelPersistence:Jobs=2"" where:; * V = verbose output; * Color = coloured screen output; * Silent = batch mode: boolean silent flag inhibiting any output from TMVA; * Transformations = list of transformations to test.; * DrawProgressBar = draw progress bar to display training and testing.; * ModelPersistence = to save the trained model in xml or serialized files.; * Jobs = number of ml methods to test/train in parallel using MultiProc, requires to call Evaluate method.; * Basic example.; * \code; void classification(UInt_t jobs = 2); {; TMVA::Tools::Instance();. TFile *input(0);; TString fname = ""./tmva_class_example.root"";; if (!gSystem->AccessPathName(fname)) {; input = TFile::Open(fname); // check if file in local directory exists; } else {; TFile::SetCacheFileDir(""."");; input = TFile::Open(""http://root.cern/files/tmva_class_example.root"", ""CACHEREAD"");; }; if (!input) {; std::cout << ""ERROR: could not open data file"" << std::endl;; exit(1);; }. // Register the training and test trees. TTree *si",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Classification.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h:1200,Testability,test,test,1200,"/*! \class TMVA::ClassificationResult; * Class to save the results of the classifier.; * Every machine learning method booked have an object for the results; * in the classification process, in this class is stored the mvas,; * data loader name and ml method name and title.; * You can to display the results calling the method Show, get the ROC-integral with the; * method GetROCIntegral or get the TMVA::ROCCurve object calling GetROC.; \ingroup TMVA; */; /*! \class TMVA::Classification; * Class to perform two class classification.; * The first step before any analysis is to prepare the data,; * to do that you need to create an object of TMVA::DataLoader,; * in this object you need to configure the variables and the number of events; * to train/test.; * The class TMVA::Experimental::Classification needs a TMVA::DataLoader object,; * optional a TFile object to save the results and some extra options in a string; * like ""V:Color:Transformations=I;D;P;U;G:Silent:DrawProgressBar:ModelPersistence:Jobs=2"" where:; * V = verbose output; * Color = coloured screen output; * Silent = batch mode: boolean silent flag inhibiting any output from TMVA; * Transformations = list of transformations to test.; * DrawProgressBar = draw progress bar to display training and testing.; * ModelPersistence = to save the trained model in xml or serialized files.; * Jobs = number of ml methods to test/train in parallel using MultiProc, requires to call Evaluate method.; * Basic example.; * \code; void classification(UInt_t jobs = 2); {; TMVA::Tools::Instance();. TFile *input(0);; TString fname = ""./tmva_class_example.root"";; if (!gSystem->AccessPathName(fname)) {; input = TFile::Open(fname); // check if file in local directory exists; } else {; TFile::SetCacheFileDir(""."");; input = TFile::Open(""http://root.cern/files/tmva_class_example.root"", ""CACHEREAD"");; }; if (!input) {; std::cout << ""ERROR: could not open data file"" << std::endl;; exit(1);; }. // Register the training and test trees. TTree *si",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Classification.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h:1269,Testability,test,testing,1269,"ame and ml method name and title.; * You can to display the results calling the method Show, get the ROC-integral with the; * method GetROCIntegral or get the TMVA::ROCCurve object calling GetROC.; \ingroup TMVA; */; /*! \class TMVA::Classification; * Class to perform two class classification.; * The first step before any analysis is to prepare the data,; * to do that you need to create an object of TMVA::DataLoader,; * in this object you need to configure the variables and the number of events; * to train/test.; * The class TMVA::Experimental::Classification needs a TMVA::DataLoader object,; * optional a TFile object to save the results and some extra options in a string; * like ""V:Color:Transformations=I;D;P;U;G:Silent:DrawProgressBar:ModelPersistence:Jobs=2"" where:; * V = verbose output; * Color = coloured screen output; * Silent = batch mode: boolean silent flag inhibiting any output from TMVA; * Transformations = list of transformations to test.; * DrawProgressBar = draw progress bar to display training and testing.; * ModelPersistence = to save the trained model in xml or serialized files.; * Jobs = number of ml methods to test/train in parallel using MultiProc, requires to call Evaluate method.; * Basic example.; * \code; void classification(UInt_t jobs = 2); {; TMVA::Tools::Instance();. TFile *input(0);; TString fname = ""./tmva_class_example.root"";; if (!gSystem->AccessPathName(fname)) {; input = TFile::Open(fname); // check if file in local directory exists; } else {; TFile::SetCacheFileDir(""."");; input = TFile::Open(""http://root.cern/files/tmva_class_example.root"", ""CACHEREAD"");; }; if (!input) {; std::cout << ""ERROR: could not open data file"" << std::endl;; exit(1);; }. // Register the training and test trees. TTree *signalTree = (TTree *)input->Get(""TreeS"");; TTree *background = (TTree *)input->Get(""TreeB"");. TMVA::DataLoader *dataloader = new TMVA::DataLoader(""dataset"");. dataloader->AddVariable(""myvar1 := var1+var2"", 'F');; dataloader->AddVariable(""myv",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Classification.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h:1388,Testability,test,test,1388,"OCCurve object calling GetROC.; \ingroup TMVA; */; /*! \class TMVA::Classification; * Class to perform two class classification.; * The first step before any analysis is to prepare the data,; * to do that you need to create an object of TMVA::DataLoader,; * in this object you need to configure the variables and the number of events; * to train/test.; * The class TMVA::Experimental::Classification needs a TMVA::DataLoader object,; * optional a TFile object to save the results and some extra options in a string; * like ""V:Color:Transformations=I;D;P;U;G:Silent:DrawProgressBar:ModelPersistence:Jobs=2"" where:; * V = verbose output; * Color = coloured screen output; * Silent = batch mode: boolean silent flag inhibiting any output from TMVA; * Transformations = list of transformations to test.; * DrawProgressBar = draw progress bar to display training and testing.; * ModelPersistence = to save the trained model in xml or serialized files.; * Jobs = number of ml methods to test/train in parallel using MultiProc, requires to call Evaluate method.; * Basic example.; * \code; void classification(UInt_t jobs = 2); {; TMVA::Tools::Instance();. TFile *input(0);; TString fname = ""./tmva_class_example.root"";; if (!gSystem->AccessPathName(fname)) {; input = TFile::Open(fname); // check if file in local directory exists; } else {; TFile::SetCacheFileDir(""."");; input = TFile::Open(""http://root.cern/files/tmva_class_example.root"", ""CACHEREAD"");; }; if (!input) {; std::cout << ""ERROR: could not open data file"" << std::endl;; exit(1);; }. // Register the training and test trees. TTree *signalTree = (TTree *)input->Get(""TreeS"");; TTree *background = (TTree *)input->Get(""TreeB"");. TMVA::DataLoader *dataloader = new TMVA::DataLoader(""dataset"");. dataloader->AddVariable(""myvar1 := var1+var2"", 'F');; dataloader->AddVariable(""myvar2 := var1-var2"", ""Expression 2"", """", 'F');; dataloader->AddVariable(""var3"", ""Variable 3"", ""units"", 'F');; dataloader->AddVariable(""var4"", ""Variable 4"", ""units"", 'F'",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Classification.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h:1980,Testability,test,test,1980,"t:DrawProgressBar:ModelPersistence:Jobs=2"" where:; * V = verbose output; * Color = coloured screen output; * Silent = batch mode: boolean silent flag inhibiting any output from TMVA; * Transformations = list of transformations to test.; * DrawProgressBar = draw progress bar to display training and testing.; * ModelPersistence = to save the trained model in xml or serialized files.; * Jobs = number of ml methods to test/train in parallel using MultiProc, requires to call Evaluate method.; * Basic example.; * \code; void classification(UInt_t jobs = 2); {; TMVA::Tools::Instance();. TFile *input(0);; TString fname = ""./tmva_class_example.root"";; if (!gSystem->AccessPathName(fname)) {; input = TFile::Open(fname); // check if file in local directory exists; } else {; TFile::SetCacheFileDir(""."");; input = TFile::Open(""http://root.cern/files/tmva_class_example.root"", ""CACHEREAD"");; }; if (!input) {; std::cout << ""ERROR: could not open data file"" << std::endl;; exit(1);; }. // Register the training and test trees. TTree *signalTree = (TTree *)input->Get(""TreeS"");; TTree *background = (TTree *)input->Get(""TreeB"");. TMVA::DataLoader *dataloader = new TMVA::DataLoader(""dataset"");. dataloader->AddVariable(""myvar1 := var1+var2"", 'F');; dataloader->AddVariable(""myvar2 := var1-var2"", ""Expression 2"", """", 'F');; dataloader->AddVariable(""var3"", ""Variable 3"", ""units"", 'F');; dataloader->AddVariable(""var4"", ""Variable 4"", ""units"", 'F');. dataloader->AddSpectator(""spec1 := var1*2"", ""Spectator 1"", ""units"", 'F');; dataloader->AddSpectator(""spec2 := var1*3"", ""Spectator 2"", ""units"", 'F');. // global event weights per tree (see below for setting event-wise weights); Double_t signalWeight = 1.0;; Double_t backgroundWeight = 1.0;. dataloader->SetBackgroundWeightExpression(""weight"");. TMVA::Experimental::Classification *cl = new TMVA::Experimental::Classification(dataloader, Form(""Jobs=%d"", jobs));. cl->BookMethod(TMVA::Types::kBDT, ""BDTG"", ""!H:!V:NTrees=2000:MinNodeSize=2.5%:BoostType=Grad:Shrin",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Classification.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h:3163,Testability,Test,Test,3163,"(fname); // check if file in local directory exists; } else {; TFile::SetCacheFileDir(""."");; input = TFile::Open(""http://root.cern/files/tmva_class_example.root"", ""CACHEREAD"");; }; if (!input) {; std::cout << ""ERROR: could not open data file"" << std::endl;; exit(1);; }. // Register the training and test trees. TTree *signalTree = (TTree *)input->Get(""TreeS"");; TTree *background = (TTree *)input->Get(""TreeB"");. TMVA::DataLoader *dataloader = new TMVA::DataLoader(""dataset"");. dataloader->AddVariable(""myvar1 := var1+var2"", 'F');; dataloader->AddVariable(""myvar2 := var1-var2"", ""Expression 2"", """", 'F');; dataloader->AddVariable(""var3"", ""Variable 3"", ""units"", 'F');; dataloader->AddVariable(""var4"", ""Variable 4"", ""units"", 'F');. dataloader->AddSpectator(""spec1 := var1*2"", ""Spectator 1"", ""units"", 'F');; dataloader->AddSpectator(""spec2 := var1*3"", ""Spectator 2"", ""units"", 'F');. // global event weights per tree (see below for setting event-wise weights); Double_t signalWeight = 1.0;; Double_t backgroundWeight = 1.0;. dataloader->SetBackgroundWeightExpression(""weight"");. TMVA::Experimental::Classification *cl = new TMVA::Experimental::Classification(dataloader, Form(""Jobs=%d"", jobs));. cl->BookMethod(TMVA::Types::kBDT, ""BDTG"", ""!H:!V:NTrees=2000:MinNodeSize=2.5%:BoostType=Grad:Shrinkage=0.10:""; ""UseBaggedBoost:BaggedSampleFraction=0.5:nCuts=20:MaxDepth=2"");; cl->BookMethod(TMVA::Types::kSVM, ""SVM"", ""Gamma=0.25:Tol=0.001:VarTransform=Norm"");. cl->Evaluate(); // Train and Test all methods. auto &results = cl->GetResults();. TCanvas *c = new TCanvas(Form(""ROC""));; c->SetTitle(""ROC-Integral Curve"");. auto mg = new TMultiGraph();; for (UInt_t i = 0; i < results.size(); i++) {; auto roc = results[i].GetROCGraph();; roc->SetLineColorAlpha(i + 1, 0.1);; mg->Add(roc);; }; mg->Draw(""AL"");; mg->GetXaxis()->SetTitle("" Signal Efficiency "");; mg->GetYaxis()->SetTitle("" Background Rejection "");; c->BuildLegend(0.15, 0.15, 0.3, 0.3);; c->Draw();. delete cl;; }; * \endcode; *; \ingroup TMVA; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Classification.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h:103,Usability,learn,learning,103,"/*! \class TMVA::ClassificationResult; * Class to save the results of the classifier.; * Every machine learning method booked have an object for the results; * in the classification process, in this class is stored the mvas,; * data loader name and ml method name and title.; * You can to display the results calling the method Show, get the ROC-integral with the; * method GetROCIntegral or get the TMVA::ROCCurve object calling GetROC.; \ingroup TMVA; */; /*! \class TMVA::Classification; * Class to perform two class classification.; * The first step before any analysis is to prepare the data,; * to do that you need to create an object of TMVA::DataLoader,; * in this object you need to configure the variables and the number of events; * to train/test.; * The class TMVA::Experimental::Classification needs a TMVA::DataLoader object,; * optional a TFile object to save the results and some extra options in a string; * like ""V:Color:Transformations=I;D;P;U;G:Silent:DrawProgressBar:ModelPersistence:Jobs=2"" where:; * V = verbose output; * Color = coloured screen output; * Silent = batch mode: boolean silent flag inhibiting any output from TMVA; * Transformations = list of transformations to test.; * DrawProgressBar = draw progress bar to display training and testing.; * ModelPersistence = to save the trained model in xml or serialized files.; * Jobs = number of ml methods to test/train in parallel using MultiProc, requires to call Evaluate method.; * Basic example.; * \code; void classification(UInt_t jobs = 2); {; TMVA::Tools::Instance();. TFile *input(0);; TString fname = ""./tmva_class_example.root"";; if (!gSystem->AccessPathName(fname)) {; input = TFile::Open(fname); // check if file in local directory exists; } else {; TFile::SetCacheFileDir(""."");; input = TFile::Open(""http://root.cern/files/tmva_class_example.root"", ""CACHEREAD"");; }; if (!input) {; std::cout << ""ERROR: could not open data file"" << std::endl;; exit(1);; }. // Register the training and test trees. TTree *si",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Classification.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h:1232,Usability,progress bar,progress bar,1232,"ame and ml method name and title.; * You can to display the results calling the method Show, get the ROC-integral with the; * method GetROCIntegral or get the TMVA::ROCCurve object calling GetROC.; \ingroup TMVA; */; /*! \class TMVA::Classification; * Class to perform two class classification.; * The first step before any analysis is to prepare the data,; * to do that you need to create an object of TMVA::DataLoader,; * in this object you need to configure the variables and the number of events; * to train/test.; * The class TMVA::Experimental::Classification needs a TMVA::DataLoader object,; * optional a TFile object to save the results and some extra options in a string; * like ""V:Color:Transformations=I;D;P;U;G:Silent:DrawProgressBar:ModelPersistence:Jobs=2"" where:; * V = verbose output; * Color = coloured screen output; * Silent = batch mode: boolean silent flag inhibiting any output from TMVA; * Transformations = list of transformations to test.; * DrawProgressBar = draw progress bar to display training and testing.; * ModelPersistence = to save the trained model in xml or serialized files.; * Jobs = number of ml methods to test/train in parallel using MultiProc, requires to call Evaluate method.; * Basic example.; * \code; void classification(UInt_t jobs = 2); {; TMVA::Tools::Instance();. TFile *input(0);; TString fname = ""./tmva_class_example.root"";; if (!gSystem->AccessPathName(fname)) {; input = TFile::Open(fname); // check if file in local directory exists; } else {; TFile::SetCacheFileDir(""."");; input = TFile::Open(""http://root.cern/files/tmva_class_example.root"", ""CACHEREAD"");; }; if (!input) {; std::cout << ""ERROR: could not open data file"" << std::endl;; exit(1);; }. // Register the training and test trees. TTree *signalTree = (TTree *)input->Get(""TreeS"");; TTree *background = (TTree *)input->Get(""TreeB"");. TMVA::DataLoader *dataloader = new TMVA::DataLoader(""dataset"");. dataloader->AddVariable(""myvar1 := var1+var2"", 'F');; dataloader->AddVariable(""myv",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Classification.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ClassifierFactory.h:200,Deployability,integrat,integrated,200,"// @(#)Root/tmva $Id$ ; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss ; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Factory *; * *; * *; * Description: *; * This template creates ClassifierFactory stores creator functors *; * to template parameter class. ClassifierFactory is a singelton class *; * which is explicitly deleted. *; * *; * Authors (alphabetical): *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * *; * Copyright (c) 2008: *; * DESY, Germany * ; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ClassifierFactory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ClassifierFactory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ClassifierFactory.h:200,Integrability,integrat,integrated,200,"// @(#)Root/tmva $Id$ ; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss ; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Factory *; * *; * *; * Description: *; * This template creates ClassifierFactory stores creator functors *; * to template parameter class. ClassifierFactory is a singelton class *; * which is explicitly deleted. *; * *; * Authors (alphabetical): *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * *; * Copyright (c) 2008: *; * DESY, Germany * ; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ClassifierFactory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ClassifierFactory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ClassifierFactory.h:33,Security,access,access,33,"// must use Instance() method to access/create ClassifierFactory",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ClassifierFactory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ClassifierFactory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ClassInfo.h:188,Deployability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : ClassInfo *; * *; * *; * Description: *; * Contains all the data information *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ClassInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ClassInfo.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ClassInfo.h:188,Integrability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : ClassInfo *; * *; * *; * Description: *; * Contains all the data information *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ClassInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ClassInfo.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ClassInfo.h:6,Integrability,message,message,6,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ClassInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ClassInfo.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ClassInfo.h:14,Testability,log,logger,14,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ClassInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ClassInfo.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h:208,Deployability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Config *; * *; * *; * Description: *; * GLobal configuration settings (singleton) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, GER *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * Iowa State U., USA *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h:337,Deployability,configurat,configuration,337,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Config *; * *; * *; * Description: *; * GLobal configuration settings (singleton) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, GER *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * Iowa State U., USA *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h:208,Integrability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Config *; * *; * *; * Description: *; * GLobal configuration settings (singleton) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, GER *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * Iowa State U., USA *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h:290,Modifiability,Config,Config,290,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Config *; * *; * *; * Description: *; * GLobal configuration settings (singleton) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, GER *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * Iowa State U., USA *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h:337,Modifiability,config,configuration,337,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Config *; * *; * *; * Description: *; * GLobal configuration settings (singleton) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, GER *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * Iowa State U., USA *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h:134,Deployability,configurat,configuration,134,"//////////////////////////////////////////////////////////////////////////; // //; // Config //; // //; // Singleton class for global configuration settings used by TMVA //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h:86,Modifiability,Config,Config,86,"//////////////////////////////////////////////////////////////////////////; // //; // Config //; // //; // Singleton class for global configuration settings used by TMVA //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h:134,Modifiability,config,configuration,134,"//////////////////////////////////////////////////////////////////////////; // //; // Config //; // //; // Singleton class for global configuration settings used by TMVA //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h:16,Performance,multi-thread,multi-thread,16,"// Executor for multi-thread or serial execution",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h:27,Performance,multi-thread,multi-thread,27,"/// Get executor class for multi-thread usage; /// In case when MT is not enabled will return a serial executor",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h:35,Deployability,release,release,35,"/// Force disabling MT running and release the thread pool by using instead seriaql execution",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h:12,Security,access,accessible,12,"// publicly accessible global settings",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h:28,Modifiability,config,configure,28,"// data collection class to configure plotting of variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h:50,Modifiability,variab,variables,50,"// data collection class to configure plotting of variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h:10,Usability,progress bar,progress bar,10,"///< draw progress bar to indicate training evolution",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h:18,Modifiability,Config,Configurable,18,"///< if set true: Configurable objects write file with option reference",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h:6,Integrability,message,message,6,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h:14,Testability,log,logger,14,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h:30,Deployability,configurat,configuration,30,"// Singleton class for global configuration settings",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h:30,Modifiability,config,configuration,30,"// Singleton class for global configuration settings",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h:10,Security,access,accessor,10,"// global accessor",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Configurable.h:188,Deployability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Configurable *; * *; * *; * Description: *; * Base class for all classes with option parsing *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Configurable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Configurable.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Configurable.h:188,Integrability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Configurable *; * *; * *; * Description: *; * Base class for all classes with option parsing *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Configurable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Configurable.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Configurable.h:270,Modifiability,Config,Configurable,270,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Configurable *; * *; * *; * Description: *; * Base class for all classes with option parsing *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Configurable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Configurable.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Configurable.h:86,Modifiability,Config,Configurable,86,"//////////////////////////////////////////////////////////////////////////; // //; // Configurable //; // //; // Base class for all classes with option parsing //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Configurable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Configurable.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Configurable.h:35,Modifiability,variab,variable,35,"// Declare option and bind it to a variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Configurable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Configurable.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Configurable.h:74,Modifiability,flexible,flexible,74,"///< checker for option string; // classes and method related to easy and flexible option parsing",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Configurable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Configurable.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Configurable.h:25,Modifiability,config,configurable,25,"///< description of this configurable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Configurable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Configurable.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Configurable.h:48,Testability,log,logger,48,"// the mutable declaration is needed to use the logger in const methods",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Configurable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Configurable.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Configurable.h:7,Integrability,message,message,7,"// set message type",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Configurable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Configurable.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Configurable.h:6,Integrability,message,message,6,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Configurable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Configurable.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Configurable.h:14,Testability,log,logger,14,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Configurable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Configurable.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ConvergenceTest.h:188,Deployability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : ConvergenceTest *; * *; * *; * Description: *; * Contains all the data information *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ConvergenceTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ConvergenceTest.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ConvergenceTest.h:188,Integrability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : ConvergenceTest *; * *; * *; * Description: *; * Contains all the data information *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ConvergenceTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ConvergenceTest.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ConvergenceTest.h:77,Usability,learn,learning,77,"///<! maximum value for the counter so far; // speed-control (gives back the learning speed = improvement-rate in the last N steps); // successList keeps track of the improvements to be able",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ConvergenceTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ConvergenceTest.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CostComplexityPruneTool.h:110,Deployability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::DecisionTree *; * *; * *; * Description: *; * Implementation of a Decision Tree *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Doug Schouten <dschoute@sfu.ca> - Simon Fraser U., Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/CostComplexityPruneTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CostComplexityPruneTool.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CostComplexityPruneTool.h:110,Integrability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::DecisionTree *; * *; * *; * Description: *; * Implementation of a Decision Tree *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Doug Schouten <dschoute@sfu.ca> - Simon Fraser U., Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/CostComplexityPruneTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CostComplexityPruneTool.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CostComplexityPruneTool.h:1215,Security,validat,validation,1215,"////////////////////////////////////////////////////////////////////////////////////////////////////////////; // CostComplexityPruneTool - a class to prune a decision tree using the Cost Complexity method //; // (see ""Classification and Regression Trees"" by Leo Breiman et al) //; // //; // Some definitions: //; // //; // T_max - the initial, usually highly overtrained tree, that is to be pruned back //; // R(T) - quality index (Gini, misclassification rate, or other) of a tree T //; // ~T - set of terminal nodes in T //; // T' - the pruned subtree of T_max that has the best quality index R(T') //; // alpha - the prune strength parameter in Cost Complexity pruning (R_alpha(T) = R(T) + alpha*|~T|) //; // //; // There are two running modes in CostComplexityPruneTool: (i) one may select a prune strength and prune //; // the tree T_max until the criterion //; // R(T) - R(t) //; // alpha < ---------- //; // |~T_t| - 1 //; // //; // is true for all nodes t in T, or (ii) the algorithm finds the sequence of critical points //; // alpha_k < alpha_k+1 ... < alpha_K such that T_K = root(T_max) and then selects the optimally-pruned //; // subtree, defined to be the subtree with the best quality index for the validation sample. //; ////////////////////////////////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/CostComplexityPruneTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CostComplexityPruneTool.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CostComplexityPruneTool.h:3,Performance,optimiz,optimize,3,"// optimize the pruning sequence",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/CostComplexityPruneTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CostComplexityPruneTool.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CostComplexityPruneTool.h:26,Testability,log,logging,26,"//! output stream to save logging information",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/CostComplexityPruneTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CostComplexityPruneTool.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CrossEntropy.h:200,Deployability,integrat,integrated,200,"// @(#)root/tmva $Id$ ; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss ; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : CrossEntropy *; * *; * *; * Description: Implementation of the CrossEntropy as separation criterion *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland * ; * U. of Victoria, Canada * ; * Heidelberg U., Germany * ; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/CrossEntropy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CrossEntropy.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CrossEntropy.h:200,Integrability,integrat,integrated,200,"// @(#)root/tmva $Id$ ; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss ; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : CrossEntropy *; * *; * *; * Description: Implementation of the CrossEntropy as separation criterion *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland * ; * U. of Victoria, Canada * ; * Heidelberg U., Germany * ; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/CrossEntropy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CrossEntropy.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CrossEntropy.h:182,Testability,log,log,182,"//////////////////////////////////////////////////////////////////////////; // //; // CrossEntropy //; // //; // Implementation of the CrossEntropy as separation criterion //; // -p log (p) - (1-p)log(1-p); p=purity = s/(s+b) // ; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/CrossEntropy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CrossEntropy.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CrossEntropy.h:197,Testability,log,log,197,"//////////////////////////////////////////////////////////////////////////; // //; // CrossEntropy //; // //; // Implementation of the CrossEntropy as separation criterion //; // -p log (p) - (1-p)log(1-p); p=purity = s/(s+b) // ; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/CrossEntropy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CrossEntropy.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CrossEntropy.h:34,Testability,log,log,34,"// return the separation Index -p log (p) - (1-p)log(1-p); p=purity = s/(s+b) ",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/CrossEntropy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CrossEntropy.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CrossEntropy.h:49,Testability,log,log,49,"// return the separation Index -p log (p) - (1-p)log(1-p); p=purity = s/(s+b) ",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/CrossEntropy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CrossEntropy.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CrossValidation.h:280,Performance,perform,perform,280,"/*! \class TMVA::CrossValidationResult; * Class to save the results of cross validation,; * the metric for the classification ins ROC and you can ROC curves; * ROC integrals, ROC average and ROC standard deviation.; \ingroup TMVA; */; /*! \class TMVA::CrossValidation; * Class to perform cross validation, splitting the dataloader into folds.; \ingroup TMVA; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/CrossValidation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CrossValidation.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CrossValidation.h:77,Security,validat,validation,77,"/*! \class TMVA::CrossValidationResult; * Class to save the results of cross validation,; * the metric for the classification ins ROC and you can ROC curves; * ROC integrals, ROC average and ROC standard deviation.; \ingroup TMVA; */; /*! \class TMVA::CrossValidation; * Class to perform cross validation, splitting the dataloader into folds.; \ingroup TMVA; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/CrossValidation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CrossValidation.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CrossValidation.h:294,Security,validat,validation,294,"/*! \class TMVA::CrossValidationResult; * Class to save the results of cross validation,; * the metric for the classification ins ROC and you can ROC curves; * ROC integrals, ROC average and ROC standard deviation.; \ingroup TMVA; */; /*! \class TMVA::CrossValidation; * Class to perform cross validation, splitting the dataloader into folds.; \ingroup TMVA; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/CrossValidation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CrossValidation.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataInputHandler.h:206,Deployability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : DataInputHandler *; * *; * *; * Description: *; * Contains all the data information *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataInputHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataInputHandler.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataInputHandler.h:206,Integrability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : DataInputHandler *; * *; * *; * Description: *; * Contains all the data information *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataInputHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataInputHandler.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataInputHandler.h:26,Testability,test,testing,26,"///< tree is for training/testing/both",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataInputHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataInputHandler.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataInputHandler.h:3,Security,access,accessors,3,"// accessors",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataInputHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataInputHandler.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataInputHandler.h:56,Testability,test,testing,56,"///< if set to true the user has specified training and testing data explicitly",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataInputHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataInputHandler.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataInputHandler.h:6,Integrability,message,message,6,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataInputHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataInputHandler.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataInputHandler.h:14,Testability,log,logger,14,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataInputHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataInputHandler.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataLoader.h:327,Deployability,integrat,integrated,327,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag, Omar Zapata, Lorenzo Moneta, Sergei Gleyzer; //NOTE: Based on TMVA::Factory; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : DataLoader *; * *; * *; * Description: *; * This is a class to load datasets into every booked method *; * *; * Authors (alphabetical): *; * Lorenzo Moneta <Lorenzo.Moneta@cern.ch> - CERN, Switzerland *; * Omar Zapata <andresete.chaos@gmail.com> - ITM/UdeA, Colombia *; * Sergei Gleyzer<sergei.gleyzer@cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * ITM/UdeA, Colombia *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataLoader.h:327,Integrability,integrat,integrated,327,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag, Omar Zapata, Lorenzo Moneta, Sergei Gleyzer; //NOTE: Based on TMVA::Factory; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : DataLoader *; * *; * *; * Description: *; * This is a class to load datasets into every booked method *; * *; * Authors (alphabetical): *; * Lorenzo Moneta <Lorenzo.Moneta@cern.ch> - CERN, Switzerland *; * Omar Zapata <andresete.chaos@gmail.com> - ITM/UdeA, Colombia *; * Sergei Gleyzer<sergei.gleyzer@cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * ITM/UdeA, Colombia *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataLoader.h:472,Performance,load,load,472,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag, Omar Zapata, Lorenzo Moneta, Sergei Gleyzer; //NOTE: Based on TMVA::Factory; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : DataLoader *; * *; * *; * Description: *; * This is a class to load datasets into every booked method *; * *; * Authors (alphabetical): *; * Lorenzo Moneta <Lorenzo.Moneta@cern.ch> - CERN, Switzerland *; * Omar Zapata <andresete.chaos@gmail.com> - ITM/UdeA, Colombia *; * Sergei Gleyzer<sergei.gleyzer@cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * ITM/UdeA, Colombia *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataLoader.h:30,Testability,test,testing,30,"// add events to training and testing trees",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataLoader.h:13,Modifiability,variab,variable,13,"// set input variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataLoader.h:24,Modifiability,variab,variables,24,"// NEW: add an array of variables (e.g. for image data) with the provided size",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataLoader.h:9,Security,validat,validation,9,"// Cross validation",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataLoader.h:32,Testability,test,test,32,"///< List of transformations to test",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataLoader.h:60,Testability,test,test,60,"///< verbose mode; // flag determining the way training and test data are assigned to DataLoader",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataLoader.h:11,Modifiability,variab,variables,11,"///< event variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h:206,Deployability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : DataSet *; * *; * *; * Description: *; * Contains all the data information *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h:206,Integrability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : DataSet *; * *; * *; * Description: *; * Contains all the data information *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h:102,Security,Validat,Validation,102,"// sets the number of blocks to which the training set is divided,; // some of which are given to the Validation sample. As default they belong all to Training set.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h:85,Security,Validat,Validation,85,"// sets a certain block from the origin training set to belong to either Training or Validation set",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h:3,Security,access,accessors,3,"// accessors for random and importance sampling",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h:33,Testability,test,testing,33,"///< list of events for training/testing/...",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h:13,Testability,test,test,13,"///<! [train/test/...][method-identifier]",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h:123,Performance,perform,performance,123,"///< random or importance sampling (not all events are taken) !! Bool_t are stored ( no std::vector<bool> taken for speed (performance) issues )",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h:79,Security,validat,validation,79,"///< number of events of class 0,1,2,... in training[0]; ///< and testing[1] (+validation, trainingoriginal)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h:66,Testability,test,testing,66,"///< number of events of class 0,1,2,... in training[0]; ///< and testing[1] (+validation, trainingoriginal)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h:6,Integrability,message,message,6,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h:14,Testability,log,logger,14,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h:194,Performance,perform,performance,194,"///< when dividing the dataset to blocks, sets whether; ///< the certain block is in the Training set or else; ///< in the validation set; ///< boolean are stored, taken std::vector<Char_t> for performance reasons (instead of std::vector<Bool_t>)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h:123,Security,validat,validation,123,"///< when dividing the dataset to blocks, sets whether; ///< the certain block is in the Training set or else; ///< in the validation set; ///< boolean are stored, taken std::vector<Char_t> for performance reasons (instead of std::vector<Bool_t>)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetFactory.h:226,Deployability,integrat,integrated,226,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Eckhard von Toerne, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : DataSetFactory *; * *; * *; * Description: *; * Contains all the data information *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Eckhard von Toerne <evt@physik.uni-bonn.de> - U. of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSetFactory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetFactory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetFactory.h:226,Integrability,integrat,integrated,226,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Eckhard von Toerne, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : DataSetFactory *; * *; * *; * Description: *; * Contains all the data information *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Eckhard von Toerne <evt@physik.uni-bonn.de> - U. of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSetFactory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetFactory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetFactory.h:27,Safety,avoid,avoid,27,"///< the current event (to avoid reading of the same event); // the formulas for reading the original tree",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSetFactory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetFactory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetFactory.h:11,Modifiability,variab,variables,11,"///< input variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSetFactory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetFactory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetFactory.h:12,Modifiability,variab,variables,12,"///<! input variables expression for arrays",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSetFactory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetFactory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetFactory.h:6,Integrability,message,message,6,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSetFactory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetFactory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetFactory.h:14,Testability,log,logger,14,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSetFactory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetFactory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetInfo.h:209,Deployability,integrat,integrated,209,"// // @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : DataSetInfo *; * *; * *; * Description: *; * Contains all the data information *; * *; * Authors (alphabetical): *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - DESY, Germany *; * *; * Copyright (c) 2008-2011: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * DESY Hamburg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetInfo.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetInfo.h:209,Integrability,integrat,integrated,209,"// // @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : DataSetInfo *; * *; * *; * Description: *; * Contains all the data information *; * *; * Authors (alphabetical): *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - DESY, Germany *; * *; * Copyright (c) 2008-2011: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * DESY Hamburg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetInfo.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetInfo.h:15,Modifiability,variab,variable,15,"// ---; // the variable data; // ---",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetInfo.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetInfo.h:24,Modifiability,variab,variables,24,"// NEW: add an array of variables (e.g. for image data)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetInfo.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetInfo.h:3,Security,access,accessors,3,"// accessors; // general",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetInfo.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetInfo.h:6,Modifiability,variab,variable,6,"// by variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetInfo.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetInfo.h:27,Testability,test,test,27,"// DSMTEST (datasetmanager test)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetInfo.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetInfo.h:13,Modifiability,variab,variable,13,"///< list of variable expressions/internal names",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetInfo.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetInfo.h:55,Modifiability,variab,variable,55,"///< list of spectators expressions/internal names; // variable arrays",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetInfo.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetInfo.h:6,Integrability,message,message,6,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetInfo.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetInfo.h:14,Testability,log,logger,14,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetInfo.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetManager.h:206,Deployability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : DataSetManager *; * *; * *; * Description: *; * Singleton class for dataset management *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSetManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetManager.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetManager.h:206,Integrability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : DataSetManager *; * *; * *; * Description: *; * Singleton class for dataset management *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSetManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetManager.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetManager.h:3,Security,access,access,3,"// access to input data",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSetManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetManager.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetManager.h:6,Integrability,message,message,6,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSetManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetManager.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetManager.h:14,Testability,log,logger,14,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DataSetManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetManager.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h:232,Deployability,integrat,integrated,232,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Jan Therhaag, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : DecisionTree *; * *; * *; * Description: *; * Implementation of a Decision Tree *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h:232,Integrability,integrat,integrated,232,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Jan Therhaag, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : DecisionTree *; * *; * *; * Description: *; * Implementation of a Decision Tree *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h:48,Modifiability,variab,variable,48,"// determine the way how a node is split (which variable, which cut value)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h:34,Modifiability,variab,variable,34,"// return the individual relative variable importance",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h:3,Usability,clear,clear,3,"// clear the tree nodes (their S/N, Nevents etc), just keep the structure of the tree",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h:34,Security,validat,validation,34,"// recursive pruning of the tree, validation sample required for automatic pruning",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h:17,Security,validat,validation,17,"// apply pruning validation sample to a decision tree",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h:17,Security,validat,validation,17,"// pass a single validation event through a pruned decision tree",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h:52,Security,validat,validation,52,"// calculate the normalization factor for a pruning validation sample",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h:15,Modifiability,variab,variables,15,"///< number of variables used to separate S and B",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h:29,Modifiability,variab,variable,29,"///< number of grid point in variable cut scans",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h:48,Modifiability,variab,variables,48,"///< the minimum linear correlation between two variables demanded for use in fisher criterium in node splitting",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h:16,Modifiability,variab,variables,16,"///< individual variables already used in fisher criterium are not anymore analysed individually for node splitting",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h:38,Performance,perform,perform,38,"///< min number of separation gain to perform node splitting",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h:40,Usability,simpl,simple,40,"///< cut scan done with binary trees or simple event loop.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h:57,Energy Efficiency,monitor,monitor,57,"///< remember this one (in case of pruning, it allows to monitor the before/after",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h:51,Modifiability,variab,variables,51,"///< choose at each node splitting a random set of variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h:19,Modifiability,variab,variables,19,"///< the number of variables used in randomised trees;",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h:46,Modifiability,variab,variables,46,"///< the relative importance of the different variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h:218,Deployability,integrat,integrated,218,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : DecisionTreeNode *; * *; * *; * Description: *; * Node for the Decision Tree *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Eckhard von Toerne <evt@physik.uni-bonn.de> - U. of Bonn, Germany *; * *; * Copyright (c) 2009: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTreeNode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h:218,Integrability,integrat,integrated,218,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : DecisionTreeNode *; * *; * *; * Description: *; * Node for the Decision Tree *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Eckhard von Toerne <evt@physik.uni-bonn.de> - U. of Bonn, Germany *; * *; * Copyright (c) 2009: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTreeNode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h:11,Modifiability,variab,variable,11,"///< debug variable for cost complexity pruning ..",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTreeNode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h:3,Testability,test,test,3,"// test event if it descends the tree at this node to the right",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTreeNode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h:3,Testability,test,test,3,"// test event if it descends the tree at this node to the left",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTreeNode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h:17,Modifiability,variab,variable,17,"/// set index of variable used for discrimination at this node",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTreeNode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h:20,Modifiability,variab,variable,20,"/// return index of variable used for discrimination at this node",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTreeNode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h:23,Modifiability,variab,variable,23,"/// set true: if event variable > cutValue ==> signal , false otherwise",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTreeNode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h:15,Usability,clear,clear,15,"// recursively clear the nodes content (S/N etc, but not the cut criteria)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTreeNode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h:53,Security,validat,validation,53,"/// set number of background events from the pruning validation sample, if traininfo defined",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTreeNode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h:49,Security,validat,validation,49,"/// set number of signal events from the pruning validation sample, if traininfo defined",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTreeNode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h:56,Security,validat,validation,56,"/// return number of background events from the pruning validation sample, or -1 if traininfo undefined",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTreeNode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h:52,Security,validat,validation,52,"/// return number of signal events from the pruning validation sample, or -1 if traininfo undefined",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTreeNode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h:21,Security,validat,validation,21,"// reset the pruning validation data",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTreeNode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h:12,Modifiability,variab,variable,12,"///< static variable to flag training phase in which we need fTrainInfo",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTreeNode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h:20,Modifiability,variab,variable,20,"///< true: if event variable > cutValue ==> signal , false otherwise",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTreeNode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h:14,Modifiability,variab,variable,14,"///< index of variable used in node selection (decision tree)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DecisionTreeNode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Envelope.h:270,Usability,learn,learning,270,"/*! \class TMVA::Envelope; * Abstract base class for all high level ml algorithms,; * you can book ml methods like BDT, MLP. SVM etc..; * and set a TMVA::DataLoader object to run your code; * in the overloaded method Evaluate.; \ingroup TMVA. Base class for all machine learning algorithms. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Envelope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Envelope.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Envelope.h:33,Testability,test,test,33,"///<! List of transformations to test",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Envelope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Envelope.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Event.h:220,Deployability,integrat,integrated,220,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Event *; * *; * *; * Description: *; * Event container *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Event.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Event.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Event.h:220,Integrability,integrat,integrated,220,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Event *; * *; * *; * Description: *; * Event container *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Event.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Event.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Event.h:105,Integrability,interface,interface,105,"// operators; // NOTE: Because we do not want to change the behaviour of the Event class; // as a public interface, we use the explicit default assignment operator,; // which is similar to the implicit one but silences gcc9 warnings.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Event.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Event.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Event.h:3,Security,access,accessors,3,"// accessors",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Event.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Event.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Event.h:54,Safety,Avoid,Avoid,54,"//For a detailed explanation, please see the heading ""Avoid Duplication in const and Non-const Member Function,"" on p. 23, in Item 3 ""Use const whenever possible,"" in Effective C++, 3d ed by Scott Meyers, ISBN-13: 9780321334879.; // http://stackoverflow.com/questions/123758/how-do-i-remove-code-duplication-between-similar-const-and-non-const-member-func",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Event.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Event.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Event.h:55,Testability,test,testing,55,"// mark if we are in an actual training or ""evaluation/testing"" phase --> ignoreNegWeights only in actual training !",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Event.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Event.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Event.h:16,Modifiability,variab,variables,16,"///< ""visiting"" variables not used in MVAs ; mutable, to be able to copy the dynamic values in there",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Event.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Event.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Event.h:76,Modifiability,variab,variables,76,"///< needed for MethodCategories, where we can train on other than the main variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Event.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Event.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Event.h:27,Modifiability,variab,variable,27,"///< type of the spectator variable (typically F or I). Used ony for dynamic events",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Event.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Event.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Executor.h:514,Integrability,wrap,wrapping,514,"// @(#)root/tmva $Id$; // Author: Lorenzo Moneta; /*************************************************************************; * Copyright (C) 2019, ROOT/TMVA *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; //; // Defining Executor classes to be used in TMVA; // wrapping the functionality of the ROOT TThreadExecutor and; // ROOT TSequential Executor; //; /////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Executor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Executor.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Executor.h:301,Modifiability,Config,Config,301,"//////////////////////////////////////; /// Default constructor of TMVA Executor class; /// if ROOT::EnableImplicitMT has not been called then by default a serial executor will be created; /// A user can create a thread pool and enable multi-thread excution by calling; /// ; /// ~~~{.cpp}; /// TMVA::Config::Instance()::%EnableMT(int nthreads);; /// ~~~; ///; /// For releasing the thread pool used by TMVA one can do it by calling; ///; /// TMVA::Config::Instance()::%DisableMT();; ////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Executor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Executor.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Executor.h:449,Modifiability,Config,Config,449,"//////////////////////////////////////; /// Default constructor of TMVA Executor class; /// if ROOT::EnableImplicitMT has not been called then by default a serial executor will be created; /// A user can create a thread pool and enable multi-thread excution by calling; /// ; /// ~~~{.cpp}; /// TMVA::Config::Instance()::%EnableMT(int nthreads);; /// ~~~; ///; /// For releasing the thread pool used by TMVA one can do it by calling; ///; /// TMVA::Config::Instance()::%DisableMT();; ////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Executor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Executor.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Executor.h:236,Performance,multi-thread,multi-thread,236,"//////////////////////////////////////; /// Default constructor of TMVA Executor class; /// if ROOT::EnableImplicitMT has not been called then by default a serial executor will be created; /// A user can create a thread pool and enable multi-thread excution by calling; /// ; /// ~~~{.cpp}; /// TMVA::Config::Instance()::%EnableMT(int nthreads);; /// ~~~; ///; /// For releasing the thread pool used by TMVA one can do it by calling; ///; /// TMVA::Config::Instance()::%DisableMT();; ////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Executor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Executor.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Executor.h:158,Performance,multi-thread,multi-threaded,158,"//////////////////////////////////////; /// Constructor of TMVA Executor class; /// Explicit specify the number of threads. In this case if nthreads is > 1 a multi-threaded executor will be created and; /// TMVA will run in MT.; /// If nthreads = 1 instead TMVA will run in sequential mode; /// If nthreads = 0 TMVA will use the default thread pool size; ////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Executor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Executor.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Executor.h:4,Integrability,wrap,wrap,4,"/// wrap TExecutor::Foreach",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Executor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Executor.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Executor.h:4,Integrability,Wrap,Wrap,4,"/// Wrap TExecutor::Map functions",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Executor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Executor.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Executor.h:4,Integrability,Wrap,Wrap,4,"/// Wrap TExecutor::MapReduce functions",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Executor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Executor.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Executor.h:8,Energy Efficiency,Reduce,Reduce,8,"///Wrap Reduce function",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Executor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Executor.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Executor.h:3,Integrability,Wrap,Wrap,3,"///Wrap Reduce function",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Executor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Executor.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Executor.h:23,Energy Efficiency,Reduce,Reduce,23,"//template<class T> T* Reduce(const std::vector<T*> &mergeObjs);",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Executor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Executor.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h:110,Deployability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::DecisionTree *; * *; * *; * Description: *; * Implementation of a Decision Tree *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Doug Schouten <dschoute@sfu.ca> - Simon Fraser U., Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h:110,Integrability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::DecisionTree *; * *; * *; * Description: *; * Implementation of a Decision Tree *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Doug Schouten <dschoute@sfu.ca> - Simon Fraser U., Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h:198,Availability,error,error,198,"/////////////////////////////////////////////////////////////////////////////////////////////////////////////; // ExpectedErrorPruneTool - a helper class to prune a decision tree using the expected error (C4.5) method //; // //; // Uses an upper limit on the error made by the classification done by each node. If the S/S+B of the node //; // is f, then according to the training sample, the error rate (fraction of misclassified events by this //; // node) is (1-f). Now f has a statistical error according to the binomial distribution hence the error on //; // f can be estimated (same error as the binomial error for efficiency calculations //; // ( sigma = sqrt(eff(1-eff)/nEvts ) ) //; // //; // This tool prunes branches from a tree if the expected error of a node is less than that of the sum of //; // the error in its descendants. //; // //; /////////////////////////////////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h:259,Availability,error,error,259,"/////////////////////////////////////////////////////////////////////////////////////////////////////////////; // ExpectedErrorPruneTool - a helper class to prune a decision tree using the expected error (C4.5) method //; // //; // Uses an upper limit on the error made by the classification done by each node. If the S/S+B of the node //; // is f, then according to the training sample, the error rate (fraction of misclassified events by this //; // node) is (1-f). Now f has a statistical error according to the binomial distribution hence the error on //; // f can be estimated (same error as the binomial error for efficiency calculations //; // ( sigma = sqrt(eff(1-eff)/nEvts ) ) //; // //; // This tool prunes branches from a tree if the expected error of a node is less than that of the sum of //; // the error in its descendants. //; // //; /////////////////////////////////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h:392,Availability,error,error,392,"/////////////////////////////////////////////////////////////////////////////////////////////////////////////; // ExpectedErrorPruneTool - a helper class to prune a decision tree using the expected error (C4.5) method //; // //; // Uses an upper limit on the error made by the classification done by each node. If the S/S+B of the node //; // is f, then according to the training sample, the error rate (fraction of misclassified events by this //; // node) is (1-f). Now f has a statistical error according to the binomial distribution hence the error on //; // f can be estimated (same error as the binomial error for efficiency calculations //; // ( sigma = sqrt(eff(1-eff)/nEvts ) ) //; // //; // This tool prunes branches from a tree if the expected error of a node is less than that of the sum of //; // the error in its descendants. //; // //; /////////////////////////////////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h:492,Availability,error,error,492,"/////////////////////////////////////////////////////////////////////////////////////////////////////////////; // ExpectedErrorPruneTool - a helper class to prune a decision tree using the expected error (C4.5) method //; // //; // Uses an upper limit on the error made by the classification done by each node. If the S/S+B of the node //; // is f, then according to the training sample, the error rate (fraction of misclassified events by this //; // node) is (1-f). Now f has a statistical error according to the binomial distribution hence the error on //; // f can be estimated (same error as the binomial error for efficiency calculations //; // ( sigma = sqrt(eff(1-eff)/nEvts ) ) //; // //; // This tool prunes branches from a tree if the expected error of a node is less than that of the sum of //; // the error in its descendants. //; // //; /////////////////////////////////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h:547,Availability,error,error,547,"/////////////////////////////////////////////////////////////////////////////////////////////////////////////; // ExpectedErrorPruneTool - a helper class to prune a decision tree using the expected error (C4.5) method //; // //; // Uses an upper limit on the error made by the classification done by each node. If the S/S+B of the node //; // is f, then according to the training sample, the error rate (fraction of misclassified events by this //; // node) is (1-f). Now f has a statistical error according to the binomial distribution hence the error on //; // f can be estimated (same error as the binomial error for efficiency calculations //; // ( sigma = sqrt(eff(1-eff)/nEvts ) ) //; // //; // This tool prunes branches from a tree if the expected error of a node is less than that of the sum of //; // the error in its descendants. //; // //; /////////////////////////////////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h:588,Availability,error,error,588,"/////////////////////////////////////////////////////////////////////////////////////////////////////////////; // ExpectedErrorPruneTool - a helper class to prune a decision tree using the expected error (C4.5) method //; // //; // Uses an upper limit on the error made by the classification done by each node. If the S/S+B of the node //; // is f, then according to the training sample, the error rate (fraction of misclassified events by this //; // node) is (1-f). Now f has a statistical error according to the binomial distribution hence the error on //; // f can be estimated (same error as the binomial error for efficiency calculations //; // ( sigma = sqrt(eff(1-eff)/nEvts ) ) //; // //; // This tool prunes branches from a tree if the expected error of a node is less than that of the sum of //; // the error in its descendants. //; // //; /////////////////////////////////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h:610,Availability,error,error,610,"/////////////////////////////////////////////////////////////////////////////////////////////////////////////; // ExpectedErrorPruneTool - a helper class to prune a decision tree using the expected error (C4.5) method //; // //; // Uses an upper limit on the error made by the classification done by each node. If the S/S+B of the node //; // is f, then according to the training sample, the error rate (fraction of misclassified events by this //; // node) is (1-f). Now f has a statistical error according to the binomial distribution hence the error on //; // f can be estimated (same error as the binomial error for efficiency calculations //; // ( sigma = sqrt(eff(1-eff)/nEvts ) ) //; // //; // This tool prunes branches from a tree if the expected error of a node is less than that of the sum of //; // the error in its descendants. //; // //; /////////////////////////////////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h:755,Availability,error,error,755,"/////////////////////////////////////////////////////////////////////////////////////////////////////////////; // ExpectedErrorPruneTool - a helper class to prune a decision tree using the expected error (C4.5) method //; // //; // Uses an upper limit on the error made by the classification done by each node. If the S/S+B of the node //; // is f, then according to the training sample, the error rate (fraction of misclassified events by this //; // node) is (1-f). Now f has a statistical error according to the binomial distribution hence the error on //; // f can be estimated (same error as the binomial error for efficiency calculations //; // ( sigma = sqrt(eff(1-eff)/nEvts ) ) //; // //; // This tool prunes branches from a tree if the expected error of a node is less than that of the sum of //; // the error in its descendants. //; // //; /////////////////////////////////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h:814,Availability,error,error,814,"/////////////////////////////////////////////////////////////////////////////////////////////////////////////; // ExpectedErrorPruneTool - a helper class to prune a decision tree using the expected error (C4.5) method //; // //; // Uses an upper limit on the error made by the classification done by each node. If the S/S+B of the node //; // is f, then according to the training sample, the error rate (fraction of misclassified events by this //; // node) is (1-f). Now f has a statistical error according to the binomial distribution hence the error on //; // f can be estimated (same error as the binomial error for efficiency calculations //; // ( sigma = sqrt(eff(1-eff)/nEvts ) ) //; // //; // This tool prunes branches from a tree if the expected error of a node is less than that of the sum of //; // the error in its descendants. //; // //; /////////////////////////////////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h:55,Testability,test,test,55,"// returns the PruningInfo object for a given tree and test sample",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h:23,Performance,optimiz,optimizing,23,"///<! the stepsize for optimizing the pruning strength parameter",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h:6,Integrability,message,message,6,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h:14,Testability,log,logger,14,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h:143,Deployability,Update,Updated,143,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag; // Updated by: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Factory *; * *; * *; * Description: *; * This is the main MVA steering class: it creates (books) all MVA methods, *; * and guides them through the training, testing and evaluation phases. *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Omar Zapata <Omar.Zapata@cern.ch> - UdeA/ITM Colombia *; * Lorenzo Moneta <Lorenzo.Moneta@cern.ch> - CERN, Switzerland *; * Sergei Gleyzer <Sergei.Gleyzer@cern.ch> - U of Florida & CERN *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * UdeA/ITM, Colombia *; * U. of Florida, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Factory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h:310,Deployability,integrat,integrated,310,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag; // Updated by: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Factory *; * *; * *; * Description: *; * This is the main MVA steering class: it creates (books) all MVA methods, *; * and guides them through the training, testing and evaluation phases. *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Omar Zapata <Omar.Zapata@cern.ch> - UdeA/ITM Colombia *; * Lorenzo Moneta <Lorenzo.Moneta@cern.ch> - CERN, Switzerland *; * Sergei Gleyzer <Sergei.Gleyzer@cern.ch> - U of Florida & CERN *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * UdeA/ITM, Colombia *; * U. of Florida, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Factory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h:310,Integrability,integrat,integrated,310,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag; // Updated by: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Factory *; * *; * *; * Description: *; * This is the main MVA steering class: it creates (books) all MVA methods, *; * and guides them through the training, testing and evaluation phases. *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Omar Zapata <Omar.Zapata@cern.ch> - UdeA/ITM Colombia *; * Lorenzo Moneta <Lorenzo.Moneta@cern.ch> - CERN, Switzerland *; * Sergei Gleyzer <Sergei.Gleyzer@cern.ch> - U of Florida & CERN *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * UdeA/ITM, Colombia *; * U. of Florida, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Factory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h:549,Testability,test,testing,549,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag; // Updated by: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Factory *; * *; * *; * Description: *; * This is the main MVA steering class: it creates (books) all MVA methods, *; * and guides them through the training, testing and evaluation phases. *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Omar Zapata <Omar.Zapata@cern.ch> - UdeA/ITM Colombia *; * Lorenzo Moneta <Lorenzo.Moneta@cern.ch> - CERN, Switzerland *; * Sergei Gleyzer <Sergei.Gleyzer@cern.ch> - U of Florida & CERN *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * UdeA/ITM, Colombia *; * U. of Florida, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Factory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h:515,Usability,guid,guides,515,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag; // Updated by: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Factory *; * *; * *; * Description: *; * This is the main MVA steering class: it creates (books) all MVA methods, *; * and guides them through the training, testing and evaluation phases. *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Omar Zapata <Omar.Zapata@cern.ch> - UdeA/ITM Colombia *; * Lorenzo Moneta <Lorenzo.Moneta@cern.ch> - CERN, Switzerland *; * Sergei Gleyzer <Sergei.Gleyzer@cern.ch> - U of Florida & CERN *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * UdeA/ITM, Colombia *; * U. of Florida, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Factory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h:218,Testability,test,testing,218,"//////////////////////////////////////////////////////////////////////////; // //; // Factory //; // //; // This is the main MVA steering class: it creates all MVA methods, //; // and guides them through the training, testing and evaluation //; // phases //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Factory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h:184,Usability,guid,guides,184,"//////////////////////////////////////////////////////////////////////////; // //; // Factory //; // //; // This is the main MVA steering class: it creates all MVA methods, //; // and guides them through the training, testing and evaluation //; // phases //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Factory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h:3,Performance,optimiz,optimize,3,"// optimize all booked methods (well, if desired by the method)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Factory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h:3,Testability,test,testing,3,"// testing",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Factory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h:3,Performance,perform,performance,3,"// performance evaluation",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Factory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h:3,Security,access,accessors,3,"// accessors",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Factory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h:141,Integrability,message,messages,141,"// make ROOT-independent C++ class for classifier response; // (classifier-specific implementation); // If no classifier name is given, help messages for all booked; // classifiers are printed",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Factory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h:93,Deployability,configurat,configuration,93,"// prints classifier-specific help messages, dedicated to; // help with the optimisation and configuration options tuning.; // If no classifier name is given, help messages for all booked; // classifiers are printed",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Factory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h:35,Integrability,message,messages,35,"// prints classifier-specific help messages, dedicated to; // help with the optimisation and configuration options tuning.; // If no classifier name is given, help messages for all booked; // classifiers are printed",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Factory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h:164,Integrability,message,messages,164,"// prints classifier-specific help messages, dedicated to; // help with the optimisation and configuration options tuning.; // If no classifier name is given, help messages for all booked; // classifiers are printed",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Factory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h:93,Modifiability,config,configuration,93,"// prints classifier-specific help messages, dedicated to; // help with the optimisation and configuration options tuning.; // If no classifier name is given, help messages for all booked; // classifiers are printed",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Factory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h:26,Integrability,message,message,26,"// the beautiful greeting message",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Factory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h:46,Modifiability,variab,variable,46,"//evaluate the simple case that is removing 1 variable at time",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Factory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h:15,Usability,simpl,simple,15,"//evaluate the simple case that is removing 1 variable at time",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Factory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h:15,Modifiability,variab,variables,15,"//evaluate all variables combinations",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Factory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h:33,Testability,test,test,33,"///<! list of transformations to test",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Factory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h:47,Testability,log,logging,47,"///<! verbosity level, controls granularity of logging",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Factory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h:44,Performance,perform,performs,44,"// The factory creates all MVA methods, and performs their training and testing",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Factory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h:72,Testability,test,testing,72,"// The factory creates all MVA methods, and performs their training and testing",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Factory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/FitterBase.h:206,Deployability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : FitterBase *; * *; * *; * Description: *; * Base class for TMVA fitters *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/FitterBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/FitterBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/FitterBase.h:206,Integrability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : FitterBase *; * *; * *; * Description: *; * Base class for TMVA fitters *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/FitterBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/FitterBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/FitterBase.h:3,Security,access,accessor,3,"// accessor",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/FitterBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/FitterBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/FitterBase.h:14,Modifiability,variab,variables,14,"// setting up variables for JsMVA interactive training",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/FitterBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/FitterBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/FitterBase.h:4,Integrability,message,message,4,"//! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/FitterBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/FitterBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/FitterBase.h:12,Testability,log,logger,12,"//! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/FitterBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/FitterBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/FitterBase.h:39,Modifiability,variab,variables,39,"// remove TMVA:: from TObject name; // variables needed by JsMVA",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/FitterBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/FitterBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GeneticAlgorithm.h:162,Deployability,integrat,integrated,162,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : GeneticAlgorithm *; * *; * *; * Description: *; * Base definition for genetic algorithm *; * *; * Authors (alphabetical): *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/GeneticAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GeneticAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GeneticAlgorithm.h:162,Integrability,integrat,integrated,162,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : GeneticAlgorithm *; * *; * *; * Description: *; * Base definition for genetic algorithm *; * *; * Authors (alphabetical): *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/GeneticAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GeneticAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GeneticAlgorithm.h:89,Performance,perform,performance,89,"// if true, the population will make copies of the first individuals; // avoid for speed performance.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/GeneticAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GeneticAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GeneticAlgorithm.h:73,Safety,avoid,avoid,73,"// if true, the population will make copies of the first individuals; // avoid for speed performance.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/GeneticAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GeneticAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GeneticAlgorithm.h:4,Integrability,message,message,4,"//! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/GeneticAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GeneticAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GeneticAlgorithm.h:12,Testability,log,logger,12,"//! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/GeneticAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GeneticAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GeneticFitter.h:162,Deployability,integrat,integrated,162,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : GeneticFitter *; * *; * *; * Description: *; * Fitter using a Genetic Algorithm *; * *; * Authors (alphabetical): *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/GeneticFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GeneticFitter.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GeneticFitter.h:162,Integrability,integrat,integrated,162,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : GeneticFitter *; * *; * *; * Description: *; * Fitter using a Genetic Algorithm *; * *; * Authors (alphabetical): *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/GeneticFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GeneticFitter.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GeneticGenes.h:162,Deployability,integrat,integrated,162,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : GeneticGenes *; * *; * *; * Description: *; * Genes definition for genetic algorithm *; * *; * Authors (alphabetical): *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/GeneticGenes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GeneticGenes.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GeneticGenes.h:162,Integrability,integrat,integrated,162,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : GeneticGenes *; * *; * *; * Description: *; * Genes definition for genetic algorithm *; * *; * Authors (alphabetical): *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/GeneticGenes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GeneticGenes.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GeneticPopulation.h:162,Deployability,integrat,integrated,162,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : GeneticPopulation *; * *; * *; * Description: *; * Population definition for genetic algorithm *; * *; * Authors (alphabetical): *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/GeneticPopulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GeneticPopulation.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GeneticPopulation.h:162,Integrability,integrat,integrated,162,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : GeneticPopulation *; * *; * *; * Description: *; * Population definition for genetic algorithm *; * *; * Authors (alphabetical): *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/GeneticPopulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GeneticPopulation.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GeneticPopulation.h:6,Integrability,message,message,6,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/GeneticPopulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GeneticPopulation.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GeneticPopulation.h:14,Testability,log,logger,14,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/GeneticPopulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GeneticPopulation.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GeneticRange.h:162,Deployability,integrat,integrated,162,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : GeneticRange *; * *; * *; * Description: *; * Range definition for genetic algorithm *; * *; * Authors (alphabetical): *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/GeneticRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GeneticRange.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GeneticRange.h:162,Integrability,integrat,integrated,162,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : GeneticRange *; * *; * *; * Description: *; * Range definition for genetic algorithm *; * *; * Authors (alphabetical): *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/GeneticRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GeneticRange.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GiniIndex.h:837,Availability,down,down,837,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : GiniIndex *; * *; * *; * Description: Implementation of the GiniIndex as separation criterion *; * Large Gini Indices (maximum 0.5) mean , that the sample is well *; * mixed (same amount of signal and bkg) *; * bkg. Small Indices mean, well separated. *; * general definition: *; * Gini(Sample M) = 1 - (c(1)/N)^2 - (c(2)/N)^2 .... - (c(k)/N)^2 *; * Where: M is a sample of whatever N elements (events) *; * that belong to K different classes *; * c(k) is the number of elements that belong to class k *; * for just Signal and Background classes this boils down to: *; * Gini(Sample) = 2s*b/(s+b)^2 *; * *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://ttmva.sourceforge.net/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/GiniIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GiniIndex.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GiniIndex.h:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : GiniIndex *; * *; * *; * Description: Implementation of the GiniIndex as separation criterion *; * Large Gini Indices (maximum 0.5) mean , that the sample is well *; * mixed (same amount of signal and bkg) *; * bkg. Small Indices mean, well separated. *; * general definition: *; * Gini(Sample M) = 1 - (c(1)/N)^2 - (c(2)/N)^2 .... - (c(k)/N)^2 *; * Where: M is a sample of whatever N elements (events) *; * that belong to K different classes *; * c(k) is the number of elements that belong to class k *; * for just Signal and Background classes this boils down to: *; * Gini(Sample) = 2s*b/(s+b)^2 *; * *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://ttmva.sourceforge.net/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/GiniIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GiniIndex.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GiniIndex.h:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : GiniIndex *; * *; * *; * Description: Implementation of the GiniIndex as separation criterion *; * Large Gini Indices (maximum 0.5) mean , that the sample is well *; * mixed (same amount of signal and bkg) *; * bkg. Small Indices mean, well separated. *; * general definition: *; * Gini(Sample M) = 1 - (c(1)/N)^2 - (c(2)/N)^2 .... - (c(k)/N)^2 *; * Where: M is a sample of whatever N elements (events) *; * that belong to K different classes *; * c(k) is the number of elements that belong to class k *; * for just Signal and Background classes this boils down to: *; * Gini(Sample) = 2s*b/(s+b)^2 *; * *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://ttmva.sourceforge.net/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/GiniIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GiniIndex.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GiniIndex.h:654,Availability,down,down,654,"//////////////////////////////////////////////////////////////////////////; // //; // GiniIndex //; // //; // Implementation of the GiniIndex as separation criterion //; // //; // Large Gini Indices (maximum 0.5) mean , that the sample is well //; // mixed (same amount of signal and bkg) //; // bkg. Small Indices mean, well separated. //; // general definition: //; // Gini(Sample M) = 1 - (c(1)/N)^2 - (c(2)/N)^2 .... - (c(k)/N)^2 //; // Where: M is a sample of whatever N elements (events) //; // that belong to K different classes //; // c(k) is the number of elements that belong to class k //; // for just Signal and Background classes this boils down to: //; // Gini(Sample) = 2s*b/(s+b)^2 //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/GiniIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GiniIndex.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GiniIndexWithLaplace.h:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : GiniIndexWithLaplace *; * *; * *; * Description: Implementation of the GiniIndex With Laplace correction *; * as separation criterion *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://ttmva.sourceforge.net/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/GiniIndexWithLaplace.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GiniIndexWithLaplace.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GiniIndexWithLaplace.h:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : GiniIndexWithLaplace *; * *; * *; * Description: Implementation of the GiniIndex With Laplace correction *; * as separation criterion *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://ttmva.sourceforge.net/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/GiniIndexWithLaplace.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GiniIndexWithLaplace.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GiniIndexWithLaplace.h:696,Availability,down,down,696,"//////////////////////////////////////////////////////////////////////////; // //; // GiniIndexWithLaplace //; // //; // Implementation of the GiniIndex With Laplace correction //; // as separation criterion //; // //; // Large Gini Indices (maximum 0.5) mean , that the sample is well //; // mixed (same amount of signal and bkg) //; // bkg. Small Indices mean, well separated. //; // general definition: //; // Gini(Sample M) = 1 - (c(1)/N)^2 - (c(2)/N)^2 .... - (c(k)/N)^2 //; // Where: M is a sample of whatever N elements (events) //; // that belong to K different classes //; // c(k) is the number of elements that belong to class k //; // for just Signal and Background classes this boils down to: //; // The Laplace's correction to the probability distribution would //; // turn the c(1)/N into (c(1)+1)/(N+2) //; // using this the simple Gini Index for two classes //; // Gini(Sample) = 2s*b/(s+b)^2 //; // turns into //; // GiniLaplace(Sample) = 2(s*b+s+b+1)/(s+b+2)^2 //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/GiniIndexWithLaplace.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GiniIndexWithLaplace.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GiniIndexWithLaplace.h:840,Usability,simpl,simple,840,"//////////////////////////////////////////////////////////////////////////; // //; // GiniIndexWithLaplace //; // //; // Implementation of the GiniIndex With Laplace correction //; // as separation criterion //; // //; // Large Gini Indices (maximum 0.5) mean , that the sample is well //; // mixed (same amount of signal and bkg) //; // bkg. Small Indices mean, well separated. //; // general definition: //; // Gini(Sample M) = 1 - (c(1)/N)^2 - (c(2)/N)^2 .... - (c(k)/N)^2 //; // Where: M is a sample of whatever N elements (events) //; // that belong to K different classes //; // c(k) is the number of elements that belong to class k //; // for just Signal and Background classes this boils down to: //; // The Laplace's correction to the probability distribution would //; // turn the c(1)/N into (c(1)+1)/(N+2) //; // using this the simple Gini Index for two classes //; // Gini(Sample) = 2s*b/(s+b)^2 //; // turns into //; // GiniLaplace(Sample) = 2(s*b+s+b+1)/(s+b+2)^2 //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/GiniIndexWithLaplace.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GiniIndexWithLaplace.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IFitterTarget.h:179,Deployability,integrat,integrated,179,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : IFitterTarget *; * *; * *; * Description: *; * Interface for generic fitter *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/IFitterTarget.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IFitterTarget.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IFitterTarget.h:179,Integrability,integrat,integrated,179,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : IFitterTarget *; * *; * *; * Description: *; * Interface for generic fitter *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/IFitterTarget.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IFitterTarget.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IFitterTarget.h:308,Integrability,Interface,Interface,308,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : IFitterTarget *; * *; * *; * Description: *; * Interface for generic fitter *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/IFitterTarget.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IFitterTarget.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IFitterTarget.h:114,Integrability,Interface,Interface,114,"//////////////////////////////////////////////////////////////////////////; // //; // IFitterTarget //; // //; // Interface for a fitter ""target"" //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/IFitterTarget.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IFitterTarget.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IMethod.h:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : IMethod *; * *; * *; * Description: *; * Interface for all concrete MVA method implementations *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/IMethod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IMethod.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IMethod.h:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : IMethod *; * *; * *; * Description: *; * Interface for all concrete MVA method implementations *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/IMethod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IMethod.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IMethod.h:321,Integrability,Interface,Interface,321,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : IMethod *; * *; * *; * Description: *; * Interface for all concrete MVA method implementations *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/IMethod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IMethod.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IMethod.h:108,Integrability,Interface,Interface,108,"//////////////////////////////////////////////////////////////////////////; // //; // IMethod //; // //; // Interface for all concrete MVA method implementations //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/IMethod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IMethod.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IMethod.h:65,Availability,error,error,65,"// calculate the MVA value - some methods may return a per-event error estimate (unless: *err = -1)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/IMethod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IMethod.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IMethod.h:25,Energy Efficiency,monitor,monitoring,25,"// write method specific monitoring histograms to target file",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/IMethod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IMethod.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IMethod.h:14,Integrability,message,message,14,"// print help message",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/IMethod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IMethod.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IMethod.h:21,Integrability,message,message,21,"// get specific help message from classifier",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/IMethod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IMethod.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IMethod.h:10,Integrability,Interface,Interface,10,"// Method Interface",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/IMethod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IMethod.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Interval.h:162,Deployability,integrat,integrated,162,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Interval *; * *; * *; * Description: *; * Generic range definition (used, eg, in genetic algorithm) *; * *; * Authors (alphabetical): *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Interval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Interval.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Interval.h:162,Integrability,integrat,integrated,162,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Interval *; * *; * *; * Description: *; * Generic range definition (used, eg, in genetic algorithm) *; * *; * Authors (alphabetical): *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Interval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Interval.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Interval.h:134,Deployability,continuous,continuous,134,"//////////////////////////////////////////////////////////////////////////////; // //; // Interval //; // //; // Interval definition, continuous and discrete //; // //; // Interval(min,max) : a continuous interval [min,max] //; // Interval(min,max,n): a ""discrete interval"" [min,max], i.e the n numbers: //; // min, min+step, min+2*step,...., min+(n-1)*step, min+n*step=max //; // e.g.: Interval(1,5,5)=1,2,3,4,5 //; // Interval(.5,1.,6)= .5, .6., .7, .8, .9, 1.0 //; // //; // Note: **bin** counting starts from ZERO unlike in ROOT histograms //; // //; // Example: Interval(.5,1.,6) //; // //; // [ min max ] //; // ------------------------------------------------------------ //; // | | | | | | //; // .5 .6 .7 .8 .9 1.0 //; // //; // bin 0 1 2 3 4 5 //; // //; // //; //////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Interval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Interval.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Interval.h:194,Deployability,continuous,continuous,194,"//////////////////////////////////////////////////////////////////////////////; // //; // Interval //; // //; // Interval definition, continuous and discrete //; // //; // Interval(min,max) : a continuous interval [min,max] //; // Interval(min,max,n): a ""discrete interval"" [min,max], i.e the n numbers: //; // min, min+step, min+2*step,...., min+(n-1)*step, min+n*step=max //; // e.g.: Interval(1,5,5)=1,2,3,4,5 //; // Interval(.5,1.,6)= .5, .6., .7, .8, .9, 1.0 //; // //; // Note: **bin** counting starts from ZERO unlike in ROOT histograms //; // //; // Example: Interval(.5,1.,6) //; // //; // [ min max ] //; // ------------------------------------------------------------ //; // | | | | | | //; // .5 .6 .7 .8 .9 1.0 //; // //; // bin 0 1 2 3 4 5 //; // //; // //; //////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Interval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Interval.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Interval.h:3,Security,access,accessors,3,"// accessors; // accessors",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Interval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Interval.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Interval.h:17,Security,access,accessors,17,"// accessors; // accessors",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Interval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Interval.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Interval.h:60,Deployability,continuous,continuous,60,"///< when >0 : number of bins (discrete interval); when ==0 continuous interval",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Interval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Interval.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Interval.h:24,Deployability,continuous,continuous,24,"// Interval definition, continuous and discrete",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Interval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Interval.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IPruneTool.h:110,Deployability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::DecisionTree *; * *; * *; * Description: *; * IPruneTool - a helper interface class to prune a decision tree *; * *; * Authors (alphabetical): *; * Doug Schouten <dschoute@sfu.ca> - Simon Fraser U., Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/IPruneTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IPruneTool.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IPruneTool.h:110,Integrability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::DecisionTree *; * *; * *; * Description: *; * IPruneTool - a helper interface class to prune a decision tree *; * *; * Authors (alphabetical): *; * Doug Schouten <dschoute@sfu.ca> - Simon Fraser U., Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/IPruneTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IPruneTool.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IPruneTool.h:266,Integrability,interface,interface,266,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::DecisionTree *; * *; * *; * Description: *; * IPruneTool - a helper interface class to prune a decision tree *; * *; * Authors (alphabetical): *; * Doug Schouten <dschoute@sfu.ca> - Simon Fraser U., Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/IPruneTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IPruneTool.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IPruneTool.h:258,Availability,error,error,258,"/*! \class TMVA::IPruneTool; \ingroup TMVA; IPruneTool - a helper interface class to prune a decision tree. Any tool which implements the interface should provide two modes for tree pruning:. 1. automatically find the ""best"" prune strength by minimizing the error rate on a test sample; if SetAutomatic() is called, or if automatic = kTRUE argument is set in CalculatePruningInfo(); In this case, the PruningInfo object returned contains the error rate of the optimally pruned; tree, the optimal prune strength, and the sequence of nodes to prune to obtain the optimal; pruned tree from the original DecisionTree. 2. a user-provided pruning strength parameter is used to prune the tree, in which case the returned; PruningInfo object has QualityIndex = -1, PruneStrength = user prune strength, and PruneSequence; is the list of nodes to prune; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/IPruneTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IPruneTool.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IPruneTool.h:442,Availability,error,error,442,"/*! \class TMVA::IPruneTool; \ingroup TMVA; IPruneTool - a helper interface class to prune a decision tree. Any tool which implements the interface should provide two modes for tree pruning:. 1. automatically find the ""best"" prune strength by minimizing the error rate on a test sample; if SetAutomatic() is called, or if automatic = kTRUE argument is set in CalculatePruningInfo(); In this case, the PruningInfo object returned contains the error rate of the optimally pruned; tree, the optimal prune strength, and the sequence of nodes to prune to obtain the optimal; pruned tree from the original DecisionTree. 2. a user-provided pruning strength parameter is used to prune the tree, in which case the returned; PruningInfo object has QualityIndex = -1, PruneStrength = user prune strength, and PruneSequence; is the list of nodes to prune; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/IPruneTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IPruneTool.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IPruneTool.h:66,Integrability,interface,interface,66,"/*! \class TMVA::IPruneTool; \ingroup TMVA; IPruneTool - a helper interface class to prune a decision tree. Any tool which implements the interface should provide two modes for tree pruning:. 1. automatically find the ""best"" prune strength by minimizing the error rate on a test sample; if SetAutomatic() is called, or if automatic = kTRUE argument is set in CalculatePruningInfo(); In this case, the PruningInfo object returned contains the error rate of the optimally pruned; tree, the optimal prune strength, and the sequence of nodes to prune to obtain the optimal; pruned tree from the original DecisionTree. 2. a user-provided pruning strength parameter is used to prune the tree, in which case the returned; PruningInfo object has QualityIndex = -1, PruneStrength = user prune strength, and PruneSequence; is the list of nodes to prune; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/IPruneTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IPruneTool.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IPruneTool.h:138,Integrability,interface,interface,138,"/*! \class TMVA::IPruneTool; \ingroup TMVA; IPruneTool - a helper interface class to prune a decision tree. Any tool which implements the interface should provide two modes for tree pruning:. 1. automatically find the ""best"" prune strength by minimizing the error rate on a test sample; if SetAutomatic() is called, or if automatic = kTRUE argument is set in CalculatePruningInfo(); In this case, the PruningInfo object returned contains the error rate of the optimally pruned; tree, the optimal prune strength, and the sequence of nodes to prune to obtain the optimal; pruned tree from the original DecisionTree. 2. a user-provided pruning strength parameter is used to prune the tree, in which case the returned; PruningInfo object has QualityIndex = -1, PruneStrength = user prune strength, and PruneSequence; is the list of nodes to prune; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/IPruneTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IPruneTool.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IPruneTool.h:274,Testability,test,test,274,"/*! \class TMVA::IPruneTool; \ingroup TMVA; IPruneTool - a helper interface class to prune a decision tree. Any tool which implements the interface should provide two modes for tree pruning:. 1. automatically find the ""best"" prune strength by minimizing the error rate on a test sample; if SetAutomatic() is called, or if automatic = kTRUE argument is set in CalculatePruningInfo(); In this case, the PruningInfo object returned contains the error rate of the optimally pruned; tree, the optimal prune strength, and the sequence of nodes to prune to obtain the optimal; pruned tree from the original DecisionTree. 2. a user-provided pruning strength parameter is used to prune the tree, in which case the returned; PruningInfo object has QualityIndex = -1, PruneStrength = user prune strength, and PruneSequence; is the list of nodes to prune; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/IPruneTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IPruneTool.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IPruneTool.h:55,Testability,test,test,55,"// returns the PruningInfo object for a given tree and test sample",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/IPruneTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IPruneTool.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IPruneTool.h:59,Testability,log,logging,59,"// mutable MsgLogger* fLogger; ///<! output stream to save logging information; // MsgLogger& Log() const { return *fLogger; }",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/IPruneTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IPruneTool.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IPruneTool.h:94,Testability,Log,Log,94,"// mutable MsgLogger* fLogger; ///<! output stream to save logging information; // MsgLogger& Log() const { return *fLogger; }",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/IPruneTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IPruneTool.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/KDEKernel.h:159,Deployability,integrat,integrated,159,"// @(#)root/tmva $Id$; // Author: Asen Christov; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : KDEKernel *; * *; * *; * Description: *; * The Probability Density Functions (PDFs) used for the Likelihood analysis *; * can suffer from low statistics of the training samples. This can cause *; * the PDFs to fluctuate instead to be smooth. Nonparamatric Kernel Density *; * Estimation is one of the methods to produce ""smooth"" PDFs. *; * *; * Authors (alphabetical): *; * Asen Christov <christov@physik.uni-freiburg.de> - Freiburg U., Germany *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * Freiburg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/KDEKernel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/KDEKernel.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/KDEKernel.h:159,Integrability,integrat,integrated,159,"// @(#)root/tmva $Id$; // Author: Asen Christov; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : KDEKernel *; * *; * *; * Description: *; * The Probability Density Functions (PDFs) used for the Likelihood analysis *; * can suffer from low statistics of the training samples. This can cause *; * the PDFs to fluctuate instead to be smooth. Nonparamatric Kernel Density *; * Estimation is one of the methods to produce ""smooth"" PDFs. *; * *; * Authors (alphabetical): *; * Asen Christov <christov@physik.uni-freiburg.de> - Freiburg U., Germany *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * Freiburg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/KDEKernel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/KDEKernel.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/KDEKernel.h:28,Energy Efficiency,Adapt,Adaptive,28,"///< fine tuning factor for Adaptive KDE: factor to multiply the ""width"" of the Kernel function",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/KDEKernel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/KDEKernel.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/KDEKernel.h:28,Modifiability,Adapt,Adaptive,28,"///< fine tuning factor for Adaptive KDE: factor to multiply the ""width"" of the Kernel function",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/KDEKernel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/KDEKernel.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/KDEKernel.h:36,Energy Efficiency,adapt,adaptive,36,"///< contains the Sigmas Widths for adaptive KDE",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/KDEKernel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/KDEKernel.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/KDEKernel.h:36,Modifiability,adapt,adaptive,36,"///< contains the Sigmas Widths for adaptive KDE",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/KDEKernel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/KDEKernel.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/KDEKernel.h:87,Energy Efficiency,adapt,adaptive,87,"///< Defines if whats currently running is the; // (first) hidden iteration when doing adaptive KDE",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/KDEKernel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/KDEKernel.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/KDEKernel.h:87,Modifiability,adapt,adaptive,87,"///< Defines if whats currently running is the; // (first) hidden iteration when doing adaptive KDE",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/KDEKernel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/KDEKernel.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/KDEKernel.h:6,Integrability,message,message,6,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/KDEKernel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/KDEKernel.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/KDEKernel.h:14,Testability,log,logger,14,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/KDEKernel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/KDEKernel.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LDA.h:119,Deployability,integrat,integrated,119,"// $Id$; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : LDA *; * *; * *; * Description: *; * Local LDA method used by MethodKNN to compute MVA value. *; * This is experimental code under development. This class computes *; * parameters of signal and background PDFs using Gaussian approximation. *; * *; * Author: *; * John Alison John.Alison@cern.ch - University of Pennsylvania, USA *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * University of Pennsylvania, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LDA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LDA.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LDA.h:119,Integrability,integrat,integrated,119,"// $Id$; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : LDA *; * *; * *; * Description: *; * Local LDA method used by MethodKNN to compute MVA value. *; * This is experimental code under development. This class computes *; * parameters of signal and background PDFs using Gaussian approximation. *; * *; * Author: *; * John Alison John.Alison@cern.ch - University of Pennsylvania, USA *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * University of Pennsylvania, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LDA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LDA.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LDA.h:3,Testability,Log,Log,3,"// Log likelihood function with Gaussian approximation",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LDA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LDA.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LDA.h:6,Integrability,message,message,6,"///<! message logging service",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LDA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LDA.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LDA.h:14,Testability,log,logging,14,"///<! message logging service",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LDA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LDA.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LogInterval.h:110,Deployability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Interval *; * *; * *; * Description: *; * Extension of the Interval to ""logarithmic"" intervals *; * *; * *; * *; * Authors (alphabetical): *; * Helge Voss <helge.voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LogInterval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LogInterval.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LogInterval.h:110,Integrability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Interval *; * *; * *; * Description: *; * Extension of the Interval to ""logarithmic"" intervals *; * *; * *; * *; * Authors (alphabetical): *; * Helge Voss <helge.voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LogInterval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LogInterval.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LogInterval.h:264,Testability,log,logarithmic,264,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Interval *; * *; * *; * Description: *; * Extension of the Interval to ""logarithmic"" intervals *; * *; * *; * *; * Authors (alphabetical): *; * Helge Voss <helge.voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LogInterval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LogInterval.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LogInterval.h:214,Deployability,continuous,continuous,214,"//////////////////////////////////////////////////////////////////////////////; // //; // Interval with non-equi distant bins //; // that are equi-distant in a logarithmic scale) //; // //; // Interval definition, continuous and discrete //; // //; // Note: **bin** counting starts from ZERO unlike in ROOT histograms //; // //; // ---------------- //; // LogInterval(1,10000,5) //; // i=0 --> 1 note: StepSize(ibin=0) = not defined !! //; // i=1 --> 10 StepSize(ibin=1) = 9 //; // i=2 --> 100 StepSize(ibin=2) = 99 //; // i=3 --> 1000 StepSize(ibin=3) = 999 //; // i=4 --> 10000 StepSize(ibin=4) = 9999 //; // //; // LogInterval(1,1000,11) //; // i=0 --> 1 //; // i=1 --> 1.99526 //; // i=2 --> 3.98107 //; // i=3 --> 7.94328 //; // i=4 --> 15.8489 //; // i=5 --> 31.6228 //; // i=6 --> 63.0957 //; // i=7 --> 125.893 //; // i=8 --> 251.189 //; // i=9 --> 501.187 //; // i=10 --> 1000 //; // //; // LogInterval(1,1024,11) //; // i=0 --> 1 //; // i=1 --> 2 //; // i=2 --> 4 //; // i=3 --> 8 //; // i=4 --> 16 //; // i=5 --> 32 //; // i=6 --> 64 //; // i=7 --> 128 //; // i=8 --> 256 //; // i=9 --> 512 //; // i=10 --> 1024 //; // //; //////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LogInterval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LogInterval.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LogInterval.h:160,Testability,log,logarithmic,160,"//////////////////////////////////////////////////////////////////////////////; // //; // Interval with non-equi distant bins //; // that are equi-distant in a logarithmic scale) //; // //; // Interval definition, continuous and discrete //; // //; // Note: **bin** counting starts from ZERO unlike in ROOT histograms //; // //; // ---------------- //; // LogInterval(1,10000,5) //; // i=0 --> 1 note: StepSize(ibin=0) = not defined !! //; // i=1 --> 10 StepSize(ibin=1) = 9 //; // i=2 --> 100 StepSize(ibin=2) = 99 //; // i=3 --> 1000 StepSize(ibin=3) = 999 //; // i=4 --> 10000 StepSize(ibin=4) = 9999 //; // //; // LogInterval(1,1000,11) //; // i=0 --> 1 //; // i=1 --> 1.99526 //; // i=2 --> 3.98107 //; // i=3 --> 7.94328 //; // i=4 --> 15.8489 //; // i=5 --> 31.6228 //; // i=6 --> 63.0957 //; // i=7 --> 125.893 //; // i=8 --> 251.189 //; // i=9 --> 501.187 //; // i=10 --> 1000 //; // //; // LogInterval(1,1024,11) //; // i=0 --> 1 //; // i=1 --> 2 //; // i=2 --> 4 //; // i=3 --> 8 //; // i=4 --> 16 //; // i=5 --> 32 //; // i=6 --> 64 //; // i=7 --> 128 //; // i=8 --> 256 //; // i=9 --> 512 //; // i=10 --> 1024 //; // //; //////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LogInterval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LogInterval.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LogInterval.h:356,Testability,Log,LogInterval,356,"//////////////////////////////////////////////////////////////////////////////; // //; // Interval with non-equi distant bins //; // that are equi-distant in a logarithmic scale) //; // //; // Interval definition, continuous and discrete //; // //; // Note: **bin** counting starts from ZERO unlike in ROOT histograms //; // //; // ---------------- //; // LogInterval(1,10000,5) //; // i=0 --> 1 note: StepSize(ibin=0) = not defined !! //; // i=1 --> 10 StepSize(ibin=1) = 9 //; // i=2 --> 100 StepSize(ibin=2) = 99 //; // i=3 --> 1000 StepSize(ibin=3) = 999 //; // i=4 --> 10000 StepSize(ibin=4) = 9999 //; // //; // LogInterval(1,1000,11) //; // i=0 --> 1 //; // i=1 --> 1.99526 //; // i=2 --> 3.98107 //; // i=3 --> 7.94328 //; // i=4 --> 15.8489 //; // i=5 --> 31.6228 //; // i=6 --> 63.0957 //; // i=7 --> 125.893 //; // i=8 --> 251.189 //; // i=9 --> 501.187 //; // i=10 --> 1000 //; // //; // LogInterval(1,1024,11) //; // i=0 --> 1 //; // i=1 --> 2 //; // i=2 --> 4 //; // i=3 --> 8 //; // i=4 --> 16 //; // i=5 --> 32 //; // i=6 --> 64 //; // i=7 --> 128 //; // i=8 --> 256 //; // i=9 --> 512 //; // i=10 --> 1024 //; // //; //////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LogInterval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LogInterval.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LogInterval.h:618,Testability,Log,LogInterval,618,"//////////////////////////////////////////////////////////////////////////////; // //; // Interval with non-equi distant bins //; // that are equi-distant in a logarithmic scale) //; // //; // Interval definition, continuous and discrete //; // //; // Note: **bin** counting starts from ZERO unlike in ROOT histograms //; // //; // ---------------- //; // LogInterval(1,10000,5) //; // i=0 --> 1 note: StepSize(ibin=0) = not defined !! //; // i=1 --> 10 StepSize(ibin=1) = 9 //; // i=2 --> 100 StepSize(ibin=2) = 99 //; // i=3 --> 1000 StepSize(ibin=3) = 999 //; // i=4 --> 10000 StepSize(ibin=4) = 9999 //; // //; // LogInterval(1,1000,11) //; // i=0 --> 1 //; // i=1 --> 1.99526 //; // i=2 --> 3.98107 //; // i=3 --> 7.94328 //; // i=4 --> 15.8489 //; // i=5 --> 31.6228 //; // i=6 --> 63.0957 //; // i=7 --> 125.893 //; // i=8 --> 251.189 //; // i=9 --> 501.187 //; // i=10 --> 1000 //; // //; // LogInterval(1,1024,11) //; // i=0 --> 1 //; // i=1 --> 2 //; // i=2 --> 4 //; // i=3 --> 8 //; // i=4 --> 16 //; // i=5 --> 32 //; // i=6 --> 64 //; // i=7 --> 128 //; // i=8 --> 256 //; // i=9 --> 512 //; // i=10 --> 1024 //; // //; //////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LogInterval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LogInterval.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LogInterval.h:900,Testability,Log,LogInterval,900,"//////////////////////////////////////////////////////////////////////////////; // //; // Interval with non-equi distant bins //; // that are equi-distant in a logarithmic scale) //; // //; // Interval definition, continuous and discrete //; // //; // Note: **bin** counting starts from ZERO unlike in ROOT histograms //; // //; // ---------------- //; // LogInterval(1,10000,5) //; // i=0 --> 1 note: StepSize(ibin=0) = not defined !! //; // i=1 --> 10 StepSize(ibin=1) = 9 //; // i=2 --> 100 StepSize(ibin=2) = 99 //; // i=3 --> 1000 StepSize(ibin=3) = 999 //; // i=4 --> 10000 StepSize(ibin=4) = 9999 //; // //; // LogInterval(1,1000,11) //; // i=0 --> 1 //; // i=1 --> 1.99526 //; // i=2 --> 3.98107 //; // i=3 --> 7.94328 //; // i=4 --> 15.8489 //; // i=5 --> 31.6228 //; // i=6 --> 63.0957 //; // i=7 --> 125.893 //; // i=8 --> 251.189 //; // i=9 --> 501.187 //; // i=10 --> 1000 //; // //; // LogInterval(1,1024,11) //; // i=0 --> 1 //; // i=1 --> 2 //; // i=2 --> 4 //; // i=3 --> 8 //; // i=4 --> 16 //; // i=5 --> 32 //; // i=6 --> 64 //; // i=7 --> 128 //; // i=8 --> 256 //; // i=9 --> 512 //; // i=10 --> 1024 //; // //; //////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LogInterval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LogInterval.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LogInterval.h:3,Security,access,accessors,3,"// accessors",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LogInterval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LogInterval.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LogInterval.h:24,Deployability,continuous,continuous,24,"// Interval definition, continuous and discrete",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LogInterval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LogInterval.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h:220,Deployability,integrat,integrated,220,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Event *; * *; * *; * Description: *; * LossFunction and associated classes *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LossFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h:220,Integrability,integrat,integrated,220,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Event *; * *; * *; * Description: *; * LossFunction and associated classes *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LossFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h:169,Availability,error,errors,169,"///////////////////////////////////////////////////////////////////////////////////////////////; // Data Structure used by LossFunction and LossFunctionBDT to calculate errors, targets, etc; ///////////////////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LossFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h:156,Availability,error,error,156,"///////////////////////////////////////////////////////////////////////////////////////////////; // Loss Function interface defining base class for general error calculations in; // regression/classification; ///////////////////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LossFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h:114,Integrability,interface,interface,114,"///////////////////////////////////////////////////////////////////////////////////////////////; // Loss Function interface defining base class for general error calculations in; // regression/classification; ///////////////////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LossFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h:114,Integrability,interface,interface,114,"///////////////////////////////////////////////////////////////////////////////////////////////; // Loss Function interface for boosted decision trees. Inherits from LossFunction; ///////////////////////////////////////////////////////////////////////////////////////////////; /* Must inherit LossFunction with the virtual keyword so that we only have to implement; * the LossFunction interface once.; *; * LossFunction; * / \; *SomeLossFunction LossFunctionBDT; * \ /; * \ /; * SomeLossFunctionBDT; *; * Without the virtual keyword the two would point to their own LossFunction objects; * and SomeLossFunctionBDT would have to implement the virtual functions of LossFunction twice, once; * for each object. See diagram below.; *; * LossFunction LossFunction; * | |; *SomeLossFunction LossFunctionBDT; * \ /; * \ /; * SomeLossFunctionBDT; *; * Multiple inheritance is often frowned upon. To avoid this, We could make LossFunctionBDT separate; * from LossFunction but it really is a type of loss function.; * We could also put LossFunction into LossFunctionBDT. In either of these scenarios, if you are doing; * different regression methods and want to compare the Loss this makes it more convoluted.; * I think that multiple inheritance seems justified in this case, but we could change it if it's a problem.; * Usually it isn't a big deal with interfaces and this results in the simplest code in this case.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LossFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h:385,Integrability,interface,interface,385,"///////////////////////////////////////////////////////////////////////////////////////////////; // Loss Function interface for boosted decision trees. Inherits from LossFunction; ///////////////////////////////////////////////////////////////////////////////////////////////; /* Must inherit LossFunction with the virtual keyword so that we only have to implement; * the LossFunction interface once.; *; * LossFunction; * / \; *SomeLossFunction LossFunctionBDT; * \ /; * \ /; * SomeLossFunctionBDT; *; * Without the virtual keyword the two would point to their own LossFunction objects; * and SomeLossFunctionBDT would have to implement the virtual functions of LossFunction twice, once; * for each object. See diagram below.; *; * LossFunction LossFunction; * | |; *SomeLossFunction LossFunctionBDT; * \ /; * \ /; * SomeLossFunctionBDT; *; * Multiple inheritance is often frowned upon. To avoid this, We could make LossFunctionBDT separate; * from LossFunction but it really is a type of loss function.; * We could also put LossFunction into LossFunctionBDT. In either of these scenarios, if you are doing; * different regression methods and want to compare the Loss this makes it more convoluted.; * I think that multiple inheritance seems justified in this case, but we could change it if it's a problem.; * Usually it isn't a big deal with interfaces and this results in the simplest code in this case.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LossFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h:1345,Integrability,interface,interfaces,1345,"///////////////////////////////////////////////////////////////////////////////////////////////; // Loss Function interface for boosted decision trees. Inherits from LossFunction; ///////////////////////////////////////////////////////////////////////////////////////////////; /* Must inherit LossFunction with the virtual keyword so that we only have to implement; * the LossFunction interface once.; *; * LossFunction; * / \; *SomeLossFunction LossFunctionBDT; * \ /; * \ /; * SomeLossFunctionBDT; *; * Without the virtual keyword the two would point to their own LossFunction objects; * and SomeLossFunctionBDT would have to implement the virtual functions of LossFunction twice, once; * for each object. See diagram below.; *; * LossFunction LossFunction; * | |; *SomeLossFunction LossFunctionBDT; * \ /; * \ /; * SomeLossFunctionBDT; *; * Multiple inheritance is often frowned upon. To avoid this, We could make LossFunctionBDT separate; * from LossFunction but it really is a type of loss function.; * We could also put LossFunction into LossFunctionBDT. In either of these scenarios, if you are doing; * different regression methods and want to compare the Loss this makes it more convoluted.; * I think that multiple inheritance seems justified in this case, but we could change it if it's a problem.; * Usually it isn't a big deal with interfaces and this results in the simplest code in this case.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LossFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h:152,Modifiability,Inherit,Inherits,152,"///////////////////////////////////////////////////////////////////////////////////////////////; // Loss Function interface for boosted decision trees. Inherits from LossFunction; ///////////////////////////////////////////////////////////////////////////////////////////////; /* Must inherit LossFunction with the virtual keyword so that we only have to implement; * the LossFunction interface once.; *; * LossFunction; * / \; *SomeLossFunction LossFunctionBDT; * \ /; * \ /; * SomeLossFunctionBDT; *; * Without the virtual keyword the two would point to their own LossFunction objects; * and SomeLossFunctionBDT would have to implement the virtual functions of LossFunction twice, once; * for each object. See diagram below.; *; * LossFunction LossFunction; * | |; *SomeLossFunction LossFunctionBDT; * \ /; * \ /; * SomeLossFunctionBDT; *; * Multiple inheritance is often frowned upon. To avoid this, We could make LossFunctionBDT separate; * from LossFunction but it really is a type of loss function.; * We could also put LossFunction into LossFunctionBDT. In either of these scenarios, if you are doing; * different regression methods and want to compare the Loss this makes it more convoluted.; * I think that multiple inheritance seems justified in this case, but we could change it if it's a problem.; * Usually it isn't a big deal with interfaces and this results in the simplest code in this case.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LossFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h:285,Modifiability,inherit,inherit,285,"///////////////////////////////////////////////////////////////////////////////////////////////; // Loss Function interface for boosted decision trees. Inherits from LossFunction; ///////////////////////////////////////////////////////////////////////////////////////////////; /* Must inherit LossFunction with the virtual keyword so that we only have to implement; * the LossFunction interface once.; *; * LossFunction; * / \; *SomeLossFunction LossFunctionBDT; * \ /; * \ /; * SomeLossFunctionBDT; *; * Without the virtual keyword the two would point to their own LossFunction objects; * and SomeLossFunctionBDT would have to implement the virtual functions of LossFunction twice, once; * for each object. See diagram below.; *; * LossFunction LossFunction; * | |; *SomeLossFunction LossFunctionBDT; * \ /; * \ /; * SomeLossFunctionBDT; *; * Multiple inheritance is often frowned upon. To avoid this, We could make LossFunctionBDT separate; * from LossFunction but it really is a type of loss function.; * We could also put LossFunction into LossFunctionBDT. In either of these scenarios, if you are doing; * different regression methods and want to compare the Loss this makes it more convoluted.; * I think that multiple inheritance seems justified in this case, but we could change it if it's a problem.; * Usually it isn't a big deal with interfaces and this results in the simplest code in this case.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LossFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h:853,Modifiability,inherit,inheritance,853,"///////////////////////////////////////////////////////////////////////////////////////////////; // Loss Function interface for boosted decision trees. Inherits from LossFunction; ///////////////////////////////////////////////////////////////////////////////////////////////; /* Must inherit LossFunction with the virtual keyword so that we only have to implement; * the LossFunction interface once.; *; * LossFunction; * / \; *SomeLossFunction LossFunctionBDT; * \ /; * \ /; * SomeLossFunctionBDT; *; * Without the virtual keyword the two would point to their own LossFunction objects; * and SomeLossFunctionBDT would have to implement the virtual functions of LossFunction twice, once; * for each object. See diagram below.; *; * LossFunction LossFunction; * | |; *SomeLossFunction LossFunctionBDT; * \ /; * \ /; * SomeLossFunctionBDT; *; * Multiple inheritance is often frowned upon. To avoid this, We could make LossFunctionBDT separate; * from LossFunction but it really is a type of loss function.; * We could also put LossFunction into LossFunctionBDT. In either of these scenarios, if you are doing; * different regression methods and want to compare the Loss this makes it more convoluted.; * I think that multiple inheritance seems justified in this case, but we could change it if it's a problem.; * Usually it isn't a big deal with interfaces and this results in the simplest code in this case.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LossFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h:1225,Modifiability,inherit,inheritance,1225,"///////////////////////////////////////////////////////////////////////////////////////////////; // Loss Function interface for boosted decision trees. Inherits from LossFunction; ///////////////////////////////////////////////////////////////////////////////////////////////; /* Must inherit LossFunction with the virtual keyword so that we only have to implement; * the LossFunction interface once.; *; * LossFunction; * / \; *SomeLossFunction LossFunctionBDT; * \ /; * \ /; * SomeLossFunctionBDT; *; * Without the virtual keyword the two would point to their own LossFunction objects; * and SomeLossFunctionBDT would have to implement the virtual functions of LossFunction twice, once; * for each object. See diagram below.; *; * LossFunction LossFunction; * | |; *SomeLossFunction LossFunctionBDT; * \ /; * \ /; * SomeLossFunctionBDT; *; * Multiple inheritance is often frowned upon. To avoid this, We could make LossFunctionBDT separate; * from LossFunction but it really is a type of loss function.; * We could also put LossFunction into LossFunctionBDT. In either of these scenarios, if you are doing; * different regression methods and want to compare the Loss this makes it more convoluted.; * I think that multiple inheritance seems justified in this case, but we could change it if it's a problem.; * Usually it isn't a big deal with interfaces and this results in the simplest code in this case.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LossFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h:891,Safety,avoid,avoid,891,"///////////////////////////////////////////////////////////////////////////////////////////////; // Loss Function interface for boosted decision trees. Inherits from LossFunction; ///////////////////////////////////////////////////////////////////////////////////////////////; /* Must inherit LossFunction with the virtual keyword so that we only have to implement; * the LossFunction interface once.; *; * LossFunction; * / \; *SomeLossFunction LossFunctionBDT; * \ /; * \ /; * SomeLossFunctionBDT; *; * Without the virtual keyword the two would point to their own LossFunction objects; * and SomeLossFunctionBDT would have to implement the virtual functions of LossFunction twice, once; * for each object. See diagram below.; *; * LossFunction LossFunction; * | |; *SomeLossFunction LossFunctionBDT; * \ /; * \ /; * SomeLossFunctionBDT; *; * Multiple inheritance is often frowned upon. To avoid this, We could make LossFunctionBDT separate; * from LossFunction but it really is a type of loss function.; * We could also put LossFunction into LossFunctionBDT. In either of these scenarios, if you are doing; * different regression methods and want to compare the Loss this makes it more convoluted.; * I think that multiple inheritance seems justified in this case, but we could change it if it's a problem.; * Usually it isn't a big deal with interfaces and this results in the simplest code in this case.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LossFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h:1380,Usability,simpl,simplest,1380,"///////////////////////////////////////////////////////////////////////////////////////////////; // Loss Function interface for boosted decision trees. Inherits from LossFunction; ///////////////////////////////////////////////////////////////////////////////////////////////; /* Must inherit LossFunction with the virtual keyword so that we only have to implement; * the LossFunction interface once.; *; * LossFunction; * / \; *SomeLossFunction LossFunctionBDT; * \ /; * \ /; * SomeLossFunctionBDT; *; * Without the virtual keyword the two would point to their own LossFunction objects; * and SomeLossFunctionBDT would have to implement the virtual functions of LossFunction twice, once; * for each object. See diagram below.; *; * LossFunction LossFunction; * | |; *SomeLossFunction LossFunctionBDT; * \ /; * \ /; * SomeLossFunctionBDT; *; * Multiple inheritance is often frowned upon. To avoid this, We could make LossFunctionBDT separate; * from LossFunction but it really is a type of loss function.; * We could also put LossFunction into LossFunctionBDT. In either of these scenarios, if you are doing; * different regression methods and want to compare the Loss this makes it more convoluted.; * I think that multiple inheritance seems justified in this case, but we could change it if it's a problem.; * Usually it isn't a big deal with interfaces and this results in the simplest code in this case.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LossFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h:135,Availability,error,error,135,"///////////////////////////////////////////////////////////////////////////////////////////////; // Huber loss function for regression error calculations; ///////////////////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LossFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h:33,Usability,simpl,simple,33,"// We go ahead and implement the simple ones",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LossFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h:31,Integrability,interface,interface,31,"// Functions needed beyond the interface",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LossFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h:315,Integrability,interface,interface,315,"///////////////////////////////////////////////////////////////////////////////////////////////; // Huber loss function with boosted decision tree functionality; ///////////////////////////////////////////////////////////////////////////////////////////////; // The bdt loss function implements the LossFunctionBDT interface and inherits the HuberLossFunction; // functionality.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LossFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h:329,Modifiability,inherit,inherits,329,"///////////////////////////////////////////////////////////////////////////////////////////////; // Huber loss function with boosted decision tree functionality; ///////////////////////////////////////////////////////////////////////////////////////////////; // The bdt loss function implements the LossFunctionBDT interface and inherits the HuberLossFunction; // functionality.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LossFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h:142,Availability,error,error,142,"///////////////////////////////////////////////////////////////////////////////////////////////; // LeastSquares loss function for regression error calculations; ///////////////////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LossFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h:33,Usability,simpl,simple,33,"// We go ahead and implement the simple ones",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LossFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h:323,Integrability,interface,interface,323,"///////////////////////////////////////////////////////////////////////////////////////////////; // Least Squares loss function with boosted decision tree functionality; ///////////////////////////////////////////////////////////////////////////////////////////////; // The bdt loss function implements the LossFunctionBDT interface and inherits the LeastSquaresLossFunction; // functionality.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LossFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h:337,Modifiability,inherit,inherits,337,"///////////////////////////////////////////////////////////////////////////////////////////////; // Least Squares loss function with boosted decision tree functionality; ///////////////////////////////////////////////////////////////////////////////////////////////; // The bdt loss function implements the LossFunctionBDT interface and inherits the LeastSquaresLossFunction; // functionality.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LossFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h:148,Availability,error,error,148,"///////////////////////////////////////////////////////////////////////////////////////////////; // Absolute Deviation loss function for regression error calculations; ///////////////////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LossFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h:33,Usability,simpl,simple,33,"// We go ahead and implement the simple ones",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LossFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h:328,Integrability,interface,interface,328,"///////////////////////////////////////////////////////////////////////////////////////////////; // Absolute Deviation loss function with boosted decision tree functionality; ///////////////////////////////////////////////////////////////////////////////////////////////; // The bdt loss function implements the LossFunctionBDT interface and inherits the AbsoluteDeviationLossFunction; // functionality.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LossFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h:342,Modifiability,inherit,inherits,342,"///////////////////////////////////////////////////////////////////////////////////////////////; // Absolute Deviation loss function with boosted decision tree functionality; ///////////////////////////////////////////////////////////////////////////////////////////////; // The bdt loss function implements the LossFunctionBDT interface and inherits the AbsoluteDeviationLossFunction; // functionality.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/LossFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MCFitter.h:206,Deployability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MCFitter *; * *; * *; * Description: *; * Fitter using Monte Carlo sampling of parameters *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MCFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MCFitter.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MCFitter.h:206,Integrability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MCFitter *; * *; * *; * Description: *; * Fitter using Monte Carlo sampling of parameters *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MCFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MCFitter.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h:209,Deployability,integrat,integrated,209,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Matt Jachowski, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodANNBase *; * *; * *; * Description: *; * Artificial neural network base class for the discrimination of signal *; * from background. *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * *; * Small changes (regression): *; * Krzysztof Danielowski <danielow@cern.ch> - IFJ PAN & AGH, Poland *; * Kamil Kraszewski <kalq@cern.ch> - IFJ PAN & UJ , Poland *; * Maciej Kruk <mkruk@cern.ch> - IFJ PAN & AGH, Poland *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodANNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h:209,Integrability,integrat,integrated,209,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Matt Jachowski, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodANNBase *; * *; * *; * Description: *; * Artificial neural network base class for the discrimination of signal *; * from background. *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * *; * Small changes (regression): *; * Krzysztof Danielowski <danielow@cern.ch> - IFJ PAN & AGH, Poland *; * Kamil Kraszewski <kalq@cern.ch> - IFJ PAN & UJ , Poland *; * Maciej Kruk <mkruk@cern.ch> - IFJ PAN & AGH, Poland *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodANNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h:20,Modifiability,variab,variables,20,"// ranking of input variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodANNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h:3,Security,access,accessors,3,"// accessors",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodANNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h:13,Modifiability,variab,variables,13,"// protected variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodANNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h:45,Modifiability,layers,layers,45,"// activation function to be used for hidden layers",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodANNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h:53,Integrability,depend,depending,53,"// activation function to be used for output layers, depending on estimator",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodANNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h:45,Modifiability,layers,layers,45,"// activation function to be used for output layers, depending on estimator",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodANNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h:35,Modifiability,layers,layers,35,"// activation for input and output layers",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodANNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h:3,Energy Efficiency,monitor,monitoring,3,"// monitoring histograms",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodANNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h:3,Energy Efficiency,monitor,monitors,3,"// monitors convergence of training sample",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodANNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h:82,Availability,avail,available,82,"// monitors convergence of independent test sample; // monitoring histograms (not available for regression)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodANNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h:3,Energy Efficiency,monitor,monitors,3,"// monitors convergence of independent test sample; // monitoring histograms (not available for regression)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodANNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h:55,Energy Efficiency,monitor,monitoring,55,"// monitors convergence of independent test sample; // monitoring histograms (not available for regression)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodANNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h:39,Testability,test,test,39,"// monitors convergence of independent test sample; // monitoring histograms (not available for regression)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodANNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h:9,Energy Efficiency,monitor,monitoring,9,"// epoch monitoring histograms for signal",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodANNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h:9,Energy Efficiency,monitor,monitoring,9,"// epoch monitoring histograms for background",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodANNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h:9,Energy Efficiency,monitor,monitoring,9,"// epoch monitoring histograms for weights; // general",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodANNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h:11,Modifiability,variab,variables,11,"// private variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodANNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h:5,Performance,cache,cache,5,"///< cache this for fast access",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodANNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h:25,Security,access,access,25,"///< cache this for fast access",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodANNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h:5,Performance,cache,cache,5,"///< cache this for fast access",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodANNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h:25,Security,access,access,25,"///< cache this for fast access",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodANNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:250,Deployability,integrat,integrated,250,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodBase *; * *; * *; * Description: *; * Virtual base class for all MVA method *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:250,Integrability,integrat,integrated,250,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodBase *; * *; * *; * Description: *; * Virtual base class for all MVA method *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:120,Availability,error,errors,120,"/*! \class TMVA::IPythonInteractive; \ingroup TMVA. This class is needed by JsMVA, and it's a helper class for tracking errors during; the training in Jupyter notebook. It’s only initialized in Jupyter notebook context.; In initialization we specify some title, and a TGraph will be created for every title.; We can add new data points easily to all TGraphs. These graphs are added to a; TMultiGraph, and during an interactive training we get this TMultiGraph object; and plot it with JsROOT.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:24,Testability,Test,Testing,24,"// constructor used for Testing + Application of the MVA, only (no training),; // using given weight file",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:43,Deployability,configurat,configuration,43,"// declaration, processing and checking of configuration options",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:43,Modifiability,config,configuration,43,"// declaration, processing and checking of configuration options",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:178,Modifiability,variab,variable,178,"// may be overwritten by derived classes; // ---------- main training and testing methods ------------------------------; // prepare tree branch with the method's discriminating variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:74,Testability,test,testing,74,"// may be overwritten by derived classes; // ---------- main training and testing methods ------------------------------; // prepare tree branch with the method's discriminating variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:3,Performance,perform,performs,3,"// performs classifier training; // calls methods Train() implemented by derived classes",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:3,Performance,optimiz,optimize,3,"// optimize tuning parameters",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:36,Testability,test,testing,36,"// store and retrieve time used for testing",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:3,Performance,perform,performs,3,"// performs classifier testing",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:23,Testability,test,testing,23,"// performs classifier testing",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:3,Performance,perform,performs,3,"// performs multiclass classifier testing",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:34,Testability,test,testing,34,"// performs multiclass classifier testing",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:3,Performance,perform,performs,3,"// performs regression testing",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:23,Testability,test,testing,23,"// performs regression testing",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:64,Availability,error,error,64,"// classifier response:; // some methods may return a per-event error estimate; // error calculation is skipped if err==0",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:83,Availability,error,error,83,"// classifier response:; // some methods may return a per-event error estimate; // error calculation is skipped if err==0",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:26,Availability,error,errors,26,"// helper function to set errors to -1",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:7,Usability,simpl,simple,7,"// the simple one, automatically calculates the mvaVal and uses the SAME sig/bkg ratio as given in the training sample (typically 50/50 .. (NormMode=EqualNumEvents) but can be different)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:14,Integrability,message,message,14,"// print help message",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:7,Modifiability,variab,variable,7,"// the variable information",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:29,Energy Efficiency,monitor,monitoring,29,"// write classifier-specific monitoring information to target file",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:273,Modifiability,variab,variables,273,"// ---------- public evaluation methods --------------------------------------; // individual initialization for testing of each method; // overload this one for individual initialisation of the testing,; // it is then called automatically within the global ""TestInit""; // variables (and private member functions) for the Evaluation:; // get the efficiency. It fills a histogram for efficiency/vs/bkg; // and returns the one value fo the efficiency demanded for; // in the TString argument. (Watch the string format)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:113,Testability,test,testing,113,"// ---------- public evaluation methods --------------------------------------; // individual initialization for testing of each method; // overload this one for individual initialisation of the testing,; // it is then called automatically within the global ""TestInit""; // variables (and private member functions) for the Evaluation:; // get the efficiency. It fills a histogram for efficiency/vs/bkg; // and returns the one value fo the efficiency demanded for; // in the TString argument. (Watch the string format)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:195,Testability,test,testing,195,"// ---------- public evaluation methods --------------------------------------; // individual initialization for testing of each method; // overload this one for individual initialisation of the testing,; // it is then called automatically within the global ""TestInit""; // variables (and private member functions) for the Evaluation:; // get the efficiency. It fills a histogram for efficiency/vs/bkg; // and returns the one value fo the efficiency demanded for; // in the TString argument. (Watch the string format)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:259,Testability,Test,TestInit,259,"// ---------- public evaluation methods --------------------------------------; // individual initialization for testing of each method; // overload this one for individual initialisation of the testing,; // it is then called automatically within the global ""TestInit""; // variables (and private member functions) for the Evaluation:; // get the efficiency. It fills a histogram for efficiency/vs/bkg; // and returns the one value fo the efficiency demanded for; // in the TString argument. (Watch the string format)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:21,Security,access,accessors,21,"// ---------- public accessors -----------------------------------------------; // classifier naming (a lot of names ... aren't they ;-)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:28,Testability,Test,Test,28,"// build classifier name in Test tree; // MVA prefix (e.g., ""TMVA_"")",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:19,Modifiability,variab,variable,19,"// number of input variable used by classifier",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:43,Modifiability,variab,variables,43,"// internal names and expressions of input variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:27,Security,access,accessors,27,"// normalisation and limit accessors",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:20,Security,access,accessors,20,"// ---------- event accessors ------------------------------------------------; // returns reference to data set; // NOTE: this DataSet is the ""original"" dataset, i.e. the one seen by ALL Classifiers WITHOUT transformation",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:23,Deployability,update,update,23,"// event reference and update; // NOTE: these Event accessors make sure that you get the events transformed according to the; // particular classifiers transformation chosen",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:52,Security,access,accessors,52,"// event reference and update; // NOTE: these Event accessors make sure that you get the events transformed according to the; // particular classifiers transformation chosen",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:25,Testability,test,testing,25,"//! temporary event when testing on a different DataSet than the own one",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:113,Modifiability,variab,variables,113,"//! temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues); // helper variables for JsMVA",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:16,Availability,error,errors,16,"// get training errors (for JsMVA only)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:197,Modifiability,config,config,197,"// ---------- protected accessors -------------------------------------------; //TDirectory* LocalTDir() const { return Data().LocalRootDir(); }; // weight file name and directory (given by global config variable)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:204,Modifiability,variab,variable,204,"// ---------- protected accessors -------------------------------------------; //TDirectory* LocalTDir() const { return Data().LocalRootDir(); }; // weight file name and directory (given by global config variable)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:24,Security,access,accessors,24,"// ---------- protected accessors -------------------------------------------; //TDirectory* LocalTDir() const { return Data().LocalRootDir(); }; // weight file name and directory (given by global config variable)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:13,Modifiability,variab,variables,13,"// are input variables normalised ?",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:23,Modifiability,variab,variables,23,"// set number of input variables (only used by MethodCuts, could perhaps be removed); // void SetNvar( Int_t n ) { fNvar = n; }; // verbose and help flags",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:98,Modifiability,variab,variables,98,"// ---------- protected event and tree accessors -----------------------------; // names of input variables (if the original names are expressions, they are; // transformed into regexps)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:39,Security,access,accessors,39,"// ---------- protected event and tree accessors -----------------------------; // names of input variables (if the original names are expressions, they are; // transformed into regexps)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:3,Security,access,access,3,"// access to event information that needs method-specific information",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:22,Security,access,accessors,22,"// ---------- private accessors ---------------------------------------------; // reset required for RootFinder",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:8,Testability,test,test,8,"// fill test tree with classification or regression results",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:10,Security,access,accessors,10,"// direct accessors",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:19,Modifiability,variab,variables,19,"// vector of input variables used in MVA; // histogram binning",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:27,Modifiability,variab,variable,27,"// number of bins in input variable histograms",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:47,Modifiability,variab,variables,47,"// MethodCuts redefines some of the evaluation variables and histograms -> must access private members",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:80,Security,access,access,80,"// MethodCuts redefines some of the evaluation variables and histograms -> must access private members",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:51,Modifiability,variab,variable,51,"// this is the event type (sig or bgd) assumed for variable transform; // naming and versioning",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:3,Modifiability,variab,variable,3,"// variable used in evaluation, etc (mostly the MVA)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:41,Modifiability,variab,variable,41,"///< maximum (signal and background); // variable preprocessing",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:12,Modifiability,variab,variable,12,"///< labels variable transform method",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:10,Modifiability,variab,variables,10,"// timing variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:51,Integrability,depend,depends,51,"// for timing measurements; // orientation of cut: depends on signal and background mean values",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:19,Modifiability,variab,variables,19,"// normalise input variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:10,Modifiability,variab,variable,10,"// labels variable transform type",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBayesClassifier.h:161,Deployability,integrat,integrated,161,"// @(#)root/tmva $Id$; // Author: Abhishek Narain; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodBayesClassifier *; * *; * *; * Description: *; * Bayesian Classifier *; * *; * Authors (alphabetical): *; * Abhishek Narain, <narainabhi@gmail.com> - University of Houston *; * *; * Copyright (c) 2005-2006: *; * University of Houston, *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBayesClassifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBayesClassifier.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBayesClassifier.h:161,Integrability,integrat,integrated,161,"// @(#)root/tmva $Id$; // Author: Abhishek Narain; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodBayesClassifier *; * *; * *; * Description: *; * Bayesian Classifier *; * *; * Authors (alphabetical): *; * Abhishek Narain, <narainabhi@gmail.com> - University of Houston *; * *; * Copyright (c) 2005-2006: *; * University of Houston, *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBayesClassifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBayesClassifier.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBayesClassifier.h:20,Modifiability,variab,variables,20,"// ranking of input variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBayesClassifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBayesClassifier.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBayesClassifier.h:12,Integrability,message,message,12,"// get help message text",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBayesClassifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBayesClassifier.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:212,Deployability,integrat,integrated,212,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodBDT (Boosted Decision Trees) *; * *; * *; * Description: *; * Analysis of Boosted Decision Trees *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Doug Schouten <dschoute@sfu.ca> - Simon Fraser U., Canada *; * Jan Therhaag <jan.therhaag@cern.ch> - U. of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:212,Integrability,integrat,integrated,212,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodBDT (Boosted Decision Trees) *; * *; * *; * Description: *; * Analysis of Boosted Decision Trees *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Doug Schouten <dschoute@sfu.ca> - Simon Fraser U., Canada *; * Jan Therhaag <jan.therhaag@cern.ch> - U. of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:3,Performance,optimiz,optimize,3,"// optimize tuning parameters",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:20,Modifiability,variab,variables,20,"// ranking of input variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:33,Modifiability,variab,variable,33,"//return the individual relative variable importance",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:23,Energy Efficiency,adapt,adaptive,23,"// boosting algorithm (adaptive boosting)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:23,Modifiability,adapt,adaptive,23,"// boosting algorithm (adaptive boosting)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:23,Energy Efficiency,adapt,adaptive,23,"// boosting algorithm (adaptive boosting with cost matrix)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:23,Modifiability,adapt,adaptive,23,"// boosting algorithm (adaptive boosting with cost matrix)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:12,Energy Efficiency,adapt,adapted,12,"// adaboost adapted to regression",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:12,Modifiability,adapt,adapted,12,"// adaboost adapted to regression",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:9,Security,Validat,Validation,9,"///< the Validation events",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:109,Availability,down,down,109,"///< loss type used in AdaBoostR2 (Linear,Quadratic or Exponential); //Double_t fTransitionPoint; ///< break-down point for gradient regression",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:5,Usability,learn,learning,5,"///< learning rate for gradient boost;",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:30,Safety,predict,predicted,30,"///< map event to true value, predicted value, and weight; /// used by different loss functions for BDT regression",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:48,Modifiability,variab,variables,48,"///< the minimum linear correlation between two variables demanded for use in fisher criterium in node splitting",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:16,Modifiability,variab,variables,16,"///< individual variables already used in fisher criterium are not anymore analysed individually for node splitting",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:75,Security,validat,validation,75,"///< use user given prune strength or automatically determined one using a validation sample",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:44,Modifiability,variab,variables,44,"///< choose a random subset of possible cut variables at each node during training",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:19,Modifiability,variab,variables,19,"///< the number of variables used in the randomised tree splitting",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:5,Modifiability,variab,variable,5,"///< variable that holds the option of how to treat negative event weights in training",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:81,Energy Efficiency,monitor,monitoring,81,"///< create control plot with ROC integral vs tree number; //some histograms for monitoring",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:5,Energy Efficiency,monitor,monitoring,5,"///< monitoring ntuple",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:35,Availability,error,error,35,"///< ntuple var: misclassification error fraction",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:18,Performance,perform,perform,18,"///< do or do not perform automatic pre-selection of 100% eff. cuts",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:46,Modifiability,variab,variables,46,"///< the relative importance of the different variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:11,Modifiability,variab,variable,11,"//historic variable, only needed for ""CompatibilityOptions""",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h:241,Deployability,integrat,integrated,241,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss,Or Cohen, Jan Therhaag, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodCompositeBase *; * *; * *; * Description: *; * Virtual base class for all MVA method *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmazer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBoost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h:241,Integrability,integrat,integrated,241,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss,Or Cohen, Jan Therhaag, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodCompositeBase *; * *; * *; * Description: *; * Virtual base class for all MVA method *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmazer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBoost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h:20,Modifiability,variab,variables,20,"// ranking of input variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBoost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h:23,Energy Efficiency,monitor,monitoring,23,"// initializing mostly monitoring tools of the boost process",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBoost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h:35,Testability,test,testing,35,"// return ROC integral on training/testing sample",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBoost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h:15,Energy Efficiency,monitor,monitoring,15,"// writing the monitoring histograms and tree to a file",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBoost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h:3,Performance,perform,performs,3,"// performs the MethodBase testing + testing of each boosted classifier",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBoost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h:27,Testability,test,testing,27,"// performs the MethodBase testing + testing of each boosted classifier",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBoost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h:37,Testability,test,testing,37,"// performs the MethodBase testing + testing of each boosted classifier",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBoost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h:41,Energy Efficiency,monitor,monitoring,41,"// creating the vectors of histogram for monitoring MVA response of each classifier",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBoost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h:22,Energy Efficiency,monitor,monitoring,22,"///< produce detailed monitoring histograms (boost-wise)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBoost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h:5,Energy Efficiency,monitor,monitor,5,"///< monitor the MVA response of every classifier; // MVA output from each classifier over the training hist, using orignal events weights",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBoost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h:44,Testability,test,testing,44,"// MVA output from each classifier over the testing hist",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBoost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h:2,Energy Efficiency,monitor,monitoring,2,"//monitoring tree/ntuple and it's variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBoost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h:34,Modifiability,variab,variables,34,"//monitoring tree/ntuple and it's variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBoost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h:13,Energy Efficiency,monitor,monitor,13,"///< tree to monitor values during the boosting",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBoost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h:29,Availability,error,error,29,"///< estimation of the level error of the classifier; // analysing the train dataset",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBoost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h:14,Modifiability,variab,variable,14,"///< historic variable, only needed for ""CompatibilityOptions""",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBoost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h:14,Modifiability,variab,variable,14,"///< historic variable, only needed for ""CompatibilityOptions""",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBoost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h:12,Integrability,message,message,12,"// get help message text",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodBoost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCategory.h:207,Deployability,integrat,integrated,207,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss,Or Cohen; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodCompositeBase *; * *; * *; * Description: *; * Virtual base class for all MVA method *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCategory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCategory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCategory.h:207,Integrability,integrat,integrated,207,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss,Or Cohen; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodCompositeBase *; * *; * *; * Description: *; * Virtual base class for all MVA method *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCategory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCategory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCategory.h:20,Modifiability,variab,variables,20,"// ranking of input variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCategory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCategory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCategory.h:23,Energy Efficiency,monitor,monitoring,23,"// initializing mostly monitoring tools of the category process",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCategory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCategory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCategory.h:12,Integrability,message,message,12,"// get help message text",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCategory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCategory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodCFMlpANN *; * *; * *; * Description: *; * Interface for Clermond-Ferrand artificial neural network. *; * The ANN code has been translated from FORTRAN77 (f2c); *; * see files: MethodCFMlpANN_f2c_mlpl3.cpp *; * MethodCFMlpANN_f2c_datacc.cpp *; * *; * -------------------------------------------------------------------- *; * Reference for the original FORTRAN version: *; * Authors : J. Proriol and contributions from ALEPH-Clermont-Fd *; * Team members. Contact : gaypas@afal11.cern.ch *; * *; * Copyright: Laboratoire Physique Corpusculaire *; * Universite de Blaise Pascal, IN2P3/CNRS *; * -------------------------------------------------------------------- *; * *; * Usage: options are given through Factory: *; * factory->BookMethod( ""MethodCFMlpANN"", OptionsString ); *; * *; * where: *; * TString OptionsString = ""n_training_cycles:n_hidden_layers"" *; * *; * default is: n_training_cycles = 5000, n_layers = 4 *; * note that the number of hidden layers in the NN is *; * *; * n_hidden_layers = n_layers - 2 *; * *; * since there is one input and one output layer. The number of *; * nodes (neurons) is predefined to be *; * *; * n_nodes[i] = nvars + 1 - i (where i=1..n_layers) *; * *; * with nvars being the number of variables used in the NN. *; * Hence, the default case is: n_neurons(layer 1 (input)) : nvars *; * n_neurons(layer 2 (hidden)): nvars-1 *; * n_neurons(layer 3 (hidden)): nvars-1 *; * n_neurons(layer 4 (out)) : 2 *; * *; * This artificial neural network usually needs a relatively large *; * number of cycles to converge (8000 and more). Overtraining can *; * be efficiently tested by comparing the signal and background *; * output of the NN for the events that were used for training and ",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCFMlpANN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h:1874,Energy Efficiency,efficient,efficiently,1874,"*; * Usage: options are given through Factory: *; * factory->BookMethod( ""MethodCFMlpANN"", OptionsString ); *; * *; * where: *; * TString OptionsString = ""n_training_cycles:n_hidden_layers"" *; * *; * default is: n_training_cycles = 5000, n_layers = 4 *; * note that the number of hidden layers in the NN is *; * *; * n_hidden_layers = n_layers - 2 *; * *; * since there is one input and one output layer. The number of *; * nodes (neurons) is predefined to be *; * *; * n_nodes[i] = nvars + 1 - i (where i=1..n_layers) *; * *; * with nvars being the number of variables used in the NN. *; * Hence, the default case is: n_neurons(layer 1 (input)) : nvars *; * n_neurons(layer 2 (hidden)): nvars-1 *; * n_neurons(layer 3 (hidden)): nvars-1 *; * n_neurons(layer 4 (out)) : 2 *; * *; * This artificial neural network usually needs a relatively large *; * number of cycles to converge (8000 and more). Overtraining can *; * be efficiently tested by comparing the signal and background *; * output of the NN for the events that were used for training and *; * an independent data sample (with equal properties). If the separation *; * performance is significantly better for the training sample, the *; * NN interprets statistical effects, and is hence overtrained. In *; * this case, the number of cycles should be reduced, or the size *; * of the training sample increased. *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Xavier Prudent <prudent@lapp.in2p3.fr> - LAPP, France *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; ************************",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCFMlpANN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h:2262,Energy Efficiency,reduce,reduced,2262,">BookMethod( ""MethodCFMlpANN"", OptionsString ); *; * *; * where: *; * TString OptionsString = ""n_training_cycles:n_hidden_layers"" *; * *; * default is: n_training_cycles = 5000, n_layers = 4 *; * note that the number of hidden layers in the NN is *; * *; * n_hidden_layers = n_layers - 2 *; * *; * since there is one input and one output layer. The number of *; * nodes (neurons) is predefined to be *; * *; * n_nodes[i] = nvars + 1 - i (where i=1..n_layers) *; * *; * with nvars being the number of variables used in the NN. *; * Hence, the default case is: n_neurons(layer 1 (input)) : nvars *; * n_neurons(layer 2 (hidden)): nvars-1 *; * n_neurons(layer 3 (hidden)): nvars-1 *; * n_neurons(layer 4 (out)) : 2 *; * *; * This artificial neural network usually needs a relatively large *; * number of cycles to converge (8000 and more). Overtraining can *; * be efficiently tested by comparing the signal and background *; * output of the NN for the events that were used for training and *; * an independent data sample (with equal properties). If the separation *; * performance is significantly better for the training sample, the *; * NN interprets statistical effects, and is hence overtrained. In *; * this case, the number of cycles should be reduced, or the size *; * of the training sample increased. *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Xavier Prudent <prudent@lapp.in2p3.fr> - LAPP, France *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCFMlpANN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodCFMlpANN *; * *; * *; * Description: *; * Interface for Clermond-Ferrand artificial neural network. *; * The ANN code has been translated from FORTRAN77 (f2c); *; * see files: MethodCFMlpANN_f2c_mlpl3.cpp *; * MethodCFMlpANN_f2c_datacc.cpp *; * *; * -------------------------------------------------------------------- *; * Reference for the original FORTRAN version: *; * Authors : J. Proriol and contributions from ALEPH-Clermont-Fd *; * Team members. Contact : gaypas@afal11.cern.ch *; * *; * Copyright: Laboratoire Physique Corpusculaire *; * Universite de Blaise Pascal, IN2P3/CNRS *; * -------------------------------------------------------------------- *; * *; * Usage: options are given through Factory: *; * factory->BookMethod( ""MethodCFMlpANN"", OptionsString ); *; * *; * where: *; * TString OptionsString = ""n_training_cycles:n_hidden_layers"" *; * *; * default is: n_training_cycles = 5000, n_layers = 4 *; * note that the number of hidden layers in the NN is *; * *; * n_hidden_layers = n_layers - 2 *; * *; * since there is one input and one output layer. The number of *; * nodes (neurons) is predefined to be *; * *; * n_nodes[i] = nvars + 1 - i (where i=1..n_layers) *; * *; * with nvars being the number of variables used in the NN. *; * Hence, the default case is: n_neurons(layer 1 (input)) : nvars *; * n_neurons(layer 2 (hidden)): nvars-1 *; * n_neurons(layer 3 (hidden)): nvars-1 *; * n_neurons(layer 4 (out)) : 2 *; * *; * This artificial neural network usually needs a relatively large *; * number of cycles to converge (8000 and more). Overtraining can *; * be efficiently tested by comparing the signal and background *; * output of the NN for the events that were used for training and ",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCFMlpANN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h:328,Integrability,Interface,Interface,328,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodCFMlpANN *; * *; * *; * Description: *; * Interface for Clermond-Ferrand artificial neural network. *; * The ANN code has been translated from FORTRAN77 (f2c); *; * see files: MethodCFMlpANN_f2c_mlpl3.cpp *; * MethodCFMlpANN_f2c_datacc.cpp *; * *; * -------------------------------------------------------------------- *; * Reference for the original FORTRAN version: *; * Authors : J. Proriol and contributions from ALEPH-Clermont-Fd *; * Team members. Contact : gaypas@afal11.cern.ch *; * *; * Copyright: Laboratoire Physique Corpusculaire *; * Universite de Blaise Pascal, IN2P3/CNRS *; * -------------------------------------------------------------------- *; * *; * Usage: options are given through Factory: *; * factory->BookMethod( ""MethodCFMlpANN"", OptionsString ); *; * *; * where: *; * TString OptionsString = ""n_training_cycles:n_hidden_layers"" *; * *; * default is: n_training_cycles = 5000, n_layers = 4 *; * note that the number of hidden layers in the NN is *; * *; * n_hidden_layers = n_layers - 2 *; * *; * since there is one input and one output layer. The number of *; * nodes (neurons) is predefined to be *; * *; * n_nodes[i] = nvars + 1 - i (where i=1..n_layers) *; * *; * with nvars being the number of variables used in the NN. *; * Hence, the default case is: n_neurons(layer 1 (input)) : nvars *; * n_neurons(layer 2 (hidden)): nvars-1 *; * n_neurons(layer 3 (hidden)): nvars-1 *; * n_neurons(layer 4 (out)) : 2 *; * *; * This artificial neural network usually needs a relatively large *; * number of cycles to converge (8000 and more). Overtraining can *; * be efficiently tested by comparing the signal and background *; * output of the NN for the events that were used for training and ",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCFMlpANN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h:1239,Modifiability,layers,layers,1239,"er, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodCFMlpANN *; * *; * *; * Description: *; * Interface for Clermond-Ferrand artificial neural network. *; * The ANN code has been translated from FORTRAN77 (f2c); *; * see files: MethodCFMlpANN_f2c_mlpl3.cpp *; * MethodCFMlpANN_f2c_datacc.cpp *; * *; * -------------------------------------------------------------------- *; * Reference for the original FORTRAN version: *; * Authors : J. Proriol and contributions from ALEPH-Clermont-Fd *; * Team members. Contact : gaypas@afal11.cern.ch *; * *; * Copyright: Laboratoire Physique Corpusculaire *; * Universite de Blaise Pascal, IN2P3/CNRS *; * -------------------------------------------------------------------- *; * *; * Usage: options are given through Factory: *; * factory->BookMethod( ""MethodCFMlpANN"", OptionsString ); *; * *; * where: *; * TString OptionsString = ""n_training_cycles:n_hidden_layers"" *; * *; * default is: n_training_cycles = 5000, n_layers = 4 *; * note that the number of hidden layers in the NN is *; * *; * n_hidden_layers = n_layers - 2 *; * *; * since there is one input and one output layer. The number of *; * nodes (neurons) is predefined to be *; * *; * n_nodes[i] = nvars + 1 - i (where i=1..n_layers) *; * *; * with nvars being the number of variables used in the NN. *; * Hence, the default case is: n_neurons(layer 1 (input)) : nvars *; * n_neurons(layer 2 (hidden)): nvars-1 *; * n_neurons(layer 3 (hidden)): nvars-1 *; * n_neurons(layer 4 (out)) : 2 *; * *; * This artificial neural network usually needs a relatively large *; * number of cycles to converge (8000 and more). Overtraining can *; * be efficiently tested by comparing the signal and background *; * output of the NN for the events that were used for training and *; * an independent data sample (with equal properties). If th",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCFMlpANN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h:1512,Modifiability,variab,variables,1512,"hodCFMlpANN_f2c_datacc.cpp *; * *; * -------------------------------------------------------------------- *; * Reference for the original FORTRAN version: *; * Authors : J. Proriol and contributions from ALEPH-Clermont-Fd *; * Team members. Contact : gaypas@afal11.cern.ch *; * *; * Copyright: Laboratoire Physique Corpusculaire *; * Universite de Blaise Pascal, IN2P3/CNRS *; * -------------------------------------------------------------------- *; * *; * Usage: options are given through Factory: *; * factory->BookMethod( ""MethodCFMlpANN"", OptionsString ); *; * *; * where: *; * TString OptionsString = ""n_training_cycles:n_hidden_layers"" *; * *; * default is: n_training_cycles = 5000, n_layers = 4 *; * note that the number of hidden layers in the NN is *; * *; * n_hidden_layers = n_layers - 2 *; * *; * since there is one input and one output layer. The number of *; * nodes (neurons) is predefined to be *; * *; * n_nodes[i] = nvars + 1 - i (where i=1..n_layers) *; * *; * with nvars being the number of variables used in the NN. *; * Hence, the default case is: n_neurons(layer 1 (input)) : nvars *; * n_neurons(layer 2 (hidden)): nvars-1 *; * n_neurons(layer 3 (hidden)): nvars-1 *; * n_neurons(layer 4 (out)) : 2 *; * *; * This artificial neural network usually needs a relatively large *; * number of cycles to converge (8000 and more). Overtraining can *; * be efficiently tested by comparing the signal and background *; * output of the NN for the events that were used for training and *; * an independent data sample (with equal properties). If the separation *; * performance is significantly better for the training sample, the *; * NN interprets statistical effects, and is hence overtrained. In *; * this case, the number of cycles should be reduced, or the size *; * of the training sample increased. *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Xavier Prudent <prudent@lapp.in2p3.fr> - LAPP, France *; * Helge Voss <H",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCFMlpANN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h:2081,Performance,perform,performance,2081,">BookMethod( ""MethodCFMlpANN"", OptionsString ); *; * *; * where: *; * TString OptionsString = ""n_training_cycles:n_hidden_layers"" *; * *; * default is: n_training_cycles = 5000, n_layers = 4 *; * note that the number of hidden layers in the NN is *; * *; * n_hidden_layers = n_layers - 2 *; * *; * since there is one input and one output layer. The number of *; * nodes (neurons) is predefined to be *; * *; * n_nodes[i] = nvars + 1 - i (where i=1..n_layers) *; * *; * with nvars being the number of variables used in the NN. *; * Hence, the default case is: n_neurons(layer 1 (input)) : nvars *; * n_neurons(layer 2 (hidden)): nvars-1 *; * n_neurons(layer 3 (hidden)): nvars-1 *; * n_neurons(layer 4 (out)) : 2 *; * *; * This artificial neural network usually needs a relatively large *; * number of cycles to converge (8000 and more). Overtraining can *; * be efficiently tested by comparing the signal and background *; * output of the NN for the events that were used for training and *; * an independent data sample (with equal properties). If the separation *; * performance is significantly better for the training sample, the *; * NN interprets statistical effects, and is hence overtrained. In *; * this case, the number of cycles should be reduced, or the size *; * of the training sample increased. *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Xavier Prudent <prudent@lapp.in2p3.fr> - LAPP, France *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCFMlpANN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h:1886,Testability,test,tested,1886,"*; * Usage: options are given through Factory: *; * factory->BookMethod( ""MethodCFMlpANN"", OptionsString ); *; * *; * where: *; * TString OptionsString = ""n_training_cycles:n_hidden_layers"" *; * *; * default is: n_training_cycles = 5000, n_layers = 4 *; * note that the number of hidden layers in the NN is *; * *; * n_hidden_layers = n_layers - 2 *; * *; * since there is one input and one output layer. The number of *; * nodes (neurons) is predefined to be *; * *; * n_nodes[i] = nvars + 1 - i (where i=1..n_layers) *; * *; * with nvars being the number of variables used in the NN. *; * Hence, the default case is: n_neurons(layer 1 (input)) : nvars *; * n_neurons(layer 2 (hidden)): nvars-1 *; * n_neurons(layer 3 (hidden)): nvars-1 *; * n_neurons(layer 4 (out)) : 2 *; * *; * This artificial neural network usually needs a relatively large *; * number of cycles to converge (8000 and more). Overtraining can *; * be efficiently tested by comparing the signal and background *; * output of the NN for the events that were used for training and *; * an independent data sample (with equal properties). If the separation *; * performance is significantly better for the training sample, the *; * NN interprets statistical effects, and is hence overtrained. In *; * this case, the number of cycles should be reduced, or the size *; * of the training sample increased. *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Xavier Prudent <prudent@lapp.in2p3.fr> - LAPP, France *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; ************************",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCFMlpANN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h:115,Integrability,Interface,Interface,115,"//////////////////////////////////////////////////////////////////////////; // //; // MethodCFMlpANN //; // //; // Interface for Clermond-Ferrand artificial neural network //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCFMlpANN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h:8,Security,access,accessors,8,"// data accessors for external functions",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCFMlpANN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h:20,Modifiability,variab,variables,20,"// ranking of input variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCFMlpANN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h:12,Integrability,message,message,12,"// get help message text",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCFMlpANN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h:13,Modifiability,layers,layers,13,"// number of layers (including input and output layers)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCFMlpANN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h:48,Modifiability,layers,layers,48,"// number of layers (including input and output layers)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCFMlpANN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h:51,Modifiability,variab,variables,51,"// number of nodes per layer; // additional member variables for the independent NN::Evaluation phase",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCFMlpANN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h:3,Integrability,Interface,Interface,3,"// Interface for Clermond-Ferrand artificial neural network",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCFMlpANN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN_def.h:1137,Availability,recover,recovered,1137,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Header : MethodCFMlpANN_def *; * *; * *; * Description: *; * Common definition for CFMlpANN method *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Xavier Prudent <prudent@lapp.in2p3.fr> - LAPP, France *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; // ------------- common definitions used in several modules --------------; // recovered explicit array definitions from f2c override",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCFMlpANN_def.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN_def.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN_def.h:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Header : MethodCFMlpANN_def *; * *; * *; * Description: *; * Common definition for CFMlpANN method *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Xavier Prudent <prudent@lapp.in2p3.fr> - LAPP, France *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; // ------------- common definitions used in several modules --------------; // recovered explicit array definitions from f2c override",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCFMlpANN_def.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN_def.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN_def.h:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Header : MethodCFMlpANN_def *; * *; * *; * Description: *; * Common definition for CFMlpANN method *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Xavier Prudent <prudent@lapp.in2p3.fr> - LAPP, France *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; // ------------- common definitions used in several modules --------------; // recovered explicit array definitions from f2c override",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCFMlpANN_def.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN_def.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN_def.h:1137,Safety,recover,recovered,1137,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Header : MethodCFMlpANN_def *; * *; * *; * Description: *; * Common definition for CFMlpANN method *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Xavier Prudent <prudent@lapp.in2p3.fr> - LAPP, France *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; // ------------- common definitions used in several modules --------------; // recovered explicit array definitions from f2c override",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCFMlpANN_def.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN_def.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN_Utils.h:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodCFMlpANN_utils *; * *; * *; * Reference for the original FORTRAN version ""mlpl3.F"": *; * Authors : J. Proriol and contributions from ALEPH-Clermont-Fd *; * Team members *; * Copyright: Laboratoire Physique Corpusculaire *; * Universite de Blaise Pascal, IN2P3/CNRS *; * Description: *; * Utility routine, obtained via f2c from original mlpl3.F FORTRAN routine *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Xavier Prudent <prudent@lapp.in2p3.fr> - LAPP, France *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCFMlpANN_Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN_Utils.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN_Utils.h:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodCFMlpANN_utils *; * *; * *; * Reference for the original FORTRAN version ""mlpl3.F"": *; * Authors : J. Proriol and contributions from ALEPH-Clermont-Fd *; * Team members *; * Copyright: Laboratoire Physique Corpusculaire *; * Universite de Blaise Pascal, IN2P3/CNRS *; * Description: *; * Utility routine, obtained via f2c from original mlpl3.F FORTRAN routine *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Xavier Prudent <prudent@lapp.in2p3.fr> - LAPP, France *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCFMlpANN_Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN_Utils.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN_Utils.h:582,Integrability,rout,routine,582,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodCFMlpANN_utils *; * *; * *; * Reference for the original FORTRAN version ""mlpl3.F"": *; * Authors : J. Proriol and contributions from ALEPH-Clermont-Fd *; * Team members *; * Copyright: Laboratoire Physique Corpusculaire *; * Universite de Blaise Pascal, IN2P3/CNRS *; * Description: *; * Utility routine, obtained via f2c from original mlpl3.F FORTRAN routine *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Xavier Prudent <prudent@lapp.in2p3.fr> - LAPP, France *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCFMlpANN_Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN_Utils.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN_Utils.h:638,Integrability,rout,routine,638,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodCFMlpANN_utils *; * *; * *; * Reference for the original FORTRAN version ""mlpl3.F"": *; * Authors : J. Proriol and contributions from ALEPH-Clermont-Fd *; * Team members *; * Copyright: Laboratoire Physique Corpusculaire *; * Universite de Blaise Pascal, IN2P3/CNRS *; * Description: *; * Utility routine, obtained via f2c from original mlpl3.F FORTRAN routine *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Xavier Prudent <prudent@lapp.in2p3.fr> - LAPP, France *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCFMlpANN_Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN_Utils.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN_Utils.h:34,Modifiability,variab,variables,34,"// static maximum number of input variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCFMlpANN_Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN_Utils.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN_Utils.h:31,Modifiability,variab,variable,31,"// maximum number of nodes per variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCFMlpANN_Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN_Utils.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN_Utils.h:3,Safety,avoid,avoiding,3,"// avoiding control reaches end of non-void function warning",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCFMlpANN_Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN_Utils.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCompositeBase.h:207,Deployability,integrat,integrated,207,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss,Or Cohen; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodCompositeBase *; * *; * *; * Description: *; * Virtual base class for all MVA method *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Or Cohen <orcohenor@gmail.com> - Weizmann Inst., Israel *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCompositeBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCompositeBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCompositeBase.h:207,Integrability,integrat,integrated,207,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss,Or Cohen; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodCompositeBase *; * *; * *; * Description: *; * Virtual base class for all MVA method *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Or Cohen <orcohenor@gmail.com> - Weizmann Inst., Israel *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCompositeBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCompositeBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCompositeBase.h:3,Performance,perform,performs,3,"// performs classifier training",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCompositeBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCompositeBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCompositeBase.h:5,Security,access,accessor,5,"///< accessor by name",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCompositeBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCompositeBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCompositeBase.h:5,Security,access,accessor,5,"///< accessor by index in vector; //the index of the classifier currently boosted",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCompositeBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCompositeBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCrossValidation.h:3,Performance,optimiz,optimize,3,"// optimize tuning parameters; // virtual std::map<TString,Double_t> OptimizeTuningParameters(TString fomType=""ROCIntegral"", TString; // fitType=""FitGA""); virtual void SetTuneParameters(std::map<TString,Double_t> tuneParameters);; // training method",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCrossValidation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCrossValidation.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCrossValidation.h:69,Performance,Optimiz,OptimizeTuningParameters,69,"// optimize tuning parameters; // virtual std::map<TString,Double_t> OptimizeTuningParameters(TString fomType=""ROCIntegral"", TString; // fitType=""FitGA""); virtual void SetTuneParameters(std::map<TString,Double_t> tuneParameters);; // training method",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCrossValidation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCrossValidation.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCrossValidation.h:213,Performance,tune,tuneParameters,213,"// optimize tuning parameters; // virtual std::map<TString,Double_t> OptimizeTuningParameters(TString fomType=""ROCIntegral"", TString; // fitType=""FitGA""); virtual void SetTuneParameters(std::map<TString,Double_t> tuneParameters);; // training method",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCrossValidation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCrossValidation.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h:217,Deployability,integrat,integrated,217,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Matt Jachowski, Peter Speckmayer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodCuts *; * *; * *; * Description: *; * Multivariate optimisation of signal efficiency for given background *; * efficiency, using rectangular minimum and maximum requirements on *; * input variables *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCuts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h:217,Integrability,integrat,integrated,217,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Matt Jachowski, Peter Speckmayer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodCuts *; * *; * *; * Description: *; * Multivariate optimisation of signal efficiency for given background *; * efficiency, using rectangular minimum and maximum requirements on *; * input variables *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCuts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h:493,Modifiability,variab,variables,493,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Matt Jachowski, Peter Speckmayer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodCuts *; * *; * *; * Description: *; * Multivariate optimisation of signal efficiency for given background *; * efficiency, using rectangular minimum and maximum requirements on *; * input variables *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCuts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h:265,Modifiability,variab,variables,265,"//////////////////////////////////////////////////////////////////////////; // //; // MethodCuts //; // //; // Multivariate optimisation of signal efficiency for given background //; // efficiency, using rectangular minimum and maximum requirements on //; // input variables //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCuts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h:3,Testability,test,test,3,"// test the method",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCuts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h:3,Security,access,accessors,3,"// accessors for Minuit",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCuts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h:35,Availability,avail,available,35,"// ranking of input variables (not available for cuts)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCuts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h:20,Modifiability,variab,variables,20,"// ranking of input variables (not available for cuts)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCuts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h:12,Integrability,message,message,12,"// get help message text",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCuts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h:18,Performance,optimiz,optimized,18,"///< used to test optimized signal efficiency",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCuts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h:13,Testability,test,test,13,"///< used to test optimized signal efficiency",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCuts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h:18,Performance,optimiz,optimized,18,"///< used to test optimized signal efficiency",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCuts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h:13,Testability,test,test,13,"///< used to test optimized signal efficiency",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCuts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h:18,Performance,optimiz,optimized,18,"///< used to test optimized signal efficiency",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCuts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h:13,Testability,test,test,13,"///< used to test optimized signal efficiency",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCuts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h:21,Modifiability,variab,variables,21,"///< what to do with variables; // relevant for all methods",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCuts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h:14,Modifiability,variab,variables,14,"///< means of variables (signal)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCuts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h:14,Modifiability,variab,variables,14,"///< means of variables (background)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCuts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h:13,Modifiability,variab,variables,13,"///< RMSs of variables (signal)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCuts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h:13,Modifiability,variab,variables,13,"///< RMSs of variables (background)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodCuts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h:188,Deployability,integrat,integrated,188,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski, Saurav Shekhar; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodDL *; * *; * *; * Description: *; * Deep Neural Network Method *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * Saurav Shekhar <sauravshekhar01@gmail.com> - ETH Zurich, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodDL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h:188,Integrability,integrat,integrated,188,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski, Saurav Shekhar; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodDL *; * *; * *; * Description: *; * Deep Neural Network Method *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * Saurav Shekhar <sauravshekhar01@gmail.com> - ETH Zurich, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodDL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h:135,Usability,Learn,Learning,135,"//////////////////////////////////////////////////////////////////////////; // //; // MethodDL //; // //; // Method class for all Deep Learning Networks //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodDL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h:152,Modifiability,layers,layers,152,"/*! After calling the ProcesOptions(), all of the options are parsed,; * so using the parsed options, and given the architecture and the; * type of the layers, we build the Deep Network passed as; * a reference in the function. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodDL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h:4,Performance,perform,perform,4,"/// perform prediction of the deep neural network; /// using batches (called by GetMvaValues)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodDL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h:12,Safety,predict,prediction,12,"/// perform prediction of the deep neural network; /// using batches (called by GetMvaValues)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodDL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h:14,Security,validat,validation,14,"/// parce the validation string and return the number of event data used for validation",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodDL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h:77,Security,validat,validation,77,"/// parce the validation string and return the number of event data used for validation",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodDL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h:40,Safety,predict,predictions,40,"///< The output function for making the predictions",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodDL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h:29,Availability,error,error,29,"///< The string defining the error strategy for training",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodDL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h:78,Security,validat,validation,78,"///< The string defining the number (or percentage) of training data used for validation",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodDL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h:10,Safety,predict,prediction,10,"// output prediction matrix of fNet",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodDL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h:18,Integrability,message,message,18,"// provide a help message",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodDL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h:40,Usability,learn,learning,40,/*! Check the type of analysis the deep learning network can do */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodDL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h:34,Usability,learn,learning,34,/*! Methods for training the deep learning network */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodDL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDNN.h:162,Deployability,integrat,integrated,162,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodDNN *; * *; * *; * Description: *; * NeuralNetwork *; * *; * Authors (alphabetical): *; * Peter Speckmayer <peter.speckmayer@gmx.at> - CERN, Switzerland *; * Simon Pfreundschuh <s.pfreundschuh@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; //#pragma once",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodDNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDNN.h:162,Integrability,integrat,integrated,162,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodDNN *; * *; * *; * Description: *; * NeuralNetwork *; * *; * Authors (alphabetical): *; * Peter Speckmayer <peter.speckmayer@gmx.at> - CERN, Switzerland *; * Simon Pfreundschuh <s.pfreundschuh@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; //#pragma once",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodDNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDNN.h:20,Modifiability,variab,variables,20,"// ranking of input variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodDNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDT.h:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodDT (Boosted Decision Trees) *; * *; * *; * Description: *; * Analysis of Boosted Decision Trees *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Or Cohen <orcohenor@gmail.com> - Weizmann Inst., Israel *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDT.h:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodDT (Boosted Decision Trees) *; * *; * *; * Description: *; * Analysis of Boosted Decision Trees *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Or Cohen <orcohenor@gmail.com> - Weizmann Inst., Israel *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDT.h:20,Modifiability,variab,variables,20,"// ranking of input variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDT.h:35,Availability,error,error,35,"///< ntuple var: misclassification error fraction",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDT.h:75,Security,validat,validation,75,"///< use user given prune strength or automatically determined one using a validation sample",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDT.h:44,Modifiability,variab,variables,44,"///< choose a random subset of possible cut variables at each node during training",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDT.h:19,Modifiability,variab,variables,19,"///< the number of variables used in the randomised tree splitting",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDT.h:46,Modifiability,variab,variables,46,"///< the relative importance of the different variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDT.h:13,Modifiability,variab,variable,13,"///< ancient variable, only needed for ""CompatibilityOptions""",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDT.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFDA.h:179,Deployability,integrat,integrated,179,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodFDA *; * *; * *; * Description: *; * Function discriminant analysis (FDA). This simple classifier *; * fits any user-defined TFormula (via option configuration string) to *; * the training data by requiring a formula response of 1 (0) to signal *; * (background) events. The parameter fitting is done via the abstract *; * class FitterBase, featuring Monte Carlo sampling, Genetic *; * Algorithm, Simulated Annealing, MINUIT and combinations of these. *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005-2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodFDA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFDA.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFDA.h:413,Deployability,configurat,configuration,413,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodFDA *; * *; * *; * Description: *; * Function discriminant analysis (FDA). This simple classifier *; * fits any user-defined TFormula (via option configuration string) to *; * the training data by requiring a formula response of 1 (0) to signal *; * (background) events. The parameter fitting is done via the abstract *; * class FitterBase, featuring Monte Carlo sampling, Genetic *; * Algorithm, Simulated Annealing, MINUIT and combinations of these. *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005-2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodFDA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFDA.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFDA.h:179,Integrability,integrat,integrated,179,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodFDA *; * *; * *; * Description: *; * Function discriminant analysis (FDA). This simple classifier *; * fits any user-defined TFormula (via option configuration string) to *; * the training data by requiring a formula response of 1 (0) to signal *; * (background) events. The parameter fitting is done via the abstract *; * class FitterBase, featuring Monte Carlo sampling, Genetic *; * Algorithm, Simulated Annealing, MINUIT and combinations of these. *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005-2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodFDA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFDA.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFDA.h:413,Modifiability,config,configuration,413,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodFDA *; * *; * *; * Description: *; * Function discriminant analysis (FDA). This simple classifier *; * fits any user-defined TFormula (via option configuration string) to *; * the training data by requiring a formula response of 1 (0) to signal *; * (background) events. The parameter fitting is done via the abstract *; * class FitterBase, featuring Monte Carlo sampling, Genetic *; * Algorithm, Simulated Annealing, MINUIT and combinations of these. *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005-2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodFDA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFDA.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFDA.h:347,Usability,simpl,simple,347,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodFDA *; * *; * *; * Description: *; * Function discriminant analysis (FDA). This simple classifier *; * fits any user-defined TFormula (via option configuration string) to *; * the training data by requiring a formula response of 1 (0) to signal *; * (background) events. The parameter fitting is done via the abstract *; * class FitterBase, featuring Monte Carlo sampling, Genetic *; * Algorithm, Simulated Annealing, MINUIT and combinations of these. *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005-2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodFDA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFDA.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFDA.h:221,Deployability,configurat,configuration,221,"//////////////////////////////////////////////////////////////////////////; // //; // MethodFDA //; // //; // Function discriminant analysis (FDA). This simple classifier //; // fits any user-defined TFormula (via option configuration string) to //; // the training data by requiring a formula response of 1 (0) to signal //; // (background) events. The parameter fitting is done via the abstract //; // class FitterBase, featuring Monte Carlo sampling, Genetic //; // Algorithm, Simulated Annealing, MINUIT and combinations of these. //; // //; // Can compute one-dimensional regression //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodFDA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFDA.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFDA.h:221,Modifiability,config,configuration,221,"//////////////////////////////////////////////////////////////////////////; // //; // MethodFDA //; // //; // Function discriminant analysis (FDA). This simple classifier //; // fits any user-defined TFormula (via option configuration string) to //; // the training data by requiring a formula response of 1 (0) to signal //; // (background) events. The parameter fitting is done via the abstract //; // class FitterBase, featuring Monte Carlo sampling, Genetic //; // Algorithm, Simulated Annealing, MINUIT and combinations of these. //; // //; // Can compute one-dimensional regression //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodFDA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFDA.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFDA.h:153,Usability,simpl,simple,153,"//////////////////////////////////////////////////////////////////////////; // //; // MethodFDA //; // //; // Function discriminant analysis (FDA). This simple classifier //; // fits any user-defined TFormula (via option configuration string) to //; // the training data by requiring a formula response of 1 (0) to signal //; // (background) events. The parameter fitting is done via the abstract //; // class FitterBase, featuring Monte Carlo sampling, Genetic //; // Algorithm, Simulated Annealing, MINUIT and combinations of these. //; // //; // Can compute one-dimensional regression //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodFDA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFDA.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFDA.h:20,Modifiability,variab,variables,20,"// ranking of input variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodFDA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFDA.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFDA.h:12,Integrability,message,message,12,"// get help message text",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodFDA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFDA.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFDA.h:74,Availability,avail,available,74,"///< intermediate fitter; // sum of weights (this should become centrally available through the dataset)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodFDA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFDA.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFisher.h:214,Deployability,integrat,integrated,214,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Xavier Prudent, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodFisher *; * *; * *; * Description: *; * Analysis of Fisher discriminant (Fisher or Mahalanobis approach) *; * *; * Original author of this Fisher-Discriminant implementation: *; * Andre Gaidot, CEA-France; *; * (Translation from FORTRAN) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Xavier Prudent <prudent@lapp.in2p3.fr> - LAPP, France *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodFisher.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFisher.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFisher.h:214,Integrability,integrat,integrated,214,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Xavier Prudent, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodFisher *; * *; * *; * Description: *; * Analysis of Fisher discriminant (Fisher or Mahalanobis approach) *; * *; * Original author of this Fisher-Discriminant implementation: *; * Andre Gaidot, CEA-France; *; * (Translation from FORTRAN) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Xavier Prudent <prudent@lapp.in2p3.fr> - LAPP, France *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodFisher.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFisher.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFisher.h:20,Modifiability,variab,variables,20,"// ranking of input variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodFisher.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFisher.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFisher.h:12,Integrability,message,message,12,"// get help message text",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodFisher.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFisher.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFisher.h:21,Modifiability,variab,variables,21,"// get mean value of variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodFisher.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFisher.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFisher.h:22,Energy Efficiency,power,power,22,"// get discriminating power",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodFisher.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFisher.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFisher.h:13,Modifiability,variab,variables,13,"// matrix of variables means: S, B, S+B vs. variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodFisher.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFisher.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFisher.h:44,Modifiability,variab,variables,44,"// matrix of variables means: S, B, S+B vs. variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodFisher.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFisher.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFisher.h:20,Energy Efficiency,power,power,20,"///< discriminating power",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodFisher.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFisher.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodHMatrix.h:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodHMatrix *; * *; * *; * Description: *; * H-Matrix method, which is implemented as a simple comparison of *; * chi-squared estimators for signal and background, taking into account *; * the linear correlations between the input variables. *; * Method is (also) used by D0 Collaboration (FNAL) for electron *; * identification; for more information, see, eg, *; * http://www-d0.fnal.gov/d0dist/dist/packages/tau_hmchisq/devel/doc/ *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodHMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodHMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodHMatrix.h:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodHMatrix *; * *; * *; * Description: *; * H-Matrix method, which is implemented as a simple comparison of *; * chi-squared estimators for signal and background, taking into account *; * the linear correlations between the input variables. *; * Method is (also) used by D0 Collaboration (FNAL) for electron *; * identification; for more information, see, eg, *; * http://www-d0.fnal.gov/d0dist/dist/packages/tau_hmchisq/devel/doc/ *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodHMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodHMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodHMatrix.h:513,Modifiability,variab,variables,513,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodHMatrix *; * *; * *; * Description: *; * H-Matrix method, which is implemented as a simple comparison of *; * chi-squared estimators for signal and background, taking into account *; * the linear correlations between the input variables. *; * Method is (also) used by D0 Collaboration (FNAL) for electron *; * identification; for more information, see, eg, *; * http://www-d0.fnal.gov/d0dist/dist/packages/tau_hmchisq/devel/doc/ *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodHMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodHMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodHMatrix.h:370,Usability,simpl,simple,370,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodHMatrix *; * *; * *; * Description: *; * H-Matrix method, which is implemented as a simple comparison of *; * chi-squared estimators for signal and background, taking into account *; * the linear correlations between the input variables. *; * Method is (also) used by D0 Collaboration (FNAL) for electron *; * identification; for more information, see, eg, *; * http://www-d0.fnal.gov/d0dist/dist/packages/tau_hmchisq/devel/doc/ *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodHMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodHMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodHMatrix.h:304,Modifiability,variab,variables,304,"//////////////////////////////////////////////////////////////////////////; // //; // MethodHMatrix //; // //; // H-Matrix method, which is implemented as a simple comparison of //; // chi-squared estimators for signal and background, taking into //; // account the linear correlations between the input variables //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodHMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodHMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodHMatrix.h:157,Usability,simpl,simple,157,"//////////////////////////////////////////////////////////////////////////; // //; // MethodHMatrix //; // //; // H-Matrix method, which is implemented as a simple comparison of //; // chi-squared estimators for signal and background, taking into //; // account the linear correlations between the input variables //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodHMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodHMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodHMatrix.h:20,Modifiability,variab,variables,20,"// ranking of input variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodHMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodHMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodHMatrix.h:12,Integrability,message,message,12,"// get help message text",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodHMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodHMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodHMatrix.h:27,Modifiability,variab,variable,27,"// arrays of input evt vs. variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodHMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodHMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodHMatrix.h:22,Usability,simpl,simple,22,"// H-Matrix method, a simple comparison of chi-squared estimators for signal and background",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodHMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodHMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodKNN.h:160,Deployability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Rustem Ospanov; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodKNN *; * *; * *; * Description: *; * Analysis of k-nearest neighbor *; * *; * Author: *; * Rustem Ospanov <rustem@fnal.gov> - U. of Texas at Austin, USA *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Texas at Austin, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodKNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodKNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodKNN.h:160,Integrability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Rustem Ospanov; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodKNN *; * *; * *; * Description: *; * Analysis of k-nearest neighbor *; * *; * Author: *; * Rustem Ospanov <rustem@fnal.gov> - U. of Texas at Austin, USA *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Texas at Austin, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodKNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodKNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodKNN.h:12,Integrability,message,message,12,"// get help message text",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodKNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodKNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodKNN.h:40,Modifiability,variab,variable,40,"///< fraction of events used to compute variable width",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodKNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodKNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodKNN.h:34,Usability,learn,learning,34,"///<! (untouched) events used for learning",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodKNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodKNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodKNN.h:43,Performance,optimiz,optimization,43,"///< number of binary tree levels used for optimization",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodKNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodKNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLD.h:189,Deployability,integrat,integrated,189,"// Author: Krzysztof Danielowski, Kamil Kraszewski, Maciej Kruk, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodLD *; * *; * *; * Description: *; * Linear Discriminant (Simple Linear Regression) *; * *; * Authors (alphabetical): *; * Krzysztof Danielowski <danielow@cern.ch> - IFJ PAN & AGH, Poland *; * Kamil Kraszewski <kalq@cern.ch> - IFJ PAN & UJ, Poland *; * Maciej Kruk <mkruk@cern.ch> - IFJ PAN & AGH, Poland *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <therhaag@physik.uni-bonn.de> - Uni Bonn, Germany *; * *; * Copyright (c) 2008-2011: *; * CERN, Switzerland *; * PAN, Poland *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodLD.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLD.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLD.h:189,Integrability,integrat,integrated,189,"// Author: Krzysztof Danielowski, Kamil Kraszewski, Maciej Kruk, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodLD *; * *; * *; * Description: *; * Linear Discriminant (Simple Linear Regression) *; * *; * Authors (alphabetical): *; * Krzysztof Danielowski <danielow@cern.ch> - IFJ PAN & AGH, Poland *; * Kamil Kraszewski <kalq@cern.ch> - IFJ PAN & UJ, Poland *; * Maciej Kruk <mkruk@cern.ch> - IFJ PAN & AGH, Poland *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <therhaag@physik.uni-bonn.de> - Uni Bonn, Germany *; * *; * Copyright (c) 2008-2011: *; * CERN, Switzerland *; * PAN, Poland *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodLD.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLD.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLD.h:334,Usability,Simpl,Simple,334,"// Author: Krzysztof Danielowski, Kamil Kraszewski, Maciej Kruk, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodLD *; * *; * *; * Description: *; * Linear Discriminant (Simple Linear Regression) *; * *; * Authors (alphabetical): *; * Krzysztof Danielowski <danielow@cern.ch> - IFJ PAN & AGH, Poland *; * Kamil Kraszewski <kalq@cern.ch> - IFJ PAN & UJ, Poland *; * Maciej Kruk <mkruk@cern.ch> - IFJ PAN & AGH, Poland *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <therhaag@physik.uni-bonn.de> - Uni Bonn, Germany *; * *; * Copyright (c) 2008-2011: *; * CERN, Switzerland *; * PAN, Poland *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodLD.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLD.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLikelihood.h:250,Deployability,integrat,integrated,250,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Peter Speckmayer, Eckhard von Toerne, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodLikelihood *; * *; * *; * Description: *; * Likelihood analysis (""non-parametric approach"") *; * Also implemented is a ""diagonalized likelihood approach"", *; * which improves over the uncorrelated likelihood ansatz by transforming *; * linearly the input variables into a diagonal space, using the square-root *; * of the covariance matrix. This approach can be chosen by inserting *; * the letter ""D"" into the option string. *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmazer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodLikelihood.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLikelihood.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLikelihood.h:250,Integrability,integrat,integrated,250,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Peter Speckmayer, Eckhard von Toerne, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodLikelihood *; * *; * *; * Description: *; * Likelihood analysis (""non-parametric approach"") *; * Also implemented is a ""diagonalized likelihood approach"", *; * which improves over the uncorrelated likelihood ansatz by transforming *; * linearly the input variables into a diagonal space, using the square-root *; * of the covariance matrix. This approach can be chosen by inserting *; * the letter ""D"" into the option string. *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmazer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodLikelihood.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLikelihood.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLikelihood.h:593,Modifiability,variab,variables,593,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Peter Speckmayer, Eckhard von Toerne, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodLikelihood *; * *; * *; * Description: *; * Likelihood analysis (""non-parametric approach"") *; * Also implemented is a ""diagonalized likelihood approach"", *; * which improves over the uncorrelated likelihood ansatz by transforming *; * linearly the input variables into a diagonal space, using the square-root *; * of the covariance matrix. This approach can be chosen by inserting *; * the letter ""D"" into the option string. *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmazer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodLikelihood.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLikelihood.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLikelihood.h:334,Modifiability,variab,variables,334,"//////////////////////////////////////////////////////////////////////////; // //; // MethodLikelihood //; // //; // Likelihood analysis (""non-parametric approach"") //; // Also implemented is a ""diagonalized likelihood approach"", //; // which improves over the uncorrelated likelihood ansatz by //; // transforming linearly the input variables into a diagonal space, //; // using the square-root of the covariance matrix //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodLikelihood.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLikelihood.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLikelihood.h:73,Testability,test,tests,73,"// calculate the MVA value; // the argument is used for internal ranking tests",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodLikelihood.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLikelihood.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLikelihood.h:20,Modifiability,variab,variables,20,"// ranking of input variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodLikelihood.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLikelihood.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLikelihood.h:12,Integrability,message,message,12,"// get help message text",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodLikelihood.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLikelihood.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLikelihood.h:38,Safety,avoid,avoid,38,"///< minimum number of likelihood (to avoid zero)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodLikelihood.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLikelihood.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLikelihood.h:17,Testability,test,test,17,"///< for ranking test",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodLikelihood.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLikelihood.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLikelihood.h:98,Modifiability,variab,variables,98,"///< list of PDFs (background); // default initialisation called by all constructors; // obsolete variables kept for backward compatibility",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodLikelihood.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLikelihood.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLikelihood.h:28,Energy Efficiency,Adapt,Adaptive,28,"///< fine tuning factor for Adaptive KDE",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodLikelihood.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLikelihood.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLikelihood.h:28,Modifiability,Adapt,Adaptive,28,"///< fine tuning factor for Adaptive KDE",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodLikelihood.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLikelihood.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLikelihood.h:83,Modifiability,variab,variable,83,"///< which interpolation method used for reference histograms (individual for each variable)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodLikelihood.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLikelihood.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h:313,Deployability,integrat,integrated,313,"// @(#)root/tmva $Id$; // Author: Krzysztof Danielowski, Andreas Hoecker, Matt Jachowski, Kamil Kraszewski, Maciej Kruk, Peter Speckmayer, Joerg Stelzer, Eckhard von Toerne, Jan Therhaag, Jiahang Zhong; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodMLP *; * *; * *; * Description: *; * ANN Multilayer Perceptron class for the discrimination of signal *; * from background. BFGS implementation based on TMultiLayerPerceptron *; * class from ROOT (http://root.cern.ch). *; * *; * Authors (alphabetical): *; * Krzysztof Danielowski <danielow@cern.ch> - IFJ & AGH, Poland *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * Kamil Kraszewski <kalq@cern.ch> - IFJ & UJ, Poland *; * Maciej Kruk <mkruk@cern.ch> - IFJ & AGH, Poland *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Jiahang Zhong <Jiahang.Zhong@cern.ch> - Academia Sinica, Taipei *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodMLP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h:313,Integrability,integrat,integrated,313,"// @(#)root/tmva $Id$; // Author: Krzysztof Danielowski, Andreas Hoecker, Matt Jachowski, Kamil Kraszewski, Maciej Kruk, Peter Speckmayer, Joerg Stelzer, Eckhard von Toerne, Jan Therhaag, Jiahang Zhong; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodMLP *; * *; * *; * Description: *; * ANN Multilayer Perceptron class for the discrimination of signal *; * from background. BFGS implementation based on TMultiLayerPerceptron *; * class from ROOT (http://root.cern.ch). *; * *; * Authors (alphabetical): *; * Krzysztof Danielowski <danielow@cern.ch> - IFJ & AGH, Poland *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * Kamil Kraszewski <kalq@cern.ch> - IFJ & UJ, Poland *; * Maciej Kruk <mkruk@cern.ch> - IFJ & AGH, Poland *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Jiahang Zhong <Jiahang.Zhong@cern.ch> - Academia Sinica, Taipei *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodMLP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h:12,Integrability,message,message,12,"// get help message text",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodMLP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h:44,Modifiability,variab,variables,44,"///< The testing sample is sampled; // BFGS variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodMLP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h:9,Testability,test,testing,9,"///< The testing sample is sampled; // BFGS variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodMLP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h:17,Modifiability,variab,variable,17,"///< line search variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodMLP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h:17,Modifiability,variab,variable,17,"///< line search variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodMLP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h:73,Modifiability,variab,variable,73,"///< reset time (how often we clear hessian matrix); // back propagation variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodMLP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h:30,Usability,clear,clear,30,"///< reset time (how often we clear hessian matrix); // back propagation variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodMLP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h:5,Usability,learn,learning,5,"///< learning rate for synapse weight adjustments",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodMLP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h:26,Usability,learn,learning,26,"///< decay rate for above learning rate",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodMLP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h:14,Usability,learn,learning,14,"///< backprop learning mode (sequential or batch)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodMLP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h:14,Usability,learn,learning,14,"///< backprop learning mode option string (sequential or batch)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodMLP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h:42,Usability,learn,learning,42,"///< batch size, only matters if in batch learning mode",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodMLP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h:27,Performance,perform,performed,27,"///< test for overtraining performed at each #th epochs",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodMLP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h:5,Testability,test,test,5,"///< test for overtraining performed at each #th epochs",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodMLP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h:32,Energy Efficiency,monitor,monitoring,32,"///< create and fill epoch-wise monitoring histograms (makes outputfile big!); // genetic algorithm variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodMLP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h:100,Modifiability,variab,variables,100,"///< create and fill epoch-wise monitoring histograms (makes outputfile big!); // genetic algorithm variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodMLP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h:10,Modifiability,variab,variables,10,"// minuit variables -- commented out because they rely on a static pointer",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodMLP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDEFoam.h:195,Deployability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Class : MethodPDEFoam *; * *; * *; * Description: *; * The PDEFoam method is an extension of the PDERS method, which divides *; * the multi-dimensional phase space in a finite number of hyper-rectangles *; * (cells) of constant event density. This ""foam"" of cells is filled with *; * averaged probability-density information sampled from a training event *; * sample. *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Original author of the TFoam implementation: *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodPDEFoam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDEFoam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDEFoam.h:195,Integrability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Class : MethodPDEFoam *; * *; * *; * Description: *; * The PDEFoam method is an extension of the PDERS method, which divides *; * the multi-dimensional phase space in a finite number of hyper-rectangles *; * (cells) of constant event density. This ""foam"" of cells is filled with *; * averaged probability-density information sampled from a training event *; * sample. *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Original author of the TFoam implementation: *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodPDEFoam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDEFoam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDEFoam.h:20,Modifiability,variab,variables,20,"// ranking of input variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodPDEFoam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDEFoam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDEFoam.h:12,Integrability,message,message,12,"// get help message text",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodPDEFoam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDEFoam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDEFoam.h:17,Availability,error,error,17,"// calculate the error on the Mva value",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodPDEFoam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDEFoam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDEFoam.h:8,Modifiability,variab,variable,8,"// fill variable names into foam",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodPDEFoam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDEFoam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDEFoam.h:25,Availability,error,error,25,"///< cut on discriminant error",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodPDEFoam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDEFoam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDEFoam.h:59,Testability,log,logic,59,"///< enum which specifies the separation to use for the DT logic",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodPDEFoam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDEFoam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h:214,Deployability,integrat,integrated,214,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Yair Mahalalel, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodPDERS *; * *; * *; * Description: *; * Multidimensional Likelihood using the ""Probability density estimator *; * range search"" (PDERS) method suggested in *; * T. Carli and B. Koblitz, NIM A 501, 576 (2003) *; * *; * The multidimensional PDFs for signal and background are modeled *; * by counting the events in the ""vicinity"" of a test point. The volume *; * that describes ""vicinity"" is user-defined through the option string. *; * A search method based on binary-trees is used to improve the selection *; * efficiency of the volume search. *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Yair Mahalalel <Yair.Mahalalel@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodPDERS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h:214,Integrability,integrat,integrated,214,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Yair Mahalalel, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodPDERS *; * *; * *; * Description: *; * Multidimensional Likelihood using the ""Probability density estimator *; * range search"" (PDERS) method suggested in *; * T. Carli and B. Koblitz, NIM A 501, 576 (2003) *; * *; * The multidimensional PDFs for signal and background are modeled *; * by counting the events in the ""vicinity"" of a test point. The volume *; * that describes ""vicinity"" is user-defined through the option string. *; * A search method based on binary-trees is used to improve the selection *; * efficiency of the volume search. *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Yair Mahalalel <Yair.Mahalalel@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodPDERS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h:634,Testability,test,test,634,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Yair Mahalalel, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodPDERS *; * *; * *; * Description: *; * Multidimensional Likelihood using the ""Probability density estimator *; * range search"" (PDERS) method suggested in *; * T. Carli and B. Koblitz, NIM A 501, 576 (2003) *; * *; * The multidimensional PDFs for signal and background are modeled *; * by counting the events in the ""vicinity"" of a test point. The volume *; * that describes ""vicinity"" is user-defined through the option string. *; * A search method based on binary-trees is used to improve the selection *; * efficiency of the volume search. *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Yair Mahalalel <Yair.Mahalalel@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodPDERS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h:12,Integrability,message,message,12,"// get help message text",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodPDERS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h:13,Modifiability,variab,variable,13,"// auxiliary variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodPDERS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h:54,Security,access,accessors,54,"// number of external function calls (RootFinder); // accessors",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodPDERS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h:20,Modifiability,variab,variables,20,"// ranking of input variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodPDERS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h:60,Energy Efficiency,adapt,adaptive,60,"// calculate the averages of the input variables needed for adaptive training",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodPDERS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h:39,Modifiability,variab,variables,39,"// calculate the averages of the input variables needed for adaptive training",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodPDERS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h:60,Modifiability,adapt,adaptive,60,"// calculate the averages of the input variables needed for adaptive training",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodPDERS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h:22,Energy Efficiency,adapt,adaptive,22,"///< size of Gauss in adaptive volume",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodPDERS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h:22,Modifiability,adapt,adaptive,22,"///< size of Gauss in adaptive volume",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodPDERS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h:22,Energy Efficiency,adapt,adaptive,22,"///< size of Gauss in adaptive volume (normalised to dimensions)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodPDERS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h:22,Modifiability,adapt,adaptive,22,"///< size of Gauss in adaptive volume (normalised to dimensions)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodPDERS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h:60,Energy Efficiency,adapt,adaptive,60,"// number of output dimensions for regression; // input for adaptive volume adjustment",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodPDERS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h:60,Modifiability,adapt,adaptive,60,"// number of output dimensions for regression; // input for adaptive volume adjustment",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodPDERS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h:33,Energy Efficiency,adapt,adaptive,33,"///< minimum number of events in adaptive volume",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodPDERS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h:33,Modifiability,adapt,adaptive,33,"///< minimum number of events in adaptive volume",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodPDERS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h:33,Energy Efficiency,adapt,adaptive,33,"///< maximum number of events in adaptive volume",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodPDERS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h:33,Modifiability,adapt,adaptive,33,"///< maximum number of events in adaptive volume",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodPDERS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h:37,Energy Efficiency,adapt,adapt,37,"///< maximum number of iterations to adapt volume size",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodPDERS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h:37,Modifiability,adapt,adapt,37,"///< maximum number of iterations to adapt volume size",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodPDERS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h:23,Energy Efficiency,adapt,adaptive,23,"///< initial scale for adaptive volume",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodPDERS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h:23,Modifiability,adapt,adaptive,23,"///< initial scale for adaptive volume",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodPDERS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodRuleFit.h:164,Deployability,integrat,integrated,164,"// @(#)root/tmva $Id$; // Author: Fredrik Tegenfeldt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodRuleFit *; * *; * *; * Description: *; * Friedman's RuleFit method *; * *; * Authors (alphabetical): *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * Iowa State U. *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodRuleFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodRuleFit.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodRuleFit.h:164,Integrability,integrat,integrated,164,"// @(#)root/tmva $Id$; // Author: Fredrik Tegenfeldt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodRuleFit *; * *; * *; * Description: *; * Friedman's RuleFit method *; * *; * Authors (alphabetical): *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * Iowa State U. *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodRuleFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodRuleFit.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodRuleFit.h:20,Modifiability,variab,variables,20,"// ranking of input variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodRuleFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodRuleFit.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodRuleFit.h:3,Security,access,accessors,3,"// accessors",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodRuleFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodRuleFit.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodRuleFit.h:12,Integrability,message,message,12,"// get help message text",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodRuleFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodRuleFit.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodRuleFit.h:14,Energy Efficiency,monitor,monitor,14,"// initialize monitor ntuple",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodRuleFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodRuleFit.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodRuleFit.h:9,Modifiability,variab,variable,9,"// check variable range and set var to lower or upper if out of range",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodRuleFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodRuleFit.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodRuleFit.h:16,Energy Efficiency,monitor,monitor,16,"///< pointer to monitor rule ntuple",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodRuleFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodRuleFit.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodRuleFit.h:13,Integrability,interface,interface,13,"///< if true interface with J.Friedmans RuleFit module",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodRuleFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodRuleFit.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodRuleFit.h:30,Integrability,message,message,30,"// verify range and print out message; // if outside range, set to closest limit",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodRuleFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodRuleFit.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodRuleFit.h:30,Integrability,message,message,30,"// verify range and print out message; // if outside range, set to given default value",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodRuleFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodRuleFit.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodSVM.h:174,Deployability,integrat,integrated,174,"// @(#)root/tmva $Id$; // Author: Marcin Wolter, Andrzej Zemla; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodSVM *; * *; * *; * Description: *; * Support Vector Machine *; * *; * Authors (alphabetical): *; * Marcin Wolter <Marcin.Wolter@cern.ch> - IFJ PAN, Krakow, Poland *; * Andrzej Zemla <azemla@cern.ch> - IFJ PAN, Krakow, Poland *; * (IFJ PAN: Henryk Niewodniczanski Inst. Nucl. Physics, Krakow, Poland) *; * *; * Introduction of regression by: *; * Krzysztof Danielowski <danielow@cern.ch> - IFJ PAN & AGH, Krakow, Poland *; * Kamil Kraszewski <kalq@cern.ch> - IFJ PAN & UJ, Krakow, Poland *; * Maciej Kruk <mkruk@cern.ch> - IFJ PAN & AGH, Krakow, Poland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * PAN, Krakow, Poland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodSVM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodSVM.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodSVM.h:174,Integrability,integrat,integrated,174,"// @(#)root/tmva $Id$; // Author: Marcin Wolter, Andrzej Zemla; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodSVM *; * *; * *; * Description: *; * Support Vector Machine *; * *; * Authors (alphabetical): *; * Marcin Wolter <Marcin.Wolter@cern.ch> - IFJ PAN, Krakow, Poland *; * Andrzej Zemla <azemla@cern.ch> - IFJ PAN, Krakow, Poland *; * (IFJ PAN: Henryk Niewodniczanski Inst. Nucl. Physics, Krakow, Poland) *; * *; * Introduction of regression by: *; * Krzysztof Danielowski <danielow@cern.ch> - IFJ PAN & AGH, Krakow, Poland *; * Kamil Kraszewski <kalq@cern.ch> - IFJ PAN & UJ, Krakow, Poland *; * Maciej Kruk <mkruk@cern.ch> - IFJ PAN & AGH, Krakow, Poland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * PAN, Krakow, Poland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodSVM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodSVM.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodSVM.h:20,Modifiability,variab,variables,20,"// ranking of input variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodSVM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodSVM.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodSVM.h:12,Integrability,message,message,12,"// get help message text",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodSVM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodSVM.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodSVM.h:5,Availability,toler,tolerance,5,"///< tolerance parameter",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodSVM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodSVM.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodSVM.h:21,Modifiability,variab,variables,21,"///< number of input variables for multi-gaussian",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodSVM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodSVM.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodSVM.h:30,Performance,tune,tuned,30,"///< Specify parameters to be tuned",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodSVM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodSVM.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodTMlpANN.h:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodTMlpANN *; * *; * *; * Description: *; * Implementation of interface for Root-integrated artificial neural *; * network: TMultiLayerPerceptron, author: Christophe.Delaere@cern.ch *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodTMlpANN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodTMlpANN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodTMlpANN.h:364,Deployability,integrat,integrated,364,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodTMlpANN *; * *; * *; * Description: *; * Implementation of interface for Root-integrated artificial neural *; * network: TMultiLayerPerceptron, author: Christophe.Delaere@cern.ch *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodTMlpANN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodTMlpANN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodTMlpANN.h:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodTMlpANN *; * *; * *; * Description: *; * Implementation of interface for Root-integrated artificial neural *; * network: TMultiLayerPerceptron, author: Christophe.Delaere@cern.ch *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodTMlpANN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodTMlpANN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodTMlpANN.h:345,Integrability,interface,interface,345,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodTMlpANN *; * *; * *; * Description: *; * Implementation of interface for Root-integrated artificial neural *; * network: TMultiLayerPerceptron, author: Christophe.Delaere@cern.ch *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodTMlpANN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodTMlpANN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodTMlpANN.h:364,Integrability,integrat,integrated,364,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodTMlpANN *; * *; * *; * Description: *; * Implementation of interface for Root-integrated artificial neural *; * network: TMultiLayerPerceptron, author: Christophe.Delaere@cern.ch *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodTMlpANN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodTMlpANN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodTMlpANN.h:151,Deployability,integrat,integrated,151,"//////////////////////////////////////////////////////////////////////////; // //; // MethodTMlpANN //; // //; // Implementation of interface for Root-integrated artificial neural //; // network: TMultiLayerPerceptron //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodTMlpANN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodTMlpANN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodTMlpANN.h:132,Integrability,interface,interface,132,"//////////////////////////////////////////////////////////////////////////; // //; // MethodTMlpANN //; // //; // Implementation of interface for Root-integrated artificial neural //; // network: TMultiLayerPerceptron //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodTMlpANN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodTMlpANN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodTMlpANN.h:151,Integrability,integrat,integrated,151,"//////////////////////////////////////////////////////////////////////////; // //; // MethodTMlpANN //; // //; // Implementation of interface for Root-integrated artificial neural //; // network: TMultiLayerPerceptron //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodTMlpANN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodTMlpANN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodTMlpANN.h:20,Modifiability,variab,variables,20,"// ranking of input variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodTMlpANN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodTMlpANN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodTMlpANN.h:12,Integrability,message,message,12,"// get help message text",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodTMlpANN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodTMlpANN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodTMlpANN.h:56,Security,validat,validation,56,"///< fraction of events in training tree used for cross validation",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodTMlpANN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodTMlpANN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodTMlpANN.h:9,Usability,learn,learning,9,"///< the learning method (given via option string); // default initialisation called by all constructors",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodTMlpANN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodTMlpANN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodTMlpANN.h:21,Integrability,interface,interface,21,"// Implementation of interface for TMultiLayerPerceptron",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MethodTMlpANN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodTMlpANN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MinuitFitter.h:161,Deployability,integrat,integrated,161,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MinuitFitter *; * *; * *; * Description: *; * Fitter using MINUIT *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MinuitFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MinuitFitter.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MinuitFitter.h:161,Integrability,integrat,integrated,161,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MinuitFitter *; * *; * *; * Description: *; * Fitter using MINUIT *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MinuitFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MinuitFitter.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MinuitFitter.h:11,Integrability,wrap,wrapper,11,"// holds a wrapper around TMinuit",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MinuitFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MinuitFitter.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MinuitFitter.h:12,Availability,error,error,12,"///< minuit error level",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MinuitFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MinuitFitter.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MinuitFitter.h:5,Availability,toler,tolerance,5,"///< tolerance to the function value at the minimum",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MinuitFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MinuitFitter.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MinuitWrapper.h:162,Deployability,integrat,integrated,162,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MinuitWrapper *; * *; * *; * Description: *; * Wrapper around MINUIT *; * *; * Authors (alphabetical): *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MinuitWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MinuitWrapper.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MinuitWrapper.h:162,Integrability,integrat,integrated,162,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MinuitWrapper *; * *; * *; * Description: *; * Wrapper around MINUIT *; * *; * Authors (alphabetical): *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MinuitWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MinuitWrapper.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MinuitWrapper.h:291,Integrability,Wrap,Wrapper,291,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MinuitWrapper *; * *; * *; * Description: *; * Wrapper around MINUIT *; * *; * Authors (alphabetical): *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MinuitWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MinuitWrapper.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MinuitWrapper.h:114,Integrability,Wrap,Wrapper,114,"//////////////////////////////////////////////////////////////////////////; // //; // MinuitWrapper //; // //; // Wrapper around MINUIT //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MinuitWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MinuitWrapper.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MinuitWrapper.h:3,Integrability,Wrap,Wrapper,3,"// Wrapper around TMinuit",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MinuitWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MinuitWrapper.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MisClassificationError.h:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MisClassificationError *; * *; * *; * Description: *; * Implementation of the MisClassificationError as separation *; * criterion: 1-max(p, 1-p) *; * *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MisClassificationError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MisClassificationError.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MisClassificationError.h:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MisClassificationError *; * *; * *; * Description: *; * Implementation of the MisClassificationError as separation *; * criterion: 1-max(p, 1-p) *; * *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MisClassificationError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MisClassificationError.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MisClassificationError.h:41,Availability,error,error,41,"// constructor for the Misclassification error",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MisClassificationError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MisClassificationError.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ModulekNN.h:160,Deployability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Rustem Ospanov; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : ModulekNN *; * *; * *; * Description: *; * Module for k-nearest neighbor algorithm *; * *; * Author: *; * Rustem Ospanov <rustem@fnal.gov> - U. of Texas at Austin, USA *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Texas at Austin, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ModulekNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ModulekNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ModulekNN.h:160,Integrability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Rustem Ospanov; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : ModulekNN *; * *; * *; * Description: *; * Module for k-nearest neighbor algorithm *; * *; * Author: *; * Rustem Ospanov <rustem@fnal.gov> - U. of Texas at Austin, USA *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Texas at Austin, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ModulekNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ModulekNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ModulekNN.h:114,Modifiability,variab,variable,114,"//______________________________________________________________________; /*; kNN::Event describes point in input variable vector-space, with; additional functionality like distance between points; */; //______________________________________________________________________; // C++",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ModulekNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ModulekNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ModulekNN.h:18,Modifiability,variab,variables,18,"///< coordinates (variables) for knn search",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ModulekNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ModulekNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ModulekNN.h:17,Modifiability,variab,variables,17,"// sorted map of variables in each dimension for all event types",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ModulekNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ModulekNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ModulekNN.h:4,Integrability,message,message,4,"//! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ModulekNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ModulekNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ModulekNN.h:12,Testability,log,logger,12,"//! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ModulekNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ModulekNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Monitoring.h:3,Energy Efficiency,Monitor,Monitoring,3,"/* Monitoring (int argc, char* /\*argv[]*\/) */; /* { */; /* } */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Monitoring.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Monitoring.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Monitoring.h:23,Energy Efficiency,monitor,monitoring,23,"/* std::cout << ""start monitoring"" << std::endl; */; /* std::cout << "" new tapp "" << std::endl; */; /* fApplication = new TApplication (""TMVA Monitoring"", 0, 0); */; /* std::cout << "" set return from run"" << std::endl; */; /* // fApplication->SetReturnFromRun (true); */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Monitoring.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Monitoring.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Monitoring.h:142,Energy Efficiency,Monitor,Monitoring,142,"/* std::cout << ""start monitoring"" << std::endl; */; /* std::cout << "" new tapp "" << std::endl; */; /* fApplication = new TApplication (""TMVA Monitoring"", 0, 0); */; /* std::cout << "" set return from run"" << std::endl; */; /* // fApplication->SetReturnFromRun (true); */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Monitoring.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Monitoring.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Monitoring.h:17,Usability,clear,clear,17,"// std::cout << ""clear histo "" << histoName << std::endl;",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Monitoring.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Monitoring.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Monitoring.h:17,Usability,clear,clear,17,"// std::cout << ""clear histo which exists "" << histoName << std::endl;",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Monitoring.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Monitoring.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MsgLogger.h:218,Deployability,integrat,integrated,218,"// @(#)root/tmva $Id$; // Author: Attila Krasznahorkay, Andreas Hoecker, Joerg Stelzer, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MsgLogger *; * *; * *; * Description: *; * TMVA output logger class producing nicely formatted log messages *; * *; * Author: *; * Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch> - CERN, Switzerland *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MsgLogger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MsgLogger.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MsgLogger.h:218,Integrability,integrat,integrated,218,"// @(#)root/tmva $Id$; // Author: Attila Krasznahorkay, Andreas Hoecker, Joerg Stelzer, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MsgLogger *; * *; * *; * Description: *; * TMVA output logger class producing nicely formatted log messages *; * *; * Author: *; * Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch> - CERN, Switzerland *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MsgLogger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MsgLogger.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MsgLogger.h:399,Integrability,message,messages,399,"// @(#)root/tmva $Id$; // Author: Attila Krasznahorkay, Andreas Hoecker, Joerg Stelzer, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MsgLogger *; * *; * *; * Description: *; * TMVA output logger class producing nicely formatted log messages *; * *; * Author: *; * Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch> - CERN, Switzerland *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MsgLogger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MsgLogger.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MsgLogger.h:355,Testability,log,logger,355,"// @(#)root/tmva $Id$; // Author: Attila Krasznahorkay, Andreas Hoecker, Joerg Stelzer, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MsgLogger *; * *; * *; * Description: *; * TMVA output logger class producing nicely formatted log messages *; * *; * Author: *; * Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch> - CERN, Switzerland *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MsgLogger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MsgLogger.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MsgLogger.h:395,Testability,log,log,395,"// @(#)root/tmva $Id$; // Author: Attila Krasznahorkay, Andreas Hoecker, Joerg Stelzer, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MsgLogger *; * *; * *; * Description: *; * TMVA output logger class producing nicely formatted log messages *; * *; * Author: *; * Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch> - CERN, Switzerland *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MsgLogger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MsgLogger.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MsgLogger.h:3,Security,Access,Accessors,3,"// Accessors",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MsgLogger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MsgLogger.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MsgLogger.h:10,Integrability,message,message,10,"// Accept message type specification",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MsgLogger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MsgLogger.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MsgLogger.h:31,Testability,log,loggers,31,"// Temporally disables all the loggers (Caution! Use with care !)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MsgLogger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MsgLogger.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MsgLogger.h:19,Integrability,rout,routines,19,"// private utility routines",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MsgLogger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MsgLogger.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MsgLogger.h:51,Testability,log,logging,51,"// Ostringstream derivative to redirect and format logging output",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/MsgLogger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MsgLogger.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:128,Modifiability,Variab,Variables,128,"// ----- signature of a minimizer -------------; // class Minimizer; // {; // public:; // template <typename Function, typename Variables, typename PassThrough>; // double operator() (Function& fnc, Variables& vars, PassThrough& passThrough); // {; // // auto itVars = begin (vars);; // // auto itVarsEnd = end (vars);; // std::vector<double> myweights;; // std::vector<double> gradients;; // double value = fnc (passThrough, myweights);; // value = fnc (passThrough, myweights, gradients);; // return value;; // }; // };; ///< list all the minimizer types",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:199,Modifiability,Variab,Variables,199,"// ----- signature of a minimizer -------------; // class Minimizer; // {; // public:; // template <typename Function, typename Variables, typename PassThrough>; // double operator() (Function& fnc, Variables& vars, PassThrough& passThrough); // {; // // auto itVars = begin (vars);; // // auto itVarsEnd = end (vars);; // std::vector<double> myweights;; // std::vector<double> gradients;; // double value = fnc (passThrough, myweights);; // value = fnc (passThrough, myweights, gradients);; // return value;; // }; // };; ///< list all the minimizer types",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:42,Usability,learn,learningRate,42,"/*! \brief c'tor; *; * C'tor; *; * \param learningRate denotes the learning rate for the SGD algorithm; * \param momentum fraction of the velocity which is taken over from the last step; * \param repetitions re-compute the gradients each ""repetitions"" steps; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:67,Usability,learn,learning,67,"/*! \brief c'tor; *; * C'tor; *; * \param learningRate denotes the learning rate for the SGD algorithm; * \param momentum fraction of the velocity which is taken over from the last step; * \param repetitions re-compute the gradients each ""repetitions"" steps; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:25,Usability,learn,learningRate,25,"///< internal parameter (learningRate)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:63,Modifiability,layers,layers,63,/*! \brief c'tor of LayerData; *; * C'tor of LayerData for all layers which are not the input layer; Used during the training of the DNN; *; * \param size size of the layer; * \param itWeightBegin indicates the start of the weights for this layer on the weight vector; * \param itGradientBegin indicates the start of the gradients for this layer on the gradient vector; * \param activationFunction indicates activation functions for this layer; * \param inverseActivationFunction indicates the inverse activation functions for this layer; * \param eModeOutput indicates a potential tranformation of the output values before further computation; * DIRECT does not further transformation; SIGMOID applies a sigmoid transformation to each; * output value (to create a probability); SOFTMAX applies a softmax transformation to all; * output values (mutually exclusive probability); */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:63,Modifiability,layers,layers,63,/*! \brief c'tor of LayerData; *; * C'tor of LayerData for all layers which are not the input layer; Used during the application of the DNN; *; * \param size size of the layer; * \param itWeightBegin indicates the start of the weights for this layer on the weight vector; * \param activationFunction indicates the activation function for this layer; * \param eModeOutput indicates a potential tranformation of the output values before further computation; * DIRECT does not further transformation; SIGMOID applies a sigmoid transformation to each; * output value (to create a probability); SOFTMAX applies a softmax transformation to all; * output values (mutually exclusive probability); */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:11,Usability,clear,clear,11,/*! \brief clear the values and the deltas; *; *; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:11,Usability,clear,clear,11,/*! \brief clear the drop-out-data for this layer; *; *; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:28,Deployability,configurat,configuration,28,/*! \brief set the drop-out configuration (layer-wise); *; * \param begin begin of an array or vector denoting the drop-out probabilities for each layer; * \param end end of an array or vector denoting the drop-out probabilities for each layer; * \param _dropRepetitions denotes after how many repetitions the drop-out setting (which nodes are dropped out exactly) is changed; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:28,Modifiability,config,configuration,28,/*! \brief set the drop-out configuration (layer-wise); *; * \param begin begin of an array or vector denoting the drop-out probabilities for each layer; * \param end end of an array or vector denoting the drop-out probabilities for each layer; * \param _dropRepetitions denotes after how many repetitions the drop-out setting (which nodes are dropped out exactly) is changed; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:18,Energy Efficiency,monitor,monitoring,18,"///< prepared for monitoring",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:22,Testability,test,test,22,"///< how often is the test data tested",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:32,Testability,test,tested,32,"///< how often is the test data tested",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:13,Usability,learn,learning,13,"///< get the learning rate",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:2,Availability,error,error,2,/*error*/,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:37,Energy Efficiency,monitor,monitoring,37,"///< virtual function to be used for monitoring (callback)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:18,Energy Efficiency,monitor,monitoring,18,"///< callback for monitoring and logging",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:33,Testability,log,logging,33,"///< callback for monitoring and logging",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:2,Availability,error,error,2,/*error*/,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:18,Energy Efficiency,monitor,monitoring,18,"///< callback for monitoring and logging",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:33,Testability,log,logging,33,"///< callback for monitoring and logging",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:9,Energy Efficiency,monitor,monitoring,9,"///< for monitoring and logging (set the current ""progress"" limits for the display of the progress) \param minProgress minimum value \param maxProgress maximum value",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:24,Testability,log,logging,24,"///< for monitoring and logging (set the current ""progress"" limits for the display of the progress) \param minProgress minimum value \param maxProgress maximum value",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:23,Usability,progress bar,progress bar,23,"///< start drawing the progress bar",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:20,Usability,progress bar,progress bar,20,"///< advance on the progress bar \param progress the new value \param text a label",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:18,Energy Efficiency,monitor,monitoring,18,"///< callback for monitoring and loggging",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:33,Testability,log,loggging,33,"///< callback for monitoring and loggging",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:18,Energy Efficiency,monitor,monitoring,18,"///< callback for monitoring and loggging",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:33,Testability,log,loggging,33,"///< callback for monitoring and loggging",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:18,Energy Efficiency,monitor,monitoring,18,"///< callback for monitoring and loggging",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:33,Testability,log,loggging,33,"///< callback for monitoring and loggging",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:18,Energy Efficiency,monitor,monitoring,18,"///< callback for monitoring and logging",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:33,Testability,log,logging,33,"///< callback for monitoring and logging",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:18,Energy Efficiency,monitor,monitoring,18,"///< callback for monitoring and logging",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:33,Testability,log,logging,33,"///< callback for monitoring and logging",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:21,Energy Efficiency,monitor,monitoring,21,"///< preparation for monitoring",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:9,Energy Efficiency,monitor,monitoring,9,"///< for monitoring",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:9,Energy Efficiency,monitor,monitoring,9,"///< for monitoring",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:9,Energy Efficiency,monitor,monitoring,9,"///< for monitoring",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:9,Energy Efficiency,monitor,monitoring,9,"///< for monitoring",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:9,Energy Efficiency,monitor,monitoring,9,"///< for monitoring",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:9,Energy Efficiency,monitor,monitoring,9,"///< for monitoring",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:9,Energy Efficiency,monitor,monitoring,9,"///< for monitoring",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:26,Availability,error,error,26,"///< returns the smallest error so far",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:15,Energy Efficiency,monitor,monitoring,15,"///< timer for monitoring",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:28,Usability,progress bar,progress bar,28,"///< current limits for the progress bar",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:28,Usability,progress bar,progress bar,28,"///< current limits for the progress bar",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:2,Availability,error,error,2,/*error*/,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:1006,Availability,Error,Error,1006,"/* void createHistograms () */; /* { */; /* std::cout << ""is hist ROC existing?"" << std::endl; */; /* if (m_histROC) */; /* { */; /* std::cout << ""--> yes"" << std::endl; */; /* fMonitoring->ProcessEvents (); */; /* return; */; /* } */; /* std::cout << ""create histograms"" << std::endl; */; /* TCanvas* canvas = fMonitoring->GetCanvas (); */; /* if (canvas) */; /* { */; /* std::cout << ""canvas divide"" << std::endl; */; /* canvas->cd (); */; /* canvas->Divide (2,2); */; /* } */; /* if (!m_histROC) */; /* { */; /* m_histROC = new TH2F (""ROC"",""ROC"", 1000, 0, 1.0, 1000, 0, 1.0); m_histROC->SetDirectory (0); */; /* m_histROC->SetLineColor (kBlue); */; /* } */; /* if (!m_histSignificance) */; /* { */; /* m_histSignificance = new TH2F (""Significance"", ""Significance"", 1000, 0,1.0, 5, 0.0, 2.0); */; /* m_histSignificance->SetDirectory (0); */; /* m_histSignificance->SetBit (TH1::kCanRebin); */; /* m_histROC->SetLineColor (kRed); */; /* } */; /* if (!m_histError) */; /* { */; /* m_histError = new TH1F (""Error"", ""Error"", 100, 0, 100); */; /* m_histError->SetDirectory (0); */; /* m_histError->SetBit (TH1::kCanRebin); */; /* m_histROC->SetLineColor (kGreen); */; /* } */; /* if (!m_histOutputSignal) */; /* { */; /* m_histOutputSignal = new TH1F (""Signal"", ""Signal"", 100, 0, 1.0); */; /* m_histOutputSignal->SetDirectory (0); */; /* m_histOutputSignal->SetBit (TH1::kCanRebin); */; /* } */; /* if (!m_histOutputBackground) */; /* { */; /* m_histOutputBackground = new TH1F (""Background"", ""Background"", 100, 0, 1.0); */; /* m_histOutputBackground->SetDirectory (0); */; /* m_histOutputBackground->SetBit (TH1::kCanRebin); */; /* } */; /* fMonitoring->ProcessEvents (); */; /* } */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:1015,Availability,Error,Error,1015,"/* void createHistograms () */; /* { */; /* std::cout << ""is hist ROC existing?"" << std::endl; */; /* if (m_histROC) */; /* { */; /* std::cout << ""--> yes"" << std::endl; */; /* fMonitoring->ProcessEvents (); */; /* return; */; /* } */; /* std::cout << ""create histograms"" << std::endl; */; /* TCanvas* canvas = fMonitoring->GetCanvas (); */; /* if (canvas) */; /* { */; /* std::cout << ""canvas divide"" << std::endl; */; /* canvas->cd (); */; /* canvas->Divide (2,2); */; /* } */; /* if (!m_histROC) */; /* { */; /* m_histROC = new TH2F (""ROC"",""ROC"", 1000, 0, 1.0, 1000, 0, 1.0); m_histROC->SetDirectory (0); */; /* m_histROC->SetLineColor (kBlue); */; /* } */; /* if (!m_histSignificance) */; /* { */; /* m_histSignificance = new TH2F (""Significance"", ""Significance"", 1000, 0,1.0, 5, 0.0, 2.0); */; /* m_histSignificance->SetDirectory (0); */; /* m_histSignificance->SetBit (TH1::kCanRebin); */; /* m_histROC->SetLineColor (kRed); */; /* } */; /* if (!m_histError) */; /* { */; /* m_histError = new TH1F (""Error"", ""Error"", 100, 0, 100); */; /* m_histError->SetDirectory (0); */; /* m_histError->SetBit (TH1::kCanRebin); */; /* m_histROC->SetLineColor (kGreen); */; /* } */; /* if (!m_histOutputSignal) */; /* { */; /* m_histOutputSignal = new TH1F (""Signal"", ""Signal"", 100, 0, 1.0); */; /* m_histOutputSignal->SetDirectory (0); */; /* m_histOutputSignal->SetBit (TH1::kCanRebin); */; /* } */; /* if (!m_histOutputBackground) */; /* { */; /* m_histOutputBackground = new TH1F (""Background"", ""Background"", 100, 0, 1.0); */; /* m_histOutputBackground->SetDirectory (0); */; /* m_histOutputBackground->SetBit (TH1::kCanRebin); */; /* } */; /* fMonitoring->ProcessEvents (); */; /* } */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:11,Availability,error,error,11,/*! \brief error functions to be chosen from; *; *; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:55,Modifiability,layers,layers,55,/*! \brief neural net; *; * holds the structure of all layers and some data for the whole net; * does not know the layer data though (i.e. values of the nodes and weights); */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:11,Availability,error,error,11,"///< which error function is to be used",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:57,Deployability,configurat,configuration,57,///< output size of the DNN; /*! \brief set the drop out configuration; *; *; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:57,Modifiability,config,configuration,57,///< output size of the DNN; /*! \brief set the drop out configuration; *; *; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:115,Testability,test,testPattern,115,/*! \brief start the training; *; * \param weights weight vector; * \param trainPattern training pattern; * \param testPattern test pattern; * \param minimizer use this minimizer for training (e.g. SGD); * \param settings settings used for this training run; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:127,Testability,test,test,127,/*! \brief start the training; *; * \param weights weight vector; * \param trainPattern training pattern; * \param testPattern test pattern; * \param minimizer use this minimizer for training (e.g. SGD); * \param settings settings used for this training run; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:321,Deployability,configurat,configuration,321,/*! \brief executes one training cycle; *; * \param minimizer the minimizer to be used; * \param weights the weight vector to be used; * \param itPatternBegin the pattern to be trained with; * \param itPatternEnd the pattern to be trained with; * \param settings the settings for the training; * \param dropContainer the configuration for DNN drop-out; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:321,Modifiability,config,configuration,321,/*! \brief executes one training cycle; *; * \param minimizer the minimizer to be used; * \param weights the weight vector to be used; * \param itPatternBegin the pattern to be trained with; * \param itPatternEnd the pattern to be trained with; * \param settings the settings for the training; * \param dropContainer the configuration for DNN drop-out; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:24,Availability,error,error,24,/*! \brief computes the error of the DNN; *; *; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:17,Modifiability,layers,layers,17,"///< returns the layers (structure)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:17,Modifiability,layers,layers,17,"///< returns the layers (structure)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:5,Usability,clear,clear,5,"///< clear one layer",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:17,Availability,error,error,17,"///< denotes the error function",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:3,Modifiability,variab,variables,3,"// variables for JsMVA (interactive training in jupyter notebook)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:29,Modifiability,variab,variables,29,"// setup ipython interactive variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NeuralNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Node.h:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: Node *; * *; * *; * Description: *; * Node for the BinarySearch or Decision Trees *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Node.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Node.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Node.h:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: Node *; * *; * *; * Description: *; * Node for the BinarySearch or Decision Trees *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Node.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Node.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Node.h:3,Testability,test,test,3,"// test event if i{ descends the tree at this node to the right",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Node.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Node.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Node.h:3,Testability,test,test,3,"// test event if it descends the tree at this node to the left",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Node.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Node.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Node.h:3,Testability,test,test,3,"// test event if it is equal to the event that ""makes the node"" (just for the ""search tree""; // return pointer to the left/right daughter or parent node",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Node.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Node.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NodekNN.h:160,Deployability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Rustem Ospanov; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Node *; * *; * *; * Description: *; * kd-tree (binary tree) template *; * *; * Author: *; * Rustem Ospanov <rustem@fnal.gov> - U. of Texas at Austin, USA *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Texas at Austin, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NodekNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NodekNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NodekNN.h:160,Integrability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Rustem Ospanov; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Node *; * *; * *; * Description: *; * kd-tree (binary tree) template *; * *; * Author: *; * Rustem Ospanov <rustem@fnal.gov> - U. of Texas at Austin, USA *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Texas at Austin, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NodekNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NodekNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NodekNN.h:745,Modifiability,variab,variable,745,"/*! \class TMVA::kNN::Node; \ingroup TMVA; This file contains binary tree and global function template; that searches tree for k-nearest neigbors. Node class template parameter T has to provide these functions:; rtype GetVar(UInt_t) const;; - rtype is any type convertible to Float_t; UInt_t GetNVar(void) const;; rtype GetWeight(void) const;; - rtype is any type convertible to Double_t. Find function template parameter T has to provide these functions:; (in addition to above requirements); rtype GetDist(Float_t, UInt_t) const;; - rtype is any type convertible to Float_t; rtype GetDist(const T &) const;; - rtype is any type convertible to Float_t. where T::GetDist(Float_t, UInt_t) <= T::GetDist(const T &); for any pair of events and any variable number for these events; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NodekNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NodekNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NodekNN.h:218,Modifiability,variab,variable,218,"////////////////////////////////////////////////////////////////////////////////; /// This is Node member function that adds a new node to a binary tree.; /// each node contains maximum and minimum values of splitting variable; /// left or right nodes are added based on value of splitting variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NodekNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NodekNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NodekNN.h:290,Modifiability,variab,variable,290,"////////////////////////////////////////////////////////////////////////////////; /// This is Node member function that adds a new node to a binary tree.; /// each node contains maximum and minimum values of splitting variable; /// left or right nodes are added based on value of splitting variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NodekNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NodekNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NodekNN.h:344,Modifiability,variab,variable,344,"////////////////////////////////////////////////////////////////////////////////; /// This is a global templated function that searches for k-nearest neighbors.; /// list contains k or less nodes that are closest to event.; /// only nodes with positive weights are added to list.; /// each node contains maximum and minimum values of splitting variable; /// for all its children - this range is checked to avoid descending into; /// nodes that are definitely outside current minimum neighbourhood.; ///; /// This function should be modified with care.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NodekNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NodekNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NodekNN.h:406,Safety,avoid,avoid,406,"////////////////////////////////////////////////////////////////////////////////; /// This is a global templated function that searches for k-nearest neighbors.; /// list contains k or less nodes that are closest to event.; /// only nodes with positive weights are added to list.; /// each node contains maximum and minimum values of splitting variable; /// for all its children - this range is checked to avoid descending into; /// nodes that are definitely outside current minimum neighbourhood.; ///; /// This function should be modified with care.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NodekNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NodekNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NodekNN.h:43,Integrability,depend,dependent,43,"// need typename keyword because qualified dependent names; // are not valid types unless preceded by 'typename'.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NodekNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NodekNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NodekNN.h:419,Modifiability,variab,variable,419,"////////////////////////////////////////////////////////////////////////////////; /// This is a global templated function that searches for k-nearest neighbors.; /// list contains all nodes that are closest to event; /// and have sum of event weights >= nfind.; /// Only nodes with positive weights are added to list.; /// Requirement for used classes:; /// - each node contains maximum and minimum values of splitting variable; /// for all its children; /// - min and max range is checked to avoid descending into; /// nodes that are definitely outside current minimum neighbourhood.; ///; /// This function should be modified with care.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NodekNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NodekNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NodekNN.h:493,Safety,avoid,avoid,493,"////////////////////////////////////////////////////////////////////////////////; /// This is a global templated function that searches for k-nearest neighbors.; /// list contains all nodes that are closest to event; /// and have sum of event weights >= nfind.; /// Only nodes with positive weights are added to list.; /// Requirement for used classes:; /// - each node contains maximum and minimum values of splitting variable; /// for all its children; /// - min and max range is checked to avoid descending into; /// nodes that are definitely outside current minimum neighbourhood.; ///; /// This function should be modified with care.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NodekNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NodekNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NodekNN.h:43,Integrability,depend,dependent,43,"// need typename keyword because qualified dependent names; // are not valid types unless preceded by 'typename'.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/NodekNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NodekNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/OptimizeConfigParameters.h:110,Deployability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : OptimizeConfigParameters *; * *; * *; * Description: The OptimizeConfigParameters takes care of ""scanning/fitting"" *; * different tuning parameters in order to find the best set of *; * tuning paraemters which will be used in the end *; * *; * Authors (alphabetical): *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://ttmva.sourceforge.net/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/OptimizeConfigParameters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/OptimizeConfigParameters.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/OptimizeConfigParameters.h:110,Integrability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : OptimizeConfigParameters *; * *; * *; * Description: The OptimizeConfigParameters takes care of ""scanning/fitting"" *; * different tuning parameters in order to find the best set of *; * tuning paraemters which will be used in the end *; * *; * Authors (alphabetical): *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://ttmva.sourceforge.net/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/OptimizeConfigParameters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/OptimizeConfigParameters.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/OptimizeConfigParameters.h:192,Performance,Optimiz,OptimizeConfigParameters,192,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : OptimizeConfigParameters *; * *; * *; * Description: The OptimizeConfigParameters takes care of ""scanning/fitting"" *; * different tuning parameters in order to find the best set of *; * tuning paraemters which will be used in the end *; * *; * Authors (alphabetical): *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://ttmva.sourceforge.net/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/OptimizeConfigParameters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/OptimizeConfigParameters.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/OptimizeConfigParameters.h:249,Performance,Optimiz,OptimizeConfigParameters,249,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : OptimizeConfigParameters *; * *; * *; * Description: The OptimizeConfigParameters takes care of ""scanning/fitting"" *; * different tuning parameters in order to find the best set of *; * tuning paraemters which will be used in the end *; * *; * Authors (alphabetical): *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://ttmva.sourceforge.net/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/OptimizeConfigParameters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/OptimizeConfigParameters.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/OptimizeConfigParameters.h:78,Usability,simpl,simpler,78,"// could later be changed to be set via option string...; // but for now it's simpler like this",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/OptimizeConfigParameters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/OptimizeConfigParameters.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/OptimizeConfigParameters.h:6,Integrability,message,message,6,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/OptimizeConfigParameters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/OptimizeConfigParameters.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/OptimizeConfigParameters.h:14,Testability,log,logger,14,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/OptimizeConfigParameters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/OptimizeConfigParameters.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/OptimizeConfigParameters.h:3,Integrability,Interface,Interface,3,"// Interface to different separation criteria used in training algorithms",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/OptimizeConfigParameters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/OptimizeConfigParameters.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Option.h:188,Deployability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Option *; * *; * *; * Description: *; * Option container *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Option.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Option.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Option.h:188,Integrability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Option *; * *; * *; * Description: *; * Option container *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Option.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Option.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Option.h:11,Modifiability,variab,variable,11,"// name of variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Option.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Option.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Option.h:11,Modifiability,variab,variable,11,"// name of variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Option.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Option.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h:206,Deployability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: S. Jadach, Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoam *; * *; * *; * Description: *; * Class for PDEFoam object *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h:206,Integrability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: S. Jadach, Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoam *; * *; * *; * Description: *; * Class for PDEFoam object *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h:108,Availability,error,error,108,"// enum type for possible foam cell values; // kValue : cell value who's rms is minimized; // kValueError : error on kValue; // kValueDensity : kValue / cell volume; // kMeanValue : mean sampling value (saved in fIntegral); // kRms : rms of sampling distribution (saved in fDriver); // kRmsOvMean : rms/mean of sampling distribution (saved in; // fDriver and fIntegral); // kCellVolume : volume of cell",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h:22,Deployability,integrat,integration,22,"///< Dimension of the integration/simulation space",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h:22,Integrability,integrat,integration,22,"///< Dimension of the integration/simulation space",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h:21,Availability,Mask,Mask,21,"///<! [fDim] Dynamic Mask for cell division",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h:86,Modifiability,variab,variables,86,"///< [fDim] Internal parameters of the hyperrectangle; // --------- PDE-Foam specific variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h:24,Modifiability,variab,variable,24,"///< [fDim] minimum for variable transform",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h:24,Modifiability,variab,variable,24,"///< [fDim] maximum for variable transform",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h:40,Modifiability,variab,variables,40,"///< BACKWARDS COMPATIBILITY: number of variables in every cell",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h:69,Testability,log,logic,69,"///< BACKWARDS COMPATIBILITY: split cells according to decision tree logic",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h:23,Modifiability,variab,variable,23,"///< collection of all variable names",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h:6,Integrability,message,message,6,"///<! message logger; /////////////////////////////////////////////////////////////////; // METHODS //; /////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h:14,Testability,log,logger,14,"///<! message logger; /////////////////////////////////////////////////////////////////; // METHODS //; /////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h:3,Energy Efficiency,Allocate,Allocates,3,"// Allocates new empty cell and return its index",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h:68,Security,access,access,68,"// evaluate distribution on point 'xRand'; // ---------- Cell value access functions; // low level functions to access a certain cell value",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h:112,Security,access,access,112,"// evaluate distribution on point 'xRand'; // ---------- Cell value access functions; // low level functions to access a certain cell value",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h:39,Modifiability,variab,variables,39,"// finds cell according to given event variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h:27,Modifiability,variab,variable,27,"// Getters and Setters for variable names",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h:49,Modifiability,variab,variables,49,"// ---------- Transformation functions for event variables into foam boundaries; // reason: foam always has boundaries [0, 1]",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h:35,Integrability,Message,Message,35,"// Prints content of all cells; // Message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h:43,Testability,log,logger,43,"// Prints content of all cells; // Message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h:13,Modifiability,variab,variable,13,"// transform variable x from [xmin, xmax] --> [0, 1]",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h:13,Modifiability,variab,variable,13,"// transform variable x from [0, 1] --> [xmin, xmax]",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamCell.h:206,Deployability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: S. Jadach, Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamCell *; * *; * *; * Description: *; * Objects of this class are hyperrectangular cells organized in *; * the binary tree. Special algoritm for encoding relative *; * positioning of the cells saves total memory allocation needed *; * for the system of cells. *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2008: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamCell.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamCell.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamCell.h:206,Integrability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: S. Jadach, Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamCell *; * *; * *; * Description: *; * Objects of this class are hyperrectangular cells organized in *; * the binary tree. Special algoritm for encoding relative *; * positioning of the cells saves total memory allocation needed *; * for the system of cells. *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2008: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamCell.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamCell.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamCell.h:57,Modifiability,variab,variable,57,"// Prints cell content; //--- getter and setter for user variable ---",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamCell.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamCell.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamCell.h:12,Modifiability,variab,variable,12,"// Set user variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamCell.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamCell.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamCell.h:23,Modifiability,variab,variable,23,"// Get pointer to user variable; ////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamCell.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamCell.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamDecisionTree.h:161,Deployability,integrat,integrated,161,"// @(#)root/tmva $Id$; // Author: Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamDecisionTree *; * *; * *; * Description: *; * Class for decision tree like PDEFoam. It overrides *; * PDEFoam::Explore() to use the decision tree like cell split *; * algorithm, given a specific separation type. *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamDecisionTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamDecisionTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamDecisionTree.h:161,Integrability,integrat,integrated,161,"// @(#)root/tmva $Id$; // Author: Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamDecisionTree *; * *; * *; * Description: *; * Class for decision tree like PDEFoam. It overrides *; * PDEFoam::Explore() to use the decision tree like cell split *; * algorithm, given a specific separation type. *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamDecisionTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamDecisionTree.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamDecisionTreeDensity.h:161,Deployability,integrat,integrated,161,"// @(#)root/tmva $Id$; // Author: Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamDecisionTreeDensity *; * *; * *; * Description: *; * Class PDEFoamDecisionTreeDensity is a class representing *; * n-dimensional real positive integrand function *; * The main function is Density() which provides the event density at a *; * given point during the foam build-up (sampling). *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamDecisionTreeDensity.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamDecisionTreeDensity.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamDecisionTreeDensity.h:161,Integrability,integrat,integrated,161,"// @(#)root/tmva $Id$; // Author: Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamDecisionTreeDensity *; * *; * *; * Description: *; * Class PDEFoamDecisionTreeDensity is a class representing *; * n-dimensional real positive integrand function *; * The main function is Density() which provides the event density at a *; * given point during the foam build-up (sampling). *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamDecisionTreeDensity.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamDecisionTreeDensity.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamDensityBase.h:195,Deployability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamDensityBase *; * *; * *; * Description: *; * Class PDEFoamDensityBase is an Abstract class representing *; * n-dimensional real positive integrand function *; * The main function is Density() which provides the event density at a *; * given point during the foam build-up (sampling). *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamDensityBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamDensityBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamDensityBase.h:195,Integrability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamDensityBase *; * *; * *; * Description: *; * Class PDEFoamDensityBase is an Abstract class representing *; * n-dimensional real positive integrand function *; * The main function is Density() which provides the event density at a *; * given point during the foam build-up (sampling). *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamDensityBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamDensityBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamDensityBase.h:6,Integrability,message,message,6,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamDensityBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamDensityBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamDensityBase.h:14,Testability,log,logger,14,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamDensityBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamDensityBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamDensityBase.h:25,Integrability,interface,interface,25,"// PDEFoam event density interface",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamDensityBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamDensityBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamDiscriminant.h:474,Availability,error,error,474,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamDiscriminant *; * *; * *; * Description: *; * Concrete PDEFoam sub-class. This foam stores the discriminant D *; * = N_sig / (N_bg + N_sig) with every cell, as well as the *; * statistical error on the discriminant. *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamDiscriminant.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamDiscriminant.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamDiscriminant.h:195,Deployability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamDiscriminant *; * *; * *; * Description: *; * Concrete PDEFoam sub-class. This foam stores the discriminant D *; * = N_sig / (N_bg + N_sig) with every cell, as well as the *; * statistical error on the discriminant. *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamDiscriminant.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamDiscriminant.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamDiscriminant.h:195,Integrability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamDiscriminant *; * *; * *; * Description: *; * Concrete PDEFoam sub-class. This foam stores the discriminant D *; * = N_sig / (N_bg + N_sig) with every cell, as well as the *; * statistical error on the discriminant. *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamDiscriminant.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamDiscriminant.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamDiscriminantDensity.h:195,Deployability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamDiscriminantDensity *; * *; * *; * Description: *; * Class PDEFoamDiscriminantDensity is a class representing *; * n-dimensional real positive integrand function *; * The main function is Density() which provides the event density at a *; * given point during the foam build-up (sampling). *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamDiscriminantDensity.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamDiscriminantDensity.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamDiscriminantDensity.h:195,Integrability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamDiscriminantDensity *; * *; * *; * Description: *; * Class PDEFoamDiscriminantDensity is a class representing *; * n-dimensional real positive integrand function *; * The main function is Density() which provides the event density at a *; * given point during the foam build-up (sampling). *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamDiscriminantDensity.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamDiscriminantDensity.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamEvent.h:439,Availability,error,error,439,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamEvent *; * *; * *; * Description: *; * Concrete PDEFoam sub-class. This foam stores the number of *; * events with every cell, as well as the statistical error on *; * the event number. *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamEvent.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamEvent.h:195,Deployability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamEvent *; * *; * *; * Description: *; * Concrete PDEFoam sub-class. This foam stores the number of *; * events with every cell, as well as the statistical error on *; * the event number. *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamEvent.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamEvent.h:195,Integrability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamEvent *; * *; * *; * Description: *; * Concrete PDEFoam sub-class. This foam stores the number of *; * events with every cell, as well as the statistical error on *; * the event number. *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamEvent.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamEventDensity.h:195,Deployability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamEventDensity *; * *; * *; * Description: *; * Class PDEFoamEventDensity is a class representing *; * n-dimensional real positive integrand function *; * The main function is Density() which provides the event density at a *; * given point during the foam build-up (sampling). *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamEventDensity.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamEventDensity.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamEventDensity.h:195,Integrability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamEventDensity *; * *; * *; * Description: *; * Class PDEFoamEventDensity is a class representing *; * n-dimensional real positive integrand function *; * The main function is Density() which provides the event density at a *; * given point during the foam build-up (sampling). *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamEventDensity.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamEventDensity.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamKernelBase.h:179,Deployability,integrat,integrated,179,"// @(#)root/tmva $Id$; // Author: Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamKernelBase *; * *; * *; * Description: *; * PDEFoam kernel interface *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamKernelBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamKernelBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamKernelBase.h:179,Integrability,integrat,integrated,179,"// @(#)root/tmva $Id$; // Author: Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamKernelBase *; * *; * *; * Description: *; * PDEFoam kernel interface *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamKernelBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamKernelBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamKernelBase.h:328,Integrability,interface,interface,328,"// @(#)root/tmva $Id$; // Author: Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamKernelBase *; * *; * *; * Description: *; * PDEFoam kernel interface *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamKernelBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamKernelBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamKernelBase.h:4,Integrability,message,message,4,"//! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamKernelBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamKernelBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamKernelBase.h:12,Testability,log,logger,12,"//! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamKernelBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamKernelBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamKernelBase.h:3,Integrability,Message,Message,3,"// Message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamKernelBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamKernelBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamKernelBase.h:11,Testability,log,logger,11,"// Message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamKernelBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamKernelBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamKernelBase.h:18,Integrability,interface,interface,18,"// PDEFoam kernel interface",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamKernelBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamKernelBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamKernelGauss.h:179,Deployability,integrat,integrated,179,"// @(#)root/tmva $Id$; // Author: Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamKernelGauss *; * *; * *; * Description: *; * PDEFoam kernel, which weights all cell values by a gauss function. *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamKernelGauss.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamKernelGauss.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamKernelGauss.h:179,Integrability,integrat,integrated,179,"// @(#)root/tmva $Id$; // Author: Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamKernelGauss *; * *; * *; * Description: *; * PDEFoam kernel, which weights all cell values by a gauss function. *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamKernelGauss.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamKernelGauss.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamKernelLinN.h:179,Deployability,integrat,integrated,179,"// @(#)root/tmva $Id$; // Author: Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamKernelLinN *; * *; * *; * Description: *; * PDEFoam kernel, which linear weights with the neighbor cells. *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamKernelLinN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamKernelLinN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamKernelLinN.h:179,Integrability,integrat,integrated,179,"// @(#)root/tmva $Id$; // Author: Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamKernelLinN *; * *; * *; * Description: *; * PDEFoam kernel, which linear weights with the neighbor cells. *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamKernelLinN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamKernelLinN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamKernelTrivial.h:179,Deployability,integrat,integrated,179,"// @(#)root/tmva $Id$; // Author: Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamKernelTrivial *; * *; * *; * Description: *; * Trivial PDEFoam kernel *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamKernelTrivial.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamKernelTrivial.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamKernelTrivial.h:179,Integrability,integrat,integrated,179,"// @(#)root/tmva $Id$; // Author: Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamKernelTrivial *; * *; * *; * Description: *; * Trivial PDEFoam kernel *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamKernelTrivial.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamKernelTrivial.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamMultiTarget.h:450,Availability,error,error,450,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamMultiTarget *; * *; * *; * Description: *; * Concrete PDEFoamEvent sub-class. This foam stores the number *; * of events with every cell, as well as the statistical error on *; * the event number. It overrides GetCellValue() for projecting *; * the target values given an incomplete event map with *; * N_variables < dimension of foam. *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamMultiTarget.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamMultiTarget.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamMultiTarget.h:195,Deployability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamMultiTarget *; * *; * *; * Description: *; * Concrete PDEFoamEvent sub-class. This foam stores the number *; * of events with every cell, as well as the statistical error on *; * the event number. It overrides GetCellValue() for projecting *; * the target values given an incomplete event map with *; * N_variables < dimension of foam. *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamMultiTarget.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamMultiTarget.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamMultiTarget.h:195,Integrability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamMultiTarget *; * *; * *; * Description: *; * Concrete PDEFoamEvent sub-class. This foam stores the number *; * of events with every cell, as well as the statistical error on *; * the event number. It overrides GetCellValue() for projecting *; * the target values given an incomplete event map with *; * N_variables < dimension of foam. *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamMultiTarget.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamMultiTarget.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamTarget.h:446,Availability,error,error,446,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamTarget *; * *; * *; * Description: *; * Concrete PDEFoam sub-class. This foam stores the first target *; * (index 0) with every cell, as well as the statistical error on *; * the target. *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamTarget.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamTarget.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamTarget.h:195,Deployability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamTarget *; * *; * *; * Description: *; * Concrete PDEFoam sub-class. This foam stores the first target *; * (index 0) with every cell, as well as the statistical error on *; * the target. *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamTarget.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamTarget.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamTarget.h:195,Integrability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamTarget *; * *; * *; * Description: *; * Concrete PDEFoam sub-class. This foam stores the first target *; * (index 0) with every cell, as well as the statistical error on *; * the target. *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamTarget.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamTarget.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamTargetDensity.h:195,Deployability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamTargetDensity *; * *; * *; * Description: *; * Class PDEFoamTargetDensity is a class representing *; * n-dimensional real positive integrand function *; * The main function is Density() which provides the event density at a *; * given point during the foam build-up (sampling). *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamTargetDensity.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamTargetDensity.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamTargetDensity.h:195,Integrability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamTargetDensity *; * *; * *; * Description: *; * Class PDEFoamTargetDensity is a class representing *; * n-dimensional real positive integrand function *; * The main function is Density() which provides the event density at a *; * given point during the foam build-up (sampling). *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamTargetDensity.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamTargetDensity.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamVect.h:206,Deployability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: S. Jadach, Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamVect *; * *; * *; * Description: *; * Auxiliary class PDEFoamVect of n-dimensional vector, with dynamic *; * allocation used for the cartesian geometry of the PDEFoam cells *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2008: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamVect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamVect.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamVect.h:206,Integrability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: S. Jadach, Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamVect *; * *; * *; * Description: *; * Auxiliary class PDEFoamVect of n-dimensional vector, with dynamic *; * allocation used for the cartesian geometry of the PDEFoam cells *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2008: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamVect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamVect.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamVect.h:3,Performance,LOAD,LOAD,3,"// LOAD IN entire double vector",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamVect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamVect.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamVect.h:3,Performance,LOAD,LOAD,3,"// LOAD IN double number; ////////////////////////// OTHER METHODS //////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDEFoamVect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamVect.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h:228,Deployability,integrat,integrated,228,"// @(#)root/tmva $Id$; // Author: Asen Christov, Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss , Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : PDF *; * *; * *; * Description: *; * PDF wrapper for histograms; uses user-defined spline interpolation *; * and kernel density estimation *; * *; * Authors (alphabetical): *; * Asen Christov <christov@physik.uni-freiburg.de> - Freiburg U., Germany *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * Freiburg U., Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h:228,Integrability,integrat,integrated,228,"// @(#)root/tmva $Id$; // Author: Asen Christov, Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss , Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : PDF *; * *; * *; * Description: *; * PDF wrapper for histograms; uses user-defined spline interpolation *; * and kernel density estimation *; * *; * Authors (alphabetical): *; * Asen Christov <christov@physik.uni-freiburg.de> - Freiburg U., Germany *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * Freiburg U., Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h:351,Integrability,wrap,wrapper,351,"// @(#)root/tmva $Id$; // Author: Asen Christov, Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss , Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : PDF *; * *; * *; * Description: *; * PDF wrapper for histograms; uses user-defined spline interpolation *; * and kernel density estimation *; * *; * Authors (alphabetical): *; * Asen Christov <christov@physik.uni-freiburg.de> - Freiburg U., Germany *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * Freiburg U., Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h:108,Integrability,wrap,wrapper,108,"//////////////////////////////////////////////////////////////////////////; // //; // PDF //; // //; // PDF wrapper for histograms; uses user-defined spline interpolation //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h:3,Security,access,accessors,3,"// accessors",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h:3,Performance,perform,perform,3,"// perform series of validation tests",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h:21,Security,validat,validation,21,"// perform series of validation tests",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h:32,Testability,test,tests,32,"// perform series of validation tests",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h:3,Safety,sanity check,sanity check,3,"// sanity check of PDF quality (after smoothing): comparison with; // original histogram",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h:167,Modifiability,variab,variables,167,"// flag that indicates that no splines are produced and no smoothing; // is applied, i.e., the original histogram is used as reference; // this is useful for discrete variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h:50,Deployability,configurat,configuration,50,"// spline0 uses histogram as reference; // static configuration variables ----------------------------; // to increase computation speed, the final PDF is filled in; // a high-binned histogram; ""GetValue"" then returns the histogram; // entry, linearized between adjacent bins",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h:50,Modifiability,config,configuration,50,"// spline0 uses histogram as reference; // static configuration variables ----------------------------; // to increase computation speed, the final PDF is filled in; // a high-binned histogram; ""GetValue"" then returns the histogram; // entry, linearized between adjacent bins",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h:64,Modifiability,variab,variables,64,"// spline0 uses histogram as reference; // static configuration variables ----------------------------; // to increase computation speed, the final PDF is filled in; // a high-binned histogram; ""GetValue"" then returns the histogram; // entry, linearized between adjacent bins",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h:12,Deployability,integrat,integration,12,"///< manual integration (sum over bins) or DGAUSS",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h:12,Integrability,integrat,integration,12,"///< manual integration (sum over bins) or DGAUSS",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h:5,Deployability,integrat,integration,5,"///< integration interface",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h:5,Integrability,integrat,integration,5,"///< integration interface",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h:17,Integrability,interface,interface,17,"///< integration interface",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h:27,Energy Efficiency,adapt,adaptive,27,"///< Number of iterations (adaptive or not)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h:27,Modifiability,adapt,adaptive,27,"///< Number of iterations (adaptive or not)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h:28,Energy Efficiency,Adapt,Adaptive,28,"///< fine tuning factor for Adaptive KDE",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h:28,Modifiability,Adapt,Adaptive,28,"///< fine tuning factor for Adaptive KDE",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h:6,Integrability,message,message,6,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h:14,Testability,log,logger,14,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h:7,Integrability,wrap,wrapper,7,"// PDF wrapper for histograms",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/PDF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/QuickMVAProbEstimator.h:3,Integrability,Interface,Interface,3,"// Interface to different separation criteria used in training algorithms",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/QuickMVAProbEstimator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/QuickMVAProbEstimator.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Ranking.h:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Ranking *; * *; * *; * Description: *; * Virtual ranking class *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Ranking.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Ranking.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Ranking.h:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Ranking *; * *; * *; * Description: *; * Virtual ranking class *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Ranking.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Ranking.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Ranking.h:6,Integrability,message,message,6,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Ranking.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Ranking.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Ranking.h:14,Testability,log,logger,14,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Ranking.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Ranking.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Ranking.h:37,Modifiability,variab,variables,37,"// Method-specific ranking for input variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Ranking.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Ranking.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Ranking.h:7,Modifiability,variab,variable,7,"// the variable name",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Ranking.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Ranking.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx:20,Performance,load,load,20,"// Create tensor to load the chunk into",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBatchGenerator.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx:27,Performance,load,loading,27,"/// \brief De-activate the loading process by deactivating the batchgenerator; /// and joining the loading thread",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBatchGenerator.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx:99,Performance,load,loading,99,"/// \brief De-activate the loading process by deactivating the batchgenerator; /// and joining the loading thread",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBatchGenerator.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx:24,Performance,load,loading,24,"/// \brief Activate the loading process by starting the batchloader, and; /// spawning the loading thread.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBatchGenerator.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx:91,Performance,load,loading,91,"/// \brief Activate the loading process by starting the batchloader, and; /// spawning the loading thread.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBatchGenerator.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx:54,Availability,avail,available,54,"/// \brief Returns the next batch of training data if available.; /// Returns empty RTensor otherwise.; /// \return",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBatchGenerator.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx:21,Availability,avail,available,21,"// Get next batch if available",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBatchGenerator.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx:56,Availability,avail,available,56,"/// \brief Returns the next batch of validation data if available.; /// Returns empty RTensor otherwise.; /// \return",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBatchGenerator.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx:37,Security,validat,validation,37,"/// \brief Returns the next batch of validation data if available.; /// Returns empty RTensor otherwise.; /// \return",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBatchGenerator.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx:21,Availability,avail,available,21,"// Get next batch if available",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBatchGenerator.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx:26,Performance,load,loading,26,"// stop the loop when the loading is not active anymore",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBatchGenerator.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx:64,Performance,load,loading,64,"// A pair that consists the proccessed, and passed events while loading the chunk",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBatchGenerator.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx:8,Performance,load,loading,8,"// Stop loading if the number of processed events is smaller than the desired chunk size",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBatchGenerator.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx:71,Security,validat,validations,71,"// Check if the indices in this chunk where already split in train and validations",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBatchGenerator.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx:14,Security,Validat,Validation,14,"// Create the Validation batches if this is not the first epoch",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBatchGenerator.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx:53,Security,validat,validation,53,"/// \brief plit the events of the current chunk into validation and training events; /// \param processedEvents",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBatchGenerator.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx:43,Security,validat,validation,43,"// calculate the number of events used for validation",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBatchGenerator.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx:39,Security,validat,validation,39,"// Devide the vector into training and validation",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBatchGenerator.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchLoader.hxx:39,Security,validat,validation,39,"/// \brief Returns a batch of data for validation; /// The owner of this batch has to be with the RBatchLoader.; /// This is because the same validation batches should be used in all epochs.; /// \return Validation batch",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBatchLoader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchLoader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchLoader.hxx:142,Security,validat,validation,142,"/// \brief Returns a batch of data for validation; /// The owner of this batch has to be with the RBatchLoader.; /// This is because the same validation batches should be used in all epochs.; /// \return Validation batch",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBatchLoader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchLoader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchLoader.hxx:204,Security,Validat,Validation,204,"/// \brief Returns a batch of data for validation; /// The owner of this batch has to be with the RBatchLoader.; /// This is because the same validation batches should be used in all epochs.; /// \return Validation batch",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBatchLoader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchLoader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchLoader.hxx:53,Availability,avail,available,53,"/// \brief Checks if there are more training batches available; /// \return",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBatchLoader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchLoader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchLoader.hxx:53,Availability,avail,available,53,"/// \brief Checks if there are more training batches available; /// \return",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBatchLoader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchLoader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchLoader.hxx:139,Performance,load,loaded,139,"/// \brief DeActivate the batchloader. This means that no more batches are created.; /// Batches can still be returned if they are already loaded",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBatchLoader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchLoader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchLoader.hxx:136,Performance,queue,queue,136,"/// \brief Create training batches from the given chunk of data based on the given event indices; /// Batches are added to the training queue of batches; /// The eventIndices can be shuffled to ensure random order for each epoch; /// \param chunkTensor; /// \param eventIndices; /// \param shuffle",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBatchLoader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchLoader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchLoader.hxx:59,Performance,queue,queue,59,"// Wait until less than a full chunk of batches are in the queue before loading splitting the next chunk into; // batches",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBatchLoader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchLoader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchLoader.hxx:72,Performance,load,loading,72,"// Wait until less than a full chunk of batches are in the queue before loading splitting the next chunk into; // batches",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBatchLoader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchLoader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchLoader.hxx:18,Security,validat,validation,18,"/// \brief Create validation batches from the given chunk based on the given event indices; /// Batches are added to the vector of validation batches; /// \param chunkTensor; /// \param eventIndices",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBatchLoader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchLoader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchLoader.hxx:131,Security,validat,validation,131,"/// \brief Create validation batches from the given chunk based on the given event indices; /// Batches are added to the vector of validation batches; /// \param chunkTensor; /// \param eventIndices",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBatchLoader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchLoader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchLoader.hxx:21,Security,validat,validation,21,"/// \brief Reset the validation process",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBatchLoader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchLoader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBDT.hxx:110,Deployability,integrat,integrated,110,"/**********************************************************************************; * Project: ROOT - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * *; * *; * Description: *; * *; * Authors: *; * Stefan Wunsch (stefan.wunsch@cern.ch) *; * Jonas Rembser (jonas.rembser@cern.ch) *; * *; * Copyright (c) 2024: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBDT.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBDT.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBDT.hxx:110,Integrability,integrat,integrated,110,"/**********************************************************************************; * Project: ROOT - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * *; * *; * Description: *; * *; * Authors: *; * Stefan Wunsch (stefan.wunsch@cern.ch) *; * Jonas Rembser (jonas.rembser@cern.ch) *; * *; * Copyright (c) 2024: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBDT.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBDT.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBDT.hxx:41,Performance,Load,LoadText,41,"/// IO constructor (both for ROOT IO and LoadText()).",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBDT.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBDT.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBDT.hxx:18,Safety,predict,prediction,18,"/// Compute model prediction on a single event.; ///; /// The method is intended to be used with std::vectors-like containers,; /// for example RVecs.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBDT.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBDT.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBDT.hxx:18,Safety,predict,prediction,18,"/// Compute model prediction on a single event.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RBDT.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBDT.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RChunkLoader.hxx:30,Performance,load,load,30,"// RChunkLoader class used to load content of a RDataFrame onto a RTensor.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RChunkLoader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RChunkLoader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RChunkLoader.hxx:11,Performance,Load,Load,11,"/// \brief Load the final given value into fChunkTensor; /// \tparam First_T; /// \param first",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RChunkLoader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RChunkLoader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RChunkLoader.hxx:11,Performance,Load,Load,11,"/// \brief Load the final given value into fChunkTensor; /// \tparam VecType; /// \param first",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RChunkLoader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RChunkLoader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RChunkLoader.hxx:58,Performance,load,load,58,"/// \brief Recursively loop through the given values, and load them onto the fChunkTensor; /// \tparam First_T; /// \tparam ...Rest_T; /// \param first; /// \param ...rest",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RChunkLoader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RChunkLoader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RChunkLoader.hxx:58,Performance,load,load,58,"/// \brief Recursively loop through the given values, and load them onto the fChunkTensor; /// \tparam VecType; /// \tparam ...Rest_T; /// \param first; /// \param ...rest",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RChunkLoader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RChunkLoader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RChunkLoader.hxx:57,Performance,load,load,57,"/// \brief Loop through the values of a given vector and load them into the RTensor; /// Note: the given vec_size does not have to be the same size as the given vector; /// If the size is bigger than the given vector, zeros are used as padding.; /// If the size is smaller, the remaining values are ignored.; /// \tparam VecType; /// \param vec",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RChunkLoader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RChunkLoader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RChunkLoader.hxx:11,Performance,Load,Load,11,"/// \brief Load a chunk of data using the RChunkLoaderFunctor; /// \param chunkTensor; /// \param currentRow; /// \return A pair of size_t defining the number of events processed and how many passed all filters",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RChunkLoader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RChunkLoader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RChunkLoader.hxx:3,Performance,Load,Load,3,"// Load events if filters are given",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RChunkLoader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RChunkLoader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RChunkLoader.hxx:3,Performance,load,load,3,"// load events if no filters are given",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RChunkLoader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RChunkLoader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RChunkLoader.hxx:45,Performance,load,load,45,"/// \brief Add filters to the RDataFrame and load a chunk of data; /// \param x_rdf; /// \param func; /// \return A pair of size_t defining the number of events processed and how many passed all filters",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RChunkLoader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RChunkLoader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RChunkLoader.hxx:3,Performance,load,load,3,"// load data",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RChunkLoader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RChunkLoader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RChunkLoader.hxx:124,Performance,load,loaded,124,"/// \brief Loop over the events in the dataframe untill either the end of the dataframe; /// is reached, or a full chunk is loaded; /// \param x_rdf; /// \param func; /// \return A pair of size_t defining the number of events processed and how many passed all filters",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RChunkLoader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RChunkLoader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RChunkLoader.hxx:3,Performance,load,load,3,"// load data",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RChunkLoader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RChunkLoader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RChunkLoader.hxx:7,Performance,load,loading,7,"// get loading info",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RChunkLoader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RChunkLoader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Reader.h:250,Deployability,integrat,integrated,250,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Reader *; * *; * *; * Description: *; * Reader class to be used in the user application to interpret the trained *; * MVAs in an analysis context *; * *; * Authors (alphabetical order): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Reader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Reader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Reader.h:250,Integrability,integrat,integrated,250,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Reader *; * *; * *; * Description: *; * Reader class to be used in the user application to interpret the trained *; * MVAs in an analysis context *; * *; * Authors (alphabetical order): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Reader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Reader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Reader.h:34,Modifiability,variab,variables,34,"// without prior specification of variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Reader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Reader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Reader.h:11,Availability,error,error,11,"// returns error on MVA response for given event; // NOTE: must be called AFTER ""EvaluateMVA(...)"" call !",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Reader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Reader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Reader.h:26,Security,access,accessors,26,"// probability and rarity accessors (see Users Guide for definition of Rarity)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Reader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Reader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Reader.h:47,Usability,Guid,Guide,47,"// probability and rarity accessors (see Users Guide for definition of Rarity)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Reader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Reader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Reader.h:3,Security,access,accessors,3,"// accessors",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Reader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Reader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Reader.h:51,Modifiability,variab,variable,51,"// Decode Constructor string (or TString) and fill variable name std::vector",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Reader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Reader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Reader.h:5,Availability,error,error,5,"///< error calculation mode",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Reader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Reader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Reader.h:15,Availability,error,error,15,"///< per-event error returned by MVA",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Reader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Reader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Reader.h:15,Availability,error,error,15,"///< per-event error returned by MVA",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Reader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Reader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Reader.h:6,Integrability,message,message,6,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Reader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Reader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Reader.h:14,Testability,log,logger,14,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Reader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Reader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RegressionVariance.h:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RegressionVariance *; * *; * *; * Description: Calculate the separation criteria used in regression *; * *; * There are two things: the Separation Index, and the Separation Gain *; * Separation Index: *; * Measure of the ""Variance"" of a sample. *; * *; * Separation Gain: *; * the measure of how the quality of separation of the sample increases *; * by splitting the sample e.g. into a ""left-node"" and a ""right-node"" *; * (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right) *; * this is then the quality criteria which is optimized for when trying *; * to increase the information in the system (making the best selection *; * *; * *; * Authors (alphabetical): *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RegressionVariance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RegressionVariance.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RegressionVariance.h:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RegressionVariance *; * *; * *; * Description: Calculate the separation criteria used in regression *; * *; * There are two things: the Separation Index, and the Separation Gain *; * Separation Index: *; * Measure of the ""Variance"" of a sample. *; * *; * Separation Gain: *; * the measure of how the quality of separation of the sample increases *; * by splitting the sample e.g. into a ""left-node"" and a ""right-node"" *; * (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right) *; * this is then the quality criteria which is optimized for when trying *; * to increase the information in the system (making the best selection *; * *; * *; * Authors (alphabetical): *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RegressionVariance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RegressionVariance.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RegressionVariance.h:820,Performance,optimiz,optimized,820,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RegressionVariance *; * *; * *; * Description: Calculate the separation criteria used in regression *; * *; * There are two things: the Separation Index, and the Separation Gain *; * Separation Index: *; * Measure of the ""Variance"" of a sample. *; * *; * Separation Gain: *; * the measure of how the quality of separation of the sample increases *; * by splitting the sample e.g. into a ""left-node"" and a ""right-node"" *; * (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right) *; * this is then the quality criteria which is optimized for when trying *; * to increase the information in the system (making the best selection *; * *; * *; * Authors (alphabetical): *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RegressionVariance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RegressionVariance.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RegressionVariance.h:697,Performance,optimiz,optimized,697,"//////////////////////////////////////////////////////////////////////////; // //; // RegressionVariance //; // //; // Calculate the ""SeparationGain"" for Regression analysis //; // separation criteria used in various training algorithms //; // //; // There are two things: the Separation Index, and the Separation Gain //; // Separation Index: //; // Measure of the ""Variance"" of a sample. //; // //; // Separation Gain: //; // the measure of how the quality of separation of the sample increases //; // by splitting the sample e.g. into a ""left-node"" and a ""right-node"" //; // (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right) //; // this is then the quality criteria which is optimized for when trying //; // to increase the information in the system (making the best selection //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RegressionVariance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RegressionVariance.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RegressionVariance.h:3,Integrability,Interface,Interface,3,"// Interface to different separation criteria used in training algorithms",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RegressionVariance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RegressionVariance.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Results.h:206,Deployability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Results *; * *; * *; * Description: *; * Base-class for result-vectors *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Results.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Results.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Results.h:206,Integrability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Results *; * *; * *; * Description: *; * Base-class for result-vectors *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Results.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Results.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Results.h:3,Testability,test,test,3,"// test",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Results.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Results.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Results.h:30,Security,access,access,30,"///<-> internal map for quick access to stored histograms",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Results.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Results.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Results.h:6,Integrability,message,message,6,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Results.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Results.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Results.h:14,Testability,log,logger,14,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Results.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Results.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ResultsClassification.h:206,Deployability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : ResultsClassification *; * *; * *; * Description: *; * Derived-class for result-vectors *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ResultsClassification.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ResultsClassification.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ResultsClassification.h:206,Integrability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : ResultsClassification *; * *; * *; * Description: *; * Derived-class for result-vectors *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ResultsClassification.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ResultsClassification.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ResultsClassification.h:6,Integrability,message,message,6,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ResultsClassification.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ResultsClassification.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ResultsClassification.h:14,Testability,log,logger,14,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ResultsClassification.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ResultsClassification.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ResultsMulticlass.h:220,Deployability,integrat,integrated,220,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : ResultsMulticlass *; * *; * *; * Description: *; * Derived-class for result-vectors *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ResultsMulticlass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ResultsMulticlass.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ResultsMulticlass.h:220,Integrability,integrat,integrated,220,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : ResultsMulticlass *; * *; * *; * Description: *; * Derived-class for result-vectors *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ResultsMulticlass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ResultsMulticlass.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ResultsMulticlass.h:6,Integrability,message,message,6,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ResultsMulticlass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ResultsMulticlass.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ResultsMulticlass.h:14,Testability,log,logger,14,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ResultsMulticlass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ResultsMulticlass.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ResultsRegression.h:206,Deployability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : ResultsRegression *; * *; * *; * Description: *; * Derived-class for result-vectors *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ResultsRegression.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ResultsRegression.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ResultsRegression.h:206,Integrability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : ResultsRegression *; * *; * *; * Description: *; * Derived-class for result-vectors *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ResultsRegression.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ResultsRegression.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ResultsRegression.h:6,Integrability,message,message,6,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ResultsRegression.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ResultsRegression.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ResultsRegression.h:14,Testability,log,logger,14,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ResultsRegression.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ResultsRegression.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ROCCalc.h:25,Availability,error,error,25,"//false if is found some error in mvaS or mvaB",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ROCCalc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ROCCalc.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ROCCalc.h:14,Availability,toler,tolerance,14,"///< absolute tolerance deviation",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ROCCalc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ROCCalc.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ROCCalc.h:28,Availability,error,error,28,"///< false if is found some error in mvaS or mvaB",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ROCCalc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ROCCalc.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ROCCalc.h:38,Availability,error,error,38,"///< number of signal events (used in error calculation)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ROCCalc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ROCCalc.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ROCCalc.h:4,Integrability,message,message,4,"//! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ROCCalc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ROCCalc.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ROCCalc.h:12,Testability,log,logger,12,"//! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ROCCalc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ROCCalc.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ROCCurve.h:205,Deployability,integrat,integrated,205,"// @(#)root/tmva $Id$; // Author: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer, Kim Albertsson; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : ROCCurve *; * *; * Description: *; * This is class to compute ROC Integral (AUC) *; * *; * Authors : *; * Omar Zapata <Omar.Zapata@cern.ch> - UdeA/ITM Colombia *; * Lorenzo Moneta <Lorenzo.Moneta@cern.ch> - CERN, Switzerland *; * Sergei Gleyzer <Sergei.Gleyzer@cern.ch> - U of Florida & CERN *; * Kim Albertsson <kim.albertsson@cern.ch> - LTU & CERN *; * *; * Copyright (c) 2015: *; * CERN, Switzerland *; * UdeA/ITM, Colombia *; * U. of Florida, USA *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ROCCurve.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ROCCurve.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ROCCurve.h:205,Integrability,integrat,integrated,205,"// @(#)root/tmva $Id$; // Author: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer, Kim Albertsson; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : ROCCurve *; * *; * Description: *; * This is class to compute ROC Integral (AUC) *; * *; * Authors : *; * Omar Zapata <Omar.Zapata@cern.ch> - UdeA/ITM Colombia *; * Lorenzo Moneta <Lorenzo.Moneta@cern.ch> - CERN, Switzerland *; * Sergei Gleyzer <Sergei.Gleyzer@cern.ch> - U of Florida & CERN *; * Kim Albertsson <kim.albertsson@cern.ch> - LTU & CERN *; * *; * Copyright (c) 2015: *; * CERN, Switzerland *; * UdeA/ITM, Colombia *; * U. of Florida, USA *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ROCCurve.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ROCCurve.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ROCCurve.h:6,Integrability,message,message,6,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ROCCurve.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ROCCurve.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ROCCurve.h:14,Testability,log,logger,14,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/ROCCurve.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ROCCurve.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RootFinder.h:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RootFinder *; * *; * *; * Description: *; * Root finding using Brents algorithm *; * (translated from CERNLIB function RZERO) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RootFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RootFinder.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RootFinder.h:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RootFinder *; * *; * *; * Description: *; * Root finding using Brents algorithm *; * (translated from CERNLIB function RZERO) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RootFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RootFinder.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RootFinder.h:14,Availability,toler,tolerance,14,"///< absolute tolerance deviation; // Methods pointer",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RootFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RootFinder.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RootFinder.h:6,Integrability,message,message,6,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RootFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RootFinder.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RootFinder.h:14,Testability,log,logger,14,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RootFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RootFinder.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx:54,Modifiability,config,config,54,"/// Container for information extracted from TMVA XML config",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RReader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx:19,Modifiability,config,config,19,"/// Parse TMVA XML config",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RReader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx:18,Modifiability,variab,variables,18,"// Read out input variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RReader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx:3,Availability,Error,Error-handling,3,"// Error-handling",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RReader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx:69,Integrability,interface,interface,69,"// namespace Internal; /// A replacement for the TMVA::Reader legacy interface.; /// Performs inference for TMVA models stored as XML files.; /// For neural network inference consider using [SOFIE](https://github.com/root-project/root/blob/master/tmva/sofie/README.md) instead.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RReader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx:85,Performance,Perform,Performs,85,"// namespace Internal; /// A replacement for the TMVA::Reader legacy interface.; /// Performs inference for TMVA models stored as XML files.; /// For neural network inference consider using [SOFIE](https://github.com/root-project/root/blob/master/tmva/sofie/README.md) instead.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RReader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx:8,Modifiability,config,config,8,"// Load config",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RReader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx:3,Performance,Load,Load,3,"// Load config",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RReader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx:18,Safety,predict,prediction,18,"/// Compute model prediction on vector",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RReader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx:9,Availability,error,error,9,"// Throw error",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RReader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx:18,Safety,predict,prediction,18,"/// Compute model prediction on input RTensor",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RReader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx:3,Availability,Error,Error-handling,3,"// Error-handling for input tensor",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RReader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx:27,Modifiability,variab,variables,27,"// number of non-spectator variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RReader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RSofieReader.hxx:110,Deployability,integrat,integrated,110,"/**********************************************************************************; * Project: ROOT - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA * *; * *; * Description: *; * *; * Authors: *; * Lorenzo Moneta *; * *; * Copyright (c) 2022: *; * CERN, Switzerland *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RSofieReader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RSofieReader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RSofieReader.hxx:110,Integrability,integrat,integrated,110,"/**********************************************************************************; * Project: ROOT - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA * *; * *; * Description: *; * *; * Authors: *; * Lorenzo Moneta *; * *; * Copyright (c) 2022: *; * CERN, Switzerland *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RSofieReader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RSofieReader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RSofieReader.hxx:140,Performance,perform,performing,140,"/// TMVA::RSofieReader class for reading external Machine Learning models; /// in ONNX files, Keras .h5 files or PyTorch .pt files; /// and performing the inference using SOFIE; /// It is reccomended to use ONNX if possible since there is a larger support for; /// model operators.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RSofieReader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RSofieReader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RSofieReader.hxx:58,Usability,Learn,Learning,58,"/// TMVA::RSofieReader class for reading external Machine Learning models; /// in ONNX files, Keras .h5 files or PyTorch .pt files; /// and performing the inference using SOFIE; /// It is reccomended to use ONNX if possible since there is a larger support for; /// model operators.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RSofieReader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RSofieReader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RSofieReader.hxx:40,Performance,load,loading,40,"/// Dummy constructor which needs model loading afterwards",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RSofieReader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RSofieReader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RSofieReader.hxx:104,Safety,avoid,avoid,104,"// create code for parsing model and generate C++ code for inference; // make it in a separate scope to avoid polluting global interpreter space",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RSofieReader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RSofieReader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RSofieReader.hxx:25,Performance,load,load,25,"// check first if we can load the SOFIE parser library",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RSofieReader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RSofieReader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RSofieReader.hxx:18,Safety,predict,prediction,18,"/// Compute model prediction on vector",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RSofieReader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RSofieReader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RSofieReader.hxx:18,Safety,predict,prediction,18,"/// Compute model prediction on input RTensor; /// The shape of the input tensor should be {nevents, nfeatures}; /// and the return shape will be {nevents, noutputs}; /// support for now only a single input",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RSofieReader.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RSofieReader.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx:351,Security,access,accessed,351,"// namespace TMVA::Experimental::Internal; /// \class TMVA::Experimental::RTensor; /// \brief RTensor is a container with contiguous memory and shape information.; /// \tparam T Data-type of the tensor; ///; /// An RTensor is a vector-like container, which has additional shape information.; /// The elements of the multi-dimensional container can be accessed by their; /// indices in a coherent way without taking care about the one-dimensional memory; /// layout of the contiguous storage. This also allows to manipulate the shape; /// of the container without moving the actual elements in memory. Another feature; /// is that an RTensor can own the underlying contiguous memory but can also represent; /// only a view on existing data without owning it.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RTensor.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx:68,Integrability,interface,interface,68,"// TODO: Document how data pointer is determined using STL iterator interface.; // TODO: Sanitize given container type with type traits",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RTensor.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx:89,Security,Sanitiz,Sanitize,89,"// TODO: Document how data pointer is determined using STL iterator interface.; // TODO: Sanitize given container type with type traits",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RTensor.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx:3,Security,Access,Access,3,"// Access elements",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RTensor.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx:3,Security,Access,Access,3,"// Access properties",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RTensor.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx:12,Integrability,interface,interface,12,"// Iterator interface; // TODO: Document that the iterator always iterates following the physical memory layout.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RTensor.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx:11,Security,Access,Access,11,"/// \brief Access elements; /// \param[in] idx Index vector; /// \return Reference to element",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RTensor.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx:11,Security,Access,Access,11,"/// \brief Access elements; /// \param[in] idx Index vector; /// \return Reference to element",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RTensor.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx:11,Security,Access,Access,11,"/// \brief Access elements; /// \param[in] idx Indices; /// \return Reference to element",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RTensor.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx:11,Security,Access,Access,11,"/// \brief Access elements; /// \param[in] idx Indices; /// \return Reference to element",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RTensor.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx:3,Security,Sanitiz,Sanitize,3,"// Sanitize size of slice",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RTensor.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx:3,Security,Sanitiz,Sanitize,3,"// Sanitize slice indices; // TODO: Sanitize slice indices; /*; for (std::size_t i = 0; i < sliceSize; i++) {; }; */; // Convert -1 in slice to proper pair of indices; // TODO; // Recompute shape and size",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RTensor.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx:36,Security,Sanitiz,Sanitize,36,"// Sanitize slice indices; // TODO: Sanitize slice indices; /*; for (std::size_t i = 0; i < sliceSize; i++) {; }; */; // Convert -1 in slice to proper pair of indices; // TODO; // Recompute shape and size",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RTensor.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensorUtils.hxx:47,Availability,avail,available,47,"// TODO: Replace by RVec<T>::insert as soon as available.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RTensorUtils.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensorUtils.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Rule.h:208,Deployability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Rule *; * *; * Description: *; * A class describing a 'rule' *; * Each internal node of a tree defines a rule from all the parental nodes. *; * A rule consists of at least 2 nodes. *; * Input: a decision tree (in the constructor) *; * its coefficient *; * *; * *; * Authors (alphabetical): *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-KP Heidelberg, Ger. *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * Iowa State U. *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Rule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Rule.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Rule.h:208,Integrability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Rule *; * *; * Description: *; * A class describing a 'rule' *; * Each internal node of a tree defines a rule from all the parental nodes. *; * A rule consists of at least 2 nodes. *; * Input: a decision tree (in the constructor) *; * its coefficient *; * *; * *; * Authors (alphabetical): *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-KP Heidelberg, Ger. *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * Iowa State U. *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Rule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Rule.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Rule.h:7,Integrability,message,message,7,"// set message type",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Rule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Rule.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Rule.h:3,Testability,test,test,3,"// test if two rules are equal",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Rule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Rule.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Rule.h:17,Modifiability,variab,variables,17,"// get number of variables used in Rule",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Rule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Rule.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Rule.h:12,Modifiability,variab,variable,12,"// check if variable is used by the rule",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Rule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Rule.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Rule.h:3,Security,access,accessors,3,"// accessors",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Rule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Rule.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Rule.h:19,Modifiability,variab,variable,19,"// get the name of variable with index i",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Rule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Rule.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Rule.h:6,Integrability,message,message,6,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Rule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Rule.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Rule.h:14,Testability,log,logger,14,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Rule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Rule.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleCut.h:208,Deployability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Rule *; * *; * Description: *; * A class describing a 'rule cut' *; * *; * *; * Authors (alphabetical): *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * Iowa State U. *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleCut.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleCut.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleCut.h:208,Integrability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Rule *; * *; * Description: *; * A class describing a 'rule cut' *; * *; * *; * Authors (alphabetical): *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * Iowa State U. *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleCut.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleCut.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleCut.h:3,Security,access,accessors,3,"// accessors",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleCut.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleCut.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleCut.h:4,Integrability,message,message,4,"//! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleCut.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleCut.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleCut.h:12,Testability,log,logger,12,"//! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleCut.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleCut.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h:208,Deployability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RuleEnsemble *; * *; * *; * Description: *; * A class generating an ensemble of rules *; * Input: a forest of decision trees *; * Output: an ensemble of rules *; * *; * Authors (alphabetical): *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-KP Heidelberg, Ger. *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * Iowa State U. *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleEnsemble.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h:208,Integrability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RuleEnsemble *; * *; * *; * Description: *; * A class generating an ensemble of rules *; * Input: a forest of decision trees *; * Output: an ensemble of rules *; * *; * Authors (alphabetical): *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-KP Heidelberg, Ger. *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * Iowa State U. *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleEnsemble.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h:7,Integrability,message,message,7,"// set message type",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleEnsemble.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h:3,Usability,clear,clear,3,"// clear coefficients",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleEnsemble.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h:8,Performance,cache,cached,8,"// fill cached values of rule/linear respons",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleEnsemble.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h:3,Usability,clear,clear,3,"// clear rule map",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleEnsemble.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h:114,Performance,cache,cache,114,"// evaluates the event using the ensemble of rules; // the following uses fEventCache, that is per event saved in cache",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleEnsemble.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h:14,Modifiability,variab,variable,14,"// calculates variable importance",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleEnsemble.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h:3,Security,access,accessors,3,"// accessors",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleEnsemble.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h:34,Modifiability,variab,variable,34,"///< linear coefficients, one per variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleEnsemble.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h:19,Modifiability,variab,variable,19,"///< pdfs for each variable, background",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleEnsemble.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h:19,Modifiability,variab,variable,19,"///< pdfs for each variable, signal",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleEnsemble.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h:30,Modifiability,variab,variable,30,"///< one importance per input variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleEnsemble.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h:37,Modifiability,variab,variable,37,"///< fraction of rules using a given variable - size of vector = n(variables)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleEnsemble.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h:67,Modifiability,variab,variables,67,"///< fraction of rules using a given variable - size of vector = n(variables)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleEnsemble.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h:37,Deployability,update,updated,37,"///< true if rule/linear respons are updated",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleEnsemble.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h:6,Integrability,message,message,6,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleEnsemble.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h:14,Testability,log,logger,14,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleEnsemble.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h:7,Deployability,Update,Update,7,"//; // Update rule and linear respons using the current event; //",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleEnsemble.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFit.h:208,Deployability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RuleFit *; * *; * *; * Description: *; * A class implementing various fits of rule ensembles *; * *; * Authors (alphabetical): *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-KP Heidelberg, Ger. *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * Iowa State U. *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFit.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFit.h:208,Integrability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RuleFit *; * *; * *; * Description: *; * A class implementing various fits of rule ensembles *; * *; * Authors (alphabetical): *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-KP Heidelberg, Ger. *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * Iowa State U. *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFit.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFit.h:32,Modifiability,variab,variable,32,"// calculate the discriminating variable for the given event",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFit.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFit.h:13,Modifiability,variab,variable,13,"// calculate variable and rule importance from a set of events",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFit.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFit.h:3,Security,access,accessors,3,"// accessors",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFit.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFit.h:6,Integrability,message,message,6,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFit.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFit.h:14,Testability,log,logger,14,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFit.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h:208,Deployability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RuleFitAPI *; * *; * *; * Description: *; * Interface to Friedman's RuleFit method *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-KP Heidelberg, Ger. *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-KP Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitAPI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h:208,Integrability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RuleFitAPI *; * *; * *; * Description: *; * Interface to Friedman's RuleFit method *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-KP Heidelberg, Ger. *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-KP Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitAPI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h:334,Integrability,Interface,Interface,334,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RuleFitAPI *; * *; * *; * Description: *; * Interface to Friedman's RuleFit method *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-KP Heidelberg, Ger. *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-KP Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitAPI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h:11,Integrability,message,message,11,"// welcome message",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitAPI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h:3,Integrability,message,message,3,"// message on howto get the binary",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitAPI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h:23,Safety,abort,aborts,23,"// Check RF work dir - aborts if it fails",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitAPI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h:24,Testability,test,test,24,"///< score results from test sample",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitAPI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h:5,Modifiability,variab,variable,5,"///< variable importances",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitAPI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h:5,Modifiability,variab,variable,5,"///< variable index",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitAPI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h:5,Modifiability,variab,variable,5,"///< variable selector",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitAPI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h:6,Integrability,message,message,6,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitAPI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h:14,Testability,log,logger,14,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitAPI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h:26,Testability,test,test,26,"// run rf_go.exe with the test data",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitAPI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h:28,Modifiability,variab,variable,28,"// run rf_go.exe to get the variable importance",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitAPI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h:15,Modifiability,variab,variable,15,"// read in the variable importances",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitAPI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:208,Deployability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RuleFitParams *; * *; * *; * Description: *; * A class doing the actual fitting of a linear model using rules as *; * base functions. *; * Reference paper: 1.Gradient Directed Regularization *; * Friedman, Popescu, 2004 *; * 2.Predictive Learning with Rule Ensembles *; * Friedman, Popescu, 2005 *; * *; * *; * Authors (alphabetical): *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-KP Heidelberg, Ger. *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * Iowa State U. *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitParams.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:208,Integrability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RuleFitParams *; * *; * *; * Description: *; * A class doing the actual fitting of a linear model using rules as *; * base functions. *; * Reference paper: 1.Gradient Directed Regularization *; * Friedman, Popescu, 2004 *; * 2.Predictive Learning with Rule Ensembles *; * Friedman, Popescu, 2005 *; * *; * *; * Authors (alphabetical): *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-KP Heidelberg, Ger. *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * Iowa State U. *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitParams.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:517,Safety,Predict,Predictive,517,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RuleFitParams *; * *; * *; * Description: *; * A class doing the actual fitting of a linear model using rules as *; * base functions. *; * Reference paper: 1.Gradient Directed Regularization *; * Friedman, Popescu, 2004 *; * 2.Predictive Learning with Rule Ensembles *; * Friedman, Popescu, 2005 *; * *; * *; * Authors (alphabetical): *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-KP Heidelberg, Ger. *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * Iowa State U. *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitParams.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:528,Usability,Learn,Learning,528,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RuleFitParams *; * *; * *; * Description: *; * A class doing the actual fitting of a linear model using rules as *; * base functions. *; * Reference paper: 1.Gradient Directed Regularization *; * Friedman, Popescu, 2004 *; * 2.Predictive Learning with Rule Ensembles *; * Friedman, Popescu, 2005 *; * *; * *; * Authors (alphabetical): *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-KP Heidelberg, Ger. *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * Iowa State U. *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitParams.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:7,Integrability,message,message,7,"// set message type",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitParams.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:13,Safety,risk,risk,13,"// Empirical risk",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitParams.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:3,Safety,Risk,Risk,3,"// Risk evaluation for fPathIdx and fPerfInd",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitParams.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:3,Safety,Risk,Risk,3,"// Risk evaluation for all tau",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitParams.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:48,Availability,error,error,48,"// make path for binary classification (squared-error ramp, sect 6 in ref 1)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitParams.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:22,Availability,error,error,22,"// estimate of binary error rate",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitParams.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:29,Availability,error,error,29,"// estimate of scale average error rate",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitParams.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:65,Deployability,update,update,65,"// Calculate the direction in parameter space (eq 25, ref 1) and update coeffs (eq 22, ref 1)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitParams.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:33,Modifiability,variab,variable,33,"// calculate the average of each variable over the range",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitParams.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:59,Security,validat,validation,59,"///< number of linear terms; //; // Event indices for path/validation - TODO: should let the user decide; // Now it is just a simple one-fold cross validation.; //",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitParams.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:148,Security,validat,validation,148,"///< number of linear terms; //; // Event indices for path/validation - TODO: should let the user decide; // Now it is just a simple one-fold cross validation.; //",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitParams.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:126,Usability,simpl,simple,126,"///< number of linear terms; //; // Event indices for path/validation - TODO: should let the user decide; // Now it is just a simple one-fold cross validation.; //",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitParams.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:27,Performance,perform,performance,27,"///< first event index for performance evaluation",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitParams.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:26,Performance,perform,performance,26,"///< last event index for performance evaluation",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitParams.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:21,Modifiability,variab,variable,21,"///< average of each variable over the range fPathIdx1,2",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitParams.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:21,Modifiability,variab,variable,21,"///< average of each variable over the range fPerfIdx1,2",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitParams.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:45,Modifiability,variab,variables,45,"///< gradient vector - dimension = number of variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitParams.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:5,Availability,error,error,5,"///< error rates per tau",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitParams.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:5,Availability,error,error,5,"///< error rate is sufficiently low <--- stores boolean",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitParams.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:26,Testability,test,test-phase,26,"///< number of tau in the test-phase that are ok",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitParams.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:18,Availability,error,error,18,"///< stop scan at error = scale*errmin; //",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitParams.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:14,Safety,risk,risk,14,"///< GD path: risk",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitParams.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:14,Availability,error,error,14,"///< GD path: error rate (or performance)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitParams.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:29,Performance,perform,performance,29,"///< GD path: error rate (or performance)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitParams.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:6,Integrability,message,message,6,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitParams.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:14,Testability,log,logger,14,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/RuleFitParams.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SdivSqrtSplusB.h:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SdivSqrtSplusB *; * *; * *; * Description: Implementation of the SdivSqrtSplusB as separation criterion *; * S/sqrt(S + B) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SdivSqrtSplusB.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SdivSqrtSplusB.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SdivSqrtSplusB.h:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SdivSqrtSplusB *; * *; * *; * Description: Implementation of the SdivSqrtSplusB as separation criterion *; * S/sqrt(S + B) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SdivSqrtSplusB.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SdivSqrtSplusB.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SeparationBase.h:475,Availability,Error,Error,475,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SeparationBase *; * *; * *; * Description: An interface to different separation criteria used in various *; * training algorithms, as there are: *; * Gini-Index, Cross Entropy, Misclassification Error, e.t.c. *; * *; * There are two things: the Separation Index, and the Separation Gain *; * Separation Index: *; * Measure of the ""purity"" of a sample. If all elements (events) in the *; * sample belong to the same class (e.g. signal or backgr), than the *; * separation index is 0 (meaning 100% purity (or 0% purity as it is *; * symmetric. The index becomes maximal, for perfectly mixed samples *; * eg. purity=50% , N_signal = N_bkg *; * *; * Separation Gain: *; * the measure of how the quality of separation of the sample increases *; * by splitting the sample e.g. into a ""left-node"" and a ""right-node"" *; * (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right) *; * this is then the quality criterion which is optimized for when trying *; * to increase the information in the system (making the best selection *; * *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SeparationBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SeparationBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SeparationBase.h:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SeparationBase *; * *; * *; * Description: An interface to different separation criteria used in various *; * training algorithms, as there are: *; * Gini-Index, Cross Entropy, Misclassification Error, e.t.c. *; * *; * There are two things: the Separation Index, and the Separation Gain *; * Separation Index: *; * Measure of the ""purity"" of a sample. If all elements (events) in the *; * sample belong to the same class (e.g. signal or backgr), than the *; * separation index is 0 (meaning 100% purity (or 0% purity as it is *; * symmetric. The index becomes maximal, for perfectly mixed samples *; * eg. purity=50% , N_signal = N_bkg *; * *; * Separation Gain: *; * the measure of how the quality of separation of the sample increases *; * by splitting the sample e.g. into a ""left-node"" and a ""right-node"" *; * (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right) *; * this is then the quality criterion which is optimized for when trying *; * to increase the information in the system (making the best selection *; * *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SeparationBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SeparationBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SeparationBase.h:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SeparationBase *; * *; * *; * Description: An interface to different separation criteria used in various *; * training algorithms, as there are: *; * Gini-Index, Cross Entropy, Misclassification Error, e.t.c. *; * *; * There are two things: the Separation Index, and the Separation Gain *; * Separation Index: *; * Measure of the ""purity"" of a sample. If all elements (events) in the *; * sample belong to the same class (e.g. signal or backgr), than the *; * separation index is 0 (meaning 100% purity (or 0% purity as it is *; * symmetric. The index becomes maximal, for perfectly mixed samples *; * eg. purity=50% , N_signal = N_bkg *; * *; * Separation Gain: *; * the measure of how the quality of separation of the sample increases *; * by splitting the sample e.g. into a ""left-node"" and a ""right-node"" *; * (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right) *; * this is then the quality criterion which is optimized for when trying *; * to increase the information in the system (making the best selection *; * *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SeparationBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SeparationBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SeparationBase.h:326,Integrability,interface,interface,326,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SeparationBase *; * *; * *; * Description: An interface to different separation criteria used in various *; * training algorithms, as there are: *; * Gini-Index, Cross Entropy, Misclassification Error, e.t.c. *; * *; * There are two things: the Separation Index, and the Separation Gain *; * Separation Index: *; * Measure of the ""purity"" of a sample. If all elements (events) in the *; * sample belong to the same class (e.g. signal or backgr), than the *; * separation index is 0 (meaning 100% purity (or 0% purity as it is *; * symmetric. The index becomes maximal, for perfectly mixed samples *; * eg. purity=50% , N_signal = N_bkg *; * *; * Separation Gain: *; * the measure of how the quality of separation of the sample increases *; * by splitting the sample e.g. into a ""left-node"" and a ""right-node"" *; * (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right) *; * this is then the quality criterion which is optimized for when trying *; * to increase the information in the system (making the best selection *; * *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SeparationBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SeparationBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SeparationBase.h:1212,Performance,optimiz,optimized,1212,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SeparationBase *; * *; * *; * Description: An interface to different separation criteria used in various *; * training algorithms, as there are: *; * Gini-Index, Cross Entropy, Misclassification Error, e.t.c. *; * *; * There are two things: the Separation Index, and the Separation Gain *; * Separation Index: *; * Measure of the ""purity"" of a sample. If all elements (events) in the *; * sample belong to the same class (e.g. signal or backgr), than the *; * separation index is 0 (meaning 100% purity (or 0% purity as it is *; * symmetric. The index becomes maximal, for perfectly mixed samples *; * eg. purity=50% , N_signal = N_bkg *; * *; * Separation Gain: *; * the measure of how the quality of separation of the sample increases *; * by splitting the sample e.g. into a ""left-node"" and a ""right-node"" *; * (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right) *; * this is then the quality criterion which is optimized for when trying *; * to increase the information in the system (making the best selection *; * *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SeparationBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SeparationBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SeparationBase.h:118,Integrability,interface,interface,118,"//////////////////////////////////////////////////////////////////////////; // //; // SeparationBase //; // //; // An interface to calculate the ""SeparationGain"" for different //; // separation criteria used in various training algorithms //; // //; // There are two things: the Separation Index, and the Separation Gain //; // Separation Index: //; // Measure of the ""purity"" of a sample. If all elements (events) in the //; // sample belong to the same class (e.g. signal or background), than the//; // separation index is 0 (meaning 100% purity (or 0% purity as it is //; // symmetric. The index becomes maximal, for perfectly mixed samples //; // eg. purity=50% , N_signal = N_bkg //; // //; // Separation Gain: //; // the measure of how the quality of separation of the sample increases //; // by splitting the sample e.g. into a ""left-node"" and a ""right-node"" //; // (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right) //; // this is then the quality criterion which is optimized for when trying//; // to increase the information in the system (making the best selection //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SeparationBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SeparationBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SeparationBase.h:993,Performance,optimiz,optimized,993,"//////////////////////////////////////////////////////////////////////////; // //; // SeparationBase //; // //; // An interface to calculate the ""SeparationGain"" for different //; // separation criteria used in various training algorithms //; // //; // There are two things: the Separation Index, and the Separation Gain //; // Separation Index: //; // Measure of the ""purity"" of a sample. If all elements (events) in the //; // sample belong to the same class (e.g. signal or background), than the//; // separation index is 0 (meaning 100% purity (or 0% purity as it is //; // symmetric. The index becomes maximal, for perfectly mixed samples //; // eg. purity=50% , N_signal = N_bkg //; // //; // Separation Gain: //; // the measure of how the quality of separation of the sample increases //; // by splitting the sample e.g. into a ""left-node"" and a ""right-node"" //; // (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right) //; // this is then the quality criterion which is optimized for when trying//; // to increase the information in the system (making the best selection //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SeparationBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SeparationBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SeparationBase.h:3,Integrability,Interface,Interface,3,"// Interface to different separation criteria used in training algorithms",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SeparationBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SeparationBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealing.h:242,Deployability,integrat,integrated,242,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Krzysztof Danielowski, Kamil Kraszewski, Maciej Kruk; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SimulatedAnnealing *; * *; * *; * Description: *; * Implementation of simulated annealing fitting procedure *; * *; * Authors (alphabetical): *; * Krzysztof Danielowski <danielow@cern.ch> - IFJ & AGH, Poland *; * Kamil Kraszewski <kalq@cern.ch> - IFJ & UJ, Poland *; * Maciej Kruk <mkruk@cern.ch> - IFJ & AGH, Poland *; * *; * Copyright (c) 2008: *; * IFJ-Krakow, Poland *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SimulatedAnnealing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealing.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealing.h:242,Integrability,integrat,integrated,242,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Krzysztof Danielowski, Kamil Kraszewski, Maciej Kruk; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SimulatedAnnealing *; * *; * *; * Description: *; * Implementation of simulated annealing fitting procedure *; * *; * Authors (alphabetical): *; * Krzysztof Danielowski <danielow@cern.ch> - IFJ & AGH, Poland *; * Kamil Kraszewski <kalq@cern.ch> - IFJ & UJ, Poland *; * Maciej Kruk <mkruk@cern.ch> - IFJ & AGH, Poland *; * *; * Copyright (c) 2008: *; * IFJ-Krakow, Poland *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SimulatedAnnealing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealing.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealing.h:3,Security,access,accessors,3,"// accessors",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SimulatedAnnealing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealing.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealing.h:20,Modifiability,variab,variables,20,"//setting up helper variables for JsMVA",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SimulatedAnnealing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealing.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealing.h:36,Energy Efficiency,adapt,adaptive,36,"///< how fast temperature change in adaptive (in adaptive two variables describe; ///< the change of temperature, but fAdaptiveSpeed should be 1.0 and its not; ///< recommended to change it)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SimulatedAnnealing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealing.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealing.h:49,Energy Efficiency,adapt,adaptive,49,"///< how fast temperature change in adaptive (in adaptive two variables describe; ///< the change of temperature, but fAdaptiveSpeed should be 1.0 and its not; ///< recommended to change it)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SimulatedAnnealing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealing.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealing.h:36,Modifiability,adapt,adaptive,36,"///< how fast temperature change in adaptive (in adaptive two variables describe; ///< the change of temperature, but fAdaptiveSpeed should be 1.0 and its not; ///< recommended to change it)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SimulatedAnnealing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealing.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealing.h:49,Modifiability,adapt,adaptive,49,"///< how fast temperature change in adaptive (in adaptive two variables describe; ///< the change of temperature, but fAdaptiveSpeed should be 1.0 and its not; ///< recommended to change it)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SimulatedAnnealing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealing.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealing.h:62,Modifiability,variab,variables,62,"///< how fast temperature change in adaptive (in adaptive two variables describe; ///< the change of temperature, but fAdaptiveSpeed should be 1.0 and its not; ///< recommended to change it)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SimulatedAnnealing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealing.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealing.h:6,Integrability,message,message,6,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SimulatedAnnealing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealing.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealing.h:14,Testability,log,logger,14,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SimulatedAnnealing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealing.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealing.h:3,Modifiability,variab,variables,3,"// variables for JsMVA",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SimulatedAnnealing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealing.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealingFitter.h:215,Deployability,integrat,integrated,215,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Krzysztof Danielowski, Kamil Kraszewski, Maciej Kruk; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SimulatedAnnealingFitter *; * *; * *; * Description: *; * Fitter using Simulated Annealing algorithm *; * *; * Authors (alphabetical): *; * Krzysztof Danielowski <danielow@cern.ch> - IFJ & AGH, Poland *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Kamil Kraszewski <kalq@cern.ch> - IFJ & UJ, Poland *; * Maciej Kruk <mkruk@cern.ch> - IFJ & AGH, Poland *; * *; * Copyright (c) 2008: *; * IFJ-Krakow, Poland *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SimulatedAnnealingFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealingFitter.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealingFitter.h:215,Integrability,integrat,integrated,215,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Krzysztof Danielowski, Kamil Kraszewski, Maciej Kruk; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SimulatedAnnealingFitter *; * *; * *; * Description: *; * Fitter using Simulated Annealing algorithm *; * *; * Authors (alphabetical): *; * Krzysztof Danielowski <danielow@cern.ch> - IFJ & AGH, Poland *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Kamil Kraszewski <kalq@cern.ch> - IFJ & UJ, Poland *; * Maciej Kruk <mkruk@cern.ch> - IFJ & AGH, Poland *; * *; * Copyright (c) 2008: *; * IFJ-Krakow, Poland *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SimulatedAnnealingFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealingFitter.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealingFitter.h:26,Integrability,depend,depends,26,"///< initial temperature (depends on FCN)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SimulatedAnnealingFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealingFitter.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealingFitter.h:36,Energy Efficiency,adapt,adaptive,36,"///< how fast temperature change in adaptive (in adaptive two variables describe; /// the change of temperature, but fAdaptiveSpeed should be 1.0 and its not; /// recommended to change it)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SimulatedAnnealingFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealingFitter.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealingFitter.h:49,Energy Efficiency,adapt,adaptive,49,"///< how fast temperature change in adaptive (in adaptive two variables describe; /// the change of temperature, but fAdaptiveSpeed should be 1.0 and its not; /// recommended to change it)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SimulatedAnnealingFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealingFitter.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealingFitter.h:36,Modifiability,adapt,adaptive,36,"///< how fast temperature change in adaptive (in adaptive two variables describe; /// the change of temperature, but fAdaptiveSpeed should be 1.0 and its not; /// recommended to change it)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SimulatedAnnealingFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealingFitter.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealingFitter.h:49,Modifiability,adapt,adaptive,49,"///< how fast temperature change in adaptive (in adaptive two variables describe; /// the change of temperature, but fAdaptiveSpeed should be 1.0 and its not; /// recommended to change it)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SimulatedAnnealingFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealingFitter.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealingFitter.h:62,Modifiability,variab,variables,62,"///< how fast temperature change in adaptive (in adaptive two variables describe; /// the change of temperature, but fAdaptiveSpeed should be 1.0 and its not; /// recommended to change it)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SimulatedAnnealingFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealingFitter.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVEvent.h:159,Deployability,integrat,integrated,159,"// @(#)root/tmva $Id$; // Author: Andrzej Zemla; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SVEvent *; * *; * *; * Description: *; * Event class for Support Vector Machine *; * *; * Authors (alphabetical): *; * Marcin Wolter <Marcin.Wolter@cern.ch> - IFJ PAN, Krakow, Poland *; * Andrzej Zemla <azemla@cern.ch> - IFJ PAN, Krakow, Poland *; * (IFJ PAN: Henryk Niewodniczanski Inst. Nucl. Physics, Krakow, Poland) *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * PAN, Krakow, Poland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SVEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVEvent.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVEvent.h:159,Integrability,integrat,integrated,159,"// @(#)root/tmva $Id$; // Author: Andrzej Zemla; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SVEvent *; * *; * *; * Description: *; * Event class for Support Vector Machine *; * *; * Authors (alphabetical): *; * Marcin Wolter <Marcin.Wolter@cern.ch> - IFJ PAN, Krakow, Poland *; * Andrzej Zemla <azemla@cern.ch> - IFJ PAN, Krakow, Poland *; * (IFJ PAN: Henryk Niewodniczanski Inst. Nucl. Physics, Krakow, Poland) *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * PAN, Krakow, Poland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SVEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVEvent.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVEvent.h:5,Performance,optimiz,optimization,5,"///< optimization parameter",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SVEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVEvent.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVEvent.h:15,Modifiability,variab,variables,15,"///< number of variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SVEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVEvent.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVKernelFunction.h:159,Deployability,integrat,integrated,159,"// @(#)root/tmva $Id$; // Author: Andrzej Zemla; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SVKernelFunction *; * *; * *; * Description: *; * Kernel for Support Vector Machine *; * *; * Authors (alphabetical): *; * Marcin Wolter <Marcin.Wolter@cern.ch> - IFJ PAN, Krakow, Poland *; * Andrzej Zemla <azemla@cern.ch> - IFJ PAN, Krakow, Poland *; * (IFJ PAN: Henryk Niewodniczanski Inst. Nucl. Physics, Krakow, Poland) *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * PAN, Krakow, Poland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SVKernelFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVKernelFunction.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVKernelFunction.h:159,Integrability,integrat,integrated,159,"// @(#)root/tmva $Id$; // Author: Andrzej Zemla; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SVKernelFunction *; * *; * *; * Description: *; * Kernel for Support Vector Machine *; * *; * Authors (alphabetical): *; * Marcin Wolter <Marcin.Wolter@cern.ch> - IFJ PAN, Krakow, Poland *; * Andrzej Zemla <azemla@cern.ch> - IFJ PAN, Krakow, Poland *; * (IFJ PAN: Henryk Niewodniczanski Inst. Nucl. Physics, Krakow, Poland) *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * PAN, Krakow, Poland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SVKernelFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVKernelFunction.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVKernelMatrix.h:159,Deployability,integrat,integrated,159,"// @(#)root/tmva $Id$; // Author: Andrzej Zemla; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SVKernelMatrix *; * *; * *; * Description: *; * Kernel matrix for Support Vector Machine *; * *; * Authors (alphabetical): *; * Marcin Wolter <Marcin.Wolter@cern.ch> - IFJ PAN, Krakow, Poland *; * Andrzej Zemla <azemla@cern.ch> - IFJ PAN, Krakow, Poland *; * (IFJ PAN: Henryk Niewodniczanski Inst. Nucl. Physics, Krakow, Poland) *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * PAN, Krakow, Poland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SVKernelMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVKernelMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVKernelMatrix.h:159,Integrability,integrat,integrated,159,"// @(#)root/tmva $Id$; // Author: Andrzej Zemla; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SVKernelMatrix *; * *; * *; * Description: *; * Kernel matrix for Support Vector Machine *; * *; * Authors (alphabetical): *; * Marcin Wolter <Marcin.Wolter@cern.ch> - IFJ PAN, Krakow, Poland *; * Andrzej Zemla <azemla@cern.ch> - IFJ PAN, Krakow, Poland *; * (IFJ PAN: Henryk Niewodniczanski Inst. Nucl. Physics, Krakow, Poland) *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * PAN, Krakow, Poland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SVKernelMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVKernelMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVKernelMatrix.h:6,Integrability,message,message,6,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SVKernelMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVKernelMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVKernelMatrix.h:14,Testability,log,logger,14,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SVKernelMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVKernelMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVWorkingSet.h:159,Deployability,integrat,integrated,159,"// @(#)root/tmva $Id$; // Author: Andrzej Zemla; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SVWorkingSet *; * *; * *; * Description: *; * Working class for Support Vector Machine *; * *; * Authors (alphabetical): *; * Marcin Wolter <Marcin.Wolter@cern.ch> - IFJ PAN, Krakow, Poland *; * Andrzej Zemla <azemla@cern.ch> - IFJ PAN, Krakow, Poland *; * (IFJ PAN: Henryk Niewodniczanski Inst. Nucl. Physics, Krakow, Poland) *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * PAN, Krakow, Poland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SVWorkingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVWorkingSet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVWorkingSet.h:159,Integrability,integrat,integrated,159,"// @(#)root/tmva $Id$; // Author: Andrzej Zemla; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SVWorkingSet *; * *; * *; * Description: *; * Working class for Support Vector Machine *; * *; * Authors (alphabetical): *; * Marcin Wolter <Marcin.Wolter@cern.ch> - IFJ PAN, Krakow, Poland *; * Andrzej Zemla <azemla@cern.ch> - IFJ PAN, Krakow, Poland *; * (IFJ PAN: Henryk Niewodniczanski Inst. Nucl. Physics, Krakow, Poland) *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * PAN, Krakow, Poland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SVWorkingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVWorkingSet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVWorkingSet.h:20,Modifiability,variab,variables,20,"//setting up helper variables for JsMVA",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SVWorkingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVWorkingSet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVWorkingSet.h:10,Performance,optimiz,optimized,10,"///< last optimized event",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SVWorkingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVWorkingSet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVWorkingSet.h:10,Performance,optimiz,optimized,10,"///< last optimized event",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SVWorkingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVWorkingSet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVWorkingSet.h:6,Integrability,message,message,6,"///<! message logger; // variables for JsMVA",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SVWorkingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVWorkingSet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVWorkingSet.h:25,Modifiability,variab,variables,25,"///<! message logger; // variables for JsMVA",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SVWorkingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVWorkingSet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVWorkingSet.h:14,Testability,log,logger,14,"///<! message logger; // variables for JsMVA",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/SVWorkingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVWorkingSet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivation.h:160,Deployability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TActivation *; * *; * Description: *; * Interface for TNeuron activation function classes. *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TActivation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivation.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivation.h:160,Integrability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TActivation *; * *; * Description: *; * Interface for TNeuron activation function classes. *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TActivation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivation.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivation.h:288,Integrability,Interface,Interface,288,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TActivation *; * *; * Description: *; * Interface for TNeuron activation function classes. *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TActivation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivation.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivation.h:112,Integrability,Interface,Interface,112,"//////////////////////////////////////////////////////////////////////////; // //; // TActivation //; // //; // Interface for TNeuron activation function classes //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TActivation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivation.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivation.h:3,Integrability,Interface,Interface,3,"// Interface for TNeuron activation function classes",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TActivation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivation.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivationChooser.h:160,Deployability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TActivationChooser *; * *; * *; * Description: *; * Class for easily choosing activation functions. *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TActivationChooser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivationChooser.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivationChooser.h:160,Integrability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TActivationChooser *; * *; * *; * Description: *; * Class for easily choosing activation functions. *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TActivationChooser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivationChooser.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivationChooser.h:6,Integrability,message,message,6,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TActivationChooser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivationChooser.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivationChooser.h:14,Testability,log,logger,14,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TActivationChooser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivationChooser.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivationIdentity.h:160,Deployability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TActivationIdentity *; * *; * *; * Description: *; * Identity activation function for TNeuron *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TActivationIdentity.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivationIdentity.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivationIdentity.h:160,Integrability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TActivationIdentity *; * *; * *; * Description: *; * Identity activation function for TNeuron *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TActivationIdentity.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivationIdentity.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivationRadial.h:160,Deployability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TActivationRadial *; * *; * *; * Description: *; * Radial basis activation function for TNeuron *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TActivationRadial.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivationRadial.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivationRadial.h:160,Integrability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TActivationRadial *; * *; * *; * Description: *; * Radial basis activation function for TNeuron *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TActivationRadial.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivationRadial.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivationReLU.h:160,Deployability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TActivationReLU *; * *; * *; * Description: *; * Tanh activation function for TNeuron *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TActivationReLU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivationReLU.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivationReLU.h:160,Integrability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TActivationReLU *; * *; * *; * Description: *; * Tanh activation function for TNeuron *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TActivationReLU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivationReLU.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivationSigmoid.h:160,Deployability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TActivationSigmoid *; * *; * *; * Description: *; * Sigmoid activation function for TNeuron *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TActivationSigmoid.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivationSigmoid.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivationSigmoid.h:160,Integrability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TActivationSigmoid *; * *; * *; * Description: *; * Sigmoid activation function for TNeuron *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TActivationSigmoid.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivationSigmoid.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivationTanh.h:160,Deployability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TActivationTanh *; * *; * *; * Description: *; * Tanh activation function for TNeuron *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TActivationTanh.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivationTanh.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivationTanh.h:160,Integrability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TActivationTanh *; * *; * *; * Description: *; * Tanh activation function for TNeuron *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TActivationTanh.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TActivationTanh.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Timer.h:188,Deployability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Timer *; * *; * *; * Description: *; * Timing information for methods training *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Timer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Timer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Timer.h:188,Integrability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Timer *; * *; * *; * Description: *; * Timing information for methods training *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Timer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Timer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Timer.h:23,Usability,progress bar,progress bar,23,"///< number of bins in progress bar",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Timer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Timer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Timer.h:17,Testability,log,logger,17,"///<! the output logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Timer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Timer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h:160,Deployability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TNeuron *; * *; * *; * Description: *; * Neuron class to be used in MethodANNBase and its derivatives. *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TNeuron.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h:160,Integrability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TNeuron *; * *; * *; * Description: *; * Neuron class to be used in MethodANNBase and its derivatives. *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TNeuron.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h:17,Availability,error,error,17,"// calculate the error field of the neuron",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TNeuron.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h:11,Availability,error,error,11,"// set the error",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TNeuron.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h:14,Availability,error,error,14,"// update the error fields of all pre-synapses, batch mode; // to actually update the weights, call adjust synapse weights",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TNeuron.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h:3,Deployability,update,update,3,"// update the error fields of all pre-synapses, batch mode; // to actually update the weights, call adjust synapse weights",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TNeuron.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h:75,Deployability,update,update,75,"// update the error fields of all pre-synapses, batch mode; // to actually update the weights, call adjust synapse weights",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TNeuron.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h:14,Availability,error,error,14,"// update the error fields and weights of all pre-synapses, sequential mode",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TNeuron.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h:3,Deployability,update,update,3,"// update the error fields and weights of all pre-synapses, sequential mode",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TNeuron.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h:3,Deployability,update,update,3,"// update the weights of the all pre-synapses, batch mode; //(call UpdateSynapsesBatch first)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TNeuron.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h:67,Deployability,Update,UpdateSynapsesBatch,67,"// update the weights of the all pre-synapses, batch mode; //(call UpdateSynapsesBatch first)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TNeuron.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h:25,Availability,error,error,25,"// explicitly initialize error fields of pre-synapses, batch mode",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TNeuron.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h:18,Modifiability,variab,variables,18,"// private member variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TNeuron.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h:5,Availability,error,error,5,"///< error field of neuron",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TNeuron.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h:5,Availability,error,error,5,"///< error, only set for output neurons",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TNeuron.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuronInput.h:160,Deployability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TNeuronInput *; * *; * Description: *; * Interface for TNeuron input calculation classes *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TNeuronInput.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuronInput.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuronInput.h:160,Integrability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TNeuronInput *; * *; * Description: *; * Interface for TNeuron input calculation classes *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TNeuronInput.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuronInput.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuronInput.h:289,Integrability,Interface,Interface,289,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TNeuronInput *; * *; * Description: *; * Interface for TNeuron input calculation classes *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TNeuronInput.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuronInput.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuronInput.h:113,Integrability,Interface,Interface,113,"//////////////////////////////////////////////////////////////////////////; // //; // TNeuronInput //; // //; // Interface for TNeuron input calculation classes //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TNeuronInput.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuronInput.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuronInput.h:3,Integrability,Interface,Interface,3,"// Interface for TNeuron input calculation classes",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TNeuronInput.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuronInput.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuronInputAbs.h:160,Deployability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TNeuronInputAbs *; * *; * *; * Description: *; * TNeuron input calculator -- calculates the sum of the absolute values *; * of the weighted inputs *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TNeuronInputAbs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuronInputAbs.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuronInputAbs.h:160,Integrability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TNeuronInputAbs *; * *; * *; * Description: *; * TNeuron input calculator -- calculates the sum of the absolute values *; * of the weighted inputs *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TNeuronInputAbs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuronInputAbs.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuronInputChooser.h:160,Deployability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TNeuronInputChooser *; * *; * *; * Description: *; * Class for easily choosing neuron input functions. *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TNeuronInputChooser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuronInputChooser.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuronInputChooser.h:160,Integrability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TNeuronInputChooser *; * *; * *; * Description: *; * Class for easily choosing neuron input functions. *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TNeuronInputChooser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuronInputChooser.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuronInputSqSum.h:160,Deployability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TNeuronInputSqSum *; * *; * *; * Description: *; * TNeuron input calculator -- calculates the square *; * of the weighted sum of inputs. *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TNeuronInputSqSum.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuronInputSqSum.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuronInputSqSum.h:160,Integrability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TNeuronInputSqSum *; * *; * *; * Description: *; * TNeuron input calculator -- calculates the square *; * of the weighted sum of inputs. *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TNeuronInputSqSum.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuronInputSqSum.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuronInputSum.h:160,Deployability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TNeuronInputSum *; * *; * *; * Description: *; * TNeuron input calculator -- calculates the weighted sum of inputs. *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TNeuronInputSum.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuronInputSum.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuronInputSum.h:160,Integrability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TNeuronInputSum *; * *; * *; * Description: *; * TNeuron input calculator -- calculates the weighted sum of inputs. *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TNeuronInputSum.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuronInputSum.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Tools *; * *; * *; * Description: *; * Global auxiliary applications and data treatment routines *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Tools.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Tools *; * *; * *; * Description: *; * Global auxiliary applications and data treatment routines *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Tools.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h:368,Integrability,rout,routines,368,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Tools *; * *; * *; * Description: *; * Global auxiliary applications and data treatment routines *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Tools.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h:167,Integrability,rout,routines,167,"//////////////////////////////////////////////////////////////////////////; // //; // Tools (namespace) //; // //; // Global auxiliary applications and data treatment routines //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Tools.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h:3,Security,access,accessor,3,"// accessor to single instance",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Tools.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h:3,Usability,simpl,simple,3,"// simple statistics operations on tree entries",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Tools.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h:20,Modifiability,variab,variable,20,"// normalization of variable output",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Tools.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h:3,Integrability,rout,routines,3,"// routines for formatted output -----------------",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Tools.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h:44,Deployability,configurat,configuration,44,"// check if ""silent"" or ""verbose"" option in configuration string",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Tools.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h:44,Modifiability,config,configuration,44,"// check if ""silent"" or ""verbose"" option in configuration string",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Tools.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h:17,Integrability,message,message,17,"// print welcome message (to be called from, eg, .TMVAlogon)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Tools.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h:3,Modifiability,variab,variables,3,"// variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Tools.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h:27,Energy Efficiency,Adapt,Adapts,27,"// global accessor; //; // Adapts a TRandom random number generator to the interface of the ones in the; // standard library (STL) so that TRandom derived generators can be used with; // STL algorithms such as `std::shuffle`.; //; // Example:; // ```; // std::vector<double> v {0, 1, 2, 3, 4, 5};; // TRandom3StdEngine rng(seed);; // std::shuffle(v.begin(), v.end(), rng);; // ```; //; // Or at a lower level:; // ```; // std::vector<double> v {0, 1, 2, 3, 4, 5};; // RandomGenerator<TRandom3> rng(seed);; // std::shuffle(v.begin(), v.end(), rng);; // ```; //",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Tools.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h:75,Integrability,interface,interface,75,"// global accessor; //; // Adapts a TRandom random number generator to the interface of the ones in the; // standard library (STL) so that TRandom derived generators can be used with; // STL algorithms such as `std::shuffle`.; //; // Example:; // ```; // std::vector<double> v {0, 1, 2, 3, 4, 5};; // TRandom3StdEngine rng(seed);; // std::shuffle(v.begin(), v.end(), rng);; // ```; //; // Or at a lower level:; // ```; // std::vector<double> v {0, 1, 2, 3, 4, 5};; // RandomGenerator<TRandom3> rng(seed);; // std::shuffle(v.begin(), v.end(), rng);; // ```; //",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Tools.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h:27,Modifiability,Adapt,Adapts,27,"// global accessor; //; // Adapts a TRandom random number generator to the interface of the ones in the; // standard library (STL) so that TRandom derived generators can be used with; // STL algorithms such as `std::shuffle`.; //; // Example:; // ```; // std::vector<double> v {0, 1, 2, 3, 4, 5};; // TRandom3StdEngine rng(seed);; // std::shuffle(v.begin(), v.end(), rng);; // ```; //; // Or at a lower level:; // ```; // std::vector<double> v {0, 1, 2, 3, 4, 5};; // RandomGenerator<TRandom3> rng(seed);; // std::shuffle(v.begin(), v.end(), rng);; // ```; //",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Tools.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h:10,Security,access,accessor,10,"// global accessor; //; // Adapts a TRandom random number generator to the interface of the ones in the; // standard library (STL) so that TRandom derived generators can be used with; // STL algorithms such as `std::shuffle`.; //; // Example:; // ```; // std::vector<double> v {0, 1, 2, 3, 4, 5};; // TRandom3StdEngine rng(seed);; // std::shuffle(v.begin(), v.end(), rng);; // ```; //; // Or at a lower level:; // ```; // std::vector<double> v {0, 1, 2, 3, 4, 5};; // RandomGenerator<TRandom3> rng(seed);; // std::shuffle(v.begin(), v.end(), rng);; // ```; //",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Tools.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h:16,Modifiability,variab,variable,16,/* avoid unused variable warning */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Tools.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h:3,Safety,avoid,avoid,3,/* avoid unused variable warning */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Tools.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TrainingHistory.h:110,Deployability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MsgLogger *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Author: *; * Joseph McKenna <Joseph.McKenna@cern.ch> - Aarhus, Denmark *; * *; * Copyright (c) 2019: *; * Aarhus, Denmark *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TrainingHistory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TrainingHistory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TrainingHistory.h:110,Integrability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MsgLogger *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Author: *; * Joseph McKenna <Joseph.McKenna@cern.ch> - Aarhus, Denmark *; * *; * Copyright (c) 2019: *; * Aarhus, Denmark *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TrainingHistory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TrainingHistory.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TransformationHandler.h:240,Deployability,integrat,integrated,240,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Jan Therhaag, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TransformationHandler *; * *; * *; * Description: *; * Contains all the data information *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TransformationHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TransformationHandler.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TransformationHandler.h:240,Integrability,integrat,integrated,240,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Jan Therhaag, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TransformationHandler *; * *; * *; * Description: *; * Contains all the data information *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TransformationHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TransformationHandler.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TransformationHandler.h:3,Modifiability,variab,variable,3,"// variable ranking",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TransformationHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TransformationHandler.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TransformationHandler.h:51,Modifiability,Variab,VariableTransformBase,51,"// std::vector<TMVA::Event*>* TransformCollection( VariableTransformBase* trf,; // Int_t cls,; // std::vector<TMVA::Event*>* events,; // Bool_t replace ) const;",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TransformationHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TransformationHandler.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TransformationHandler.h:13,Modifiability,variab,variables,13,"// first the variables, then the targets",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TransformationHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TransformationHandler.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TransformationHandler.h:6,Integrability,message,message,6,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TransformationHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TransformationHandler.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TransformationHandler.h:14,Testability,log,logger,14,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TransformationHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TransformationHandler.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSpline1.h:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TSpline1 *; * *; * *; * Description: *; * Linear interpolation class; derivative of TSpline *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TSpline1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSpline1.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSpline1.h:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TSpline1 *; * *; * *; * Description: *; * Linear interpolation class; derivative of TSpline *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TSpline1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSpline1.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSpline2.h:199,Deployability,integrat,integrated,199,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss ; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TSpline2 *; * *; * *; * Description: *; * Quadratic spline class; uses quadrax function for interpolation *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland * ; * U. of Victoria, Canada * ; * MPI-K Heidelberg, Germany * ; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TSpline2.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSpline2.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSpline2.h:199,Integrability,integrat,integrated,199,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss ; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TSpline2 *; * *; * *; * Description: *; * Quadratic spline class; uses quadrax function for interpolation *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland * ; * U. of Victoria, Canada * ; * MPI-K Heidelberg, Germany * ; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TSpline2.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSpline2.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h:160,Deployability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TSynapse *; * *; * *; * Description: *; * Synapse class for use in derivatives of MethodANNBase *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TSynapse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h:160,Integrability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TSynapse *; * *; * *; * Description: *; * Synapse class for use in derivatives of MethodANNBase *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TSynapse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h:11,Usability,learn,learning,11,"// set the learning rate",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TSynapse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h:11,Usability,learn,learning,11,"// get the learning rate",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TSynapse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h:13,Usability,learn,learning,13,"// decay the learning rate",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TSynapse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h:20,Availability,error,error,20,"// get the weighted error field of the post-neuron",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TSynapse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h:59,Availability,error,error,59,"// force the synapse to adjust its weight according to its error field",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TSynapse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h:17,Availability,error,error,17,"// calculate the error field of the synapse",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TSynapse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h:18,Availability,error,error,18,"// initialize the error field of the synapse to 0",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TSynapse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h:5,Usability,learn,learning,5,"///< learning rate parameter",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TSynapse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h:11,Availability,error,error,11,"///< local error field",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TSynapse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h:39,Availability,error,error,39,"///< number of updates contributing to error field",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TSynapse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h:15,Deployability,update,updates,15,"///< number of updates contributing to error field",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/TSynapse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Types.h:188,Deployability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Types *; * *; * *; * Description: *; * GLobal types (singleton class) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Types.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Types.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Types.h:188,Integrability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Types *; * *; * *; * Description: *; * GLobal types (singleton class) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Types.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Types.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Types.h:3,Integrability,message,message,3,"// message types for MsgLogger; // define outside of Types class to facilite access",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Types.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Types.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Types.h:77,Security,access,access,77,"// message types for MsgLogger; // define outside of Types class to facilite access",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Types.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Types.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Types.h:2,Modifiability,Variab,Variable,2,"//Variable Importance type",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Types.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Types.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Types.h:3,Availability,avail,available,3,"// available MVA methods",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Types.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Types.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Types.h:3,Availability,avail,available,3,"// available variable transformations",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Types.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Types.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Types.h:13,Modifiability,variab,variable,13,"// available variable transformations",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Types.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Types.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Types.h:67,Testability,test,testing,67,"///< also used as temporary storage for trees not yet assigned for testing;training...",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Types.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Types.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Types.h:6,Integrability,message,message,6,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Types.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Types.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Types.h:14,Testability,log,logger,14,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Types.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Types.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableDecorrTransform.h:188,Deployability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableDecorrTransform *; * *; * *; * Description: *; * Decorrelation of input variables *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableDecorrTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableDecorrTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableDecorrTransform.h:188,Integrability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableDecorrTransform *; * *; * *; * Description: *; * Decorrelation of input variables *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableDecorrTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableDecorrTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableDecorrTransform.h:270,Modifiability,Variab,VariableDecorrTransform,270,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableDecorrTransform *; * *; * *; * Description: *; * Decorrelation of input variables *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableDecorrTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableDecorrTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableDecorrTransform.h:350,Modifiability,variab,variables,350,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableDecorrTransform *; * *; * *; * Description: *; * Decorrelation of input variables *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableDecorrTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableDecorrTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableDecorrTransform.h:86,Modifiability,Variab,VariableDecorrTransform,86,"//////////////////////////////////////////////////////////////////////////; // //; // VariableDecorrTransform //; // //; // Linear interpolation class //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableDecorrTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableDecorrTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableDecorrTransform.h:3,Modifiability,Variab,Variable,3,"// Variable transformation: decorrelation",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableDecorrTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableDecorrTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableGaussTransform.h:207,Deployability,integrat,integrated,207,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Eckhard v. Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableGaussTransform *; * *; * *; * Description: *; * Decorrelation of input variables *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Eckhard v. Toerne <evt@uni-bonn.de> - Uni Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableGaussTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableGaussTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableGaussTransform.h:207,Integrability,integrat,integrated,207,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Eckhard v. Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableGaussTransform *; * *; * *; * Description: *; * Decorrelation of input variables *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Eckhard v. Toerne <evt@uni-bonn.de> - Uni Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableGaussTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableGaussTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableGaussTransform.h:289,Modifiability,Variab,VariableGaussTransform,289,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Eckhard v. Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableGaussTransform *; * *; * *; * Description: *; * Decorrelation of input variables *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Eckhard v. Toerne <evt@uni-bonn.de> - Uni Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableGaussTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableGaussTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableGaussTransform.h:368,Modifiability,variab,variables,368,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Eckhard v. Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableGaussTransform *; * *; * *; * Description: *; * Decorrelation of input variables *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Eckhard v. Toerne <evt@uni-bonn.de> - Uni Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableGaussTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableGaussTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableGaussTransform.h:86,Modifiability,Variab,VariableGaussTransform,86,"//////////////////////////////////////////////////////////////////////////; // //; // VariableGaussTransform //; // //; // Gaussian transformation of input variables. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableGaussTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableGaussTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableGaussTransform.h:156,Modifiability,variab,variables,156,"//////////////////////////////////////////////////////////////////////////; // //; // VariableGaussTransform //; // //; // Gaussian transformation of input variables. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableGaussTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableGaussTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableGaussTransform.h:3,Modifiability,Variab,Variable,3,"// Variable transformation: Gauss transformation",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableGaussTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableGaussTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableIdentityTransform.h:188,Deployability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableIdentityTransform *; * *; * *; * Description: *; * Identity transform *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableIdentityTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableIdentityTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableIdentityTransform.h:188,Integrability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableIdentityTransform *; * *; * *; * Description: *; * Identity transform *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableIdentityTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableIdentityTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableIdentityTransform.h:270,Modifiability,Variab,VariableIdentityTransform,270,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableIdentityTransform *; * *; * *; * Description: *; * Identity transform *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableIdentityTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableIdentityTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableIdentityTransform.h:86,Modifiability,Variab,VariableIdentityTransform,86,"//////////////////////////////////////////////////////////////////////////; // //; // VariableIdentityTransform //; // //; // Linear interpolation class //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableIdentityTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableIdentityTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableIdentityTransform.h:3,Modifiability,Variab,Variable,3,"// Variable transformation: identity",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableIdentityTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableIdentityTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableImportance.h:46,Modifiability,variab,variable,46,"//evaluate the simple case that is removing 1 variable at time",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableImportance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableImportance.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableImportance.h:15,Usability,simpl,simple,15,"//evaluate the simple case that is removing 1 variable at time",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableImportance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableImportance.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableImportance.h:15,Modifiability,variab,variables,15,"//evaluate all variables combinations NOTE: use with care in huge datasets with a huge number of variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableImportance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableImportance.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableImportance.h:97,Modifiability,variab,variables,97,"//evaluate all variables combinations NOTE: use with care in huge datasets with a huge number of variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableImportance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableImportance.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableImportance.h:71,Deployability,configurat,configuration,71,"//method to compute the range(number total of operations for every bit configuration)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableImportance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableImportance.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableImportance.h:71,Modifiability,config,configuration,71,"//method to compute the range(number total of operations for every bit configuration)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableImportance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableImportance.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h:188,Deployability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Option *; * *; * *; * Description: *; * Variable type info *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h:188,Integrability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Option *; * *; * *; * Description: *; * Variable type info *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h:310,Modifiability,Variab,Variable,310,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Option *; * *; * *; * Description: *; * Variable type info *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h:86,Modifiability,Variab,VariableInfo,86,"//////////////////////////////////////////////////////////////////////////; // //; // VariableInfo //; // //; // Class for type info of MVA input variable //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h:146,Modifiability,variab,variable,146,"//////////////////////////////////////////////////////////////////////////; // //; // VariableInfo //; // //; // Class for type info of MVA input variable //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h:14,Modifiability,variab,variable,14,"///< original variable expression (can be a formula)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h:14,Modifiability,variab,variable,14,"///< internal variable name (needs to be regular expression)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h:5,Modifiability,variab,variable,5,"///< variable label, set by ""mylabel := var1 + var2"", this is a shortcut; //TString fTitle; ///<! title for axis labels in plots; set by second string in AddVariable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h:9,Modifiability,variab,variable,9,"///< the variable type to be used internally ('F'-default or 'I')",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h:51,Modifiability,variab,variable,51,"///< minimum value for correlated/decorrelated/PCA variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h:51,Modifiability,variab,variable,51,"///< maximum value for correlated/decorrelated/PCA variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h:48,Modifiability,variab,variable,48,"///< mean value for correlated/decorrelated/PCA variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h:47,Modifiability,variab,variable,47,"///< rms value for correlated/decorrelated/PCA variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h:52,Modifiability,variab,variable,52,"///< variance value for correlated/decorrelated/PCA variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h:5,Modifiability,variab,variable,5,"///< variable gets normalized",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h:13,Modifiability,variab,variable,13,"///<! if the variable content is linked to an external pointer",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h:22,Modifiability,variab,variable,22,"///< type of external variable (int, long, double, float) - to be done JS",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h:11,Modifiability,variab,variable,11,"///< dummy variable",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableInfo.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableNormalizeTransform.h:188,Deployability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableNormalizeTransform *; * *; * *; * Description: *; * Decorrelation of input variables *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableNormalizeTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableNormalizeTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableNormalizeTransform.h:188,Integrability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableNormalizeTransform *; * *; * *; * Description: *; * Decorrelation of input variables *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableNormalizeTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableNormalizeTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableNormalizeTransform.h:270,Modifiability,Variab,VariableNormalizeTransform,270,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableNormalizeTransform *; * *; * *; * Description: *; * Decorrelation of input variables *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableNormalizeTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableNormalizeTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableNormalizeTransform.h:353,Modifiability,variab,variables,353,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableNormalizeTransform *; * *; * *; * Description: *; * Decorrelation of input variables *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableNormalizeTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableNormalizeTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableNormalizeTransform.h:86,Modifiability,Variab,VariableNormalizeTransform,86,"//////////////////////////////////////////////////////////////////////////; // //; // VariableNormalizeTransform //; // //; // Linear interpolation class //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableNormalizeTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableNormalizeTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableNormalizeTransform.h:3,Modifiability,Variab,Variable,3,"// Variable transformation: normalization",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableNormalizeTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableNormalizeTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariablePCATransform.h:188,Deployability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariablePCATransform *; * *; * *; * Description: *; * Principal value composition of input variables *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariablePCATransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariablePCATransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariablePCATransform.h:188,Integrability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariablePCATransform *; * *; * *; * Description: *; * Principal value composition of input variables *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariablePCATransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariablePCATransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariablePCATransform.h:270,Modifiability,Variab,VariablePCATransform,270,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariablePCATransform *; * *; * *; * Description: *; * Principal value composition of input variables *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariablePCATransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariablePCATransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariablePCATransform.h:361,Modifiability,variab,variables,361,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariablePCATransform *; * *; * *; * Description: *; * Principal value composition of input variables *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariablePCATransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariablePCATransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariablePCATransform.h:86,Modifiability,Variab,VariablePCATransform,86,"//////////////////////////////////////////////////////////////////////////; // //; // VariablePCATransform //; // //; // Linear interpolation class //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariablePCATransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariablePCATransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariablePCATransform.h:3,Modifiability,Variab,Variable,3,"// Variable transformation: Principal Value Composition",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariablePCATransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariablePCATransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableRearrangeTransform.h:188,Deployability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableRearrangeTransform *; * *; * *; * Description: *; * rearrangement of input variables *; * *; * Authors (alphabetical): *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableRearrangeTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableRearrangeTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableRearrangeTransform.h:188,Integrability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableRearrangeTransform *; * *; * *; * Description: *; * rearrangement of input variables *; * *; * Authors (alphabetical): *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableRearrangeTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableRearrangeTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableRearrangeTransform.h:270,Modifiability,Variab,VariableRearrangeTransform,270,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableRearrangeTransform *; * *; * *; * Description: *; * rearrangement of input variables *; * *; * Authors (alphabetical): *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableRearrangeTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableRearrangeTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableRearrangeTransform.h:353,Modifiability,variab,variables,353,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableRearrangeTransform *; * *; * *; * Description: *; * rearrangement of input variables *; * *; * Authors (alphabetical): *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableRearrangeTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableRearrangeTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableRearrangeTransform.h:86,Modifiability,Variab,VariableRearrangeTransform,86,"//////////////////////////////////////////////////////////////////////////; // //; // VariableRearrangeTransform //; // //; // rearrangement of input variables //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableRearrangeTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableRearrangeTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableRearrangeTransform.h:150,Modifiability,variab,variables,150,"//////////////////////////////////////////////////////////////////////////; // //; // VariableRearrangeTransform //; // //; // rearrangement of input variables //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableRearrangeTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableRearrangeTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableRearrangeTransform.h:3,Modifiability,Variab,Variable,3,"// Variable transformation: normalization",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableRearrangeTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableRearrangeTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransform.h:218,Deployability,integrat,integrated,218,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer,Joerg Stelzer, Helge Voss, Omar Zapata; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableTransformBase *; * *; * *; * Description: *; * Pre-transformation of input variables (base class) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransform.h:218,Integrability,integrat,integrated,218,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer,Joerg Stelzer, Helge Voss, Omar Zapata; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableTransformBase *; * *; * *; * Description: *; * Pre-transformation of input variables (base class) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransform.h:300,Modifiability,Variab,VariableTransformBase,300,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer,Joerg Stelzer, Helge Voss, Omar Zapata; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableTransformBase *; * *; * *; * Description: *; * Pre-transformation of input variables (base class) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransform.h:383,Modifiability,variab,variables,383,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer,Joerg Stelzer, Helge Voss, Omar Zapata; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableTransformBase *; * *; * *; * Description: *; * Pre-transformation of input variables (base class) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransform.h:86,Modifiability,Variab,VariableTransform,86,"//////////////////////////////////////////////////////////////////////////; // //; // VariableTransform //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableTransform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransform.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h:205,Deployability,integrat,integrated,205,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer,Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableTransformBase *; * *; * *; * Description: *; * Pre-transformation of input variables (base class) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableTransformBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h:205,Integrability,integrat,integrated,205,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer,Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableTransformBase *; * *; * *; * Description: *; * Pre-transformation of input variables (base class) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableTransformBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h:287,Modifiability,Variab,VariableTransformBase,287,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer,Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableTransformBase *; * *; * *; * Description: *; * Pre-transformation of input variables (base class) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableTransformBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h:370,Modifiability,variab,variables,370,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer,Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableTransformBase *; * *; * *; * Description: *; * Pre-transformation of input variables (base class) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableTransformBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h:86,Modifiability,Variab,VariableTransformBase,86,"//////////////////////////////////////////////////////////////////////////; // //; // VariableTransformBase //; // //; // Linear interpolation class //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableTransformBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h:3,Security,access,accessors,3,"// accessors",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableTransformBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h:3,Modifiability,variab,variable,3,"// variable selection",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableTransformBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h:50,Modifiability,variab,variable,50,"///< holds the current back-transformed event; // variable selection",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableTransformBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h:9,Modifiability,variab,variables,9,"///< get variables/targets/spectators",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableTransformBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h:9,Modifiability,variab,variables,9,"///< put variables/targets/spectators",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableTransformBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h:21,Modifiability,variab,variables,21,"///< normalise input variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableTransformBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h:15,Modifiability,variab,variables,15,"///< number of variables",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableTransformBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h:11,Modifiability,variab,variables,11,"///< event variables [saved to weight file]",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableTransformBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h:13,Modifiability,variab,variable,13,"///< true if variable types have been counted already",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableTransformBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h:15,Modifiability,variab,variables,15,"///< number of variables to be transformed",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableTransformBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h:23,Modifiability,variab,variables,23,"///< if true, sort the variables into the order as defined by the user at the var definition; ///< if false, sort the variables according to the order given for the var transformation",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableTransformBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h:118,Modifiability,variab,variables,118,"///< if true, sort the variables into the order as defined by the user at the var definition; ///< if false, sort the variables according to the order given for the var transformation",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableTransformBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h:6,Integrability,message,message,6,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableTransformBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h:14,Testability,log,logger,14,"///<! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableTransformBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h:18,Modifiability,variab,variable,18,"// Base class for variable transformations",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VariableTransformBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VarTransformHandler.h:110,Deployability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VarTransformHandler *; * *; * *; * Description: *; * Implementation of unsupervised variable transformation methods *; * *; * Authors (alphabetical): *; * Abhinav Moudgil <abhinav.moudgil@research.iiit.ac.in> - IIIT-H, India *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VarTransformHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VarTransformHandler.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VarTransformHandler.h:110,Integrability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VarTransformHandler *; * *; * *; * Description: *; * Implementation of unsupervised variable transformation methods *; * *; * Authors (alphabetical): *; * Abhinav Moudgil <abhinav.moudgil@research.iiit.ac.in> - IIIT-H, India *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VarTransformHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VarTransformHandler.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VarTransformHandler.h:276,Modifiability,variab,variable,276,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VarTransformHandler *; * *; * *; * Description: *; * Implementation of unsupervised variable transformation methods *; * *; * Authors (alphabetical): *; * Abhinav Moudgil <abhinav.moudgil@research.iiit.ac.in> - IIIT-H, India *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VarTransformHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VarTransformHandler.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VarTransformHandler.h:4,Integrability,message,message,4,"//! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VarTransformHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VarTransformHandler.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VarTransformHandler.h:12,Testability,log,logger,12,"//! message logger",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/VarTransformHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VarTransformHandler.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Version.h:240,Deployability,integrat,integrated,240,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Jan Therhaag, Eckhard von Toerne, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Version *; * *; * *; * Description: *; * Current TMVA Version - filled automatically during cvs tagging *; * by python script development/tmvaTag.py *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <therhaag@physik.uni-bonn.de> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, GER *; * *; * Copyright (c) 2005-2010, *; * Regents of CERN (Switzerland), *; * University of Bonn (Germany), *; * University of Heidelberg (Germany), *; * University of Victoria (Canada) *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Version.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Version.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Version.h:240,Integrability,integrat,integrated,240,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Jan Therhaag, Eckhard von Toerne, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Version *; * *; * *; * Description: *; * Current TMVA Version - filled automatically during cvs tagging *; * by python script development/tmvaTag.py *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <therhaag@physik.uni-bonn.de> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, GER *; * *; * Copyright (c) 2005-2010, *; * Regents of CERN (Switzerland), *; * University of Bonn (Germany), *; * University of Heidelberg (Germany), *; * University of Victoria (Canada) *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Version.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Version.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Volume.h:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Volume *; * *; * *; * Description: *; * Volume for BinarySearchTree *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Volume.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Volume.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Volume.h:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Volume *; * *; * *; * Description: *; * Volume for BinarySearchTree *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Volume.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Volume.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Volume.h:171,Modifiability,variab,variable,171,"//////////////////////////////////////////////////////////////////////////; // //; // Volume //; // //; // Volume for BinarySearchTree //; // //; // volume element: cubic variable space beteen upper and lower bonds of //; // nvar-dimensional variable space //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Volume.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Volume.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Volume.h:242,Modifiability,variab,variable,242,"//////////////////////////////////////////////////////////////////////////; // //; // Volume //; // //; // Volume for BinarySearchTree //; // //; // volume element: cubic variable space beteen upper and lower bonds of //; // nvar-dimensional variable space //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Volume.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Volume.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Volume.h:16,Security,access,access,16,"// allow direct access for better speed",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/Volume.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Volume.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adadelta.h:167,Deployability,integrat,integrated,167,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TAdadelta *; * *; * *; * Description: *; * Adadelta Optimizer Class *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adadelta.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adadelta.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adadelta.h:167,Integrability,integrat,integrated,167,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TAdadelta *; * *; * *; * Description: *; * Adadelta Optimizer Class *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adadelta.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adadelta.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adadelta.h:301,Performance,Optimiz,Optimizer,301,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TAdadelta *; * *; * *; * Description: *; * Adadelta Optimizer Class *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adadelta.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adadelta.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adadelta.h:33,Performance,Optimiz,Optimizer,33,/** \class TAdadelta; * Adadelta Optimizer class; *; * This class represents the Adadelta Optimizer.; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adadelta.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adadelta.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adadelta.h:90,Performance,Optimiz,Optimizer,90,/** \class TAdadelta; * Adadelta Optimizer class; *; * This class represents the Adadelta Optimizer.; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adadelta.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adadelta.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adadelta.h:34,Performance,optimiz,optimizer,34,"///< The Rho constant used by the optimizer.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adadelta.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adadelta.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adadelta.h:32,Safety,avoid,avoid,32,"///< The Smoothing term used to avoid division by zero.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adadelta.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adadelta.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adadelta.h:60,Deployability,update,updates,60,"///< The accumulation of the square of the past weight; /// updates associated with the deep net.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adadelta.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adadelta.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adadelta.h:58,Deployability,update,updates,58,"///< The accumulation of the square of the past bias; /// updates associated with the deep net.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adadelta.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adadelta.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adadelta.h:81,Deployability,Update,Update,81,"///< working tensor used to keep a temporary copy of bias or bias gradients; /*! Update the weights, given the current weight gradients. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adadelta.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adadelta.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adadelta.h:4,Deployability,Update,Update,4,"/*! Update the biases, given the current bias gradients. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adadelta.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adadelta.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adadelta.h:24,Performance,Optimiz,Optimizer,24,"//; //; // The Adadelta Optimizer Class - Implementation; //_________________________________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adadelta.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adadelta.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adadelta.h:40,Deployability,update,updates,40,"// reuse the work tensor for the weight updates now",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adadelta.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adadelta.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adadelta.h:19,Usability,learn,learningRate,19,"// theta = theta - learningRate * currentWeightUpdates",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adadelta.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adadelta.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adadelta.h:19,Usability,learn,learningRate,19,"// theta = theta - learningRate * currentBiasUpdates",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adadelta.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adadelta.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adagrad.h:167,Deployability,integrat,integrated,167,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TAdagrad *; * *; * *; * Description: *; * Adagrad Optimizer Class *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adagrad.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adagrad.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adagrad.h:167,Integrability,integrat,integrated,167,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TAdagrad *; * *; * *; * Description: *; * Adagrad Optimizer Class *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adagrad.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adagrad.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adagrad.h:299,Performance,Optimiz,Optimizer,299,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TAdagrad *; * *; * *; * Description: *; * Adagrad Optimizer Class *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adagrad.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adagrad.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adagrad.h:31,Performance,Optimiz,Optimizer,31,/** \class TAdagrad; * Adagrad Optimizer class; *; * This class represents the Adagrad Optimizer.; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adagrad.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adagrad.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adagrad.h:87,Performance,Optimiz,Optimizer,87,/** \class TAdagrad; * Adagrad Optimizer class; *; * This class represents the Adagrad Optimizer.; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adagrad.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adagrad.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adagrad.h:32,Safety,avoid,avoid,32,"///< The Smoothing term used to avoid division by zero.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adagrad.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adagrad.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adagrad.h:81,Deployability,Update,Update,81,"///< working tensor used to keep a temporary copy of bias or bias gradients; /*! Update the weights, given the current weight gradients. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adagrad.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adagrad.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adagrad.h:4,Deployability,Update,Update,4,"/*! Update the biases, given the current bias gradients. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adagrad.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adagrad.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adagrad.h:23,Performance,Optimiz,Optimizer,23,"//; //; // The Adagrad Optimizer Class - Implementation; //_________________________________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adagrad.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adagrad.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adagrad.h:45,Usability,learn,learningRate,45,"// updating the weights.; // theta = theta - learningRate * currentWeightGradients / (sqrt(Vt + epsilon))",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adagrad.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adagrad.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adagrad.h:40,Deployability,update,updates,40,"// reuse the work tensor for the weight updates now",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adagrad.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adagrad.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adagrad.h:44,Usability,learn,learningRate,44,"// updating the biases.; // theta = theta - learningRate * currentBiasGradients / (sqrt(Vt + epsilon))",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adagrad.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adagrad.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adam.h:167,Deployability,integrat,integrated,167,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TAdam *; * *; * *; * Description: *; * Adam Optimizer Class *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adam.h:167,Integrability,integrat,integrated,167,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TAdam *; * *; * *; * Description: *; * Adam Optimizer Class *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adam.h:293,Performance,Optimiz,Optimizer,293,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TAdam *; * *; * *; * Description: *; * Adam Optimizer Class *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adam.h:25,Performance,Optimiz,Optimizer,25,/** \class TAdam; * Adam Optimizer class; *; * This class represents the Adam Optimizer.; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adam.h:78,Performance,Optimiz,Optimizer,78,/** \class TAdam; * Adam Optimizer class; *; * This class represents the Adam Optimizer.; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adam.h:36,Performance,optimiz,optimizer,36,"///< The Beta1 constant used by the optimizer.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adam.h:36,Performance,optimiz,optimizer,36,"///< The Beta2 constant used by the optimizer.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adam.h:32,Safety,avoid,avoid,32,"///< The Smoothing term used to avoid division by zero.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adam.h:114,Deployability,Update,Update,114,"///< The decaying average of the second moment of the past; /// bias gradients associated with the deep net.; /*! Update the weights, given the current weight gradients. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adam.h:4,Deployability,Update,Update,4,"/*! Update the biases, given the current bias gradients. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adam.h:20,Performance,Optimiz,Optimizer,20,"//; //; // The Adam Optimizer Class - Implementation; //_________________________________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adam.h:3,Deployability,update,update,3,"// update of weights using Adam algorithm; // we use the formulation defined before section 2.1 in the original paper; // 'Adam: A method for stochastic optimization, D. Kingma, J. Ba, see https://arxiv.org/abs/1412.6980",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adam.h:153,Performance,optimiz,optimization,153,"// update of weights using Adam algorithm; // we use the formulation defined before section 2.1 in the original paper; // 'Adam: A method for stochastic optimization, D. Kingma, J. Ba, see https://arxiv.org/abs/1412.6980",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adam.h:11,Usability,learn,learningRate,11,"// alpha = learningRate * sqrt(1 - beta2^t) / (1-beta1^t)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adam.h:9,Deployability,update,update,9,"/// Adam update of first and second momentum of the weights",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adam.h:11,Usability,learn,learningRate,11,"// alpha = learningRate * sqrt(1 - beta2^t) / (1-beta1^t)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Adam.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adam.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/BatchNormLayer.h:140,Deployability,integrat,integrated,140,"// Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TBatchNormLayer *; * *; * *; * Description: *; * Dense Layer Class *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/BatchNormLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/BatchNormLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/BatchNormLayer.h:140,Integrability,integrat,integrated,140,"// Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TBatchNormLayer *; * *; * *; * Description: *; * Dense Layer Class *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/BatchNormLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/BatchNormLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/BatchNormLayer.h:230,Modifiability,variab,variable,230,"/** \class TBatchNormLayer. Layer implementing Batch Normalization. The input from each batch are normalized during training to have zero mean and unit variance; and they are then scaled by two parameter, different for each input variable:; - a scale factor gamma; - an offset beta. In addition a running batch mean and variance is computed and stored in the class; During inference the inputs are not normalized using the batch mean but the previously computed; at running mean and variance; If momentum is in [0,1) the running mean and variances are the exponential averages using the momentum value; running_mean = momentum * running_mean + (1-momentum) * batch_mean; If instead momentum<1 the cumulative average is computed; running_mean = (nb/(nb+1) * running_mean + 1/(nb+1) * batch_mean. See more at [https://arxiv.org/pdf/1502.03167v3.pdf]; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/BatchNormLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/BatchNormLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/BatchNormLayer.h:3,Performance,cache,cached,3,"// cached tensor used for Cudnn to get correct shape",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/BatchNormLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/BatchNormLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/BatchNormLayer.h:3,Performance,cache,cached,3,"// cached reshaped data tensor; // counter of trained batches for computing testing and variance means",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/BatchNormLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/BatchNormLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/BatchNormLayer.h:76,Testability,test,testing,76,"// cached reshaped data tensor; // counter of trained batches for computing testing and variance means",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/BatchNormLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/BatchNormLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/BatchNormLayer.h:3,Deployability,release,release,3,"// release descriptors",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/BatchNormLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/BatchNormLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DataLoader.h:500,Performance,load,loader,500,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 08/08/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /////////////////////////////////////////////////////////////////////; // Generic data loader for neural network input data. Provides a //; // high level abstraction for the transfer of training data to the //; // device. //; /////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DataLoader.h:155,Security,access,accessed,155,"/** TBatch; *; * Class representing training batches consisting of a matrix of input data; * and a matrix of output data. The input and output data can be accessed using; * the GetInput() and GetOutput() member functions.; *; * \tparam AArchitecture The underlying architecture.; */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DataLoader.h:25,Usability,Simpl,Simple,25,/** TBatchIterator; *; * Simple iterator class for the iterations over the training batches in; * a given data set represented by a TDataLoader object.; *; * \tparam AData The input data type.; * \tparam AArchitecture The underlying architecture type.; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DataLoader.h:151,Integrability,rout,routine,151,"/** Shuffle the order of the samples in the batch. The shuffling is indirect,; * i.e. only the indices are shuffled. No input data is moved by this; * routine. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:172,Deployability,integrat,integrated,172,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TDeepNet *; * *; * *; * Description: *; * Deep Neural Network *; * *; * Authors (alphabetical): *; * Akshay Vashistha <akshayvashistha1995@gmail.com> - CERN, Switzerland *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * Saurav Shekhar <sauravshekhar01@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:172,Integrability,integrat,integrated,172,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TDeepNet *; * *; * *; * Description: *; * Deep Neural Network *; * *; * Authors (alphabetical): *; * Akshay Vashistha <akshayvashistha1995@gmail.com> - CERN, Switzerland *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * Saurav Shekhar <sauravshekhar01@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:9,Modifiability,layers,layers,9,"///< The layers consisting the DeepNet",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:46,Testability,test,testing,46,"///< The depth of the batch used for training/testing.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:47,Testability,test,testing,47,"///< The height of the batch used for training/testing.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:46,Testability,test,testing,46,"///< The width of the batch used for training/testing.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:193,Modifiability,layers,layers,193,"/*! Function for adding Compression layer in the Deep Neural Network,; * with given number of visibleUnits and hiddenUnits. It compresses the input units; * taking weights and biases from prev layers. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:198,Modifiability,layers,layers,198,"/*! Function for adding Reconstruction layer in the Deep Neural Network,; * with given number of visibleUnits and hiddenUnits. It reconstructs the input units; * taking weights and biases from prev layers. Same corruptionLevel and dropoutProbability; * must be passed as in corruptionLayer. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:24,Testability,log,logisticRegressionLayer,24,"/*! Function for adding logisticRegressionLayer in the Deep Neural Network,; * with given number of inputUnits and outputUnits. It classifies the outputUnits. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:24,Testability,log,logisticRegressionLayer,24,"/*! Function for adding logisticRegressionLayer in the Deep Neural Network, when; * the layer is already created. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:111,Modifiability,layers,layers,111,"/* To train the Deep AutoEncoder network with required number of Corruption, Compression and Reconstruction; * layers. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:113,Testability,Log,Logistic,113,"/* To classify outputLabel in Deep AutoEncoder. Should be used after PreTrain if required.; * Currently, it used Logistic Regression Layer. Otherwise we can use any other classification layer also.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:136,Deployability,update,updates,136,"/*! Function for parallel backward in the vector of deep nets, where the master; * net is the net calling this function and getting the updates from the other nets.; * There is one batch for one deep net.*/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:136,Deployability,update,updates,136,"/*! Function for parallel backward in the vector of deep nets, where the master; * net is the net calling this function and getting the updates from the other nets,; * following the momentum strategy. There is one batch for one deep net.*/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:136,Deployability,update,updates,136,"/*! Function for parallel backward in the vector of deep nets, where the master; * net is the net calling this function and getting the updates from the other nets,; * following the Nestorov momentum strategy. There is one batch for one deep net.*/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:54,Deployability,update,update,54,// endif use parallel deepnet; /*! Function that will update the weights and biases in the layers that; * contain weights and biases. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:91,Modifiability,layers,layers,91,// endif use parallel deepnet; /*! Function that will update the weights and biases in the layers that; * contain weights and biases. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:4,Safety,Predict,Prediction,4,/*! Prediction based on activations stored in the last layer. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:4,Safety,Predict,Prediction,4,"/*! Prediction for the given inputs, based on what network learned. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:59,Usability,learn,learned,59,"/*! Prediction for the given inputs, based on what network learned. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:35,Modifiability,layers,layers,35,/*! Get the layer in the vector of layers at position i */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:29,Modifiability,layers,layers,29,/* Return a reference to the layers. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:15,Modifiability,layers,layers,15,/*! Remove all layers from the network. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:138,Modifiability,layers,layers,138,"/*! Setters */; // FIXME many of these won't work as the data structure storing activations; // and gradients have not changed in all the layers, also params in layers; // have not changed either",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:161,Modifiability,layers,layers,161,"/*! Setters */; // FIXME many of these won't work as the data structure storing activations; // and gradients have not changed in all the layers, also params in layers; // have not changed either",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:14,Modifiability,layers,layers,14,"// Relese the layers memory",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:7,Modifiability,variab,variables,7,"// All variables defining a convolutional layer",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:129,Modifiability,layers,layers,129,"// this is the shape of the output tensor (it is columnmajor by default); // and it is normally (depth, hw, bsize) and for dense layers (bsize, w, 1)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:9,Modifiability,layers,layers,9,"// three layers are added, now pointer is on third layer",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:9,Modifiability,layers,layers,9,"// three layers are added, now pointer is on third layer",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:8,Testability,Log,Logistic,8,"// only Logistic Regression Layer",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:38,Modifiability,layers,layers,38,"// Evaluate the gradients of the last layers in each deep net",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:21,Availability,error,error,21,"// Backpropagate the error in i'th layer of each deep net",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:3,Deployability,Update,Update,3,"// Update and copy",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:38,Modifiability,layers,layers,38,"// Evaluate the gradients of the last layers in each deep net",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:21,Availability,error,error,21,"// Backpropagate the error in i'th layer of each deep net",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:38,Modifiability,layers,layers,38,"// Evaluate the gradients of the last layers in each deep net",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:21,Availability,error,error,21,"// Backpropagate the error in i'th layer of each deep net",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:19,Modifiability,Layers,Layers,19,"//std::cout << ""\t Layers: "" << std::endl;",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DeepNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DenseLayer.h:140,Deployability,integrat,integrated,140,"// Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TDenseLayer *; * *; * *; * Description: *; * Dense Layer Class *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DenseLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DenseLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DenseLayer.h:140,Integrability,integrat,integrated,140,"// Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TDenseLayer *; * *; * *; * Description: *; * Dense Layer Class *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DenseLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DenseLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DenseLayer.h:334,Energy Efficiency,allocate,allocates,334,"/** \class TDenseLayer. Generic layer class. This generic layer class represents a dense layer of a neural network with; a given width n and activation function f. The activation function of each; layer is given by \f$\mathbf{u} = \mathbf{W}\mathbf{x} + \boldsymbol{\theta}\f$. In addition to the weight and bias matrices, each layer allocates memory; for its activations and the corresponding input tensor before evaluation of; the activation function as well as the gradients of the weights and biases. The layer provides member functions for the forward propagation of; activations through the given layer.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DenseLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DenseLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DenseLayer.h:3,Deployability,release,release,3,"// release activation descriptor",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DenseLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DenseLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:172,Deployability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TDLGradientDescent *; * *; * *; * Description: *; * Deel Learning Minimizers *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:172,Integrability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TDLGradientDescent *; * *; * *; * Description: *; * Deel Learning Minimizers *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:311,Usability,Learn,Learning,311,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TDLGradientDescent *; * *; * *; * Description: *; * Deel Learning Minimizers *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:659,Availability,error,error,659,"/*** \class TDLGradientDescent; *; * Generic implementation of gradient descent minimization for the; * deep learning neural nets.; *; * The TDLGradientDescent class implements an architecture, input data and; * deep learning neural network type independent implementation of the gradient; * descent minimization algorithm.; *; * This is provided by the Step(...), StepMomentum(...) and; * StepNesterov(...) functions that perform a single minimization step.; *; * The main training characteristics are defined by the provided learning rate,; * the test interval, and the convergence steps required for convergence. The; * test interval defines how often the error on the validation set is computed,; * and the values with which the step counter is increased each time the; * HasConverged() member function is called. A convergence step is defined as; * a step in which the test error is NOT less than 0.999 times the current; * minimal test error that has been reached. If between two subsequent calls; * to HasConverged(Double_t) the test error has not been sufficiently reduced; * it is assumed that a number of convergence steps equal to the test interval; * has been performed.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:879,Availability,error,error,879,"/*** \class TDLGradientDescent; *; * Generic implementation of gradient descent minimization for the; * deep learning neural nets.; *; * The TDLGradientDescent class implements an architecture, input data and; * deep learning neural network type independent implementation of the gradient; * descent minimization algorithm.; *; * This is provided by the Step(...), StepMomentum(...) and; * StepNesterov(...) functions that perform a single minimization step.; *; * The main training characteristics are defined by the provided learning rate,; * the test interval, and the convergence steps required for convergence. The; * test interval defines how often the error on the validation set is computed,; * and the values with which the step counter is increased each time the; * HasConverged() member function is called. A convergence step is defined as; * a step in which the test error is NOT less than 0.999 times the current; * minimal test error that has been reached. If between two subsequent calls; * to HasConverged(Double_t) the test error has not been sufficiently reduced; * it is assumed that a number of convergence steps equal to the test interval; * has been performed.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:942,Availability,error,error,942,"/*** \class TDLGradientDescent; *; * Generic implementation of gradient descent minimization for the; * deep learning neural nets.; *; * The TDLGradientDescent class implements an architecture, input data and; * deep learning neural network type independent implementation of the gradient; * descent minimization algorithm.; *; * This is provided by the Step(...), StepMomentum(...) and; * StepNesterov(...) functions that perform a single minimization step.; *; * The main training characteristics are defined by the provided learning rate,; * the test interval, and the convergence steps required for convergence. The; * test interval defines how often the error on the validation set is computed,; * and the values with which the step counter is increased each time the; * HasConverged() member function is called. A convergence step is defined as; * a step in which the test error is NOT less than 0.999 times the current; * minimal test error that has been reached. If between two subsequent calls; * to HasConverged(Double_t) the test error has not been sufficiently reduced; * it is assumed that a number of convergence steps equal to the test interval; * has been performed.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:1041,Availability,error,error,1041,"/*** \class TDLGradientDescent; *; * Generic implementation of gradient descent minimization for the; * deep learning neural nets.; *; * The TDLGradientDescent class implements an architecture, input data and; * deep learning neural network type independent implementation of the gradient; * descent minimization algorithm.; *; * This is provided by the Step(...), StepMomentum(...) and; * StepNesterov(...) functions that perform a single minimization step.; *; * The main training characteristics are defined by the provided learning rate,; * the test interval, and the convergence steps required for convergence. The; * test interval defines how often the error on the validation set is computed,; * and the values with which the step counter is increased each time the; * HasConverged() member function is called. A convergence step is defined as; * a step in which the test error is NOT less than 0.999 times the current; * minimal test error that has been reached. If between two subsequent calls; * to HasConverged(Double_t) the test error has not been sufficiently reduced; * it is assumed that a number of convergence steps equal to the test interval; * has been performed.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:1073,Energy Efficiency,reduce,reduced,1073,"/*** \class TDLGradientDescent; *; * Generic implementation of gradient descent minimization for the; * deep learning neural nets.; *; * The TDLGradientDescent class implements an architecture, input data and; * deep learning neural network type independent implementation of the gradient; * descent minimization algorithm.; *; * This is provided by the Step(...), StepMomentum(...) and; * StepNesterov(...) functions that perform a single minimization step.; *; * The main training characteristics are defined by the provided learning rate,; * the test interval, and the convergence steps required for convergence. The; * test interval defines how often the error on the validation set is computed,; * and the values with which the step counter is increased each time the; * HasConverged() member function is called. A convergence step is defined as; * a step in which the test error is NOT less than 0.999 times the current; * minimal test error that has been reached. If between two subsequent calls; * to HasConverged(Double_t) the test error has not been sufficiently reduced; * it is assumed that a number of convergence steps equal to the test interval; * has been performed.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:423,Performance,perform,perform,423,"/*** \class TDLGradientDescent; *; * Generic implementation of gradient descent minimization for the; * deep learning neural nets.; *; * The TDLGradientDescent class implements an architecture, input data and; * deep learning neural network type independent implementation of the gradient; * descent minimization algorithm.; *; * This is provided by the Step(...), StepMomentum(...) and; * StepNesterov(...) functions that perform a single minimization step.; *; * The main training characteristics are defined by the provided learning rate,; * the test interval, and the convergence steps required for convergence. The; * test interval defines how often the error on the validation set is computed,; * and the values with which the step counter is increased each time the; * HasConverged() member function is called. A convergence step is defined as; * a step in which the test error is NOT less than 0.999 times the current; * minimal test error that has been reached. If between two subsequent calls; * to HasConverged(Double_t) the test error has not been sufficiently reduced; * it is assumed that a number of convergence steps equal to the test interval; * has been performed.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:1172,Performance,perform,performed,1172,"/*** \class TDLGradientDescent; *; * Generic implementation of gradient descent minimization for the; * deep learning neural nets.; *; * The TDLGradientDescent class implements an architecture, input data and; * deep learning neural network type independent implementation of the gradient; * descent minimization algorithm.; *; * This is provided by the Step(...), StepMomentum(...) and; * StepNesterov(...) functions that perform a single minimization step.; *; * The main training characteristics are defined by the provided learning rate,; * the test interval, and the convergence steps required for convergence. The; * test interval defines how often the error on the validation set is computed,; * and the values with which the step counter is increased each time the; * HasConverged() member function is called. A convergence step is defined as; * a step in which the test error is NOT less than 0.999 times the current; * minimal test error that has been reached. If between two subsequent calls; * to HasConverged(Double_t) the test error has not been sufficiently reduced; * it is assumed that a number of convergence steps equal to the test interval; * has been performed.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:672,Security,validat,validation,672,"/*** \class TDLGradientDescent; *; * Generic implementation of gradient descent minimization for the; * deep learning neural nets.; *; * The TDLGradientDescent class implements an architecture, input data and; * deep learning neural network type independent implementation of the gradient; * descent minimization algorithm.; *; * This is provided by the Step(...), StepMomentum(...) and; * StepNesterov(...) functions that perform a single minimization step.; *; * The main training characteristics are defined by the provided learning rate,; * the test interval, and the convergence steps required for convergence. The; * test interval defines how often the error on the validation set is computed,; * and the values with which the step counter is increased each time the; * HasConverged() member function is called. A convergence step is defined as; * a step in which the test error is NOT less than 0.999 times the current; * minimal test error that has been reached. If between two subsequent calls; * to HasConverged(Double_t) the test error has not been sufficiently reduced; * it is assumed that a number of convergence steps equal to the test interval; * has been performed.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:549,Testability,test,test,549,"/*** \class TDLGradientDescent; *; * Generic implementation of gradient descent minimization for the; * deep learning neural nets.; *; * The TDLGradientDescent class implements an architecture, input data and; * deep learning neural network type independent implementation of the gradient; * descent minimization algorithm.; *; * This is provided by the Step(...), StepMomentum(...) and; * StepNesterov(...) functions that perform a single minimization step.; *; * The main training characteristics are defined by the provided learning rate,; * the test interval, and the convergence steps required for convergence. The; * test interval defines how often the error on the validation set is computed,; * and the values with which the step counter is increased each time the; * HasConverged() member function is called. A convergence step is defined as; * a step in which the test error is NOT less than 0.999 times the current; * minimal test error that has been reached. If between two subsequent calls; * to HasConverged(Double_t) the test error has not been sufficiently reduced; * it is assumed that a number of convergence steps equal to the test interval; * has been performed.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:623,Testability,test,test,623,"/*** \class TDLGradientDescent; *; * Generic implementation of gradient descent minimization for the; * deep learning neural nets.; *; * The TDLGradientDescent class implements an architecture, input data and; * deep learning neural network type independent implementation of the gradient; * descent minimization algorithm.; *; * This is provided by the Step(...), StepMomentum(...) and; * StepNesterov(...) functions that perform a single minimization step.; *; * The main training characteristics are defined by the provided learning rate,; * the test interval, and the convergence steps required for convergence. The; * test interval defines how often the error on the validation set is computed,; * and the values with which the step counter is increased each time the; * HasConverged() member function is called. A convergence step is defined as; * a step in which the test error is NOT less than 0.999 times the current; * minimal test error that has been reached. If between two subsequent calls; * to HasConverged(Double_t) the test error has not been sufficiently reduced; * it is assumed that a number of convergence steps equal to the test interval; * has been performed.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:874,Testability,test,test,874,"/*** \class TDLGradientDescent; *; * Generic implementation of gradient descent minimization for the; * deep learning neural nets.; *; * The TDLGradientDescent class implements an architecture, input data and; * deep learning neural network type independent implementation of the gradient; * descent minimization algorithm.; *; * This is provided by the Step(...), StepMomentum(...) and; * StepNesterov(...) functions that perform a single minimization step.; *; * The main training characteristics are defined by the provided learning rate,; * the test interval, and the convergence steps required for convergence. The; * test interval defines how often the error on the validation set is computed,; * and the values with which the step counter is increased each time the; * HasConverged() member function is called. A convergence step is defined as; * a step in which the test error is NOT less than 0.999 times the current; * minimal test error that has been reached. If between two subsequent calls; * to HasConverged(Double_t) the test error has not been sufficiently reduced; * it is assumed that a number of convergence steps equal to the test interval; * has been performed.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:937,Testability,test,test,937,"/*** \class TDLGradientDescent; *; * Generic implementation of gradient descent minimization for the; * deep learning neural nets.; *; * The TDLGradientDescent class implements an architecture, input data and; * deep learning neural network type independent implementation of the gradient; * descent minimization algorithm.; *; * This is provided by the Step(...), StepMomentum(...) and; * StepNesterov(...) functions that perform a single minimization step.; *; * The main training characteristics are defined by the provided learning rate,; * the test interval, and the convergence steps required for convergence. The; * test interval defines how often the error on the validation set is computed,; * and the values with which the step counter is increased each time the; * HasConverged() member function is called. A convergence step is defined as; * a step in which the test error is NOT less than 0.999 times the current; * minimal test error that has been reached. If between two subsequent calls; * to HasConverged(Double_t) the test error has not been sufficiently reduced; * it is assumed that a number of convergence steps equal to the test interval; * has been performed.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:1036,Testability,test,test,1036,"/*** \class TDLGradientDescent; *; * Generic implementation of gradient descent minimization for the; * deep learning neural nets.; *; * The TDLGradientDescent class implements an architecture, input data and; * deep learning neural network type independent implementation of the gradient; * descent minimization algorithm.; *; * This is provided by the Step(...), StepMomentum(...) and; * StepNesterov(...) functions that perform a single minimization step.; *; * The main training characteristics are defined by the provided learning rate,; * the test interval, and the convergence steps required for convergence. The; * test interval defines how often the error on the validation set is computed,; * and the values with which the step counter is increased each time the; * HasConverged() member function is called. A convergence step is defined as; * a step in which the test error is NOT less than 0.999 times the current; * minimal test error that has been reached. If between two subsequent calls; * to HasConverged(Double_t) the test error has not been sufficiently reduced; * it is assumed that a number of convergence steps equal to the test interval; * has been performed.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:1146,Testability,test,test,1146,"/*** \class TDLGradientDescent; *; * Generic implementation of gradient descent minimization for the; * deep learning neural nets.; *; * The TDLGradientDescent class implements an architecture, input data and; * deep learning neural network type independent implementation of the gradient; * descent minimization algorithm.; *; * This is provided by the Step(...), StepMomentum(...) and; * StepNesterov(...) functions that perform a single minimization step.; *; * The main training characteristics are defined by the provided learning rate,; * the test interval, and the convergence steps required for convergence. The; * test interval defines how often the error on the validation set is computed,; * and the values with which the step counter is increased each time the; * HasConverged() member function is called. A convergence step is defined as; * a step in which the test error is NOT less than 0.999 times the current; * minimal test error that has been reached. If between two subsequent calls; * to HasConverged(Double_t) the test error has not been sufficiently reduced; * it is assumed that a number of convergence steps equal to the test interval; * has been performed.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:109,Usability,learn,learning,109,"/*** \class TDLGradientDescent; *; * Generic implementation of gradient descent minimization for the; * deep learning neural nets.; *; * The TDLGradientDescent class implements an architecture, input data and; * deep learning neural network type independent implementation of the gradient; * descent minimization algorithm.; *; * This is provided by the Step(...), StepMomentum(...) and; * StepNesterov(...) functions that perform a single minimization step.; *; * The main training characteristics are defined by the provided learning rate,; * the test interval, and the convergence steps required for convergence. The; * test interval defines how often the error on the validation set is computed,; * and the values with which the step counter is increased each time the; * HasConverged() member function is called. A convergence step is defined as; * a step in which the test error is NOT less than 0.999 times the current; * minimal test error that has been reached. If between two subsequent calls; * to HasConverged(Double_t) the test error has not been sufficiently reduced; * it is assumed that a number of convergence steps equal to the test interval; * has been performed.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:217,Usability,learn,learning,217,"/*** \class TDLGradientDescent; *; * Generic implementation of gradient descent minimization for the; * deep learning neural nets.; *; * The TDLGradientDescent class implements an architecture, input data and; * deep learning neural network type independent implementation of the gradient; * descent minimization algorithm.; *; * This is provided by the Step(...), StepMomentum(...) and; * StepNesterov(...) functions that perform a single minimization step.; *; * The main training characteristics are defined by the provided learning rate,; * the test interval, and the convergence steps required for convergence. The; * test interval defines how often the error on the validation set is computed,; * and the values with which the step counter is increased each time the; * HasConverged() member function is called. A convergence step is defined as; * a step in which the test error is NOT less than 0.999 times the current; * minimal test error that has been reached. If between two subsequent calls; * to HasConverged(Double_t) the test error has not been sufficiently reduced; * it is assumed that a number of convergence steps equal to the test interval; * has been performed.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:527,Usability,learn,learning,527,"/*** \class TDLGradientDescent; *; * Generic implementation of gradient descent minimization for the; * deep learning neural nets.; *; * The TDLGradientDescent class implements an architecture, input data and; * deep learning neural network type independent implementation of the gradient; * descent minimization algorithm.; *; * This is provided by the Step(...), StepMomentum(...) and; * StepNesterov(...) functions that perform a single minimization step.; *; * The main training characteristics are defined by the provided learning rate,; * the test interval, and the convergence steps required for convergence. The; * test interval defines how often the error on the validation set is computed,; * and the values with which the step counter is increased each time the; * HasConverged() member function is called. A convergence step is defined as; * a step in which the test error is NOT less than 0.999 times the current; * minimal test error that has been reached. If between two subsequent calls; * to HasConverged(Double_t) the test error has not been sufficiently reduced; * it is assumed that a number of convergence steps equal to the test interval; * has been performed.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:21,Performance,perform,performed,21,"///< Number of steps performed in the current training session",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:79,Availability,error,error,79,"///< Number of training epochs without considerable; ///< decrease in the test error for convergence.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:74,Testability,test,test,74,"///< Number of training epochs without considerable; ///< decrease in the test error for convergence.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:87,Availability,error,error,87,"///< Current number of training epochs without; ///< considerable decrease in the test error.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:82,Testability,test,test,82,"///< Current number of training epochs without; ///< considerable decrease in the test error.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:46,Availability,error,error,46,"///< Interval for the computation of the test error.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:41,Testability,test,test,41,"///< Interval for the computation of the test error.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:38,Testability,test,test,38,"///< Holds the most recently computed test loss.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:5,Usability,Learn,Learning,5,"///< Learning rate \f$\alpha\f$",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:4,Performance,Perform,Perform,4,"/** Perform a single optimization step on a given batch. Propagates the input; matrix forward through the net, evaluates the loss and propagates the gradients; backward through the net. The computed gradients are scaled by the learning; rate \f$\alpha\f$ and subtracted from the weights and bias values of each; layer. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:21,Performance,optimiz,optimization,21,"/** Perform a single optimization step on a given batch. Propagates the input; matrix forward through the net, evaluates the loss and propagates the gradients; backward through the net. The computed gradients are scaled by the learning; rate \f$\alpha\f$ and subtracted from the weights and bias values of each; layer. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:227,Usability,learn,learning,227,"/** Perform a single optimization step on a given batch. Propagates the input; matrix forward through the net, evaluates the loss and propagates the gradients; backward through the net. The computed gradients are scaled by the learning; rate \f$\alpha\f$ and subtracted from the weights and bias values of each; layer. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:68,Integrability,synchroniz,synchronization,68,"/** Does not evaluate the loss and therefore not trigger a possible synchronization; * with the device. Trains the weights of each layer, but only the bias terms of; * the first layer for compatibility with the previous implementation. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:104,Integrability,synchroniz,synchronization,104,/** Same as Step(...) but also evaluate the loss on the given training data.; * Note that this requires synchronization between host and device. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:83,Integrability,synchroniz,synchronization,83,/** Similar to StepReducedWeights(...) but also evaluates the loss. May trigger; * synchronization with the device. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:4,Performance,Perform,Perform,4,/** Perform multiple optimization steps simultaneously. Performs the; * backprop algorithm on the input batches given in \p batches on; * the neural networks given in \p nets. The forward and backward propagation; * steps are executed in an interleaving manner in order to exploit potential; * batch-level parallelism for asynchronous device calls.; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:21,Performance,optimiz,optimization,21,/** Perform multiple optimization steps simultaneously. Performs the; * backprop algorithm on the input batches given in \p batches on; * the neural networks given in \p nets. The forward and backward propagation; * steps are executed in an interleaving manner in order to exploit potential; * batch-level parallelism for asynchronous device calls.; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:56,Performance,Perform,Performs,56,/** Perform multiple optimization steps simultaneously. Performs the; * backprop algorithm on the input batches given in \p batches on; * the neural networks given in \p nets. The forward and backward propagation; * steps are executed in an interleaving manner in order to exploit potential; * batch-level parallelism for asynchronous device calls.; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:56,Availability,error,error,56,/** Increases the minimization step counter by the test error evaluation; * period and uses the current internal value of the test error to; * determine if the minimization has converged. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:131,Availability,error,error,131,/** Increases the minimization step counter by the test error evaluation; * period and uses the current internal value of the test error to; * determine if the minimization has converged. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:51,Testability,test,test,51,/** Increases the minimization step counter by the test error evaluation; * period and uses the current internal value of the test error to; * determine if the minimization has converged. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:126,Testability,test,test,126,/** Increases the minimization step counter by the test error evaluation; * period and uses the current internal value of the test error to; * determine if the minimization has converged. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:56,Availability,error,error,56,/** Increases the minimization step counter by the test error evaluation; * period and uses the provided test error value to determine if the; * minimization has converged. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:110,Availability,error,error,110,/** Increases the minimization step counter by the test error evaluation; * period and uses the provided test error value to determine if the; * minimization has converged. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:51,Testability,test,test,51,/** Increases the minimization step counter by the test error evaluation; * period and uses the provided test error value to determine if the; * minimization has converged. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:105,Testability,test,test,105,/** Increases the minimization step counter by the test error evaluation; * period and uses the provided test error value to determine if the; * minimization has converged. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:38,Deployability,update,update,38,"// Make forward and backward pass and update the net afterwards",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:38,Deployability,update,update,38,"// Make forward and backward pass and update the net afterwards",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Functions.h:26,Performance,optimiz,optimizer,26,"/// Enum representing the optimizer used for training.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Functions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Functions.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h:172,Deployability,integrat,integrated,172,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TGeneralLayer *; * *; * *; * Description: *; * General Deep Neural Network Layer *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/GeneralLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h:172,Integrability,integrat,integrated,172,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TGeneralLayer *; * *; * *; * Description: *; * General Deep Neural Network Layer *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/GeneralLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h:103,Modifiability,layers,layers,103,/** \class VGeneralLayer; Generic General Layer class. This class represents the general class for all layers in the Deep Learning; Module.; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/GeneralLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h:122,Usability,Learn,Learning,122,/** \class VGeneralLayer; Generic General Layer class. This class represents the general class for all layers in the Deep Learning; Module.; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/GeneralLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h:23,Availability,error,error,23,/*! Backpropagates the error. Must only be called directly at the corresponding; * call to Forward(...). */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/GeneralLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h:4,Deployability,Update,Updates,4,"/*! Updates the weights and biases, given the learning rate */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/GeneralLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h:46,Usability,learn,learning,46,"/*! Updates the weights and biases, given the learning rate */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/GeneralLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h:4,Deployability,Update,Updates,4,"/*! Updates the weights, given the gradients and the learning rate, */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/GeneralLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h:53,Usability,learn,learning,53,"/*! Updates the weights, given the gradients and the learning rate, */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/GeneralLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h:4,Deployability,Update,Updates,4,"/*! Updates the biases, given the gradients and the learning rate. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/GeneralLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h:52,Usability,learn,learning,52,"/*! Updates the biases, given the gradients and the learning rate. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/GeneralLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h:4,Deployability,Update,Updates,4,"/*! Updates the weight gradients, given some other weight gradients and learning rate. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/GeneralLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h:72,Usability,learn,learning,72,"/*! Updates the weight gradients, given some other weight gradients and learning rate. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/GeneralLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h:4,Deployability,Update,Updates,4,"/*! Updates the bias gradients, given some other weight gradients and learning rate. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/GeneralLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h:70,Usability,learn,learning,70,"/*! Updates the bias gradients, given some other weight gradients and learning rate. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/GeneralLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h:47,Modifiability,layers,layers,47,/*! Set Dropout probability. Reimplemented for layers supporting droput */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/GeneralLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h:62,Usability,learn,learned,62,"// function to retrieve additional layer parameters which are learned during training but they are not weights; // an example are the mean and std of batch normalization layer",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/GeneralLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h:72,Modifiability,layers,layers,72,"// add constructor for weights with different shapes (e.g. in recurrent layers)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/GeneralLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h:2,Testability,assert,assert,2,"//assert(!std::is_same<Arch, Architecture_t>::value);; // copy weights from a different architecture- default generic implementation",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/GeneralLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Layer.h:543,Modifiability,layers,layers,543,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 20/06/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////; // Contains Layer and SharedLayer classes, that represent layers in //; // neural networks. //; //////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Layer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Layer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Layer.h:512,Energy Efficiency,allocate,allocates,512,"//______________________________________________________________________________; //; // The Layer Class; //______________________________________________________________________________; /** \class TLayer. Generic layer class. This generic layer class represents a layer of a neural network with; a given width n and activation function f. The activation; function of each layer is given by \f$\mathbf{u} =; \mathbf{W}\mathbf{x} + \boldsymbol{\theta}\f$. In addition to the weight and bias matrices, each layer allocates memory; for its activations and the corresponding first partial fDerivatives of; the activation function as well as the gradients of the fWeights and fBiases. The layer provides member functions for the forward propagation of; activations through the given layer.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Layer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Layer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Layer.h:261,Modifiability,layers,layers,261,"//______________________________________________________________________________; //; // The Shared Layer Class; //______________________________________________________________________________; /** \class TSharedLayer. Layer class width shared weight and bias layers. Like the Layer class only that weight matrices are shared between; different instances of the net, which can be used to implement; multithreading 'Hogwild' style.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Layer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Layer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Minimizers.h:1024,Availability,error,error,1024,"//______________________________________________________________________________; //; // Generic Gradient Descent Class; //______________________________________________________________________________; //; /*** \class TGradientDescent; *; * Generic implementation of gradient descent minimization.; *; * The TGradientDescent class implements an architecture and input data; * independent implementation of the gradient descent minimization algorithm.; *; * Provides Train(...) and TrainMomentum(...) functions that perform a complete; * training of a neural network. Those are mainly used for testing since for; * production a more fine grained control of the training process is desirable.; * This is provided by the Step(...), StepMomentum(...) and StepNesterov(...); * functions that perform a single minimization step.; *; * The main training characteristics are defined by the provided learning rate,; * the test interval, and the convergence steps required for convergence. The; * test interval defines how often the error on the validation set is computed,; * and the values with which the step counter is increased each time the; * HasConverged() member function is called. A convergence step is defined as; * a step in which the test error is NOT less than 0.999 times the current; * minimal test error that has been reached. If between two subsequent calls; * to HasConverged(Double_t) the test error has not been sufficiently reduced; * it is assumed that a number of convergence steps equal to the test interval; * has been performed.; *; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Minimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Minimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Minimizers.h:1244,Availability,error,error,1244,"//______________________________________________________________________________; //; // Generic Gradient Descent Class; //______________________________________________________________________________; //; /*** \class TGradientDescent; *; * Generic implementation of gradient descent minimization.; *; * The TGradientDescent class implements an architecture and input data; * independent implementation of the gradient descent minimization algorithm.; *; * Provides Train(...) and TrainMomentum(...) functions that perform a complete; * training of a neural network. Those are mainly used for testing since for; * production a more fine grained control of the training process is desirable.; * This is provided by the Step(...), StepMomentum(...) and StepNesterov(...); * functions that perform a single minimization step.; *; * The main training characteristics are defined by the provided learning rate,; * the test interval, and the convergence steps required for convergence. The; * test interval defines how often the error on the validation set is computed,; * and the values with which the step counter is increased each time the; * HasConverged() member function is called. A convergence step is defined as; * a step in which the test error is NOT less than 0.999 times the current; * minimal test error that has been reached. If between two subsequent calls; * to HasConverged(Double_t) the test error has not been sufficiently reduced; * it is assumed that a number of convergence steps equal to the test interval; * has been performed.; *; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Minimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Minimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Minimizers.h:1307,Availability,error,error,1307,"//______________________________________________________________________________; //; // Generic Gradient Descent Class; //______________________________________________________________________________; //; /*** \class TGradientDescent; *; * Generic implementation of gradient descent minimization.; *; * The TGradientDescent class implements an architecture and input data; * independent implementation of the gradient descent minimization algorithm.; *; * Provides Train(...) and TrainMomentum(...) functions that perform a complete; * training of a neural network. Those are mainly used for testing since for; * production a more fine grained control of the training process is desirable.; * This is provided by the Step(...), StepMomentum(...) and StepNesterov(...); * functions that perform a single minimization step.; *; * The main training characteristics are defined by the provided learning rate,; * the test interval, and the convergence steps required for convergence. The; * test interval defines how often the error on the validation set is computed,; * and the values with which the step counter is increased each time the; * HasConverged() member function is called. A convergence step is defined as; * a step in which the test error is NOT less than 0.999 times the current; * minimal test error that has been reached. If between two subsequent calls; * to HasConverged(Double_t) the test error has not been sufficiently reduced; * it is assumed that a number of convergence steps equal to the test interval; * has been performed.; *; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Minimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Minimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Minimizers.h:1406,Availability,error,error,1406,"//______________________________________________________________________________; //; // Generic Gradient Descent Class; //______________________________________________________________________________; //; /*** \class TGradientDescent; *; * Generic implementation of gradient descent minimization.; *; * The TGradientDescent class implements an architecture and input data; * independent implementation of the gradient descent minimization algorithm.; *; * Provides Train(...) and TrainMomentum(...) functions that perform a complete; * training of a neural network. Those are mainly used for testing since for; * production a more fine grained control of the training process is desirable.; * This is provided by the Step(...), StepMomentum(...) and StepNesterov(...); * functions that perform a single minimization step.; *; * The main training characteristics are defined by the provided learning rate,; * the test interval, and the convergence steps required for convergence. The; * test interval defines how often the error on the validation set is computed,; * and the values with which the step counter is increased each time the; * HasConverged() member function is called. A convergence step is defined as; * a step in which the test error is NOT less than 0.999 times the current; * minimal test error that has been reached. If between two subsequent calls; * to HasConverged(Double_t) the test error has not been sufficiently reduced; * it is assumed that a number of convergence steps equal to the test interval; * has been performed.; *; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Minimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Minimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Minimizers.h:1438,Energy Efficiency,reduce,reduced,1438,"//______________________________________________________________________________; //; // Generic Gradient Descent Class; //______________________________________________________________________________; //; /*** \class TGradientDescent; *; * Generic implementation of gradient descent minimization.; *; * The TGradientDescent class implements an architecture and input data; * independent implementation of the gradient descent minimization algorithm.; *; * Provides Train(...) and TrainMomentum(...) functions that perform a complete; * training of a neural network. Those are mainly used for testing since for; * production a more fine grained control of the training process is desirable.; * This is provided by the Step(...), StepMomentum(...) and StepNesterov(...); * functions that perform a single minimization step.; *; * The main training characteristics are defined by the provided learning rate,; * the test interval, and the convergence steps required for convergence. The; * test interval defines how often the error on the validation set is computed,; * and the values with which the step counter is increased each time the; * HasConverged() member function is called. A convergence step is defined as; * a step in which the test error is NOT less than 0.999 times the current; * minimal test error that has been reached. If between two subsequent calls; * to HasConverged(Double_t) the test error has not been sufficiently reduced; * it is assumed that a number of convergence steps equal to the test interval; * has been performed.; *; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Minimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Minimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Minimizers.h:516,Performance,perform,perform,516,"//______________________________________________________________________________; //; // Generic Gradient Descent Class; //______________________________________________________________________________; //; /*** \class TGradientDescent; *; * Generic implementation of gradient descent minimization.; *; * The TGradientDescent class implements an architecture and input data; * independent implementation of the gradient descent minimization algorithm.; *; * Provides Train(...) and TrainMomentum(...) functions that perform a complete; * training of a neural network. Those are mainly used for testing since for; * production a more fine grained control of the training process is desirable.; * This is provided by the Step(...), StepMomentum(...) and StepNesterov(...); * functions that perform a single minimization step.; *; * The main training characteristics are defined by the provided learning rate,; * the test interval, and the convergence steps required for convergence. The; * test interval defines how often the error on the validation set is computed,; * and the values with which the step counter is increased each time the; * HasConverged() member function is called. A convergence step is defined as; * a step in which the test error is NOT less than 0.999 times the current; * minimal test error that has been reached. If between two subsequent calls; * to HasConverged(Double_t) the test error has not been sufficiently reduced; * it is assumed that a number of convergence steps equal to the test interval; * has been performed.; *; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Minimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Minimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Minimizers.h:788,Performance,perform,perform,788,"//______________________________________________________________________________; //; // Generic Gradient Descent Class; //______________________________________________________________________________; //; /*** \class TGradientDescent; *; * Generic implementation of gradient descent minimization.; *; * The TGradientDescent class implements an architecture and input data; * independent implementation of the gradient descent minimization algorithm.; *; * Provides Train(...) and TrainMomentum(...) functions that perform a complete; * training of a neural network. Those are mainly used for testing since for; * production a more fine grained control of the training process is desirable.; * This is provided by the Step(...), StepMomentum(...) and StepNesterov(...); * functions that perform a single minimization step.; *; * The main training characteristics are defined by the provided learning rate,; * the test interval, and the convergence steps required for convergence. The; * test interval defines how often the error on the validation set is computed,; * and the values with which the step counter is increased each time the; * HasConverged() member function is called. A convergence step is defined as; * a step in which the test error is NOT less than 0.999 times the current; * minimal test error that has been reached. If between two subsequent calls; * to HasConverged(Double_t) the test error has not been sufficiently reduced; * it is assumed that a number of convergence steps equal to the test interval; * has been performed.; *; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Minimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Minimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Minimizers.h:1537,Performance,perform,performed,1537,"//______________________________________________________________________________; //; // Generic Gradient Descent Class; //______________________________________________________________________________; //; /*** \class TGradientDescent; *; * Generic implementation of gradient descent minimization.; *; * The TGradientDescent class implements an architecture and input data; * independent implementation of the gradient descent minimization algorithm.; *; * Provides Train(...) and TrainMomentum(...) functions that perform a complete; * training of a neural network. Those are mainly used for testing since for; * production a more fine grained control of the training process is desirable.; * This is provided by the Step(...), StepMomentum(...) and StepNesterov(...); * functions that perform a single minimization step.; *; * The main training characteristics are defined by the provided learning rate,; * the test interval, and the convergence steps required for convergence. The; * test interval defines how often the error on the validation set is computed,; * and the values with which the step counter is increased each time the; * HasConverged() member function is called. A convergence step is defined as; * a step in which the test error is NOT less than 0.999 times the current; * minimal test error that has been reached. If between two subsequent calls; * to HasConverged(Double_t) the test error has not been sufficiently reduced; * it is assumed that a number of convergence steps equal to the test interval; * has been performed.; *; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Minimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Minimizers.h
