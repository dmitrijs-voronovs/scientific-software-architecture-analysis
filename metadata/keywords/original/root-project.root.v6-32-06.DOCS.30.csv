id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:33671,Modifiability,variab,variable,33671,"IR ""${CMAKE_INSTALL_DOCDIR}/llvm/doxygen-html""; CACHE STRING ""Doxygen-generated HTML documentation install directory""); set(LLVM_INSTALL_OCAMLDOC_HTML_DIR ""${CMAKE_INSTALL_DOCDIR}/llvm/ocaml-html""; CACHE STRING ""OCamldoc-generated HTML documentation install directory""). option (LLVM_BUILD_EXTERNAL_COMPILER_RT; ""Build compiler-rt as an external project."" OFF). option (LLVM_VERSION_PRINTER_SHOW_HOST_TARGET_INFO; ""Show target and host info when tools are invoked with --version."" ON). # You can configure which libraries from LLVM you want to include in the; # shared library by setting LLVM_DYLIB_COMPONENTS to a semi-colon delimited; # list of LLVM components. All component names handled by llvm-config are valid.; if(NOT DEFINED LLVM_DYLIB_COMPONENTS); set(LLVM_DYLIB_COMPONENTS ""all"" CACHE STRING; ""Semicolon-separated list of components to include in libLLVM, or \""all\"".""); endif(). if(MSVC); option(LLVM_BUILD_LLVM_C_DYLIB ""Build LLVM-C.dll (Windows only)"" ON); # Set this variable to OFF here so it can't be set with a command-line; # argument.; set (LLVM_LINK_LLVM_DYLIB OFF); if (BUILD_SHARED_LIBS); message(FATAL_ERROR ""BUILD_SHARED_LIBS options is not supported on Windows.""); endif(); else(); option(LLVM_LINK_LLVM_DYLIB ""Link tools against the libllvm dynamic library"" OFF); option(LLVM_BUILD_LLVM_C_DYLIB ""Build libllvm-c re-export library (Darwin only)"" OFF); set(LLVM_BUILD_LLVM_DYLIB_default OFF); if(LLVM_LINK_LLVM_DYLIB OR LLVM_BUILD_LLVM_C_DYLIB); set(LLVM_BUILD_LLVM_DYLIB_default ON); endif(); option(LLVM_BUILD_LLVM_DYLIB ""Build libllvm dynamic library"" ${LLVM_BUILD_LLVM_DYLIB_default}); endif(). if (LLVM_LINK_LLVM_DYLIB AND BUILD_SHARED_LIBS); message(FATAL_ERROR ""Cannot enable BUILD_SHARED_LIBS with LLVM_LINK_LLVM_DYLIB. We recommend disabling BUILD_SHARED_LIBS.""); endif(). option(LLVM_OPTIMIZED_TABLEGEN ""Force TableGen to be built with optimization"" OFF); if(CMAKE_CROSSCOMPILING OR (LLVM_OPTIMIZED_TABLEGEN AND (LLVM_ENABLE_ASSERTIONS OR CMAKE_CONFIGURATION_TYPES)",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:36679,Modifiability,variab,variable,36679,"LLVM_PROFILE_FILE_PATTERN); endif(); if(NOT LLVM_CSPROFILE_FILE_PATTERN); if(NOT LLVM_CSPROFILE_DATA_DIR); file(TO_NATIVE_PATH ""${LLVM_BINARY_DIR}/csprofiles"" LLVM_CSPROFILE_DATA_DIR); endif(); file(TO_NATIVE_PATH ""${LLVM_CSPROFILE_DATA_DIR}/%${LLVM_PROFILE_MERGE_POOL_SIZE}m.profraw"" LLVM_CSPROFILE_FILE_PATTERN); endif(); endif(); endif(). if (LLVM_BUILD_STATIC); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -static""); # Remove shared library suffixes from use in find_library; foreach (shared_lib_suffix ${CMAKE_SHARED_LIBRARY_SUFFIX} ${CMAKE_IMPORT_LIBRARY_SUFFIX}); list(FIND CMAKE_FIND_LIBRARY_SUFFIXES ${shared_lib_suffix} shared_lib_suffix_idx); if(NOT ${shared_lib_suffix_idx} EQUAL -1); list(REMOVE_AT CMAKE_FIND_LIBRARY_SUFFIXES ${shared_lib_suffix_idx}); endif(); endforeach(); endif(). # Use libtool instead of ar if you are both on an Apple host, and targeting Apple.; if(CMAKE_HOST_APPLE AND APPLE); include(UseLibtool); endif(). # Override the default target with an environment variable named by LLVM_TARGET_TRIPLE_ENV.; set(LLVM_TARGET_TRIPLE_ENV CACHE STRING ""The name of environment variable to override default target. Disabled by blank.""); mark_as_advanced(LLVM_TARGET_TRIPLE_ENV). if(CMAKE_SYSTEM_NAME MATCHES ""BSD|Linux|OS390""); set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default ON); else(); set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default OFF); endif(); set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR ${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default} CACHE BOOL; ""Enable per-target runtimes directory""). set(LLVM_PROFDATA_FILE """" CACHE FILEPATH; ""Profiling data file to use when compiling in order to improve runtime performance.""). if(LLVM_INCLUDE_TESTS); # Lit test suite requires at least python 3.6; set(LLVM_MINIMUM_PYTHON_VERSION 3.6); else(); # FIXME: it is unknown if this is the actual minimum bound; set(LLVM_MINIMUM_PYTHON_VERSION 3.0); endif(). # Find python before including config-ix, since it needs to be able to search; # for python modules.; find_package(Python3 $",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:36787,Modifiability,variab,variable,36787,"ATA_DIR); file(TO_NATIVE_PATH ""${LLVM_BINARY_DIR}/csprofiles"" LLVM_CSPROFILE_DATA_DIR); endif(); file(TO_NATIVE_PATH ""${LLVM_CSPROFILE_DATA_DIR}/%${LLVM_PROFILE_MERGE_POOL_SIZE}m.profraw"" LLVM_CSPROFILE_FILE_PATTERN); endif(); endif(); endif(). if (LLVM_BUILD_STATIC); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -static""); # Remove shared library suffixes from use in find_library; foreach (shared_lib_suffix ${CMAKE_SHARED_LIBRARY_SUFFIX} ${CMAKE_IMPORT_LIBRARY_SUFFIX}); list(FIND CMAKE_FIND_LIBRARY_SUFFIXES ${shared_lib_suffix} shared_lib_suffix_idx); if(NOT ${shared_lib_suffix_idx} EQUAL -1); list(REMOVE_AT CMAKE_FIND_LIBRARY_SUFFIXES ${shared_lib_suffix_idx}); endif(); endforeach(); endif(). # Use libtool instead of ar if you are both on an Apple host, and targeting Apple.; if(CMAKE_HOST_APPLE AND APPLE); include(UseLibtool); endif(). # Override the default target with an environment variable named by LLVM_TARGET_TRIPLE_ENV.; set(LLVM_TARGET_TRIPLE_ENV CACHE STRING ""The name of environment variable to override default target. Disabled by blank.""); mark_as_advanced(LLVM_TARGET_TRIPLE_ENV). if(CMAKE_SYSTEM_NAME MATCHES ""BSD|Linux|OS390""); set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default ON); else(); set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default OFF); endif(); set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR ${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default} CACHE BOOL; ""Enable per-target runtimes directory""). set(LLVM_PROFDATA_FILE """" CACHE FILEPATH; ""Profiling data file to use when compiling in order to improve runtime performance.""). if(LLVM_INCLUDE_TESTS); # Lit test suite requires at least python 3.6; set(LLVM_MINIMUM_PYTHON_VERSION 3.6); else(); # FIXME: it is unknown if this is the actual minimum bound; set(LLVM_MINIMUM_PYTHON_VERSION 3.0); endif(). # Find python before including config-ix, since it needs to be able to search; # for python modules.; find_package(Python3 ${LLVM_MINIMUM_PYTHON_VERSION} REQUIRED; COMPONENTS Interpreter). # All options referred to from Ha",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:37581,Modifiability,config,config-ix,37581,"include(UseLibtool); endif(). # Override the default target with an environment variable named by LLVM_TARGET_TRIPLE_ENV.; set(LLVM_TARGET_TRIPLE_ENV CACHE STRING ""The name of environment variable to override default target. Disabled by blank.""); mark_as_advanced(LLVM_TARGET_TRIPLE_ENV). if(CMAKE_SYSTEM_NAME MATCHES ""BSD|Linux|OS390""); set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default ON); else(); set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default OFF); endif(); set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR ${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default} CACHE BOOL; ""Enable per-target runtimes directory""). set(LLVM_PROFDATA_FILE """" CACHE FILEPATH; ""Profiling data file to use when compiling in order to improve runtime performance.""). if(LLVM_INCLUDE_TESTS); # Lit test suite requires at least python 3.6; set(LLVM_MINIMUM_PYTHON_VERSION 3.6); else(); # FIXME: it is unknown if this is the actual minimum bound; set(LLVM_MINIMUM_PYTHON_VERSION 3.0); endif(). # Find python before including config-ix, since it needs to be able to search; # for python modules.; find_package(Python3 ${LLVM_MINIMUM_PYTHON_VERSION} REQUIRED; COMPONENTS Interpreter). # All options referred to from HandleLLVMOptions have to be specified; # BEFORE this include, otherwise options will not be correctly set on; # first cmake run; include(config-ix). # By default, we target the host, but this can be overridden at CMake; # invocation time. Except on 64-bit AIX, where the system toolchain; # expect 32-bit objects by default.; if(""${LLVM_HOST_TRIPLE}"" MATCHES ""^powerpc64-ibm-aix""); string(REGEX REPLACE ""^powerpc64"" ""powerpc"" LLVM_DEFAULT_TARGET_TRIPLE_DEFAULT ""${LLVM_HOST_TRIPLE}""); else(); # Only set default triple when native target is enabled.; if (LLVM_NATIVE_TARGET); set(LLVM_DEFAULT_TARGET_TRIPLE_DEFAULT ""${LLVM_HOST_TRIPLE}""); endif(); endif(). set(LLVM_DEFAULT_TARGET_TRIPLE ""${LLVM_DEFAULT_TARGET_TRIPLE_DEFAULT}"" CACHE STRING; ""Default target for which LLVM will generate code."" ); message(STATUS ""LLVM default tar",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:37908,Modifiability,config,config-ix,37908,"bled by blank.""); mark_as_advanced(LLVM_TARGET_TRIPLE_ENV). if(CMAKE_SYSTEM_NAME MATCHES ""BSD|Linux|OS390""); set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default ON); else(); set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default OFF); endif(); set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR ${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default} CACHE BOOL; ""Enable per-target runtimes directory""). set(LLVM_PROFDATA_FILE """" CACHE FILEPATH; ""Profiling data file to use when compiling in order to improve runtime performance.""). if(LLVM_INCLUDE_TESTS); # Lit test suite requires at least python 3.6; set(LLVM_MINIMUM_PYTHON_VERSION 3.6); else(); # FIXME: it is unknown if this is the actual minimum bound; set(LLVM_MINIMUM_PYTHON_VERSION 3.0); endif(). # Find python before including config-ix, since it needs to be able to search; # for python modules.; find_package(Python3 ${LLVM_MINIMUM_PYTHON_VERSION} REQUIRED; COMPONENTS Interpreter). # All options referred to from HandleLLVMOptions have to be specified; # BEFORE this include, otherwise options will not be correctly set on; # first cmake run; include(config-ix). # By default, we target the host, but this can be overridden at CMake; # invocation time. Except on 64-bit AIX, where the system toolchain; # expect 32-bit objects by default.; if(""${LLVM_HOST_TRIPLE}"" MATCHES ""^powerpc64-ibm-aix""); string(REGEX REPLACE ""^powerpc64"" ""powerpc"" LLVM_DEFAULT_TARGET_TRIPLE_DEFAULT ""${LLVM_HOST_TRIPLE}""); else(); # Only set default triple when native target is enabled.; if (LLVM_NATIVE_TARGET); set(LLVM_DEFAULT_TARGET_TRIPLE_DEFAULT ""${LLVM_HOST_TRIPLE}""); endif(); endif(). set(LLVM_DEFAULT_TARGET_TRIPLE ""${LLVM_DEFAULT_TARGET_TRIPLE_DEFAULT}"" CACHE STRING; ""Default target for which LLVM will generate code."" ); message(STATUS ""LLVM default target triple: ${LLVM_DEFAULT_TARGET_TRIPLE}""). set(LLVM_TARGET_TRIPLE ""${LLVM_DEFAULT_TARGET_TRIPLE}""). if(WIN32 OR CYGWIN); if(BUILD_SHARED_LIBS OR LLVM_BUILD_LLVM_DYLIB); set(LLVM_ENABLE_PLUGINS_default ON); else(); set(LLVM_ENAB",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:38968,Modifiability,plugin,plugin,38968,"t be correctly set on; # first cmake run; include(config-ix). # By default, we target the host, but this can be overridden at CMake; # invocation time. Except on 64-bit AIX, where the system toolchain; # expect 32-bit objects by default.; if(""${LLVM_HOST_TRIPLE}"" MATCHES ""^powerpc64-ibm-aix""); string(REGEX REPLACE ""^powerpc64"" ""powerpc"" LLVM_DEFAULT_TARGET_TRIPLE_DEFAULT ""${LLVM_HOST_TRIPLE}""); else(); # Only set default triple when native target is enabled.; if (LLVM_NATIVE_TARGET); set(LLVM_DEFAULT_TARGET_TRIPLE_DEFAULT ""${LLVM_HOST_TRIPLE}""); endif(); endif(). set(LLVM_DEFAULT_TARGET_TRIPLE ""${LLVM_DEFAULT_TARGET_TRIPLE_DEFAULT}"" CACHE STRING; ""Default target for which LLVM will generate code."" ); message(STATUS ""LLVM default target triple: ${LLVM_DEFAULT_TARGET_TRIPLE}""). set(LLVM_TARGET_TRIPLE ""${LLVM_DEFAULT_TARGET_TRIPLE}""). if(WIN32 OR CYGWIN); if(BUILD_SHARED_LIBS OR LLVM_BUILD_LLVM_DYLIB); set(LLVM_ENABLE_PLUGINS_default ON); else(); set(LLVM_ENABLE_PLUGINS_default OFF); endif(); else(); set(LLVM_ENABLE_PLUGINS_default ${LLVM_ENABLE_PIC}); endif(); option(LLVM_ENABLE_PLUGINS ""Enable plugin support"" ${LLVM_ENABLE_PLUGINS_default}). set(LLVM_ENABLE_NEW_PASS_MANAGER TRUE CACHE BOOL; ""Enable the new pass manager by default.""); if(NOT LLVM_ENABLE_NEW_PASS_MANAGER); message(FATAL_ERROR ""Enabling the legacy pass manager on the cmake level is""; "" no longer supported.""); endif(). include(HandleLLVMOptions). ######. # Configure all of the various header file fragments LLVM uses which depend on; # configuration variables.; set(LLVM_ENUM_TARGETS """"); set(LLVM_ENUM_ASM_PRINTERS """"); set(LLVM_ENUM_ASM_PARSERS """"); set(LLVM_ENUM_DISASSEMBLERS """"); set(LLVM_ENUM_TARGETMCAS """"); set(LLVM_ENUM_EXEGESIS """"); foreach(t ${LLVM_TARGETS_TO_BUILD}); set( td ${LLVM_MAIN_SRC_DIR}/lib/Target/${t} ). # Make sure that any experimental targets were passed via; # LLVM_EXPERIMENTAL_TARGETS_TO_BUILD, not LLVM_TARGETS_TO_BUILD.; # We allow experimental targets that are not in LLVM_ALL_EXPER",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:39380,Modifiability,config,configuration,39380,"(LLVM_DEFAULT_TARGET_TRIPLE_DEFAULT ""${LLVM_HOST_TRIPLE}""); endif(); endif(). set(LLVM_DEFAULT_TARGET_TRIPLE ""${LLVM_DEFAULT_TARGET_TRIPLE_DEFAULT}"" CACHE STRING; ""Default target for which LLVM will generate code."" ); message(STATUS ""LLVM default target triple: ${LLVM_DEFAULT_TARGET_TRIPLE}""). set(LLVM_TARGET_TRIPLE ""${LLVM_DEFAULT_TARGET_TRIPLE}""). if(WIN32 OR CYGWIN); if(BUILD_SHARED_LIBS OR LLVM_BUILD_LLVM_DYLIB); set(LLVM_ENABLE_PLUGINS_default ON); else(); set(LLVM_ENABLE_PLUGINS_default OFF); endif(); else(); set(LLVM_ENABLE_PLUGINS_default ${LLVM_ENABLE_PIC}); endif(); option(LLVM_ENABLE_PLUGINS ""Enable plugin support"" ${LLVM_ENABLE_PLUGINS_default}). set(LLVM_ENABLE_NEW_PASS_MANAGER TRUE CACHE BOOL; ""Enable the new pass manager by default.""); if(NOT LLVM_ENABLE_NEW_PASS_MANAGER); message(FATAL_ERROR ""Enabling the legacy pass manager on the cmake level is""; "" no longer supported.""); endif(). include(HandleLLVMOptions). ######. # Configure all of the various header file fragments LLVM uses which depend on; # configuration variables.; set(LLVM_ENUM_TARGETS """"); set(LLVM_ENUM_ASM_PRINTERS """"); set(LLVM_ENUM_ASM_PARSERS """"); set(LLVM_ENUM_DISASSEMBLERS """"); set(LLVM_ENUM_TARGETMCAS """"); set(LLVM_ENUM_EXEGESIS """"); foreach(t ${LLVM_TARGETS_TO_BUILD}); set( td ${LLVM_MAIN_SRC_DIR}/lib/Target/${t} ). # Make sure that any experimental targets were passed via; # LLVM_EXPERIMENTAL_TARGETS_TO_BUILD, not LLVM_TARGETS_TO_BUILD.; # We allow experimental targets that are not in LLVM_ALL_EXPERIMENTAL_TARGETS,; # as long as they are passed via LLVM_EXPERIMENTAL_TARGETS_TO_BUILD.; if ( NOT ""${t}"" IN_LIST LLVM_ALL_TARGETS AND NOT ""${t}"" IN_LIST LLVM_EXPERIMENTAL_TARGETS_TO_BUILD ); if( ""${t}"" IN_LIST LLVM_ALL_EXPERIMENTAL_TARGETS ); message(FATAL_ERROR ""The target `${t}' is experimental and must be passed ""; ""via LLVM_EXPERIMENTAL_TARGETS_TO_BUILD.""); else(); message(FATAL_ERROR ""The target `${t}' is not a core tier target. It may be ""; ""experimental, if so it must be passed via",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:39394,Modifiability,variab,variables,39394,"(LLVM_DEFAULT_TARGET_TRIPLE_DEFAULT ""${LLVM_HOST_TRIPLE}""); endif(); endif(). set(LLVM_DEFAULT_TARGET_TRIPLE ""${LLVM_DEFAULT_TARGET_TRIPLE_DEFAULT}"" CACHE STRING; ""Default target for which LLVM will generate code."" ); message(STATUS ""LLVM default target triple: ${LLVM_DEFAULT_TARGET_TRIPLE}""). set(LLVM_TARGET_TRIPLE ""${LLVM_DEFAULT_TARGET_TRIPLE}""). if(WIN32 OR CYGWIN); if(BUILD_SHARED_LIBS OR LLVM_BUILD_LLVM_DYLIB); set(LLVM_ENABLE_PLUGINS_default ON); else(); set(LLVM_ENABLE_PLUGINS_default OFF); endif(); else(); set(LLVM_ENABLE_PLUGINS_default ${LLVM_ENABLE_PIC}); endif(); option(LLVM_ENABLE_PLUGINS ""Enable plugin support"" ${LLVM_ENABLE_PLUGINS_default}). set(LLVM_ENABLE_NEW_PASS_MANAGER TRUE CACHE BOOL; ""Enable the new pass manager by default.""); if(NOT LLVM_ENABLE_NEW_PASS_MANAGER); message(FATAL_ERROR ""Enabling the legacy pass manager on the cmake level is""; "" no longer supported.""); endif(). include(HandleLLVMOptions). ######. # Configure all of the various header file fragments LLVM uses which depend on; # configuration variables.; set(LLVM_ENUM_TARGETS """"); set(LLVM_ENUM_ASM_PRINTERS """"); set(LLVM_ENUM_ASM_PARSERS """"); set(LLVM_ENUM_DISASSEMBLERS """"); set(LLVM_ENUM_TARGETMCAS """"); set(LLVM_ENUM_EXEGESIS """"); foreach(t ${LLVM_TARGETS_TO_BUILD}); set( td ${LLVM_MAIN_SRC_DIR}/lib/Target/${t} ). # Make sure that any experimental targets were passed via; # LLVM_EXPERIMENTAL_TARGETS_TO_BUILD, not LLVM_TARGETS_TO_BUILD.; # We allow experimental targets that are not in LLVM_ALL_EXPERIMENTAL_TARGETS,; # as long as they are passed via LLVM_EXPERIMENTAL_TARGETS_TO_BUILD.; if ( NOT ""${t}"" IN_LIST LLVM_ALL_TARGETS AND NOT ""${t}"" IN_LIST LLVM_EXPERIMENTAL_TARGETS_TO_BUILD ); if( ""${t}"" IN_LIST LLVM_ALL_EXPERIMENTAL_TARGETS ); message(FATAL_ERROR ""The target `${t}' is experimental and must be passed ""; ""via LLVM_EXPERIMENTAL_TARGETS_TO_BUILD.""); else(); message(FATAL_ERROR ""The target `${t}' is not a core tier target. It may be ""; ""experimental, if so it must be passed via",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:44830,Modifiability,config,configuration,44830,"TPUT_DIRECTORY}/tf_runtime); install(TARGETS tf_xla_runtime EXPORT LLVMExports; ARCHIVE DESTINATION lib${LLVM_LIBDIR_SUFFIX} COMPONENT tf_xla_runtime); set_property(GLOBAL APPEND PROPERTY LLVM_EXPORTS tf_xla_runtime); # Once we add more modules, we should handle this more automatically.; if (DEFINED LLVM_OVERRIDE_MODEL_HEADER_INLINERSIZEMODEL); set(LLVM_INLINER_MODEL_PATH ""none""); elseif(NOT DEFINED LLVM_INLINER_MODEL_PATH; OR ""${LLVM_INLINER_MODEL_PATH}"" STREQUAL """"; OR ""${LLVM_INLINER_MODEL_PATH}"" STREQUAL ""autogenerate""); set(LLVM_INLINER_MODEL_PATH ""autogenerate""); set(LLVM_INLINER_MODEL_AUTOGENERATED 1); endif(); if (DEFINED LLVM_OVERRIDE_MODEL_HEADER_REGALLOCEVICTMODEL); set(LLVM_RAEVICT_MODEL_PATH ""none""); elseif(NOT DEFINED LLVM_RAEVICT_MODEL_PATH; OR ""${LLVM_RAEVICT_MODEL_PATH}"" STREQUAL """"; OR ""${LLVM_RAEVICT_MODEL_PATH}"" STREQUAL ""autogenerate""); set(LLVM_RAEVICT_MODEL_PATH ""autogenerate""); set(LLVM_RAEVICT_MODEL_AUTOGENERATED 1); endif(). endif(). # Configure the three LLVM configuration header files.; configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/config.h.cmake; ${LLVM_INCLUDE_DIR}/llvm/Config/config.h); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/llvm-config.h.cmake; ${LLVM_INCLUDE_DIR}/llvm/Config/llvm-config.h); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/abi-breaking.h.cmake; ${LLVM_INCLUDE_DIR}/llvm/Config/abi-breaking.h). # Add target for generating source rpm package.; set(LLVM_SRPM_USER_BINARY_SPECFILE ${CMAKE_CURRENT_SOURCE_DIR}/llvm.spec.in; CACHE FILEPATH "".spec file to use for srpm generation""); set(LLVM_SRPM_BINARY_SPECFILE ${CMAKE_CURRENT_BINARY_DIR}/llvm.spec); set(LLVM_SRPM_DIR ""${CMAKE_CURRENT_BINARY_DIR}/srpm""). get_source_info(${CMAKE_CURRENT_SOURCE_DIR} revision repository); string(LENGTH ""${revision}"" revision_length); set(LLVM_RPM_SPEC_REVISION ""${revision}""). configure_file(; ${LLVM_SRPM_USER_BINARY_SPECFILE}; ${LLVM_SRPM_BINARY_SPECFILE} @ONLY). add_custom_target(srpm; COMMAND cpack -G TGZ --config CPac",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:44913,Modifiability,config,config,44913," EXPORT LLVMExports; ARCHIVE DESTINATION lib${LLVM_LIBDIR_SUFFIX} COMPONENT tf_xla_runtime); set_property(GLOBAL APPEND PROPERTY LLVM_EXPORTS tf_xla_runtime); # Once we add more modules, we should handle this more automatically.; if (DEFINED LLVM_OVERRIDE_MODEL_HEADER_INLINERSIZEMODEL); set(LLVM_INLINER_MODEL_PATH ""none""); elseif(NOT DEFINED LLVM_INLINER_MODEL_PATH; OR ""${LLVM_INLINER_MODEL_PATH}"" STREQUAL """"; OR ""${LLVM_INLINER_MODEL_PATH}"" STREQUAL ""autogenerate""); set(LLVM_INLINER_MODEL_PATH ""autogenerate""); set(LLVM_INLINER_MODEL_AUTOGENERATED 1); endif(); if (DEFINED LLVM_OVERRIDE_MODEL_HEADER_REGALLOCEVICTMODEL); set(LLVM_RAEVICT_MODEL_PATH ""none""); elseif(NOT DEFINED LLVM_RAEVICT_MODEL_PATH; OR ""${LLVM_RAEVICT_MODEL_PATH}"" STREQUAL """"; OR ""${LLVM_RAEVICT_MODEL_PATH}"" STREQUAL ""autogenerate""); set(LLVM_RAEVICT_MODEL_PATH ""autogenerate""); set(LLVM_RAEVICT_MODEL_AUTOGENERATED 1); endif(). endif(). # Configure the three LLVM configuration header files.; configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/config.h.cmake; ${LLVM_INCLUDE_DIR}/llvm/Config/config.h); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/llvm-config.h.cmake; ${LLVM_INCLUDE_DIR}/llvm/Config/llvm-config.h); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/abi-breaking.h.cmake; ${LLVM_INCLUDE_DIR}/llvm/Config/abi-breaking.h). # Add target for generating source rpm package.; set(LLVM_SRPM_USER_BINARY_SPECFILE ${CMAKE_CURRENT_SOURCE_DIR}/llvm.spec.in; CACHE FILEPATH "".spec file to use for srpm generation""); set(LLVM_SRPM_BINARY_SPECFILE ${CMAKE_CURRENT_BINARY_DIR}/llvm.spec); set(LLVM_SRPM_DIR ""${CMAKE_CURRENT_BINARY_DIR}/srpm""). get_source_info(${CMAKE_CURRENT_SOURCE_DIR} revision repository); string(LENGTH ""${revision}"" revision_length); set(LLVM_RPM_SPEC_REVISION ""${revision}""). configure_file(; ${LLVM_SRPM_USER_BINARY_SPECFILE}; ${LLVM_SRPM_BINARY_SPECFILE} @ONLY). add_custom_target(srpm; COMMAND cpack -G TGZ --config CPackSourceConfig.cmake -B ${LLVM_SRPM_DIR}/SOURCES; COMMAND rp",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:44961,Modifiability,config,config,44961,"_SUFFIX} COMPONENT tf_xla_runtime); set_property(GLOBAL APPEND PROPERTY LLVM_EXPORTS tf_xla_runtime); # Once we add more modules, we should handle this more automatically.; if (DEFINED LLVM_OVERRIDE_MODEL_HEADER_INLINERSIZEMODEL); set(LLVM_INLINER_MODEL_PATH ""none""); elseif(NOT DEFINED LLVM_INLINER_MODEL_PATH; OR ""${LLVM_INLINER_MODEL_PATH}"" STREQUAL """"; OR ""${LLVM_INLINER_MODEL_PATH}"" STREQUAL ""autogenerate""); set(LLVM_INLINER_MODEL_PATH ""autogenerate""); set(LLVM_INLINER_MODEL_AUTOGENERATED 1); endif(); if (DEFINED LLVM_OVERRIDE_MODEL_HEADER_REGALLOCEVICTMODEL); set(LLVM_RAEVICT_MODEL_PATH ""none""); elseif(NOT DEFINED LLVM_RAEVICT_MODEL_PATH; OR ""${LLVM_RAEVICT_MODEL_PATH}"" STREQUAL """"; OR ""${LLVM_RAEVICT_MODEL_PATH}"" STREQUAL ""autogenerate""); set(LLVM_RAEVICT_MODEL_PATH ""autogenerate""); set(LLVM_RAEVICT_MODEL_AUTOGENERATED 1); endif(). endif(). # Configure the three LLVM configuration header files.; configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/config.h.cmake; ${LLVM_INCLUDE_DIR}/llvm/Config/config.h); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/llvm-config.h.cmake; ${LLVM_INCLUDE_DIR}/llvm/Config/llvm-config.h); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/abi-breaking.h.cmake; ${LLVM_INCLUDE_DIR}/llvm/Config/abi-breaking.h). # Add target for generating source rpm package.; set(LLVM_SRPM_USER_BINARY_SPECFILE ${CMAKE_CURRENT_SOURCE_DIR}/llvm.spec.in; CACHE FILEPATH "".spec file to use for srpm generation""); set(LLVM_SRPM_BINARY_SPECFILE ${CMAKE_CURRENT_BINARY_DIR}/llvm.spec); set(LLVM_SRPM_DIR ""${CMAKE_CURRENT_BINARY_DIR}/srpm""). get_source_info(${CMAKE_CURRENT_SOURCE_DIR} revision repository); string(LENGTH ""${revision}"" revision_length); set(LLVM_RPM_SPEC_REVISION ""${revision}""). configure_file(; ${LLVM_SRPM_USER_BINARY_SPECFILE}; ${LLVM_SRPM_BINARY_SPECFILE} @ONLY). add_custom_target(srpm; COMMAND cpack -G TGZ --config CPackSourceConfig.cmake -B ${LLVM_SRPM_DIR}/SOURCES; COMMAND rpmbuild -bs --define '_topdir ${LLVM_SRPM_DIR}' ${LLVM_SR",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:45031,Modifiability,config,config,45031,"PEND PROPERTY LLVM_EXPORTS tf_xla_runtime); # Once we add more modules, we should handle this more automatically.; if (DEFINED LLVM_OVERRIDE_MODEL_HEADER_INLINERSIZEMODEL); set(LLVM_INLINER_MODEL_PATH ""none""); elseif(NOT DEFINED LLVM_INLINER_MODEL_PATH; OR ""${LLVM_INLINER_MODEL_PATH}"" STREQUAL """"; OR ""${LLVM_INLINER_MODEL_PATH}"" STREQUAL ""autogenerate""); set(LLVM_INLINER_MODEL_PATH ""autogenerate""); set(LLVM_INLINER_MODEL_AUTOGENERATED 1); endif(); if (DEFINED LLVM_OVERRIDE_MODEL_HEADER_REGALLOCEVICTMODEL); set(LLVM_RAEVICT_MODEL_PATH ""none""); elseif(NOT DEFINED LLVM_RAEVICT_MODEL_PATH; OR ""${LLVM_RAEVICT_MODEL_PATH}"" STREQUAL """"; OR ""${LLVM_RAEVICT_MODEL_PATH}"" STREQUAL ""autogenerate""); set(LLVM_RAEVICT_MODEL_PATH ""autogenerate""); set(LLVM_RAEVICT_MODEL_AUTOGENERATED 1); endif(). endif(). # Configure the three LLVM configuration header files.; configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/config.h.cmake; ${LLVM_INCLUDE_DIR}/llvm/Config/config.h); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/llvm-config.h.cmake; ${LLVM_INCLUDE_DIR}/llvm/Config/llvm-config.h); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/abi-breaking.h.cmake; ${LLVM_INCLUDE_DIR}/llvm/Config/abi-breaking.h). # Add target for generating source rpm package.; set(LLVM_SRPM_USER_BINARY_SPECFILE ${CMAKE_CURRENT_SOURCE_DIR}/llvm.spec.in; CACHE FILEPATH "".spec file to use for srpm generation""); set(LLVM_SRPM_BINARY_SPECFILE ${CMAKE_CURRENT_BINARY_DIR}/llvm.spec); set(LLVM_SRPM_DIR ""${CMAKE_CURRENT_BINARY_DIR}/srpm""). get_source_info(${CMAKE_CURRENT_SOURCE_DIR} revision repository); string(LENGTH ""${revision}"" revision_length); set(LLVM_RPM_SPEC_REVISION ""${revision}""). configure_file(; ${LLVM_SRPM_USER_BINARY_SPECFILE}; ${LLVM_SRPM_BINARY_SPECFILE} @ONLY). add_custom_target(srpm; COMMAND cpack -G TGZ --config CPackSourceConfig.cmake -B ${LLVM_SRPM_DIR}/SOURCES; COMMAND rpmbuild -bs --define '_topdir ${LLVM_SRPM_DIR}' ${LLVM_SRPM_BINARY_SPECFILE}); set_target_properties(srpm PROPERTIE",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:45084,Modifiability,config,config,45084," modules, we should handle this more automatically.; if (DEFINED LLVM_OVERRIDE_MODEL_HEADER_INLINERSIZEMODEL); set(LLVM_INLINER_MODEL_PATH ""none""); elseif(NOT DEFINED LLVM_INLINER_MODEL_PATH; OR ""${LLVM_INLINER_MODEL_PATH}"" STREQUAL """"; OR ""${LLVM_INLINER_MODEL_PATH}"" STREQUAL ""autogenerate""); set(LLVM_INLINER_MODEL_PATH ""autogenerate""); set(LLVM_INLINER_MODEL_AUTOGENERATED 1); endif(); if (DEFINED LLVM_OVERRIDE_MODEL_HEADER_REGALLOCEVICTMODEL); set(LLVM_RAEVICT_MODEL_PATH ""none""); elseif(NOT DEFINED LLVM_RAEVICT_MODEL_PATH; OR ""${LLVM_RAEVICT_MODEL_PATH}"" STREQUAL """"; OR ""${LLVM_RAEVICT_MODEL_PATH}"" STREQUAL ""autogenerate""); set(LLVM_RAEVICT_MODEL_PATH ""autogenerate""); set(LLVM_RAEVICT_MODEL_AUTOGENERATED 1); endif(). endif(). # Configure the three LLVM configuration header files.; configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/config.h.cmake; ${LLVM_INCLUDE_DIR}/llvm/Config/config.h); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/llvm-config.h.cmake; ${LLVM_INCLUDE_DIR}/llvm/Config/llvm-config.h); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/abi-breaking.h.cmake; ${LLVM_INCLUDE_DIR}/llvm/Config/abi-breaking.h). # Add target for generating source rpm package.; set(LLVM_SRPM_USER_BINARY_SPECFILE ${CMAKE_CURRENT_SOURCE_DIR}/llvm.spec.in; CACHE FILEPATH "".spec file to use for srpm generation""); set(LLVM_SRPM_BINARY_SPECFILE ${CMAKE_CURRENT_BINARY_DIR}/llvm.spec); set(LLVM_SRPM_DIR ""${CMAKE_CURRENT_BINARY_DIR}/srpm""). get_source_info(${CMAKE_CURRENT_SOURCE_DIR} revision repository); string(LENGTH ""${revision}"" revision_length); set(LLVM_RPM_SPEC_REVISION ""${revision}""). configure_file(; ${LLVM_SRPM_USER_BINARY_SPECFILE}; ${LLVM_SRPM_BINARY_SPECFILE} @ONLY). add_custom_target(srpm; COMMAND cpack -G TGZ --config CPackSourceConfig.cmake -B ${LLVM_SRPM_DIR}/SOURCES; COMMAND rpmbuild -bs --define '_topdir ${LLVM_SRPM_DIR}' ${LLVM_SRPM_BINARY_SPECFILE}); set_target_properties(srpm PROPERTIES FOLDER ""Misc""). if(APPLE AND DARWIN_LTO_LIBRARY); set(CMAKE_E",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:45819,Modifiability,config,config,45819,"nfigure the three LLVM configuration header files.; configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/config.h.cmake; ${LLVM_INCLUDE_DIR}/llvm/Config/config.h); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/llvm-config.h.cmake; ${LLVM_INCLUDE_DIR}/llvm/Config/llvm-config.h); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/abi-breaking.h.cmake; ${LLVM_INCLUDE_DIR}/llvm/Config/abi-breaking.h). # Add target for generating source rpm package.; set(LLVM_SRPM_USER_BINARY_SPECFILE ${CMAKE_CURRENT_SOURCE_DIR}/llvm.spec.in; CACHE FILEPATH "".spec file to use for srpm generation""); set(LLVM_SRPM_BINARY_SPECFILE ${CMAKE_CURRENT_BINARY_DIR}/llvm.spec); set(LLVM_SRPM_DIR ""${CMAKE_CURRENT_BINARY_DIR}/srpm""). get_source_info(${CMAKE_CURRENT_SOURCE_DIR} revision repository); string(LENGTH ""${revision}"" revision_length); set(LLVM_RPM_SPEC_REVISION ""${revision}""). configure_file(; ${LLVM_SRPM_USER_BINARY_SPECFILE}; ${LLVM_SRPM_BINARY_SPECFILE} @ONLY). add_custom_target(srpm; COMMAND cpack -G TGZ --config CPackSourceConfig.cmake -B ${LLVM_SRPM_DIR}/SOURCES; COMMAND rpmbuild -bs --define '_topdir ${LLVM_SRPM_DIR}' ${LLVM_SRPM_BINARY_SPECFILE}); set_target_properties(srpm PROPERTIES FOLDER ""Misc""). if(APPLE AND DARWIN_LTO_LIBRARY); set(CMAKE_EXE_LINKER_FLAGS; ""${CMAKE_EXE_LINKER_FLAGS} -Wl,-lto_library -Wl,${DARWIN_LTO_LIBRARY}""); set(CMAKE_SHARED_LINKER_FLAGS; ""${CMAKE_SHARED_LINKER_FLAGS} -Wl,-lto_library -Wl,${DARWIN_LTO_LIBRARY}""); set(CMAKE_MODULE_LINKER_FLAGS; ""${CMAKE_MODULE_LINKER_FLAGS} -Wl,-lto_library -Wl,${DARWIN_LTO_LIBRARY}""); endif(). # Build with _XOPEN_SOURCE on AIX, as stray macros in _ALL_SOURCE mode tend to; # break things. In this case we need to enable the large-file API as well.; if (UNIX AND ${CMAKE_SYSTEM_NAME} MATCHES ""AIX""); add_compile_definitions(_XOPEN_SOURCE=700); add_compile_definitions(_LARGE_FILE_API). # Modules should be built with -shared -Wl,-G, so we can use runtime linking; # with plugins.; string(APPEND CMAKE_MODULE_LINKER_FLAGS "" ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:46756,Modifiability,plugin,plugins,46756,"BINARY_SPECFILE}; ${LLVM_SRPM_BINARY_SPECFILE} @ONLY). add_custom_target(srpm; COMMAND cpack -G TGZ --config CPackSourceConfig.cmake -B ${LLVM_SRPM_DIR}/SOURCES; COMMAND rpmbuild -bs --define '_topdir ${LLVM_SRPM_DIR}' ${LLVM_SRPM_BINARY_SPECFILE}); set_target_properties(srpm PROPERTIES FOLDER ""Misc""). if(APPLE AND DARWIN_LTO_LIBRARY); set(CMAKE_EXE_LINKER_FLAGS; ""${CMAKE_EXE_LINKER_FLAGS} -Wl,-lto_library -Wl,${DARWIN_LTO_LIBRARY}""); set(CMAKE_SHARED_LINKER_FLAGS; ""${CMAKE_SHARED_LINKER_FLAGS} -Wl,-lto_library -Wl,${DARWIN_LTO_LIBRARY}""); set(CMAKE_MODULE_LINKER_FLAGS; ""${CMAKE_MODULE_LINKER_FLAGS} -Wl,-lto_library -Wl,${DARWIN_LTO_LIBRARY}""); endif(). # Build with _XOPEN_SOURCE on AIX, as stray macros in _ALL_SOURCE mode tend to; # break things. In this case we need to enable the large-file API as well.; if (UNIX AND ${CMAKE_SYSTEM_NAME} MATCHES ""AIX""); add_compile_definitions(_XOPEN_SOURCE=700); add_compile_definitions(_LARGE_FILE_API). # Modules should be built with -shared -Wl,-G, so we can use runtime linking; # with plugins.; string(APPEND CMAKE_MODULE_LINKER_FLAGS "" -shared -Wl,-G""). # Also set the correct flags for building shared libraries.; string(APPEND CMAKE_SHARED_LINKER_FLAGS "" -shared""); endif(). # Build with _XOPEN_SOURCE on z/OS.; if (CMAKE_SYSTEM_NAME MATCHES ""OS390""); add_compile_definitions(_XOPEN_SOURCE=600); add_compile_definitions(_OPEN_SYS) # Needed for process information.; add_compile_definitions(_OPEN_SYS_FILE_EXT) # Needed for EBCDIC I/O.; add_compile_definitions(_EXT) # Needed for file data.; add_compile_definitions(_UNIX03_THREADS) # Multithreading support.; endif(). # Build with _FILE_OFFSET_BITS=64 on Solaris to match g++ >= 9.; if (UNIX AND ${CMAKE_SYSTEM_NAME} MATCHES ""SunOS""); add_compile_definitions(_FILE_OFFSET_BITS=64); endif(). set(CMAKE_INCLUDE_CURRENT_DIR ON). include_directories( ${LLVM_INCLUDE_DIR} ${LLVM_MAIN_INCLUDE_DIR}). # when crosscompiling import the executable targets from a file; if(LLVM_USE_HOST_TOOLS); include(C",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:47902,Modifiability,variab,variables,47902,"red -Wl,-G""). # Also set the correct flags for building shared libraries.; string(APPEND CMAKE_SHARED_LINKER_FLAGS "" -shared""); endif(). # Build with _XOPEN_SOURCE on z/OS.; if (CMAKE_SYSTEM_NAME MATCHES ""OS390""); add_compile_definitions(_XOPEN_SOURCE=600); add_compile_definitions(_OPEN_SYS) # Needed for process information.; add_compile_definitions(_OPEN_SYS_FILE_EXT) # Needed for EBCDIC I/O.; add_compile_definitions(_EXT) # Needed for file data.; add_compile_definitions(_UNIX03_THREADS) # Multithreading support.; endif(). # Build with _FILE_OFFSET_BITS=64 on Solaris to match g++ >= 9.; if (UNIX AND ${CMAKE_SYSTEM_NAME} MATCHES ""SunOS""); add_compile_definitions(_FILE_OFFSET_BITS=64); endif(). set(CMAKE_INCLUDE_CURRENT_DIR ON). include_directories( ${LLVM_INCLUDE_DIR} ${LLVM_MAIN_INCLUDE_DIR}). # when crosscompiling import the executable targets from a file; if(LLVM_USE_HOST_TOOLS); include(CrossCompile); llvm_create_cross_target(LLVM NATIVE """" Release); endif(LLVM_USE_HOST_TOOLS); if(LLVM_TARGET_IS_CROSSCOMPILE_HOST); # Dummy use to avoid CMake Warning: Manually-specified variables were not used; # (this is a variable that CrossCompile sets on recursive invocations); endif(). if( ${CMAKE_SYSTEM_NAME} MATCHES SunOS ); # special hack for Solaris to handle crazy system sys/regset.h; include_directories(""${LLVM_MAIN_INCLUDE_DIR}/llvm/Support/Solaris""); endif( ${CMAKE_SYSTEM_NAME} MATCHES SunOS ). # Make sure we don't get -rdynamic in every binary. For those that need it,; # use export_executable_symbols(target).; set(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS """"). include(AddLLVM); include(TableGen). include(LLVMDistributionSupport). if( MINGW AND NOT ""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang"" ); # People report that -O3 is unreliable on MinGW. The traditional; # build also uses -O2 for that reason:; llvm_replace_compiler_option(CMAKE_CXX_FLAGS_RELEASE ""-O3"" ""-O2""); endif(). if(LLVM_INCLUDE_TESTS); umbrella_lit_testsuite_begin(check-all); endif(). # Put this before tblgen. El",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:47940,Modifiability,variab,variable,47940,"red -Wl,-G""). # Also set the correct flags for building shared libraries.; string(APPEND CMAKE_SHARED_LINKER_FLAGS "" -shared""); endif(). # Build with _XOPEN_SOURCE on z/OS.; if (CMAKE_SYSTEM_NAME MATCHES ""OS390""); add_compile_definitions(_XOPEN_SOURCE=600); add_compile_definitions(_OPEN_SYS) # Needed for process information.; add_compile_definitions(_OPEN_SYS_FILE_EXT) # Needed for EBCDIC I/O.; add_compile_definitions(_EXT) # Needed for file data.; add_compile_definitions(_UNIX03_THREADS) # Multithreading support.; endif(). # Build with _FILE_OFFSET_BITS=64 on Solaris to match g++ >= 9.; if (UNIX AND ${CMAKE_SYSTEM_NAME} MATCHES ""SunOS""); add_compile_definitions(_FILE_OFFSET_BITS=64); endif(). set(CMAKE_INCLUDE_CURRENT_DIR ON). include_directories( ${LLVM_INCLUDE_DIR} ${LLVM_MAIN_INCLUDE_DIR}). # when crosscompiling import the executable targets from a file; if(LLVM_USE_HOST_TOOLS); include(CrossCompile); llvm_create_cross_target(LLVM NATIVE """" Release); endif(LLVM_USE_HOST_TOOLS); if(LLVM_TARGET_IS_CROSSCOMPILE_HOST); # Dummy use to avoid CMake Warning: Manually-specified variables were not used; # (this is a variable that CrossCompile sets on recursive invocations); endif(). if( ${CMAKE_SYSTEM_NAME} MATCHES SunOS ); # special hack for Solaris to handle crazy system sys/regset.h; include_directories(""${LLVM_MAIN_INCLUDE_DIR}/llvm/Support/Solaris""); endif( ${CMAKE_SYSTEM_NAME} MATCHES SunOS ). # Make sure we don't get -rdynamic in every binary. For those that need it,; # use export_executable_symbols(target).; set(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS """"). include(AddLLVM); include(TableGen). include(LLVMDistributionSupport). if( MINGW AND NOT ""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang"" ); # People report that -O3 is unreliable on MinGW. The traditional; # build also uses -O2 for that reason:; llvm_replace_compiler_option(CMAKE_CXX_FLAGS_RELEASE ""-O3"" ""-O2""); endif(). if(LLVM_INCLUDE_TESTS); umbrella_lit_testsuite_begin(check-all); endif(). # Put this before tblgen. El",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:52143,Modifiability,config,config,52143,"get(test-depends; DEPENDS ${LLVM_ALL_LIT_DEPENDS} ${LLVM_ALL_ADDITIONAL_TEST_DEPENDS}); set_target_properties(test-depends PROPERTIES FOLDER ""Tests""); add_dependencies(check-all test-depends); endif(). if (LLVM_INCLUDE_DOCS); add_subdirectory(docs); endif(). add_subdirectory(cmake/modules). # Do this last so that all lit targets have already been created.; if (LLVM_INCLUDE_UTILS); add_subdirectory(utils/llvm-lit); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install(DIRECTORY include/llvm include/llvm-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""*.td""; PATTERN ""*.inc""; PATTERN ""LICENSE.TXT""; ). install(DIRECTORY ${LLVM_INCLUDE_DIR}/llvm ${LLVM_INCLUDE_DIR}/llvm-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""*.gen""; PATTERN ""*.inc""; # Exclude include/llvm/CMakeFiles/intrinsics_gen.dir, matched by ""*.def""; PATTERN ""CMakeFiles"" EXCLUDE; PATTERN ""config.h"" EXCLUDE; ). if (LLVM_INSTALL_MODULEMAPS); install(DIRECTORY include; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""module.modulemap""; ); install(FILES include/module.install.modulemap; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; RENAME ""module.extern.modulemap""; ); endif(LLVM_INSTALL_MODULEMAPS). # Installing the headers needs to depend on generating any public; # tablegen'd headers.; add_custom_target(llvm-headers DEPENDS intrinsics_gen omp_gen); set_target_properties(llvm-headers PROPERTIES FOLDER ""Misc""). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-llvm-headers; DEPENDS llvm-headers; COMPONENT llvm-headers); endif(). # Custom target to install all libraries.; add_custom_target(llvm-libraries); set_target_properties(llvm-libraries PROPERTIES FOLDER ""Misc""). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-llvm-libraries; DEPENDS llvm-libraries; COMPONENT llvm-lib",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:2657,Performance,cache,cache,2657,"and out of memory errors. To use the 64-bit ""; ""host compiler, pass -Thost=x64 on the CMake command line.""); endif(). if (CMAKE_GENERATOR STREQUAL ""Xcode"" AND NOT CMAKE_OSX_ARCHITECTURES); # Some CMake features like object libraries get confused if you don't; # explicitly specify an architecture setting with the Xcode generator.; set(CMAKE_OSX_ARCHITECTURES ""x86_64""); endif(). project(LLVM; VERSION ${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}; LANGUAGES C CXX ASM). if (NOT DEFINED CMAKE_INSTALL_LIBDIR AND DEFINED LLVM_LIBDIR_SUFFIX); # Must go before `include(GNUInstallDirs)`.; set(CMAKE_INSTALL_LIBDIR ""lib${LLVM_LIBDIR_SUFFIX}""); endif(). # Must go after `DEFINED LLVM_LIBDIR_SUFFIX` check.; set(LLVM_LIBDIR_SUFFIX """" CACHE STRING ""Define suffix of library directory name (32/64)"" ). # Must go after `project(..)`.; include(GNUInstallDirs). # This C++ standard is required to build LLVM.; set(LLVM_REQUIRED_CXX_STANDARD 17). # If we find that the cache contains CMAKE_CXX_STANDARD it means that it's a old CMakeCache.txt; # and we can just inform the user and then reset it.; if($CACHE{CMAKE_CXX_STANDARD} AND $CACHE{CMAKE_CXX_STANDARD} LESS ${LLVM_REQUIRED_CXX_STANDARD}); message(WARNING ""Resetting cache value for CMAKE_CXX_STANDARD to ${LLVM_REQUIRED_CXX_STANDARD}""); unset(CMAKE_CXX_STANDARD CACHE); endif(). # if CMAKE_CXX_STANDARD is still set after the cache unset above it means that the user requested it; # and we allow it to be set to something newer than the required standard but otherwise we fail.; if(DEFINED CMAKE_CXX_STANDARD AND CMAKE_CXX_STANDARD LESS ${LLVM_REQUIRED_CXX_STANDARD}); message(FATAL_ERROR ""Requested CMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD} which is less than the required ${LLVM_REQUIRED_CXX_STANDARD}.""); endif(). set(CMAKE_CXX_STANDARD ${LLVM_REQUIRED_CXX_STANDARD} CACHE STRING ""C++ standard to conform to""); set(CMAKE_CXX_STANDARD_REQUIRED YES). if (CYGWIN); # Cygwin is a bit stricter and lack things like 'strdup', 'stricmp', etc",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:2911,Performance,cache,cache,2911,"libraries get confused if you don't; # explicitly specify an architecture setting with the Xcode generator.; set(CMAKE_OSX_ARCHITECTURES ""x86_64""); endif(). project(LLVM; VERSION ${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}; LANGUAGES C CXX ASM). if (NOT DEFINED CMAKE_INSTALL_LIBDIR AND DEFINED LLVM_LIBDIR_SUFFIX); # Must go before `include(GNUInstallDirs)`.; set(CMAKE_INSTALL_LIBDIR ""lib${LLVM_LIBDIR_SUFFIX}""); endif(). # Must go after `DEFINED LLVM_LIBDIR_SUFFIX` check.; set(LLVM_LIBDIR_SUFFIX """" CACHE STRING ""Define suffix of library directory name (32/64)"" ). # Must go after `project(..)`.; include(GNUInstallDirs). # This C++ standard is required to build LLVM.; set(LLVM_REQUIRED_CXX_STANDARD 17). # If we find that the cache contains CMAKE_CXX_STANDARD it means that it's a old CMakeCache.txt; # and we can just inform the user and then reset it.; if($CACHE{CMAKE_CXX_STANDARD} AND $CACHE{CMAKE_CXX_STANDARD} LESS ${LLVM_REQUIRED_CXX_STANDARD}); message(WARNING ""Resetting cache value for CMAKE_CXX_STANDARD to ${LLVM_REQUIRED_CXX_STANDARD}""); unset(CMAKE_CXX_STANDARD CACHE); endif(). # if CMAKE_CXX_STANDARD is still set after the cache unset above it means that the user requested it; # and we allow it to be set to something newer than the required standard but otherwise we fail.; if(DEFINED CMAKE_CXX_STANDARD AND CMAKE_CXX_STANDARD LESS ${LLVM_REQUIRED_CXX_STANDARD}); message(FATAL_ERROR ""Requested CMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD} which is less than the required ${LLVM_REQUIRED_CXX_STANDARD}.""); endif(). set(CMAKE_CXX_STANDARD ${LLVM_REQUIRED_CXX_STANDARD} CACHE STRING ""C++ standard to conform to""); set(CMAKE_CXX_STANDARD_REQUIRED YES). if (CYGWIN); # Cygwin is a bit stricter and lack things like 'strdup', 'stricmp', etc in; # c++xx mode.; set(CMAKE_CXX_EXTENSIONS YES); else(); set(CMAKE_CXX_EXTENSIONS NO); endif(). if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES); message(FATAL_ERROR ""; No build type selected. You need to pass ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:3071,Performance,cache,cache,3071,"OR}.${LLVM_VERSION_PATCH}; LANGUAGES C CXX ASM). if (NOT DEFINED CMAKE_INSTALL_LIBDIR AND DEFINED LLVM_LIBDIR_SUFFIX); # Must go before `include(GNUInstallDirs)`.; set(CMAKE_INSTALL_LIBDIR ""lib${LLVM_LIBDIR_SUFFIX}""); endif(). # Must go after `DEFINED LLVM_LIBDIR_SUFFIX` check.; set(LLVM_LIBDIR_SUFFIX """" CACHE STRING ""Define suffix of library directory name (32/64)"" ). # Must go after `project(..)`.; include(GNUInstallDirs). # This C++ standard is required to build LLVM.; set(LLVM_REQUIRED_CXX_STANDARD 17). # If we find that the cache contains CMAKE_CXX_STANDARD it means that it's a old CMakeCache.txt; # and we can just inform the user and then reset it.; if($CACHE{CMAKE_CXX_STANDARD} AND $CACHE{CMAKE_CXX_STANDARD} LESS ${LLVM_REQUIRED_CXX_STANDARD}); message(WARNING ""Resetting cache value for CMAKE_CXX_STANDARD to ${LLVM_REQUIRED_CXX_STANDARD}""); unset(CMAKE_CXX_STANDARD CACHE); endif(). # if CMAKE_CXX_STANDARD is still set after the cache unset above it means that the user requested it; # and we allow it to be set to something newer than the required standard but otherwise we fail.; if(DEFINED CMAKE_CXX_STANDARD AND CMAKE_CXX_STANDARD LESS ${LLVM_REQUIRED_CXX_STANDARD}); message(FATAL_ERROR ""Requested CMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD} which is less than the required ${LLVM_REQUIRED_CXX_STANDARD}.""); endif(). set(CMAKE_CXX_STANDARD ${LLVM_REQUIRED_CXX_STANDARD} CACHE STRING ""C++ standard to conform to""); set(CMAKE_CXX_STANDARD_REQUIRED YES). if (CYGWIN); # Cygwin is a bit stricter and lack things like 'strdup', 'stricmp', etc in; # c++xx mode.; set(CMAKE_CXX_EXTENSIONS YES); else(); set(CMAKE_CXX_EXTENSIONS NO); endif(). if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES); message(FATAL_ERROR ""; No build type selected. You need to pass -DCMAKE_BUILD_TYPE=<type> in order to configure LLVM.; Available options are:; * -DCMAKE_BUILD_TYPE=Release - For an optimized build with no assertions or debug info.; * -DCMAKE_BUILD_TYPE=Debug - For an unoptimized bui",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:4021,Performance,optimiz,optimized,4021,"; endif(). # if CMAKE_CXX_STANDARD is still set after the cache unset above it means that the user requested it; # and we allow it to be set to something newer than the required standard but otherwise we fail.; if(DEFINED CMAKE_CXX_STANDARD AND CMAKE_CXX_STANDARD LESS ${LLVM_REQUIRED_CXX_STANDARD}); message(FATAL_ERROR ""Requested CMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD} which is less than the required ${LLVM_REQUIRED_CXX_STANDARD}.""); endif(). set(CMAKE_CXX_STANDARD ${LLVM_REQUIRED_CXX_STANDARD} CACHE STRING ""C++ standard to conform to""); set(CMAKE_CXX_STANDARD_REQUIRED YES). if (CYGWIN); # Cygwin is a bit stricter and lack things like 'strdup', 'stricmp', etc in; # c++xx mode.; set(CMAKE_CXX_EXTENSIONS YES); else(); set(CMAKE_CXX_EXTENSIONS NO); endif(). if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES); message(FATAL_ERROR ""; No build type selected. You need to pass -DCMAKE_BUILD_TYPE=<type> in order to configure LLVM.; Available options are:; * -DCMAKE_BUILD_TYPE=Release - For an optimized build with no assertions or debug info.; * -DCMAKE_BUILD_TYPE=Debug - For an unoptimized build with assertions and debug info.; * -DCMAKE_BUILD_TYPE=RelWithDebInfo - For an optimized build with no assertions but with debug info.; * -DCMAKE_BUILD_TYPE=MinSizeRel - For a build optimized for size instead of speed.; Learn more about these options in our documentation at https://llvm.org/docs/CMake.html#cmake-build-type; ""); endif(). # Set default build type for cmake's try_compile module.; # CMake 3.17 or newer sets CMAKE_DEFAULT_BUILD_TYPE to one of the; # items from CMAKE_CONFIGURATION_TYPES. Logic below can be further; # simplified once LLVM's minimum CMake version is updated to 3.17.; if(CMAKE_DEFAULT_BUILD_TYPE); set(CMAKE_TRY_COMPILE_CONFIGURATION ${CMAKE_DEFAULT_BUILD_TYPE}); else(); if(CMAKE_CONFIGURATION_TYPES); list(GET CMAKE_CONFIGURATION_TYPES 0 CMAKE_TRY_COMPILE_CONFIGURATION); elseif(CMAKE_BUILD_TYPE); set(CMAKE_TRY_COMPILE_CONFIGURATION ${CMAKE_BUILD_TYPE});",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:4204,Performance,optimiz,optimized,4204,"rwise we fail.; if(DEFINED CMAKE_CXX_STANDARD AND CMAKE_CXX_STANDARD LESS ${LLVM_REQUIRED_CXX_STANDARD}); message(FATAL_ERROR ""Requested CMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD} which is less than the required ${LLVM_REQUIRED_CXX_STANDARD}.""); endif(). set(CMAKE_CXX_STANDARD ${LLVM_REQUIRED_CXX_STANDARD} CACHE STRING ""C++ standard to conform to""); set(CMAKE_CXX_STANDARD_REQUIRED YES). if (CYGWIN); # Cygwin is a bit stricter and lack things like 'strdup', 'stricmp', etc in; # c++xx mode.; set(CMAKE_CXX_EXTENSIONS YES); else(); set(CMAKE_CXX_EXTENSIONS NO); endif(). if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES); message(FATAL_ERROR ""; No build type selected. You need to pass -DCMAKE_BUILD_TYPE=<type> in order to configure LLVM.; Available options are:; * -DCMAKE_BUILD_TYPE=Release - For an optimized build with no assertions or debug info.; * -DCMAKE_BUILD_TYPE=Debug - For an unoptimized build with assertions and debug info.; * -DCMAKE_BUILD_TYPE=RelWithDebInfo - For an optimized build with no assertions but with debug info.; * -DCMAKE_BUILD_TYPE=MinSizeRel - For a build optimized for size instead of speed.; Learn more about these options in our documentation at https://llvm.org/docs/CMake.html#cmake-build-type; ""); endif(). # Set default build type for cmake's try_compile module.; # CMake 3.17 or newer sets CMAKE_DEFAULT_BUILD_TYPE to one of the; # items from CMAKE_CONFIGURATION_TYPES. Logic below can be further; # simplified once LLVM's minimum CMake version is updated to 3.17.; if(CMAKE_DEFAULT_BUILD_TYPE); set(CMAKE_TRY_COMPILE_CONFIGURATION ${CMAKE_DEFAULT_BUILD_TYPE}); else(); if(CMAKE_CONFIGURATION_TYPES); list(GET CMAKE_CONFIGURATION_TYPES 0 CMAKE_TRY_COMPILE_CONFIGURATION); elseif(CMAKE_BUILD_TYPE); set(CMAKE_TRY_COMPILE_CONFIGURATION ${CMAKE_BUILD_TYPE}); endif(); endif(). # Side-by-side subprojects layout: automatically set the; # LLVM_EXTERNAL_${project}_SOURCE_DIR using LLVM_ALL_PROJECTS; # This allows an easy way of setting up a build direct",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:4307,Performance,optimiz,optimized,4307,"_STANDARD}); message(FATAL_ERROR ""Requested CMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD} which is less than the required ${LLVM_REQUIRED_CXX_STANDARD}.""); endif(). set(CMAKE_CXX_STANDARD ${LLVM_REQUIRED_CXX_STANDARD} CACHE STRING ""C++ standard to conform to""); set(CMAKE_CXX_STANDARD_REQUIRED YES). if (CYGWIN); # Cygwin is a bit stricter and lack things like 'strdup', 'stricmp', etc in; # c++xx mode.; set(CMAKE_CXX_EXTENSIONS YES); else(); set(CMAKE_CXX_EXTENSIONS NO); endif(). if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES); message(FATAL_ERROR ""; No build type selected. You need to pass -DCMAKE_BUILD_TYPE=<type> in order to configure LLVM.; Available options are:; * -DCMAKE_BUILD_TYPE=Release - For an optimized build with no assertions or debug info.; * -DCMAKE_BUILD_TYPE=Debug - For an unoptimized build with assertions and debug info.; * -DCMAKE_BUILD_TYPE=RelWithDebInfo - For an optimized build with no assertions but with debug info.; * -DCMAKE_BUILD_TYPE=MinSizeRel - For a build optimized for size instead of speed.; Learn more about these options in our documentation at https://llvm.org/docs/CMake.html#cmake-build-type; ""); endif(). # Set default build type for cmake's try_compile module.; # CMake 3.17 or newer sets CMAKE_DEFAULT_BUILD_TYPE to one of the; # items from CMAKE_CONFIGURATION_TYPES. Logic below can be further; # simplified once LLVM's minimum CMake version is updated to 3.17.; if(CMAKE_DEFAULT_BUILD_TYPE); set(CMAKE_TRY_COMPILE_CONFIGURATION ${CMAKE_DEFAULT_BUILD_TYPE}); else(); if(CMAKE_CONFIGURATION_TYPES); list(GET CMAKE_CONFIGURATION_TYPES 0 CMAKE_TRY_COMPILE_CONFIGURATION); elseif(CMAKE_BUILD_TYPE); set(CMAKE_TRY_COMPILE_CONFIGURATION ${CMAKE_BUILD_TYPE}); endif(); endif(). # Side-by-side subprojects layout: automatically set the; # LLVM_EXTERNAL_${project}_SOURCE_DIR using LLVM_ALL_PROJECTS; # This allows an easy way of setting up a build directory for llvm and another; # one for llvm+clang+... using the same sources.; set(LLVM_ALL_PROJ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:7939,Performance,cache,cache,7939,"tl;libcxx;compiler-rt;openmp;llvm-libgcc""); set(LLVM_ENABLE_RUNTIMES """" CACHE STRING; ""Semicolon-separated list of runtimes to build, or \""all\"" (${LLVM_DEFAULT_RUNTIMES}). Supported runtimes are ${LLVM_SUPPORTED_RUNTIMES}.""); if(LLVM_ENABLE_RUNTIMES STREQUAL ""all""); set(LLVM_ENABLE_RUNTIMES ${LLVM_DEFAULT_RUNTIMES}); endif(); foreach(proj IN LISTS LLVM_ENABLE_RUNTIMES); if (NOT ""${proj}"" IN_LIST LLVM_SUPPORTED_RUNTIMES); message(FATAL_ERROR ""Runtime \""${proj}\"" is not a supported runtime. Supported runtimes are: ${LLVM_SUPPORTED_RUNTIMES}""); endif(); endforeach(). if (""libc"" IN_LIST LLVM_ENABLE_RUNTIMES); # To build the libc runtime, we need to be able to build few libc build; # tools from the ""libc"" project. So, we add it to the list of enabled; # projects.; if (NOT ""libc"" IN_LIST LLVM_ENABLE_PROJECTS); message(STATUS ""Enabling libc project to build libc build tools""); list(APPEND LLVM_ENABLE_PROJECTS ""libc""); endif(); endif(). # LLVM_ENABLE_PROJECTS_USED is `ON` if the user has ever used the; # `LLVM_ENABLE_PROJECTS` CMake cache variable. This exists for; # several reasons:; #; # * As an indicator that the `LLVM_ENABLE_PROJECTS` list is now the single; # source of truth for which projects to build. This means we will ignore user; # supplied `LLVM_TOOL_<project>_BUILD` CMake cache variables and overwrite; # them.; #; # * The case where the user previously had `LLVM_ENABLE_PROJECTS` set to a; # non-empty list but now the user wishes to disable building all other projects; # by setting `LLVM_ENABLE_PROJECTS` to an empty string. In that case we still; # need to set the `LLVM_TOOL_${upper_proj}_BUILD` variables so that we disable; # building all the projects that were previously enabled.; set(LLVM_ENABLE_PROJECTS_USED OFF CACHE BOOL """"); mark_as_advanced(LLVM_ENABLE_PROJECTS_USED). if (LLVM_ENABLE_PROJECTS_USED OR NOT LLVM_ENABLE_PROJECTS STREQUAL """"); set(LLVM_ENABLE_PROJECTS_USED ON CACHE BOOL """" FORCE); foreach(proj ${LLVM_KNOWN_PROJECTS} ${LLVM_EXTERNAL_PROJECTS})",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:8195,Performance,cache,cache,8195,"NABLE_RUNTIMES ${LLVM_DEFAULT_RUNTIMES}); endif(); foreach(proj IN LISTS LLVM_ENABLE_RUNTIMES); if (NOT ""${proj}"" IN_LIST LLVM_SUPPORTED_RUNTIMES); message(FATAL_ERROR ""Runtime \""${proj}\"" is not a supported runtime. Supported runtimes are: ${LLVM_SUPPORTED_RUNTIMES}""); endif(); endforeach(). if (""libc"" IN_LIST LLVM_ENABLE_RUNTIMES); # To build the libc runtime, we need to be able to build few libc build; # tools from the ""libc"" project. So, we add it to the list of enabled; # projects.; if (NOT ""libc"" IN_LIST LLVM_ENABLE_PROJECTS); message(STATUS ""Enabling libc project to build libc build tools""); list(APPEND LLVM_ENABLE_PROJECTS ""libc""); endif(); endif(). # LLVM_ENABLE_PROJECTS_USED is `ON` if the user has ever used the; # `LLVM_ENABLE_PROJECTS` CMake cache variable. This exists for; # several reasons:; #; # * As an indicator that the `LLVM_ENABLE_PROJECTS` list is now the single; # source of truth for which projects to build. This means we will ignore user; # supplied `LLVM_TOOL_<project>_BUILD` CMake cache variables and overwrite; # them.; #; # * The case where the user previously had `LLVM_ENABLE_PROJECTS` set to a; # non-empty list but now the user wishes to disable building all other projects; # by setting `LLVM_ENABLE_PROJECTS` to an empty string. In that case we still; # need to set the `LLVM_TOOL_${upper_proj}_BUILD` variables so that we disable; # building all the projects that were previously enabled.; set(LLVM_ENABLE_PROJECTS_USED OFF CACHE BOOL """"); mark_as_advanced(LLVM_ENABLE_PROJECTS_USED). if (LLVM_ENABLE_PROJECTS_USED OR NOT LLVM_ENABLE_PROJECTS STREQUAL """"); set(LLVM_ENABLE_PROJECTS_USED ON CACHE BOOL """" FORCE); foreach(proj ${LLVM_KNOWN_PROJECTS} ${LLVM_EXTERNAL_PROJECTS}); string(TOUPPER ""${proj}"" upper_proj); string(REGEX REPLACE ""-"" ""_"" upper_proj ${upper_proj}); if (""${proj}"" IN_LIST LLVM_ENABLE_PROJECTS); message(STATUS ""${proj} project is enabled""); set(SHOULD_ENABLE_PROJECT TRUE); set(PROJ_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}""); if",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:10190,Performance,cache,cache,10190,"""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}""); if(NOT EXISTS ""${PROJ_DIR}"" OR NOT IS_DIRECTORY ""${PROJ_DIR}""); message(FATAL_ERROR ""LLVM_ENABLE_PROJECTS requests ${proj} but directory not found: ${PROJ_DIR}""); endif(); if( LLVM_EXTERNAL_${upper_proj}_SOURCE_DIR STREQUAL """" ); set(LLVM_EXTERNAL_${upper_proj}_SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}"" CACHE PATH """" FORCE); else(); set(LLVM_EXTERNAL_${upper_proj}_SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}"" CACHE PATH """"); endif(); elseif (""${proj}"" IN_LIST LLVM_EXTERNAL_PROJECTS); message(STATUS ""${proj} project is enabled""); set(SHOULD_ENABLE_PROJECT TRUE); else(); message(STATUS ""${proj} project is disabled""); set(SHOULD_ENABLE_PROJECT FALSE); endif(); # Force `LLVM_TOOL_${upper_proj}_BUILD` variables to have values that; # corresponds with `LLVM_ENABLE_PROJECTS`. This prevents the user setting; # `LLVM_TOOL_${upper_proj}_BUILD` variables externally. At some point; # we should deprecate allowing users to set these variables by turning them; # into normal CMake variables rather than cache variables.; set(LLVM_TOOL_${upper_proj}_BUILD; ${SHOULD_ENABLE_PROJECT}; CACHE; BOOL ""Whether to build ${upper_proj} as part of LLVM"" FORCE; ); endforeach(); endif(); unset(SHOULD_ENABLE_PROJECT). # Build llvm with ccache if the package is present; set(LLVM_CCACHE_BUILD OFF CACHE BOOL ""Set to ON for a ccache enabled build""); if(LLVM_CCACHE_BUILD); find_program(CCACHE_PROGRAM ccache); if(CCACHE_PROGRAM); set(LLVM_CCACHE_MAXSIZE """" CACHE STRING ""Size of ccache""); set(LLVM_CCACHE_DIR """" CACHE STRING ""Directory to keep ccached data""); set(LLVM_CCACHE_PARAMS ""CCACHE_CPP2=yes CCACHE_HASHDIR=yes""; CACHE STRING ""Parameters to pass through to ccache""). if(NOT CMAKE_SYSTEM_NAME MATCHES ""Windows""); set(CCACHE_PROGRAM ""${LLVM_CCACHE_PARAMS} ${CCACHE_PROGRAM}""); if (LLVM_CCACHE_MAXSIZE); set(CCACHE_PROGRAM ""CCACHE_MAXSIZE=${LLVM_CCACHE_MAXSIZE} ${CCACHE_PROGRAM}""); endif(); if (LLVM_CCACHE_DIR); set(CCACHE_PROGRAM ""CCACHE_DIR=${LLVM_C",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:22176,Performance,perform,performance,22176,"t identify itself as Windows, and thus gets path::Style::posix; # as native path style, regardless of what this is set to.; set(WINDOWS_PREFER_FORWARD_SLASH_DEFAULT ON); endif(); option(LLVM_WINDOWS_PREFER_FORWARD_SLASH ""Prefer path names with forward slashes on Windows."" ${WINDOWS_PREFER_FORWARD_SLASH_DEFAULT}). option(LLVM_ENABLE_FFI ""Use libffi to call external functions from the interpreter"" OFF); set(FFI_LIBRARY_DIR """" CACHE PATH ""Additional directory, where CMake should search for libffi.so""); set(FFI_INCLUDE_DIR """" CACHE PATH ""Additional directory, where CMake should search for ffi.h or ffi/ffi.h""). set(LLVM_TARGET_ARCH ""host""; CACHE STRING ""Set target to use for LLVM JIT or use \""host\"" for automatic detection.""). option(LLVM_ENABLE_TERMINFO ""Use terminfo database if available."" ON). set(LLVM_ENABLE_LIBXML2 ""ON"" CACHE STRING ""Use libxml2 if available. Can be ON, OFF, or FORCE_ON""). option(LLVM_ENABLE_LIBEDIT ""Use libedit if available."" ON). option(LLVM_ENABLE_LIBPFM ""Use libpfm for performance counters if available."" ON). # On z/OS, threads cannot be used because TLS is not supported.; if (CMAKE_SYSTEM_NAME MATCHES ""OS390""); option(LLVM_ENABLE_THREADS ""Use threads if available."" OFF); else(); option(LLVM_ENABLE_THREADS ""Use threads if available."" ON); endif(). set(LLVM_ENABLE_ZLIB ""ON"" CACHE STRING ""Use zlib for compression/decompression if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_ENABLE_ZSTD ""ON"" CACHE STRING ""Use zstd for compression/decompression if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_USE_STATIC_ZSTD FALSE CACHE BOOL ""Use static version of zstd. Can be TRUE, FALSE""). set(LLVM_ENABLE_CURL ""OFF"" CACHE STRING ""Use libcurl for the HTTP client if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_ENABLE_HTTPLIB ""OFF"" CACHE STRING ""Use cpp-httplib HTTP server library if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_Z3_INSTALL_DIR """" CACHE STRING ""Install directory of the Z3 solver.""). option(LLVM_ENABLE_Z3_SOLVER; ""Enable Support fo",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:25491,Performance,scalab,scalable,25491,"; option(LLVM_ENABLE_LLVM_LIBC ""Set to on to link all LLVM executables against LLVM libc, assuming it is accessible by the host compiler."" OFF); option(LLVM_STATIC_LINK_CXX_STDLIB ""Statically link the standard library."" OFF); option(LLVM_ENABLE_LLD ""Use lld as C and C++ linker."" OFF); option(LLVM_ENABLE_PEDANTIC ""Compile with pedantic enabled."" ON); option(LLVM_ENABLE_WERROR ""Fail and stop if a warning is triggered."" OFF). option(LLVM_ENABLE_DUMP ""Enable dump functions even when assertions are disabled"" OFF); option(LLVM_UNREACHABLE_OPTIMIZE ""Optimize llvm_unreachable() as undefined behavior (default), guaranteed trap when OFF"" ON). if( NOT uppercase_CMAKE_BUILD_TYPE STREQUAL ""DEBUG"" ); option(LLVM_ENABLE_ASSERTIONS ""Enable assertions"" OFF); else(); option(LLVM_ENABLE_ASSERTIONS ""Enable assertions"" ON); endif(). option(LLVM_ENABLE_EXPENSIVE_CHECKS ""Enable expensive checks"" OFF). # While adding scalable vector support to LLVM, we temporarily want to; # allow an implicit conversion of TypeSize to uint64_t, and to allow; # code to get the fixed number of elements from a possibly scalable vector.; # This CMake flag enables a more strict mode where it asserts that the type; # is not a scalable vector type.; #; # Enabling this flag makes it easier to find cases where the compiler makes; # assumptions on the size being 'fixed size', when building tests for; # SVE/SVE2 or other scalable vector architectures.; option(LLVM_ENABLE_STRICT_FIXED_SIZE_VECTORS; ""Enable assertions that type is not scalable in implicit conversion from TypeSize to uint64_t and calls to getNumElements"" OFF). set(LLVM_ABI_BREAKING_CHECKS ""WITH_ASSERTS"" CACHE STRING; ""Enable abi-breaking checks. Can be WITH_ASSERTS, FORCE_ON or FORCE_OFF.""). option(LLVM_FORCE_USE_OLD_TOOLCHAIN; ""Set to ON to force using an old, unsupported host toolchain."" OFF). set(LLVM_LOCAL_RPATH """" CACHE FILEPATH; ""If set, an absolute path added as rpath on binaries that do not already contain an executable-relative rpath.""). option",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:25677,Performance,scalab,scalable,25677,"; option(LLVM_ENABLE_LLVM_LIBC ""Set to on to link all LLVM executables against LLVM libc, assuming it is accessible by the host compiler."" OFF); option(LLVM_STATIC_LINK_CXX_STDLIB ""Statically link the standard library."" OFF); option(LLVM_ENABLE_LLD ""Use lld as C and C++ linker."" OFF); option(LLVM_ENABLE_PEDANTIC ""Compile with pedantic enabled."" ON); option(LLVM_ENABLE_WERROR ""Fail and stop if a warning is triggered."" OFF). option(LLVM_ENABLE_DUMP ""Enable dump functions even when assertions are disabled"" OFF); option(LLVM_UNREACHABLE_OPTIMIZE ""Optimize llvm_unreachable() as undefined behavior (default), guaranteed trap when OFF"" ON). if( NOT uppercase_CMAKE_BUILD_TYPE STREQUAL ""DEBUG"" ); option(LLVM_ENABLE_ASSERTIONS ""Enable assertions"" OFF); else(); option(LLVM_ENABLE_ASSERTIONS ""Enable assertions"" ON); endif(). option(LLVM_ENABLE_EXPENSIVE_CHECKS ""Enable expensive checks"" OFF). # While adding scalable vector support to LLVM, we temporarily want to; # allow an implicit conversion of TypeSize to uint64_t, and to allow; # code to get the fixed number of elements from a possibly scalable vector.; # This CMake flag enables a more strict mode where it asserts that the type; # is not a scalable vector type.; #; # Enabling this flag makes it easier to find cases where the compiler makes; # assumptions on the size being 'fixed size', when building tests for; # SVE/SVE2 or other scalable vector architectures.; option(LLVM_ENABLE_STRICT_FIXED_SIZE_VECTORS; ""Enable assertions that type is not scalable in implicit conversion from TypeSize to uint64_t and calls to getNumElements"" OFF). set(LLVM_ABI_BREAKING_CHECKS ""WITH_ASSERTS"" CACHE STRING; ""Enable abi-breaking checks. Can be WITH_ASSERTS, FORCE_ON or FORCE_OFF.""). option(LLVM_FORCE_USE_OLD_TOOLCHAIN; ""Set to ON to force using an old, unsupported host toolchain."" OFF). set(LLVM_LOCAL_RPATH """" CACHE FILEPATH; ""If set, an absolute path added as rpath on binaries that do not already contain an executable-relative rpath.""). option",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:25783,Performance,scalab,scalable,25783,"LINK_CXX_STDLIB ""Statically link the standard library."" OFF); option(LLVM_ENABLE_LLD ""Use lld as C and C++ linker."" OFF); option(LLVM_ENABLE_PEDANTIC ""Compile with pedantic enabled."" ON); option(LLVM_ENABLE_WERROR ""Fail and stop if a warning is triggered."" OFF). option(LLVM_ENABLE_DUMP ""Enable dump functions even when assertions are disabled"" OFF); option(LLVM_UNREACHABLE_OPTIMIZE ""Optimize llvm_unreachable() as undefined behavior (default), guaranteed trap when OFF"" ON). if( NOT uppercase_CMAKE_BUILD_TYPE STREQUAL ""DEBUG"" ); option(LLVM_ENABLE_ASSERTIONS ""Enable assertions"" OFF); else(); option(LLVM_ENABLE_ASSERTIONS ""Enable assertions"" ON); endif(). option(LLVM_ENABLE_EXPENSIVE_CHECKS ""Enable expensive checks"" OFF). # While adding scalable vector support to LLVM, we temporarily want to; # allow an implicit conversion of TypeSize to uint64_t, and to allow; # code to get the fixed number of elements from a possibly scalable vector.; # This CMake flag enables a more strict mode where it asserts that the type; # is not a scalable vector type.; #; # Enabling this flag makes it easier to find cases where the compiler makes; # assumptions on the size being 'fixed size', when building tests for; # SVE/SVE2 or other scalable vector architectures.; option(LLVM_ENABLE_STRICT_FIXED_SIZE_VECTORS; ""Enable assertions that type is not scalable in implicit conversion from TypeSize to uint64_t and calls to getNumElements"" OFF). set(LLVM_ABI_BREAKING_CHECKS ""WITH_ASSERTS"" CACHE STRING; ""Enable abi-breaking checks. Can be WITH_ASSERTS, FORCE_ON or FORCE_OFF.""). option(LLVM_FORCE_USE_OLD_TOOLCHAIN; ""Set to ON to force using an old, unsupported host toolchain."" OFF). set(LLVM_LOCAL_RPATH """" CACHE FILEPATH; ""If set, an absolute path added as rpath on binaries that do not already contain an executable-relative rpath.""). option(LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN; ""Set to ON to only warn when using a toolchain which is about to be deprecated, instead of emitting an error."" OFF). option(LL",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:25977,Performance,scalab,scalable,25977,"e with pedantic enabled."" ON); option(LLVM_ENABLE_WERROR ""Fail and stop if a warning is triggered."" OFF). option(LLVM_ENABLE_DUMP ""Enable dump functions even when assertions are disabled"" OFF); option(LLVM_UNREACHABLE_OPTIMIZE ""Optimize llvm_unreachable() as undefined behavior (default), guaranteed trap when OFF"" ON). if( NOT uppercase_CMAKE_BUILD_TYPE STREQUAL ""DEBUG"" ); option(LLVM_ENABLE_ASSERTIONS ""Enable assertions"" OFF); else(); option(LLVM_ENABLE_ASSERTIONS ""Enable assertions"" ON); endif(). option(LLVM_ENABLE_EXPENSIVE_CHECKS ""Enable expensive checks"" OFF). # While adding scalable vector support to LLVM, we temporarily want to; # allow an implicit conversion of TypeSize to uint64_t, and to allow; # code to get the fixed number of elements from a possibly scalable vector.; # This CMake flag enables a more strict mode where it asserts that the type; # is not a scalable vector type.; #; # Enabling this flag makes it easier to find cases where the compiler makes; # assumptions on the size being 'fixed size', when building tests for; # SVE/SVE2 or other scalable vector architectures.; option(LLVM_ENABLE_STRICT_FIXED_SIZE_VECTORS; ""Enable assertions that type is not scalable in implicit conversion from TypeSize to uint64_t and calls to getNumElements"" OFF). set(LLVM_ABI_BREAKING_CHECKS ""WITH_ASSERTS"" CACHE STRING; ""Enable abi-breaking checks. Can be WITH_ASSERTS, FORCE_ON or FORCE_OFF.""). option(LLVM_FORCE_USE_OLD_TOOLCHAIN; ""Set to ON to force using an old, unsupported host toolchain."" OFF). set(LLVM_LOCAL_RPATH """" CACHE FILEPATH; ""If set, an absolute path added as rpath on binaries that do not already contain an executable-relative rpath.""). option(LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN; ""Set to ON to only warn when using a toolchain which is about to be deprecated, instead of emitting an error."" OFF). option(LLVM_USE_INTEL_JITEVENTS; ""Use Intel JIT API to inform Intel(R) VTune(TM) Amplifier XE 2011 about JIT code""; OFF). if( LLVM_USE_INTEL_JITEVENTS ); # Verify we ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:26091,Performance,scalab,scalable,26091,"F); option(LLVM_UNREACHABLE_OPTIMIZE ""Optimize llvm_unreachable() as undefined behavior (default), guaranteed trap when OFF"" ON). if( NOT uppercase_CMAKE_BUILD_TYPE STREQUAL ""DEBUG"" ); option(LLVM_ENABLE_ASSERTIONS ""Enable assertions"" OFF); else(); option(LLVM_ENABLE_ASSERTIONS ""Enable assertions"" ON); endif(). option(LLVM_ENABLE_EXPENSIVE_CHECKS ""Enable expensive checks"" OFF). # While adding scalable vector support to LLVM, we temporarily want to; # allow an implicit conversion of TypeSize to uint64_t, and to allow; # code to get the fixed number of elements from a possibly scalable vector.; # This CMake flag enables a more strict mode where it asserts that the type; # is not a scalable vector type.; #; # Enabling this flag makes it easier to find cases where the compiler makes; # assumptions on the size being 'fixed size', when building tests for; # SVE/SVE2 or other scalable vector architectures.; option(LLVM_ENABLE_STRICT_FIXED_SIZE_VECTORS; ""Enable assertions that type is not scalable in implicit conversion from TypeSize to uint64_t and calls to getNumElements"" OFF). set(LLVM_ABI_BREAKING_CHECKS ""WITH_ASSERTS"" CACHE STRING; ""Enable abi-breaking checks. Can be WITH_ASSERTS, FORCE_ON or FORCE_OFF.""). option(LLVM_FORCE_USE_OLD_TOOLCHAIN; ""Set to ON to force using an old, unsupported host toolchain."" OFF). set(LLVM_LOCAL_RPATH """" CACHE FILEPATH; ""If set, an absolute path added as rpath on binaries that do not already contain an executable-relative rpath.""). option(LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN; ""Set to ON to only warn when using a toolchain which is about to be deprecated, instead of emitting an error."" OFF). option(LLVM_USE_INTEL_JITEVENTS; ""Use Intel JIT API to inform Intel(R) VTune(TM) Amplifier XE 2011 about JIT code""; OFF). if( LLVM_USE_INTEL_JITEVENTS ); # Verify we are on a supported platform; if( NOT CMAKE_SYSTEM_NAME MATCHES ""Windows"" AND NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR; ""Intel JIT API support is available on Linux and W",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:34560,Performance,optimiz,optimization,34560,"_C_DYLIB ""Build LLVM-C.dll (Windows only)"" ON); # Set this variable to OFF here so it can't be set with a command-line; # argument.; set (LLVM_LINK_LLVM_DYLIB OFF); if (BUILD_SHARED_LIBS); message(FATAL_ERROR ""BUILD_SHARED_LIBS options is not supported on Windows.""); endif(); else(); option(LLVM_LINK_LLVM_DYLIB ""Link tools against the libllvm dynamic library"" OFF); option(LLVM_BUILD_LLVM_C_DYLIB ""Build libllvm-c re-export library (Darwin only)"" OFF); set(LLVM_BUILD_LLVM_DYLIB_default OFF); if(LLVM_LINK_LLVM_DYLIB OR LLVM_BUILD_LLVM_C_DYLIB); set(LLVM_BUILD_LLVM_DYLIB_default ON); endif(); option(LLVM_BUILD_LLVM_DYLIB ""Build libllvm dynamic library"" ${LLVM_BUILD_LLVM_DYLIB_default}); endif(). if (LLVM_LINK_LLVM_DYLIB AND BUILD_SHARED_LIBS); message(FATAL_ERROR ""Cannot enable BUILD_SHARED_LIBS with LLVM_LINK_LLVM_DYLIB. We recommend disabling BUILD_SHARED_LIBS.""); endif(). option(LLVM_OPTIMIZED_TABLEGEN ""Force TableGen to be built with optimization"" OFF); if(CMAKE_CROSSCOMPILING OR (LLVM_OPTIMIZED_TABLEGEN AND (LLVM_ENABLE_ASSERTIONS OR CMAKE_CONFIGURATION_TYPES))); set(LLVM_USE_HOST_TOOLS ON); endif(). option(LLVM_OMIT_DAGISEL_COMMENTS ""Do not add comments to DAG ISel"" ON); if (CMAKE_BUILD_TYPE AND uppercase_CMAKE_BUILD_TYPE MATCHES ""^(RELWITHDEBINFO|DEBUG)$""); set(LLVM_OMIT_DAGISEL_COMMENTS OFF); endif(). if (MSVC_IDE); option(LLVM_ADD_NATIVE_VISUALIZERS_TO_SOLUTION ""Configure project to use Visual Studio native visualizers"" TRUE); endif(). if(NOT LLVM_INDIVIDUAL_TEST_COVERAGE); if(LLVM_BUILD_INSTRUMENTED OR LLVM_BUILD_INSTRUMENTED_COVERAGE OR LLVM_ENABLE_IR_PGO); if(NOT LLVM_PROFILE_MERGE_POOL_SIZE); # A pool size of 1-2 is probably sufficient on an SSD. 3-4 should be fine; # for spinning disks. Anything higher may only help on slower mediums.; set(LLVM_PROFILE_MERGE_POOL_SIZE ""4""); endif(); if(NOT LLVM_PROFILE_FILE_PATTERN); if(NOT LLVM_PROFILE_DATA_DIR); file(TO_NATIVE_PATH ""${LLVM_BINARY_DIR}/profiles"" LLVM_PROFILE_DATA_DIR); endif(); file(TO_NATIVE_PATH ""${LLVM_",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:37310,Performance,perform,performance,37310,"(FIND CMAKE_FIND_LIBRARY_SUFFIXES ${shared_lib_suffix} shared_lib_suffix_idx); if(NOT ${shared_lib_suffix_idx} EQUAL -1); list(REMOVE_AT CMAKE_FIND_LIBRARY_SUFFIXES ${shared_lib_suffix_idx}); endif(); endforeach(); endif(). # Use libtool instead of ar if you are both on an Apple host, and targeting Apple.; if(CMAKE_HOST_APPLE AND APPLE); include(UseLibtool); endif(). # Override the default target with an environment variable named by LLVM_TARGET_TRIPLE_ENV.; set(LLVM_TARGET_TRIPLE_ENV CACHE STRING ""The name of environment variable to override default target. Disabled by blank.""); mark_as_advanced(LLVM_TARGET_TRIPLE_ENV). if(CMAKE_SYSTEM_NAME MATCHES ""BSD|Linux|OS390""); set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default ON); else(); set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default OFF); endif(); set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR ${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default} CACHE BOOL; ""Enable per-target runtimes directory""). set(LLVM_PROFDATA_FILE """" CACHE FILEPATH; ""Profiling data file to use when compiling in order to improve runtime performance.""). if(LLVM_INCLUDE_TESTS); # Lit test suite requires at least python 3.6; set(LLVM_MINIMUM_PYTHON_VERSION 3.6); else(); # FIXME: it is unknown if this is the actual minimum bound; set(LLVM_MINIMUM_PYTHON_VERSION 3.0); endif(). # Find python before including config-ix, since it needs to be able to search; # for python modules.; find_package(Python3 ${LLVM_MINIMUM_PYTHON_VERSION} REQUIRED; COMPONENTS Interpreter). # All options referred to from HandleLLVMOptions have to be specified; # BEFORE this include, otherwise options will not be correctly set on; # first cmake run; include(config-ix). # By default, we target the host, but this can be overridden at CMake; # invocation time. Except on 64-bit AIX, where the system toolchain; # expect 32-bit objects by default.; if(""${LLVM_HOST_TRIPLE}"" MATCHES ""^powerpc64-ibm-aix""); string(REGEX REPLACE ""^powerpc64"" ""powerpc"" LLVM_DEFAULT_TARGET_TRIPLE_DEFAULT ""${LLVM_HOST_TRIPLE}""); els",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:21889,Safety,detect,detection,21889," ON). option(LLVM_ENABLE_CRASH_OVERRIDES ""Enable crash overrides."" ON); if(LLVM_ENABLE_CRASH_OVERRIDES); set(ENABLE_CRASH_OVERRIDES 1); endif(). option(LLVM_ENABLE_CRASH_DUMPS ""Turn on memory dumps on crashes. Currently only implemented on Windows."" OFF). set(WINDOWS_PREFER_FORWARD_SLASH_DEFAULT OFF); if (MINGW); # Cygwin doesn't identify itself as Windows, and thus gets path::Style::posix; # as native path style, regardless of what this is set to.; set(WINDOWS_PREFER_FORWARD_SLASH_DEFAULT ON); endif(); option(LLVM_WINDOWS_PREFER_FORWARD_SLASH ""Prefer path names with forward slashes on Windows."" ${WINDOWS_PREFER_FORWARD_SLASH_DEFAULT}). option(LLVM_ENABLE_FFI ""Use libffi to call external functions from the interpreter"" OFF); set(FFI_LIBRARY_DIR """" CACHE PATH ""Additional directory, where CMake should search for libffi.so""); set(FFI_INCLUDE_DIR """" CACHE PATH ""Additional directory, where CMake should search for ffi.h or ffi/ffi.h""). set(LLVM_TARGET_ARCH ""host""; CACHE STRING ""Set target to use for LLVM JIT or use \""host\"" for automatic detection.""). option(LLVM_ENABLE_TERMINFO ""Use terminfo database if available."" ON). set(LLVM_ENABLE_LIBXML2 ""ON"" CACHE STRING ""Use libxml2 if available. Can be ON, OFF, or FORCE_ON""). option(LLVM_ENABLE_LIBEDIT ""Use libedit if available."" ON). option(LLVM_ENABLE_LIBPFM ""Use libpfm for performance counters if available."" ON). # On z/OS, threads cannot be used because TLS is not supported.; if (CMAKE_SYSTEM_NAME MATCHES ""OS390""); option(LLVM_ENABLE_THREADS ""Use threads if available."" OFF); else(); option(LLVM_ENABLE_THREADS ""Use threads if available."" ON); endif(). set(LLVM_ENABLE_ZLIB ""ON"" CACHE STRING ""Use zlib for compression/decompression if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_ENABLE_ZSTD ""ON"" CACHE STRING ""Use zstd for compression/decompression if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_USE_STATIC_ZSTD FALSE CACHE BOOL ""Use static version of zstd. Can be TRUE, FALSE""). set(LLVM_ENABLE_CURL ""OFF"" CACHE STRING """,MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:28520,Safety,recover,recover,28520,"s for debug-info"" OFF). set(LLVM_CODESIGNING_IDENTITY """" CACHE STRING; ""Sign executables and dylibs with the given identity or skip if empty (Darwin Only)""). # If enabled, verify we are on a platform that supports oprofile.; if( LLVM_USE_OPROFILE ); if( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR ""OProfile support is available on Linux only.""); endif( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); endif( LLVM_USE_OPROFILE ). option(LLVM_USE_PERF; ""Use perf JIT interface to inform perf about JIT code"" OFF). # If enabled, verify we are on a platform that supports perf.; if( LLVM_USE_PERF ); if( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR ""perf support is available on Linux only.""); endif( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); endif( LLVM_USE_PERF ). set(LLVM_USE_SANITIZER """" CACHE STRING; ""Define the sanitizer used to build binaries and tests.""); option(LLVM_OPTIMIZE_SANITIZED_BUILDS ""Pass -O1 on debug sanitizer builds"" ON); set(LLVM_UBSAN_FLAGS; ""-fsanitize=undefined -fno-sanitize=vptr,function -fno-sanitize-recover=all""; CACHE STRING; ""Compile flags set to enable UBSan. Only used if LLVM_USE_SANITIZER contains 'Undefined'.""); set(LLVM_LIB_FUZZING_ENGINE """" CACHE PATH; ""Path to fuzzing library for linking with fuzz targets""). option(LLVM_USE_SPLIT_DWARF; ""Use -gsplit-dwarf when compiling llvm and --gdb-index when linking."" OFF). # Define an option controlling whether we should build for 32-bit on 64-bit; # platforms, where supported.; if( CMAKE_SIZEOF_VOID_P EQUAL 8 AND NOT (WIN32 OR ${CMAKE_SYSTEM_NAME} MATCHES ""AIX"")); # TODO: support other platforms and toolchains.; option(LLVM_BUILD_32_BITS ""Build 32 bits executables and libraries."" OFF); endif(). # Define the default arguments to use with 'lit', and an option for the user to; # override.; set(LIT_ARGS_DEFAULT ""-sv""); if (MSVC_IDE OR XCODE); set(LIT_ARGS_DEFAULT ""${LIT_ARGS_DEFAULT} --no-progress-bar""); endif(); if(LLVM_INDIVIDUAL_TEST_COVERAGE); set(LIT_ARGS_DEFAULT ""${LIT_ARGS_DEFA",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:47862,Safety,avoid,avoid,47862,"red -Wl,-G""). # Also set the correct flags for building shared libraries.; string(APPEND CMAKE_SHARED_LINKER_FLAGS "" -shared""); endif(). # Build with _XOPEN_SOURCE on z/OS.; if (CMAKE_SYSTEM_NAME MATCHES ""OS390""); add_compile_definitions(_XOPEN_SOURCE=600); add_compile_definitions(_OPEN_SYS) # Needed for process information.; add_compile_definitions(_OPEN_SYS_FILE_EXT) # Needed for EBCDIC I/O.; add_compile_definitions(_EXT) # Needed for file data.; add_compile_definitions(_UNIX03_THREADS) # Multithreading support.; endif(). # Build with _FILE_OFFSET_BITS=64 on Solaris to match g++ >= 9.; if (UNIX AND ${CMAKE_SYSTEM_NAME} MATCHES ""SunOS""); add_compile_definitions(_FILE_OFFSET_BITS=64); endif(). set(CMAKE_INCLUDE_CURRENT_DIR ON). include_directories( ${LLVM_INCLUDE_DIR} ${LLVM_MAIN_INCLUDE_DIR}). # when crosscompiling import the executable targets from a file; if(LLVM_USE_HOST_TOOLS); include(CrossCompile); llvm_create_cross_target(LLVM NATIVE """" Release); endif(LLVM_USE_HOST_TOOLS); if(LLVM_TARGET_IS_CROSSCOMPILE_HOST); # Dummy use to avoid CMake Warning: Manually-specified variables were not used; # (this is a variable that CrossCompile sets on recursive invocations); endif(). if( ${CMAKE_SYSTEM_NAME} MATCHES SunOS ); # special hack for Solaris to handle crazy system sys/regset.h; include_directories(""${LLVM_MAIN_INCLUDE_DIR}/llvm/Support/Solaris""); endif( ${CMAKE_SYSTEM_NAME} MATCHES SunOS ). # Make sure we don't get -rdynamic in every binary. For those that need it,; # use export_executable_symbols(target).; set(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS """"). include(AddLLVM); include(TableGen). include(LLVMDistributionSupport). if( MINGW AND NOT ""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang"" ); # People report that -O3 is unreliable on MinGW. The traditional; # build also uses -O2 for that reason:; llvm_replace_compiler_option(CMAKE_CXX_FLAGS_RELEASE ""-O3"" ""-O2""); endif(). if(LLVM_INCLUDE_TESTS); umbrella_lit_testsuite_begin(check-all); endif(). # Put this before tblgen. El",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:54701,Safety,safe,safe,54701," add_llvm_install_targets(install-llvm-libraries; DEPENDS llvm-libraries; COMPONENT llvm-libraries); endif(). get_property(LLVM_LIBS GLOBAL PROPERTY LLVM_LIBS); if(LLVM_LIBS); list(REMOVE_DUPLICATES LLVM_LIBS); foreach(lib ${LLVM_LIBS}); add_dependencies(llvm-libraries ${lib}); if (NOT LLVM_ENABLE_IDE); add_dependencies(install-llvm-libraries install-${lib}); add_dependencies(install-llvm-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(); endif(). # This must be at the end of the LLVM root CMakeLists file because it must run; # after all targets are created.; llvm_distribution_add_targets(); process_llvm_pass_plugins(GEN_CONFIG); include(CoverageReport). # This allows us to deploy the Universal CRT DLLs by passing -DCMAKE_INSTALL_UCRT_LIBRARIES=ON to CMake; if (MSVC AND CMAKE_HOST_SYSTEM_NAME STREQUAL ""Windows"" AND CMAKE_INSTALL_UCRT_LIBRARIES); include(InstallRequiredSystemLibraries); endif(). if (LLVM_INCLUDE_BENCHMARKS); # Override benchmark defaults so that when the library itself is updated these; # modifications are not lost.; set(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL ""Disable benchmark testing"" FORCE); set(BENCHMARK_ENABLE_EXCEPTIONS OFF CACHE BOOL ""Disable benchmark exceptions"" FORCE); set(BENCHMARK_ENABLE_INSTALL OFF CACHE BOOL ""Don't install benchmark"" FORCE); set(BENCHMARK_DOWNLOAD_DEPENDENCIES OFF CACHE BOOL ""Don't download dependencies"" FORCE); set(BENCHMARK_ENABLE_GTEST_TESTS OFF CACHE BOOL ""Disable Google Test in benchmark"" FORCE); set(BENCHMARK_ENABLE_WERROR ${LLVM_ENABLE_WERROR} CACHE BOOL; ""Handle -Werror for Google Benchmark based on LLVM_ENABLE_WERROR"" FORCE); # Since LLVM requires C++11 it is safe to assume that std::regex is available.; set(HAVE_STD_REGEX ON CACHE BOOL ""OK"" FORCE); add_subdirectory(${LLVM_THIRD_PARTY_DIR}/benchmark; ${CMAKE_CURRENT_BINARY_DIR}/third-party/benchmark); add_subdirectory(benchmarks); endif(). if (LLVM_INCLUDE_UTILS AND LLVM_INCLUDE_TOOLS); add_subdirectory(utils/llvm-locstats); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:24689,Security,access,accessible,24689,"{Z3_FOUND}""). if( LLVM_TARGETS_TO_BUILD STREQUAL ""all"" ); set( LLVM_TARGETS_TO_BUILD ${LLVM_ALL_TARGETS} ); endif(). if(LLVM_EXPERIMENTAL_TARGETS_TO_BUILD STREQUAL ""all""); set(LLVM_EXPERIMENTAL_TARGETS_TO_BUILD ${LLVM_ALL_EXPERIMENTAL_TARGETS}); endif(). set(LLVM_TARGETS_TO_BUILD; ${LLVM_TARGETS_TO_BUILD}; ${LLVM_EXPERIMENTAL_TARGETS_TO_BUILD}); list(REMOVE_DUPLICATES LLVM_TARGETS_TO_BUILD). if (NOT CMAKE_SYSTEM_NAME MATCHES ""OS390""); option(LLVM_ENABLE_PIC ""Build Position-Independent Code"" ON); endif(); option(LLVM_ENABLE_MODULES ""Compile with C++ modules enabled."" OFF); if(${CMAKE_SYSTEM_NAME} MATCHES ""Darwin""); option(LLVM_ENABLE_MODULE_DEBUGGING ""Compile with -gmodules."" ON); else(); option(LLVM_ENABLE_MODULE_DEBUGGING ""Compile with -gmodules."" OFF); endif(); option(LLVM_ENABLE_LOCAL_SUBMODULE_VISIBILITY ""Compile with -fmodules-local-submodule-visibility."" ON); option(LLVM_ENABLE_LIBCXX ""Use libc++ if available."" OFF); option(LLVM_ENABLE_LLVM_LIBC ""Set to on to link all LLVM executables against LLVM libc, assuming it is accessible by the host compiler."" OFF); option(LLVM_STATIC_LINK_CXX_STDLIB ""Statically link the standard library."" OFF); option(LLVM_ENABLE_LLD ""Use lld as C and C++ linker."" OFF); option(LLVM_ENABLE_PEDANTIC ""Compile with pedantic enabled."" ON); option(LLVM_ENABLE_WERROR ""Fail and stop if a warning is triggered."" OFF). option(LLVM_ENABLE_DUMP ""Enable dump functions even when assertions are disabled"" OFF); option(LLVM_UNREACHABLE_OPTIMIZE ""Optimize llvm_unreachable() as undefined behavior (default), guaranteed trap when OFF"" ON). if( NOT uppercase_CMAKE_BUILD_TYPE STREQUAL ""DEBUG"" ); option(LLVM_ENABLE_ASSERTIONS ""Enable assertions"" OFF); else(); option(LLVM_ENABLE_ASSERTIONS ""Enable assertions"" ON); endif(). option(LLVM_ENABLE_EXPENSIVE_CHECKS ""Enable expensive checks"" OFF). # While adding scalable vector support to LLVM, we temporarily want to; # allow an implicit conversion of TypeSize to uint64_t, and to allow; # code to get the fixed number o",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:28307,Security,sanitiz,sanitizer,28307,"es and strip executables and libraries (Darwin Only)"" OFF). option(LLVM_EXPERIMENTAL_DEBUGINFO_ITERATORS; ""Add extra Booleans to ilist_iterators to communicate facts for debug-info"" OFF). set(LLVM_CODESIGNING_IDENTITY """" CACHE STRING; ""Sign executables and dylibs with the given identity or skip if empty (Darwin Only)""). # If enabled, verify we are on a platform that supports oprofile.; if( LLVM_USE_OPROFILE ); if( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR ""OProfile support is available on Linux only.""); endif( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); endif( LLVM_USE_OPROFILE ). option(LLVM_USE_PERF; ""Use perf JIT interface to inform perf about JIT code"" OFF). # If enabled, verify we are on a platform that supports perf.; if( LLVM_USE_PERF ); if( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR ""perf support is available on Linux only.""); endif( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); endif( LLVM_USE_PERF ). set(LLVM_USE_SANITIZER """" CACHE STRING; ""Define the sanitizer used to build binaries and tests.""); option(LLVM_OPTIMIZE_SANITIZED_BUILDS ""Pass -O1 on debug sanitizer builds"" ON); set(LLVM_UBSAN_FLAGS; ""-fsanitize=undefined -fno-sanitize=vptr,function -fno-sanitize-recover=all""; CACHE STRING; ""Compile flags set to enable UBSan. Only used if LLVM_USE_SANITIZER contains 'Undefined'.""); set(LLVM_LIB_FUZZING_ENGINE """" CACHE PATH; ""Path to fuzzing library for linking with fuzz targets""). option(LLVM_USE_SPLIT_DWARF; ""Use -gsplit-dwarf when compiling llvm and --gdb-index when linking."" OFF). # Define an option controlling whether we should build for 32-bit on 64-bit; # platforms, where supported.; if( CMAKE_SIZEOF_VOID_P EQUAL 8 AND NOT (WIN32 OR ${CMAKE_SYSTEM_NAME} MATCHES ""AIX"")); # TODO: support other platforms and toolchains.; option(LLVM_BUILD_32_BITS ""Build 32 bits executables and libraries."" OFF); endif(). # Define the default arguments to use with 'lit', and an option for the user to; # override.; set(LIT_ARGS_DEFAULT ""-sv""); if ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:28411,Security,sanitiz,sanitizer,28411,"s for debug-info"" OFF). set(LLVM_CODESIGNING_IDENTITY """" CACHE STRING; ""Sign executables and dylibs with the given identity or skip if empty (Darwin Only)""). # If enabled, verify we are on a platform that supports oprofile.; if( LLVM_USE_OPROFILE ); if( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR ""OProfile support is available on Linux only.""); endif( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); endif( LLVM_USE_OPROFILE ). option(LLVM_USE_PERF; ""Use perf JIT interface to inform perf about JIT code"" OFF). # If enabled, verify we are on a platform that supports perf.; if( LLVM_USE_PERF ); if( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR ""perf support is available on Linux only.""); endif( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); endif( LLVM_USE_PERF ). set(LLVM_USE_SANITIZER """" CACHE STRING; ""Define the sanitizer used to build binaries and tests.""); option(LLVM_OPTIMIZE_SANITIZED_BUILDS ""Pass -O1 on debug sanitizer builds"" ON); set(LLVM_UBSAN_FLAGS; ""-fsanitize=undefined -fno-sanitize=vptr,function -fno-sanitize-recover=all""; CACHE STRING; ""Compile flags set to enable UBSan. Only used if LLVM_USE_SANITIZER contains 'Undefined'.""); set(LLVM_LIB_FUZZING_ENGINE """" CACHE PATH; ""Path to fuzzing library for linking with fuzz targets""). option(LLVM_USE_SPLIT_DWARF; ""Use -gsplit-dwarf when compiling llvm and --gdb-index when linking."" OFF). # Define an option controlling whether we should build for 32-bit on 64-bit; # platforms, where supported.; if( CMAKE_SIZEOF_VOID_P EQUAL 8 AND NOT (WIN32 OR ${CMAKE_SYSTEM_NAME} MATCHES ""AIX"")); # TODO: support other platforms and toolchains.; option(LLVM_BUILD_32_BITS ""Build 32 bits executables and libraries."" OFF); endif(). # Define the default arguments to use with 'lit', and an option for the user to; # override.; set(LIT_ARGS_DEFAULT ""-sv""); if (MSVC_IDE OR XCODE); set(LIT_ARGS_DEFAULT ""${LIT_ARGS_DEFAULT} --no-progress-bar""); endif(); if(LLVM_INDIVIDUAL_TEST_COVERAGE); set(LIT_ARGS_DEFAULT ""${LIT_ARGS_DEFA",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:28483,Security,sanitiz,sanitize,28483,"s for debug-info"" OFF). set(LLVM_CODESIGNING_IDENTITY """" CACHE STRING; ""Sign executables and dylibs with the given identity or skip if empty (Darwin Only)""). # If enabled, verify we are on a platform that supports oprofile.; if( LLVM_USE_OPROFILE ); if( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR ""OProfile support is available on Linux only.""); endif( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); endif( LLVM_USE_OPROFILE ). option(LLVM_USE_PERF; ""Use perf JIT interface to inform perf about JIT code"" OFF). # If enabled, verify we are on a platform that supports perf.; if( LLVM_USE_PERF ); if( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR ""perf support is available on Linux only.""); endif( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); endif( LLVM_USE_PERF ). set(LLVM_USE_SANITIZER """" CACHE STRING; ""Define the sanitizer used to build binaries and tests.""); option(LLVM_OPTIMIZE_SANITIZED_BUILDS ""Pass -O1 on debug sanitizer builds"" ON); set(LLVM_UBSAN_FLAGS; ""-fsanitize=undefined -fno-sanitize=vptr,function -fno-sanitize-recover=all""; CACHE STRING; ""Compile flags set to enable UBSan. Only used if LLVM_USE_SANITIZER contains 'Undefined'.""); set(LLVM_LIB_FUZZING_ENGINE """" CACHE PATH; ""Path to fuzzing library for linking with fuzz targets""). option(LLVM_USE_SPLIT_DWARF; ""Use -gsplit-dwarf when compiling llvm and --gdb-index when linking."" OFF). # Define an option controlling whether we should build for 32-bit on 64-bit; # platforms, where supported.; if( CMAKE_SIZEOF_VOID_P EQUAL 8 AND NOT (WIN32 OR ${CMAKE_SYSTEM_NAME} MATCHES ""AIX"")); # TODO: support other platforms and toolchains.; option(LLVM_BUILD_32_BITS ""Build 32 bits executables and libraries."" OFF); endif(). # Define the default arguments to use with 'lit', and an option for the user to; # override.; set(LIT_ARGS_DEFAULT ""-sv""); if (MSVC_IDE OR XCODE); set(LIT_ARGS_DEFAULT ""${LIT_ARGS_DEFAULT} --no-progress-bar""); endif(); if(LLVM_INDIVIDUAL_TEST_COVERAGE); set(LIT_ARGS_DEFAULT ""${LIT_ARGS_DEFA",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:28511,Security,sanitiz,sanitize-recover,28511,"s for debug-info"" OFF). set(LLVM_CODESIGNING_IDENTITY """" CACHE STRING; ""Sign executables and dylibs with the given identity or skip if empty (Darwin Only)""). # If enabled, verify we are on a platform that supports oprofile.; if( LLVM_USE_OPROFILE ); if( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR ""OProfile support is available on Linux only.""); endif( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); endif( LLVM_USE_OPROFILE ). option(LLVM_USE_PERF; ""Use perf JIT interface to inform perf about JIT code"" OFF). # If enabled, verify we are on a platform that supports perf.; if( LLVM_USE_PERF ); if( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR ""perf support is available on Linux only.""); endif( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); endif( LLVM_USE_PERF ). set(LLVM_USE_SANITIZER """" CACHE STRING; ""Define the sanitizer used to build binaries and tests.""); option(LLVM_OPTIMIZE_SANITIZED_BUILDS ""Pass -O1 on debug sanitizer builds"" ON); set(LLVM_UBSAN_FLAGS; ""-fsanitize=undefined -fno-sanitize=vptr,function -fno-sanitize-recover=all""; CACHE STRING; ""Compile flags set to enable UBSan. Only used if LLVM_USE_SANITIZER contains 'Undefined'.""); set(LLVM_LIB_FUZZING_ENGINE """" CACHE PATH; ""Path to fuzzing library for linking with fuzz targets""). option(LLVM_USE_SPLIT_DWARF; ""Use -gsplit-dwarf when compiling llvm and --gdb-index when linking."" OFF). # Define an option controlling whether we should build for 32-bit on 64-bit; # platforms, where supported.; if( CMAKE_SIZEOF_VOID_P EQUAL 8 AND NOT (WIN32 OR ${CMAKE_SYSTEM_NAME} MATCHES ""AIX"")); # TODO: support other platforms and toolchains.; option(LLVM_BUILD_32_BITS ""Build 32 bits executables and libraries."" OFF); endif(). # Define the default arguments to use with 'lit', and an option for the user to; # override.; set(LIT_ARGS_DEFAULT ""-sv""); if (MSVC_IDE OR XCODE); set(LIT_ARGS_DEFAULT ""${LIT_ARGS_DEFAULT} --no-progress-bar""); endif(); if(LLVM_INDIVIDUAL_TEST_COVERAGE); set(LIT_ARGS_DEFAULT ""${LIT_ARGS_DEFA",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:602,Testability,log,logic,602,"# See docs/CMake.html for instructions about how to build LLVM with CMake. cmake_minimum_required(VERSION 3.20.0). set(LLVM_COMMON_CMAKE_UTILS ${CMAKE_CURRENT_SOURCE_DIR}/../cmake); include(${LLVM_COMMON_CMAKE_UTILS}/Modules/CMakePolicy.cmake; NO_POLICY_SCOPE). # Builds with custom install names and installation rpath setups may not work; # in the build tree. Allow these cases to use CMake's default build tree; # behavior by setting `LLVM_NO_INSTALL_NAME_DIR_FOR_BUILD_TREE` to do this.; option(LLVM_NO_INSTALL_NAME_DIR_FOR_BUILD_TREE ""If set, use CMake's default build tree install name directory logic (Darwin only)"" OFF); mark_as_advanced(LLVM_NO_INSTALL_NAME_DIR_FOR_BUILD_TREE); if(NOT LLVM_NO_INSTALL_NAME_DIR_FOR_BUILD_TREE); set(CMAKE_BUILD_WITH_INSTALL_NAME_DIR ON); endif(). if(NOT DEFINED LLVM_VERSION_MAJOR); set(LLVM_VERSION_MAJOR 18); endif(); if(NOT DEFINED LLVM_VERSION_MINOR); set(LLVM_VERSION_MINOR 1); endif(); if(NOT DEFINED LLVM_VERSION_PATCH); set(LLVM_VERSION_PATCH 6); endif(); if(NOT DEFINED LLVM_VERSION_SUFFIX); set(LLVM_VERSION_SUFFIX); endif(). if (NOT PACKAGE_VERSION); set(PACKAGE_VERSION; ""${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}${LLVM_VERSION_SUFFIX}""); endif(). if(NOT DEFINED LLVM_SHLIB_SYMBOL_VERSION); # ""Symbol version prefix for libLLVM.so""; set(LLVM_SHLIB_SYMBOL_VERSION ""LLVM_${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}""); endif(). if ((CMAKE_GENERATOR MATCHES ""Visual Studio"") AND (MSVC_TOOLSET_VERSION LESS 142) AND (CMAKE_GENERATOR_TOOLSET STREQUAL """")); message(WARNING ""Visual Studio generators use the x86 host compiler by ""; ""default, even for 64-bit targets. This can result in linker ""; ""instability and out of memory errors. To use the 64-bit ""; ""host compiler, pass -Thost=x64 on the CMake command line.""); endif(). if (CMAKE_GENERATOR STREQUAL ""Xcode"" AND NOT CMAKE_OSX_ARCHITECTURES); # Some CMake features like object libraries get confused if you don't; # explicitly specify an architecture setting with the Xcode g",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:4045,Testability,assert,assertions,4045,"; endif(). # if CMAKE_CXX_STANDARD is still set after the cache unset above it means that the user requested it; # and we allow it to be set to something newer than the required standard but otherwise we fail.; if(DEFINED CMAKE_CXX_STANDARD AND CMAKE_CXX_STANDARD LESS ${LLVM_REQUIRED_CXX_STANDARD}); message(FATAL_ERROR ""Requested CMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD} which is less than the required ${LLVM_REQUIRED_CXX_STANDARD}.""); endif(). set(CMAKE_CXX_STANDARD ${LLVM_REQUIRED_CXX_STANDARD} CACHE STRING ""C++ standard to conform to""); set(CMAKE_CXX_STANDARD_REQUIRED YES). if (CYGWIN); # Cygwin is a bit stricter and lack things like 'strdup', 'stricmp', etc in; # c++xx mode.; set(CMAKE_CXX_EXTENSIONS YES); else(); set(CMAKE_CXX_EXTENSIONS NO); endif(). if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES); message(FATAL_ERROR ""; No build type selected. You need to pass -DCMAKE_BUILD_TYPE=<type> in order to configure LLVM.; Available options are:; * -DCMAKE_BUILD_TYPE=Release - For an optimized build with no assertions or debug info.; * -DCMAKE_BUILD_TYPE=Debug - For an unoptimized build with assertions and debug info.; * -DCMAKE_BUILD_TYPE=RelWithDebInfo - For an optimized build with no assertions but with debug info.; * -DCMAKE_BUILD_TYPE=MinSizeRel - For a build optimized for size instead of speed.; Learn more about these options in our documentation at https://llvm.org/docs/CMake.html#cmake-build-type; ""); endif(). # Set default build type for cmake's try_compile module.; # CMake 3.17 or newer sets CMAKE_DEFAULT_BUILD_TYPE to one of the; # items from CMAKE_CONFIGURATION_TYPES. Logic below can be further; # simplified once LLVM's minimum CMake version is updated to 3.17.; if(CMAKE_DEFAULT_BUILD_TYPE); set(CMAKE_TRY_COMPILE_CONFIGURATION ${CMAKE_DEFAULT_BUILD_TYPE}); else(); if(CMAKE_CONFIGURATION_TYPES); list(GET CMAKE_CONFIGURATION_TYPES 0 CMAKE_TRY_COMPILE_CONFIGURATION); elseif(CMAKE_BUILD_TYPE); set(CMAKE_TRY_COMPILE_CONFIGURATION ${CMAKE_BUILD_TYPE});",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:4131,Testability,assert,assertions,4131,"equested it; # and we allow it to be set to something newer than the required standard but otherwise we fail.; if(DEFINED CMAKE_CXX_STANDARD AND CMAKE_CXX_STANDARD LESS ${LLVM_REQUIRED_CXX_STANDARD}); message(FATAL_ERROR ""Requested CMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD} which is less than the required ${LLVM_REQUIRED_CXX_STANDARD}.""); endif(). set(CMAKE_CXX_STANDARD ${LLVM_REQUIRED_CXX_STANDARD} CACHE STRING ""C++ standard to conform to""); set(CMAKE_CXX_STANDARD_REQUIRED YES). if (CYGWIN); # Cygwin is a bit stricter and lack things like 'strdup', 'stricmp', etc in; # c++xx mode.; set(CMAKE_CXX_EXTENSIONS YES); else(); set(CMAKE_CXX_EXTENSIONS NO); endif(). if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES); message(FATAL_ERROR ""; No build type selected. You need to pass -DCMAKE_BUILD_TYPE=<type> in order to configure LLVM.; Available options are:; * -DCMAKE_BUILD_TYPE=Release - For an optimized build with no assertions or debug info.; * -DCMAKE_BUILD_TYPE=Debug - For an unoptimized build with assertions and debug info.; * -DCMAKE_BUILD_TYPE=RelWithDebInfo - For an optimized build with no assertions but with debug info.; * -DCMAKE_BUILD_TYPE=MinSizeRel - For a build optimized for size instead of speed.; Learn more about these options in our documentation at https://llvm.org/docs/CMake.html#cmake-build-type; ""); endif(). # Set default build type for cmake's try_compile module.; # CMake 3.17 or newer sets CMAKE_DEFAULT_BUILD_TYPE to one of the; # items from CMAKE_CONFIGURATION_TYPES. Logic below can be further; # simplified once LLVM's minimum CMake version is updated to 3.17.; if(CMAKE_DEFAULT_BUILD_TYPE); set(CMAKE_TRY_COMPILE_CONFIGURATION ${CMAKE_DEFAULT_BUILD_TYPE}); else(); if(CMAKE_CONFIGURATION_TYPES); list(GET CMAKE_CONFIGURATION_TYPES 0 CMAKE_TRY_COMPILE_CONFIGURATION); elseif(CMAKE_BUILD_TYPE); set(CMAKE_TRY_COMPILE_CONFIGURATION ${CMAKE_BUILD_TYPE}); endif(); endif(). # Side-by-side subprojects layout: automatically set the; # LLVM_EXTERNAL_${proje",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:4228,Testability,assert,assertions,4228,"rwise we fail.; if(DEFINED CMAKE_CXX_STANDARD AND CMAKE_CXX_STANDARD LESS ${LLVM_REQUIRED_CXX_STANDARD}); message(FATAL_ERROR ""Requested CMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD} which is less than the required ${LLVM_REQUIRED_CXX_STANDARD}.""); endif(). set(CMAKE_CXX_STANDARD ${LLVM_REQUIRED_CXX_STANDARD} CACHE STRING ""C++ standard to conform to""); set(CMAKE_CXX_STANDARD_REQUIRED YES). if (CYGWIN); # Cygwin is a bit stricter and lack things like 'strdup', 'stricmp', etc in; # c++xx mode.; set(CMAKE_CXX_EXTENSIONS YES); else(); set(CMAKE_CXX_EXTENSIONS NO); endif(). if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES); message(FATAL_ERROR ""; No build type selected. You need to pass -DCMAKE_BUILD_TYPE=<type> in order to configure LLVM.; Available options are:; * -DCMAKE_BUILD_TYPE=Release - For an optimized build with no assertions or debug info.; * -DCMAKE_BUILD_TYPE=Debug - For an unoptimized build with assertions and debug info.; * -DCMAKE_BUILD_TYPE=RelWithDebInfo - For an optimized build with no assertions but with debug info.; * -DCMAKE_BUILD_TYPE=MinSizeRel - For a build optimized for size instead of speed.; Learn more about these options in our documentation at https://llvm.org/docs/CMake.html#cmake-build-type; ""); endif(). # Set default build type for cmake's try_compile module.; # CMake 3.17 or newer sets CMAKE_DEFAULT_BUILD_TYPE to one of the; # items from CMAKE_CONFIGURATION_TYPES. Logic below can be further; # simplified once LLVM's minimum CMake version is updated to 3.17.; if(CMAKE_DEFAULT_BUILD_TYPE); set(CMAKE_TRY_COMPILE_CONFIGURATION ${CMAKE_DEFAULT_BUILD_TYPE}); else(); if(CMAKE_CONFIGURATION_TYPES); list(GET CMAKE_CONFIGURATION_TYPES 0 CMAKE_TRY_COMPILE_CONFIGURATION); elseif(CMAKE_BUILD_TYPE); set(CMAKE_TRY_COMPILE_CONFIGURATION ${CMAKE_BUILD_TYPE}); endif(); endif(). # Side-by-side subprojects layout: automatically set the; # LLVM_EXTERNAL_${project}_SOURCE_DIR using LLVM_ALL_PROJECTS; # This allows an easy way of setting up a build direct",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:5362,Testability,test,tests,5362,"ke 3.17 or newer sets CMAKE_DEFAULT_BUILD_TYPE to one of the; # items from CMAKE_CONFIGURATION_TYPES. Logic below can be further; # simplified once LLVM's minimum CMake version is updated to 3.17.; if(CMAKE_DEFAULT_BUILD_TYPE); set(CMAKE_TRY_COMPILE_CONFIGURATION ${CMAKE_DEFAULT_BUILD_TYPE}); else(); if(CMAKE_CONFIGURATION_TYPES); list(GET CMAKE_CONFIGURATION_TYPES 0 CMAKE_TRY_COMPILE_CONFIGURATION); elseif(CMAKE_BUILD_TYPE); set(CMAKE_TRY_COMPILE_CONFIGURATION ${CMAKE_BUILD_TYPE}); endif(); endif(). # Side-by-side subprojects layout: automatically set the; # LLVM_EXTERNAL_${project}_SOURCE_DIR using LLVM_ALL_PROJECTS; # This allows an easy way of setting up a build directory for llvm and another; # one for llvm+clang+... using the same sources.; set(LLVM_ALL_PROJECTS ""bolt;clang;clang-tools-extra;compiler-rt;cross-project-tests;libc;libclc;lld;lldb;mlir;openmp;polly;pstl""); # The flang project is not yet part of ""all"" projects (see C++ requirements); set(LLVM_EXTRA_PROJECTS ""flang""); # List of all known projects in the mono repo; set(LLVM_KNOWN_PROJECTS ""${LLVM_ALL_PROJECTS};${LLVM_EXTRA_PROJECTS}""); set(LLVM_ENABLE_PROJECTS """" CACHE STRING; ""Semicolon-separated list of projects to build (${LLVM_KNOWN_PROJECTS}), or \""all\"".""); # Make sure expansion happens first to not handle ""all"" in rest of the checks.; if( LLVM_ENABLE_PROJECTS STREQUAL ""all"" ); set( LLVM_ENABLE_PROJECTS ${LLVM_ALL_PROJECTS}); endif(); foreach(proj ${LLVM_ENABLE_PROJECTS}); if (NOT proj STREQUAL ""llvm"" AND NOT ""${proj}"" IN_LIST LLVM_KNOWN_PROJECTS); MESSAGE(FATAL_ERROR ""${proj} isn't a known project: ${LLVM_KNOWN_PROJECTS}. Did you mean to enable it as a runtime in LLVM_ENABLE_RUNTIMES?""); endif(); endforeach(). if (""flang"" IN_LIST LLVM_ENABLE_PROJECTS); if (NOT ""mlir"" IN_LIST LLVM_ENABLE_PROJECTS); message(STATUS ""Enabling MLIR as a dependency to flang""); list(APPEND LLVM_ENABLE_PROJECTS ""mlir""); endif(). if (NOT ""clang"" IN_LIST LLVM_ENABLE_PROJECTS); message(FATAL_ERROR ""Clang is not enabled, ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:25068,Testability,assert,assertions,25068," Position-Independent Code"" ON); endif(); option(LLVM_ENABLE_MODULES ""Compile with C++ modules enabled."" OFF); if(${CMAKE_SYSTEM_NAME} MATCHES ""Darwin""); option(LLVM_ENABLE_MODULE_DEBUGGING ""Compile with -gmodules."" ON); else(); option(LLVM_ENABLE_MODULE_DEBUGGING ""Compile with -gmodules."" OFF); endif(); option(LLVM_ENABLE_LOCAL_SUBMODULE_VISIBILITY ""Compile with -fmodules-local-submodule-visibility."" ON); option(LLVM_ENABLE_LIBCXX ""Use libc++ if available."" OFF); option(LLVM_ENABLE_LLVM_LIBC ""Set to on to link all LLVM executables against LLVM libc, assuming it is accessible by the host compiler."" OFF); option(LLVM_STATIC_LINK_CXX_STDLIB ""Statically link the standard library."" OFF); option(LLVM_ENABLE_LLD ""Use lld as C and C++ linker."" OFF); option(LLVM_ENABLE_PEDANTIC ""Compile with pedantic enabled."" ON); option(LLVM_ENABLE_WERROR ""Fail and stop if a warning is triggered."" OFF). option(LLVM_ENABLE_DUMP ""Enable dump functions even when assertions are disabled"" OFF); option(LLVM_UNREACHABLE_OPTIMIZE ""Optimize llvm_unreachable() as undefined behavior (default), guaranteed trap when OFF"" ON). if( NOT uppercase_CMAKE_BUILD_TYPE STREQUAL ""DEBUG"" ); option(LLVM_ENABLE_ASSERTIONS ""Enable assertions"" OFF); else(); option(LLVM_ENABLE_ASSERTIONS ""Enable assertions"" ON); endif(). option(LLVM_ENABLE_EXPENSIVE_CHECKS ""Enable expensive checks"" OFF). # While adding scalable vector support to LLVM, we temporarily want to; # allow an implicit conversion of TypeSize to uint64_t, and to allow; # code to get the fixed number of elements from a possibly scalable vector.; # This CMake flag enables a more strict mode where it asserts that the type; # is not a scalable vector type.; #; # Enabling this flag makes it easier to find cases where the compiler makes; # assumptions on the size being 'fixed size', when building tests for; # SVE/SVE2 or other scalable vector architectures.; option(LLVM_ENABLE_STRICT_FIXED_SIZE_VECTORS; ""Enable assertions that type is not scalable in implicit conve",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:25318,Testability,assert,assertions,25318," with -gmodules."" ON); else(); option(LLVM_ENABLE_MODULE_DEBUGGING ""Compile with -gmodules."" OFF); endif(); option(LLVM_ENABLE_LOCAL_SUBMODULE_VISIBILITY ""Compile with -fmodules-local-submodule-visibility."" ON); option(LLVM_ENABLE_LIBCXX ""Use libc++ if available."" OFF); option(LLVM_ENABLE_LLVM_LIBC ""Set to on to link all LLVM executables against LLVM libc, assuming it is accessible by the host compiler."" OFF); option(LLVM_STATIC_LINK_CXX_STDLIB ""Statically link the standard library."" OFF); option(LLVM_ENABLE_LLD ""Use lld as C and C++ linker."" OFF); option(LLVM_ENABLE_PEDANTIC ""Compile with pedantic enabled."" ON); option(LLVM_ENABLE_WERROR ""Fail and stop if a warning is triggered."" OFF). option(LLVM_ENABLE_DUMP ""Enable dump functions even when assertions are disabled"" OFF); option(LLVM_UNREACHABLE_OPTIMIZE ""Optimize llvm_unreachable() as undefined behavior (default), guaranteed trap when OFF"" ON). if( NOT uppercase_CMAKE_BUILD_TYPE STREQUAL ""DEBUG"" ); option(LLVM_ENABLE_ASSERTIONS ""Enable assertions"" OFF); else(); option(LLVM_ENABLE_ASSERTIONS ""Enable assertions"" ON); endif(). option(LLVM_ENABLE_EXPENSIVE_CHECKS ""Enable expensive checks"" OFF). # While adding scalable vector support to LLVM, we temporarily want to; # allow an implicit conversion of TypeSize to uint64_t, and to allow; # code to get the fixed number of elements from a possibly scalable vector.; # This CMake flag enables a more strict mode where it asserts that the type; # is not a scalable vector type.; #; # Enabling this flag makes it easier to find cases where the compiler makes; # assumptions on the size being 'fixed size', when building tests for; # SVE/SVE2 or other scalable vector architectures.; option(LLVM_ENABLE_STRICT_FIXED_SIZE_VECTORS; ""Enable assertions that type is not scalable in implicit conversion from TypeSize to uint64_t and calls to getNumElements"" OFF). set(LLVM_ABI_BREAKING_CHECKS ""WITH_ASSERTS"" CACHE STRING; ""Enable abi-breaking checks. Can be WITH_ASSERTS, FORCE_ON or FORCE_OFF."")",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:25382,Testability,assert,assertions,25382," with -gmodules."" ON); else(); option(LLVM_ENABLE_MODULE_DEBUGGING ""Compile with -gmodules."" OFF); endif(); option(LLVM_ENABLE_LOCAL_SUBMODULE_VISIBILITY ""Compile with -fmodules-local-submodule-visibility."" ON); option(LLVM_ENABLE_LIBCXX ""Use libc++ if available."" OFF); option(LLVM_ENABLE_LLVM_LIBC ""Set to on to link all LLVM executables against LLVM libc, assuming it is accessible by the host compiler."" OFF); option(LLVM_STATIC_LINK_CXX_STDLIB ""Statically link the standard library."" OFF); option(LLVM_ENABLE_LLD ""Use lld as C and C++ linker."" OFF); option(LLVM_ENABLE_PEDANTIC ""Compile with pedantic enabled."" ON); option(LLVM_ENABLE_WERROR ""Fail and stop if a warning is triggered."" OFF). option(LLVM_ENABLE_DUMP ""Enable dump functions even when assertions are disabled"" OFF); option(LLVM_UNREACHABLE_OPTIMIZE ""Optimize llvm_unreachable() as undefined behavior (default), guaranteed trap when OFF"" ON). if( NOT uppercase_CMAKE_BUILD_TYPE STREQUAL ""DEBUG"" ); option(LLVM_ENABLE_ASSERTIONS ""Enable assertions"" OFF); else(); option(LLVM_ENABLE_ASSERTIONS ""Enable assertions"" ON); endif(). option(LLVM_ENABLE_EXPENSIVE_CHECKS ""Enable expensive checks"" OFF). # While adding scalable vector support to LLVM, we temporarily want to; # allow an implicit conversion of TypeSize to uint64_t, and to allow; # code to get the fixed number of elements from a possibly scalable vector.; # This CMake flag enables a more strict mode where it asserts that the type; # is not a scalable vector type.; #; # Enabling this flag makes it easier to find cases where the compiler makes; # assumptions on the size being 'fixed size', when building tests for; # SVE/SVE2 or other scalable vector architectures.; option(LLVM_ENABLE_STRICT_FIXED_SIZE_VECTORS; ""Enable assertions that type is not scalable in implicit conversion from TypeSize to uint64_t and calls to getNumElements"" OFF). set(LLVM_ABI_BREAKING_CHECKS ""WITH_ASSERTS"" CACHE STRING; ""Enable abi-breaking checks. Can be WITH_ASSERTS, FORCE_ON or FORCE_OFF."")",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:25749,Testability,assert,asserts,25749,"LINK_CXX_STDLIB ""Statically link the standard library."" OFF); option(LLVM_ENABLE_LLD ""Use lld as C and C++ linker."" OFF); option(LLVM_ENABLE_PEDANTIC ""Compile with pedantic enabled."" ON); option(LLVM_ENABLE_WERROR ""Fail and stop if a warning is triggered."" OFF). option(LLVM_ENABLE_DUMP ""Enable dump functions even when assertions are disabled"" OFF); option(LLVM_UNREACHABLE_OPTIMIZE ""Optimize llvm_unreachable() as undefined behavior (default), guaranteed trap when OFF"" ON). if( NOT uppercase_CMAKE_BUILD_TYPE STREQUAL ""DEBUG"" ); option(LLVM_ENABLE_ASSERTIONS ""Enable assertions"" OFF); else(); option(LLVM_ENABLE_ASSERTIONS ""Enable assertions"" ON); endif(). option(LLVM_ENABLE_EXPENSIVE_CHECKS ""Enable expensive checks"" OFF). # While adding scalable vector support to LLVM, we temporarily want to; # allow an implicit conversion of TypeSize to uint64_t, and to allow; # code to get the fixed number of elements from a possibly scalable vector.; # This CMake flag enables a more strict mode where it asserts that the type; # is not a scalable vector type.; #; # Enabling this flag makes it easier to find cases where the compiler makes; # assumptions on the size being 'fixed size', when building tests for; # SVE/SVE2 or other scalable vector architectures.; option(LLVM_ENABLE_STRICT_FIXED_SIZE_VECTORS; ""Enable assertions that type is not scalable in implicit conversion from TypeSize to uint64_t and calls to getNumElements"" OFF). set(LLVM_ABI_BREAKING_CHECKS ""WITH_ASSERTS"" CACHE STRING; ""Enable abi-breaking checks. Can be WITH_ASSERTS, FORCE_ON or FORCE_OFF.""). option(LLVM_FORCE_USE_OLD_TOOLCHAIN; ""Set to ON to force using an old, unsupported host toolchain."" OFF). set(LLVM_LOCAL_RPATH """" CACHE FILEPATH; ""If set, an absolute path added as rpath on binaries that do not already contain an executable-relative rpath.""). option(LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN; ""Set to ON to only warn when using a toolchain which is about to be deprecated, instead of emitting an error."" OFF). option(LL",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:25946,Testability,test,tests,25946,"e with pedantic enabled."" ON); option(LLVM_ENABLE_WERROR ""Fail and stop if a warning is triggered."" OFF). option(LLVM_ENABLE_DUMP ""Enable dump functions even when assertions are disabled"" OFF); option(LLVM_UNREACHABLE_OPTIMIZE ""Optimize llvm_unreachable() as undefined behavior (default), guaranteed trap when OFF"" ON). if( NOT uppercase_CMAKE_BUILD_TYPE STREQUAL ""DEBUG"" ); option(LLVM_ENABLE_ASSERTIONS ""Enable assertions"" OFF); else(); option(LLVM_ENABLE_ASSERTIONS ""Enable assertions"" ON); endif(). option(LLVM_ENABLE_EXPENSIVE_CHECKS ""Enable expensive checks"" OFF). # While adding scalable vector support to LLVM, we temporarily want to; # allow an implicit conversion of TypeSize to uint64_t, and to allow; # code to get the fixed number of elements from a possibly scalable vector.; # This CMake flag enables a more strict mode where it asserts that the type; # is not a scalable vector type.; #; # Enabling this flag makes it easier to find cases where the compiler makes; # assumptions on the size being 'fixed size', when building tests for; # SVE/SVE2 or other scalable vector architectures.; option(LLVM_ENABLE_STRICT_FIXED_SIZE_VECTORS; ""Enable assertions that type is not scalable in implicit conversion from TypeSize to uint64_t and calls to getNumElements"" OFF). set(LLVM_ABI_BREAKING_CHECKS ""WITH_ASSERTS"" CACHE STRING; ""Enable abi-breaking checks. Can be WITH_ASSERTS, FORCE_ON or FORCE_OFF.""). option(LLVM_FORCE_USE_OLD_TOOLCHAIN; ""Set to ON to force using an old, unsupported host toolchain."" OFF). set(LLVM_LOCAL_RPATH """" CACHE FILEPATH; ""If set, an absolute path added as rpath on binaries that do not already contain an executable-relative rpath.""). option(LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN; ""Set to ON to only warn when using a toolchain which is about to be deprecated, instead of emitting an error."" OFF). option(LLVM_USE_INTEL_JITEVENTS; ""Use Intel JIT API to inform Intel(R) VTune(TM) Amplifier XE 2011 about JIT code""; OFF). if( LLVM_USE_INTEL_JITEVENTS ); # Verify we ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:26063,Testability,assert,assertions,26063,"F); option(LLVM_UNREACHABLE_OPTIMIZE ""Optimize llvm_unreachable() as undefined behavior (default), guaranteed trap when OFF"" ON). if( NOT uppercase_CMAKE_BUILD_TYPE STREQUAL ""DEBUG"" ); option(LLVM_ENABLE_ASSERTIONS ""Enable assertions"" OFF); else(); option(LLVM_ENABLE_ASSERTIONS ""Enable assertions"" ON); endif(). option(LLVM_ENABLE_EXPENSIVE_CHECKS ""Enable expensive checks"" OFF). # While adding scalable vector support to LLVM, we temporarily want to; # allow an implicit conversion of TypeSize to uint64_t, and to allow; # code to get the fixed number of elements from a possibly scalable vector.; # This CMake flag enables a more strict mode where it asserts that the type; # is not a scalable vector type.; #; # Enabling this flag makes it easier to find cases where the compiler makes; # assumptions on the size being 'fixed size', when building tests for; # SVE/SVE2 or other scalable vector architectures.; option(LLVM_ENABLE_STRICT_FIXED_SIZE_VECTORS; ""Enable assertions that type is not scalable in implicit conversion from TypeSize to uint64_t and calls to getNumElements"" OFF). set(LLVM_ABI_BREAKING_CHECKS ""WITH_ASSERTS"" CACHE STRING; ""Enable abi-breaking checks. Can be WITH_ASSERTS, FORCE_ON or FORCE_OFF.""). option(LLVM_FORCE_USE_OLD_TOOLCHAIN; ""Set to ON to force using an old, unsupported host toolchain."" OFF). set(LLVM_LOCAL_RPATH """" CACHE FILEPATH; ""If set, an absolute path added as rpath on binaries that do not already contain an executable-relative rpath.""). option(LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN; ""Set to ON to only warn when using a toolchain which is about to be deprecated, instead of emitting an error."" OFF). option(LLVM_USE_INTEL_JITEVENTS; ""Use Intel JIT API to inform Intel(R) VTune(TM) Amplifier XE 2011 about JIT code""; OFF). if( LLVM_USE_INTEL_JITEVENTS ); # Verify we are on a supported platform; if( NOT CMAKE_SYSTEM_NAME MATCHES ""Windows"" AND NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR; ""Intel JIT API support is available on Linux and W",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:28344,Testability,test,tests,28344,"es and strip executables and libraries (Darwin Only)"" OFF). option(LLVM_EXPERIMENTAL_DEBUGINFO_ITERATORS; ""Add extra Booleans to ilist_iterators to communicate facts for debug-info"" OFF). set(LLVM_CODESIGNING_IDENTITY """" CACHE STRING; ""Sign executables and dylibs with the given identity or skip if empty (Darwin Only)""). # If enabled, verify we are on a platform that supports oprofile.; if( LLVM_USE_OPROFILE ); if( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR ""OProfile support is available on Linux only.""); endif( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); endif( LLVM_USE_OPROFILE ). option(LLVM_USE_PERF; ""Use perf JIT interface to inform perf about JIT code"" OFF). # If enabled, verify we are on a platform that supports perf.; if( LLVM_USE_PERF ); if( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR ""perf support is available on Linux only.""); endif( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); endif( LLVM_USE_PERF ). set(LLVM_USE_SANITIZER """" CACHE STRING; ""Define the sanitizer used to build binaries and tests.""); option(LLVM_OPTIMIZE_SANITIZED_BUILDS ""Pass -O1 on debug sanitizer builds"" ON); set(LLVM_UBSAN_FLAGS; ""-fsanitize=undefined -fno-sanitize=vptr,function -fno-sanitize-recover=all""; CACHE STRING; ""Compile flags set to enable UBSan. Only used if LLVM_USE_SANITIZER contains 'Undefined'.""); set(LLVM_LIB_FUZZING_ENGINE """" CACHE PATH; ""Path to fuzzing library for linking with fuzz targets""). option(LLVM_USE_SPLIT_DWARF; ""Use -gsplit-dwarf when compiling llvm and --gdb-index when linking."" OFF). # Define an option controlling whether we should build for 32-bit on 64-bit; # platforms, where supported.; if( CMAKE_SIZEOF_VOID_P EQUAL 8 AND NOT (WIN32 OR ${CMAKE_SYSTEM_NAME} MATCHES ""AIX"")); # TODO: support other platforms and toolchains.; option(LLVM_BUILD_32_BITS ""Build 32 bits executables and libraries."" OFF); endif(). # Define the default arguments to use with 'lit', and an option for the user to; # override.; set(LIT_ARGS_DEFAULT ""-sv""); if ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:29478,Testability,test,test-coverage,29478,"s"" ON); set(LLVM_UBSAN_FLAGS; ""-fsanitize=undefined -fno-sanitize=vptr,function -fno-sanitize-recover=all""; CACHE STRING; ""Compile flags set to enable UBSan. Only used if LLVM_USE_SANITIZER contains 'Undefined'.""); set(LLVM_LIB_FUZZING_ENGINE """" CACHE PATH; ""Path to fuzzing library for linking with fuzz targets""). option(LLVM_USE_SPLIT_DWARF; ""Use -gsplit-dwarf when compiling llvm and --gdb-index when linking."" OFF). # Define an option controlling whether we should build for 32-bit on 64-bit; # platforms, where supported.; if( CMAKE_SIZEOF_VOID_P EQUAL 8 AND NOT (WIN32 OR ${CMAKE_SYSTEM_NAME} MATCHES ""AIX"")); # TODO: support other platforms and toolchains.; option(LLVM_BUILD_32_BITS ""Build 32 bits executables and libraries."" OFF); endif(). # Define the default arguments to use with 'lit', and an option for the user to; # override.; set(LIT_ARGS_DEFAULT ""-sv""); if (MSVC_IDE OR XCODE); set(LIT_ARGS_DEFAULT ""${LIT_ARGS_DEFAULT} --no-progress-bar""); endif(); if(LLVM_INDIVIDUAL_TEST_COVERAGE); set(LIT_ARGS_DEFAULT ""${LIT_ARGS_DEFAULT} --per-test-coverage""); endif(); set(LLVM_LIT_ARGS ""${LIT_ARGS_DEFAULT}"" CACHE STRING ""Default options for lit""). # On Win32 hosts, provide an option to specify the path to the GnuWin32 tools.; if( WIN32 AND NOT CYGWIN ); set(LLVM_LIT_TOOLS_DIR """" CACHE PATH ""Path to GnuWin32 tools""); endif(); set(LLVM_NATIVE_TOOL_DIR """" CACHE PATH ""Path to a directory containing prebuilt matching native tools (such as llvm-tblgen)""). set(LLVM_INTEGRATED_CRT_ALLOC """" CACHE PATH ""Replace the Windows CRT allocator with any of {rpmalloc|mimalloc|snmalloc}. Only works with CMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded.""); if(LLVM_INTEGRATED_CRT_ALLOC); if(NOT WIN32); message(FATAL_ERROR ""LLVM_INTEGRATED_CRT_ALLOC is only supported on Windows.""); endif(); if(LLVM_USE_SANITIZER); message(FATAL_ERROR ""LLVM_INTEGRATED_CRT_ALLOC cannot be used along with LLVM_USE_SANITIZER!""); endif(); if(CMAKE_BUILD_TYPE AND uppercase_CMAKE_BUILD_TYPE STREQUAL ""DEBUG""); message(FATAL_ERR",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:30667,Testability,test,tests,30667,"osts, provide an option to specify the path to the GnuWin32 tools.; if( WIN32 AND NOT CYGWIN ); set(LLVM_LIT_TOOLS_DIR """" CACHE PATH ""Path to GnuWin32 tools""); endif(); set(LLVM_NATIVE_TOOL_DIR """" CACHE PATH ""Path to a directory containing prebuilt matching native tools (such as llvm-tblgen)""). set(LLVM_INTEGRATED_CRT_ALLOC """" CACHE PATH ""Replace the Windows CRT allocator with any of {rpmalloc|mimalloc|snmalloc}. Only works with CMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded.""); if(LLVM_INTEGRATED_CRT_ALLOC); if(NOT WIN32); message(FATAL_ERROR ""LLVM_INTEGRATED_CRT_ALLOC is only supported on Windows.""); endif(); if(LLVM_USE_SANITIZER); message(FATAL_ERROR ""LLVM_INTEGRATED_CRT_ALLOC cannot be used along with LLVM_USE_SANITIZER!""); endif(); if(CMAKE_BUILD_TYPE AND uppercase_CMAKE_BUILD_TYPE STREQUAL ""DEBUG""); message(FATAL_ERROR ""The Debug target isn't supported along with LLVM_INTEGRATED_CRT_ALLOC!""); endif(); endif(). # Define options to control the inclusion and default build behavior for; # components which may not strictly be necessary (tools, examples, and tests).; #; # This is primarily to support building smaller or faster project files.; option(LLVM_INCLUDE_TOOLS ""Generate build targets for the LLVM tools."" ON); option(LLVM_BUILD_TOOLS; ""Build the LLVM tools. If OFF, just generate build targets."" ON). option(LLVM_INCLUDE_UTILS ""Generate build targets for the LLVM utils."" ON); option(LLVM_BUILD_UTILS; ""Build LLVM utility binaries. If OFF, just generate build targets."" ON). option(LLVM_INCLUDE_RUNTIMES ""Generate build targets for the LLVM runtimes."" ON); option(LLVM_BUILD_RUNTIMES; ""Build the LLVM runtimes. If OFF, just generate build targets."" ON). option(LLVM_BUILD_RUNTIME; ""Build the LLVM runtime libraries."" ON); option(LLVM_BUILD_EXAMPLES; ""Build the LLVM example programs. If OFF, just generate build targets."" OFF); option(LLVM_INCLUDE_EXAMPLES ""Generate build targets for the LLVM examples"" ON). if(LLVM_BUILD_EXAMPLES); add_compile_definitions(BUILD_EXAMPLES); endi",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:31664,Testability,test,tests,31664,"(tools, examples, and tests).; #; # This is primarily to support building smaller or faster project files.; option(LLVM_INCLUDE_TOOLS ""Generate build targets for the LLVM tools."" ON); option(LLVM_BUILD_TOOLS; ""Build the LLVM tools. If OFF, just generate build targets."" ON). option(LLVM_INCLUDE_UTILS ""Generate build targets for the LLVM utils."" ON); option(LLVM_BUILD_UTILS; ""Build LLVM utility binaries. If OFF, just generate build targets."" ON). option(LLVM_INCLUDE_RUNTIMES ""Generate build targets for the LLVM runtimes."" ON); option(LLVM_BUILD_RUNTIMES; ""Build the LLVM runtimes. If OFF, just generate build targets."" ON). option(LLVM_BUILD_RUNTIME; ""Build the LLVM runtime libraries."" ON); option(LLVM_BUILD_EXAMPLES; ""Build the LLVM example programs. If OFF, just generate build targets."" OFF); option(LLVM_INCLUDE_EXAMPLES ""Generate build targets for the LLVM examples"" ON). if(LLVM_BUILD_EXAMPLES); add_compile_definitions(BUILD_EXAMPLES); endif(LLVM_BUILD_EXAMPLES). option(LLVM_BUILD_TESTS; ""Build LLVM unit tests. If OFF, just generate build targets."" OFF); option(LLVM_INCLUDE_TESTS ""Generate build targets for the LLVM unit tests."" ON). option(LLVM_INSTALL_GTEST; ""Install the llvm gtest library. This should be on if you want to do; stand-alone builds of the other projects and run their unit tests."" OFF). option(LLVM_BUILD_BENCHMARKS ""Add LLVM benchmark targets to the list of default; targets. If OFF, benchmarks still could be built using Benchmarks target."" OFF); option(LLVM_INCLUDE_BENCHMARKS ""Generate benchmark targets. If OFF, benchmarks can't be built."" ON). option (LLVM_BUILD_DOCS ""Build the llvm documentation."" OFF); option (LLVM_INCLUDE_DOCS ""Generate build targets for llvm documentation."" ON); option (LLVM_ENABLE_DOXYGEN ""Use doxygen to generate llvm API documentation."" OFF); option (LLVM_ENABLE_SPHINX ""Use Sphinx to generate llvm documentation."" OFF); option (LLVM_ENABLE_OCAMLDOC ""Build OCaml bindings documentation."" ON); option (LLVM_ENABLE_BINDINGS ""Build bind",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:31783,Testability,test,tests,31783,"es.; option(LLVM_INCLUDE_TOOLS ""Generate build targets for the LLVM tools."" ON); option(LLVM_BUILD_TOOLS; ""Build the LLVM tools. If OFF, just generate build targets."" ON). option(LLVM_INCLUDE_UTILS ""Generate build targets for the LLVM utils."" ON); option(LLVM_BUILD_UTILS; ""Build LLVM utility binaries. If OFF, just generate build targets."" ON). option(LLVM_INCLUDE_RUNTIMES ""Generate build targets for the LLVM runtimes."" ON); option(LLVM_BUILD_RUNTIMES; ""Build the LLVM runtimes. If OFF, just generate build targets."" ON). option(LLVM_BUILD_RUNTIME; ""Build the LLVM runtime libraries."" ON); option(LLVM_BUILD_EXAMPLES; ""Build the LLVM example programs. If OFF, just generate build targets."" OFF); option(LLVM_INCLUDE_EXAMPLES ""Generate build targets for the LLVM examples"" ON). if(LLVM_BUILD_EXAMPLES); add_compile_definitions(BUILD_EXAMPLES); endif(LLVM_BUILD_EXAMPLES). option(LLVM_BUILD_TESTS; ""Build LLVM unit tests. If OFF, just generate build targets."" OFF); option(LLVM_INCLUDE_TESTS ""Generate build targets for the LLVM unit tests."" ON). option(LLVM_INSTALL_GTEST; ""Install the llvm gtest library. This should be on if you want to do; stand-alone builds of the other projects and run their unit tests."" OFF). option(LLVM_BUILD_BENCHMARKS ""Add LLVM benchmark targets to the list of default; targets. If OFF, benchmarks still could be built using Benchmarks target."" OFF); option(LLVM_INCLUDE_BENCHMARKS ""Generate benchmark targets. If OFF, benchmarks can't be built."" ON). option (LLVM_BUILD_DOCS ""Build the llvm documentation."" OFF); option (LLVM_INCLUDE_DOCS ""Generate build targets for llvm documentation."" ON); option (LLVM_ENABLE_DOXYGEN ""Use doxygen to generate llvm API documentation."" OFF); option (LLVM_ENABLE_SPHINX ""Use Sphinx to generate llvm documentation."" OFF); option (LLVM_ENABLE_OCAMLDOC ""Build OCaml bindings documentation."" ON); option (LLVM_ENABLE_BINDINGS ""Build bindings."" ON). set(LLVM_INSTALL_DOXYGEN_HTML_DIR ""${CMAKE_INSTALL_DOCDIR}/llvm/doxygen-html""; CACHE STRIN",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:31953,Testability,test,tests,31953,"rgets."" ON). option(LLVM_INCLUDE_UTILS ""Generate build targets for the LLVM utils."" ON); option(LLVM_BUILD_UTILS; ""Build LLVM utility binaries. If OFF, just generate build targets."" ON). option(LLVM_INCLUDE_RUNTIMES ""Generate build targets for the LLVM runtimes."" ON); option(LLVM_BUILD_RUNTIMES; ""Build the LLVM runtimes. If OFF, just generate build targets."" ON). option(LLVM_BUILD_RUNTIME; ""Build the LLVM runtime libraries."" ON); option(LLVM_BUILD_EXAMPLES; ""Build the LLVM example programs. If OFF, just generate build targets."" OFF); option(LLVM_INCLUDE_EXAMPLES ""Generate build targets for the LLVM examples"" ON). if(LLVM_BUILD_EXAMPLES); add_compile_definitions(BUILD_EXAMPLES); endif(LLVM_BUILD_EXAMPLES). option(LLVM_BUILD_TESTS; ""Build LLVM unit tests. If OFF, just generate build targets."" OFF); option(LLVM_INCLUDE_TESTS ""Generate build targets for the LLVM unit tests."" ON). option(LLVM_INSTALL_GTEST; ""Install the llvm gtest library. This should be on if you want to do; stand-alone builds of the other projects and run their unit tests."" OFF). option(LLVM_BUILD_BENCHMARKS ""Add LLVM benchmark targets to the list of default; targets. If OFF, benchmarks still could be built using Benchmarks target."" OFF); option(LLVM_INCLUDE_BENCHMARKS ""Generate benchmark targets. If OFF, benchmarks can't be built."" ON). option (LLVM_BUILD_DOCS ""Build the llvm documentation."" OFF); option (LLVM_INCLUDE_DOCS ""Generate build targets for llvm documentation."" ON); option (LLVM_ENABLE_DOXYGEN ""Use doxygen to generate llvm API documentation."" OFF); option (LLVM_ENABLE_SPHINX ""Use Sphinx to generate llvm documentation."" OFF); option (LLVM_ENABLE_OCAMLDOC ""Build OCaml bindings documentation."" ON); option (LLVM_ENABLE_BINDINGS ""Build bindings."" ON). set(LLVM_INSTALL_DOXYGEN_HTML_DIR ""${CMAKE_INSTALL_DOCDIR}/llvm/doxygen-html""; CACHE STRING ""Doxygen-generated HTML documentation install directory""); set(LLVM_INSTALL_OCAMLDOC_HTML_DIR ""${CMAKE_INSTALL_DOCDIR}/llvm/ocaml-html""; CACHE STRING ""OCamld",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:32006,Testability,benchmark,benchmark,32006,"LD_UTILS; ""Build LLVM utility binaries. If OFF, just generate build targets."" ON). option(LLVM_INCLUDE_RUNTIMES ""Generate build targets for the LLVM runtimes."" ON); option(LLVM_BUILD_RUNTIMES; ""Build the LLVM runtimes. If OFF, just generate build targets."" ON). option(LLVM_BUILD_RUNTIME; ""Build the LLVM runtime libraries."" ON); option(LLVM_BUILD_EXAMPLES; ""Build the LLVM example programs. If OFF, just generate build targets."" OFF); option(LLVM_INCLUDE_EXAMPLES ""Generate build targets for the LLVM examples"" ON). if(LLVM_BUILD_EXAMPLES); add_compile_definitions(BUILD_EXAMPLES); endif(LLVM_BUILD_EXAMPLES). option(LLVM_BUILD_TESTS; ""Build LLVM unit tests. If OFF, just generate build targets."" OFF); option(LLVM_INCLUDE_TESTS ""Generate build targets for the LLVM unit tests."" ON). option(LLVM_INSTALL_GTEST; ""Install the llvm gtest library. This should be on if you want to do; stand-alone builds of the other projects and run their unit tests."" OFF). option(LLVM_BUILD_BENCHMARKS ""Add LLVM benchmark targets to the list of default; targets. If OFF, benchmarks still could be built using Benchmarks target."" OFF); option(LLVM_INCLUDE_BENCHMARKS ""Generate benchmark targets. If OFF, benchmarks can't be built."" ON). option (LLVM_BUILD_DOCS ""Build the llvm documentation."" OFF); option (LLVM_INCLUDE_DOCS ""Generate build targets for llvm documentation."" ON); option (LLVM_ENABLE_DOXYGEN ""Use doxygen to generate llvm API documentation."" OFF); option (LLVM_ENABLE_SPHINX ""Use Sphinx to generate llvm documentation."" OFF); option (LLVM_ENABLE_OCAMLDOC ""Build OCaml bindings documentation."" ON); option (LLVM_ENABLE_BINDINGS ""Build bindings."" ON). set(LLVM_INSTALL_DOXYGEN_HTML_DIR ""${CMAKE_INSTALL_DOCDIR}/llvm/doxygen-html""; CACHE STRING ""Doxygen-generated HTML documentation install directory""); set(LLVM_INSTALL_OCAMLDOC_HTML_DIR ""${CMAKE_INSTALL_DOCDIR}/llvm/ocaml-html""; CACHE STRING ""OCamldoc-generated HTML documentation install directory""). option (LLVM_BUILD_EXTERNAL_COMPILER_RT; ""Build com",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:32065,Testability,benchmark,benchmarks,32065," ON). option(LLVM_INCLUDE_RUNTIMES ""Generate build targets for the LLVM runtimes."" ON); option(LLVM_BUILD_RUNTIMES; ""Build the LLVM runtimes. If OFF, just generate build targets."" ON). option(LLVM_BUILD_RUNTIME; ""Build the LLVM runtime libraries."" ON); option(LLVM_BUILD_EXAMPLES; ""Build the LLVM example programs. If OFF, just generate build targets."" OFF); option(LLVM_INCLUDE_EXAMPLES ""Generate build targets for the LLVM examples"" ON). if(LLVM_BUILD_EXAMPLES); add_compile_definitions(BUILD_EXAMPLES); endif(LLVM_BUILD_EXAMPLES). option(LLVM_BUILD_TESTS; ""Build LLVM unit tests. If OFF, just generate build targets."" OFF); option(LLVM_INCLUDE_TESTS ""Generate build targets for the LLVM unit tests."" ON). option(LLVM_INSTALL_GTEST; ""Install the llvm gtest library. This should be on if you want to do; stand-alone builds of the other projects and run their unit tests."" OFF). option(LLVM_BUILD_BENCHMARKS ""Add LLVM benchmark targets to the list of default; targets. If OFF, benchmarks still could be built using Benchmarks target."" OFF); option(LLVM_INCLUDE_BENCHMARKS ""Generate benchmark targets. If OFF, benchmarks can't be built."" ON). option (LLVM_BUILD_DOCS ""Build the llvm documentation."" OFF); option (LLVM_INCLUDE_DOCS ""Generate build targets for llvm documentation."" ON); option (LLVM_ENABLE_DOXYGEN ""Use doxygen to generate llvm API documentation."" OFF); option (LLVM_ENABLE_SPHINX ""Use Sphinx to generate llvm documentation."" OFF); option (LLVM_ENABLE_OCAMLDOC ""Build OCaml bindings documentation."" ON); option (LLVM_ENABLE_BINDINGS ""Build bindings."" ON). set(LLVM_INSTALL_DOXYGEN_HTML_DIR ""${CMAKE_INSTALL_DOCDIR}/llvm/doxygen-html""; CACHE STRING ""Doxygen-generated HTML documentation install directory""); set(LLVM_INSTALL_OCAMLDOC_HTML_DIR ""${CMAKE_INSTALL_DOCDIR}/llvm/ocaml-html""; CACHE STRING ""OCamldoc-generated HTML documentation install directory""). option (LLVM_BUILD_EXTERNAL_COMPILER_RT; ""Build compiler-rt as an external project."" OFF). option (LLVM_VERSION_PRINTER_SHOW_HOST",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:32170,Testability,benchmark,benchmark,32170," LLVM runtimes."" ON); option(LLVM_BUILD_RUNTIMES; ""Build the LLVM runtimes. If OFF, just generate build targets."" ON). option(LLVM_BUILD_RUNTIME; ""Build the LLVM runtime libraries."" ON); option(LLVM_BUILD_EXAMPLES; ""Build the LLVM example programs. If OFF, just generate build targets."" OFF); option(LLVM_INCLUDE_EXAMPLES ""Generate build targets for the LLVM examples"" ON). if(LLVM_BUILD_EXAMPLES); add_compile_definitions(BUILD_EXAMPLES); endif(LLVM_BUILD_EXAMPLES). option(LLVM_BUILD_TESTS; ""Build LLVM unit tests. If OFF, just generate build targets."" OFF); option(LLVM_INCLUDE_TESTS ""Generate build targets for the LLVM unit tests."" ON). option(LLVM_INSTALL_GTEST; ""Install the llvm gtest library. This should be on if you want to do; stand-alone builds of the other projects and run their unit tests."" OFF). option(LLVM_BUILD_BENCHMARKS ""Add LLVM benchmark targets to the list of default; targets. If OFF, benchmarks still could be built using Benchmarks target."" OFF); option(LLVM_INCLUDE_BENCHMARKS ""Generate benchmark targets. If OFF, benchmarks can't be built."" ON). option (LLVM_BUILD_DOCS ""Build the llvm documentation."" OFF); option (LLVM_INCLUDE_DOCS ""Generate build targets for llvm documentation."" ON); option (LLVM_ENABLE_DOXYGEN ""Use doxygen to generate llvm API documentation."" OFF); option (LLVM_ENABLE_SPHINX ""Use Sphinx to generate llvm documentation."" OFF); option (LLVM_ENABLE_OCAMLDOC ""Build OCaml bindings documentation."" ON); option (LLVM_ENABLE_BINDINGS ""Build bindings."" ON). set(LLVM_INSTALL_DOXYGEN_HTML_DIR ""${CMAKE_INSTALL_DOCDIR}/llvm/doxygen-html""; CACHE STRING ""Doxygen-generated HTML documentation install directory""); set(LLVM_INSTALL_OCAMLDOC_HTML_DIR ""${CMAKE_INSTALL_DOCDIR}/llvm/ocaml-html""; CACHE STRING ""OCamldoc-generated HTML documentation install directory""). option (LLVM_BUILD_EXTERNAL_COMPILER_RT; ""Build compiler-rt as an external project."" OFF). option (LLVM_VERSION_PRINTER_SHOW_HOST_TARGET_INFO; ""Show target and host info when tools are invoked wi",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:32197,Testability,benchmark,benchmarks,32197,"Build the LLVM runtimes. If OFF, just generate build targets."" ON). option(LLVM_BUILD_RUNTIME; ""Build the LLVM runtime libraries."" ON); option(LLVM_BUILD_EXAMPLES; ""Build the LLVM example programs. If OFF, just generate build targets."" OFF); option(LLVM_INCLUDE_EXAMPLES ""Generate build targets for the LLVM examples"" ON). if(LLVM_BUILD_EXAMPLES); add_compile_definitions(BUILD_EXAMPLES); endif(LLVM_BUILD_EXAMPLES). option(LLVM_BUILD_TESTS; ""Build LLVM unit tests. If OFF, just generate build targets."" OFF); option(LLVM_INCLUDE_TESTS ""Generate build targets for the LLVM unit tests."" ON). option(LLVM_INSTALL_GTEST; ""Install the llvm gtest library. This should be on if you want to do; stand-alone builds of the other projects and run their unit tests."" OFF). option(LLVM_BUILD_BENCHMARKS ""Add LLVM benchmark targets to the list of default; targets. If OFF, benchmarks still could be built using Benchmarks target."" OFF); option(LLVM_INCLUDE_BENCHMARKS ""Generate benchmark targets. If OFF, benchmarks can't be built."" ON). option (LLVM_BUILD_DOCS ""Build the llvm documentation."" OFF); option (LLVM_INCLUDE_DOCS ""Generate build targets for llvm documentation."" ON); option (LLVM_ENABLE_DOXYGEN ""Use doxygen to generate llvm API documentation."" OFF); option (LLVM_ENABLE_SPHINX ""Use Sphinx to generate llvm documentation."" OFF); option (LLVM_ENABLE_OCAMLDOC ""Build OCaml bindings documentation."" ON); option (LLVM_ENABLE_BINDINGS ""Build bindings."" ON). set(LLVM_INSTALL_DOXYGEN_HTML_DIR ""${CMAKE_INSTALL_DOCDIR}/llvm/doxygen-html""; CACHE STRING ""Doxygen-generated HTML documentation install directory""); set(LLVM_INSTALL_OCAMLDOC_HTML_DIR ""${CMAKE_INSTALL_DOCDIR}/llvm/ocaml-html""; CACHE STRING ""OCamldoc-generated HTML documentation install directory""). option (LLVM_BUILD_EXTERNAL_COMPILER_RT; ""Build compiler-rt as an external project."" OFF). option (LLVM_VERSION_PRINTER_SHOW_HOST_TARGET_INFO; ""Show target and host info when tools are invoked with --version."" ON). # You can configure which libra",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:37356,Testability,test,test,37356,"uffix_idx} EQUAL -1); list(REMOVE_AT CMAKE_FIND_LIBRARY_SUFFIXES ${shared_lib_suffix_idx}); endif(); endforeach(); endif(). # Use libtool instead of ar if you are both on an Apple host, and targeting Apple.; if(CMAKE_HOST_APPLE AND APPLE); include(UseLibtool); endif(). # Override the default target with an environment variable named by LLVM_TARGET_TRIPLE_ENV.; set(LLVM_TARGET_TRIPLE_ENV CACHE STRING ""The name of environment variable to override default target. Disabled by blank.""); mark_as_advanced(LLVM_TARGET_TRIPLE_ENV). if(CMAKE_SYSTEM_NAME MATCHES ""BSD|Linux|OS390""); set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default ON); else(); set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default OFF); endif(); set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR ${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default} CACHE BOOL; ""Enable per-target runtimes directory""). set(LLVM_PROFDATA_FILE """" CACHE FILEPATH; ""Profiling data file to use when compiling in order to improve runtime performance.""). if(LLVM_INCLUDE_TESTS); # Lit test suite requires at least python 3.6; set(LLVM_MINIMUM_PYTHON_VERSION 3.6); else(); # FIXME: it is unknown if this is the actual minimum bound; set(LLVM_MINIMUM_PYTHON_VERSION 3.0); endif(). # Find python before including config-ix, since it needs to be able to search; # for python modules.; find_package(Python3 ${LLVM_MINIMUM_PYTHON_VERSION} REQUIRED; COMPONENTS Interpreter). # All options referred to from HandleLLVMOptions have to be specified; # BEFORE this include, otherwise options will not be correctly set on; # first cmake run; include(config-ix). # By default, we target the host, but this can be overridden at CMake; # invocation time. Except on 64-bit AIX, where the system toolchain; # expect 32-bit objects by default.; if(""${LLVM_HOST_TRIPLE}"" MATCHES ""^powerpc64-ibm-aix""); string(REGEX REPLACE ""^powerpc64"" ""powerpc"" LLVM_DEFAULT_TARGET_TRIPLE_DEFAULT ""${LLVM_HOST_TRIPLE}""); else(); # Only set default triple when native target is enabled.; if (LLVM_NATIVE_TARGET); set(LLVM_DEFA",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:49536,Testability,test,tests,49536,"t,; # use export_executable_symbols(target).; set(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS """"). include(AddLLVM); include(TableGen). include(LLVMDistributionSupport). if( MINGW AND NOT ""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang"" ); # People report that -O3 is unreliable on MinGW. The traditional; # build also uses -O2 for that reason:; llvm_replace_compiler_option(CMAKE_CXX_FLAGS_RELEASE ""-O3"" ""-O2""); endif(). if(LLVM_INCLUDE_TESTS); umbrella_lit_testsuite_begin(check-all); endif(). # Put this before tblgen. Else we have a circular dependence.; add_subdirectory(lib/Demangle); add_subdirectory(lib/Support); add_subdirectory(lib/TableGen). add_subdirectory(utils/TableGen). add_subdirectory(include). add_subdirectory(lib). if( LLVM_INCLUDE_UTILS ); add_subdirectory(utils/FileCheck); add_subdirectory(utils/PerfectShuffle); add_subdirectory(utils/count); add_subdirectory(utils/not); add_subdirectory(utils/UnicodeData); add_subdirectory(utils/yaml-bench); add_subdirectory(utils/split-file); # add_subdirectory(utils/mlgo-utils); if( LLVM_INCLUDE_TESTS ); add_subdirectory(${LLVM_THIRD_PARTY_DIR}/unittest ${CMAKE_CURRENT_BINARY_DIR}/third-party/unittest); endif(); else(); if ( LLVM_INCLUDE_TESTS ); message(FATAL_ERROR ""Including tests when not building utils will not work.; Either set LLVM_INCLUDE_UTILS to On, or set LLVM_INCLUDE_TESTS to Off.""); endif(); endif(). # Use LLVM_ADD_NATIVE_VISUALIZERS_TO_SOLUTION instead of LLVM_INCLUDE_UTILS because it is not really a util; if (LLVM_ADD_NATIVE_VISUALIZERS_TO_SOLUTION); add_subdirectory(utils/LLVMVisualizers); endif(). foreach( binding ${LLVM_BINDINGS_LIST} ); if( EXISTS ""${LLVM_MAIN_SRC_DIR}/bindings/${binding}/CMakeLists.txt"" ); add_subdirectory(bindings/${binding}); endif(); endforeach(). add_subdirectory(projects). if( LLVM_INCLUDE_TOOLS ); add_subdirectory(tools); endif(). if( LLVM_INCLUDE_RUNTIMES ); add_subdirectory(runtimes); endif(). if( LLVM_INCLUDE_EXAMPLES ); add_subdirectory(examples); endif(). if( LLVM_INCLUDE_TESTS ); se",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:50387,Testability,test,tests,50387,"INCLUDE_TESTS ); add_subdirectory(${LLVM_THIRD_PARTY_DIR}/unittest ${CMAKE_CURRENT_BINARY_DIR}/third-party/unittest); endif(); else(); if ( LLVM_INCLUDE_TESTS ); message(FATAL_ERROR ""Including tests when not building utils will not work.; Either set LLVM_INCLUDE_UTILS to On, or set LLVM_INCLUDE_TESTS to Off.""); endif(); endif(). # Use LLVM_ADD_NATIVE_VISUALIZERS_TO_SOLUTION instead of LLVM_INCLUDE_UTILS because it is not really a util; if (LLVM_ADD_NATIVE_VISUALIZERS_TO_SOLUTION); add_subdirectory(utils/LLVMVisualizers); endif(). foreach( binding ${LLVM_BINDINGS_LIST} ); if( EXISTS ""${LLVM_MAIN_SRC_DIR}/bindings/${binding}/CMakeLists.txt"" ); add_subdirectory(bindings/${binding}); endif(); endforeach(). add_subdirectory(projects). if( LLVM_INCLUDE_TOOLS ); add_subdirectory(tools); endif(). if( LLVM_INCLUDE_RUNTIMES ); add_subdirectory(runtimes); endif(). if( LLVM_INCLUDE_EXAMPLES ); add_subdirectory(examples); endif(). if( LLVM_INCLUDE_TESTS ); set(LLVM_GTEST_RUN_UNDER; """" CACHE STRING; ""Define the wrapper program that LLVM unit tests should be run under.""); if(EXISTS ${LLVM_MAIN_SRC_DIR}/projects/test-suite AND TARGET clang); include(LLVMExternalProjectUtils); llvm_ExternalProject_Add(test-suite ${LLVM_MAIN_SRC_DIR}/projects/test-suite; USE_TOOLCHAIN; EXCLUDE_FROM_ALL; NO_INSTALL; ALWAYS_CLEAN); endif(); add_subdirectory(utils/lit); add_subdirectory(test); add_subdirectory(unittests). if (WIN32); # This utility is used to prevent crashing tests from calling Dr. Watson on; # Windows.; add_subdirectory(utils/KillTheDoctor); endif(). umbrella_lit_testsuite_end(check-all); get_property(LLVM_ALL_LIT_DEPENDS GLOBAL PROPERTY LLVM_ALL_LIT_DEPENDS); get_property(LLVM_ALL_ADDITIONAL_TEST_DEPENDS; GLOBAL PROPERTY LLVM_ALL_ADDITIONAL_TEST_DEPENDS); add_custom_target(test-depends; DEPENDS ${LLVM_ALL_LIT_DEPENDS} ${LLVM_ALL_ADDITIONAL_TEST_DEPENDS}); set_target_properties(test-depends PROPERTIES FOLDER ""Tests""); add_dependencies(check-all test-depends); endif(). if (LLVM_INCLUDE_D",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:50457,Testability,test,test-suite,50457," Either set LLVM_INCLUDE_UTILS to On, or set LLVM_INCLUDE_TESTS to Off.""); endif(); endif(). # Use LLVM_ADD_NATIVE_VISUALIZERS_TO_SOLUTION instead of LLVM_INCLUDE_UTILS because it is not really a util; if (LLVM_ADD_NATIVE_VISUALIZERS_TO_SOLUTION); add_subdirectory(utils/LLVMVisualizers); endif(). foreach( binding ${LLVM_BINDINGS_LIST} ); if( EXISTS ""${LLVM_MAIN_SRC_DIR}/bindings/${binding}/CMakeLists.txt"" ); add_subdirectory(bindings/${binding}); endif(); endforeach(). add_subdirectory(projects). if( LLVM_INCLUDE_TOOLS ); add_subdirectory(tools); endif(). if( LLVM_INCLUDE_RUNTIMES ); add_subdirectory(runtimes); endif(). if( LLVM_INCLUDE_EXAMPLES ); add_subdirectory(examples); endif(). if( LLVM_INCLUDE_TESTS ); set(LLVM_GTEST_RUN_UNDER; """" CACHE STRING; ""Define the wrapper program that LLVM unit tests should be run under.""); if(EXISTS ${LLVM_MAIN_SRC_DIR}/projects/test-suite AND TARGET clang); include(LLVMExternalProjectUtils); llvm_ExternalProject_Add(test-suite ${LLVM_MAIN_SRC_DIR}/projects/test-suite; USE_TOOLCHAIN; EXCLUDE_FROM_ALL; NO_INSTALL; ALWAYS_CLEAN); endif(); add_subdirectory(utils/lit); add_subdirectory(test); add_subdirectory(unittests). if (WIN32); # This utility is used to prevent crashing tests from calling Dr. Watson on; # Windows.; add_subdirectory(utils/KillTheDoctor); endif(). umbrella_lit_testsuite_end(check-all); get_property(LLVM_ALL_LIT_DEPENDS GLOBAL PROPERTY LLVM_ALL_LIT_DEPENDS); get_property(LLVM_ALL_ADDITIONAL_TEST_DEPENDS; GLOBAL PROPERTY LLVM_ALL_ADDITIONAL_TEST_DEPENDS); add_custom_target(test-depends; DEPENDS ${LLVM_ALL_LIT_DEPENDS} ${LLVM_ALL_ADDITIONAL_TEST_DEPENDS}); set_target_properties(test-depends PROPERTIES FOLDER ""Tests""); add_dependencies(check-all test-depends); endif(). if (LLVM_INCLUDE_DOCS); add_subdirectory(docs); endif(). add_subdirectory(cmake/modules). # Do this last so that all lit targets have already been created.; if (LLVM_INCLUDE_UTILS); add_subdirectory(utils/llvm-lit); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:50547,Testability,test,test-suite,50547," Either set LLVM_INCLUDE_UTILS to On, or set LLVM_INCLUDE_TESTS to Off.""); endif(); endif(). # Use LLVM_ADD_NATIVE_VISUALIZERS_TO_SOLUTION instead of LLVM_INCLUDE_UTILS because it is not really a util; if (LLVM_ADD_NATIVE_VISUALIZERS_TO_SOLUTION); add_subdirectory(utils/LLVMVisualizers); endif(). foreach( binding ${LLVM_BINDINGS_LIST} ); if( EXISTS ""${LLVM_MAIN_SRC_DIR}/bindings/${binding}/CMakeLists.txt"" ); add_subdirectory(bindings/${binding}); endif(); endforeach(). add_subdirectory(projects). if( LLVM_INCLUDE_TOOLS ); add_subdirectory(tools); endif(). if( LLVM_INCLUDE_RUNTIMES ); add_subdirectory(runtimes); endif(). if( LLVM_INCLUDE_EXAMPLES ); add_subdirectory(examples); endif(). if( LLVM_INCLUDE_TESTS ); set(LLVM_GTEST_RUN_UNDER; """" CACHE STRING; ""Define the wrapper program that LLVM unit tests should be run under.""); if(EXISTS ${LLVM_MAIN_SRC_DIR}/projects/test-suite AND TARGET clang); include(LLVMExternalProjectUtils); llvm_ExternalProject_Add(test-suite ${LLVM_MAIN_SRC_DIR}/projects/test-suite; USE_TOOLCHAIN; EXCLUDE_FROM_ALL; NO_INSTALL; ALWAYS_CLEAN); endif(); add_subdirectory(utils/lit); add_subdirectory(test); add_subdirectory(unittests). if (WIN32); # This utility is used to prevent crashing tests from calling Dr. Watson on; # Windows.; add_subdirectory(utils/KillTheDoctor); endif(). umbrella_lit_testsuite_end(check-all); get_property(LLVM_ALL_LIT_DEPENDS GLOBAL PROPERTY LLVM_ALL_LIT_DEPENDS); get_property(LLVM_ALL_ADDITIONAL_TEST_DEPENDS; GLOBAL PROPERTY LLVM_ALL_ADDITIONAL_TEST_DEPENDS); add_custom_target(test-depends; DEPENDS ${LLVM_ALL_LIT_DEPENDS} ${LLVM_ALL_ADDITIONAL_TEST_DEPENDS}); set_target_properties(test-depends PROPERTIES FOLDER ""Tests""); add_dependencies(check-all test-depends); endif(). if (LLVM_INCLUDE_DOCS); add_subdirectory(docs); endif(). add_subdirectory(cmake/modules). # Do this last so that all lit targets have already been created.; if (LLVM_INCLUDE_UTILS); add_subdirectory(utils/llvm-lit); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:50588,Testability,test,test-suite,50588," Either set LLVM_INCLUDE_UTILS to On, or set LLVM_INCLUDE_TESTS to Off.""); endif(); endif(). # Use LLVM_ADD_NATIVE_VISUALIZERS_TO_SOLUTION instead of LLVM_INCLUDE_UTILS because it is not really a util; if (LLVM_ADD_NATIVE_VISUALIZERS_TO_SOLUTION); add_subdirectory(utils/LLVMVisualizers); endif(). foreach( binding ${LLVM_BINDINGS_LIST} ); if( EXISTS ""${LLVM_MAIN_SRC_DIR}/bindings/${binding}/CMakeLists.txt"" ); add_subdirectory(bindings/${binding}); endif(); endforeach(). add_subdirectory(projects). if( LLVM_INCLUDE_TOOLS ); add_subdirectory(tools); endif(). if( LLVM_INCLUDE_RUNTIMES ); add_subdirectory(runtimes); endif(). if( LLVM_INCLUDE_EXAMPLES ); add_subdirectory(examples); endif(). if( LLVM_INCLUDE_TESTS ); set(LLVM_GTEST_RUN_UNDER; """" CACHE STRING; ""Define the wrapper program that LLVM unit tests should be run under.""); if(EXISTS ${LLVM_MAIN_SRC_DIR}/projects/test-suite AND TARGET clang); include(LLVMExternalProjectUtils); llvm_ExternalProject_Add(test-suite ${LLVM_MAIN_SRC_DIR}/projects/test-suite; USE_TOOLCHAIN; EXCLUDE_FROM_ALL; NO_INSTALL; ALWAYS_CLEAN); endif(); add_subdirectory(utils/lit); add_subdirectory(test); add_subdirectory(unittests). if (WIN32); # This utility is used to prevent crashing tests from calling Dr. Watson on; # Windows.; add_subdirectory(utils/KillTheDoctor); endif(). umbrella_lit_testsuite_end(check-all); get_property(LLVM_ALL_LIT_DEPENDS GLOBAL PROPERTY LLVM_ALL_LIT_DEPENDS); get_property(LLVM_ALL_ADDITIONAL_TEST_DEPENDS; GLOBAL PROPERTY LLVM_ALL_ADDITIONAL_TEST_DEPENDS); add_custom_target(test-depends; DEPENDS ${LLVM_ALL_LIT_DEPENDS} ${LLVM_ALL_ADDITIONAL_TEST_DEPENDS}); set_target_properties(test-depends PROPERTIES FOLDER ""Tests""); add_dependencies(check-all test-depends); endif(). if (LLVM_INCLUDE_DOCS); add_subdirectory(docs); endif(). add_subdirectory(cmake/modules). # Do this last so that all lit targets have already been created.; if (LLVM_INCLUDE_UTILS); add_subdirectory(utils/llvm-lit); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:50715,Testability,test,test,50715," Either set LLVM_INCLUDE_UTILS to On, or set LLVM_INCLUDE_TESTS to Off.""); endif(); endif(). # Use LLVM_ADD_NATIVE_VISUALIZERS_TO_SOLUTION instead of LLVM_INCLUDE_UTILS because it is not really a util; if (LLVM_ADD_NATIVE_VISUALIZERS_TO_SOLUTION); add_subdirectory(utils/LLVMVisualizers); endif(). foreach( binding ${LLVM_BINDINGS_LIST} ); if( EXISTS ""${LLVM_MAIN_SRC_DIR}/bindings/${binding}/CMakeLists.txt"" ); add_subdirectory(bindings/${binding}); endif(); endforeach(). add_subdirectory(projects). if( LLVM_INCLUDE_TOOLS ); add_subdirectory(tools); endif(). if( LLVM_INCLUDE_RUNTIMES ); add_subdirectory(runtimes); endif(). if( LLVM_INCLUDE_EXAMPLES ); add_subdirectory(examples); endif(). if( LLVM_INCLUDE_TESTS ); set(LLVM_GTEST_RUN_UNDER; """" CACHE STRING; ""Define the wrapper program that LLVM unit tests should be run under.""); if(EXISTS ${LLVM_MAIN_SRC_DIR}/projects/test-suite AND TARGET clang); include(LLVMExternalProjectUtils); llvm_ExternalProject_Add(test-suite ${LLVM_MAIN_SRC_DIR}/projects/test-suite; USE_TOOLCHAIN; EXCLUDE_FROM_ALL; NO_INSTALL; ALWAYS_CLEAN); endif(); add_subdirectory(utils/lit); add_subdirectory(test); add_subdirectory(unittests). if (WIN32); # This utility is used to prevent crashing tests from calling Dr. Watson on; # Windows.; add_subdirectory(utils/KillTheDoctor); endif(). umbrella_lit_testsuite_end(check-all); get_property(LLVM_ALL_LIT_DEPENDS GLOBAL PROPERTY LLVM_ALL_LIT_DEPENDS); get_property(LLVM_ALL_ADDITIONAL_TEST_DEPENDS; GLOBAL PROPERTY LLVM_ALL_ADDITIONAL_TEST_DEPENDS); add_custom_target(test-depends; DEPENDS ${LLVM_ALL_LIT_DEPENDS} ${LLVM_ALL_ADDITIONAL_TEST_DEPENDS}); set_target_properties(test-depends PROPERTIES FOLDER ""Tests""); add_dependencies(check-all test-depends); endif(). if (LLVM_INCLUDE_DOCS); add_subdirectory(docs); endif(). add_subdirectory(cmake/modules). # Do this last so that all lit targets have already been created.; if (LLVM_INCLUDE_UTILS); add_subdirectory(utils/llvm-lit); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:50806,Testability,test,tests,50806,"VM_ADD_NATIVE_VISUALIZERS_TO_SOLUTION); add_subdirectory(utils/LLVMVisualizers); endif(). foreach( binding ${LLVM_BINDINGS_LIST} ); if( EXISTS ""${LLVM_MAIN_SRC_DIR}/bindings/${binding}/CMakeLists.txt"" ); add_subdirectory(bindings/${binding}); endif(); endforeach(). add_subdirectory(projects). if( LLVM_INCLUDE_TOOLS ); add_subdirectory(tools); endif(). if( LLVM_INCLUDE_RUNTIMES ); add_subdirectory(runtimes); endif(). if( LLVM_INCLUDE_EXAMPLES ); add_subdirectory(examples); endif(). if( LLVM_INCLUDE_TESTS ); set(LLVM_GTEST_RUN_UNDER; """" CACHE STRING; ""Define the wrapper program that LLVM unit tests should be run under.""); if(EXISTS ${LLVM_MAIN_SRC_DIR}/projects/test-suite AND TARGET clang); include(LLVMExternalProjectUtils); llvm_ExternalProject_Add(test-suite ${LLVM_MAIN_SRC_DIR}/projects/test-suite; USE_TOOLCHAIN; EXCLUDE_FROM_ALL; NO_INSTALL; ALWAYS_CLEAN); endif(); add_subdirectory(utils/lit); add_subdirectory(test); add_subdirectory(unittests). if (WIN32); # This utility is used to prevent crashing tests from calling Dr. Watson on; # Windows.; add_subdirectory(utils/KillTheDoctor); endif(). umbrella_lit_testsuite_end(check-all); get_property(LLVM_ALL_LIT_DEPENDS GLOBAL PROPERTY LLVM_ALL_LIT_DEPENDS); get_property(LLVM_ALL_ADDITIONAL_TEST_DEPENDS; GLOBAL PROPERTY LLVM_ALL_ADDITIONAL_TEST_DEPENDS); add_custom_target(test-depends; DEPENDS ${LLVM_ALL_LIT_DEPENDS} ${LLVM_ALL_ADDITIONAL_TEST_DEPENDS}); set_target_properties(test-depends PROPERTIES FOLDER ""Tests""); add_dependencies(check-all test-depends); endif(). if (LLVM_INCLUDE_DOCS); add_subdirectory(docs); endif(). add_subdirectory(cmake/modules). # Do this last so that all lit targets have already been created.; if (LLVM_INCLUDE_UTILS); add_subdirectory(utils/llvm-lit); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install(DIRECTORY include/llvm include/llvm-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""*.td""; PATTERN ""*.inc""; PATTE",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:51128,Testability,test,test-depends,51128,"_subdirectory(tools); endif(). if( LLVM_INCLUDE_RUNTIMES ); add_subdirectory(runtimes); endif(). if( LLVM_INCLUDE_EXAMPLES ); add_subdirectory(examples); endif(). if( LLVM_INCLUDE_TESTS ); set(LLVM_GTEST_RUN_UNDER; """" CACHE STRING; ""Define the wrapper program that LLVM unit tests should be run under.""); if(EXISTS ${LLVM_MAIN_SRC_DIR}/projects/test-suite AND TARGET clang); include(LLVMExternalProjectUtils); llvm_ExternalProject_Add(test-suite ${LLVM_MAIN_SRC_DIR}/projects/test-suite; USE_TOOLCHAIN; EXCLUDE_FROM_ALL; NO_INSTALL; ALWAYS_CLEAN); endif(); add_subdirectory(utils/lit); add_subdirectory(test); add_subdirectory(unittests). if (WIN32); # This utility is used to prevent crashing tests from calling Dr. Watson on; # Windows.; add_subdirectory(utils/KillTheDoctor); endif(). umbrella_lit_testsuite_end(check-all); get_property(LLVM_ALL_LIT_DEPENDS GLOBAL PROPERTY LLVM_ALL_LIT_DEPENDS); get_property(LLVM_ALL_ADDITIONAL_TEST_DEPENDS; GLOBAL PROPERTY LLVM_ALL_ADDITIONAL_TEST_DEPENDS); add_custom_target(test-depends; DEPENDS ${LLVM_ALL_LIT_DEPENDS} ${LLVM_ALL_ADDITIONAL_TEST_DEPENDS}); set_target_properties(test-depends PROPERTIES FOLDER ""Tests""); add_dependencies(check-all test-depends); endif(). if (LLVM_INCLUDE_DOCS); add_subdirectory(docs); endif(). add_subdirectory(cmake/modules). # Do this last so that all lit targets have already been created.; if (LLVM_INCLUDE_UTILS); add_subdirectory(utils/llvm-lit); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install(DIRECTORY include/llvm include/llvm-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""*.td""; PATTERN ""*.inc""; PATTERN ""LICENSE.TXT""; ). install(DIRECTORY ${LLVM_INCLUDE_DIR}/llvm ${LLVM_INCLUDE_DIR}/llvm-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""*.gen""; PATTERN ""*.inc""; # Exclude include/llvm/CMakeFiles/intrinsics_gen.dir, matched by ""*.def""; PATTERN ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:51234,Testability,test,test-depends,51234,"_subdirectory(tools); endif(). if( LLVM_INCLUDE_RUNTIMES ); add_subdirectory(runtimes); endif(). if( LLVM_INCLUDE_EXAMPLES ); add_subdirectory(examples); endif(). if( LLVM_INCLUDE_TESTS ); set(LLVM_GTEST_RUN_UNDER; """" CACHE STRING; ""Define the wrapper program that LLVM unit tests should be run under.""); if(EXISTS ${LLVM_MAIN_SRC_DIR}/projects/test-suite AND TARGET clang); include(LLVMExternalProjectUtils); llvm_ExternalProject_Add(test-suite ${LLVM_MAIN_SRC_DIR}/projects/test-suite; USE_TOOLCHAIN; EXCLUDE_FROM_ALL; NO_INSTALL; ALWAYS_CLEAN); endif(); add_subdirectory(utils/lit); add_subdirectory(test); add_subdirectory(unittests). if (WIN32); # This utility is used to prevent crashing tests from calling Dr. Watson on; # Windows.; add_subdirectory(utils/KillTheDoctor); endif(). umbrella_lit_testsuite_end(check-all); get_property(LLVM_ALL_LIT_DEPENDS GLOBAL PROPERTY LLVM_ALL_LIT_DEPENDS); get_property(LLVM_ALL_ADDITIONAL_TEST_DEPENDS; GLOBAL PROPERTY LLVM_ALL_ADDITIONAL_TEST_DEPENDS); add_custom_target(test-depends; DEPENDS ${LLVM_ALL_LIT_DEPENDS} ${LLVM_ALL_ADDITIONAL_TEST_DEPENDS}); set_target_properties(test-depends PROPERTIES FOLDER ""Tests""); add_dependencies(check-all test-depends); endif(). if (LLVM_INCLUDE_DOCS); add_subdirectory(docs); endif(). add_subdirectory(cmake/modules). # Do this last so that all lit targets have already been created.; if (LLVM_INCLUDE_UTILS); add_subdirectory(utils/llvm-lit); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install(DIRECTORY include/llvm include/llvm-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""*.td""; PATTERN ""*.inc""; PATTERN ""LICENSE.TXT""; ). install(DIRECTORY ${LLVM_INCLUDE_DIR}/llvm ${LLVM_INCLUDE_DIR}/llvm-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""*.gen""; PATTERN ""*.inc""; # Exclude include/llvm/CMakeFiles/intrinsics_gen.dir, matched by ""*.def""; PATTERN ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:51302,Testability,test,test-depends,51302,"_subdirectory(tools); endif(). if( LLVM_INCLUDE_RUNTIMES ); add_subdirectory(runtimes); endif(). if( LLVM_INCLUDE_EXAMPLES ); add_subdirectory(examples); endif(). if( LLVM_INCLUDE_TESTS ); set(LLVM_GTEST_RUN_UNDER; """" CACHE STRING; ""Define the wrapper program that LLVM unit tests should be run under.""); if(EXISTS ${LLVM_MAIN_SRC_DIR}/projects/test-suite AND TARGET clang); include(LLVMExternalProjectUtils); llvm_ExternalProject_Add(test-suite ${LLVM_MAIN_SRC_DIR}/projects/test-suite; USE_TOOLCHAIN; EXCLUDE_FROM_ALL; NO_INSTALL; ALWAYS_CLEAN); endif(); add_subdirectory(utils/lit); add_subdirectory(test); add_subdirectory(unittests). if (WIN32); # This utility is used to prevent crashing tests from calling Dr. Watson on; # Windows.; add_subdirectory(utils/KillTheDoctor); endif(). umbrella_lit_testsuite_end(check-all); get_property(LLVM_ALL_LIT_DEPENDS GLOBAL PROPERTY LLVM_ALL_LIT_DEPENDS); get_property(LLVM_ALL_ADDITIONAL_TEST_DEPENDS; GLOBAL PROPERTY LLVM_ALL_ADDITIONAL_TEST_DEPENDS); add_custom_target(test-depends; DEPENDS ${LLVM_ALL_LIT_DEPENDS} ${LLVM_ALL_ADDITIONAL_TEST_DEPENDS}); set_target_properties(test-depends PROPERTIES FOLDER ""Tests""); add_dependencies(check-all test-depends); endif(). if (LLVM_INCLUDE_DOCS); add_subdirectory(docs); endif(). add_subdirectory(cmake/modules). # Do this last so that all lit targets have already been created.; if (LLVM_INCLUDE_UTILS); add_subdirectory(utils/llvm-lit); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install(DIRECTORY include/llvm include/llvm-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""*.td""; PATTERN ""*.inc""; PATTERN ""LICENSE.TXT""; ). install(DIRECTORY ${LLVM_INCLUDE_DIR}/llvm ${LLVM_INCLUDE_DIR}/llvm-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""*.gen""; PATTERN ""*.inc""; # Exclude include/llvm/CMakeFiles/intrinsics_gen.dir, matched by ""*.def""; PATTERN ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:54007,Testability,benchmark,benchmark,54007," add_llvm_install_targets(install-llvm-libraries; DEPENDS llvm-libraries; COMPONENT llvm-libraries); endif(). get_property(LLVM_LIBS GLOBAL PROPERTY LLVM_LIBS); if(LLVM_LIBS); list(REMOVE_DUPLICATES LLVM_LIBS); foreach(lib ${LLVM_LIBS}); add_dependencies(llvm-libraries ${lib}); if (NOT LLVM_ENABLE_IDE); add_dependencies(install-llvm-libraries install-${lib}); add_dependencies(install-llvm-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(); endif(). # This must be at the end of the LLVM root CMakeLists file because it must run; # after all targets are created.; llvm_distribution_add_targets(); process_llvm_pass_plugins(GEN_CONFIG); include(CoverageReport). # This allows us to deploy the Universal CRT DLLs by passing -DCMAKE_INSTALL_UCRT_LIBRARIES=ON to CMake; if (MSVC AND CMAKE_HOST_SYSTEM_NAME STREQUAL ""Windows"" AND CMAKE_INSTALL_UCRT_LIBRARIES); include(InstallRequiredSystemLibraries); endif(). if (LLVM_INCLUDE_BENCHMARKS); # Override benchmark defaults so that when the library itself is updated these; # modifications are not lost.; set(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL ""Disable benchmark testing"" FORCE); set(BENCHMARK_ENABLE_EXCEPTIONS OFF CACHE BOOL ""Disable benchmark exceptions"" FORCE); set(BENCHMARK_ENABLE_INSTALL OFF CACHE BOOL ""Don't install benchmark"" FORCE); set(BENCHMARK_DOWNLOAD_DEPENDENCIES OFF CACHE BOOL ""Don't download dependencies"" FORCE); set(BENCHMARK_ENABLE_GTEST_TESTS OFF CACHE BOOL ""Disable Google Test in benchmark"" FORCE); set(BENCHMARK_ENABLE_WERROR ${LLVM_ENABLE_WERROR} CACHE BOOL; ""Handle -Werror for Google Benchmark based on LLVM_ENABLE_WERROR"" FORCE); # Since LLVM requires C++11 it is safe to assume that std::regex is available.; set(HAVE_STD_REGEX ON CACHE BOOL ""OK"" FORCE); add_subdirectory(${LLVM_THIRD_PARTY_DIR}/benchmark; ${CMAKE_CURRENT_BINARY_DIR}/third-party/benchmark); add_subdirectory(benchmarks); endif(). if (LLVM_INCLUDE_UTILS AND LLVM_INCLUDE_TOOLS); add_subdirectory(utils/llvm-locstats); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:54160,Testability,benchmark,benchmark,54160," add_llvm_install_targets(install-llvm-libraries; DEPENDS llvm-libraries; COMPONENT llvm-libraries); endif(). get_property(LLVM_LIBS GLOBAL PROPERTY LLVM_LIBS); if(LLVM_LIBS); list(REMOVE_DUPLICATES LLVM_LIBS); foreach(lib ${LLVM_LIBS}); add_dependencies(llvm-libraries ${lib}); if (NOT LLVM_ENABLE_IDE); add_dependencies(install-llvm-libraries install-${lib}); add_dependencies(install-llvm-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(); endif(). # This must be at the end of the LLVM root CMakeLists file because it must run; # after all targets are created.; llvm_distribution_add_targets(); process_llvm_pass_plugins(GEN_CONFIG); include(CoverageReport). # This allows us to deploy the Universal CRT DLLs by passing -DCMAKE_INSTALL_UCRT_LIBRARIES=ON to CMake; if (MSVC AND CMAKE_HOST_SYSTEM_NAME STREQUAL ""Windows"" AND CMAKE_INSTALL_UCRT_LIBRARIES); include(InstallRequiredSystemLibraries); endif(). if (LLVM_INCLUDE_BENCHMARKS); # Override benchmark defaults so that when the library itself is updated these; # modifications are not lost.; set(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL ""Disable benchmark testing"" FORCE); set(BENCHMARK_ENABLE_EXCEPTIONS OFF CACHE BOOL ""Disable benchmark exceptions"" FORCE); set(BENCHMARK_ENABLE_INSTALL OFF CACHE BOOL ""Don't install benchmark"" FORCE); set(BENCHMARK_DOWNLOAD_DEPENDENCIES OFF CACHE BOOL ""Don't download dependencies"" FORCE); set(BENCHMARK_ENABLE_GTEST_TESTS OFF CACHE BOOL ""Disable Google Test in benchmark"" FORCE); set(BENCHMARK_ENABLE_WERROR ${LLVM_ENABLE_WERROR} CACHE BOOL; ""Handle -Werror for Google Benchmark based on LLVM_ENABLE_WERROR"" FORCE); # Since LLVM requires C++11 it is safe to assume that std::regex is available.; set(HAVE_STD_REGEX ON CACHE BOOL ""OK"" FORCE); add_subdirectory(${LLVM_THIRD_PARTY_DIR}/benchmark; ${CMAKE_CURRENT_BINARY_DIR}/third-party/benchmark); add_subdirectory(benchmarks); endif(). if (LLVM_INCLUDE_UTILS AND LLVM_INCLUDE_TOOLS); add_subdirectory(utils/llvm-locstats); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:54170,Testability,test,testing,54170," add_llvm_install_targets(install-llvm-libraries; DEPENDS llvm-libraries; COMPONENT llvm-libraries); endif(). get_property(LLVM_LIBS GLOBAL PROPERTY LLVM_LIBS); if(LLVM_LIBS); list(REMOVE_DUPLICATES LLVM_LIBS); foreach(lib ${LLVM_LIBS}); add_dependencies(llvm-libraries ${lib}); if (NOT LLVM_ENABLE_IDE); add_dependencies(install-llvm-libraries install-${lib}); add_dependencies(install-llvm-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(); endif(). # This must be at the end of the LLVM root CMakeLists file because it must run; # after all targets are created.; llvm_distribution_add_targets(); process_llvm_pass_plugins(GEN_CONFIG); include(CoverageReport). # This allows us to deploy the Universal CRT DLLs by passing -DCMAKE_INSTALL_UCRT_LIBRARIES=ON to CMake; if (MSVC AND CMAKE_HOST_SYSTEM_NAME STREQUAL ""Windows"" AND CMAKE_INSTALL_UCRT_LIBRARIES); include(InstallRequiredSystemLibraries); endif(). if (LLVM_INCLUDE_BENCHMARKS); # Override benchmark defaults so that when the library itself is updated these; # modifications are not lost.; set(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL ""Disable benchmark testing"" FORCE); set(BENCHMARK_ENABLE_EXCEPTIONS OFF CACHE BOOL ""Disable benchmark exceptions"" FORCE); set(BENCHMARK_ENABLE_INSTALL OFF CACHE BOOL ""Don't install benchmark"" FORCE); set(BENCHMARK_DOWNLOAD_DEPENDENCIES OFF CACHE BOOL ""Don't download dependencies"" FORCE); set(BENCHMARK_ENABLE_GTEST_TESTS OFF CACHE BOOL ""Disable Google Test in benchmark"" FORCE); set(BENCHMARK_ENABLE_WERROR ${LLVM_ENABLE_WERROR} CACHE BOOL; ""Handle -Werror for Google Benchmark based on LLVM_ENABLE_WERROR"" FORCE); # Since LLVM requires C++11 it is safe to assume that std::regex is available.; set(HAVE_STD_REGEX ON CACHE BOOL ""OK"" FORCE); add_subdirectory(${LLVM_THIRD_PARTY_DIR}/benchmark; ${CMAKE_CURRENT_BINARY_DIR}/third-party/benchmark); add_subdirectory(benchmarks); endif(). if (LLVM_INCLUDE_UTILS AND LLVM_INCLUDE_TOOLS); add_subdirectory(utils/llvm-locstats); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:54243,Testability,benchmark,benchmark,54243," add_llvm_install_targets(install-llvm-libraries; DEPENDS llvm-libraries; COMPONENT llvm-libraries); endif(). get_property(LLVM_LIBS GLOBAL PROPERTY LLVM_LIBS); if(LLVM_LIBS); list(REMOVE_DUPLICATES LLVM_LIBS); foreach(lib ${LLVM_LIBS}); add_dependencies(llvm-libraries ${lib}); if (NOT LLVM_ENABLE_IDE); add_dependencies(install-llvm-libraries install-${lib}); add_dependencies(install-llvm-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(); endif(). # This must be at the end of the LLVM root CMakeLists file because it must run; # after all targets are created.; llvm_distribution_add_targets(); process_llvm_pass_plugins(GEN_CONFIG); include(CoverageReport). # This allows us to deploy the Universal CRT DLLs by passing -DCMAKE_INSTALL_UCRT_LIBRARIES=ON to CMake; if (MSVC AND CMAKE_HOST_SYSTEM_NAME STREQUAL ""Windows"" AND CMAKE_INSTALL_UCRT_LIBRARIES); include(InstallRequiredSystemLibraries); endif(). if (LLVM_INCLUDE_BENCHMARKS); # Override benchmark defaults so that when the library itself is updated these; # modifications are not lost.; set(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL ""Disable benchmark testing"" FORCE); set(BENCHMARK_ENABLE_EXCEPTIONS OFF CACHE BOOL ""Disable benchmark exceptions"" FORCE); set(BENCHMARK_ENABLE_INSTALL OFF CACHE BOOL ""Don't install benchmark"" FORCE); set(BENCHMARK_DOWNLOAD_DEPENDENCIES OFF CACHE BOOL ""Don't download dependencies"" FORCE); set(BENCHMARK_ENABLE_GTEST_TESTS OFF CACHE BOOL ""Disable Google Test in benchmark"" FORCE); set(BENCHMARK_ENABLE_WERROR ${LLVM_ENABLE_WERROR} CACHE BOOL; ""Handle -Werror for Google Benchmark based on LLVM_ENABLE_WERROR"" FORCE); # Since LLVM requires C++11 it is safe to assume that std::regex is available.; set(HAVE_STD_REGEX ON CACHE BOOL ""OK"" FORCE); add_subdirectory(${LLVM_THIRD_PARTY_DIR}/benchmark; ${CMAKE_CURRENT_BINARY_DIR}/third-party/benchmark); add_subdirectory(benchmarks); endif(). if (LLVM_INCLUDE_UTILS AND LLVM_INCLUDE_TOOLS); add_subdirectory(utils/llvm-locstats); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:54332,Testability,benchmark,benchmark,54332," add_llvm_install_targets(install-llvm-libraries; DEPENDS llvm-libraries; COMPONENT llvm-libraries); endif(). get_property(LLVM_LIBS GLOBAL PROPERTY LLVM_LIBS); if(LLVM_LIBS); list(REMOVE_DUPLICATES LLVM_LIBS); foreach(lib ${LLVM_LIBS}); add_dependencies(llvm-libraries ${lib}); if (NOT LLVM_ENABLE_IDE); add_dependencies(install-llvm-libraries install-${lib}); add_dependencies(install-llvm-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(); endif(). # This must be at the end of the LLVM root CMakeLists file because it must run; # after all targets are created.; llvm_distribution_add_targets(); process_llvm_pass_plugins(GEN_CONFIG); include(CoverageReport). # This allows us to deploy the Universal CRT DLLs by passing -DCMAKE_INSTALL_UCRT_LIBRARIES=ON to CMake; if (MSVC AND CMAKE_HOST_SYSTEM_NAME STREQUAL ""Windows"" AND CMAKE_INSTALL_UCRT_LIBRARIES); include(InstallRequiredSystemLibraries); endif(). if (LLVM_INCLUDE_BENCHMARKS); # Override benchmark defaults so that when the library itself is updated these; # modifications are not lost.; set(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL ""Disable benchmark testing"" FORCE); set(BENCHMARK_ENABLE_EXCEPTIONS OFF CACHE BOOL ""Disable benchmark exceptions"" FORCE); set(BENCHMARK_ENABLE_INSTALL OFF CACHE BOOL ""Don't install benchmark"" FORCE); set(BENCHMARK_DOWNLOAD_DEPENDENCIES OFF CACHE BOOL ""Don't download dependencies"" FORCE); set(BENCHMARK_ENABLE_GTEST_TESTS OFF CACHE BOOL ""Disable Google Test in benchmark"" FORCE); set(BENCHMARK_ENABLE_WERROR ${LLVM_ENABLE_WERROR} CACHE BOOL; ""Handle -Werror for Google Benchmark based on LLVM_ENABLE_WERROR"" FORCE); # Since LLVM requires C++11 it is safe to assume that std::regex is available.; set(HAVE_STD_REGEX ON CACHE BOOL ""OK"" FORCE); add_subdirectory(${LLVM_THIRD_PARTY_DIR}/benchmark; ${CMAKE_CURRENT_BINARY_DIR}/third-party/benchmark); add_subdirectory(benchmarks); endif(). if (LLVM_INCLUDE_UTILS AND LLVM_INCLUDE_TOOLS); add_subdirectory(utils/llvm-locstats); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:54512,Testability,benchmark,benchmark,54512," add_llvm_install_targets(install-llvm-libraries; DEPENDS llvm-libraries; COMPONENT llvm-libraries); endif(). get_property(LLVM_LIBS GLOBAL PROPERTY LLVM_LIBS); if(LLVM_LIBS); list(REMOVE_DUPLICATES LLVM_LIBS); foreach(lib ${LLVM_LIBS}); add_dependencies(llvm-libraries ${lib}); if (NOT LLVM_ENABLE_IDE); add_dependencies(install-llvm-libraries install-${lib}); add_dependencies(install-llvm-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(); endif(). # This must be at the end of the LLVM root CMakeLists file because it must run; # after all targets are created.; llvm_distribution_add_targets(); process_llvm_pass_plugins(GEN_CONFIG); include(CoverageReport). # This allows us to deploy the Universal CRT DLLs by passing -DCMAKE_INSTALL_UCRT_LIBRARIES=ON to CMake; if (MSVC AND CMAKE_HOST_SYSTEM_NAME STREQUAL ""Windows"" AND CMAKE_INSTALL_UCRT_LIBRARIES); include(InstallRequiredSystemLibraries); endif(). if (LLVM_INCLUDE_BENCHMARKS); # Override benchmark defaults so that when the library itself is updated these; # modifications are not lost.; set(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL ""Disable benchmark testing"" FORCE); set(BENCHMARK_ENABLE_EXCEPTIONS OFF CACHE BOOL ""Disable benchmark exceptions"" FORCE); set(BENCHMARK_ENABLE_INSTALL OFF CACHE BOOL ""Don't install benchmark"" FORCE); set(BENCHMARK_DOWNLOAD_DEPENDENCIES OFF CACHE BOOL ""Don't download dependencies"" FORCE); set(BENCHMARK_ENABLE_GTEST_TESTS OFF CACHE BOOL ""Disable Google Test in benchmark"" FORCE); set(BENCHMARK_ENABLE_WERROR ${LLVM_ENABLE_WERROR} CACHE BOOL; ""Handle -Werror for Google Benchmark based on LLVM_ENABLE_WERROR"" FORCE); # Since LLVM requires C++11 it is safe to assume that std::regex is available.; set(HAVE_STD_REGEX ON CACHE BOOL ""OK"" FORCE); add_subdirectory(${LLVM_THIRD_PARTY_DIR}/benchmark; ${CMAKE_CURRENT_BINARY_DIR}/third-party/benchmark); add_subdirectory(benchmarks); endif(). if (LLVM_INCLUDE_UTILS AND LLVM_INCLUDE_TOOLS); add_subdirectory(utils/llvm-locstats); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:54834,Testability,benchmark,benchmark,54834," add_llvm_install_targets(install-llvm-libraries; DEPENDS llvm-libraries; COMPONENT llvm-libraries); endif(). get_property(LLVM_LIBS GLOBAL PROPERTY LLVM_LIBS); if(LLVM_LIBS); list(REMOVE_DUPLICATES LLVM_LIBS); foreach(lib ${LLVM_LIBS}); add_dependencies(llvm-libraries ${lib}); if (NOT LLVM_ENABLE_IDE); add_dependencies(install-llvm-libraries install-${lib}); add_dependencies(install-llvm-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(); endif(). # This must be at the end of the LLVM root CMakeLists file because it must run; # after all targets are created.; llvm_distribution_add_targets(); process_llvm_pass_plugins(GEN_CONFIG); include(CoverageReport). # This allows us to deploy the Universal CRT DLLs by passing -DCMAKE_INSTALL_UCRT_LIBRARIES=ON to CMake; if (MSVC AND CMAKE_HOST_SYSTEM_NAME STREQUAL ""Windows"" AND CMAKE_INSTALL_UCRT_LIBRARIES); include(InstallRequiredSystemLibraries); endif(). if (LLVM_INCLUDE_BENCHMARKS); # Override benchmark defaults so that when the library itself is updated these; # modifications are not lost.; set(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL ""Disable benchmark testing"" FORCE); set(BENCHMARK_ENABLE_EXCEPTIONS OFF CACHE BOOL ""Disable benchmark exceptions"" FORCE); set(BENCHMARK_ENABLE_INSTALL OFF CACHE BOOL ""Don't install benchmark"" FORCE); set(BENCHMARK_DOWNLOAD_DEPENDENCIES OFF CACHE BOOL ""Don't download dependencies"" FORCE); set(BENCHMARK_ENABLE_GTEST_TESTS OFF CACHE BOOL ""Disable Google Test in benchmark"" FORCE); set(BENCHMARK_ENABLE_WERROR ${LLVM_ENABLE_WERROR} CACHE BOOL; ""Handle -Werror for Google Benchmark based on LLVM_ENABLE_WERROR"" FORCE); # Since LLVM requires C++11 it is safe to assume that std::regex is available.; set(HAVE_STD_REGEX ON CACHE BOOL ""OK"" FORCE); add_subdirectory(${LLVM_THIRD_PARTY_DIR}/benchmark; ${CMAKE_CURRENT_BINARY_DIR}/third-party/benchmark); add_subdirectory(benchmarks); endif(). if (LLVM_INCLUDE_UTILS AND LLVM_INCLUDE_TOOLS); add_subdirectory(utils/llvm-locstats); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:54885,Testability,benchmark,benchmark,54885," add_llvm_install_targets(install-llvm-libraries; DEPENDS llvm-libraries; COMPONENT llvm-libraries); endif(). get_property(LLVM_LIBS GLOBAL PROPERTY LLVM_LIBS); if(LLVM_LIBS); list(REMOVE_DUPLICATES LLVM_LIBS); foreach(lib ${LLVM_LIBS}); add_dependencies(llvm-libraries ${lib}); if (NOT LLVM_ENABLE_IDE); add_dependencies(install-llvm-libraries install-${lib}); add_dependencies(install-llvm-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(); endif(). # This must be at the end of the LLVM root CMakeLists file because it must run; # after all targets are created.; llvm_distribution_add_targets(); process_llvm_pass_plugins(GEN_CONFIG); include(CoverageReport). # This allows us to deploy the Universal CRT DLLs by passing -DCMAKE_INSTALL_UCRT_LIBRARIES=ON to CMake; if (MSVC AND CMAKE_HOST_SYSTEM_NAME STREQUAL ""Windows"" AND CMAKE_INSTALL_UCRT_LIBRARIES); include(InstallRequiredSystemLibraries); endif(). if (LLVM_INCLUDE_BENCHMARKS); # Override benchmark defaults so that when the library itself is updated these; # modifications are not lost.; set(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL ""Disable benchmark testing"" FORCE); set(BENCHMARK_ENABLE_EXCEPTIONS OFF CACHE BOOL ""Disable benchmark exceptions"" FORCE); set(BENCHMARK_ENABLE_INSTALL OFF CACHE BOOL ""Don't install benchmark"" FORCE); set(BENCHMARK_DOWNLOAD_DEPENDENCIES OFF CACHE BOOL ""Don't download dependencies"" FORCE); set(BENCHMARK_ENABLE_GTEST_TESTS OFF CACHE BOOL ""Disable Google Test in benchmark"" FORCE); set(BENCHMARK_ENABLE_WERROR ${LLVM_ENABLE_WERROR} CACHE BOOL; ""Handle -Werror for Google Benchmark based on LLVM_ENABLE_WERROR"" FORCE); # Since LLVM requires C++11 it is safe to assume that std::regex is available.; set(HAVE_STD_REGEX ON CACHE BOOL ""OK"" FORCE); add_subdirectory(${LLVM_THIRD_PARTY_DIR}/benchmark; ${CMAKE_CURRENT_BINARY_DIR}/third-party/benchmark); add_subdirectory(benchmarks); endif(). if (LLVM_INCLUDE_UTILS AND LLVM_INCLUDE_TOOLS); add_subdirectory(utils/llvm-locstats); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:54914,Testability,benchmark,benchmarks,54914," add_llvm_install_targets(install-llvm-libraries; DEPENDS llvm-libraries; COMPONENT llvm-libraries); endif(). get_property(LLVM_LIBS GLOBAL PROPERTY LLVM_LIBS); if(LLVM_LIBS); list(REMOVE_DUPLICATES LLVM_LIBS); foreach(lib ${LLVM_LIBS}); add_dependencies(llvm-libraries ${lib}); if (NOT LLVM_ENABLE_IDE); add_dependencies(install-llvm-libraries install-${lib}); add_dependencies(install-llvm-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(); endif(). # This must be at the end of the LLVM root CMakeLists file because it must run; # after all targets are created.; llvm_distribution_add_targets(); process_llvm_pass_plugins(GEN_CONFIG); include(CoverageReport). # This allows us to deploy the Universal CRT DLLs by passing -DCMAKE_INSTALL_UCRT_LIBRARIES=ON to CMake; if (MSVC AND CMAKE_HOST_SYSTEM_NAME STREQUAL ""Windows"" AND CMAKE_INSTALL_UCRT_LIBRARIES); include(InstallRequiredSystemLibraries); endif(). if (LLVM_INCLUDE_BENCHMARKS); # Override benchmark defaults so that when the library itself is updated these; # modifications are not lost.; set(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL ""Disable benchmark testing"" FORCE); set(BENCHMARK_ENABLE_EXCEPTIONS OFF CACHE BOOL ""Disable benchmark exceptions"" FORCE); set(BENCHMARK_ENABLE_INSTALL OFF CACHE BOOL ""Don't install benchmark"" FORCE); set(BENCHMARK_DOWNLOAD_DEPENDENCIES OFF CACHE BOOL ""Don't download dependencies"" FORCE); set(BENCHMARK_ENABLE_GTEST_TESTS OFF CACHE BOOL ""Disable Google Test in benchmark"" FORCE); set(BENCHMARK_ENABLE_WERROR ${LLVM_ENABLE_WERROR} CACHE BOOL; ""Handle -Werror for Google Benchmark based on LLVM_ENABLE_WERROR"" FORCE); # Since LLVM requires C++11 it is safe to assume that std::regex is available.; set(HAVE_STD_REGEX ON CACHE BOOL ""OK"" FORCE); add_subdirectory(${LLVM_THIRD_PARTY_DIR}/benchmark; ${CMAKE_CURRENT_BINARY_DIR}/third-party/benchmark); add_subdirectory(benchmarks); endif(). if (LLVM_INCLUDE_UTILS AND LLVM_INCLUDE_TOOLS); add_subdirectory(utils/llvm-locstats); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:4659,Usability,simpl,simplified,4659,"p', etc in; # c++xx mode.; set(CMAKE_CXX_EXTENSIONS YES); else(); set(CMAKE_CXX_EXTENSIONS NO); endif(). if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES); message(FATAL_ERROR ""; No build type selected. You need to pass -DCMAKE_BUILD_TYPE=<type> in order to configure LLVM.; Available options are:; * -DCMAKE_BUILD_TYPE=Release - For an optimized build with no assertions or debug info.; * -DCMAKE_BUILD_TYPE=Debug - For an unoptimized build with assertions and debug info.; * -DCMAKE_BUILD_TYPE=RelWithDebInfo - For an optimized build with no assertions but with debug info.; * -DCMAKE_BUILD_TYPE=MinSizeRel - For a build optimized for size instead of speed.; Learn more about these options in our documentation at https://llvm.org/docs/CMake.html#cmake-build-type; ""); endif(). # Set default build type for cmake's try_compile module.; # CMake 3.17 or newer sets CMAKE_DEFAULT_BUILD_TYPE to one of the; # items from CMAKE_CONFIGURATION_TYPES. Logic below can be further; # simplified once LLVM's minimum CMake version is updated to 3.17.; if(CMAKE_DEFAULT_BUILD_TYPE); set(CMAKE_TRY_COMPILE_CONFIGURATION ${CMAKE_DEFAULT_BUILD_TYPE}); else(); if(CMAKE_CONFIGURATION_TYPES); list(GET CMAKE_CONFIGURATION_TYPES 0 CMAKE_TRY_COMPILE_CONFIGURATION); elseif(CMAKE_BUILD_TYPE); set(CMAKE_TRY_COMPILE_CONFIGURATION ${CMAKE_BUILD_TYPE}); endif(); endif(). # Side-by-side subprojects layout: automatically set the; # LLVM_EXTERNAL_${project}_SOURCE_DIR using LLVM_ALL_PROJECTS; # This allows an easy way of setting up a build directory for llvm and another; # one for llvm+clang+... using the same sources.; set(LLVM_ALL_PROJECTS ""bolt;clang;clang-tools-extra;compiler-rt;cross-project-tests;libc;libclc;lld;lldb;mlir;openmp;polly;pstl""); # The flang project is not yet part of ""all"" projects (see C++ requirements); set(LLVM_EXTRA_PROJECTS ""flang""); # List of all known projects in the mono repo; set(LLVM_KNOWN_PROJECTS ""${LLVM_ALL_PROJECTS};${LLVM_EXTRA_PROJECTS}""); set(LLVM_ENABLE_PROJECTS """" ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CODE_OWNERS.TXT:64,Deployability,patch,patches,64,"This file is a list of the people responsible for ensuring that patches for a; particular part of LLVM are reviewed, either by themself or by someone else.; They are also the gatekeepers for their part of LLVM, with the final word on; what goes in or not. The list is sorted by surname and formatted to allow easy grepping and; beautification by scripts. The fields are: name (N), email (E), web-address; (W), PGP key ID and fingerprint (P), description (D), snail-mail address; (S) and (I) IRC handle. Each entry should contain at least the (N), (E) and; (D) fields. N: Paul C. Anagnostopoulos; E: paul@windfall.com; D: TableGen. N: Matt Arsenault; E: Matthew.Arsenault@amd.com; E: arsenm2@gmail.com; I: arsenm; D: AMDGPU, InferAddressSpaces. N: Justin Bogner; E: mail@justinbogner.com; D: InstrProfiling and related parts of ProfileData; D: SelectionDAG (lib/CodeGen/SelectionDAG/*). N: Alex Bradbury; E: asb@igalia.com; D: RISC-V backend (lib/Target/RISCV/*). N: Matthias Braun; E: matze@braunis.de; I: MatzeB; D: Instruction Scheduling. N: Chandler Carruth; E: chandlerc@gmail.com; E: chandlerc@google.com; D: Config, ADT, Support, inlining & related passes, SROA/mem2reg & related passes, CMake, library layering. N: Evan Cheng; E: evan.cheng@apple.com; D: parts of code generator not covered by someone else. N: Eric Christopher; E: echristo@gmail.com; D: Debug Information, inline assembly. N: Andrey Churbanov; E: andrey.churbanov@intel.com; D: OpenMP runtime library. N: Johannes Doerfert; E: jdoerfert@llnl.gov; D: OpenMP target offloading, OpenMP-Opt, Attributor. N: Greg Clayton; E: clayborg@gmail.com; D: LLDB. N: Louis Dionne; E: ldionne.2@gmail.com; D: libc++. N: Peter Collingbourne; E: peter@pcc.me.uk; D: libLTO (lib/LTO/* tools/lto/*), LLVM Bitcode (lib/Bitcode/* include/llvm/Bitcode/*). N: Quentin Colombet; E: quentin.colombet@gmail.com; D: Loop Strength Reduction, Register allocators. N: Andrea Di Biagio; E: andrea.dibiagio@sony.com; E: andrea.dibiagio@gmail.com; D: MCA, llvm",MatchSource.DOCS,interpreter/llvm-project/llvm/CODE_OWNERS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CODE_OWNERS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CODE_OWNERS.TXT:5025,Deployability,release,release,5025,"b/Target/LoongArch/*). N: David Majnemer; E: david.majnemer@gmail.com; D: IR Constant Folder, InstCombine. N: Ben Shi; E: 2283975856@qq.com, powerman1st@163.com; D: AVR Backend. N: Kazushi Marukawa; E: marukawa@nec.com; D: VE Backend. N: Tim Northover; E: t.p.northover@gmail.com; D: AArch64 backend, misc ARM backend. N: Diego Novillo; E: dnovillo@google.com; D: SampleProfile and related parts of ProfileData. N: Nigel Perks; E: nigelp@xmos.com; D: XCore Backend. N: Jacques Pienaar; E: jpienaar@google.com; D: Lanai Backend. N: Simon Pilgrim; E: llvm-dev@redking.me.uk; D: X86 Backend. N: Philip Reames; E: listmail@philipreames.com; D: IndVar Simplify, Scalar Evolution. N: Paul Robinson; E: paul.robinson@sony.com; D: Sony PlayStation®4 support. N: Chad Rosier; E: mcrosier@codeaurora.org; D: Fast-Isel. N: Andrei Safronov; E: andrei.safronov@espressif.com; D: Xtensa backend (lib/Target/Xtensa/*). N: Duncan Sands; E: baldrick@free.fr; D: DragonEgg. N: Mark Schimmel; E: marksl@synopsys.com; D: ARC backend (lib/Target/ARC/*). N: Kostya Serebryany; E: kcc@google.com; D: AddressSanitizer, ThreadSanitizer (LLVM parts). N: Michael Spencer; E: bigcheesegs@gmail.com; D: Windows parts of Support, Object, ar, nm, objdump, ranlib, size. N: Alexei Starovoitov; E: alexei.starovoitov@gmail.com; D: BPF backend. N: Tom Stellard; E: tstellar@redhat.com; D: Stable release management (x.y.[1-9] releases), libclc. N: Evgeniy Stepanov; E: eugenis@google.com; D: MemorySanitizer (LLVM part). N: Phoebe Wang; E: phoebe.wang@intel.com; D: X86 Backend. N: Ulrich Weigand; E: uweigand@de.ibm.com; D: SystemZ Backend. N: Hans Wennborg; E: hans@chromium.org; D: Release management (x.y.0 releases). N: Jake Ehrlich; E: jakehehrlich@google.com; D: llvm-objcopy (tools/llvm-objcopy). N: Martin Storsjö; E: martin@martin.st; D: MinGW. N: Zi Xuan Wu (Zeson); E: zixuan.wu@linux.alibaba.com; D: C-SKY backend (lib/Target/CSKY/*). N: Ilia Diachkov; E: ilia.diachkov@gmail.com; D: SPIR-V backend (lib/Target/SPIRV/*); ",MatchSource.DOCS,interpreter/llvm-project/llvm/CODE_OWNERS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CODE_OWNERS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CODE_OWNERS.TXT:5055,Deployability,release,releases,5055,"b/Target/LoongArch/*). N: David Majnemer; E: david.majnemer@gmail.com; D: IR Constant Folder, InstCombine. N: Ben Shi; E: 2283975856@qq.com, powerman1st@163.com; D: AVR Backend. N: Kazushi Marukawa; E: marukawa@nec.com; D: VE Backend. N: Tim Northover; E: t.p.northover@gmail.com; D: AArch64 backend, misc ARM backend. N: Diego Novillo; E: dnovillo@google.com; D: SampleProfile and related parts of ProfileData. N: Nigel Perks; E: nigelp@xmos.com; D: XCore Backend. N: Jacques Pienaar; E: jpienaar@google.com; D: Lanai Backend. N: Simon Pilgrim; E: llvm-dev@redking.me.uk; D: X86 Backend. N: Philip Reames; E: listmail@philipreames.com; D: IndVar Simplify, Scalar Evolution. N: Paul Robinson; E: paul.robinson@sony.com; D: Sony PlayStation®4 support. N: Chad Rosier; E: mcrosier@codeaurora.org; D: Fast-Isel. N: Andrei Safronov; E: andrei.safronov@espressif.com; D: Xtensa backend (lib/Target/Xtensa/*). N: Duncan Sands; E: baldrick@free.fr; D: DragonEgg. N: Mark Schimmel; E: marksl@synopsys.com; D: ARC backend (lib/Target/ARC/*). N: Kostya Serebryany; E: kcc@google.com; D: AddressSanitizer, ThreadSanitizer (LLVM parts). N: Michael Spencer; E: bigcheesegs@gmail.com; D: Windows parts of Support, Object, ar, nm, objdump, ranlib, size. N: Alexei Starovoitov; E: alexei.starovoitov@gmail.com; D: BPF backend. N: Tom Stellard; E: tstellar@redhat.com; D: Stable release management (x.y.[1-9] releases), libclc. N: Evgeniy Stepanov; E: eugenis@google.com; D: MemorySanitizer (LLVM part). N: Phoebe Wang; E: phoebe.wang@intel.com; D: X86 Backend. N: Ulrich Weigand; E: uweigand@de.ibm.com; D: SystemZ Backend. N: Hans Wennborg; E: hans@chromium.org; D: Release management (x.y.0 releases). N: Jake Ehrlich; E: jakehehrlich@google.com; D: llvm-objcopy (tools/llvm-objcopy). N: Martin Storsjö; E: martin@martin.st; D: MinGW. N: Zi Xuan Wu (Zeson); E: zixuan.wu@linux.alibaba.com; D: C-SKY backend (lib/Target/CSKY/*). N: Ilia Diachkov; E: ilia.diachkov@gmail.com; D: SPIR-V backend (lib/Target/SPIRV/*); ",MatchSource.DOCS,interpreter/llvm-project/llvm/CODE_OWNERS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CODE_OWNERS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CODE_OWNERS.TXT:5340,Deployability,release,releases,5340,"b/Target/LoongArch/*). N: David Majnemer; E: david.majnemer@gmail.com; D: IR Constant Folder, InstCombine. N: Ben Shi; E: 2283975856@qq.com, powerman1st@163.com; D: AVR Backend. N: Kazushi Marukawa; E: marukawa@nec.com; D: VE Backend. N: Tim Northover; E: t.p.northover@gmail.com; D: AArch64 backend, misc ARM backend. N: Diego Novillo; E: dnovillo@google.com; D: SampleProfile and related parts of ProfileData. N: Nigel Perks; E: nigelp@xmos.com; D: XCore Backend. N: Jacques Pienaar; E: jpienaar@google.com; D: Lanai Backend. N: Simon Pilgrim; E: llvm-dev@redking.me.uk; D: X86 Backend. N: Philip Reames; E: listmail@philipreames.com; D: IndVar Simplify, Scalar Evolution. N: Paul Robinson; E: paul.robinson@sony.com; D: Sony PlayStation®4 support. N: Chad Rosier; E: mcrosier@codeaurora.org; D: Fast-Isel. N: Andrei Safronov; E: andrei.safronov@espressif.com; D: Xtensa backend (lib/Target/Xtensa/*). N: Duncan Sands; E: baldrick@free.fr; D: DragonEgg. N: Mark Schimmel; E: marksl@synopsys.com; D: ARC backend (lib/Target/ARC/*). N: Kostya Serebryany; E: kcc@google.com; D: AddressSanitizer, ThreadSanitizer (LLVM parts). N: Michael Spencer; E: bigcheesegs@gmail.com; D: Windows parts of Support, Object, ar, nm, objdump, ranlib, size. N: Alexei Starovoitov; E: alexei.starovoitov@gmail.com; D: BPF backend. N: Tom Stellard; E: tstellar@redhat.com; D: Stable release management (x.y.[1-9] releases), libclc. N: Evgeniy Stepanov; E: eugenis@google.com; D: MemorySanitizer (LLVM part). N: Phoebe Wang; E: phoebe.wang@intel.com; D: X86 Backend. N: Ulrich Weigand; E: uweigand@de.ibm.com; D: SystemZ Backend. N: Hans Wennborg; E: hans@chromium.org; D: Release management (x.y.0 releases). N: Jake Ehrlich; E: jakehehrlich@google.com; D: llvm-objcopy (tools/llvm-objcopy). N: Martin Storsjö; E: martin@martin.st; D: MinGW. N: Zi Xuan Wu (Zeson); E: zixuan.wu@linux.alibaba.com; D: C-SKY backend (lib/Target/CSKY/*). N: Ilia Diachkov; E: ilia.diachkov@gmail.com; D: SPIR-V backend (lib/Target/SPIRV/*); ",MatchSource.DOCS,interpreter/llvm-project/llvm/CODE_OWNERS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CODE_OWNERS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CODE_OWNERS.TXT:2913,Modifiability,plugin,plugin,2913,"agio; E: andrea.dibiagio@sony.com; E: andrea.dibiagio@gmail.com; D: MCA, llvm-mca. N: Hal Finkel; E: hfinkel@anl.gov; D: The loop reroller and alias analysis. N: Nemanja Ivanovic; E: nemanja.i.ibm@gmail.com; D: PowerPC Backend. N: Dan Gohman; E: llvm@sunfishcode.online; D: WebAssembly Backend (lib/Target/WebAssembly/*). N: Renato Golin; E: rengolin@systemcall.eu; D: ARM Linux support. N: Venkatraman Govindaraju; E: venkatra@cs.wisc.edu; D: Sparc Backend (lib/Target/Sparc/*). N: Tobias Grosser; E: tobias@grosser.es; D: Polly. N: James Grosbach; E: grosbach@apple.com; D: MC layer. N: Justin Holewinski; E: jholewinski@nvidia.com; D: NVPTX Target (lib/Target/NVPTX/*). N: Lang Hames; E: lhames@gmail.com; D: MCJIT, RuntimeDyld and JIT event listeners, Orcish Warchief. N: Min-Yih Hsu; E: min@myhsu.dev; D: M68k Target (lib/Target/M68k/*). N: Cyndy Ishida; E: cyndyishida@gmail.com; D: TextAPI (lib/TextAPI/*) and related TAPI tools. N: Teresa Johnson; E: tejohnson@google.com; D: Gold plugin (tools/gold/*) and IR Linker. N: Galina Kistanova; E: gkistanova@gmail.com; D: LLVM Buildbot. N: Anton Korobeynikov; E: anton@korobeynikov.info; D: Exception handling, Windows codegen, ARM EABI, MSP430 Target (lib/Target/MSP430/*). N: Benjamin Kramer; E: benny.kra@gmail.com; D: DWARF Parser. N: Sundeep Kushwaha; E: sundeepk@quicinc.com; D: Hexagon Backend. N: Florian Hahn; E: flo@fhahn.com; D: Loop Vectorizer. N: Alexey Bataev; E: a.bataev@outlook.com; D: SLP Vectorizer. N: Sergei Larin; E: slarin@codeaurora.org; D: VLIW Instruction Scheduling, Packetization. N: Chris Lattner; E: sabre@nondot.org; W: http://nondot.org/~sabre/; D: Everything not covered by someone else. N: Weining Lu; E: luweining@loongson.cn; D: LoongArch backend (lib/Target/LoongArch/*). N: David Majnemer; E: david.majnemer@gmail.com; D: IR Constant Folder, InstCombine. N: Ben Shi; E: 2283975856@qq.com, powerman1st@163.com; D: AVR Backend. N: Kazushi Marukawa; E: marukawa@nec.com; D: VE Backend. N: Tim Northover; E: t.p.no",MatchSource.DOCS,interpreter/llvm-project/llvm/CODE_OWNERS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CODE_OWNERS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:9381,Availability,error,error,9381,"a; E: duraid@octopus.com.au; W: http://kinoko.c.u-tokyo.ac.jp/~duraid/; D: IA64 backend, BigBlock register allocator. N: John McCall; E: rjmccall@apple.com; D: Clang semantic analysis and IR generation. N: Michael McCracken; E: michael.mccracken@gmail.com; D: Line number support for llvmgcc. N: Fanbo Meng; E: fanbo.meng@ibm.com; D: z/OS support. N: Vladimir Merzliakov; E: wanderer@rsu.ru; D: Test suite fixes for FreeBSD. N: Scott Michel; E: scottm@aero.org; D: Added STI Cell SPU backend. N: Kai Nacke; E: kai@redstar.de; D: Support for implicit TLS model used with MS VC runtime; D: Dumping of Win64 EH structures. N: Takumi Nakamura; I: chapuni; E: geek4civic@gmail.com; E: chapuni@hf.rim.or.jp; D: Maintaining the Git monorepo; W: https://github.com/llvm-project/; S: Ebina, Japan. N: Edward O'Callaghan; E: eocallaghan@auroraux.org; W: http://www.auroraux.org; D: Add Clang support with various other improvements to utils/NewNightlyTest.pl; D: Fix and maintain Solaris & AuroraUX support for llvm, various build warnings; D: and error clean ups. N: Morten Ofstad; E: morten@hue.no; D: Visual C++ compatibility fixes. N: Jakob Stoklund Olesen; E: stoklund@2pi.dk; D: Machine code verifier; D: Blackfin backend; D: Fast register allocator; D: Greedy register allocator. N: Richard Osborne; E: richard@xmos.com; D: XCore backend. N: Piotr Padlewski; E: piotr.padlewski@gmail.com; D: !invariant.group metadata and other intrinsics for devirtualization in clang. N: Devang Patel; E: dpatel@apple.com; D: LTO tool, PassManager rewrite, Loop Pass Manager, Loop Rotate; D: GCC PCH Integration (llvm-gcc), llvm-gcc improvements; D: Optimizer improvements, Loop Index Split. N: Ana Pazos; E: apazos@codeaurora.org; D: Fixes and improvements to the AArch64 backend. N: Wesley Peck; E: peckw@wesleypeck.com; W: http://wesleypeck.com/; D: MicroBlaze backend. N: Francois Pichet; E: pichet2000@gmail.com; D: MSVC support. N: Simon Pilgrim; E: llvm-dev@redking.me.uk; D: X86 backend, Selection DAG, Schedul",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:107,Deployability,patch,patch,107,"This file is a partial list of people who have contributed to the LLVM; project. If you have contributed a patch or made some other contribution to; LLVM, please submit a patch to this file to add yourself, and it will be; done!. The list is sorted by surname and formatted to allow easy grepping and; beautification by scripts. The fields are: name (N), email (E), web-address; (W), PGP key ID and fingerprint (P), description (D), snail-mail address; (S), and (I) IRC handle. N: Vikram Adve; E: vadve@cs.uiuc.edu; W: http://www.cs.uiuc.edu/~vadve/; D: The Sparc64 backend, provider of much wisdom, and motivator for LLVM. N: Owen Anderson; E: resistor@mac.com; D: LCSSA pass and related LoopUnswitch work; D: GVNPRE pass, DataLayout refactoring, random improvements. N: Henrik Bach; D: MingW Win32 API portability layer. N: Aaron Ballman; E: aaron@aaronballman.com; D: Clang frontend, frontend attributes, Windows support, general bug fixing; I: AaronBallman. N: Alexey Bataev; E: a.bataev@outlook.com; D: Clang frontend, OpenMP in clang, SLP vectorizer, Loop vectorizer, InstCombine; I: ABataev. N: Nate Begeman; E: natebegeman@mac.com; D: PowerPC backend developer; D: Target-independent code generator and analysis improvements. N: Daniel Berlin; E: dberlin@dberlin.org; D: ET-Forest implementation.; D: Sparse bitmap. N: Geoff Berry; E: gberry@codeaurora.org; E: gcb@acm.org; D: AArch64 backend improvements; D: Added EarlyCSE MemorySSA support; D: CodeGen improvements. N: David Blaikie; E: dblaikie@gmail.com; D: General bug fixing/fit & finish, mostly in Clang. N: Neil Booth; E: neil@daikokuya.co.uk; D: APFloat implementation. N: Alex Bradbury; E: asb@igalia.com; D: RISC-V backend. N: Misha Brukman; E: brukman+llvm@uiuc.edu; W: http://misha.brukman.net; D: Portions of X86 and Sparc JIT compilers, PowerPC backend; D: Incremental bitcode loader. N: Cameron Buschardt; E: buschard@uiuc.edu; D: The `mem2reg' pass - promotes values stored in memory to registers. N: Brendon Cahoon; E: bcaho",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:171,Deployability,patch,patch,171,"This file is a partial list of people who have contributed to the LLVM; project. If you have contributed a patch or made some other contribution to; LLVM, please submit a patch to this file to add yourself, and it will be; done!. The list is sorted by surname and formatted to allow easy grepping and; beautification by scripts. The fields are: name (N), email (E), web-address; (W), PGP key ID and fingerprint (P), description (D), snail-mail address; (S), and (I) IRC handle. N: Vikram Adve; E: vadve@cs.uiuc.edu; W: http://www.cs.uiuc.edu/~vadve/; D: The Sparc64 backend, provider of much wisdom, and motivator for LLVM. N: Owen Anderson; E: resistor@mac.com; D: LCSSA pass and related LoopUnswitch work; D: GVNPRE pass, DataLayout refactoring, random improvements. N: Henrik Bach; D: MingW Win32 API portability layer. N: Aaron Ballman; E: aaron@aaronballman.com; D: Clang frontend, frontend attributes, Windows support, general bug fixing; I: AaronBallman. N: Alexey Bataev; E: a.bataev@outlook.com; D: Clang frontend, OpenMP in clang, SLP vectorizer, Loop vectorizer, InstCombine; I: ABataev. N: Nate Begeman; E: natebegeman@mac.com; D: PowerPC backend developer; D: Target-independent code generator and analysis improvements. N: Daniel Berlin; E: dberlin@dberlin.org; D: ET-Forest implementation.; D: Sparse bitmap. N: Geoff Berry; E: gberry@codeaurora.org; E: gcb@acm.org; D: AArch64 backend improvements; D: Added EarlyCSE MemorySSA support; D: CodeGen improvements. N: David Blaikie; E: dblaikie@gmail.com; D: General bug fixing/fit & finish, mostly in Clang. N: Neil Booth; E: neil@daikokuya.co.uk; D: APFloat implementation. N: Alex Bradbury; E: asb@igalia.com; D: RISC-V backend. N: Misha Brukman; E: brukman+llvm@uiuc.edu; W: http://misha.brukman.net; D: Portions of X86 and Sparc JIT compilers, PowerPC backend; D: Incremental bitcode loader. N: Cameron Buschardt; E: buschard@uiuc.edu; D: The `mem2reg' pass - promotes values stored in memory to registers. N: Brendon Cahoon; E: bcaho",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:2334,Deployability,patch,patches,2334,": Sparse bitmap. N: Geoff Berry; E: gberry@codeaurora.org; E: gcb@acm.org; D: AArch64 backend improvements; D: Added EarlyCSE MemorySSA support; D: CodeGen improvements. N: David Blaikie; E: dblaikie@gmail.com; D: General bug fixing/fit & finish, mostly in Clang. N: Neil Booth; E: neil@daikokuya.co.uk; D: APFloat implementation. N: Alex Bradbury; E: asb@igalia.com; D: RISC-V backend. N: Misha Brukman; E: brukman+llvm@uiuc.edu; W: http://misha.brukman.net; D: Portions of X86 and Sparc JIT compilers, PowerPC backend; D: Incremental bitcode loader. N: Cameron Buschardt; E: buschard@uiuc.edu; D: The `mem2reg' pass - promotes values stored in memory to registers. N: Brendon Cahoon; E: bcahoon@codeaurora.org; D: Loop unrolling with run-time trip counts. N: Chandler Carruth; E: chandlerc@gmail.com; E: chandlerc@google.com; D: Hashing algorithms and interfaces; D: Inline cost analysis; D: Machine block placement pass; D: SROA. N: Casey Carter; E: ccarter@uiuc.edu; D: Fixes to the Reassociation pass, various improvement patches. N: Evan Cheng; E: evan.cheng@apple.com; D: ARM and X86 backends; D: Instruction scheduler improvements; D: Register allocator improvements; D: Loop optimizer improvements; D: Target-independent code generator improvements. N: Dan Villiom Podlaski Christiansen; E: danchr@gmail.com; E: danchr@cs.au.dk; W: http://villiom.dk; D: LLVM Makefile improvements; D: Clang diagnostic & driver tweaks; S: Aarhus, Denmark. N: Jeff Cohen; E: jeffc@jolt-lang.org; W: http://jolt-lang.org; D: Native Win32 API portability layer. N: John T. Criswell; E: criswell@uiuc.edu; D: Original Autoconf support, documentation improvements, bug fixes. N: Anshuman Dasgupta; E: adasgupt@codeaurora.org; D: Deterministic finite automaton based infrastructure for VLIW packetization. N: Stefanus Du Toit; E: stefanus.du.toit@intel.com; D: Bug fixes and minor improvements. N: Rafael Avila de Espindola; E: rafael@espindo.la; D: MC and LLD work. N: Dave Estes; E: cestes@codeaurora.org; D: AArc",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:3614,Deployability,patch,patches,3614,"om; E: danchr@cs.au.dk; W: http://villiom.dk; D: LLVM Makefile improvements; D: Clang diagnostic & driver tweaks; S: Aarhus, Denmark. N: Jeff Cohen; E: jeffc@jolt-lang.org; W: http://jolt-lang.org; D: Native Win32 API portability layer. N: John T. Criswell; E: criswell@uiuc.edu; D: Original Autoconf support, documentation improvements, bug fixes. N: Anshuman Dasgupta; E: adasgupt@codeaurora.org; D: Deterministic finite automaton based infrastructure for VLIW packetization. N: Stefanus Du Toit; E: stefanus.du.toit@intel.com; D: Bug fixes and minor improvements. N: Rafael Avila de Espindola; E: rafael@espindo.la; D: MC and LLD work. N: Dave Estes; E: cestes@codeaurora.org; D: AArch64 machine description for Cortex-A53. N: Alkis Evlogimenos; E: alkis@evlogimenos.com; D: Linear scan register allocator, many codegen improvements, Java frontend. N: Hal Finkel; E: hfinkel@anl.gov; D: Basic-block autovectorization, PowerPC backend improvements. N: Eric Fiselier; E: eric@efcs.ca; D: LIT patches and documentation. N: Ryan Flynn; E: pizza@parseerror.com; D: Miscellaneous bug fixes. N: Brian Gaeke; E: gaeke@uiuc.edu; W: http://www.students.uiuc.edu/~gaeke/; D: Portions of X86 static and JIT compilers; initial SparcV8 backend; D: Dynamic trace optimizer; D: FreeBSD/X86 compatibility fixes, the llvm-nm tool. N: Nicolas Geoffray; E: nicolas.geoffray@lip6.fr; W: http://www-src.lip6.fr/homepages/Nicolas.Geoffray/; D: PPC backend fixes for Linux. N: Louis Gerbarg; E: lgg@apple.com; D: Portions of the PowerPC backend. N: Saem Ghani; E: saemghani@gmail.com; D: Callgraph class cleanups. N: Mikhail Glushenkov; E: foldr@codedgers.com; D: Author of llvmc2. N: Dan Gohman; E: llvm@sunfishcode.online; D: Miscellaneous bug fixes; D: WebAssembly Backend. N: Renato Golin; E: rengolin@systemcall.eu; E: rengolin@gmail.com; D: ARM/AArch64 back-end improvements; D: Loop Vectorizer improvements; D: Regression and Test Suite improvements; D: Linux compatibility (GNU, musl, etc); D: Initial Linux kernel",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:5076,Deployability,integrat,integrated,5076,"es for Linux. N: Louis Gerbarg; E: lgg@apple.com; D: Portions of the PowerPC backend. N: Saem Ghani; E: saemghani@gmail.com; D: Callgraph class cleanups. N: Mikhail Glushenkov; E: foldr@codedgers.com; D: Author of llvmc2. N: Dan Gohman; E: llvm@sunfishcode.online; D: Miscellaneous bug fixes; D: WebAssembly Backend. N: Renato Golin; E: rengolin@systemcall.eu; E: rengolin@gmail.com; D: ARM/AArch64 back-end improvements; D: Loop Vectorizer improvements; D: Regression and Test Suite improvements; D: Linux compatibility (GNU, musl, etc); D: Initial Linux kernel / Android support effort; I: rengolin. N: David Goodwin; E: david@goodwinz.net; D: Thumb-2 code generator. N: David Greene; E: greened@obbligato.org; D: Miscellaneous bug fixes; D: Register allocation refactoring. N: Gabor Greif; E: ggreif@gmail.com; D: Improvements for space efficiency. N: James Grosbach; E: grosbach@apple.com; I: grosbach; D: SjLj exception handling support; D: General fixes and improvements for the ARM back-end; D: MCJIT; D: ARM integrated assembler and assembly parser; D: Led effort for the backend formerly known as ARM64. N: Lang Hames; E: lhames@gmail.com; D: PBQP-based register allocator. N: Gordon Henriksen; E: gordonhenriksen@mac.com; D: Pluggable GC support; D: C interface; D: Ocaml bindings. N: Raul Fernandes Herbster; E: raul@dsc.ufcg.edu.br; D: JIT support for ARM. N: Paolo Invernizzi; E: arathorn@fastwebnet.it; D: Visual C++ compatibility fixes. N: Patrick Jenkins; E: patjenk@wam.umd.edu; D: Nightly Tester. N: Tony(Yanjun) Jiang; E: jtony@ca.ibm.com; D: PowerPC Backend Developer; D: Improvements to the PPC backend and miscellaneous bug fixes. N: Dale Johannesen; E: dalej@apple.com; D: ARM constant islands improvements; D: Tail merging improvements; D: Rewrite X87 back end; D: Use APFloat for floating point constants widely throughout compiler; D: Implement X87 long double. N: Brad Jones; E: kungfoomaster@nondot.org; D: Support for packed types. N: Rod Kay; E: rkay@auroraux.org; D: Aut",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:7212,Deployability,upgrade,upgrade,7212,"tion multiversioning, regcall/vectorcall.; I: ErichKeane. N: Eric Kidd; W: http://randomhacks.net/; D: llvm-config script. N: Anton Korobeynikov; E: anton at korobeynikov dot info; D: Mingw32 fixes, cross-compiling support, stdcall/fastcall calling conv.; D: x86/linux PIC codegen, aliases, regparm/visibility attributes; D: Switch lowering refactoring. N: Sumant Kowshik; E: kowshik@uiuc.edu; D: Author of the original C backend. N: Benjamin Kramer; E: benny.kra@gmail.com; D: Miscellaneous bug fixes. N: Michael Kuperstein; E: mkuper@google.com; D: Loop Vectorizer. N: Sundeep Kushwaha; E: sundeepk@codeaurora.org; D: Implemented DFA-based target independent VLIW packetizer. N: Christopher Lamb; E: christopher.lamb@gmail.com; D: aligned load/store support, parts of noalias and restrict support; D: vreg subreg infrastructure, X86 codegen improvements based on subregs; D: address spaces. N: Jim Laskey; E: jlaskey@apple.com; D: Improvements to the PPC backend, instruction scheduling; D: Debug and Dwarf implementation; D: Auto upgrade mangler; D: llvm-gcc4 svn wrangler. N: Chris Lattner; E: sabre@nondot.org; W: http://nondot.org/~sabre/; D: Primary architect of LLVM. N: Tanya Lattner (Tanya Brethour); E: tonic@nondot.org; W: http://nondot.org/~tonic/; D: The initial llvm-ar tool, converted regression testsuite to dejagnu; D: Modulo scheduling in the SparcV9 backend; D: Release manager (1.7+). N: Sylvestre Ledru; E: sylvestre@debian.org; W: http://sylvestre.ledru.info/; W: https://apt.llvm.org/; D: Debian and Ubuntu packaging; D: Continuous integration with jenkins. N: Andrew Lenharth; E: alenhar2@cs.uiuc.edu; W: http://www.lenharth.org/~andrewl/; D: Alpha backend; D: Sampling based profiling. N: Nick Lewycky; E: nicholas@mxc.ca; D: PredicateSimplifier pass. N: Tony Linthicum, et. al.; E: tlinth@codeaurora.org; D: Backend for Qualcomm's Hexagon VLIW processor. N: Bruno Cardoso Lopes; E: bruno.cardoso@gmail.com; I: bruno; W: http://brunocardoso.cc; D: Mips backend; D: Random ARM",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:7735,Deployability,integrat,integration,7735,".com; D: Loop Vectorizer. N: Sundeep Kushwaha; E: sundeepk@codeaurora.org; D: Implemented DFA-based target independent VLIW packetizer. N: Christopher Lamb; E: christopher.lamb@gmail.com; D: aligned load/store support, parts of noalias and restrict support; D: vreg subreg infrastructure, X86 codegen improvements based on subregs; D: address spaces. N: Jim Laskey; E: jlaskey@apple.com; D: Improvements to the PPC backend, instruction scheduling; D: Debug and Dwarf implementation; D: Auto upgrade mangler; D: llvm-gcc4 svn wrangler. N: Chris Lattner; E: sabre@nondot.org; W: http://nondot.org/~sabre/; D: Primary architect of LLVM. N: Tanya Lattner (Tanya Brethour); E: tonic@nondot.org; W: http://nondot.org/~tonic/; D: The initial llvm-ar tool, converted regression testsuite to dejagnu; D: Modulo scheduling in the SparcV9 backend; D: Release manager (1.7+). N: Sylvestre Ledru; E: sylvestre@debian.org; W: http://sylvestre.ledru.info/; W: https://apt.llvm.org/; D: Debian and Ubuntu packaging; D: Continuous integration with jenkins. N: Andrew Lenharth; E: alenhar2@cs.uiuc.edu; W: http://www.lenharth.org/~andrewl/; D: Alpha backend; D: Sampling based profiling. N: Nick Lewycky; E: nicholas@mxc.ca; D: PredicateSimplifier pass. N: Tony Linthicum, et. al.; E: tlinth@codeaurora.org; D: Backend for Qualcomm's Hexagon VLIW processor. N: Bruno Cardoso Lopes; E: bruno.cardoso@gmail.com; I: bruno; W: http://brunocardoso.cc; D: Mips backend; D: Random ARM integrated assembler and assembly parser improvements; D: General X86 AVX1 support. N: Weining Lu; E: luweining@loongson.cn; D: LoongArch backend. N: Duraid Madina; E: duraid@octopus.com.au; W: http://kinoko.c.u-tokyo.ac.jp/~duraid/; D: IA64 backend, BigBlock register allocator. N: John McCall; E: rjmccall@apple.com; D: Clang semantic analysis and IR generation. N: Michael McCracken; E: michael.mccracken@gmail.com; D: Line number support for llvmgcc. N: Fanbo Meng; E: fanbo.meng@ibm.com; D: z/OS support. N: Vladimir Merzliakov; E: wand",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:8181,Deployability,integrat,integrated,8181,": Auto upgrade mangler; D: llvm-gcc4 svn wrangler. N: Chris Lattner; E: sabre@nondot.org; W: http://nondot.org/~sabre/; D: Primary architect of LLVM. N: Tanya Lattner (Tanya Brethour); E: tonic@nondot.org; W: http://nondot.org/~tonic/; D: The initial llvm-ar tool, converted regression testsuite to dejagnu; D: Modulo scheduling in the SparcV9 backend; D: Release manager (1.7+). N: Sylvestre Ledru; E: sylvestre@debian.org; W: http://sylvestre.ledru.info/; W: https://apt.llvm.org/; D: Debian and Ubuntu packaging; D: Continuous integration with jenkins. N: Andrew Lenharth; E: alenhar2@cs.uiuc.edu; W: http://www.lenharth.org/~andrewl/; D: Alpha backend; D: Sampling based profiling. N: Nick Lewycky; E: nicholas@mxc.ca; D: PredicateSimplifier pass. N: Tony Linthicum, et. al.; E: tlinth@codeaurora.org; D: Backend for Qualcomm's Hexagon VLIW processor. N: Bruno Cardoso Lopes; E: bruno.cardoso@gmail.com; I: bruno; W: http://brunocardoso.cc; D: Mips backend; D: Random ARM integrated assembler and assembly parser improvements; D: General X86 AVX1 support. N: Weining Lu; E: luweining@loongson.cn; D: LoongArch backend. N: Duraid Madina; E: duraid@octopus.com.au; W: http://kinoko.c.u-tokyo.ac.jp/~duraid/; D: IA64 backend, BigBlock register allocator. N: John McCall; E: rjmccall@apple.com; D: Clang semantic analysis and IR generation. N: Michael McCracken; E: michael.mccracken@gmail.com; D: Line number support for llvmgcc. N: Fanbo Meng; E: fanbo.meng@ibm.com; D: z/OS support. N: Vladimir Merzliakov; E: wanderer@rsu.ru; D: Test suite fixes for FreeBSD. N: Scott Michel; E: scottm@aero.org; D: Added STI Cell SPU backend. N: Kai Nacke; E: kai@redstar.de; D: Support for implicit TLS model used with MS VC runtime; D: Dumping of Win64 EH structures. N: Takumi Nakamura; I: chapuni; E: geek4civic@gmail.com; E: chapuni@hf.rim.or.jp; D: Maintaining the Git monorepo; W: https://github.com/llvm-project/; S: Ebina, Japan. N: Edward O'Callaghan; E: eocallaghan@auroraux.org; W: http://www.aurorau",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:2423,Energy Efficiency,schedul,scheduler,2423,"ents. N: David Blaikie; E: dblaikie@gmail.com; D: General bug fixing/fit & finish, mostly in Clang. N: Neil Booth; E: neil@daikokuya.co.uk; D: APFloat implementation. N: Alex Bradbury; E: asb@igalia.com; D: RISC-V backend. N: Misha Brukman; E: brukman+llvm@uiuc.edu; W: http://misha.brukman.net; D: Portions of X86 and Sparc JIT compilers, PowerPC backend; D: Incremental bitcode loader. N: Cameron Buschardt; E: buschard@uiuc.edu; D: The `mem2reg' pass - promotes values stored in memory to registers. N: Brendon Cahoon; E: bcahoon@codeaurora.org; D: Loop unrolling with run-time trip counts. N: Chandler Carruth; E: chandlerc@gmail.com; E: chandlerc@google.com; D: Hashing algorithms and interfaces; D: Inline cost analysis; D: Machine block placement pass; D: SROA. N: Casey Carter; E: ccarter@uiuc.edu; D: Fixes to the Reassociation pass, various improvement patches. N: Evan Cheng; E: evan.cheng@apple.com; D: ARM and X86 backends; D: Instruction scheduler improvements; D: Register allocator improvements; D: Loop optimizer improvements; D: Target-independent code generator improvements. N: Dan Villiom Podlaski Christiansen; E: danchr@gmail.com; E: danchr@cs.au.dk; W: http://villiom.dk; D: LLVM Makefile improvements; D: Clang diagnostic & driver tweaks; S: Aarhus, Denmark. N: Jeff Cohen; E: jeffc@jolt-lang.org; W: http://jolt-lang.org; D: Native Win32 API portability layer. N: John T. Criswell; E: criswell@uiuc.edu; D: Original Autoconf support, documentation improvements, bug fixes. N: Anshuman Dasgupta; E: adasgupt@codeaurora.org; D: Deterministic finite automaton based infrastructure for VLIW packetization. N: Stefanus Du Toit; E: stefanus.du.toit@intel.com; D: Bug fixes and minor improvements. N: Rafael Avila de Espindola; E: rafael@espindo.la; D: MC and LLD work. N: Dave Estes; E: cestes@codeaurora.org; D: AArch64 machine description for Cortex-A53. N: Alkis Evlogimenos; E: alkis@evlogimenos.com; D: Linear scan register allocator, many codegen improvements, Java frontend.",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:4750,Energy Efficiency,green,greened,4750,"ttp://www.students.uiuc.edu/~gaeke/; D: Portions of X86 static and JIT compilers; initial SparcV8 backend; D: Dynamic trace optimizer; D: FreeBSD/X86 compatibility fixes, the llvm-nm tool. N: Nicolas Geoffray; E: nicolas.geoffray@lip6.fr; W: http://www-src.lip6.fr/homepages/Nicolas.Geoffray/; D: PPC backend fixes for Linux. N: Louis Gerbarg; E: lgg@apple.com; D: Portions of the PowerPC backend. N: Saem Ghani; E: saemghani@gmail.com; D: Callgraph class cleanups. N: Mikhail Glushenkov; E: foldr@codedgers.com; D: Author of llvmc2. N: Dan Gohman; E: llvm@sunfishcode.online; D: Miscellaneous bug fixes; D: WebAssembly Backend. N: Renato Golin; E: rengolin@systemcall.eu; E: rengolin@gmail.com; D: ARM/AArch64 back-end improvements; D: Loop Vectorizer improvements; D: Regression and Test Suite improvements; D: Linux compatibility (GNU, musl, etc); D: Initial Linux kernel / Android support effort; I: rengolin. N: David Goodwin; E: david@goodwinz.net; D: Thumb-2 code generator. N: David Greene; E: greened@obbligato.org; D: Miscellaneous bug fixes; D: Register allocation refactoring. N: Gabor Greif; E: ggreif@gmail.com; D: Improvements for space efficiency. N: James Grosbach; E: grosbach@apple.com; I: grosbach; D: SjLj exception handling support; D: General fixes and improvements for the ARM back-end; D: MCJIT; D: ARM integrated assembler and assembly parser; D: Led effort for the backend formerly known as ARM64. N: Lang Hames; E: lhames@gmail.com; D: PBQP-based register allocator. N: Gordon Henriksen; E: gordonhenriksen@mac.com; D: Pluggable GC support; D: C interface; D: Ocaml bindings. N: Raul Fernandes Herbster; E: raul@dsc.ufcg.edu.br; D: JIT support for ARM. N: Paolo Invernizzi; E: arathorn@fastwebnet.it; D: Visual C++ compatibility fixes. N: Patrick Jenkins; E: patjenk@wam.umd.edu; D: Nightly Tester. N: Tony(Yanjun) Jiang; E: jtony@ca.ibm.com; D: PowerPC Backend Developer; D: Improvements to the PPC backend and miscellaneous bug fixes. N: Dale Johannesen; E: dalej@apple.c",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:7157,Energy Efficiency,schedul,scheduling,7157,"tion multiversioning, regcall/vectorcall.; I: ErichKeane. N: Eric Kidd; W: http://randomhacks.net/; D: llvm-config script. N: Anton Korobeynikov; E: anton at korobeynikov dot info; D: Mingw32 fixes, cross-compiling support, stdcall/fastcall calling conv.; D: x86/linux PIC codegen, aliases, regparm/visibility attributes; D: Switch lowering refactoring. N: Sumant Kowshik; E: kowshik@uiuc.edu; D: Author of the original C backend. N: Benjamin Kramer; E: benny.kra@gmail.com; D: Miscellaneous bug fixes. N: Michael Kuperstein; E: mkuper@google.com; D: Loop Vectorizer. N: Sundeep Kushwaha; E: sundeepk@codeaurora.org; D: Implemented DFA-based target independent VLIW packetizer. N: Christopher Lamb; E: christopher.lamb@gmail.com; D: aligned load/store support, parts of noalias and restrict support; D: vreg subreg infrastructure, X86 codegen improvements based on subregs; D: address spaces. N: Jim Laskey; E: jlaskey@apple.com; D: Improvements to the PPC backend, instruction scheduling; D: Debug and Dwarf implementation; D: Auto upgrade mangler; D: llvm-gcc4 svn wrangler. N: Chris Lattner; E: sabre@nondot.org; W: http://nondot.org/~sabre/; D: Primary architect of LLVM. N: Tanya Lattner (Tanya Brethour); E: tonic@nondot.org; W: http://nondot.org/~tonic/; D: The initial llvm-ar tool, converted regression testsuite to dejagnu; D: Modulo scheduling in the SparcV9 backend; D: Release manager (1.7+). N: Sylvestre Ledru; E: sylvestre@debian.org; W: http://sylvestre.ledru.info/; W: https://apt.llvm.org/; D: Debian and Ubuntu packaging; D: Continuous integration with jenkins. N: Andrew Lenharth; E: alenhar2@cs.uiuc.edu; W: http://www.lenharth.org/~andrewl/; D: Alpha backend; D: Sampling based profiling. N: Nick Lewycky; E: nicholas@mxc.ca; D: PredicateSimplifier pass. N: Tony Linthicum, et. al.; E: tlinth@codeaurora.org; D: Backend for Qualcomm's Hexagon VLIW processor. N: Bruno Cardoso Lopes; E: bruno.cardoso@gmail.com; I: bruno; W: http://brunocardoso.cc; D: Mips backend; D: Random ARM",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:7523,Energy Efficiency,schedul,scheduling,7523,"Switch lowering refactoring. N: Sumant Kowshik; E: kowshik@uiuc.edu; D: Author of the original C backend. N: Benjamin Kramer; E: benny.kra@gmail.com; D: Miscellaneous bug fixes. N: Michael Kuperstein; E: mkuper@google.com; D: Loop Vectorizer. N: Sundeep Kushwaha; E: sundeepk@codeaurora.org; D: Implemented DFA-based target independent VLIW packetizer. N: Christopher Lamb; E: christopher.lamb@gmail.com; D: aligned load/store support, parts of noalias and restrict support; D: vreg subreg infrastructure, X86 codegen improvements based on subregs; D: address spaces. N: Jim Laskey; E: jlaskey@apple.com; D: Improvements to the PPC backend, instruction scheduling; D: Debug and Dwarf implementation; D: Auto upgrade mangler; D: llvm-gcc4 svn wrangler. N: Chris Lattner; E: sabre@nondot.org; W: http://nondot.org/~sabre/; D: Primary architect of LLVM. N: Tanya Lattner (Tanya Brethour); E: tonic@nondot.org; W: http://nondot.org/~tonic/; D: The initial llvm-ar tool, converted regression testsuite to dejagnu; D: Modulo scheduling in the SparcV9 backend; D: Release manager (1.7+). N: Sylvestre Ledru; E: sylvestre@debian.org; W: http://sylvestre.ledru.info/; W: https://apt.llvm.org/; D: Debian and Ubuntu packaging; D: Continuous integration with jenkins. N: Andrew Lenharth; E: alenhar2@cs.uiuc.edu; W: http://www.lenharth.org/~andrewl/; D: Alpha backend; D: Sampling based profiling. N: Nick Lewycky; E: nicholas@mxc.ca; D: PredicateSimplifier pass. N: Tony Linthicum, et. al.; E: tlinth@codeaurora.org; D: Backend for Qualcomm's Hexagon VLIW processor. N: Bruno Cardoso Lopes; E: bruno.cardoso@gmail.com; I: bruno; W: http://brunocardoso.cc; D: Mips backend; D: Random ARM integrated assembler and assembly parser improvements; D: General X86 AVX1 support. N: Weining Lu; E: luweining@loongson.cn; D: LoongArch backend. N: Duraid Madina; E: duraid@octopus.com.au; W: http://kinoko.c.u-tokyo.ac.jp/~duraid/; D: IA64 backend, BigBlock register allocator. N: John McCall; E: rjmccall@apple.com; D: C",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:2161,Integrability,interface,interfaces,2161,"pendent code generator and analysis improvements. N: Daniel Berlin; E: dberlin@dberlin.org; D: ET-Forest implementation.; D: Sparse bitmap. N: Geoff Berry; E: gberry@codeaurora.org; E: gcb@acm.org; D: AArch64 backend improvements; D: Added EarlyCSE MemorySSA support; D: CodeGen improvements. N: David Blaikie; E: dblaikie@gmail.com; D: General bug fixing/fit & finish, mostly in Clang. N: Neil Booth; E: neil@daikokuya.co.uk; D: APFloat implementation. N: Alex Bradbury; E: asb@igalia.com; D: RISC-V backend. N: Misha Brukman; E: brukman+llvm@uiuc.edu; W: http://misha.brukman.net; D: Portions of X86 and Sparc JIT compilers, PowerPC backend; D: Incremental bitcode loader. N: Cameron Buschardt; E: buschard@uiuc.edu; D: The `mem2reg' pass - promotes values stored in memory to registers. N: Brendon Cahoon; E: bcahoon@codeaurora.org; D: Loop unrolling with run-time trip counts. N: Chandler Carruth; E: chandlerc@gmail.com; E: chandlerc@google.com; D: Hashing algorithms and interfaces; D: Inline cost analysis; D: Machine block placement pass; D: SROA. N: Casey Carter; E: ccarter@uiuc.edu; D: Fixes to the Reassociation pass, various improvement patches. N: Evan Cheng; E: evan.cheng@apple.com; D: ARM and X86 backends; D: Instruction scheduler improvements; D: Register allocator improvements; D: Loop optimizer improvements; D: Target-independent code generator improvements. N: Dan Villiom Podlaski Christiansen; E: danchr@gmail.com; E: danchr@cs.au.dk; W: http://villiom.dk; D: LLVM Makefile improvements; D: Clang diagnostic & driver tweaks; S: Aarhus, Denmark. N: Jeff Cohen; E: jeffc@jolt-lang.org; W: http://jolt-lang.org; D: Native Win32 API portability layer. N: John T. Criswell; E: criswell@uiuc.edu; D: Original Autoconf support, documentation improvements, bug fixes. N: Anshuman Dasgupta; E: adasgupt@codeaurora.org; D: Deterministic finite automaton based infrastructure for VLIW packetization. N: Stefanus Du Toit; E: stefanus.du.toit@intel.com; D: Bug fixes and minor improvement",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:5076,Integrability,integrat,integrated,5076,"es for Linux. N: Louis Gerbarg; E: lgg@apple.com; D: Portions of the PowerPC backend. N: Saem Ghani; E: saemghani@gmail.com; D: Callgraph class cleanups. N: Mikhail Glushenkov; E: foldr@codedgers.com; D: Author of llvmc2. N: Dan Gohman; E: llvm@sunfishcode.online; D: Miscellaneous bug fixes; D: WebAssembly Backend. N: Renato Golin; E: rengolin@systemcall.eu; E: rengolin@gmail.com; D: ARM/AArch64 back-end improvements; D: Loop Vectorizer improvements; D: Regression and Test Suite improvements; D: Linux compatibility (GNU, musl, etc); D: Initial Linux kernel / Android support effort; I: rengolin. N: David Goodwin; E: david@goodwinz.net; D: Thumb-2 code generator. N: David Greene; E: greened@obbligato.org; D: Miscellaneous bug fixes; D: Register allocation refactoring. N: Gabor Greif; E: ggreif@gmail.com; D: Improvements for space efficiency. N: James Grosbach; E: grosbach@apple.com; I: grosbach; D: SjLj exception handling support; D: General fixes and improvements for the ARM back-end; D: MCJIT; D: ARM integrated assembler and assembly parser; D: Led effort for the backend formerly known as ARM64. N: Lang Hames; E: lhames@gmail.com; D: PBQP-based register allocator. N: Gordon Henriksen; E: gordonhenriksen@mac.com; D: Pluggable GC support; D: C interface; D: Ocaml bindings. N: Raul Fernandes Herbster; E: raul@dsc.ufcg.edu.br; D: JIT support for ARM. N: Paolo Invernizzi; E: arathorn@fastwebnet.it; D: Visual C++ compatibility fixes. N: Patrick Jenkins; E: patjenk@wam.umd.edu; D: Nightly Tester. N: Tony(Yanjun) Jiang; E: jtony@ca.ibm.com; D: PowerPC Backend Developer; D: Improvements to the PPC backend and miscellaneous bug fixes. N: Dale Johannesen; E: dalej@apple.com; D: ARM constant islands improvements; D: Tail merging improvements; D: Rewrite X87 back end; D: Use APFloat for floating point constants widely throughout compiler; D: Implement X87 long double. N: Brad Jones; E: kungfoomaster@nondot.org; D: Support for packed types. N: Rod Kay; E: rkay@auroraux.org; D: Aut",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:5322,Integrability,interface,interface,5322,"line; D: Miscellaneous bug fixes; D: WebAssembly Backend. N: Renato Golin; E: rengolin@systemcall.eu; E: rengolin@gmail.com; D: ARM/AArch64 back-end improvements; D: Loop Vectorizer improvements; D: Regression and Test Suite improvements; D: Linux compatibility (GNU, musl, etc); D: Initial Linux kernel / Android support effort; I: rengolin. N: David Goodwin; E: david@goodwinz.net; D: Thumb-2 code generator. N: David Greene; E: greened@obbligato.org; D: Miscellaneous bug fixes; D: Register allocation refactoring. N: Gabor Greif; E: ggreif@gmail.com; D: Improvements for space efficiency. N: James Grosbach; E: grosbach@apple.com; I: grosbach; D: SjLj exception handling support; D: General fixes and improvements for the ARM back-end; D: MCJIT; D: ARM integrated assembler and assembly parser; D: Led effort for the backend formerly known as ARM64. N: Lang Hames; E: lhames@gmail.com; D: PBQP-based register allocator. N: Gordon Henriksen; E: gordonhenriksen@mac.com; D: Pluggable GC support; D: C interface; D: Ocaml bindings. N: Raul Fernandes Herbster; E: raul@dsc.ufcg.edu.br; D: JIT support for ARM. N: Paolo Invernizzi; E: arathorn@fastwebnet.it; D: Visual C++ compatibility fixes. N: Patrick Jenkins; E: patjenk@wam.umd.edu; D: Nightly Tester. N: Tony(Yanjun) Jiang; E: jtony@ca.ibm.com; D: PowerPC Backend Developer; D: Improvements to the PPC backend and miscellaneous bug fixes. N: Dale Johannesen; E: dalej@apple.com; D: ARM constant islands improvements; D: Tail merging improvements; D: Rewrite X87 back end; D: Use APFloat for floating point constants widely throughout compiler; D: Implement X87 long double. N: Brad Jones; E: kungfoomaster@nondot.org; D: Support for packed types. N: Rod Kay; E: rkay@auroraux.org; D: Author of LLVM Ada bindings. N: Erich Keane; E: erich.keane@intel.com; D: A variety of Clang contributions including function multiversioning, regcall/vectorcall.; I: ErichKeane. N: Eric Kidd; W: http://randomhacks.net/; D: llvm-config script. N: Anton Korobeyn",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:7735,Integrability,integrat,integration,7735,".com; D: Loop Vectorizer. N: Sundeep Kushwaha; E: sundeepk@codeaurora.org; D: Implemented DFA-based target independent VLIW packetizer. N: Christopher Lamb; E: christopher.lamb@gmail.com; D: aligned load/store support, parts of noalias and restrict support; D: vreg subreg infrastructure, X86 codegen improvements based on subregs; D: address spaces. N: Jim Laskey; E: jlaskey@apple.com; D: Improvements to the PPC backend, instruction scheduling; D: Debug and Dwarf implementation; D: Auto upgrade mangler; D: llvm-gcc4 svn wrangler. N: Chris Lattner; E: sabre@nondot.org; W: http://nondot.org/~sabre/; D: Primary architect of LLVM. N: Tanya Lattner (Tanya Brethour); E: tonic@nondot.org; W: http://nondot.org/~tonic/; D: The initial llvm-ar tool, converted regression testsuite to dejagnu; D: Modulo scheduling in the SparcV9 backend; D: Release manager (1.7+). N: Sylvestre Ledru; E: sylvestre@debian.org; W: http://sylvestre.ledru.info/; W: https://apt.llvm.org/; D: Debian and Ubuntu packaging; D: Continuous integration with jenkins. N: Andrew Lenharth; E: alenhar2@cs.uiuc.edu; W: http://www.lenharth.org/~andrewl/; D: Alpha backend; D: Sampling based profiling. N: Nick Lewycky; E: nicholas@mxc.ca; D: PredicateSimplifier pass. N: Tony Linthicum, et. al.; E: tlinth@codeaurora.org; D: Backend for Qualcomm's Hexagon VLIW processor. N: Bruno Cardoso Lopes; E: bruno.cardoso@gmail.com; I: bruno; W: http://brunocardoso.cc; D: Mips backend; D: Random ARM integrated assembler and assembly parser improvements; D: General X86 AVX1 support. N: Weining Lu; E: luweining@loongson.cn; D: LoongArch backend. N: Duraid Madina; E: duraid@octopus.com.au; W: http://kinoko.c.u-tokyo.ac.jp/~duraid/; D: IA64 backend, BigBlock register allocator. N: John McCall; E: rjmccall@apple.com; D: Clang semantic analysis and IR generation. N: Michael McCracken; E: michael.mccracken@gmail.com; D: Line number support for llvmgcc. N: Fanbo Meng; E: fanbo.meng@ibm.com; D: z/OS support. N: Vladimir Merzliakov; E: wand",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:8181,Integrability,integrat,integrated,8181,": Auto upgrade mangler; D: llvm-gcc4 svn wrangler. N: Chris Lattner; E: sabre@nondot.org; W: http://nondot.org/~sabre/; D: Primary architect of LLVM. N: Tanya Lattner (Tanya Brethour); E: tonic@nondot.org; W: http://nondot.org/~tonic/; D: The initial llvm-ar tool, converted regression testsuite to dejagnu; D: Modulo scheduling in the SparcV9 backend; D: Release manager (1.7+). N: Sylvestre Ledru; E: sylvestre@debian.org; W: http://sylvestre.ledru.info/; W: https://apt.llvm.org/; D: Debian and Ubuntu packaging; D: Continuous integration with jenkins. N: Andrew Lenharth; E: alenhar2@cs.uiuc.edu; W: http://www.lenharth.org/~andrewl/; D: Alpha backend; D: Sampling based profiling. N: Nick Lewycky; E: nicholas@mxc.ca; D: PredicateSimplifier pass. N: Tony Linthicum, et. al.; E: tlinth@codeaurora.org; D: Backend for Qualcomm's Hexagon VLIW processor. N: Bruno Cardoso Lopes; E: bruno.cardoso@gmail.com; I: bruno; W: http://brunocardoso.cc; D: Mips backend; D: Random ARM integrated assembler and assembly parser improvements; D: General X86 AVX1 support. N: Weining Lu; E: luweining@loongson.cn; D: LoongArch backend. N: Duraid Madina; E: duraid@octopus.com.au; W: http://kinoko.c.u-tokyo.ac.jp/~duraid/; D: IA64 backend, BigBlock register allocator. N: John McCall; E: rjmccall@apple.com; D: Clang semantic analysis and IR generation. N: Michael McCracken; E: michael.mccracken@gmail.com; D: Line number support for llvmgcc. N: Fanbo Meng; E: fanbo.meng@ibm.com; D: z/OS support. N: Vladimir Merzliakov; E: wanderer@rsu.ru; D: Test suite fixes for FreeBSD. N: Scott Michel; E: scottm@aero.org; D: Added STI Cell SPU backend. N: Kai Nacke; E: kai@redstar.de; D: Support for implicit TLS model used with MS VC runtime; D: Dumping of Win64 EH structures. N: Takumi Nakamura; I: chapuni; E: geek4civic@gmail.com; E: chapuni@hf.rim.or.jp; D: Maintaining the Git monorepo; W: https://github.com/llvm-project/; S: Ebina, Japan. N: Edward O'Callaghan; E: eocallaghan@auroraux.org; W: http://www.aurorau",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:10780,Integrability,depend,dependency,10780,"zation in clang. N: Devang Patel; E: dpatel@apple.com; D: LTO tool, PassManager rewrite, Loop Pass Manager, Loop Rotate; D: GCC PCH Integration (llvm-gcc), llvm-gcc improvements; D: Optimizer improvements, Loop Index Split. N: Ana Pazos; E: apazos@codeaurora.org; D: Fixes and improvements to the AArch64 backend. N: Wesley Peck; E: peckw@wesleypeck.com; W: http://wesleypeck.com/; D: MicroBlaze backend. N: Francois Pichet; E: pichet2000@gmail.com; D: MSVC support. N: Simon Pilgrim; E: llvm-dev@redking.me.uk; D: X86 backend, Selection DAG, Scheduler Models and Cost Tables. N: Adrian Prantl; E: aprantl@apple.com; D: Debug Information. N: Vladimir Prus; W: http://vladimir_prus.blogspot.com; E: ghost@cs.msu.su; D: Made inst_iterator behave like a proper iterator, LowerConstantExprs pass. N: QIU Chaofan; E: qiucofan@cn.ibm.com; D: PowerPC Backend Developer. N: Kalle Raiskila; E: kalle.rasikila@nokia.com; D: Some bugfixes to CellSPU. N: Xerxes Ranby; E: xerxes@zafena.se; D: Cmake dependency chain and various bug fixes. N: Alex Rosenberg; E: alexr@leftfield.org; I: arosenberg; D: ARM calling conventions rewrite, hard float support. N: Chad Rosier; E: mcrosier@codeaurora.org; I: mcrosier; D: AArch64 fast instruction selection pass; D: Fixes and improvements to the ARM fast-isel pass; D: Fixes and improvements to the AArch64 backend. N: Nadav Rotem; E: nadav.rotem@me.com; D: X86 code generation improvements, Loop Vectorizer, SLP Vectorizer. N: Roman Samoilov; E: roman@codedgers.com; D: MSIL backend. N: Duncan Sands; E: baldrick@free.fr; I: baldrick; D: Ada support in llvm-gcc; D: Dragonegg plugin; D: Exception handling improvements; D: Type legalizer rewrite. N: Ruchira Sasanka; E: sasanka@uiuc.edu; D: Graph coloring register allocator for the Sparc64 backend. N: Alina Sbirlea; E: alina.sbirlea@gmail.com; D: MemorySSA, BatchAA, misc loop and new pass manager work. N: Arnold Schwaighofer; E: arnold.schwaighofer@gmail.com; D: Tail call optimization for the x86 backend. N: Shanto",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:735,Modifiability,refactor,refactoring,735,"This file is a partial list of people who have contributed to the LLVM; project. If you have contributed a patch or made some other contribution to; LLVM, please submit a patch to this file to add yourself, and it will be; done!. The list is sorted by surname and formatted to allow easy grepping and; beautification by scripts. The fields are: name (N), email (E), web-address; (W), PGP key ID and fingerprint (P), description (D), snail-mail address; (S), and (I) IRC handle. N: Vikram Adve; E: vadve@cs.uiuc.edu; W: http://www.cs.uiuc.edu/~vadve/; D: The Sparc64 backend, provider of much wisdom, and motivator for LLVM. N: Owen Anderson; E: resistor@mac.com; D: LCSSA pass and related LoopUnswitch work; D: GVNPRE pass, DataLayout refactoring, random improvements. N: Henrik Bach; D: MingW Win32 API portability layer. N: Aaron Ballman; E: aaron@aaronballman.com; D: Clang frontend, frontend attributes, Windows support, general bug fixing; I: AaronBallman. N: Alexey Bataev; E: a.bataev@outlook.com; D: Clang frontend, OpenMP in clang, SLP vectorizer, Loop vectorizer, InstCombine; I: ABataev. N: Nate Begeman; E: natebegeman@mac.com; D: PowerPC backend developer; D: Target-independent code generator and analysis improvements. N: Daniel Berlin; E: dberlin@dberlin.org; D: ET-Forest implementation.; D: Sparse bitmap. N: Geoff Berry; E: gberry@codeaurora.org; E: gcb@acm.org; D: AArch64 backend improvements; D: Added EarlyCSE MemorySSA support; D: CodeGen improvements. N: David Blaikie; E: dblaikie@gmail.com; D: General bug fixing/fit & finish, mostly in Clang. N: Neil Booth; E: neil@daikokuya.co.uk; D: APFloat implementation. N: Alex Bradbury; E: asb@igalia.com; D: RISC-V backend. N: Misha Brukman; E: brukman+llvm@uiuc.edu; W: http://misha.brukman.net; D: Portions of X86 and Sparc JIT compilers, PowerPC backend; D: Incremental bitcode loader. N: Cameron Buschardt; E: buschard@uiuc.edu; D: The `mem2reg' pass - promotes values stored in memory to registers. N: Brendon Cahoon; E: bcaho",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:804,Modifiability,portab,portability,804,"This file is a partial list of people who have contributed to the LLVM; project. If you have contributed a patch or made some other contribution to; LLVM, please submit a patch to this file to add yourself, and it will be; done!. The list is sorted by surname and formatted to allow easy grepping and; beautification by scripts. The fields are: name (N), email (E), web-address; (W), PGP key ID and fingerprint (P), description (D), snail-mail address; (S), and (I) IRC handle. N: Vikram Adve; E: vadve@cs.uiuc.edu; W: http://www.cs.uiuc.edu/~vadve/; D: The Sparc64 backend, provider of much wisdom, and motivator for LLVM. N: Owen Anderson; E: resistor@mac.com; D: LCSSA pass and related LoopUnswitch work; D: GVNPRE pass, DataLayout refactoring, random improvements. N: Henrik Bach; D: MingW Win32 API portability layer. N: Aaron Ballman; E: aaron@aaronballman.com; D: Clang frontend, frontend attributes, Windows support, general bug fixing; I: AaronBallman. N: Alexey Bataev; E: a.bataev@outlook.com; D: Clang frontend, OpenMP in clang, SLP vectorizer, Loop vectorizer, InstCombine; I: ABataev. N: Nate Begeman; E: natebegeman@mac.com; D: PowerPC backend developer; D: Target-independent code generator and analysis improvements. N: Daniel Berlin; E: dberlin@dberlin.org; D: ET-Forest implementation.; D: Sparse bitmap. N: Geoff Berry; E: gberry@codeaurora.org; E: gcb@acm.org; D: AArch64 backend improvements; D: Added EarlyCSE MemorySSA support; D: CodeGen improvements. N: David Blaikie; E: dblaikie@gmail.com; D: General bug fixing/fit & finish, mostly in Clang. N: Neil Booth; E: neil@daikokuya.co.uk; D: APFloat implementation. N: Alex Bradbury; E: asb@igalia.com; D: RISC-V backend. N: Misha Brukman; E: brukman+llvm@uiuc.edu; W: http://misha.brukman.net; D: Portions of X86 and Sparc JIT compilers, PowerPC backend; D: Incremental bitcode loader. N: Cameron Buschardt; E: buschard@uiuc.edu; D: The `mem2reg' pass - promotes values stored in memory to registers. N: Brendon Cahoon; E: bcaho",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:2839,Modifiability,portab,portability,2839,"emental bitcode loader. N: Cameron Buschardt; E: buschard@uiuc.edu; D: The `mem2reg' pass - promotes values stored in memory to registers. N: Brendon Cahoon; E: bcahoon@codeaurora.org; D: Loop unrolling with run-time trip counts. N: Chandler Carruth; E: chandlerc@gmail.com; E: chandlerc@google.com; D: Hashing algorithms and interfaces; D: Inline cost analysis; D: Machine block placement pass; D: SROA. N: Casey Carter; E: ccarter@uiuc.edu; D: Fixes to the Reassociation pass, various improvement patches. N: Evan Cheng; E: evan.cheng@apple.com; D: ARM and X86 backends; D: Instruction scheduler improvements; D: Register allocator improvements; D: Loop optimizer improvements; D: Target-independent code generator improvements. N: Dan Villiom Podlaski Christiansen; E: danchr@gmail.com; E: danchr@cs.au.dk; W: http://villiom.dk; D: LLVM Makefile improvements; D: Clang diagnostic & driver tweaks; S: Aarhus, Denmark. N: Jeff Cohen; E: jeffc@jolt-lang.org; W: http://jolt-lang.org; D: Native Win32 API portability layer. N: John T. Criswell; E: criswell@uiuc.edu; D: Original Autoconf support, documentation improvements, bug fixes. N: Anshuman Dasgupta; E: adasgupt@codeaurora.org; D: Deterministic finite automaton based infrastructure for VLIW packetization. N: Stefanus Du Toit; E: stefanus.du.toit@intel.com; D: Bug fixes and minor improvements. N: Rafael Avila de Espindola; E: rafael@espindo.la; D: MC and LLD work. N: Dave Estes; E: cestes@codeaurora.org; D: AArch64 machine description for Cortex-A53. N: Alkis Evlogimenos; E: alkis@evlogimenos.com; D: Linear scan register allocator, many codegen improvements, Java frontend. N: Hal Finkel; E: hfinkel@anl.gov; D: Basic-block autovectorization, PowerPC backend improvements. N: Eric Fiselier; E: eric@efcs.ca; D: LIT patches and documentation. N: Ryan Flynn; E: pizza@parseerror.com; D: Miscellaneous bug fixes. N: Brian Gaeke; E: gaeke@uiuc.edu; W: http://www.students.uiuc.edu/~gaeke/; D: Portions of X86 static and JIT compilers; initia",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:4824,Modifiability,refactor,refactoring,4824,"6 static and JIT compilers; initial SparcV8 backend; D: Dynamic trace optimizer; D: FreeBSD/X86 compatibility fixes, the llvm-nm tool. N: Nicolas Geoffray; E: nicolas.geoffray@lip6.fr; W: http://www-src.lip6.fr/homepages/Nicolas.Geoffray/; D: PPC backend fixes for Linux. N: Louis Gerbarg; E: lgg@apple.com; D: Portions of the PowerPC backend. N: Saem Ghani; E: saemghani@gmail.com; D: Callgraph class cleanups. N: Mikhail Glushenkov; E: foldr@codedgers.com; D: Author of llvmc2. N: Dan Gohman; E: llvm@sunfishcode.online; D: Miscellaneous bug fixes; D: WebAssembly Backend. N: Renato Golin; E: rengolin@systemcall.eu; E: rengolin@gmail.com; D: ARM/AArch64 back-end improvements; D: Loop Vectorizer improvements; D: Regression and Test Suite improvements; D: Linux compatibility (GNU, musl, etc); D: Initial Linux kernel / Android support effort; I: rengolin. N: David Goodwin; E: david@goodwinz.net; D: Thumb-2 code generator. N: David Greene; E: greened@obbligato.org; D: Miscellaneous bug fixes; D: Register allocation refactoring. N: Gabor Greif; E: ggreif@gmail.com; D: Improvements for space efficiency. N: James Grosbach; E: grosbach@apple.com; I: grosbach; D: SjLj exception handling support; D: General fixes and improvements for the ARM back-end; D: MCJIT; D: ARM integrated assembler and assembly parser; D: Led effort for the backend formerly known as ARM64. N: Lang Hames; E: lhames@gmail.com; D: PBQP-based register allocator. N: Gordon Henriksen; E: gordonhenriksen@mac.com; D: Pluggable GC support; D: C interface; D: Ocaml bindings. N: Raul Fernandes Herbster; E: raul@dsc.ufcg.edu.br; D: JIT support for ARM. N: Paolo Invernizzi; E: arathorn@fastwebnet.it; D: Visual C++ compatibility fixes. N: Patrick Jenkins; E: patjenk@wam.umd.edu; D: Nightly Tester. N: Tony(Yanjun) Jiang; E: jtony@ca.ibm.com; D: PowerPC Backend Developer; D: Improvements to the PPC backend and miscellaneous bug fixes. N: Dale Johannesen; E: dalej@apple.com; D: ARM constant islands improvements; D: Tail mer",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:6287,Modifiability,config,config,6287,"com; D: Pluggable GC support; D: C interface; D: Ocaml bindings. N: Raul Fernandes Herbster; E: raul@dsc.ufcg.edu.br; D: JIT support for ARM. N: Paolo Invernizzi; E: arathorn@fastwebnet.it; D: Visual C++ compatibility fixes. N: Patrick Jenkins; E: patjenk@wam.umd.edu; D: Nightly Tester. N: Tony(Yanjun) Jiang; E: jtony@ca.ibm.com; D: PowerPC Backend Developer; D: Improvements to the PPC backend and miscellaneous bug fixes. N: Dale Johannesen; E: dalej@apple.com; D: ARM constant islands improvements; D: Tail merging improvements; D: Rewrite X87 back end; D: Use APFloat for floating point constants widely throughout compiler; D: Implement X87 long double. N: Brad Jones; E: kungfoomaster@nondot.org; D: Support for packed types. N: Rod Kay; E: rkay@auroraux.org; D: Author of LLVM Ada bindings. N: Erich Keane; E: erich.keane@intel.com; D: A variety of Clang contributions including function multiversioning, regcall/vectorcall.; I: ErichKeane. N: Eric Kidd; W: http://randomhacks.net/; D: llvm-config script. N: Anton Korobeynikov; E: anton at korobeynikov dot info; D: Mingw32 fixes, cross-compiling support, stdcall/fastcall calling conv.; D: x86/linux PIC codegen, aliases, regparm/visibility attributes; D: Switch lowering refactoring. N: Sumant Kowshik; E: kowshik@uiuc.edu; D: Author of the original C backend. N: Benjamin Kramer; E: benny.kra@gmail.com; D: Miscellaneous bug fixes. N: Michael Kuperstein; E: mkuper@google.com; D: Loop Vectorizer. N: Sundeep Kushwaha; E: sundeepk@codeaurora.org; D: Implemented DFA-based target independent VLIW packetizer. N: Christopher Lamb; E: christopher.lamb@gmail.com; D: aligned load/store support, parts of noalias and restrict support; D: vreg subreg infrastructure, X86 codegen improvements based on subregs; D: address spaces. N: Jim Laskey; E: jlaskey@apple.com; D: Improvements to the PPC backend, instruction scheduling; D: Debug and Dwarf implementation; D: Auto upgrade mangler; D: llvm-gcc4 svn wrangler. N: Chris Lattner; E: sabre@nond",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:6520,Modifiability,refactor,refactoring,6520,"sual C++ compatibility fixes. N: Patrick Jenkins; E: patjenk@wam.umd.edu; D: Nightly Tester. N: Tony(Yanjun) Jiang; E: jtony@ca.ibm.com; D: PowerPC Backend Developer; D: Improvements to the PPC backend and miscellaneous bug fixes. N: Dale Johannesen; E: dalej@apple.com; D: ARM constant islands improvements; D: Tail merging improvements; D: Rewrite X87 back end; D: Use APFloat for floating point constants widely throughout compiler; D: Implement X87 long double. N: Brad Jones; E: kungfoomaster@nondot.org; D: Support for packed types. N: Rod Kay; E: rkay@auroraux.org; D: Author of LLVM Ada bindings. N: Erich Keane; E: erich.keane@intel.com; D: A variety of Clang contributions including function multiversioning, regcall/vectorcall.; I: ErichKeane. N: Eric Kidd; W: http://randomhacks.net/; D: llvm-config script. N: Anton Korobeynikov; E: anton at korobeynikov dot info; D: Mingw32 fixes, cross-compiling support, stdcall/fastcall calling conv.; D: x86/linux PIC codegen, aliases, regparm/visibility attributes; D: Switch lowering refactoring. N: Sumant Kowshik; E: kowshik@uiuc.edu; D: Author of the original C backend. N: Benjamin Kramer; E: benny.kra@gmail.com; D: Miscellaneous bug fixes. N: Michael Kuperstein; E: mkuper@google.com; D: Loop Vectorizer. N: Sundeep Kushwaha; E: sundeepk@codeaurora.org; D: Implemented DFA-based target independent VLIW packetizer. N: Christopher Lamb; E: christopher.lamb@gmail.com; D: aligned load/store support, parts of noalias and restrict support; D: vreg subreg infrastructure, X86 codegen improvements based on subregs; D: address spaces. N: Jim Laskey; E: jlaskey@apple.com; D: Improvements to the PPC backend, instruction scheduling; D: Debug and Dwarf implementation; D: Auto upgrade mangler; D: llvm-gcc4 svn wrangler. N: Chris Lattner; E: sabre@nondot.org; W: http://nondot.org/~sabre/; D: Primary architect of LLVM. N: Tanya Lattner (Tanya Brethour); E: tonic@nondot.org; W: http://nondot.org/~tonic/; D: The initial llvm-ar tool, converted reg",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:9873,Modifiability,rewrite,rewrite,9873,": Dumping of Win64 EH structures. N: Takumi Nakamura; I: chapuni; E: geek4civic@gmail.com; E: chapuni@hf.rim.or.jp; D: Maintaining the Git monorepo; W: https://github.com/llvm-project/; S: Ebina, Japan. N: Edward O'Callaghan; E: eocallaghan@auroraux.org; W: http://www.auroraux.org; D: Add Clang support with various other improvements to utils/NewNightlyTest.pl; D: Fix and maintain Solaris & AuroraUX support for llvm, various build warnings; D: and error clean ups. N: Morten Ofstad; E: morten@hue.no; D: Visual C++ compatibility fixes. N: Jakob Stoklund Olesen; E: stoklund@2pi.dk; D: Machine code verifier; D: Blackfin backend; D: Fast register allocator; D: Greedy register allocator. N: Richard Osborne; E: richard@xmos.com; D: XCore backend. N: Piotr Padlewski; E: piotr.padlewski@gmail.com; D: !invariant.group metadata and other intrinsics for devirtualization in clang. N: Devang Patel; E: dpatel@apple.com; D: LTO tool, PassManager rewrite, Loop Pass Manager, Loop Rotate; D: GCC PCH Integration (llvm-gcc), llvm-gcc improvements; D: Optimizer improvements, Loop Index Split. N: Ana Pazos; E: apazos@codeaurora.org; D: Fixes and improvements to the AArch64 backend. N: Wesley Peck; E: peckw@wesleypeck.com; W: http://wesleypeck.com/; D: MicroBlaze backend. N: Francois Pichet; E: pichet2000@gmail.com; D: MSVC support. N: Simon Pilgrim; E: llvm-dev@redking.me.uk; D: X86 backend, Selection DAG, Scheduler Models and Cost Tables. N: Adrian Prantl; E: aprantl@apple.com; D: Debug Information. N: Vladimir Prus; W: http://vladimir_prus.blogspot.com; E: ghost@cs.msu.su; D: Made inst_iterator behave like a proper iterator, LowerConstantExprs pass. N: QIU Chaofan; E: qiucofan@cn.ibm.com; D: PowerPC Backend Developer. N: Kalle Raiskila; E: kalle.rasikila@nokia.com; D: Some bugfixes to CellSPU. N: Xerxes Ranby; E: xerxes@zafena.se; D: Cmake dependency chain and various bug fixes. N: Alex Rosenberg; E: alexr@leftfield.org; I: arosenberg; D: ARM calling conventions rewrite, hard float suppo",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:10905,Modifiability,rewrite,rewrite,10905,"ager, Loop Rotate; D: GCC PCH Integration (llvm-gcc), llvm-gcc improvements; D: Optimizer improvements, Loop Index Split. N: Ana Pazos; E: apazos@codeaurora.org; D: Fixes and improvements to the AArch64 backend. N: Wesley Peck; E: peckw@wesleypeck.com; W: http://wesleypeck.com/; D: MicroBlaze backend. N: Francois Pichet; E: pichet2000@gmail.com; D: MSVC support. N: Simon Pilgrim; E: llvm-dev@redking.me.uk; D: X86 backend, Selection DAG, Scheduler Models and Cost Tables. N: Adrian Prantl; E: aprantl@apple.com; D: Debug Information. N: Vladimir Prus; W: http://vladimir_prus.blogspot.com; E: ghost@cs.msu.su; D: Made inst_iterator behave like a proper iterator, LowerConstantExprs pass. N: QIU Chaofan; E: qiucofan@cn.ibm.com; D: PowerPC Backend Developer. N: Kalle Raiskila; E: kalle.rasikila@nokia.com; D: Some bugfixes to CellSPU. N: Xerxes Ranby; E: xerxes@zafena.se; D: Cmake dependency chain and various bug fixes. N: Alex Rosenberg; E: alexr@leftfield.org; I: arosenberg; D: ARM calling conventions rewrite, hard float support. N: Chad Rosier; E: mcrosier@codeaurora.org; I: mcrosier; D: AArch64 fast instruction selection pass; D: Fixes and improvements to the ARM fast-isel pass; D: Fixes and improvements to the AArch64 backend. N: Nadav Rotem; E: nadav.rotem@me.com; D: X86 code generation improvements, Loop Vectorizer, SLP Vectorizer. N: Roman Samoilov; E: roman@codedgers.com; D: MSIL backend. N: Duncan Sands; E: baldrick@free.fr; I: baldrick; D: Ada support in llvm-gcc; D: Dragonegg plugin; D: Exception handling improvements; D: Type legalizer rewrite. N: Ruchira Sasanka; E: sasanka@uiuc.edu; D: Graph coloring register allocator for the Sparc64 backend. N: Alina Sbirlea; E: alina.sbirlea@gmail.com; D: MemorySSA, BatchAA, misc loop and new pass manager work. N: Arnold Schwaighofer; E: arnold.schwaighofer@gmail.com; D: Tail call optimization for the x86 backend. N: Shantonu Sen; E: ssen@apple.com; D: Miscellaneous bug fixes. N: Anand Shukla; E: ashukla@cs.uiuc.edu; D: The ",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:11399,Modifiability,plugin,plugin,11399,"com; D: Debug Information. N: Vladimir Prus; W: http://vladimir_prus.blogspot.com; E: ghost@cs.msu.su; D: Made inst_iterator behave like a proper iterator, LowerConstantExprs pass. N: QIU Chaofan; E: qiucofan@cn.ibm.com; D: PowerPC Backend Developer. N: Kalle Raiskila; E: kalle.rasikila@nokia.com; D: Some bugfixes to CellSPU. N: Xerxes Ranby; E: xerxes@zafena.se; D: Cmake dependency chain and various bug fixes. N: Alex Rosenberg; E: alexr@leftfield.org; I: arosenberg; D: ARM calling conventions rewrite, hard float support. N: Chad Rosier; E: mcrosier@codeaurora.org; I: mcrosier; D: AArch64 fast instruction selection pass; D: Fixes and improvements to the ARM fast-isel pass; D: Fixes and improvements to the AArch64 backend. N: Nadav Rotem; E: nadav.rotem@me.com; D: X86 code generation improvements, Loop Vectorizer, SLP Vectorizer. N: Roman Samoilov; E: roman@codedgers.com; D: MSIL backend. N: Duncan Sands; E: baldrick@free.fr; I: baldrick; D: Ada support in llvm-gcc; D: Dragonegg plugin; D: Exception handling improvements; D: Type legalizer rewrite. N: Ruchira Sasanka; E: sasanka@uiuc.edu; D: Graph coloring register allocator for the Sparc64 backend. N: Alina Sbirlea; E: alina.sbirlea@gmail.com; D: MemorySSA, BatchAA, misc loop and new pass manager work. N: Arnold Schwaighofer; E: arnold.schwaighofer@gmail.com; D: Tail call optimization for the x86 backend. N: Shantonu Sen; E: ssen@apple.com; D: Miscellaneous bug fixes. N: Anand Shukla; E: ashukla@cs.uiuc.edu; D: The `paths' pass. N: Michael J. Spencer; E: bigcheesegs@gmail.com; D: Shepherding Windows COFF support into MC.; D: Lots of Windows stuff. N: Reid Spencer; E: rspencer@reidspencer.com; W: http://reidspencer.com/; D: Lots of stuff, see: http://wiki.llvm.org/index.php/User:Reid. N: Abhina Sreeskantharajan; E: Abhina.Sreeskantharajan@ibm.com; D: z/OS support. N: Alp Toker; E: alp@nuanti.com; W: http://atoker.com/; D: C++ frontend next generation standards implementation. N: Craig Topper; E: craig.topper@gmail.c",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:11461,Modifiability,rewrite,rewrite,11461,"com; D: Debug Information. N: Vladimir Prus; W: http://vladimir_prus.blogspot.com; E: ghost@cs.msu.su; D: Made inst_iterator behave like a proper iterator, LowerConstantExprs pass. N: QIU Chaofan; E: qiucofan@cn.ibm.com; D: PowerPC Backend Developer. N: Kalle Raiskila; E: kalle.rasikila@nokia.com; D: Some bugfixes to CellSPU. N: Xerxes Ranby; E: xerxes@zafena.se; D: Cmake dependency chain and various bug fixes. N: Alex Rosenberg; E: alexr@leftfield.org; I: arosenberg; D: ARM calling conventions rewrite, hard float support. N: Chad Rosier; E: mcrosier@codeaurora.org; I: mcrosier; D: AArch64 fast instruction selection pass; D: Fixes and improvements to the ARM fast-isel pass; D: Fixes and improvements to the AArch64 backend. N: Nadav Rotem; E: nadav.rotem@me.com; D: X86 code generation improvements, Loop Vectorizer, SLP Vectorizer. N: Roman Samoilov; E: roman@codedgers.com; D: MSIL backend. N: Duncan Sands; E: baldrick@free.fr; I: baldrick; D: Ada support in llvm-gcc; D: Dragonegg plugin; D: Exception handling improvements; D: Type legalizer rewrite. N: Ruchira Sasanka; E: sasanka@uiuc.edu; D: Graph coloring register allocator for the Sparc64 backend. N: Alina Sbirlea; E: alina.sbirlea@gmail.com; D: MemorySSA, BatchAA, misc loop and new pass manager work. N: Arnold Schwaighofer; E: arnold.schwaighofer@gmail.com; D: Tail call optimization for the x86 backend. N: Shantonu Sen; E: ssen@apple.com; D: Miscellaneous bug fixes. N: Anand Shukla; E: ashukla@cs.uiuc.edu; D: The `paths' pass. N: Michael J. Spencer; E: bigcheesegs@gmail.com; D: Shepherding Windows COFF support into MC.; D: Lots of Windows stuff. N: Reid Spencer; E: rspencer@reidspencer.com; W: http://reidspencer.com/; D: Lots of stuff, see: http://wiki.llvm.org/index.php/User:Reid. N: Abhina Sreeskantharajan; E: Abhina.Sreeskantharajan@ibm.com; D: z/OS support. N: Alp Toker; E: alp@nuanti.com; W: http://atoker.com/; D: C++ frontend next generation standards implementation. N: Craig Topper; E: craig.topper@gmail.c",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:1851,Performance,load,loader,1851,"ility layer. N: Aaron Ballman; E: aaron@aaronballman.com; D: Clang frontend, frontend attributes, Windows support, general bug fixing; I: AaronBallman. N: Alexey Bataev; E: a.bataev@outlook.com; D: Clang frontend, OpenMP in clang, SLP vectorizer, Loop vectorizer, InstCombine; I: ABataev. N: Nate Begeman; E: natebegeman@mac.com; D: PowerPC backend developer; D: Target-independent code generator and analysis improvements. N: Daniel Berlin; E: dberlin@dberlin.org; D: ET-Forest implementation.; D: Sparse bitmap. N: Geoff Berry; E: gberry@codeaurora.org; E: gcb@acm.org; D: AArch64 backend improvements; D: Added EarlyCSE MemorySSA support; D: CodeGen improvements. N: David Blaikie; E: dblaikie@gmail.com; D: General bug fixing/fit & finish, mostly in Clang. N: Neil Booth; E: neil@daikokuya.co.uk; D: APFloat implementation. N: Alex Bradbury; E: asb@igalia.com; D: RISC-V backend. N: Misha Brukman; E: brukman+llvm@uiuc.edu; W: http://misha.brukman.net; D: Portions of X86 and Sparc JIT compilers, PowerPC backend; D: Incremental bitcode loader. N: Cameron Buschardt; E: buschard@uiuc.edu; D: The `mem2reg' pass - promotes values stored in memory to registers. N: Brendon Cahoon; E: bcahoon@codeaurora.org; D: Loop unrolling with run-time trip counts. N: Chandler Carruth; E: chandlerc@gmail.com; E: chandlerc@google.com; D: Hashing algorithms and interfaces; D: Inline cost analysis; D: Machine block placement pass; D: SROA. N: Casey Carter; E: ccarter@uiuc.edu; D: Fixes to the Reassociation pass, various improvement patches. N: Evan Cheng; E: evan.cheng@apple.com; D: ARM and X86 backends; D: Instruction scheduler improvements; D: Register allocator improvements; D: Loop optimizer improvements; D: Target-independent code generator improvements. N: Dan Villiom Podlaski Christiansen; E: danchr@gmail.com; E: danchr@cs.au.dk; W: http://villiom.dk; D: LLVM Makefile improvements; D: Clang diagnostic & driver tweaks; S: Aarhus, Denmark. N: Jeff Cohen; E: jeffc@jolt-lang.org; W: http://jolt-l",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:2491,Performance,optimiz,optimizer,2491,"ents. N: David Blaikie; E: dblaikie@gmail.com; D: General bug fixing/fit & finish, mostly in Clang. N: Neil Booth; E: neil@daikokuya.co.uk; D: APFloat implementation. N: Alex Bradbury; E: asb@igalia.com; D: RISC-V backend. N: Misha Brukman; E: brukman+llvm@uiuc.edu; W: http://misha.brukman.net; D: Portions of X86 and Sparc JIT compilers, PowerPC backend; D: Incremental bitcode loader. N: Cameron Buschardt; E: buschard@uiuc.edu; D: The `mem2reg' pass - promotes values stored in memory to registers. N: Brendon Cahoon; E: bcahoon@codeaurora.org; D: Loop unrolling with run-time trip counts. N: Chandler Carruth; E: chandlerc@gmail.com; E: chandlerc@google.com; D: Hashing algorithms and interfaces; D: Inline cost analysis; D: Machine block placement pass; D: SROA. N: Casey Carter; E: ccarter@uiuc.edu; D: Fixes to the Reassociation pass, various improvement patches. N: Evan Cheng; E: evan.cheng@apple.com; D: ARM and X86 backends; D: Instruction scheduler improvements; D: Register allocator improvements; D: Loop optimizer improvements; D: Target-independent code generator improvements. N: Dan Villiom Podlaski Christiansen; E: danchr@gmail.com; E: danchr@cs.au.dk; W: http://villiom.dk; D: LLVM Makefile improvements; D: Clang diagnostic & driver tweaks; S: Aarhus, Denmark. N: Jeff Cohen; E: jeffc@jolt-lang.org; W: http://jolt-lang.org; D: Native Win32 API portability layer. N: John T. Criswell; E: criswell@uiuc.edu; D: Original Autoconf support, documentation improvements, bug fixes. N: Anshuman Dasgupta; E: adasgupt@codeaurora.org; D: Deterministic finite automaton based infrastructure for VLIW packetization. N: Stefanus Du Toit; E: stefanus.du.toit@intel.com; D: Bug fixes and minor improvements. N: Rafael Avila de Espindola; E: rafael@espindo.la; D: MC and LLD work. N: Dave Estes; E: cestes@codeaurora.org; D: AArch64 machine description for Cortex-A53. N: Alkis Evlogimenos; E: alkis@evlogimenos.com; D: Linear scan register allocator, many codegen improvements, Java frontend.",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:3872,Performance,optimiz,optimizer,3872,"er. N: John T. Criswell; E: criswell@uiuc.edu; D: Original Autoconf support, documentation improvements, bug fixes. N: Anshuman Dasgupta; E: adasgupt@codeaurora.org; D: Deterministic finite automaton based infrastructure for VLIW packetization. N: Stefanus Du Toit; E: stefanus.du.toit@intel.com; D: Bug fixes and minor improvements. N: Rafael Avila de Espindola; E: rafael@espindo.la; D: MC and LLD work. N: Dave Estes; E: cestes@codeaurora.org; D: AArch64 machine description for Cortex-A53. N: Alkis Evlogimenos; E: alkis@evlogimenos.com; D: Linear scan register allocator, many codegen improvements, Java frontend. N: Hal Finkel; E: hfinkel@anl.gov; D: Basic-block autovectorization, PowerPC backend improvements. N: Eric Fiselier; E: eric@efcs.ca; D: LIT patches and documentation. N: Ryan Flynn; E: pizza@parseerror.com; D: Miscellaneous bug fixes. N: Brian Gaeke; E: gaeke@uiuc.edu; W: http://www.students.uiuc.edu/~gaeke/; D: Portions of X86 static and JIT compilers; initial SparcV8 backend; D: Dynamic trace optimizer; D: FreeBSD/X86 compatibility fixes, the llvm-nm tool. N: Nicolas Geoffray; E: nicolas.geoffray@lip6.fr; W: http://www-src.lip6.fr/homepages/Nicolas.Geoffray/; D: PPC backend fixes for Linux. N: Louis Gerbarg; E: lgg@apple.com; D: Portions of the PowerPC backend. N: Saem Ghani; E: saemghani@gmail.com; D: Callgraph class cleanups. N: Mikhail Glushenkov; E: foldr@codedgers.com; D: Author of llvmc2. N: Dan Gohman; E: llvm@sunfishcode.online; D: Miscellaneous bug fixes; D: WebAssembly Backend. N: Renato Golin; E: rengolin@systemcall.eu; E: rengolin@gmail.com; D: ARM/AArch64 back-end improvements; D: Loop Vectorizer improvements; D: Regression and Test Suite improvements; D: Linux compatibility (GNU, musl, etc); D: Initial Linux kernel / Android support effort; I: rengolin. N: David Goodwin; E: david@goodwinz.net; D: Thumb-2 code generator. N: David Greene; E: greened@obbligato.org; D: Miscellaneous bug fixes; D: Register allocation refactoring. N: Gabor Greif; E",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:6920,Performance,load,load,6920,"org; D: Support for packed types. N: Rod Kay; E: rkay@auroraux.org; D: Author of LLVM Ada bindings. N: Erich Keane; E: erich.keane@intel.com; D: A variety of Clang contributions including function multiversioning, regcall/vectorcall.; I: ErichKeane. N: Eric Kidd; W: http://randomhacks.net/; D: llvm-config script. N: Anton Korobeynikov; E: anton at korobeynikov dot info; D: Mingw32 fixes, cross-compiling support, stdcall/fastcall calling conv.; D: x86/linux PIC codegen, aliases, regparm/visibility attributes; D: Switch lowering refactoring. N: Sumant Kowshik; E: kowshik@uiuc.edu; D: Author of the original C backend. N: Benjamin Kramer; E: benny.kra@gmail.com; D: Miscellaneous bug fixes. N: Michael Kuperstein; E: mkuper@google.com; D: Loop Vectorizer. N: Sundeep Kushwaha; E: sundeepk@codeaurora.org; D: Implemented DFA-based target independent VLIW packetizer. N: Christopher Lamb; E: christopher.lamb@gmail.com; D: aligned load/store support, parts of noalias and restrict support; D: vreg subreg infrastructure, X86 codegen improvements based on subregs; D: address spaces. N: Jim Laskey; E: jlaskey@apple.com; D: Improvements to the PPC backend, instruction scheduling; D: Debug and Dwarf implementation; D: Auto upgrade mangler; D: llvm-gcc4 svn wrangler. N: Chris Lattner; E: sabre@nondot.org; W: http://nondot.org/~sabre/; D: Primary architect of LLVM. N: Tanya Lattner (Tanya Brethour); E: tonic@nondot.org; W: http://nondot.org/~tonic/; D: The initial llvm-ar tool, converted regression testsuite to dejagnu; D: Modulo scheduling in the SparcV9 backend; D: Release manager (1.7+). N: Sylvestre Ledru; E: sylvestre@debian.org; W: http://sylvestre.ledru.info/; W: https://apt.llvm.org/; D: Debian and Ubuntu packaging; D: Continuous integration with jenkins. N: Andrew Lenharth; E: alenhar2@cs.uiuc.edu; W: http://www.lenharth.org/~andrewl/; D: Alpha backend; D: Sampling based profiling. N: Nick Lewycky; E: nicholas@mxc.ca; D: PredicateSimplifier pass. N: Tony Linthicum, et. al.; E: ",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:11750,Performance,optimiz,optimization,11750,"es@zafena.se; D: Cmake dependency chain and various bug fixes. N: Alex Rosenberg; E: alexr@leftfield.org; I: arosenberg; D: ARM calling conventions rewrite, hard float support. N: Chad Rosier; E: mcrosier@codeaurora.org; I: mcrosier; D: AArch64 fast instruction selection pass; D: Fixes and improvements to the ARM fast-isel pass; D: Fixes and improvements to the AArch64 backend. N: Nadav Rotem; E: nadav.rotem@me.com; D: X86 code generation improvements, Loop Vectorizer, SLP Vectorizer. N: Roman Samoilov; E: roman@codedgers.com; D: MSIL backend. N: Duncan Sands; E: baldrick@free.fr; I: baldrick; D: Ada support in llvm-gcc; D: Dragonegg plugin; D: Exception handling improvements; D: Type legalizer rewrite. N: Ruchira Sasanka; E: sasanka@uiuc.edu; D: Graph coloring register allocator for the Sparc64 backend. N: Alina Sbirlea; E: alina.sbirlea@gmail.com; D: MemorySSA, BatchAA, misc loop and new pass manager work. N: Arnold Schwaighofer; E: arnold.schwaighofer@gmail.com; D: Tail call optimization for the x86 backend. N: Shantonu Sen; E: ssen@apple.com; D: Miscellaneous bug fixes. N: Anand Shukla; E: ashukla@cs.uiuc.edu; D: The `paths' pass. N: Michael J. Spencer; E: bigcheesegs@gmail.com; D: Shepherding Windows COFF support into MC.; D: Lots of Windows stuff. N: Reid Spencer; E: rspencer@reidspencer.com; W: http://reidspencer.com/; D: Lots of stuff, see: http://wiki.llvm.org/index.php/User:Reid. N: Abhina Sreeskantharajan; E: Abhina.Sreeskantharajan@ibm.com; D: z/OS support. N: Alp Toker; E: alp@nuanti.com; W: http://atoker.com/; D: C++ frontend next generation standards implementation. N: Craig Topper; E: craig.topper@gmail.com; D: X86 codegen and disassembler improvements. AVX2 support. N: Edwin Torok; E: edwintorok@gmail.com; D: Miscellaneous bug fixes. N: Adam Treat; E: manyoso@yahoo.com; D: C++ bugs filed, and C++ front-end bug fixes. N: Andrew Trick; E: atrick@apple.com; D: Instruction Scheduling, ... N: Lauro Ramos Venancio; E: lauro.venancio@indt.org.br; D: ARM bac",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT:7491,Testability,test,testsuite,7491,"Switch lowering refactoring. N: Sumant Kowshik; E: kowshik@uiuc.edu; D: Author of the original C backend. N: Benjamin Kramer; E: benny.kra@gmail.com; D: Miscellaneous bug fixes. N: Michael Kuperstein; E: mkuper@google.com; D: Loop Vectorizer. N: Sundeep Kushwaha; E: sundeepk@codeaurora.org; D: Implemented DFA-based target independent VLIW packetizer. N: Christopher Lamb; E: christopher.lamb@gmail.com; D: aligned load/store support, parts of noalias and restrict support; D: vreg subreg infrastructure, X86 codegen improvements based on subregs; D: address spaces. N: Jim Laskey; E: jlaskey@apple.com; D: Improvements to the PPC backend, instruction scheduling; D: Debug and Dwarf implementation; D: Auto upgrade mangler; D: llvm-gcc4 svn wrangler. N: Chris Lattner; E: sabre@nondot.org; W: http://nondot.org/~sabre/; D: Primary architect of LLVM. N: Tanya Lattner (Tanya Brethour); E: tonic@nondot.org; W: http://nondot.org/~tonic/; D: The initial llvm-ar tool, converted regression testsuite to dejagnu; D: Modulo scheduling in the SparcV9 backend; D: Release manager (1.7+). N: Sylvestre Ledru; E: sylvestre@debian.org; W: http://sylvestre.ledru.info/; W: https://apt.llvm.org/; D: Debian and Ubuntu packaging; D: Continuous integration with jenkins. N: Andrew Lenharth; E: alenhar2@cs.uiuc.edu; W: http://www.lenharth.org/~andrewl/; D: Alpha backend; D: Sampling based profiling. N: Nick Lewycky; E: nicholas@mxc.ca; D: PredicateSimplifier pass. N: Tony Linthicum, et. al.; E: tlinth@codeaurora.org; D: Backend for Qualcomm's Hexagon VLIW processor. N: Bruno Cardoso Lopes; E: bruno.cardoso@gmail.com; I: bruno; W: http://brunocardoso.cc; D: Mips backend; D: Random ARM integrated assembler and assembly parser improvements; D: General X86 AVX1 support. N: Weining Lu; E: luweining@loongson.cn; D: LoongArch backend. N: Duraid Madina; E: duraid@octopus.com.au; W: http://kinoko.c.u-tokyo.ac.jp/~duraid/; D: IA64 backend, BigBlock register allocator. N: John McCall; E: rjmccall@apple.com; D: C",MatchSource.DOCS,interpreter/llvm-project/llvm/CREDITS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CREDITS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT:1691,Availability,avail,available,1691,"t control, are controlled by, or are under common; control with that entity. For the purposes of this definition,; ""control"" means (i) the power, direct or indirect, to cause the; direction or management of such entity, whether by contract or; otherwise, or (ii) ownership of fifty percent (50%) or more of the; outstanding shares, or (iii) beneficial ownership of such entity. ""You"" (or ""Your"") shall mean an individual or Legal Entity; exercising permissions granted by this License. ""Source"" form shall mean the preferred form for making modifications,; including but not limited to software source code, documentation; source, and configuration files. ""Object"" form shall mean any form resulting from mechanical; transformation or translation of a Source form, including but; not limited to compiled object code, generated documentation,; and conversions to other media types. ""Work"" shall mean the work of authorship, whether in Source or; Object form, made available under the License, as indicated by a; copyright notice that is included in or attached to the work; (an example is provided in the Appendix below). ""Derivative Works"" shall mean any work, whether in Source or Object; form, that is based on (or derived from) the Work and for which the; editorial revisions, annotations, elaborations, or other modifications; represent, as a whole, an original work of authorship. For the purposes; of this License, Derivative Works shall not include works that remain; separable from, or merely link (or bind by name) to the interfaces of,; the Work and Derivative Works thereof. ""Contribution"" shall mean any work of authorship, including; the original version of the Work and any modifications or additions; to that Work or Derivative Works thereof, that is intentionally; submitted to Licensor for inclusion in the Work by the copyright owner; or by an individual or Legal Entity authorized to submit on behalf of; the copyright owner. For the purposes of this definition, ""submitted""; means",MatchSource.DOCS,interpreter/llvm-project/llvm/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT:8653,Availability,failure,failure,8653,"cing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or; agreed to in writing, Licensor provides the Work (and each; Contributor provides its Contributions) on an ""AS IS"" BASIS,; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or; implied, including, without limitation, any warranties or conditions; of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A; PARTICULAR PURPOSE. You are solely responsible for determining the; appropriateness of using or redistributing the Work and assume any; risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory,; whether in tort (including negligence), contract, or otherwise,; unless required by applicable law (such as deliberate and grossly; negligent acts) or agreed to in writing, shall any Contributor be; liable to You for damages, including any direct, indirect, special,; incidental, or consequential damages of any character arising as a; result of this License or out of the use or inability to use the; Work (including but not limited to damages for loss of goodwill,; work stoppage, computer failure or malfunction, or any and all; other commercial damages or losses), even if such Contributor; has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing; the Work or Derivative Works thereof, You may choose to offer,; and charge a fee for, acceptance of support, warranty, indemnity,; or other liability obligations and/or rights consistent with this; License. However, in accepting such obligations, You may act only; on Your own behalf and on Your sole responsibility, not on behalf; of any other Contributor, and only if You agree to indemnify,; defend, and hold each Contributor harmless for any liability; incurred by, or claims asserted against, such Contributor by reason; of your accepting any such warranty or additional liability.",MatchSource.DOCS,interpreter/llvm-project/llvm/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT:1363,Deployability,configurat,configuration,1363,"licenses/. TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION. 1. Definitions. ""License"" shall mean the terms and conditions for use, reproduction,; and distribution as defined by Sections 1 through 9 of this document. ""Licensor"" shall mean the copyright owner or entity authorized by; the copyright owner that is granting the License. ""Legal Entity"" shall mean the union of the acting entity and all; other entities that control, are controlled by, or are under common; control with that entity. For the purposes of this definition,; ""control"" means (i) the power, direct or indirect, to cause the; direction or management of such entity, whether by contract or; otherwise, or (ii) ownership of fifty percent (50%) or more of the; outstanding shares, or (iii) beneficial ownership of such entity. ""You"" (or ""Your"") shall mean an individual or Legal Entity; exercising permissions granted by this License. ""Source"" form shall mean the preferred form for making modifications,; including but not limited to software source code, documentation; source, and configuration files. ""Object"" form shall mean any form resulting from mechanical; transformation or translation of a Source form, including but; not limited to compiled object code, generated documentation,; and conversions to other media types. ""Work"" shall mean the work of authorship, whether in Source or; Object form, made available under the License, as indicated by a; copyright notice that is included in or attached to the work; (an example is provided in the Appendix below). ""Derivative Works"" shall mean any work, whether in Source or Object; form, that is based on (or derived from) the Work and for which the; editorial revisions, annotations, elaborations, or other modifications; represent, as a whole, an original work of authorship. For the purposes; of this License, Derivative Works shall not include works that remain; separable from, or merely link (or bind by name) to the interfaces of,; the Work and Derivative",MatchSource.DOCS,interpreter/llvm-project/llvm/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT:867,Energy Efficiency,power,power,867,"==============================================================================; The LLVM Project is under the Apache License v2.0 with LLVM Exceptions:; ==============================================================================. Apache License; Version 2.0, January 2004; http://www.apache.org/licenses/. TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION. 1. Definitions. ""License"" shall mean the terms and conditions for use, reproduction,; and distribution as defined by Sections 1 through 9 of this document. ""Licensor"" shall mean the copyright owner or entity authorized by; the copyright owner that is granting the License. ""Legal Entity"" shall mean the union of the acting entity and all; other entities that control, are controlled by, or are under common; control with that entity. For the purposes of this definition,; ""control"" means (i) the power, direct or indirect, to cause the; direction or management of such entity, whether by contract or; otherwise, or (ii) ownership of fifty percent (50%) or more of the; outstanding shares, or (iii) beneficial ownership of such entity. ""You"" (or ""Your"") shall mean an individual or Legal Entity; exercising permissions granted by this License. ""Source"" form shall mean the preferred form for making modifications,; including but not limited to software source code, documentation; source, and configuration files. ""Object"" form shall mean any form resulting from mechanical; transformation or translation of a Source form, including but; not limited to compiled object code, generated documentation,; and conversions to other media types. ""Work"" shall mean the work of authorship, whether in Source or; Object form, made available under the License, as indicated by a; copyright notice that is included in or attached to the work; (an example is provided in the Appendix below). ""Derivative Works"" shall mean any work, whether in Source or Object; form, that is based on (or derived from) the Work and for which the; editorial revi",MatchSource.DOCS,interpreter/llvm-project/llvm/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT:3558,Energy Efficiency,charge,charge,3558," or Legal Entity authorized to submit on behalf of; the copyright owner. For the purposes of this definition, ""submitted""; means any form of electronic, verbal, or written communication sent; to the Licensor or its representatives, including but not limited to; communication on electronic mailing lists, source code control systems,; and issue tracking systems that are managed by, or on behalf of, the; Licensor for the purpose of discussing and improving the Work, but; excluding communication that is conspicuously marked or otherwise; designated in writing by the copyright owner as ""Not a Contribution."". ""Contributor"" shall mean Licensor and any individual or Legal Entity; on behalf of whom a Contribution has been received by Licensor and; subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of; this License, each Contributor hereby grants to You a perpetual,; worldwide, non-exclusive, no-charge, royalty-free, irrevocable; copyright license to reproduce, prepare Derivative Works of,; publicly display, publicly perform, sublicense, and distribute the; Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of; this License, each Contributor hereby grants to You a perpetual,; worldwide, non-exclusive, no-charge, royalty-free, irrevocable; (except as stated in this section) patent license to make, have made,; use, offer to sell, sell, import, and otherwise transfer the Work,; where such license applies only to those patent claims licensable; by such Contributor that are necessarily infringed by their; Contribution(s) alone or by combination of their Contribution(s); with the Work to which such Contribution(s) was submitted. If You; institute patent litigation against any entity (including a; cross-claim or counterclaim in a lawsuit) alleging that the Work; or a Contribution incorporated within the Work constitutes direct; or contributory patent infrin",MatchSource.DOCS,interpreter/llvm-project/llvm/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT:3943,Energy Efficiency,charge,charge,3943,"nication that is conspicuously marked or otherwise; designated in writing by the copyright owner as ""Not a Contribution."". ""Contributor"" shall mean Licensor and any individual or Legal Entity; on behalf of whom a Contribution has been received by Licensor and; subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of; this License, each Contributor hereby grants to You a perpetual,; worldwide, non-exclusive, no-charge, royalty-free, irrevocable; copyright license to reproduce, prepare Derivative Works of,; publicly display, publicly perform, sublicense, and distribute the; Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of; this License, each Contributor hereby grants to You a perpetual,; worldwide, non-exclusive, no-charge, royalty-free, irrevocable; (except as stated in this section) patent license to make, have made,; use, offer to sell, sell, import, and otherwise transfer the Work,; where such license applies only to those patent claims licensable; by such Contributor that are necessarily infringed by their; Contribution(s) alone or by combination of their Contribution(s); with the Work to which such Contribution(s) was submitted. If You; institute patent litigation against any entity (including a; cross-claim or counterclaim in a lawsuit) alleging that the Work; or a Contribution incorporated within the Work constitutes direct; or contributory patent infringement, then any patent licenses; granted to You under this License for that Work shall terminate; as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the; Work or Derivative Works thereof in any medium, with or without; modifications, and in Source or Object form, provided that You; meet the following conditions:. (a) You must give any other recipients of the Work or; Derivative Works a copy of this License; and. (b) You must cause",MatchSource.DOCS,interpreter/llvm-project/llvm/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT:8946,Energy Efficiency,charge,charge,8946," of using or redistributing the Work and assume any; risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory,; whether in tort (including negligence), contract, or otherwise,; unless required by applicable law (such as deliberate and grossly; negligent acts) or agreed to in writing, shall any Contributor be; liable to You for damages, including any direct, indirect, special,; incidental, or consequential damages of any character arising as a; result of this License or out of the use or inability to use the; Work (including but not limited to damages for loss of goodwill,; work stoppage, computer failure or malfunction, or any and all; other commercial damages or losses), even if such Contributor; has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing; the Work or Derivative Works thereof, You may choose to offer,; and charge a fee for, acceptance of support, warranty, indemnity,; or other liability obligations and/or rights consistent with this; License. However, in accepting such obligations, You may act only; on Your own behalf and on Your sole responsibility, not on behalf; of any other Contributor, and only if You agree to indemnify,; defend, and hold each Contributor harmless for any liability; incurred by, or claims asserted against, such Contributor by reason; of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS. APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following; boilerplate notice, with the fields enclosed by brackets ""[]""; replaced with your own identifying information. (Don't include; the brackets!) The text should be enclosed in the appropriate; comment syntax for the file format. We also recommend that a; file or class name and description of purpose be included on the; same ""printed page"" as the copyright n",MatchSource.DOCS,interpreter/llvm-project/llvm/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT:12650,Energy Efficiency,charge,charge,12650,"ed clearly using at least one of two; mechanisms:; 1) It will be in a separate directory tree with its own `LICENSE.txt` or; `LICENSE` file at the top containing the specific license and restrictions; which apply to that software, or; 2) It will contain specific license and restriction terms at the top of every; file. ==============================================================================; Legacy LLVM License (https://llvm.org/docs/DeveloperPolicy.html#legacy):; ==============================================================================; University of Illinois/NCSA; Open Source License. Copyright (c) 2003-2019 University of Illinois at Urbana-Champaign.; All rights reserved. Developed by:. LLVM Team. University of Illinois at Urbana-Champaign. http://llvm.org. Permission is hereby granted, free of charge, to any person obtaining a copy of; this software and associated documentation files (the ""Software""), to deal with; the Software without restriction, including without limitation the rights to; use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies; of the Software, and to permit persons to whom the Software is furnished to do; so, subject to the following conditions:. * Redistributions of source code must retain the above copyright notice,; this list of conditions and the following disclaimers. * Redistributions in binary form must reproduce the above copyright notice,; this list of conditions and the following disclaimers in the; documentation and/or other materials provided with the distribution. * Neither the names of the LLVM Team, University of Illinois at; Urbana-Champaign, nor the names of its contributors may be used to; endorse or promote products derived from this Software without specific; prior written permission. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS; FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO ",MatchSource.DOCS,interpreter/llvm-project/llvm/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT:959,Integrability,contract,contract,959,"==============================================================================; The LLVM Project is under the Apache License v2.0 with LLVM Exceptions:; ==============================================================================. Apache License; Version 2.0, January 2004; http://www.apache.org/licenses/. TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION. 1. Definitions. ""License"" shall mean the terms and conditions for use, reproduction,; and distribution as defined by Sections 1 through 9 of this document. ""Licensor"" shall mean the copyright owner or entity authorized by; the copyright owner that is granting the License. ""Legal Entity"" shall mean the union of the acting entity and all; other entities that control, are controlled by, or are under common; control with that entity. For the purposes of this definition,; ""control"" means (i) the power, direct or indirect, to cause the; direction or management of such entity, whether by contract or; otherwise, or (ii) ownership of fifty percent (50%) or more of the; outstanding shares, or (iii) beneficial ownership of such entity. ""You"" (or ""Your"") shall mean an individual or Legal Entity; exercising permissions granted by this License. ""Source"" form shall mean the preferred form for making modifications,; including but not limited to software source code, documentation; source, and configuration files. ""Object"" form shall mean any form resulting from mechanical; transformation or translation of a Source form, including but; not limited to compiled object code, generated documentation,; and conversions to other media types. ""Work"" shall mean the work of authorship, whether in Source or; Object form, made available under the License, as indicated by a; copyright notice that is included in or attached to the work; (an example is provided in the Appendix below). ""Derivative Works"" shall mean any work, whether in Source or Object; form, that is based on (or derived from) the Work and for which the; editorial revi",MatchSource.DOCS,interpreter/llvm-project/llvm/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT:2259,Integrability,interface,interfaces,2259," ""Source"" form shall mean the preferred form for making modifications,; including but not limited to software source code, documentation; source, and configuration files. ""Object"" form shall mean any form resulting from mechanical; transformation or translation of a Source form, including but; not limited to compiled object code, generated documentation,; and conversions to other media types. ""Work"" shall mean the work of authorship, whether in Source or; Object form, made available under the License, as indicated by a; copyright notice that is included in or attached to the work; (an example is provided in the Appendix below). ""Derivative Works"" shall mean any work, whether in Source or Object; form, that is based on (or derived from) the Work and for which the; editorial revisions, annotations, elaborations, or other modifications; represent, as a whole, an original work of authorship. For the purposes; of this License, Derivative Works shall not include works that remain; separable from, or merely link (or bind by name) to the interfaces of,; the Work and Derivative Works thereof. ""Contribution"" shall mean any work of authorship, including; the original version of the Work and any modifications or additions; to that Work or Derivative Works thereof, that is intentionally; submitted to Licensor for inclusion in the Work by the copyright owner; or by an individual or Legal Entity authorized to submit on behalf of; the copyright owner. For the purposes of this definition, ""submitted""; means any form of electronic, verbal, or written communication sent; to the Licensor or its representatives, including but not limited to; communication on electronic mailing lists, source code control systems,; and issue tracking systems that are managed by, or on behalf of, the; Licensor for the purpose of discussing and improving the Work, but; excluding communication that is conspicuously marked or otherwise; designated in writing by the copyright owner as ""Not a Contribution."". ""C",MatchSource.DOCS,interpreter/llvm-project/llvm/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT:8201,Integrability,contract,contract,8201,"cing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or; agreed to in writing, Licensor provides the Work (and each; Contributor provides its Contributions) on an ""AS IS"" BASIS,; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or; implied, including, without limitation, any warranties or conditions; of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A; PARTICULAR PURPOSE. You are solely responsible for determining the; appropriateness of using or redistributing the Work and assume any; risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory,; whether in tort (including negligence), contract, or otherwise,; unless required by applicable law (such as deliberate and grossly; negligent acts) or agreed to in writing, shall any Contributor be; liable to You for damages, including any direct, indirect, special,; incidental, or consequential damages of any character arising as a; result of this License or out of the use or inability to use the; Work (including but not limited to damages for loss of goodwill,; work stoppage, computer failure or malfunction, or any and all; other commercial damages or losses), even if such Contributor; has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing; the Work or Derivative Works thereof, You may choose to offer,; and charge a fee for, acceptance of support, warranty, indemnity,; or other liability obligations and/or rights consistent with this; License. However, in accepting such obligations, You may act only; on Your own behalf and on Your sole responsibility, not on behalf; of any other Contributor, and only if You agree to indemnify,; defend, and hold each Contributor harmless for any liability; incurred by, or claims asserted against, such Contributor by reason; of your accepting any such warranty or additional liability.",MatchSource.DOCS,interpreter/llvm-project/llvm/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT:1363,Modifiability,config,configuration,1363,"licenses/. TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION. 1. Definitions. ""License"" shall mean the terms and conditions for use, reproduction,; and distribution as defined by Sections 1 through 9 of this document. ""Licensor"" shall mean the copyright owner or entity authorized by; the copyright owner that is granting the License. ""Legal Entity"" shall mean the union of the acting entity and all; other entities that control, are controlled by, or are under common; control with that entity. For the purposes of this definition,; ""control"" means (i) the power, direct or indirect, to cause the; direction or management of such entity, whether by contract or; otherwise, or (ii) ownership of fifty percent (50%) or more of the; outstanding shares, or (iii) beneficial ownership of such entity. ""You"" (or ""Your"") shall mean an individual or Legal Entity; exercising permissions granted by this License. ""Source"" form shall mean the preferred form for making modifications,; including but not limited to software source code, documentation; source, and configuration files. ""Object"" form shall mean any form resulting from mechanical; transformation or translation of a Source form, including but; not limited to compiled object code, generated documentation,; and conversions to other media types. ""Work"" shall mean the work of authorship, whether in Source or; Object form, made available under the License, as indicated by a; copyright notice that is included in or attached to the work; (an example is provided in the Appendix below). ""Derivative Works"" shall mean any work, whether in Source or Object; form, that is based on (or derived from) the Work and for which the; editorial revisions, annotations, elaborations, or other modifications; represent, as a whole, an original work of authorship. For the purposes; of this License, Derivative Works shall not include works that remain; separable from, or merely link (or bind by name) to the interfaces of,; the Work and Derivative",MatchSource.DOCS,interpreter/llvm-project/llvm/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT:3682,Performance,perform,perform,3682," or Legal Entity authorized to submit on behalf of; the copyright owner. For the purposes of this definition, ""submitted""; means any form of electronic, verbal, or written communication sent; to the Licensor or its representatives, including but not limited to; communication on electronic mailing lists, source code control systems,; and issue tracking systems that are managed by, or on behalf of, the; Licensor for the purpose of discussing and improving the Work, but; excluding communication that is conspicuously marked or otherwise; designated in writing by the copyright owner as ""Not a Contribution."". ""Contributor"" shall mean Licensor and any individual or Legal Entity; on behalf of whom a Contribution has been received by Licensor and; subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of; this License, each Contributor hereby grants to You a perpetual,; worldwide, non-exclusive, no-charge, royalty-free, irrevocable; copyright license to reproduce, prepare Derivative Works of,; publicly display, publicly perform, sublicense, and distribute the; Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of; this License, each Contributor hereby grants to You a perpetual,; worldwide, non-exclusive, no-charge, royalty-free, irrevocable; (except as stated in this section) patent license to make, have made,; use, offer to sell, sell, import, and otherwise transfer the Work,; where such license applies only to those patent claims licensable; by such Contributor that are necessarily infringed by their; Contribution(s) alone or by combination of their Contribution(s); with the Work to which such Contribution(s) was submitted. If You; institute patent litigation against any entity (including a; cross-claim or counterclaim in a lawsuit) alleging that the Work; or a Contribution incorporated within the Work constitutes direct; or contributory patent infrin",MatchSource.DOCS,interpreter/llvm-project/llvm/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT:8022,Safety,risk,risks,8022,"ithout any additional terms or conditions.; Notwithstanding the above, nothing herein shall supersede or modify; the terms of any separate license agreement you may have executed; with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade; names, trademarks, service marks, or product names of the Licensor,; except as required for reasonable and customary use in describing the; origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or; agreed to in writing, Licensor provides the Work (and each; Contributor provides its Contributions) on an ""AS IS"" BASIS,; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or; implied, including, without limitation, any warranties or conditions; of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A; PARTICULAR PURPOSE. You are solely responsible for determining the; appropriateness of using or redistributing the Work and assume any; risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory,; whether in tort (including negligence), contract, or otherwise,; unless required by applicable law (such as deliberate and grossly; negligent acts) or agreed to in writing, shall any Contributor be; liable to You for damages, including any direct, indirect, special,; incidental, or consequential damages of any character arising as a; result of this License or out of the use or inability to use the; Work (including but not limited to damages for loss of goodwill,; work stoppage, computer failure or malfunction, or any and all; other commercial damages or losses), even if such Contributor; has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing; the Work or Derivative Works thereof, You may choose to offer,; and charge a fee for, acceptance of support, warranty, in",MatchSource.DOCS,interpreter/llvm-project/llvm/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT:579,Security,authoriz,authorized,579,"==============================================================================; The LLVM Project is under the Apache License v2.0 with LLVM Exceptions:; ==============================================================================. Apache License; Version 2.0, January 2004; http://www.apache.org/licenses/. TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION. 1. Definitions. ""License"" shall mean the terms and conditions for use, reproduction,; and distribution as defined by Sections 1 through 9 of this document. ""Licensor"" shall mean the copyright owner or entity authorized by; the copyright owner that is granting the License. ""Legal Entity"" shall mean the union of the acting entity and all; other entities that control, are controlled by, or are under common; control with that entity. For the purposes of this definition,; ""control"" means (i) the power, direct or indirect, to cause the; direction or management of such entity, whether by contract or; otherwise, or (ii) ownership of fifty percent (50%) or more of the; outstanding shares, or (iii) beneficial ownership of such entity. ""You"" (or ""Your"") shall mean an individual or Legal Entity; exercising permissions granted by this License. ""Source"" form shall mean the preferred form for making modifications,; including but not limited to software source code, documentation; source, and configuration files. ""Object"" form shall mean any form resulting from mechanical; transformation or translation of a Source form, including but; not limited to compiled object code, generated documentation,; and conversions to other media types. ""Work"" shall mean the work of authorship, whether in Source or; Object form, made available under the License, as indicated by a; copyright notice that is included in or attached to the work; (an example is provided in the Appendix below). ""Derivative Works"" shall mean any work, whether in Source or Object; form, that is based on (or derived from) the Work and for which the; editorial revi",MatchSource.DOCS,interpreter/llvm-project/llvm/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT:2617,Security,authoriz,authorized,2617," including but; not limited to compiled object code, generated documentation,; and conversions to other media types. ""Work"" shall mean the work of authorship, whether in Source or; Object form, made available under the License, as indicated by a; copyright notice that is included in or attached to the work; (an example is provided in the Appendix below). ""Derivative Works"" shall mean any work, whether in Source or Object; form, that is based on (or derived from) the Work and for which the; editorial revisions, annotations, elaborations, or other modifications; represent, as a whole, an original work of authorship. For the purposes; of this License, Derivative Works shall not include works that remain; separable from, or merely link (or bind by name) to the interfaces of,; the Work and Derivative Works thereof. ""Contribution"" shall mean any work of authorship, including; the original version of the Work and any modifications or additions; to that Work or Derivative Works thereof, that is intentionally; submitted to Licensor for inclusion in the Work by the copyright owner; or by an individual or Legal Entity authorized to submit on behalf of; the copyright owner. For the purposes of this definition, ""submitted""; means any form of electronic, verbal, or written communication sent; to the Licensor or its representatives, including but not limited to; communication on electronic mailing lists, source code control systems,; and issue tracking systems that are managed by, or on behalf of, the; Licensor for the purpose of discussing and improving the Work, but; excluding communication that is conspicuously marked or otherwise; designated in writing by the copyright owner as ""Not a Contribution."". ""Contributor"" shall mean Licensor and any individual or Legal Entity; on behalf of whom a Contribution has been received by Licensor and; subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of; this License, each Contributor",MatchSource.DOCS,interpreter/llvm-project/llvm/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT:9358,Testability,assert,asserted,9358,"erate and grossly; negligent acts) or agreed to in writing, shall any Contributor be; liable to You for damages, including any direct, indirect, special,; incidental, or consequential damages of any character arising as a; result of this License or out of the use or inability to use the; Work (including but not limited to damages for loss of goodwill,; work stoppage, computer failure or malfunction, or any and all; other commercial damages or losses), even if such Contributor; has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing; the Work or Derivative Works thereof, You may choose to offer,; and charge a fee for, acceptance of support, warranty, indemnity,; or other liability obligations and/or rights consistent with this; License. However, in accepting such obligations, You may act only; on Your own behalf and on Your sole responsibility, not on behalf; of any other Contributor, and only if You agree to indemnify,; defend, and hold each Contributor harmless for any liability; incurred by, or claims asserted against, such Contributor by reason; of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS. APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following; boilerplate notice, with the fields enclosed by brackets ""[]""; replaced with your own identifying information. (Don't include; the brackets!) The text should be enclosed in the appropriate; comment syntax for the file format. We also recommend that a; file or class name and description of purpose be included on the; same ""printed page"" as the copyright notice for easier; identification within third-party archives. Copyright [yyyy] [name of copyright owner]. Licensed under the Apache License, Version 2.0 (the ""License"");; you may not use this file except in compliance with the License.; You may obtain a copy of the License at. http://www.apache.org/lice",MatchSource.DOCS,interpreter/llvm-project/llvm/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT:11834,Usability,clear,clearly,11834,"hout complying; with the conditions of Sections 4(a), 4(b) and 4(d) of the License. In addition, if you combine or link compiled forms of this Software with; software that is licensed under the GPLv2 (""Combined Software"") and if a; court of competent jurisdiction determines that the patent provision (Section; 3), the indemnity provision (Section 9) or other Section of the License; conflicts with the conditions of the GPLv2, you may retroactively and; prospectively choose to deem waived or otherwise exclude such Section(s) of; the License, but only in their entirety and only with respect to the Combined; Software. ==============================================================================; Software from third parties included in the LLVM Project:; ==============================================================================; The LLVM Project contains third party software which is under different license; terms. All such code will be identified clearly using at least one of two; mechanisms:; 1) It will be in a separate directory tree with its own `LICENSE.txt` or; `LICENSE` file at the top containing the specific license and restrictions; which apply to that software, or; 2) It will contain specific license and restriction terms at the top of every; file. ==============================================================================; Legacy LLVM License (https://llvm.org/docs/DeveloperPolicy.html#legacy):; ==============================================================================; University of Illinois/NCSA; Open Source License. Copyright (c) 2003-2019 University of Illinois at Urbana-Champaign.; All rights reserved. Developed by:. LLVM Team. University of Illinois at Urbana-Champaign. http://llvm.org. Permission is hereby granted, free of charge, to any person obtaining a copy of; this software and associated documentation files (the ""Software""), to deal with; the Software without restriction, including without limitation the rights to; use, copy, modify, mer",MatchSource.DOCS,interpreter/llvm-project/llvm/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/README.txt:178,Performance,optimiz,optimized,178,"The LLVM Compiler Infrastructure; ================================. This directory and its subdirectories contain source code for LLVM,; a toolkit for the construction of highly optimized compilers,; optimizers, and runtime environments. LLVM is open source software. You may freely distribute it under the terms of; the license agreement found in LICENSE.txt. Please see the documentation provided in docs/ for further; assistance with LLVM, and in particular docs/GettingStarted.rst for getting; started with LLVM and docs/README.txt for an overview of LLVM's; documentation setup. If you are writing a package for LLVM, see docs/Packaging.rst for our; suggestions.; ",MatchSource.DOCS,interpreter/llvm-project/llvm/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/README.txt:200,Performance,optimiz,optimizers,200,"The LLVM Compiler Infrastructure; ================================. This directory and its subdirectories contain source code for LLVM,; a toolkit for the construction of highly optimized compilers,; optimizers, and runtime environments. LLVM is open source software. You may freely distribute it under the terms of; the license agreement found in LICENSE.txt. Please see the documentation provided in docs/ for further; assistance with LLVM, and in particular docs/GettingStarted.rst for getting; started with LLVM and docs/README.txt for an overview of LLVM's; documentation setup. If you are writing a package for LLVM, see docs/Packaging.rst for our; suggestions.; ",MatchSource.DOCS,interpreter/llvm-project/llvm/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/RELEASE_TESTERS.TXT:126,Deployability,release,release,126,"This file is a list of the people responsible for ensuring that targets and; environments get tested and validated during the release process. They will also, in conjunction with the release manager and the code owners,; accept patches into stable release branches, tag critical bugs and release; stoppers as well as make sure that no regressions were observed on their; targets since the last release. N: Ben Pope; E: benpope81@gmail.com; T: x86; O: Ubuntu. N: Sylvestre Ledru; E: sylvestre@debian.org; T: All supported archs Debian/Ubuntu; O: Debian/Ubuntu packages. N: Nikola Smiljanic; E: popizdeh@gmail.com; T: x86; O: OpenSUSE, Fedora. N: Brian Cain; E: brian.cain@gmail.com; T: x86; O: SuSE Enterprise, CentOS. N: Bernhard Rosenkränzer; E: bero@linaro.org; T: x86; O: OpenMandriva. N: Dimitry Andric; E: dimitry@andric.com; T: x86; O: FreeBSD. N: Hans Wennborg; E: hans@chromium.org; T: x86; O: Windows. N: Linaro Toolchain Working Group; E: linaro-toolchain@lists.linaro.org; T: ARM, AArch64; O: Linux, Windows (AArch64 only); ",MatchSource.DOCS,interpreter/llvm-project/llvm/RELEASE_TESTERS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/RELEASE_TESTERS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/RELEASE_TESTERS.TXT:183,Deployability,release,release,183,"This file is a list of the people responsible for ensuring that targets and; environments get tested and validated during the release process. They will also, in conjunction with the release manager and the code owners,; accept patches into stable release branches, tag critical bugs and release; stoppers as well as make sure that no regressions were observed on their; targets since the last release. N: Ben Pope; E: benpope81@gmail.com; T: x86; O: Ubuntu. N: Sylvestre Ledru; E: sylvestre@debian.org; T: All supported archs Debian/Ubuntu; O: Debian/Ubuntu packages. N: Nikola Smiljanic; E: popizdeh@gmail.com; T: x86; O: OpenSUSE, Fedora. N: Brian Cain; E: brian.cain@gmail.com; T: x86; O: SuSE Enterprise, CentOS. N: Bernhard Rosenkränzer; E: bero@linaro.org; T: x86; O: OpenMandriva. N: Dimitry Andric; E: dimitry@andric.com; T: x86; O: FreeBSD. N: Hans Wennborg; E: hans@chromium.org; T: x86; O: Windows. N: Linaro Toolchain Working Group; E: linaro-toolchain@lists.linaro.org; T: ARM, AArch64; O: Linux, Windows (AArch64 only); ",MatchSource.DOCS,interpreter/llvm-project/llvm/RELEASE_TESTERS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/RELEASE_TESTERS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/RELEASE_TESTERS.TXT:228,Deployability,patch,patches,228,"This file is a list of the people responsible for ensuring that targets and; environments get tested and validated during the release process. They will also, in conjunction with the release manager and the code owners,; accept patches into stable release branches, tag critical bugs and release; stoppers as well as make sure that no regressions were observed on their; targets since the last release. N: Ben Pope; E: benpope81@gmail.com; T: x86; O: Ubuntu. N: Sylvestre Ledru; E: sylvestre@debian.org; T: All supported archs Debian/Ubuntu; O: Debian/Ubuntu packages. N: Nikola Smiljanic; E: popizdeh@gmail.com; T: x86; O: OpenSUSE, Fedora. N: Brian Cain; E: brian.cain@gmail.com; T: x86; O: SuSE Enterprise, CentOS. N: Bernhard Rosenkränzer; E: bero@linaro.org; T: x86; O: OpenMandriva. N: Dimitry Andric; E: dimitry@andric.com; T: x86; O: FreeBSD. N: Hans Wennborg; E: hans@chromium.org; T: x86; O: Windows. N: Linaro Toolchain Working Group; E: linaro-toolchain@lists.linaro.org; T: ARM, AArch64; O: Linux, Windows (AArch64 only); ",MatchSource.DOCS,interpreter/llvm-project/llvm/RELEASE_TESTERS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/RELEASE_TESTERS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/RELEASE_TESTERS.TXT:248,Deployability,release,release,248,"This file is a list of the people responsible for ensuring that targets and; environments get tested and validated during the release process. They will also, in conjunction with the release manager and the code owners,; accept patches into stable release branches, tag critical bugs and release; stoppers as well as make sure that no regressions were observed on their; targets since the last release. N: Ben Pope; E: benpope81@gmail.com; T: x86; O: Ubuntu. N: Sylvestre Ledru; E: sylvestre@debian.org; T: All supported archs Debian/Ubuntu; O: Debian/Ubuntu packages. N: Nikola Smiljanic; E: popizdeh@gmail.com; T: x86; O: OpenSUSE, Fedora. N: Brian Cain; E: brian.cain@gmail.com; T: x86; O: SuSE Enterprise, CentOS. N: Bernhard Rosenkränzer; E: bero@linaro.org; T: x86; O: OpenMandriva. N: Dimitry Andric; E: dimitry@andric.com; T: x86; O: FreeBSD. N: Hans Wennborg; E: hans@chromium.org; T: x86; O: Windows. N: Linaro Toolchain Working Group; E: linaro-toolchain@lists.linaro.org; T: ARM, AArch64; O: Linux, Windows (AArch64 only); ",MatchSource.DOCS,interpreter/llvm-project/llvm/RELEASE_TESTERS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/RELEASE_TESTERS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/RELEASE_TESTERS.TXT:288,Deployability,release,release,288,"This file is a list of the people responsible for ensuring that targets and; environments get tested and validated during the release process. They will also, in conjunction with the release manager and the code owners,; accept patches into stable release branches, tag critical bugs and release; stoppers as well as make sure that no regressions were observed on their; targets since the last release. N: Ben Pope; E: benpope81@gmail.com; T: x86; O: Ubuntu. N: Sylvestre Ledru; E: sylvestre@debian.org; T: All supported archs Debian/Ubuntu; O: Debian/Ubuntu packages. N: Nikola Smiljanic; E: popizdeh@gmail.com; T: x86; O: OpenSUSE, Fedora. N: Brian Cain; E: brian.cain@gmail.com; T: x86; O: SuSE Enterprise, CentOS. N: Bernhard Rosenkränzer; E: bero@linaro.org; T: x86; O: OpenMandriva. N: Dimitry Andric; E: dimitry@andric.com; T: x86; O: FreeBSD. N: Hans Wennborg; E: hans@chromium.org; T: x86; O: Windows. N: Linaro Toolchain Working Group; E: linaro-toolchain@lists.linaro.org; T: ARM, AArch64; O: Linux, Windows (AArch64 only); ",MatchSource.DOCS,interpreter/llvm-project/llvm/RELEASE_TESTERS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/RELEASE_TESTERS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/RELEASE_TESTERS.TXT:394,Deployability,release,release,394,"This file is a list of the people responsible for ensuring that targets and; environments get tested and validated during the release process. They will also, in conjunction with the release manager and the code owners,; accept patches into stable release branches, tag critical bugs and release; stoppers as well as make sure that no regressions were observed on their; targets since the last release. N: Ben Pope; E: benpope81@gmail.com; T: x86; O: Ubuntu. N: Sylvestre Ledru; E: sylvestre@debian.org; T: All supported archs Debian/Ubuntu; O: Debian/Ubuntu packages. N: Nikola Smiljanic; E: popizdeh@gmail.com; T: x86; O: OpenSUSE, Fedora. N: Brian Cain; E: brian.cain@gmail.com; T: x86; O: SuSE Enterprise, CentOS. N: Bernhard Rosenkränzer; E: bero@linaro.org; T: x86; O: OpenMandriva. N: Dimitry Andric; E: dimitry@andric.com; T: x86; O: FreeBSD. N: Hans Wennborg; E: hans@chromium.org; T: x86; O: Windows. N: Linaro Toolchain Working Group; E: linaro-toolchain@lists.linaro.org; T: ARM, AArch64; O: Linux, Windows (AArch64 only); ",MatchSource.DOCS,interpreter/llvm-project/llvm/RELEASE_TESTERS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/RELEASE_TESTERS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/RELEASE_TESTERS.TXT:105,Security,validat,validated,105,"This file is a list of the people responsible for ensuring that targets and; environments get tested and validated during the release process. They will also, in conjunction with the release manager and the code owners,; accept patches into stable release branches, tag critical bugs and release; stoppers as well as make sure that no regressions were observed on their; targets since the last release. N: Ben Pope; E: benpope81@gmail.com; T: x86; O: Ubuntu. N: Sylvestre Ledru; E: sylvestre@debian.org; T: All supported archs Debian/Ubuntu; O: Debian/Ubuntu packages. N: Nikola Smiljanic; E: popizdeh@gmail.com; T: x86; O: OpenSUSE, Fedora. N: Brian Cain; E: brian.cain@gmail.com; T: x86; O: SuSE Enterprise, CentOS. N: Bernhard Rosenkränzer; E: bero@linaro.org; T: x86; O: OpenMandriva. N: Dimitry Andric; E: dimitry@andric.com; T: x86; O: FreeBSD. N: Hans Wennborg; E: hans@chromium.org; T: x86; O: Windows. N: Linaro Toolchain Working Group; E: linaro-toolchain@lists.linaro.org; T: ARM, AArch64; O: Linux, Windows (AArch64 only); ",MatchSource.DOCS,interpreter/llvm-project/llvm/RELEASE_TESTERS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/RELEASE_TESTERS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/RELEASE_TESTERS.TXT:94,Testability,test,tested,94,"This file is a list of the people responsible for ensuring that targets and; environments get tested and validated during the release process. They will also, in conjunction with the release manager and the code owners,; accept patches into stable release branches, tag critical bugs and release; stoppers as well as make sure that no regressions were observed on their; targets since the last release. N: Ben Pope; E: benpope81@gmail.com; T: x86; O: Ubuntu. N: Sylvestre Ledru; E: sylvestre@debian.org; T: All supported archs Debian/Ubuntu; O: Debian/Ubuntu packages. N: Nikola Smiljanic; E: popizdeh@gmail.com; T: x86; O: OpenSUSE, Fedora. N: Brian Cain; E: brian.cain@gmail.com; T: x86; O: SuSE Enterprise, CentOS. N: Bernhard Rosenkränzer; E: bero@linaro.org; T: x86; O: OpenMandriva. N: Dimitry Andric; E: dimitry@andric.com; T: x86; O: FreeBSD. N: Hans Wennborg; E: hans@chromium.org; T: x86; O: Windows. N: Linaro Toolchain Working Group; E: linaro-toolchain@lists.linaro.org; T: ARM, AArch64; O: Linux, Windows (AArch64 only); ",MatchSource.DOCS,interpreter/llvm-project/llvm/RELEASE_TESTERS.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/RELEASE_TESTERS.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/CMakeLists.txt:3015,Deployability,install,install,3015,"f (LLVM_DOXYGEN_SVG); set(DOT_IMAGE_FORMAT ""svg""); else(); set(DOT_IMAGE_FORMAT ""png""); endif(). configure_file(${CMAKE_CURRENT_SOURCE_DIR}/doxygen.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/doxygen.cfg @ONLY). set(abs_top_srcdir); set(abs_top_builddir); set(DOT); set(enable_searchengine); set(searchengine_url); set(enable_server_based_search); set(enable_external_search); set(extra_search_mappings); set(clang_doxygen_generate_qhp); set(clang_doxygen_qch_filename); set(clang_doxygen_qhp_namespace); set(clang_doxygen_qhelpgenerator_path); set(clang_doxygen_qhp_cust_filter_name); set(clang_doxygen_qhp_cust_filter_attrs); set(DOT_IMAGE_FORMAT). add_custom_target(doxygen-clang; COMMAND ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/doxygen.cfg; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}; COMMENT ""Generating clang doxygen documentation."" VERBATIM). if (LLVM_BUILD_DOCS); add_dependencies(doxygen doxygen-clang); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/doxygen/html; DESTINATION docs/html); endif(); endif(); endif(). function (gen_rst_file_from_td output_file td_option source docs_targets); if (NOT EXISTS ""${CMAKE_CURRENT_SOURCE_DIR}/${source}""); message(FATAL_ERROR ""Cannot find source file: ${source} in ${CMAKE_CURRENT_SOURCE_DIR}""); endif(); get_filename_component(TABLEGEN_INCLUDE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/${source}"" DIRECTORY); list(APPEND LLVM_TABLEGEN_FLAGS ""-I${TABLEGEN_INCLUDE_DIR}""); clang_tablegen(${output_file} ${td_option} SOURCE ${source} TARGET ""gen-${output_file}""); foreach(target ${docs_targets}); add_dependencies(${target} gen-${output_file}); endforeach(); endfunction(). if (LLVM_ENABLE_SPHINX); include(AddSphinxTarget); if (SPHINX_FOUND AND (${SPHINX_OUTPUT_HTML} OR ${SPHINX_OUTPUT_MAN})); # Copy rst files to build directory before generating the html; # documentation. Some of the rst files are generated, so they; # only exist in the build directory. Sphinx needs all files in; # the same directory in",MatchSource.DOCS,interpreter/llvm-project/clang/docs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/CMakeLists.txt:3258,Integrability,message,message,3258,"set(extra_search_mappings); set(clang_doxygen_generate_qhp); set(clang_doxygen_qch_filename); set(clang_doxygen_qhp_namespace); set(clang_doxygen_qhelpgenerator_path); set(clang_doxygen_qhp_cust_filter_name); set(clang_doxygen_qhp_cust_filter_attrs); set(DOT_IMAGE_FORMAT). add_custom_target(doxygen-clang; COMMAND ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/doxygen.cfg; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}; COMMENT ""Generating clang doxygen documentation."" VERBATIM). if (LLVM_BUILD_DOCS); add_dependencies(doxygen doxygen-clang); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/doxygen/html; DESTINATION docs/html); endif(); endif(); endif(). function (gen_rst_file_from_td output_file td_option source docs_targets); if (NOT EXISTS ""${CMAKE_CURRENT_SOURCE_DIR}/${source}""); message(FATAL_ERROR ""Cannot find source file: ${source} in ${CMAKE_CURRENT_SOURCE_DIR}""); endif(); get_filename_component(TABLEGEN_INCLUDE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/${source}"" DIRECTORY); list(APPEND LLVM_TABLEGEN_FLAGS ""-I${TABLEGEN_INCLUDE_DIR}""); clang_tablegen(${output_file} ${td_option} SOURCE ${source} TARGET ""gen-${output_file}""); foreach(target ${docs_targets}); add_dependencies(${target} gen-${output_file}); endforeach(); endfunction(). if (LLVM_ENABLE_SPHINX); include(AddSphinxTarget); if (SPHINX_FOUND AND (${SPHINX_OUTPUT_HTML} OR ${SPHINX_OUTPUT_MAN})); # Copy rst files to build directory before generating the html; # documentation. Some of the rst files are generated, so they; # only exist in the build directory. Sphinx needs all files in; # the same directory in order to generate the html, so we need to; # copy all the non-gnerated rst files from the source to the build; # directory before we run sphinx.; add_custom_target(copy-clang-rst-docs; COMMAND ""${CMAKE_COMMAND}"" -E copy_directory; ""${CMAKE_CURRENT_SOURCE_DIR}"" ""${CMAKE_CURRENT_BINARY_DIR}"". COMMAND ""${CMAKE_COMMAND}"" -E copy_if_different; ""${CMAKE_CURRENT_SOURCE_DIR",MatchSource.DOCS,interpreter/llvm-project/clang/docs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/CMakeLists.txt:641,Modifiability,config,configure,641,"; if (DOXYGEN_FOUND); if (LLVM_ENABLE_DOXYGEN); set(abs_srcdir ${CMAKE_CURRENT_SOURCE_DIR}); set(abs_builddir ${CMAKE_CURRENT_BINARY_DIR}). if (HAVE_DOT); set(DOT ${LLVM_PATH_DOT}); endif(). if (LLVM_DOXYGEN_EXTERNAL_SEARCH); set(enable_searchengine ""YES""); set(searchengine_url ""${LLVM_DOXYGEN_SEARCHENGINE_URL}""); set(enable_server_based_search ""YES""); set(enable_external_search ""YES""); set(extra_search_mappings ""${LLVM_DOXYGEN_SEARCH_MAPPINGS}""); else(); set(enable_searchengine ""NO""); set(searchengine_url """"); set(enable_server_based_search ""NO""); set(enable_external_search ""NO""); set(extra_search_mappings """"); endif(). # If asked, configure doxygen for the creation of a Qt Compressed Help file.; if (LLVM_ENABLE_DOXYGEN_QT_HELP); set(CLANG_DOXYGEN_QCH_FILENAME ""org.llvm.clang.qch"" CACHE STRING; ""Filename of the Qt Compressed help file""); set(CLANG_DOXYGEN_QHP_NAMESPACE ""org.llvm.clang"" CACHE STRING; ""Namespace under which the intermediate Qt Help Project file lives""); set(CLANG_DOXYGEN_QHP_CUST_FILTER_NAME ""Clang ${CLANG_VERSION}"" CACHE STRING; ""See http://qt-project.org/doc/qt-4.8/qthelpproject.html#custom-filters""); set(CLANG_DOXYGEN_QHP_CUST_FILTER_ATTRS ""Clang,${CLANG_VERSION}"" CACHE STRING; ""See http://qt-project.org/doc/qt-4.8/qthelpproject.html#filter-attributes""); set(clang_doxygen_generate_qhp ""YES""); set(clang_doxygen_qch_filename ""${CLANG_DOXYGEN_QCH_FILENAME}""); set(clang_doxygen_qhp_namespace ""${CLANG_DOXYGEN_QHP_NAMESPACE}""); set(clang_doxygen_qhelpgenerator_path ""${LLVM_DOXYGEN_QHELPGENERATOR_PATH}""); set(clang_doxygen_qhp_cust_filter_name ""${CLANG_DOXYGEN_QHP_CUST_FILTER_NAME}""); set(clang_doxygen_qhp_cust_filter_attrs ""${CLANG_DOXYGEN_QHP_CUST_FILTER_ATTRS}""); else(); set(clang_doxygen_generate_qhp ""NO""); set(clang_doxygen_qch_filename """"); set(clang_doxygen_qhp_namespace """"); set(clang_doxygen_qhelpgenerator_path """"); set(clang_doxygen_qhp_cust_filter_name """"); set(clang_doxygen_qhp_cust_filter_attrs """"); endif(). option(LLVM_DOXYGEN_SVG; ""Use svg ",MatchSource.DOCS,interpreter/llvm-project/clang/docs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:724,Availability,avail,available,724,"# TODO: Set the install directory. include(ExternalProject). set(known_subdirs; ""libcxx""; ). foreach (dir ${known_subdirs}); if (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${dir}/CMakeLists.txt); add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/${dir}); endif(); endforeach(). function(get_ext_project_build_command out_var target); if (CMAKE_GENERATOR MATCHES ""Make""); # Use special command for Makefiles to support parallelism.; set(${out_var} ""$(MAKE)"" ""${target}"" PARENT_SCOPE); else(); set(${out_var} ${CMAKE_COMMAND} --build . --target ${target}; --config $<CONFIG> PARENT_SCOPE); endif(); endfunction(). set(COMPILER_RT_SRC_ROOT ${LLVM_MAIN_SRC_DIR}/projects/compiler-rt); # Fallback to the external path, if the other one isn't available.; # This is the same behavior (try ""internal"", then check the LLVM_EXTERNAL_...; # variable) as in add_llvm_external_project; if(NOT EXISTS ${COMPILER_RT_SRC_ROOT}); # We don't want to set it if LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR is """"; if(LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR); set(COMPILER_RT_SRC_ROOT ${LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR}); endif(); endif(). if(LLVM_BUILD_EXTERNAL_COMPILER_RT AND EXISTS ${COMPILER_RT_SRC_ROOT}/). # Add compiler-rt as an external project.; set(COMPILER_RT_PREFIX ${CMAKE_BINARY_DIR}/projects/compiler-rt). set(STAMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/compiler-rt-stamps/); set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/compiler-rt-bins/). add_custom_target(compiler-rt-clear; COMMAND ${CMAKE_COMMAND} -E remove_directory ${BINARY_DIR}; COMMAND ${CMAKE_COMMAND} -E remove_directory ${STAMP_DIR}; COMMENT ""Clobberring compiler-rt build and stamp directories""; ). # Find all variables that start with COMPILER_RT and populate a variable with; # them.; get_cmake_property(variableNames VARIABLES); foreach(variableName ${variableNames}); if(variableName MATCHES ""^COMPILER_RT""); string(REPLACE "";"" ""\;"" value ""${${variableName}}""); list(APPEND COMPILER_RT_PASSTHROUGH_VARIABLES; -D${variableName}=${value}); endif(); endforeach(). set(",MatchSource.DOCS,interpreter/llvm-project/clang/runtime/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:16,Deployability,install,install,16,"# TODO: Set the install directory. include(ExternalProject). set(known_subdirs; ""libcxx""; ). foreach (dir ${known_subdirs}); if (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${dir}/CMakeLists.txt); add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/${dir}); endif(); endforeach(). function(get_ext_project_build_command out_var target); if (CMAKE_GENERATOR MATCHES ""Make""); # Use special command for Makefiles to support parallelism.; set(${out_var} ""$(MAKE)"" ""${target}"" PARENT_SCOPE); else(); set(${out_var} ${CMAKE_COMMAND} --build . --target ${target}; --config $<CONFIG> PARENT_SCOPE); endif(); endfunction(). set(COMPILER_RT_SRC_ROOT ${LLVM_MAIN_SRC_DIR}/projects/compiler-rt); # Fallback to the external path, if the other one isn't available.; # This is the same behavior (try ""internal"", then check the LLVM_EXTERNAL_...; # variable) as in add_llvm_external_project; if(NOT EXISTS ${COMPILER_RT_SRC_ROOT}); # We don't want to set it if LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR is """"; if(LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR); set(COMPILER_RT_SRC_ROOT ${LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR}); endif(); endif(). if(LLVM_BUILD_EXTERNAL_COMPILER_RT AND EXISTS ${COMPILER_RT_SRC_ROOT}/). # Add compiler-rt as an external project.; set(COMPILER_RT_PREFIX ${CMAKE_BINARY_DIR}/projects/compiler-rt). set(STAMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/compiler-rt-stamps/); set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/compiler-rt-bins/). add_custom_target(compiler-rt-clear; COMMAND ${CMAKE_COMMAND} -E remove_directory ${BINARY_DIR}; COMMAND ${CMAKE_COMMAND} -E remove_directory ${STAMP_DIR}; COMMENT ""Clobberring compiler-rt build and stamp directories""; ). # Find all variables that start with COMPILER_RT and populate a variable with; # them.; get_cmake_property(variableNames VARIABLES); foreach(variableName ${variableNames}); if(variableName MATCHES ""^COMPILER_RT""); string(REPLACE "";"" ""\;"" value ""${${variableName}}""); list(APPEND COMPILER_RT_PASSTHROUGH_VARIABLES; -D${variableName}=${value}); endif(); endforeach(). set(",MatchSource.DOCS,interpreter/llvm-project/clang/runtime/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:4077,Deployability,install,install,4077,"_EXEC_OUTPUT_DIR=${LLVM_RUNTIME_OUTPUT_INTDIR}; -DCOMPILER_RT_INSTALL_PATH:PATH=${install_resource_dir}; -DCOMPILER_RT_INCLUDE_TESTS=${LLVM_INCLUDE_TESTS}; -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}; -DLLVM_LIBDIR_SUFFIX=${LLVM_LIBDIR_SUFFIX}; -DLLVM_RUNTIME_OUTPUT_INTDIR=${LLVM_RUNTIME_OUTPUT_INTDIR}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT:PATH=${CMAKE_OSX_SYSROOT}; ${COMPILER_RT_PASSTHROUGH_VARIABLES}; INSTALL_COMMAND """"; STEP_TARGETS configure build; USES_TERMINAL_CONFIGURE 1; USES_TERMINAL_BUILD 1; USES_TERMINAL_INSTALL 1; # Always run the build command so that incremental builds are correct.; BUILD_ALWAYS 1; ). get_ext_project_build_command(run_clean_compiler_rt clean); ExternalProject_Add_Step(compiler-rt clean; COMMAND ${run_clean_compiler_rt}; COMMENT ""Cleaning compiler-rt...""; DEPENDEES configure; DEPENDERS build; DEPENDS clang; WORKING_DIRECTORY ${BINARY_DIR}; ). install(CODE ""execute_process\(COMMAND \${CMAKE_COMMAND} -DCMAKE_INSTALL_PREFIX=\${CMAKE_INSTALL_PREFIX} -P ${BINARY_DIR}/cmake_install.cmake \)""; COMPONENT compiler-rt). add_llvm_install_targets(install-compiler-rt; DEPENDS compiler-rt; COMPONENT compiler-rt). # Add top-level targets that build specific compiler-rt runtimes.; set(COMPILER_RT_RUNTIMES fuzzer asan builtins dfsan lsan msan profile tsan ubsan ubsan-minimal); foreach(runtime ${COMPILER_RT_RUNTIMES}); get_ext_project_build_command(build_runtime_cmd ${runtime}); add_custom_target(${runtime}; COMMAND ${build_runtime_cmd}; DEPENDS compiler-rt-configure; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL); endforeach(). if(LLVM_INCLUDE_TESTS); # Add binaries that compiler-rt tests depend on.; set(COMPILER_RT_TEST_DEPENDENCIES; FileCheck count not llvm-nm llvm-objdump llvm-symbolizer llvm-jitlink lli split-file). # Add top-level targets for various compiler-rt test suites.; set(COMPILER_RT_TEST_SUITES; check-asan; check-asan-dynamic; check-cfi; check-cfi-and-supported; check-dfsan; check-fu",MatchSource.DOCS,interpreter/llvm-project/clang/runtime/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:4273,Deployability,install,install-compiler-rt,4273,"TESTS}; -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}; -DLLVM_LIBDIR_SUFFIX=${LLVM_LIBDIR_SUFFIX}; -DLLVM_RUNTIME_OUTPUT_INTDIR=${LLVM_RUNTIME_OUTPUT_INTDIR}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT:PATH=${CMAKE_OSX_SYSROOT}; ${COMPILER_RT_PASSTHROUGH_VARIABLES}; INSTALL_COMMAND """"; STEP_TARGETS configure build; USES_TERMINAL_CONFIGURE 1; USES_TERMINAL_BUILD 1; USES_TERMINAL_INSTALL 1; # Always run the build command so that incremental builds are correct.; BUILD_ALWAYS 1; ). get_ext_project_build_command(run_clean_compiler_rt clean); ExternalProject_Add_Step(compiler-rt clean; COMMAND ${run_clean_compiler_rt}; COMMENT ""Cleaning compiler-rt...""; DEPENDEES configure; DEPENDERS build; DEPENDS clang; WORKING_DIRECTORY ${BINARY_DIR}; ). install(CODE ""execute_process\(COMMAND \${CMAKE_COMMAND} -DCMAKE_INSTALL_PREFIX=\${CMAKE_INSTALL_PREFIX} -P ${BINARY_DIR}/cmake_install.cmake \)""; COMPONENT compiler-rt). add_llvm_install_targets(install-compiler-rt; DEPENDS compiler-rt; COMPONENT compiler-rt). # Add top-level targets that build specific compiler-rt runtimes.; set(COMPILER_RT_RUNTIMES fuzzer asan builtins dfsan lsan msan profile tsan ubsan ubsan-minimal); foreach(runtime ${COMPILER_RT_RUNTIMES}); get_ext_project_build_command(build_runtime_cmd ${runtime}); add_custom_target(${runtime}; COMMAND ${build_runtime_cmd}; DEPENDS compiler-rt-configure; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL); endforeach(). if(LLVM_INCLUDE_TESTS); # Add binaries that compiler-rt tests depend on.; set(COMPILER_RT_TEST_DEPENDENCIES; FileCheck count not llvm-nm llvm-objdump llvm-symbolizer llvm-jitlink lli split-file). # Add top-level targets for various compiler-rt test suites.; set(COMPILER_RT_TEST_SUITES; check-asan; check-asan-dynamic; check-cfi; check-cfi-and-supported; check-dfsan; check-fuzzer; check-gwp_asan; check-hwasan; check-lsan; check-msan; check-profile; check-safestack; check-sanitizer; check-tsan; check-ubsan; check-ubsan-mi",MatchSource.DOCS,interpreter/llvm-project/clang/runtime/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:4831,Integrability,depend,depend,4831,"WAYS 1; ). get_ext_project_build_command(run_clean_compiler_rt clean); ExternalProject_Add_Step(compiler-rt clean; COMMAND ${run_clean_compiler_rt}; COMMENT ""Cleaning compiler-rt...""; DEPENDEES configure; DEPENDERS build; DEPENDS clang; WORKING_DIRECTORY ${BINARY_DIR}; ). install(CODE ""execute_process\(COMMAND \${CMAKE_COMMAND} -DCMAKE_INSTALL_PREFIX=\${CMAKE_INSTALL_PREFIX} -P ${BINARY_DIR}/cmake_install.cmake \)""; COMPONENT compiler-rt). add_llvm_install_targets(install-compiler-rt; DEPENDS compiler-rt; COMPONENT compiler-rt). # Add top-level targets that build specific compiler-rt runtimes.; set(COMPILER_RT_RUNTIMES fuzzer asan builtins dfsan lsan msan profile tsan ubsan ubsan-minimal); foreach(runtime ${COMPILER_RT_RUNTIMES}); get_ext_project_build_command(build_runtime_cmd ${runtime}); add_custom_target(${runtime}; COMMAND ${build_runtime_cmd}; DEPENDS compiler-rt-configure; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL); endforeach(). if(LLVM_INCLUDE_TESTS); # Add binaries that compiler-rt tests depend on.; set(COMPILER_RT_TEST_DEPENDENCIES; FileCheck count not llvm-nm llvm-objdump llvm-symbolizer llvm-jitlink lli split-file). # Add top-level targets for various compiler-rt test suites.; set(COMPILER_RT_TEST_SUITES; check-asan; check-asan-dynamic; check-cfi; check-cfi-and-supported; check-dfsan; check-fuzzer; check-gwp_asan; check-hwasan; check-lsan; check-msan; check-profile; check-safestack; check-sanitizer; check-tsan; check-ubsan; check-ubsan-minimal; ); foreach(test_suite ${COMPILER_RT_TEST_SUITES}); get_ext_project_build_command(run_test_suite ${test_suite}); add_custom_target(${test_suite}; COMMAND ${run_test_suite}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM; USES_TERMINAL; ); endforeach(). # Add special target to run all compiler-rt test suites.; get_ext_project_build_command(run_check_compiler_rt check-all); add_custom_target(check-compiler-rt; COMMAND ${run_check_compiler_rt}; DEPEN",MatchSource.DOCS,interpreter/llvm-project/clang/runtime/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:6045,Integrability,depend,depends,6045,san lsan msan profile tsan ubsan ubsan-minimal); foreach(runtime ${COMPILER_RT_RUNTIMES}); get_ext_project_build_command(build_runtime_cmd ${runtime}); add_custom_target(${runtime}; COMMAND ${build_runtime_cmd}; DEPENDS compiler-rt-configure; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL); endforeach(). if(LLVM_INCLUDE_TESTS); # Add binaries that compiler-rt tests depend on.; set(COMPILER_RT_TEST_DEPENDENCIES; FileCheck count not llvm-nm llvm-objdump llvm-symbolizer llvm-jitlink lli split-file). # Add top-level targets for various compiler-rt test suites.; set(COMPILER_RT_TEST_SUITES; check-asan; check-asan-dynamic; check-cfi; check-cfi-and-supported; check-dfsan; check-fuzzer; check-gwp_asan; check-hwasan; check-lsan; check-msan; check-profile; check-safestack; check-sanitizer; check-tsan; check-ubsan; check-ubsan-minimal; ); foreach(test_suite ${COMPILER_RT_TEST_SUITES}); get_ext_project_build_command(run_test_suite ${test_suite}); add_custom_target(${test_suite}; COMMAND ${run_test_suite}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM; USES_TERMINAL; ); endforeach(). # Add special target to run all compiler-rt test suites.; get_ext_project_build_command(run_check_compiler_rt check-all); add_custom_target(check-compiler-rt; COMMAND ${run_check_compiler_rt}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL). # Add special target to run all compiler-rt test suites.; get_ext_project_build_command(run_check_compiler_rt compiler-rt-test-depends); add_custom_target(compiler-rt-test-depends; COMMAND ${run_check_compiler_rt}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL); set_property(GLOBAL APPEND PROPERTY LLVM_ALL_ADDITIONAL_TEST_DEPENDS compiler-rt-test-depends); set_property(GLOBAL APPEND PROPERTY LLVM_ALL_ADDITIONAL_TEST_TARGETS check-compiler-rt); endif(); endif(); ,MatchSource.DOCS,interpreter/llvm-project/clang/runtime/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:6090,Integrability,depend,depends,6090,san lsan msan profile tsan ubsan ubsan-minimal); foreach(runtime ${COMPILER_RT_RUNTIMES}); get_ext_project_build_command(build_runtime_cmd ${runtime}); add_custom_target(${runtime}; COMMAND ${build_runtime_cmd}; DEPENDS compiler-rt-configure; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL); endforeach(). if(LLVM_INCLUDE_TESTS); # Add binaries that compiler-rt tests depend on.; set(COMPILER_RT_TEST_DEPENDENCIES; FileCheck count not llvm-nm llvm-objdump llvm-symbolizer llvm-jitlink lli split-file). # Add top-level targets for various compiler-rt test suites.; set(COMPILER_RT_TEST_SUITES; check-asan; check-asan-dynamic; check-cfi; check-cfi-and-supported; check-dfsan; check-fuzzer; check-gwp_asan; check-hwasan; check-lsan; check-msan; check-profile; check-safestack; check-sanitizer; check-tsan; check-ubsan; check-ubsan-minimal; ); foreach(test_suite ${COMPILER_RT_TEST_SUITES}); get_ext_project_build_command(run_test_suite ${test_suite}); add_custom_target(${test_suite}; COMMAND ${run_test_suite}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM; USES_TERMINAL; ); endforeach(). # Add special target to run all compiler-rt test suites.; get_ext_project_build_command(run_check_compiler_rt check-all); add_custom_target(check-compiler-rt; COMMAND ${run_check_compiler_rt}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL). # Add special target to run all compiler-rt test suites.; get_ext_project_build_command(run_check_compiler_rt compiler-rt-test-depends); add_custom_target(compiler-rt-test-depends; COMMAND ${run_check_compiler_rt}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL); set_property(GLOBAL APPEND PROPERTY LLVM_ALL_ADDITIONAL_TEST_DEPENDS compiler-rt-test-depends); set_property(GLOBAL APPEND PROPERTY LLVM_ALL_ADDITIONAL_TEST_TARGETS check-compiler-rt); endif(); endif(); ,MatchSource.DOCS,interpreter/llvm-project/clang/runtime/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:6337,Integrability,depend,depends,6337,san lsan msan profile tsan ubsan ubsan-minimal); foreach(runtime ${COMPILER_RT_RUNTIMES}); get_ext_project_build_command(build_runtime_cmd ${runtime}); add_custom_target(${runtime}; COMMAND ${build_runtime_cmd}; DEPENDS compiler-rt-configure; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL); endforeach(). if(LLVM_INCLUDE_TESTS); # Add binaries that compiler-rt tests depend on.; set(COMPILER_RT_TEST_DEPENDENCIES; FileCheck count not llvm-nm llvm-objdump llvm-symbolizer llvm-jitlink lli split-file). # Add top-level targets for various compiler-rt test suites.; set(COMPILER_RT_TEST_SUITES; check-asan; check-asan-dynamic; check-cfi; check-cfi-and-supported; check-dfsan; check-fuzzer; check-gwp_asan; check-hwasan; check-lsan; check-msan; check-profile; check-safestack; check-sanitizer; check-tsan; check-ubsan; check-ubsan-minimal; ); foreach(test_suite ${COMPILER_RT_TEST_SUITES}); get_ext_project_build_command(run_test_suite ${test_suite}); add_custom_target(${test_suite}; COMMAND ${run_test_suite}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM; USES_TERMINAL; ); endforeach(). # Add special target to run all compiler-rt test suites.; get_ext_project_build_command(run_check_compiler_rt check-all); add_custom_target(check-compiler-rt; COMMAND ${run_check_compiler_rt}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL). # Add special target to run all compiler-rt test suites.; get_ext_project_build_command(run_check_compiler_rt compiler-rt-test-depends); add_custom_target(compiler-rt-test-depends; COMMAND ${run_check_compiler_rt}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL); set_property(GLOBAL APPEND PROPERTY LLVM_ALL_ADDITIONAL_TEST_DEPENDS compiler-rt-test-depends); set_property(GLOBAL APPEND PROPERTY LLVM_ALL_ADDITIONAL_TEST_TARGETS check-compiler-rt); endif(); endif(); ,MatchSource.DOCS,interpreter/llvm-project/clang/runtime/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:543,Modifiability,config,config,543,"# TODO: Set the install directory. include(ExternalProject). set(known_subdirs; ""libcxx""; ). foreach (dir ${known_subdirs}); if (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${dir}/CMakeLists.txt); add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/${dir}); endif(); endforeach(). function(get_ext_project_build_command out_var target); if (CMAKE_GENERATOR MATCHES ""Make""); # Use special command for Makefiles to support parallelism.; set(${out_var} ""$(MAKE)"" ""${target}"" PARENT_SCOPE); else(); set(${out_var} ${CMAKE_COMMAND} --build . --target ${target}; --config $<CONFIG> PARENT_SCOPE); endif(); endfunction(). set(COMPILER_RT_SRC_ROOT ${LLVM_MAIN_SRC_DIR}/projects/compiler-rt); # Fallback to the external path, if the other one isn't available.; # This is the same behavior (try ""internal"", then check the LLVM_EXTERNAL_...; # variable) as in add_llvm_external_project; if(NOT EXISTS ${COMPILER_RT_SRC_ROOT}); # We don't want to set it if LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR is """"; if(LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR); set(COMPILER_RT_SRC_ROOT ${LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR}); endif(); endif(). if(LLVM_BUILD_EXTERNAL_COMPILER_RT AND EXISTS ${COMPILER_RT_SRC_ROOT}/). # Add compiler-rt as an external project.; set(COMPILER_RT_PREFIX ${CMAKE_BINARY_DIR}/projects/compiler-rt). set(STAMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/compiler-rt-stamps/); set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/compiler-rt-bins/). add_custom_target(compiler-rt-clear; COMMAND ${CMAKE_COMMAND} -E remove_directory ${BINARY_DIR}; COMMAND ${CMAKE_COMMAND} -E remove_directory ${STAMP_DIR}; COMMENT ""Clobberring compiler-rt build and stamp directories""; ). # Find all variables that start with COMPILER_RT and populate a variable with; # them.; get_cmake_property(variableNames VARIABLES); foreach(variableName ${variableNames}); if(variableName MATCHES ""^COMPILER_RT""); string(REPLACE "";"" ""\;"" value ""${${variableName}}""); list(APPEND COMPILER_RT_PASSTHROUGH_VARIABLES; -D${variableName}=${value}); endif(); endforeach(). set(",MatchSource.DOCS,interpreter/llvm-project/clang/runtime/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:817,Modifiability,variab,variable,817,"# TODO: Set the install directory. include(ExternalProject). set(known_subdirs; ""libcxx""; ). foreach (dir ${known_subdirs}); if (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${dir}/CMakeLists.txt); add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/${dir}); endif(); endforeach(). function(get_ext_project_build_command out_var target); if (CMAKE_GENERATOR MATCHES ""Make""); # Use special command for Makefiles to support parallelism.; set(${out_var} ""$(MAKE)"" ""${target}"" PARENT_SCOPE); else(); set(${out_var} ${CMAKE_COMMAND} --build . --target ${target}; --config $<CONFIG> PARENT_SCOPE); endif(); endfunction(). set(COMPILER_RT_SRC_ROOT ${LLVM_MAIN_SRC_DIR}/projects/compiler-rt); # Fallback to the external path, if the other one isn't available.; # This is the same behavior (try ""internal"", then check the LLVM_EXTERNAL_...; # variable) as in add_llvm_external_project; if(NOT EXISTS ${COMPILER_RT_SRC_ROOT}); # We don't want to set it if LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR is """"; if(LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR); set(COMPILER_RT_SRC_ROOT ${LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR}); endif(); endif(). if(LLVM_BUILD_EXTERNAL_COMPILER_RT AND EXISTS ${COMPILER_RT_SRC_ROOT}/). # Add compiler-rt as an external project.; set(COMPILER_RT_PREFIX ${CMAKE_BINARY_DIR}/projects/compiler-rt). set(STAMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/compiler-rt-stamps/); set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/compiler-rt-bins/). add_custom_target(compiler-rt-clear; COMMAND ${CMAKE_COMMAND} -E remove_directory ${BINARY_DIR}; COMMAND ${CMAKE_COMMAND} -E remove_directory ${STAMP_DIR}; COMMENT ""Clobberring compiler-rt build and stamp directories""; ). # Find all variables that start with COMPILER_RT and populate a variable with; # them.; get_cmake_property(variableNames VARIABLES); foreach(variableName ${variableNames}); if(variableName MATCHES ""^COMPILER_RT""); string(REPLACE "";"" ""\;"" value ""${${variableName}}""); list(APPEND COMPILER_RT_PASSTHROUGH_VARIABLES; -D${variableName}=${value}); endif(); endforeach(). set(",MatchSource.DOCS,interpreter/llvm-project/clang/runtime/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:1642,Modifiability,variab,variables,1642,"lback to the external path, if the other one isn't available.; # This is the same behavior (try ""internal"", then check the LLVM_EXTERNAL_...; # variable) as in add_llvm_external_project; if(NOT EXISTS ${COMPILER_RT_SRC_ROOT}); # We don't want to set it if LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR is """"; if(LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR); set(COMPILER_RT_SRC_ROOT ${LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR}); endif(); endif(). if(LLVM_BUILD_EXTERNAL_COMPILER_RT AND EXISTS ${COMPILER_RT_SRC_ROOT}/). # Add compiler-rt as an external project.; set(COMPILER_RT_PREFIX ${CMAKE_BINARY_DIR}/projects/compiler-rt). set(STAMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/compiler-rt-stamps/); set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/compiler-rt-bins/). add_custom_target(compiler-rt-clear; COMMAND ${CMAKE_COMMAND} -E remove_directory ${BINARY_DIR}; COMMAND ${CMAKE_COMMAND} -E remove_directory ${STAMP_DIR}; COMMENT ""Clobberring compiler-rt build and stamp directories""; ). # Find all variables that start with COMPILER_RT and populate a variable with; # them.; get_cmake_property(variableNames VARIABLES); foreach(variableName ${variableNames}); if(variableName MATCHES ""^COMPILER_RT""); string(REPLACE "";"" ""\;"" value ""${${variableName}}""); list(APPEND COMPILER_RT_PASSTHROUGH_VARIABLES; -D${variableName}=${value}); endif(); endforeach(). set(compiler_rt_configure_deps); if(TARGET cxx-headers); list(APPEND compiler_rt_configure_deps ""cxx-headers""); endif(); if(LLVM_INCLUDE_TESTS); list(APPEND compiler_rt_configure_deps LLVMTestingSupport); endif(). include(GetClangResourceDir); get_clang_resource_dir(output_resource_dir PREFIX ${LLVM_BINARY_DIR}); get_clang_resource_dir(install_resource_dir); ExternalProject_Add(compiler-rt; DEPENDS llvm-config clang ${compiler_rt_configure_deps}; PREFIX ${COMPILER_RT_PREFIX}; SOURCE_DIR ${COMPILER_RT_SRC_ROOT}; STAMP_DIR ${STAMP_DIR}; BINARY_DIR ${BINARY_DIR}; CMAKE_ARGS ${CLANG_COMPILER_RT_CMAKE_ARGS}; -DCMAKE_C_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/clang; -DCMAKE_CX",MatchSource.DOCS,interpreter/llvm-project/clang/runtime/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:1695,Modifiability,variab,variable,1695,"lback to the external path, if the other one isn't available.; # This is the same behavior (try ""internal"", then check the LLVM_EXTERNAL_...; # variable) as in add_llvm_external_project; if(NOT EXISTS ${COMPILER_RT_SRC_ROOT}); # We don't want to set it if LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR is """"; if(LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR); set(COMPILER_RT_SRC_ROOT ${LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR}); endif(); endif(). if(LLVM_BUILD_EXTERNAL_COMPILER_RT AND EXISTS ${COMPILER_RT_SRC_ROOT}/). # Add compiler-rt as an external project.; set(COMPILER_RT_PREFIX ${CMAKE_BINARY_DIR}/projects/compiler-rt). set(STAMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/compiler-rt-stamps/); set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/compiler-rt-bins/). add_custom_target(compiler-rt-clear; COMMAND ${CMAKE_COMMAND} -E remove_directory ${BINARY_DIR}; COMMAND ${CMAKE_COMMAND} -E remove_directory ${STAMP_DIR}; COMMENT ""Clobberring compiler-rt build and stamp directories""; ). # Find all variables that start with COMPILER_RT and populate a variable with; # them.; get_cmake_property(variableNames VARIABLES); foreach(variableName ${variableNames}); if(variableName MATCHES ""^COMPILER_RT""); string(REPLACE "";"" ""\;"" value ""${${variableName}}""); list(APPEND COMPILER_RT_PASSTHROUGH_VARIABLES; -D${variableName}=${value}); endif(); endforeach(). set(compiler_rt_configure_deps); if(TARGET cxx-headers); list(APPEND compiler_rt_configure_deps ""cxx-headers""); endif(); if(LLVM_INCLUDE_TESTS); list(APPEND compiler_rt_configure_deps LLVMTestingSupport); endif(). include(GetClangResourceDir); get_clang_resource_dir(output_resource_dir PREFIX ${LLVM_BINARY_DIR}); get_clang_resource_dir(install_resource_dir); ExternalProject_Add(compiler-rt; DEPENDS llvm-config clang ${compiler_rt_configure_deps}; PREFIX ${COMPILER_RT_PREFIX}; SOURCE_DIR ${COMPILER_RT_SRC_ROOT}; STAMP_DIR ${STAMP_DIR}; BINARY_DIR ${BINARY_DIR}; CMAKE_ARGS ${CLANG_COMPILER_RT_CMAKE_ARGS}; -DCMAKE_C_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/clang; -DCMAKE_CX",MatchSource.DOCS,interpreter/llvm-project/clang/runtime/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:1738,Modifiability,variab,variableNames,1738,"ct; if(NOT EXISTS ${COMPILER_RT_SRC_ROOT}); # We don't want to set it if LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR is """"; if(LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR); set(COMPILER_RT_SRC_ROOT ${LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR}); endif(); endif(). if(LLVM_BUILD_EXTERNAL_COMPILER_RT AND EXISTS ${COMPILER_RT_SRC_ROOT}/). # Add compiler-rt as an external project.; set(COMPILER_RT_PREFIX ${CMAKE_BINARY_DIR}/projects/compiler-rt). set(STAMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/compiler-rt-stamps/); set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/compiler-rt-bins/). add_custom_target(compiler-rt-clear; COMMAND ${CMAKE_COMMAND} -E remove_directory ${BINARY_DIR}; COMMAND ${CMAKE_COMMAND} -E remove_directory ${STAMP_DIR}; COMMENT ""Clobberring compiler-rt build and stamp directories""; ). # Find all variables that start with COMPILER_RT and populate a variable with; # them.; get_cmake_property(variableNames VARIABLES); foreach(variableName ${variableNames}); if(variableName MATCHES ""^COMPILER_RT""); string(REPLACE "";"" ""\;"" value ""${${variableName}}""); list(APPEND COMPILER_RT_PASSTHROUGH_VARIABLES; -D${variableName}=${value}); endif(); endforeach(). set(compiler_rt_configure_deps); if(TARGET cxx-headers); list(APPEND compiler_rt_configure_deps ""cxx-headers""); endif(); if(LLVM_INCLUDE_TESTS); list(APPEND compiler_rt_configure_deps LLVMTestingSupport); endif(). include(GetClangResourceDir); get_clang_resource_dir(output_resource_dir PREFIX ${LLVM_BINARY_DIR}); get_clang_resource_dir(install_resource_dir); ExternalProject_Add(compiler-rt; DEPENDS llvm-config clang ${compiler_rt_configure_deps}; PREFIX ${COMPILER_RT_PREFIX}; SOURCE_DIR ${COMPILER_RT_SRC_ROOT}; STAMP_DIR ${STAMP_DIR}; BINARY_DIR ${BINARY_DIR}; CMAKE_ARGS ${CLANG_COMPILER_RT_CMAKE_ARGS}; -DCMAKE_C_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/clang; -DCMAKE_CXX_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/clang++; -DCMAKE_ASM_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/clang; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_MAKE_PROGRAM=${CMAKE_MAKE_P",MatchSource.DOCS,interpreter/llvm-project/clang/runtime/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:1772,Modifiability,variab,variableName,1772,"ct; if(NOT EXISTS ${COMPILER_RT_SRC_ROOT}); # We don't want to set it if LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR is """"; if(LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR); set(COMPILER_RT_SRC_ROOT ${LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR}); endif(); endif(). if(LLVM_BUILD_EXTERNAL_COMPILER_RT AND EXISTS ${COMPILER_RT_SRC_ROOT}/). # Add compiler-rt as an external project.; set(COMPILER_RT_PREFIX ${CMAKE_BINARY_DIR}/projects/compiler-rt). set(STAMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/compiler-rt-stamps/); set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/compiler-rt-bins/). add_custom_target(compiler-rt-clear; COMMAND ${CMAKE_COMMAND} -E remove_directory ${BINARY_DIR}; COMMAND ${CMAKE_COMMAND} -E remove_directory ${STAMP_DIR}; COMMENT ""Clobberring compiler-rt build and stamp directories""; ). # Find all variables that start with COMPILER_RT and populate a variable with; # them.; get_cmake_property(variableNames VARIABLES); foreach(variableName ${variableNames}); if(variableName MATCHES ""^COMPILER_RT""); string(REPLACE "";"" ""\;"" value ""${${variableName}}""); list(APPEND COMPILER_RT_PASSTHROUGH_VARIABLES; -D${variableName}=${value}); endif(); endforeach(). set(compiler_rt_configure_deps); if(TARGET cxx-headers); list(APPEND compiler_rt_configure_deps ""cxx-headers""); endif(); if(LLVM_INCLUDE_TESTS); list(APPEND compiler_rt_configure_deps LLVMTestingSupport); endif(). include(GetClangResourceDir); get_clang_resource_dir(output_resource_dir PREFIX ${LLVM_BINARY_DIR}); get_clang_resource_dir(install_resource_dir); ExternalProject_Add(compiler-rt; DEPENDS llvm-config clang ${compiler_rt_configure_deps}; PREFIX ${COMPILER_RT_PREFIX}; SOURCE_DIR ${COMPILER_RT_SRC_ROOT}; STAMP_DIR ${STAMP_DIR}; BINARY_DIR ${BINARY_DIR}; CMAKE_ARGS ${CLANG_COMPILER_RT_CMAKE_ARGS}; -DCMAKE_C_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/clang; -DCMAKE_CXX_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/clang++; -DCMAKE_ASM_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/clang; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_MAKE_PROGRAM=${CMAKE_MAKE_P",MatchSource.DOCS,interpreter/llvm-project/clang/runtime/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:1787,Modifiability,variab,variableNames,1787,"ct; if(NOT EXISTS ${COMPILER_RT_SRC_ROOT}); # We don't want to set it if LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR is """"; if(LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR); set(COMPILER_RT_SRC_ROOT ${LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR}); endif(); endif(). if(LLVM_BUILD_EXTERNAL_COMPILER_RT AND EXISTS ${COMPILER_RT_SRC_ROOT}/). # Add compiler-rt as an external project.; set(COMPILER_RT_PREFIX ${CMAKE_BINARY_DIR}/projects/compiler-rt). set(STAMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/compiler-rt-stamps/); set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/compiler-rt-bins/). add_custom_target(compiler-rt-clear; COMMAND ${CMAKE_COMMAND} -E remove_directory ${BINARY_DIR}; COMMAND ${CMAKE_COMMAND} -E remove_directory ${STAMP_DIR}; COMMENT ""Clobberring compiler-rt build and stamp directories""; ). # Find all variables that start with COMPILER_RT and populate a variable with; # them.; get_cmake_property(variableNames VARIABLES); foreach(variableName ${variableNames}); if(variableName MATCHES ""^COMPILER_RT""); string(REPLACE "";"" ""\;"" value ""${${variableName}}""); list(APPEND COMPILER_RT_PASSTHROUGH_VARIABLES; -D${variableName}=${value}); endif(); endforeach(). set(compiler_rt_configure_deps); if(TARGET cxx-headers); list(APPEND compiler_rt_configure_deps ""cxx-headers""); endif(); if(LLVM_INCLUDE_TESTS); list(APPEND compiler_rt_configure_deps LLVMTestingSupport); endif(). include(GetClangResourceDir); get_clang_resource_dir(output_resource_dir PREFIX ${LLVM_BINARY_DIR}); get_clang_resource_dir(install_resource_dir); ExternalProject_Add(compiler-rt; DEPENDS llvm-config clang ${compiler_rt_configure_deps}; PREFIX ${COMPILER_RT_PREFIX}; SOURCE_DIR ${COMPILER_RT_SRC_ROOT}; STAMP_DIR ${STAMP_DIR}; BINARY_DIR ${BINARY_DIR}; CMAKE_ARGS ${CLANG_COMPILER_RT_CMAKE_ARGS}; -DCMAKE_C_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/clang; -DCMAKE_CXX_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/clang++; -DCMAKE_ASM_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/clang; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_MAKE_PROGRAM=${CMAKE_MAKE_P",MatchSource.DOCS,interpreter/llvm-project/clang/runtime/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:1807,Modifiability,variab,variableName,1807,"ct; if(NOT EXISTS ${COMPILER_RT_SRC_ROOT}); # We don't want to set it if LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR is """"; if(LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR); set(COMPILER_RT_SRC_ROOT ${LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR}); endif(); endif(). if(LLVM_BUILD_EXTERNAL_COMPILER_RT AND EXISTS ${COMPILER_RT_SRC_ROOT}/). # Add compiler-rt as an external project.; set(COMPILER_RT_PREFIX ${CMAKE_BINARY_DIR}/projects/compiler-rt). set(STAMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/compiler-rt-stamps/); set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/compiler-rt-bins/). add_custom_target(compiler-rt-clear; COMMAND ${CMAKE_COMMAND} -E remove_directory ${BINARY_DIR}; COMMAND ${CMAKE_COMMAND} -E remove_directory ${STAMP_DIR}; COMMENT ""Clobberring compiler-rt build and stamp directories""; ). # Find all variables that start with COMPILER_RT and populate a variable with; # them.; get_cmake_property(variableNames VARIABLES); foreach(variableName ${variableNames}); if(variableName MATCHES ""^COMPILER_RT""); string(REPLACE "";"" ""\;"" value ""${${variableName}}""); list(APPEND COMPILER_RT_PASSTHROUGH_VARIABLES; -D${variableName}=${value}); endif(); endforeach(). set(compiler_rt_configure_deps); if(TARGET cxx-headers); list(APPEND compiler_rt_configure_deps ""cxx-headers""); endif(); if(LLVM_INCLUDE_TESTS); list(APPEND compiler_rt_configure_deps LLVMTestingSupport); endif(). include(GetClangResourceDir); get_clang_resource_dir(output_resource_dir PREFIX ${LLVM_BINARY_DIR}); get_clang_resource_dir(install_resource_dir); ExternalProject_Add(compiler-rt; DEPENDS llvm-config clang ${compiler_rt_configure_deps}; PREFIX ${COMPILER_RT_PREFIX}; SOURCE_DIR ${COMPILER_RT_SRC_ROOT}; STAMP_DIR ${STAMP_DIR}; BINARY_DIR ${BINARY_DIR}; CMAKE_ARGS ${CLANG_COMPILER_RT_CMAKE_ARGS}; -DCMAKE_C_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/clang; -DCMAKE_CXX_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/clang++; -DCMAKE_ASM_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/clang; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_MAKE_PROGRAM=${CMAKE_MAKE_P",MatchSource.DOCS,interpreter/llvm-project/clang/runtime/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:1880,Modifiability,variab,variableName,1880,"ct; if(NOT EXISTS ${COMPILER_RT_SRC_ROOT}); # We don't want to set it if LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR is """"; if(LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR); set(COMPILER_RT_SRC_ROOT ${LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR}); endif(); endif(). if(LLVM_BUILD_EXTERNAL_COMPILER_RT AND EXISTS ${COMPILER_RT_SRC_ROOT}/). # Add compiler-rt as an external project.; set(COMPILER_RT_PREFIX ${CMAKE_BINARY_DIR}/projects/compiler-rt). set(STAMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/compiler-rt-stamps/); set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/compiler-rt-bins/). add_custom_target(compiler-rt-clear; COMMAND ${CMAKE_COMMAND} -E remove_directory ${BINARY_DIR}; COMMAND ${CMAKE_COMMAND} -E remove_directory ${STAMP_DIR}; COMMENT ""Clobberring compiler-rt build and stamp directories""; ). # Find all variables that start with COMPILER_RT and populate a variable with; # them.; get_cmake_property(variableNames VARIABLES); foreach(variableName ${variableNames}); if(variableName MATCHES ""^COMPILER_RT""); string(REPLACE "";"" ""\;"" value ""${${variableName}}""); list(APPEND COMPILER_RT_PASSTHROUGH_VARIABLES; -D${variableName}=${value}); endif(); endforeach(). set(compiler_rt_configure_deps); if(TARGET cxx-headers); list(APPEND compiler_rt_configure_deps ""cxx-headers""); endif(); if(LLVM_INCLUDE_TESTS); list(APPEND compiler_rt_configure_deps LLVMTestingSupport); endif(). include(GetClangResourceDir); get_clang_resource_dir(output_resource_dir PREFIX ${LLVM_BINARY_DIR}); get_clang_resource_dir(install_resource_dir); ExternalProject_Add(compiler-rt; DEPENDS llvm-config clang ${compiler_rt_configure_deps}; PREFIX ${COMPILER_RT_PREFIX}; SOURCE_DIR ${COMPILER_RT_SRC_ROOT}; STAMP_DIR ${STAMP_DIR}; BINARY_DIR ${BINARY_DIR}; CMAKE_ARGS ${CLANG_COMPILER_RT_CMAKE_ARGS}; -DCMAKE_C_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/clang; -DCMAKE_CXX_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/clang++; -DCMAKE_ASM_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/clang; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_MAKE_PROGRAM=${CMAKE_MAKE_P",MatchSource.DOCS,interpreter/llvm-project/clang/runtime/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:1949,Modifiability,variab,variableName,1949,"ct; if(NOT EXISTS ${COMPILER_RT_SRC_ROOT}); # We don't want to set it if LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR is """"; if(LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR); set(COMPILER_RT_SRC_ROOT ${LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR}); endif(); endif(). if(LLVM_BUILD_EXTERNAL_COMPILER_RT AND EXISTS ${COMPILER_RT_SRC_ROOT}/). # Add compiler-rt as an external project.; set(COMPILER_RT_PREFIX ${CMAKE_BINARY_DIR}/projects/compiler-rt). set(STAMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/compiler-rt-stamps/); set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/compiler-rt-bins/). add_custom_target(compiler-rt-clear; COMMAND ${CMAKE_COMMAND} -E remove_directory ${BINARY_DIR}; COMMAND ${CMAKE_COMMAND} -E remove_directory ${STAMP_DIR}; COMMENT ""Clobberring compiler-rt build and stamp directories""; ). # Find all variables that start with COMPILER_RT and populate a variable with; # them.; get_cmake_property(variableNames VARIABLES); foreach(variableName ${variableNames}); if(variableName MATCHES ""^COMPILER_RT""); string(REPLACE "";"" ""\;"" value ""${${variableName}}""); list(APPEND COMPILER_RT_PASSTHROUGH_VARIABLES; -D${variableName}=${value}); endif(); endforeach(). set(compiler_rt_configure_deps); if(TARGET cxx-headers); list(APPEND compiler_rt_configure_deps ""cxx-headers""); endif(); if(LLVM_INCLUDE_TESTS); list(APPEND compiler_rt_configure_deps LLVMTestingSupport); endif(). include(GetClangResourceDir); get_clang_resource_dir(output_resource_dir PREFIX ${LLVM_BINARY_DIR}); get_clang_resource_dir(install_resource_dir); ExternalProject_Add(compiler-rt; DEPENDS llvm-config clang ${compiler_rt_configure_deps}; PREFIX ${COMPILER_RT_PREFIX}; SOURCE_DIR ${COMPILER_RT_SRC_ROOT}; STAMP_DIR ${STAMP_DIR}; BINARY_DIR ${BINARY_DIR}; CMAKE_ARGS ${CLANG_COMPILER_RT_CMAKE_ARGS}; -DCMAKE_C_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/clang; -DCMAKE_CXX_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/clang++; -DCMAKE_ASM_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/clang; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_MAKE_PROGRAM=${CMAKE_MAKE_P",MatchSource.DOCS,interpreter/llvm-project/clang/runtime/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:2404,Modifiability,config,config,2404,"ompiler_rt_configure_deps); if(TARGET cxx-headers); list(APPEND compiler_rt_configure_deps ""cxx-headers""); endif(); if(LLVM_INCLUDE_TESTS); list(APPEND compiler_rt_configure_deps LLVMTestingSupport); endif(). include(GetClangResourceDir); get_clang_resource_dir(output_resource_dir PREFIX ${LLVM_BINARY_DIR}); get_clang_resource_dir(install_resource_dir); ExternalProject_Add(compiler-rt; DEPENDS llvm-config clang ${compiler_rt_configure_deps}; PREFIX ${COMPILER_RT_PREFIX}; SOURCE_DIR ${COMPILER_RT_SRC_ROOT}; STAMP_DIR ${STAMP_DIR}; BINARY_DIR ${BINARY_DIR}; CMAKE_ARGS ${CLANG_COMPILER_RT_CMAKE_ARGS}; -DCMAKE_C_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/clang; -DCMAKE_CXX_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/clang++; -DCMAKE_ASM_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/clang; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_MAKE_PROGRAM=${CMAKE_MAKE_PROGRAM}; -DCMAKE_C_COMPILER_LAUNCHER=${CMAKE_C_COMPILER_LAUNCHER}; -DCMAKE_CXX_COMPILER_LAUNCHER=${CMAKE_CXX_COMPILER_LAUNCHER}; -DLLVM_CONFIG_PATH=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-config; -DLLVM_LIT_ARGS=${LLVM_LIT_ARGS}; -DCOMPILER_RT_OUTPUT_DIR=${output_resource_dir}; -DCOMPILER_RT_EXEC_OUTPUT_DIR=${LLVM_RUNTIME_OUTPUT_INTDIR}; -DCOMPILER_RT_INSTALL_PATH:PATH=${install_resource_dir}; -DCOMPILER_RT_INCLUDE_TESTS=${LLVM_INCLUDE_TESTS}; -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}; -DLLVM_LIBDIR_SUFFIX=${LLVM_LIBDIR_SUFFIX}; -DLLVM_RUNTIME_OUTPUT_INTDIR=${LLVM_RUNTIME_OUTPUT_INTDIR}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT:PATH=${CMAKE_OSX_SYSROOT}; ${COMPILER_RT_PASSTHROUGH_VARIABLES}; INSTALL_COMMAND """"; STEP_TARGETS configure build; USES_TERMINAL_CONFIGURE 1; USES_TERMINAL_BUILD 1; USES_TERMINAL_INSTALL 1; # Always run the build command so that incremental builds are correct.; BUILD_ALWAYS 1; ). get_ext_project_build_command(run_clean_compiler_rt clean); ExternalProject_Add_Step(compiler-rt clean; COMMAND ${run_clean_compiler_rt}; COMMENT ""Cleaning compiler-rt...""; DEPENDEES conf",MatchSource.DOCS,interpreter/llvm-project/clang/runtime/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:3040,Modifiability,config,config,3040,"ompiler_rt_configure_deps); if(TARGET cxx-headers); list(APPEND compiler_rt_configure_deps ""cxx-headers""); endif(); if(LLVM_INCLUDE_TESTS); list(APPEND compiler_rt_configure_deps LLVMTestingSupport); endif(). include(GetClangResourceDir); get_clang_resource_dir(output_resource_dir PREFIX ${LLVM_BINARY_DIR}); get_clang_resource_dir(install_resource_dir); ExternalProject_Add(compiler-rt; DEPENDS llvm-config clang ${compiler_rt_configure_deps}; PREFIX ${COMPILER_RT_PREFIX}; SOURCE_DIR ${COMPILER_RT_SRC_ROOT}; STAMP_DIR ${STAMP_DIR}; BINARY_DIR ${BINARY_DIR}; CMAKE_ARGS ${CLANG_COMPILER_RT_CMAKE_ARGS}; -DCMAKE_C_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/clang; -DCMAKE_CXX_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/clang++; -DCMAKE_ASM_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/clang; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_MAKE_PROGRAM=${CMAKE_MAKE_PROGRAM}; -DCMAKE_C_COMPILER_LAUNCHER=${CMAKE_C_COMPILER_LAUNCHER}; -DCMAKE_CXX_COMPILER_LAUNCHER=${CMAKE_CXX_COMPILER_LAUNCHER}; -DLLVM_CONFIG_PATH=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-config; -DLLVM_LIT_ARGS=${LLVM_LIT_ARGS}; -DCOMPILER_RT_OUTPUT_DIR=${output_resource_dir}; -DCOMPILER_RT_EXEC_OUTPUT_DIR=${LLVM_RUNTIME_OUTPUT_INTDIR}; -DCOMPILER_RT_INSTALL_PATH:PATH=${install_resource_dir}; -DCOMPILER_RT_INCLUDE_TESTS=${LLVM_INCLUDE_TESTS}; -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}; -DLLVM_LIBDIR_SUFFIX=${LLVM_LIBDIR_SUFFIX}; -DLLVM_RUNTIME_OUTPUT_INTDIR=${LLVM_RUNTIME_OUTPUT_INTDIR}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT:PATH=${CMAKE_OSX_SYSROOT}; ${COMPILER_RT_PASSTHROUGH_VARIABLES}; INSTALL_COMMAND """"; STEP_TARGETS configure build; USES_TERMINAL_CONFIGURE 1; USES_TERMINAL_BUILD 1; USES_TERMINAL_INSTALL 1; # Always run the build command so that incremental builds are correct.; BUILD_ALWAYS 1; ). get_ext_project_build_command(run_clean_compiler_rt clean); ExternalProject_Add_Step(compiler-rt clean; COMMAND ${run_clean_compiler_rt}; COMMENT ""Cleaning compiler-rt...""; DEPENDEES conf",MatchSource.DOCS,interpreter/llvm-project/clang/runtime/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:3632,Modifiability,config,configure,3632,"ompiler_rt_configure_deps); if(TARGET cxx-headers); list(APPEND compiler_rt_configure_deps ""cxx-headers""); endif(); if(LLVM_INCLUDE_TESTS); list(APPEND compiler_rt_configure_deps LLVMTestingSupport); endif(). include(GetClangResourceDir); get_clang_resource_dir(output_resource_dir PREFIX ${LLVM_BINARY_DIR}); get_clang_resource_dir(install_resource_dir); ExternalProject_Add(compiler-rt; DEPENDS llvm-config clang ${compiler_rt_configure_deps}; PREFIX ${COMPILER_RT_PREFIX}; SOURCE_DIR ${COMPILER_RT_SRC_ROOT}; STAMP_DIR ${STAMP_DIR}; BINARY_DIR ${BINARY_DIR}; CMAKE_ARGS ${CLANG_COMPILER_RT_CMAKE_ARGS}; -DCMAKE_C_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/clang; -DCMAKE_CXX_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/clang++; -DCMAKE_ASM_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/clang; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_MAKE_PROGRAM=${CMAKE_MAKE_PROGRAM}; -DCMAKE_C_COMPILER_LAUNCHER=${CMAKE_C_COMPILER_LAUNCHER}; -DCMAKE_CXX_COMPILER_LAUNCHER=${CMAKE_CXX_COMPILER_LAUNCHER}; -DLLVM_CONFIG_PATH=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-config; -DLLVM_LIT_ARGS=${LLVM_LIT_ARGS}; -DCOMPILER_RT_OUTPUT_DIR=${output_resource_dir}; -DCOMPILER_RT_EXEC_OUTPUT_DIR=${LLVM_RUNTIME_OUTPUT_INTDIR}; -DCOMPILER_RT_INSTALL_PATH:PATH=${install_resource_dir}; -DCOMPILER_RT_INCLUDE_TESTS=${LLVM_INCLUDE_TESTS}; -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}; -DLLVM_LIBDIR_SUFFIX=${LLVM_LIBDIR_SUFFIX}; -DLLVM_RUNTIME_OUTPUT_INTDIR=${LLVM_RUNTIME_OUTPUT_INTDIR}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT:PATH=${CMAKE_OSX_SYSROOT}; ${COMPILER_RT_PASSTHROUGH_VARIABLES}; INSTALL_COMMAND """"; STEP_TARGETS configure build; USES_TERMINAL_CONFIGURE 1; USES_TERMINAL_BUILD 1; USES_TERMINAL_INSTALL 1; # Always run the build command so that incremental builds are correct.; BUILD_ALWAYS 1; ). get_ext_project_build_command(run_clean_compiler_rt clean); ExternalProject_Add_Step(compiler-rt clean; COMMAND ${run_clean_compiler_rt}; COMMENT ""Cleaning compiler-rt...""; DEPENDEES conf",MatchSource.DOCS,interpreter/llvm-project/clang/runtime/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:3998,Modifiability,config,configure,3998,"DIR}/llvm-config; -DLLVM_LIT_ARGS=${LLVM_LIT_ARGS}; -DCOMPILER_RT_OUTPUT_DIR=${output_resource_dir}; -DCOMPILER_RT_EXEC_OUTPUT_DIR=${LLVM_RUNTIME_OUTPUT_INTDIR}; -DCOMPILER_RT_INSTALL_PATH:PATH=${install_resource_dir}; -DCOMPILER_RT_INCLUDE_TESTS=${LLVM_INCLUDE_TESTS}; -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}; -DLLVM_LIBDIR_SUFFIX=${LLVM_LIBDIR_SUFFIX}; -DLLVM_RUNTIME_OUTPUT_INTDIR=${LLVM_RUNTIME_OUTPUT_INTDIR}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT:PATH=${CMAKE_OSX_SYSROOT}; ${COMPILER_RT_PASSTHROUGH_VARIABLES}; INSTALL_COMMAND """"; STEP_TARGETS configure build; USES_TERMINAL_CONFIGURE 1; USES_TERMINAL_BUILD 1; USES_TERMINAL_INSTALL 1; # Always run the build command so that incremental builds are correct.; BUILD_ALWAYS 1; ). get_ext_project_build_command(run_clean_compiler_rt clean); ExternalProject_Add_Step(compiler-rt clean; COMMAND ${run_clean_compiler_rt}; COMMENT ""Cleaning compiler-rt...""; DEPENDEES configure; DEPENDERS build; DEPENDS clang; WORKING_DIRECTORY ${BINARY_DIR}; ). install(CODE ""execute_process\(COMMAND \${CMAKE_COMMAND} -DCMAKE_INSTALL_PREFIX=\${CMAKE_INSTALL_PREFIX} -P ${BINARY_DIR}/cmake_install.cmake \)""; COMPONENT compiler-rt). add_llvm_install_targets(install-compiler-rt; DEPENDS compiler-rt; COMPONENT compiler-rt). # Add top-level targets that build specific compiler-rt runtimes.; set(COMPILER_RT_RUNTIMES fuzzer asan builtins dfsan lsan msan profile tsan ubsan ubsan-minimal); foreach(runtime ${COMPILER_RT_RUNTIMES}); get_ext_project_build_command(build_runtime_cmd ${runtime}); add_custom_target(${runtime}; COMMAND ${build_runtime_cmd}; DEPENDS compiler-rt-configure; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL); endforeach(). if(LLVM_INCLUDE_TESTS); # Add binaries that compiler-rt tests depend on.; set(COMPILER_RT_TEST_DEPENDENCIES; FileCheck count not llvm-nm llvm-objdump llvm-symbolizer llvm-jitlink lli split-file). # Add top-level targets for various compiler-rt test suites.; set(",MatchSource.DOCS,interpreter/llvm-project/clang/runtime/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:4686,Modifiability,config,configure,4686,"_VARIABLES}; INSTALL_COMMAND """"; STEP_TARGETS configure build; USES_TERMINAL_CONFIGURE 1; USES_TERMINAL_BUILD 1; USES_TERMINAL_INSTALL 1; # Always run the build command so that incremental builds are correct.; BUILD_ALWAYS 1; ). get_ext_project_build_command(run_clean_compiler_rt clean); ExternalProject_Add_Step(compiler-rt clean; COMMAND ${run_clean_compiler_rt}; COMMENT ""Cleaning compiler-rt...""; DEPENDEES configure; DEPENDERS build; DEPENDS clang; WORKING_DIRECTORY ${BINARY_DIR}; ). install(CODE ""execute_process\(COMMAND \${CMAKE_COMMAND} -DCMAKE_INSTALL_PREFIX=\${CMAKE_INSTALL_PREFIX} -P ${BINARY_DIR}/cmake_install.cmake \)""; COMPONENT compiler-rt). add_llvm_install_targets(install-compiler-rt; DEPENDS compiler-rt; COMPONENT compiler-rt). # Add top-level targets that build specific compiler-rt runtimes.; set(COMPILER_RT_RUNTIMES fuzzer asan builtins dfsan lsan msan profile tsan ubsan ubsan-minimal); foreach(runtime ${COMPILER_RT_RUNTIMES}); get_ext_project_build_command(build_runtime_cmd ${runtime}); add_custom_target(${runtime}; COMMAND ${build_runtime_cmd}; DEPENDS compiler-rt-configure; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL); endforeach(). if(LLVM_INCLUDE_TESTS); # Add binaries that compiler-rt tests depend on.; set(COMPILER_RT_TEST_DEPENDENCIES; FileCheck count not llvm-nm llvm-objdump llvm-symbolizer llvm-jitlink lli split-file). # Add top-level targets for various compiler-rt test suites.; set(COMPILER_RT_TEST_SUITES; check-asan; check-asan-dynamic; check-cfi; check-cfi-and-supported; check-dfsan; check-fuzzer; check-gwp_asan; check-hwasan; check-lsan; check-msan; check-profile; check-safestack; check-sanitizer; check-tsan; check-ubsan; check-ubsan-minimal; ); foreach(test_suite ${COMPILER_RT_TEST_SUITES}); get_ext_project_build_command(run_test_suite ${test_suite}); add_custom_target(${test_suite}; COMMAND ${run_test_suite}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM; USES_TERMIN",MatchSource.DOCS,interpreter/llvm-project/clang/runtime/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:5226,Safety,safe,safestack,5226,COMPONENT compiler-rt). # Add top-level targets that build specific compiler-rt runtimes.; set(COMPILER_RT_RUNTIMES fuzzer asan builtins dfsan lsan msan profile tsan ubsan ubsan-minimal); foreach(runtime ${COMPILER_RT_RUNTIMES}); get_ext_project_build_command(build_runtime_cmd ${runtime}); add_custom_target(${runtime}; COMMAND ${build_runtime_cmd}; DEPENDS compiler-rt-configure; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL); endforeach(). if(LLVM_INCLUDE_TESTS); # Add binaries that compiler-rt tests depend on.; set(COMPILER_RT_TEST_DEPENDENCIES; FileCheck count not llvm-nm llvm-objdump llvm-symbolizer llvm-jitlink lli split-file). # Add top-level targets for various compiler-rt test suites.; set(COMPILER_RT_TEST_SUITES; check-asan; check-asan-dynamic; check-cfi; check-cfi-and-supported; check-dfsan; check-fuzzer; check-gwp_asan; check-hwasan; check-lsan; check-msan; check-profile; check-safestack; check-sanitizer; check-tsan; check-ubsan; check-ubsan-minimal; ); foreach(test_suite ${COMPILER_RT_TEST_SUITES}); get_ext_project_build_command(run_test_suite ${test_suite}); add_custom_target(${test_suite}; COMMAND ${run_test_suite}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM; USES_TERMINAL; ); endforeach(). # Add special target to run all compiler-rt test suites.; get_ext_project_build_command(run_check_compiler_rt check-all); add_custom_target(check-compiler-rt; COMMAND ${run_check_compiler_rt}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL). # Add special target to run all compiler-rt test suites.; get_ext_project_build_command(run_check_compiler_rt compiler-rt-test-depends); add_custom_target(compiler-rt-test-depends; COMMAND ${run_check_compiler_rt}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL); set_property(GLOBAL APPEND PROPERTY LLVM_ALL_ADDITIONAL_TEST_DEPE,MatchSource.DOCS,interpreter/llvm-project/clang/runtime/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:5243,Security,sanitiz,sanitizer,5243,COMPONENT compiler-rt). # Add top-level targets that build specific compiler-rt runtimes.; set(COMPILER_RT_RUNTIMES fuzzer asan builtins dfsan lsan msan profile tsan ubsan ubsan-minimal); foreach(runtime ${COMPILER_RT_RUNTIMES}); get_ext_project_build_command(build_runtime_cmd ${runtime}); add_custom_target(${runtime}; COMMAND ${build_runtime_cmd}; DEPENDS compiler-rt-configure; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL); endforeach(). if(LLVM_INCLUDE_TESTS); # Add binaries that compiler-rt tests depend on.; set(COMPILER_RT_TEST_DEPENDENCIES; FileCheck count not llvm-nm llvm-objdump llvm-symbolizer llvm-jitlink lli split-file). # Add top-level targets for various compiler-rt test suites.; set(COMPILER_RT_TEST_SUITES; check-asan; check-asan-dynamic; check-cfi; check-cfi-and-supported; check-dfsan; check-fuzzer; check-gwp_asan; check-hwasan; check-lsan; check-msan; check-profile; check-safestack; check-sanitizer; check-tsan; check-ubsan; check-ubsan-minimal; ); foreach(test_suite ${COMPILER_RT_TEST_SUITES}); get_ext_project_build_command(run_test_suite ${test_suite}); add_custom_target(${test_suite}; COMMAND ${run_test_suite}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM; USES_TERMINAL; ); endforeach(). # Add special target to run all compiler-rt test suites.; get_ext_project_build_command(run_check_compiler_rt check-all); add_custom_target(check-compiler-rt; COMMAND ${run_check_compiler_rt}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL). # Add special target to run all compiler-rt test suites.; get_ext_project_build_command(run_check_compiler_rt compiler-rt-test-depends); add_custom_target(compiler-rt-test-depends; COMMAND ${run_check_compiler_rt}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL); set_property(GLOBAL APPEND PROPERTY LLVM_ALL_ADDITIONAL_TEST_DEPE,MatchSource.DOCS,interpreter/llvm-project/clang/runtime/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:4825,Testability,test,tests,4825,"WAYS 1; ). get_ext_project_build_command(run_clean_compiler_rt clean); ExternalProject_Add_Step(compiler-rt clean; COMMAND ${run_clean_compiler_rt}; COMMENT ""Cleaning compiler-rt...""; DEPENDEES configure; DEPENDERS build; DEPENDS clang; WORKING_DIRECTORY ${BINARY_DIR}; ). install(CODE ""execute_process\(COMMAND \${CMAKE_COMMAND} -DCMAKE_INSTALL_PREFIX=\${CMAKE_INSTALL_PREFIX} -P ${BINARY_DIR}/cmake_install.cmake \)""; COMPONENT compiler-rt). add_llvm_install_targets(install-compiler-rt; DEPENDS compiler-rt; COMPONENT compiler-rt). # Add top-level targets that build specific compiler-rt runtimes.; set(COMPILER_RT_RUNTIMES fuzzer asan builtins dfsan lsan msan profile tsan ubsan ubsan-minimal); foreach(runtime ${COMPILER_RT_RUNTIMES}); get_ext_project_build_command(build_runtime_cmd ${runtime}); add_custom_target(${runtime}; COMMAND ${build_runtime_cmd}; DEPENDS compiler-rt-configure; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL); endforeach(). if(LLVM_INCLUDE_TESTS); # Add binaries that compiler-rt tests depend on.; set(COMPILER_RT_TEST_DEPENDENCIES; FileCheck count not llvm-nm llvm-objdump llvm-symbolizer llvm-jitlink lli split-file). # Add top-level targets for various compiler-rt test suites.; set(COMPILER_RT_TEST_SUITES; check-asan; check-asan-dynamic; check-cfi; check-cfi-and-supported; check-dfsan; check-fuzzer; check-gwp_asan; check-hwasan; check-lsan; check-msan; check-profile; check-safestack; check-sanitizer; check-tsan; check-ubsan; check-ubsan-minimal; ); foreach(test_suite ${COMPILER_RT_TEST_SUITES}); get_ext_project_build_command(run_test_suite ${test_suite}); add_custom_target(${test_suite}; COMMAND ${run_test_suite}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM; USES_TERMINAL; ); endforeach(). # Add special target to run all compiler-rt test suites.; get_ext_project_build_command(run_check_compiler_rt check-all); add_custom_target(check-compiler-rt; COMMAND ${run_check_compiler_rt}; DEPEN",MatchSource.DOCS,interpreter/llvm-project/clang/runtime/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:5013,Testability,test,test,5013,"EES configure; DEPENDERS build; DEPENDS clang; WORKING_DIRECTORY ${BINARY_DIR}; ). install(CODE ""execute_process\(COMMAND \${CMAKE_COMMAND} -DCMAKE_INSTALL_PREFIX=\${CMAKE_INSTALL_PREFIX} -P ${BINARY_DIR}/cmake_install.cmake \)""; COMPONENT compiler-rt). add_llvm_install_targets(install-compiler-rt; DEPENDS compiler-rt; COMPONENT compiler-rt). # Add top-level targets that build specific compiler-rt runtimes.; set(COMPILER_RT_RUNTIMES fuzzer asan builtins dfsan lsan msan profile tsan ubsan ubsan-minimal); foreach(runtime ${COMPILER_RT_RUNTIMES}); get_ext_project_build_command(build_runtime_cmd ${runtime}); add_custom_target(${runtime}; COMMAND ${build_runtime_cmd}; DEPENDS compiler-rt-configure; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL); endforeach(). if(LLVM_INCLUDE_TESTS); # Add binaries that compiler-rt tests depend on.; set(COMPILER_RT_TEST_DEPENDENCIES; FileCheck count not llvm-nm llvm-objdump llvm-symbolizer llvm-jitlink lli split-file). # Add top-level targets for various compiler-rt test suites.; set(COMPILER_RT_TEST_SUITES; check-asan; check-asan-dynamic; check-cfi; check-cfi-and-supported; check-dfsan; check-fuzzer; check-gwp_asan; check-hwasan; check-lsan; check-msan; check-profile; check-safestack; check-sanitizer; check-tsan; check-ubsan; check-ubsan-minimal; ); foreach(test_suite ${COMPILER_RT_TEST_SUITES}); get_ext_project_build_command(run_test_suite ${test_suite}); add_custom_target(${test_suite}; COMMAND ${run_test_suite}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM; USES_TERMINAL; ); endforeach(). # Add special target to run all compiler-rt test suites.; get_ext_project_build_command(run_check_compiler_rt check-all); add_custom_target(check-compiler-rt; COMMAND ${run_check_compiler_rt}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL). # Add special target to run all compiler-rt test suites.; get_ext_project_bui",MatchSource.DOCS,interpreter/llvm-project/clang/runtime/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:5651,Testability,test,test,5651,san lsan msan profile tsan ubsan ubsan-minimal); foreach(runtime ${COMPILER_RT_RUNTIMES}); get_ext_project_build_command(build_runtime_cmd ${runtime}); add_custom_target(${runtime}; COMMAND ${build_runtime_cmd}; DEPENDS compiler-rt-configure; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL); endforeach(). if(LLVM_INCLUDE_TESTS); # Add binaries that compiler-rt tests depend on.; set(COMPILER_RT_TEST_DEPENDENCIES; FileCheck count not llvm-nm llvm-objdump llvm-symbolizer llvm-jitlink lli split-file). # Add top-level targets for various compiler-rt test suites.; set(COMPILER_RT_TEST_SUITES; check-asan; check-asan-dynamic; check-cfi; check-cfi-and-supported; check-dfsan; check-fuzzer; check-gwp_asan; check-hwasan; check-lsan; check-msan; check-profile; check-safestack; check-sanitizer; check-tsan; check-ubsan; check-ubsan-minimal; ); foreach(test_suite ${COMPILER_RT_TEST_SUITES}); get_ext_project_build_command(run_test_suite ${test_suite}); add_custom_target(${test_suite}; COMMAND ${run_test_suite}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM; USES_TERMINAL; ); endforeach(). # Add special target to run all compiler-rt test suites.; get_ext_project_build_command(run_check_compiler_rt check-all); add_custom_target(check-compiler-rt; COMMAND ${run_check_compiler_rt}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL). # Add special target to run all compiler-rt test suites.; get_ext_project_build_command(run_check_compiler_rt compiler-rt-test-depends); add_custom_target(compiler-rt-test-depends; COMMAND ${run_check_compiler_rt}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL); set_property(GLOBAL APPEND PROPERTY LLVM_ALL_ADDITIONAL_TEST_DEPENDS compiler-rt-test-depends); set_property(GLOBAL APPEND PROPERTY LLVM_ALL_ADDITIONAL_TEST_TARGETS check-compiler-rt); endif(); endif(); ,MatchSource.DOCS,interpreter/llvm-project/clang/runtime/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:5962,Testability,test,test,5962,san lsan msan profile tsan ubsan ubsan-minimal); foreach(runtime ${COMPILER_RT_RUNTIMES}); get_ext_project_build_command(build_runtime_cmd ${runtime}); add_custom_target(${runtime}; COMMAND ${build_runtime_cmd}; DEPENDS compiler-rt-configure; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL); endforeach(). if(LLVM_INCLUDE_TESTS); # Add binaries that compiler-rt tests depend on.; set(COMPILER_RT_TEST_DEPENDENCIES; FileCheck count not llvm-nm llvm-objdump llvm-symbolizer llvm-jitlink lli split-file). # Add top-level targets for various compiler-rt test suites.; set(COMPILER_RT_TEST_SUITES; check-asan; check-asan-dynamic; check-cfi; check-cfi-and-supported; check-dfsan; check-fuzzer; check-gwp_asan; check-hwasan; check-lsan; check-msan; check-profile; check-safestack; check-sanitizer; check-tsan; check-ubsan; check-ubsan-minimal; ); foreach(test_suite ${COMPILER_RT_TEST_SUITES}); get_ext_project_build_command(run_test_suite ${test_suite}); add_custom_target(${test_suite}; COMMAND ${run_test_suite}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM; USES_TERMINAL; ); endforeach(). # Add special target to run all compiler-rt test suites.; get_ext_project_build_command(run_check_compiler_rt check-all); add_custom_target(check-compiler-rt; COMMAND ${run_check_compiler_rt}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL). # Add special target to run all compiler-rt test suites.; get_ext_project_build_command(run_check_compiler_rt compiler-rt-test-depends); add_custom_target(compiler-rt-test-depends; COMMAND ${run_check_compiler_rt}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL); set_property(GLOBAL APPEND PROPERTY LLVM_ALL_ADDITIONAL_TEST_DEPENDS compiler-rt-test-depends); set_property(GLOBAL APPEND PROPERTY LLVM_ALL_ADDITIONAL_TEST_TARGETS check-compiler-rt); endif(); endif(); ,MatchSource.DOCS,interpreter/llvm-project/clang/runtime/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:6040,Testability,test,test-depends,6040,san lsan msan profile tsan ubsan ubsan-minimal); foreach(runtime ${COMPILER_RT_RUNTIMES}); get_ext_project_build_command(build_runtime_cmd ${runtime}); add_custom_target(${runtime}; COMMAND ${build_runtime_cmd}; DEPENDS compiler-rt-configure; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL); endforeach(). if(LLVM_INCLUDE_TESTS); # Add binaries that compiler-rt tests depend on.; set(COMPILER_RT_TEST_DEPENDENCIES; FileCheck count not llvm-nm llvm-objdump llvm-symbolizer llvm-jitlink lli split-file). # Add top-level targets for various compiler-rt test suites.; set(COMPILER_RT_TEST_SUITES; check-asan; check-asan-dynamic; check-cfi; check-cfi-and-supported; check-dfsan; check-fuzzer; check-gwp_asan; check-hwasan; check-lsan; check-msan; check-profile; check-safestack; check-sanitizer; check-tsan; check-ubsan; check-ubsan-minimal; ); foreach(test_suite ${COMPILER_RT_TEST_SUITES}); get_ext_project_build_command(run_test_suite ${test_suite}); add_custom_target(${test_suite}; COMMAND ${run_test_suite}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM; USES_TERMINAL; ); endforeach(). # Add special target to run all compiler-rt test suites.; get_ext_project_build_command(run_check_compiler_rt check-all); add_custom_target(check-compiler-rt; COMMAND ${run_check_compiler_rt}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL). # Add special target to run all compiler-rt test suites.; get_ext_project_build_command(run_check_compiler_rt compiler-rt-test-depends); add_custom_target(compiler-rt-test-depends; COMMAND ${run_check_compiler_rt}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL); set_property(GLOBAL APPEND PROPERTY LLVM_ALL_ADDITIONAL_TEST_DEPENDS compiler-rt-test-depends); set_property(GLOBAL APPEND PROPERTY LLVM_ALL_ADDITIONAL_TEST_TARGETS check-compiler-rt); endif(); endif(); ,MatchSource.DOCS,interpreter/llvm-project/clang/runtime/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:6085,Testability,test,test-depends,6085,san lsan msan profile tsan ubsan ubsan-minimal); foreach(runtime ${COMPILER_RT_RUNTIMES}); get_ext_project_build_command(build_runtime_cmd ${runtime}); add_custom_target(${runtime}; COMMAND ${build_runtime_cmd}; DEPENDS compiler-rt-configure; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL); endforeach(). if(LLVM_INCLUDE_TESTS); # Add binaries that compiler-rt tests depend on.; set(COMPILER_RT_TEST_DEPENDENCIES; FileCheck count not llvm-nm llvm-objdump llvm-symbolizer llvm-jitlink lli split-file). # Add top-level targets for various compiler-rt test suites.; set(COMPILER_RT_TEST_SUITES; check-asan; check-asan-dynamic; check-cfi; check-cfi-and-supported; check-dfsan; check-fuzzer; check-gwp_asan; check-hwasan; check-lsan; check-msan; check-profile; check-safestack; check-sanitizer; check-tsan; check-ubsan; check-ubsan-minimal; ); foreach(test_suite ${COMPILER_RT_TEST_SUITES}); get_ext_project_build_command(run_test_suite ${test_suite}); add_custom_target(${test_suite}; COMMAND ${run_test_suite}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM; USES_TERMINAL; ); endforeach(). # Add special target to run all compiler-rt test suites.; get_ext_project_build_command(run_check_compiler_rt check-all); add_custom_target(check-compiler-rt; COMMAND ${run_check_compiler_rt}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL). # Add special target to run all compiler-rt test suites.; get_ext_project_build_command(run_check_compiler_rt compiler-rt-test-depends); add_custom_target(compiler-rt-test-depends; COMMAND ${run_check_compiler_rt}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL); set_property(GLOBAL APPEND PROPERTY LLVM_ALL_ADDITIONAL_TEST_DEPENDS compiler-rt-test-depends); set_property(GLOBAL APPEND PROPERTY LLVM_ALL_ADDITIONAL_TEST_TARGETS check-compiler-rt); endif(); endif(); ,MatchSource.DOCS,interpreter/llvm-project/clang/runtime/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:6332,Testability,test,test-depends,6332,san lsan msan profile tsan ubsan ubsan-minimal); foreach(runtime ${COMPILER_RT_RUNTIMES}); get_ext_project_build_command(build_runtime_cmd ${runtime}); add_custom_target(${runtime}; COMMAND ${build_runtime_cmd}; DEPENDS compiler-rt-configure; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL); endforeach(). if(LLVM_INCLUDE_TESTS); # Add binaries that compiler-rt tests depend on.; set(COMPILER_RT_TEST_DEPENDENCIES; FileCheck count not llvm-nm llvm-objdump llvm-symbolizer llvm-jitlink lli split-file). # Add top-level targets for various compiler-rt test suites.; set(COMPILER_RT_TEST_SUITES; check-asan; check-asan-dynamic; check-cfi; check-cfi-and-supported; check-dfsan; check-fuzzer; check-gwp_asan; check-hwasan; check-lsan; check-msan; check-profile; check-safestack; check-sanitizer; check-tsan; check-ubsan; check-ubsan-minimal; ); foreach(test_suite ${COMPILER_RT_TEST_SUITES}); get_ext_project_build_command(run_test_suite ${test_suite}); add_custom_target(${test_suite}; COMMAND ${run_test_suite}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM; USES_TERMINAL; ); endforeach(). # Add special target to run all compiler-rt test suites.; get_ext_project_build_command(run_check_compiler_rt check-all); add_custom_target(check-compiler-rt; COMMAND ${run_check_compiler_rt}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL). # Add special target to run all compiler-rt test suites.; get_ext_project_build_command(run_check_compiler_rt compiler-rt-test-depends); add_custom_target(compiler-rt-test-depends; COMMAND ${run_check_compiler_rt}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL); set_property(GLOBAL APPEND PROPERTY LLVM_ALL_ADDITIONAL_TEST_DEPENDS compiler-rt-test-depends); set_property(GLOBAL APPEND PROPERTY LLVM_ALL_ADDITIONAL_TEST_TARGETS check-compiler-rt); endif(); endif(); ,MatchSource.DOCS,interpreter/llvm-project/clang/runtime/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:1439,Usability,clear,clear,1439,". --target ${target}; --config $<CONFIG> PARENT_SCOPE); endif(); endfunction(). set(COMPILER_RT_SRC_ROOT ${LLVM_MAIN_SRC_DIR}/projects/compiler-rt); # Fallback to the external path, if the other one isn't available.; # This is the same behavior (try ""internal"", then check the LLVM_EXTERNAL_...; # variable) as in add_llvm_external_project; if(NOT EXISTS ${COMPILER_RT_SRC_ROOT}); # We don't want to set it if LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR is """"; if(LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR); set(COMPILER_RT_SRC_ROOT ${LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR}); endif(); endif(). if(LLVM_BUILD_EXTERNAL_COMPILER_RT AND EXISTS ${COMPILER_RT_SRC_ROOT}/). # Add compiler-rt as an external project.; set(COMPILER_RT_PREFIX ${CMAKE_BINARY_DIR}/projects/compiler-rt). set(STAMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/compiler-rt-stamps/); set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/compiler-rt-bins/). add_custom_target(compiler-rt-clear; COMMAND ${CMAKE_COMMAND} -E remove_directory ${BINARY_DIR}; COMMAND ${CMAKE_COMMAND} -E remove_directory ${STAMP_DIR}; COMMENT ""Clobberring compiler-rt build and stamp directories""; ). # Find all variables that start with COMPILER_RT and populate a variable with; # them.; get_cmake_property(variableNames VARIABLES); foreach(variableName ${variableNames}); if(variableName MATCHES ""^COMPILER_RT""); string(REPLACE "";"" ""\;"" value ""${${variableName}}""); list(APPEND COMPILER_RT_PASSTHROUGH_VARIABLES; -D${variableName}=${value}); endif(); endforeach(). set(compiler_rt_configure_deps); if(TARGET cxx-headers); list(APPEND compiler_rt_configure_deps ""cxx-headers""); endif(); if(LLVM_INCLUDE_TESTS); list(APPEND compiler_rt_configure_deps LLVMTestingSupport); endif(). include(GetClangResourceDir); get_clang_resource_dir(output_resource_dir PREFIX ${LLVM_BINARY_DIR}); get_clang_resource_dir(install_resource_dir); ExternalProject_Add(compiler-rt; DEPENDS llvm-config clang ${compiler_rt_configure_deps}; PREFIX ${COMPILER_RT_PREFIX}; SOURCE_DIR ${COMPILER_RT_SRC_ROOT}; STAMP",MatchSource.DOCS,interpreter/llvm-project/clang/runtime/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/CMakeLists.txt:378,Integrability,wrap,wrapper,378,create_subdirectory_options(CLANG TOOL). add_clang_subdirectory(diagtool); add_clang_subdirectory(driver); add_clang_subdirectory(apinotes-test); add_clang_subdirectory(clang-diff); add_clang_subdirectory(clang-format); add_clang_subdirectory(clang-format-vs); add_clang_subdirectory(clang-fuzzer); add_clang_subdirectory(clang-import-test); add_clang_subdirectory(clang-linker-wrapper); add_clang_subdirectory(clang-offload-packager); add_clang_subdirectory(clang-offload-bundler); add_clang_subdirectory(clang-scan-deps); if(HAVE_CLANG_REPL_SUPPORT); add_clang_subdirectory(clang-repl); endif(). add_clang_subdirectory(c-index-test). add_clang_subdirectory(clang-rename); add_clang_subdirectory(clang-refactor); # For MinGW we only enable shared library if LLVM_LINK_LLVM_DYLIB=ON.; # Without that option resulting library is too close to 2^16 DLL exports limit.; if(UNIX OR (MINGW AND LLVM_LINK_LLVM_DYLIB)); add_clang_subdirectory(clang-shlib); endif(). if(CLANG_ENABLE_ARCMT); add_clang_subdirectory(arcmt-test); add_clang_subdirectory(c-arcmt-test); endif(). if(CLANG_ENABLE_STATIC_ANALYZER); add_clang_subdirectory(clang-check); add_clang_subdirectory(clang-extdef-mapping); add_clang_subdirectory(scan-build); add_clang_subdirectory(scan-build-py); add_clang_subdirectory(scan-view); endif(). # We support checking out the clang-tools-extra repository into the 'extra'; # subdirectory. It contains tools developed as part of the Clang/LLVM project; # on top of the Clang tooling platform. We keep them in a separate repository; # to keep the primary Clang repository small and focused.; # It also may be included by LLVM_EXTERNAL_CLANG_TOOLS_EXTRA_SOURCE_DIR.; add_llvm_external_project(clang-tools-extra extra). # libclang may require clang-tidy in clang-tools-extra.; add_clang_subdirectory(libclang). add_clang_subdirectory(amdgpu-arch); add_clang_subdirectory(nvptx-arch); ,MatchSource.DOCS,interpreter/llvm-project/clang/tools/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/CMakeLists.txt:703,Modifiability,refactor,refactor,703,create_subdirectory_options(CLANG TOOL). add_clang_subdirectory(diagtool); add_clang_subdirectory(driver); add_clang_subdirectory(apinotes-test); add_clang_subdirectory(clang-diff); add_clang_subdirectory(clang-format); add_clang_subdirectory(clang-format-vs); add_clang_subdirectory(clang-fuzzer); add_clang_subdirectory(clang-import-test); add_clang_subdirectory(clang-linker-wrapper); add_clang_subdirectory(clang-offload-packager); add_clang_subdirectory(clang-offload-bundler); add_clang_subdirectory(clang-scan-deps); if(HAVE_CLANG_REPL_SUPPORT); add_clang_subdirectory(clang-repl); endif(). add_clang_subdirectory(c-index-test). add_clang_subdirectory(clang-rename); add_clang_subdirectory(clang-refactor); # For MinGW we only enable shared library if LLVM_LINK_LLVM_DYLIB=ON.; # Without that option resulting library is too close to 2^16 DLL exports limit.; if(UNIX OR (MINGW AND LLVM_LINK_LLVM_DYLIB)); add_clang_subdirectory(clang-shlib); endif(). if(CLANG_ENABLE_ARCMT); add_clang_subdirectory(arcmt-test); add_clang_subdirectory(c-arcmt-test); endif(). if(CLANG_ENABLE_STATIC_ANALYZER); add_clang_subdirectory(clang-check); add_clang_subdirectory(clang-extdef-mapping); add_clang_subdirectory(scan-build); add_clang_subdirectory(scan-build-py); add_clang_subdirectory(scan-view); endif(). # We support checking out the clang-tools-extra repository into the 'extra'; # subdirectory. It contains tools developed as part of the Clang/LLVM project; # on top of the Clang tooling platform. We keep them in a separate repository; # to keep the primary Clang repository small and focused.; # It also may be included by LLVM_EXTERNAL_CLANG_TOOLS_EXTRA_SOURCE_DIR.; add_llvm_external_project(clang-tools-extra extra). # libclang may require clang-tidy in clang-tools-extra.; add_clang_subdirectory(libclang). add_clang_subdirectory(amdgpu-arch); add_clang_subdirectory(nvptx-arch); ,MatchSource.DOCS,interpreter/llvm-project/clang/tools/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/CMakeLists.txt:139,Testability,test,test,139,create_subdirectory_options(CLANG TOOL). add_clang_subdirectory(diagtool); add_clang_subdirectory(driver); add_clang_subdirectory(apinotes-test); add_clang_subdirectory(clang-diff); add_clang_subdirectory(clang-format); add_clang_subdirectory(clang-format-vs); add_clang_subdirectory(clang-fuzzer); add_clang_subdirectory(clang-import-test); add_clang_subdirectory(clang-linker-wrapper); add_clang_subdirectory(clang-offload-packager); add_clang_subdirectory(clang-offload-bundler); add_clang_subdirectory(clang-scan-deps); if(HAVE_CLANG_REPL_SUPPORT); add_clang_subdirectory(clang-repl); endif(). add_clang_subdirectory(c-index-test). add_clang_subdirectory(clang-rename); add_clang_subdirectory(clang-refactor); # For MinGW we only enable shared library if LLVM_LINK_LLVM_DYLIB=ON.; # Without that option resulting library is too close to 2^16 DLL exports limit.; if(UNIX OR (MINGW AND LLVM_LINK_LLVM_DYLIB)); add_clang_subdirectory(clang-shlib); endif(). if(CLANG_ENABLE_ARCMT); add_clang_subdirectory(arcmt-test); add_clang_subdirectory(c-arcmt-test); endif(). if(CLANG_ENABLE_STATIC_ANALYZER); add_clang_subdirectory(clang-check); add_clang_subdirectory(clang-extdef-mapping); add_clang_subdirectory(scan-build); add_clang_subdirectory(scan-build-py); add_clang_subdirectory(scan-view); endif(). # We support checking out the clang-tools-extra repository into the 'extra'; # subdirectory. It contains tools developed as part of the Clang/LLVM project; # on top of the Clang tooling platform. We keep them in a separate repository; # to keep the primary Clang repository small and focused.; # It also may be included by LLVM_EXTERNAL_CLANG_TOOLS_EXTRA_SOURCE_DIR.; add_llvm_external_project(clang-tools-extra extra). # libclang may require clang-tidy in clang-tools-extra.; add_clang_subdirectory(libclang). add_clang_subdirectory(amdgpu-arch); add_clang_subdirectory(nvptx-arch); ,MatchSource.DOCS,interpreter/llvm-project/clang/tools/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/CMakeLists.txt:335,Testability,test,test,335,create_subdirectory_options(CLANG TOOL). add_clang_subdirectory(diagtool); add_clang_subdirectory(driver); add_clang_subdirectory(apinotes-test); add_clang_subdirectory(clang-diff); add_clang_subdirectory(clang-format); add_clang_subdirectory(clang-format-vs); add_clang_subdirectory(clang-fuzzer); add_clang_subdirectory(clang-import-test); add_clang_subdirectory(clang-linker-wrapper); add_clang_subdirectory(clang-offload-packager); add_clang_subdirectory(clang-offload-bundler); add_clang_subdirectory(clang-scan-deps); if(HAVE_CLANG_REPL_SUPPORT); add_clang_subdirectory(clang-repl); endif(). add_clang_subdirectory(c-index-test). add_clang_subdirectory(clang-rename); add_clang_subdirectory(clang-refactor); # For MinGW we only enable shared library if LLVM_LINK_LLVM_DYLIB=ON.; # Without that option resulting library is too close to 2^16 DLL exports limit.; if(UNIX OR (MINGW AND LLVM_LINK_LLVM_DYLIB)); add_clang_subdirectory(clang-shlib); endif(). if(CLANG_ENABLE_ARCMT); add_clang_subdirectory(arcmt-test); add_clang_subdirectory(c-arcmt-test); endif(). if(CLANG_ENABLE_STATIC_ANALYZER); add_clang_subdirectory(clang-check); add_clang_subdirectory(clang-extdef-mapping); add_clang_subdirectory(scan-build); add_clang_subdirectory(scan-build-py); add_clang_subdirectory(scan-view); endif(). # We support checking out the clang-tools-extra repository into the 'extra'; # subdirectory. It contains tools developed as part of the Clang/LLVM project; # on top of the Clang tooling platform. We keep them in a separate repository; # to keep the primary Clang repository small and focused.; # It also may be included by LLVM_EXTERNAL_CLANG_TOOLS_EXTRA_SOURCE_DIR.; add_llvm_external_project(clang-tools-extra extra). # libclang may require clang-tidy in clang-tools-extra.; add_clang_subdirectory(libclang). add_clang_subdirectory(amdgpu-arch); add_clang_subdirectory(nvptx-arch); ,MatchSource.DOCS,interpreter/llvm-project/clang/tools/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/CMakeLists.txt:629,Testability,test,test,629,create_subdirectory_options(CLANG TOOL). add_clang_subdirectory(diagtool); add_clang_subdirectory(driver); add_clang_subdirectory(apinotes-test); add_clang_subdirectory(clang-diff); add_clang_subdirectory(clang-format); add_clang_subdirectory(clang-format-vs); add_clang_subdirectory(clang-fuzzer); add_clang_subdirectory(clang-import-test); add_clang_subdirectory(clang-linker-wrapper); add_clang_subdirectory(clang-offload-packager); add_clang_subdirectory(clang-offload-bundler); add_clang_subdirectory(clang-scan-deps); if(HAVE_CLANG_REPL_SUPPORT); add_clang_subdirectory(clang-repl); endif(). add_clang_subdirectory(c-index-test). add_clang_subdirectory(clang-rename); add_clang_subdirectory(clang-refactor); # For MinGW we only enable shared library if LLVM_LINK_LLVM_DYLIB=ON.; # Without that option resulting library is too close to 2^16 DLL exports limit.; if(UNIX OR (MINGW AND LLVM_LINK_LLVM_DYLIB)); add_clang_subdirectory(clang-shlib); endif(). if(CLANG_ENABLE_ARCMT); add_clang_subdirectory(arcmt-test); add_clang_subdirectory(c-arcmt-test); endif(). if(CLANG_ENABLE_STATIC_ANALYZER); add_clang_subdirectory(clang-check); add_clang_subdirectory(clang-extdef-mapping); add_clang_subdirectory(scan-build); add_clang_subdirectory(scan-build-py); add_clang_subdirectory(scan-view); endif(). # We support checking out the clang-tools-extra repository into the 'extra'; # subdirectory. It contains tools developed as part of the Clang/LLVM project; # on top of the Clang tooling platform. We keep them in a separate repository; # to keep the primary Clang repository small and focused.; # It also may be included by LLVM_EXTERNAL_CLANG_TOOLS_EXTRA_SOURCE_DIR.; add_llvm_external_project(clang-tools-extra extra). # libclang may require clang-tidy in clang-tools-extra.; add_clang_subdirectory(libclang). add_clang_subdirectory(amdgpu-arch); add_clang_subdirectory(nvptx-arch); ,MatchSource.DOCS,interpreter/llvm-project/clang/tools/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/CMakeLists.txt:1011,Testability,test,test,1011,create_subdirectory_options(CLANG TOOL). add_clang_subdirectory(diagtool); add_clang_subdirectory(driver); add_clang_subdirectory(apinotes-test); add_clang_subdirectory(clang-diff); add_clang_subdirectory(clang-format); add_clang_subdirectory(clang-format-vs); add_clang_subdirectory(clang-fuzzer); add_clang_subdirectory(clang-import-test); add_clang_subdirectory(clang-linker-wrapper); add_clang_subdirectory(clang-offload-packager); add_clang_subdirectory(clang-offload-bundler); add_clang_subdirectory(clang-scan-deps); if(HAVE_CLANG_REPL_SUPPORT); add_clang_subdirectory(clang-repl); endif(). add_clang_subdirectory(c-index-test). add_clang_subdirectory(clang-rename); add_clang_subdirectory(clang-refactor); # For MinGW we only enable shared library if LLVM_LINK_LLVM_DYLIB=ON.; # Without that option resulting library is too close to 2^16 DLL exports limit.; if(UNIX OR (MINGW AND LLVM_LINK_LLVM_DYLIB)); add_clang_subdirectory(clang-shlib); endif(). if(CLANG_ENABLE_ARCMT); add_clang_subdirectory(arcmt-test); add_clang_subdirectory(c-arcmt-test); endif(). if(CLANG_ENABLE_STATIC_ANALYZER); add_clang_subdirectory(clang-check); add_clang_subdirectory(clang-extdef-mapping); add_clang_subdirectory(scan-build); add_clang_subdirectory(scan-build-py); add_clang_subdirectory(scan-view); endif(). # We support checking out the clang-tools-extra repository into the 'extra'; # subdirectory. It contains tools developed as part of the Clang/LLVM project; # on top of the Clang tooling platform. We keep them in a separate repository; # to keep the primary Clang repository small and focused.; # It also may be included by LLVM_EXTERNAL_CLANG_TOOLS_EXTRA_SOURCE_DIR.; add_llvm_external_project(clang-tools-extra extra). # libclang may require clang-tidy in clang-tools-extra.; add_clang_subdirectory(libclang). add_clang_subdirectory(amdgpu-arch); add_clang_subdirectory(nvptx-arch); ,MatchSource.DOCS,interpreter/llvm-project/clang/tools/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/CMakeLists.txt:1049,Testability,test,test,1049,create_subdirectory_options(CLANG TOOL). add_clang_subdirectory(diagtool); add_clang_subdirectory(driver); add_clang_subdirectory(apinotes-test); add_clang_subdirectory(clang-diff); add_clang_subdirectory(clang-format); add_clang_subdirectory(clang-format-vs); add_clang_subdirectory(clang-fuzzer); add_clang_subdirectory(clang-import-test); add_clang_subdirectory(clang-linker-wrapper); add_clang_subdirectory(clang-offload-packager); add_clang_subdirectory(clang-offload-bundler); add_clang_subdirectory(clang-scan-deps); if(HAVE_CLANG_REPL_SUPPORT); add_clang_subdirectory(clang-repl); endif(). add_clang_subdirectory(c-index-test). add_clang_subdirectory(clang-rename); add_clang_subdirectory(clang-refactor); # For MinGW we only enable shared library if LLVM_LINK_LLVM_DYLIB=ON.; # Without that option resulting library is too close to 2^16 DLL exports limit.; if(UNIX OR (MINGW AND LLVM_LINK_LLVM_DYLIB)); add_clang_subdirectory(clang-shlib); endif(). if(CLANG_ENABLE_ARCMT); add_clang_subdirectory(arcmt-test); add_clang_subdirectory(c-arcmt-test); endif(). if(CLANG_ENABLE_STATIC_ANALYZER); add_clang_subdirectory(clang-check); add_clang_subdirectory(clang-extdef-mapping); add_clang_subdirectory(scan-build); add_clang_subdirectory(scan-build-py); add_clang_subdirectory(scan-view); endif(). # We support checking out the clang-tools-extra repository into the 'extra'; # subdirectory. It contains tools developed as part of the Clang/LLVM project; # on top of the Clang tooling platform. We keep them in a separate repository; # to keep the primary Clang repository small and focused.; # It also may be included by LLVM_EXTERNAL_CLANG_TOOLS_EXTRA_SOURCE_DIR.; add_llvm_external_project(clang-tools-extra extra). # libclang may require clang-tidy in clang-tools-extra.; add_clang_subdirectory(libclang). add_clang_subdirectory(amdgpu-arch); add_clang_subdirectory(nvptx-arch); ,MatchSource.DOCS,interpreter/llvm-project/clang/tools/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt:329,Deployability,install,install,329,"CMake Caches; ============. This directory contains CMake cache scripts that pre-populate the CMakeCache in; a build directory with commonly used settings. You can use the caches files with the following CMake invocation:. cmake -G <build system>; -C <path to cache file>; [additional CMake options (i.e. -DCMAKE_INSTALL_PREFIX=<install path>)]; <path to llvm>. Options specified on the command line will override options in the cache files. The following cache files exist. Apple-stage1; ------------. The Apple stage1 cache configures a two stage build similar to how Apple builds; the clang shipped with Xcode. The build files generated from this invocation has; a target named ""stage2"" which performs an LTO build of clang. The Apple-stage2 cache can be used directly to match the build settings Apple; uses in shipping builds without doing a full bootstrap build. PGO; ---. The PGO CMake cache can be used to generate a multi-stage instrumented compiler.; You can configure your build directory with the following invocation of CMake:. cmake -G <generator> -C <path_to_clang>/cmake/caches/PGO.cmake <source dir>. After configuration the following additional targets will be generated:. stage2-instrumented:; Builds a stage1 x86 compiler, runtime, and required tools (llvm-config,; llvm-profdata) then uses that compiler to build an instrumented stage2 compiler. stage2-instrumented-generate-profdata:; Depends on ""stage2-instrumented"" and will use the instrumented compiler to; generate profdata based on the training files in <clang>/utils/perf-training. stage2:; Depends on ""stage2-instrumented-generate-profdata"" and will use the stage1; compiler with the stage2 profdata to build a PGO-optimized compiler. stage2-check-llvm:; Depends on stage2 and runs check-llvm using the stage3 compiler. stage2-check-clang:; Depends on stage2 and runs check-clang using the stage3 compiler. stage2-check-all:; Depends on stage2 and runs check-all using the stage3 compiler. stage2-test-suite:; Depends on ",MatchSource.DOCS,interpreter/llvm-project/clang/cmake/caches/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt:1124,Deployability,configurat,configuration,1124,"s. You can use the caches files with the following CMake invocation:. cmake -G <build system>; -C <path to cache file>; [additional CMake options (i.e. -DCMAKE_INSTALL_PREFIX=<install path>)]; <path to llvm>. Options specified on the command line will override options in the cache files. The following cache files exist. Apple-stage1; ------------. The Apple stage1 cache configures a two stage build similar to how Apple builds; the clang shipped with Xcode. The build files generated from this invocation has; a target named ""stage2"" which performs an LTO build of clang. The Apple-stage2 cache can be used directly to match the build settings Apple; uses in shipping builds without doing a full bootstrap build. PGO; ---. The PGO CMake cache can be used to generate a multi-stage instrumented compiler.; You can configure your build directory with the following invocation of CMake:. cmake -G <generator> -C <path_to_clang>/cmake/caches/PGO.cmake <source dir>. After configuration the following additional targets will be generated:. stage2-instrumented:; Builds a stage1 x86 compiler, runtime, and required tools (llvm-config,; llvm-profdata) then uses that compiler to build an instrumented stage2 compiler. stage2-instrumented-generate-profdata:; Depends on ""stage2-instrumented"" and will use the instrumented compiler to; generate profdata based on the training files in <clang>/utils/perf-training. stage2:; Depends on ""stage2-instrumented-generate-profdata"" and will use the stage1; compiler with the stage2 profdata to build a PGO-optimized compiler. stage2-check-llvm:; Depends on stage2 and runs check-llvm using the stage3 compiler. stage2-check-clang:; Depends on stage2 and runs check-clang using the stage3 compiler. stage2-check-all:; Depends on stage2 and runs check-all using the stage3 compiler. stage2-test-suite:; Depends on stage2 and runs the test-suite using the stage3 compiler (requires; in-tree test-suite). 3-stage; -------. This cache file can be used to generate a 3-st",MatchSource.DOCS,interpreter/llvm-project/clang/cmake/caches/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt:526,Modifiability,config,configures,526,"CMake Caches; ============. This directory contains CMake cache scripts that pre-populate the CMakeCache in; a build directory with commonly used settings. You can use the caches files with the following CMake invocation:. cmake -G <build system>; -C <path to cache file>; [additional CMake options (i.e. -DCMAKE_INSTALL_PREFIX=<install path>)]; <path to llvm>. Options specified on the command line will override options in the cache files. The following cache files exist. Apple-stage1; ------------. The Apple stage1 cache configures a two stage build similar to how Apple builds; the clang shipped with Xcode. The build files generated from this invocation has; a target named ""stage2"" which performs an LTO build of clang. The Apple-stage2 cache can be used directly to match the build settings Apple; uses in shipping builds without doing a full bootstrap build. PGO; ---. The PGO CMake cache can be used to generate a multi-stage instrumented compiler.; You can configure your build directory with the following invocation of CMake:. cmake -G <generator> -C <path_to_clang>/cmake/caches/PGO.cmake <source dir>. After configuration the following additional targets will be generated:. stage2-instrumented:; Builds a stage1 x86 compiler, runtime, and required tools (llvm-config,; llvm-profdata) then uses that compiler to build an instrumented stage2 compiler. stage2-instrumented-generate-profdata:; Depends on ""stage2-instrumented"" and will use the instrumented compiler to; generate profdata based on the training files in <clang>/utils/perf-training. stage2:; Depends on ""stage2-instrumented-generate-profdata"" and will use the stage1; compiler with the stage2 profdata to build a PGO-optimized compiler. stage2-check-llvm:; Depends on stage2 and runs check-llvm using the stage3 compiler. stage2-check-clang:; Depends on stage2 and runs check-clang using the stage3 compiler. stage2-check-all:; Depends on stage2 and runs check-all using the stage3 compiler. stage2-test-suite:; Depends on ",MatchSource.DOCS,interpreter/llvm-project/clang/cmake/caches/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt:969,Modifiability,config,configure,969,"CMake Caches; ============. This directory contains CMake cache scripts that pre-populate the CMakeCache in; a build directory with commonly used settings. You can use the caches files with the following CMake invocation:. cmake -G <build system>; -C <path to cache file>; [additional CMake options (i.e. -DCMAKE_INSTALL_PREFIX=<install path>)]; <path to llvm>. Options specified on the command line will override options in the cache files. The following cache files exist. Apple-stage1; ------------. The Apple stage1 cache configures a two stage build similar to how Apple builds; the clang shipped with Xcode. The build files generated from this invocation has; a target named ""stage2"" which performs an LTO build of clang. The Apple-stage2 cache can be used directly to match the build settings Apple; uses in shipping builds without doing a full bootstrap build. PGO; ---. The PGO CMake cache can be used to generate a multi-stage instrumented compiler.; You can configure your build directory with the following invocation of CMake:. cmake -G <generator> -C <path_to_clang>/cmake/caches/PGO.cmake <source dir>. After configuration the following additional targets will be generated:. stage2-instrumented:; Builds a stage1 x86 compiler, runtime, and required tools (llvm-config,; llvm-profdata) then uses that compiler to build an instrumented stage2 compiler. stage2-instrumented-generate-profdata:; Depends on ""stage2-instrumented"" and will use the instrumented compiler to; generate profdata based on the training files in <clang>/utils/perf-training. stage2:; Depends on ""stage2-instrumented-generate-profdata"" and will use the stage1; compiler with the stage2 profdata to build a PGO-optimized compiler. stage2-check-llvm:; Depends on stage2 and runs check-llvm using the stage3 compiler. stage2-check-clang:; Depends on stage2 and runs check-clang using the stage3 compiler. stage2-check-all:; Depends on stage2 and runs check-all using the stage3 compiler. stage2-test-suite:; Depends on ",MatchSource.DOCS,interpreter/llvm-project/clang/cmake/caches/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt:1124,Modifiability,config,configuration,1124,"s. You can use the caches files with the following CMake invocation:. cmake -G <build system>; -C <path to cache file>; [additional CMake options (i.e. -DCMAKE_INSTALL_PREFIX=<install path>)]; <path to llvm>. Options specified on the command line will override options in the cache files. The following cache files exist. Apple-stage1; ------------. The Apple stage1 cache configures a two stage build similar to how Apple builds; the clang shipped with Xcode. The build files generated from this invocation has; a target named ""stage2"" which performs an LTO build of clang. The Apple-stage2 cache can be used directly to match the build settings Apple; uses in shipping builds without doing a full bootstrap build. PGO; ---. The PGO CMake cache can be used to generate a multi-stage instrumented compiler.; You can configure your build directory with the following invocation of CMake:. cmake -G <generator> -C <path_to_clang>/cmake/caches/PGO.cmake <source dir>. After configuration the following additional targets will be generated:. stage2-instrumented:; Builds a stage1 x86 compiler, runtime, and required tools (llvm-config,; llvm-profdata) then uses that compiler to build an instrumented stage2 compiler. stage2-instrumented-generate-profdata:; Depends on ""stage2-instrumented"" and will use the instrumented compiler to; generate profdata based on the training files in <clang>/utils/perf-training. stage2:; Depends on ""stage2-instrumented-generate-profdata"" and will use the stage1; compiler with the stage2 profdata to build a PGO-optimized compiler. stage2-check-llvm:; Depends on stage2 and runs check-llvm using the stage3 compiler. stage2-check-clang:; Depends on stage2 and runs check-clang using the stage3 compiler. stage2-check-all:; Depends on stage2 and runs check-all using the stage3 compiler. stage2-test-suite:; Depends on stage2 and runs the test-suite using the stage3 compiler (requires; in-tree test-suite). 3-stage; -------. This cache file can be used to generate a 3-st",MatchSource.DOCS,interpreter/llvm-project/clang/cmake/caches/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt:1277,Modifiability,config,config,1277,"tional CMake options (i.e. -DCMAKE_INSTALL_PREFIX=<install path>)]; <path to llvm>. Options specified on the command line will override options in the cache files. The following cache files exist. Apple-stage1; ------------. The Apple stage1 cache configures a two stage build similar to how Apple builds; the clang shipped with Xcode. The build files generated from this invocation has; a target named ""stage2"" which performs an LTO build of clang. The Apple-stage2 cache can be used directly to match the build settings Apple; uses in shipping builds without doing a full bootstrap build. PGO; ---. The PGO CMake cache can be used to generate a multi-stage instrumented compiler.; You can configure your build directory with the following invocation of CMake:. cmake -G <generator> -C <path_to_clang>/cmake/caches/PGO.cmake <source dir>. After configuration the following additional targets will be generated:. stage2-instrumented:; Builds a stage1 x86 compiler, runtime, and required tools (llvm-config,; llvm-profdata) then uses that compiler to build an instrumented stage2 compiler. stage2-instrumented-generate-profdata:; Depends on ""stage2-instrumented"" and will use the instrumented compiler to; generate profdata based on the training files in <clang>/utils/perf-training. stage2:; Depends on ""stage2-instrumented-generate-profdata"" and will use the stage1; compiler with the stage2 profdata to build a PGO-optimized compiler. stage2-check-llvm:; Depends on stage2 and runs check-llvm using the stage3 compiler. stage2-check-clang:; Depends on stage2 and runs check-clang using the stage3 compiler. stage2-check-all:; Depends on stage2 and runs check-all using the stage3 compiler. stage2-test-suite:; Depends on stage2 and runs the test-suite using the stage3 compiler (requires; in-tree test-suite). 3-stage; -------. This cache file can be used to generate a 3-stage clang build. You can configure; using the following CMake command:. cmake -C <path to clang>/cmake/caches/3-stage.cmake ",MatchSource.DOCS,interpreter/llvm-project/clang/cmake/caches/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt:2179,Modifiability,config,configure,2179,"--------. The Apple stage1 cache configures a two stage build similar to how Apple builds; the clang shipped with Xcode. The build files generated from this invocation has; a target named ""stage2"" which performs an LTO build of clang. The Apple-stage2 cache can be used directly to match the build settings Apple; uses in shipping builds without doing a full bootstrap build. PGO; ---. The PGO CMake cache can be used to generate a multi-stage instrumented compiler.; You can configure your build directory with the following invocation of CMake:. cmake -G <generator> -C <path_to_clang>/cmake/caches/PGO.cmake <source dir>. After configuration the following additional targets will be generated:. stage2-instrumented:; Builds a stage1 x86 compiler, runtime, and required tools (llvm-config,; llvm-profdata) then uses that compiler to build an instrumented stage2 compiler. stage2-instrumented-generate-profdata:; Depends on ""stage2-instrumented"" and will use the instrumented compiler to; generate profdata based on the training files in <clang>/utils/perf-training. stage2:; Depends on ""stage2-instrumented-generate-profdata"" and will use the stage1; compiler with the stage2 profdata to build a PGO-optimized compiler. stage2-check-llvm:; Depends on stage2 and runs check-llvm using the stage3 compiler. stage2-check-clang:; Depends on stage2 and runs check-clang using the stage3 compiler. stage2-check-all:; Depends on stage2 and runs check-all using the stage3 compiler. stage2-test-suite:; Depends on stage2 and runs the test-suite using the stage3 compiler (requires; in-tree test-suite). 3-stage; -------. This cache file can be used to generate a 3-stage clang build. You can configure; using the following CMake command:. cmake -C <path to clang>/cmake/caches/3-stage.cmake -G Ninja <path to llvm>. You can then run ""ninja stage3-clang"" to build stage1, stage2 and stage3 clangs. This is useful for finding non-determinism the compiler by verifying that stage2; and stage3 are identical.; ",MatchSource.DOCS,interpreter/llvm-project/clang/cmake/caches/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt:58,Performance,cache,cache,58,"CMake Caches; ============. This directory contains CMake cache scripts that pre-populate the CMakeCache in; a build directory with commonly used settings. You can use the caches files with the following CMake invocation:. cmake -G <build system>; -C <path to cache file>; [additional CMake options (i.e. -DCMAKE_INSTALL_PREFIX=<install path>)]; <path to llvm>. Options specified on the command line will override options in the cache files. The following cache files exist. Apple-stage1; ------------. The Apple stage1 cache configures a two stage build similar to how Apple builds; the clang shipped with Xcode. The build files generated from this invocation has; a target named ""stage2"" which performs an LTO build of clang. The Apple-stage2 cache can be used directly to match the build settings Apple; uses in shipping builds without doing a full bootstrap build. PGO; ---. The PGO CMake cache can be used to generate a multi-stage instrumented compiler.; You can configure your build directory with the following invocation of CMake:. cmake -G <generator> -C <path_to_clang>/cmake/caches/PGO.cmake <source dir>. After configuration the following additional targets will be generated:. stage2-instrumented:; Builds a stage1 x86 compiler, runtime, and required tools (llvm-config,; llvm-profdata) then uses that compiler to build an instrumented stage2 compiler. stage2-instrumented-generate-profdata:; Depends on ""stage2-instrumented"" and will use the instrumented compiler to; generate profdata based on the training files in <clang>/utils/perf-training. stage2:; Depends on ""stage2-instrumented-generate-profdata"" and will use the stage1; compiler with the stage2 profdata to build a PGO-optimized compiler. stage2-check-llvm:; Depends on stage2 and runs check-llvm using the stage3 compiler. stage2-check-clang:; Depends on stage2 and runs check-clang using the stage3 compiler. stage2-check-all:; Depends on stage2 and runs check-all using the stage3 compiler. stage2-test-suite:; Depends on ",MatchSource.DOCS,interpreter/llvm-project/clang/cmake/caches/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt:172,Performance,cache,caches,172,"CMake Caches; ============. This directory contains CMake cache scripts that pre-populate the CMakeCache in; a build directory with commonly used settings. You can use the caches files with the following CMake invocation:. cmake -G <build system>; -C <path to cache file>; [additional CMake options (i.e. -DCMAKE_INSTALL_PREFIX=<install path>)]; <path to llvm>. Options specified on the command line will override options in the cache files. The following cache files exist. Apple-stage1; ------------. The Apple stage1 cache configures a two stage build similar to how Apple builds; the clang shipped with Xcode. The build files generated from this invocation has; a target named ""stage2"" which performs an LTO build of clang. The Apple-stage2 cache can be used directly to match the build settings Apple; uses in shipping builds without doing a full bootstrap build. PGO; ---. The PGO CMake cache can be used to generate a multi-stage instrumented compiler.; You can configure your build directory with the following invocation of CMake:. cmake -G <generator> -C <path_to_clang>/cmake/caches/PGO.cmake <source dir>. After configuration the following additional targets will be generated:. stage2-instrumented:; Builds a stage1 x86 compiler, runtime, and required tools (llvm-config,; llvm-profdata) then uses that compiler to build an instrumented stage2 compiler. stage2-instrumented-generate-profdata:; Depends on ""stage2-instrumented"" and will use the instrumented compiler to; generate profdata based on the training files in <clang>/utils/perf-training. stage2:; Depends on ""stage2-instrumented-generate-profdata"" and will use the stage1; compiler with the stage2 profdata to build a PGO-optimized compiler. stage2-check-llvm:; Depends on stage2 and runs check-llvm using the stage3 compiler. stage2-check-clang:; Depends on stage2 and runs check-clang using the stage3 compiler. stage2-check-all:; Depends on stage2 and runs check-all using the stage3 compiler. stage2-test-suite:; Depends on ",MatchSource.DOCS,interpreter/llvm-project/clang/cmake/caches/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt:260,Performance,cache,cache,260,"CMake Caches; ============. This directory contains CMake cache scripts that pre-populate the CMakeCache in; a build directory with commonly used settings. You can use the caches files with the following CMake invocation:. cmake -G <build system>; -C <path to cache file>; [additional CMake options (i.e. -DCMAKE_INSTALL_PREFIX=<install path>)]; <path to llvm>. Options specified on the command line will override options in the cache files. The following cache files exist. Apple-stage1; ------------. The Apple stage1 cache configures a two stage build similar to how Apple builds; the clang shipped with Xcode. The build files generated from this invocation has; a target named ""stage2"" which performs an LTO build of clang. The Apple-stage2 cache can be used directly to match the build settings Apple; uses in shipping builds without doing a full bootstrap build. PGO; ---. The PGO CMake cache can be used to generate a multi-stage instrumented compiler.; You can configure your build directory with the following invocation of CMake:. cmake -G <generator> -C <path_to_clang>/cmake/caches/PGO.cmake <source dir>. After configuration the following additional targets will be generated:. stage2-instrumented:; Builds a stage1 x86 compiler, runtime, and required tools (llvm-config,; llvm-profdata) then uses that compiler to build an instrumented stage2 compiler. stage2-instrumented-generate-profdata:; Depends on ""stage2-instrumented"" and will use the instrumented compiler to; generate profdata based on the training files in <clang>/utils/perf-training. stage2:; Depends on ""stage2-instrumented-generate-profdata"" and will use the stage1; compiler with the stage2 profdata to build a PGO-optimized compiler. stage2-check-llvm:; Depends on stage2 and runs check-llvm using the stage3 compiler. stage2-check-clang:; Depends on stage2 and runs check-clang using the stage3 compiler. stage2-check-all:; Depends on stage2 and runs check-all using the stage3 compiler. stage2-test-suite:; Depends on ",MatchSource.DOCS,interpreter/llvm-project/clang/cmake/caches/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt:429,Performance,cache,cache,429,"CMake Caches; ============. This directory contains CMake cache scripts that pre-populate the CMakeCache in; a build directory with commonly used settings. You can use the caches files with the following CMake invocation:. cmake -G <build system>; -C <path to cache file>; [additional CMake options (i.e. -DCMAKE_INSTALL_PREFIX=<install path>)]; <path to llvm>. Options specified on the command line will override options in the cache files. The following cache files exist. Apple-stage1; ------------. The Apple stage1 cache configures a two stage build similar to how Apple builds; the clang shipped with Xcode. The build files generated from this invocation has; a target named ""stage2"" which performs an LTO build of clang. The Apple-stage2 cache can be used directly to match the build settings Apple; uses in shipping builds without doing a full bootstrap build. PGO; ---. The PGO CMake cache can be used to generate a multi-stage instrumented compiler.; You can configure your build directory with the following invocation of CMake:. cmake -G <generator> -C <path_to_clang>/cmake/caches/PGO.cmake <source dir>. After configuration the following additional targets will be generated:. stage2-instrumented:; Builds a stage1 x86 compiler, runtime, and required tools (llvm-config,; llvm-profdata) then uses that compiler to build an instrumented stage2 compiler. stage2-instrumented-generate-profdata:; Depends on ""stage2-instrumented"" and will use the instrumented compiler to; generate profdata based on the training files in <clang>/utils/perf-training. stage2:; Depends on ""stage2-instrumented-generate-profdata"" and will use the stage1; compiler with the stage2 profdata to build a PGO-optimized compiler. stage2-check-llvm:; Depends on stage2 and runs check-llvm using the stage3 compiler. stage2-check-clang:; Depends on stage2 and runs check-clang using the stage3 compiler. stage2-check-all:; Depends on stage2 and runs check-all using the stage3 compiler. stage2-test-suite:; Depends on ",MatchSource.DOCS,interpreter/llvm-project/clang/cmake/caches/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt:456,Performance,cache,cache,456,"CMake Caches; ============. This directory contains CMake cache scripts that pre-populate the CMakeCache in; a build directory with commonly used settings. You can use the caches files with the following CMake invocation:. cmake -G <build system>; -C <path to cache file>; [additional CMake options (i.e. -DCMAKE_INSTALL_PREFIX=<install path>)]; <path to llvm>. Options specified on the command line will override options in the cache files. The following cache files exist. Apple-stage1; ------------. The Apple stage1 cache configures a two stage build similar to how Apple builds; the clang shipped with Xcode. The build files generated from this invocation has; a target named ""stage2"" which performs an LTO build of clang. The Apple-stage2 cache can be used directly to match the build settings Apple; uses in shipping builds without doing a full bootstrap build. PGO; ---. The PGO CMake cache can be used to generate a multi-stage instrumented compiler.; You can configure your build directory with the following invocation of CMake:. cmake -G <generator> -C <path_to_clang>/cmake/caches/PGO.cmake <source dir>. After configuration the following additional targets will be generated:. stage2-instrumented:; Builds a stage1 x86 compiler, runtime, and required tools (llvm-config,; llvm-profdata) then uses that compiler to build an instrumented stage2 compiler. stage2-instrumented-generate-profdata:; Depends on ""stage2-instrumented"" and will use the instrumented compiler to; generate profdata based on the training files in <clang>/utils/perf-training. stage2:; Depends on ""stage2-instrumented-generate-profdata"" and will use the stage1; compiler with the stage2 profdata to build a PGO-optimized compiler. stage2-check-llvm:; Depends on stage2 and runs check-llvm using the stage3 compiler. stage2-check-clang:; Depends on stage2 and runs check-clang using the stage3 compiler. stage2-check-all:; Depends on stage2 and runs check-all using the stage3 compiler. stage2-test-suite:; Depends on ",MatchSource.DOCS,interpreter/llvm-project/clang/cmake/caches/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt:520,Performance,cache,cache,520,"CMake Caches; ============. This directory contains CMake cache scripts that pre-populate the CMakeCache in; a build directory with commonly used settings. You can use the caches files with the following CMake invocation:. cmake -G <build system>; -C <path to cache file>; [additional CMake options (i.e. -DCMAKE_INSTALL_PREFIX=<install path>)]; <path to llvm>. Options specified on the command line will override options in the cache files. The following cache files exist. Apple-stage1; ------------. The Apple stage1 cache configures a two stage build similar to how Apple builds; the clang shipped with Xcode. The build files generated from this invocation has; a target named ""stage2"" which performs an LTO build of clang. The Apple-stage2 cache can be used directly to match the build settings Apple; uses in shipping builds without doing a full bootstrap build. PGO; ---. The PGO CMake cache can be used to generate a multi-stage instrumented compiler.; You can configure your build directory with the following invocation of CMake:. cmake -G <generator> -C <path_to_clang>/cmake/caches/PGO.cmake <source dir>. After configuration the following additional targets will be generated:. stage2-instrumented:; Builds a stage1 x86 compiler, runtime, and required tools (llvm-config,; llvm-profdata) then uses that compiler to build an instrumented stage2 compiler. stage2-instrumented-generate-profdata:; Depends on ""stage2-instrumented"" and will use the instrumented compiler to; generate profdata based on the training files in <clang>/utils/perf-training. stage2:; Depends on ""stage2-instrumented-generate-profdata"" and will use the stage1; compiler with the stage2 profdata to build a PGO-optimized compiler. stage2-check-llvm:; Depends on stage2 and runs check-llvm using the stage3 compiler. stage2-check-clang:; Depends on stage2 and runs check-clang using the stage3 compiler. stage2-check-all:; Depends on stage2 and runs check-all using the stage3 compiler. stage2-test-suite:; Depends on ",MatchSource.DOCS,interpreter/llvm-project/clang/cmake/caches/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt:696,Performance,perform,performs,696,"CMake Caches; ============. This directory contains CMake cache scripts that pre-populate the CMakeCache in; a build directory with commonly used settings. You can use the caches files with the following CMake invocation:. cmake -G <build system>; -C <path to cache file>; [additional CMake options (i.e. -DCMAKE_INSTALL_PREFIX=<install path>)]; <path to llvm>. Options specified on the command line will override options in the cache files. The following cache files exist. Apple-stage1; ------------. The Apple stage1 cache configures a two stage build similar to how Apple builds; the clang shipped with Xcode. The build files generated from this invocation has; a target named ""stage2"" which performs an LTO build of clang. The Apple-stage2 cache can be used directly to match the build settings Apple; uses in shipping builds without doing a full bootstrap build. PGO; ---. The PGO CMake cache can be used to generate a multi-stage instrumented compiler.; You can configure your build directory with the following invocation of CMake:. cmake -G <generator> -C <path_to_clang>/cmake/caches/PGO.cmake <source dir>. After configuration the following additional targets will be generated:. stage2-instrumented:; Builds a stage1 x86 compiler, runtime, and required tools (llvm-config,; llvm-profdata) then uses that compiler to build an instrumented stage2 compiler. stage2-instrumented-generate-profdata:; Depends on ""stage2-instrumented"" and will use the instrumented compiler to; generate profdata based on the training files in <clang>/utils/perf-training. stage2:; Depends on ""stage2-instrumented-generate-profdata"" and will use the stage1; compiler with the stage2 profdata to build a PGO-optimized compiler. stage2-check-llvm:; Depends on stage2 and runs check-llvm using the stage3 compiler. stage2-check-clang:; Depends on stage2 and runs check-clang using the stage3 compiler. stage2-check-all:; Depends on stage2 and runs check-all using the stage3 compiler. stage2-test-suite:; Depends on ",MatchSource.DOCS,interpreter/llvm-project/clang/cmake/caches/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt:745,Performance,cache,cache,745,"CMake Caches; ============. This directory contains CMake cache scripts that pre-populate the CMakeCache in; a build directory with commonly used settings. You can use the caches files with the following CMake invocation:. cmake -G <build system>; -C <path to cache file>; [additional CMake options (i.e. -DCMAKE_INSTALL_PREFIX=<install path>)]; <path to llvm>. Options specified on the command line will override options in the cache files. The following cache files exist. Apple-stage1; ------------. The Apple stage1 cache configures a two stage build similar to how Apple builds; the clang shipped with Xcode. The build files generated from this invocation has; a target named ""stage2"" which performs an LTO build of clang. The Apple-stage2 cache can be used directly to match the build settings Apple; uses in shipping builds without doing a full bootstrap build. PGO; ---. The PGO CMake cache can be used to generate a multi-stage instrumented compiler.; You can configure your build directory with the following invocation of CMake:. cmake -G <generator> -C <path_to_clang>/cmake/caches/PGO.cmake <source dir>. After configuration the following additional targets will be generated:. stage2-instrumented:; Builds a stage1 x86 compiler, runtime, and required tools (llvm-config,; llvm-profdata) then uses that compiler to build an instrumented stage2 compiler. stage2-instrumented-generate-profdata:; Depends on ""stage2-instrumented"" and will use the instrumented compiler to; generate profdata based on the training files in <clang>/utils/perf-training. stage2:; Depends on ""stage2-instrumented-generate-profdata"" and will use the stage1; compiler with the stage2 profdata to build a PGO-optimized compiler. stage2-check-llvm:; Depends on stage2 and runs check-llvm using the stage3 compiler. stage2-check-clang:; Depends on stage2 and runs check-clang using the stage3 compiler. stage2-check-all:; Depends on stage2 and runs check-all using the stage3 compiler. stage2-test-suite:; Depends on ",MatchSource.DOCS,interpreter/llvm-project/clang/cmake/caches/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt:893,Performance,cache,cache,893,"CMake Caches; ============. This directory contains CMake cache scripts that pre-populate the CMakeCache in; a build directory with commonly used settings. You can use the caches files with the following CMake invocation:. cmake -G <build system>; -C <path to cache file>; [additional CMake options (i.e. -DCMAKE_INSTALL_PREFIX=<install path>)]; <path to llvm>. Options specified on the command line will override options in the cache files. The following cache files exist. Apple-stage1; ------------. The Apple stage1 cache configures a two stage build similar to how Apple builds; the clang shipped with Xcode. The build files generated from this invocation has; a target named ""stage2"" which performs an LTO build of clang. The Apple-stage2 cache can be used directly to match the build settings Apple; uses in shipping builds without doing a full bootstrap build. PGO; ---. The PGO CMake cache can be used to generate a multi-stage instrumented compiler.; You can configure your build directory with the following invocation of CMake:. cmake -G <generator> -C <path_to_clang>/cmake/caches/PGO.cmake <source dir>. After configuration the following additional targets will be generated:. stage2-instrumented:; Builds a stage1 x86 compiler, runtime, and required tools (llvm-config,; llvm-profdata) then uses that compiler to build an instrumented stage2 compiler. stage2-instrumented-generate-profdata:; Depends on ""stage2-instrumented"" and will use the instrumented compiler to; generate profdata based on the training files in <clang>/utils/perf-training. stage2:; Depends on ""stage2-instrumented-generate-profdata"" and will use the stage1; compiler with the stage2 profdata to build a PGO-optimized compiler. stage2-check-llvm:; Depends on stage2 and runs check-llvm using the stage3 compiler. stage2-check-clang:; Depends on stage2 and runs check-clang using the stage3 compiler. stage2-check-all:; Depends on stage2 and runs check-all using the stage3 compiler. stage2-test-suite:; Depends on ",MatchSource.DOCS,interpreter/llvm-project/clang/cmake/caches/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt:1087,Performance,cache,caches,1087,"ts that pre-populate the CMakeCache in; a build directory with commonly used settings. You can use the caches files with the following CMake invocation:. cmake -G <build system>; -C <path to cache file>; [additional CMake options (i.e. -DCMAKE_INSTALL_PREFIX=<install path>)]; <path to llvm>. Options specified on the command line will override options in the cache files. The following cache files exist. Apple-stage1; ------------. The Apple stage1 cache configures a two stage build similar to how Apple builds; the clang shipped with Xcode. The build files generated from this invocation has; a target named ""stage2"" which performs an LTO build of clang. The Apple-stage2 cache can be used directly to match the build settings Apple; uses in shipping builds without doing a full bootstrap build. PGO; ---. The PGO CMake cache can be used to generate a multi-stage instrumented compiler.; You can configure your build directory with the following invocation of CMake:. cmake -G <generator> -C <path_to_clang>/cmake/caches/PGO.cmake <source dir>. After configuration the following additional targets will be generated:. stage2-instrumented:; Builds a stage1 x86 compiler, runtime, and required tools (llvm-config,; llvm-profdata) then uses that compiler to build an instrumented stage2 compiler. stage2-instrumented-generate-profdata:; Depends on ""stage2-instrumented"" and will use the instrumented compiler to; generate profdata based on the training files in <clang>/utils/perf-training. stage2:; Depends on ""stage2-instrumented-generate-profdata"" and will use the stage1; compiler with the stage2 profdata to build a PGO-optimized compiler. stage2-check-llvm:; Depends on stage2 and runs check-llvm using the stage3 compiler. stage2-check-clang:; Depends on stage2 and runs check-clang using the stage3 compiler. stage2-check-all:; Depends on stage2 and runs check-all using the stage3 compiler. stage2-test-suite:; Depends on stage2 and runs the test-suite using the stage3 compiler (requires; ",MatchSource.DOCS,interpreter/llvm-project/clang/cmake/caches/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt:1695,Performance,optimiz,optimized,1695,"--------. The Apple stage1 cache configures a two stage build similar to how Apple builds; the clang shipped with Xcode. The build files generated from this invocation has; a target named ""stage2"" which performs an LTO build of clang. The Apple-stage2 cache can be used directly to match the build settings Apple; uses in shipping builds without doing a full bootstrap build. PGO; ---. The PGO CMake cache can be used to generate a multi-stage instrumented compiler.; You can configure your build directory with the following invocation of CMake:. cmake -G <generator> -C <path_to_clang>/cmake/caches/PGO.cmake <source dir>. After configuration the following additional targets will be generated:. stage2-instrumented:; Builds a stage1 x86 compiler, runtime, and required tools (llvm-config,; llvm-profdata) then uses that compiler to build an instrumented stage2 compiler. stage2-instrumented-generate-profdata:; Depends on ""stage2-instrumented"" and will use the instrumented compiler to; generate profdata based on the training files in <clang>/utils/perf-training. stage2:; Depends on ""stage2-instrumented-generate-profdata"" and will use the stage1; compiler with the stage2 profdata to build a PGO-optimized compiler. stage2-check-llvm:; Depends on stage2 and runs check-llvm using the stage3 compiler. stage2-check-clang:; Depends on stage2 and runs check-clang using the stage3 compiler. stage2-check-all:; Depends on stage2 and runs check-all using the stage3 compiler. stage2-test-suite:; Depends on stage2 and runs the test-suite using the stage3 compiler (requires; in-tree test-suite). 3-stage; -------. This cache file can be used to generate a 3-stage clang build. You can configure; using the following CMake command:. cmake -C <path to clang>/cmake/caches/3-stage.cmake -G Ninja <path to llvm>. You can then run ""ninja stage3-clang"" to build stage1, stage2 and stage3 clangs. This is useful for finding non-determinism the compiler by verifying that stage2; and stage3 are identical.; ",MatchSource.DOCS,interpreter/llvm-project/clang/cmake/caches/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt:2113,Performance,cache,cache,2113,"--------. The Apple stage1 cache configures a two stage build similar to how Apple builds; the clang shipped with Xcode. The build files generated from this invocation has; a target named ""stage2"" which performs an LTO build of clang. The Apple-stage2 cache can be used directly to match the build settings Apple; uses in shipping builds without doing a full bootstrap build. PGO; ---. The PGO CMake cache can be used to generate a multi-stage instrumented compiler.; You can configure your build directory with the following invocation of CMake:. cmake -G <generator> -C <path_to_clang>/cmake/caches/PGO.cmake <source dir>. After configuration the following additional targets will be generated:. stage2-instrumented:; Builds a stage1 x86 compiler, runtime, and required tools (llvm-config,; llvm-profdata) then uses that compiler to build an instrumented stage2 compiler. stage2-instrumented-generate-profdata:; Depends on ""stage2-instrumented"" and will use the instrumented compiler to; generate profdata based on the training files in <clang>/utils/perf-training. stage2:; Depends on ""stage2-instrumented-generate-profdata"" and will use the stage1; compiler with the stage2 profdata to build a PGO-optimized compiler. stage2-check-llvm:; Depends on stage2 and runs check-llvm using the stage3 compiler. stage2-check-clang:; Depends on stage2 and runs check-clang using the stage3 compiler. stage2-check-all:; Depends on stage2 and runs check-all using the stage3 compiler. stage2-test-suite:; Depends on stage2 and runs the test-suite using the stage3 compiler (requires; in-tree test-suite). 3-stage; -------. This cache file can be used to generate a 3-stage clang build. You can configure; using the following CMake command:. cmake -C <path to clang>/cmake/caches/3-stage.cmake -G Ninja <path to llvm>. You can then run ""ninja stage3-clang"" to build stage1, stage2 and stage3 clangs. This is useful for finding non-determinism the compiler by verifying that stage2; and stage3 are identical.; ",MatchSource.DOCS,interpreter/llvm-project/clang/cmake/caches/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt:2257,Performance,cache,caches,2257,"--------. The Apple stage1 cache configures a two stage build similar to how Apple builds; the clang shipped with Xcode. The build files generated from this invocation has; a target named ""stage2"" which performs an LTO build of clang. The Apple-stage2 cache can be used directly to match the build settings Apple; uses in shipping builds without doing a full bootstrap build. PGO; ---. The PGO CMake cache can be used to generate a multi-stage instrumented compiler.; You can configure your build directory with the following invocation of CMake:. cmake -G <generator> -C <path_to_clang>/cmake/caches/PGO.cmake <source dir>. After configuration the following additional targets will be generated:. stage2-instrumented:; Builds a stage1 x86 compiler, runtime, and required tools (llvm-config,; llvm-profdata) then uses that compiler to build an instrumented stage2 compiler. stage2-instrumented-generate-profdata:; Depends on ""stage2-instrumented"" and will use the instrumented compiler to; generate profdata based on the training files in <clang>/utils/perf-training. stage2:; Depends on ""stage2-instrumented-generate-profdata"" and will use the stage1; compiler with the stage2 profdata to build a PGO-optimized compiler. stage2-check-llvm:; Depends on stage2 and runs check-llvm using the stage3 compiler. stage2-check-clang:; Depends on stage2 and runs check-clang using the stage3 compiler. stage2-check-all:; Depends on stage2 and runs check-all using the stage3 compiler. stage2-test-suite:; Depends on stage2 and runs the test-suite using the stage3 compiler (requires; in-tree test-suite). 3-stage; -------. This cache file can be used to generate a 3-stage clang build. You can configure; using the following CMake command:. cmake -C <path to clang>/cmake/caches/3-stage.cmake -G Ninja <path to llvm>. You can then run ""ninja stage3-clang"" to build stage1, stage2 and stage3 clangs. This is useful for finding non-determinism the compiler by verifying that stage2; and stage3 are identical.; ",MatchSource.DOCS,interpreter/llvm-project/clang/cmake/caches/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt:1977,Testability,test,test-suite,1977,"--------. The Apple stage1 cache configures a two stage build similar to how Apple builds; the clang shipped with Xcode. The build files generated from this invocation has; a target named ""stage2"" which performs an LTO build of clang. The Apple-stage2 cache can be used directly to match the build settings Apple; uses in shipping builds without doing a full bootstrap build. PGO; ---. The PGO CMake cache can be used to generate a multi-stage instrumented compiler.; You can configure your build directory with the following invocation of CMake:. cmake -G <generator> -C <path_to_clang>/cmake/caches/PGO.cmake <source dir>. After configuration the following additional targets will be generated:. stage2-instrumented:; Builds a stage1 x86 compiler, runtime, and required tools (llvm-config,; llvm-profdata) then uses that compiler to build an instrumented stage2 compiler. stage2-instrumented-generate-profdata:; Depends on ""stage2-instrumented"" and will use the instrumented compiler to; generate profdata based on the training files in <clang>/utils/perf-training. stage2:; Depends on ""stage2-instrumented-generate-profdata"" and will use the stage1; compiler with the stage2 profdata to build a PGO-optimized compiler. stage2-check-llvm:; Depends on stage2 and runs check-llvm using the stage3 compiler. stage2-check-clang:; Depends on stage2 and runs check-clang using the stage3 compiler. stage2-check-all:; Depends on stage2 and runs check-all using the stage3 compiler. stage2-test-suite:; Depends on stage2 and runs the test-suite using the stage3 compiler (requires; in-tree test-suite). 3-stage; -------. This cache file can be used to generate a 3-stage clang build. You can configure; using the following CMake command:. cmake -C <path to clang>/cmake/caches/3-stage.cmake -G Ninja <path to llvm>. You can then run ""ninja stage3-clang"" to build stage1, stage2 and stage3 clangs. This is useful for finding non-determinism the compiler by verifying that stage2; and stage3 are identical.; ",MatchSource.DOCS,interpreter/llvm-project/clang/cmake/caches/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt:2021,Testability,test,test-suite,2021,"--------. The Apple stage1 cache configures a two stage build similar to how Apple builds; the clang shipped with Xcode. The build files generated from this invocation has; a target named ""stage2"" which performs an LTO build of clang. The Apple-stage2 cache can be used directly to match the build settings Apple; uses in shipping builds without doing a full bootstrap build. PGO; ---. The PGO CMake cache can be used to generate a multi-stage instrumented compiler.; You can configure your build directory with the following invocation of CMake:. cmake -G <generator> -C <path_to_clang>/cmake/caches/PGO.cmake <source dir>. After configuration the following additional targets will be generated:. stage2-instrumented:; Builds a stage1 x86 compiler, runtime, and required tools (llvm-config,; llvm-profdata) then uses that compiler to build an instrumented stage2 compiler. stage2-instrumented-generate-profdata:; Depends on ""stage2-instrumented"" and will use the instrumented compiler to; generate profdata based on the training files in <clang>/utils/perf-training. stage2:; Depends on ""stage2-instrumented-generate-profdata"" and will use the stage1; compiler with the stage2 profdata to build a PGO-optimized compiler. stage2-check-llvm:; Depends on stage2 and runs check-llvm using the stage3 compiler. stage2-check-clang:; Depends on stage2 and runs check-clang using the stage3 compiler. stage2-check-all:; Depends on stage2 and runs check-all using the stage3 compiler. stage2-test-suite:; Depends on stage2 and runs the test-suite using the stage3 compiler (requires; in-tree test-suite). 3-stage; -------. This cache file can be used to generate a 3-stage clang build. You can configure; using the following CMake command:. cmake -C <path to clang>/cmake/caches/3-stage.cmake -G Ninja <path to llvm>. You can then run ""ninja stage3-clang"" to build stage1, stage2 and stage3 clangs. This is useful for finding non-determinism the compiler by verifying that stage2; and stage3 are identical.; ",MatchSource.DOCS,interpreter/llvm-project/clang/cmake/caches/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt:2077,Testability,test,test-suite,2077,"--------. The Apple stage1 cache configures a two stage build similar to how Apple builds; the clang shipped with Xcode. The build files generated from this invocation has; a target named ""stage2"" which performs an LTO build of clang. The Apple-stage2 cache can be used directly to match the build settings Apple; uses in shipping builds without doing a full bootstrap build. PGO; ---. The PGO CMake cache can be used to generate a multi-stage instrumented compiler.; You can configure your build directory with the following invocation of CMake:. cmake -G <generator> -C <path_to_clang>/cmake/caches/PGO.cmake <source dir>. After configuration the following additional targets will be generated:. stage2-instrumented:; Builds a stage1 x86 compiler, runtime, and required tools (llvm-config,; llvm-profdata) then uses that compiler to build an instrumented stage2 compiler. stage2-instrumented-generate-profdata:; Depends on ""stage2-instrumented"" and will use the instrumented compiler to; generate profdata based on the training files in <clang>/utils/perf-training. stage2:; Depends on ""stage2-instrumented-generate-profdata"" and will use the stage1; compiler with the stage2 profdata to build a PGO-optimized compiler. stage2-check-llvm:; Depends on stage2 and runs check-llvm using the stage3 compiler. stage2-check-clang:; Depends on stage2 and runs check-clang using the stage3 compiler. stage2-check-all:; Depends on stage2 and runs check-all using the stage3 compiler. stage2-test-suite:; Depends on stage2 and runs the test-suite using the stage3 compiler (requires; in-tree test-suite). 3-stage; -------. This cache file can be used to generate a 3-stage clang build. You can configure; using the following CMake command:. cmake -C <path to clang>/cmake/caches/3-stage.cmake -G Ninja <path to llvm>. You can then run ""ninja stage3-clang"" to build stage1, stage2 and stage3 clangs. This is useful for finding non-determinism the compiler by verifying that stage2; and stage3 are identical.; ",MatchSource.DOCS,interpreter/llvm-project/clang/cmake/caches/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/caches/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/modules/CMakeLists.txt:2325,Deployability,install,install,2325,"""${clang_cmake_builddir}""); set(CLANG_CONFIG_LLVM_CMAKE_DIR ""${llvm_cmake_builddir}""); set(CLANG_CONFIG_INCLUDE_EXPORTS ""include(\""${clang_cmake_builddir}/ClangTargets.cmake\"")""); set(CLANG_CONFIG_INCLUDE_DIRS; ""${CLANG_SOURCE_DIR}/include""; ""${CLANG_BINARY_DIR}/include""; ); configure_file(; ${CMAKE_CURRENT_SOURCE_DIR}/ClangConfig.cmake.in; ${clang_cmake_builddir}/ClangConfig.cmake; @ONLY); configure_file(; ${CMAKE_CURRENT_SOURCE_DIR}/ClangConfigVersion.cmake.in; ${clang_cmake_builddir}/ClangConfigVersion.cmake; @ONLY); set(CLANG_CONFIG_CMAKE_DIR); set(CLANG_CONFIG_LLVM_CMAKE_DIR). # For compatibility with projects that include(ClangConfig); # via CMAKE_MODULE_PATH, place API modules next to it.; # Copy without source permissions because the source could be read-only,; # but we need to write into the copied folder.; file(COPY .; DESTINATION ${clang_cmake_builddir}; NO_SOURCE_PERMISSIONS; FILES_MATCHING PATTERN *.cmake; PATTERN CMakeFiles EXCLUDE; ). # Generate ClangConfig.cmake for the install tree.; find_prefix_from_config(CLANG_CONFIG_CODE CLANG_INSTALL_PREFIX ""${CLANG_INSTALL_PACKAGE_DIR}""); extend_path(CLANG_CONFIG_CMAKE_DIR ""\${CLANG_INSTALL_PREFIX}"" ""${CLANG_INSTALL_PACKAGE_DIR}""); extend_path(CLANG_CONFIG_LLVM_CMAKE_DIR ""\${CLANG_INSTALL_PREFIX}"" ""${LLVM_INSTALL_PACKAGE_DIR}""); get_config_exports_includes(Clang CLANG_CONFIG_INCLUDE_EXPORTS); extend_path(base_includedir ""\${CLANG_INSTALL_PREFIX}"" ""${CMAKE_INSTALL_INCLUDEDIR}""); set(CLANG_CONFIG_INCLUDE_DIRS; ""${base_includedir}""; ); configure_file(; ${CMAKE_CURRENT_SOURCE_DIR}/ClangConfig.cmake.in; ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/ClangConfig.cmake; @ONLY); configure_file(; ${CMAKE_CURRENT_SOURCE_DIR}/ClangConfigVersion.cmake.in; ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/ClangConfigVersion.cmake; @ONLY); set(CLANG_CONFIG_CODE); set(CLANG_CONFIG_CMAKE_DIR). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install_distribution_exports(Clang). install(FILES; ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/ClangConfig.cmake; ${CMAK",MatchSource.DOCS,interpreter/llvm-project/clang/cmake/modules/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/modules/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/modules/CMakeLists.txt:3246,Deployability,install,install,3246,"ENT_SOURCE_DIR}/ClangConfigVersion.cmake.in; ${clang_cmake_builddir}/ClangConfigVersion.cmake; @ONLY); set(CLANG_CONFIG_CMAKE_DIR); set(CLANG_CONFIG_LLVM_CMAKE_DIR). # For compatibility with projects that include(ClangConfig); # via CMAKE_MODULE_PATH, place API modules next to it.; # Copy without source permissions because the source could be read-only,; # but we need to write into the copied folder.; file(COPY .; DESTINATION ${clang_cmake_builddir}; NO_SOURCE_PERMISSIONS; FILES_MATCHING PATTERN *.cmake; PATTERN CMakeFiles EXCLUDE; ). # Generate ClangConfig.cmake for the install tree.; find_prefix_from_config(CLANG_CONFIG_CODE CLANG_INSTALL_PREFIX ""${CLANG_INSTALL_PACKAGE_DIR}""); extend_path(CLANG_CONFIG_CMAKE_DIR ""\${CLANG_INSTALL_PREFIX}"" ""${CLANG_INSTALL_PACKAGE_DIR}""); extend_path(CLANG_CONFIG_LLVM_CMAKE_DIR ""\${CLANG_INSTALL_PREFIX}"" ""${LLVM_INSTALL_PACKAGE_DIR}""); get_config_exports_includes(Clang CLANG_CONFIG_INCLUDE_EXPORTS); extend_path(base_includedir ""\${CLANG_INSTALL_PREFIX}"" ""${CMAKE_INSTALL_INCLUDEDIR}""); set(CLANG_CONFIG_INCLUDE_DIRS; ""${base_includedir}""; ); configure_file(; ${CMAKE_CURRENT_SOURCE_DIR}/ClangConfig.cmake.in; ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/ClangConfig.cmake; @ONLY); configure_file(; ${CMAKE_CURRENT_SOURCE_DIR}/ClangConfigVersion.cmake.in; ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/ClangConfigVersion.cmake; @ONLY); set(CLANG_CONFIG_CODE); set(CLANG_CONFIG_CMAKE_DIR). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install_distribution_exports(Clang). install(FILES; ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/ClangConfig.cmake; ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/ClangConfigVersion.cmake; ${CMAKE_CURRENT_SOURCE_DIR}/AddClang.cmake; DESTINATION ${CLANG_INSTALL_PACKAGE_DIR}; COMPONENT clang-cmake-exports). if(NOT LLVM_ENABLE_IDE); # Add a dummy target so this can be used with LLVM_DISTRIBUTION_COMPONENTS; add_custom_target(clang-cmake-exports); add_llvm_install_targets(install-clang-cmake-exports; COMPONENT clang-cmake-exports); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/cmake/modules/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/modules/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/modules/CMakeLists.txt:3668,Deployability,install,install-clang-cmake-exports,3668,"ENT_SOURCE_DIR}/ClangConfigVersion.cmake.in; ${clang_cmake_builddir}/ClangConfigVersion.cmake; @ONLY); set(CLANG_CONFIG_CMAKE_DIR); set(CLANG_CONFIG_LLVM_CMAKE_DIR). # For compatibility with projects that include(ClangConfig); # via CMAKE_MODULE_PATH, place API modules next to it.; # Copy without source permissions because the source could be read-only,; # but we need to write into the copied folder.; file(COPY .; DESTINATION ${clang_cmake_builddir}; NO_SOURCE_PERMISSIONS; FILES_MATCHING PATTERN *.cmake; PATTERN CMakeFiles EXCLUDE; ). # Generate ClangConfig.cmake for the install tree.; find_prefix_from_config(CLANG_CONFIG_CODE CLANG_INSTALL_PREFIX ""${CLANG_INSTALL_PACKAGE_DIR}""); extend_path(CLANG_CONFIG_CMAKE_DIR ""\${CLANG_INSTALL_PREFIX}"" ""${CLANG_INSTALL_PACKAGE_DIR}""); extend_path(CLANG_CONFIG_LLVM_CMAKE_DIR ""\${CLANG_INSTALL_PREFIX}"" ""${LLVM_INSTALL_PACKAGE_DIR}""); get_config_exports_includes(Clang CLANG_CONFIG_INCLUDE_EXPORTS); extend_path(base_includedir ""\${CLANG_INSTALL_PREFIX}"" ""${CMAKE_INSTALL_INCLUDEDIR}""); set(CLANG_CONFIG_INCLUDE_DIRS; ""${base_includedir}""; ); configure_file(; ${CMAKE_CURRENT_SOURCE_DIR}/ClangConfig.cmake.in; ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/ClangConfig.cmake; @ONLY); configure_file(; ${CMAKE_CURRENT_SOURCE_DIR}/ClangConfigVersion.cmake.in; ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/ClangConfigVersion.cmake; @ONLY); set(CLANG_CONFIG_CODE); set(CLANG_CONFIG_CMAKE_DIR). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install_distribution_exports(Clang). install(FILES; ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/ClangConfig.cmake; ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/ClangConfigVersion.cmake; ${CMAKE_CURRENT_SOURCE_DIR}/AddClang.cmake; DESTINATION ${CLANG_INSTALL_PACKAGE_DIR}; COMPONENT clang-cmake-exports). if(NOT LLVM_ENABLE_IDE); # Add a dummy target so this can be used with LLVM_DISTRIBUTION_COMPONENTS; add_custom_target(clang-cmake-exports); add_llvm_install_targets(install-clang-cmake-exports; COMPONENT clang-cmake-exports); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/cmake/modules/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/cmake/modules/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:96259,Availability,error,error,96259,; compiler-rt/lib/memprof/memprof_mibmap.h; compiler-rt/lib/memprof/memprof_posix.cpp; compiler-rt/lib/memprof/memprof_preinit.cpp; compiler-rt/lib/memprof/memprof_rawprofile.cpp; compiler-rt/lib/memprof/memprof_rawprofile.h; compiler-rt/lib/memprof/memprof_rtl.cpp; compiler-rt/lib/memprof/memprof_shadow_setup.cpp; compiler-rt/lib/memprof/memprof_stack.cpp; compiler-rt/lib/memprof/memprof_stack.h; compiler-rt/lib/memprof/memprof_stats.cpp; compiler-rt/lib/memprof/memprof_stats.h; compiler-rt/lib/memprof/memprof_thread.cpp; compiler-rt/lib/memprof/memprof_thread.h; compiler-rt/lib/memprof/tests/driver.cpp; compiler-rt/lib/memprof/tests/rawprofile.cpp; compiler-rt/lib/msan/msan_chained_origin_depot.h; compiler-rt/lib/msan/msan_flags.h; compiler-rt/lib/msan/msan_poisoning.h; compiler-rt/lib/msan/msan_report.h; compiler-rt/lib/orc/adt.h; compiler-rt/lib/orc/debug.h; compiler-rt/lib/orc/elfnix_platform.cpp; compiler-rt/lib/orc/elfnix_platform.h; compiler-rt/lib/orc/endianness.h; compiler-rt/lib/orc/error.h; compiler-rt/lib/orc/executor_address.h; compiler-rt/lib/orc/extensible_rtti.cpp; compiler-rt/lib/orc/extensible_rtti.h; compiler-rt/lib/orc/log_error_to_stderr.cpp; compiler-rt/lib/orc/macho_ehframe_registration.cpp; compiler-rt/lib/orc/macho_platform.cpp; compiler-rt/lib/orc/macho_platform.h; compiler-rt/lib/orc/run_program_wrapper.cpp; compiler-rt/lib/orc/simple_packed_serialization.h; compiler-rt/lib/orc/wrapper_function_utils.h; compiler-rt/lib/orc/unittests/adt_test.cpp; compiler-rt/lib/orc/unittests/c_api_test.cpp; compiler-rt/lib/orc/unittests/endian_test.cpp; compiler-rt/lib/orc/unittests/error_test.cpp; compiler-rt/lib/orc/unittests/executor_address_test.cpp; compiler-rt/lib/orc/unittests/extensible_rtti_test.cpp; compiler-rt/lib/orc/unittests/orc_unit_test_main.cpp; compiler-rt/lib/orc/unittests/simple_packed_serialization_test.cpp; compiler-rt/lib/orc/unittests/wrapper_function_utils_test.cpp; compiler-rt/lib/safestack/safestack_util.h; compiler-rt/lib/sanit,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:125169,Availability,error,error,125169,runtime/allocatable.cpp; flang/runtime/assign.cpp; flang/runtime/buffer.cpp; flang/runtime/buffer.h; flang/runtime/character.cpp; flang/runtime/command.cpp; flang/runtime/complex-reduction.h; flang/runtime/connection.cpp; flang/runtime/connection.h; flang/runtime/copy.cpp; flang/runtime/copy.h; flang/runtime/derived-api.cpp; flang/runtime/derived.h; flang/runtime/descriptor-io.cpp; flang/runtime/descriptor-io.h; flang/runtime/descriptor.cpp; flang/runtime/dot-product.cpp; flang/runtime/edit-input.cpp; flang/runtime/edit-input.h; flang/runtime/edit-output.cpp; flang/runtime/edit-output.h; flang/runtime/environment.cpp; flang/runtime/environment.h; flang/runtime/extensions.cpp; flang/runtime/extrema.cpp; flang/runtime/file.cpp; flang/runtime/file.h; flang/runtime/findloc.cpp; flang/runtime/format-implementation.h; flang/runtime/format.cpp; flang/runtime/format.h; flang/runtime/inquiry.cpp; flang/runtime/internal-unit.cpp; flang/runtime/internal-unit.h; flang/runtime/io-api.cpp; flang/runtime/io-error.cpp; flang/runtime/io-error.h; flang/runtime/io-stmt.cpp; flang/runtime/io-stmt.h; flang/runtime/iostat.cpp; flang/runtime/ISO_Fortran_binding.cpp; flang/runtime/lock.h; flang/runtime/main.cpp; flang/runtime/matmul.cpp; flang/runtime/memory.cpp; flang/runtime/misc-intrinsic.cpp; flang/runtime/namelist.cpp; flang/runtime/namelist.h; flang/runtime/numeric.cpp; flang/runtime/pointer.cpp; flang/runtime/product.cpp; flang/runtime/ragged.cpp; flang/runtime/random.cpp; flang/runtime/reduction-templates.h; flang/runtime/reduction.cpp; flang/runtime/stat.cpp; flang/runtime/stat.h; flang/runtime/stop.cpp; flang/runtime/sum.cpp; flang/runtime/support.cpp; flang/runtime/terminator.cpp; flang/runtime/terminator.h; flang/runtime/time-intrinsic.cpp; flang/runtime/tools.cpp; flang/runtime/tools.h; flang/runtime/transformational.cpp; flang/runtime/type-code.cpp; flang/runtime/type-info.cpp; flang/runtime/type-info.h; flang/runtime/unit-map.cpp; flang/runtime/unit-map.h; flang/runtime/unit,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:125197,Availability,error,error,125197,ng/runtime/assign.cpp; flang/runtime/buffer.cpp; flang/runtime/buffer.h; flang/runtime/character.cpp; flang/runtime/command.cpp; flang/runtime/complex-reduction.h; flang/runtime/connection.cpp; flang/runtime/connection.h; flang/runtime/copy.cpp; flang/runtime/copy.h; flang/runtime/derived-api.cpp; flang/runtime/derived.h; flang/runtime/descriptor-io.cpp; flang/runtime/descriptor-io.h; flang/runtime/descriptor.cpp; flang/runtime/dot-product.cpp; flang/runtime/edit-input.cpp; flang/runtime/edit-input.h; flang/runtime/edit-output.cpp; flang/runtime/edit-output.h; flang/runtime/environment.cpp; flang/runtime/environment.h; flang/runtime/extensions.cpp; flang/runtime/extrema.cpp; flang/runtime/file.cpp; flang/runtime/file.h; flang/runtime/findloc.cpp; flang/runtime/format-implementation.h; flang/runtime/format.cpp; flang/runtime/format.h; flang/runtime/inquiry.cpp; flang/runtime/internal-unit.cpp; flang/runtime/internal-unit.h; flang/runtime/io-api.cpp; flang/runtime/io-error.cpp; flang/runtime/io-error.h; flang/runtime/io-stmt.cpp; flang/runtime/io-stmt.h; flang/runtime/iostat.cpp; flang/runtime/ISO_Fortran_binding.cpp; flang/runtime/lock.h; flang/runtime/main.cpp; flang/runtime/matmul.cpp; flang/runtime/memory.cpp; flang/runtime/misc-intrinsic.cpp; flang/runtime/namelist.cpp; flang/runtime/namelist.h; flang/runtime/numeric.cpp; flang/runtime/pointer.cpp; flang/runtime/product.cpp; flang/runtime/ragged.cpp; flang/runtime/random.cpp; flang/runtime/reduction-templates.h; flang/runtime/reduction.cpp; flang/runtime/stat.cpp; flang/runtime/stat.h; flang/runtime/stop.cpp; flang/runtime/sum.cpp; flang/runtime/support.cpp; flang/runtime/terminator.cpp; flang/runtime/terminator.h; flang/runtime/time-intrinsic.cpp; flang/runtime/tools.cpp; flang/runtime/tools.h; flang/runtime/transformational.cpp; flang/runtime/type-code.cpp; flang/runtime/type-info.cpp; flang/runtime/type-info.h; flang/runtime/unit-map.cpp; flang/runtime/unit-map.h; flang/runtime/unit.h; flang/tools/bbc/bbc.cpp;,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:101210,Deployability,release,release,101210,ib/scudo/standalone/combined.h; compiler-rt/lib/scudo/standalone/common.cpp; compiler-rt/lib/scudo/standalone/common.h; compiler-rt/lib/scudo/standalone/crc32_hw.cpp; compiler-rt/lib/scudo/standalone/flags.cpp; compiler-rt/lib/scudo/standalone/flags.h; compiler-rt/lib/scudo/standalone/flags_parser.cpp; compiler-rt/lib/scudo/standalone/flags_parser.h; compiler-rt/lib/scudo/standalone/fuchsia.cpp; compiler-rt/lib/scudo/standalone/fuchsia.h; compiler-rt/lib/scudo/standalone/internal_defs.h; compiler-rt/lib/scudo/standalone/linux.cpp; compiler-rt/lib/scudo/standalone/linux.h; compiler-rt/lib/scudo/standalone/list.h; compiler-rt/lib/scudo/standalone/local_cache.h; compiler-rt/lib/scudo/standalone/memtag.h; compiler-rt/lib/scudo/standalone/mutex.h; compiler-rt/lib/scudo/standalone/options.h; compiler-rt/lib/scudo/standalone/platform.h; compiler-rt/lib/scudo/standalone/primary32.h; compiler-rt/lib/scudo/standalone/primary64.h; compiler-rt/lib/scudo/standalone/quarantine.h; compiler-rt/lib/scudo/standalone/release.cpp; compiler-rt/lib/scudo/standalone/release.h; compiler-rt/lib/scudo/standalone/report.cpp; compiler-rt/lib/scudo/standalone/report.h; compiler-rt/lib/scudo/standalone/secondary.h; compiler-rt/lib/scudo/standalone/size_class_map.h; compiler-rt/lib/scudo/standalone/stack_depot.h; compiler-rt/lib/scudo/standalone/stats.h; compiler-rt/lib/scudo/standalone/string_utils.cpp; compiler-rt/lib/scudo/standalone/string_utils.h; compiler-rt/lib/scudo/standalone/trusty.cpp; compiler-rt/lib/scudo/standalone/trusty.h; compiler-rt/lib/scudo/standalone/tsd.h; compiler-rt/lib/scudo/standalone/tsd_exclusive.h; compiler-rt/lib/scudo/standalone/tsd_shared.h; compiler-rt/lib/scudo/standalone/vector.h; compiler-rt/lib/scudo/standalone/wrappers_c.cpp; compiler-rt/lib/scudo/standalone/wrappers_c.h; compiler-rt/lib/scudo/standalone/wrappers_c_bionic.cpp; compiler-rt/lib/scudo/standalone/wrappers_c_checks.h; compiler-rt/lib/scudo/standalone/benchmarks/malloc_benchmark.cpp; compiler-rt/li,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:101256,Deployability,release,release,101256,ib/scudo/standalone/common.cpp; compiler-rt/lib/scudo/standalone/common.h; compiler-rt/lib/scudo/standalone/crc32_hw.cpp; compiler-rt/lib/scudo/standalone/flags.cpp; compiler-rt/lib/scudo/standalone/flags.h; compiler-rt/lib/scudo/standalone/flags_parser.cpp; compiler-rt/lib/scudo/standalone/flags_parser.h; compiler-rt/lib/scudo/standalone/fuchsia.cpp; compiler-rt/lib/scudo/standalone/fuchsia.h; compiler-rt/lib/scudo/standalone/internal_defs.h; compiler-rt/lib/scudo/standalone/linux.cpp; compiler-rt/lib/scudo/standalone/linux.h; compiler-rt/lib/scudo/standalone/list.h; compiler-rt/lib/scudo/standalone/local_cache.h; compiler-rt/lib/scudo/standalone/memtag.h; compiler-rt/lib/scudo/standalone/mutex.h; compiler-rt/lib/scudo/standalone/options.h; compiler-rt/lib/scudo/standalone/platform.h; compiler-rt/lib/scudo/standalone/primary32.h; compiler-rt/lib/scudo/standalone/primary64.h; compiler-rt/lib/scudo/standalone/quarantine.h; compiler-rt/lib/scudo/standalone/release.cpp; compiler-rt/lib/scudo/standalone/release.h; compiler-rt/lib/scudo/standalone/report.cpp; compiler-rt/lib/scudo/standalone/report.h; compiler-rt/lib/scudo/standalone/secondary.h; compiler-rt/lib/scudo/standalone/size_class_map.h; compiler-rt/lib/scudo/standalone/stack_depot.h; compiler-rt/lib/scudo/standalone/stats.h; compiler-rt/lib/scudo/standalone/string_utils.cpp; compiler-rt/lib/scudo/standalone/string_utils.h; compiler-rt/lib/scudo/standalone/trusty.cpp; compiler-rt/lib/scudo/standalone/trusty.h; compiler-rt/lib/scudo/standalone/tsd.h; compiler-rt/lib/scudo/standalone/tsd_exclusive.h; compiler-rt/lib/scudo/standalone/tsd_shared.h; compiler-rt/lib/scudo/standalone/vector.h; compiler-rt/lib/scudo/standalone/wrappers_c.cpp; compiler-rt/lib/scudo/standalone/wrappers_c.h; compiler-rt/lib/scudo/standalone/wrappers_c_bionic.cpp; compiler-rt/lib/scudo/standalone/wrappers_c_checks.h; compiler-rt/lib/scudo/standalone/benchmarks/malloc_benchmark.cpp; compiler-rt/lib/scudo/standalone/fuzz/get_error_info_fuzzer,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:79795,Energy Efficiency,monitor,monitor,79795,x/Symbol.h; clang-tools-extra/clangd/index/SymbolCollector.cpp; clang-tools-extra/clangd/index/SymbolID.cpp; clang-tools-extra/clangd/index/SymbolLocation.cpp; clang-tools-extra/clangd/index/SymbolLocation.h; clang-tools-extra/clangd/index/SymbolOrigin.cpp; clang-tools-extra/clangd/index/SymbolOrigin.h; clang-tools-extra/clangd/index/YAMLSerialization.cpp; clang-tools-extra/clangd/index/dex/Iterator.cpp; clang-tools-extra/clangd/index/dex/Iterator.h; clang-tools-extra/clangd/index/dex/PostingList.cpp; clang-tools-extra/clangd/index/dex/PostingList.h; clang-tools-extra/clangd/index/dex/Token.h; clang-tools-extra/clangd/index/dex/Trigram.cpp; clang-tools-extra/clangd/index/dex/Trigram.h; clang-tools-extra/clangd/index/dex/dexp/Dexp.cpp; clang-tools-extra/clangd/index/remote/Client.cpp; clang-tools-extra/clangd/index/remote/Client.h; clang-tools-extra/clangd/index/remote/marshalling/Marshalling.cpp; clang-tools-extra/clangd/index/remote/marshalling/Marshalling.h; clang-tools-extra/clangd/index/remote/monitor/Monitor.cpp; clang-tools-extra/clangd/index/remote/server/Server.cpp; clang-tools-extra/clangd/index/remote/unimplemented/UnimplementedClient.cpp; clang-tools-extra/clangd/indexer/IndexerMain.cpp; clang-tools-extra/clangd/refactor/InsertionPoint.cpp; clang-tools-extra/clangd/refactor/InsertionPoint.h; clang-tools-extra/clangd/refactor/Rename.h; clang-tools-extra/clangd/refactor/Tweak.cpp; clang-tools-extra/clangd/refactor/Tweak.h; clang-tools-extra/clangd/refactor/tweaks/AddUsing.cpp; clang-tools-extra/clangd/refactor/tweaks/AnnotateHighlightings.cpp; clang-tools-extra/clangd/refactor/tweaks/DefineInline.cpp; clang-tools-extra/clangd/refactor/tweaks/DefineOutline.cpp; clang-tools-extra/clangd/refactor/tweaks/DumpAST.cpp; clang-tools-extra/clangd/refactor/tweaks/ExpandMacro.cpp; clang-tools-extra/clangd/refactor/tweaks/ExtractFunction.cpp; clang-tools-extra/clangd/refactor/tweaks/ObjCLocalizeStringLiteral.cpp; clang-tools-extra/clangd/refactor/tweaks/RemoveUsingNames,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:116883,Energy Efficiency,power,power,116883,ntics/unparse-with-symbols.h; flang/lib/Common/default-kinds.cpp; flang/lib/Common/Fortran-features.cpp; flang/lib/Common/Fortran.cpp; flang/lib/Common/idioms.cpp; flang/lib/Decimal/big-radix-floating-point.h; flang/lib/Decimal/binary-to-decimal.cpp; flang/lib/Decimal/decimal-to-binary.cpp; flang/lib/Evaluate/call.cpp; flang/lib/Evaluate/character.h; flang/lib/Evaluate/check-expression.cpp; flang/lib/Evaluate/common.cpp; flang/lib/Evaluate/complex.cpp; flang/lib/Evaluate/constant.cpp; flang/lib/Evaluate/expression.cpp; flang/lib/Evaluate/fold-character.cpp; flang/lib/Evaluate/fold-complex.cpp; flang/lib/Evaluate/fold-designator.cpp; flang/lib/Evaluate/fold-implementation.h; flang/lib/Evaluate/fold-logical.cpp; flang/lib/Evaluate/fold-real.cpp; flang/lib/Evaluate/fold-reduction.cpp; flang/lib/Evaluate/fold-reduction.h; flang/lib/Evaluate/fold.cpp; flang/lib/Evaluate/formatting.cpp; flang/lib/Evaluate/host.cpp; flang/lib/Evaluate/host.h; flang/lib/Evaluate/initial-image.cpp; flang/lib/Evaluate/int-power.h; flang/lib/Evaluate/integer.cpp; flang/lib/Evaluate/intrinsics-library.cpp; flang/lib/Evaluate/intrinsics.cpp; flang/lib/Evaluate/logical.cpp; flang/lib/Evaluate/real.cpp; flang/lib/Evaluate/shape.cpp; flang/lib/Evaluate/static-data.cpp; flang/lib/Evaluate/tools.cpp; flang/lib/Evaluate/type.cpp; flang/lib/Evaluate/variable.cpp; flang/lib/Frontend/CompilerInstance.cpp; flang/lib/Frontend/FrontendAction.cpp; flang/lib/Frontend/FrontendOptions.cpp; flang/lib/Frontend/TextDiagnostic.cpp; flang/lib/Frontend/TextDiagnosticBuffer.cpp; flang/lib/Frontend/TextDiagnosticPrinter.cpp; flang/lib/FrontendTool/ExecuteCompilerInvocation.cpp; flang/lib/Lower/Allocatable.cpp; flang/lib/Lower/Bridge.cpp; flang/lib/Lower/CallInterface.cpp; flang/lib/Lower/Coarray.cpp; flang/lib/Lower/ComponentPath.cpp; flang/lib/Lower/ConvertExpr.cpp; flang/lib/Lower/ConvertType.cpp; flang/lib/Lower/ConvertVariable.cpp; flang/lib/Lower/DumpEvaluateExpr.cpp; flang/lib/Lower/IntervalSet.h; flang/lib/Lower,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:121848,Energy Efficiency,allocate,allocate,121848,ang/lib/Parser/parse-tree.cpp; flang/lib/Parser/parsing.cpp; flang/lib/Parser/preprocessor.cpp; flang/lib/Parser/preprocessor.h; flang/lib/Parser/prescan.cpp; flang/lib/Parser/prescan.h; flang/lib/Parser/program-parsers.cpp; flang/lib/Parser/provenance.cpp; flang/lib/Parser/source.cpp; flang/lib/Parser/stmt-parser.h; flang/lib/Parser/token-parsers.h; flang/lib/Parser/token-sequence.cpp; flang/lib/Parser/token-sequence.h; flang/lib/Parser/tools.cpp; flang/lib/Parser/type-parser-implementation.h; flang/lib/Parser/type-parsers.h; flang/lib/Parser/unparse.cpp; flang/lib/Parser/user-state.cpp; flang/lib/Semantics/assignment.cpp; flang/lib/Semantics/assignment.h; flang/lib/Semantics/attr.cpp; flang/lib/Semantics/canonicalize-acc.cpp; flang/lib/Semantics/canonicalize-acc.h; flang/lib/Semantics/canonicalize-do.cpp; flang/lib/Semantics/canonicalize-do.h; flang/lib/Semantics/canonicalize-omp.cpp; flang/lib/Semantics/canonicalize-omp.h; flang/lib/Semantics/check-acc-structure.cpp; flang/lib/Semantics/check-allocate.cpp; flang/lib/Semantics/check-allocate.h; flang/lib/Semantics/check-arithmeticif.cpp; flang/lib/Semantics/check-arithmeticif.h; flang/lib/Semantics/check-call.h; flang/lib/Semantics/check-case.cpp; flang/lib/Semantics/check-case.h; flang/lib/Semantics/check-coarray.cpp; flang/lib/Semantics/check-coarray.h; flang/lib/Semantics/check-data.cpp; flang/lib/Semantics/check-data.h; flang/lib/Semantics/check-deallocate.cpp; flang/lib/Semantics/check-deallocate.h; flang/lib/Semantics/check-declarations.h; flang/lib/Semantics/check-directive-structure.h; flang/lib/Semantics/check-do-forall.cpp; flang/lib/Semantics/check-do-forall.h; flang/lib/Semantics/check-if-stmt.cpp; flang/lib/Semantics/check-if-stmt.h; flang/lib/Semantics/check-io.cpp; flang/lib/Semantics/check-io.h; flang/lib/Semantics/check-namelist.cpp; flang/lib/Semantics/check-namelist.h; flang/lib/Semantics/check-nullify.cpp; flang/lib/Semantics/check-nullify.h; flang/lib/Semantics/check-omp-structure.cpp; flang/l,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:121888,Energy Efficiency,allocate,allocate,121888,/Parser/parsing.cpp; flang/lib/Parser/preprocessor.cpp; flang/lib/Parser/preprocessor.h; flang/lib/Parser/prescan.cpp; flang/lib/Parser/prescan.h; flang/lib/Parser/program-parsers.cpp; flang/lib/Parser/provenance.cpp; flang/lib/Parser/source.cpp; flang/lib/Parser/stmt-parser.h; flang/lib/Parser/token-parsers.h; flang/lib/Parser/token-sequence.cpp; flang/lib/Parser/token-sequence.h; flang/lib/Parser/tools.cpp; flang/lib/Parser/type-parser-implementation.h; flang/lib/Parser/type-parsers.h; flang/lib/Parser/unparse.cpp; flang/lib/Parser/user-state.cpp; flang/lib/Semantics/assignment.cpp; flang/lib/Semantics/assignment.h; flang/lib/Semantics/attr.cpp; flang/lib/Semantics/canonicalize-acc.cpp; flang/lib/Semantics/canonicalize-acc.h; flang/lib/Semantics/canonicalize-do.cpp; flang/lib/Semantics/canonicalize-do.h; flang/lib/Semantics/canonicalize-omp.cpp; flang/lib/Semantics/canonicalize-omp.h; flang/lib/Semantics/check-acc-structure.cpp; flang/lib/Semantics/check-allocate.cpp; flang/lib/Semantics/check-allocate.h; flang/lib/Semantics/check-arithmeticif.cpp; flang/lib/Semantics/check-arithmeticif.h; flang/lib/Semantics/check-call.h; flang/lib/Semantics/check-case.cpp; flang/lib/Semantics/check-case.h; flang/lib/Semantics/check-coarray.cpp; flang/lib/Semantics/check-coarray.h; flang/lib/Semantics/check-data.cpp; flang/lib/Semantics/check-data.h; flang/lib/Semantics/check-deallocate.cpp; flang/lib/Semantics/check-deallocate.h; flang/lib/Semantics/check-declarations.h; flang/lib/Semantics/check-directive-structure.h; flang/lib/Semantics/check-do-forall.cpp; flang/lib/Semantics/check-do-forall.h; flang/lib/Semantics/check-if-stmt.cpp; flang/lib/Semantics/check-if-stmt.h; flang/lib/Semantics/check-io.cpp; flang/lib/Semantics/check-io.h; flang/lib/Semantics/check-namelist.cpp; flang/lib/Semantics/check-namelist.h; flang/lib/Semantics/check-nullify.cpp; flang/lib/Semantics/check-nullify.h; flang/lib/Semantics/check-omp-structure.cpp; flang/lib/Semantics/check-omp-structure.h; flan,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:160840,Energy Efficiency,reduce,reduce,160840,_3.bench.cpp; libcxx/include/__algorithm/adjacent_find.h; libcxx/include/__algorithm/all_of.h; libcxx/include/__algorithm/any_of.h; libcxx/include/__algorithm/count.h; libcxx/include/__algorithm/count_if.h; libcxx/include/__algorithm/find.h; libcxx/include/__algorithm/find_first_of.h; libcxx/include/__algorithm/find_if.h; libcxx/include/__algorithm/find_if_not.h; libcxx/include/__algorithm/for_each.h; libcxx/include/__algorithm/for_each_n.h; libcxx/include/__algorithm/iter_swap.h; libcxx/include/__algorithm/mismatch.h; libcxx/include/__algorithm/none_of.h; libcxx/include/__algorithm/swap_ranges.h; libcxx/include/__compare/is_eq.h; libcxx/include/__filesystem/file_time_type.h; libcxx/include/__filesystem/file_type.h; libcxx/include/__filesystem/space_info.h; libcxx/include/__format/formatter_floating_point.h; libcxx/include/__format/formatter_pointer.h; libcxx/include/__memory/voidify.h; libcxx/include/__numeric/exclusive_scan.h; libcxx/include/__numeric/inclusive_scan.h; libcxx/include/__numeric/reduce.h; libcxx/include/__numeric/transform_reduce.h; libcxx/include/__random/default_random_engine.h; libcxx/include/__random/knuth_b.h; libcxx/include/__ranges/dangling.h; libcxx/include/__ranges/enable_borrowed_range.h; libcxx/include/__support/ibm/gettod_zos.h; libcxx/include/__support/ibm/nanosleep.h; libcxx/include/__support/openbsd/xlocale.h; libcxx/include/__support/solaris/floatingpoint.h; libcxx/include/__support/solaris/wchar.h; libcxx/include/__utility/auto_cast.h; libcxx/include/__utility/declval.h; libcxx/include/__utility/forward.h; libcxx/include/__utility/move.h; libcxx/include/__utility/swap.h; libcxx/src/chrono_system_time_init.h; libcxx/src/format.cpp; libcxx/src/ios.instantiations.cpp; libcxx/src/iostream_init.h; libcxx/src/legacy_pointer_safety.cpp; libcxx/src/utility.cpp; libcxx/src/experimental/memory_resource_init_helper.h; libcxx/src/include/to_chars_floating_point.h; libcxx/src/include/ryu/common.h; libcxx/src/include/ryu/d2fixed.h; libcxx/src/incl,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:336934,Energy Efficiency,reduce,reduce,336934,umper.cpp; llvm/tools/llvm-pdbutil/MinimalTypeDumper.h; llvm/tools/llvm-pdbutil/PrettyBuiltinDumper.cpp; llvm/tools/llvm-pdbutil/PrettyEnumDumper.cpp; llvm/tools/llvm-pdbutil/PrettyExternalSymbolDumper.cpp; llvm/tools/llvm-pdbutil/PrettyTypeDumper.cpp; llvm/tools/llvm-pdbutil/TypeReferenceTracker.h; llvm/tools/llvm-pdbutil/YAMLOutputStyle.h; llvm/tools/llvm-profgen/CallContext.h; llvm/tools/llvm-profgen/CSPreInliner.cpp; llvm/tools/llvm-profgen/CSPreInliner.h; llvm/tools/llvm-profgen/llvm-profgen.cpp; llvm/tools/llvm-profgen/PerfReader.cpp; llvm/tools/llvm-profgen/PerfReader.h; llvm/tools/llvm-rc/ResourceScriptCppFilter.cpp; llvm/tools/llvm-rc/ResourceScriptCppFilter.h; llvm/tools/llvm-rc/ResourceScriptParser.h; llvm/tools/llvm-rc/ResourceScriptStmt.cpp; llvm/tools/llvm-rc/ResourceScriptToken.h; llvm/tools/llvm-rc/ResourceVisitor.h; llvm/tools/llvm-readobj/ObjDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.h; llvm/tools/llvm-reduce/DeltaManager.cpp; llvm/tools/llvm-reduce/DeltaManager.h; llvm/tools/llvm-reduce/ReducerWorkItem.cpp; llvm/tools/llvm-reduce/ReducerWorkItem.h; llvm/tools/llvm-reduce/TestRunner.cpp; llvm/tools/llvm-reduce/TestRunner.h; llvm/tools/llvm-reduce/deltas/Delta.cpp; llvm/tools/llvm-reduce/deltas/Delta.h; llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp; llvm/tools/llvm-reduce/deltas/ReduceAliases.h; llvm/tools/llvm-reduce/deltas/ReduceArguments.h; llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp; llvm/tools/llvm-reduce/deltas/ReduceAttributes.h; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/del,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:336975,Energy Efficiency,reduce,reduce,336975,alTypeDumper.h; llvm/tools/llvm-pdbutil/PrettyBuiltinDumper.cpp; llvm/tools/llvm-pdbutil/PrettyEnumDumper.cpp; llvm/tools/llvm-pdbutil/PrettyExternalSymbolDumper.cpp; llvm/tools/llvm-pdbutil/PrettyTypeDumper.cpp; llvm/tools/llvm-pdbutil/TypeReferenceTracker.h; llvm/tools/llvm-pdbutil/YAMLOutputStyle.h; llvm/tools/llvm-profgen/CallContext.h; llvm/tools/llvm-profgen/CSPreInliner.cpp; llvm/tools/llvm-profgen/CSPreInliner.h; llvm/tools/llvm-profgen/llvm-profgen.cpp; llvm/tools/llvm-profgen/PerfReader.cpp; llvm/tools/llvm-profgen/PerfReader.h; llvm/tools/llvm-rc/ResourceScriptCppFilter.cpp; llvm/tools/llvm-rc/ResourceScriptCppFilter.h; llvm/tools/llvm-rc/ResourceScriptParser.h; llvm/tools/llvm-rc/ResourceScriptStmt.cpp; llvm/tools/llvm-rc/ResourceScriptToken.h; llvm/tools/llvm-rc/ResourceVisitor.h; llvm/tools/llvm-readobj/ObjDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.h; llvm/tools/llvm-reduce/DeltaManager.cpp; llvm/tools/llvm-reduce/DeltaManager.h; llvm/tools/llvm-reduce/ReducerWorkItem.cpp; llvm/tools/llvm-reduce/ReducerWorkItem.h; llvm/tools/llvm-reduce/TestRunner.cpp; llvm/tools/llvm-reduce/TestRunner.h; llvm/tools/llvm-reduce/deltas/Delta.cpp; llvm/tools/llvm-reduce/deltas/Delta.h; llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp; llvm/tools/llvm-reduce/deltas/ReduceAliases.h; llvm/tools/llvm-reduce/deltas/ReduceArguments.h; llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp; llvm/tools/llvm-reduce/deltas/ReduceAttributes.h; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/l,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:337014,Energy Efficiency,reduce,reduce,337014,ettyBuiltinDumper.cpp; llvm/tools/llvm-pdbutil/PrettyEnumDumper.cpp; llvm/tools/llvm-pdbutil/PrettyExternalSymbolDumper.cpp; llvm/tools/llvm-pdbutil/PrettyTypeDumper.cpp; llvm/tools/llvm-pdbutil/TypeReferenceTracker.h; llvm/tools/llvm-pdbutil/YAMLOutputStyle.h; llvm/tools/llvm-profgen/CallContext.h; llvm/tools/llvm-profgen/CSPreInliner.cpp; llvm/tools/llvm-profgen/CSPreInliner.h; llvm/tools/llvm-profgen/llvm-profgen.cpp; llvm/tools/llvm-profgen/PerfReader.cpp; llvm/tools/llvm-profgen/PerfReader.h; llvm/tools/llvm-rc/ResourceScriptCppFilter.cpp; llvm/tools/llvm-rc/ResourceScriptCppFilter.h; llvm/tools/llvm-rc/ResourceScriptParser.h; llvm/tools/llvm-rc/ResourceScriptStmt.cpp; llvm/tools/llvm-rc/ResourceScriptToken.h; llvm/tools/llvm-rc/ResourceVisitor.h; llvm/tools/llvm-readobj/ObjDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.h; llvm/tools/llvm-reduce/DeltaManager.cpp; llvm/tools/llvm-reduce/DeltaManager.h; llvm/tools/llvm-reduce/ReducerWorkItem.cpp; llvm/tools/llvm-reduce/ReducerWorkItem.h; llvm/tools/llvm-reduce/TestRunner.cpp; llvm/tools/llvm-reduce/TestRunner.h; llvm/tools/llvm-reduce/deltas/Delta.cpp; llvm/tools/llvm-reduce/deltas/Delta.h; llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp; llvm/tools/llvm-reduce/deltas/ReduceAliases.h; llvm/tools/llvm-reduce/deltas/ReduceArguments.h; llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp; llvm/tools/llvm-reduce/deltas/ReduceAttributes.h; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; l,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:337058,Energy Efficiency,reduce,reduce,337058,til/PrettyEnumDumper.cpp; llvm/tools/llvm-pdbutil/PrettyExternalSymbolDumper.cpp; llvm/tools/llvm-pdbutil/PrettyTypeDumper.cpp; llvm/tools/llvm-pdbutil/TypeReferenceTracker.h; llvm/tools/llvm-pdbutil/YAMLOutputStyle.h; llvm/tools/llvm-profgen/CallContext.h; llvm/tools/llvm-profgen/CSPreInliner.cpp; llvm/tools/llvm-profgen/CSPreInliner.h; llvm/tools/llvm-profgen/llvm-profgen.cpp; llvm/tools/llvm-profgen/PerfReader.cpp; llvm/tools/llvm-profgen/PerfReader.h; llvm/tools/llvm-rc/ResourceScriptCppFilter.cpp; llvm/tools/llvm-rc/ResourceScriptCppFilter.h; llvm/tools/llvm-rc/ResourceScriptParser.h; llvm/tools/llvm-rc/ResourceScriptStmt.cpp; llvm/tools/llvm-rc/ResourceScriptToken.h; llvm/tools/llvm-rc/ResourceVisitor.h; llvm/tools/llvm-readobj/ObjDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.h; llvm/tools/llvm-reduce/DeltaManager.cpp; llvm/tools/llvm-reduce/DeltaManager.h; llvm/tools/llvm-reduce/ReducerWorkItem.cpp; llvm/tools/llvm-reduce/ReducerWorkItem.h; llvm/tools/llvm-reduce/TestRunner.cpp; llvm/tools/llvm-reduce/TestRunner.h; llvm/tools/llvm-reduce/deltas/Delta.cpp; llvm/tools/llvm-reduce/deltas/Delta.h; llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp; llvm/tools/llvm-reduce/deltas/ReduceAliases.h; llvm/tools/llvm-reduce/deltas/ReduceArguments.h; llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp; llvm/tools/llvm-reduce/deltas/ReduceAttributes.h; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVa,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:337100,Energy Efficiency,reduce,reduce,337100,m-pdbutil/PrettyExternalSymbolDumper.cpp; llvm/tools/llvm-pdbutil/PrettyTypeDumper.cpp; llvm/tools/llvm-pdbutil/TypeReferenceTracker.h; llvm/tools/llvm-pdbutil/YAMLOutputStyle.h; llvm/tools/llvm-profgen/CallContext.h; llvm/tools/llvm-profgen/CSPreInliner.cpp; llvm/tools/llvm-profgen/CSPreInliner.h; llvm/tools/llvm-profgen/llvm-profgen.cpp; llvm/tools/llvm-profgen/PerfReader.cpp; llvm/tools/llvm-profgen/PerfReader.h; llvm/tools/llvm-rc/ResourceScriptCppFilter.cpp; llvm/tools/llvm-rc/ResourceScriptCppFilter.h; llvm/tools/llvm-rc/ResourceScriptParser.h; llvm/tools/llvm-rc/ResourceScriptStmt.cpp; llvm/tools/llvm-rc/ResourceScriptToken.h; llvm/tools/llvm-rc/ResourceVisitor.h; llvm/tools/llvm-readobj/ObjDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.h; llvm/tools/llvm-reduce/DeltaManager.cpp; llvm/tools/llvm-reduce/DeltaManager.h; llvm/tools/llvm-reduce/ReducerWorkItem.cpp; llvm/tools/llvm-reduce/ReducerWorkItem.h; llvm/tools/llvm-reduce/TestRunner.cpp; llvm/tools/llvm-reduce/TestRunner.h; llvm/tools/llvm-reduce/deltas/Delta.cpp; llvm/tools/llvm-reduce/deltas/Delta.h; llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp; llvm/tools/llvm-reduce/deltas/ReduceAliases.h; llvm/tools/llvm-reduce/deltas/ReduceArguments.h; llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp; llvm/tools/llvm-reduce/deltas/ReduceAttributes.h; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:337139,Energy Efficiency,reduce,reduce,337139,pp; llvm/tools/llvm-pdbutil/PrettyTypeDumper.cpp; llvm/tools/llvm-pdbutil/TypeReferenceTracker.h; llvm/tools/llvm-pdbutil/YAMLOutputStyle.h; llvm/tools/llvm-profgen/CallContext.h; llvm/tools/llvm-profgen/CSPreInliner.cpp; llvm/tools/llvm-profgen/CSPreInliner.h; llvm/tools/llvm-profgen/llvm-profgen.cpp; llvm/tools/llvm-profgen/PerfReader.cpp; llvm/tools/llvm-profgen/PerfReader.h; llvm/tools/llvm-rc/ResourceScriptCppFilter.cpp; llvm/tools/llvm-rc/ResourceScriptCppFilter.h; llvm/tools/llvm-rc/ResourceScriptParser.h; llvm/tools/llvm-rc/ResourceScriptStmt.cpp; llvm/tools/llvm-rc/ResourceScriptToken.h; llvm/tools/llvm-rc/ResourceVisitor.h; llvm/tools/llvm-readobj/ObjDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.h; llvm/tools/llvm-reduce/DeltaManager.cpp; llvm/tools/llvm-reduce/DeltaManager.h; llvm/tools/llvm-reduce/ReducerWorkItem.cpp; llvm/tools/llvm-reduce/ReducerWorkItem.h; llvm/tools/llvm-reduce/TestRunner.cpp; llvm/tools/llvm-reduce/TestRunner.h; llvm/tools/llvm-reduce/deltas/Delta.cpp; llvm/tools/llvm-reduce/deltas/Delta.h; llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp; llvm/tools/llvm-reduce/deltas/ReduceAliases.h; llvm/tools/llvm-reduce/deltas/ReduceArguments.h; llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp; llvm/tools/llvm-reduce/deltas/ReduceAttributes.h; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h;,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:337176,Energy Efficiency,reduce,reduce,337176,umper.cpp; llvm/tools/llvm-pdbutil/TypeReferenceTracker.h; llvm/tools/llvm-pdbutil/YAMLOutputStyle.h; llvm/tools/llvm-profgen/CallContext.h; llvm/tools/llvm-profgen/CSPreInliner.cpp; llvm/tools/llvm-profgen/CSPreInliner.h; llvm/tools/llvm-profgen/llvm-profgen.cpp; llvm/tools/llvm-profgen/PerfReader.cpp; llvm/tools/llvm-profgen/PerfReader.h; llvm/tools/llvm-rc/ResourceScriptCppFilter.cpp; llvm/tools/llvm-rc/ResourceScriptCppFilter.h; llvm/tools/llvm-rc/ResourceScriptParser.h; llvm/tools/llvm-rc/ResourceScriptStmt.cpp; llvm/tools/llvm-rc/ResourceScriptToken.h; llvm/tools/llvm-rc/ResourceVisitor.h; llvm/tools/llvm-readobj/ObjDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.h; llvm/tools/llvm-reduce/DeltaManager.cpp; llvm/tools/llvm-reduce/DeltaManager.h; llvm/tools/llvm-reduce/ReducerWorkItem.cpp; llvm/tools/llvm-reduce/ReducerWorkItem.h; llvm/tools/llvm-reduce/TestRunner.cpp; llvm/tools/llvm-reduce/TestRunner.h; llvm/tools/llvm-reduce/deltas/Delta.cpp; llvm/tools/llvm-reduce/deltas/Delta.h; llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp; llvm/tools/llvm-reduce/deltas/ReduceAliases.h; llvm/tools/llvm-reduce/deltas/ReduceArguments.h; llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp; llvm/tools/llvm-reduce/deltas/ReduceAttributes.h; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGl,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:337217,Energy Efficiency,reduce,reduce,337217,eferenceTracker.h; llvm/tools/llvm-pdbutil/YAMLOutputStyle.h; llvm/tools/llvm-profgen/CallContext.h; llvm/tools/llvm-profgen/CSPreInliner.cpp; llvm/tools/llvm-profgen/CSPreInliner.h; llvm/tools/llvm-profgen/llvm-profgen.cpp; llvm/tools/llvm-profgen/PerfReader.cpp; llvm/tools/llvm-profgen/PerfReader.h; llvm/tools/llvm-rc/ResourceScriptCppFilter.cpp; llvm/tools/llvm-rc/ResourceScriptCppFilter.h; llvm/tools/llvm-rc/ResourceScriptParser.h; llvm/tools/llvm-rc/ResourceScriptStmt.cpp; llvm/tools/llvm-rc/ResourceScriptToken.h; llvm/tools/llvm-rc/ResourceVisitor.h; llvm/tools/llvm-readobj/ObjDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.h; llvm/tools/llvm-reduce/DeltaManager.cpp; llvm/tools/llvm-reduce/DeltaManager.h; llvm/tools/llvm-reduce/ReducerWorkItem.cpp; llvm/tools/llvm-reduce/ReducerWorkItem.h; llvm/tools/llvm-reduce/TestRunner.cpp; llvm/tools/llvm-reduce/TestRunner.h; llvm/tools/llvm-reduce/deltas/Delta.cpp; llvm/tools/llvm-reduce/deltas/Delta.h; llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp; llvm/tools/llvm-reduce/deltas/ReduceAliases.h; llvm/tools/llvm-reduce/deltas/ReduceArguments.h; llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp; llvm/tools/llvm-reduce/deltas/ReduceAttributes.h; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/del,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:337256,Energy Efficiency,reduce,reduce,337256,AMLOutputStyle.h; llvm/tools/llvm-profgen/CallContext.h; llvm/tools/llvm-profgen/CSPreInliner.cpp; llvm/tools/llvm-profgen/CSPreInliner.h; llvm/tools/llvm-profgen/llvm-profgen.cpp; llvm/tools/llvm-profgen/PerfReader.cpp; llvm/tools/llvm-profgen/PerfReader.h; llvm/tools/llvm-rc/ResourceScriptCppFilter.cpp; llvm/tools/llvm-rc/ResourceScriptCppFilter.h; llvm/tools/llvm-rc/ResourceScriptParser.h; llvm/tools/llvm-rc/ResourceScriptStmt.cpp; llvm/tools/llvm-rc/ResourceScriptToken.h; llvm/tools/llvm-rc/ResourceVisitor.h; llvm/tools/llvm-readobj/ObjDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.h; llvm/tools/llvm-reduce/DeltaManager.cpp; llvm/tools/llvm-reduce/DeltaManager.h; llvm/tools/llvm-reduce/ReducerWorkItem.cpp; llvm/tools/llvm-reduce/ReducerWorkItem.h; llvm/tools/llvm-reduce/TestRunner.cpp; llvm/tools/llvm-reduce/TestRunner.h; llvm/tools/llvm-reduce/deltas/Delta.cpp; llvm/tools/llvm-reduce/deltas/Delta.h; llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp; llvm/tools/llvm-reduce/deltas/ReduceAliases.h; llvm/tools/llvm-reduce/deltas/ReduceArguments.h; llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp; llvm/tools/llvm-reduce/deltas/ReduceAttributes.h; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-redu,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:337305,Energy Efficiency,reduce,reduce,337305,ntext.h; llvm/tools/llvm-profgen/CSPreInliner.cpp; llvm/tools/llvm-profgen/CSPreInliner.h; llvm/tools/llvm-profgen/llvm-profgen.cpp; llvm/tools/llvm-profgen/PerfReader.cpp; llvm/tools/llvm-profgen/PerfReader.h; llvm/tools/llvm-rc/ResourceScriptCppFilter.cpp; llvm/tools/llvm-rc/ResourceScriptCppFilter.h; llvm/tools/llvm-rc/ResourceScriptParser.h; llvm/tools/llvm-rc/ResourceScriptStmt.cpp; llvm/tools/llvm-rc/ResourceScriptToken.h; llvm/tools/llvm-rc/ResourceVisitor.h; llvm/tools/llvm-readobj/ObjDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.h; llvm/tools/llvm-reduce/DeltaManager.cpp; llvm/tools/llvm-reduce/DeltaManager.h; llvm/tools/llvm-reduce/ReducerWorkItem.cpp; llvm/tools/llvm-reduce/ReducerWorkItem.h; llvm/tools/llvm-reduce/TestRunner.cpp; llvm/tools/llvm-reduce/TestRunner.h; llvm/tools/llvm-reduce/deltas/Delta.cpp; llvm/tools/llvm-reduce/deltas/Delta.h; llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp; llvm/tools/llvm-reduce/deltas/ReduceAliases.h; llvm/tools/llvm-reduce/deltas/ReduceArguments.h; llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp; llvm/tools/llvm-reduce/deltas/ReduceAttributes.h; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llv,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:337352,Energy Efficiency,reduce,reduce,337352,; llvm/tools/llvm-profgen/CSPreInliner.h; llvm/tools/llvm-profgen/llvm-profgen.cpp; llvm/tools/llvm-profgen/PerfReader.cpp; llvm/tools/llvm-profgen/PerfReader.h; llvm/tools/llvm-rc/ResourceScriptCppFilter.cpp; llvm/tools/llvm-rc/ResourceScriptCppFilter.h; llvm/tools/llvm-rc/ResourceScriptParser.h; llvm/tools/llvm-rc/ResourceScriptStmt.cpp; llvm/tools/llvm-rc/ResourceScriptToken.h; llvm/tools/llvm-rc/ResourceVisitor.h; llvm/tools/llvm-readobj/ObjDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.h; llvm/tools/llvm-reduce/DeltaManager.cpp; llvm/tools/llvm-reduce/DeltaManager.h; llvm/tools/llvm-reduce/ReducerWorkItem.cpp; llvm/tools/llvm-reduce/ReducerWorkItem.h; llvm/tools/llvm-reduce/TestRunner.cpp; llvm/tools/llvm-reduce/TestRunner.h; llvm/tools/llvm-reduce/deltas/Delta.cpp; llvm/tools/llvm-reduce/deltas/Delta.h; llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp; llvm/tools/llvm-reduce/deltas/ReduceAliases.h; llvm/tools/llvm-reduce/deltas/ReduceArguments.h; llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp; llvm/tools/llvm-reduce/deltas/ReduceAttributes.h; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:337401,Energy Efficiency,reduce,reduce,337401,ls/llvm-profgen/llvm-profgen.cpp; llvm/tools/llvm-profgen/PerfReader.cpp; llvm/tools/llvm-profgen/PerfReader.h; llvm/tools/llvm-rc/ResourceScriptCppFilter.cpp; llvm/tools/llvm-rc/ResourceScriptCppFilter.h; llvm/tools/llvm-rc/ResourceScriptParser.h; llvm/tools/llvm-rc/ResourceScriptStmt.cpp; llvm/tools/llvm-rc/ResourceScriptToken.h; llvm/tools/llvm-rc/ResourceVisitor.h; llvm/tools/llvm-readobj/ObjDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.h; llvm/tools/llvm-reduce/DeltaManager.cpp; llvm/tools/llvm-reduce/DeltaManager.h; llvm/tools/llvm-reduce/ReducerWorkItem.cpp; llvm/tools/llvm-reduce/ReducerWorkItem.h; llvm/tools/llvm-reduce/TestRunner.cpp; llvm/tools/llvm-reduce/TestRunner.h; llvm/tools/llvm-reduce/deltas/Delta.cpp; llvm/tools/llvm-reduce/deltas/Delta.h; llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp; llvm/tools/llvm-reduce/deltas/ReduceAliases.h; llvm/tools/llvm-reduce/deltas/ReduceArguments.h; llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp; llvm/tools/llvm-reduce/deltas/ReduceAttributes.h; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llv,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:337453,Energy Efficiency,reduce,reduce,337453,rofgen/PerfReader.cpp; llvm/tools/llvm-profgen/PerfReader.h; llvm/tools/llvm-rc/ResourceScriptCppFilter.cpp; llvm/tools/llvm-rc/ResourceScriptCppFilter.h; llvm/tools/llvm-rc/ResourceScriptParser.h; llvm/tools/llvm-rc/ResourceScriptStmt.cpp; llvm/tools/llvm-rc/ResourceScriptToken.h; llvm/tools/llvm-rc/ResourceVisitor.h; llvm/tools/llvm-readobj/ObjDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.h; llvm/tools/llvm-reduce/DeltaManager.cpp; llvm/tools/llvm-reduce/DeltaManager.h; llvm/tools/llvm-reduce/ReducerWorkItem.cpp; llvm/tools/llvm-reduce/ReducerWorkItem.h; llvm/tools/llvm-reduce/TestRunner.cpp; llvm/tools/llvm-reduce/TestRunner.h; llvm/tools/llvm-reduce/deltas/Delta.cpp; llvm/tools/llvm-reduce/deltas/Delta.h; llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp; llvm/tools/llvm-reduce/deltas/ReduceAliases.h; llvm/tools/llvm-reduce/deltas/ReduceArguments.h; llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp; llvm/tools/llvm-reduce/deltas/ReduceAttributes.h; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h;,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:337503,Energy Efficiency,reduce,reduce,337503,Reader.h; llvm/tools/llvm-rc/ResourceScriptCppFilter.cpp; llvm/tools/llvm-rc/ResourceScriptCppFilter.h; llvm/tools/llvm-rc/ResourceScriptParser.h; llvm/tools/llvm-rc/ResourceScriptStmt.cpp; llvm/tools/llvm-rc/ResourceScriptToken.h; llvm/tools/llvm-rc/ResourceVisitor.h; llvm/tools/llvm-readobj/ObjDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.h; llvm/tools/llvm-reduce/DeltaManager.cpp; llvm/tools/llvm-reduce/DeltaManager.h; llvm/tools/llvm-reduce/ReducerWorkItem.cpp; llvm/tools/llvm-reduce/ReducerWorkItem.h; llvm/tools/llvm-reduce/TestRunner.cpp; llvm/tools/llvm-reduce/TestRunner.h; llvm/tools/llvm-reduce/deltas/Delta.cpp; llvm/tools/llvm-reduce/deltas/Delta.h; llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp; llvm/tools/llvm-reduce/deltas/ReduceAliases.h; llvm/tools/llvm-reduce/deltas/ReduceArguments.h; llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp; llvm/tools/llvm-reduce/deltas/ReduceAttributes.h; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h; llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp; l,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:337556,Energy Efficiency,reduce,reduce,337556,.cpp; llvm/tools/llvm-rc/ResourceScriptCppFilter.h; llvm/tools/llvm-rc/ResourceScriptParser.h; llvm/tools/llvm-rc/ResourceScriptStmt.cpp; llvm/tools/llvm-rc/ResourceScriptToken.h; llvm/tools/llvm-rc/ResourceVisitor.h; llvm/tools/llvm-readobj/ObjDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.h; llvm/tools/llvm-reduce/DeltaManager.cpp; llvm/tools/llvm-reduce/DeltaManager.h; llvm/tools/llvm-reduce/ReducerWorkItem.cpp; llvm/tools/llvm-reduce/ReducerWorkItem.h; llvm/tools/llvm-reduce/TestRunner.cpp; llvm/tools/llvm-reduce/TestRunner.h; llvm/tools/llvm-reduce/deltas/Delta.cpp; llvm/tools/llvm-reduce/deltas/Delta.h; llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp; llvm/tools/llvm-reduce/deltas/ReduceAliases.h; llvm/tools/llvm-reduce/deltas/ReduceArguments.h; llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp; llvm/tools/llvm-reduce/deltas/ReduceAttributes.h; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h; llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp; llvm/tools/llvm-reduce/deltas/ReduceMetadata.h; llvm/,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:337607,Energy Efficiency,reduce,reduce,337607,vm/tools/llvm-rc/ResourceScriptParser.h; llvm/tools/llvm-rc/ResourceScriptStmt.cpp; llvm/tools/llvm-rc/ResourceScriptToken.h; llvm/tools/llvm-rc/ResourceVisitor.h; llvm/tools/llvm-readobj/ObjDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.h; llvm/tools/llvm-reduce/DeltaManager.cpp; llvm/tools/llvm-reduce/DeltaManager.h; llvm/tools/llvm-reduce/ReducerWorkItem.cpp; llvm/tools/llvm-reduce/ReducerWorkItem.h; llvm/tools/llvm-reduce/TestRunner.cpp; llvm/tools/llvm-reduce/TestRunner.h; llvm/tools/llvm-reduce/deltas/Delta.cpp; llvm/tools/llvm-reduce/deltas/Delta.h; llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp; llvm/tools/llvm-reduce/deltas/ReduceAliases.h; llvm/tools/llvm-reduce/deltas/ReduceArguments.h; llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp; llvm/tools/llvm-reduce/deltas/ReduceAttributes.h; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h; llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp; llvm/tools/llvm-reduce/deltas/ReduceMetadata.h; llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp; llvm/t,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:337663,Energy Efficiency,reduce,reduce,337663,m-rc/ResourceScriptStmt.cpp; llvm/tools/llvm-rc/ResourceScriptToken.h; llvm/tools/llvm-rc/ResourceVisitor.h; llvm/tools/llvm-readobj/ObjDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.h; llvm/tools/llvm-reduce/DeltaManager.cpp; llvm/tools/llvm-reduce/DeltaManager.h; llvm/tools/llvm-reduce/ReducerWorkItem.cpp; llvm/tools/llvm-reduce/ReducerWorkItem.h; llvm/tools/llvm-reduce/TestRunner.cpp; llvm/tools/llvm-reduce/TestRunner.h; llvm/tools/llvm-reduce/deltas/Delta.cpp; llvm/tools/llvm-reduce/deltas/Delta.h; llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp; llvm/tools/llvm-reduce/deltas/ReduceAliases.h; llvm/tools/llvm-reduce/deltas/ReduceArguments.h; llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp; llvm/tools/llvm-reduce/deltas/ReduceAttributes.h; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h; llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp; llvm/tools/llvm-reduce/deltas/ReduceMetadata.h; llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp; llvm/tools/llvm-reduce/deltas/ReduceModuleData.h; llvm/tools/,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:337717,Energy Efficiency,reduce,reduce,337717,urceScriptToken.h; llvm/tools/llvm-rc/ResourceVisitor.h; llvm/tools/llvm-readobj/ObjDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.h; llvm/tools/llvm-reduce/DeltaManager.cpp; llvm/tools/llvm-reduce/DeltaManager.h; llvm/tools/llvm-reduce/ReducerWorkItem.cpp; llvm/tools/llvm-reduce/ReducerWorkItem.h; llvm/tools/llvm-reduce/TestRunner.cpp; llvm/tools/llvm-reduce/TestRunner.h; llvm/tools/llvm-reduce/deltas/Delta.cpp; llvm/tools/llvm-reduce/deltas/Delta.h; llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp; llvm/tools/llvm-reduce/deltas/ReduceAliases.h; llvm/tools/llvm-reduce/deltas/ReduceArguments.h; llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp; llvm/tools/llvm-reduce/deltas/ReduceAttributes.h; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h; llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp; llvm/tools/llvm-reduce/deltas/ReduceMetadata.h; llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp; llvm/tools/llvm-reduce/deltas/ReduceModuleData.h; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp; llvm/too,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:337768,Energy Efficiency,reduce,reduce,337768,tor.h; llvm/tools/llvm-readobj/ObjDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.h; llvm/tools/llvm-reduce/DeltaManager.cpp; llvm/tools/llvm-reduce/DeltaManager.h; llvm/tools/llvm-reduce/ReducerWorkItem.cpp; llvm/tools/llvm-reduce/ReducerWorkItem.h; llvm/tools/llvm-reduce/TestRunner.cpp; llvm/tools/llvm-reduce/TestRunner.h; llvm/tools/llvm-reduce/deltas/Delta.cpp; llvm/tools/llvm-reduce/deltas/Delta.h; llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp; llvm/tools/llvm-reduce/deltas/ReduceAliases.h; llvm/tools/llvm-reduce/deltas/ReduceArguments.h; llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp; llvm/tools/llvm-reduce/deltas/ReduceAttributes.h; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h; llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp; llvm/tools/llvm-reduce/deltas/ReduceMetadata.h; llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp; llvm/tools/llvm-reduce/deltas/ReduceModuleData.h; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.h; llvm,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:337817,Energy Efficiency,reduce,reduce,337817,ools/llvm-readobj/WindowsResourceDumper.cpp; llvm/tools/llvm-readobj/WindowsResourceDumper.h; llvm/tools/llvm-reduce/DeltaManager.cpp; llvm/tools/llvm-reduce/DeltaManager.h; llvm/tools/llvm-reduce/ReducerWorkItem.cpp; llvm/tools/llvm-reduce/ReducerWorkItem.h; llvm/tools/llvm-reduce/TestRunner.cpp; llvm/tools/llvm-reduce/TestRunner.h; llvm/tools/llvm-reduce/deltas/Delta.cpp; llvm/tools/llvm-reduce/deltas/Delta.h; llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp; llvm/tools/llvm-reduce/deltas/ReduceAliases.h; llvm/tools/llvm-reduce/deltas/ReduceArguments.h; llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp; llvm/tools/llvm-reduce/deltas/ReduceAttributes.h; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h; llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp; llvm/tools/llvm-reduce/deltas/ReduceMetadata.h; llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp; llvm/tools/llvm-reduce/deltas/ReduceModuleData.h; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.h; llvm/tools/llvm-reduce/deltas/ReduceOperands.cpp; llvm/t,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:337872,Energy Efficiency,reduce,reduce,337872,s/llvm-readobj/WindowsResourceDumper.h; llvm/tools/llvm-reduce/DeltaManager.cpp; llvm/tools/llvm-reduce/DeltaManager.h; llvm/tools/llvm-reduce/ReducerWorkItem.cpp; llvm/tools/llvm-reduce/ReducerWorkItem.h; llvm/tools/llvm-reduce/TestRunner.cpp; llvm/tools/llvm-reduce/TestRunner.h; llvm/tools/llvm-reduce/deltas/Delta.cpp; llvm/tools/llvm-reduce/deltas/Delta.h; llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp; llvm/tools/llvm-reduce/deltas/ReduceAliases.h; llvm/tools/llvm-reduce/deltas/ReduceArguments.h; llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp; llvm/tools/llvm-reduce/deltas/ReduceAttributes.h; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h; llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp; llvm/tools/llvm-reduce/deltas/ReduceMetadata.h; llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp; llvm/tools/llvm-reduce/deltas/ReduceModuleData.h; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.h; llvm/tools/llvm-reduce/deltas/ReduceOperands.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperands.h; llvm/tools/l,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:337925,Energy Efficiency,reduce,reduce,337925,m-reduce/DeltaManager.cpp; llvm/tools/llvm-reduce/DeltaManager.h; llvm/tools/llvm-reduce/ReducerWorkItem.cpp; llvm/tools/llvm-reduce/ReducerWorkItem.h; llvm/tools/llvm-reduce/TestRunner.cpp; llvm/tools/llvm-reduce/TestRunner.h; llvm/tools/llvm-reduce/deltas/Delta.cpp; llvm/tools/llvm-reduce/deltas/Delta.h; llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp; llvm/tools/llvm-reduce/deltas/ReduceAliases.h; llvm/tools/llvm-reduce/deltas/ReduceArguments.h; llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp; llvm/tools/llvm-reduce/deltas/ReduceAttributes.h; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h; llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp; llvm/tools/llvm-reduce/deltas/ReduceMetadata.h; llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp; llvm/tools/llvm-reduce/deltas/ReduceModuleData.h; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.h; llvm/tools/llvm-reduce/deltas/ReduceOperands.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperands.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp; llvm/tools/,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:337979,Energy Efficiency,reduce,reduce,337979,taManager.h; llvm/tools/llvm-reduce/ReducerWorkItem.cpp; llvm/tools/llvm-reduce/ReducerWorkItem.h; llvm/tools/llvm-reduce/TestRunner.cpp; llvm/tools/llvm-reduce/TestRunner.h; llvm/tools/llvm-reduce/deltas/Delta.cpp; llvm/tools/llvm-reduce/deltas/Delta.h; llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp; llvm/tools/llvm-reduce/deltas/ReduceAliases.h; llvm/tools/llvm-reduce/deltas/ReduceArguments.h; llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp; llvm/tools/llvm-reduce/deltas/ReduceAttributes.h; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h; llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp; llvm/tools/llvm-reduce/deltas/ReduceMetadata.h; llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp; llvm/tools/llvm-reduce/deltas/ReduceModuleData.h; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.h; llvm/tools/llvm-reduce/deltas/ReduceOperands.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperands.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.h; llvm/tools/l,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:338031,Energy Efficiency,reduce,reduce,338031,llvm/tools/llvm-reduce/ReducerWorkItem.h; llvm/tools/llvm-reduce/TestRunner.cpp; llvm/tools/llvm-reduce/TestRunner.h; llvm/tools/llvm-reduce/deltas/Delta.cpp; llvm/tools/llvm-reduce/deltas/Delta.h; llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp; llvm/tools/llvm-reduce/deltas/ReduceAliases.h; llvm/tools/llvm-reduce/deltas/ReduceArguments.h; llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp; llvm/tools/llvm-reduce/deltas/ReduceAttributes.h; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h; llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp; llvm/tools/llvm-reduce/deltas/ReduceMetadata.h; llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp; llvm/tools/llvm-reduce/deltas/ReduceModuleData.h; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.h; llvm/tools/llvm-reduce/deltas/ReduceOperands.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperands.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.cpp; llvm/tools/llv,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:338094,Energy Efficiency,reduce,reduce,338094,ce/TestRunner.cpp; llvm/tools/llvm-reduce/TestRunner.h; llvm/tools/llvm-reduce/deltas/Delta.cpp; llvm/tools/llvm-reduce/deltas/Delta.h; llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp; llvm/tools/llvm-reduce/deltas/ReduceAliases.h; llvm/tools/llvm-reduce/deltas/ReduceArguments.h; llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp; llvm/tools/llvm-reduce/deltas/ReduceAttributes.h; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h; llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp; llvm/tools/llvm-reduce/deltas/ReduceMetadata.h; llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp; llvm/tools/llvm-reduce/deltas/ReduceModuleData.h; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.h; llvm/tools/llvm-reduce/deltas/ReduceOperands.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperands.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.h; llvm/tools/llvm-reduce,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:338155,Energy Efficiency,reduce,reduce,338155,lvm/tools/llvm-reduce/deltas/Delta.cpp; llvm/tools/llvm-reduce/deltas/Delta.h; llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp; llvm/tools/llvm-reduce/deltas/ReduceAliases.h; llvm/tools/llvm-reduce/deltas/ReduceArguments.h; llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp; llvm/tools/llvm-reduce/deltas/ReduceAttributes.h; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h; llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp; llvm/tools/llvm-reduce/deltas/ReduceMetadata.h; llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp; llvm/tools/llvm-reduce/deltas/ReduceModuleData.h; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.h; llvm/tools/llvm-reduce/deltas/ReduceOperands.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperands.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.h; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.cpp; llvm/tools/llvm-reduce,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:338207,Energy Efficiency,reduce,reduce,338207,llvm-reduce/deltas/Delta.h; llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp; llvm/tools/llvm-reduce/deltas/ReduceAliases.h; llvm/tools/llvm-reduce/deltas/ReduceArguments.h; llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp; llvm/tools/llvm-reduce/deltas/ReduceAttributes.h; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h; llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp; llvm/tools/llvm-reduce/deltas/ReduceMetadata.h; llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp; llvm/tools/llvm-reduce/deltas/ReduceModuleData.h; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.h; llvm/tools/llvm-reduce/deltas/ReduceOperands.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperands.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.h; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.cpp; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.h; llvm/tools/llvm-rus,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:338257,Energy Efficiency,reduce,reduce,338257,eltas/ReduceAliases.cpp; llvm/tools/llvm-reduce/deltas/ReduceAliases.h; llvm/tools/llvm-reduce/deltas/ReduceArguments.h; llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp; llvm/tools/llvm-reduce/deltas/ReduceAttributes.h; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h; llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp; llvm/tools/llvm-reduce/deltas/ReduceMetadata.h; llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp; llvm/tools/llvm-reduce/deltas/ReduceModuleData.h; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.h; llvm/tools/llvm-reduce/deltas/ReduceOperands.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperands.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.h; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.cpp; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.h; llvm/tools/llvm-rust-demangle-fuzzer/DummyDemanglerFuzzer.cpp; llvm/too,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:338311,Energy Efficiency,reduce,reduce,338311,s/ReduceAliases.h; llvm/tools/llvm-reduce/deltas/ReduceArguments.h; llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp; llvm/tools/llvm-reduce/deltas/ReduceAttributes.h; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h; llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp; llvm/tools/llvm-reduce/deltas/ReduceMetadata.h; llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp; llvm/tools/llvm-reduce/deltas/ReduceModuleData.h; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.h; llvm/tools/llvm-reduce/deltas/ReduceOperands.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperands.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.h; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.cpp; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.h; llvm/tools/llvm-rust-demangle-fuzzer/DummyDemanglerFuzzer.cpp; llvm/tools/llvm-rust-demangle-fuzzer/llvm-rust-demangle-fuzze,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:338363,Energy Efficiency,reduce,reduce,338363,eArguments.h; llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp; llvm/tools/llvm-reduce/deltas/ReduceAttributes.h; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h; llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp; llvm/tools/llvm-reduce/deltas/ReduceMetadata.h; llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp; llvm/tools/llvm-reduce/deltas/ReduceModuleData.h; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.h; llvm/tools/llvm-reduce/deltas/ReduceOperands.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperands.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.h; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.cpp; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.h; llvm/tools/llvm-rust-demangle-fuzzer/DummyDemanglerFuzzer.cpp; llvm/tools/llvm-rust-demangle-fuzzer/llvm-rust-demangle-fuzzer.cpp; llvm/tools/llvm-shlib/libllvm.cpp; llvm/tools/ll,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:338420,Energy Efficiency,reduce,reduce,338420,utes.cpp; llvm/tools/llvm-reduce/deltas/ReduceAttributes.h; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h; llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp; llvm/tools/llvm-reduce/deltas/ReduceMetadata.h; llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp; llvm/tools/llvm-reduce/deltas/ReduceModuleData.h; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.h; llvm/tools/llvm-reduce/deltas/ReduceOperands.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperands.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.h; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.cpp; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.h; llvm/tools/llvm-rust-demangle-fuzzer/DummyDemanglerFuzzer.cpp; llvm/tools/llvm-rust-demangle-fuzzer/llvm-rust-demangle-fuzzer.cpp; llvm/tools/llvm-shlib/libllvm.cpp; llvm/tools/llvm-special-case-list-fuzzer/DummySpecialCaseListFuzzer.c,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:338475,Energy Efficiency,reduce,reduce,338475,tes.h; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h; llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp; llvm/tools/llvm-reduce/deltas/ReduceMetadata.h; llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp; llvm/tools/llvm-reduce/deltas/ReduceModuleData.h; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.h; llvm/tools/llvm-reduce/deltas/ReduceOperands.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperands.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.h; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.cpp; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.h; llvm/tools/llvm-rust-demangle-fuzzer/DummyDemanglerFuzzer.cpp; llvm/tools/llvm-rust-demangle-fuzzer/llvm-rust-demangle-fuzzer.cpp; llvm/tools/llvm-shlib/libllvm.cpp; llvm/tools/llvm-special-case-list-fuzzer/DummySpecialCaseListFuzzer.cpp; llvm/tools/llvm-special-case-list-fuzzer/special,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:338525,Energy Efficiency,reduce,reduce,338525,locks.cpp; llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h; llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp; llvm/tools/llvm-reduce/deltas/ReduceMetadata.h; llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp; llvm/tools/llvm-reduce/deltas/ReduceModuleData.h; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.h; llvm/tools/llvm-reduce/deltas/ReduceOperands.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperands.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.h; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.cpp; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.h; llvm/tools/llvm-rust-demangle-fuzzer/DummyDemanglerFuzzer.cpp; llvm/tools/llvm-rust-demangle-fuzzer/llvm-rust-demangle-fuzzer.cpp; llvm/tools/llvm-shlib/libllvm.cpp; llvm/tools/llvm-special-case-list-fuzzer/DummySpecialCaseListFuzzer.cpp; llvm/tools/llvm-special-case-list-fuzzer/special-case-list-fuzzer.cpp; llvm/tools/llvm-strings/ll,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:338573,Energy Efficiency,reduce,reduce,338573,icBlocks.h; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h; llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp; llvm/tools/llvm-reduce/deltas/ReduceMetadata.h; llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp; llvm/tools/llvm-reduce/deltas/ReduceModuleData.h; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.h; llvm/tools/llvm-reduce/deltas/ReduceOperands.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperands.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.h; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.cpp; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.h; llvm/tools/llvm-rust-demangle-fuzzer/DummyDemanglerFuzzer.cpp; llvm/tools/llvm-rust-demangle-fuzzer/llvm-rust-demangle-fuzzer.cpp; llvm/tools/llvm-shlib/libllvm.cpp; llvm/tools/llvm-special-case-list-fuzzer/DummySpecialCaseListFuzzer.cpp; llvm/tools/llvm-special-case-list-fuzzer/special-case-list-fuzzer.cpp; llvm/tools/llvm-strings/llvm-strings.cpp; llvm/tools/llvm-tapi-diff/DiffEngi,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:338625,Energy Efficiency,reduce,reduce,338625,ctionBodies.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h; llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp; llvm/tools/llvm-reduce/deltas/ReduceMetadata.h; llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp; llvm/tools/llvm-reduce/deltas/ReduceModuleData.h; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.h; llvm/tools/llvm-reduce/deltas/ReduceOperands.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperands.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.h; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.cpp; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.h; llvm/tools/llvm-rust-demangle-fuzzer/DummyDemanglerFuzzer.cpp; llvm/tools/llvm-rust-demangle-fuzzer/llvm-rust-demangle-fuzzer.cpp; llvm/tools/llvm-shlib/libllvm.cpp; llvm/tools/llvm-special-case-list-fuzzer/DummySpecialCaseListFuzzer.cpp; llvm/tools/llvm-special-case-list-fuzzer/special-case-list-fuzzer.cpp; llvm/tools/llvm-strings/llvm-strings.cpp; llvm/tools/llvm-tapi-diff/DiffEngine.cpp; llvm/tools/llvm-tapi-diff/DiffEngine.h; llv,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:338675,Energy Efficiency,reduce,reduce,338675,FunctionBodies.h; llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h; llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp; llvm/tools/llvm-reduce/deltas/ReduceMetadata.h; llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp; llvm/tools/llvm-reduce/deltas/ReduceModuleData.h; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.h; llvm/tools/llvm-reduce/deltas/ReduceOperands.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperands.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.h; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.cpp; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.h; llvm/tools/llvm-rust-demangle-fuzzer/DummyDemanglerFuzzer.cpp; llvm/tools/llvm-rust-demangle-fuzzer/llvm-rust-demangle-fuzzer.cpp; llvm/tools/llvm-shlib/libllvm.cpp; llvm/tools/llvm-special-case-list-fuzzer/DummySpecialCaseListFuzzer.cpp; llvm/tools/llvm-special-case-list-fuzzer/special-case-list-fuzzer.cpp; llvm/tools/llvm-strings/llvm-strings.cpp; llvm/tools/llvm-tapi-diff/DiffEngine.cpp; llvm/tools/llvm-tapi-diff/DiffEngine.h; llvm/tools/llvm-tapi-diff/llvm-tapi-diff.cpp; llvm/tools,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:338731,Energy Efficiency,reduce,reduce,338731,unctions.cpp; llvm/tools/llvm-reduce/deltas/ReduceFunctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h; llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp; llvm/tools/llvm-reduce/deltas/ReduceMetadata.h; llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp; llvm/tools/llvm-reduce/deltas/ReduceModuleData.h; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.h; llvm/tools/llvm-reduce/deltas/ReduceOperands.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperands.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.h; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.cpp; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.h; llvm/tools/llvm-rust-demangle-fuzzer/DummyDemanglerFuzzer.cpp; llvm/tools/llvm-rust-demangle-fuzzer/llvm-rust-demangle-fuzzer.cpp; llvm/tools/llvm-shlib/libllvm.cpp; llvm/tools/llvm-special-case-list-fuzzer/DummySpecialCaseListFuzzer.cpp; llvm/tools/llvm-special-case-list-fuzzer/special-case-list-fuzzer.cpp; llvm/tools/llvm-strings/llvm-strings.cpp; llvm/tools/llvm-tapi-diff/DiffEngine.cpp; llvm/tools/llvm-tapi-diff/DiffEngine.h; llvm/tools/llvm-tapi-diff/llvm-tapi-diff.cpp; llvm/tools/llvm-undname/llvm-undname.cpp; llvm/tools/llvm-xray/fu,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:338785,Energy Efficiency,reduce,reduce,338785,nctions.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h; llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp; llvm/tools/llvm-reduce/deltas/ReduceMetadata.h; llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp; llvm/tools/llvm-reduce/deltas/ReduceModuleData.h; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.h; llvm/tools/llvm-reduce/deltas/ReduceOperands.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperands.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.h; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.cpp; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.h; llvm/tools/llvm-rust-demangle-fuzzer/DummyDemanglerFuzzer.cpp; llvm/tools/llvm-rust-demangle-fuzzer/llvm-rust-demangle-fuzzer.cpp; llvm/tools/llvm-shlib/libllvm.cpp; llvm/tools/llvm-special-case-list-fuzzer/DummySpecialCaseListFuzzer.cpp; llvm/tools/llvm-special-case-list-fuzzer/special-case-list-fuzzer.cpp; llvm/tools/llvm-strings/llvm-strings.cpp; llvm/tools/llvm-tapi-diff/DiffEngine.cpp; llvm/tools/llvm-tapi-diff/DiffEngine.h; llvm/tools/llvm-tapi-diff/llvm-tapi-diff.cpp; llvm/tools/llvm-undname/llvm-undname.cpp; llvm/tools/llvm-xray/func-id-helper.cpp; llvm/tools/llvm-xray/func-id-helpe,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:338835,Energy Efficiency,reduce,reduce,338835,obalObjects.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h; llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp; llvm/tools/llvm-reduce/deltas/ReduceMetadata.h; llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp; llvm/tools/llvm-reduce/deltas/ReduceModuleData.h; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.h; llvm/tools/llvm-reduce/deltas/ReduceOperands.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperands.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.h; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.cpp; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.h; llvm/tools/llvm-rust-demangle-fuzzer/DummyDemanglerFuzzer.cpp; llvm/tools/llvm-rust-demangle-fuzzer/llvm-rust-demangle-fuzzer.cpp; llvm/tools/llvm-shlib/libllvm.cpp; llvm/tools/llvm-special-case-list-fuzzer/DummySpecialCaseListFuzzer.cpp; llvm/tools/llvm-special-case-list-fuzzer/special-case-list-fuzzer.cpp; llvm/tools/llvm-strings/llvm-strings.cpp; llvm/tools/llvm-tapi-diff/DiffEngine.cpp; llvm/tools/llvm-tapi-diff/DiffEngine.h; llvm/tools/llvm-tapi-diff/llvm-tapi-diff.cpp; llvm/tools/llvm-undname/llvm-undname.cpp; llvm/tools/llvm-xray/func-id-helper.cpp; llvm/tools/llvm-xray/func-id-helper.h; llvm/tools/llvm-xray/llvm-xray.cpp; llvm/too,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:338883,Energy Efficiency,reduce,reduce,338883,ceGlobalObjects.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h; llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp; llvm/tools/llvm-reduce/deltas/ReduceMetadata.h; llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp; llvm/tools/llvm-reduce/deltas/ReduceModuleData.h; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.h; llvm/tools/llvm-reduce/deltas/ReduceOperands.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperands.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.h; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.cpp; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.h; llvm/tools/llvm-rust-demangle-fuzzer/DummyDemanglerFuzzer.cpp; llvm/tools/llvm-rust-demangle-fuzzer/llvm-rust-demangle-fuzzer.cpp; llvm/tools/llvm-shlib/libllvm.cpp; llvm/tools/llvm-special-case-list-fuzzer/DummySpecialCaseListFuzzer.cpp; llvm/tools/llvm-special-case-list-fuzzer/special-case-list-fuzzer.cpp; llvm/tools/llvm-strings/llvm-strings.cpp; llvm/tools/llvm-tapi-diff/DiffEngine.cpp; llvm/tools/llvm-tapi-diff/DiffEngine.h; llvm/tools/llvm-tapi-diff/llvm-tapi-diff.cpp; llvm/tools/llvm-undname/llvm-undname.cpp; llvm/tools/llvm-xray/func-id-helper.cpp; llvm/tools/llvm-xray/func-id-helper.h; llvm/tools/llvm-xray/llvm-xray.cpp; llvm/tools/llvm-xray/trie-node.h; llvm/tools/llvm-xray/xray,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:338937,Energy Efficiency,reduce,reduce,338937,ceGlobalValues.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h; llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp; llvm/tools/llvm-reduce/deltas/ReduceMetadata.h; llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp; llvm/tools/llvm-reduce/deltas/ReduceModuleData.h; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.h; llvm/tools/llvm-reduce/deltas/ReduceOperands.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperands.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.h; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.cpp; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.h; llvm/tools/llvm-rust-demangle-fuzzer/DummyDemanglerFuzzer.cpp; llvm/tools/llvm-rust-demangle-fuzzer/llvm-rust-demangle-fuzzer.cpp; llvm/tools/llvm-shlib/libllvm.cpp; llvm/tools/llvm-special-case-list-fuzzer/DummySpecialCaseListFuzzer.cpp; llvm/tools/llvm-special-case-list-fuzzer/special-case-list-fuzzer.cpp; llvm/tools/llvm-strings/llvm-strings.cpp; llvm/tools/llvm-tapi-diff/DiffEngine.cpp; llvm/tools/llvm-tapi-diff/DiffEngine.h; llvm/tools/llvm-tapi-diff/llvm-tapi-diff.cpp; llvm/tools/llvm-undname/llvm-undname.cpp; llvm/tools/llvm-xray/func-id-helper.cpp; llvm/tools/llvm-xray/func-id-helper.h; llvm/tools/llvm-xray/llvm-xray.cpp; llvm/tools/llvm-xray/trie-node.h; llvm/tools/llvm-xray/xray-account.h; llvm/tools/llvm-xray/xray-color-helper.cp,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:338989,Energy Efficiency,reduce,reduce,338989,ceGlobalValues.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h; llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp; llvm/tools/llvm-reduce/deltas/ReduceMetadata.h; llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp; llvm/tools/llvm-reduce/deltas/ReduceModuleData.h; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.h; llvm/tools/llvm-reduce/deltas/ReduceOperands.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperands.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.h; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.cpp; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.h; llvm/tools/llvm-rust-demangle-fuzzer/DummyDemanglerFuzzer.cpp; llvm/tools/llvm-rust-demangle-fuzzer/llvm-rust-demangle-fuzzer.cpp; llvm/tools/llvm-shlib/libllvm.cpp; llvm/tools/llvm-special-case-list-fuzzer/DummySpecialCaseListFuzzer.cpp; llvm/tools/llvm-special-case-list-fuzzer/special-case-list-fuzzer.cpp; llvm/tools/llvm-strings/llvm-strings.cpp; llvm/tools/llvm-tapi-diff/DiffEngine.cpp; llvm/tools/llvm-tapi-diff/DiffEngine.h; llvm/tools/llvm-tapi-diff/llvm-tapi-diff.cpp; llvm/tools/llvm-undname/llvm-undname.cpp; llvm/tools/llvm-xray/func-id-helper.cpp; llvm/tools/llvm-xray/func-id-helper.h; llvm/tools/llvm-xray/llvm-xray.cpp; llvm/tools/llvm-xray/trie-node.h; llvm/tools/llvm-xray/xray-account.h; llvm/tools/llvm-xray/xray-color-helper.cpp; llvm/tools/llvm-xray/xray-color-helper.h; llvm/tool,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:339045,Energy Efficiency,reduce,reduce,339045,lobalVarInitializers.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h; llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp; llvm/tools/llvm-reduce/deltas/ReduceMetadata.h; llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp; llvm/tools/llvm-reduce/deltas/ReduceModuleData.h; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.h; llvm/tools/llvm-reduce/deltas/ReduceOperands.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperands.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.h; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.cpp; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.h; llvm/tools/llvm-rust-demangle-fuzzer/DummyDemanglerFuzzer.cpp; llvm/tools/llvm-rust-demangle-fuzzer/llvm-rust-demangle-fuzzer.cpp; llvm/tools/llvm-shlib/libllvm.cpp; llvm/tools/llvm-special-case-list-fuzzer/DummySpecialCaseListFuzzer.cpp; llvm/tools/llvm-special-case-list-fuzzer/special-case-list-fuzzer.cpp; llvm/tools/llvm-strings/llvm-strings.cpp; llvm/tools/llvm-tapi-diff/DiffEngine.cpp; llvm/tools/llvm-tapi-diff/DiffEngine.h; llvm/tools/llvm-tapi-diff/llvm-tapi-diff.cpp; llvm/tools/llvm-undname/llvm-undname.cpp; llvm/tools/llvm-xray/func-id-helper.cpp; llvm/tools/llvm-xray/func-id-helper.h; llvm/tools/llvm-xray/llvm-xray.cpp; llvm/tools/llvm-xray/trie-node.h; llvm/tools/llvm-xray/xray-account.h; llvm/tools/llvm-xray/xray-color-helper.cpp; llvm/tools/llvm-xray/xray-color-helper.h; llvm/tools/llvm-xray/xray-converter.cpp; llvm/tools/llvm-xray/xr,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:339099,Energy Efficiency,reduce,reduce,339099,/ReduceGlobalVarInitializers.h; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h; llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp; llvm/tools/llvm-reduce/deltas/ReduceMetadata.h; llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp; llvm/tools/llvm-reduce/deltas/ReduceModuleData.h; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.h; llvm/tools/llvm-reduce/deltas/ReduceOperands.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperands.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.h; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.cpp; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.h; llvm/tools/llvm-rust-demangle-fuzzer/DummyDemanglerFuzzer.cpp; llvm/tools/llvm-rust-demangle-fuzzer/llvm-rust-demangle-fuzzer.cpp; llvm/tools/llvm-shlib/libllvm.cpp; llvm/tools/llvm-special-case-list-fuzzer/DummySpecialCaseListFuzzer.cpp; llvm/tools/llvm-special-case-list-fuzzer/special-case-list-fuzzer.cpp; llvm/tools/llvm-strings/llvm-strings.cpp; llvm/tools/llvm-tapi-diff/DiffEngine.cpp; llvm/tools/llvm-tapi-diff/DiffEngine.h; llvm/tools/llvm-tapi-diff/llvm-tapi-diff.cpp; llvm/tools/llvm-undname/llvm-undname.cpp; llvm/tools/llvm-xray/func-id-helper.cpp; llvm/tools/llvm-xray/func-id-helper.h; llvm/tools/llvm-xray/llvm-xray.cpp; llvm/tools/llvm-xray/trie-node.h; llvm/tools/llvm-xray/xray-account.h; llvm/tools/llvm-xray/xray-color-helper.cpp; llvm/tools/llvm-xray/xray-color-helper.h; llvm/tools/llvm-xray/xray-converter.cpp; llvm/tools/llvm-xray/xray-converter.h; llvm/tools/llvm-xray/xray-fdr-dump.cpp;,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:339155,Energy Efficiency,reduce,reduce,339155,deltas/ReduceGlobalVars.cpp; llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h; llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructions.h; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp; llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h; llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp; llvm/tools/llvm-reduce/deltas/ReduceMetadata.h; llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp; llvm/tools/llvm-reduce/deltas/ReduceModuleData.h; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.h; llvm/tools/llvm-reduce/deltas/ReduceOperands.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperands.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.h; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.cpp; llvm/tools/llvm-reduce/deltas/ReduceOperandsToArgs.h; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.cpp; llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.h; llvm/tools/llvm-rust-demangle-fuzzer/DummyDemanglerFuzzer.cpp; llvm/tools/llvm-rust-demangle-fuzzer/llvm-rust-demangle-fuzzer.cpp; llvm/tools/llvm-shlib/libllvm.cpp; llvm/tools/llvm-special-case-list-fuzzer/DummySpecialCaseListFuzzer.cpp; llvm/tools/llvm-special-case-list-fuzzer/special-case-list-fuzzer.cpp; llvm/tools/llvm-strings/llvm-strings.cpp; llvm/tools/llvm-tapi-diff/DiffEngine.cpp; llvm/tools/llvm-tapi-diff/DiffEngine.h; llvm/tools/llvm-tapi-diff/llvm-tapi-diff.cpp; llvm/tools/llvm-undname/llvm-undname.cpp; llvm/tools/llvm-xray/func-id-helper.cpp; llvm/tools/llvm-xray/func-id-helper.h; llvm/tools/llvm-xray/llvm-xray.cpp; llvm/tools/llvm-xray/trie-node.h; llvm/tools/llvm-xray/xray-account.h; llvm/tools/llvm-xray/xray-color-helper.cpp; llvm/tools/llvm-xray/xray-color-helper.h; llvm/tools/llvm-xray/xray-converter.cpp; llvm/tools/llvm-xray/xray-converter.h; llvm/tools/llvm-xray/xray-fdr-dump.cpp; llvm/tools/llvm-xray/xray-graph-diff.cpp; llvm/tools/l,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:374735,Energy Efficiency,reduce,reduce,374735,clude/mlir/Target/LLVMIR/TypeToLLVM.h; mlir/include/mlir/Target/LLVMIR/Dialect/All.h; mlir/include/mlir/Target/LLVMIR/Dialect/AMX/AMXToLLVMIRTranslation.h; mlir/include/mlir/Target/LLVMIR/Dialect/ArmNeon/ArmNeonToLLVMIRTranslation.h; mlir/include/mlir/Target/LLVMIR/Dialect/ArmSVE/ArmSVEToLLVMIRTranslation.h; mlir/include/mlir/Target/LLVMIR/Dialect/LLVMIR/LLVMToLLVMIRTranslation.h; mlir/include/mlir/Target/LLVMIR/Dialect/NVVM/NVVMToLLVMIRTranslation.h; mlir/include/mlir/Target/LLVMIR/Dialect/OpenACC/OpenACCToLLVMIRTranslation.h; mlir/include/mlir/Target/LLVMIR/Dialect/OpenMP/OpenMPToLLVMIRTranslation.h; mlir/include/mlir/Target/LLVMIR/Dialect/ROCDL/ROCDLToLLVMIRTranslation.h; mlir/include/mlir/Target/LLVMIR/Dialect/X86Vector/X86VectorToLLVMIRTranslation.h; mlir/include/mlir/Target/SPIRV/Deserialization.h; mlir/include/mlir/Target/SPIRV/Serialization.h; mlir/include/mlir/Target/SPIRV/SPIRVBinaryUtils.h; mlir/include/mlir/Tools/mlir-lsp-server/MlirLspServerMain.h; mlir/include/mlir/Tools/mlir-reduce/MlirReduceMain.h; mlir/include/mlir/Tools/PDLL/AST/Context.h; mlir/include/mlir/Tools/PDLL/AST/Diagnostic.h; mlir/include/mlir/Tools/PDLL/CodeGen/CPPGen.h; mlir/include/mlir/Tools/PDLL/CodeGen/MLIRGen.h; mlir/include/mlir/Tools/PDLL/ODS/Constraint.h; mlir/include/mlir/Tools/PDLL/ODS/Context.h; mlir/include/mlir/Tools/PDLL/ODS/Dialect.h; mlir/include/mlir/Tools/PDLL/ODS/Operation.h; mlir/include/mlir/Tools/PDLL/Parser/Parser.h; mlir/include/mlir/Transforms/ControlFlowSinkUtils.h; mlir/include/mlir/Transforms/DialectConversion.h; mlir/include/mlir/Transforms/GreedyPatternRewriteDriver.h; mlir/include/mlir/Transforms/InliningUtils.h; mlir/include/mlir/Transforms/LocationSnapshot.h; mlir/include/mlir/Transforms/Passes.h; mlir/include/mlir/Transforms/RegionUtils.h; mlir/include/mlir-c/AffineExpr.h; mlir/include/mlir-c/AffineMap.h; mlir/include/mlir-c/BuiltinAttributes.h; mlir/include/mlir-c/BuiltinTypes.h; mlir/include/mlir-c/Conversion.h; mlir/include/mlir-c/Debug.h; mlir/inclu,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:400338,Energy Efficiency,reduce,reduce,400338,nMPToLLVMIRTranslation.cpp; mlir/lib/Target/LLVMIR/Dialect/ROCDL/ROCDLToLLVMIRTranslation.cpp; mlir/lib/Target/LLVMIR/Dialect/X86Vector/X86VectorToLLVMIRTranslation.cpp; mlir/lib/Target/SPIRV/SPIRVBinaryUtils.cpp; mlir/lib/Target/SPIRV/TranslateRegistration.cpp; mlir/lib/Target/SPIRV/Deserialization/Deserialization.cpp; mlir/lib/Target/SPIRV/Deserialization/DeserializeOps.cpp; mlir/lib/Target/SPIRV/Deserialization/Deserializer.cpp; mlir/lib/Target/SPIRV/Serialization/Serialization.cpp; mlir/lib/Target/SPIRV/Serialization/SerializeOps.cpp; mlir/lib/Target/SPIRV/Serialization/Serializer.cpp; mlir/lib/Tools/mlir-lsp-server/LSPServer.cpp; mlir/lib/Tools/mlir-lsp-server/LSPServer.h; mlir/lib/Tools/mlir-lsp-server/MlirLspServerMain.cpp; mlir/lib/Tools/mlir-lsp-server/MLIRServer.h; mlir/lib/Tools/mlir-lsp-server/lsp/Logging.cpp; mlir/lib/Tools/mlir-lsp-server/lsp/Protocol.cpp; mlir/lib/Tools/mlir-lsp-server/lsp/Transport.cpp; mlir/lib/Tools/mlir-lsp-server/lsp/Transport.h; mlir/lib/Tools/mlir-reduce/MlirReduceMain.cpp; mlir/lib/Tools/PDLL/AST/Context.cpp; mlir/lib/Tools/PDLL/AST/Diagnostic.cpp; mlir/lib/Tools/PDLL/AST/NodePrinter.cpp; mlir/lib/Tools/PDLL/AST/TypeDetail.h; mlir/lib/Tools/PDLL/AST/Types.cpp; mlir/lib/Tools/PDLL/CodeGen/CPPGen.cpp; mlir/lib/Tools/PDLL/ODS/Context.cpp; mlir/lib/Tools/PDLL/ODS/Dialect.cpp; mlir/lib/Tools/PDLL/ODS/Operation.cpp; mlir/lib/Tools/PDLL/Parser/Parser.cpp; mlir/lib/Transforms/Canonicalizer.cpp; mlir/lib/Transforms/ControlFlowSink.cpp; mlir/lib/Transforms/CSE.cpp; mlir/lib/Transforms/Inliner.cpp; mlir/lib/Transforms/LocationSnapshot.cpp; mlir/lib/Transforms/LoopInvariantCodeMotion.cpp; mlir/lib/Transforms/PassDetail.h; mlir/lib/Transforms/SCCP.cpp; mlir/lib/Transforms/StripDebugInfo.cpp; mlir/lib/Transforms/SymbolDCE.cpp; mlir/lib/Transforms/SymbolPrivatize.cpp; mlir/lib/Transforms/Utils/ControlFlowSinkUtils.cpp; mlir/lib/Transforms/Utils/DialectConversion.cpp; mlir/lib/Transforms/Utils/FoldUtils.cpp; mlir/lib/Transforms/Utils/GreedyPat,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:401730,Energy Efficiency,reduce,reduce,401730,Parser/Parser.cpp; mlir/lib/Transforms/Canonicalizer.cpp; mlir/lib/Transforms/ControlFlowSink.cpp; mlir/lib/Transforms/CSE.cpp; mlir/lib/Transforms/Inliner.cpp; mlir/lib/Transforms/LocationSnapshot.cpp; mlir/lib/Transforms/LoopInvariantCodeMotion.cpp; mlir/lib/Transforms/PassDetail.h; mlir/lib/Transforms/SCCP.cpp; mlir/lib/Transforms/StripDebugInfo.cpp; mlir/lib/Transforms/SymbolDCE.cpp; mlir/lib/Transforms/SymbolPrivatize.cpp; mlir/lib/Transforms/Utils/ControlFlowSinkUtils.cpp; mlir/lib/Transforms/Utils/DialectConversion.cpp; mlir/lib/Transforms/Utils/FoldUtils.cpp; mlir/lib/Transforms/Utils/GreedyPatternRewriteDriver.cpp; mlir/lib/Transforms/Utils/InliningUtils.cpp; mlir/lib/Transforms/Utils/RegionUtils.cpp; mlir/lib/Translation/Translation.cpp; mlir/tools/mlir-cpu-runner/mlir-cpu-runner.cpp; mlir/tools/mlir-linalg-ods-gen/mlir-linalg-ods-yaml-gen.cpp; mlir/tools/mlir-lsp-server/mlir-lsp-server.cpp; mlir/tools/mlir-opt/mlir-opt.cpp; mlir/tools/mlir-pdll/mlir-pdll.cpp; mlir/tools/mlir-reduce/mlir-reduce.cpp; mlir/tools/mlir-shlib/mlir-shlib.cpp; mlir/tools/mlir-spirv-cpu-runner/mlir-spirv-cpu-runner.cpp; mlir/tools/mlir-tblgen/AttrOrTypeDefGen.cpp; mlir/tools/mlir-tblgen/AttrOrTypeFormatGen.cpp; mlir/tools/mlir-tblgen/AttrOrTypeFormatGen.h; mlir/tools/mlir-tblgen/CodeGenHelpers.cpp; mlir/tools/mlir-tblgen/DialectGen.cpp; mlir/tools/mlir-tblgen/DirectiveCommonGen.cpp; mlir/tools/mlir-tblgen/DocGenUtilities.h; mlir/tools/mlir-tblgen/EnumsGen.cpp; mlir/tools/mlir-tblgen/FormatGen.cpp; mlir/tools/mlir-tblgen/FormatGen.h; mlir/tools/mlir-tblgen/LLVMIRConversionGen.cpp; mlir/tools/mlir-tblgen/LLVMIRIntrinsicGen.cpp; mlir/tools/mlir-tblgen/mlir-tblgen.cpp; mlir/tools/mlir-tblgen/OpClass.cpp; mlir/tools/mlir-tblgen/OpClass.h; mlir/tools/mlir-tblgen/OpDefinitionsGen.cpp; mlir/tools/mlir-tblgen/OpDocGen.cpp; mlir/tools/mlir-tblgen/OpFormatGen.h; mlir/tools/mlir-tblgen/OpGenHelpers.cpp; mlir/tools/mlir-tblgen/OpGenHelpers.h; mlir/tools/mlir-tblgen/OpInterfacesGen.cpp; mlir/to,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:401742,Energy Efficiency,reduce,reduce,401742,Parser/Parser.cpp; mlir/lib/Transforms/Canonicalizer.cpp; mlir/lib/Transforms/ControlFlowSink.cpp; mlir/lib/Transforms/CSE.cpp; mlir/lib/Transforms/Inliner.cpp; mlir/lib/Transforms/LocationSnapshot.cpp; mlir/lib/Transforms/LoopInvariantCodeMotion.cpp; mlir/lib/Transforms/PassDetail.h; mlir/lib/Transforms/SCCP.cpp; mlir/lib/Transforms/StripDebugInfo.cpp; mlir/lib/Transforms/SymbolDCE.cpp; mlir/lib/Transforms/SymbolPrivatize.cpp; mlir/lib/Transforms/Utils/ControlFlowSinkUtils.cpp; mlir/lib/Transforms/Utils/DialectConversion.cpp; mlir/lib/Transforms/Utils/FoldUtils.cpp; mlir/lib/Transforms/Utils/GreedyPatternRewriteDriver.cpp; mlir/lib/Transforms/Utils/InliningUtils.cpp; mlir/lib/Transforms/Utils/RegionUtils.cpp; mlir/lib/Translation/Translation.cpp; mlir/tools/mlir-cpu-runner/mlir-cpu-runner.cpp; mlir/tools/mlir-linalg-ods-gen/mlir-linalg-ods-yaml-gen.cpp; mlir/tools/mlir-lsp-server/mlir-lsp-server.cpp; mlir/tools/mlir-opt/mlir-opt.cpp; mlir/tools/mlir-pdll/mlir-pdll.cpp; mlir/tools/mlir-reduce/mlir-reduce.cpp; mlir/tools/mlir-shlib/mlir-shlib.cpp; mlir/tools/mlir-spirv-cpu-runner/mlir-spirv-cpu-runner.cpp; mlir/tools/mlir-tblgen/AttrOrTypeDefGen.cpp; mlir/tools/mlir-tblgen/AttrOrTypeFormatGen.cpp; mlir/tools/mlir-tblgen/AttrOrTypeFormatGen.h; mlir/tools/mlir-tblgen/CodeGenHelpers.cpp; mlir/tools/mlir-tblgen/DialectGen.cpp; mlir/tools/mlir-tblgen/DirectiveCommonGen.cpp; mlir/tools/mlir-tblgen/DocGenUtilities.h; mlir/tools/mlir-tblgen/EnumsGen.cpp; mlir/tools/mlir-tblgen/FormatGen.cpp; mlir/tools/mlir-tblgen/FormatGen.h; mlir/tools/mlir-tblgen/LLVMIRConversionGen.cpp; mlir/tools/mlir-tblgen/LLVMIRIntrinsicGen.cpp; mlir/tools/mlir-tblgen/mlir-tblgen.cpp; mlir/tools/mlir-tblgen/OpClass.cpp; mlir/tools/mlir-tblgen/OpClass.h; mlir/tools/mlir-tblgen/OpDefinitionsGen.cpp; mlir/tools/mlir-tblgen/OpDocGen.cpp; mlir/tools/mlir-tblgen/OpFormatGen.h; mlir/tools/mlir-tblgen/OpGenHelpers.cpp; mlir/tools/mlir-tblgen/OpGenHelpers.h; mlir/tools/mlir-tblgen/OpInterfacesGen.cpp; mlir/to,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:27838,Integrability,wrap,wrapper,27838,.cpp; clang/lib/Tooling/Syntax/Tree.cpp; clang/lib/Tooling/Syntax/Pseudo/Grammar.cpp; clang/lib/Tooling/Syntax/Pseudo/GrammarBNF.cpp; clang/lib/Tooling/Syntax/Pseudo/Lex.cpp; clang/lib/Tooling/Syntax/Pseudo/LRGraph.cpp; clang/lib/Tooling/Syntax/Pseudo/LRTable.cpp; clang/lib/Tooling/Syntax/Pseudo/LRTableBuild.cpp; clang/lib/Tooling/Syntax/Pseudo/Preprocess.cpp; clang/lib/Tooling/Syntax/Pseudo/Token.cpp; clang/lib/Tooling/Transformer/Parsing.cpp; clang/lib/Tooling/Transformer/SourceCodeBuilders.cpp; clang/lib/Tooling/Transformer/Stencil.cpp; clang/lib/Tooling/Transformer/Transformer.cpp; clang/tools/amdgpu-arch/AMDGPUArch.cpp; clang/tools/apinotes-test/APINotesTest.cpp; clang/tools/clang-format/ClangFormat.cpp; clang/tools/clang-fuzzer/ClangFuzzer.cpp; clang/tools/clang-fuzzer/DummyClangFuzzer.cpp; clang/tools/clang-fuzzer/ExampleClangLLVMProtoFuzzer.cpp; clang/tools/clang-fuzzer/ExampleClangLoopProtoFuzzer.cpp; clang/tools/clang-fuzzer/handle-llvm/handle_llvm.h; clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp; clang/tools/clang-linker-wrapper/OffloadWrapper.cpp; clang/tools/clang-pseudo/ClangPseudo.cpp; clang/tools/clang-refactor/ClangRefactor.cpp; clang/tools/clang-refactor/TestSupport.cpp; clang/tools/clang-refactor/TestSupport.h; clang/tools/clang-refactor/ToolRefactoringResultConsumer.h; clang/tools/clang-rename/ClangRename.cpp; clang/tools/clang-repl/ClangRepl.cpp; clang/tools/clang-scan-deps/ClangScanDeps.cpp; clang/tools/clang-shlib/clang-shlib.cpp; clang/tools/driver/cc1gen_reproducer_main.cpp; clang/tools/libclang/CIndex.cpp; clang/tools/libclang/CIndexUSRs.cpp; clang/tools/libclang/CursorVisitor.h; clang/tools/libclang/CXCursor.cpp; clang/tools/libclang/CXCursor.h; clang/tools/scan-build-py/tests/functional/src/include/clean-one.h; clang/unittests/Analysis/CFGBuildResult.h; clang/unittests/Analysis/MacroExpansionContextTest.cpp; clang/unittests/Analysis/FlowSensitive/DataflowAnalysisContextTest.cpp; clang/unittests/Analysis/FlowSensitive/DataflowEnvi,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:27895,Integrability,wrap,wrapper,27895,ling/Syntax/Pseudo/Grammar.cpp; clang/lib/Tooling/Syntax/Pseudo/GrammarBNF.cpp; clang/lib/Tooling/Syntax/Pseudo/Lex.cpp; clang/lib/Tooling/Syntax/Pseudo/LRGraph.cpp; clang/lib/Tooling/Syntax/Pseudo/LRTable.cpp; clang/lib/Tooling/Syntax/Pseudo/LRTableBuild.cpp; clang/lib/Tooling/Syntax/Pseudo/Preprocess.cpp; clang/lib/Tooling/Syntax/Pseudo/Token.cpp; clang/lib/Tooling/Transformer/Parsing.cpp; clang/lib/Tooling/Transformer/SourceCodeBuilders.cpp; clang/lib/Tooling/Transformer/Stencil.cpp; clang/lib/Tooling/Transformer/Transformer.cpp; clang/tools/amdgpu-arch/AMDGPUArch.cpp; clang/tools/apinotes-test/APINotesTest.cpp; clang/tools/clang-format/ClangFormat.cpp; clang/tools/clang-fuzzer/ClangFuzzer.cpp; clang/tools/clang-fuzzer/DummyClangFuzzer.cpp; clang/tools/clang-fuzzer/ExampleClangLLVMProtoFuzzer.cpp; clang/tools/clang-fuzzer/ExampleClangLoopProtoFuzzer.cpp; clang/tools/clang-fuzzer/handle-llvm/handle_llvm.h; clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp; clang/tools/clang-linker-wrapper/OffloadWrapper.cpp; clang/tools/clang-pseudo/ClangPseudo.cpp; clang/tools/clang-refactor/ClangRefactor.cpp; clang/tools/clang-refactor/TestSupport.cpp; clang/tools/clang-refactor/TestSupport.h; clang/tools/clang-refactor/ToolRefactoringResultConsumer.h; clang/tools/clang-rename/ClangRename.cpp; clang/tools/clang-repl/ClangRepl.cpp; clang/tools/clang-scan-deps/ClangScanDeps.cpp; clang/tools/clang-shlib/clang-shlib.cpp; clang/tools/driver/cc1gen_reproducer_main.cpp; clang/tools/libclang/CIndex.cpp; clang/tools/libclang/CIndexUSRs.cpp; clang/tools/libclang/CursorVisitor.h; clang/tools/libclang/CXCursor.cpp; clang/tools/libclang/CXCursor.h; clang/tools/scan-build-py/tests/functional/src/include/clean-one.h; clang/unittests/Analysis/CFGBuildResult.h; clang/unittests/Analysis/MacroExpansionContextTest.cpp; clang/unittests/Analysis/FlowSensitive/DataflowAnalysisContextTest.cpp; clang/unittests/Analysis/FlowSensitive/DataflowEnvironmentTest.cpp; clang/unittests/Analysis/FlowSensitiv,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:102294,Integrability,interface,interface,102294,er-rt/lib/scudo/standalone/report.cpp; compiler-rt/lib/scudo/standalone/report.h; compiler-rt/lib/scudo/standalone/secondary.h; compiler-rt/lib/scudo/standalone/size_class_map.h; compiler-rt/lib/scudo/standalone/stack_depot.h; compiler-rt/lib/scudo/standalone/stats.h; compiler-rt/lib/scudo/standalone/string_utils.cpp; compiler-rt/lib/scudo/standalone/string_utils.h; compiler-rt/lib/scudo/standalone/trusty.cpp; compiler-rt/lib/scudo/standalone/trusty.h; compiler-rt/lib/scudo/standalone/tsd.h; compiler-rt/lib/scudo/standalone/tsd_exclusive.h; compiler-rt/lib/scudo/standalone/tsd_shared.h; compiler-rt/lib/scudo/standalone/vector.h; compiler-rt/lib/scudo/standalone/wrappers_c.cpp; compiler-rt/lib/scudo/standalone/wrappers_c.h; compiler-rt/lib/scudo/standalone/wrappers_c_bionic.cpp; compiler-rt/lib/scudo/standalone/wrappers_c_checks.h; compiler-rt/lib/scudo/standalone/benchmarks/malloc_benchmark.cpp; compiler-rt/lib/scudo/standalone/fuzz/get_error_info_fuzzer.cpp; compiler-rt/lib/scudo/standalone/include/scudo/interface.h; compiler-rt/lib/scudo/standalone/tests/atomic_test.cpp; compiler-rt/lib/scudo/standalone/tests/bytemap_test.cpp; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; ,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:114039,Integrability,message,message,114039,/FIRAttr.h; flang/include/flang/Optimizer/Dialect/FIRDialect.h; flang/include/flang/Optimizer/Dialect/FIROps.h; flang/include/flang/Optimizer/Dialect/FIROpsSupport.h; flang/include/flang/Optimizer/Dialect/FIRType.h; flang/include/flang/Optimizer/Support/FatalError.h; flang/include/flang/Optimizer/Support/FIRContext.h; flang/include/flang/Optimizer/Support/InitFIR.h; flang/include/flang/Optimizer/Support/InternalNames.h; flang/include/flang/Optimizer/Support/KindMapping.h; flang/include/flang/Optimizer/Support/Matcher.h; flang/include/flang/Optimizer/Support/TypeCode.h; flang/include/flang/Optimizer/Support/Utils.h; flang/include/flang/Optimizer/Transforms/Passes.h; flang/include/flang/Parser/char-block.h; flang/include/flang/Parser/char-buffer.h; flang/include/flang/Parser/char-set.h; flang/include/flang/Parser/characters.h; flang/include/flang/Parser/dump-parse-tree.h; flang/include/flang/Parser/format-specification.h; flang/include/flang/Parser/instrumented-parser.h; flang/include/flang/Parser/message.h; flang/include/flang/Parser/parse-state.h; flang/include/flang/Parser/parse-tree-visitor.h; flang/include/flang/Parser/parsing.h; flang/include/flang/Parser/provenance.h; flang/include/flang/Parser/source.h; flang/include/flang/Parser/tools.h; flang/include/flang/Parser/unparse.h; flang/include/flang/Parser/user-state.h; flang/include/flang/Runtime/allocatable.h; flang/include/flang/Runtime/assign.h; flang/include/flang/Runtime/c-or-cpp.h; flang/include/flang/Runtime/character.h; flang/include/flang/Runtime/command.h; flang/include/flang/Runtime/cpp-type.h; flang/include/flang/Runtime/derived-api.h; flang/include/flang/Runtime/descriptor.h; flang/include/flang/Runtime/entry-names.h; flang/include/flang/Runtime/extensions.h; flang/include/flang/Runtime/inquiry.h; flang/include/flang/Runtime/io-api.h; flang/include/flang/Runtime/iostat.h; flang/include/flang/Runtime/main.h; flang/include/flang/Runtime/matmul.h; flang/include/flang/Runtime/memory.h; flang/include/flan,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:120714,Integrability,message,message,120714,stractResult.cpp; flang/lib/Optimizer/Transforms/AffineDemotion.cpp; flang/lib/Optimizer/Transforms/AffinePromotion.cpp; flang/lib/Optimizer/Transforms/ArrayValueCopy.cpp; flang/lib/Optimizer/Transforms/CharacterConversion.cpp; flang/lib/Optimizer/Transforms/ExternalNameConversion.cpp; flang/lib/Optimizer/Transforms/MemoryAllocation.cpp; flang/lib/Optimizer/Transforms/MemRefDataFlowOpt.cpp; flang/lib/Optimizer/Transforms/PassDetail.h; flang/lib/Optimizer/Transforms/RewriteLoop.cpp; flang/lib/Optimizer/Transforms/StackArrays.cpp; flang/lib/Parser/basic-parsers.h; flang/lib/Parser/char-block.cpp; flang/lib/Parser/char-buffer.cpp; flang/lib/Parser/char-set.cpp; flang/lib/Parser/characters.cpp; flang/lib/Parser/debug-parser.cpp; flang/lib/Parser/debug-parser.h; flang/lib/Parser/executable-parsers.cpp; flang/lib/Parser/expr-parsers.cpp; flang/lib/Parser/expr-parsers.h; flang/lib/Parser/Fortran-parsers.cpp; flang/lib/Parser/instrumented-parser.cpp; flang/lib/Parser/io-parsers.cpp; flang/lib/Parser/message.cpp; flang/lib/Parser/misc-parsers.h; flang/lib/Parser/openacc-parsers.cpp; flang/lib/Parser/openmp-parsers.cpp; flang/lib/Parser/parse-tree.cpp; flang/lib/Parser/parsing.cpp; flang/lib/Parser/preprocessor.cpp; flang/lib/Parser/preprocessor.h; flang/lib/Parser/prescan.cpp; flang/lib/Parser/prescan.h; flang/lib/Parser/program-parsers.cpp; flang/lib/Parser/provenance.cpp; flang/lib/Parser/source.cpp; flang/lib/Parser/stmt-parser.h; flang/lib/Parser/token-parsers.h; flang/lib/Parser/token-sequence.cpp; flang/lib/Parser/token-sequence.h; flang/lib/Parser/tools.cpp; flang/lib/Parser/type-parser-implementation.h; flang/lib/Parser/type-parsers.h; flang/lib/Parser/unparse.cpp; flang/lib/Parser/user-state.cpp; flang/lib/Semantics/assignment.cpp; flang/lib/Semantics/assignment.h; flang/lib/Semantics/attr.cpp; flang/lib/Semantics/canonicalize-acc.cpp; flang/lib/Semantics/canonicalize-acc.h; flang/lib/Semantics/canonicalize-do.cpp; flang/lib/Semantics/canonicalize-do.h; flang/lib/Se,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:158210,Integrability,synchroniz,synchronization,158210,ric/include/clc/math/sqrt.h; libclc/generic/include/clc/math/tan.h; libclc/generic/include/clc/math/tanh.h; libclc/generic/include/clc/math/tanpi.h; libclc/generic/include/clc/math/tgamma.h; libclc/generic/include/clc/math/trunc.h; libclc/generic/include/clc/relational/bitselect.h; libclc/generic/include/clc/relational/isfinite.h; libclc/generic/include/clc/relational/isgreater.h; libclc/generic/include/clc/relational/isgreaterequal.h; libclc/generic/include/clc/relational/isless.h; libclc/generic/include/clc/relational/islessequal.h; libclc/generic/include/clc/relational/islessgreater.h; libclc/generic/include/clc/relational/isnormal.h; libclc/generic/include/clc/relational/isnotequal.h; libclc/generic/include/clc/relational/isordered.h; libclc/generic/include/clc/relational/isunordered.h; libclc/generic/include/clc/relational/signbit.h; libclc/generic/include/clc/shared/clamp.h; libclc/generic/include/clc/shared/max.h; libclc/generic/include/clc/shared/min.h; libclc/generic/include/clc/synchronization/barrier.h; libclc/generic/include/clc/synchronization/cl_mem_fence_flags.h; libclc/generic/include/clc/workitem/get_global_id.h; libclc/generic/include/clc/workitem/get_global_offset.h; libclc/generic/include/clc/workitem/get_global_size.h; libclc/generic/include/clc/workitem/get_group_id.h; libclc/generic/include/clc/workitem/get_local_id.h; libclc/generic/include/clc/workitem/get_local_size.h; libclc/generic/include/clc/workitem/get_num_groups.h; libclc/generic/include/clc/workitem/get_work_dim.h; libclc/generic/include/integer/popcount.h; libclc/generic/include/math/clc_exp10.h; libclc/generic/include/math/clc_fma.h; libclc/generic/include/math/clc_fmod.h; libclc/generic/include/math/clc_hypot.h; libclc/generic/include/math/clc_ldexp.h; libclc/generic/include/math/clc_nextafter.h; libclc/generic/include/math/clc_pow.h; libclc/generic/include/math/clc_pown.h; libclc/generic/include/math/clc_powr.h; libclc/generic/include/math/clc_remainder.h; libclc/generic/include,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:158264,Integrability,synchroniz,synchronization,158264,h/tan.h; libclc/generic/include/clc/math/tanh.h; libclc/generic/include/clc/math/tanpi.h; libclc/generic/include/clc/math/tgamma.h; libclc/generic/include/clc/math/trunc.h; libclc/generic/include/clc/relational/bitselect.h; libclc/generic/include/clc/relational/isfinite.h; libclc/generic/include/clc/relational/isgreater.h; libclc/generic/include/clc/relational/isgreaterequal.h; libclc/generic/include/clc/relational/isless.h; libclc/generic/include/clc/relational/islessequal.h; libclc/generic/include/clc/relational/islessgreater.h; libclc/generic/include/clc/relational/isnormal.h; libclc/generic/include/clc/relational/isnotequal.h; libclc/generic/include/clc/relational/isordered.h; libclc/generic/include/clc/relational/isunordered.h; libclc/generic/include/clc/relational/signbit.h; libclc/generic/include/clc/shared/clamp.h; libclc/generic/include/clc/shared/max.h; libclc/generic/include/clc/shared/min.h; libclc/generic/include/clc/synchronization/barrier.h; libclc/generic/include/clc/synchronization/cl_mem_fence_flags.h; libclc/generic/include/clc/workitem/get_global_id.h; libclc/generic/include/clc/workitem/get_global_offset.h; libclc/generic/include/clc/workitem/get_global_size.h; libclc/generic/include/clc/workitem/get_group_id.h; libclc/generic/include/clc/workitem/get_local_id.h; libclc/generic/include/clc/workitem/get_local_size.h; libclc/generic/include/clc/workitem/get_num_groups.h; libclc/generic/include/clc/workitem/get_work_dim.h; libclc/generic/include/integer/popcount.h; libclc/generic/include/math/clc_exp10.h; libclc/generic/include/math/clc_fma.h; libclc/generic/include/math/clc_fmod.h; libclc/generic/include/math/clc_hypot.h; libclc/generic/include/math/clc_ldexp.h; libclc/generic/include/math/clc_nextafter.h; libclc/generic/include/math/clc_pow.h; libclc/generic/include/math/clc_pown.h; libclc/generic/include/math/clc_powr.h; libclc/generic/include/math/clc_remainder.h; libclc/generic/include/math/clc_remquo.h; libclc/generic/include/math/clc_rootn.h;,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:226662,Integrability,wrap,wrapper,226662,acOSX/CFBundle.h; lldb/tools/debugserver/source/MacOSX/CFString.cpp; lldb/tools/debugserver/source/MacOSX/CFString.h; lldb/tools/debugserver/source/MacOSX/CFUtils.h; lldb/tools/debugserver/source/MacOSX/Genealogy.cpp; lldb/tools/debugserver/source/MacOSX/Genealogy.h; lldb/tools/debugserver/source/MacOSX/GenealogySPI.h; lldb/tools/debugserver/source/MacOSX/MachException.h; lldb/tools/debugserver/source/MacOSX/MachThread.cpp; lldb/tools/debugserver/source/MacOSX/MachThread.h; lldb/tools/debugserver/source/MacOSX/MachThreadList.h; lldb/tools/debugserver/source/MacOSX/MachVMMemory.h; lldb/tools/debugserver/source/MacOSX/MachVMRegion.cpp; lldb/tools/debugserver/source/MacOSX/MachVMRegion.h; lldb/tools/debugserver/source/MacOSX/OsLogger.h; lldb/tools/debugserver/source/MacOSX/arm/DNBArchImpl.h; lldb/tools/debugserver/source/MacOSX/arm64/DNBArchImplARM64.h; lldb/tools/driver/Driver.cpp; lldb/tools/driver/Driver.h; lldb/tools/driver/Platform.cpp; lldb/tools/driver/Platform.h; lldb/tools/intel-features/cli-wrapper.cpp; lldb/tools/intel-features/intel-mpx/cli-wrapper-mpxtable.h; lldb/tools/lldb-instr/Instrument.cpp; lldb/tools/lldb-server/Acceptor.h; lldb/tools/lldb-server/LLDBServerUtilities.cpp; lldb/tools/lldb-server/SystemInitializerLLGS.cpp; lldb/tools/lldb-server/SystemInitializerLLGS.h; lldb/tools/lldb-test/SystemInitializerTest.cpp; lldb/tools/lldb-test/SystemInitializerTest.h; lldb/tools/lldb-vscode/BreakpointBase.cpp; lldb/tools/lldb-vscode/BreakpointBase.h; lldb/tools/lldb-vscode/ExceptionBreakpoint.cpp; lldb/tools/lldb-vscode/ExceptionBreakpoint.h; lldb/tools/lldb-vscode/FifoFiles.cpp; lldb/tools/lldb-vscode/FifoFiles.h; lldb/tools/lldb-vscode/FunctionBreakpoint.cpp; lldb/tools/lldb-vscode/FunctionBreakpoint.h; lldb/tools/lldb-vscode/IOStream.cpp; lldb/tools/lldb-vscode/IOStream.h; lldb/tools/lldb-vscode/JSONUtils.cpp; lldb/tools/lldb-vscode/JSONUtils.h; lldb/tools/lldb-vscode/lldb-vscode.cpp; lldb/tools/lldb-vscode/LLDBUtils.cpp; lldb/tools/lldb-vscode/LLDBUtils.h,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:226715,Integrability,wrap,wrapper-mpxtable,226715,SX/CFString.cpp; lldb/tools/debugserver/source/MacOSX/CFString.h; lldb/tools/debugserver/source/MacOSX/CFUtils.h; lldb/tools/debugserver/source/MacOSX/Genealogy.cpp; lldb/tools/debugserver/source/MacOSX/Genealogy.h; lldb/tools/debugserver/source/MacOSX/GenealogySPI.h; lldb/tools/debugserver/source/MacOSX/MachException.h; lldb/tools/debugserver/source/MacOSX/MachThread.cpp; lldb/tools/debugserver/source/MacOSX/MachThread.h; lldb/tools/debugserver/source/MacOSX/MachThreadList.h; lldb/tools/debugserver/source/MacOSX/MachVMMemory.h; lldb/tools/debugserver/source/MacOSX/MachVMRegion.cpp; lldb/tools/debugserver/source/MacOSX/MachVMRegion.h; lldb/tools/debugserver/source/MacOSX/OsLogger.h; lldb/tools/debugserver/source/MacOSX/arm/DNBArchImpl.h; lldb/tools/debugserver/source/MacOSX/arm64/DNBArchImplARM64.h; lldb/tools/driver/Driver.cpp; lldb/tools/driver/Driver.h; lldb/tools/driver/Platform.cpp; lldb/tools/driver/Platform.h; lldb/tools/intel-features/cli-wrapper.cpp; lldb/tools/intel-features/intel-mpx/cli-wrapper-mpxtable.h; lldb/tools/lldb-instr/Instrument.cpp; lldb/tools/lldb-server/Acceptor.h; lldb/tools/lldb-server/LLDBServerUtilities.cpp; lldb/tools/lldb-server/SystemInitializerLLGS.cpp; lldb/tools/lldb-server/SystemInitializerLLGS.h; lldb/tools/lldb-test/SystemInitializerTest.cpp; lldb/tools/lldb-test/SystemInitializerTest.h; lldb/tools/lldb-vscode/BreakpointBase.cpp; lldb/tools/lldb-vscode/BreakpointBase.h; lldb/tools/lldb-vscode/ExceptionBreakpoint.cpp; lldb/tools/lldb-vscode/ExceptionBreakpoint.h; lldb/tools/lldb-vscode/FifoFiles.cpp; lldb/tools/lldb-vscode/FifoFiles.h; lldb/tools/lldb-vscode/FunctionBreakpoint.cpp; lldb/tools/lldb-vscode/FunctionBreakpoint.h; lldb/tools/lldb-vscode/IOStream.cpp; lldb/tools/lldb-vscode/IOStream.h; lldb/tools/lldb-vscode/JSONUtils.cpp; lldb/tools/lldb-vscode/JSONUtils.h; lldb/tools/lldb-vscode/lldb-vscode.cpp; lldb/tools/lldb-vscode/LLDBUtils.cpp; lldb/tools/lldb-vscode/LLDBUtils.h; lldb/tools/lldb-vscode/OutputRedirector.cpp; lldb,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:403150,Integrability,wrap,wrappers,403150,s/mlir-tblgen/DocGenUtilities.h; mlir/tools/mlir-tblgen/EnumsGen.cpp; mlir/tools/mlir-tblgen/FormatGen.cpp; mlir/tools/mlir-tblgen/FormatGen.h; mlir/tools/mlir-tblgen/LLVMIRConversionGen.cpp; mlir/tools/mlir-tblgen/LLVMIRIntrinsicGen.cpp; mlir/tools/mlir-tblgen/mlir-tblgen.cpp; mlir/tools/mlir-tblgen/OpClass.cpp; mlir/tools/mlir-tblgen/OpClass.h; mlir/tools/mlir-tblgen/OpDefinitionsGen.cpp; mlir/tools/mlir-tblgen/OpDocGen.cpp; mlir/tools/mlir-tblgen/OpFormatGen.h; mlir/tools/mlir-tblgen/OpGenHelpers.cpp; mlir/tools/mlir-tblgen/OpGenHelpers.h; mlir/tools/mlir-tblgen/OpInterfacesGen.cpp; mlir/tools/mlir-tblgen/OpPythonBindingGen.cpp; mlir/tools/mlir-tblgen/PassCAPIGen.cpp; mlir/tools/mlir-tblgen/PassDocGen.cpp; mlir/tools/mlir-tblgen/PassGen.cpp; mlir/tools/mlir-tblgen/RewriterGen.cpp; mlir/tools/mlir-tblgen/SPIRVUtilsGen.cpp; mlir/tools/mlir-tblgen/StructsGen.cpp; mlir/tools/mlir-translate/mlir-translate.cpp; mlir/tools/mlir-vulkan-runner/mlir-vulkan-runner.cpp; mlir/tools/mlir-vulkan-runner/vulkan-runtime-wrappers.cpp; mlir/tools/mlir-vulkan-runner/VulkanRuntime.cpp; mlir/tools/mlir-vulkan-runner/VulkanRuntime.h; mlir/unittests/Analysis/Presburger/IntegerPolyhedronTest.cpp; mlir/unittests/Analysis/Presburger/LinearTransformTest.cpp; mlir/unittests/Analysis/Presburger/MatrixTest.cpp; mlir/unittests/Analysis/Presburger/PresburgerSetTest.cpp; mlir/unittests/Analysis/Presburger/PresburgerSpaceTest.cpp; mlir/unittests/Analysis/Presburger/PWMAFunctionTest.cpp; mlir/unittests/Analysis/Presburger/SimplexTest.cpp; mlir/unittests/Analysis/Presburger/Utils.h; mlir/unittests/Conversion/PDLToPDLInterp/RootOrderingTest.cpp; mlir/unittests/Dialect/BroadcastShapeTest.cpp; mlir/unittests/Dialect/Affine/Analysis/AffineStructuresParser.cpp; mlir/unittests/Dialect/Affine/Analysis/AffineStructuresParser.h; mlir/unittests/Dialect/Affine/Analysis/AffineStructuresParserTest.cpp; mlir/unittests/Dialect/Quant/QuantizationUtilsTest.cpp; mlir/unittests/Dialect/SparseTensor/MergerTest.cpp; mlir/,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:408320,Integrability,interface,interface,408320,u/impl/interop_hsa.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.h; openmp/libomptarget/plugins/amdgpu/impl/rt.h; openmp/libomptarget/plugins/amdgpu/src/print_tracing.h; openmp/libomptarget/plugins/common/elf_common/elf_common.cpp; openmp/libomptarget/plugins/common/elf_common/elf_common.h; openmp/libomptarget/plugins/common/MemoryManager/MemoryManager.h; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.cpp; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.h; openmp/libomptarget/plugins/generic-elf-64bit/src/rtl.cpp; openmp/libomptarget/plugins/remote/include/Utils.h; openmp/libomptarget/plugins/remote/server/OffloadingServer.cpp; openmp/libomptarget/plugins/remote/server/Server.cpp; openmp/libomptarget/plugins/remote/server/Server.h; openmp/libomptarget/plugins/remote/src/Client.cpp; openmp/libomptarget/plugins/remote/src/Client.h; openmp/libomptarget/plugins/ve/src/rtl.cpp; openmp/libomptarget/src/api.cpp; openmp/libomptarget/src/interface.cpp; openmp/libomptarget/src/interop.cpp; openmp/libomptarget/src/omptarget.cpp; openmp/libomptarget/src/private.h; openmp/libomptarget/src/rtl.cpp; openmp/libomptarget/tools/deviceinfo/llvm-omp-device-info.cpp; openmp/runtime/doc/doxygen/libomp_interface.h; openmp/runtime/src/extractExternal.cpp; openmp/runtime/src/kmp.h; openmp/runtime/src/kmp_affinity.h; openmp/runtime/src/kmp_alloc.cpp; openmp/runtime/src/kmp_atomic.cpp; openmp/runtime/src/kmp_atomic.h; openmp/runtime/src/kmp_barrier.h; openmp/runtime/src/kmp_cancel.cpp; openmp/runtime/src/kmp_debug.cpp; openmp/runtime/src/kmp_debug.h; openmp/runtime/src/kmp_debugger.cpp; openmp/runtime/src/kmp_debugger.h; openmp/runtime/src/kmp_dispatch.cpp; openmp/runtime/src/kmp_dispatch.h; openmp/runtime/src/kmp_dispatch_hier.h; openmp/runtime/src/kmp_environment.cpp; openmp/runtime/src/kmp_environment.h; openmp/runtime/src/kmp_error.cpp; openmp/runtime/src/kmp_error.h; openmp/runtime/src/kmp_ftn_cdecl.cpp; openmp/runtime/src,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:415199,Integrability,interface,interface,415199,/CodeGen/IslAst.cpp; polly/lib/CodeGen/IslExprBuilder.cpp; polly/lib/CodeGen/IslNodeBuilder.cpp; polly/lib/CodeGen/LoopGenerators.cpp; polly/lib/CodeGen/LoopGeneratorsGOMP.cpp; polly/lib/CodeGen/LoopGeneratorsKMP.cpp; polly/lib/CodeGen/ManagedMemoryRewrite.cpp; polly/lib/CodeGen/PerfMonitor.cpp; polly/lib/CodeGen/PPCGCodeGeneration.cpp; polly/lib/CodeGen/RuntimeDebugBuilder.cpp; polly/lib/CodeGen/Utils.cpp; polly/lib/Exchange/JSONExporter.cpp; polly/lib/External/isl/isl_local_private.h; polly/lib/External/isl/imath/iprime.h; polly/lib/External/isl/include/isl/id_type.h; polly/lib/External/isl/include/isl/isl-noexceptions.h; polly/lib/External/isl/include/isl/map_type.h; polly/lib/External/isl/include/isl/printer_type.h; polly/lib/External/isl/include/isl/set_type.h; polly/lib/External/isl/include/isl/union_map_type.h; polly/lib/External/isl/include/isl/union_set_type.h; polly/lib/External/isl/include/isl/val_type.h; polly/lib/External/isl/include/isl/version.h; polly/lib/External/isl/interface/extract_interface.h; polly/lib/Plugin/Polly.cpp; polly/lib/Support/DumpFunctionPass.cpp; polly/lib/Support/DumpModulePass.cpp; polly/lib/Support/GICHelper.cpp; polly/lib/Support/ISLTools.cpp; polly/lib/Support/Mainpage.h; polly/lib/Support/RegisterPasses.cpp; polly/lib/Support/SCEVAffinator.cpp; polly/lib/Support/SCEVValidator.cpp; polly/lib/Support/ScopHelper.cpp; polly/lib/Support/ScopLocation.cpp; polly/lib/Support/VirtualInstruction.cpp; polly/lib/Transform/Canonicalization.cpp; polly/lib/Transform/CodePreparation.cpp; polly/lib/Transform/DeadCodeElimination.cpp; polly/lib/Transform/DeLICM.cpp; polly/lib/Transform/FlattenAlgo.cpp; polly/lib/Transform/FlattenSchedule.cpp; polly/lib/Transform/ForwardOpTree.cpp; polly/lib/Transform/ManualOptimizer.cpp; polly/lib/Transform/MatmulOptimizer.cpp; polly/lib/Transform/MaximalStaticExpansion.cpp; polly/lib/Transform/ScheduleOptimizer.cpp; polly/lib/Transform/ScheduleTreeTransform.cpp; polly/lib/Transform/ScopInliner.cpp; polly/lib/T,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:15402,Modifiability,plugin,plugins,15402,.h; clang/include/clang/Tooling/Transformer/MatchConsumer.h; clang/include/clang/Tooling/Transformer/Parsing.h; clang/include/clang/Tooling/Transformer/RangeSelector.h; clang/include/clang/Tooling/Transformer/SourceCode.h; clang/include/clang/Tooling/Transformer/SourceCodeBuilders.h; clang/include/clang/Tooling/Transformer/Transformer.h; clang/include/clang-c/ExternC.h; clang/include/clang-c/FatalErrorHandler.h; clang/include/clang-c/Index.h; clang/lib/Analysis/CalledOnceCheck.cpp; clang/lib/Analysis/CloneDetection.cpp; clang/lib/Analysis/CodeInjector.cpp; clang/lib/Analysis/FlowSensitive/ControlFlowContext.cpp; clang/lib/Analysis/FlowSensitive/DataflowAnalysisContext.cpp; clang/lib/Analysis/FlowSensitive/DataflowEnvironment.cpp; clang/lib/Analysis/FlowSensitive/DebugSupport.cpp; clang/lib/Analysis/FlowSensitive/Transfer.cpp; clang/lib/Analysis/FlowSensitive/TypeErasedDataflowAnalysis.cpp; clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp; clang/lib/Analysis/plugins/CheckerDependencyHandling/CheckerDependencyHandling.cpp; clang/lib/Analysis/plugins/SampleAnalyzer/MainCallChecker.cpp; clang/lib/APINotes/APINotesFormat.h; clang/lib/APINotes/APINotesTypes.cpp; clang/lib/APINotes/APINotesYAMLCompiler.cpp; clang/lib/AST/DataCollection.cpp; clang/lib/AST/Linkage.h; clang/lib/AST/Interp/ByteCodeGenError.cpp; clang/lib/AST/Interp/ByteCodeGenError.h; clang/lib/AST/Interp/Context.cpp; clang/lib/AST/Interp/Context.h; clang/lib/AST/Interp/Descriptor.cpp; clang/lib/AST/Interp/Disasm.cpp; clang/lib/AST/Interp/EvalEmitter.h; clang/lib/AST/Interp/Frame.cpp; clang/lib/AST/Interp/Frame.h; clang/lib/AST/Interp/InterpState.h; clang/lib/AST/Interp/Opcode.h; clang/lib/AST/Interp/Pointer.cpp; clang/lib/AST/Interp/PrimType.cpp; clang/lib/AST/Interp/Record.h; clang/lib/AST/Interp/Source.cpp; clang/lib/AST/Interp/Source.h; clang/lib/AST/Interp/State.cpp; clang/lib/AST/Interp/State.h; clang/lib/ASTMatchers/GtestMatchers.cpp; clang/lib/ASTMatchers/Dynamic/Marshallers.cpp; clang/lib/Ba,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:15486,Modifiability,plugin,plugins,15486,e/clang/Tooling/Transformer/Parsing.h; clang/include/clang/Tooling/Transformer/RangeSelector.h; clang/include/clang/Tooling/Transformer/SourceCode.h; clang/include/clang/Tooling/Transformer/SourceCodeBuilders.h; clang/include/clang/Tooling/Transformer/Transformer.h; clang/include/clang-c/ExternC.h; clang/include/clang-c/FatalErrorHandler.h; clang/include/clang-c/Index.h; clang/lib/Analysis/CalledOnceCheck.cpp; clang/lib/Analysis/CloneDetection.cpp; clang/lib/Analysis/CodeInjector.cpp; clang/lib/Analysis/FlowSensitive/ControlFlowContext.cpp; clang/lib/Analysis/FlowSensitive/DataflowAnalysisContext.cpp; clang/lib/Analysis/FlowSensitive/DataflowEnvironment.cpp; clang/lib/Analysis/FlowSensitive/DebugSupport.cpp; clang/lib/Analysis/FlowSensitive/Transfer.cpp; clang/lib/Analysis/FlowSensitive/TypeErasedDataflowAnalysis.cpp; clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp; clang/lib/Analysis/plugins/CheckerDependencyHandling/CheckerDependencyHandling.cpp; clang/lib/Analysis/plugins/SampleAnalyzer/MainCallChecker.cpp; clang/lib/APINotes/APINotesFormat.h; clang/lib/APINotes/APINotesTypes.cpp; clang/lib/APINotes/APINotesYAMLCompiler.cpp; clang/lib/AST/DataCollection.cpp; clang/lib/AST/Linkage.h; clang/lib/AST/Interp/ByteCodeGenError.cpp; clang/lib/AST/Interp/ByteCodeGenError.h; clang/lib/AST/Interp/Context.cpp; clang/lib/AST/Interp/Context.h; clang/lib/AST/Interp/Descriptor.cpp; clang/lib/AST/Interp/Disasm.cpp; clang/lib/AST/Interp/EvalEmitter.h; clang/lib/AST/Interp/Frame.cpp; clang/lib/AST/Interp/Frame.h; clang/lib/AST/Interp/InterpState.h; clang/lib/AST/Interp/Opcode.h; clang/lib/AST/Interp/Pointer.cpp; clang/lib/AST/Interp/PrimType.cpp; clang/lib/AST/Interp/Record.h; clang/lib/AST/Interp/Source.cpp; clang/lib/AST/Interp/Source.h; clang/lib/AST/Interp/State.cpp; clang/lib/AST/Interp/State.h; clang/lib/ASTMatchers/GtestMatchers.cpp; clang/lib/ASTMatchers/Dynamic/Marshallers.cpp; clang/lib/Basic/Attributes.cpp; clang/lib/Basic/DarwinSDKInfo.cpp; clang/lib/Basic/Dia,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:27983,Modifiability,refactor,refactor,27983,oling/Syntax/Pseudo/Lex.cpp; clang/lib/Tooling/Syntax/Pseudo/LRGraph.cpp; clang/lib/Tooling/Syntax/Pseudo/LRTable.cpp; clang/lib/Tooling/Syntax/Pseudo/LRTableBuild.cpp; clang/lib/Tooling/Syntax/Pseudo/Preprocess.cpp; clang/lib/Tooling/Syntax/Pseudo/Token.cpp; clang/lib/Tooling/Transformer/Parsing.cpp; clang/lib/Tooling/Transformer/SourceCodeBuilders.cpp; clang/lib/Tooling/Transformer/Stencil.cpp; clang/lib/Tooling/Transformer/Transformer.cpp; clang/tools/amdgpu-arch/AMDGPUArch.cpp; clang/tools/apinotes-test/APINotesTest.cpp; clang/tools/clang-format/ClangFormat.cpp; clang/tools/clang-fuzzer/ClangFuzzer.cpp; clang/tools/clang-fuzzer/DummyClangFuzzer.cpp; clang/tools/clang-fuzzer/ExampleClangLLVMProtoFuzzer.cpp; clang/tools/clang-fuzzer/ExampleClangLoopProtoFuzzer.cpp; clang/tools/clang-fuzzer/handle-llvm/handle_llvm.h; clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp; clang/tools/clang-linker-wrapper/OffloadWrapper.cpp; clang/tools/clang-pseudo/ClangPseudo.cpp; clang/tools/clang-refactor/ClangRefactor.cpp; clang/tools/clang-refactor/TestSupport.cpp; clang/tools/clang-refactor/TestSupport.h; clang/tools/clang-refactor/ToolRefactoringResultConsumer.h; clang/tools/clang-rename/ClangRename.cpp; clang/tools/clang-repl/ClangRepl.cpp; clang/tools/clang-scan-deps/ClangScanDeps.cpp; clang/tools/clang-shlib/clang-shlib.cpp; clang/tools/driver/cc1gen_reproducer_main.cpp; clang/tools/libclang/CIndex.cpp; clang/tools/libclang/CIndexUSRs.cpp; clang/tools/libclang/CursorVisitor.h; clang/tools/libclang/CXCursor.cpp; clang/tools/libclang/CXCursor.h; clang/tools/scan-build-py/tests/functional/src/include/clean-one.h; clang/unittests/Analysis/CFGBuildResult.h; clang/unittests/Analysis/MacroExpansionContextTest.cpp; clang/unittests/Analysis/FlowSensitive/DataflowAnalysisContextTest.cpp; clang/unittests/Analysis/FlowSensitive/DataflowEnvironmentTest.cpp; clang/unittests/Analysis/FlowSensitive/MapLatticeTest.cpp; clang/unittests/Analysis/FlowSensitive/MatchSwitchTest.cpp; clang/uni,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:28029,Modifiability,refactor,refactor,28029,g/Syntax/Pseudo/LRGraph.cpp; clang/lib/Tooling/Syntax/Pseudo/LRTable.cpp; clang/lib/Tooling/Syntax/Pseudo/LRTableBuild.cpp; clang/lib/Tooling/Syntax/Pseudo/Preprocess.cpp; clang/lib/Tooling/Syntax/Pseudo/Token.cpp; clang/lib/Tooling/Transformer/Parsing.cpp; clang/lib/Tooling/Transformer/SourceCodeBuilders.cpp; clang/lib/Tooling/Transformer/Stencil.cpp; clang/lib/Tooling/Transformer/Transformer.cpp; clang/tools/amdgpu-arch/AMDGPUArch.cpp; clang/tools/apinotes-test/APINotesTest.cpp; clang/tools/clang-format/ClangFormat.cpp; clang/tools/clang-fuzzer/ClangFuzzer.cpp; clang/tools/clang-fuzzer/DummyClangFuzzer.cpp; clang/tools/clang-fuzzer/ExampleClangLLVMProtoFuzzer.cpp; clang/tools/clang-fuzzer/ExampleClangLoopProtoFuzzer.cpp; clang/tools/clang-fuzzer/handle-llvm/handle_llvm.h; clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp; clang/tools/clang-linker-wrapper/OffloadWrapper.cpp; clang/tools/clang-pseudo/ClangPseudo.cpp; clang/tools/clang-refactor/ClangRefactor.cpp; clang/tools/clang-refactor/TestSupport.cpp; clang/tools/clang-refactor/TestSupport.h; clang/tools/clang-refactor/ToolRefactoringResultConsumer.h; clang/tools/clang-rename/ClangRename.cpp; clang/tools/clang-repl/ClangRepl.cpp; clang/tools/clang-scan-deps/ClangScanDeps.cpp; clang/tools/clang-shlib/clang-shlib.cpp; clang/tools/driver/cc1gen_reproducer_main.cpp; clang/tools/libclang/CIndex.cpp; clang/tools/libclang/CIndexUSRs.cpp; clang/tools/libclang/CursorVisitor.h; clang/tools/libclang/CXCursor.cpp; clang/tools/libclang/CXCursor.h; clang/tools/scan-build-py/tests/functional/src/include/clean-one.h; clang/unittests/Analysis/CFGBuildResult.h; clang/unittests/Analysis/MacroExpansionContextTest.cpp; clang/unittests/Analysis/FlowSensitive/DataflowAnalysisContextTest.cpp; clang/unittests/Analysis/FlowSensitive/DataflowEnvironmentTest.cpp; clang/unittests/Analysis/FlowSensitive/MapLatticeTest.cpp; clang/unittests/Analysis/FlowSensitive/MatchSwitchTest.cpp; clang/unittests/Analysis/FlowSensitive/MultiVarConstan,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:28073,Modifiability,refactor,refactor,28073,ng/Syntax/Pseudo/LRTable.cpp; clang/lib/Tooling/Syntax/Pseudo/LRTableBuild.cpp; clang/lib/Tooling/Syntax/Pseudo/Preprocess.cpp; clang/lib/Tooling/Syntax/Pseudo/Token.cpp; clang/lib/Tooling/Transformer/Parsing.cpp; clang/lib/Tooling/Transformer/SourceCodeBuilders.cpp; clang/lib/Tooling/Transformer/Stencil.cpp; clang/lib/Tooling/Transformer/Transformer.cpp; clang/tools/amdgpu-arch/AMDGPUArch.cpp; clang/tools/apinotes-test/APINotesTest.cpp; clang/tools/clang-format/ClangFormat.cpp; clang/tools/clang-fuzzer/ClangFuzzer.cpp; clang/tools/clang-fuzzer/DummyClangFuzzer.cpp; clang/tools/clang-fuzzer/ExampleClangLLVMProtoFuzzer.cpp; clang/tools/clang-fuzzer/ExampleClangLoopProtoFuzzer.cpp; clang/tools/clang-fuzzer/handle-llvm/handle_llvm.h; clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp; clang/tools/clang-linker-wrapper/OffloadWrapper.cpp; clang/tools/clang-pseudo/ClangPseudo.cpp; clang/tools/clang-refactor/ClangRefactor.cpp; clang/tools/clang-refactor/TestSupport.cpp; clang/tools/clang-refactor/TestSupport.h; clang/tools/clang-refactor/ToolRefactoringResultConsumer.h; clang/tools/clang-rename/ClangRename.cpp; clang/tools/clang-repl/ClangRepl.cpp; clang/tools/clang-scan-deps/ClangScanDeps.cpp; clang/tools/clang-shlib/clang-shlib.cpp; clang/tools/driver/cc1gen_reproducer_main.cpp; clang/tools/libclang/CIndex.cpp; clang/tools/libclang/CIndexUSRs.cpp; clang/tools/libclang/CursorVisitor.h; clang/tools/libclang/CXCursor.cpp; clang/tools/libclang/CXCursor.h; clang/tools/scan-build-py/tests/functional/src/include/clean-one.h; clang/unittests/Analysis/CFGBuildResult.h; clang/unittests/Analysis/MacroExpansionContextTest.cpp; clang/unittests/Analysis/FlowSensitive/DataflowAnalysisContextTest.cpp; clang/unittests/Analysis/FlowSensitive/DataflowEnvironmentTest.cpp; clang/unittests/Analysis/FlowSensitive/MapLatticeTest.cpp; clang/unittests/Analysis/FlowSensitive/MatchSwitchTest.cpp; clang/unittests/Analysis/FlowSensitive/MultiVarConstantPropagationTest.cpp; clang/unittests/Analys,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:28115,Modifiability,refactor,refactor,28115,ax/Pseudo/LRTableBuild.cpp; clang/lib/Tooling/Syntax/Pseudo/Preprocess.cpp; clang/lib/Tooling/Syntax/Pseudo/Token.cpp; clang/lib/Tooling/Transformer/Parsing.cpp; clang/lib/Tooling/Transformer/SourceCodeBuilders.cpp; clang/lib/Tooling/Transformer/Stencil.cpp; clang/lib/Tooling/Transformer/Transformer.cpp; clang/tools/amdgpu-arch/AMDGPUArch.cpp; clang/tools/apinotes-test/APINotesTest.cpp; clang/tools/clang-format/ClangFormat.cpp; clang/tools/clang-fuzzer/ClangFuzzer.cpp; clang/tools/clang-fuzzer/DummyClangFuzzer.cpp; clang/tools/clang-fuzzer/ExampleClangLLVMProtoFuzzer.cpp; clang/tools/clang-fuzzer/ExampleClangLoopProtoFuzzer.cpp; clang/tools/clang-fuzzer/handle-llvm/handle_llvm.h; clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp; clang/tools/clang-linker-wrapper/OffloadWrapper.cpp; clang/tools/clang-pseudo/ClangPseudo.cpp; clang/tools/clang-refactor/ClangRefactor.cpp; clang/tools/clang-refactor/TestSupport.cpp; clang/tools/clang-refactor/TestSupport.h; clang/tools/clang-refactor/ToolRefactoringResultConsumer.h; clang/tools/clang-rename/ClangRename.cpp; clang/tools/clang-repl/ClangRepl.cpp; clang/tools/clang-scan-deps/ClangScanDeps.cpp; clang/tools/clang-shlib/clang-shlib.cpp; clang/tools/driver/cc1gen_reproducer_main.cpp; clang/tools/libclang/CIndex.cpp; clang/tools/libclang/CIndexUSRs.cpp; clang/tools/libclang/CursorVisitor.h; clang/tools/libclang/CXCursor.cpp; clang/tools/libclang/CXCursor.h; clang/tools/scan-build-py/tests/functional/src/include/clean-one.h; clang/unittests/Analysis/CFGBuildResult.h; clang/unittests/Analysis/MacroExpansionContextTest.cpp; clang/unittests/Analysis/FlowSensitive/DataflowAnalysisContextTest.cpp; clang/unittests/Analysis/FlowSensitive/DataflowEnvironmentTest.cpp; clang/unittests/Analysis/FlowSensitive/MapLatticeTest.cpp; clang/unittests/Analysis/FlowSensitive/MatchSwitchTest.cpp; clang/unittests/Analysis/FlowSensitive/MultiVarConstantPropagationTest.cpp; clang/unittests/Analysis/FlowSensitive/SingleVarConstantPropagationTest.cp,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:37034,Modifiability,plugin,plugin,37034,ra/clang-include-fixer/find-all-symbols/FindAllMacros.cpp; clang-tools-extra/clang-include-fixer/find-all-symbols/FindAllMacros.h; clang-tools-extra/clang-include-fixer/find-all-symbols/FindAllSymbols.h; clang-tools-extra/clang-include-fixer/find-all-symbols/FindAllSymbolsAction.h; clang-tools-extra/clang-include-fixer/find-all-symbols/HeaderMapCollector.cpp; clang-tools-extra/clang-include-fixer/find-all-symbols/HeaderMapCollector.h; clang-tools-extra/clang-include-fixer/find-all-symbols/PathConfig.cpp; clang-tools-extra/clang-include-fixer/find-all-symbols/PathConfig.h; clang-tools-extra/clang-include-fixer/find-all-symbols/PragmaCommentHandler.cpp; clang-tools-extra/clang-include-fixer/find-all-symbols/PragmaCommentHandler.h; clang-tools-extra/clang-include-fixer/find-all-symbols/STLPostfixHeaderMap.cpp; clang-tools-extra/clang-include-fixer/find-all-symbols/STLPostfixHeaderMap.h; clang-tools-extra/clang-include-fixer/find-all-symbols/SymbolReporter.h; clang-tools-extra/clang-include-fixer/plugin/IncludeFixerPlugin.cpp; clang-tools-extra/clang-move/HelperDeclRefGraph.h; clang-tools-extra/clang-move/tool/ClangMove.cpp; clang-tools-extra/clang-query/Query.cpp; clang-tools-extra/clang-query/Query.h; clang-tools-extra/clang-query/QueryParser.h; clang-tools-extra/clang-query/QuerySession.h; clang-tools-extra/clang-reorder-fields/ReorderFieldsAction.h; clang-tools-extra/clang-tidy/ClangTidy.h; clang-tools-extra/clang-tidy/ClangTidyDiagnosticConsumer.cpp; clang-tools-extra/clang-tidy/ClangTidyDiagnosticConsumer.h; clang-tools-extra/clang-tidy/ClangTidyForceLinker.h; clang-tools-extra/clang-tidy/ClangTidyModule.cpp; clang-tools-extra/clang-tidy/ClangTidyModule.h; clang-tools-extra/clang-tidy/ClangTidyModuleRegistry.h; clang-tools-extra/clang-tidy/ClangTidyOptions.h; clang-tools-extra/clang-tidy/ClangTidyProfiling.cpp; clang-tools-extra/clang-tidy/ClangTidyProfiling.h; clang-tools-extra/clang-tidy/GlobList.cpp; clang-tools-extra/clang-tidy/GlobList.h; clang-tools-extra/cla,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:66385,Modifiability,plugin,plugin,66385,ang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.cpp; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.h; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.cpp; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.h; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.cpp; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.h; clang-tools-extra/clang-tidy/performance/PerformanceTidyModule.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.h; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.cpp; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.h; clang-tools-extra/clang-tidy/performance/UnnecessaryCopyInitialization.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.h; clang-tools-extra/clang-tidy/plugin/ClangTidyPlugin.cpp; clang-tools-extra/clang-tidy/portability/PortabilityTidyModule.cpp; clang-tools-extra/clang-tidy/portability/RestrictSystemIncludesCheck.cpp; clang-tools-extra/clang-tidy/portability/SIMDIntrinsicsCheck.cpp; clang-tools-extra/clang-tidy/readability/AvoidConstParamsInDecls.h; clang-tools-extra/clang-tidy/readability/BracesAroundStatementsCheck.cpp; clang-tools-extra/clang-tidy/readability/BracesAroundStatementsCheck.h; clang-tools-extra/clang-tidy/readability/ConstReturnTypeCheck.cpp; clang-tools-extra/clang-tidy/readability/ContainerContainsCheck.cpp; clang-tools-extra/clang-tidy/readability/ContainerContainsCheck.h; clang-tools-extra/clang-tidy/readability/ContainerDataPointerCheck.cpp; clang-tools-extra/clang-tidy/readability/ContainerDataPointerCheck.h; clang-tools-extra/clang-tidy/readability/ContainerSizeEmptyCheck.h; clang-tools-extra/clang-tidy/readability/ConvertMemberFunctionsToStatic.cpp; clang-tools-extra/clang-tidy/readability/ConvertMemberFu,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:66442,Modifiability,portab,portability,66442,p; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.h; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.cpp; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.h; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.cpp; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.h; clang-tools-extra/clang-tidy/performance/PerformanceTidyModule.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.h; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.cpp; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.h; clang-tools-extra/clang-tidy/performance/UnnecessaryCopyInitialization.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.h; clang-tools-extra/clang-tidy/plugin/ClangTidyPlugin.cpp; clang-tools-extra/clang-tidy/portability/PortabilityTidyModule.cpp; clang-tools-extra/clang-tidy/portability/RestrictSystemIncludesCheck.cpp; clang-tools-extra/clang-tidy/portability/SIMDIntrinsicsCheck.cpp; clang-tools-extra/clang-tidy/readability/AvoidConstParamsInDecls.h; clang-tools-extra/clang-tidy/readability/BracesAroundStatementsCheck.cpp; clang-tools-extra/clang-tidy/readability/BracesAroundStatementsCheck.h; clang-tools-extra/clang-tidy/readability/ConstReturnTypeCheck.cpp; clang-tools-extra/clang-tidy/readability/ContainerContainsCheck.cpp; clang-tools-extra/clang-tidy/readability/ContainerContainsCheck.h; clang-tools-extra/clang-tidy/readability/ContainerDataPointerCheck.cpp; clang-tools-extra/clang-tidy/readability/ContainerDataPointerCheck.h; clang-tools-extra/clang-tidy/readability/ContainerSizeEmptyCheck.h; clang-tools-extra/clang-tidy/readability/ConvertMemberFunctionsToStatic.cpp; clang-tools-extra/clang-tidy/readability/ConvertMemberFunctionsToStatic.h; clang-tools-extra/clang-tidy/readability/D,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:66510,Modifiability,portab,portability,66510,ng-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.cpp; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.h; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.cpp; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.h; clang-tools-extra/clang-tidy/performance/PerformanceTidyModule.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.h; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.cpp; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.h; clang-tools-extra/clang-tidy/performance/UnnecessaryCopyInitialization.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.h; clang-tools-extra/clang-tidy/plugin/ClangTidyPlugin.cpp; clang-tools-extra/clang-tidy/portability/PortabilityTidyModule.cpp; clang-tools-extra/clang-tidy/portability/RestrictSystemIncludesCheck.cpp; clang-tools-extra/clang-tidy/portability/SIMDIntrinsicsCheck.cpp; clang-tools-extra/clang-tidy/readability/AvoidConstParamsInDecls.h; clang-tools-extra/clang-tidy/readability/BracesAroundStatementsCheck.cpp; clang-tools-extra/clang-tidy/readability/BracesAroundStatementsCheck.h; clang-tools-extra/clang-tidy/readability/ConstReturnTypeCheck.cpp; clang-tools-extra/clang-tidy/readability/ContainerContainsCheck.cpp; clang-tools-extra/clang-tidy/readability/ContainerContainsCheck.h; clang-tools-extra/clang-tidy/readability/ContainerDataPointerCheck.cpp; clang-tools-extra/clang-tidy/readability/ContainerDataPointerCheck.h; clang-tools-extra/clang-tidy/readability/ContainerSizeEmptyCheck.h; clang-tools-extra/clang-tidy/readability/ConvertMemberFunctionsToStatic.cpp; clang-tools-extra/clang-tidy/readability/ConvertMemberFunctionsToStatic.h; clang-tools-extra/clang-tidy/readability/DeleteNullPointerCheck.cpp; clang-tools-extra/clang-tidy/readability/Del,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:66584,Modifiability,portab,portability,66584,; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.h; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.cpp; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.h; clang-tools-extra/clang-tidy/performance/PerformanceTidyModule.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.h; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.cpp; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.h; clang-tools-extra/clang-tidy/performance/UnnecessaryCopyInitialization.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.h; clang-tools-extra/clang-tidy/plugin/ClangTidyPlugin.cpp; clang-tools-extra/clang-tidy/portability/PortabilityTidyModule.cpp; clang-tools-extra/clang-tidy/portability/RestrictSystemIncludesCheck.cpp; clang-tools-extra/clang-tidy/portability/SIMDIntrinsicsCheck.cpp; clang-tools-extra/clang-tidy/readability/AvoidConstParamsInDecls.h; clang-tools-extra/clang-tidy/readability/BracesAroundStatementsCheck.cpp; clang-tools-extra/clang-tidy/readability/BracesAroundStatementsCheck.h; clang-tools-extra/clang-tidy/readability/ConstReturnTypeCheck.cpp; clang-tools-extra/clang-tidy/readability/ContainerContainsCheck.cpp; clang-tools-extra/clang-tidy/readability/ContainerContainsCheck.h; clang-tools-extra/clang-tidy/readability/ContainerDataPointerCheck.cpp; clang-tools-extra/clang-tidy/readability/ContainerDataPointerCheck.h; clang-tools-extra/clang-tidy/readability/ContainerSizeEmptyCheck.h; clang-tools-extra/clang-tidy/readability/ConvertMemberFunctionsToStatic.cpp; clang-tools-extra/clang-tidy/readability/ConvertMemberFunctionsToStatic.h; clang-tools-extra/clang-tidy/readability/DeleteNullPointerCheck.cpp; clang-tools-extra/clang-tidy/readability/DeleteNullPointerCheck.h; clang-tools-extra/clang-tidy/readability/Duplic,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:80025,Modifiability,refactor,refactor,80025,SymbolOrigin.cpp; clang-tools-extra/clangd/index/SymbolOrigin.h; clang-tools-extra/clangd/index/YAMLSerialization.cpp; clang-tools-extra/clangd/index/dex/Iterator.cpp; clang-tools-extra/clangd/index/dex/Iterator.h; clang-tools-extra/clangd/index/dex/PostingList.cpp; clang-tools-extra/clangd/index/dex/PostingList.h; clang-tools-extra/clangd/index/dex/Token.h; clang-tools-extra/clangd/index/dex/Trigram.cpp; clang-tools-extra/clangd/index/dex/Trigram.h; clang-tools-extra/clangd/index/dex/dexp/Dexp.cpp; clang-tools-extra/clangd/index/remote/Client.cpp; clang-tools-extra/clangd/index/remote/Client.h; clang-tools-extra/clangd/index/remote/marshalling/Marshalling.cpp; clang-tools-extra/clangd/index/remote/marshalling/Marshalling.h; clang-tools-extra/clangd/index/remote/monitor/Monitor.cpp; clang-tools-extra/clangd/index/remote/server/Server.cpp; clang-tools-extra/clangd/index/remote/unimplemented/UnimplementedClient.cpp; clang-tools-extra/clangd/indexer/IndexerMain.cpp; clang-tools-extra/clangd/refactor/InsertionPoint.cpp; clang-tools-extra/clangd/refactor/InsertionPoint.h; clang-tools-extra/clangd/refactor/Rename.h; clang-tools-extra/clangd/refactor/Tweak.cpp; clang-tools-extra/clangd/refactor/Tweak.h; clang-tools-extra/clangd/refactor/tweaks/AddUsing.cpp; clang-tools-extra/clangd/refactor/tweaks/AnnotateHighlightings.cpp; clang-tools-extra/clangd/refactor/tweaks/DefineInline.cpp; clang-tools-extra/clangd/refactor/tweaks/DefineOutline.cpp; clang-tools-extra/clangd/refactor/tweaks/DumpAST.cpp; clang-tools-extra/clangd/refactor/tweaks/ExpandMacro.cpp; clang-tools-extra/clangd/refactor/tweaks/ExtractFunction.cpp; clang-tools-extra/clangd/refactor/tweaks/ObjCLocalizeStringLiteral.cpp; clang-tools-extra/clangd/refactor/tweaks/RemoveUsingNamespace.cpp; clang-tools-extra/clangd/refactor/tweaks/SwapIfBranches.cpp; clang-tools-extra/clangd/support/Cancellation.cpp; clang-tools-extra/clangd/support/Cancellation.h; clang-tools-extra/clangd/support/Context.cpp; clang-tools-extra/clan,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:80079,Modifiability,refactor,refactor,80079,lOrigin.h; clang-tools-extra/clangd/index/YAMLSerialization.cpp; clang-tools-extra/clangd/index/dex/Iterator.cpp; clang-tools-extra/clangd/index/dex/Iterator.h; clang-tools-extra/clangd/index/dex/PostingList.cpp; clang-tools-extra/clangd/index/dex/PostingList.h; clang-tools-extra/clangd/index/dex/Token.h; clang-tools-extra/clangd/index/dex/Trigram.cpp; clang-tools-extra/clangd/index/dex/Trigram.h; clang-tools-extra/clangd/index/dex/dexp/Dexp.cpp; clang-tools-extra/clangd/index/remote/Client.cpp; clang-tools-extra/clangd/index/remote/Client.h; clang-tools-extra/clangd/index/remote/marshalling/Marshalling.cpp; clang-tools-extra/clangd/index/remote/marshalling/Marshalling.h; clang-tools-extra/clangd/index/remote/monitor/Monitor.cpp; clang-tools-extra/clangd/index/remote/server/Server.cpp; clang-tools-extra/clangd/index/remote/unimplemented/UnimplementedClient.cpp; clang-tools-extra/clangd/indexer/IndexerMain.cpp; clang-tools-extra/clangd/refactor/InsertionPoint.cpp; clang-tools-extra/clangd/refactor/InsertionPoint.h; clang-tools-extra/clangd/refactor/Rename.h; clang-tools-extra/clangd/refactor/Tweak.cpp; clang-tools-extra/clangd/refactor/Tweak.h; clang-tools-extra/clangd/refactor/tweaks/AddUsing.cpp; clang-tools-extra/clangd/refactor/tweaks/AnnotateHighlightings.cpp; clang-tools-extra/clangd/refactor/tweaks/DefineInline.cpp; clang-tools-extra/clangd/refactor/tweaks/DefineOutline.cpp; clang-tools-extra/clangd/refactor/tweaks/DumpAST.cpp; clang-tools-extra/clangd/refactor/tweaks/ExpandMacro.cpp; clang-tools-extra/clangd/refactor/tweaks/ExtractFunction.cpp; clang-tools-extra/clangd/refactor/tweaks/ObjCLocalizeStringLiteral.cpp; clang-tools-extra/clangd/refactor/tweaks/RemoveUsingNamespace.cpp; clang-tools-extra/clangd/refactor/tweaks/SwapIfBranches.cpp; clang-tools-extra/clangd/support/Cancellation.cpp; clang-tools-extra/clangd/support/Cancellation.h; clang-tools-extra/clangd/support/Context.cpp; clang-tools-extra/clangd/support/Context.h; clang-tools-extra/clangd/support,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:80131,Modifiability,refactor,refactor,80131,ialization.cpp; clang-tools-extra/clangd/index/dex/Iterator.cpp; clang-tools-extra/clangd/index/dex/Iterator.h; clang-tools-extra/clangd/index/dex/PostingList.cpp; clang-tools-extra/clangd/index/dex/PostingList.h; clang-tools-extra/clangd/index/dex/Token.h; clang-tools-extra/clangd/index/dex/Trigram.cpp; clang-tools-extra/clangd/index/dex/Trigram.h; clang-tools-extra/clangd/index/dex/dexp/Dexp.cpp; clang-tools-extra/clangd/index/remote/Client.cpp; clang-tools-extra/clangd/index/remote/Client.h; clang-tools-extra/clangd/index/remote/marshalling/Marshalling.cpp; clang-tools-extra/clangd/index/remote/marshalling/Marshalling.h; clang-tools-extra/clangd/index/remote/monitor/Monitor.cpp; clang-tools-extra/clangd/index/remote/server/Server.cpp; clang-tools-extra/clangd/index/remote/unimplemented/UnimplementedClient.cpp; clang-tools-extra/clangd/indexer/IndexerMain.cpp; clang-tools-extra/clangd/refactor/InsertionPoint.cpp; clang-tools-extra/clangd/refactor/InsertionPoint.h; clang-tools-extra/clangd/refactor/Rename.h; clang-tools-extra/clangd/refactor/Tweak.cpp; clang-tools-extra/clangd/refactor/Tweak.h; clang-tools-extra/clangd/refactor/tweaks/AddUsing.cpp; clang-tools-extra/clangd/refactor/tweaks/AnnotateHighlightings.cpp; clang-tools-extra/clangd/refactor/tweaks/DefineInline.cpp; clang-tools-extra/clangd/refactor/tweaks/DefineOutline.cpp; clang-tools-extra/clangd/refactor/tweaks/DumpAST.cpp; clang-tools-extra/clangd/refactor/tweaks/ExpandMacro.cpp; clang-tools-extra/clangd/refactor/tweaks/ExtractFunction.cpp; clang-tools-extra/clangd/refactor/tweaks/ObjCLocalizeStringLiteral.cpp; clang-tools-extra/clangd/refactor/tweaks/RemoveUsingNamespace.cpp; clang-tools-extra/clangd/refactor/tweaks/SwapIfBranches.cpp; clang-tools-extra/clangd/support/Cancellation.cpp; clang-tools-extra/clangd/support/Cancellation.h; clang-tools-extra/clangd/support/Context.cpp; clang-tools-extra/clangd/support/Context.h; clang-tools-extra/clangd/support/FileCache.cpp; clang-tools-extra/clangd/support/,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:80175,Modifiability,refactor,refactor,80175,dex/dex/Iterator.cpp; clang-tools-extra/clangd/index/dex/Iterator.h; clang-tools-extra/clangd/index/dex/PostingList.cpp; clang-tools-extra/clangd/index/dex/PostingList.h; clang-tools-extra/clangd/index/dex/Token.h; clang-tools-extra/clangd/index/dex/Trigram.cpp; clang-tools-extra/clangd/index/dex/Trigram.h; clang-tools-extra/clangd/index/dex/dexp/Dexp.cpp; clang-tools-extra/clangd/index/remote/Client.cpp; clang-tools-extra/clangd/index/remote/Client.h; clang-tools-extra/clangd/index/remote/marshalling/Marshalling.cpp; clang-tools-extra/clangd/index/remote/marshalling/Marshalling.h; clang-tools-extra/clangd/index/remote/monitor/Monitor.cpp; clang-tools-extra/clangd/index/remote/server/Server.cpp; clang-tools-extra/clangd/index/remote/unimplemented/UnimplementedClient.cpp; clang-tools-extra/clangd/indexer/IndexerMain.cpp; clang-tools-extra/clangd/refactor/InsertionPoint.cpp; clang-tools-extra/clangd/refactor/InsertionPoint.h; clang-tools-extra/clangd/refactor/Rename.h; clang-tools-extra/clangd/refactor/Tweak.cpp; clang-tools-extra/clangd/refactor/Tweak.h; clang-tools-extra/clangd/refactor/tweaks/AddUsing.cpp; clang-tools-extra/clangd/refactor/tweaks/AnnotateHighlightings.cpp; clang-tools-extra/clangd/refactor/tweaks/DefineInline.cpp; clang-tools-extra/clangd/refactor/tweaks/DefineOutline.cpp; clang-tools-extra/clangd/refactor/tweaks/DumpAST.cpp; clang-tools-extra/clangd/refactor/tweaks/ExpandMacro.cpp; clang-tools-extra/clangd/refactor/tweaks/ExtractFunction.cpp; clang-tools-extra/clangd/refactor/tweaks/ObjCLocalizeStringLiteral.cpp; clang-tools-extra/clangd/refactor/tweaks/RemoveUsingNamespace.cpp; clang-tools-extra/clangd/refactor/tweaks/SwapIfBranches.cpp; clang-tools-extra/clangd/support/Cancellation.cpp; clang-tools-extra/clangd/support/Cancellation.h; clang-tools-extra/clangd/support/Context.cpp; clang-tools-extra/clangd/support/Context.h; clang-tools-extra/clangd/support/FileCache.cpp; clang-tools-extra/clangd/support/FileCache.h; clang-tools-extra/clangd/suppor,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:80220,Modifiability,refactor,refactor,80220,gd/index/dex/Iterator.h; clang-tools-extra/clangd/index/dex/PostingList.cpp; clang-tools-extra/clangd/index/dex/PostingList.h; clang-tools-extra/clangd/index/dex/Token.h; clang-tools-extra/clangd/index/dex/Trigram.cpp; clang-tools-extra/clangd/index/dex/Trigram.h; clang-tools-extra/clangd/index/dex/dexp/Dexp.cpp; clang-tools-extra/clangd/index/remote/Client.cpp; clang-tools-extra/clangd/index/remote/Client.h; clang-tools-extra/clangd/index/remote/marshalling/Marshalling.cpp; clang-tools-extra/clangd/index/remote/marshalling/Marshalling.h; clang-tools-extra/clangd/index/remote/monitor/Monitor.cpp; clang-tools-extra/clangd/index/remote/server/Server.cpp; clang-tools-extra/clangd/index/remote/unimplemented/UnimplementedClient.cpp; clang-tools-extra/clangd/indexer/IndexerMain.cpp; clang-tools-extra/clangd/refactor/InsertionPoint.cpp; clang-tools-extra/clangd/refactor/InsertionPoint.h; clang-tools-extra/clangd/refactor/Rename.h; clang-tools-extra/clangd/refactor/Tweak.cpp; clang-tools-extra/clangd/refactor/Tweak.h; clang-tools-extra/clangd/refactor/tweaks/AddUsing.cpp; clang-tools-extra/clangd/refactor/tweaks/AnnotateHighlightings.cpp; clang-tools-extra/clangd/refactor/tweaks/DefineInline.cpp; clang-tools-extra/clangd/refactor/tweaks/DefineOutline.cpp; clang-tools-extra/clangd/refactor/tweaks/DumpAST.cpp; clang-tools-extra/clangd/refactor/tweaks/ExpandMacro.cpp; clang-tools-extra/clangd/refactor/tweaks/ExtractFunction.cpp; clang-tools-extra/clangd/refactor/tweaks/ObjCLocalizeStringLiteral.cpp; clang-tools-extra/clangd/refactor/tweaks/RemoveUsingNamespace.cpp; clang-tools-extra/clangd/refactor/tweaks/SwapIfBranches.cpp; clang-tools-extra/clangd/support/Cancellation.cpp; clang-tools-extra/clangd/support/Cancellation.h; clang-tools-extra/clangd/support/Context.cpp; clang-tools-extra/clangd/support/Context.h; clang-tools-extra/clangd/support/FileCache.cpp; clang-tools-extra/clangd/support/FileCache.h; clang-tools-extra/clangd/support/Function.h; clang-tools-extra/clangd/suppo,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:80263,Modifiability,refactor,refactor,80263,/index/dex/PostingList.cpp; clang-tools-extra/clangd/index/dex/PostingList.h; clang-tools-extra/clangd/index/dex/Token.h; clang-tools-extra/clangd/index/dex/Trigram.cpp; clang-tools-extra/clangd/index/dex/Trigram.h; clang-tools-extra/clangd/index/dex/dexp/Dexp.cpp; clang-tools-extra/clangd/index/remote/Client.cpp; clang-tools-extra/clangd/index/remote/Client.h; clang-tools-extra/clangd/index/remote/marshalling/Marshalling.cpp; clang-tools-extra/clangd/index/remote/marshalling/Marshalling.h; clang-tools-extra/clangd/index/remote/monitor/Monitor.cpp; clang-tools-extra/clangd/index/remote/server/Server.cpp; clang-tools-extra/clangd/index/remote/unimplemented/UnimplementedClient.cpp; clang-tools-extra/clangd/indexer/IndexerMain.cpp; clang-tools-extra/clangd/refactor/InsertionPoint.cpp; clang-tools-extra/clangd/refactor/InsertionPoint.h; clang-tools-extra/clangd/refactor/Rename.h; clang-tools-extra/clangd/refactor/Tweak.cpp; clang-tools-extra/clangd/refactor/Tweak.h; clang-tools-extra/clangd/refactor/tweaks/AddUsing.cpp; clang-tools-extra/clangd/refactor/tweaks/AnnotateHighlightings.cpp; clang-tools-extra/clangd/refactor/tweaks/DefineInline.cpp; clang-tools-extra/clangd/refactor/tweaks/DefineOutline.cpp; clang-tools-extra/clangd/refactor/tweaks/DumpAST.cpp; clang-tools-extra/clangd/refactor/tweaks/ExpandMacro.cpp; clang-tools-extra/clangd/refactor/tweaks/ExtractFunction.cpp; clang-tools-extra/clangd/refactor/tweaks/ObjCLocalizeStringLiteral.cpp; clang-tools-extra/clangd/refactor/tweaks/RemoveUsingNamespace.cpp; clang-tools-extra/clangd/refactor/tweaks/SwapIfBranches.cpp; clang-tools-extra/clangd/support/Cancellation.cpp; clang-tools-extra/clangd/support/Cancellation.h; clang-tools-extra/clangd/support/Context.cpp; clang-tools-extra/clangd/support/Context.h; clang-tools-extra/clangd/support/FileCache.cpp; clang-tools-extra/clangd/support/FileCache.h; clang-tools-extra/clangd/support/Function.h; clang-tools-extra/clangd/support/Logger.cpp; clang-tools-extra/clangd/support/M,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:80318,Modifiability,refactor,refactor,80318,x/PostingList.h; clang-tools-extra/clangd/index/dex/Token.h; clang-tools-extra/clangd/index/dex/Trigram.cpp; clang-tools-extra/clangd/index/dex/Trigram.h; clang-tools-extra/clangd/index/dex/dexp/Dexp.cpp; clang-tools-extra/clangd/index/remote/Client.cpp; clang-tools-extra/clangd/index/remote/Client.h; clang-tools-extra/clangd/index/remote/marshalling/Marshalling.cpp; clang-tools-extra/clangd/index/remote/marshalling/Marshalling.h; clang-tools-extra/clangd/index/remote/monitor/Monitor.cpp; clang-tools-extra/clangd/index/remote/server/Server.cpp; clang-tools-extra/clangd/index/remote/unimplemented/UnimplementedClient.cpp; clang-tools-extra/clangd/indexer/IndexerMain.cpp; clang-tools-extra/clangd/refactor/InsertionPoint.cpp; clang-tools-extra/clangd/refactor/InsertionPoint.h; clang-tools-extra/clangd/refactor/Rename.h; clang-tools-extra/clangd/refactor/Tweak.cpp; clang-tools-extra/clangd/refactor/Tweak.h; clang-tools-extra/clangd/refactor/tweaks/AddUsing.cpp; clang-tools-extra/clangd/refactor/tweaks/AnnotateHighlightings.cpp; clang-tools-extra/clangd/refactor/tweaks/DefineInline.cpp; clang-tools-extra/clangd/refactor/tweaks/DefineOutline.cpp; clang-tools-extra/clangd/refactor/tweaks/DumpAST.cpp; clang-tools-extra/clangd/refactor/tweaks/ExpandMacro.cpp; clang-tools-extra/clangd/refactor/tweaks/ExtractFunction.cpp; clang-tools-extra/clangd/refactor/tweaks/ObjCLocalizeStringLiteral.cpp; clang-tools-extra/clangd/refactor/tweaks/RemoveUsingNamespace.cpp; clang-tools-extra/clangd/refactor/tweaks/SwapIfBranches.cpp; clang-tools-extra/clangd/support/Cancellation.cpp; clang-tools-extra/clangd/support/Cancellation.h; clang-tools-extra/clangd/support/Context.cpp; clang-tools-extra/clangd/support/Context.h; clang-tools-extra/clangd/support/FileCache.cpp; clang-tools-extra/clangd/support/FileCache.h; clang-tools-extra/clangd/support/Function.h; clang-tools-extra/clangd/support/Logger.cpp; clang-tools-extra/clangd/support/Markup.cpp; clang-tools-extra/clangd/support/Markup.h; clang-,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:80386,Modifiability,refactor,refactor,80386,ang-tools-extra/clangd/index/dex/Trigram.cpp; clang-tools-extra/clangd/index/dex/Trigram.h; clang-tools-extra/clangd/index/dex/dexp/Dexp.cpp; clang-tools-extra/clangd/index/remote/Client.cpp; clang-tools-extra/clangd/index/remote/Client.h; clang-tools-extra/clangd/index/remote/marshalling/Marshalling.cpp; clang-tools-extra/clangd/index/remote/marshalling/Marshalling.h; clang-tools-extra/clangd/index/remote/monitor/Monitor.cpp; clang-tools-extra/clangd/index/remote/server/Server.cpp; clang-tools-extra/clangd/index/remote/unimplemented/UnimplementedClient.cpp; clang-tools-extra/clangd/indexer/IndexerMain.cpp; clang-tools-extra/clangd/refactor/InsertionPoint.cpp; clang-tools-extra/clangd/refactor/InsertionPoint.h; clang-tools-extra/clangd/refactor/Rename.h; clang-tools-extra/clangd/refactor/Tweak.cpp; clang-tools-extra/clangd/refactor/Tweak.h; clang-tools-extra/clangd/refactor/tweaks/AddUsing.cpp; clang-tools-extra/clangd/refactor/tweaks/AnnotateHighlightings.cpp; clang-tools-extra/clangd/refactor/tweaks/DefineInline.cpp; clang-tools-extra/clangd/refactor/tweaks/DefineOutline.cpp; clang-tools-extra/clangd/refactor/tweaks/DumpAST.cpp; clang-tools-extra/clangd/refactor/tweaks/ExpandMacro.cpp; clang-tools-extra/clangd/refactor/tweaks/ExtractFunction.cpp; clang-tools-extra/clangd/refactor/tweaks/ObjCLocalizeStringLiteral.cpp; clang-tools-extra/clangd/refactor/tweaks/RemoveUsingNamespace.cpp; clang-tools-extra/clangd/refactor/tweaks/SwapIfBranches.cpp; clang-tools-extra/clangd/support/Cancellation.cpp; clang-tools-extra/clangd/support/Cancellation.h; clang-tools-extra/clangd/support/Context.cpp; clang-tools-extra/clangd/support/Context.h; clang-tools-extra/clangd/support/FileCache.cpp; clang-tools-extra/clangd/support/FileCache.h; clang-tools-extra/clangd/support/Function.h; clang-tools-extra/clangd/support/Logger.cpp; clang-tools-extra/clangd/support/Markup.cpp; clang-tools-extra/clangd/support/Markup.h; clang-tools-extra/clangd/support/MemoryTree.cpp; clang-tools-extra/cla,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:80445,Modifiability,refactor,refactor,80445,tra/clangd/index/dex/Trigram.h; clang-tools-extra/clangd/index/dex/dexp/Dexp.cpp; clang-tools-extra/clangd/index/remote/Client.cpp; clang-tools-extra/clangd/index/remote/Client.h; clang-tools-extra/clangd/index/remote/marshalling/Marshalling.cpp; clang-tools-extra/clangd/index/remote/marshalling/Marshalling.h; clang-tools-extra/clangd/index/remote/monitor/Monitor.cpp; clang-tools-extra/clangd/index/remote/server/Server.cpp; clang-tools-extra/clangd/index/remote/unimplemented/UnimplementedClient.cpp; clang-tools-extra/clangd/indexer/IndexerMain.cpp; clang-tools-extra/clangd/refactor/InsertionPoint.cpp; clang-tools-extra/clangd/refactor/InsertionPoint.h; clang-tools-extra/clangd/refactor/Rename.h; clang-tools-extra/clangd/refactor/Tweak.cpp; clang-tools-extra/clangd/refactor/Tweak.h; clang-tools-extra/clangd/refactor/tweaks/AddUsing.cpp; clang-tools-extra/clangd/refactor/tweaks/AnnotateHighlightings.cpp; clang-tools-extra/clangd/refactor/tweaks/DefineInline.cpp; clang-tools-extra/clangd/refactor/tweaks/DefineOutline.cpp; clang-tools-extra/clangd/refactor/tweaks/DumpAST.cpp; clang-tools-extra/clangd/refactor/tweaks/ExpandMacro.cpp; clang-tools-extra/clangd/refactor/tweaks/ExtractFunction.cpp; clang-tools-extra/clangd/refactor/tweaks/ObjCLocalizeStringLiteral.cpp; clang-tools-extra/clangd/refactor/tweaks/RemoveUsingNamespace.cpp; clang-tools-extra/clangd/refactor/tweaks/SwapIfBranches.cpp; clang-tools-extra/clangd/support/Cancellation.cpp; clang-tools-extra/clangd/support/Cancellation.h; clang-tools-extra/clangd/support/Context.cpp; clang-tools-extra/clangd/support/Context.h; clang-tools-extra/clangd/support/FileCache.cpp; clang-tools-extra/clangd/support/FileCache.h; clang-tools-extra/clangd/support/Function.h; clang-tools-extra/clangd/support/Logger.cpp; clang-tools-extra/clangd/support/Markup.cpp; clang-tools-extra/clangd/support/Markup.h; clang-tools-extra/clangd/support/MemoryTree.cpp; clang-tools-extra/clangd/support/MemoryTree.h; clang-tools-extra/clangd/support/,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:80505,Modifiability,refactor,refactor,80505,index/dex/dexp/Dexp.cpp; clang-tools-extra/clangd/index/remote/Client.cpp; clang-tools-extra/clangd/index/remote/Client.h; clang-tools-extra/clangd/index/remote/marshalling/Marshalling.cpp; clang-tools-extra/clangd/index/remote/marshalling/Marshalling.h; clang-tools-extra/clangd/index/remote/monitor/Monitor.cpp; clang-tools-extra/clangd/index/remote/server/Server.cpp; clang-tools-extra/clangd/index/remote/unimplemented/UnimplementedClient.cpp; clang-tools-extra/clangd/indexer/IndexerMain.cpp; clang-tools-extra/clangd/refactor/InsertionPoint.cpp; clang-tools-extra/clangd/refactor/InsertionPoint.h; clang-tools-extra/clangd/refactor/Rename.h; clang-tools-extra/clangd/refactor/Tweak.cpp; clang-tools-extra/clangd/refactor/Tweak.h; clang-tools-extra/clangd/refactor/tweaks/AddUsing.cpp; clang-tools-extra/clangd/refactor/tweaks/AnnotateHighlightings.cpp; clang-tools-extra/clangd/refactor/tweaks/DefineInline.cpp; clang-tools-extra/clangd/refactor/tweaks/DefineOutline.cpp; clang-tools-extra/clangd/refactor/tweaks/DumpAST.cpp; clang-tools-extra/clangd/refactor/tweaks/ExpandMacro.cpp; clang-tools-extra/clangd/refactor/tweaks/ExtractFunction.cpp; clang-tools-extra/clangd/refactor/tweaks/ObjCLocalizeStringLiteral.cpp; clang-tools-extra/clangd/refactor/tweaks/RemoveUsingNamespace.cpp; clang-tools-extra/clangd/refactor/tweaks/SwapIfBranches.cpp; clang-tools-extra/clangd/support/Cancellation.cpp; clang-tools-extra/clangd/support/Cancellation.h; clang-tools-extra/clangd/support/Context.cpp; clang-tools-extra/clangd/support/Context.h; clang-tools-extra/clangd/support/FileCache.cpp; clang-tools-extra/clangd/support/FileCache.h; clang-tools-extra/clangd/support/Function.h; clang-tools-extra/clangd/support/Logger.cpp; clang-tools-extra/clangd/support/Markup.cpp; clang-tools-extra/clangd/support/Markup.h; clang-tools-extra/clangd/support/MemoryTree.cpp; clang-tools-extra/clangd/support/MemoryTree.h; clang-tools-extra/clangd/support/Path.cpp; clang-tools-extra/clangd/support/Path.h; clang-,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:80559,Modifiability,refactor,refactor,80559,remote/Client.cpp; clang-tools-extra/clangd/index/remote/Client.h; clang-tools-extra/clangd/index/remote/marshalling/Marshalling.cpp; clang-tools-extra/clangd/index/remote/marshalling/Marshalling.h; clang-tools-extra/clangd/index/remote/monitor/Monitor.cpp; clang-tools-extra/clangd/index/remote/server/Server.cpp; clang-tools-extra/clangd/index/remote/unimplemented/UnimplementedClient.cpp; clang-tools-extra/clangd/indexer/IndexerMain.cpp; clang-tools-extra/clangd/refactor/InsertionPoint.cpp; clang-tools-extra/clangd/refactor/InsertionPoint.h; clang-tools-extra/clangd/refactor/Rename.h; clang-tools-extra/clangd/refactor/Tweak.cpp; clang-tools-extra/clangd/refactor/Tweak.h; clang-tools-extra/clangd/refactor/tweaks/AddUsing.cpp; clang-tools-extra/clangd/refactor/tweaks/AnnotateHighlightings.cpp; clang-tools-extra/clangd/refactor/tweaks/DefineInline.cpp; clang-tools-extra/clangd/refactor/tweaks/DefineOutline.cpp; clang-tools-extra/clangd/refactor/tweaks/DumpAST.cpp; clang-tools-extra/clangd/refactor/tweaks/ExpandMacro.cpp; clang-tools-extra/clangd/refactor/tweaks/ExtractFunction.cpp; clang-tools-extra/clangd/refactor/tweaks/ObjCLocalizeStringLiteral.cpp; clang-tools-extra/clangd/refactor/tweaks/RemoveUsingNamespace.cpp; clang-tools-extra/clangd/refactor/tweaks/SwapIfBranches.cpp; clang-tools-extra/clangd/support/Cancellation.cpp; clang-tools-extra/clangd/support/Cancellation.h; clang-tools-extra/clangd/support/Context.cpp; clang-tools-extra/clangd/support/Context.h; clang-tools-extra/clangd/support/FileCache.cpp; clang-tools-extra/clangd/support/FileCache.h; clang-tools-extra/clangd/support/Function.h; clang-tools-extra/clangd/support/Logger.cpp; clang-tools-extra/clangd/support/Markup.cpp; clang-tools-extra/clangd/support/Markup.h; clang-tools-extra/clangd/support/MemoryTree.cpp; clang-tools-extra/clangd/support/MemoryTree.h; clang-tools-extra/clangd/support/Path.cpp; clang-tools-extra/clangd/support/Path.h; clang-tools-extra/clangd/support/Shutdown.cpp; clang-tools-ext,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:80617,Modifiability,refactor,refactor,80617,ent.h; clang-tools-extra/clangd/index/remote/marshalling/Marshalling.cpp; clang-tools-extra/clangd/index/remote/marshalling/Marshalling.h; clang-tools-extra/clangd/index/remote/monitor/Monitor.cpp; clang-tools-extra/clangd/index/remote/server/Server.cpp; clang-tools-extra/clangd/index/remote/unimplemented/UnimplementedClient.cpp; clang-tools-extra/clangd/indexer/IndexerMain.cpp; clang-tools-extra/clangd/refactor/InsertionPoint.cpp; clang-tools-extra/clangd/refactor/InsertionPoint.h; clang-tools-extra/clangd/refactor/Rename.h; clang-tools-extra/clangd/refactor/Tweak.cpp; clang-tools-extra/clangd/refactor/Tweak.h; clang-tools-extra/clangd/refactor/tweaks/AddUsing.cpp; clang-tools-extra/clangd/refactor/tweaks/AnnotateHighlightings.cpp; clang-tools-extra/clangd/refactor/tweaks/DefineInline.cpp; clang-tools-extra/clangd/refactor/tweaks/DefineOutline.cpp; clang-tools-extra/clangd/refactor/tweaks/DumpAST.cpp; clang-tools-extra/clangd/refactor/tweaks/ExpandMacro.cpp; clang-tools-extra/clangd/refactor/tweaks/ExtractFunction.cpp; clang-tools-extra/clangd/refactor/tweaks/ObjCLocalizeStringLiteral.cpp; clang-tools-extra/clangd/refactor/tweaks/RemoveUsingNamespace.cpp; clang-tools-extra/clangd/refactor/tweaks/SwapIfBranches.cpp; clang-tools-extra/clangd/support/Cancellation.cpp; clang-tools-extra/clangd/support/Cancellation.h; clang-tools-extra/clangd/support/Context.cpp; clang-tools-extra/clangd/support/Context.h; clang-tools-extra/clangd/support/FileCache.cpp; clang-tools-extra/clangd/support/FileCache.h; clang-tools-extra/clangd/support/Function.h; clang-tools-extra/clangd/support/Logger.cpp; clang-tools-extra/clangd/support/Markup.cpp; clang-tools-extra/clangd/support/Markup.h; clang-tools-extra/clangd/support/MemoryTree.cpp; clang-tools-extra/clangd/support/MemoryTree.h; clang-tools-extra/clangd/support/Path.cpp; clang-tools-extra/clangd/support/Path.h; clang-tools-extra/clangd/support/Shutdown.cpp; clang-tools-extra/clangd/support/Shutdown.h; clang-tools-extra/clangd/suppo,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:80679,Modifiability,refactor,refactor,80679,g.cpp; clang-tools-extra/clangd/index/remote/marshalling/Marshalling.h; clang-tools-extra/clangd/index/remote/monitor/Monitor.cpp; clang-tools-extra/clangd/index/remote/server/Server.cpp; clang-tools-extra/clangd/index/remote/unimplemented/UnimplementedClient.cpp; clang-tools-extra/clangd/indexer/IndexerMain.cpp; clang-tools-extra/clangd/refactor/InsertionPoint.cpp; clang-tools-extra/clangd/refactor/InsertionPoint.h; clang-tools-extra/clangd/refactor/Rename.h; clang-tools-extra/clangd/refactor/Tweak.cpp; clang-tools-extra/clangd/refactor/Tweak.h; clang-tools-extra/clangd/refactor/tweaks/AddUsing.cpp; clang-tools-extra/clangd/refactor/tweaks/AnnotateHighlightings.cpp; clang-tools-extra/clangd/refactor/tweaks/DefineInline.cpp; clang-tools-extra/clangd/refactor/tweaks/DefineOutline.cpp; clang-tools-extra/clangd/refactor/tweaks/DumpAST.cpp; clang-tools-extra/clangd/refactor/tweaks/ExpandMacro.cpp; clang-tools-extra/clangd/refactor/tweaks/ExtractFunction.cpp; clang-tools-extra/clangd/refactor/tweaks/ObjCLocalizeStringLiteral.cpp; clang-tools-extra/clangd/refactor/tweaks/RemoveUsingNamespace.cpp; clang-tools-extra/clangd/refactor/tweaks/SwapIfBranches.cpp; clang-tools-extra/clangd/support/Cancellation.cpp; clang-tools-extra/clangd/support/Cancellation.h; clang-tools-extra/clangd/support/Context.cpp; clang-tools-extra/clangd/support/Context.h; clang-tools-extra/clangd/support/FileCache.cpp; clang-tools-extra/clangd/support/FileCache.h; clang-tools-extra/clangd/support/Function.h; clang-tools-extra/clangd/support/Logger.cpp; clang-tools-extra/clangd/support/Markup.cpp; clang-tools-extra/clangd/support/Markup.h; clang-tools-extra/clangd/support/MemoryTree.cpp; clang-tools-extra/clangd/support/MemoryTree.h; clang-tools-extra/clangd/support/Path.cpp; clang-tools-extra/clangd/support/Path.h; clang-tools-extra/clangd/support/Shutdown.cpp; clang-tools-extra/clangd/support/Shutdown.h; clang-tools-extra/clangd/support/ThreadCrashReporter.cpp; clang-tools-extra/clangd/support/Thread,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:80751,Modifiability,refactor,refactor,80751,h; clang-tools-extra/clangd/index/remote/monitor/Monitor.cpp; clang-tools-extra/clangd/index/remote/server/Server.cpp; clang-tools-extra/clangd/index/remote/unimplemented/UnimplementedClient.cpp; clang-tools-extra/clangd/indexer/IndexerMain.cpp; clang-tools-extra/clangd/refactor/InsertionPoint.cpp; clang-tools-extra/clangd/refactor/InsertionPoint.h; clang-tools-extra/clangd/refactor/Rename.h; clang-tools-extra/clangd/refactor/Tweak.cpp; clang-tools-extra/clangd/refactor/Tweak.h; clang-tools-extra/clangd/refactor/tweaks/AddUsing.cpp; clang-tools-extra/clangd/refactor/tweaks/AnnotateHighlightings.cpp; clang-tools-extra/clangd/refactor/tweaks/DefineInline.cpp; clang-tools-extra/clangd/refactor/tweaks/DefineOutline.cpp; clang-tools-extra/clangd/refactor/tweaks/DumpAST.cpp; clang-tools-extra/clangd/refactor/tweaks/ExpandMacro.cpp; clang-tools-extra/clangd/refactor/tweaks/ExtractFunction.cpp; clang-tools-extra/clangd/refactor/tweaks/ObjCLocalizeStringLiteral.cpp; clang-tools-extra/clangd/refactor/tweaks/RemoveUsingNamespace.cpp; clang-tools-extra/clangd/refactor/tweaks/SwapIfBranches.cpp; clang-tools-extra/clangd/support/Cancellation.cpp; clang-tools-extra/clangd/support/Cancellation.h; clang-tools-extra/clangd/support/Context.cpp; clang-tools-extra/clangd/support/Context.h; clang-tools-extra/clangd/support/FileCache.cpp; clang-tools-extra/clangd/support/FileCache.h; clang-tools-extra/clangd/support/Function.h; clang-tools-extra/clangd/support/Logger.cpp; clang-tools-extra/clangd/support/Markup.cpp; clang-tools-extra/clangd/support/Markup.h; clang-tools-extra/clangd/support/MemoryTree.cpp; clang-tools-extra/clangd/support/MemoryTree.h; clang-tools-extra/clangd/support/Path.cpp; clang-tools-extra/clangd/support/Path.h; clang-tools-extra/clangd/support/Shutdown.cpp; clang-tools-extra/clangd/support/Shutdown.h; clang-tools-extra/clangd/support/ThreadCrashReporter.cpp; clang-tools-extra/clangd/support/ThreadCrashReporter.h; clang-tools-extra/clangd/support/Threading.cpp; clang,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:80818,Modifiability,refactor,refactor,80818,ang-tools-extra/clangd/index/remote/server/Server.cpp; clang-tools-extra/clangd/index/remote/unimplemented/UnimplementedClient.cpp; clang-tools-extra/clangd/indexer/IndexerMain.cpp; clang-tools-extra/clangd/refactor/InsertionPoint.cpp; clang-tools-extra/clangd/refactor/InsertionPoint.h; clang-tools-extra/clangd/refactor/Rename.h; clang-tools-extra/clangd/refactor/Tweak.cpp; clang-tools-extra/clangd/refactor/Tweak.h; clang-tools-extra/clangd/refactor/tweaks/AddUsing.cpp; clang-tools-extra/clangd/refactor/tweaks/AnnotateHighlightings.cpp; clang-tools-extra/clangd/refactor/tweaks/DefineInline.cpp; clang-tools-extra/clangd/refactor/tweaks/DefineOutline.cpp; clang-tools-extra/clangd/refactor/tweaks/DumpAST.cpp; clang-tools-extra/clangd/refactor/tweaks/ExpandMacro.cpp; clang-tools-extra/clangd/refactor/tweaks/ExtractFunction.cpp; clang-tools-extra/clangd/refactor/tweaks/ObjCLocalizeStringLiteral.cpp; clang-tools-extra/clangd/refactor/tweaks/RemoveUsingNamespace.cpp; clang-tools-extra/clangd/refactor/tweaks/SwapIfBranches.cpp; clang-tools-extra/clangd/support/Cancellation.cpp; clang-tools-extra/clangd/support/Cancellation.h; clang-tools-extra/clangd/support/Context.cpp; clang-tools-extra/clangd/support/Context.h; clang-tools-extra/clangd/support/FileCache.cpp; clang-tools-extra/clangd/support/FileCache.h; clang-tools-extra/clangd/support/Function.h; clang-tools-extra/clangd/support/Logger.cpp; clang-tools-extra/clangd/support/Markup.cpp; clang-tools-extra/clangd/support/Markup.h; clang-tools-extra/clangd/support/MemoryTree.cpp; clang-tools-extra/clangd/support/MemoryTree.h; clang-tools-extra/clangd/support/Path.cpp; clang-tools-extra/clangd/support/Path.h; clang-tools-extra/clangd/support/Shutdown.cpp; clang-tools-extra/clangd/support/Shutdown.h; clang-tools-extra/clangd/support/ThreadCrashReporter.cpp; clang-tools-extra/clangd/support/ThreadCrashReporter.h; clang-tools-extra/clangd/support/Threading.cpp; clang-tools-extra/clangd/support/Threading.h; clang-tools-extra/clang,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:110392,Modifiability,variab,variable,110392,floating-point.h; flang/include/flang/Decimal/decimal.h; flang/include/flang/Evaluate/call.h; flang/include/flang/Evaluate/characteristics.h; flang/include/flang/Evaluate/check-expression.h; flang/include/flang/Evaluate/common.h; flang/include/flang/Evaluate/complex.h; flang/include/flang/Evaluate/constant.h; flang/include/flang/Evaluate/expression.h; flang/include/flang/Evaluate/fold-designator.h; flang/include/flang/Evaluate/fold.h; flang/include/flang/Evaluate/formatting.h; flang/include/flang/Evaluate/initial-image.h; flang/include/flang/Evaluate/integer.h; flang/include/flang/Evaluate/intrinsics-library.h; flang/include/flang/Evaluate/intrinsics.h; flang/include/flang/Evaluate/logical.h; flang/include/flang/Evaluate/real.h; flang/include/flang/Evaluate/rounding-bits.h; flang/include/flang/Evaluate/shape.h; flang/include/flang/Evaluate/static-data.h; flang/include/flang/Evaluate/tools.h; flang/include/flang/Evaluate/traverse.h; flang/include/flang/Evaluate/type.h; flang/include/flang/Evaluate/variable.h; flang/include/flang/Frontend/CompilerInstance.h; flang/include/flang/Frontend/FrontendAction.h; flang/include/flang/Frontend/FrontendActions.h; flang/include/flang/Frontend/FrontendOptions.h; flang/include/flang/Frontend/FrontendPluginRegistry.h; flang/include/flang/Frontend/PreprocessorOptions.h; flang/include/flang/Frontend/TargetOptions.h; flang/include/flang/Frontend/TextDiagnostic.h; flang/include/flang/Frontend/TextDiagnosticBuffer.h; flang/include/flang/Frontend/TextDiagnosticPrinter.h; flang/include/flang/FrontendTool/Utils.h; flang/include/flang/Lower/AbstractConverter.h; flang/include/flang/Lower/Allocatable.h; flang/include/flang/Lower/BoxAnalyzer.h; flang/include/flang/Lower/Bridge.h; flang/include/flang/Lower/CallInterface.h; flang/include/flang/Lower/Coarray.h; flang/include/flang/Lower/ComponentPath.h; flang/include/flang/Lower/ConvertExpr.h; flang/include/flang/Lower/ConvertType.h; flang/include/flang/Lower/ConvertVariable.h; flang/include/flang/L,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:117207,Modifiability,variab,variable,117207,lib/Evaluate/character.h; flang/lib/Evaluate/check-expression.cpp; flang/lib/Evaluate/common.cpp; flang/lib/Evaluate/complex.cpp; flang/lib/Evaluate/constant.cpp; flang/lib/Evaluate/expression.cpp; flang/lib/Evaluate/fold-character.cpp; flang/lib/Evaluate/fold-complex.cpp; flang/lib/Evaluate/fold-designator.cpp; flang/lib/Evaluate/fold-implementation.h; flang/lib/Evaluate/fold-logical.cpp; flang/lib/Evaluate/fold-real.cpp; flang/lib/Evaluate/fold-reduction.cpp; flang/lib/Evaluate/fold-reduction.h; flang/lib/Evaluate/fold.cpp; flang/lib/Evaluate/formatting.cpp; flang/lib/Evaluate/host.cpp; flang/lib/Evaluate/host.h; flang/lib/Evaluate/initial-image.cpp; flang/lib/Evaluate/int-power.h; flang/lib/Evaluate/integer.cpp; flang/lib/Evaluate/intrinsics-library.cpp; flang/lib/Evaluate/intrinsics.cpp; flang/lib/Evaluate/logical.cpp; flang/lib/Evaluate/real.cpp; flang/lib/Evaluate/shape.cpp; flang/lib/Evaluate/static-data.cpp; flang/lib/Evaluate/tools.cpp; flang/lib/Evaluate/type.cpp; flang/lib/Evaluate/variable.cpp; flang/lib/Frontend/CompilerInstance.cpp; flang/lib/Frontend/FrontendAction.cpp; flang/lib/Frontend/FrontendOptions.cpp; flang/lib/Frontend/TextDiagnostic.cpp; flang/lib/Frontend/TextDiagnosticBuffer.cpp; flang/lib/Frontend/TextDiagnosticPrinter.cpp; flang/lib/FrontendTool/ExecuteCompilerInvocation.cpp; flang/lib/Lower/Allocatable.cpp; flang/lib/Lower/Bridge.cpp; flang/lib/Lower/CallInterface.cpp; flang/lib/Lower/Coarray.cpp; flang/lib/Lower/ComponentPath.cpp; flang/lib/Lower/ConvertExpr.cpp; flang/lib/Lower/ConvertType.cpp; flang/lib/Lower/ConvertVariable.cpp; flang/lib/Lower/DumpEvaluateExpr.cpp; flang/lib/Lower/IntervalSet.h; flang/lib/Lower/IntrinsicCall.cpp; flang/lib/Lower/IO.cpp; flang/lib/Lower/IterationSpace.cpp; flang/lib/Lower/Mangler.cpp; flang/lib/Lower/OpenACC.cpp; flang/lib/Lower/OpenMP.cpp; flang/lib/Lower/PFTBuilder.cpp; flang/lib/Lower/RTBuilder.h; flang/lib/Lower/Runtime.cpp; flang/lib/Lower/SymbolMap.cpp; flang/lib/Optimizer/Builder/BoxValue.cpp;,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:123879,Modifiability,rewrite,rewrite-parse-tree,123879,g/lib/Semantics/check-purity.cpp; flang/lib/Semantics/check-purity.h; flang/lib/Semantics/check-return.cpp; flang/lib/Semantics/check-return.h; flang/lib/Semantics/check-select-rank.cpp; flang/lib/Semantics/check-select-rank.h; flang/lib/Semantics/check-select-type.cpp; flang/lib/Semantics/check-select-type.h; flang/lib/Semantics/check-stop.cpp; flang/lib/Semantics/check-stop.h; flang/lib/Semantics/compute-offsets.cpp; flang/lib/Semantics/compute-offsets.h; flang/lib/Semantics/data-to-inits.cpp; flang/lib/Semantics/mod-file.h; flang/lib/Semantics/pointer-assignment.cpp; flang/lib/Semantics/pointer-assignment.h; flang/lib/Semantics/program-tree.cpp; flang/lib/Semantics/program-tree.h; flang/lib/Semantics/resolve-directives.cpp; flang/lib/Semantics/resolve-directives.h; flang/lib/Semantics/resolve-labels.cpp; flang/lib/Semantics/resolve-labels.h; flang/lib/Semantics/resolve-names-utils.cpp; flang/lib/Semantics/resolve-names-utils.h; flang/lib/Semantics/resolve-names.h; flang/lib/Semantics/rewrite-parse-tree.cpp; flang/lib/Semantics/rewrite-parse-tree.h; flang/lib/Semantics/runtime-type-info.cpp; flang/lib/Semantics/scope.cpp; flang/lib/Semantics/semantics.cpp; flang/lib/Semantics/tools.cpp; flang/lib/Semantics/unparse-with-symbols.cpp; flang/module/omp_lib.h; flang/runtime/allocatable.cpp; flang/runtime/assign.cpp; flang/runtime/buffer.cpp; flang/runtime/buffer.h; flang/runtime/character.cpp; flang/runtime/command.cpp; flang/runtime/complex-reduction.h; flang/runtime/connection.cpp; flang/runtime/connection.h; flang/runtime/copy.cpp; flang/runtime/copy.h; flang/runtime/derived-api.cpp; flang/runtime/derived.h; flang/runtime/descriptor-io.cpp; flang/runtime/descriptor-io.h; flang/runtime/descriptor.cpp; flang/runtime/dot-product.cpp; flang/runtime/edit-input.cpp; flang/runtime/edit-input.h; flang/runtime/edit-output.cpp; flang/runtime/edit-output.h; flang/runtime/environment.cpp; flang/runtime/environment.h; flang/runtime/extensions.cpp; flang/runtime/extrema.cpp; flan,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:123923,Modifiability,rewrite,rewrite-parse-tree,123923,/Semantics/check-purity.h; flang/lib/Semantics/check-return.cpp; flang/lib/Semantics/check-return.h; flang/lib/Semantics/check-select-rank.cpp; flang/lib/Semantics/check-select-rank.h; flang/lib/Semantics/check-select-type.cpp; flang/lib/Semantics/check-select-type.h; flang/lib/Semantics/check-stop.cpp; flang/lib/Semantics/check-stop.h; flang/lib/Semantics/compute-offsets.cpp; flang/lib/Semantics/compute-offsets.h; flang/lib/Semantics/data-to-inits.cpp; flang/lib/Semantics/mod-file.h; flang/lib/Semantics/pointer-assignment.cpp; flang/lib/Semantics/pointer-assignment.h; flang/lib/Semantics/program-tree.cpp; flang/lib/Semantics/program-tree.h; flang/lib/Semantics/resolve-directives.cpp; flang/lib/Semantics/resolve-directives.h; flang/lib/Semantics/resolve-labels.cpp; flang/lib/Semantics/resolve-labels.h; flang/lib/Semantics/resolve-names-utils.cpp; flang/lib/Semantics/resolve-names-utils.h; flang/lib/Semantics/resolve-names.h; flang/lib/Semantics/rewrite-parse-tree.cpp; flang/lib/Semantics/rewrite-parse-tree.h; flang/lib/Semantics/runtime-type-info.cpp; flang/lib/Semantics/scope.cpp; flang/lib/Semantics/semantics.cpp; flang/lib/Semantics/tools.cpp; flang/lib/Semantics/unparse-with-symbols.cpp; flang/module/omp_lib.h; flang/runtime/allocatable.cpp; flang/runtime/assign.cpp; flang/runtime/buffer.cpp; flang/runtime/buffer.h; flang/runtime/character.cpp; flang/runtime/command.cpp; flang/runtime/complex-reduction.h; flang/runtime/connection.cpp; flang/runtime/connection.h; flang/runtime/copy.cpp; flang/runtime/copy.h; flang/runtime/derived-api.cpp; flang/runtime/derived.h; flang/runtime/descriptor-io.cpp; flang/runtime/descriptor-io.h; flang/runtime/descriptor.cpp; flang/runtime/dot-product.cpp; flang/runtime/edit-input.cpp; flang/runtime/edit-input.h; flang/runtime/edit-output.cpp; flang/runtime/edit-output.h; flang/runtime/environment.cpp; flang/runtime/environment.h; flang/runtime/extensions.cpp; flang/runtime/extrema.cpp; flang/runtime/file.cpp; flang/runtime/file.h; f,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:130359,Modifiability,config,config,130359,.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAnalyzerTest.cpp; libc/config/linux/app.h; libc/fuzzing/math/Compare.h; libc/fuzzing/math/math_differential_fuzz.cpp; libc/fuzzing/math/nextafter_differential_fuzz.cpp; libc/fuzzing/math/RemQuoDiff.h; libc/fuzzing/math/SingleInputSingleOutputDiff.h; libc/fuzzing/math/TwoInputSingleOutputDiff.h; libc/fuzzing/stdlib/atof_differential_fuzz.cpp; libc/fuzzing/stdlib/qsort_fuzz.cpp; libc/fuzzing/stdlib/StringParserOutputDiff.h; libc/fuzzing/string/strcmp_fuzz.cpp; libc/fuzzing/string/strstr_fuzz.cpp; libc/include/__llvm-libc-common.h; libc/include/llvm-libc-macros/fcntl-macros.h; libc/include/llvm-libc-macros/stdio-macros.h; libc/include/llvm-libc-macros/linux/fcntl-macros.h; libc/include/llvm-libc-types/cnd_t.h; libc/include/llvm-libc-types/div_t.h; libc/include/llvm-libc-types/double_t.h; libc/include/llvm-libc-types/fenv_t.h; libc/include/llvm-libc-types/fexcept_t.h; libc/include/llvm-libc-types/FILE.h; libc/include/llvm-libc-types/float_t.h; libc/include/llvm-libc-types/imaxdiv_t.h; libc/include/llvm-libc-types/jm,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:149576,Modifiability,config,config,149576,tGen/PrototypeTestGen.cpp; libc/utils/LibcTableGenUtil/APIIndexer.cpp; libc/utils/LibcTableGenUtil/APIIndexer.h; libc/utils/MPFRWrapper/check_mpfr.cpp; libc/utils/MPFRWrapper/MPFRUtils.cpp; libc/utils/MPFRWrapper/MPFRUtils.h; libc/utils/testutils/ExecuteFunction.h; libc/utils/testutils/ExecuteFunctionUnix.cpp; libc/utils/testutils/FDReader.h; libc/utils/testutils/FDReaderUnix.cpp; libc/utils/testutils/RandUtils.cpp; libc/utils/testutils/RandUtils.h; libc/utils/testutils/StreamWrapper.h; libc/utils/testutils/Timer.cpp; libc/utils/testutils/Timer.h; libc/utils/tools/WrapperGen/Main.cpp; libc/utils/UnitTest/FPExceptMatcher.cpp; libc/utils/UnitTest/FPExceptMatcher.h; libc/utils/UnitTest/FPMatcher.cpp; libc/utils/UnitTest/FPMatcher.h; libc/utils/UnitTest/FuchsiaTest.h; libc/utils/UnitTest/LibcTest.cpp; libc/utils/UnitTest/LibcTestMain.cpp; libc/utils/UnitTest/MemoryMatcher.cpp; libc/utils/UnitTest/MemoryMatcher.h; libc/utils/UnitTest/PlatformDefs.h; libc/utils/UnitTest/Test.h; libclc/generic/include/config.h; libclc/generic/include/clc/as_type.h; libclc/generic/include/clc/clcfunc.h; libclc/generic/include/clc/async/async_work_group_copy.h; libclc/generic/include/clc/async/async_work_group_strided_copy.h; libclc/generic/include/clc/async/prefetch.h; libclc/generic/include/clc/async/wait_group_events.h; libclc/generic/include/clc/atomic/atomic_add.h; libclc/generic/include/clc/atomic/atomic_and.h; libclc/generic/include/clc/atomic/atomic_max.h; libclc/generic/include/clc/atomic/atomic_min.h; libclc/generic/include/clc/atomic/atomic_or.h; libclc/generic/include/clc/atomic/atomic_sub.h; libclc/generic/include/clc/atomic/atomic_xor.h; libclc/generic/include/clc/cl_khr_global_int32_base_atomics/atom_add.h; libclc/generic/include/clc/cl_khr_global_int32_base_atomics/atom_dec.h; libclc/generic/include/clc/cl_khr_global_int32_base_atomics/atom_inc.h; libclc/generic/include/clc/cl_khr_global_int32_base_atomics/atom_sub.h; libclc/generic/include/clc/cl_khr_global_int32_base_atomics,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:165540,Modifiability,plugin,plugins,165540,onPriorities.cpp; lld/MachO/SectionPriorities.h; lld/MachO/Symbols.cpp; lld/MachO/Symbols.h; lld/MachO/SymbolTable.cpp; lld/MachO/SymbolTable.h; lld/MachO/SyntheticSections.h; lld/MachO/Target.cpp; lld/MachO/Target.h; lld/MachO/UnwindInfoSection.cpp; lld/MachO/UnwindInfoSection.h; lld/MachO/Writer.cpp; lld/MachO/Writer.h; lld/MachO/Arch/ARM.cpp; lld/MachO/Arch/ARM64.cpp; lld/MachO/Arch/ARM64Common.cpp; lld/MachO/Arch/ARM64Common.h; lld/MachO/Arch/ARM64_32.cpp; lld/MachO/Arch/X86_64.cpp; lld/MinGW/Driver.cpp; lld/tools/lld/lld.cpp; lld/wasm/Config.h; lld/wasm/InputChunks.h; lld/wasm/InputElement.h; lld/wasm/InputFiles.h; lld/wasm/MapFile.cpp; lld/wasm/MapFile.h; lld/wasm/MarkLive.cpp; lld/wasm/MarkLive.h; lld/wasm/OutputSections.cpp; lld/wasm/OutputSections.h; lld/wasm/OutputSegment.cpp; lld/wasm/OutputSegment.h; lld/wasm/Relocations.h; lld/wasm/Writer.h; lld/wasm/WriterUtils.h; lldb/bindings/python/python-typemaps.h; lldb/examples/darwin/heap_find/heap/heap_find.cpp; lldb/examples/plugins/commands/fooplugin.cpp; lldb/examples/synthetic/bitfield/program.cpp; lldb/include/lldb/lldb-defines.h; lldb/include/lldb/lldb-forward.h; lldb/include/lldb/lldb-private.h; lldb/include/lldb/lldb-public.h; lldb/include/lldb/lldb-versioning.h; lldb/include/lldb/API/LLDB.h; lldb/include/lldb/API/SBAddress.h; lldb/include/lldb/API/SBAttachInfo.h; lldb/include/lldb/API/SBBlock.h; lldb/include/lldb/API/SBBroadcaster.h; lldb/include/lldb/API/SBCommandInterpreter.h; lldb/include/lldb/API/SBCommandInterpreterRunOptions.h; lldb/include/lldb/API/SBCommandReturnObject.h; lldb/include/lldb/API/SBCommunication.h; lldb/include/lldb/API/SBCompileUnit.h; lldb/include/lldb/API/SBData.h; lldb/include/lldb/API/SBDebugger.h; lldb/include/lldb/API/SBDeclaration.h; lldb/include/lldb/API/SBEnvironment.h; lldb/include/lldb/API/SBError.h; lldb/include/lldb/API/SBEvent.h; lldb/include/lldb/API/SBExecutionContext.h; lldb/include/lldb/API/SBExpressionOptions.h; lldb/include/lldb/API/SBFile.h; lldb/include/lldb,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:406846,Modifiability,plugin,plugins,406846,ude/Mapping.h; openmp/libomptarget/DeviceRTL/include/State.h; openmp/libomptarget/DeviceRTL/include/Synchronization.h; openmp/libomptarget/DeviceRTL/include/Types.h; openmp/libomptarget/DeviceRTL/include/Utils.h; openmp/libomptarget/DeviceRTL/src/Configuration.cpp; openmp/libomptarget/DeviceRTL/src/Kernel.cpp; openmp/libomptarget/DeviceRTL/src/Misc.cpp; openmp/libomptarget/DeviceRTL/src/Parallelism.cpp; openmp/libomptarget/DeviceRTL/src/Reduction.cpp; openmp/libomptarget/DeviceRTL/src/State.cpp; openmp/libomptarget/DeviceRTL/src/Synchronization.cpp; openmp/libomptarget/DeviceRTL/src/Tasking.cpp; openmp/libomptarget/DeviceRTL/src/Utils.cpp; openmp/libomptarget/include/Debug.h; openmp/libomptarget/include/device.h; openmp/libomptarget/include/DeviceEnvironment.h; openmp/libomptarget/include/interop.h; openmp/libomptarget/include/omptarget.h; openmp/libomptarget/include/omptargetplugin.h; openmp/libomptarget/include/rtl.h; openmp/libomptarget/include/SourceInfo.h; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.cpp; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.h; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.cpp; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.h; openmp/libomptarget/plugins/amdgpu/impl/hsa_api.h; openmp/libomptarget/plugins/amdgpu/impl/impl.cpp; openmp/libomptarget/plugins/amdgpu/impl/impl_runtime.h; openmp/libomptarget/plugins/amdgpu/impl/internal.h; openmp/libomptarget/plugins/amdgpu/impl/interop_hsa.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.h; openmp/libomptarget/plugins/amdgpu/impl/rt.h; openmp/libomptarget/plugins/amdgpu/src/print_tracing.h; openmp/libomptarget/plugins/common/elf_common/elf_common.cpp; openmp/libomptarget/plugins/common/elf_common/elf_common.h; openmp/libomptarget/plugins/common/MemoryManager/MemoryManager.h; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.cpp; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.h; openmp/libom,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:406902,Modifiability,plugin,plugins,406902,ate.h; openmp/libomptarget/DeviceRTL/include/Synchronization.h; openmp/libomptarget/DeviceRTL/include/Types.h; openmp/libomptarget/DeviceRTL/include/Utils.h; openmp/libomptarget/DeviceRTL/src/Configuration.cpp; openmp/libomptarget/DeviceRTL/src/Kernel.cpp; openmp/libomptarget/DeviceRTL/src/Misc.cpp; openmp/libomptarget/DeviceRTL/src/Parallelism.cpp; openmp/libomptarget/DeviceRTL/src/Reduction.cpp; openmp/libomptarget/DeviceRTL/src/State.cpp; openmp/libomptarget/DeviceRTL/src/Synchronization.cpp; openmp/libomptarget/DeviceRTL/src/Tasking.cpp; openmp/libomptarget/DeviceRTL/src/Utils.cpp; openmp/libomptarget/include/Debug.h; openmp/libomptarget/include/device.h; openmp/libomptarget/include/DeviceEnvironment.h; openmp/libomptarget/include/interop.h; openmp/libomptarget/include/omptarget.h; openmp/libomptarget/include/omptargetplugin.h; openmp/libomptarget/include/rtl.h; openmp/libomptarget/include/SourceInfo.h; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.cpp; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.h; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.cpp; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.h; openmp/libomptarget/plugins/amdgpu/impl/hsa_api.h; openmp/libomptarget/plugins/amdgpu/impl/impl.cpp; openmp/libomptarget/plugins/amdgpu/impl/impl_runtime.h; openmp/libomptarget/plugins/amdgpu/impl/internal.h; openmp/libomptarget/plugins/amdgpu/impl/interop_hsa.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.h; openmp/libomptarget/plugins/amdgpu/impl/rt.h; openmp/libomptarget/plugins/amdgpu/src/print_tracing.h; openmp/libomptarget/plugins/common/elf_common/elf_common.cpp; openmp/libomptarget/plugins/common/elf_common/elf_common.h; openmp/libomptarget/plugins/common/MemoryManager/MemoryManager.h; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.cpp; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.h; openmp/libomptarget/plugins/generic-elf-64bit/src/rtl.cpp; openmp/l,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:406956,Modifiability,plugin,plugins,406956,.h; openmp/libomptarget/DeviceRTL/include/Types.h; openmp/libomptarget/DeviceRTL/include/Utils.h; openmp/libomptarget/DeviceRTL/src/Configuration.cpp; openmp/libomptarget/DeviceRTL/src/Kernel.cpp; openmp/libomptarget/DeviceRTL/src/Misc.cpp; openmp/libomptarget/DeviceRTL/src/Parallelism.cpp; openmp/libomptarget/DeviceRTL/src/Reduction.cpp; openmp/libomptarget/DeviceRTL/src/State.cpp; openmp/libomptarget/DeviceRTL/src/Synchronization.cpp; openmp/libomptarget/DeviceRTL/src/Tasking.cpp; openmp/libomptarget/DeviceRTL/src/Utils.cpp; openmp/libomptarget/include/Debug.h; openmp/libomptarget/include/device.h; openmp/libomptarget/include/DeviceEnvironment.h; openmp/libomptarget/include/interop.h; openmp/libomptarget/include/omptarget.h; openmp/libomptarget/include/omptargetplugin.h; openmp/libomptarget/include/rtl.h; openmp/libomptarget/include/SourceInfo.h; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.cpp; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.h; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.cpp; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.h; openmp/libomptarget/plugins/amdgpu/impl/hsa_api.h; openmp/libomptarget/plugins/amdgpu/impl/impl.cpp; openmp/libomptarget/plugins/amdgpu/impl/impl_runtime.h; openmp/libomptarget/plugins/amdgpu/impl/internal.h; openmp/libomptarget/plugins/amdgpu/impl/interop_hsa.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.h; openmp/libomptarget/plugins/amdgpu/impl/rt.h; openmp/libomptarget/plugins/amdgpu/src/print_tracing.h; openmp/libomptarget/plugins/common/elf_common/elf_common.cpp; openmp/libomptarget/plugins/common/elf_common/elf_common.h; openmp/libomptarget/plugins/common/MemoryManager/MemoryManager.h; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.cpp; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.h; openmp/libomptarget/plugins/generic-elf-64bit/src/rtl.cpp; openmp/libomptarget/plugins/remote/include/Utils.h; openmp/libomptarg,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:407023,Modifiability,plugin,plugins,407023,rget/DeviceRTL/include/Utils.h; openmp/libomptarget/DeviceRTL/src/Configuration.cpp; openmp/libomptarget/DeviceRTL/src/Kernel.cpp; openmp/libomptarget/DeviceRTL/src/Misc.cpp; openmp/libomptarget/DeviceRTL/src/Parallelism.cpp; openmp/libomptarget/DeviceRTL/src/Reduction.cpp; openmp/libomptarget/DeviceRTL/src/State.cpp; openmp/libomptarget/DeviceRTL/src/Synchronization.cpp; openmp/libomptarget/DeviceRTL/src/Tasking.cpp; openmp/libomptarget/DeviceRTL/src/Utils.cpp; openmp/libomptarget/include/Debug.h; openmp/libomptarget/include/device.h; openmp/libomptarget/include/DeviceEnvironment.h; openmp/libomptarget/include/interop.h; openmp/libomptarget/include/omptarget.h; openmp/libomptarget/include/omptargetplugin.h; openmp/libomptarget/include/rtl.h; openmp/libomptarget/include/SourceInfo.h; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.cpp; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.h; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.cpp; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.h; openmp/libomptarget/plugins/amdgpu/impl/hsa_api.h; openmp/libomptarget/plugins/amdgpu/impl/impl.cpp; openmp/libomptarget/plugins/amdgpu/impl/impl_runtime.h; openmp/libomptarget/plugins/amdgpu/impl/internal.h; openmp/libomptarget/plugins/amdgpu/impl/interop_hsa.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.h; openmp/libomptarget/plugins/amdgpu/impl/rt.h; openmp/libomptarget/plugins/amdgpu/src/print_tracing.h; openmp/libomptarget/plugins/common/elf_common/elf_common.cpp; openmp/libomptarget/plugins/common/elf_common/elf_common.h; openmp/libomptarget/plugins/common/MemoryManager/MemoryManager.h; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.cpp; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.h; openmp/libomptarget/plugins/generic-elf-64bit/src/rtl.cpp; openmp/libomptarget/plugins/remote/include/Utils.h; openmp/libomptarget/plugins/remote/server/OffloadingServer.cpp; openmp/libomptarget,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:407088,Modifiability,plugin,plugins,407088,TL/src/Configuration.cpp; openmp/libomptarget/DeviceRTL/src/Kernel.cpp; openmp/libomptarget/DeviceRTL/src/Misc.cpp; openmp/libomptarget/DeviceRTL/src/Parallelism.cpp; openmp/libomptarget/DeviceRTL/src/Reduction.cpp; openmp/libomptarget/DeviceRTL/src/State.cpp; openmp/libomptarget/DeviceRTL/src/Synchronization.cpp; openmp/libomptarget/DeviceRTL/src/Tasking.cpp; openmp/libomptarget/DeviceRTL/src/Utils.cpp; openmp/libomptarget/include/Debug.h; openmp/libomptarget/include/device.h; openmp/libomptarget/include/DeviceEnvironment.h; openmp/libomptarget/include/interop.h; openmp/libomptarget/include/omptarget.h; openmp/libomptarget/include/omptargetplugin.h; openmp/libomptarget/include/rtl.h; openmp/libomptarget/include/SourceInfo.h; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.cpp; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.h; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.cpp; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.h; openmp/libomptarget/plugins/amdgpu/impl/hsa_api.h; openmp/libomptarget/plugins/amdgpu/impl/impl.cpp; openmp/libomptarget/plugins/amdgpu/impl/impl_runtime.h; openmp/libomptarget/plugins/amdgpu/impl/internal.h; openmp/libomptarget/plugins/amdgpu/impl/interop_hsa.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.h; openmp/libomptarget/plugins/amdgpu/impl/rt.h; openmp/libomptarget/plugins/amdgpu/src/print_tracing.h; openmp/libomptarget/plugins/common/elf_common/elf_common.cpp; openmp/libomptarget/plugins/common/elf_common/elf_common.h; openmp/libomptarget/plugins/common/MemoryManager/MemoryManager.h; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.cpp; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.h; openmp/libomptarget/plugins/generic-elf-64bit/src/rtl.cpp; openmp/libomptarget/plugins/remote/include/Utils.h; openmp/libomptarget/plugins/remote/server/OffloadingServer.cpp; openmp/libomptarget/plugins/remote/server/Server.cpp; openmp/libomptarget/plug,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:407139,Modifiability,plugin,plugins,407139,ceRTL/src/Kernel.cpp; openmp/libomptarget/DeviceRTL/src/Misc.cpp; openmp/libomptarget/DeviceRTL/src/Parallelism.cpp; openmp/libomptarget/DeviceRTL/src/Reduction.cpp; openmp/libomptarget/DeviceRTL/src/State.cpp; openmp/libomptarget/DeviceRTL/src/Synchronization.cpp; openmp/libomptarget/DeviceRTL/src/Tasking.cpp; openmp/libomptarget/DeviceRTL/src/Utils.cpp; openmp/libomptarget/include/Debug.h; openmp/libomptarget/include/device.h; openmp/libomptarget/include/DeviceEnvironment.h; openmp/libomptarget/include/interop.h; openmp/libomptarget/include/omptarget.h; openmp/libomptarget/include/omptargetplugin.h; openmp/libomptarget/include/rtl.h; openmp/libomptarget/include/SourceInfo.h; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.cpp; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.h; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.cpp; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.h; openmp/libomptarget/plugins/amdgpu/impl/hsa_api.h; openmp/libomptarget/plugins/amdgpu/impl/impl.cpp; openmp/libomptarget/plugins/amdgpu/impl/impl_runtime.h; openmp/libomptarget/plugins/amdgpu/impl/internal.h; openmp/libomptarget/plugins/amdgpu/impl/interop_hsa.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.h; openmp/libomptarget/plugins/amdgpu/impl/rt.h; openmp/libomptarget/plugins/amdgpu/src/print_tracing.h; openmp/libomptarget/plugins/common/elf_common/elf_common.cpp; openmp/libomptarget/plugins/common/elf_common/elf_common.h; openmp/libomptarget/plugins/common/MemoryManager/MemoryManager.h; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.cpp; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.h; openmp/libomptarget/plugins/generic-elf-64bit/src/rtl.cpp; openmp/libomptarget/plugins/remote/include/Utils.h; openmp/libomptarget/plugins/remote/server/OffloadingServer.cpp; openmp/libomptarget/plugins/remote/server/Server.cpp; openmp/libomptarget/plugins/remote/server/Server.h; openmp/libomptarget/p,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:407189,Modifiability,plugin,plugins,407189,rc/Misc.cpp; openmp/libomptarget/DeviceRTL/src/Parallelism.cpp; openmp/libomptarget/DeviceRTL/src/Reduction.cpp; openmp/libomptarget/DeviceRTL/src/State.cpp; openmp/libomptarget/DeviceRTL/src/Synchronization.cpp; openmp/libomptarget/DeviceRTL/src/Tasking.cpp; openmp/libomptarget/DeviceRTL/src/Utils.cpp; openmp/libomptarget/include/Debug.h; openmp/libomptarget/include/device.h; openmp/libomptarget/include/DeviceEnvironment.h; openmp/libomptarget/include/interop.h; openmp/libomptarget/include/omptarget.h; openmp/libomptarget/include/omptargetplugin.h; openmp/libomptarget/include/rtl.h; openmp/libomptarget/include/SourceInfo.h; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.cpp; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.h; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.cpp; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.h; openmp/libomptarget/plugins/amdgpu/impl/hsa_api.h; openmp/libomptarget/plugins/amdgpu/impl/impl.cpp; openmp/libomptarget/plugins/amdgpu/impl/impl_runtime.h; openmp/libomptarget/plugins/amdgpu/impl/internal.h; openmp/libomptarget/plugins/amdgpu/impl/interop_hsa.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.h; openmp/libomptarget/plugins/amdgpu/impl/rt.h; openmp/libomptarget/plugins/amdgpu/src/print_tracing.h; openmp/libomptarget/plugins/common/elf_common/elf_common.cpp; openmp/libomptarget/plugins/common/elf_common/elf_common.h; openmp/libomptarget/plugins/common/MemoryManager/MemoryManager.h; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.cpp; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.h; openmp/libomptarget/plugins/generic-elf-64bit/src/rtl.cpp; openmp/libomptarget/plugins/remote/include/Utils.h; openmp/libomptarget/plugins/remote/server/OffloadingServer.cpp; openmp/libomptarget/plugins/remote/server/Server.cpp; openmp/libomptarget/plugins/remote/server/Server.h; openmp/libomptarget/plugins/remote/src/Client.cpp; openmp/libomptarget/plu,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:407245,Modifiability,plugin,plugins,407245,ism.cpp; openmp/libomptarget/DeviceRTL/src/Reduction.cpp; openmp/libomptarget/DeviceRTL/src/State.cpp; openmp/libomptarget/DeviceRTL/src/Synchronization.cpp; openmp/libomptarget/DeviceRTL/src/Tasking.cpp; openmp/libomptarget/DeviceRTL/src/Utils.cpp; openmp/libomptarget/include/Debug.h; openmp/libomptarget/include/device.h; openmp/libomptarget/include/DeviceEnvironment.h; openmp/libomptarget/include/interop.h; openmp/libomptarget/include/omptarget.h; openmp/libomptarget/include/omptargetplugin.h; openmp/libomptarget/include/rtl.h; openmp/libomptarget/include/SourceInfo.h; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.cpp; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.h; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.cpp; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.h; openmp/libomptarget/plugins/amdgpu/impl/hsa_api.h; openmp/libomptarget/plugins/amdgpu/impl/impl.cpp; openmp/libomptarget/plugins/amdgpu/impl/impl_runtime.h; openmp/libomptarget/plugins/amdgpu/impl/internal.h; openmp/libomptarget/plugins/amdgpu/impl/interop_hsa.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.h; openmp/libomptarget/plugins/amdgpu/impl/rt.h; openmp/libomptarget/plugins/amdgpu/src/print_tracing.h; openmp/libomptarget/plugins/common/elf_common/elf_common.cpp; openmp/libomptarget/plugins/common/elf_common/elf_common.h; openmp/libomptarget/plugins/common/MemoryManager/MemoryManager.h; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.cpp; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.h; openmp/libomptarget/plugins/generic-elf-64bit/src/rtl.cpp; openmp/libomptarget/plugins/remote/include/Utils.h; openmp/libomptarget/plugins/remote/server/OffloadingServer.cpp; openmp/libomptarget/plugins/remote/server/Server.cpp; openmp/libomptarget/plugins/remote/server/Server.h; openmp/libomptarget/plugins/remote/src/Client.cpp; openmp/libomptarget/plugins/remote/src/Client.h; openmp/libomptarget/plugins/v,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:407297,Modifiability,plugin,plugins,407297,cpp; openmp/libomptarget/DeviceRTL/src/State.cpp; openmp/libomptarget/DeviceRTL/src/Synchronization.cpp; openmp/libomptarget/DeviceRTL/src/Tasking.cpp; openmp/libomptarget/DeviceRTL/src/Utils.cpp; openmp/libomptarget/include/Debug.h; openmp/libomptarget/include/device.h; openmp/libomptarget/include/DeviceEnvironment.h; openmp/libomptarget/include/interop.h; openmp/libomptarget/include/omptarget.h; openmp/libomptarget/include/omptargetplugin.h; openmp/libomptarget/include/rtl.h; openmp/libomptarget/include/SourceInfo.h; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.cpp; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.h; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.cpp; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.h; openmp/libomptarget/plugins/amdgpu/impl/hsa_api.h; openmp/libomptarget/plugins/amdgpu/impl/impl.cpp; openmp/libomptarget/plugins/amdgpu/impl/impl_runtime.h; openmp/libomptarget/plugins/amdgpu/impl/internal.h; openmp/libomptarget/plugins/amdgpu/impl/interop_hsa.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.h; openmp/libomptarget/plugins/amdgpu/impl/rt.h; openmp/libomptarget/plugins/amdgpu/src/print_tracing.h; openmp/libomptarget/plugins/common/elf_common/elf_common.cpp; openmp/libomptarget/plugins/common/elf_common/elf_common.h; openmp/libomptarget/plugins/common/MemoryManager/MemoryManager.h; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.cpp; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.h; openmp/libomptarget/plugins/generic-elf-64bit/src/rtl.cpp; openmp/libomptarget/plugins/remote/include/Utils.h; openmp/libomptarget/plugins/remote/server/OffloadingServer.cpp; openmp/libomptarget/plugins/remote/server/Server.cpp; openmp/libomptarget/plugins/remote/server/Server.h; openmp/libomptarget/plugins/remote/src/Client.cpp; openmp/libomptarget/plugins/remote/src/Client.h; openmp/libomptarget/plugins/ve/src/rtl.cpp; openmp/libomptarget/src/api.cpp; openmp,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:407354,Modifiability,plugin,plugins,407354,mp/libomptarget/DeviceRTL/src/Synchronization.cpp; openmp/libomptarget/DeviceRTL/src/Tasking.cpp; openmp/libomptarget/DeviceRTL/src/Utils.cpp; openmp/libomptarget/include/Debug.h; openmp/libomptarget/include/device.h; openmp/libomptarget/include/DeviceEnvironment.h; openmp/libomptarget/include/interop.h; openmp/libomptarget/include/omptarget.h; openmp/libomptarget/include/omptargetplugin.h; openmp/libomptarget/include/rtl.h; openmp/libomptarget/include/SourceInfo.h; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.cpp; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.h; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.cpp; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.h; openmp/libomptarget/plugins/amdgpu/impl/hsa_api.h; openmp/libomptarget/plugins/amdgpu/impl/impl.cpp; openmp/libomptarget/plugins/amdgpu/impl/impl_runtime.h; openmp/libomptarget/plugins/amdgpu/impl/internal.h; openmp/libomptarget/plugins/amdgpu/impl/interop_hsa.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.h; openmp/libomptarget/plugins/amdgpu/impl/rt.h; openmp/libomptarget/plugins/amdgpu/src/print_tracing.h; openmp/libomptarget/plugins/common/elf_common/elf_common.cpp; openmp/libomptarget/plugins/common/elf_common/elf_common.h; openmp/libomptarget/plugins/common/MemoryManager/MemoryManager.h; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.cpp; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.h; openmp/libomptarget/plugins/generic-elf-64bit/src/rtl.cpp; openmp/libomptarget/plugins/remote/include/Utils.h; openmp/libomptarget/plugins/remote/server/OffloadingServer.cpp; openmp/libomptarget/plugins/remote/server/Server.cpp; openmp/libomptarget/plugins/remote/server/Server.h; openmp/libomptarget/plugins/remote/src/Client.cpp; openmp/libomptarget/plugins/remote/src/Client.h; openmp/libomptarget/plugins/ve/src/rtl.cpp; openmp/libomptarget/src/api.cpp; openmp/libomptarget/src/interface.cpp; openmp/libomptarget/s,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:407407,Modifiability,plugin,plugins,407407,enmp/libomptarget/DeviceRTL/src/Tasking.cpp; openmp/libomptarget/DeviceRTL/src/Utils.cpp; openmp/libomptarget/include/Debug.h; openmp/libomptarget/include/device.h; openmp/libomptarget/include/DeviceEnvironment.h; openmp/libomptarget/include/interop.h; openmp/libomptarget/include/omptarget.h; openmp/libomptarget/include/omptargetplugin.h; openmp/libomptarget/include/rtl.h; openmp/libomptarget/include/SourceInfo.h; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.cpp; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.h; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.cpp; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.h; openmp/libomptarget/plugins/amdgpu/impl/hsa_api.h; openmp/libomptarget/plugins/amdgpu/impl/impl.cpp; openmp/libomptarget/plugins/amdgpu/impl/impl_runtime.h; openmp/libomptarget/plugins/amdgpu/impl/internal.h; openmp/libomptarget/plugins/amdgpu/impl/interop_hsa.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.h; openmp/libomptarget/plugins/amdgpu/impl/rt.h; openmp/libomptarget/plugins/amdgpu/src/print_tracing.h; openmp/libomptarget/plugins/common/elf_common/elf_common.cpp; openmp/libomptarget/plugins/common/elf_common/elf_common.h; openmp/libomptarget/plugins/common/MemoryManager/MemoryManager.h; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.cpp; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.h; openmp/libomptarget/plugins/generic-elf-64bit/src/rtl.cpp; openmp/libomptarget/plugins/remote/include/Utils.h; openmp/libomptarget/plugins/remote/server/OffloadingServer.cpp; openmp/libomptarget/plugins/remote/server/Server.cpp; openmp/libomptarget/plugins/remote/server/Server.h; openmp/libomptarget/plugins/remote/src/Client.cpp; openmp/libomptarget/plugins/remote/src/Client.h; openmp/libomptarget/plugins/ve/src/rtl.cpp; openmp/libomptarget/src/api.cpp; openmp/libomptarget/src/interface.cpp; openmp/libomptarget/src/interop.cpp; openmp/libomptarget/src/omptarget.cpp,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:407458,Modifiability,plugin,plugins,407458,p/libomptarget/DeviceRTL/src/Utils.cpp; openmp/libomptarget/include/Debug.h; openmp/libomptarget/include/device.h; openmp/libomptarget/include/DeviceEnvironment.h; openmp/libomptarget/include/interop.h; openmp/libomptarget/include/omptarget.h; openmp/libomptarget/include/omptargetplugin.h; openmp/libomptarget/include/rtl.h; openmp/libomptarget/include/SourceInfo.h; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.cpp; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.h; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.cpp; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.h; openmp/libomptarget/plugins/amdgpu/impl/hsa_api.h; openmp/libomptarget/plugins/amdgpu/impl/impl.cpp; openmp/libomptarget/plugins/amdgpu/impl/impl_runtime.h; openmp/libomptarget/plugins/amdgpu/impl/internal.h; openmp/libomptarget/plugins/amdgpu/impl/interop_hsa.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.h; openmp/libomptarget/plugins/amdgpu/impl/rt.h; openmp/libomptarget/plugins/amdgpu/src/print_tracing.h; openmp/libomptarget/plugins/common/elf_common/elf_common.cpp; openmp/libomptarget/plugins/common/elf_common/elf_common.h; openmp/libomptarget/plugins/common/MemoryManager/MemoryManager.h; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.cpp; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.h; openmp/libomptarget/plugins/generic-elf-64bit/src/rtl.cpp; openmp/libomptarget/plugins/remote/include/Utils.h; openmp/libomptarget/plugins/remote/server/OffloadingServer.cpp; openmp/libomptarget/plugins/remote/server/Server.cpp; openmp/libomptarget/plugins/remote/server/Server.h; openmp/libomptarget/plugins/remote/src/Client.cpp; openmp/libomptarget/plugins/remote/src/Client.h; openmp/libomptarget/plugins/ve/src/rtl.cpp; openmp/libomptarget/src/api.cpp; openmp/libomptarget/src/interface.cpp; openmp/libomptarget/src/interop.cpp; openmp/libomptarget/src/omptarget.cpp; openmp/libomptarget/src/private.h; openmp/libom,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:407504,Modifiability,plugin,plugins,407504,mptarget/include/Debug.h; openmp/libomptarget/include/device.h; openmp/libomptarget/include/DeviceEnvironment.h; openmp/libomptarget/include/interop.h; openmp/libomptarget/include/omptarget.h; openmp/libomptarget/include/omptargetplugin.h; openmp/libomptarget/include/rtl.h; openmp/libomptarget/include/SourceInfo.h; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.cpp; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.h; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.cpp; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.h; openmp/libomptarget/plugins/amdgpu/impl/hsa_api.h; openmp/libomptarget/plugins/amdgpu/impl/impl.cpp; openmp/libomptarget/plugins/amdgpu/impl/impl_runtime.h; openmp/libomptarget/plugins/amdgpu/impl/internal.h; openmp/libomptarget/plugins/amdgpu/impl/interop_hsa.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.h; openmp/libomptarget/plugins/amdgpu/impl/rt.h; openmp/libomptarget/plugins/amdgpu/src/print_tracing.h; openmp/libomptarget/plugins/common/elf_common/elf_common.cpp; openmp/libomptarget/plugins/common/elf_common/elf_common.h; openmp/libomptarget/plugins/common/MemoryManager/MemoryManager.h; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.cpp; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.h; openmp/libomptarget/plugins/generic-elf-64bit/src/rtl.cpp; openmp/libomptarget/plugins/remote/include/Utils.h; openmp/libomptarget/plugins/remote/server/OffloadingServer.cpp; openmp/libomptarget/plugins/remote/server/Server.cpp; openmp/libomptarget/plugins/remote/server/Server.h; openmp/libomptarget/plugins/remote/src/Client.cpp; openmp/libomptarget/plugins/remote/src/Client.h; openmp/libomptarget/plugins/ve/src/rtl.cpp; openmp/libomptarget/src/api.cpp; openmp/libomptarget/src/interface.cpp; openmp/libomptarget/src/interop.cpp; openmp/libomptarget/src/omptarget.cpp; openmp/libomptarget/src/private.h; openmp/libomptarget/src/rtl.cpp; openmp/libomptarget/tools/devi,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:407560,Modifiability,plugin,plugins,407560,ce.h; openmp/libomptarget/include/DeviceEnvironment.h; openmp/libomptarget/include/interop.h; openmp/libomptarget/include/omptarget.h; openmp/libomptarget/include/omptargetplugin.h; openmp/libomptarget/include/rtl.h; openmp/libomptarget/include/SourceInfo.h; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.cpp; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.h; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.cpp; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.h; openmp/libomptarget/plugins/amdgpu/impl/hsa_api.h; openmp/libomptarget/plugins/amdgpu/impl/impl.cpp; openmp/libomptarget/plugins/amdgpu/impl/impl_runtime.h; openmp/libomptarget/plugins/amdgpu/impl/internal.h; openmp/libomptarget/plugins/amdgpu/impl/interop_hsa.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.h; openmp/libomptarget/plugins/amdgpu/impl/rt.h; openmp/libomptarget/plugins/amdgpu/src/print_tracing.h; openmp/libomptarget/plugins/common/elf_common/elf_common.cpp; openmp/libomptarget/plugins/common/elf_common/elf_common.h; openmp/libomptarget/plugins/common/MemoryManager/MemoryManager.h; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.cpp; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.h; openmp/libomptarget/plugins/generic-elf-64bit/src/rtl.cpp; openmp/libomptarget/plugins/remote/include/Utils.h; openmp/libomptarget/plugins/remote/server/OffloadingServer.cpp; openmp/libomptarget/plugins/remote/server/Server.cpp; openmp/libomptarget/plugins/remote/server/Server.h; openmp/libomptarget/plugins/remote/src/Client.cpp; openmp/libomptarget/plugins/remote/src/Client.h; openmp/libomptarget/plugins/ve/src/rtl.cpp; openmp/libomptarget/src/api.cpp; openmp/libomptarget/src/interface.cpp; openmp/libomptarget/src/interop.cpp; openmp/libomptarget/src/omptarget.cpp; openmp/libomptarget/src/private.h; openmp/libomptarget/src/rtl.cpp; openmp/libomptarget/tools/deviceinfo/llvm-omp-device-info.cpp; openmp/runtime/doc/doxyge,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:407622,Modifiability,plugin,plugins,407622,/libomptarget/include/interop.h; openmp/libomptarget/include/omptarget.h; openmp/libomptarget/include/omptargetplugin.h; openmp/libomptarget/include/rtl.h; openmp/libomptarget/include/SourceInfo.h; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.cpp; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.h; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.cpp; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.h; openmp/libomptarget/plugins/amdgpu/impl/hsa_api.h; openmp/libomptarget/plugins/amdgpu/impl/impl.cpp; openmp/libomptarget/plugins/amdgpu/impl/impl_runtime.h; openmp/libomptarget/plugins/amdgpu/impl/internal.h; openmp/libomptarget/plugins/amdgpu/impl/interop_hsa.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.h; openmp/libomptarget/plugins/amdgpu/impl/rt.h; openmp/libomptarget/plugins/amdgpu/src/print_tracing.h; openmp/libomptarget/plugins/common/elf_common/elf_common.cpp; openmp/libomptarget/plugins/common/elf_common/elf_common.h; openmp/libomptarget/plugins/common/MemoryManager/MemoryManager.h; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.cpp; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.h; openmp/libomptarget/plugins/generic-elf-64bit/src/rtl.cpp; openmp/libomptarget/plugins/remote/include/Utils.h; openmp/libomptarget/plugins/remote/server/OffloadingServer.cpp; openmp/libomptarget/plugins/remote/server/Server.cpp; openmp/libomptarget/plugins/remote/server/Server.h; openmp/libomptarget/plugins/remote/src/Client.cpp; openmp/libomptarget/plugins/remote/src/Client.h; openmp/libomptarget/plugins/ve/src/rtl.cpp; openmp/libomptarget/src/api.cpp; openmp/libomptarget/src/interface.cpp; openmp/libomptarget/src/interop.cpp; openmp/libomptarget/src/omptarget.cpp; openmp/libomptarget/src/private.h; openmp/libomptarget/src/rtl.cpp; openmp/libomptarget/tools/deviceinfo/llvm-omp-device-info.cpp; openmp/runtime/doc/doxygen/libomp_interface.h; openmp/runtime/src/extractExternal.cpp;,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:407682,Modifiability,plugin,plugins,407682,target.h; openmp/libomptarget/include/omptargetplugin.h; openmp/libomptarget/include/rtl.h; openmp/libomptarget/include/SourceInfo.h; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.cpp; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.h; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.cpp; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.h; openmp/libomptarget/plugins/amdgpu/impl/hsa_api.h; openmp/libomptarget/plugins/amdgpu/impl/impl.cpp; openmp/libomptarget/plugins/amdgpu/impl/impl_runtime.h; openmp/libomptarget/plugins/amdgpu/impl/internal.h; openmp/libomptarget/plugins/amdgpu/impl/interop_hsa.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.h; openmp/libomptarget/plugins/amdgpu/impl/rt.h; openmp/libomptarget/plugins/amdgpu/src/print_tracing.h; openmp/libomptarget/plugins/common/elf_common/elf_common.cpp; openmp/libomptarget/plugins/common/elf_common/elf_common.h; openmp/libomptarget/plugins/common/MemoryManager/MemoryManager.h; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.cpp; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.h; openmp/libomptarget/plugins/generic-elf-64bit/src/rtl.cpp; openmp/libomptarget/plugins/remote/include/Utils.h; openmp/libomptarget/plugins/remote/server/OffloadingServer.cpp; openmp/libomptarget/plugins/remote/server/Server.cpp; openmp/libomptarget/plugins/remote/server/Server.h; openmp/libomptarget/plugins/remote/src/Client.cpp; openmp/libomptarget/plugins/remote/src/Client.h; openmp/libomptarget/plugins/ve/src/rtl.cpp; openmp/libomptarget/src/api.cpp; openmp/libomptarget/src/interface.cpp; openmp/libomptarget/src/interop.cpp; openmp/libomptarget/src/omptarget.cpp; openmp/libomptarget/src/private.h; openmp/libomptarget/src/rtl.cpp; openmp/libomptarget/tools/deviceinfo/llvm-omp-device-info.cpp; openmp/runtime/doc/doxygen/libomp_interface.h; openmp/runtime/src/extractExternal.cpp; openmp/runtime/src/kmp.h; openmp/runtime/src/kmp_affinity.h; op,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:407748,Modifiability,plugin,plugins,407748,nmp/libomptarget/include/rtl.h; openmp/libomptarget/include/SourceInfo.h; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.cpp; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.h; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.cpp; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.h; openmp/libomptarget/plugins/amdgpu/impl/hsa_api.h; openmp/libomptarget/plugins/amdgpu/impl/impl.cpp; openmp/libomptarget/plugins/amdgpu/impl/impl_runtime.h; openmp/libomptarget/plugins/amdgpu/impl/internal.h; openmp/libomptarget/plugins/amdgpu/impl/interop_hsa.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.h; openmp/libomptarget/plugins/amdgpu/impl/rt.h; openmp/libomptarget/plugins/amdgpu/src/print_tracing.h; openmp/libomptarget/plugins/common/elf_common/elf_common.cpp; openmp/libomptarget/plugins/common/elf_common/elf_common.h; openmp/libomptarget/plugins/common/MemoryManager/MemoryManager.h; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.cpp; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.h; openmp/libomptarget/plugins/generic-elf-64bit/src/rtl.cpp; openmp/libomptarget/plugins/remote/include/Utils.h; openmp/libomptarget/plugins/remote/server/OffloadingServer.cpp; openmp/libomptarget/plugins/remote/server/Server.cpp; openmp/libomptarget/plugins/remote/server/Server.h; openmp/libomptarget/plugins/remote/src/Client.cpp; openmp/libomptarget/plugins/remote/src/Client.h; openmp/libomptarget/plugins/ve/src/rtl.cpp; openmp/libomptarget/src/api.cpp; openmp/libomptarget/src/interface.cpp; openmp/libomptarget/src/interop.cpp; openmp/libomptarget/src/omptarget.cpp; openmp/libomptarget/src/private.h; openmp/libomptarget/src/rtl.cpp; openmp/libomptarget/tools/deviceinfo/llvm-omp-device-info.cpp; openmp/runtime/doc/doxygen/libomp_interface.h; openmp/runtime/src/extractExternal.cpp; openmp/runtime/src/kmp.h; openmp/runtime/src/kmp_affinity.h; openmp/runtime/src/kmp_alloc.cpp; openmp/runtime/src/kmp_atomi,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:407804,Modifiability,plugin,plugins,407804,lude/SourceInfo.h; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.cpp; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.h; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.cpp; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.h; openmp/libomptarget/plugins/amdgpu/impl/hsa_api.h; openmp/libomptarget/plugins/amdgpu/impl/impl.cpp; openmp/libomptarget/plugins/amdgpu/impl/impl_runtime.h; openmp/libomptarget/plugins/amdgpu/impl/internal.h; openmp/libomptarget/plugins/amdgpu/impl/interop_hsa.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.h; openmp/libomptarget/plugins/amdgpu/impl/rt.h; openmp/libomptarget/plugins/amdgpu/src/print_tracing.h; openmp/libomptarget/plugins/common/elf_common/elf_common.cpp; openmp/libomptarget/plugins/common/elf_common/elf_common.h; openmp/libomptarget/plugins/common/MemoryManager/MemoryManager.h; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.cpp; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.h; openmp/libomptarget/plugins/generic-elf-64bit/src/rtl.cpp; openmp/libomptarget/plugins/remote/include/Utils.h; openmp/libomptarget/plugins/remote/server/OffloadingServer.cpp; openmp/libomptarget/plugins/remote/server/Server.cpp; openmp/libomptarget/plugins/remote/server/Server.h; openmp/libomptarget/plugins/remote/src/Client.cpp; openmp/libomptarget/plugins/remote/src/Client.h; openmp/libomptarget/plugins/ve/src/rtl.cpp; openmp/libomptarget/src/api.cpp; openmp/libomptarget/src/interface.cpp; openmp/libomptarget/src/interop.cpp; openmp/libomptarget/src/omptarget.cpp; openmp/libomptarget/src/private.h; openmp/libomptarget/src/rtl.cpp; openmp/libomptarget/tools/deviceinfo/llvm-omp-device-info.cpp; openmp/runtime/doc/doxygen/libomp_interface.h; openmp/runtime/src/extractExternal.cpp; openmp/runtime/src/kmp.h; openmp/runtime/src/kmp_affinity.h; openmp/runtime/src/kmp_alloc.cpp; openmp/runtime/src/kmp_atomic.cpp; openmp/runtime/src/kmp_atomic.h; openmp/runtime/,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:407858,Modifiability,plugin,plugins,407858,namic_hsa/hsa.cpp; openmp/libomptarget/plugins/amdgpu/dynamic_hsa/hsa.h; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.cpp; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.h; openmp/libomptarget/plugins/amdgpu/impl/hsa_api.h; openmp/libomptarget/plugins/amdgpu/impl/impl.cpp; openmp/libomptarget/plugins/amdgpu/impl/impl_runtime.h; openmp/libomptarget/plugins/amdgpu/impl/internal.h; openmp/libomptarget/plugins/amdgpu/impl/interop_hsa.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.h; openmp/libomptarget/plugins/amdgpu/impl/rt.h; openmp/libomptarget/plugins/amdgpu/src/print_tracing.h; openmp/libomptarget/plugins/common/elf_common/elf_common.cpp; openmp/libomptarget/plugins/common/elf_common/elf_common.h; openmp/libomptarget/plugins/common/MemoryManager/MemoryManager.h; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.cpp; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.h; openmp/libomptarget/plugins/generic-elf-64bit/src/rtl.cpp; openmp/libomptarget/plugins/remote/include/Utils.h; openmp/libomptarget/plugins/remote/server/OffloadingServer.cpp; openmp/libomptarget/plugins/remote/server/Server.cpp; openmp/libomptarget/plugins/remote/server/Server.h; openmp/libomptarget/plugins/remote/src/Client.cpp; openmp/libomptarget/plugins/remote/src/Client.h; openmp/libomptarget/plugins/ve/src/rtl.cpp; openmp/libomptarget/src/api.cpp; openmp/libomptarget/src/interface.cpp; openmp/libomptarget/src/interop.cpp; openmp/libomptarget/src/omptarget.cpp; openmp/libomptarget/src/private.h; openmp/libomptarget/src/rtl.cpp; openmp/libomptarget/tools/deviceinfo/llvm-omp-device-info.cpp; openmp/runtime/doc/doxygen/libomp_interface.h; openmp/runtime/src/extractExternal.cpp; openmp/runtime/src/kmp.h; openmp/runtime/src/kmp_affinity.h; openmp/runtime/src/kmp_alloc.cpp; openmp/runtime/src/kmp_atomic.cpp; openmp/runtime/src/kmp_atomic.h; openmp/runtime/src/kmp_barrier.h; openmp/runtime/src/kmp_cancel.cpp; ope,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:407917,Modifiability,plugin,plugins,407917,namic_hsa/hsa.h; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.cpp; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.h; openmp/libomptarget/plugins/amdgpu/impl/hsa_api.h; openmp/libomptarget/plugins/amdgpu/impl/impl.cpp; openmp/libomptarget/plugins/amdgpu/impl/impl_runtime.h; openmp/libomptarget/plugins/amdgpu/impl/internal.h; openmp/libomptarget/plugins/amdgpu/impl/interop_hsa.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.h; openmp/libomptarget/plugins/amdgpu/impl/rt.h; openmp/libomptarget/plugins/amdgpu/src/print_tracing.h; openmp/libomptarget/plugins/common/elf_common/elf_common.cpp; openmp/libomptarget/plugins/common/elf_common/elf_common.h; openmp/libomptarget/plugins/common/MemoryManager/MemoryManager.h; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.cpp; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.h; openmp/libomptarget/plugins/generic-elf-64bit/src/rtl.cpp; openmp/libomptarget/plugins/remote/include/Utils.h; openmp/libomptarget/plugins/remote/server/OffloadingServer.cpp; openmp/libomptarget/plugins/remote/server/Server.cpp; openmp/libomptarget/plugins/remote/server/Server.h; openmp/libomptarget/plugins/remote/src/Client.cpp; openmp/libomptarget/plugins/remote/src/Client.h; openmp/libomptarget/plugins/ve/src/rtl.cpp; openmp/libomptarget/src/api.cpp; openmp/libomptarget/src/interface.cpp; openmp/libomptarget/src/interop.cpp; openmp/libomptarget/src/omptarget.cpp; openmp/libomptarget/src/private.h; openmp/libomptarget/src/rtl.cpp; openmp/libomptarget/tools/deviceinfo/llvm-omp-device-info.cpp; openmp/runtime/doc/doxygen/libomp_interface.h; openmp/runtime/src/extractExternal.cpp; openmp/runtime/src/kmp.h; openmp/runtime/src/kmp_affinity.h; openmp/runtime/src/kmp_alloc.cpp; openmp/runtime/src/kmp_atomic.cpp; openmp/runtime/src/kmp_atomic.h; openmp/runtime/src/kmp_barrier.h; openmp/runtime/src/kmp_cancel.cpp; openmp/runtime/src/kmp_debug.cpp; openmp/runtime/src/kmp_d,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:407969,Modifiability,plugin,plugins,407969,et_elf_mach_gfx_name.cpp; openmp/libomptarget/plugins/amdgpu/impl/get_elf_mach_gfx_name.h; openmp/libomptarget/plugins/amdgpu/impl/hsa_api.h; openmp/libomptarget/plugins/amdgpu/impl/impl.cpp; openmp/libomptarget/plugins/amdgpu/impl/impl_runtime.h; openmp/libomptarget/plugins/amdgpu/impl/internal.h; openmp/libomptarget/plugins/amdgpu/impl/interop_hsa.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.h; openmp/libomptarget/plugins/amdgpu/impl/rt.h; openmp/libomptarget/plugins/amdgpu/src/print_tracing.h; openmp/libomptarget/plugins/common/elf_common/elf_common.cpp; openmp/libomptarget/plugins/common/elf_common/elf_common.h; openmp/libomptarget/plugins/common/MemoryManager/MemoryManager.h; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.cpp; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.h; openmp/libomptarget/plugins/generic-elf-64bit/src/rtl.cpp; openmp/libomptarget/plugins/remote/include/Utils.h; openmp/libomptarget/plugins/remote/server/OffloadingServer.cpp; openmp/libomptarget/plugins/remote/server/Server.cpp; openmp/libomptarget/plugins/remote/server/Server.h; openmp/libomptarget/plugins/remote/src/Client.cpp; openmp/libomptarget/plugins/remote/src/Client.h; openmp/libomptarget/plugins/ve/src/rtl.cpp; openmp/libomptarget/src/api.cpp; openmp/libomptarget/src/interface.cpp; openmp/libomptarget/src/interop.cpp; openmp/libomptarget/src/omptarget.cpp; openmp/libomptarget/src/private.h; openmp/libomptarget/src/rtl.cpp; openmp/libomptarget/tools/deviceinfo/llvm-omp-device-info.cpp; openmp/runtime/doc/doxygen/libomp_interface.h; openmp/runtime/src/extractExternal.cpp; openmp/runtime/src/kmp.h; openmp/runtime/src/kmp_affinity.h; openmp/runtime/src/kmp_alloc.cpp; openmp/runtime/src/kmp_atomic.cpp; openmp/runtime/src/kmp_atomic.h; openmp/runtime/src/kmp_barrier.h; openmp/runtime/src/kmp_cancel.cpp; openmp/runtime/src/kmp_debug.cpp; openmp/runtime/src/kmp_debug.h; openmp/runtime/src/kmp_debugger.cpp; openmp/runtim,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:408033,Modifiability,plugin,plugins,408033,pu/impl/get_elf_mach_gfx_name.h; openmp/libomptarget/plugins/amdgpu/impl/hsa_api.h; openmp/libomptarget/plugins/amdgpu/impl/impl.cpp; openmp/libomptarget/plugins/amdgpu/impl/impl_runtime.h; openmp/libomptarget/plugins/amdgpu/impl/internal.h; openmp/libomptarget/plugins/amdgpu/impl/interop_hsa.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.h; openmp/libomptarget/plugins/amdgpu/impl/rt.h; openmp/libomptarget/plugins/amdgpu/src/print_tracing.h; openmp/libomptarget/plugins/common/elf_common/elf_common.cpp; openmp/libomptarget/plugins/common/elf_common/elf_common.h; openmp/libomptarget/plugins/common/MemoryManager/MemoryManager.h; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.cpp; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.h; openmp/libomptarget/plugins/generic-elf-64bit/src/rtl.cpp; openmp/libomptarget/plugins/remote/include/Utils.h; openmp/libomptarget/plugins/remote/server/OffloadingServer.cpp; openmp/libomptarget/plugins/remote/server/Server.cpp; openmp/libomptarget/plugins/remote/server/Server.h; openmp/libomptarget/plugins/remote/src/Client.cpp; openmp/libomptarget/plugins/remote/src/Client.h; openmp/libomptarget/plugins/ve/src/rtl.cpp; openmp/libomptarget/src/api.cpp; openmp/libomptarget/src/interface.cpp; openmp/libomptarget/src/interop.cpp; openmp/libomptarget/src/omptarget.cpp; openmp/libomptarget/src/private.h; openmp/libomptarget/src/rtl.cpp; openmp/libomptarget/tools/deviceinfo/llvm-omp-device-info.cpp; openmp/runtime/doc/doxygen/libomp_interface.h; openmp/runtime/src/extractExternal.cpp; openmp/runtime/src/kmp.h; openmp/runtime/src/kmp_affinity.h; openmp/runtime/src/kmp_alloc.cpp; openmp/runtime/src/kmp_atomic.cpp; openmp/runtime/src/kmp_atomic.h; openmp/runtime/src/kmp_barrier.h; openmp/runtime/src/kmp_cancel.cpp; openmp/runtime/src/kmp_debug.cpp; openmp/runtime/src/kmp_debug.h; openmp/runtime/src/kmp_debugger.cpp; openmp/runtime/src/kmp_debugger.h; openmp/runtime/src/kmp_dispatch.cpp;,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:408087,Modifiability,plugin,plugins,408087,lugins/amdgpu/impl/hsa_api.h; openmp/libomptarget/plugins/amdgpu/impl/impl.cpp; openmp/libomptarget/plugins/amdgpu/impl/impl_runtime.h; openmp/libomptarget/plugins/amdgpu/impl/internal.h; openmp/libomptarget/plugins/amdgpu/impl/interop_hsa.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.h; openmp/libomptarget/plugins/amdgpu/impl/rt.h; openmp/libomptarget/plugins/amdgpu/src/print_tracing.h; openmp/libomptarget/plugins/common/elf_common/elf_common.cpp; openmp/libomptarget/plugins/common/elf_common/elf_common.h; openmp/libomptarget/plugins/common/MemoryManager/MemoryManager.h; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.cpp; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.h; openmp/libomptarget/plugins/generic-elf-64bit/src/rtl.cpp; openmp/libomptarget/plugins/remote/include/Utils.h; openmp/libomptarget/plugins/remote/server/OffloadingServer.cpp; openmp/libomptarget/plugins/remote/server/Server.cpp; openmp/libomptarget/plugins/remote/server/Server.h; openmp/libomptarget/plugins/remote/src/Client.cpp; openmp/libomptarget/plugins/remote/src/Client.h; openmp/libomptarget/plugins/ve/src/rtl.cpp; openmp/libomptarget/src/api.cpp; openmp/libomptarget/src/interface.cpp; openmp/libomptarget/src/interop.cpp; openmp/libomptarget/src/omptarget.cpp; openmp/libomptarget/src/private.h; openmp/libomptarget/src/rtl.cpp; openmp/libomptarget/tools/deviceinfo/llvm-omp-device-info.cpp; openmp/runtime/doc/doxygen/libomp_interface.h; openmp/runtime/src/extractExternal.cpp; openmp/runtime/src/kmp.h; openmp/runtime/src/kmp_affinity.h; openmp/runtime/src/kmp_alloc.cpp; openmp/runtime/src/kmp_atomic.cpp; openmp/runtime/src/kmp_atomic.h; openmp/runtime/src/kmp_barrier.h; openmp/runtime/src/kmp_cancel.cpp; openmp/runtime/src/kmp_debug.cpp; openmp/runtime/src/kmp_debug.h; openmp/runtime/src/kmp_debugger.cpp; openmp/runtime/src/kmp_debugger.h; openmp/runtime/src/kmp_dispatch.cpp; openmp/runtime/src/kmp_dispatch.h; openmp/runtime/src,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:408139,Modifiability,plugin,plugins,408139,lugins/amdgpu/impl/impl.cpp; openmp/libomptarget/plugins/amdgpu/impl/impl_runtime.h; openmp/libomptarget/plugins/amdgpu/impl/internal.h; openmp/libomptarget/plugins/amdgpu/impl/interop_hsa.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.h; openmp/libomptarget/plugins/amdgpu/impl/rt.h; openmp/libomptarget/plugins/amdgpu/src/print_tracing.h; openmp/libomptarget/plugins/common/elf_common/elf_common.cpp; openmp/libomptarget/plugins/common/elf_common/elf_common.h; openmp/libomptarget/plugins/common/MemoryManager/MemoryManager.h; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.cpp; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.h; openmp/libomptarget/plugins/generic-elf-64bit/src/rtl.cpp; openmp/libomptarget/plugins/remote/include/Utils.h; openmp/libomptarget/plugins/remote/server/OffloadingServer.cpp; openmp/libomptarget/plugins/remote/server/Server.cpp; openmp/libomptarget/plugins/remote/server/Server.h; openmp/libomptarget/plugins/remote/src/Client.cpp; openmp/libomptarget/plugins/remote/src/Client.h; openmp/libomptarget/plugins/ve/src/rtl.cpp; openmp/libomptarget/src/api.cpp; openmp/libomptarget/src/interface.cpp; openmp/libomptarget/src/interop.cpp; openmp/libomptarget/src/omptarget.cpp; openmp/libomptarget/src/private.h; openmp/libomptarget/src/rtl.cpp; openmp/libomptarget/tools/deviceinfo/llvm-omp-device-info.cpp; openmp/runtime/doc/doxygen/libomp_interface.h; openmp/runtime/src/extractExternal.cpp; openmp/runtime/src/kmp.h; openmp/runtime/src/kmp_affinity.h; openmp/runtime/src/kmp_alloc.cpp; openmp/runtime/src/kmp_atomic.cpp; openmp/runtime/src/kmp_atomic.h; openmp/runtime/src/kmp_barrier.h; openmp/runtime/src/kmp_cancel.cpp; openmp/runtime/src/kmp_debug.cpp; openmp/runtime/src/kmp_debug.h; openmp/runtime/src/kmp_debugger.cpp; openmp/runtime/src/kmp_debugger.h; openmp/runtime/src/kmp_dispatch.cpp; openmp/runtime/src/kmp_dispatch.h; openmp/runtime/src/kmp_dispatch_hier.h; openmp/runtime/src/kmp_environ,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:408190,Modifiability,plugin,plugins,408190,lugins/amdgpu/impl/impl_runtime.h; openmp/libomptarget/plugins/amdgpu/impl/internal.h; openmp/libomptarget/plugins/amdgpu/impl/interop_hsa.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.h; openmp/libomptarget/plugins/amdgpu/impl/rt.h; openmp/libomptarget/plugins/amdgpu/src/print_tracing.h; openmp/libomptarget/plugins/common/elf_common/elf_common.cpp; openmp/libomptarget/plugins/common/elf_common/elf_common.h; openmp/libomptarget/plugins/common/MemoryManager/MemoryManager.h; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.cpp; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.h; openmp/libomptarget/plugins/generic-elf-64bit/src/rtl.cpp; openmp/libomptarget/plugins/remote/include/Utils.h; openmp/libomptarget/plugins/remote/server/OffloadingServer.cpp; openmp/libomptarget/plugins/remote/server/Server.cpp; openmp/libomptarget/plugins/remote/server/Server.h; openmp/libomptarget/plugins/remote/src/Client.cpp; openmp/libomptarget/plugins/remote/src/Client.h; openmp/libomptarget/plugins/ve/src/rtl.cpp; openmp/libomptarget/src/api.cpp; openmp/libomptarget/src/interface.cpp; openmp/libomptarget/src/interop.cpp; openmp/libomptarget/src/omptarget.cpp; openmp/libomptarget/src/private.h; openmp/libomptarget/src/rtl.cpp; openmp/libomptarget/tools/deviceinfo/llvm-omp-device-info.cpp; openmp/runtime/doc/doxygen/libomp_interface.h; openmp/runtime/src/extractExternal.cpp; openmp/runtime/src/kmp.h; openmp/runtime/src/kmp_affinity.h; openmp/runtime/src/kmp_alloc.cpp; openmp/runtime/src/kmp_atomic.cpp; openmp/runtime/src/kmp_atomic.h; openmp/runtime/src/kmp_barrier.h; openmp/runtime/src/kmp_cancel.cpp; openmp/runtime/src/kmp_debug.cpp; openmp/runtime/src/kmp_debug.h; openmp/runtime/src/kmp_debugger.cpp; openmp/runtime/src/kmp_debugger.h; openmp/runtime/src/kmp_dispatch.cpp; openmp/runtime/src/kmp_dispatch.h; openmp/runtime/src/kmp_dispatch_hier.h; openmp/runtime/src/kmp_environment.cpp; openmp/runtime/src/kmp_environment.h; op,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:408239,Modifiability,plugin,plugins,408239,ptarget/plugins/amdgpu/impl/internal.h; openmp/libomptarget/plugins/amdgpu/impl/interop_hsa.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.cpp; openmp/libomptarget/plugins/amdgpu/impl/msgpack.h; openmp/libomptarget/plugins/amdgpu/impl/rt.h; openmp/libomptarget/plugins/amdgpu/src/print_tracing.h; openmp/libomptarget/plugins/common/elf_common/elf_common.cpp; openmp/libomptarget/plugins/common/elf_common/elf_common.h; openmp/libomptarget/plugins/common/MemoryManager/MemoryManager.h; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.cpp; openmp/libomptarget/plugins/cuda/dynamic_cuda/cuda.h; openmp/libomptarget/plugins/generic-elf-64bit/src/rtl.cpp; openmp/libomptarget/plugins/remote/include/Utils.h; openmp/libomptarget/plugins/remote/server/OffloadingServer.cpp; openmp/libomptarget/plugins/remote/server/Server.cpp; openmp/libomptarget/plugins/remote/server/Server.h; openmp/libomptarget/plugins/remote/src/Client.cpp; openmp/libomptarget/plugins/remote/src/Client.h; openmp/libomptarget/plugins/ve/src/rtl.cpp; openmp/libomptarget/src/api.cpp; openmp/libomptarget/src/interface.cpp; openmp/libomptarget/src/interop.cpp; openmp/libomptarget/src/omptarget.cpp; openmp/libomptarget/src/private.h; openmp/libomptarget/src/rtl.cpp; openmp/libomptarget/tools/deviceinfo/llvm-omp-device-info.cpp; openmp/runtime/doc/doxygen/libomp_interface.h; openmp/runtime/src/extractExternal.cpp; openmp/runtime/src/kmp.h; openmp/runtime/src/kmp_affinity.h; openmp/runtime/src/kmp_alloc.cpp; openmp/runtime/src/kmp_atomic.cpp; openmp/runtime/src/kmp_atomic.h; openmp/runtime/src/kmp_barrier.h; openmp/runtime/src/kmp_cancel.cpp; openmp/runtime/src/kmp_debug.cpp; openmp/runtime/src/kmp_debug.h; openmp/runtime/src/kmp_debugger.cpp; openmp/runtime/src/kmp_debugger.h; openmp/runtime/src/kmp_dispatch.cpp; openmp/runtime/src/kmp_dispatch.h; openmp/runtime/src/kmp_dispatch_hier.h; openmp/runtime/src/kmp_environment.cpp; openmp/runtime/src/kmp_environment.h; openmp/runtime/src/kmp_error.cpp; openmp/runtime,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:418698,Modifiability,config,config,418698,lgorithm_impl.h; pstl/include/pstl/internal/glue_execution_defs.h; pstl/include/pstl/internal/glue_memory_defs.h; pstl/include/pstl/internal/glue_memory_impl.h; pstl/include/pstl/internal/glue_numeric_defs.h; pstl/include/pstl/internal/glue_numeric_impl.h; pstl/include/pstl/internal/numeric_fwd.h; pstl/include/pstl/internal/parallel_backend.h; pstl/include/pstl/internal/parallel_backend_omp.h; pstl/include/pstl/internal/parallel_backend_serial.h; pstl/include/pstl/internal/parallel_backend_utils.h; pstl/include/pstl/internal/parallel_impl.h; pstl/include/pstl/internal/omp/parallel_for.h; pstl/include/pstl/internal/omp/parallel_for_each.h; pstl/include/pstl/internal/omp/parallel_invoke.h; pstl/include/pstl/internal/omp/parallel_reduce.h; pstl/include/pstl/internal/omp/parallel_scan.h; pstl/include/pstl/internal/omp/parallel_stable_partial_sort.h; pstl/include/pstl/internal/omp/parallel_transform_scan.h; pstl/include/pstl/internal/omp/util.h; third-party/benchmark/cmake/thread_safety_attributes.cpp; third-party/benchmark/src/arraysize.h; third-party/benchmark/src/benchmark_api_internal.h; third-party/benchmark/src/benchmark_register.h; third-party/benchmark/src/benchmark_runner.h; third-party/benchmark/src/check.h; third-party/benchmark/src/colorprint.h; third-party/benchmark/src/commandlineflags.h; third-party/benchmark/src/complexity.h; third-party/benchmark/src/counter.h; third-party/benchmark/src/cycleclock.h; third-party/benchmark/src/internal_macros.h; third-party/benchmark/src/log.h; third-party/benchmark/src/mutex.h; third-party/benchmark/src/perf_counters.h; third-party/benchmark/src/re.h; third-party/benchmark/src/sleep.h; third-party/benchmark/src/statistics.h; third-party/benchmark/src/string_util.h; third-party/benchmark/src/thread_manager.h; third-party/benchmark/src/thread_timer.h; third-party/benchmark/src/timers.h; utils/bazel/llvm-project-overlay/clang/include/clang/Config/config.h; utils/bazel/llvm-project-overlay/llvm/include/llvm/Config/config.h; ,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:418766,Modifiability,config,config,418766,lgorithm_impl.h; pstl/include/pstl/internal/glue_execution_defs.h; pstl/include/pstl/internal/glue_memory_defs.h; pstl/include/pstl/internal/glue_memory_impl.h; pstl/include/pstl/internal/glue_numeric_defs.h; pstl/include/pstl/internal/glue_numeric_impl.h; pstl/include/pstl/internal/numeric_fwd.h; pstl/include/pstl/internal/parallel_backend.h; pstl/include/pstl/internal/parallel_backend_omp.h; pstl/include/pstl/internal/parallel_backend_serial.h; pstl/include/pstl/internal/parallel_backend_utils.h; pstl/include/pstl/internal/parallel_impl.h; pstl/include/pstl/internal/omp/parallel_for.h; pstl/include/pstl/internal/omp/parallel_for_each.h; pstl/include/pstl/internal/omp/parallel_invoke.h; pstl/include/pstl/internal/omp/parallel_reduce.h; pstl/include/pstl/internal/omp/parallel_scan.h; pstl/include/pstl/internal/omp/parallel_stable_partial_sort.h; pstl/include/pstl/internal/omp/parallel_transform_scan.h; pstl/include/pstl/internal/omp/util.h; third-party/benchmark/cmake/thread_safety_attributes.cpp; third-party/benchmark/src/arraysize.h; third-party/benchmark/src/benchmark_api_internal.h; third-party/benchmark/src/benchmark_register.h; third-party/benchmark/src/benchmark_runner.h; third-party/benchmark/src/check.h; third-party/benchmark/src/colorprint.h; third-party/benchmark/src/commandlineflags.h; third-party/benchmark/src/complexity.h; third-party/benchmark/src/counter.h; third-party/benchmark/src/cycleclock.h; third-party/benchmark/src/internal_macros.h; third-party/benchmark/src/log.h; third-party/benchmark/src/mutex.h; third-party/benchmark/src/perf_counters.h; third-party/benchmark/src/re.h; third-party/benchmark/src/sleep.h; third-party/benchmark/src/statistics.h; third-party/benchmark/src/string_util.h; third-party/benchmark/src/thread_manager.h; third-party/benchmark/src/thread_timer.h; third-party/benchmark/src/timers.h; utils/bazel/llvm-project-overlay/clang/include/clang/Config/config.h; utils/bazel/llvm-project-overlay/llvm/include/llvm/Config/config.h; ,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:51205,Performance,concurren,concurrency,51205,t/NonTrivialTypesLibcMemoryCallsCheck.cpp; clang-tools-extra/clang-tidy/cert/NonTrivialTypesLibcMemoryCallsCheck.h; clang-tools-extra/clang-tidy/cert/PostfixOperatorCheck.cpp; clang-tools-extra/clang-tidy/cert/PostfixOperatorCheck.h; clang-tools-extra/clang-tidy/cert/ProperlySeededRandomGeneratorCheck.cpp; clang-tools-extra/clang-tidy/cert/ProperlySeededRandomGeneratorCheck.h; clang-tools-extra/clang-tidy/cert/SetLongJmpCheck.cpp; clang-tools-extra/clang-tidy/cert/SetLongJmpCheck.h; clang-tools-extra/clang-tidy/cert/StaticObjectExceptionCheck.cpp; clang-tools-extra/clang-tidy/cert/StaticObjectExceptionCheck.h; clang-tools-extra/clang-tidy/cert/StrToNumCheck.cpp; clang-tools-extra/clang-tidy/cert/StrToNumCheck.h; clang-tools-extra/clang-tidy/cert/ThrownExceptionTypeCheck.cpp; clang-tools-extra/clang-tidy/cert/ThrownExceptionTypeCheck.h; clang-tools-extra/clang-tidy/cert/VariadicFunctionDefCheck.cpp; clang-tools-extra/clang-tidy/cert/VariadicFunctionDefCheck.h; clang-tools-extra/clang-tidy/concurrency/MtUnsafeCheck.cpp; clang-tools-extra/clang-tidy/concurrency/MtUnsafeCheck.h; clang-tools-extra/clang-tidy/concurrency/ThreadCanceltypeAsynchronousCheck.cpp; clang-tools-extra/clang-tidy/concurrency/ThreadCanceltypeAsynchronousCheck.h; clang-tools-extra/clang-tidy/cppcoreguidelines/AvoidGotoCheck.cpp; clang-tools-extra/clang-tidy/cppcoreguidelines/AvoidGotoCheck.h; clang-tools-extra/clang-tidy/cppcoreguidelines/AvoidNonConstGlobalVariablesCheck.cpp; clang-tools-extra/clang-tidy/cppcoreguidelines/AvoidNonConstGlobalVariablesCheck.h; clang-tools-extra/clang-tidy/cppcoreguidelines/CppCoreGuidelinesTidyModule.cpp; clang-tools-extra/clang-tidy/cppcoreguidelines/InitVariablesCheck.cpp; clang-tools-extra/clang-tidy/cppcoreguidelines/InitVariablesCheck.h; clang-tools-extra/clang-tidy/cppcoreguidelines/InterfacesGlobalInitCheck.cpp; clang-tools-extra/clang-tidy/cppcoreguidelines/InterfacesGlobalInitCheck.h; clang-tools-extra/clang-tidy/cppcoreguidelines/MacroUsageCheck.cpp; clang-,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:51265,Performance,concurren,concurrency,51265,a/clang-tidy/cert/NonTrivialTypesLibcMemoryCallsCheck.h; clang-tools-extra/clang-tidy/cert/PostfixOperatorCheck.cpp; clang-tools-extra/clang-tidy/cert/PostfixOperatorCheck.h; clang-tools-extra/clang-tidy/cert/ProperlySeededRandomGeneratorCheck.cpp; clang-tools-extra/clang-tidy/cert/ProperlySeededRandomGeneratorCheck.h; clang-tools-extra/clang-tidy/cert/SetLongJmpCheck.cpp; clang-tools-extra/clang-tidy/cert/SetLongJmpCheck.h; clang-tools-extra/clang-tidy/cert/StaticObjectExceptionCheck.cpp; clang-tools-extra/clang-tidy/cert/StaticObjectExceptionCheck.h; clang-tools-extra/clang-tidy/cert/StrToNumCheck.cpp; clang-tools-extra/clang-tidy/cert/StrToNumCheck.h; clang-tools-extra/clang-tidy/cert/ThrownExceptionTypeCheck.cpp; clang-tools-extra/clang-tidy/cert/ThrownExceptionTypeCheck.h; clang-tools-extra/clang-tidy/cert/VariadicFunctionDefCheck.cpp; clang-tools-extra/clang-tidy/cert/VariadicFunctionDefCheck.h; clang-tools-extra/clang-tidy/concurrency/MtUnsafeCheck.cpp; clang-tools-extra/clang-tidy/concurrency/MtUnsafeCheck.h; clang-tools-extra/clang-tidy/concurrency/ThreadCanceltypeAsynchronousCheck.cpp; clang-tools-extra/clang-tidy/concurrency/ThreadCanceltypeAsynchronousCheck.h; clang-tools-extra/clang-tidy/cppcoreguidelines/AvoidGotoCheck.cpp; clang-tools-extra/clang-tidy/cppcoreguidelines/AvoidGotoCheck.h; clang-tools-extra/clang-tidy/cppcoreguidelines/AvoidNonConstGlobalVariablesCheck.cpp; clang-tools-extra/clang-tidy/cppcoreguidelines/AvoidNonConstGlobalVariablesCheck.h; clang-tools-extra/clang-tidy/cppcoreguidelines/CppCoreGuidelinesTidyModule.cpp; clang-tools-extra/clang-tidy/cppcoreguidelines/InitVariablesCheck.cpp; clang-tools-extra/clang-tidy/cppcoreguidelines/InitVariablesCheck.h; clang-tools-extra/clang-tidy/cppcoreguidelines/InterfacesGlobalInitCheck.cpp; clang-tools-extra/clang-tidy/cppcoreguidelines/InterfacesGlobalInitCheck.h; clang-tools-extra/clang-tidy/cppcoreguidelines/MacroUsageCheck.cpp; clang-tools-extra/clang-tidy/cppcoreguidelines/MacroUsageCheck.h;,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:51323,Performance,concurren,concurrency,51323,extra/clang-tidy/cert/PostfixOperatorCheck.cpp; clang-tools-extra/clang-tidy/cert/PostfixOperatorCheck.h; clang-tools-extra/clang-tidy/cert/ProperlySeededRandomGeneratorCheck.cpp; clang-tools-extra/clang-tidy/cert/ProperlySeededRandomGeneratorCheck.h; clang-tools-extra/clang-tidy/cert/SetLongJmpCheck.cpp; clang-tools-extra/clang-tidy/cert/SetLongJmpCheck.h; clang-tools-extra/clang-tidy/cert/StaticObjectExceptionCheck.cpp; clang-tools-extra/clang-tidy/cert/StaticObjectExceptionCheck.h; clang-tools-extra/clang-tidy/cert/StrToNumCheck.cpp; clang-tools-extra/clang-tidy/cert/StrToNumCheck.h; clang-tools-extra/clang-tidy/cert/ThrownExceptionTypeCheck.cpp; clang-tools-extra/clang-tidy/cert/ThrownExceptionTypeCheck.h; clang-tools-extra/clang-tidy/cert/VariadicFunctionDefCheck.cpp; clang-tools-extra/clang-tidy/cert/VariadicFunctionDefCheck.h; clang-tools-extra/clang-tidy/concurrency/MtUnsafeCheck.cpp; clang-tools-extra/clang-tidy/concurrency/MtUnsafeCheck.h; clang-tools-extra/clang-tidy/concurrency/ThreadCanceltypeAsynchronousCheck.cpp; clang-tools-extra/clang-tidy/concurrency/ThreadCanceltypeAsynchronousCheck.h; clang-tools-extra/clang-tidy/cppcoreguidelines/AvoidGotoCheck.cpp; clang-tools-extra/clang-tidy/cppcoreguidelines/AvoidGotoCheck.h; clang-tools-extra/clang-tidy/cppcoreguidelines/AvoidNonConstGlobalVariablesCheck.cpp; clang-tools-extra/clang-tidy/cppcoreguidelines/AvoidNonConstGlobalVariablesCheck.h; clang-tools-extra/clang-tidy/cppcoreguidelines/CppCoreGuidelinesTidyModule.cpp; clang-tools-extra/clang-tidy/cppcoreguidelines/InitVariablesCheck.cpp; clang-tools-extra/clang-tidy/cppcoreguidelines/InitVariablesCheck.h; clang-tools-extra/clang-tidy/cppcoreguidelines/InterfacesGlobalInitCheck.cpp; clang-tools-extra/clang-tidy/cppcoreguidelines/InterfacesGlobalInitCheck.h; clang-tools-extra/clang-tidy/cppcoreguidelines/MacroUsageCheck.cpp; clang-tools-extra/clang-tidy/cppcoreguidelines/MacroUsageCheck.h; clang-tools-extra/clang-tidy/cppcoreguidelines/NarrowingConversionsC,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:51403,Performance,concurren,concurrency,51403,rt/PostfixOperatorCheck.h; clang-tools-extra/clang-tidy/cert/ProperlySeededRandomGeneratorCheck.cpp; clang-tools-extra/clang-tidy/cert/ProperlySeededRandomGeneratorCheck.h; clang-tools-extra/clang-tidy/cert/SetLongJmpCheck.cpp; clang-tools-extra/clang-tidy/cert/SetLongJmpCheck.h; clang-tools-extra/clang-tidy/cert/StaticObjectExceptionCheck.cpp; clang-tools-extra/clang-tidy/cert/StaticObjectExceptionCheck.h; clang-tools-extra/clang-tidy/cert/StrToNumCheck.cpp; clang-tools-extra/clang-tidy/cert/StrToNumCheck.h; clang-tools-extra/clang-tidy/cert/ThrownExceptionTypeCheck.cpp; clang-tools-extra/clang-tidy/cert/ThrownExceptionTypeCheck.h; clang-tools-extra/clang-tidy/cert/VariadicFunctionDefCheck.cpp; clang-tools-extra/clang-tidy/cert/VariadicFunctionDefCheck.h; clang-tools-extra/clang-tidy/concurrency/MtUnsafeCheck.cpp; clang-tools-extra/clang-tidy/concurrency/MtUnsafeCheck.h; clang-tools-extra/clang-tidy/concurrency/ThreadCanceltypeAsynchronousCheck.cpp; clang-tools-extra/clang-tidy/concurrency/ThreadCanceltypeAsynchronousCheck.h; clang-tools-extra/clang-tidy/cppcoreguidelines/AvoidGotoCheck.cpp; clang-tools-extra/clang-tidy/cppcoreguidelines/AvoidGotoCheck.h; clang-tools-extra/clang-tidy/cppcoreguidelines/AvoidNonConstGlobalVariablesCheck.cpp; clang-tools-extra/clang-tidy/cppcoreguidelines/AvoidNonConstGlobalVariablesCheck.h; clang-tools-extra/clang-tidy/cppcoreguidelines/CppCoreGuidelinesTidyModule.cpp; clang-tools-extra/clang-tidy/cppcoreguidelines/InitVariablesCheck.cpp; clang-tools-extra/clang-tidy/cppcoreguidelines/InitVariablesCheck.h; clang-tools-extra/clang-tidy/cppcoreguidelines/InterfacesGlobalInitCheck.cpp; clang-tools-extra/clang-tidy/cppcoreguidelines/InterfacesGlobalInitCheck.h; clang-tools-extra/clang-tidy/cppcoreguidelines/MacroUsageCheck.cpp; clang-tools-extra/clang-tidy/cppcoreguidelines/MacroUsageCheck.h; clang-tools-extra/clang-tidy/cppcoreguidelines/NarrowingConversionsCheck.cpp; clang-tools-extra/clang-tidy/cppcoreguidelines/NarrowingConversionsCh,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:64705,Performance,perform,performance,64705,tEquals.cpp; clang-tools-extra/clang-tidy/objc/AssertEquals.h; clang-tools-extra/clang-tidy/objc/DeallocInCategoryCheck.cpp; clang-tools-extra/clang-tidy/objc/DeallocInCategoryCheck.h; clang-tools-extra/clang-tidy/objc/ForbiddenSubclassingCheck.h; clang-tools-extra/clang-tidy/objc/MissingHashCheck.cpp; clang-tools-extra/clang-tidy/objc/MissingHashCheck.h; clang-tools-extra/clang-tidy/objc/NSInvocationArgumentLifetimeCheck.cpp; clang-tools-extra/clang-tidy/objc/NSInvocationArgumentLifetimeCheck.h; clang-tools-extra/clang-tidy/objc/PropertyDeclarationCheck.h; clang-tools-extra/clang-tidy/objc/SuperSelfCheck.cpp; clang-tools-extra/clang-tidy/objc/SuperSelfCheck.h; clang-tools-extra/clang-tidy/openmp/ExceptionEscapeCheck.cpp; clang-tools-extra/clang-tidy/openmp/ExceptionEscapeCheck.h; clang-tools-extra/clang-tidy/openmp/OpenMPTidyModule.cpp; clang-tools-extra/clang-tidy/openmp/UseDefaultNoneCheck.cpp; clang-tools-extra/clang-tidy/openmp/UseDefaultNoneCheck.h; clang-tools-extra/clang-tidy/performance/FasterStringFindCheck.cpp; clang-tools-extra/clang-tidy/performance/ForRangeCopyCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.h; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.h; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.cpp; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.h; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.cpp; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.h; clang-tools-extra/clang-tidy/performance/NoIntTo,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:64773,Performance,perform,performance,64773,ang-tools-extra/clang-tidy/objc/DeallocInCategoryCheck.cpp; clang-tools-extra/clang-tidy/objc/DeallocInCategoryCheck.h; clang-tools-extra/clang-tidy/objc/ForbiddenSubclassingCheck.h; clang-tools-extra/clang-tidy/objc/MissingHashCheck.cpp; clang-tools-extra/clang-tidy/objc/MissingHashCheck.h; clang-tools-extra/clang-tidy/objc/NSInvocationArgumentLifetimeCheck.cpp; clang-tools-extra/clang-tidy/objc/NSInvocationArgumentLifetimeCheck.h; clang-tools-extra/clang-tidy/objc/PropertyDeclarationCheck.h; clang-tools-extra/clang-tidy/objc/SuperSelfCheck.cpp; clang-tools-extra/clang-tidy/objc/SuperSelfCheck.h; clang-tools-extra/clang-tidy/openmp/ExceptionEscapeCheck.cpp; clang-tools-extra/clang-tidy/openmp/ExceptionEscapeCheck.h; clang-tools-extra/clang-tidy/openmp/OpenMPTidyModule.cpp; clang-tools-extra/clang-tidy/openmp/UseDefaultNoneCheck.cpp; clang-tools-extra/clang-tidy/openmp/UseDefaultNoneCheck.h; clang-tools-extra/clang-tidy/performance/FasterStringFindCheck.cpp; clang-tools-extra/clang-tidy/performance/ForRangeCopyCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.h; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.h; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.cpp; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.h; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.cpp; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.h; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.cpp; clang-tools-extra/clang-tidy/performance/NoIntToPtr,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:64837,Performance,perform,performance,64837,ols-extra/clang-tidy/objc/DeallocInCategoryCheck.h; clang-tools-extra/clang-tidy/objc/ForbiddenSubclassingCheck.h; clang-tools-extra/clang-tidy/objc/MissingHashCheck.cpp; clang-tools-extra/clang-tidy/objc/MissingHashCheck.h; clang-tools-extra/clang-tidy/objc/NSInvocationArgumentLifetimeCheck.cpp; clang-tools-extra/clang-tidy/objc/NSInvocationArgumentLifetimeCheck.h; clang-tools-extra/clang-tidy/objc/PropertyDeclarationCheck.h; clang-tools-extra/clang-tidy/objc/SuperSelfCheck.cpp; clang-tools-extra/clang-tidy/objc/SuperSelfCheck.h; clang-tools-extra/clang-tidy/openmp/ExceptionEscapeCheck.cpp; clang-tools-extra/clang-tidy/openmp/ExceptionEscapeCheck.h; clang-tools-extra/clang-tidy/openmp/OpenMPTidyModule.cpp; clang-tools-extra/clang-tidy/openmp/UseDefaultNoneCheck.cpp; clang-tools-extra/clang-tidy/openmp/UseDefaultNoneCheck.h; clang-tools-extra/clang-tidy/performance/FasterStringFindCheck.cpp; clang-tools-extra/clang-tidy/performance/ForRangeCopyCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.h; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.h; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.cpp; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.h; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.cpp; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.h; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.cpp; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.h; clang-tools-extra/clang-tidy/performance/PerformanceTidyMod,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:64909,Performance,perform,performance,64909,ang-tidy/objc/ForbiddenSubclassingCheck.h; clang-tools-extra/clang-tidy/objc/MissingHashCheck.cpp; clang-tools-extra/clang-tidy/objc/MissingHashCheck.h; clang-tools-extra/clang-tidy/objc/NSInvocationArgumentLifetimeCheck.cpp; clang-tools-extra/clang-tidy/objc/NSInvocationArgumentLifetimeCheck.h; clang-tools-extra/clang-tidy/objc/PropertyDeclarationCheck.h; clang-tools-extra/clang-tidy/objc/SuperSelfCheck.cpp; clang-tools-extra/clang-tidy/objc/SuperSelfCheck.h; clang-tools-extra/clang-tidy/openmp/ExceptionEscapeCheck.cpp; clang-tools-extra/clang-tidy/openmp/ExceptionEscapeCheck.h; clang-tools-extra/clang-tidy/openmp/OpenMPTidyModule.cpp; clang-tools-extra/clang-tidy/openmp/UseDefaultNoneCheck.cpp; clang-tools-extra/clang-tidy/openmp/UseDefaultNoneCheck.h; clang-tools-extra/clang-tidy/performance/FasterStringFindCheck.cpp; clang-tools-extra/clang-tidy/performance/ForRangeCopyCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.h; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.h; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.cpp; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.h; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.cpp; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.h; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.cpp; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.h; clang-tools-extra/clang-tidy/performance/PerformanceTidyModule.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleC,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:64979,Performance,perform,performance,64979,/MissingHashCheck.cpp; clang-tools-extra/clang-tidy/objc/MissingHashCheck.h; clang-tools-extra/clang-tidy/objc/NSInvocationArgumentLifetimeCheck.cpp; clang-tools-extra/clang-tidy/objc/NSInvocationArgumentLifetimeCheck.h; clang-tools-extra/clang-tidy/objc/PropertyDeclarationCheck.h; clang-tools-extra/clang-tidy/objc/SuperSelfCheck.cpp; clang-tools-extra/clang-tidy/objc/SuperSelfCheck.h; clang-tools-extra/clang-tidy/openmp/ExceptionEscapeCheck.cpp; clang-tools-extra/clang-tidy/openmp/ExceptionEscapeCheck.h; clang-tools-extra/clang-tidy/openmp/OpenMPTidyModule.cpp; clang-tools-extra/clang-tidy/openmp/UseDefaultNoneCheck.cpp; clang-tools-extra/clang-tidy/openmp/UseDefaultNoneCheck.h; clang-tools-extra/clang-tidy/performance/FasterStringFindCheck.cpp; clang-tools-extra/clang-tidy/performance/ForRangeCopyCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.h; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.h; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.cpp; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.h; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.cpp; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.h; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.cpp; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.h; clang-tools-extra/clang-tidy/performance/PerformanceTidyModule.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleChec,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:65061,Performance,perform,performance,65061,g-tools-extra/clang-tidy/objc/NSInvocationArgumentLifetimeCheck.cpp; clang-tools-extra/clang-tidy/objc/NSInvocationArgumentLifetimeCheck.h; clang-tools-extra/clang-tidy/objc/PropertyDeclarationCheck.h; clang-tools-extra/clang-tidy/objc/SuperSelfCheck.cpp; clang-tools-extra/clang-tidy/objc/SuperSelfCheck.h; clang-tools-extra/clang-tidy/openmp/ExceptionEscapeCheck.cpp; clang-tools-extra/clang-tidy/openmp/ExceptionEscapeCheck.h; clang-tools-extra/clang-tidy/openmp/OpenMPTidyModule.cpp; clang-tools-extra/clang-tidy/openmp/UseDefaultNoneCheck.cpp; clang-tools-extra/clang-tidy/openmp/UseDefaultNoneCheck.h; clang-tools-extra/clang-tidy/performance/FasterStringFindCheck.cpp; clang-tools-extra/clang-tidy/performance/ForRangeCopyCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.h; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.h; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.cpp; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.h; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.cpp; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.h; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.cpp; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.h; clang-tools-extra/clang-tidy/performance/PerformanceTidyModule.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.h; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.cpp; cla,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:65141,Performance,perform,performance,65141,ng-tools-extra/clang-tidy/objc/NSInvocationArgumentLifetimeCheck.h; clang-tools-extra/clang-tidy/objc/PropertyDeclarationCheck.h; clang-tools-extra/clang-tidy/objc/SuperSelfCheck.cpp; clang-tools-extra/clang-tidy/objc/SuperSelfCheck.h; clang-tools-extra/clang-tidy/openmp/ExceptionEscapeCheck.cpp; clang-tools-extra/clang-tidy/openmp/ExceptionEscapeCheck.h; clang-tools-extra/clang-tidy/openmp/OpenMPTidyModule.cpp; clang-tools-extra/clang-tidy/openmp/UseDefaultNoneCheck.cpp; clang-tools-extra/clang-tidy/openmp/UseDefaultNoneCheck.h; clang-tools-extra/clang-tidy/performance/FasterStringFindCheck.cpp; clang-tools-extra/clang-tidy/performance/ForRangeCopyCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.h; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.h; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.cpp; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.h; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.cpp; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.h; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.cpp; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.h; clang-tools-extra/clang-tidy/performance/PerformanceTidyModule.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.h; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.cpp; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.h; clan,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:65205,Performance,perform,performance,65205,k.h; clang-tools-extra/clang-tidy/objc/PropertyDeclarationCheck.h; clang-tools-extra/clang-tidy/objc/SuperSelfCheck.cpp; clang-tools-extra/clang-tidy/objc/SuperSelfCheck.h; clang-tools-extra/clang-tidy/openmp/ExceptionEscapeCheck.cpp; clang-tools-extra/clang-tidy/openmp/ExceptionEscapeCheck.h; clang-tools-extra/clang-tidy/openmp/OpenMPTidyModule.cpp; clang-tools-extra/clang-tidy/openmp/UseDefaultNoneCheck.cpp; clang-tools-extra/clang-tidy/openmp/UseDefaultNoneCheck.h; clang-tools-extra/clang-tidy/performance/FasterStringFindCheck.cpp; clang-tools-extra/clang-tidy/performance/ForRangeCopyCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.h; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.h; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.cpp; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.h; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.cpp; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.h; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.cpp; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.h; clang-tools-extra/clang-tidy/performance/PerformanceTidyModule.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.h; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.cpp; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.h; clang-tools-extra/clang-tidy/performance/UnnecessaryCopyInitializat,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:65267,Performance,perform,performance,65267, clang-tools-extra/clang-tidy/objc/SuperSelfCheck.cpp; clang-tools-extra/clang-tidy/objc/SuperSelfCheck.h; clang-tools-extra/clang-tidy/openmp/ExceptionEscapeCheck.cpp; clang-tools-extra/clang-tidy/openmp/ExceptionEscapeCheck.h; clang-tools-extra/clang-tidy/openmp/OpenMPTidyModule.cpp; clang-tools-extra/clang-tidy/openmp/UseDefaultNoneCheck.cpp; clang-tools-extra/clang-tidy/openmp/UseDefaultNoneCheck.h; clang-tools-extra/clang-tidy/performance/FasterStringFindCheck.cpp; clang-tools-extra/clang-tidy/performance/ForRangeCopyCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.h; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.h; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.cpp; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.h; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.cpp; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.h; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.cpp; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.h; clang-tools-extra/clang-tidy/performance/PerformanceTidyModule.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.h; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.cpp; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.h; clang-tools-extra/clang-tidy/performance/UnnecessaryCopyInitialization.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueP,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:65338,Performance,perform,performance,65338,ra/clang-tidy/objc/SuperSelfCheck.h; clang-tools-extra/clang-tidy/openmp/ExceptionEscapeCheck.cpp; clang-tools-extra/clang-tidy/openmp/ExceptionEscapeCheck.h; clang-tools-extra/clang-tidy/openmp/OpenMPTidyModule.cpp; clang-tools-extra/clang-tidy/openmp/UseDefaultNoneCheck.cpp; clang-tools-extra/clang-tidy/openmp/UseDefaultNoneCheck.h; clang-tools-extra/clang-tidy/performance/FasterStringFindCheck.cpp; clang-tools-extra/clang-tidy/performance/ForRangeCopyCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.h; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.h; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.cpp; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.h; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.cpp; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.h; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.cpp; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.h; clang-tools-extra/clang-tidy/performance/PerformanceTidyModule.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.h; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.cpp; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.h; clang-tools-extra/clang-tidy/performance/UnnecessaryCopyInitialization.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryVal,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:65407,Performance,perform,performance,65407,enmp/ExceptionEscapeCheck.cpp; clang-tools-extra/clang-tidy/openmp/ExceptionEscapeCheck.h; clang-tools-extra/clang-tidy/openmp/OpenMPTidyModule.cpp; clang-tools-extra/clang-tidy/openmp/UseDefaultNoneCheck.cpp; clang-tools-extra/clang-tidy/openmp/UseDefaultNoneCheck.h; clang-tools-extra/clang-tidy/performance/FasterStringFindCheck.cpp; clang-tools-extra/clang-tidy/performance/ForRangeCopyCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.h; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.h; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.cpp; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.h; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.cpp; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.h; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.cpp; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.h; clang-tools-extra/clang-tidy/performance/PerformanceTidyModule.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.h; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.cpp; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.h; clang-tools-extra/clang-tidy/performance/UnnecessaryCopyInitialization.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.h; clang-tools-extra/clang-tidy/plugin/ClangTidyPlugin.,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:65474,Performance,perform,performance,65474,/ExceptionEscapeCheck.h; clang-tools-extra/clang-tidy/openmp/OpenMPTidyModule.cpp; clang-tools-extra/clang-tidy/openmp/UseDefaultNoneCheck.cpp; clang-tools-extra/clang-tidy/openmp/UseDefaultNoneCheck.h; clang-tools-extra/clang-tidy/performance/FasterStringFindCheck.cpp; clang-tools-extra/clang-tidy/performance/ForRangeCopyCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.h; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.h; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.cpp; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.h; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.cpp; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.h; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.cpp; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.h; clang-tools-extra/clang-tidy/performance/PerformanceTidyModule.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.h; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.cpp; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.h; clang-tools-extra/clang-tidy/performance/UnnecessaryCopyInitialization.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.h; clang-tools-extra/clang-tidy/plugin/ClangTidyPlugin.cpp; clang-tools-extra/clang-tidy/portability/PortabilityTidyModul,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:65539,Performance,perform,performance,65539,yModule.cpp; clang-tools-extra/clang-tidy/openmp/UseDefaultNoneCheck.cpp; clang-tools-extra/clang-tidy/openmp/UseDefaultNoneCheck.h; clang-tools-extra/clang-tidy/performance/FasterStringFindCheck.cpp; clang-tools-extra/clang-tidy/performance/ForRangeCopyCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.h; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.h; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.cpp; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.h; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.cpp; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.h; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.cpp; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.h; clang-tools-extra/clang-tidy/performance/PerformanceTidyModule.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.h; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.cpp; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.h; clang-tools-extra/clang-tidy/performance/UnnecessaryCopyInitialization.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.h; clang-tools-extra/clang-tidy/plugin/ClangTidyPlugin.cpp; clang-tools-extra/clang-tidy/portability/PortabilityTidyModule.cpp; clang-tools-extra/clang-tidy/portability/RestrictSystemIncludes,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:65614,Performance,perform,performance,65614,clang-tools-extra/clang-tidy/openmp/UseDefaultNoneCheck.h; clang-tools-extra/clang-tidy/performance/FasterStringFindCheck.cpp; clang-tools-extra/clang-tidy/performance/ForRangeCopyCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.h; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.h; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.cpp; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.h; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.cpp; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.h; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.cpp; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.h; clang-tools-extra/clang-tidy/performance/PerformanceTidyModule.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.h; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.cpp; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.h; clang-tools-extra/clang-tidy/performance/UnnecessaryCopyInitialization.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.h; clang-tools-extra/clang-tidy/plugin/ClangTidyPlugin.cpp; clang-tools-extra/clang-tidy/portability/PortabilityTidyModule.cpp; clang-tools-extra/clang-tidy/portability/RestrictSystemIncludesCheck.cpp; clang-tools-extra/clang-tidy/portability/SIMDIntrinsicsCheck.cp,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:65687,Performance,perform,performance,65687,ls-extra/clang-tidy/performance/FasterStringFindCheck.cpp; clang-tools-extra/clang-tidy/performance/ForRangeCopyCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.h; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.h; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.cpp; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.h; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.cpp; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.h; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.cpp; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.h; clang-tools-extra/clang-tidy/performance/PerformanceTidyModule.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.h; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.cpp; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.h; clang-tools-extra/clang-tidy/performance/UnnecessaryCopyInitialization.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.h; clang-tools-extra/clang-tidy/plugin/ClangTidyPlugin.cpp; clang-tools-extra/clang-tidy/portability/PortabilityTidyModule.cpp; clang-tools-extra/clang-tidy/portability/RestrictSystemIncludesCheck.cpp; clang-tools-extra/clang-tidy/portability/SIMDIntrinsicsCheck.cpp; clang-tools-extra/clang-tidy/readability/AvoidConstParamsInDecls,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:65749,Performance,perform,performance,65749,ang-tools-extra/clang-tidy/performance/ForRangeCopyCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.h; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.h; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.cpp; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.h; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.cpp; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.h; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.cpp; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.h; clang-tools-extra/clang-tidy/performance/PerformanceTidyModule.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.h; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.cpp; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.h; clang-tools-extra/clang-tidy/performance/UnnecessaryCopyInitialization.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.h; clang-tools-extra/clang-tidy/plugin/ClangTidyPlugin.cpp; clang-tools-extra/clang-tidy/portability/PortabilityTidyModule.cpp; clang-tools-extra/clang-tidy/portability/RestrictSystemIncludesCheck.cpp; clang-tools-extra/clang-tidy/portability/SIMDIntrinsicsCheck.cpp; clang-tools-extra/clang-tidy/readability/AvoidConstParamsInDecls.h; clang-tools-extra/clang-tidy/readability/BracesAroundStat,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:65809,Performance,perform,performance,65809,ang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.h; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.h; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.cpp; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.h; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.cpp; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.h; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.cpp; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.h; clang-tools-extra/clang-tidy/performance/PerformanceTidyModule.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.h; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.cpp; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.h; clang-tools-extra/clang-tidy/performance/UnnecessaryCopyInitialization.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.h; clang-tools-extra/clang-tidy/plugin/ClangTidyPlugin.cpp; clang-tools-extra/clang-tidy/portability/PortabilityTidyModule.cpp; clang-tools-extra/clang-tidy/portability/RestrictSystemIncludesCheck.cpp; clang-tools-extra/clang-tidy/portability/SIMDIntrinsicsCheck.cpp; clang-tools-extra/clang-tidy/readability/AvoidConstParamsInDecls.h; clang-tools-extra/clang-tidy/readability/BracesAroundStatementsCheck.cpp; clang-tools-extra/clang-tidy/readability/Braces,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:65877,Performance,perform,performance,65877, clang-tools-extra/clang-tidy/performance/InefficientAlgorithmCheck.h; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.h; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.cpp; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.h; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.cpp; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.h; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.cpp; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.h; clang-tools-extra/clang-tidy/performance/PerformanceTidyModule.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.h; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.cpp; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.h; clang-tools-extra/clang-tidy/performance/UnnecessaryCopyInitialization.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.h; clang-tools-extra/clang-tidy/plugin/ClangTidyPlugin.cpp; clang-tools-extra/clang-tidy/portability/PortabilityTidyModule.cpp; clang-tools-extra/clang-tidy/portability/RestrictSystemIncludesCheck.cpp; clang-tools-extra/clang-tidy/portability/SIMDIntrinsicsCheck.cpp; clang-tools-extra/clang-tidy/readability/AvoidConstParamsInDecls.h; clang-tools-extra/clang-tidy/readability/BracesAroundStatementsCheck.cpp; clang-tools-extra/clang-tidy/readability/BracesAroundStatementsCheck.h; clang-tools-extra/clang-tidy/readability/Cons,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:65950,Performance,perform,performance,65950,ang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.cpp; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.h; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.cpp; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.h; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.cpp; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.h; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.cpp; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.h; clang-tools-extra/clang-tidy/performance/PerformanceTidyModule.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.h; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.cpp; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.h; clang-tools-extra/clang-tidy/performance/UnnecessaryCopyInitialization.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.h; clang-tools-extra/clang-tidy/plugin/ClangTidyPlugin.cpp; clang-tools-extra/clang-tidy/portability/PortabilityTidyModule.cpp; clang-tools-extra/clang-tidy/portability/RestrictSystemIncludesCheck.cpp; clang-tools-extra/clang-tidy/portability/SIMDIntrinsicsCheck.cpp; clang-tools-extra/clang-tidy/readability/AvoidConstParamsInDecls.h; clang-tools-extra/clang-tidy/readability/BracesAroundStatementsCheck.cpp; clang-tools-extra/clang-tidy/readability/BracesAroundStatementsCheck.h; clang-tools-extra/clang-tidy/readability/ConstReturnTypeCheck.cpp; clang-tools-extra/clang-tidy/readability/ContainerC,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:66021,Performance,perform,performance,66021,ck.cpp; clang-tools-extra/clang-tidy/performance/InefficientStringConcatenationCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.h; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.cpp; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.h; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.cpp; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.h; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.cpp; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.h; clang-tools-extra/clang-tidy/performance/PerformanceTidyModule.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.h; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.cpp; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.h; clang-tools-extra/clang-tidy/performance/UnnecessaryCopyInitialization.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.h; clang-tools-extra/clang-tidy/plugin/ClangTidyPlugin.cpp; clang-tools-extra/clang-tidy/portability/PortabilityTidyModule.cpp; clang-tools-extra/clang-tidy/portability/RestrictSystemIncludesCheck.cpp; clang-tools-extra/clang-tidy/portability/SIMDIntrinsicsCheck.cpp; clang-tools-extra/clang-tidy/readability/AvoidConstParamsInDecls.h; clang-tools-extra/clang-tidy/readability/BracesAroundStatementsCheck.cpp; clang-tools-extra/clang-tidy/readability/BracesAroundStatementsCheck.h; clang-tools-extra/clang-tidy/readability/ConstReturnTypeCheck.cpp; clang-tools-extra/clang-tidy/readability/ContainerContainsCheck.cpp; clang-tools-extra/clang-tidy/readability/ContainerCont,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:66094,Performance,perform,performance,66094,enationCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.h; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.cpp; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.h; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.cpp; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.h; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.cpp; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.h; clang-tools-extra/clang-tidy/performance/PerformanceTidyModule.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.h; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.cpp; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.h; clang-tools-extra/clang-tidy/performance/UnnecessaryCopyInitialization.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.h; clang-tools-extra/clang-tidy/plugin/ClangTidyPlugin.cpp; clang-tools-extra/clang-tidy/portability/PortabilityTidyModule.cpp; clang-tools-extra/clang-tidy/portability/RestrictSystemIncludesCheck.cpp; clang-tools-extra/clang-tidy/portability/SIMDIntrinsicsCheck.cpp; clang-tools-extra/clang-tidy/readability/AvoidConstParamsInDecls.h; clang-tools-extra/clang-tidy/readability/BracesAroundStatementsCheck.cpp; clang-tools-extra/clang-tidy/readability/BracesAroundStatementsCheck.h; clang-tools-extra/clang-tidy/readability/ConstReturnTypeCheck.cpp; clang-tools-extra/clang-tidy/readability/ContainerContainsCheck.cpp; clang-tools-extra/clang-tidy/readability/ContainerContainsCheck.h; clang-tools-extra/clang-tidy/readability/ContainerDataPoint,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:66165,Performance,perform,performance,66165,.cpp; clang-tools-extra/clang-tidy/performance/MoveConstArgCheck.h; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.h; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.cpp; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.h; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.cpp; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.h; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.cpp; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.h; clang-tools-extra/clang-tidy/performance/PerformanceTidyModule.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.h; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.cpp; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.h; clang-tools-extra/clang-tidy/performance/UnnecessaryCopyInitialization.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.h; clang-tools-extra/clang-tidy/plugin/ClangTidyPlugin.cpp; clang-tools-extra/clang-tidy/portability/PortabilityTidyModule.cpp; clang-tools-extra/clang-tidy/portability/RestrictSystemIncludesCheck.cpp; clang-tools-extra/clang-tidy/portability/SIMDIntrinsicsCheck.cpp; clang-tools-extra/clang-tidy/readability/AvoidConstParamsInDecls.h; clang-tools-extra/clang-tidy/readability/BracesAroundStatementsCheck.cpp; clang-tools-extra/clang-tidy/readability/BracesAroundStatementsCheck.h; clang-tools-extra/clang-tidy/readability/ConstReturnTypeCheck.cpp; clang-tools-extra/clang-tidy/readability/ContainerContainsCheck.cpp; clang-tools-extra/clang-tidy/readability/ContainerContainsCheck.h; clang-tools-extra/clang-tidy/readability/ContainerDataPointerCheck.cpp; clang-tools-extra/clang-tidy/readability/ContainerDataPointe,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:66241,Performance,perform,performance,66241,-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.cpp; clang-tools-extra/clang-tidy/performance/MoveConstructorInitCheck.h; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.cpp; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.h; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.cpp; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.h; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.cpp; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.h; clang-tools-extra/clang-tidy/performance/PerformanceTidyModule.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.h; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.cpp; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.h; clang-tools-extra/clang-tidy/performance/UnnecessaryCopyInitialization.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.h; clang-tools-extra/clang-tidy/plugin/ClangTidyPlugin.cpp; clang-tools-extra/clang-tidy/portability/PortabilityTidyModule.cpp; clang-tools-extra/clang-tidy/portability/RestrictSystemIncludesCheck.cpp; clang-tools-extra/clang-tidy/portability/SIMDIntrinsicsCheck.cpp; clang-tools-extra/clang-tidy/readability/AvoidConstParamsInDecls.h; clang-tools-extra/clang-tidy/readability/BracesAroundStatementsCheck.cpp; clang-tools-extra/clang-tidy/readability/BracesAroundStatementsCheck.h; clang-tools-extra/clang-tidy/readability/ConstReturnTypeCheck.cpp; clang-tools-extra/clang-tidy/readability/ContainerContainsCheck.cpp; clang-tools-extra/clang-tidy/readability/ContainerContainsCheck.h; clang-tools-extra/clang-tidy/readability/ContainerDataPointerCheck.cpp; clang-tools-extra/clang-tidy/readability/ContainerDataPointerCheck.h; clang-tools-extra/clang-tidy/readability/ContainerSizeEmptyCheck,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:66314,Performance,perform,performance,66314,ools-extra/clang-tidy/performance/MoveConstructorInitCheck.h; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.cpp; clang-tools-extra/clang-tidy/performance/NoAutomaticMoveCheck.h; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.cpp; clang-tools-extra/clang-tidy/performance/NoexceptMoveConstructorCheck.h; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.cpp; clang-tools-extra/clang-tidy/performance/NoIntToPtrCheck.h; clang-tools-extra/clang-tidy/performance/PerformanceTidyModule.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.cpp; clang-tools-extra/clang-tidy/performance/TriviallyDestructibleCheck.h; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.cpp; clang-tools-extra/clang-tidy/performance/TypePromotionInMathFnCheck.h; clang-tools-extra/clang-tidy/performance/UnnecessaryCopyInitialization.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.cpp; clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.h; clang-tools-extra/clang-tidy/plugin/ClangTidyPlugin.cpp; clang-tools-extra/clang-tidy/portability/PortabilityTidyModule.cpp; clang-tools-extra/clang-tidy/portability/RestrictSystemIncludesCheck.cpp; clang-tools-extra/clang-tidy/portability/SIMDIntrinsicsCheck.cpp; clang-tools-extra/clang-tidy/readability/AvoidConstParamsInDecls.h; clang-tools-extra/clang-tidy/readability/BracesAroundStatementsCheck.cpp; clang-tools-extra/clang-tidy/readability/BracesAroundStatementsCheck.h; clang-tools-extra/clang-tidy/readability/ConstReturnTypeCheck.cpp; clang-tools-extra/clang-tidy/readability/ContainerContainsCheck.cpp; clang-tools-extra/clang-tidy/readability/ContainerContainsCheck.h; clang-tools-extra/clang-tidy/readability/ContainerDataPointerCheck.cpp; clang-tools-extra/clang-tidy/readability/ContainerDataPointerCheck.h; clang-tools-extra/clang-tidy/readability/ContainerSizeEmptyCheck.h; clang-tools-extra/clang-tidy/readability/ConvertMemberFunctionsToStat,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:132244,Performance,load,loader,132244,c/include/llvm-libc-types/float_t.h; libc/include/llvm-libc-types/imaxdiv_t.h; libc/include/llvm-libc-types/jmp_buf.h; libc/include/llvm-libc-types/ldiv_t.h; libc/include/llvm-libc-types/lldiv_t.h; libc/include/llvm-libc-types/mode_t.h; libc/include/llvm-libc-types/mtx_t.h; libc/include/llvm-libc-types/off_t.h; libc/include/llvm-libc-types/once_flag.h; libc/include/llvm-libc-types/size_t.h; libc/include/llvm-libc-types/ssize_t.h; libc/include/llvm-libc-types/struct_sigaction.h; libc/include/llvm-libc-types/struct_tm.h; libc/include/llvm-libc-types/thrd_start_t.h; libc/include/llvm-libc-types/thrd_t.h; libc/include/llvm-libc-types/time_t.h; libc/include/llvm-libc-types/__atexithandler_t.h; libc/include/llvm-libc-types/__bsearchcompare_t.h; libc/include/llvm-libc-types/__call_once_func_t.h; libc/include/llvm-libc-types/__futex_word.h; libc/include/llvm-libc-types/__mutex_type.h; libc/include/llvm-libc-types/__qsortcompare_t.h; libc/include/llvm-libc-types/__sighandler_t.h; libc/loader/linux/aarch64/start.cpp; libc/loader/linux/x86_64/start.cpp; libc/src/assert/__assert_fail.h; libc/src/ctype/isalnum.cpp; libc/src/ctype/isalnum.h; libc/src/ctype/isalpha.cpp; libc/src/ctype/isalpha.h; libc/src/ctype/isascii.cpp; libc/src/ctype/isascii.h; libc/src/ctype/isblank.cpp; libc/src/ctype/isblank.h; libc/src/ctype/iscntrl.cpp; libc/src/ctype/iscntrl.h; libc/src/ctype/isdigit.cpp; libc/src/ctype/isdigit.h; libc/src/ctype/isgraph.cpp; libc/src/ctype/isgraph.h; libc/src/ctype/islower.cpp; libc/src/ctype/islower.h; libc/src/ctype/isprint.cpp; libc/src/ctype/isprint.h; libc/src/ctype/ispunct.cpp; libc/src/ctype/ispunct.h; libc/src/ctype/isspace.cpp; libc/src/ctype/isspace.h; libc/src/ctype/isupper.cpp; libc/src/ctype/isupper.h; libc/src/ctype/isxdigit.cpp; libc/src/ctype/isxdigit.h; libc/src/ctype/toascii.cpp; libc/src/ctype/toascii.h; libc/src/ctype/tolower.cpp; libc/src/ctype/tolower.h; libc/src/ctype/toupper.cpp; libc/src/ctype/toupper.h; libc/src/errno/dummy_errno.cpp; libc/src/er,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:132281,Performance,load,loader,132281, libc/include/llvm-libc-types/imaxdiv_t.h; libc/include/llvm-libc-types/jmp_buf.h; libc/include/llvm-libc-types/ldiv_t.h; libc/include/llvm-libc-types/lldiv_t.h; libc/include/llvm-libc-types/mode_t.h; libc/include/llvm-libc-types/mtx_t.h; libc/include/llvm-libc-types/off_t.h; libc/include/llvm-libc-types/once_flag.h; libc/include/llvm-libc-types/size_t.h; libc/include/llvm-libc-types/ssize_t.h; libc/include/llvm-libc-types/struct_sigaction.h; libc/include/llvm-libc-types/struct_tm.h; libc/include/llvm-libc-types/thrd_start_t.h; libc/include/llvm-libc-types/thrd_t.h; libc/include/llvm-libc-types/time_t.h; libc/include/llvm-libc-types/__atexithandler_t.h; libc/include/llvm-libc-types/__bsearchcompare_t.h; libc/include/llvm-libc-types/__call_once_func_t.h; libc/include/llvm-libc-types/__futex_word.h; libc/include/llvm-libc-types/__mutex_type.h; libc/include/llvm-libc-types/__qsortcompare_t.h; libc/include/llvm-libc-types/__sighandler_t.h; libc/loader/linux/aarch64/start.cpp; libc/loader/linux/x86_64/start.cpp; libc/src/assert/__assert_fail.h; libc/src/ctype/isalnum.cpp; libc/src/ctype/isalnum.h; libc/src/ctype/isalpha.cpp; libc/src/ctype/isalpha.h; libc/src/ctype/isascii.cpp; libc/src/ctype/isascii.h; libc/src/ctype/isblank.cpp; libc/src/ctype/isblank.h; libc/src/ctype/iscntrl.cpp; libc/src/ctype/iscntrl.h; libc/src/ctype/isdigit.cpp; libc/src/ctype/isdigit.h; libc/src/ctype/isgraph.cpp; libc/src/ctype/isgraph.h; libc/src/ctype/islower.cpp; libc/src/ctype/islower.h; libc/src/ctype/isprint.cpp; libc/src/ctype/isprint.h; libc/src/ctype/ispunct.cpp; libc/src/ctype/ispunct.h; libc/src/ctype/isspace.cpp; libc/src/ctype/isspace.h; libc/src/ctype/isupper.cpp; libc/src/ctype/isupper.h; libc/src/ctype/isxdigit.cpp; libc/src/ctype/isxdigit.h; libc/src/ctype/toascii.cpp; libc/src/ctype/toascii.h; libc/src/ctype/tolower.cpp; libc/src/ctype/tolower.h; libc/src/ctype/toupper.cpp; libc/src/ctype/toupper.h; libc/src/errno/dummy_errno.cpp; libc/src/errno/dummy_errno.h; libc/src/errno/e,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:97202,Safety,safe,safestack,97202, compiler-rt/lib/orc/endianness.h; compiler-rt/lib/orc/error.h; compiler-rt/lib/orc/executor_address.h; compiler-rt/lib/orc/extensible_rtti.cpp; compiler-rt/lib/orc/extensible_rtti.h; compiler-rt/lib/orc/log_error_to_stderr.cpp; compiler-rt/lib/orc/macho_ehframe_registration.cpp; compiler-rt/lib/orc/macho_platform.cpp; compiler-rt/lib/orc/macho_platform.h; compiler-rt/lib/orc/run_program_wrapper.cpp; compiler-rt/lib/orc/simple_packed_serialization.h; compiler-rt/lib/orc/wrapper_function_utils.h; compiler-rt/lib/orc/unittests/adt_test.cpp; compiler-rt/lib/orc/unittests/c_api_test.cpp; compiler-rt/lib/orc/unittests/endian_test.cpp; compiler-rt/lib/orc/unittests/error_test.cpp; compiler-rt/lib/orc/unittests/executor_address_test.cpp; compiler-rt/lib/orc/unittests/extensible_rtti_test.cpp; compiler-rt/lib/orc/unittests/orc_unit_test_main.cpp; compiler-rt/lib/orc/unittests/simple_packed_serialization_test.cpp; compiler-rt/lib/orc/unittests/wrapper_function_utils_test.cpp; compiler-rt/lib/safestack/safestack_util.h; compiler-rt/lib/sanitizer_common/sancov_flags.h; compiler-rt/lib/sanitizer_common/sanitizer_allocator_dlsym.h; compiler-rt/lib/sanitizer_common/sanitizer_allocator_report.h; compiler-rt/lib/sanitizer_common/sanitizer_chained_origin_depot.cpp; compiler-rt/lib/sanitizer_common/sanitizer_chained_origin_depot.h; compiler-rt/lib/sanitizer_common/sanitizer_dense_map.h; compiler-rt/lib/sanitizer_common/sanitizer_dense_map_info.h; compiler-rt/lib/sanitizer_common/sanitizer_errno.h; compiler-rt/lib/sanitizer_common/sanitizer_errno_codes.h; compiler-rt/lib/sanitizer_common/sanitizer_flat_map.h; compiler-rt/lib/sanitizer_common/sanitizer_fuchsia.cpp; compiler-rt/lib/sanitizer_common/sanitizer_leb128.h; compiler-rt/lib/sanitizer_common/sanitizer_local_address_space_view.h; compiler-rt/lib/sanitizer_common/sanitizer_lzw.h; compiler-rt/lib/sanitizer_common/sanitizer_placement_new.h; compiler-rt/lib/sanitizer_common/sanitizer_platform.h; compiler-rt/lib/sanitizer_common/sani,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:141061,Safety,abort,abort,141061,; libc/src/math/generic/sinf.cpp; libc/src/math/generic/sqrt.cpp; libc/src/math/generic/sqrtf.cpp; libc/src/math/generic/sqrtl.cpp; libc/src/math/generic/trunc.cpp; libc/src/math/generic/truncf.cpp; libc/src/math/generic/truncl.cpp; libc/src/math/x86_64/cos.cpp; libc/src/math/x86_64/sin.cpp; libc/src/math/x86_64/tan.cpp; libc/src/signal/raise.h; libc/src/signal/sigaction.h; libc/src/signal/sigaddset.h; libc/src/signal/sigdelset.h; libc/src/signal/sigemptyset.h; libc/src/signal/sigfillset.h; libc/src/signal/signal.h; libc/src/signal/sigprocmask.h; libc/src/signal/linux/raise.cpp; libc/src/signal/linux/sigaction.cpp; libc/src/signal/linux/sigaddset.cpp; libc/src/signal/linux/sigdelset.cpp; libc/src/signal/linux/sigemptyset.cpp; libc/src/signal/linux/sigfillset.cpp; libc/src/signal/linux/signal.cpp; libc/src/signal/linux/signal.h; libc/src/signal/linux/sigprocmask.cpp; libc/src/signal/linux/__restore.cpp; libc/src/stdio/FILE.h; libc/src/stdio/fwrite.cpp; libc/src/stdio/fwrite.h; libc/src/stdlib/abort.h; libc/src/stdlib/abs.cpp; libc/src/stdlib/abs.h; libc/src/stdlib/atexit.cpp; libc/src/stdlib/atexit.h; libc/src/stdlib/atof.cpp; libc/src/stdlib/atof.h; libc/src/stdlib/atoi.cpp; libc/src/stdlib/atoi.h; libc/src/stdlib/atol.cpp; libc/src/stdlib/atol.h; libc/src/stdlib/atoll.cpp; libc/src/stdlib/atoll.h; libc/src/stdlib/bsearch.cpp; libc/src/stdlib/bsearch.h; libc/src/stdlib/div.cpp; libc/src/stdlib/div.h; libc/src/stdlib/exit.cpp; libc/src/stdlib/exit.h; libc/src/stdlib/getenv.cpp; libc/src/stdlib/getenv.h; libc/src/stdlib/labs.cpp; libc/src/stdlib/labs.h; libc/src/stdlib/ldiv.cpp; libc/src/stdlib/ldiv.h; libc/src/stdlib/llabs.cpp; libc/src/stdlib/llabs.h; libc/src/stdlib/lldiv.cpp; libc/src/stdlib/lldiv.h; libc/src/stdlib/qsort.cpp; libc/src/stdlib/qsort.h; libc/src/stdlib/strtod.cpp; libc/src/stdlib/strtod.h; libc/src/stdlib/strtof.cpp; libc/src/stdlib/strtof.h; libc/src/stdlib/strtol.cpp; libc/src/stdlib/strtol.h; libc/src/stdlib/strtold.cpp; libc/src/stdlib/strtold.h;,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:142273,Safety,abort,abort,142273,/atoi.h; libc/src/stdlib/atol.cpp; libc/src/stdlib/atol.h; libc/src/stdlib/atoll.cpp; libc/src/stdlib/atoll.h; libc/src/stdlib/bsearch.cpp; libc/src/stdlib/bsearch.h; libc/src/stdlib/div.cpp; libc/src/stdlib/div.h; libc/src/stdlib/exit.cpp; libc/src/stdlib/exit.h; libc/src/stdlib/getenv.cpp; libc/src/stdlib/getenv.h; libc/src/stdlib/labs.cpp; libc/src/stdlib/labs.h; libc/src/stdlib/ldiv.cpp; libc/src/stdlib/ldiv.h; libc/src/stdlib/llabs.cpp; libc/src/stdlib/llabs.h; libc/src/stdlib/lldiv.cpp; libc/src/stdlib/lldiv.h; libc/src/stdlib/qsort.cpp; libc/src/stdlib/qsort.h; libc/src/stdlib/strtod.cpp; libc/src/stdlib/strtod.h; libc/src/stdlib/strtof.cpp; libc/src/stdlib/strtof.h; libc/src/stdlib/strtol.cpp; libc/src/stdlib/strtol.h; libc/src/stdlib/strtold.cpp; libc/src/stdlib/strtold.h; libc/src/stdlib/strtoll.cpp; libc/src/stdlib/strtoll.h; libc/src/stdlib/strtoul.cpp; libc/src/stdlib/strtoul.h; libc/src/stdlib/strtoull.cpp; libc/src/stdlib/strtoull.h; libc/src/stdlib/_Exit.h; libc/src/stdlib/linux/abort.cpp; libc/src/stdlib/linux/_Exit.cpp; libc/src/string/bcmp.cpp; libc/src/string/bcmp.h; libc/src/string/bzero.cpp; libc/src/string/bzero.h; libc/src/string/memccpy.cpp; libc/src/string/memccpy.h; libc/src/string/memchr.cpp; libc/src/string/memchr.h; libc/src/string/memcmp.cpp; libc/src/string/memcmp.h; libc/src/string/memcpy.cpp; libc/src/string/memcpy.h; libc/src/string/memmove.cpp; libc/src/string/memmove.h; libc/src/string/mempcpy.cpp; libc/src/string/mempcpy.h; libc/src/string/memrchr.cpp; libc/src/string/memrchr.h; libc/src/string/memset.cpp; libc/src/string/memset.h; libc/src/string/stpcpy.cpp; libc/src/string/stpcpy.h; libc/src/string/stpncpy.cpp; libc/src/string/stpncpy.h; libc/src/string/strcat.cpp; libc/src/string/strcat.h; libc/src/string/strchr.cpp; libc/src/string/strchr.h; libc/src/string/strcmp.cpp; libc/src/string/strcmp.h; libc/src/string/strcpy.cpp; libc/src/string/strcpy.h; libc/src/string/strcspn.cpp; libc/src/string/strcspn.h; libc/src/string/strdup.,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:89433,Security,sanitiz,sanitizer,89433,-extra/unittests/clang-doc/ClangDocTest.h; clang-tools-extra/unittests/clang-doc/GeneratorTest.cpp; clang-tools-extra/unittests/clang-doc/HTMLGeneratorTest.cpp; clang-tools-extra/unittests/clang-doc/MDGeneratorTest.cpp; clang-tools-extra/unittests/clang-doc/MergeTest.cpp; clang-tools-extra/unittests/clang-doc/SerializeTest.cpp; clang-tools-extra/unittests/clang-doc/YAMLGeneratorTest.cpp; clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp; clang-tools-extra/unittests/clang-tidy/ClangTidyDiagnosticConsumerTest.cpp; clang-tools-extra/unittests/clang-tidy/ClangTidyTest.h; clang-tools-extra/unittests/clang-tidy/DeclRefExprUtilsTest.cpp; clang-tools-extra/unittests/clang-tidy/GlobListTest.cpp; clang-tools-extra/unittests/clang-tidy/OptionsProviderTest.cpp; clang-tools-extra/unittests/clang-tidy/OverlappingReplacementsTest.cpp; clang-tools-extra/unittests/clang-tidy/ReadabilityModuleTest.cpp; clang-tools-extra/unittests/clang-tidy/TransformerClangTidyCheckTest.cpp; compiler-rt/include/sanitizer/linux_syscall_hooks.h; compiler-rt/include/sanitizer/memprof_interface.h; compiler-rt/include/sanitizer/netbsd_syscall_hooks.h; compiler-rt/include/xray/xray_interface.h; compiler-rt/include/xray/xray_log_interface.h; compiler-rt/lib/asan/asan_activation.h; compiler-rt/lib/asan/asan_lock.h; compiler-rt/lib/asan/asan_mapping.h; compiler-rt/lib/asan/asan_mapping_sparc64.h; compiler-rt/lib/asan/asan_rtl_static.cpp; compiler-rt/lib/asan/tests/asan_globals_test.cpp; compiler-rt/lib/builtins/fp_extend.h; compiler-rt/lib/builtins/fp_lib.h; compiler-rt/lib/builtins/fp_mode.h; compiler-rt/lib/builtins/fp_trunc.h; compiler-rt/lib/builtins/int_endianness.h; compiler-rt/lib/builtins/int_math.h; compiler-rt/lib/builtins/int_types.h; compiler-rt/lib/builtins/int_util.h; compiler-rt/lib/builtins/unwind-ehabi-helpers.h; compiler-rt/lib/builtins/ppc/DD.h; compiler-rt/lib/dfsan/dfsan_allocator.cpp; compiler-rt/lib/dfsan/dfsan_allocator.h; compiler-rt/lib/dfsan/dfsan_chained_origin_depot.cpp; comp,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:89486,Security,sanitiz,sanitizer,89486,s-extra/unittests/clang-doc/GeneratorTest.cpp; clang-tools-extra/unittests/clang-doc/HTMLGeneratorTest.cpp; clang-tools-extra/unittests/clang-doc/MDGeneratorTest.cpp; clang-tools-extra/unittests/clang-doc/MergeTest.cpp; clang-tools-extra/unittests/clang-doc/SerializeTest.cpp; clang-tools-extra/unittests/clang-doc/YAMLGeneratorTest.cpp; clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp; clang-tools-extra/unittests/clang-tidy/ClangTidyDiagnosticConsumerTest.cpp; clang-tools-extra/unittests/clang-tidy/ClangTidyTest.h; clang-tools-extra/unittests/clang-tidy/DeclRefExprUtilsTest.cpp; clang-tools-extra/unittests/clang-tidy/GlobListTest.cpp; clang-tools-extra/unittests/clang-tidy/OptionsProviderTest.cpp; clang-tools-extra/unittests/clang-tidy/OverlappingReplacementsTest.cpp; clang-tools-extra/unittests/clang-tidy/ReadabilityModuleTest.cpp; clang-tools-extra/unittests/clang-tidy/TransformerClangTidyCheckTest.cpp; compiler-rt/include/sanitizer/linux_syscall_hooks.h; compiler-rt/include/sanitizer/memprof_interface.h; compiler-rt/include/sanitizer/netbsd_syscall_hooks.h; compiler-rt/include/xray/xray_interface.h; compiler-rt/include/xray/xray_log_interface.h; compiler-rt/lib/asan/asan_activation.h; compiler-rt/lib/asan/asan_lock.h; compiler-rt/lib/asan/asan_mapping.h; compiler-rt/lib/asan/asan_mapping_sparc64.h; compiler-rt/lib/asan/asan_rtl_static.cpp; compiler-rt/lib/asan/tests/asan_globals_test.cpp; compiler-rt/lib/builtins/fp_extend.h; compiler-rt/lib/builtins/fp_lib.h; compiler-rt/lib/builtins/fp_mode.h; compiler-rt/lib/builtins/fp_trunc.h; compiler-rt/lib/builtins/int_endianness.h; compiler-rt/lib/builtins/int_math.h; compiler-rt/lib/builtins/int_types.h; compiler-rt/lib/builtins/int_util.h; compiler-rt/lib/builtins/unwind-ehabi-helpers.h; compiler-rt/lib/builtins/ppc/DD.h; compiler-rt/lib/dfsan/dfsan_allocator.cpp; compiler-rt/lib/dfsan/dfsan_allocator.h; compiler-rt/lib/dfsan/dfsan_chained_origin_depot.cpp; compiler-rt/lib/dfsan/dfsan_chained_origin_depot.h; compi,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:89537,Security,sanitiz,sanitizer,89537,tools-extra/unittests/clang-doc/HTMLGeneratorTest.cpp; clang-tools-extra/unittests/clang-doc/MDGeneratorTest.cpp; clang-tools-extra/unittests/clang-doc/MergeTest.cpp; clang-tools-extra/unittests/clang-doc/SerializeTest.cpp; clang-tools-extra/unittests/clang-doc/YAMLGeneratorTest.cpp; clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp; clang-tools-extra/unittests/clang-tidy/ClangTidyDiagnosticConsumerTest.cpp; clang-tools-extra/unittests/clang-tidy/ClangTidyTest.h; clang-tools-extra/unittests/clang-tidy/DeclRefExprUtilsTest.cpp; clang-tools-extra/unittests/clang-tidy/GlobListTest.cpp; clang-tools-extra/unittests/clang-tidy/OptionsProviderTest.cpp; clang-tools-extra/unittests/clang-tidy/OverlappingReplacementsTest.cpp; clang-tools-extra/unittests/clang-tidy/ReadabilityModuleTest.cpp; clang-tools-extra/unittests/clang-tidy/TransformerClangTidyCheckTest.cpp; compiler-rt/include/sanitizer/linux_syscall_hooks.h; compiler-rt/include/sanitizer/memprof_interface.h; compiler-rt/include/sanitizer/netbsd_syscall_hooks.h; compiler-rt/include/xray/xray_interface.h; compiler-rt/include/xray/xray_log_interface.h; compiler-rt/lib/asan/asan_activation.h; compiler-rt/lib/asan/asan_lock.h; compiler-rt/lib/asan/asan_mapping.h; compiler-rt/lib/asan/asan_mapping_sparc64.h; compiler-rt/lib/asan/asan_rtl_static.cpp; compiler-rt/lib/asan/tests/asan_globals_test.cpp; compiler-rt/lib/builtins/fp_extend.h; compiler-rt/lib/builtins/fp_lib.h; compiler-rt/lib/builtins/fp_mode.h; compiler-rt/lib/builtins/fp_trunc.h; compiler-rt/lib/builtins/int_endianness.h; compiler-rt/lib/builtins/int_math.h; compiler-rt/lib/builtins/int_types.h; compiler-rt/lib/builtins/int_util.h; compiler-rt/lib/builtins/unwind-ehabi-helpers.h; compiler-rt/lib/builtins/ppc/DD.h; compiler-rt/lib/dfsan/dfsan_allocator.cpp; compiler-rt/lib/dfsan/dfsan_allocator.h; compiler-rt/lib/dfsan/dfsan_chained_origin_depot.cpp; compiler-rt/lib/dfsan/dfsan_chained_origin_depot.h; compiler-rt/lib/dfsan/dfsan_flags.h; compiler-rt/lib/dfsa,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:100082,Security,checksum,checksum,100082,pp; compiler-rt/lib/sanitizer_common/tests/sanitizer_addrhashmap_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_chained_origin_depot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_dense_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_flat_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_hash_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_leb128_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_lzw_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stackdepot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stack_store_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stoptheworld_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_test_main.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_type_traits_test.cpp; compiler-rt/lib/scudo/standalone/allocator_config.h; compiler-rt/lib/scudo/standalone/atomic_helpers.h; compiler-rt/lib/scudo/standalone/bytemap.h; compiler-rt/lib/scudo/standalone/checksum.cpp; compiler-rt/lib/scudo/standalone/checksum.h; compiler-rt/lib/scudo/standalone/chunk.h; compiler-rt/lib/scudo/standalone/combined.h; compiler-rt/lib/scudo/standalone/common.cpp; compiler-rt/lib/scudo/standalone/common.h; compiler-rt/lib/scudo/standalone/crc32_hw.cpp; compiler-rt/lib/scudo/standalone/flags.cpp; compiler-rt/lib/scudo/standalone/flags.h; compiler-rt/lib/scudo/standalone/flags_parser.cpp; compiler-rt/lib/scudo/standalone/flags_parser.h; compiler-rt/lib/scudo/standalone/fuchsia.cpp; compiler-rt/lib/scudo/standalone/fuchsia.h; compiler-rt/lib/scudo/standalone/internal_defs.h; compiler-rt/lib/scudo/standalone/linux.cpp; compiler-rt/lib/scudo/standalone/linux.h; compiler-rt/lib/scudo/standalone/list.h; compiler-rt/lib/scudo/standalone/local_cache.h; compiler-rt/lib/scudo/standalone/memtag.h; compiler-rt/lib/scudo/standalone/mutex.h; compiler-rt/lib/scudo/standalone/options.h; compiler-rt/lib/scudo/standalone/platform.h; compiler-rt/lib/scudo/standalon,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:100129,Security,checksum,checksum,100129,itizer_addrhashmap_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_chained_origin_depot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_dense_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_flat_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_hash_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_leb128_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_lzw_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stackdepot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stack_store_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stoptheworld_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_test_main.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_type_traits_test.cpp; compiler-rt/lib/scudo/standalone/allocator_config.h; compiler-rt/lib/scudo/standalone/atomic_helpers.h; compiler-rt/lib/scudo/standalone/bytemap.h; compiler-rt/lib/scudo/standalone/checksum.cpp; compiler-rt/lib/scudo/standalone/checksum.h; compiler-rt/lib/scudo/standalone/chunk.h; compiler-rt/lib/scudo/standalone/combined.h; compiler-rt/lib/scudo/standalone/common.cpp; compiler-rt/lib/scudo/standalone/common.h; compiler-rt/lib/scudo/standalone/crc32_hw.cpp; compiler-rt/lib/scudo/standalone/flags.cpp; compiler-rt/lib/scudo/standalone/flags.h; compiler-rt/lib/scudo/standalone/flags_parser.cpp; compiler-rt/lib/scudo/standalone/flags_parser.h; compiler-rt/lib/scudo/standalone/fuchsia.cpp; compiler-rt/lib/scudo/standalone/fuchsia.h; compiler-rt/lib/scudo/standalone/internal_defs.h; compiler-rt/lib/scudo/standalone/linux.cpp; compiler-rt/lib/scudo/standalone/linux.h; compiler-rt/lib/scudo/standalone/list.h; compiler-rt/lib/scudo/standalone/local_cache.h; compiler-rt/lib/scudo/standalone/memtag.h; compiler-rt/lib/scudo/standalone/mutex.h; compiler-rt/lib/scudo/standalone/options.h; compiler-rt/lib/scudo/standalone/platform.h; compiler-rt/lib/scudo/standalone/primary32.h; compiler-rt/lib/scudo/standalon,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:146317,Security,sanitiz,sanitizer,146317,/src/time/asctime.cpp; libc/src/time/asctime.h; libc/src/time/asctime_r.cpp; libc/src/time/asctime_r.h; libc/src/time/gmtime.cpp; libc/src/time/gmtime.h; libc/src/time/gmtime_r.cpp; libc/src/time/gmtime_r.h; libc/src/time/mktime.cpp; libc/src/time/mktime.h; libc/src/time/time_utils.cpp; libc/src/time/time_utils.h; libc/src/unistd/close.h; libc/src/unistd/fsync.h; libc/src/unistd/read.h; libc/src/unistd/rmdir.h; libc/src/unistd/unlink.h; libc/src/unistd/unlinkat.h; libc/src/unistd/write.h; libc/src/unistd/linux/close.cpp; libc/src/unistd/linux/fsync.cpp; libc/src/unistd/linux/read.cpp; libc/src/unistd/linux/rmdir.cpp; libc/src/unistd/linux/unlink.cpp; libc/src/unistd/linux/unlinkat.cpp; libc/src/unistd/linux/write.cpp; libc/src/__support/architectures.h; libc/src/__support/common.h; libc/src/__support/ctype_utils.h; libc/src/__support/detailed_powers_of_ten.h; libc/src/__support/endian.h; libc/src/__support/high_precision_decimal.h; libc/src/__support/integer_operations.h; libc/src/__support/sanitizer.h; libc/src/__support/str_to_float.h; libc/src/__support/str_to_integer.h; libc/src/__support/CPP/Array.h; libc/src/__support/CPP/ArrayRef.h; libc/src/__support/CPP/atomic.h; libc/src/__support/CPP/Bit.h; libc/src/__support/CPP/Bitset.h; libc/src/__support/CPP/Functional.h; libc/src/__support/CPP/Limits.h; libc/src/__support/CPP/Utility.h; libc/src/__support/CPP/vector.h; libc/src/__support/File/file.cpp; libc/src/__support/File/file.h; libc/src/__support/FPUtil/BasicOperations.h; libc/src/__support/FPUtil/DivisionAndRemainderOperations.h; libc/src/__support/FPUtil/FEnvImpl.h; libc/src/__support/FPUtil/FloatProperties.h; libc/src/__support/FPUtil/FMA.h; libc/src/__support/FPUtil/FPBits.h; libc/src/__support/FPUtil/ManipulationFunctions.h; libc/src/__support/FPUtil/NearestIntegerOperations.h; libc/src/__support/FPUtil/NormalFloat.h; libc/src/__support/FPUtil/PlatformDefs.h; libc/src/__support/FPUtil/PolyEval.h; libc/src/__support/FPUtil/sqrt.h; libc/src/__support/FPUtil/,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:4696,Testability,test,tests,4696,es/DataflowAnalysis.cpp; bolt/lib/Passes/DataflowInfoManager.cpp; bolt/lib/Passes/HFSort.cpp; bolt/lib/Passes/IndirectCallPromotion.cpp; bolt/lib/Passes/Instrumentation.cpp; bolt/lib/Passes/JTFootprintReduction.cpp; bolt/lib/Passes/LivenessAnalysis.cpp; bolt/lib/Passes/LoopInversionPass.cpp; bolt/lib/Passes/PettisAndHansen.cpp; bolt/lib/Passes/StackAllocationAnalysis.cpp; bolt/lib/Passes/StackPointerTracking.cpp; bolt/lib/Passes/StackReachingUses.cpp; bolt/lib/Passes/TailDuplication.cpp; bolt/lib/Passes/ThreeWayBranch.cpp; bolt/lib/Passes/ValidateInternalCalls.cpp; bolt/lib/Profile/BoltAddressTranslation.cpp; bolt/lib/Profile/Heatmap.cpp; bolt/lib/Profile/ProfileReaderBase.cpp; bolt/lib/RuntimeLibs/HugifyRuntimeLibrary.cpp; bolt/lib/RuntimeLibs/InstrumentationRuntimeLibrary.cpp; bolt/lib/RuntimeLibs/RuntimeLibrary.cpp; bolt/lib/Utils/Utils.cpp; bolt/tools/heatmap/heatmap.cpp; bolt/tools/llvm-bolt-fuzzer/llvm-bolt-fuzzer.cpp; bolt/unittests/Core/MCPlusBuilder.cpp; clang/bindings/python/tests/cindex/INPUTS/header1.h; clang/bindings/python/tests/cindex/INPUTS/header2.h; clang/bindings/python/tests/cindex/INPUTS/header3.h; clang/examples/Attribute/Attribute.cpp; clang/examples/CallSuperAttribute/CallSuperAttrInfo.cpp; clang/examples/PluginsOrder/PluginsOrder.cpp; clang/include/clang/Analysis/BodyFarm.h; clang/include/clang/Analysis/IssueHash.h; clang/include/clang/Analysis/MacroExpansionContext.h; clang/include/clang/Analysis/Analyses/CalledOnceCheck.h; clang/include/clang/Analysis/Analyses/CFGReachabilityAnalysis.h; clang/include/clang/Analysis/Analyses/ExprMutationAnalyzer.h; clang/include/clang/Analysis/FlowSensitive/ControlFlowContext.h; clang/include/clang/Analysis/FlowSensitive/DataflowAnalysis.h; clang/include/clang/Analysis/FlowSensitive/DataflowAnalysisContext.h; clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h; clang/include/clang/Analysis/FlowSensitive/DataflowLattice.h; clang/include/clang/Analysis/FlowSensitive/DataflowWorklist.h; clang/inclu,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:4749,Testability,test,tests,4749,anager.cpp; bolt/lib/Passes/HFSort.cpp; bolt/lib/Passes/IndirectCallPromotion.cpp; bolt/lib/Passes/Instrumentation.cpp; bolt/lib/Passes/JTFootprintReduction.cpp; bolt/lib/Passes/LivenessAnalysis.cpp; bolt/lib/Passes/LoopInversionPass.cpp; bolt/lib/Passes/PettisAndHansen.cpp; bolt/lib/Passes/StackAllocationAnalysis.cpp; bolt/lib/Passes/StackPointerTracking.cpp; bolt/lib/Passes/StackReachingUses.cpp; bolt/lib/Passes/TailDuplication.cpp; bolt/lib/Passes/ThreeWayBranch.cpp; bolt/lib/Passes/ValidateInternalCalls.cpp; bolt/lib/Profile/BoltAddressTranslation.cpp; bolt/lib/Profile/Heatmap.cpp; bolt/lib/Profile/ProfileReaderBase.cpp; bolt/lib/RuntimeLibs/HugifyRuntimeLibrary.cpp; bolt/lib/RuntimeLibs/InstrumentationRuntimeLibrary.cpp; bolt/lib/RuntimeLibs/RuntimeLibrary.cpp; bolt/lib/Utils/Utils.cpp; bolt/tools/heatmap/heatmap.cpp; bolt/tools/llvm-bolt-fuzzer/llvm-bolt-fuzzer.cpp; bolt/unittests/Core/MCPlusBuilder.cpp; clang/bindings/python/tests/cindex/INPUTS/header1.h; clang/bindings/python/tests/cindex/INPUTS/header2.h; clang/bindings/python/tests/cindex/INPUTS/header3.h; clang/examples/Attribute/Attribute.cpp; clang/examples/CallSuperAttribute/CallSuperAttrInfo.cpp; clang/examples/PluginsOrder/PluginsOrder.cpp; clang/include/clang/Analysis/BodyFarm.h; clang/include/clang/Analysis/IssueHash.h; clang/include/clang/Analysis/MacroExpansionContext.h; clang/include/clang/Analysis/Analyses/CalledOnceCheck.h; clang/include/clang/Analysis/Analyses/CFGReachabilityAnalysis.h; clang/include/clang/Analysis/Analyses/ExprMutationAnalyzer.h; clang/include/clang/Analysis/FlowSensitive/ControlFlowContext.h; clang/include/clang/Analysis/FlowSensitive/DataflowAnalysis.h; clang/include/clang/Analysis/FlowSensitive/DataflowAnalysisContext.h; clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h; clang/include/clang/Analysis/FlowSensitive/DataflowLattice.h; clang/include/clang/Analysis/FlowSensitive/DataflowWorklist.h; clang/include/clang/Analysis/FlowSensitive/DebugSupport.h; clang/,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:4802,Testability,test,tests,4802,es/IndirectCallPromotion.cpp; bolt/lib/Passes/Instrumentation.cpp; bolt/lib/Passes/JTFootprintReduction.cpp; bolt/lib/Passes/LivenessAnalysis.cpp; bolt/lib/Passes/LoopInversionPass.cpp; bolt/lib/Passes/PettisAndHansen.cpp; bolt/lib/Passes/StackAllocationAnalysis.cpp; bolt/lib/Passes/StackPointerTracking.cpp; bolt/lib/Passes/StackReachingUses.cpp; bolt/lib/Passes/TailDuplication.cpp; bolt/lib/Passes/ThreeWayBranch.cpp; bolt/lib/Passes/ValidateInternalCalls.cpp; bolt/lib/Profile/BoltAddressTranslation.cpp; bolt/lib/Profile/Heatmap.cpp; bolt/lib/Profile/ProfileReaderBase.cpp; bolt/lib/RuntimeLibs/HugifyRuntimeLibrary.cpp; bolt/lib/RuntimeLibs/InstrumentationRuntimeLibrary.cpp; bolt/lib/RuntimeLibs/RuntimeLibrary.cpp; bolt/lib/Utils/Utils.cpp; bolt/tools/heatmap/heatmap.cpp; bolt/tools/llvm-bolt-fuzzer/llvm-bolt-fuzzer.cpp; bolt/unittests/Core/MCPlusBuilder.cpp; clang/bindings/python/tests/cindex/INPUTS/header1.h; clang/bindings/python/tests/cindex/INPUTS/header2.h; clang/bindings/python/tests/cindex/INPUTS/header3.h; clang/examples/Attribute/Attribute.cpp; clang/examples/CallSuperAttribute/CallSuperAttrInfo.cpp; clang/examples/PluginsOrder/PluginsOrder.cpp; clang/include/clang/Analysis/BodyFarm.h; clang/include/clang/Analysis/IssueHash.h; clang/include/clang/Analysis/MacroExpansionContext.h; clang/include/clang/Analysis/Analyses/CalledOnceCheck.h; clang/include/clang/Analysis/Analyses/CFGReachabilityAnalysis.h; clang/include/clang/Analysis/Analyses/ExprMutationAnalyzer.h; clang/include/clang/Analysis/FlowSensitive/ControlFlowContext.h; clang/include/clang/Analysis/FlowSensitive/DataflowAnalysis.h; clang/include/clang/Analysis/FlowSensitive/DataflowAnalysisContext.h; clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h; clang/include/clang/Analysis/FlowSensitive/DataflowLattice.h; clang/include/clang/Analysis/FlowSensitive/DataflowWorklist.h; clang/include/clang/Analysis/FlowSensitive/DebugSupport.h; clang/include/clang/Analysis/FlowSensitive/MapLattice.h; cl,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:27491,Testability,test,test,27491,ling/Refactoring/Extract/Extract.cpp; clang/lib/Tooling/Refactoring/Rename/SymbolOccurrences.cpp; clang/lib/Tooling/Refactoring/Rename/USRFinder.cpp; clang/lib/Tooling/Syntax/BuildTree.cpp; clang/lib/Tooling/Syntax/ComputeReplacements.cpp; clang/lib/Tooling/Syntax/Mutations.cpp; clang/lib/Tooling/Syntax/Nodes.cpp; clang/lib/Tooling/Syntax/Synthesis.cpp; clang/lib/Tooling/Syntax/Tree.cpp; clang/lib/Tooling/Syntax/Pseudo/Grammar.cpp; clang/lib/Tooling/Syntax/Pseudo/GrammarBNF.cpp; clang/lib/Tooling/Syntax/Pseudo/Lex.cpp; clang/lib/Tooling/Syntax/Pseudo/LRGraph.cpp; clang/lib/Tooling/Syntax/Pseudo/LRTable.cpp; clang/lib/Tooling/Syntax/Pseudo/LRTableBuild.cpp; clang/lib/Tooling/Syntax/Pseudo/Preprocess.cpp; clang/lib/Tooling/Syntax/Pseudo/Token.cpp; clang/lib/Tooling/Transformer/Parsing.cpp; clang/lib/Tooling/Transformer/SourceCodeBuilders.cpp; clang/lib/Tooling/Transformer/Stencil.cpp; clang/lib/Tooling/Transformer/Transformer.cpp; clang/tools/amdgpu-arch/AMDGPUArch.cpp; clang/tools/apinotes-test/APINotesTest.cpp; clang/tools/clang-format/ClangFormat.cpp; clang/tools/clang-fuzzer/ClangFuzzer.cpp; clang/tools/clang-fuzzer/DummyClangFuzzer.cpp; clang/tools/clang-fuzzer/ExampleClangLLVMProtoFuzzer.cpp; clang/tools/clang-fuzzer/ExampleClangLoopProtoFuzzer.cpp; clang/tools/clang-fuzzer/handle-llvm/handle_llvm.h; clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp; clang/tools/clang-linker-wrapper/OffloadWrapper.cpp; clang/tools/clang-pseudo/ClangPseudo.cpp; clang/tools/clang-refactor/ClangRefactor.cpp; clang/tools/clang-refactor/TestSupport.cpp; clang/tools/clang-refactor/TestSupport.h; clang/tools/clang-refactor/ToolRefactoringResultConsumer.h; clang/tools/clang-rename/ClangRename.cpp; clang/tools/clang-repl/ClangRepl.cpp; clang/tools/clang-scan-deps/ClangScanDeps.cpp; clang/tools/clang-shlib/clang-shlib.cpp; clang/tools/driver/cc1gen_reproducer_main.cpp; clang/tools/libclang/CIndex.cpp; clang/tools/libclang/CIndexUSRs.cpp; clang/tools/libclang/CursorVisitor.h; clang/t,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:28574,Testability,test,tests,28574,r/ClangFuzzer.cpp; clang/tools/clang-fuzzer/DummyClangFuzzer.cpp; clang/tools/clang-fuzzer/ExampleClangLLVMProtoFuzzer.cpp; clang/tools/clang-fuzzer/ExampleClangLoopProtoFuzzer.cpp; clang/tools/clang-fuzzer/handle-llvm/handle_llvm.h; clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp; clang/tools/clang-linker-wrapper/OffloadWrapper.cpp; clang/tools/clang-pseudo/ClangPseudo.cpp; clang/tools/clang-refactor/ClangRefactor.cpp; clang/tools/clang-refactor/TestSupport.cpp; clang/tools/clang-refactor/TestSupport.h; clang/tools/clang-refactor/ToolRefactoringResultConsumer.h; clang/tools/clang-rename/ClangRename.cpp; clang/tools/clang-repl/ClangRepl.cpp; clang/tools/clang-scan-deps/ClangScanDeps.cpp; clang/tools/clang-shlib/clang-shlib.cpp; clang/tools/driver/cc1gen_reproducer_main.cpp; clang/tools/libclang/CIndex.cpp; clang/tools/libclang/CIndexUSRs.cpp; clang/tools/libclang/CursorVisitor.h; clang/tools/libclang/CXCursor.cpp; clang/tools/libclang/CXCursor.h; clang/tools/scan-build-py/tests/functional/src/include/clean-one.h; clang/unittests/Analysis/CFGBuildResult.h; clang/unittests/Analysis/MacroExpansionContextTest.cpp; clang/unittests/Analysis/FlowSensitive/DataflowAnalysisContextTest.cpp; clang/unittests/Analysis/FlowSensitive/DataflowEnvironmentTest.cpp; clang/unittests/Analysis/FlowSensitive/MapLatticeTest.cpp; clang/unittests/Analysis/FlowSensitive/MatchSwitchTest.cpp; clang/unittests/Analysis/FlowSensitive/MultiVarConstantPropagationTest.cpp; clang/unittests/Analysis/FlowSensitive/SingleVarConstantPropagationTest.cpp; clang/unittests/Analysis/FlowSensitive/SolverTest.cpp; clang/unittests/Analysis/FlowSensitive/TestingSupport.cpp; clang/unittests/Analysis/FlowSensitive/TestingSupport.h; clang/unittests/Analysis/FlowSensitive/TestingSupportTest.cpp; clang/unittests/Analysis/FlowSensitive/TypeErasedDataflowAnalysisTest.cpp; clang/unittests/AST/ASTImporterFixtures.cpp; clang/unittests/AST/ASTImporterFixtures.h; clang/unittests/AST/ASTImporterObjCTest.cpp; clang/unit,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:77294,Testability,benchmark,benchmarks,77294,ols-extra/clangd/InlayHints.h; clang-tools-extra/clangd/LSPBinder.h; clang-tools-extra/clangd/ParsedAST.cpp; clang-tools-extra/clangd/ParsedAST.h; clang-tools-extra/clangd/PathMapping.h; clang-tools-extra/clangd/Preamble.cpp; clang-tools-extra/clangd/Preamble.h; clang-tools-extra/clangd/Protocol.cpp; clang-tools-extra/clangd/Protocol.h; clang-tools-extra/clangd/Quality.cpp; clang-tools-extra/clangd/RIFF.cpp; clang-tools-extra/clangd/RIFF.h; clang-tools-extra/clangd/Selection.h; clang-tools-extra/clangd/SemanticHighlighting.h; clang-tools-extra/clangd/SemanticSelection.cpp; clang-tools-extra/clangd/SemanticSelection.h; clang-tools-extra/clangd/SourceCode.cpp; clang-tools-extra/clangd/SourceCode.h; clang-tools-extra/clangd/TidyProvider.cpp; clang-tools-extra/clangd/TidyProvider.h; clang-tools-extra/clangd/Transport.h; clang-tools-extra/clangd/TUScheduler.cpp; clang-tools-extra/clangd/TUScheduler.h; clang-tools-extra/clangd/URI.h; clang-tools-extra/clangd/XRefs.h; clang-tools-extra/clangd/benchmarks/IndexBenchmark.cpp; clang-tools-extra/clangd/fuzzer/clangd-fuzzer.cpp; clang-tools-extra/clangd/fuzzer/FuzzerClangdMain.cpp; clang-tools-extra/clangd/index/Background.cpp; clang-tools-extra/clangd/index/Background.h; clang-tools-extra/clangd/index/BackgroundIndexLoader.cpp; clang-tools-extra/clangd/index/BackgroundIndexLoader.h; clang-tools-extra/clangd/index/BackgroundIndexStorage.cpp; clang-tools-extra/clangd/index/BackgroundQueue.cpp; clang-tools-extra/clangd/index/BackgroundRebuild.cpp; clang-tools-extra/clangd/index/BackgroundRebuild.h; clang-tools-extra/clangd/index/CanonicalIncludes.cpp; clang-tools-extra/clangd/index/CanonicalIncludes.h; clang-tools-extra/clangd/index/FileIndex.cpp; clang-tools-extra/clangd/index/FileIndex.h; clang-tools-extra/clangd/index/Index.cpp; clang-tools-extra/clangd/index/Index.h; clang-tools-extra/clangd/index/IndexAction.cpp; clang-tools-extra/clangd/index/IndexAction.h; clang-tools-extra/clangd/index/MemIndex.h; clang-tools-extra/clangd/,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:88063,Testability,test,test-client,88063,xtra/clangd/unittests/tweaks/ExtractFunctionTests.cpp; clang-tools-extra/clangd/unittests/tweaks/ExtractVariableTests.cpp; clang-tools-extra/clangd/unittests/tweaks/ObjCLocalizeStringLiteralTests.cpp; clang-tools-extra/clangd/unittests/tweaks/PopulateSwitchTests.cpp; clang-tools-extra/clangd/unittests/tweaks/RawStringLiteralTests.cpp; clang-tools-extra/clangd/unittests/tweaks/RemoveUsingNamespaceTests.cpp; clang-tools-extra/clangd/unittests/tweaks/ShowSelectionTreeTests.cpp; clang-tools-extra/clangd/unittests/tweaks/SwapIfBranchesTests.cpp; clang-tools-extra/clangd/unittests/tweaks/TweakTesting.cpp; clang-tools-extra/clangd/unittests/tweaks/TweakTesting.h; clang-tools-extra/clangd/unittests/tweaks/TweakTests.cpp; clang-tools-extra/clangd/unittests/xpc/ConversionTests.cpp; clang-tools-extra/clangd/xpc/Conversion.cpp; clang-tools-extra/clangd/xpc/Conversion.h; clang-tools-extra/clangd/xpc/XPCTransport.cpp; clang-tools-extra/clangd/xpc/framework/ClangdXPC.cpp; clang-tools-extra/clangd/xpc/test-client/ClangdXPCTestClient.cpp; clang-tools-extra/modularize/Modularize.h; clang-tools-extra/pp-trace/PPTrace.cpp; clang-tools-extra/tool-template/ToolTemplate.cpp; clang-tools-extra/unittests/clang-apply-replacements/ApplyReplacementsTest.cpp; clang-tools-extra/unittests/clang-doc/BitcodeTest.cpp; clang-tools-extra/unittests/clang-doc/ClangDocTest.cpp; clang-tools-extra/unittests/clang-doc/ClangDocTest.h; clang-tools-extra/unittests/clang-doc/GeneratorTest.cpp; clang-tools-extra/unittests/clang-doc/HTMLGeneratorTest.cpp; clang-tools-extra/unittests/clang-doc/MDGeneratorTest.cpp; clang-tools-extra/unittests/clang-doc/MergeTest.cpp; clang-tools-extra/unittests/clang-doc/SerializeTest.cpp; clang-tools-extra/unittests/clang-doc/YAMLGeneratorTest.cpp; clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp; clang-tools-extra/unittests/clang-tidy/ClangTidyDiagnosticConsumerTest.cpp; clang-tools-extra/unittests/clang-tidy/ClangTidyTest.h; clang-tools-extra/unittests/clang-tidy/DeclRefE,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:89880,Testability,test,tests,89880,pp; clang-tools-extra/unittests/clang-tidy/ClangTidyDiagnosticConsumerTest.cpp; clang-tools-extra/unittests/clang-tidy/ClangTidyTest.h; clang-tools-extra/unittests/clang-tidy/DeclRefExprUtilsTest.cpp; clang-tools-extra/unittests/clang-tidy/GlobListTest.cpp; clang-tools-extra/unittests/clang-tidy/OptionsProviderTest.cpp; clang-tools-extra/unittests/clang-tidy/OverlappingReplacementsTest.cpp; clang-tools-extra/unittests/clang-tidy/ReadabilityModuleTest.cpp; clang-tools-extra/unittests/clang-tidy/TransformerClangTidyCheckTest.cpp; compiler-rt/include/sanitizer/linux_syscall_hooks.h; compiler-rt/include/sanitizer/memprof_interface.h; compiler-rt/include/sanitizer/netbsd_syscall_hooks.h; compiler-rt/include/xray/xray_interface.h; compiler-rt/include/xray/xray_log_interface.h; compiler-rt/lib/asan/asan_activation.h; compiler-rt/lib/asan/asan_lock.h; compiler-rt/lib/asan/asan_mapping.h; compiler-rt/lib/asan/asan_mapping_sparc64.h; compiler-rt/lib/asan/asan_rtl_static.cpp; compiler-rt/lib/asan/tests/asan_globals_test.cpp; compiler-rt/lib/builtins/fp_extend.h; compiler-rt/lib/builtins/fp_lib.h; compiler-rt/lib/builtins/fp_mode.h; compiler-rt/lib/builtins/fp_trunc.h; compiler-rt/lib/builtins/int_endianness.h; compiler-rt/lib/builtins/int_math.h; compiler-rt/lib/builtins/int_types.h; compiler-rt/lib/builtins/int_util.h; compiler-rt/lib/builtins/unwind-ehabi-helpers.h; compiler-rt/lib/builtins/ppc/DD.h; compiler-rt/lib/dfsan/dfsan_allocator.cpp; compiler-rt/lib/dfsan/dfsan_allocator.h; compiler-rt/lib/dfsan/dfsan_chained_origin_depot.cpp; compiler-rt/lib/dfsan/dfsan_chained_origin_depot.h; compiler-rt/lib/dfsan/dfsan_flags.h; compiler-rt/lib/dfsan/dfsan_interceptors.cpp; compiler-rt/lib/dfsan/dfsan_origin.h; compiler-rt/lib/dfsan/dfsan_platform.h; compiler-rt/lib/dfsan/dfsan_thread.h; compiler-rt/lib/fuzzer/FuzzerCommand.h; compiler-rt/lib/fuzzer/FuzzerExtFunctions.h; compiler-rt/lib/fuzzer/FuzzerExtFunctionsDlsym.cpp; compiler-rt/lib/fuzzer/FuzzerExtFunctionsWeak.cpp; compiler,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:91128,Testability,test,tests,91128,.h; compiler-rt/lib/builtins/int_types.h; compiler-rt/lib/builtins/int_util.h; compiler-rt/lib/builtins/unwind-ehabi-helpers.h; compiler-rt/lib/builtins/ppc/DD.h; compiler-rt/lib/dfsan/dfsan_allocator.cpp; compiler-rt/lib/dfsan/dfsan_allocator.h; compiler-rt/lib/dfsan/dfsan_chained_origin_depot.cpp; compiler-rt/lib/dfsan/dfsan_chained_origin_depot.h; compiler-rt/lib/dfsan/dfsan_flags.h; compiler-rt/lib/dfsan/dfsan_interceptors.cpp; compiler-rt/lib/dfsan/dfsan_origin.h; compiler-rt/lib/dfsan/dfsan_platform.h; compiler-rt/lib/dfsan/dfsan_thread.h; compiler-rt/lib/fuzzer/FuzzerCommand.h; compiler-rt/lib/fuzzer/FuzzerExtFunctions.h; compiler-rt/lib/fuzzer/FuzzerExtFunctionsDlsym.cpp; compiler-rt/lib/fuzzer/FuzzerExtFunctionsWeak.cpp; compiler-rt/lib/fuzzer/FuzzerExtraCountersDarwin.cpp; compiler-rt/lib/fuzzer/FuzzerExtraCountersWindows.cpp; compiler-rt/lib/fuzzer/FuzzerFork.h; compiler-rt/lib/fuzzer/FuzzerInterceptors.cpp; compiler-rt/lib/fuzzer/FuzzerPlatform.h; compiler-rt/lib/fuzzer/tests/FuzzedDataProviderUnittest.cpp; compiler-rt/lib/gwp_asan/common.cpp; compiler-rt/lib/gwp_asan/common.h; compiler-rt/lib/gwp_asan/crash_handler.cpp; compiler-rt/lib/gwp_asan/crash_handler.h; compiler-rt/lib/gwp_asan/definitions.h; compiler-rt/lib/gwp_asan/guarded_pool_allocator.cpp; compiler-rt/lib/gwp_asan/guarded_pool_allocator.h; compiler-rt/lib/gwp_asan/mutex.h; compiler-rt/lib/gwp_asan/options.h; compiler-rt/lib/gwp_asan/stack_trace_compressor.cpp; compiler-rt/lib/gwp_asan/stack_trace_compressor.h; compiler-rt/lib/gwp_asan/utilities.h; compiler-rt/lib/gwp_asan/optional/backtrace.h; compiler-rt/lib/gwp_asan/optional/backtrace_fuchsia.cpp; compiler-rt/lib/gwp_asan/optional/backtrace_linux_libc.cpp; compiler-rt/lib/gwp_asan/optional/backtrace_sanitizer_common.cpp; compiler-rt/lib/gwp_asan/optional/options_parser.cpp; compiler-rt/lib/gwp_asan/optional/options_parser.h; compiler-rt/lib/gwp_asan/optional/printf.h; compiler-rt/lib/gwp_asan/optional/segv_handler.h; compiler-rt/lib/gwp_as,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:93128,Testability,test,tests,93128,/lib/gwp_asan/optional/segv_handler_fuchsia.cpp; compiler-rt/lib/gwp_asan/optional/segv_handler_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/common_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/common_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_posix.h; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_tls.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.h; compiler-rt/lib/gwp_asan/platform_specific/utilities_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/utilities_posix.cpp; compiler-rt/lib/gwp_asan/tests/backtrace.cpp; compiler-rt/lib/gwp_asan/tests/basic.cpp; compiler-rt/lib/gwp_asan/tests/compression.cpp; compiler-rt/lib/gwp_asan/tests/crash_handler_api.cpp; compiler-rt/lib/gwp_asan/tests/driver.cpp; compiler-rt/lib/gwp_asan/tests/enable_disable.cpp; compiler-rt/lib/gwp_asan/tests/harness.cpp; compiler-rt/lib/gwp_asan/tests/harness.h; compiler-rt/lib/gwp_asan/tests/iterate.cpp; compiler-rt/lib/gwp_asan/tests/late_init.cpp; compiler-rt/lib/gwp_asan/tests/mutex_test.cpp; compiler-rt/lib/gwp_asan/tests/options.cpp; compiler-rt/lib/gwp_asan/tests/slot_reuse.cpp; compiler-rt/lib/gwp_asan/tests/thread_contention.cpp; compiler-rt/lib/gwp_asan/tests/platform_specific/printf_sanitizer_common.cpp; compiler-rt/lib/hwasan/hwasan_checks.h; compiler-rt/lib/hwasan/hwasan_dynamic_shadow.h; compiler-rt/lib/hwasan/hwasan_flags.h; compiler-rt/lib/hwasan/hwasan_globals.cpp; compiler-rt/lib/hwasan/hwasan_globals.h; compiler-rt/lib/hwasan/hwasan_linux.cpp; compiler-rt/lib/hwasan/hwasan_poison,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:93174,Testability,test,tests,93174,cpp; compiler-rt/lib/gwp_asan/optional/segv_handler_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/common_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/common_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_posix.h; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_tls.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.h; compiler-rt/lib/gwp_asan/platform_specific/utilities_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/utilities_posix.cpp; compiler-rt/lib/gwp_asan/tests/backtrace.cpp; compiler-rt/lib/gwp_asan/tests/basic.cpp; compiler-rt/lib/gwp_asan/tests/compression.cpp; compiler-rt/lib/gwp_asan/tests/crash_handler_api.cpp; compiler-rt/lib/gwp_asan/tests/driver.cpp; compiler-rt/lib/gwp_asan/tests/enable_disable.cpp; compiler-rt/lib/gwp_asan/tests/harness.cpp; compiler-rt/lib/gwp_asan/tests/harness.h; compiler-rt/lib/gwp_asan/tests/iterate.cpp; compiler-rt/lib/gwp_asan/tests/late_init.cpp; compiler-rt/lib/gwp_asan/tests/mutex_test.cpp; compiler-rt/lib/gwp_asan/tests/options.cpp; compiler-rt/lib/gwp_asan/tests/slot_reuse.cpp; compiler-rt/lib/gwp_asan/tests/thread_contention.cpp; compiler-rt/lib/gwp_asan/tests/platform_specific/printf_sanitizer_common.cpp; compiler-rt/lib/hwasan/hwasan_checks.h; compiler-rt/lib/hwasan/hwasan_dynamic_shadow.h; compiler-rt/lib/hwasan/hwasan_flags.h; compiler-rt/lib/hwasan/hwasan_globals.cpp; compiler-rt/lib/hwasan/hwasan_globals.h; compiler-rt/lib/hwasan/hwasan_linux.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.cpp; compiler-rt/lib/hwasan/hwasan_poiso,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:93216,Testability,test,tests,93216,andler_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/common_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/common_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_posix.h; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_tls.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.h; compiler-rt/lib/gwp_asan/platform_specific/utilities_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/utilities_posix.cpp; compiler-rt/lib/gwp_asan/tests/backtrace.cpp; compiler-rt/lib/gwp_asan/tests/basic.cpp; compiler-rt/lib/gwp_asan/tests/compression.cpp; compiler-rt/lib/gwp_asan/tests/crash_handler_api.cpp; compiler-rt/lib/gwp_asan/tests/driver.cpp; compiler-rt/lib/gwp_asan/tests/enable_disable.cpp; compiler-rt/lib/gwp_asan/tests/harness.cpp; compiler-rt/lib/gwp_asan/tests/harness.h; compiler-rt/lib/gwp_asan/tests/iterate.cpp; compiler-rt/lib/gwp_asan/tests/late_init.cpp; compiler-rt/lib/gwp_asan/tests/mutex_test.cpp; compiler-rt/lib/gwp_asan/tests/options.cpp; compiler-rt/lib/gwp_asan/tests/slot_reuse.cpp; compiler-rt/lib/gwp_asan/tests/thread_contention.cpp; compiler-rt/lib/gwp_asan/tests/platform_specific/printf_sanitizer_common.cpp; compiler-rt/lib/hwasan/hwasan_checks.h; compiler-rt/lib/hwasan/hwasan_dynamic_shadow.h; compiler-rt/lib/hwasan/hwasan_flags.h; compiler-rt/lib/hwasan/hwasan_globals.cpp; compiler-rt/lib/hwasan/hwasan_globals.h; compiler-rt/lib/hwasan/hwasan_linux.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.h; compiler-rt/lib/hwasan/hwasan_preinit,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:93264,Testability,test,tests,93264,_specific/common_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/common_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_posix.h; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_tls.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.h; compiler-rt/lib/gwp_asan/platform_specific/utilities_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/utilities_posix.cpp; compiler-rt/lib/gwp_asan/tests/backtrace.cpp; compiler-rt/lib/gwp_asan/tests/basic.cpp; compiler-rt/lib/gwp_asan/tests/compression.cpp; compiler-rt/lib/gwp_asan/tests/crash_handler_api.cpp; compiler-rt/lib/gwp_asan/tests/driver.cpp; compiler-rt/lib/gwp_asan/tests/enable_disable.cpp; compiler-rt/lib/gwp_asan/tests/harness.cpp; compiler-rt/lib/gwp_asan/tests/harness.h; compiler-rt/lib/gwp_asan/tests/iterate.cpp; compiler-rt/lib/gwp_asan/tests/late_init.cpp; compiler-rt/lib/gwp_asan/tests/mutex_test.cpp; compiler-rt/lib/gwp_asan/tests/options.cpp; compiler-rt/lib/gwp_asan/tests/slot_reuse.cpp; compiler-rt/lib/gwp_asan/tests/thread_contention.cpp; compiler-rt/lib/gwp_asan/tests/platform_specific/printf_sanitizer_common.cpp; compiler-rt/lib/hwasan/hwasan_checks.h; compiler-rt/lib/hwasan/hwasan_dynamic_shadow.h; compiler-rt/lib/hwasan/hwasan_flags.h; compiler-rt/lib/hwasan/hwasan_globals.cpp; compiler-rt/lib/hwasan/hwasan_globals.h; compiler-rt/lib/hwasan/hwasan_linux.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.h; compiler-rt/lib/hwasan/hwasan_preinit.cpp; compiler-rt/lib/interception/interception_mac,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:93318,Testability,test,tests,93318,p_asan/platform_specific/common_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_posix.h; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_tls.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.h; compiler-rt/lib/gwp_asan/platform_specific/utilities_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/utilities_posix.cpp; compiler-rt/lib/gwp_asan/tests/backtrace.cpp; compiler-rt/lib/gwp_asan/tests/basic.cpp; compiler-rt/lib/gwp_asan/tests/compression.cpp; compiler-rt/lib/gwp_asan/tests/crash_handler_api.cpp; compiler-rt/lib/gwp_asan/tests/driver.cpp; compiler-rt/lib/gwp_asan/tests/enable_disable.cpp; compiler-rt/lib/gwp_asan/tests/harness.cpp; compiler-rt/lib/gwp_asan/tests/harness.h; compiler-rt/lib/gwp_asan/tests/iterate.cpp; compiler-rt/lib/gwp_asan/tests/late_init.cpp; compiler-rt/lib/gwp_asan/tests/mutex_test.cpp; compiler-rt/lib/gwp_asan/tests/options.cpp; compiler-rt/lib/gwp_asan/tests/slot_reuse.cpp; compiler-rt/lib/gwp_asan/tests/thread_contention.cpp; compiler-rt/lib/gwp_asan/tests/platform_specific/printf_sanitizer_common.cpp; compiler-rt/lib/hwasan/hwasan_checks.h; compiler-rt/lib/hwasan/hwasan_dynamic_shadow.h; compiler-rt/lib/hwasan/hwasan_flags.h; compiler-rt/lib/hwasan/hwasan_globals.cpp; compiler-rt/lib/hwasan/hwasan_globals.h; compiler-rt/lib/hwasan/hwasan_linux.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.h; compiler-rt/lib/hwasan/hwasan_preinit.cpp; compiler-rt/lib/interception/interception_mac.cpp; compiler-rt/lib/interception/tests/intercep,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:93361,Testability,test,tests,93361,iler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_posix.h; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_tls.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.h; compiler-rt/lib/gwp_asan/platform_specific/utilities_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/utilities_posix.cpp; compiler-rt/lib/gwp_asan/tests/backtrace.cpp; compiler-rt/lib/gwp_asan/tests/basic.cpp; compiler-rt/lib/gwp_asan/tests/compression.cpp; compiler-rt/lib/gwp_asan/tests/crash_handler_api.cpp; compiler-rt/lib/gwp_asan/tests/driver.cpp; compiler-rt/lib/gwp_asan/tests/enable_disable.cpp; compiler-rt/lib/gwp_asan/tests/harness.cpp; compiler-rt/lib/gwp_asan/tests/harness.h; compiler-rt/lib/gwp_asan/tests/iterate.cpp; compiler-rt/lib/gwp_asan/tests/late_init.cpp; compiler-rt/lib/gwp_asan/tests/mutex_test.cpp; compiler-rt/lib/gwp_asan/tests/options.cpp; compiler-rt/lib/gwp_asan/tests/slot_reuse.cpp; compiler-rt/lib/gwp_asan/tests/thread_contention.cpp; compiler-rt/lib/gwp_asan/tests/platform_specific/printf_sanitizer_common.cpp; compiler-rt/lib/hwasan/hwasan_checks.h; compiler-rt/lib/hwasan/hwasan_dynamic_shadow.h; compiler-rt/lib/hwasan/hwasan_flags.h; compiler-rt/lib/hwasan/hwasan_globals.cpp; compiler-rt/lib/hwasan/hwasan_globals.h; compiler-rt/lib/hwasan/hwasan_linux.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.h; compiler-rt/lib/hwasan/hwasan_preinit.cpp; compiler-rt/lib/interception/interception_mac.cpp; compiler-rt/lib/interception/tests/interception_test_main.cpp; compiler-rt/lib/lsan/lsan.h,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:93412,Testability,test,tests,93412,ool_allocator_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_posix.h; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_tls.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.h; compiler-rt/lib/gwp_asan/platform_specific/utilities_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/utilities_posix.cpp; compiler-rt/lib/gwp_asan/tests/backtrace.cpp; compiler-rt/lib/gwp_asan/tests/basic.cpp; compiler-rt/lib/gwp_asan/tests/compression.cpp; compiler-rt/lib/gwp_asan/tests/crash_handler_api.cpp; compiler-rt/lib/gwp_asan/tests/driver.cpp; compiler-rt/lib/gwp_asan/tests/enable_disable.cpp; compiler-rt/lib/gwp_asan/tests/harness.cpp; compiler-rt/lib/gwp_asan/tests/harness.h; compiler-rt/lib/gwp_asan/tests/iterate.cpp; compiler-rt/lib/gwp_asan/tests/late_init.cpp; compiler-rt/lib/gwp_asan/tests/mutex_test.cpp; compiler-rt/lib/gwp_asan/tests/options.cpp; compiler-rt/lib/gwp_asan/tests/slot_reuse.cpp; compiler-rt/lib/gwp_asan/tests/thread_contention.cpp; compiler-rt/lib/gwp_asan/tests/platform_specific/printf_sanitizer_common.cpp; compiler-rt/lib/hwasan/hwasan_checks.h; compiler-rt/lib/hwasan/hwasan_dynamic_shadow.h; compiler-rt/lib/hwasan/hwasan_flags.h; compiler-rt/lib/hwasan/hwasan_globals.cpp; compiler-rt/lib/hwasan/hwasan_globals.h; compiler-rt/lib/hwasan/hwasan_linux.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.h; compiler-rt/lib/hwasan/hwasan_preinit.cpp; compiler-rt/lib/interception/interception_mac.cpp; compiler-rt/lib/interception/tests/interception_test_main.cpp; compiler-rt/lib/lsan/lsan.h; compiler-rt/lib/lsan/lsan_common.cpp; compile,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:93456,Testability,test,tests,93456,wp_asan/platform_specific/guarded_pool_allocator_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_posix.h; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_tls.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.h; compiler-rt/lib/gwp_asan/platform_specific/utilities_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/utilities_posix.cpp; compiler-rt/lib/gwp_asan/tests/backtrace.cpp; compiler-rt/lib/gwp_asan/tests/basic.cpp; compiler-rt/lib/gwp_asan/tests/compression.cpp; compiler-rt/lib/gwp_asan/tests/crash_handler_api.cpp; compiler-rt/lib/gwp_asan/tests/driver.cpp; compiler-rt/lib/gwp_asan/tests/enable_disable.cpp; compiler-rt/lib/gwp_asan/tests/harness.cpp; compiler-rt/lib/gwp_asan/tests/harness.h; compiler-rt/lib/gwp_asan/tests/iterate.cpp; compiler-rt/lib/gwp_asan/tests/late_init.cpp; compiler-rt/lib/gwp_asan/tests/mutex_test.cpp; compiler-rt/lib/gwp_asan/tests/options.cpp; compiler-rt/lib/gwp_asan/tests/slot_reuse.cpp; compiler-rt/lib/gwp_asan/tests/thread_contention.cpp; compiler-rt/lib/gwp_asan/tests/platform_specific/printf_sanitizer_common.cpp; compiler-rt/lib/hwasan/hwasan_checks.h; compiler-rt/lib/hwasan/hwasan_dynamic_shadow.h; compiler-rt/lib/hwasan/hwasan_flags.h; compiler-rt/lib/hwasan/hwasan_globals.cpp; compiler-rt/lib/hwasan/hwasan_globals.h; compiler-rt/lib/hwasan/hwasan_linux.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.h; compiler-rt/lib/hwasan/hwasan_preinit.cpp; compiler-rt/lib/interception/interception_mac.cpp; compiler-rt/lib/interception/tests/interception_test_main.cpp; compiler-rt/lib/lsan/lsan.h; compiler-rt/lib/lsan/lsan_common.cpp; compiler-rt/lib/lsan/lsan_thread.cpp; compiler-rt/l,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:93498,Testability,test,tests,93498,cator_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_posix.h; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_tls.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.h; compiler-rt/lib/gwp_asan/platform_specific/utilities_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/utilities_posix.cpp; compiler-rt/lib/gwp_asan/tests/backtrace.cpp; compiler-rt/lib/gwp_asan/tests/basic.cpp; compiler-rt/lib/gwp_asan/tests/compression.cpp; compiler-rt/lib/gwp_asan/tests/crash_handler_api.cpp; compiler-rt/lib/gwp_asan/tests/driver.cpp; compiler-rt/lib/gwp_asan/tests/enable_disable.cpp; compiler-rt/lib/gwp_asan/tests/harness.cpp; compiler-rt/lib/gwp_asan/tests/harness.h; compiler-rt/lib/gwp_asan/tests/iterate.cpp; compiler-rt/lib/gwp_asan/tests/late_init.cpp; compiler-rt/lib/gwp_asan/tests/mutex_test.cpp; compiler-rt/lib/gwp_asan/tests/options.cpp; compiler-rt/lib/gwp_asan/tests/slot_reuse.cpp; compiler-rt/lib/gwp_asan/tests/thread_contention.cpp; compiler-rt/lib/gwp_asan/tests/platform_specific/printf_sanitizer_common.cpp; compiler-rt/lib/hwasan/hwasan_checks.h; compiler-rt/lib/hwasan/hwasan_dynamic_shadow.h; compiler-rt/lib/hwasan/hwasan_flags.h; compiler-rt/lib/hwasan/hwasan_globals.cpp; compiler-rt/lib/hwasan/hwasan_globals.h; compiler-rt/lib/hwasan/hwasan_linux.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.h; compiler-rt/lib/hwasan/hwasan_preinit.cpp; compiler-rt/lib/interception/interception_mac.cpp; compiler-rt/lib/interception/tests/interception_test_main.cpp; compiler-rt/lib/lsan/lsan.h; compiler-rt/lib/lsan/lsan_common.cpp; compiler-rt/lib/lsan/lsan_thread.cpp; compiler-rt/lib/lsan/lsan_thread.h; compiler-rt/lib/memp,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:93542,Testability,test,tests,93542,atform_specific/guarded_pool_allocator_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_posix.h; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_tls.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.h; compiler-rt/lib/gwp_asan/platform_specific/utilities_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/utilities_posix.cpp; compiler-rt/lib/gwp_asan/tests/backtrace.cpp; compiler-rt/lib/gwp_asan/tests/basic.cpp; compiler-rt/lib/gwp_asan/tests/compression.cpp; compiler-rt/lib/gwp_asan/tests/crash_handler_api.cpp; compiler-rt/lib/gwp_asan/tests/driver.cpp; compiler-rt/lib/gwp_asan/tests/enable_disable.cpp; compiler-rt/lib/gwp_asan/tests/harness.cpp; compiler-rt/lib/gwp_asan/tests/harness.h; compiler-rt/lib/gwp_asan/tests/iterate.cpp; compiler-rt/lib/gwp_asan/tests/late_init.cpp; compiler-rt/lib/gwp_asan/tests/mutex_test.cpp; compiler-rt/lib/gwp_asan/tests/options.cpp; compiler-rt/lib/gwp_asan/tests/slot_reuse.cpp; compiler-rt/lib/gwp_asan/tests/thread_contention.cpp; compiler-rt/lib/gwp_asan/tests/platform_specific/printf_sanitizer_common.cpp; compiler-rt/lib/hwasan/hwasan_checks.h; compiler-rt/lib/hwasan/hwasan_dynamic_shadow.h; compiler-rt/lib/hwasan/hwasan_flags.h; compiler-rt/lib/hwasan/hwasan_globals.cpp; compiler-rt/lib/hwasan/hwasan_globals.h; compiler-rt/lib/hwasan/hwasan_linux.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.h; compiler-rt/lib/hwasan/hwasan_preinit.cpp; compiler-rt/lib/interception/interception_mac.cpp; compiler-rt/lib/interception/tests/interception_test_main.cpp; compiler-rt/lib/lsan/lsan.h; compiler-rt/lib/lsan/lsan_common.cpp; compiler-rt/lib/lsan/lsan_thread.cpp; compiler-rt/lib/lsan/lsan_thread.h; compiler-rt/lib/memprof/memprof_allocator.cpp; compiler-rt/lib/m,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:93588,Testability,test,tests,93588,pp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_posix.h; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_tls.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.h; compiler-rt/lib/gwp_asan/platform_specific/utilities_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/utilities_posix.cpp; compiler-rt/lib/gwp_asan/tests/backtrace.cpp; compiler-rt/lib/gwp_asan/tests/basic.cpp; compiler-rt/lib/gwp_asan/tests/compression.cpp; compiler-rt/lib/gwp_asan/tests/crash_handler_api.cpp; compiler-rt/lib/gwp_asan/tests/driver.cpp; compiler-rt/lib/gwp_asan/tests/enable_disable.cpp; compiler-rt/lib/gwp_asan/tests/harness.cpp; compiler-rt/lib/gwp_asan/tests/harness.h; compiler-rt/lib/gwp_asan/tests/iterate.cpp; compiler-rt/lib/gwp_asan/tests/late_init.cpp; compiler-rt/lib/gwp_asan/tests/mutex_test.cpp; compiler-rt/lib/gwp_asan/tests/options.cpp; compiler-rt/lib/gwp_asan/tests/slot_reuse.cpp; compiler-rt/lib/gwp_asan/tests/thread_contention.cpp; compiler-rt/lib/gwp_asan/tests/platform_specific/printf_sanitizer_common.cpp; compiler-rt/lib/hwasan/hwasan_checks.h; compiler-rt/lib/hwasan/hwasan_dynamic_shadow.h; compiler-rt/lib/hwasan/hwasan_flags.h; compiler-rt/lib/hwasan/hwasan_globals.cpp; compiler-rt/lib/hwasan/hwasan_globals.h; compiler-rt/lib/hwasan/hwasan_linux.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.h; compiler-rt/lib/hwasan/hwasan_preinit.cpp; compiler-rt/lib/interception/interception_mac.cpp; compiler-rt/lib/interception/tests/interception_test_main.cpp; compiler-rt/lib/lsan/lsan.h; compiler-rt/lib/lsan/lsan_common.cpp; compiler-rt/lib/lsan/lsan_thread.cpp; compiler-rt/lib/lsan/lsan_thread.h; compiler-rt/lib/memprof/memprof_allocator.cpp; compiler-rt/lib/memprof/memprof_allocator.h; compiler-rt/lib/mem,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:93635,Testability,test,tests,93635,/guarded_pool_allocator_posix.h; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_tls.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.h; compiler-rt/lib/gwp_asan/platform_specific/utilities_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/utilities_posix.cpp; compiler-rt/lib/gwp_asan/tests/backtrace.cpp; compiler-rt/lib/gwp_asan/tests/basic.cpp; compiler-rt/lib/gwp_asan/tests/compression.cpp; compiler-rt/lib/gwp_asan/tests/crash_handler_api.cpp; compiler-rt/lib/gwp_asan/tests/driver.cpp; compiler-rt/lib/gwp_asan/tests/enable_disable.cpp; compiler-rt/lib/gwp_asan/tests/harness.cpp; compiler-rt/lib/gwp_asan/tests/harness.h; compiler-rt/lib/gwp_asan/tests/iterate.cpp; compiler-rt/lib/gwp_asan/tests/late_init.cpp; compiler-rt/lib/gwp_asan/tests/mutex_test.cpp; compiler-rt/lib/gwp_asan/tests/options.cpp; compiler-rt/lib/gwp_asan/tests/slot_reuse.cpp; compiler-rt/lib/gwp_asan/tests/thread_contention.cpp; compiler-rt/lib/gwp_asan/tests/platform_specific/printf_sanitizer_common.cpp; compiler-rt/lib/hwasan/hwasan_checks.h; compiler-rt/lib/hwasan/hwasan_dynamic_shadow.h; compiler-rt/lib/hwasan/hwasan_flags.h; compiler-rt/lib/hwasan/hwasan_globals.cpp; compiler-rt/lib/hwasan/hwasan_globals.h; compiler-rt/lib/hwasan/hwasan_linux.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.h; compiler-rt/lib/hwasan/hwasan_preinit.cpp; compiler-rt/lib/interception/interception_mac.cpp; compiler-rt/lib/interception/tests/interception_test_main.cpp; compiler-rt/lib/lsan/lsan.h; compiler-rt/lib/lsan/lsan_common.cpp; compiler-rt/lib/lsan/lsan_thread.cpp; compiler-rt/lib/lsan/lsan_thread.h; compiler-rt/lib/memprof/memprof_allocator.cpp; compiler-rt/lib/memprof/memprof_allocator.h; compiler-rt/lib/memprof/memprof_descriptions.cpp; compiler-rt/li,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:93679,Testability,test,tests,93679,lib/gwp_asan/platform_specific/guarded_pool_allocator_tls.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.h; compiler-rt/lib/gwp_asan/platform_specific/utilities_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/utilities_posix.cpp; compiler-rt/lib/gwp_asan/tests/backtrace.cpp; compiler-rt/lib/gwp_asan/tests/basic.cpp; compiler-rt/lib/gwp_asan/tests/compression.cpp; compiler-rt/lib/gwp_asan/tests/crash_handler_api.cpp; compiler-rt/lib/gwp_asan/tests/driver.cpp; compiler-rt/lib/gwp_asan/tests/enable_disable.cpp; compiler-rt/lib/gwp_asan/tests/harness.cpp; compiler-rt/lib/gwp_asan/tests/harness.h; compiler-rt/lib/gwp_asan/tests/iterate.cpp; compiler-rt/lib/gwp_asan/tests/late_init.cpp; compiler-rt/lib/gwp_asan/tests/mutex_test.cpp; compiler-rt/lib/gwp_asan/tests/options.cpp; compiler-rt/lib/gwp_asan/tests/slot_reuse.cpp; compiler-rt/lib/gwp_asan/tests/thread_contention.cpp; compiler-rt/lib/gwp_asan/tests/platform_specific/printf_sanitizer_common.cpp; compiler-rt/lib/hwasan/hwasan_checks.h; compiler-rt/lib/hwasan/hwasan_dynamic_shadow.h; compiler-rt/lib/hwasan/hwasan_flags.h; compiler-rt/lib/hwasan/hwasan_globals.cpp; compiler-rt/lib/hwasan/hwasan_globals.h; compiler-rt/lib/hwasan/hwasan_linux.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.h; compiler-rt/lib/hwasan/hwasan_preinit.cpp; compiler-rt/lib/interception/interception_mac.cpp; compiler-rt/lib/interception/tests/interception_test_main.cpp; compiler-rt/lib/lsan/lsan.h; compiler-rt/lib/lsan/lsan_common.cpp; compiler-rt/lib/lsan/lsan_thread.cpp; compiler-rt/lib/lsan/lsan_thread.h; compiler-rt/lib/memprof/memprof_allocator.cpp; compiler-rt/lib/memprof/memprof_allocator.h; compiler-rt/lib/memprof/memprof_descriptions.cpp; compiler-rt/lib/memprof/memprof_descriptions.h; compiler-rt/,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:93726,Testability,test,tests,93726,or_tls.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.h; compiler-rt/lib/gwp_asan/platform_specific/utilities_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/utilities_posix.cpp; compiler-rt/lib/gwp_asan/tests/backtrace.cpp; compiler-rt/lib/gwp_asan/tests/basic.cpp; compiler-rt/lib/gwp_asan/tests/compression.cpp; compiler-rt/lib/gwp_asan/tests/crash_handler_api.cpp; compiler-rt/lib/gwp_asan/tests/driver.cpp; compiler-rt/lib/gwp_asan/tests/enable_disable.cpp; compiler-rt/lib/gwp_asan/tests/harness.cpp; compiler-rt/lib/gwp_asan/tests/harness.h; compiler-rt/lib/gwp_asan/tests/iterate.cpp; compiler-rt/lib/gwp_asan/tests/late_init.cpp; compiler-rt/lib/gwp_asan/tests/mutex_test.cpp; compiler-rt/lib/gwp_asan/tests/options.cpp; compiler-rt/lib/gwp_asan/tests/slot_reuse.cpp; compiler-rt/lib/gwp_asan/tests/thread_contention.cpp; compiler-rt/lib/gwp_asan/tests/platform_specific/printf_sanitizer_common.cpp; compiler-rt/lib/hwasan/hwasan_checks.h; compiler-rt/lib/hwasan/hwasan_dynamic_shadow.h; compiler-rt/lib/hwasan/hwasan_flags.h; compiler-rt/lib/hwasan/hwasan_globals.cpp; compiler-rt/lib/hwasan/hwasan_globals.h; compiler-rt/lib/hwasan/hwasan_linux.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.h; compiler-rt/lib/hwasan/hwasan_preinit.cpp; compiler-rt/lib/interception/interception_mac.cpp; compiler-rt/lib/interception/tests/interception_test_main.cpp; compiler-rt/lib/lsan/lsan.h; compiler-rt/lib/lsan/lsan_common.cpp; compiler-rt/lib/lsan/lsan_thread.cpp; compiler-rt/lib/lsan/lsan_thread.h; compiler-rt/lib/memprof/memprof_allocator.cpp; compiler-rt/lib/memprof/memprof_allocator.h; compiler-rt/lib/memprof/memprof_descriptions.cpp; compiler-rt/lib/memprof/memprof_descriptions.h; compiler-rt/lib/memprof/memprof_flags.cpp; compiler-rt/lib/mem,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:93780,Testability,test,tests,93780,.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.h; compiler-rt/lib/gwp_asan/platform_specific/utilities_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/utilities_posix.cpp; compiler-rt/lib/gwp_asan/tests/backtrace.cpp; compiler-rt/lib/gwp_asan/tests/basic.cpp; compiler-rt/lib/gwp_asan/tests/compression.cpp; compiler-rt/lib/gwp_asan/tests/crash_handler_api.cpp; compiler-rt/lib/gwp_asan/tests/driver.cpp; compiler-rt/lib/gwp_asan/tests/enable_disable.cpp; compiler-rt/lib/gwp_asan/tests/harness.cpp; compiler-rt/lib/gwp_asan/tests/harness.h; compiler-rt/lib/gwp_asan/tests/iterate.cpp; compiler-rt/lib/gwp_asan/tests/late_init.cpp; compiler-rt/lib/gwp_asan/tests/mutex_test.cpp; compiler-rt/lib/gwp_asan/tests/options.cpp; compiler-rt/lib/gwp_asan/tests/slot_reuse.cpp; compiler-rt/lib/gwp_asan/tests/thread_contention.cpp; compiler-rt/lib/gwp_asan/tests/platform_specific/printf_sanitizer_common.cpp; compiler-rt/lib/hwasan/hwasan_checks.h; compiler-rt/lib/hwasan/hwasan_dynamic_shadow.h; compiler-rt/lib/hwasan/hwasan_flags.h; compiler-rt/lib/hwasan/hwasan_globals.cpp; compiler-rt/lib/hwasan/hwasan_globals.h; compiler-rt/lib/hwasan/hwasan_linux.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.h; compiler-rt/lib/hwasan/hwasan_preinit.cpp; compiler-rt/lib/interception/interception_mac.cpp; compiler-rt/lib/interception/tests/interception_test_main.cpp; compiler-rt/lib/lsan/lsan.h; compiler-rt/lib/lsan/lsan_common.cpp; compiler-rt/lib/lsan/lsan_thread.cpp; compiler-rt/lib/lsan/lsan_thread.h; compiler-rt/lib/memprof/memprof_allocator.cpp; compiler-rt/lib/memprof/memprof_allocator.h; compiler-rt/lib/memprof/memprof_descriptions.cpp; compiler-rt/lib/memprof/memprof_descriptions.h; compiler-rt/lib/memprof/memprof_flags.cpp; compiler-rt/lib/memprof/memprof_flags.h; compiler-rt/lib/memprof/memprof_init_version,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:94296,Testability,test,tests,94296,compiler-rt/lib/gwp_asan/tests/driver.cpp; compiler-rt/lib/gwp_asan/tests/enable_disable.cpp; compiler-rt/lib/gwp_asan/tests/harness.cpp; compiler-rt/lib/gwp_asan/tests/harness.h; compiler-rt/lib/gwp_asan/tests/iterate.cpp; compiler-rt/lib/gwp_asan/tests/late_init.cpp; compiler-rt/lib/gwp_asan/tests/mutex_test.cpp; compiler-rt/lib/gwp_asan/tests/options.cpp; compiler-rt/lib/gwp_asan/tests/slot_reuse.cpp; compiler-rt/lib/gwp_asan/tests/thread_contention.cpp; compiler-rt/lib/gwp_asan/tests/platform_specific/printf_sanitizer_common.cpp; compiler-rt/lib/hwasan/hwasan_checks.h; compiler-rt/lib/hwasan/hwasan_dynamic_shadow.h; compiler-rt/lib/hwasan/hwasan_flags.h; compiler-rt/lib/hwasan/hwasan_globals.cpp; compiler-rt/lib/hwasan/hwasan_globals.h; compiler-rt/lib/hwasan/hwasan_linux.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.h; compiler-rt/lib/hwasan/hwasan_preinit.cpp; compiler-rt/lib/interception/interception_mac.cpp; compiler-rt/lib/interception/tests/interception_test_main.cpp; compiler-rt/lib/lsan/lsan.h; compiler-rt/lib/lsan/lsan_common.cpp; compiler-rt/lib/lsan/lsan_thread.cpp; compiler-rt/lib/lsan/lsan_thread.h; compiler-rt/lib/memprof/memprof_allocator.cpp; compiler-rt/lib/memprof/memprof_allocator.h; compiler-rt/lib/memprof/memprof_descriptions.cpp; compiler-rt/lib/memprof/memprof_descriptions.h; compiler-rt/lib/memprof/memprof_flags.cpp; compiler-rt/lib/memprof/memprof_flags.h; compiler-rt/lib/memprof/memprof_init_version.h; compiler-rt/lib/memprof/memprof_interceptors.cpp; compiler-rt/lib/memprof/memprof_interceptors.h; compiler-rt/lib/memprof/memprof_interceptors_memintrinsics.cpp; compiler-rt/lib/memprof/memprof_interceptors_memintrinsics.h; compiler-rt/lib/memprof/memprof_interface_internal.h; compiler-rt/lib/memprof/memprof_internal.h; compiler-rt/lib/memprof/memprof_linux.cpp; compiler-rt/lib/memprof/memprof_malloc_linux.cpp; compiler-rt/lib/memprof/memprof_mibmap.cpp; compiler-rt/lib/memprof/memprof_mibmap.h; ,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:95845,Testability,test,tests,95845,cpp; compiler-rt/lib/memprof/memprof_interceptors.h; compiler-rt/lib/memprof/memprof_interceptors_memintrinsics.cpp; compiler-rt/lib/memprof/memprof_interceptors_memintrinsics.h; compiler-rt/lib/memprof/memprof_interface_internal.h; compiler-rt/lib/memprof/memprof_internal.h; compiler-rt/lib/memprof/memprof_linux.cpp; compiler-rt/lib/memprof/memprof_malloc_linux.cpp; compiler-rt/lib/memprof/memprof_mibmap.cpp; compiler-rt/lib/memprof/memprof_mibmap.h; compiler-rt/lib/memprof/memprof_posix.cpp; compiler-rt/lib/memprof/memprof_preinit.cpp; compiler-rt/lib/memprof/memprof_rawprofile.cpp; compiler-rt/lib/memprof/memprof_rawprofile.h; compiler-rt/lib/memprof/memprof_rtl.cpp; compiler-rt/lib/memprof/memprof_shadow_setup.cpp; compiler-rt/lib/memprof/memprof_stack.cpp; compiler-rt/lib/memprof/memprof_stack.h; compiler-rt/lib/memprof/memprof_stats.cpp; compiler-rt/lib/memprof/memprof_stats.h; compiler-rt/lib/memprof/memprof_thread.cpp; compiler-rt/lib/memprof/memprof_thread.h; compiler-rt/lib/memprof/tests/driver.cpp; compiler-rt/lib/memprof/tests/rawprofile.cpp; compiler-rt/lib/msan/msan_chained_origin_depot.h; compiler-rt/lib/msan/msan_flags.h; compiler-rt/lib/msan/msan_poisoning.h; compiler-rt/lib/msan/msan_report.h; compiler-rt/lib/orc/adt.h; compiler-rt/lib/orc/debug.h; compiler-rt/lib/orc/elfnix_platform.cpp; compiler-rt/lib/orc/elfnix_platform.h; compiler-rt/lib/orc/endianness.h; compiler-rt/lib/orc/error.h; compiler-rt/lib/orc/executor_address.h; compiler-rt/lib/orc/extensible_rtti.cpp; compiler-rt/lib/orc/extensible_rtti.h; compiler-rt/lib/orc/log_error_to_stderr.cpp; compiler-rt/lib/orc/macho_ehframe_registration.cpp; compiler-rt/lib/orc/macho_platform.cpp; compiler-rt/lib/orc/macho_platform.h; compiler-rt/lib/orc/run_program_wrapper.cpp; compiler-rt/lib/orc/simple_packed_serialization.h; compiler-rt/lib/orc/wrapper_function_utils.h; compiler-rt/lib/orc/unittests/adt_test.cpp; compiler-rt/lib/orc/unittests/c_api_test.cpp; compiler-rt/lib/orc/unittests/endian_test.c,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:95887,Testability,test,tests,95887,eptors.h; compiler-rt/lib/memprof/memprof_interceptors_memintrinsics.cpp; compiler-rt/lib/memprof/memprof_interceptors_memintrinsics.h; compiler-rt/lib/memprof/memprof_interface_internal.h; compiler-rt/lib/memprof/memprof_internal.h; compiler-rt/lib/memprof/memprof_linux.cpp; compiler-rt/lib/memprof/memprof_malloc_linux.cpp; compiler-rt/lib/memprof/memprof_mibmap.cpp; compiler-rt/lib/memprof/memprof_mibmap.h; compiler-rt/lib/memprof/memprof_posix.cpp; compiler-rt/lib/memprof/memprof_preinit.cpp; compiler-rt/lib/memprof/memprof_rawprofile.cpp; compiler-rt/lib/memprof/memprof_rawprofile.h; compiler-rt/lib/memprof/memprof_rtl.cpp; compiler-rt/lib/memprof/memprof_shadow_setup.cpp; compiler-rt/lib/memprof/memprof_stack.cpp; compiler-rt/lib/memprof/memprof_stack.h; compiler-rt/lib/memprof/memprof_stats.cpp; compiler-rt/lib/memprof/memprof_stats.h; compiler-rt/lib/memprof/memprof_thread.cpp; compiler-rt/lib/memprof/memprof_thread.h; compiler-rt/lib/memprof/tests/driver.cpp; compiler-rt/lib/memprof/tests/rawprofile.cpp; compiler-rt/lib/msan/msan_chained_origin_depot.h; compiler-rt/lib/msan/msan_flags.h; compiler-rt/lib/msan/msan_poisoning.h; compiler-rt/lib/msan/msan_report.h; compiler-rt/lib/orc/adt.h; compiler-rt/lib/orc/debug.h; compiler-rt/lib/orc/elfnix_platform.cpp; compiler-rt/lib/orc/elfnix_platform.h; compiler-rt/lib/orc/endianness.h; compiler-rt/lib/orc/error.h; compiler-rt/lib/orc/executor_address.h; compiler-rt/lib/orc/extensible_rtti.cpp; compiler-rt/lib/orc/extensible_rtti.h; compiler-rt/lib/orc/log_error_to_stderr.cpp; compiler-rt/lib/orc/macho_ehframe_registration.cpp; compiler-rt/lib/orc/macho_platform.cpp; compiler-rt/lib/orc/macho_platform.h; compiler-rt/lib/orc/run_program_wrapper.cpp; compiler-rt/lib/orc/simple_packed_serialization.h; compiler-rt/lib/orc/wrapper_function_utils.h; compiler-rt/lib/orc/unittests/adt_test.cpp; compiler-rt/lib/orc/unittests/c_api_test.cpp; compiler-rt/lib/orc/unittests/endian_test.cpp; compiler-rt/lib/orc/unittests/error_tes,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:99105,Testability,test,tests,99105,nt_new.h; compiler-rt/lib/sanitizer_common/sanitizer_platform.h; compiler-rt/lib/sanitizer_common/sanitizer_platform_limits_openbsd.cpp; compiler-rt/lib/sanitizer_common/sanitizer_platform_limits_openbsd.h; compiler-rt/lib/sanitizer_common/sanitizer_stacktrace_printer.h; compiler-rt/lib/sanitizer_common/sanitizer_stack_store.cpp; compiler-rt/lib/sanitizer_common/sanitizer_stack_store.h; compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_fuchsia.h; compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_win.cpp; compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_markup_constants.h; compiler-rt/lib/sanitizer_common/sanitizer_thread_safety.h; compiler-rt/lib/sanitizer_common/sanitizer_tls_get_addr.h; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.cpp; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.h; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_symbolize.cpp; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_wrappers.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_addrhashmap_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_chained_origin_depot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_dense_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_flat_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_hash_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_leb128_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_lzw_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stackdepot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stack_store_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stoptheworld_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_test_main.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_type_traits_test.cpp; compiler-rt/lib/scudo/standalone/allocator_config.h; compiler-rt/lib/scudo/standalone/atomic_helpers.h; compiler-rt/lib/scudo/standalone/bytemap.h; compiler-rt/lib/scudo/standalone/checksum.cpp; compile,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:99176,Testability,test,tests,99176,/lib/sanitizer_common/sanitizer_platform_limits_openbsd.cpp; compiler-rt/lib/sanitizer_common/sanitizer_platform_limits_openbsd.h; compiler-rt/lib/sanitizer_common/sanitizer_stacktrace_printer.h; compiler-rt/lib/sanitizer_common/sanitizer_stack_store.cpp; compiler-rt/lib/sanitizer_common/sanitizer_stack_store.h; compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_fuchsia.h; compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_win.cpp; compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_markup_constants.h; compiler-rt/lib/sanitizer_common/sanitizer_thread_safety.h; compiler-rt/lib/sanitizer_common/sanitizer_tls_get_addr.h; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.cpp; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.h; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_symbolize.cpp; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_wrappers.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_addrhashmap_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_chained_origin_depot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_dense_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_flat_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_hash_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_leb128_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_lzw_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stackdepot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stack_store_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stoptheworld_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_test_main.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_type_traits_test.cpp; compiler-rt/lib/scudo/standalone/allocator_config.h; compiler-rt/lib/scudo/standalone/atomic_helpers.h; compiler-rt/lib/scudo/standalone/bytemap.h; compiler-rt/lib/scudo/standalone/checksum.cpp; compiler-rt/lib/scudo/standalone/checksum.h; compiler-rt/lib/scudo/standalone/chun,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:99256,Testability,test,tests,99256,ib/sanitizer_common/sanitizer_platform_limits_openbsd.h; compiler-rt/lib/sanitizer_common/sanitizer_stacktrace_printer.h; compiler-rt/lib/sanitizer_common/sanitizer_stack_store.cpp; compiler-rt/lib/sanitizer_common/sanitizer_stack_store.h; compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_fuchsia.h; compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_win.cpp; compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_markup_constants.h; compiler-rt/lib/sanitizer_common/sanitizer_thread_safety.h; compiler-rt/lib/sanitizer_common/sanitizer_tls_get_addr.h; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.cpp; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.h; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_symbolize.cpp; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_wrappers.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_addrhashmap_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_chained_origin_depot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_dense_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_flat_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_hash_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_leb128_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_lzw_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stackdepot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stack_store_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stoptheworld_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_test_main.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_type_traits_test.cpp; compiler-rt/lib/scudo/standalone/allocator_config.h; compiler-rt/lib/scudo/standalone/atomic_helpers.h; compiler-rt/lib/scudo/standalone/bytemap.h; compiler-rt/lib/scudo/standalone/checksum.cpp; compiler-rt/lib/scudo/standalone/checksum.h; compiler-rt/lib/scudo/standalone/chunk.h; compiler-rt/lib/scudo/standalone/combined.h; compiler-rt/lib/scudo/sta,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:99325,Testability,test,tests,99325,lib/sanitizer_common/sanitizer_stacktrace_printer.h; compiler-rt/lib/sanitizer_common/sanitizer_stack_store.cpp; compiler-rt/lib/sanitizer_common/sanitizer_stack_store.h; compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_fuchsia.h; compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_win.cpp; compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_markup_constants.h; compiler-rt/lib/sanitizer_common/sanitizer_thread_safety.h; compiler-rt/lib/sanitizer_common/sanitizer_tls_get_addr.h; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.cpp; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.h; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_symbolize.cpp; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_wrappers.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_addrhashmap_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_chained_origin_depot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_dense_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_flat_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_hash_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_leb128_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_lzw_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stackdepot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stack_store_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stoptheworld_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_test_main.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_type_traits_test.cpp; compiler-rt/lib/scudo/standalone/allocator_config.h; compiler-rt/lib/scudo/standalone/atomic_helpers.h; compiler-rt/lib/scudo/standalone/bytemap.h; compiler-rt/lib/scudo/standalone/checksum.cpp; compiler-rt/lib/scudo/standalone/checksum.h; compiler-rt/lib/scudo/standalone/chunk.h; compiler-rt/lib/scudo/standalone/combined.h; compiler-rt/lib/scudo/standalone/common.cpp; compiler-rt/lib/scudo/standalone/common.h; compi,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:99393,Testability,test,tests,99393,ib/sanitizer_common/sanitizer_stack_store.cpp; compiler-rt/lib/sanitizer_common/sanitizer_stack_store.h; compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_fuchsia.h; compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_win.cpp; compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_markup_constants.h; compiler-rt/lib/sanitizer_common/sanitizer_thread_safety.h; compiler-rt/lib/sanitizer_common/sanitizer_tls_get_addr.h; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.cpp; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.h; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_symbolize.cpp; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_wrappers.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_addrhashmap_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_chained_origin_depot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_dense_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_flat_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_hash_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_leb128_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_lzw_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stackdepot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stack_store_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stoptheworld_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_test_main.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_type_traits_test.cpp; compiler-rt/lib/scudo/standalone/allocator_config.h; compiler-rt/lib/scudo/standalone/atomic_helpers.h; compiler-rt/lib/scudo/standalone/bytemap.h; compiler-rt/lib/scudo/standalone/checksum.cpp; compiler-rt/lib/scudo/standalone/checksum.h; compiler-rt/lib/scudo/standalone/chunk.h; compiler-rt/lib/scudo/standalone/combined.h; compiler-rt/lib/scudo/standalone/common.cpp; compiler-rt/lib/scudo/standalone/common.h; compiler-rt/lib/scudo/standalone/crc32_hw.cpp; compiler-rt/lib/scudo/st,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:99457,Testability,test,tests,99457,nitizer_common/sanitizer_stack_store.h; compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_fuchsia.h; compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_win.cpp; compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_markup_constants.h; compiler-rt/lib/sanitizer_common/sanitizer_thread_safety.h; compiler-rt/lib/sanitizer_common/sanitizer_tls_get_addr.h; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.cpp; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.h; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_symbolize.cpp; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_wrappers.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_addrhashmap_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_chained_origin_depot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_dense_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_flat_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_hash_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_leb128_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_lzw_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stackdepot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stack_store_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stoptheworld_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_test_main.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_type_traits_test.cpp; compiler-rt/lib/scudo/standalone/allocator_config.h; compiler-rt/lib/scudo/standalone/atomic_helpers.h; compiler-rt/lib/scudo/standalone/bytemap.h; compiler-rt/lib/scudo/standalone/checksum.cpp; compiler-rt/lib/scudo/standalone/checksum.h; compiler-rt/lib/scudo/standalone/chunk.h; compiler-rt/lib/scudo/standalone/combined.h; compiler-rt/lib/scudo/standalone/common.cpp; compiler-rt/lib/scudo/standalone/common.h; compiler-rt/lib/scudo/standalone/crc32_hw.cpp; compiler-rt/lib/scudo/standalone/flags.cpp; compiler-rt/lib/scudo/standalone/flags.h; com,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:99523,Testability,test,tests,99523,r_common/sanitizer_stoptheworld_fuchsia.h; compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_win.cpp; compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_markup_constants.h; compiler-rt/lib/sanitizer_common/sanitizer_thread_safety.h; compiler-rt/lib/sanitizer_common/sanitizer_tls_get_addr.h; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.cpp; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.h; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_symbolize.cpp; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_wrappers.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_addrhashmap_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_chained_origin_depot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_dense_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_flat_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_hash_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_leb128_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_lzw_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stackdepot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stack_store_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stoptheworld_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_test_main.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_type_traits_test.cpp; compiler-rt/lib/scudo/standalone/allocator_config.h; compiler-rt/lib/scudo/standalone/atomic_helpers.h; compiler-rt/lib/scudo/standalone/bytemap.h; compiler-rt/lib/scudo/standalone/checksum.cpp; compiler-rt/lib/scudo/standalone/checksum.h; compiler-rt/lib/scudo/standalone/chunk.h; compiler-rt/lib/scudo/standalone/combined.h; compiler-rt/lib/scudo/standalone/common.cpp; compiler-rt/lib/scudo/standalone/common.h; compiler-rt/lib/scudo/standalone/crc32_hw.cpp; compiler-rt/lib/scudo/standalone/flags.cpp; compiler-rt/lib/scudo/standalone/flags.h; compiler-rt/lib/scudo/standalone/flags_parser.cpp; compiler-rt/lib/s,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:99586,Testability,test,tests,99586,r_common/sanitizer_stoptheworld_win.cpp; compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_markup_constants.h; compiler-rt/lib/sanitizer_common/sanitizer_thread_safety.h; compiler-rt/lib/sanitizer_common/sanitizer_tls_get_addr.h; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.cpp; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.h; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_symbolize.cpp; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_wrappers.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_addrhashmap_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_chained_origin_depot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_dense_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_flat_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_hash_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_leb128_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_lzw_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stackdepot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stack_store_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stoptheworld_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_test_main.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_type_traits_test.cpp; compiler-rt/lib/scudo/standalone/allocator_config.h; compiler-rt/lib/scudo/standalone/atomic_helpers.h; compiler-rt/lib/scudo/standalone/bytemap.h; compiler-rt/lib/scudo/standalone/checksum.cpp; compiler-rt/lib/scudo/standalone/checksum.h; compiler-rt/lib/scudo/standalone/chunk.h; compiler-rt/lib/scudo/standalone/combined.h; compiler-rt/lib/scudo/standalone/common.cpp; compiler-rt/lib/scudo/standalone/common.h; compiler-rt/lib/scudo/standalone/crc32_hw.cpp; compiler-rt/lib/scudo/standalone/flags.cpp; compiler-rt/lib/scudo/standalone/flags.h; compiler-rt/lib/scudo/standalone/flags_parser.cpp; compiler-rt/lib/scudo/standalone/flags_parser.h; compiler-rt/lib/scudo/standalone/f,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:99656,Testability,test,tests,99656,mon/sanitizer_symbolizer_markup_constants.h; compiler-rt/lib/sanitizer_common/sanitizer_thread_safety.h; compiler-rt/lib/sanitizer_common/sanitizer_tls_get_addr.h; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.cpp; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.h; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_symbolize.cpp; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_wrappers.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_addrhashmap_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_chained_origin_depot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_dense_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_flat_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_hash_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_leb128_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_lzw_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stackdepot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stack_store_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stoptheworld_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_test_main.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_type_traits_test.cpp; compiler-rt/lib/scudo/standalone/allocator_config.h; compiler-rt/lib/scudo/standalone/atomic_helpers.h; compiler-rt/lib/scudo/standalone/bytemap.h; compiler-rt/lib/scudo/standalone/checksum.cpp; compiler-rt/lib/scudo/standalone/checksum.h; compiler-rt/lib/scudo/standalone/chunk.h; compiler-rt/lib/scudo/standalone/combined.h; compiler-rt/lib/scudo/standalone/common.cpp; compiler-rt/lib/scudo/standalone/common.h; compiler-rt/lib/scudo/standalone/crc32_hw.cpp; compiler-rt/lib/scudo/standalone/flags.cpp; compiler-rt/lib/scudo/standalone/flags.h; compiler-rt/lib/scudo/standalone/flags_parser.cpp; compiler-rt/lib/scudo/standalone/flags_parser.h; compiler-rt/lib/scudo/standalone/fuchsia.cpp; compiler-rt/lib/scudo/standalone/fuchsia.h; compiler-rt/lib,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:99727,Testability,test,tests,99727,ommon/sanitizer_thread_safety.h; compiler-rt/lib/sanitizer_common/sanitizer_tls_get_addr.h; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.cpp; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.h; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_symbolize.cpp; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_wrappers.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_addrhashmap_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_chained_origin_depot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_dense_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_flat_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_hash_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_leb128_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_lzw_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stackdepot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stack_store_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stoptheworld_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_test_main.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_type_traits_test.cpp; compiler-rt/lib/scudo/standalone/allocator_config.h; compiler-rt/lib/scudo/standalone/atomic_helpers.h; compiler-rt/lib/scudo/standalone/bytemap.h; compiler-rt/lib/scudo/standalone/checksum.cpp; compiler-rt/lib/scudo/standalone/checksum.h; compiler-rt/lib/scudo/standalone/chunk.h; compiler-rt/lib/scudo/standalone/combined.h; compiler-rt/lib/scudo/standalone/common.cpp; compiler-rt/lib/scudo/standalone/common.h; compiler-rt/lib/scudo/standalone/crc32_hw.cpp; compiler-rt/lib/scudo/standalone/flags.cpp; compiler-rt/lib/scudo/standalone/flags.h; compiler-rt/lib/scudo/standalone/flags_parser.cpp; compiler-rt/lib/scudo/standalone/flags_parser.h; compiler-rt/lib/scudo/standalone/fuchsia.cpp; compiler-rt/lib/scudo/standalone/fuchsia.h; compiler-rt/lib/scudo/standalone/internal_defs.h; compiler-rt/lib/scudo/standalone/lin,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:99799,Testability,test,tests,99799,nitizer_tls_get_addr.h; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.cpp; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.h; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_symbolize.cpp; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_wrappers.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_addrhashmap_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_chained_origin_depot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_dense_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_flat_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_hash_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_leb128_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_lzw_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stackdepot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stack_store_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stoptheworld_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_test_main.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_type_traits_test.cpp; compiler-rt/lib/scudo/standalone/allocator_config.h; compiler-rt/lib/scudo/standalone/atomic_helpers.h; compiler-rt/lib/scudo/standalone/bytemap.h; compiler-rt/lib/scudo/standalone/checksum.cpp; compiler-rt/lib/scudo/standalone/checksum.h; compiler-rt/lib/scudo/standalone/chunk.h; compiler-rt/lib/scudo/standalone/combined.h; compiler-rt/lib/scudo/standalone/common.cpp; compiler-rt/lib/scudo/standalone/common.h; compiler-rt/lib/scudo/standalone/crc32_hw.cpp; compiler-rt/lib/scudo/standalone/flags.cpp; compiler-rt/lib/scudo/standalone/flags.h; compiler-rt/lib/scudo/standalone/flags_parser.cpp; compiler-rt/lib/scudo/standalone/flags_parser.h; compiler-rt/lib/scudo/standalone/fuchsia.cpp; compiler-rt/lib/scudo/standalone/fuchsia.h; compiler-rt/lib/scudo/standalone/internal_defs.h; compiler-rt/lib/scudo/standalone/linux.cpp; compiler-rt/lib/scudo/standalone/linux.h; compiler-rt/lib/sc,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:99863,Testability,test,tests,99863,type_traits.cpp; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.h; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_symbolize.cpp; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_wrappers.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_addrhashmap_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_chained_origin_depot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_dense_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_flat_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_hash_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_leb128_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_lzw_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stackdepot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stack_store_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stoptheworld_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_test_main.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_type_traits_test.cpp; compiler-rt/lib/scudo/standalone/allocator_config.h; compiler-rt/lib/scudo/standalone/atomic_helpers.h; compiler-rt/lib/scudo/standalone/bytemap.h; compiler-rt/lib/scudo/standalone/checksum.cpp; compiler-rt/lib/scudo/standalone/checksum.h; compiler-rt/lib/scudo/standalone/chunk.h; compiler-rt/lib/scudo/standalone/combined.h; compiler-rt/lib/scudo/standalone/common.cpp; compiler-rt/lib/scudo/standalone/common.h; compiler-rt/lib/scudo/standalone/crc32_hw.cpp; compiler-rt/lib/scudo/standalone/flags.cpp; compiler-rt/lib/scudo/standalone/flags.h; compiler-rt/lib/scudo/standalone/flags_parser.cpp; compiler-rt/lib/scudo/standalone/flags_parser.h; compiler-rt/lib/scudo/standalone/fuchsia.cpp; compiler-rt/lib/scudo/standalone/fuchsia.h; compiler-rt/lib/scudo/standalone/internal_defs.h; compiler-rt/lib/scudo/standalone/linux.cpp; compiler-rt/lib/scudo/standalone/linux.h; compiler-rt/lib/scudo/standalone/list.h; compiler-rt/lib/scudo/standalone/local_cache.,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:102149,Testability,benchmark,benchmarks,102149,/scudo/standalone/quarantine.h; compiler-rt/lib/scudo/standalone/release.cpp; compiler-rt/lib/scudo/standalone/release.h; compiler-rt/lib/scudo/standalone/report.cpp; compiler-rt/lib/scudo/standalone/report.h; compiler-rt/lib/scudo/standalone/secondary.h; compiler-rt/lib/scudo/standalone/size_class_map.h; compiler-rt/lib/scudo/standalone/stack_depot.h; compiler-rt/lib/scudo/standalone/stats.h; compiler-rt/lib/scudo/standalone/string_utils.cpp; compiler-rt/lib/scudo/standalone/string_utils.h; compiler-rt/lib/scudo/standalone/trusty.cpp; compiler-rt/lib/scudo/standalone/trusty.h; compiler-rt/lib/scudo/standalone/tsd.h; compiler-rt/lib/scudo/standalone/tsd_exclusive.h; compiler-rt/lib/scudo/standalone/tsd_shared.h; compiler-rt/lib/scudo/standalone/vector.h; compiler-rt/lib/scudo/standalone/wrappers_c.cpp; compiler-rt/lib/scudo/standalone/wrappers_c.h; compiler-rt/lib/scudo/standalone/wrappers_c_bionic.cpp; compiler-rt/lib/scudo/standalone/wrappers_c_checks.h; compiler-rt/lib/scudo/standalone/benchmarks/malloc_benchmark.cpp; compiler-rt/lib/scudo/standalone/fuzz/get_error_info_fuzzer.cpp; compiler-rt/lib/scudo/standalone/include/scudo/interface.h; compiler-rt/lib/scudo/standalone/tests/atomic_test.cpp; compiler-rt/lib/scudo/standalone/tests/bytemap_test.cpp; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:102340,Testability,test,tests,102340,do/standalone/report.h; compiler-rt/lib/scudo/standalone/secondary.h; compiler-rt/lib/scudo/standalone/size_class_map.h; compiler-rt/lib/scudo/standalone/stack_depot.h; compiler-rt/lib/scudo/standalone/stats.h; compiler-rt/lib/scudo/standalone/string_utils.cpp; compiler-rt/lib/scudo/standalone/string_utils.h; compiler-rt/lib/scudo/standalone/trusty.cpp; compiler-rt/lib/scudo/standalone/trusty.h; compiler-rt/lib/scudo/standalone/tsd.h; compiler-rt/lib/scudo/standalone/tsd_exclusive.h; compiler-rt/lib/scudo/standalone/tsd_shared.h; compiler-rt/lib/scudo/standalone/vector.h; compiler-rt/lib/scudo/standalone/wrappers_c.cpp; compiler-rt/lib/scudo/standalone/wrappers_c.h; compiler-rt/lib/scudo/standalone/wrappers_c_bionic.cpp; compiler-rt/lib/scudo/standalone/wrappers_c_checks.h; compiler-rt/lib/scudo/standalone/benchmarks/malloc_benchmark.cpp; compiler-rt/lib/scudo/standalone/fuzz/get_error_info_fuzzer.cpp; compiler-rt/lib/scudo/standalone/include/scudo/interface.h; compiler-rt/lib/scudo/standalone/tests/atomic_test.cpp; compiler-rt/lib/scudo/standalone/tests/bytemap_test.cpp; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp;,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:102396,Testability,test,tests,102396,e/secondary.h; compiler-rt/lib/scudo/standalone/size_class_map.h; compiler-rt/lib/scudo/standalone/stack_depot.h; compiler-rt/lib/scudo/standalone/stats.h; compiler-rt/lib/scudo/standalone/string_utils.cpp; compiler-rt/lib/scudo/standalone/string_utils.h; compiler-rt/lib/scudo/standalone/trusty.cpp; compiler-rt/lib/scudo/standalone/trusty.h; compiler-rt/lib/scudo/standalone/tsd.h; compiler-rt/lib/scudo/standalone/tsd_exclusive.h; compiler-rt/lib/scudo/standalone/tsd_shared.h; compiler-rt/lib/scudo/standalone/vector.h; compiler-rt/lib/scudo/standalone/wrappers_c.cpp; compiler-rt/lib/scudo/standalone/wrappers_c.h; compiler-rt/lib/scudo/standalone/wrappers_c_bionic.cpp; compiler-rt/lib/scudo/standalone/wrappers_c_checks.h; compiler-rt/lib/scudo/standalone/benchmarks/malloc_benchmark.cpp; compiler-rt/lib/scudo/standalone/fuzz/get_error_info_fuzzer.cpp; compiler-rt/lib/scudo/standalone/include/scudo/interface.h; compiler-rt/lib/scudo/standalone/tests/atomic_test.cpp; compiler-rt/lib/scudo/standalone/tests/bytemap_test.cpp; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_t,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:102453,Testability,test,tests,102453,_map.h; compiler-rt/lib/scudo/standalone/stack_depot.h; compiler-rt/lib/scudo/standalone/stats.h; compiler-rt/lib/scudo/standalone/string_utils.cpp; compiler-rt/lib/scudo/standalone/string_utils.h; compiler-rt/lib/scudo/standalone/trusty.cpp; compiler-rt/lib/scudo/standalone/trusty.h; compiler-rt/lib/scudo/standalone/tsd.h; compiler-rt/lib/scudo/standalone/tsd_exclusive.h; compiler-rt/lib/scudo/standalone/tsd_shared.h; compiler-rt/lib/scudo/standalone/vector.h; compiler-rt/lib/scudo/standalone/wrappers_c.cpp; compiler-rt/lib/scudo/standalone/wrappers_c.h; compiler-rt/lib/scudo/standalone/wrappers_c_bionic.cpp; compiler-rt/lib/scudo/standalone/wrappers_c_checks.h; compiler-rt/lib/scudo/standalone/benchmarks/malloc_benchmark.cpp; compiler-rt/lib/scudo/standalone/fuzz/get_error_info_fuzzer.cpp; compiler-rt/lib/scudo/standalone/include/scudo/interface.h; compiler-rt/lib/scudo/standalone/tests/atomic_test.cpp; compiler-rt/lib/scudo/standalone/tests/bytemap_test.cpp; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_tes,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:102511,Testability,test,tests,102511,compiler-rt/lib/scudo/standalone/stats.h; compiler-rt/lib/scudo/standalone/string_utils.cpp; compiler-rt/lib/scudo/standalone/string_utils.h; compiler-rt/lib/scudo/standalone/trusty.cpp; compiler-rt/lib/scudo/standalone/trusty.h; compiler-rt/lib/scudo/standalone/tsd.h; compiler-rt/lib/scudo/standalone/tsd_exclusive.h; compiler-rt/lib/scudo/standalone/tsd_shared.h; compiler-rt/lib/scudo/standalone/vector.h; compiler-rt/lib/scudo/standalone/wrappers_c.cpp; compiler-rt/lib/scudo/standalone/wrappers_c.h; compiler-rt/lib/scudo/standalone/wrappers_c_bionic.cpp; compiler-rt/lib/scudo/standalone/wrappers_c_checks.h; compiler-rt/lib/scudo/standalone/benchmarks/malloc_benchmark.cpp; compiler-rt/lib/scudo/standalone/fuzz/get_error_info_fuzzer.cpp; compiler-rt/lib/scudo/standalone/include/scudo/interface.h; compiler-rt/lib/scudo/standalone/tests/atomic_test.cpp; compiler-rt/lib/scudo/standalone/tests/bytemap_test.cpp; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_test.cpp; compiler-rt/lib/scudo/standalone/tests/strings_tes,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:102566,Testability,test,tests,102566,/scudo/standalone/string_utils.cpp; compiler-rt/lib/scudo/standalone/string_utils.h; compiler-rt/lib/scudo/standalone/trusty.cpp; compiler-rt/lib/scudo/standalone/trusty.h; compiler-rt/lib/scudo/standalone/tsd.h; compiler-rt/lib/scudo/standalone/tsd_exclusive.h; compiler-rt/lib/scudo/standalone/tsd_shared.h; compiler-rt/lib/scudo/standalone/vector.h; compiler-rt/lib/scudo/standalone/wrappers_c.cpp; compiler-rt/lib/scudo/standalone/wrappers_c.h; compiler-rt/lib/scudo/standalone/wrappers_c_bionic.cpp; compiler-rt/lib/scudo/standalone/wrappers_c_checks.h; compiler-rt/lib/scudo/standalone/benchmarks/malloc_benchmark.cpp; compiler-rt/lib/scudo/standalone/fuzz/get_error_info_fuzzer.cpp; compiler-rt/lib/scudo/standalone/include/scudo/interface.h; compiler-rt/lib/scudo/standalone/tests/atomic_test.cpp; compiler-rt/lib/scudo/standalone/tests/bytemap_test.cpp; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_test.cpp; compiler-rt/lib/scudo/standalone/tests/strings_test.cpp; compiler-rt/lib/scudo/standalone/tests/vector_tes,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:102624,Testability,test,tests,102624,/standalone/string_utils.h; compiler-rt/lib/scudo/standalone/trusty.cpp; compiler-rt/lib/scudo/standalone/trusty.h; compiler-rt/lib/scudo/standalone/tsd.h; compiler-rt/lib/scudo/standalone/tsd_exclusive.h; compiler-rt/lib/scudo/standalone/tsd_shared.h; compiler-rt/lib/scudo/standalone/vector.h; compiler-rt/lib/scudo/standalone/wrappers_c.cpp; compiler-rt/lib/scudo/standalone/wrappers_c.h; compiler-rt/lib/scudo/standalone/wrappers_c_bionic.cpp; compiler-rt/lib/scudo/standalone/wrappers_c_checks.h; compiler-rt/lib/scudo/standalone/benchmarks/malloc_benchmark.cpp; compiler-rt/lib/scudo/standalone/fuzz/get_error_info_fuzzer.cpp; compiler-rt/lib/scudo/standalone/include/scudo/interface.h; compiler-rt/lib/scudo/standalone/tests/atomic_test.cpp; compiler-rt/lib/scudo/standalone/tests/bytemap_test.cpp; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_test.cpp; compiler-rt/lib/scudo/standalone/tests/strings_test.cpp; compiler-rt/lib/scudo/standalone/tests/vector_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_cp,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:102680,Testability,test,tests,102680,alone/trusty.cpp; compiler-rt/lib/scudo/standalone/trusty.h; compiler-rt/lib/scudo/standalone/tsd.h; compiler-rt/lib/scudo/standalone/tsd_exclusive.h; compiler-rt/lib/scudo/standalone/tsd_shared.h; compiler-rt/lib/scudo/standalone/vector.h; compiler-rt/lib/scudo/standalone/wrappers_c.cpp; compiler-rt/lib/scudo/standalone/wrappers_c.h; compiler-rt/lib/scudo/standalone/wrappers_c_bionic.cpp; compiler-rt/lib/scudo/standalone/wrappers_c_checks.h; compiler-rt/lib/scudo/standalone/benchmarks/malloc_benchmark.cpp; compiler-rt/lib/scudo/standalone/fuzz/get_error_info_fuzzer.cpp; compiler-rt/lib/scudo/standalone/include/scudo/interface.h; compiler-rt/lib/scudo/standalone/tests/atomic_test.cpp; compiler-rt/lib/scudo/standalone/tests/bytemap_test.cpp; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_test.cpp; compiler-rt/lib/scudo/standalone/tests/strings_test.cpp; compiler-rt/lib/scudo/standalone/tests/vector_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_cpp_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrapp,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:102735,Testability,test,tests,102735,ty.h; compiler-rt/lib/scudo/standalone/tsd.h; compiler-rt/lib/scudo/standalone/tsd_exclusive.h; compiler-rt/lib/scudo/standalone/tsd_shared.h; compiler-rt/lib/scudo/standalone/vector.h; compiler-rt/lib/scudo/standalone/wrappers_c.cpp; compiler-rt/lib/scudo/standalone/wrappers_c.h; compiler-rt/lib/scudo/standalone/wrappers_c_bionic.cpp; compiler-rt/lib/scudo/standalone/wrappers_c_checks.h; compiler-rt/lib/scudo/standalone/benchmarks/malloc_benchmark.cpp; compiler-rt/lib/scudo/standalone/fuzz/get_error_info_fuzzer.cpp; compiler-rt/lib/scudo/standalone/include/scudo/interface.h; compiler-rt/lib/scudo/standalone/tests/atomic_test.cpp; compiler-rt/lib/scudo/standalone/tests/bytemap_test.cpp; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_test.cpp; compiler-rt/lib/scudo/standalone/tests/strings_test.cpp; compiler-rt/lib/scudo/standalone/tests/vector_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_cpp_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_c_test.cpp; compiler-rt/lib/scudo/standalone/tools,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:102789,Testability,test,tests,102789,r-rt/lib/scudo/standalone/tsd_exclusive.h; compiler-rt/lib/scudo/standalone/tsd_shared.h; compiler-rt/lib/scudo/standalone/vector.h; compiler-rt/lib/scudo/standalone/wrappers_c.cpp; compiler-rt/lib/scudo/standalone/wrappers_c.h; compiler-rt/lib/scudo/standalone/wrappers_c_bionic.cpp; compiler-rt/lib/scudo/standalone/wrappers_c_checks.h; compiler-rt/lib/scudo/standalone/benchmarks/malloc_benchmark.cpp; compiler-rt/lib/scudo/standalone/fuzz/get_error_info_fuzzer.cpp; compiler-rt/lib/scudo/standalone/include/scudo/interface.h; compiler-rt/lib/scudo/standalone/tests/atomic_test.cpp; compiler-rt/lib/scudo/standalone/tests/bytemap_test.cpp; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_test.cpp; compiler-rt/lib/scudo/standalone/tests/strings_test.cpp; compiler-rt/lib/scudo/standalone/tests/vector_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_cpp_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_c_test.cpp; compiler-rt/lib/scudo/standalone/tools/compute_size_class_config.cpp; compiler-rt/lib/tsan/r,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:102842,Testability,test,tests,102842,lib/scudo/standalone/tsd_shared.h; compiler-rt/lib/scudo/standalone/vector.h; compiler-rt/lib/scudo/standalone/wrappers_c.cpp; compiler-rt/lib/scudo/standalone/wrappers_c.h; compiler-rt/lib/scudo/standalone/wrappers_c_bionic.cpp; compiler-rt/lib/scudo/standalone/wrappers_c_checks.h; compiler-rt/lib/scudo/standalone/benchmarks/malloc_benchmark.cpp; compiler-rt/lib/scudo/standalone/fuzz/get_error_info_fuzzer.cpp; compiler-rt/lib/scudo/standalone/include/scudo/interface.h; compiler-rt/lib/scudo/standalone/tests/atomic_test.cpp; compiler-rt/lib/scudo/standalone/tests/bytemap_test.cpp; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_test.cpp; compiler-rt/lib/scudo/standalone/tests/strings_test.cpp; compiler-rt/lib/scudo/standalone/tests/vector_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_cpp_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_c_test.cpp; compiler-rt/lib/scudo/standalone/tools/compute_size_class_config.cpp; compiler-rt/lib/tsan/rtl/tsan_fd.h; compiler-rt/lib/tsan/rtl/tsan_ignoreset.,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:102898,Testability,test,tests,102898,o/standalone/vector.h; compiler-rt/lib/scudo/standalone/wrappers_c.cpp; compiler-rt/lib/scudo/standalone/wrappers_c.h; compiler-rt/lib/scudo/standalone/wrappers_c_bionic.cpp; compiler-rt/lib/scudo/standalone/wrappers_c_checks.h; compiler-rt/lib/scudo/standalone/benchmarks/malloc_benchmark.cpp; compiler-rt/lib/scudo/standalone/fuzz/get_error_info_fuzzer.cpp; compiler-rt/lib/scudo/standalone/include/scudo/interface.h; compiler-rt/lib/scudo/standalone/tests/atomic_test.cpp; compiler-rt/lib/scudo/standalone/tests/bytemap_test.cpp; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_test.cpp; compiler-rt/lib/scudo/standalone/tests/strings_test.cpp; compiler-rt/lib/scudo/standalone/tests/vector_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_cpp_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_c_test.cpp; compiler-rt/lib/scudo/standalone/tools/compute_size_class_config.cpp; compiler-rt/lib/tsan/rtl/tsan_fd.h; compiler-rt/lib/tsan/rtl/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl/tsan_ilist.h; compiler-rt/li,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:102953,Testability,test,tests,102953,wrappers_c.cpp; compiler-rt/lib/scudo/standalone/wrappers_c.h; compiler-rt/lib/scudo/standalone/wrappers_c_bionic.cpp; compiler-rt/lib/scudo/standalone/wrappers_c_checks.h; compiler-rt/lib/scudo/standalone/benchmarks/malloc_benchmark.cpp; compiler-rt/lib/scudo/standalone/fuzz/get_error_info_fuzzer.cpp; compiler-rt/lib/scudo/standalone/include/scudo/interface.h; compiler-rt/lib/scudo/standalone/tests/atomic_test.cpp; compiler-rt/lib/scudo/standalone/tests/bytemap_test.cpp; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_test.cpp; compiler-rt/lib/scudo/standalone/tests/strings_test.cpp; compiler-rt/lib/scudo/standalone/tests/vector_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_cpp_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_c_test.cpp; compiler-rt/lib/scudo/standalone/tools/compute_size_class_config.cpp; compiler-rt/lib/tsan/rtl/tsan_fd.h; compiler-rt/lib/tsan/rtl/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl/tsan_ilist.h; compiler-rt/lib/tsan/rtl/tsan_interface_ann.h; compiler-rt/lib/tsan/rt,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:103010,Testability,test,tests,103010,.h; compiler-rt/lib/scudo/standalone/wrappers_c_bionic.cpp; compiler-rt/lib/scudo/standalone/wrappers_c_checks.h; compiler-rt/lib/scudo/standalone/benchmarks/malloc_benchmark.cpp; compiler-rt/lib/scudo/standalone/fuzz/get_error_info_fuzzer.cpp; compiler-rt/lib/scudo/standalone/include/scudo/interface.h; compiler-rt/lib/scudo/standalone/tests/atomic_test.cpp; compiler-rt/lib/scudo/standalone/tests/bytemap_test.cpp; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_test.cpp; compiler-rt/lib/scudo/standalone/tests/strings_test.cpp; compiler-rt/lib/scudo/standalone/tests/vector_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_cpp_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_c_test.cpp; compiler-rt/lib/scudo/standalone/tools/compute_size_class_config.cpp; compiler-rt/lib/tsan/rtl/tsan_fd.h; compiler-rt/lib/tsan/rtl/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl/tsan_ilist.h; compiler-rt/lib/tsan/rtl/tsan_interface_ann.h; compiler-rt/lib/tsan/rtl/tsan_mman.h; compiler-rt/lib/tsan/rtl/tsan_mutexset.h; c,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:103070,Testability,test,tests,103070,; compiler-rt/lib/scudo/standalone/wrappers_c_checks.h; compiler-rt/lib/scudo/standalone/benchmarks/malloc_benchmark.cpp; compiler-rt/lib/scudo/standalone/fuzz/get_error_info_fuzzer.cpp; compiler-rt/lib/scudo/standalone/include/scudo/interface.h; compiler-rt/lib/scudo/standalone/tests/atomic_test.cpp; compiler-rt/lib/scudo/standalone/tests/bytemap_test.cpp; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_test.cpp; compiler-rt/lib/scudo/standalone/tests/strings_test.cpp; compiler-rt/lib/scudo/standalone/tests/vector_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_cpp_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_c_test.cpp; compiler-rt/lib/scudo/standalone/tools/compute_size_class_config.cpp; compiler-rt/lib/tsan/rtl/tsan_fd.h; compiler-rt/lib/tsan/rtl/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl/tsan_ilist.h; compiler-rt/lib/tsan/rtl/tsan_interface_ann.h; compiler-rt/lib/tsan/rtl/tsan_mman.h; compiler-rt/lib/tsan/rtl/tsan_mutexset.h; compiler-rt/lib/tsan/rtl/tsan_ppc_regs.h; compiler-rt/lib/ts,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:103127,Testability,test,tests,103127,ompiler-rt/lib/scudo/standalone/benchmarks/malloc_benchmark.cpp; compiler-rt/lib/scudo/standalone/fuzz/get_error_info_fuzzer.cpp; compiler-rt/lib/scudo/standalone/include/scudo/interface.h; compiler-rt/lib/scudo/standalone/tests/atomic_test.cpp; compiler-rt/lib/scudo/standalone/tests/bytemap_test.cpp; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_test.cpp; compiler-rt/lib/scudo/standalone/tests/strings_test.cpp; compiler-rt/lib/scudo/standalone/tests/vector_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_cpp_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_c_test.cpp; compiler-rt/lib/scudo/standalone/tools/compute_size_class_config.cpp; compiler-rt/lib/tsan/rtl/tsan_fd.h; compiler-rt/lib/tsan/rtl/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl/tsan_ilist.h; compiler-rt/lib/tsan/rtl/tsan_interface_ann.h; compiler-rt/lib/tsan/rtl/tsan_mman.h; compiler-rt/lib/tsan/rtl/tsan_mutexset.h; compiler-rt/lib/tsan/rtl/tsan_ppc_regs.h; compiler-rt/lib/tsan/rtl/tsan_rtl_access.cpp; compiler-rt/lib/tsan/rtl/tsa,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:103183,Testability,test,tests,103183,k.cpp; compiler-rt/lib/scudo/standalone/fuzz/get_error_info_fuzzer.cpp; compiler-rt/lib/scudo/standalone/include/scudo/interface.h; compiler-rt/lib/scudo/standalone/tests/atomic_test.cpp; compiler-rt/lib/scudo/standalone/tests/bytemap_test.cpp; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_test.cpp; compiler-rt/lib/scudo/standalone/tests/strings_test.cpp; compiler-rt/lib/scudo/standalone/tests/vector_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_cpp_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_c_test.cpp; compiler-rt/lib/scudo/standalone/tools/compute_size_class_config.cpp; compiler-rt/lib/tsan/rtl/tsan_fd.h; compiler-rt/lib/tsan/rtl/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl/tsan_ilist.h; compiler-rt/lib/tsan/rtl/tsan_interface_ann.h; compiler-rt/lib/tsan/rtl/tsan_mman.h; compiler-rt/lib/tsan/rtl/tsan_mutexset.h; compiler-rt/lib/tsan/rtl/tsan_ppc_regs.h; compiler-rt/lib/tsan/rtl/tsan_rtl_access.cpp; compiler-rt/lib/tsan/rtl/tsan_shadow.h; compiler-rt/lib/tsan/rtl/tsan_stack_trace.h; c,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:103241,Testability,test,tests,103241,uzzer.cpp; compiler-rt/lib/scudo/standalone/include/scudo/interface.h; compiler-rt/lib/scudo/standalone/tests/atomic_test.cpp; compiler-rt/lib/scudo/standalone/tests/bytemap_test.cpp; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_test.cpp; compiler-rt/lib/scudo/standalone/tests/strings_test.cpp; compiler-rt/lib/scudo/standalone/tests/vector_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_cpp_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_c_test.cpp; compiler-rt/lib/scudo/standalone/tools/compute_size_class_config.cpp; compiler-rt/lib/tsan/rtl/tsan_fd.h; compiler-rt/lib/tsan/rtl/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl/tsan_ilist.h; compiler-rt/lib/tsan/rtl/tsan_interface_ann.h; compiler-rt/lib/tsan/rtl/tsan_mman.h; compiler-rt/lib/tsan/rtl/tsan_mutexset.h; compiler-rt/lib/tsan/rtl/tsan_ppc_regs.h; compiler-rt/lib/tsan/rtl/tsan_rtl_access.cpp; compiler-rt/lib/tsan/rtl/tsan_shadow.h; compiler-rt/lib/tsan/rtl/tsan_stack_trace.h; compiler-rt/lib/tsan/rtl/tsan_suppressions.h; compiler-rt/lib/t,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:103306,Testability,test,tests,103306,erface.h; compiler-rt/lib/scudo/standalone/tests/atomic_test.cpp; compiler-rt/lib/scudo/standalone/tests/bytemap_test.cpp; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_test.cpp; compiler-rt/lib/scudo/standalone/tests/strings_test.cpp; compiler-rt/lib/scudo/standalone/tests/vector_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_cpp_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_c_test.cpp; compiler-rt/lib/scudo/standalone/tools/compute_size_class_config.cpp; compiler-rt/lib/tsan/rtl/tsan_fd.h; compiler-rt/lib/tsan/rtl/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl/tsan_ilist.h; compiler-rt/lib/tsan/rtl/tsan_interface_ann.h; compiler-rt/lib/tsan/rtl/tsan_mman.h; compiler-rt/lib/tsan/rtl/tsan_mutexset.h; compiler-rt/lib/tsan/rtl/tsan_ppc_regs.h; compiler-rt/lib/tsan/rtl/tsan_rtl_access.cpp; compiler-rt/lib/tsan/rtl/tsan_shadow.h; compiler-rt/lib/tsan/rtl/tsan_stack_trace.h; compiler-rt/lib/tsan/rtl/tsan_suppressions.h; compiler-rt/lib/tsan/rtl/tsan_symbolize.h; compiler-rt/lib/tsan/rtl/tsan_trace,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:103365,Testability,test,tests,103365,pp; compiler-rt/lib/scudo/standalone/tests/bytemap_test.cpp; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_test.cpp; compiler-rt/lib/scudo/standalone/tests/strings_test.cpp; compiler-rt/lib/scudo/standalone/tests/vector_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_cpp_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_c_test.cpp; compiler-rt/lib/scudo/standalone/tools/compute_size_class_config.cpp; compiler-rt/lib/tsan/rtl/tsan_fd.h; compiler-rt/lib/tsan/rtl/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl/tsan_ilist.h; compiler-rt/lib/tsan/rtl/tsan_interface_ann.h; compiler-rt/lib/tsan/rtl/tsan_mman.h; compiler-rt/lib/tsan/rtl/tsan_mutexset.h; compiler-rt/lib/tsan/rtl/tsan_ppc_regs.h; compiler-rt/lib/tsan/rtl/tsan_rtl_access.cpp; compiler-rt/lib/tsan/rtl/tsan_shadow.h; compiler-rt/lib/tsan/rtl/tsan_stack_trace.h; compiler-rt/lib/tsan/rtl/tsan_suppressions.h; compiler-rt/lib/tsan/rtl/tsan_symbolize.h; compiler-rt/lib/tsan/rtl/tsan_trace.h; compiler-rt/lib/tsan/rtl/tsan_vector_clock.h; compiler-rt,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:103429,Testability,test,tests,103429,; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_test.cpp; compiler-rt/lib/scudo/standalone/tests/strings_test.cpp; compiler-rt/lib/scudo/standalone/tests/vector_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_cpp_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_c_test.cpp; compiler-rt/lib/scudo/standalone/tools/compute_size_class_config.cpp; compiler-rt/lib/tsan/rtl/tsan_fd.h; compiler-rt/lib/tsan/rtl/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl/tsan_ilist.h; compiler-rt/lib/tsan/rtl/tsan_interface_ann.h; compiler-rt/lib/tsan/rtl/tsan_mman.h; compiler-rt/lib/tsan/rtl/tsan_mutexset.h; compiler-rt/lib/tsan/rtl/tsan_ppc_regs.h; compiler-rt/lib/tsan/rtl/tsan_rtl_access.cpp; compiler-rt/lib/tsan/rtl/tsan_shadow.h; compiler-rt/lib/tsan/rtl/tsan_stack_trace.h; compiler-rt/lib/tsan/rtl/tsan_suppressions.h; compiler-rt/lib/tsan/rtl/tsan_symbolize.h; compiler-rt/lib/tsan/rtl/tsan_trace.h; compiler-rt/lib/tsan/rtl/tsan_vector_clock.h; compiler-rt/lib/tsan/rtl-old/tsan_fd.h; compiler-rt/lib/tsan/rtl-old/ts,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:103484,Testability,test,tests,103484,pp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_test.cpp; compiler-rt/lib/scudo/standalone/tests/strings_test.cpp; compiler-rt/lib/scudo/standalone/tests/vector_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_cpp_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_c_test.cpp; compiler-rt/lib/scudo/standalone/tools/compute_size_class_config.cpp; compiler-rt/lib/tsan/rtl/tsan_fd.h; compiler-rt/lib/tsan/rtl/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl/tsan_ilist.h; compiler-rt/lib/tsan/rtl/tsan_interface_ann.h; compiler-rt/lib/tsan/rtl/tsan_mman.h; compiler-rt/lib/tsan/rtl/tsan_mutexset.h; compiler-rt/lib/tsan/rtl/tsan_ppc_regs.h; compiler-rt/lib/tsan/rtl/tsan_rtl_access.cpp; compiler-rt/lib/tsan/rtl/tsan_shadow.h; compiler-rt/lib/tsan/rtl/tsan_stack_trace.h; compiler-rt/lib/tsan/rtl/tsan_suppressions.h; compiler-rt/lib/tsan/rtl/tsan_symbolize.h; compiler-rt/lib/tsan/rtl/tsan_trace.h; compiler-rt/lib/tsan/rtl/tsan_vector_clock.h; compiler-rt/lib/tsan/rtl-old/tsan_fd.h; compiler-rt/lib/tsan/rtl-old/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl-old/tsan_ilist.,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:103541,Testability,test,tests,103541,; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_test.cpp; compiler-rt/lib/scudo/standalone/tests/strings_test.cpp; compiler-rt/lib/scudo/standalone/tests/vector_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_cpp_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_c_test.cpp; compiler-rt/lib/scudo/standalone/tools/compute_size_class_config.cpp; compiler-rt/lib/tsan/rtl/tsan_fd.h; compiler-rt/lib/tsan/rtl/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl/tsan_ilist.h; compiler-rt/lib/tsan/rtl/tsan_interface_ann.h; compiler-rt/lib/tsan/rtl/tsan_mman.h; compiler-rt/lib/tsan/rtl/tsan_mutexset.h; compiler-rt/lib/tsan/rtl/tsan_ppc_regs.h; compiler-rt/lib/tsan/rtl/tsan_rtl_access.cpp; compiler-rt/lib/tsan/rtl/tsan_shadow.h; compiler-rt/lib/tsan/rtl/tsan_stack_trace.h; compiler-rt/lib/tsan/rtl/tsan_suppressions.h; compiler-rt/lib/tsan/rtl/tsan_symbolize.h; compiler-rt/lib/tsan/rtl/tsan_trace.h; compiler-rt/lib/tsan/rtl/tsan_vector_clock.h; compiler-rt/lib/tsan/rtl-old/tsan_fd.h; compiler-rt/lib/tsan/rtl-old/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl-old/tsan_ilist.h; compiler-rt/lib/tsan/rtl-old/tsan_interface_ann.h; co,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:103597,Testability,test,tests,103597, compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_test.cpp; compiler-rt/lib/scudo/standalone/tests/strings_test.cpp; compiler-rt/lib/scudo/standalone/tests/vector_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_cpp_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_c_test.cpp; compiler-rt/lib/scudo/standalone/tools/compute_size_class_config.cpp; compiler-rt/lib/tsan/rtl/tsan_fd.h; compiler-rt/lib/tsan/rtl/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl/tsan_ilist.h; compiler-rt/lib/tsan/rtl/tsan_interface_ann.h; compiler-rt/lib/tsan/rtl/tsan_mman.h; compiler-rt/lib/tsan/rtl/tsan_mutexset.h; compiler-rt/lib/tsan/rtl/tsan_ppc_regs.h; compiler-rt/lib/tsan/rtl/tsan_rtl_access.cpp; compiler-rt/lib/tsan/rtl/tsan_shadow.h; compiler-rt/lib/tsan/rtl/tsan_stack_trace.h; compiler-rt/lib/tsan/rtl/tsan_suppressions.h; compiler-rt/lib/tsan/rtl/tsan_symbolize.h; compiler-rt/lib/tsan/rtl/tsan_trace.h; compiler-rt/lib/tsan/rtl/tsan_vector_clock.h; compiler-rt/lib/tsan/rtl-old/tsan_fd.h; compiler-rt/lib/tsan/rtl-old/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl-old/tsan_ilist.h; compiler-rt/lib/tsan/rtl-old/tsan_interface_ann.h; compiler-rt/lib/tsan/rtl-old/tsan_mman.h; compiler-rt/lib/tsa,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:103659,Testability,test,tests,103659,iler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_test.cpp; compiler-rt/lib/scudo/standalone/tests/strings_test.cpp; compiler-rt/lib/scudo/standalone/tests/vector_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_cpp_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_c_test.cpp; compiler-rt/lib/scudo/standalone/tools/compute_size_class_config.cpp; compiler-rt/lib/tsan/rtl/tsan_fd.h; compiler-rt/lib/tsan/rtl/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl/tsan_ilist.h; compiler-rt/lib/tsan/rtl/tsan_interface_ann.h; compiler-rt/lib/tsan/rtl/tsan_mman.h; compiler-rt/lib/tsan/rtl/tsan_mutexset.h; compiler-rt/lib/tsan/rtl/tsan_ppc_regs.h; compiler-rt/lib/tsan/rtl/tsan_rtl_access.cpp; compiler-rt/lib/tsan/rtl/tsan_shadow.h; compiler-rt/lib/tsan/rtl/tsan_stack_trace.h; compiler-rt/lib/tsan/rtl/tsan_suppressions.h; compiler-rt/lib/tsan/rtl/tsan_symbolize.h; compiler-rt/lib/tsan/rtl/tsan_trace.h; compiler-rt/lib/tsan/rtl/tsan_vector_clock.h; compiler-rt/lib/tsan/rtl-old/tsan_fd.h; compiler-rt/lib/tsan/rtl-old/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl-old/tsan_ilist.h; compiler-rt/lib/tsan/rtl-old/tsan_interface_ann.h; compiler-rt/lib/tsan/rtl-old/tsan_mman.h; compiler-rt/lib/tsan/rtl-old/tsan_mutexset.h; compiler-rt/lib/tsan/rtl-old/tsan_,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:104974,Testability,test,tests,104974,tsan/rtl/tsan_mutexset.h; compiler-rt/lib/tsan/rtl/tsan_ppc_regs.h; compiler-rt/lib/tsan/rtl/tsan_rtl_access.cpp; compiler-rt/lib/tsan/rtl/tsan_shadow.h; compiler-rt/lib/tsan/rtl/tsan_stack_trace.h; compiler-rt/lib/tsan/rtl/tsan_suppressions.h; compiler-rt/lib/tsan/rtl/tsan_symbolize.h; compiler-rt/lib/tsan/rtl/tsan_trace.h; compiler-rt/lib/tsan/rtl/tsan_vector_clock.h; compiler-rt/lib/tsan/rtl-old/tsan_fd.h; compiler-rt/lib/tsan/rtl-old/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl-old/tsan_ilist.h; compiler-rt/lib/tsan/rtl-old/tsan_interface_ann.h; compiler-rt/lib/tsan/rtl-old/tsan_mman.h; compiler-rt/lib/tsan/rtl-old/tsan_mutexset.h; compiler-rt/lib/tsan/rtl-old/tsan_ppc_regs.h; compiler-rt/lib/tsan/rtl-old/tsan_rtl_access.cpp; compiler-rt/lib/tsan/rtl-old/tsan_shadow.h; compiler-rt/lib/tsan/rtl-old/tsan_stack_trace.h; compiler-rt/lib/tsan/rtl-old/tsan_suppressions.h; compiler-rt/lib/tsan/rtl-old/tsan_symbolize.h; compiler-rt/lib/tsan/rtl-old/tsan_vector_clock.h; compiler-rt/lib/tsan/tests/unit/tsan_ilist_test.cpp; compiler-rt/lib/tsan/tests/unit/tsan_trace_test.cpp; compiler-rt/lib/tsan/tests/unit/tsan_vector_clock_test.cpp; compiler-rt/lib/ubsan/ubsan_init_standalone_preinit.cpp; compiler-rt/lib/ubsan/ubsan_monitor.cpp; compiler-rt/lib/ubsan/ubsan_monitor.h; compiler-rt/lib/ubsan/ubsan_signals_standalone.h; compiler-rt/lib/ubsan/ubsan_win_dll_thunk.cpp; compiler-rt/lib/ubsan/ubsan_win_dynamic_runtime_thunk.cpp; compiler-rt/lib/ubsan/ubsan_win_weak_interception.cpp; compiler-rt/lib/xray/xray_AArch64.cpp; compiler-rt/lib/xray/xray_arm.cpp; compiler-rt/lib/xray/xray_basic_flags.cpp; compiler-rt/lib/xray/xray_basic_flags.h; compiler-rt/lib/xray/xray_basic_logging.h; compiler-rt/lib/xray/xray_buffer_queue.cpp; compiler-rt/lib/xray/xray_buffer_queue.h; compiler-rt/lib/xray/xray_fdr_controller.h; compiler-rt/lib/xray/xray_fdr_flags.cpp; compiler-rt/lib/xray/xray_fdr_flags.h; compiler-rt/lib/xray/xray_fdr_logging.h; compiler-rt/lib/xray/xray_fdr_log_records.h; compiler-rt/,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:105027,Testability,test,tests,105027,san_ppc_regs.h; compiler-rt/lib/tsan/rtl/tsan_rtl_access.cpp; compiler-rt/lib/tsan/rtl/tsan_shadow.h; compiler-rt/lib/tsan/rtl/tsan_stack_trace.h; compiler-rt/lib/tsan/rtl/tsan_suppressions.h; compiler-rt/lib/tsan/rtl/tsan_symbolize.h; compiler-rt/lib/tsan/rtl/tsan_trace.h; compiler-rt/lib/tsan/rtl/tsan_vector_clock.h; compiler-rt/lib/tsan/rtl-old/tsan_fd.h; compiler-rt/lib/tsan/rtl-old/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl-old/tsan_ilist.h; compiler-rt/lib/tsan/rtl-old/tsan_interface_ann.h; compiler-rt/lib/tsan/rtl-old/tsan_mman.h; compiler-rt/lib/tsan/rtl-old/tsan_mutexset.h; compiler-rt/lib/tsan/rtl-old/tsan_ppc_regs.h; compiler-rt/lib/tsan/rtl-old/tsan_rtl_access.cpp; compiler-rt/lib/tsan/rtl-old/tsan_shadow.h; compiler-rt/lib/tsan/rtl-old/tsan_stack_trace.h; compiler-rt/lib/tsan/rtl-old/tsan_suppressions.h; compiler-rt/lib/tsan/rtl-old/tsan_symbolize.h; compiler-rt/lib/tsan/rtl-old/tsan_vector_clock.h; compiler-rt/lib/tsan/tests/unit/tsan_ilist_test.cpp; compiler-rt/lib/tsan/tests/unit/tsan_trace_test.cpp; compiler-rt/lib/tsan/tests/unit/tsan_vector_clock_test.cpp; compiler-rt/lib/ubsan/ubsan_init_standalone_preinit.cpp; compiler-rt/lib/ubsan/ubsan_monitor.cpp; compiler-rt/lib/ubsan/ubsan_monitor.h; compiler-rt/lib/ubsan/ubsan_signals_standalone.h; compiler-rt/lib/ubsan/ubsan_win_dll_thunk.cpp; compiler-rt/lib/ubsan/ubsan_win_dynamic_runtime_thunk.cpp; compiler-rt/lib/ubsan/ubsan_win_weak_interception.cpp; compiler-rt/lib/xray/xray_AArch64.cpp; compiler-rt/lib/xray/xray_arm.cpp; compiler-rt/lib/xray/xray_basic_flags.cpp; compiler-rt/lib/xray/xray_basic_flags.h; compiler-rt/lib/xray/xray_basic_logging.h; compiler-rt/lib/xray/xray_buffer_queue.cpp; compiler-rt/lib/xray/xray_buffer_queue.h; compiler-rt/lib/xray/xray_fdr_controller.h; compiler-rt/lib/xray/xray_fdr_flags.cpp; compiler-rt/lib/xray/xray_fdr_flags.h; compiler-rt/lib/xray/xray_fdr_logging.h; compiler-rt/lib/xray/xray_fdr_log_records.h; compiler-rt/lib/xray/xray_flags.cpp; compiler-rt/lib/xray/xray_f,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:105080,Testability,test,tests,105080,cpp; compiler-rt/lib/tsan/rtl/tsan_shadow.h; compiler-rt/lib/tsan/rtl/tsan_stack_trace.h; compiler-rt/lib/tsan/rtl/tsan_suppressions.h; compiler-rt/lib/tsan/rtl/tsan_symbolize.h; compiler-rt/lib/tsan/rtl/tsan_trace.h; compiler-rt/lib/tsan/rtl/tsan_vector_clock.h; compiler-rt/lib/tsan/rtl-old/tsan_fd.h; compiler-rt/lib/tsan/rtl-old/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl-old/tsan_ilist.h; compiler-rt/lib/tsan/rtl-old/tsan_interface_ann.h; compiler-rt/lib/tsan/rtl-old/tsan_mman.h; compiler-rt/lib/tsan/rtl-old/tsan_mutexset.h; compiler-rt/lib/tsan/rtl-old/tsan_ppc_regs.h; compiler-rt/lib/tsan/rtl-old/tsan_rtl_access.cpp; compiler-rt/lib/tsan/rtl-old/tsan_shadow.h; compiler-rt/lib/tsan/rtl-old/tsan_stack_trace.h; compiler-rt/lib/tsan/rtl-old/tsan_suppressions.h; compiler-rt/lib/tsan/rtl-old/tsan_symbolize.h; compiler-rt/lib/tsan/rtl-old/tsan_vector_clock.h; compiler-rt/lib/tsan/tests/unit/tsan_ilist_test.cpp; compiler-rt/lib/tsan/tests/unit/tsan_trace_test.cpp; compiler-rt/lib/tsan/tests/unit/tsan_vector_clock_test.cpp; compiler-rt/lib/ubsan/ubsan_init_standalone_preinit.cpp; compiler-rt/lib/ubsan/ubsan_monitor.cpp; compiler-rt/lib/ubsan/ubsan_monitor.h; compiler-rt/lib/ubsan/ubsan_signals_standalone.h; compiler-rt/lib/ubsan/ubsan_win_dll_thunk.cpp; compiler-rt/lib/ubsan/ubsan_win_dynamic_runtime_thunk.cpp; compiler-rt/lib/ubsan/ubsan_win_weak_interception.cpp; compiler-rt/lib/xray/xray_AArch64.cpp; compiler-rt/lib/xray/xray_arm.cpp; compiler-rt/lib/xray/xray_basic_flags.cpp; compiler-rt/lib/xray/xray_basic_flags.h; compiler-rt/lib/xray/xray_basic_logging.h; compiler-rt/lib/xray/xray_buffer_queue.cpp; compiler-rt/lib/xray/xray_buffer_queue.h; compiler-rt/lib/xray/xray_fdr_controller.h; compiler-rt/lib/xray/xray_fdr_flags.cpp; compiler-rt/lib/xray/xray_fdr_flags.h; compiler-rt/lib/xray/xray_fdr_logging.h; compiler-rt/lib/xray/xray_fdr_log_records.h; compiler-rt/lib/xray/xray_flags.cpp; compiler-rt/lib/xray/xray_flags.h; compiler-rt/lib/xray/xray_interface_internal.h; ,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:106624,Testability,test,tests,106624,compiler-rt/lib/xray/xray_basic_logging.h; compiler-rt/lib/xray/xray_buffer_queue.cpp; compiler-rt/lib/xray/xray_buffer_queue.h; compiler-rt/lib/xray/xray_fdr_controller.h; compiler-rt/lib/xray/xray_fdr_flags.cpp; compiler-rt/lib/xray/xray_fdr_flags.h; compiler-rt/lib/xray/xray_fdr_logging.h; compiler-rt/lib/xray/xray_fdr_log_records.h; compiler-rt/lib/xray/xray_flags.cpp; compiler-rt/lib/xray/xray_flags.h; compiler-rt/lib/xray/xray_interface_internal.h; compiler-rt/lib/xray/xray_log_interface.cpp; compiler-rt/lib/xray/xray_mips.cpp; compiler-rt/lib/xray/xray_mips64.cpp; compiler-rt/lib/xray/xray_powerpc64.cpp; compiler-rt/lib/xray/xray_profile_collector.cpp; compiler-rt/lib/xray/xray_profile_collector.h; compiler-rt/lib/xray/xray_profiling.cpp; compiler-rt/lib/xray/xray_profiling_flags.cpp; compiler-rt/lib/xray/xray_profiling_flags.h; compiler-rt/lib/xray/xray_recursion_guard.h; compiler-rt/lib/xray/xray_trampoline_powerpc64.cpp; compiler-rt/lib/xray/xray_tsc.h; compiler-rt/lib/xray/tests/unit/allocator_test.cpp; compiler-rt/lib/xray/tests/unit/buffer_queue_test.cpp; compiler-rt/lib/xray/tests/unit/fdr_log_writer_test.cpp; compiler-rt/lib/xray/tests/unit/function_call_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:106676,Testability,test,tests,106676,rt/lib/xray/xray_buffer_queue.cpp; compiler-rt/lib/xray/xray_buffer_queue.h; compiler-rt/lib/xray/xray_fdr_controller.h; compiler-rt/lib/xray/xray_fdr_flags.cpp; compiler-rt/lib/xray/xray_fdr_flags.h; compiler-rt/lib/xray/xray_fdr_logging.h; compiler-rt/lib/xray/xray_fdr_log_records.h; compiler-rt/lib/xray/xray_flags.cpp; compiler-rt/lib/xray/xray_flags.h; compiler-rt/lib/xray/xray_interface_internal.h; compiler-rt/lib/xray/xray_log_interface.cpp; compiler-rt/lib/xray/xray_mips.cpp; compiler-rt/lib/xray/xray_mips64.cpp; compiler-rt/lib/xray/xray_powerpc64.cpp; compiler-rt/lib/xray/xray_profile_collector.cpp; compiler-rt/lib/xray/xray_profile_collector.h; compiler-rt/lib/xray/xray_profiling.cpp; compiler-rt/lib/xray/xray_profiling_flags.cpp; compiler-rt/lib/xray/xray_profiling_flags.h; compiler-rt/lib/xray/xray_recursion_guard.h; compiler-rt/lib/xray/xray_trampoline_powerpc64.cpp; compiler-rt/lib/xray/xray_tsc.h; compiler-rt/lib/xray/tests/unit/allocator_test.cpp; compiler-rt/lib/xray/tests/unit/buffer_queue_test.cpp; compiler-rt/lib/xray/tests/unit/fdr_log_writer_test.cpp; compiler-rt/lib/xray/tests/unit/function_call_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/de,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:106731,Testability,test,tests,106731,xray_buffer_queue.h; compiler-rt/lib/xray/xray_fdr_controller.h; compiler-rt/lib/xray/xray_fdr_flags.cpp; compiler-rt/lib/xray/xray_fdr_flags.h; compiler-rt/lib/xray/xray_fdr_logging.h; compiler-rt/lib/xray/xray_fdr_log_records.h; compiler-rt/lib/xray/xray_flags.cpp; compiler-rt/lib/xray/xray_flags.h; compiler-rt/lib/xray/xray_interface_internal.h; compiler-rt/lib/xray/xray_log_interface.cpp; compiler-rt/lib/xray/xray_mips.cpp; compiler-rt/lib/xray/xray_mips64.cpp; compiler-rt/lib/xray/xray_powerpc64.cpp; compiler-rt/lib/xray/xray_profile_collector.cpp; compiler-rt/lib/xray/xray_profile_collector.h; compiler-rt/lib/xray/xray_profiling.cpp; compiler-rt/lib/xray/xray_profiling_flags.cpp; compiler-rt/lib/xray/xray_profiling_flags.h; compiler-rt/lib/xray/xray_recursion_guard.h; compiler-rt/lib/xray/xray_trampoline_powerpc64.cpp; compiler-rt/lib/xray/xray_tsc.h; compiler-rt/lib/xray/tests/unit/allocator_test.cpp; compiler-rt/lib/xray/tests/unit/buffer_queue_test.cpp; compiler-rt/lib/xray/tests/unit/fdr_log_writer_test.cpp; compiler-rt/lib/xray/tests/unit/function_call_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limi,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:106788,Testability,test,tests,106788,er.h; compiler-rt/lib/xray/xray_fdr_flags.cpp; compiler-rt/lib/xray/xray_fdr_flags.h; compiler-rt/lib/xray/xray_fdr_logging.h; compiler-rt/lib/xray/xray_fdr_log_records.h; compiler-rt/lib/xray/xray_flags.cpp; compiler-rt/lib/xray/xray_flags.h; compiler-rt/lib/xray/xray_interface_internal.h; compiler-rt/lib/xray/xray_log_interface.cpp; compiler-rt/lib/xray/xray_mips.cpp; compiler-rt/lib/xray/xray_mips64.cpp; compiler-rt/lib/xray/xray_powerpc64.cpp; compiler-rt/lib/xray/xray_profile_collector.cpp; compiler-rt/lib/xray/xray_profile_collector.h; compiler-rt/lib/xray/xray_profiling.cpp; compiler-rt/lib/xray/xray_profiling_flags.cpp; compiler-rt/lib/xray/xray_profiling_flags.h; compiler-rt/lib/xray/xray_recursion_guard.h; compiler-rt/lib/xray/xray_trampoline_powerpc64.cpp; compiler-rt/lib/xray/xray_tsc.h; compiler-rt/lib/xray/tests/unit/allocator_test.cpp; compiler-rt/lib/xray/tests/unit/buffer_queue_test.cpp; compiler-rt/lib/xray/tests/unit/fdr_log_writer_test.cpp; compiler-rt/lib/xray/tests/unit/function_call_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:106849,Testability,test,tests,106849,b/xray/xray_fdr_flags.h; compiler-rt/lib/xray/xray_fdr_logging.h; compiler-rt/lib/xray/xray_fdr_log_records.h; compiler-rt/lib/xray/xray_flags.cpp; compiler-rt/lib/xray/xray_flags.h; compiler-rt/lib/xray/xray_interface_internal.h; compiler-rt/lib/xray/xray_log_interface.cpp; compiler-rt/lib/xray/xray_mips.cpp; compiler-rt/lib/xray/xray_mips64.cpp; compiler-rt/lib/xray/xray_powerpc64.cpp; compiler-rt/lib/xray/xray_profile_collector.cpp; compiler-rt/lib/xray/xray_profile_collector.h; compiler-rt/lib/xray/xray_profiling.cpp; compiler-rt/lib/xray/xray_profiling_flags.cpp; compiler-rt/lib/xray/xray_profiling_flags.h; compiler-rt/lib/xray/xray_recursion_guard.h; compiler-rt/lib/xray/xray_trampoline_powerpc64.cpp; compiler-rt/lib/xray/xray_tsc.h; compiler-rt/lib/xray/tests/unit/allocator_test.cpp; compiler-rt/lib/xray/tests/unit/buffer_queue_test.cpp; compiler-rt/lib/xray/tests/unit/fdr_log_writer_test.cpp; compiler-rt/lib/xray/tests/unit/function_call_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_step,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:106909,Testability,test,tests,106909,ing.h; compiler-rt/lib/xray/xray_fdr_log_records.h; compiler-rt/lib/xray/xray_flags.cpp; compiler-rt/lib/xray/xray_flags.h; compiler-rt/lib/xray/xray_interface_internal.h; compiler-rt/lib/xray/xray_log_interface.cpp; compiler-rt/lib/xray/xray_mips.cpp; compiler-rt/lib/xray/xray_mips64.cpp; compiler-rt/lib/xray/xray_powerpc64.cpp; compiler-rt/lib/xray/xray_profile_collector.cpp; compiler-rt/lib/xray/xray_profile_collector.h; compiler-rt/lib/xray/xray_profiling.cpp; compiler-rt/lib/xray/xray_profiling_flags.cpp; compiler-rt/lib/xray/xray_profiling_flags.h; compiler-rt/lib/xray/xray_recursion_guard.h; compiler-rt/lib/xray/xray_trampoline_powerpc64.cpp; compiler-rt/lib/xray/xray_tsc.h; compiler-rt/lib/xray/tests/unit/allocator_test.cpp; compiler-rt/lib/xray/tests/unit/buffer_queue_test.cpp; compiler-rt/lib/xray/tests/unit/fdr_log_writer_test.cpp; compiler-rt/lib/xray/tests/unit/function_call_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/de,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:106967,Testability,test,tests,106967,mpiler-rt/lib/xray/xray_flags.cpp; compiler-rt/lib/xray/xray_flags.h; compiler-rt/lib/xray/xray_interface_internal.h; compiler-rt/lib/xray/xray_log_interface.cpp; compiler-rt/lib/xray/xray_mips.cpp; compiler-rt/lib/xray/xray_mips64.cpp; compiler-rt/lib/xray/xray_powerpc64.cpp; compiler-rt/lib/xray/xray_profile_collector.cpp; compiler-rt/lib/xray/xray_profile_collector.h; compiler-rt/lib/xray/xray_profiling.cpp; compiler-rt/lib/xray/xray_profiling_flags.cpp; compiler-rt/lib/xray/xray_profiling_flags.h; compiler-rt/lib/xray/xray_recursion_guard.h; compiler-rt/lib/xray/xray_trampoline_powerpc64.cpp; compiler-rt/lib/xray/xray_tsc.h; compiler-rt/lib/xray/tests/unit/allocator_test.cpp; compiler-rt/lib/xray/tests/unit/buffer_queue_test.cpp; compiler-rt/lib/xray/tests/unit/fdr_log_writer_test.cpp; compiler-rt/lib/xray/tests/unit/function_call_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/de,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:107015,Testability,test,tests,107015,ray/xray_flags.h; compiler-rt/lib/xray/xray_interface_internal.h; compiler-rt/lib/xray/xray_log_interface.cpp; compiler-rt/lib/xray/xray_mips.cpp; compiler-rt/lib/xray/xray_mips64.cpp; compiler-rt/lib/xray/xray_powerpc64.cpp; compiler-rt/lib/xray/xray_profile_collector.cpp; compiler-rt/lib/xray/xray_profile_collector.h; compiler-rt/lib/xray/xray_profiling.cpp; compiler-rt/lib/xray/xray_profiling_flags.cpp; compiler-rt/lib/xray/xray_profiling_flags.h; compiler-rt/lib/xray/xray_recursion_guard.h; compiler-rt/lib/xray/xray_trampoline_powerpc64.cpp; compiler-rt/lib/xray/xray_tsc.h; compiler-rt/lib/xray/tests/unit/allocator_test.cpp; compiler-rt/lib/xray/tests/unit/buffer_queue_test.cpp; compiler-rt/lib/xray/tests/unit/fdr_log_writer_test.cpp; compiler-rt/lib/xray/tests/unit/function_call_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-te,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:107181,Testability,test,tests,107181,/xray/xray_powerpc64.cpp; compiler-rt/lib/xray/xray_profile_collector.cpp; compiler-rt/lib/xray/xray_profile_collector.h; compiler-rt/lib/xray/xray_profiling.cpp; compiler-rt/lib/xray/xray_profiling_flags.cpp; compiler-rt/lib/xray/xray_profiling_flags.h; compiler-rt/lib/xray/xray_recursion_guard.h; compiler-rt/lib/xray/xray_trampoline_powerpc64.cpp; compiler-rt/lib/xray/xray_tsc.h; compiler-rt/lib/xray/tests/unit/allocator_test.cpp; compiler-rt/lib/xray/tests/unit/buffer_queue_test.cpp; compiler-rt/lib/xray/tests/unit/fdr_log_writer_test.cpp; compiler-rt/lib/xray/tests/unit/function_call_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/Fl,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:107197,Testability,test,tests,107197,/xray/xray_powerpc64.cpp; compiler-rt/lib/xray/xray_profile_collector.cpp; compiler-rt/lib/xray/xray_profile_collector.h; compiler-rt/lib/xray/xray_profiling.cpp; compiler-rt/lib/xray/xray_profiling_flags.cpp; compiler-rt/lib/xray/xray_profiling_flags.h; compiler-rt/lib/xray/xray_recursion_guard.h; compiler-rt/lib/xray/xray_trampoline_powerpc64.cpp; compiler-rt/lib/xray/xray_tsc.h; compiler-rt/lib/xray/tests/unit/allocator_test.cpp; compiler-rt/lib/xray/tests/unit/buffer_queue_test.cpp; compiler-rt/lib/xray/tests/unit/fdr_log_writer_test.cpp; compiler-rt/lib/xray/tests/unit/function_call_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/Fl,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:107293,Testability,test,tests,107293,ctor.h; compiler-rt/lib/xray/xray_profiling.cpp; compiler-rt/lib/xray/xray_profiling_flags.cpp; compiler-rt/lib/xray/xray_profiling_flags.h; compiler-rt/lib/xray/xray_recursion_guard.h; compiler-rt/lib/xray/xray_trampoline_powerpc64.cpp; compiler-rt/lib/xray/xray_tsc.h; compiler-rt/lib/xray/tests/unit/allocator_test.cpp; compiler-rt/lib/xray/tests/unit/buffer_queue_test.cpp; compiler-rt/lib/xray/tests/unit/fdr_log_writer_test.cpp; compiler-rt/lib/xray/tests/unit/function_call_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/FlangOmpReport.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.cpp; flang/examples/FlangOmpReport/FlangOmpR,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:107309,Testability,test,tests,107309,ctor.h; compiler-rt/lib/xray/xray_profiling.cpp; compiler-rt/lib/xray/xray_profiling_flags.cpp; compiler-rt/lib/xray/xray_profiling_flags.h; compiler-rt/lib/xray/xray_recursion_guard.h; compiler-rt/lib/xray/xray_trampoline_powerpc64.cpp; compiler-rt/lib/xray/xray_tsc.h; compiler-rt/lib/xray/tests/unit/allocator_test.cpp; compiler-rt/lib/xray/tests/unit/buffer_queue_test.cpp; compiler-rt/lib/xray/tests/unit/fdr_log_writer_test.cpp; compiler-rt/lib/xray/tests/unit/function_call_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/FlangOmpReport.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.cpp; flang/examples/FlangOmpReport/FlangOmpR,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:107385,Testability,test,test,107385,ctor.h; compiler-rt/lib/xray/xray_profiling.cpp; compiler-rt/lib/xray/xray_profiling_flags.cpp; compiler-rt/lib/xray/xray_profiling_flags.h; compiler-rt/lib/xray/xray_recursion_guard.h; compiler-rt/lib/xray/xray_trampoline_powerpc64.cpp; compiler-rt/lib/xray/xray_tsc.h; compiler-rt/lib/xray/tests/unit/allocator_test.cpp; compiler-rt/lib/xray/tests/unit/buffer_queue_test.cpp; compiler-rt/lib/xray/tests/unit/fdr_log_writer_test.cpp; compiler-rt/lib/xray/tests/unit/function_call_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/FlangOmpReport.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.cpp; flang/examples/FlangOmpReport/FlangOmpR,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:107409,Testability,test,tests,107409,ray_profiling_flags.h; compiler-rt/lib/xray/xray_recursion_guard.h; compiler-rt/lib/xray/xray_trampoline_powerpc64.cpp; compiler-rt/lib/xray/xray_tsc.h; compiler-rt/lib/xray/tests/unit/allocator_test.cpp; compiler-rt/lib/xray/tests/unit/buffer_queue_test.cpp; compiler-rt/lib/xray/tests/unit/fdr_log_writer_test.cpp; compiler-rt/lib/xray/tests/unit/function_call_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/FlangOmpReport.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.h; flang/examples/PrintFlangFunctionNames/PrintFlangFunctionNames.cpp; flang/include/flang/ISO_Fortran_bi,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:107425,Testability,test,tests,107425,ray_profiling_flags.h; compiler-rt/lib/xray/xray_recursion_guard.h; compiler-rt/lib/xray/xray_trampoline_powerpc64.cpp; compiler-rt/lib/xray/xray_tsc.h; compiler-rt/lib/xray/tests/unit/allocator_test.cpp; compiler-rt/lib/xray/tests/unit/buffer_queue_test.cpp; compiler-rt/lib/xray/tests/unit/fdr_log_writer_test.cpp; compiler-rt/lib/xray/tests/unit/function_call_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/FlangOmpReport.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.h; flang/examples/PrintFlangFunctionNames/PrintFlangFunctionNames.cpp; flang/include/flang/ISO_Fortran_bi,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:107505,Testability,test,test,107505,ray_profiling_flags.h; compiler-rt/lib/xray/xray_recursion_guard.h; compiler-rt/lib/xray/xray_trampoline_powerpc64.cpp; compiler-rt/lib/xray/xray_tsc.h; compiler-rt/lib/xray/tests/unit/allocator_test.cpp; compiler-rt/lib/xray/tests/unit/buffer_queue_test.cpp; compiler-rt/lib/xray/tests/unit/fdr_log_writer_test.cpp; compiler-rt/lib/xray/tests/unit/function_call_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/FlangOmpReport.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.h; flang/examples/PrintFlangFunctionNames/PrintFlangFunctionNames.cpp; flang/include/flang/ISO_Fortran_bi,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:107529,Testability,test,tests,107529,t/lib/xray/xray_tsc.h; compiler-rt/lib/xray/tests/unit/allocator_test.cpp; compiler-rt/lib/xray/tests/unit/buffer_queue_test.cpp; compiler-rt/lib/xray/tests/unit/fdr_log_writer_test.cpp; compiler-rt/lib/xray/tests/unit/function_call_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/FlangOmpReport.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.h; flang/examples/PrintFlangFunctionNames/PrintFlangFunctionNames.cpp; flang/include/flang/ISO_Fortran_binding.h; flang/include/flang/Common/bit-population-count.h; flang/include/flang/Common/constexpr-bitset.h; flang/include/flang/Comm,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:107545,Testability,test,tests,107545,t/lib/xray/xray_tsc.h; compiler-rt/lib/xray/tests/unit/allocator_test.cpp; compiler-rt/lib/xray/tests/unit/buffer_queue_test.cpp; compiler-rt/lib/xray/tests/unit/fdr_log_writer_test.cpp; compiler-rt/lib/xray/tests/unit/function_call_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/FlangOmpReport.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.h; flang/examples/PrintFlangFunctionNames/PrintFlangFunctionNames.cpp; flang/include/flang/ISO_Fortran_binding.h; flang/include/flang/Common/bit-population-count.h; flang/include/flang/Common/constexpr-bitset.h; flang/include/flang/Comm,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:107646,Testability,test,test,107646,t/lib/xray/xray_tsc.h; compiler-rt/lib/xray/tests/unit/allocator_test.cpp; compiler-rt/lib/xray/tests/unit/buffer_queue_test.cpp; compiler-rt/lib/xray/tests/unit/fdr_log_writer_test.cpp; compiler-rt/lib/xray/tests/unit/function_call_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/FlangOmpReport.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.h; flang/examples/PrintFlangFunctionNames/PrintFlangFunctionNames.cpp; flang/include/flang/ISO_Fortran_binding.h; flang/include/flang/Common/bit-population-count.h; flang/include/flang/Common/constexpr-bitset.h; flang/include/flang/Comm,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:107670,Testability,test,tests,107670,est.cpp; compiler-rt/lib/xray/tests/unit/fdr_log_writer_test.cpp; compiler-rt/lib/xray/tests/unit/function_call_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/FlangOmpReport.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.h; flang/examples/PrintFlangFunctionNames/PrintFlangFunctionNames.cpp; flang/include/flang/ISO_Fortran_binding.h; flang/include/flang/Common/bit-population-count.h; flang/include/flang/Common/constexpr-bitset.h; flang/include/flang/Common/default-kinds.h; flang/include/flang/Common/enum-set.h; flang/include/flang/Common/fast-int-set.h; flang/include/flang,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:107686,Testability,test,tests,107686,est.cpp; compiler-rt/lib/xray/tests/unit/fdr_log_writer_test.cpp; compiler-rt/lib/xray/tests/unit/function_call_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/FlangOmpReport.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.h; flang/examples/PrintFlangFunctionNames/PrintFlangFunctionNames.cpp; flang/include/flang/ISO_Fortran_binding.h; flang/include/flang/Common/bit-population-count.h; flang/include/flang/Common/constexpr-bitset.h; flang/include/flang/Common/default-kinds.h; flang/include/flang/Common/enum-set.h; flang/include/flang/Common/fast-int-set.h; flang/include/flang,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:107771,Testability,test,tests,107771,ll_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/FlangOmpReport.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.h; flang/examples/PrintFlangFunctionNames/PrintFlangFunctionNames.cpp; flang/include/flang/ISO_Fortran_binding.h; flang/include/flang/Common/bit-population-count.h; flang/include/flang/Common/constexpr-bitset.h; flang/include/flang/Common/default-kinds.h; flang/include/flang/Common/enum-set.h; flang/include/flang/Common/fast-int-set.h; flang/include/flang/Common/format.h; flang/include/flang/Common/Fortran-features.h; flang/include/flang/Common/Fortran.h; flang/,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:107787,Testability,test,tests,107787,ll_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/FlangOmpReport.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.h; flang/examples/PrintFlangFunctionNames/PrintFlangFunctionNames.cpp; flang/include/flang/ISO_Fortran_binding.h; flang/include/flang/Common/bit-population-count.h; flang/include/flang/Common/constexpr-bitset.h; flang/include/flang/Common/default-kinds.h; flang/include/flang/Common/enum-set.h; flang/include/flang/Common/fast-int-set.h; flang/include/flang/Common/format.h; flang/include/flang/Common/Fortran-features.h; flang/include/flang/Common/Fortran.h; flang/,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:107888,Testability,test,tests,107888,xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/FlangOmpReport.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.h; flang/examples/PrintFlangFunctionNames/PrintFlangFunctionNames.cpp; flang/include/flang/ISO_Fortran_binding.h; flang/include/flang/Common/bit-population-count.h; flang/include/flang/Common/constexpr-bitset.h; flang/include/flang/Common/default-kinds.h; flang/include/flang/Common/enum-set.h; flang/include/flang/Common/fast-int-set.h; flang/include/flang/Common/format.h; flang/include/flang/Common/Fortran-features.h; flang/include/flang/Common/Fortran.h; flang/include/flang/Common/idioms.h; flang/include/flang/Common/indirection.h; flang/include/flang/,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:107904,Testability,test,tests,107904,xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/FlangOmpReport.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.h; flang/examples/PrintFlangFunctionNames/PrintFlangFunctionNames.cpp; flang/include/flang/ISO_Fortran_binding.h; flang/include/flang/Common/bit-population-count.h; flang/include/flang/Common/constexpr-bitset.h; flang/include/flang/Common/default-kinds.h; flang/include/flang/Common/enum-set.h; flang/include/flang/Common/fast-int-set.h; flang/include/flang/Common/format.h; flang/include/flang/Common/Fortran-features.h; flang/include/flang/Common/Fortran.h; flang/include/flang/Common/idioms.h; flang/include/flang/Common/indirection.h; flang/include/flang/,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:107917,Testability,test,tests,107917,xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/FlangOmpReport.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.h; flang/examples/PrintFlangFunctionNames/PrintFlangFunctionNames.cpp; flang/include/flang/ISO_Fortran_binding.h; flang/include/flang/Common/bit-population-count.h; flang/include/flang/Common/constexpr-bitset.h; flang/include/flang/Common/default-kinds.h; flang/include/flang/Common/enum-set.h; flang/include/flang/Common/fast-int-set.h; flang/include/flang/Common/format.h; flang/include/flang/Common/Fortran-features.h; flang/include/flang/Common/Fortran.h; flang/include/flang/Common/idioms.h; flang/include/flang/Common/indirection.h; flang/include/flang/,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:107958,Testability,test,tests,107958,ests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/FlangOmpReport.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.h; flang/examples/PrintFlangFunctionNames/PrintFlangFunctionNames.cpp; flang/include/flang/ISO_Fortran_binding.h; flang/include/flang/Common/bit-population-count.h; flang/include/flang/Common/constexpr-bitset.h; flang/include/flang/Common/default-kinds.h; flang/include/flang/Common/enum-set.h; flang/include/flang/Common/fast-int-set.h; flang/include/flang/Common/format.h; flang/include/flang/Common/Fortran-features.h; flang/include/flang/Common/Fortran.h; flang/include/flang/Common/idioms.h; flang/include/flang/Common/indirection.h; flang/include/flang/Common/interval.h; flang/include/flang/Common/leading-zero-bit-co,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:107974,Testability,test,tests,107974,ests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/FlangOmpReport.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.h; flang/examples/PrintFlangFunctionNames/PrintFlangFunctionNames.cpp; flang/include/flang/ISO_Fortran_binding.h; flang/include/flang/Common/bit-population-count.h; flang/include/flang/Common/constexpr-bitset.h; flang/include/flang/Common/default-kinds.h; flang/include/flang/Common/enum-set.h; flang/include/flang/Common/fast-int-set.h; flang/include/flang/Common/format.h; flang/include/flang/Common/Fortran-features.h; flang/include/flang/Common/Fortran.h; flang/include/flang/Common/idioms.h; flang/include/flang/Common/indirection.h; flang/include/flang/Common/interval.h; flang/include/flang/Common/leading-zero-bit-co,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:107987,Testability,test,tests,107987,ests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/FlangOmpReport.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.h; flang/examples/PrintFlangFunctionNames/PrintFlangFunctionNames.cpp; flang/include/flang/ISO_Fortran_binding.h; flang/include/flang/Common/bit-population-count.h; flang/include/flang/Common/constexpr-bitset.h; flang/include/flang/Common/default-kinds.h; flang/include/flang/Common/enum-set.h; flang/include/flang/Common/fast-int-set.h; flang/include/flang/Common/format.h; flang/include/flang/Common/Fortran-features.h; flang/include/flang/Common/Fortran.h; flang/include/flang/Common/idioms.h; flang/include/flang/Common/indirection.h; flang/include/flang/Common/interval.h; flang/include/flang/Common/leading-zero-bit-co,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:108017,Testability,test,tests,108017,it_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/FlangOmpReport.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.h; flang/examples/PrintFlangFunctionNames/PrintFlangFunctionNames.cpp; flang/include/flang/ISO_Fortran_binding.h; flang/include/flang/Common/bit-population-count.h; flang/include/flang/Common/constexpr-bitset.h; flang/include/flang/Common/default-kinds.h; flang/include/flang/Common/enum-set.h; flang/include/flang/Common/fast-int-set.h; flang/include/flang/Common/format.h; flang/include/flang/Common/Fortran-features.h; flang/include/flang/Common/Fortran.h; flang/include/flang/Common/idioms.h; flang/include/flang/Common/indirection.h; flang/include/flang/Common/interval.h; flang/include/flang/Common/leading-zero-bit-count.h; flang/include/flang/Common/long-double.h; flang/include/f,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:108033,Testability,test,tests,108033,it_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/FlangOmpReport.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.h; flang/examples/PrintFlangFunctionNames/PrintFlangFunctionNames.cpp; flang/include/flang/ISO_Fortran_binding.h; flang/include/flang/Common/bit-population-count.h; flang/include/flang/Common/constexpr-bitset.h; flang/include/flang/Common/default-kinds.h; flang/include/flang/Common/enum-set.h; flang/include/flang/Common/fast-int-set.h; flang/include/flang/Common/format.h; flang/include/flang/Common/Fortran-features.h; flang/include/flang/Common/Fortran.h; flang/include/flang/Common/idioms.h; flang/include/flang/Common/indirection.h; flang/include/flang/Common/interval.h; flang/include/flang/Common/leading-zero-bit-count.h; flang/include/flang/Common/long-double.h; flang/include/f,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:108046,Testability,test,tests,108046,it_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/FlangOmpReport.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.h; flang/examples/PrintFlangFunctionNames/PrintFlangFunctionNames.cpp; flang/include/flang/ISO_Fortran_binding.h; flang/include/flang/Common/bit-population-count.h; flang/include/flang/Common/constexpr-bitset.h; flang/include/flang/Common/default-kinds.h; flang/include/flang/Common/enum-set.h; flang/include/flang/Common/fast-int-set.h; flang/include/flang/Common/format.h; flang/include/flang/Common/Fortran-features.h; flang/include/flang/Common/Fortran.h; flang/include/flang/Common/idioms.h; flang/include/flang/Common/indirection.h; flang/include/flang/Common/interval.h; flang/include/flang/Common/leading-zero-bit-count.h; flang/include/flang/Common/long-double.h; flang/include/f,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:108087,Testability,test,tests,108087,mpiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/FlangOmpReport.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.h; flang/examples/PrintFlangFunctionNames/PrintFlangFunctionNames.cpp; flang/include/flang/ISO_Fortran_binding.h; flang/include/flang/Common/bit-population-count.h; flang/include/flang/Common/constexpr-bitset.h; flang/include/flang/Common/default-kinds.h; flang/include/flang/Common/enum-set.h; flang/include/flang/Common/fast-int-set.h; flang/include/flang/Common/format.h; flang/include/flang/Common/Fortran-features.h; flang/include/flang/Common/Fortran.h; flang/include/flang/Common/idioms.h; flang/include/flang/Common/indirection.h; flang/include/flang/Common/interval.h; flang/include/flang/Common/leading-zero-bit-count.h; flang/include/flang/Common/long-double.h; flang/include/flang/Common/real.h; flang/include/flang/Common/reference-counted.h; flang/,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:108103,Testability,test,tests,108103,mpiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/FlangOmpReport.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.h; flang/examples/PrintFlangFunctionNames/PrintFlangFunctionNames.cpp; flang/include/flang/ISO_Fortran_binding.h; flang/include/flang/Common/bit-population-count.h; flang/include/flang/Common/constexpr-bitset.h; flang/include/flang/Common/default-kinds.h; flang/include/flang/Common/enum-set.h; flang/include/flang/Common/fast-int-set.h; flang/include/flang/Common/format.h; flang/include/flang/Common/Fortran-features.h; flang/include/flang/Common/Fortran.h; flang/include/flang/Common/idioms.h; flang/include/flang/Common/indirection.h; flang/include/flang/Common/interval.h; flang/include/flang/Common/leading-zero-bit-count.h; flang/include/flang/Common/long-double.h; flang/include/flang/Common/real.h; flang/include/flang/Common/reference-counted.h; flang/,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:110071,Testability,log,logical,110071,include/flang/Common/reference-counted.h; flang/include/flang/Common/reference.h; flang/include/flang/Common/restorer.h; flang/include/flang/Common/static-multimap-view.h; flang/include/flang/Common/template.h; flang/include/flang/Common/uint128.h; flang/include/flang/Common/unwrap.h; flang/include/flang/Decimal/binary-floating-point.h; flang/include/flang/Decimal/decimal.h; flang/include/flang/Evaluate/call.h; flang/include/flang/Evaluate/characteristics.h; flang/include/flang/Evaluate/check-expression.h; flang/include/flang/Evaluate/common.h; flang/include/flang/Evaluate/complex.h; flang/include/flang/Evaluate/constant.h; flang/include/flang/Evaluate/expression.h; flang/include/flang/Evaluate/fold-designator.h; flang/include/flang/Evaluate/fold.h; flang/include/flang/Evaluate/formatting.h; flang/include/flang/Evaluate/initial-image.h; flang/include/flang/Evaluate/integer.h; flang/include/flang/Evaluate/intrinsics-library.h; flang/include/flang/Evaluate/intrinsics.h; flang/include/flang/Evaluate/logical.h; flang/include/flang/Evaluate/real.h; flang/include/flang/Evaluate/rounding-bits.h; flang/include/flang/Evaluate/shape.h; flang/include/flang/Evaluate/static-data.h; flang/include/flang/Evaluate/tools.h; flang/include/flang/Evaluate/traverse.h; flang/include/flang/Evaluate/type.h; flang/include/flang/Evaluate/variable.h; flang/include/flang/Frontend/CompilerInstance.h; flang/include/flang/Frontend/FrontendAction.h; flang/include/flang/Frontend/FrontendActions.h; flang/include/flang/Frontend/FrontendOptions.h; flang/include/flang/Frontend/FrontendPluginRegistry.h; flang/include/flang/Frontend/PreprocessorOptions.h; flang/include/flang/Frontend/TargetOptions.h; flang/include/flang/Frontend/TextDiagnostic.h; flang/include/flang/Frontend/TextDiagnosticBuffer.h; flang/include/flang/Frontend/TextDiagnosticPrinter.h; flang/include/flang/FrontendTool/Utils.h; flang/include/flang/Lower/AbstractConverter.h; flang/include/flang/Lower/Allocatable.h; flang/include/flang/Lower/,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:116579,Testability,log,logical,116579,ics/openmp-directive-sets.h; flang/include/flang/Semantics/runtime-type-info.h; flang/include/flang/Semantics/scope.h; flang/include/flang/Semantics/semantics.h; flang/include/flang/Semantics/symbol.h; flang/include/flang/Semantics/tools.h; flang/include/flang/Semantics/type.h; flang/include/flang/Semantics/unparse-with-symbols.h; flang/lib/Common/default-kinds.cpp; flang/lib/Common/Fortran-features.cpp; flang/lib/Common/Fortran.cpp; flang/lib/Common/idioms.cpp; flang/lib/Decimal/big-radix-floating-point.h; flang/lib/Decimal/binary-to-decimal.cpp; flang/lib/Decimal/decimal-to-binary.cpp; flang/lib/Evaluate/call.cpp; flang/lib/Evaluate/character.h; flang/lib/Evaluate/check-expression.cpp; flang/lib/Evaluate/common.cpp; flang/lib/Evaluate/complex.cpp; flang/lib/Evaluate/constant.cpp; flang/lib/Evaluate/expression.cpp; flang/lib/Evaluate/fold-character.cpp; flang/lib/Evaluate/fold-complex.cpp; flang/lib/Evaluate/fold-designator.cpp; flang/lib/Evaluate/fold-implementation.h; flang/lib/Evaluate/fold-logical.cpp; flang/lib/Evaluate/fold-real.cpp; flang/lib/Evaluate/fold-reduction.cpp; flang/lib/Evaluate/fold-reduction.h; flang/lib/Evaluate/fold.cpp; flang/lib/Evaluate/formatting.cpp; flang/lib/Evaluate/host.cpp; flang/lib/Evaluate/host.h; flang/lib/Evaluate/initial-image.cpp; flang/lib/Evaluate/int-power.h; flang/lib/Evaluate/integer.cpp; flang/lib/Evaluate/intrinsics-library.cpp; flang/lib/Evaluate/intrinsics.cpp; flang/lib/Evaluate/logical.cpp; flang/lib/Evaluate/real.cpp; flang/lib/Evaluate/shape.cpp; flang/lib/Evaluate/static-data.cpp; flang/lib/Evaluate/tools.cpp; flang/lib/Evaluate/type.cpp; flang/lib/Evaluate/variable.cpp; flang/lib/Frontend/CompilerInstance.cpp; flang/lib/Frontend/FrontendAction.cpp; flang/lib/Frontend/FrontendOptions.cpp; flang/lib/Frontend/TextDiagnostic.cpp; flang/lib/Frontend/TextDiagnosticBuffer.cpp; flang/lib/Frontend/TextDiagnosticPrinter.cpp; flang/lib/FrontendTool/ExecuteCompilerInvocation.cpp; flang/lib/Lower/Allocatable.cpp; flang/lib/Lo,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:117021,Testability,log,logical,117021,lib/Common/idioms.cpp; flang/lib/Decimal/big-radix-floating-point.h; flang/lib/Decimal/binary-to-decimal.cpp; flang/lib/Decimal/decimal-to-binary.cpp; flang/lib/Evaluate/call.cpp; flang/lib/Evaluate/character.h; flang/lib/Evaluate/check-expression.cpp; flang/lib/Evaluate/common.cpp; flang/lib/Evaluate/complex.cpp; flang/lib/Evaluate/constant.cpp; flang/lib/Evaluate/expression.cpp; flang/lib/Evaluate/fold-character.cpp; flang/lib/Evaluate/fold-complex.cpp; flang/lib/Evaluate/fold-designator.cpp; flang/lib/Evaluate/fold-implementation.h; flang/lib/Evaluate/fold-logical.cpp; flang/lib/Evaluate/fold-real.cpp; flang/lib/Evaluate/fold-reduction.cpp; flang/lib/Evaluate/fold-reduction.h; flang/lib/Evaluate/fold.cpp; flang/lib/Evaluate/formatting.cpp; flang/lib/Evaluate/host.cpp; flang/lib/Evaluate/host.h; flang/lib/Evaluate/initial-image.cpp; flang/lib/Evaluate/int-power.h; flang/lib/Evaluate/integer.cpp; flang/lib/Evaluate/intrinsics-library.cpp; flang/lib/Evaluate/intrinsics.cpp; flang/lib/Evaluate/logical.cpp; flang/lib/Evaluate/real.cpp; flang/lib/Evaluate/shape.cpp; flang/lib/Evaluate/static-data.cpp; flang/lib/Evaluate/tools.cpp; flang/lib/Evaluate/type.cpp; flang/lib/Evaluate/variable.cpp; flang/lib/Frontend/CompilerInstance.cpp; flang/lib/Frontend/FrontendAction.cpp; flang/lib/Frontend/FrontendOptions.cpp; flang/lib/Frontend/TextDiagnostic.cpp; flang/lib/Frontend/TextDiagnosticBuffer.cpp; flang/lib/Frontend/TextDiagnosticPrinter.cpp; flang/lib/FrontendTool/ExecuteCompilerInvocation.cpp; flang/lib/Lower/Allocatable.cpp; flang/lib/Lower/Bridge.cpp; flang/lib/Lower/CallInterface.cpp; flang/lib/Lower/Coarray.cpp; flang/lib/Lower/ComponentPath.cpp; flang/lib/Lower/ConvertExpr.cpp; flang/lib/Lower/ConvertType.cpp; flang/lib/Lower/ConvertVariable.cpp; flang/lib/Lower/DumpEvaluateExpr.cpp; flang/lib/Lower/IntervalSet.h; flang/lib/Lower/IntrinsicCall.cpp; flang/lib/Lower/IO.cpp; flang/lib/Lower/IterationSpace.cpp; flang/lib/Lower/Mangler.cpp; flang/lib/Lower/OpenACC.cpp; fla,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:126290,Testability,stub,stub-evaluate,126290,p; flang/runtime/ISO_Fortran_binding.cpp; flang/runtime/lock.h; flang/runtime/main.cpp; flang/runtime/matmul.cpp; flang/runtime/memory.cpp; flang/runtime/misc-intrinsic.cpp; flang/runtime/namelist.cpp; flang/runtime/namelist.h; flang/runtime/numeric.cpp; flang/runtime/pointer.cpp; flang/runtime/product.cpp; flang/runtime/ragged.cpp; flang/runtime/random.cpp; flang/runtime/reduction-templates.h; flang/runtime/reduction.cpp; flang/runtime/stat.cpp; flang/runtime/stat.h; flang/runtime/stop.cpp; flang/runtime/sum.cpp; flang/runtime/support.cpp; flang/runtime/terminator.cpp; flang/runtime/terminator.h; flang/runtime/time-intrinsic.cpp; flang/runtime/tools.cpp; flang/runtime/tools.h; flang/runtime/transformational.cpp; flang/runtime/type-code.cpp; flang/runtime/type-info.cpp; flang/runtime/type-info.h; flang/runtime/unit-map.cpp; flang/runtime/unit-map.h; flang/runtime/unit.h; flang/tools/bbc/bbc.cpp; flang/tools/f18/dump.cpp; flang/tools/f18-parse-demo/f18-parse-demo.cpp; flang/tools/f18-parse-demo/stub-evaluate.cpp; flang/tools/fir-opt/fir-opt.cpp; flang/tools/flang-driver/driver.cpp; flang/tools/flang-driver/fc1_main.cpp; flang/tools/tco/tco.cpp; flang/unittests/Common/FastIntSetTest.cpp; flang/unittests/Decimal/quick-sanity-test.cpp; flang/unittests/Decimal/thorough-test.cpp; flang/unittests/Evaluate/bit-population-count.cpp; flang/unittests/Evaluate/expression.cpp; flang/unittests/Evaluate/folding.cpp; flang/unittests/Evaluate/fp-testing.cpp; flang/unittests/Evaluate/fp-testing.h; flang/unittests/Evaluate/integer.cpp; flang/unittests/Evaluate/intrinsics.cpp; flang/unittests/Evaluate/ISO-Fortran-binding.cpp; flang/unittests/Evaluate/leading-zero-bit-count.cpp; flang/unittests/Evaluate/logical.cpp; flang/unittests/Evaluate/real.cpp; flang/unittests/Evaluate/reshape.cpp; flang/unittests/Evaluate/testing.cpp; flang/unittests/Evaluate/testing.h; flang/unittests/Evaluate/uint128.cpp; flang/unittests/Frontend/CompilerInstanceTest.cpp; flang/unittests/Frontend/FrontendAction,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:126523,Testability,test,test,126523,t.h; flang/runtime/numeric.cpp; flang/runtime/pointer.cpp; flang/runtime/product.cpp; flang/runtime/ragged.cpp; flang/runtime/random.cpp; flang/runtime/reduction-templates.h; flang/runtime/reduction.cpp; flang/runtime/stat.cpp; flang/runtime/stat.h; flang/runtime/stop.cpp; flang/runtime/sum.cpp; flang/runtime/support.cpp; flang/runtime/terminator.cpp; flang/runtime/terminator.h; flang/runtime/time-intrinsic.cpp; flang/runtime/tools.cpp; flang/runtime/tools.h; flang/runtime/transformational.cpp; flang/runtime/type-code.cpp; flang/runtime/type-info.cpp; flang/runtime/type-info.h; flang/runtime/unit-map.cpp; flang/runtime/unit-map.h; flang/runtime/unit.h; flang/tools/bbc/bbc.cpp; flang/tools/f18/dump.cpp; flang/tools/f18-parse-demo/f18-parse-demo.cpp; flang/tools/f18-parse-demo/stub-evaluate.cpp; flang/tools/fir-opt/fir-opt.cpp; flang/tools/flang-driver/driver.cpp; flang/tools/flang-driver/fc1_main.cpp; flang/tools/tco/tco.cpp; flang/unittests/Common/FastIntSetTest.cpp; flang/unittests/Decimal/quick-sanity-test.cpp; flang/unittests/Decimal/thorough-test.cpp; flang/unittests/Evaluate/bit-population-count.cpp; flang/unittests/Evaluate/expression.cpp; flang/unittests/Evaluate/folding.cpp; flang/unittests/Evaluate/fp-testing.cpp; flang/unittests/Evaluate/fp-testing.h; flang/unittests/Evaluate/integer.cpp; flang/unittests/Evaluate/intrinsics.cpp; flang/unittests/Evaluate/ISO-Fortran-binding.cpp; flang/unittests/Evaluate/leading-zero-bit-count.cpp; flang/unittests/Evaluate/logical.cpp; flang/unittests/Evaluate/real.cpp; flang/unittests/Evaluate/reshape.cpp; flang/unittests/Evaluate/testing.cpp; flang/unittests/Evaluate/testing.h; flang/unittests/Evaluate/uint128.cpp; flang/unittests/Frontend/CompilerInstanceTest.cpp; flang/unittests/Frontend/FrontendActionTest.cpp; flang/unittests/Optimizer/InternalNamesTest.cpp; flang/unittests/Optimizer/KindMappingTest.cpp; flang/unittests/Optimizer/RTBuilder.cpp; flang/unittests/Optimizer/Builder/CharacterTest.cpp; flang/unittests/Optimize,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:126566,Testability,test,test,126566,/pointer.cpp; flang/runtime/product.cpp; flang/runtime/ragged.cpp; flang/runtime/random.cpp; flang/runtime/reduction-templates.h; flang/runtime/reduction.cpp; flang/runtime/stat.cpp; flang/runtime/stat.h; flang/runtime/stop.cpp; flang/runtime/sum.cpp; flang/runtime/support.cpp; flang/runtime/terminator.cpp; flang/runtime/terminator.h; flang/runtime/time-intrinsic.cpp; flang/runtime/tools.cpp; flang/runtime/tools.h; flang/runtime/transformational.cpp; flang/runtime/type-code.cpp; flang/runtime/type-info.cpp; flang/runtime/type-info.h; flang/runtime/unit-map.cpp; flang/runtime/unit-map.h; flang/runtime/unit.h; flang/tools/bbc/bbc.cpp; flang/tools/f18/dump.cpp; flang/tools/f18-parse-demo/f18-parse-demo.cpp; flang/tools/f18-parse-demo/stub-evaluate.cpp; flang/tools/fir-opt/fir-opt.cpp; flang/tools/flang-driver/driver.cpp; flang/tools/flang-driver/fc1_main.cpp; flang/tools/tco/tco.cpp; flang/unittests/Common/FastIntSetTest.cpp; flang/unittests/Decimal/quick-sanity-test.cpp; flang/unittests/Decimal/thorough-test.cpp; flang/unittests/Evaluate/bit-population-count.cpp; flang/unittests/Evaluate/expression.cpp; flang/unittests/Evaluate/folding.cpp; flang/unittests/Evaluate/fp-testing.cpp; flang/unittests/Evaluate/fp-testing.h; flang/unittests/Evaluate/integer.cpp; flang/unittests/Evaluate/intrinsics.cpp; flang/unittests/Evaluate/ISO-Fortran-binding.cpp; flang/unittests/Evaluate/leading-zero-bit-count.cpp; flang/unittests/Evaluate/logical.cpp; flang/unittests/Evaluate/real.cpp; flang/unittests/Evaluate/reshape.cpp; flang/unittests/Evaluate/testing.cpp; flang/unittests/Evaluate/testing.h; flang/unittests/Evaluate/uint128.cpp; flang/unittests/Frontend/CompilerInstanceTest.cpp; flang/unittests/Frontend/FrontendActionTest.cpp; flang/unittests/Optimizer/InternalNamesTest.cpp; flang/unittests/Optimizer/KindMappingTest.cpp; flang/unittests/Optimizer/RTBuilder.cpp; flang/unittests/Optimizer/Builder/CharacterTest.cpp; flang/unittests/Optimizer/Builder/ComplexTest.cpp; flang/unittests/Op,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:126734,Testability,test,testing,126734,/stat.cpp; flang/runtime/stat.h; flang/runtime/stop.cpp; flang/runtime/sum.cpp; flang/runtime/support.cpp; flang/runtime/terminator.cpp; flang/runtime/terminator.h; flang/runtime/time-intrinsic.cpp; flang/runtime/tools.cpp; flang/runtime/tools.h; flang/runtime/transformational.cpp; flang/runtime/type-code.cpp; flang/runtime/type-info.cpp; flang/runtime/type-info.h; flang/runtime/unit-map.cpp; flang/runtime/unit-map.h; flang/runtime/unit.h; flang/tools/bbc/bbc.cpp; flang/tools/f18/dump.cpp; flang/tools/f18-parse-demo/f18-parse-demo.cpp; flang/tools/f18-parse-demo/stub-evaluate.cpp; flang/tools/fir-opt/fir-opt.cpp; flang/tools/flang-driver/driver.cpp; flang/tools/flang-driver/fc1_main.cpp; flang/tools/tco/tco.cpp; flang/unittests/Common/FastIntSetTest.cpp; flang/unittests/Decimal/quick-sanity-test.cpp; flang/unittests/Decimal/thorough-test.cpp; flang/unittests/Evaluate/bit-population-count.cpp; flang/unittests/Evaluate/expression.cpp; flang/unittests/Evaluate/folding.cpp; flang/unittests/Evaluate/fp-testing.cpp; flang/unittests/Evaluate/fp-testing.h; flang/unittests/Evaluate/integer.cpp; flang/unittests/Evaluate/intrinsics.cpp; flang/unittests/Evaluate/ISO-Fortran-binding.cpp; flang/unittests/Evaluate/leading-zero-bit-count.cpp; flang/unittests/Evaluate/logical.cpp; flang/unittests/Evaluate/real.cpp; flang/unittests/Evaluate/reshape.cpp; flang/unittests/Evaluate/testing.cpp; flang/unittests/Evaluate/testing.h; flang/unittests/Evaluate/uint128.cpp; flang/unittests/Frontend/CompilerInstanceTest.cpp; flang/unittests/Frontend/FrontendActionTest.cpp; flang/unittests/Optimizer/InternalNamesTest.cpp; flang/unittests/Optimizer/KindMappingTest.cpp; flang/unittests/Optimizer/RTBuilder.cpp; flang/unittests/Optimizer/Builder/CharacterTest.cpp; flang/unittests/Optimizer/Builder/ComplexTest.cpp; flang/unittests/Optimizer/Builder/DoLoopHelperTest.cpp; flang/unittests/Optimizer/Builder/FIRBuilderTest.cpp; flang/unittests/Optimizer/Builder/Runtime/AssignTest.cpp; flang/unittests/Optimi,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:126775,Testability,test,testing,126775,ntime/stop.cpp; flang/runtime/sum.cpp; flang/runtime/support.cpp; flang/runtime/terminator.cpp; flang/runtime/terminator.h; flang/runtime/time-intrinsic.cpp; flang/runtime/tools.cpp; flang/runtime/tools.h; flang/runtime/transformational.cpp; flang/runtime/type-code.cpp; flang/runtime/type-info.cpp; flang/runtime/type-info.h; flang/runtime/unit-map.cpp; flang/runtime/unit-map.h; flang/runtime/unit.h; flang/tools/bbc/bbc.cpp; flang/tools/f18/dump.cpp; flang/tools/f18-parse-demo/f18-parse-demo.cpp; flang/tools/f18-parse-demo/stub-evaluate.cpp; flang/tools/fir-opt/fir-opt.cpp; flang/tools/flang-driver/driver.cpp; flang/tools/flang-driver/fc1_main.cpp; flang/tools/tco/tco.cpp; flang/unittests/Common/FastIntSetTest.cpp; flang/unittests/Decimal/quick-sanity-test.cpp; flang/unittests/Decimal/thorough-test.cpp; flang/unittests/Evaluate/bit-population-count.cpp; flang/unittests/Evaluate/expression.cpp; flang/unittests/Evaluate/folding.cpp; flang/unittests/Evaluate/fp-testing.cpp; flang/unittests/Evaluate/fp-testing.h; flang/unittests/Evaluate/integer.cpp; flang/unittests/Evaluate/intrinsics.cpp; flang/unittests/Evaluate/ISO-Fortran-binding.cpp; flang/unittests/Evaluate/leading-zero-bit-count.cpp; flang/unittests/Evaluate/logical.cpp; flang/unittests/Evaluate/real.cpp; flang/unittests/Evaluate/reshape.cpp; flang/unittests/Evaluate/testing.cpp; flang/unittests/Evaluate/testing.h; flang/unittests/Evaluate/uint128.cpp; flang/unittests/Frontend/CompilerInstanceTest.cpp; flang/unittests/Frontend/FrontendActionTest.cpp; flang/unittests/Optimizer/InternalNamesTest.cpp; flang/unittests/Optimizer/KindMappingTest.cpp; flang/unittests/Optimizer/RTBuilder.cpp; flang/unittests/Optimizer/Builder/CharacterTest.cpp; flang/unittests/Optimizer/Builder/ComplexTest.cpp; flang/unittests/Optimizer/Builder/DoLoopHelperTest.cpp; flang/unittests/Optimizer/Builder/FIRBuilderTest.cpp; flang/unittests/Optimizer/Builder/Runtime/AssignTest.cpp; flang/unittests/Optimizer/Builder/Runtime/CharacterTest.cpp; fl,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:126993,Testability,log,logical,126993,transformational.cpp; flang/runtime/type-code.cpp; flang/runtime/type-info.cpp; flang/runtime/type-info.h; flang/runtime/unit-map.cpp; flang/runtime/unit-map.h; flang/runtime/unit.h; flang/tools/bbc/bbc.cpp; flang/tools/f18/dump.cpp; flang/tools/f18-parse-demo/f18-parse-demo.cpp; flang/tools/f18-parse-demo/stub-evaluate.cpp; flang/tools/fir-opt/fir-opt.cpp; flang/tools/flang-driver/driver.cpp; flang/tools/flang-driver/fc1_main.cpp; flang/tools/tco/tco.cpp; flang/unittests/Common/FastIntSetTest.cpp; flang/unittests/Decimal/quick-sanity-test.cpp; flang/unittests/Decimal/thorough-test.cpp; flang/unittests/Evaluate/bit-population-count.cpp; flang/unittests/Evaluate/expression.cpp; flang/unittests/Evaluate/folding.cpp; flang/unittests/Evaluate/fp-testing.cpp; flang/unittests/Evaluate/fp-testing.h; flang/unittests/Evaluate/integer.cpp; flang/unittests/Evaluate/intrinsics.cpp; flang/unittests/Evaluate/ISO-Fortran-binding.cpp; flang/unittests/Evaluate/leading-zero-bit-count.cpp; flang/unittests/Evaluate/logical.cpp; flang/unittests/Evaluate/real.cpp; flang/unittests/Evaluate/reshape.cpp; flang/unittests/Evaluate/testing.cpp; flang/unittests/Evaluate/testing.h; flang/unittests/Evaluate/uint128.cpp; flang/unittests/Frontend/CompilerInstanceTest.cpp; flang/unittests/Frontend/FrontendActionTest.cpp; flang/unittests/Optimizer/InternalNamesTest.cpp; flang/unittests/Optimizer/KindMappingTest.cpp; flang/unittests/Optimizer/RTBuilder.cpp; flang/unittests/Optimizer/Builder/CharacterTest.cpp; flang/unittests/Optimizer/Builder/ComplexTest.cpp; flang/unittests/Optimizer/Builder/DoLoopHelperTest.cpp; flang/unittests/Optimizer/Builder/FIRBuilderTest.cpp; flang/unittests/Optimizer/Builder/Runtime/AssignTest.cpp; flang/unittests/Optimizer/Builder/Runtime/CharacterTest.cpp; flang/unittests/Optimizer/Builder/Runtime/CommandTest.cpp; flang/unittests/Optimizer/Builder/Runtime/DerivedTest.cpp; flang/unittests/Optimizer/Builder/Runtime/NumericTest.cpp; flang/unittests/Optimizer/Builder/Runtime/Ra,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:127104,Testability,test,testing,127104,g/runtime/unit-map.cpp; flang/runtime/unit-map.h; flang/runtime/unit.h; flang/tools/bbc/bbc.cpp; flang/tools/f18/dump.cpp; flang/tools/f18-parse-demo/f18-parse-demo.cpp; flang/tools/f18-parse-demo/stub-evaluate.cpp; flang/tools/fir-opt/fir-opt.cpp; flang/tools/flang-driver/driver.cpp; flang/tools/flang-driver/fc1_main.cpp; flang/tools/tco/tco.cpp; flang/unittests/Common/FastIntSetTest.cpp; flang/unittests/Decimal/quick-sanity-test.cpp; flang/unittests/Decimal/thorough-test.cpp; flang/unittests/Evaluate/bit-population-count.cpp; flang/unittests/Evaluate/expression.cpp; flang/unittests/Evaluate/folding.cpp; flang/unittests/Evaluate/fp-testing.cpp; flang/unittests/Evaluate/fp-testing.h; flang/unittests/Evaluate/integer.cpp; flang/unittests/Evaluate/intrinsics.cpp; flang/unittests/Evaluate/ISO-Fortran-binding.cpp; flang/unittests/Evaluate/leading-zero-bit-count.cpp; flang/unittests/Evaluate/logical.cpp; flang/unittests/Evaluate/real.cpp; flang/unittests/Evaluate/reshape.cpp; flang/unittests/Evaluate/testing.cpp; flang/unittests/Evaluate/testing.h; flang/unittests/Evaluate/uint128.cpp; flang/unittests/Frontend/CompilerInstanceTest.cpp; flang/unittests/Frontend/FrontendActionTest.cpp; flang/unittests/Optimizer/InternalNamesTest.cpp; flang/unittests/Optimizer/KindMappingTest.cpp; flang/unittests/Optimizer/RTBuilder.cpp; flang/unittests/Optimizer/Builder/CharacterTest.cpp; flang/unittests/Optimizer/Builder/ComplexTest.cpp; flang/unittests/Optimizer/Builder/DoLoopHelperTest.cpp; flang/unittests/Optimizer/Builder/FIRBuilderTest.cpp; flang/unittests/Optimizer/Builder/Runtime/AssignTest.cpp; flang/unittests/Optimizer/Builder/Runtime/CharacterTest.cpp; flang/unittests/Optimizer/Builder/Runtime/CommandTest.cpp; flang/unittests/Optimizer/Builder/Runtime/DerivedTest.cpp; flang/unittests/Optimizer/Builder/Runtime/NumericTest.cpp; flang/unittests/Optimizer/Builder/Runtime/RaggedTest.cpp; flang/unittests/Optimizer/Builder/Runtime/ReductionTest.cpp; flang/unittests/Optimizer/Builder/Ru,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:127142,Testability,test,testing,127142,unit-map.h; flang/runtime/unit.h; flang/tools/bbc/bbc.cpp; flang/tools/f18/dump.cpp; flang/tools/f18-parse-demo/f18-parse-demo.cpp; flang/tools/f18-parse-demo/stub-evaluate.cpp; flang/tools/fir-opt/fir-opt.cpp; flang/tools/flang-driver/driver.cpp; flang/tools/flang-driver/fc1_main.cpp; flang/tools/tco/tco.cpp; flang/unittests/Common/FastIntSetTest.cpp; flang/unittests/Decimal/quick-sanity-test.cpp; flang/unittests/Decimal/thorough-test.cpp; flang/unittests/Evaluate/bit-population-count.cpp; flang/unittests/Evaluate/expression.cpp; flang/unittests/Evaluate/folding.cpp; flang/unittests/Evaluate/fp-testing.cpp; flang/unittests/Evaluate/fp-testing.h; flang/unittests/Evaluate/integer.cpp; flang/unittests/Evaluate/intrinsics.cpp; flang/unittests/Evaluate/ISO-Fortran-binding.cpp; flang/unittests/Evaluate/leading-zero-bit-count.cpp; flang/unittests/Evaluate/logical.cpp; flang/unittests/Evaluate/real.cpp; flang/unittests/Evaluate/reshape.cpp; flang/unittests/Evaluate/testing.cpp; flang/unittests/Evaluate/testing.h; flang/unittests/Evaluate/uint128.cpp; flang/unittests/Frontend/CompilerInstanceTest.cpp; flang/unittests/Frontend/FrontendActionTest.cpp; flang/unittests/Optimizer/InternalNamesTest.cpp; flang/unittests/Optimizer/KindMappingTest.cpp; flang/unittests/Optimizer/RTBuilder.cpp; flang/unittests/Optimizer/Builder/CharacterTest.cpp; flang/unittests/Optimizer/Builder/ComplexTest.cpp; flang/unittests/Optimizer/Builder/DoLoopHelperTest.cpp; flang/unittests/Optimizer/Builder/FIRBuilderTest.cpp; flang/unittests/Optimizer/Builder/Runtime/AssignTest.cpp; flang/unittests/Optimizer/Builder/Runtime/CharacterTest.cpp; flang/unittests/Optimizer/Builder/Runtime/CommandTest.cpp; flang/unittests/Optimizer/Builder/Runtime/DerivedTest.cpp; flang/unittests/Optimizer/Builder/Runtime/NumericTest.cpp; flang/unittests/Optimizer/Builder/Runtime/RaggedTest.cpp; flang/unittests/Optimizer/Builder/Runtime/ReductionTest.cpp; flang/unittests/Optimizer/Builder/Runtime/RuntimeCallTestBase.h; flang/uni,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129168,Testability,benchmark,benchmarks,129168,.cpp; flang/unittests/Optimizer/Builder/Runtime/TransformationalTest.cpp; flang/unittests/Runtime/BufferTest.cpp; flang/unittests/Runtime/CharacterTest.cpp; flang/unittests/Runtime/CommandTest.cpp; flang/unittests/Runtime/CrashHandlerFixture.cpp; flang/unittests/Runtime/CrashHandlerFixture.h; flang/unittests/Runtime/ExternalIOTest.cpp; flang/unittests/Runtime/Format.cpp; flang/unittests/Runtime/Inquiry.cpp; flang/unittests/Runtime/ListInputTest.cpp; flang/unittests/Runtime/Matmul.cpp; flang/unittests/Runtime/MiscIntrinsic.cpp; flang/unittests/Runtime/Namelist.cpp; flang/unittests/Runtime/Numeric.cpp; flang/unittests/Runtime/NumericalFormatTest.cpp; flang/unittests/Runtime/Ragged.cpp; flang/unittests/Runtime/Random.cpp; flang/unittests/Runtime/Reduction.cpp; flang/unittests/Runtime/RuntimeCrashTest.cpp; flang/unittests/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAn,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129194,Testability,benchmark,benchmarks,129194,imizer/Builder/Runtime/TransformationalTest.cpp; flang/unittests/Runtime/BufferTest.cpp; flang/unittests/Runtime/CharacterTest.cpp; flang/unittests/Runtime/CommandTest.cpp; flang/unittests/Runtime/CrashHandlerFixture.cpp; flang/unittests/Runtime/CrashHandlerFixture.h; flang/unittests/Runtime/ExternalIOTest.cpp; flang/unittests/Runtime/Format.cpp; flang/unittests/Runtime/Inquiry.cpp; flang/unittests/Runtime/ListInputTest.cpp; flang/unittests/Runtime/Matmul.cpp; flang/unittests/Runtime/MiscIntrinsic.cpp; flang/unittests/Runtime/Namelist.cpp; flang/unittests/Runtime/Numeric.cpp; flang/unittests/Runtime/NumericalFormatTest.cpp; flang/unittests/Runtime/Ragged.cpp; flang/unittests/Runtime/Random.cpp; flang/unittests/Runtime/Reduction.cpp; flang/unittests/Runtime/RuntimeCrashTest.cpp; flang/unittests/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmar,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129218,Testability,benchmark,benchmarks,129218,ormationalTest.cpp; flang/unittests/Runtime/BufferTest.cpp; flang/unittests/Runtime/CharacterTest.cpp; flang/unittests/Runtime/CommandTest.cpp; flang/unittests/Runtime/CrashHandlerFixture.cpp; flang/unittests/Runtime/CrashHandlerFixture.h; flang/unittests/Runtime/ExternalIOTest.cpp; flang/unittests/Runtime/Format.cpp; flang/unittests/Runtime/Inquiry.cpp; flang/unittests/Runtime/ListInputTest.cpp; flang/unittests/Runtime/Matmul.cpp; flang/unittests/Runtime/MiscIntrinsic.cpp; flang/unittests/Runtime/Namelist.cpp; flang/unittests/Runtime/Numeric.cpp; flang/unittests/Runtime/NumericalFormatTest.cpp; flang/unittests/Runtime/Ragged.cpp; flang/unittests/Runtime/Random.cpp; flang/unittests/Runtime/Reduction.cpp; flang/unittests/Runtime/RuntimeCrashTest.cpp; flang/unittests/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyz,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129253,Testability,benchmark,benchmarks,129253,s/Runtime/BufferTest.cpp; flang/unittests/Runtime/CharacterTest.cpp; flang/unittests/Runtime/CommandTest.cpp; flang/unittests/Runtime/CrashHandlerFixture.cpp; flang/unittests/Runtime/CrashHandlerFixture.h; flang/unittests/Runtime/ExternalIOTest.cpp; flang/unittests/Runtime/Format.cpp; flang/unittests/Runtime/Inquiry.cpp; flang/unittests/Runtime/ListInputTest.cpp; flang/unittests/Runtime/Matmul.cpp; flang/unittests/Runtime/MiscIntrinsic.cpp; flang/unittests/Runtime/Namelist.cpp; flang/unittests/Runtime/Numeric.cpp; flang/unittests/Runtime/NumericalFormatTest.cpp; flang/unittests/Runtime/Ragged.cpp; flang/unittests/Runtime/Random.cpp; flang/unittests/Runtime/Reduction.cpp; flang/unittests/Runtime/RuntimeCrashTest.cpp; flang/unittests/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/autome,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129286,Testability,benchmark,benchmarks,129286,tests/Runtime/CharacterTest.cpp; flang/unittests/Runtime/CommandTest.cpp; flang/unittests/Runtime/CrashHandlerFixture.cpp; flang/unittests/Runtime/CrashHandlerFixture.h; flang/unittests/Runtime/ExternalIOTest.cpp; flang/unittests/Runtime/Format.cpp; flang/unittests/Runtime/Inquiry.cpp; flang/unittests/Runtime/ListInputTest.cpp; flang/unittests/Runtime/Matmul.cpp; flang/unittests/Runtime/MiscIntrinsic.cpp; flang/unittests/Runtime/Namelist.cpp; flang/unittests/Runtime/Numeric.cpp; flang/unittests/Runtime/NumericalFormatTest.cpp; flang/unittests/Runtime/Ragged.cpp; flang/unittests/Runtime/Random.cpp; flang/unittests/Runtime/Reduction.cpp; flang/unittests/Runtime/RuntimeCrashTest.cpp; flang/unittests/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129325,Testability,benchmark,benchmarks,129325,tests/Runtime/CommandTest.cpp; flang/unittests/Runtime/CrashHandlerFixture.cpp; flang/unittests/Runtime/CrashHandlerFixture.h; flang/unittests/Runtime/ExternalIOTest.cpp; flang/unittests/Runtime/Format.cpp; flang/unittests/Runtime/Inquiry.cpp; flang/unittests/Runtime/ListInputTest.cpp; flang/unittests/Runtime/Matmul.cpp; flang/unittests/Runtime/MiscIntrinsic.cpp; flang/unittests/Runtime/Namelist.cpp; flang/unittests/Runtime/Numeric.cpp; flang/unittests/Runtime/NumericalFormatTest.cpp; flang/unittests/Runtime/Ragged.cpp; flang/unittests/Runtime/Random.cpp; flang/unittests/Runtime/Reduction.cpp; flang/unittests/Runtime/RuntimeCrashTest.cpp; flang/unittests/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAna,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129373,Testability,benchmark,benchmarks,129373,/Runtime/CrashHandlerFixture.cpp; flang/unittests/Runtime/CrashHandlerFixture.h; flang/unittests/Runtime/ExternalIOTest.cpp; flang/unittests/Runtime/Format.cpp; flang/unittests/Runtime/Inquiry.cpp; flang/unittests/Runtime/ListInputTest.cpp; flang/unittests/Runtime/Matmul.cpp; flang/unittests/Runtime/MiscIntrinsic.cpp; flang/unittests/Runtime/Namelist.cpp; flang/unittests/Runtime/Numeric.cpp; flang/unittests/Runtime/NumericalFormatTest.cpp; flang/unittests/Runtime/Ragged.cpp; flang/unittests/Runtime/Random.cpp; flang/unittests/Runtime/Reduction.cpp; flang/unittests/Runtime/RuntimeCrashTest.cpp; flang/unittests/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAnalyzerTest.cpp; libc/config/linux/app.h; libc/f,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129415,Testability,benchmark,benchmarks,129415,nittests/Runtime/CrashHandlerFixture.h; flang/unittests/Runtime/ExternalIOTest.cpp; flang/unittests/Runtime/Format.cpp; flang/unittests/Runtime/Inquiry.cpp; flang/unittests/Runtime/ListInputTest.cpp; flang/unittests/Runtime/Matmul.cpp; flang/unittests/Runtime/MiscIntrinsic.cpp; flang/unittests/Runtime/Namelist.cpp; flang/unittests/Runtime/Numeric.cpp; flang/unittests/Runtime/NumericalFormatTest.cpp; flang/unittests/Runtime/Ragged.cpp; flang/unittests/Runtime/Random.cpp; flang/unittests/Runtime/Reduction.cpp; flang/unittests/Runtime/RuntimeCrashTest.cpp; flang/unittests/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAnalyzerTest.cpp; libc/config/linux/app.h; libc/fuzzing/math/Compare.h; libc/fuzzing/math/m,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129456,Testability,benchmark,benchmarks,129456,flang/unittests/Runtime/ExternalIOTest.cpp; flang/unittests/Runtime/Format.cpp; flang/unittests/Runtime/Inquiry.cpp; flang/unittests/Runtime/ListInputTest.cpp; flang/unittests/Runtime/Matmul.cpp; flang/unittests/Runtime/MiscIntrinsic.cpp; flang/unittests/Runtime/Namelist.cpp; flang/unittests/Runtime/Numeric.cpp; flang/unittests/Runtime/NumericalFormatTest.cpp; flang/unittests/Runtime/Ragged.cpp; flang/unittests/Runtime/Random.cpp; flang/unittests/Runtime/Reduction.cpp; flang/unittests/Runtime/RuntimeCrashTest.cpp; flang/unittests/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAnalyzerTest.cpp; libc/config/linux/app.h; libc/fuzzing/math/Compare.h; libc/fuzzing/math/math_differential_fuzz.cpp; libc/fuzzing/,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129495,Testability,benchmark,benchmarks,129495,; flang/unittests/Runtime/Format.cpp; flang/unittests/Runtime/Inquiry.cpp; flang/unittests/Runtime/ListInputTest.cpp; flang/unittests/Runtime/Matmul.cpp; flang/unittests/Runtime/MiscIntrinsic.cpp; flang/unittests/Runtime/Namelist.cpp; flang/unittests/Runtime/Numeric.cpp; flang/unittests/Runtime/NumericalFormatTest.cpp; flang/unittests/Runtime/Ragged.cpp; flang/unittests/Runtime/Random.cpp; flang/unittests/Runtime/Reduction.cpp; flang/unittests/Runtime/RuntimeCrashTest.cpp; flang/unittests/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAnalyzerTest.cpp; libc/config/linux/app.h; libc/fuzzing/math/Compare.h; libc/fuzzing/math/math_differential_fuzz.cpp; libc/fuzzing/math/nextafter_differential_fuzz.cpp; libc,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129540,Testability,benchmark,benchmarks,129540,unittests/Runtime/Inquiry.cpp; flang/unittests/Runtime/ListInputTest.cpp; flang/unittests/Runtime/Matmul.cpp; flang/unittests/Runtime/MiscIntrinsic.cpp; flang/unittests/Runtime/Namelist.cpp; flang/unittests/Runtime/Numeric.cpp; flang/unittests/Runtime/NumericalFormatTest.cpp; flang/unittests/Runtime/Ragged.cpp; flang/unittests/Runtime/Random.cpp; flang/unittests/Runtime/Reduction.cpp; flang/unittests/Runtime/RuntimeCrashTest.cpp; flang/unittests/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAnalyzerTest.cpp; libc/config/linux/app.h; libc/fuzzing/math/Compare.h; libc/fuzzing/math/math_differential_fuzz.cpp; libc/fuzzing/math/nextafter_differential_fuzz.cpp; libc/fuzzing/math/RemQuoDiff.h; libc/fuzzing/mat,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129585,Testability,benchmark,benchmarks,129585,untime/ListInputTest.cpp; flang/unittests/Runtime/Matmul.cpp; flang/unittests/Runtime/MiscIntrinsic.cpp; flang/unittests/Runtime/Namelist.cpp; flang/unittests/Runtime/Numeric.cpp; flang/unittests/Runtime/NumericalFormatTest.cpp; flang/unittests/Runtime/Ragged.cpp; flang/unittests/Runtime/Random.cpp; flang/unittests/Runtime/Reduction.cpp; flang/unittests/Runtime/RuntimeCrashTest.cpp; flang/unittests/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAnalyzerTest.cpp; libc/config/linux/app.h; libc/fuzzing/math/Compare.h; libc/fuzzing/math/math_differential_fuzz.cpp; libc/fuzzing/math/nextafter_differential_fuzz.cpp; libc/fuzzing/math/RemQuoDiff.h; libc/fuzzing/math/SingleInputSingleOutputDiff.h; libc/fuzzing/ma,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129636,Testability,benchmark,benchmarks,129636,e/Matmul.cpp; flang/unittests/Runtime/MiscIntrinsic.cpp; flang/unittests/Runtime/Namelist.cpp; flang/unittests/Runtime/Numeric.cpp; flang/unittests/Runtime/NumericalFormatTest.cpp; flang/unittests/Runtime/Ragged.cpp; flang/unittests/Runtime/Random.cpp; flang/unittests/Runtime/Reduction.cpp; flang/unittests/Runtime/RuntimeCrashTest.cpp; flang/unittests/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAnalyzerTest.cpp; libc/config/linux/app.h; libc/fuzzing/math/Compare.h; libc/fuzzing/math/math_differential_fuzz.cpp; libc/fuzzing/math/nextafter_differential_fuzz.cpp; libc/fuzzing/math/RemQuoDiff.h; libc/fuzzing/math/SingleInputSingleOutputDiff.h; libc/fuzzing/math/TwoInputSingleOutputDiff.h; libc/fuzzing/stdl,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129681,Testability,benchmark,benchmarks,129681,rinsic.cpp; flang/unittests/Runtime/Namelist.cpp; flang/unittests/Runtime/Numeric.cpp; flang/unittests/Runtime/NumericalFormatTest.cpp; flang/unittests/Runtime/Ragged.cpp; flang/unittests/Runtime/Random.cpp; flang/unittests/Runtime/Reduction.cpp; flang/unittests/Runtime/RuntimeCrashTest.cpp; flang/unittests/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAnalyzerTest.cpp; libc/config/linux/app.h; libc/fuzzing/math/Compare.h; libc/fuzzing/math/math_differential_fuzz.cpp; libc/fuzzing/math/nextafter_differential_fuzz.cpp; libc/fuzzing/math/RemQuoDiff.h; libc/fuzzing/math/SingleInputSingleOutputDiff.h; libc/fuzzing/math/TwoInputSingleOutputDiff.h; libc/fuzzing/stdlib/atof_differential_fuzz.cpp; libc/fuzzing/s,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129724,Testability,benchmark,benchmarks,129724,lang/unittests/Runtime/Numeric.cpp; flang/unittests/Runtime/NumericalFormatTest.cpp; flang/unittests/Runtime/Ragged.cpp; flang/unittests/Runtime/Random.cpp; flang/unittests/Runtime/Reduction.cpp; flang/unittests/Runtime/RuntimeCrashTest.cpp; flang/unittests/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAnalyzerTest.cpp; libc/config/linux/app.h; libc/fuzzing/math/Compare.h; libc/fuzzing/math/math_differential_fuzz.cpp; libc/fuzzing/math/nextafter_differential_fuzz.cpp; libc/fuzzing/math/RemQuoDiff.h; libc/fuzzing/math/SingleInputSingleOutputDiff.h; libc/fuzzing/math/TwoInputSingleOutputDiff.h; libc/fuzzing/stdlib/atof_differential_fuzz.cpp; libc/fuzzing/stdlib/qsort_fuzz.cpp; libc/fuzzing/stdlib/StringPar,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129781,Testability,benchmark,benchmarks,129781,ericalFormatTest.cpp; flang/unittests/Runtime/Ragged.cpp; flang/unittests/Runtime/Random.cpp; flang/unittests/Runtime/Reduction.cpp; flang/unittests/Runtime/RuntimeCrashTest.cpp; flang/unittests/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAnalyzerTest.cpp; libc/config/linux/app.h; libc/fuzzing/math/Compare.h; libc/fuzzing/math/math_differential_fuzz.cpp; libc/fuzzing/math/nextafter_differential_fuzz.cpp; libc/fuzzing/math/RemQuoDiff.h; libc/fuzzing/math/SingleInputSingleOutputDiff.h; libc/fuzzing/math/TwoInputSingleOutputDiff.h; libc/fuzzing/stdlib/atof_differential_fuzz.cpp; libc/fuzzing/stdlib/qsort_fuzz.cpp; libc/fuzzing/stdlib/StringParserOutputDiff.h; libc/fuzzing/string/strcmp_fuzz.cpp; libc/fuz,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129849,Testability,benchmark,benchmarks,129849,sts/Runtime/Random.cpp; flang/unittests/Runtime/Reduction.cpp; flang/unittests/Runtime/RuntimeCrashTest.cpp; flang/unittests/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAnalyzerTest.cpp; libc/config/linux/app.h; libc/fuzzing/math/Compare.h; libc/fuzzing/math/math_differential_fuzz.cpp; libc/fuzzing/math/nextafter_differential_fuzz.cpp; libc/fuzzing/math/RemQuoDiff.h; libc/fuzzing/math/SingleInputSingleOutputDiff.h; libc/fuzzing/math/TwoInputSingleOutputDiff.h; libc/fuzzing/stdlib/atof_differential_fuzz.cpp; libc/fuzzing/stdlib/qsort_fuzz.cpp; libc/fuzzing/stdlib/StringParserOutputDiff.h; libc/fuzzing/string/strcmp_fuzz.cpp; libc/fuzzing/string/strstr_fuzz.cpp; libc/include/__llvm-libc-common.h; libc/in,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129922,Testability,benchmark,benchmarks,129922,unittests/Runtime/RuntimeCrashTest.cpp; flang/unittests/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAnalyzerTest.cpp; libc/config/linux/app.h; libc/fuzzing/math/Compare.h; libc/fuzzing/math/math_differential_fuzz.cpp; libc/fuzzing/math/nextafter_differential_fuzz.cpp; libc/fuzzing/math/RemQuoDiff.h; libc/fuzzing/math/SingleInputSingleOutputDiff.h; libc/fuzzing/math/TwoInputSingleOutputDiff.h; libc/fuzzing/stdlib/atof_differential_fuzz.cpp; libc/fuzzing/stdlib/qsort_fuzz.cpp; libc/fuzzing/stdlib/StringParserOutputDiff.h; libc/fuzzing/string/strcmp_fuzz.cpp; libc/fuzzing/string/strstr_fuzz.cpp; libc/include/__llvm-libc-common.h; libc/include/llvm-libc-macros/fcntl-macros.h; libc/include/llvm-libc-macros,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129986,Testability,benchmark,benchmarks,129986,ts/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAnalyzerTest.cpp; libc/config/linux/app.h; libc/fuzzing/math/Compare.h; libc/fuzzing/math/math_differential_fuzz.cpp; libc/fuzzing/math/nextafter_differential_fuzz.cpp; libc/fuzzing/math/RemQuoDiff.h; libc/fuzzing/math/SingleInputSingleOutputDiff.h; libc/fuzzing/math/TwoInputSingleOutputDiff.h; libc/fuzzing/stdlib/atof_differential_fuzz.cpp; libc/fuzzing/stdlib/qsort_fuzz.cpp; libc/fuzzing/stdlib/StringParserOutputDiff.h; libc/fuzzing/string/strcmp_fuzz.cpp; libc/fuzzing/string/strstr_fuzz.cpp; libc/include/__llvm-libc-common.h; libc/include/llvm-libc-macros/fcntl-macros.h; libc/include/llvm-libc-macros/stdio-macros.h; libc/include/llvm-libc-macros/linux/,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:130030,Testability,benchmark,benchmarks,130030,Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAnalyzerTest.cpp; libc/config/linux/app.h; libc/fuzzing/math/Compare.h; libc/fuzzing/math/math_differential_fuzz.cpp; libc/fuzzing/math/nextafter_differential_fuzz.cpp; libc/fuzzing/math/RemQuoDiff.h; libc/fuzzing/math/SingleInputSingleOutputDiff.h; libc/fuzzing/math/TwoInputSingleOutputDiff.h; libc/fuzzing/stdlib/atof_differential_fuzz.cpp; libc/fuzzing/stdlib/qsort_fuzz.cpp; libc/fuzzing/stdlib/StringParserOutputDiff.h; libc/fuzzing/string/strcmp_fuzz.cpp; libc/fuzzing/string/strstr_fuzz.cpp; libc/include/__llvm-libc-common.h; libc/include/llvm-libc-macros/fcntl-macros.h; libc/include/llvm-libc-macros/stdio-macros.h; libc/include/llvm-libc-macros/linux/fcntl-macros.h; libc/include/llvm-libc-types/,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:130078,Testability,benchmark,benchmarks,130078,ests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAnalyzerTest.cpp; libc/config/linux/app.h; libc/fuzzing/math/Compare.h; libc/fuzzing/math/math_differential_fuzz.cpp; libc/fuzzing/math/nextafter_differential_fuzz.cpp; libc/fuzzing/math/RemQuoDiff.h; libc/fuzzing/math/SingleInputSingleOutputDiff.h; libc/fuzzing/math/TwoInputSingleOutputDiff.h; libc/fuzzing/stdlib/atof_differential_fuzz.cpp; libc/fuzzing/stdlib/qsort_fuzz.cpp; libc/fuzzing/stdlib/StringParserOutputDiff.h; libc/fuzzing/string/strcmp_fuzz.cpp; libc/fuzzing/string/strstr_fuzz.cpp; libc/include/__llvm-libc-common.h; libc/include/llvm-libc-macros/fcntl-macros.h; libc/include/llvm-libc-macros/stdio-macros.h; libc/include/llvm-libc-macros/linux/fcntl-macros.h; libc/include/llvm-libc-types/cnd_t.h; libc/include/llvm-libc-types/div_t.h; libc/in,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:130138,Testability,benchmark,benchmarks,130138,/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAnalyzerTest.cpp; libc/config/linux/app.h; libc/fuzzing/math/Compare.h; libc/fuzzing/math/math_differential_fuzz.cpp; libc/fuzzing/math/nextafter_differential_fuzz.cpp; libc/fuzzing/math/RemQuoDiff.h; libc/fuzzing/math/SingleInputSingleOutputDiff.h; libc/fuzzing/math/TwoInputSingleOutputDiff.h; libc/fuzzing/stdlib/atof_differential_fuzz.cpp; libc/fuzzing/stdlib/qsort_fuzz.cpp; libc/fuzzing/stdlib/StringParserOutputDiff.h; libc/fuzzing/string/strcmp_fuzz.cpp; libc/fuzzing/string/strstr_fuzz.cpp; libc/include/__llvm-libc-common.h; libc/include/llvm-libc-macros/fcntl-macros.h; libc/include/llvm-libc-macros/stdio-macros.h; libc/include/llvm-libc-macros/linux/fcntl-macros.h; libc/include/llvm-libc-types/cnd_t.h; libc/include/llvm-libc-types/div_t.h; libc/include/llvm-libc-types/double_t.h; libc/include/llvm-libc,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:130189,Testability,benchmark,benchmarks,130189,SON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAnalyzerTest.cpp; libc/config/linux/app.h; libc/fuzzing/math/Compare.h; libc/fuzzing/math/math_differential_fuzz.cpp; libc/fuzzing/math/nextafter_differential_fuzz.cpp; libc/fuzzing/math/RemQuoDiff.h; libc/fuzzing/math/SingleInputSingleOutputDiff.h; libc/fuzzing/math/TwoInputSingleOutputDiff.h; libc/fuzzing/stdlib/atof_differential_fuzz.cpp; libc/fuzzing/stdlib/qsort_fuzz.cpp; libc/fuzzing/stdlib/StringParserOutputDiff.h; libc/fuzzing/string/strcmp_fuzz.cpp; libc/fuzzing/string/strstr_fuzz.cpp; libc/include/__llvm-libc-common.h; libc/include/llvm-libc-macros/fcntl-macros.h; libc/include/llvm-libc-macros/stdio-macros.h; libc/include/llvm-libc-macros/linux/fcntl-macros.h; libc/include/llvm-libc-types/cnd_t.h; libc/include/llvm-libc-types/div_t.h; libc/include/llvm-libc-types/double_t.h; libc/include/llvm-libc-types/fenv_t.h; libc/include/llvm-libc-types/fexcept,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:130244,Testability,benchmark,benchmarks,130244,ks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAnalyzerTest.cpp; libc/config/linux/app.h; libc/fuzzing/math/Compare.h; libc/fuzzing/math/math_differential_fuzz.cpp; libc/fuzzing/math/nextafter_differential_fuzz.cpp; libc/fuzzing/math/RemQuoDiff.h; libc/fuzzing/math/SingleInputSingleOutputDiff.h; libc/fuzzing/math/TwoInputSingleOutputDiff.h; libc/fuzzing/stdlib/atof_differential_fuzz.cpp; libc/fuzzing/stdlib/qsort_fuzz.cpp; libc/fuzzing/stdlib/StringParserOutputDiff.h; libc/fuzzing/string/strcmp_fuzz.cpp; libc/fuzzing/string/strstr_fuzz.cpp; libc/include/__llvm-libc-common.h; libc/include/llvm-libc-macros/fcntl-macros.h; libc/include/llvm-libc-macros/stdio-macros.h; libc/include/llvm-libc-macros/linux/fcntl-macros.h; libc/include/llvm-libc-types/cnd_t.h; libc/include/llvm-libc-types/div_t.h; libc/include/llvm-libc-types/double_t.h; libc/include/llvm-libc-types/fenv_t.h; libc/include/llvm-libc-types/fexcept_t.h; libc/include/llvm-libc-types/FILE.h; libc/includ,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:130298,Testability,benchmark,benchmarks,130298,; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAnalyzerTest.cpp; libc/config/linux/app.h; libc/fuzzing/math/Compare.h; libc/fuzzing/math/math_differential_fuzz.cpp; libc/fuzzing/math/nextafter_differential_fuzz.cpp; libc/fuzzing/math/RemQuoDiff.h; libc/fuzzing/math/SingleInputSingleOutputDiff.h; libc/fuzzing/math/TwoInputSingleOutputDiff.h; libc/fuzzing/stdlib/atof_differential_fuzz.cpp; libc/fuzzing/stdlib/qsort_fuzz.cpp; libc/fuzzing/stdlib/StringParserOutputDiff.h; libc/fuzzing/string/strcmp_fuzz.cpp; libc/fuzzing/string/strstr_fuzz.cpp; libc/include/__llvm-libc-common.h; libc/include/llvm-libc-macros/fcntl-macros.h; libc/include/llvm-libc-macros/stdio-macros.h; libc/include/llvm-libc-macros/linux/fcntl-macros.h; libc/include/llvm-libc-types/cnd_t.h; libc/include/llvm-libc-types/div_t.h; libc/include/llvm-libc-types/double_t.h; libc/include/llvm-libc-types/fenv_t.h; libc/include/llvm-libc-types/fexcept_t.h; libc/include/llvm-libc-types/FILE.h; libc/include/llvm-libc-types/float_t.h; libc/include/llvm-libc-types/,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:132321,Testability,assert,assert,132321,iv_t.h; libc/include/llvm-libc-types/jmp_buf.h; libc/include/llvm-libc-types/ldiv_t.h; libc/include/llvm-libc-types/lldiv_t.h; libc/include/llvm-libc-types/mode_t.h; libc/include/llvm-libc-types/mtx_t.h; libc/include/llvm-libc-types/off_t.h; libc/include/llvm-libc-types/once_flag.h; libc/include/llvm-libc-types/size_t.h; libc/include/llvm-libc-types/ssize_t.h; libc/include/llvm-libc-types/struct_sigaction.h; libc/include/llvm-libc-types/struct_tm.h; libc/include/llvm-libc-types/thrd_start_t.h; libc/include/llvm-libc-types/thrd_t.h; libc/include/llvm-libc-types/time_t.h; libc/include/llvm-libc-types/__atexithandler_t.h; libc/include/llvm-libc-types/__bsearchcompare_t.h; libc/include/llvm-libc-types/__call_once_func_t.h; libc/include/llvm-libc-types/__futex_word.h; libc/include/llvm-libc-types/__mutex_type.h; libc/include/llvm-libc-types/__qsortcompare_t.h; libc/include/llvm-libc-types/__sighandler_t.h; libc/loader/linux/aarch64/start.cpp; libc/loader/linux/x86_64/start.cpp; libc/src/assert/__assert_fail.h; libc/src/ctype/isalnum.cpp; libc/src/ctype/isalnum.h; libc/src/ctype/isalpha.cpp; libc/src/ctype/isalpha.h; libc/src/ctype/isascii.cpp; libc/src/ctype/isascii.h; libc/src/ctype/isblank.cpp; libc/src/ctype/isblank.h; libc/src/ctype/iscntrl.cpp; libc/src/ctype/iscntrl.h; libc/src/ctype/isdigit.cpp; libc/src/ctype/isdigit.h; libc/src/ctype/isgraph.cpp; libc/src/ctype/isgraph.h; libc/src/ctype/islower.cpp; libc/src/ctype/islower.h; libc/src/ctype/isprint.cpp; libc/src/ctype/isprint.h; libc/src/ctype/ispunct.cpp; libc/src/ctype/ispunct.h; libc/src/ctype/isspace.cpp; libc/src/ctype/isspace.h; libc/src/ctype/isupper.cpp; libc/src/ctype/isupper.h; libc/src/ctype/isxdigit.cpp; libc/src/ctype/isxdigit.h; libc/src/ctype/toascii.cpp; libc/src/ctype/toascii.h; libc/src/ctype/tolower.cpp; libc/src/ctype/tolower.h; libc/src/ctype/toupper.cpp; libc/src/ctype/toupper.h; libc/src/errno/dummy_errno.cpp; libc/src/errno/dummy_errno.h; libc/src/errno/errno.cpp; libc/src/errno/llvmlibc_er,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:135743,Testability,log,logb,135743,cosf.h; libc/src/math/exp2f.h; libc/src/math/expf.h; libc/src/math/expm1f.h; libc/src/math/fabs.h; libc/src/math/fabsf.h; libc/src/math/fabsl.h; libc/src/math/fdim.h; libc/src/math/fdimf.h; libc/src/math/fdiml.h; libc/src/math/floor.h; libc/src/math/floorf.h; libc/src/math/floorl.h; libc/src/math/fma.cpp; libc/src/math/fma.h; libc/src/math/fmaf.cpp; libc/src/math/fmaf.h; libc/src/math/fmax.h; libc/src/math/fmaxf.h; libc/src/math/fmaxl.h; libc/src/math/fmin.h; libc/src/math/fminf.h; libc/src/math/fminl.h; libc/src/math/frexp.h; libc/src/math/frexpf.h; libc/src/math/frexpl.h; libc/src/math/hypot.h; libc/src/math/hypotf.h; libc/src/math/ilogb.h; libc/src/math/ilogbf.h; libc/src/math/ilogbl.h; libc/src/math/ldexp.h; libc/src/math/ldexpf.h; libc/src/math/ldexpl.h; libc/src/math/llrint.h; libc/src/math/llrintf.h; libc/src/math/llrintl.h; libc/src/math/llround.h; libc/src/math/llroundf.h; libc/src/math/llroundl.h; libc/src/math/log10f.h; libc/src/math/log1pf.h; libc/src/math/log2f.h; libc/src/math/logb.h; libc/src/math/logbf.h; libc/src/math/logbl.h; libc/src/math/logf.h; libc/src/math/lrint.h; libc/src/math/lrintf.h; libc/src/math/lrintl.h; libc/src/math/lround.h; libc/src/math/lroundf.h; libc/src/math/lroundl.h; libc/src/math/modf.h; libc/src/math/modff.h; libc/src/math/modfl.h; libc/src/math/nearbyint.h; libc/src/math/nearbyintf.h; libc/src/math/nearbyintl.h; libc/src/math/nextafter.h; libc/src/math/nextafterf.h; libc/src/math/nextafterl.h; libc/src/math/remainder.h; libc/src/math/remainderf.h; libc/src/math/remainderl.h; libc/src/math/remquo.h; libc/src/math/remquof.h; libc/src/math/remquol.h; libc/src/math/rint.h; libc/src/math/rintf.h; libc/src/math/rintl.h; libc/src/math/round.h; libc/src/math/roundf.h; libc/src/math/roundl.h; libc/src/math/sin.h; libc/src/math/sincosf.h; libc/src/math/sinf.h; libc/src/math/sqrt.h; libc/src/math/sqrtf.h; libc/src/math/sqrtl.h; libc/src/math/tan.h; libc/src/math/trunc.h; libc/src/math/truncf.h; libc/src/math/truncl.h; libc/src/math/a,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:135765,Testability,log,logbf,135765,exp2f.h; libc/src/math/expf.h; libc/src/math/expm1f.h; libc/src/math/fabs.h; libc/src/math/fabsf.h; libc/src/math/fabsl.h; libc/src/math/fdim.h; libc/src/math/fdimf.h; libc/src/math/fdiml.h; libc/src/math/floor.h; libc/src/math/floorf.h; libc/src/math/floorl.h; libc/src/math/fma.cpp; libc/src/math/fma.h; libc/src/math/fmaf.cpp; libc/src/math/fmaf.h; libc/src/math/fmax.h; libc/src/math/fmaxf.h; libc/src/math/fmaxl.h; libc/src/math/fmin.h; libc/src/math/fminf.h; libc/src/math/fminl.h; libc/src/math/frexp.h; libc/src/math/frexpf.h; libc/src/math/frexpl.h; libc/src/math/hypot.h; libc/src/math/hypotf.h; libc/src/math/ilogb.h; libc/src/math/ilogbf.h; libc/src/math/ilogbl.h; libc/src/math/ldexp.h; libc/src/math/ldexpf.h; libc/src/math/ldexpl.h; libc/src/math/llrint.h; libc/src/math/llrintf.h; libc/src/math/llrintl.h; libc/src/math/llround.h; libc/src/math/llroundf.h; libc/src/math/llroundl.h; libc/src/math/log10f.h; libc/src/math/log1pf.h; libc/src/math/log2f.h; libc/src/math/logb.h; libc/src/math/logbf.h; libc/src/math/logbl.h; libc/src/math/logf.h; libc/src/math/lrint.h; libc/src/math/lrintf.h; libc/src/math/lrintl.h; libc/src/math/lround.h; libc/src/math/lroundf.h; libc/src/math/lroundl.h; libc/src/math/modf.h; libc/src/math/modff.h; libc/src/math/modfl.h; libc/src/math/nearbyint.h; libc/src/math/nearbyintf.h; libc/src/math/nearbyintl.h; libc/src/math/nextafter.h; libc/src/math/nextafterf.h; libc/src/math/nextafterl.h; libc/src/math/remainder.h; libc/src/math/remainderf.h; libc/src/math/remainderl.h; libc/src/math/remquo.h; libc/src/math/remquof.h; libc/src/math/remquol.h; libc/src/math/rint.h; libc/src/math/rintf.h; libc/src/math/rintl.h; libc/src/math/round.h; libc/src/math/roundf.h; libc/src/math/roundl.h; libc/src/math/sin.h; libc/src/math/sincosf.h; libc/src/math/sinf.h; libc/src/math/sqrt.h; libc/src/math/sqrtf.h; libc/src/math/sqrtl.h; libc/src/math/tan.h; libc/src/math/trunc.h; libc/src/math/truncf.h; libc/src/math/truncl.h; libc/src/math/aarch64/ceil.cpp; libc/s,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:135788,Testability,log,logbl,135788,expf.h; libc/src/math/expm1f.h; libc/src/math/fabs.h; libc/src/math/fabsf.h; libc/src/math/fabsl.h; libc/src/math/fdim.h; libc/src/math/fdimf.h; libc/src/math/fdiml.h; libc/src/math/floor.h; libc/src/math/floorf.h; libc/src/math/floorl.h; libc/src/math/fma.cpp; libc/src/math/fma.h; libc/src/math/fmaf.cpp; libc/src/math/fmaf.h; libc/src/math/fmax.h; libc/src/math/fmaxf.h; libc/src/math/fmaxl.h; libc/src/math/fmin.h; libc/src/math/fminf.h; libc/src/math/fminl.h; libc/src/math/frexp.h; libc/src/math/frexpf.h; libc/src/math/frexpl.h; libc/src/math/hypot.h; libc/src/math/hypotf.h; libc/src/math/ilogb.h; libc/src/math/ilogbf.h; libc/src/math/ilogbl.h; libc/src/math/ldexp.h; libc/src/math/ldexpf.h; libc/src/math/ldexpl.h; libc/src/math/llrint.h; libc/src/math/llrintf.h; libc/src/math/llrintl.h; libc/src/math/llround.h; libc/src/math/llroundf.h; libc/src/math/llroundl.h; libc/src/math/log10f.h; libc/src/math/log1pf.h; libc/src/math/log2f.h; libc/src/math/logb.h; libc/src/math/logbf.h; libc/src/math/logbl.h; libc/src/math/logf.h; libc/src/math/lrint.h; libc/src/math/lrintf.h; libc/src/math/lrintl.h; libc/src/math/lround.h; libc/src/math/lroundf.h; libc/src/math/lroundl.h; libc/src/math/modf.h; libc/src/math/modff.h; libc/src/math/modfl.h; libc/src/math/nearbyint.h; libc/src/math/nearbyintf.h; libc/src/math/nearbyintl.h; libc/src/math/nextafter.h; libc/src/math/nextafterf.h; libc/src/math/nextafterl.h; libc/src/math/remainder.h; libc/src/math/remainderf.h; libc/src/math/remainderl.h; libc/src/math/remquo.h; libc/src/math/remquof.h; libc/src/math/remquol.h; libc/src/math/rint.h; libc/src/math/rintf.h; libc/src/math/rintl.h; libc/src/math/round.h; libc/src/math/roundf.h; libc/src/math/roundl.h; libc/src/math/sin.h; libc/src/math/sincosf.h; libc/src/math/sinf.h; libc/src/math/sqrt.h; libc/src/math/sqrtf.h; libc/src/math/sqrtl.h; libc/src/math/tan.h; libc/src/math/trunc.h; libc/src/math/truncf.h; libc/src/math/truncl.h; libc/src/math/aarch64/ceil.cpp; libc/src/math/aarch64/ceilf.c,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:135811,Testability,log,logf,135811,xpm1f.h; libc/src/math/fabs.h; libc/src/math/fabsf.h; libc/src/math/fabsl.h; libc/src/math/fdim.h; libc/src/math/fdimf.h; libc/src/math/fdiml.h; libc/src/math/floor.h; libc/src/math/floorf.h; libc/src/math/floorl.h; libc/src/math/fma.cpp; libc/src/math/fma.h; libc/src/math/fmaf.cpp; libc/src/math/fmaf.h; libc/src/math/fmax.h; libc/src/math/fmaxf.h; libc/src/math/fmaxl.h; libc/src/math/fmin.h; libc/src/math/fminf.h; libc/src/math/fminl.h; libc/src/math/frexp.h; libc/src/math/frexpf.h; libc/src/math/frexpl.h; libc/src/math/hypot.h; libc/src/math/hypotf.h; libc/src/math/ilogb.h; libc/src/math/ilogbf.h; libc/src/math/ilogbl.h; libc/src/math/ldexp.h; libc/src/math/ldexpf.h; libc/src/math/ldexpl.h; libc/src/math/llrint.h; libc/src/math/llrintf.h; libc/src/math/llrintl.h; libc/src/math/llround.h; libc/src/math/llroundf.h; libc/src/math/llroundl.h; libc/src/math/log10f.h; libc/src/math/log1pf.h; libc/src/math/log2f.h; libc/src/math/logb.h; libc/src/math/logbf.h; libc/src/math/logbl.h; libc/src/math/logf.h; libc/src/math/lrint.h; libc/src/math/lrintf.h; libc/src/math/lrintl.h; libc/src/math/lround.h; libc/src/math/lroundf.h; libc/src/math/lroundl.h; libc/src/math/modf.h; libc/src/math/modff.h; libc/src/math/modfl.h; libc/src/math/nearbyint.h; libc/src/math/nearbyintf.h; libc/src/math/nearbyintl.h; libc/src/math/nextafter.h; libc/src/math/nextafterf.h; libc/src/math/nextafterl.h; libc/src/math/remainder.h; libc/src/math/remainderf.h; libc/src/math/remainderl.h; libc/src/math/remquo.h; libc/src/math/remquof.h; libc/src/math/remquol.h; libc/src/math/rint.h; libc/src/math/rintf.h; libc/src/math/rintl.h; libc/src/math/round.h; libc/src/math/roundf.h; libc/src/math/roundl.h; libc/src/math/sin.h; libc/src/math/sincosf.h; libc/src/math/sinf.h; libc/src/math/sqrt.h; libc/src/math/sqrtf.h; libc/src/math/sqrtl.h; libc/src/math/tan.h; libc/src/math/trunc.h; libc/src/math/truncf.h; libc/src/math/truncl.h; libc/src/math/aarch64/ceil.cpp; libc/src/math/aarch64/ceilf.cpp; libc/src/math/aarc,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:138815,Testability,log,logb,138815,diml.cpp; libc/src/math/generic/floor.cpp; libc/src/math/generic/floorf.cpp; libc/src/math/generic/floorl.cpp; libc/src/math/generic/fmax.cpp; libc/src/math/generic/fmaxf.cpp; libc/src/math/generic/fmaxl.cpp; libc/src/math/generic/fmin.cpp; libc/src/math/generic/fminf.cpp; libc/src/math/generic/fminl.cpp; libc/src/math/generic/frexp.cpp; libc/src/math/generic/frexpf.cpp; libc/src/math/generic/frexpl.cpp; libc/src/math/generic/hypot.cpp; libc/src/math/generic/hypotf.cpp; libc/src/math/generic/ilogb.cpp; libc/src/math/generic/ilogbf.cpp; libc/src/math/generic/ilogbl.cpp; libc/src/math/generic/ldexp.cpp; libc/src/math/generic/ldexpf.cpp; libc/src/math/generic/ldexpl.cpp; libc/src/math/generic/llrint.cpp; libc/src/math/generic/llrintf.cpp; libc/src/math/generic/llrintl.cpp; libc/src/math/generic/llround.cpp; libc/src/math/generic/llroundf.cpp; libc/src/math/generic/llroundl.cpp; libc/src/math/generic/log10f.cpp; libc/src/math/generic/log1pf.cpp; libc/src/math/generic/log2f.cpp; libc/src/math/generic/logb.cpp; libc/src/math/generic/logbf.cpp; libc/src/math/generic/logbl.cpp; libc/src/math/generic/logf.cpp; libc/src/math/generic/lrint.cpp; libc/src/math/generic/lrintf.cpp; libc/src/math/generic/lrintl.cpp; libc/src/math/generic/lround.cpp; libc/src/math/generic/lroundf.cpp; libc/src/math/generic/lroundl.cpp; libc/src/math/generic/math_utils.cpp; libc/src/math/generic/math_utils.h; libc/src/math/generic/modf.cpp; libc/src/math/generic/modff.cpp; libc/src/math/generic/modfl.cpp; libc/src/math/generic/nearbyint.cpp; libc/src/math/generic/nearbyintf.cpp; libc/src/math/generic/nearbyintl.cpp; libc/src/math/generic/nextafter.cpp; libc/src/math/generic/nextafterf.cpp; libc/src/math/generic/nextafterl.cpp; libc/src/math/generic/remainder.cpp; libc/src/math/generic/remainderf.cpp; libc/src/math/generic/remainderl.cpp; libc/src/math/generic/remquo.cpp; libc/src/math/generic/remquof.cpp; libc/src/math/generic/remquol.cpp; libc/src/math/generic/rint.cpp; libc/src/math/generic/rintf.c,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:138847,Testability,log,logbf,138847,floor.cpp; libc/src/math/generic/floorf.cpp; libc/src/math/generic/floorl.cpp; libc/src/math/generic/fmax.cpp; libc/src/math/generic/fmaxf.cpp; libc/src/math/generic/fmaxl.cpp; libc/src/math/generic/fmin.cpp; libc/src/math/generic/fminf.cpp; libc/src/math/generic/fminl.cpp; libc/src/math/generic/frexp.cpp; libc/src/math/generic/frexpf.cpp; libc/src/math/generic/frexpl.cpp; libc/src/math/generic/hypot.cpp; libc/src/math/generic/hypotf.cpp; libc/src/math/generic/ilogb.cpp; libc/src/math/generic/ilogbf.cpp; libc/src/math/generic/ilogbl.cpp; libc/src/math/generic/ldexp.cpp; libc/src/math/generic/ldexpf.cpp; libc/src/math/generic/ldexpl.cpp; libc/src/math/generic/llrint.cpp; libc/src/math/generic/llrintf.cpp; libc/src/math/generic/llrintl.cpp; libc/src/math/generic/llround.cpp; libc/src/math/generic/llroundf.cpp; libc/src/math/generic/llroundl.cpp; libc/src/math/generic/log10f.cpp; libc/src/math/generic/log1pf.cpp; libc/src/math/generic/log2f.cpp; libc/src/math/generic/logb.cpp; libc/src/math/generic/logbf.cpp; libc/src/math/generic/logbl.cpp; libc/src/math/generic/logf.cpp; libc/src/math/generic/lrint.cpp; libc/src/math/generic/lrintf.cpp; libc/src/math/generic/lrintl.cpp; libc/src/math/generic/lround.cpp; libc/src/math/generic/lroundf.cpp; libc/src/math/generic/lroundl.cpp; libc/src/math/generic/math_utils.cpp; libc/src/math/generic/math_utils.h; libc/src/math/generic/modf.cpp; libc/src/math/generic/modff.cpp; libc/src/math/generic/modfl.cpp; libc/src/math/generic/nearbyint.cpp; libc/src/math/generic/nearbyintf.cpp; libc/src/math/generic/nearbyintl.cpp; libc/src/math/generic/nextafter.cpp; libc/src/math/generic/nextafterf.cpp; libc/src/math/generic/nextafterl.cpp; libc/src/math/generic/remainder.cpp; libc/src/math/generic/remainderf.cpp; libc/src/math/generic/remainderl.cpp; libc/src/math/generic/remquo.cpp; libc/src/math/generic/remquof.cpp; libc/src/math/generic/remquol.cpp; libc/src/math/generic/rint.cpp; libc/src/math/generic/rintf.cpp; libc/src/math/generic/rintl.c,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:138880,Testability,log,logbl,138880,floorf.cpp; libc/src/math/generic/floorl.cpp; libc/src/math/generic/fmax.cpp; libc/src/math/generic/fmaxf.cpp; libc/src/math/generic/fmaxl.cpp; libc/src/math/generic/fmin.cpp; libc/src/math/generic/fminf.cpp; libc/src/math/generic/fminl.cpp; libc/src/math/generic/frexp.cpp; libc/src/math/generic/frexpf.cpp; libc/src/math/generic/frexpl.cpp; libc/src/math/generic/hypot.cpp; libc/src/math/generic/hypotf.cpp; libc/src/math/generic/ilogb.cpp; libc/src/math/generic/ilogbf.cpp; libc/src/math/generic/ilogbl.cpp; libc/src/math/generic/ldexp.cpp; libc/src/math/generic/ldexpf.cpp; libc/src/math/generic/ldexpl.cpp; libc/src/math/generic/llrint.cpp; libc/src/math/generic/llrintf.cpp; libc/src/math/generic/llrintl.cpp; libc/src/math/generic/llround.cpp; libc/src/math/generic/llroundf.cpp; libc/src/math/generic/llroundl.cpp; libc/src/math/generic/log10f.cpp; libc/src/math/generic/log1pf.cpp; libc/src/math/generic/log2f.cpp; libc/src/math/generic/logb.cpp; libc/src/math/generic/logbf.cpp; libc/src/math/generic/logbl.cpp; libc/src/math/generic/logf.cpp; libc/src/math/generic/lrint.cpp; libc/src/math/generic/lrintf.cpp; libc/src/math/generic/lrintl.cpp; libc/src/math/generic/lround.cpp; libc/src/math/generic/lroundf.cpp; libc/src/math/generic/lroundl.cpp; libc/src/math/generic/math_utils.cpp; libc/src/math/generic/math_utils.h; libc/src/math/generic/modf.cpp; libc/src/math/generic/modff.cpp; libc/src/math/generic/modfl.cpp; libc/src/math/generic/nearbyint.cpp; libc/src/math/generic/nearbyintf.cpp; libc/src/math/generic/nearbyintl.cpp; libc/src/math/generic/nextafter.cpp; libc/src/math/generic/nextafterf.cpp; libc/src/math/generic/nextafterl.cpp; libc/src/math/generic/remainder.cpp; libc/src/math/generic/remainderf.cpp; libc/src/math/generic/remainderl.cpp; libc/src/math/generic/remquo.cpp; libc/src/math/generic/remquof.cpp; libc/src/math/generic/remquol.cpp; libc/src/math/generic/rint.cpp; libc/src/math/generic/rintf.cpp; libc/src/math/generic/rintl.cpp; libc/src/math/generic/round.c,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:138913,Testability,log,logf,138913,/floorl.cpp; libc/src/math/generic/fmax.cpp; libc/src/math/generic/fmaxf.cpp; libc/src/math/generic/fmaxl.cpp; libc/src/math/generic/fmin.cpp; libc/src/math/generic/fminf.cpp; libc/src/math/generic/fminl.cpp; libc/src/math/generic/frexp.cpp; libc/src/math/generic/frexpf.cpp; libc/src/math/generic/frexpl.cpp; libc/src/math/generic/hypot.cpp; libc/src/math/generic/hypotf.cpp; libc/src/math/generic/ilogb.cpp; libc/src/math/generic/ilogbf.cpp; libc/src/math/generic/ilogbl.cpp; libc/src/math/generic/ldexp.cpp; libc/src/math/generic/ldexpf.cpp; libc/src/math/generic/ldexpl.cpp; libc/src/math/generic/llrint.cpp; libc/src/math/generic/llrintf.cpp; libc/src/math/generic/llrintl.cpp; libc/src/math/generic/llround.cpp; libc/src/math/generic/llroundf.cpp; libc/src/math/generic/llroundl.cpp; libc/src/math/generic/log10f.cpp; libc/src/math/generic/log1pf.cpp; libc/src/math/generic/log2f.cpp; libc/src/math/generic/logb.cpp; libc/src/math/generic/logbf.cpp; libc/src/math/generic/logbl.cpp; libc/src/math/generic/logf.cpp; libc/src/math/generic/lrint.cpp; libc/src/math/generic/lrintf.cpp; libc/src/math/generic/lrintl.cpp; libc/src/math/generic/lround.cpp; libc/src/math/generic/lroundf.cpp; libc/src/math/generic/lroundl.cpp; libc/src/math/generic/math_utils.cpp; libc/src/math/generic/math_utils.h; libc/src/math/generic/modf.cpp; libc/src/math/generic/modff.cpp; libc/src/math/generic/modfl.cpp; libc/src/math/generic/nearbyint.cpp; libc/src/math/generic/nearbyintf.cpp; libc/src/math/generic/nearbyintl.cpp; libc/src/math/generic/nextafter.cpp; libc/src/math/generic/nextafterf.cpp; libc/src/math/generic/nextafterl.cpp; libc/src/math/generic/remainder.cpp; libc/src/math/generic/remainderf.cpp; libc/src/math/generic/remainderl.cpp; libc/src/math/generic/remquo.cpp; libc/src/math/generic/remquof.cpp; libc/src/math/generic/remquol.cpp; libc/src/math/generic/rint.cpp; libc/src/math/generic/rintf.cpp; libc/src/math/generic/rintl.cpp; libc/src/math/generic/round.cpp; libc/src/math/generic/roundf,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:148803,Testability,test,testutils,148803,l.h; libc/src/__support/FPUtil/x86_64/sqrt.h; libc/src/__support/OSUtil/io.h; libc/src/__support/OSUtil/quick_exit.h; libc/src/__support/OSUtil/syscall.h; libc/src/__support/OSUtil/linux/io.h; libc/src/__support/OSUtil/linux/syscall.h; libc/src/__support/OSUtil/linux/aarch64/syscall.h; libc/src/__support/OSUtil/linux/x86_64/syscall.h; libc/src/__support/threads/mutex.h; libc/src/__support/threads/linux/mutex.h; libc/utils/HdrGen/Command.cpp; libc/utils/HdrGen/Command.h; libc/utils/HdrGen/Generator.cpp; libc/utils/HdrGen/Generator.h; libc/utils/HdrGen/IncludeFileCommand.cpp; libc/utils/HdrGen/IncludeFileCommand.h; libc/utils/HdrGen/Main.cpp; libc/utils/HdrGen/PublicAPICommand.cpp; libc/utils/HdrGen/PublicAPICommand.h; libc/utils/HdrGen/PrototypeTestGen/PrototypeTestGen.cpp; libc/utils/LibcTableGenUtil/APIIndexer.cpp; libc/utils/LibcTableGenUtil/APIIndexer.h; libc/utils/MPFRWrapper/check_mpfr.cpp; libc/utils/MPFRWrapper/MPFRUtils.cpp; libc/utils/MPFRWrapper/MPFRUtils.h; libc/utils/testutils/ExecuteFunction.h; libc/utils/testutils/ExecuteFunctionUnix.cpp; libc/utils/testutils/FDReader.h; libc/utils/testutils/FDReaderUnix.cpp; libc/utils/testutils/RandUtils.cpp; libc/utils/testutils/RandUtils.h; libc/utils/testutils/StreamWrapper.h; libc/utils/testutils/Timer.cpp; libc/utils/testutils/Timer.h; libc/utils/tools/WrapperGen/Main.cpp; libc/utils/UnitTest/FPExceptMatcher.cpp; libc/utils/UnitTest/FPExceptMatcher.h; libc/utils/UnitTest/FPMatcher.cpp; libc/utils/UnitTest/FPMatcher.h; libc/utils/UnitTest/FuchsiaTest.h; libc/utils/UnitTest/LibcTest.cpp; libc/utils/UnitTest/LibcTestMain.cpp; libc/utils/UnitTest/MemoryMatcher.cpp; libc/utils/UnitTest/MemoryMatcher.h; libc/utils/UnitTest/PlatformDefs.h; libc/utils/UnitTest/Test.h; libclc/generic/include/config.h; libclc/generic/include/clc/as_type.h; libclc/generic/include/clc/clcfunc.h; libclc/generic/include/clc/async/async_work_group_copy.h; libclc/generic/include/clc/async/async_work_group_strided_copy.h; libclc/generic/include/,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:148843,Testability,test,testutils,148843,.h; libc/src/__support/OSUtil/io.h; libc/src/__support/OSUtil/quick_exit.h; libc/src/__support/OSUtil/syscall.h; libc/src/__support/OSUtil/linux/io.h; libc/src/__support/OSUtil/linux/syscall.h; libc/src/__support/OSUtil/linux/aarch64/syscall.h; libc/src/__support/OSUtil/linux/x86_64/syscall.h; libc/src/__support/threads/mutex.h; libc/src/__support/threads/linux/mutex.h; libc/utils/HdrGen/Command.cpp; libc/utils/HdrGen/Command.h; libc/utils/HdrGen/Generator.cpp; libc/utils/HdrGen/Generator.h; libc/utils/HdrGen/IncludeFileCommand.cpp; libc/utils/HdrGen/IncludeFileCommand.h; libc/utils/HdrGen/Main.cpp; libc/utils/HdrGen/PublicAPICommand.cpp; libc/utils/HdrGen/PublicAPICommand.h; libc/utils/HdrGen/PrototypeTestGen/PrototypeTestGen.cpp; libc/utils/LibcTableGenUtil/APIIndexer.cpp; libc/utils/LibcTableGenUtil/APIIndexer.h; libc/utils/MPFRWrapper/check_mpfr.cpp; libc/utils/MPFRWrapper/MPFRUtils.cpp; libc/utils/MPFRWrapper/MPFRUtils.h; libc/utils/testutils/ExecuteFunction.h; libc/utils/testutils/ExecuteFunctionUnix.cpp; libc/utils/testutils/FDReader.h; libc/utils/testutils/FDReaderUnix.cpp; libc/utils/testutils/RandUtils.cpp; libc/utils/testutils/RandUtils.h; libc/utils/testutils/StreamWrapper.h; libc/utils/testutils/Timer.cpp; libc/utils/testutils/Timer.h; libc/utils/tools/WrapperGen/Main.cpp; libc/utils/UnitTest/FPExceptMatcher.cpp; libc/utils/UnitTest/FPExceptMatcher.h; libc/utils/UnitTest/FPMatcher.cpp; libc/utils/UnitTest/FPMatcher.h; libc/utils/UnitTest/FuchsiaTest.h; libc/utils/UnitTest/LibcTest.cpp; libc/utils/UnitTest/LibcTestMain.cpp; libc/utils/UnitTest/MemoryMatcher.cpp; libc/utils/UnitTest/MemoryMatcher.h; libc/utils/UnitTest/PlatformDefs.h; libc/utils/UnitTest/Test.h; libclc/generic/include/config.h; libclc/generic/include/clc/as_type.h; libclc/generic/include/clc/clcfunc.h; libclc/generic/include/clc/async/async_work_group_copy.h; libclc/generic/include/clc/async/async_work_group_strided_copy.h; libclc/generic/include/clc/async/prefetch.h; libclc/generic/inclu,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:148889,Testability,test,testutils,148889,c/src/__support/OSUtil/quick_exit.h; libc/src/__support/OSUtil/syscall.h; libc/src/__support/OSUtil/linux/io.h; libc/src/__support/OSUtil/linux/syscall.h; libc/src/__support/OSUtil/linux/aarch64/syscall.h; libc/src/__support/OSUtil/linux/x86_64/syscall.h; libc/src/__support/threads/mutex.h; libc/src/__support/threads/linux/mutex.h; libc/utils/HdrGen/Command.cpp; libc/utils/HdrGen/Command.h; libc/utils/HdrGen/Generator.cpp; libc/utils/HdrGen/Generator.h; libc/utils/HdrGen/IncludeFileCommand.cpp; libc/utils/HdrGen/IncludeFileCommand.h; libc/utils/HdrGen/Main.cpp; libc/utils/HdrGen/PublicAPICommand.cpp; libc/utils/HdrGen/PublicAPICommand.h; libc/utils/HdrGen/PrototypeTestGen/PrototypeTestGen.cpp; libc/utils/LibcTableGenUtil/APIIndexer.cpp; libc/utils/LibcTableGenUtil/APIIndexer.h; libc/utils/MPFRWrapper/check_mpfr.cpp; libc/utils/MPFRWrapper/MPFRUtils.cpp; libc/utils/MPFRWrapper/MPFRUtils.h; libc/utils/testutils/ExecuteFunction.h; libc/utils/testutils/ExecuteFunctionUnix.cpp; libc/utils/testutils/FDReader.h; libc/utils/testutils/FDReaderUnix.cpp; libc/utils/testutils/RandUtils.cpp; libc/utils/testutils/RandUtils.h; libc/utils/testutils/StreamWrapper.h; libc/utils/testutils/Timer.cpp; libc/utils/testutils/Timer.h; libc/utils/tools/WrapperGen/Main.cpp; libc/utils/UnitTest/FPExceptMatcher.cpp; libc/utils/UnitTest/FPExceptMatcher.h; libc/utils/UnitTest/FPMatcher.cpp; libc/utils/UnitTest/FPMatcher.h; libc/utils/UnitTest/FuchsiaTest.h; libc/utils/UnitTest/LibcTest.cpp; libc/utils/UnitTest/LibcTestMain.cpp; libc/utils/UnitTest/MemoryMatcher.cpp; libc/utils/UnitTest/MemoryMatcher.h; libc/utils/UnitTest/PlatformDefs.h; libc/utils/UnitTest/Test.h; libclc/generic/include/config.h; libclc/generic/include/clc/as_type.h; libclc/generic/include/clc/clcfunc.h; libclc/generic/include/clc/async/async_work_group_copy.h; libclc/generic/include/clc/async/async_work_group_strided_copy.h; libclc/generic/include/clc/async/prefetch.h; libclc/generic/include/clc/async/wait_group_events.h; libclc,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:148922,Testability,test,testutils,148922, libc/src/__support/OSUtil/syscall.h; libc/src/__support/OSUtil/linux/io.h; libc/src/__support/OSUtil/linux/syscall.h; libc/src/__support/OSUtil/linux/aarch64/syscall.h; libc/src/__support/OSUtil/linux/x86_64/syscall.h; libc/src/__support/threads/mutex.h; libc/src/__support/threads/linux/mutex.h; libc/utils/HdrGen/Command.cpp; libc/utils/HdrGen/Command.h; libc/utils/HdrGen/Generator.cpp; libc/utils/HdrGen/Generator.h; libc/utils/HdrGen/IncludeFileCommand.cpp; libc/utils/HdrGen/IncludeFileCommand.h; libc/utils/HdrGen/Main.cpp; libc/utils/HdrGen/PublicAPICommand.cpp; libc/utils/HdrGen/PublicAPICommand.h; libc/utils/HdrGen/PrototypeTestGen/PrototypeTestGen.cpp; libc/utils/LibcTableGenUtil/APIIndexer.cpp; libc/utils/LibcTableGenUtil/APIIndexer.h; libc/utils/MPFRWrapper/check_mpfr.cpp; libc/utils/MPFRWrapper/MPFRUtils.cpp; libc/utils/MPFRWrapper/MPFRUtils.h; libc/utils/testutils/ExecuteFunction.h; libc/utils/testutils/ExecuteFunctionUnix.cpp; libc/utils/testutils/FDReader.h; libc/utils/testutils/FDReaderUnix.cpp; libc/utils/testutils/RandUtils.cpp; libc/utils/testutils/RandUtils.h; libc/utils/testutils/StreamWrapper.h; libc/utils/testutils/Timer.cpp; libc/utils/testutils/Timer.h; libc/utils/tools/WrapperGen/Main.cpp; libc/utils/UnitTest/FPExceptMatcher.cpp; libc/utils/UnitTest/FPExceptMatcher.h; libc/utils/UnitTest/FPMatcher.cpp; libc/utils/UnitTest/FPMatcher.h; libc/utils/UnitTest/FuchsiaTest.h; libc/utils/UnitTest/LibcTest.cpp; libc/utils/UnitTest/LibcTestMain.cpp; libc/utils/UnitTest/MemoryMatcher.cpp; libc/utils/UnitTest/MemoryMatcher.h; libc/utils/UnitTest/PlatformDefs.h; libc/utils/UnitTest/Test.h; libclc/generic/include/config.h; libclc/generic/include/clc/as_type.h; libclc/generic/include/clc/clcfunc.h; libclc/generic/include/clc/async/async_work_group_copy.h; libclc/generic/include/clc/async/async_work_group_strided_copy.h; libclc/generic/include/clc/async/prefetch.h; libclc/generic/include/clc/async/wait_group_events.h; libclc/generic/include/clc/atomic/atomic_a,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:148961,Testability,test,testutils,148961, libc/src/__support/OSUtil/linux/io.h; libc/src/__support/OSUtil/linux/syscall.h; libc/src/__support/OSUtil/linux/aarch64/syscall.h; libc/src/__support/OSUtil/linux/x86_64/syscall.h; libc/src/__support/threads/mutex.h; libc/src/__support/threads/linux/mutex.h; libc/utils/HdrGen/Command.cpp; libc/utils/HdrGen/Command.h; libc/utils/HdrGen/Generator.cpp; libc/utils/HdrGen/Generator.h; libc/utils/HdrGen/IncludeFileCommand.cpp; libc/utils/HdrGen/IncludeFileCommand.h; libc/utils/HdrGen/Main.cpp; libc/utils/HdrGen/PublicAPICommand.cpp; libc/utils/HdrGen/PublicAPICommand.h; libc/utils/HdrGen/PrototypeTestGen/PrototypeTestGen.cpp; libc/utils/LibcTableGenUtil/APIIndexer.cpp; libc/utils/LibcTableGenUtil/APIIndexer.h; libc/utils/MPFRWrapper/check_mpfr.cpp; libc/utils/MPFRWrapper/MPFRUtils.cpp; libc/utils/MPFRWrapper/MPFRUtils.h; libc/utils/testutils/ExecuteFunction.h; libc/utils/testutils/ExecuteFunctionUnix.cpp; libc/utils/testutils/FDReader.h; libc/utils/testutils/FDReaderUnix.cpp; libc/utils/testutils/RandUtils.cpp; libc/utils/testutils/RandUtils.h; libc/utils/testutils/StreamWrapper.h; libc/utils/testutils/Timer.cpp; libc/utils/testutils/Timer.h; libc/utils/tools/WrapperGen/Main.cpp; libc/utils/UnitTest/FPExceptMatcher.cpp; libc/utils/UnitTest/FPExceptMatcher.h; libc/utils/UnitTest/FPMatcher.cpp; libc/utils/UnitTest/FPMatcher.h; libc/utils/UnitTest/FuchsiaTest.h; libc/utils/UnitTest/LibcTest.cpp; libc/utils/UnitTest/LibcTestMain.cpp; libc/utils/UnitTest/MemoryMatcher.cpp; libc/utils/UnitTest/MemoryMatcher.h; libc/utils/UnitTest/PlatformDefs.h; libc/utils/UnitTest/Test.h; libclc/generic/include/config.h; libclc/generic/include/clc/as_type.h; libclc/generic/include/clc/clcfunc.h; libclc/generic/include/clc/async/async_work_group_copy.h; libclc/generic/include/clc/async/async_work_group_strided_copy.h; libclc/generic/include/clc/async/prefetch.h; libclc/generic/include/clc/async/wait_group_events.h; libclc/generic/include/clc/atomic/atomic_add.h; libclc/generic/include/clc/ato,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:148997,Testability,test,testutils,148997,h; libc/src/__support/OSUtil/linux/syscall.h; libc/src/__support/OSUtil/linux/aarch64/syscall.h; libc/src/__support/OSUtil/linux/x86_64/syscall.h; libc/src/__support/threads/mutex.h; libc/src/__support/threads/linux/mutex.h; libc/utils/HdrGen/Command.cpp; libc/utils/HdrGen/Command.h; libc/utils/HdrGen/Generator.cpp; libc/utils/HdrGen/Generator.h; libc/utils/HdrGen/IncludeFileCommand.cpp; libc/utils/HdrGen/IncludeFileCommand.h; libc/utils/HdrGen/Main.cpp; libc/utils/HdrGen/PublicAPICommand.cpp; libc/utils/HdrGen/PublicAPICommand.h; libc/utils/HdrGen/PrototypeTestGen/PrototypeTestGen.cpp; libc/utils/LibcTableGenUtil/APIIndexer.cpp; libc/utils/LibcTableGenUtil/APIIndexer.h; libc/utils/MPFRWrapper/check_mpfr.cpp; libc/utils/MPFRWrapper/MPFRUtils.cpp; libc/utils/MPFRWrapper/MPFRUtils.h; libc/utils/testutils/ExecuteFunction.h; libc/utils/testutils/ExecuteFunctionUnix.cpp; libc/utils/testutils/FDReader.h; libc/utils/testutils/FDReaderUnix.cpp; libc/utils/testutils/RandUtils.cpp; libc/utils/testutils/RandUtils.h; libc/utils/testutils/StreamWrapper.h; libc/utils/testutils/Timer.cpp; libc/utils/testutils/Timer.h; libc/utils/tools/WrapperGen/Main.cpp; libc/utils/UnitTest/FPExceptMatcher.cpp; libc/utils/UnitTest/FPExceptMatcher.h; libc/utils/UnitTest/FPMatcher.cpp; libc/utils/UnitTest/FPMatcher.h; libc/utils/UnitTest/FuchsiaTest.h; libc/utils/UnitTest/LibcTest.cpp; libc/utils/UnitTest/LibcTestMain.cpp; libc/utils/UnitTest/MemoryMatcher.cpp; libc/utils/UnitTest/MemoryMatcher.h; libc/utils/UnitTest/PlatformDefs.h; libc/utils/UnitTest/Test.h; libclc/generic/include/config.h; libclc/generic/include/clc/as_type.h; libclc/generic/include/clc/clcfunc.h; libclc/generic/include/clc/async/async_work_group_copy.h; libclc/generic/include/clc/async/async_work_group_strided_copy.h; libclc/generic/include/clc/async/prefetch.h; libclc/generic/include/clc/async/wait_group_events.h; libclc/generic/include/clc/atomic/atomic_add.h; libclc/generic/include/clc/atomic/atomic_and.h; libclc/generic/inc,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:149031,Testability,test,testutils,149031,scall.h; libc/src/__support/OSUtil/linux/aarch64/syscall.h; libc/src/__support/OSUtil/linux/x86_64/syscall.h; libc/src/__support/threads/mutex.h; libc/src/__support/threads/linux/mutex.h; libc/utils/HdrGen/Command.cpp; libc/utils/HdrGen/Command.h; libc/utils/HdrGen/Generator.cpp; libc/utils/HdrGen/Generator.h; libc/utils/HdrGen/IncludeFileCommand.cpp; libc/utils/HdrGen/IncludeFileCommand.h; libc/utils/HdrGen/Main.cpp; libc/utils/HdrGen/PublicAPICommand.cpp; libc/utils/HdrGen/PublicAPICommand.h; libc/utils/HdrGen/PrototypeTestGen/PrototypeTestGen.cpp; libc/utils/LibcTableGenUtil/APIIndexer.cpp; libc/utils/LibcTableGenUtil/APIIndexer.h; libc/utils/MPFRWrapper/check_mpfr.cpp; libc/utils/MPFRWrapper/MPFRUtils.cpp; libc/utils/MPFRWrapper/MPFRUtils.h; libc/utils/testutils/ExecuteFunction.h; libc/utils/testutils/ExecuteFunctionUnix.cpp; libc/utils/testutils/FDReader.h; libc/utils/testutils/FDReaderUnix.cpp; libc/utils/testutils/RandUtils.cpp; libc/utils/testutils/RandUtils.h; libc/utils/testutils/StreamWrapper.h; libc/utils/testutils/Timer.cpp; libc/utils/testutils/Timer.h; libc/utils/tools/WrapperGen/Main.cpp; libc/utils/UnitTest/FPExceptMatcher.cpp; libc/utils/UnitTest/FPExceptMatcher.h; libc/utils/UnitTest/FPMatcher.cpp; libc/utils/UnitTest/FPMatcher.h; libc/utils/UnitTest/FuchsiaTest.h; libc/utils/UnitTest/LibcTest.cpp; libc/utils/UnitTest/LibcTestMain.cpp; libc/utils/UnitTest/MemoryMatcher.cpp; libc/utils/UnitTest/MemoryMatcher.h; libc/utils/UnitTest/PlatformDefs.h; libc/utils/UnitTest/Test.h; libclc/generic/include/config.h; libclc/generic/include/clc/as_type.h; libclc/generic/include/clc/clcfunc.h; libclc/generic/include/clc/async/async_work_group_copy.h; libclc/generic/include/clc/async/async_work_group_strided_copy.h; libclc/generic/include/clc/async/prefetch.h; libclc/generic/include/clc/async/wait_group_events.h; libclc/generic/include/clc/atomic/atomic_add.h; libclc/generic/include/clc/atomic/atomic_and.h; libclc/generic/include/clc/atomic/atomic_max.h; libclc/,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:149069,Testability,test,testutils,149069,/linux/aarch64/syscall.h; libc/src/__support/OSUtil/linux/x86_64/syscall.h; libc/src/__support/threads/mutex.h; libc/src/__support/threads/linux/mutex.h; libc/utils/HdrGen/Command.cpp; libc/utils/HdrGen/Command.h; libc/utils/HdrGen/Generator.cpp; libc/utils/HdrGen/Generator.h; libc/utils/HdrGen/IncludeFileCommand.cpp; libc/utils/HdrGen/IncludeFileCommand.h; libc/utils/HdrGen/Main.cpp; libc/utils/HdrGen/PublicAPICommand.cpp; libc/utils/HdrGen/PublicAPICommand.h; libc/utils/HdrGen/PrototypeTestGen/PrototypeTestGen.cpp; libc/utils/LibcTableGenUtil/APIIndexer.cpp; libc/utils/LibcTableGenUtil/APIIndexer.h; libc/utils/MPFRWrapper/check_mpfr.cpp; libc/utils/MPFRWrapper/MPFRUtils.cpp; libc/utils/MPFRWrapper/MPFRUtils.h; libc/utils/testutils/ExecuteFunction.h; libc/utils/testutils/ExecuteFunctionUnix.cpp; libc/utils/testutils/FDReader.h; libc/utils/testutils/FDReaderUnix.cpp; libc/utils/testutils/RandUtils.cpp; libc/utils/testutils/RandUtils.h; libc/utils/testutils/StreamWrapper.h; libc/utils/testutils/Timer.cpp; libc/utils/testutils/Timer.h; libc/utils/tools/WrapperGen/Main.cpp; libc/utils/UnitTest/FPExceptMatcher.cpp; libc/utils/UnitTest/FPExceptMatcher.h; libc/utils/UnitTest/FPMatcher.cpp; libc/utils/UnitTest/FPMatcher.h; libc/utils/UnitTest/FuchsiaTest.h; libc/utils/UnitTest/LibcTest.cpp; libc/utils/UnitTest/LibcTestMain.cpp; libc/utils/UnitTest/MemoryMatcher.cpp; libc/utils/UnitTest/MemoryMatcher.h; libc/utils/UnitTest/PlatformDefs.h; libc/utils/UnitTest/Test.h; libclc/generic/include/config.h; libclc/generic/include/clc/as_type.h; libclc/generic/include/clc/clcfunc.h; libclc/generic/include/clc/async/async_work_group_copy.h; libclc/generic/include/clc/async/async_work_group_strided_copy.h; libclc/generic/include/clc/async/prefetch.h; libclc/generic/include/clc/async/wait_group_events.h; libclc/generic/include/clc/atomic/atomic_add.h; libclc/generic/include/clc/atomic/atomic_and.h; libclc/generic/include/clc/atomic/atomic_max.h; libclc/generic/include/clc/atomic/atomic_,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:149101,Testability,test,testutils,149101,src/__support/OSUtil/linux/x86_64/syscall.h; libc/src/__support/threads/mutex.h; libc/src/__support/threads/linux/mutex.h; libc/utils/HdrGen/Command.cpp; libc/utils/HdrGen/Command.h; libc/utils/HdrGen/Generator.cpp; libc/utils/HdrGen/Generator.h; libc/utils/HdrGen/IncludeFileCommand.cpp; libc/utils/HdrGen/IncludeFileCommand.h; libc/utils/HdrGen/Main.cpp; libc/utils/HdrGen/PublicAPICommand.cpp; libc/utils/HdrGen/PublicAPICommand.h; libc/utils/HdrGen/PrototypeTestGen/PrototypeTestGen.cpp; libc/utils/LibcTableGenUtil/APIIndexer.cpp; libc/utils/LibcTableGenUtil/APIIndexer.h; libc/utils/MPFRWrapper/check_mpfr.cpp; libc/utils/MPFRWrapper/MPFRUtils.cpp; libc/utils/MPFRWrapper/MPFRUtils.h; libc/utils/testutils/ExecuteFunction.h; libc/utils/testutils/ExecuteFunctionUnix.cpp; libc/utils/testutils/FDReader.h; libc/utils/testutils/FDReaderUnix.cpp; libc/utils/testutils/RandUtils.cpp; libc/utils/testutils/RandUtils.h; libc/utils/testutils/StreamWrapper.h; libc/utils/testutils/Timer.cpp; libc/utils/testutils/Timer.h; libc/utils/tools/WrapperGen/Main.cpp; libc/utils/UnitTest/FPExceptMatcher.cpp; libc/utils/UnitTest/FPExceptMatcher.h; libc/utils/UnitTest/FPMatcher.cpp; libc/utils/UnitTest/FPMatcher.h; libc/utils/UnitTest/FuchsiaTest.h; libc/utils/UnitTest/LibcTest.cpp; libc/utils/UnitTest/LibcTestMain.cpp; libc/utils/UnitTest/MemoryMatcher.cpp; libc/utils/UnitTest/MemoryMatcher.h; libc/utils/UnitTest/PlatformDefs.h; libc/utils/UnitTest/Test.h; libclc/generic/include/config.h; libclc/generic/include/clc/as_type.h; libclc/generic/include/clc/clcfunc.h; libclc/generic/include/clc/async/async_work_group_copy.h; libclc/generic/include/clc/async/async_work_group_strided_copy.h; libclc/generic/include/clc/async/prefetch.h; libclc/generic/include/clc/async/wait_group_events.h; libclc/generic/include/clc/atomic/atomic_add.h; libclc/generic/include/clc/atomic/atomic_and.h; libclc/generic/include/clc/atomic/atomic_max.h; libclc/generic/include/clc/atomic/atomic_min.h; libclc/generic/include/c,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:155629,Testability,log,log,155629,clude/clc/math/fma.h; libclc/generic/include/clc/math/fmod.h; libclc/generic/include/clc/math/fract.h; libclc/generic/include/clc/math/frexp.h; libclc/generic/include/clc/math/half_cos.h; libclc/generic/include/clc/math/half_divide.h; libclc/generic/include/clc/math/half_exp.h; libclc/generic/include/clc/math/half_exp10.h; libclc/generic/include/clc/math/half_exp2.h; libclc/generic/include/clc/math/half_log.h; libclc/generic/include/clc/math/half_log10.h; libclc/generic/include/clc/math/half_log2.h; libclc/generic/include/clc/math/half_powr.h; libclc/generic/include/clc/math/half_recip.h; libclc/generic/include/clc/math/half_rsqrt.h; libclc/generic/include/clc/math/half_sin.h; libclc/generic/include/clc/math/half_sqrt.h; libclc/generic/include/clc/math/half_tan.h; libclc/generic/include/clc/math/hypot.h; libclc/generic/include/clc/math/ilogb.h; libclc/generic/include/clc/math/ldexp.h; libclc/generic/include/clc/math/lgamma.h; libclc/generic/include/clc/math/lgamma_r.h; libclc/generic/include/clc/math/log.h; libclc/generic/include/clc/math/log10.h; libclc/generic/include/clc/math/log1p.h; libclc/generic/include/clc/math/log2.h; libclc/generic/include/clc/math/logb.h; libclc/generic/include/clc/math/mad.h; libclc/generic/include/clc/math/maxmag.h; libclc/generic/include/clc/math/minmag.h; libclc/generic/include/clc/math/modf.h; libclc/generic/include/clc/math/native_cos.h; libclc/generic/include/clc/math/native_divide.h; libclc/generic/include/clc/math/native_exp.h; libclc/generic/include/clc/math/native_exp10.h; libclc/generic/include/clc/math/native_exp2.h; libclc/generic/include/clc/math/native_log.h; libclc/generic/include/clc/math/native_log10.h; libclc/generic/include/clc/math/native_log2.h; libclc/generic/include/clc/math/native_powr.h; libclc/generic/include/clc/math/native_recip.h; libclc/generic/include/clc/math/native_rsqrt.h; libclc/generic/include/clc/math/native_sin.h; libclc/generic/include/clc/math/native_sqrt.h; libclc/generic/include/clc/math/native_t,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:155790,Testability,log,logb,155790,lude/clc/math/half_cos.h; libclc/generic/include/clc/math/half_divide.h; libclc/generic/include/clc/math/half_exp.h; libclc/generic/include/clc/math/half_exp10.h; libclc/generic/include/clc/math/half_exp2.h; libclc/generic/include/clc/math/half_log.h; libclc/generic/include/clc/math/half_log10.h; libclc/generic/include/clc/math/half_log2.h; libclc/generic/include/clc/math/half_powr.h; libclc/generic/include/clc/math/half_recip.h; libclc/generic/include/clc/math/half_rsqrt.h; libclc/generic/include/clc/math/half_sin.h; libclc/generic/include/clc/math/half_sqrt.h; libclc/generic/include/clc/math/half_tan.h; libclc/generic/include/clc/math/hypot.h; libclc/generic/include/clc/math/ilogb.h; libclc/generic/include/clc/math/ldexp.h; libclc/generic/include/clc/math/lgamma.h; libclc/generic/include/clc/math/lgamma_r.h; libclc/generic/include/clc/math/log.h; libclc/generic/include/clc/math/log10.h; libclc/generic/include/clc/math/log1p.h; libclc/generic/include/clc/math/log2.h; libclc/generic/include/clc/math/logb.h; libclc/generic/include/clc/math/mad.h; libclc/generic/include/clc/math/maxmag.h; libclc/generic/include/clc/math/minmag.h; libclc/generic/include/clc/math/modf.h; libclc/generic/include/clc/math/native_cos.h; libclc/generic/include/clc/math/native_divide.h; libclc/generic/include/clc/math/native_exp.h; libclc/generic/include/clc/math/native_exp10.h; libclc/generic/include/clc/math/native_exp2.h; libclc/generic/include/clc/math/native_log.h; libclc/generic/include/clc/math/native_log10.h; libclc/generic/include/clc/math/native_log2.h; libclc/generic/include/clc/math/native_powr.h; libclc/generic/include/clc/math/native_recip.h; libclc/generic/include/clc/math/native_rsqrt.h; libclc/generic/include/clc/math/native_sin.h; libclc/generic/include/clc/math/native_sqrt.h; libclc/generic/include/clc/math/native_tan.h; libclc/generic/include/clc/math/nextafter.h; libclc/generic/include/clc/math/pow.h; libclc/generic/include/clc/math/pown.h; libclc/generic/include/clc/math,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:159429,Testability,benchmark,benchmarks,159429,e/clc/workitem/get_global_size.h; libclc/generic/include/clc/workitem/get_group_id.h; libclc/generic/include/clc/workitem/get_local_id.h; libclc/generic/include/clc/workitem/get_local_size.h; libclc/generic/include/clc/workitem/get_num_groups.h; libclc/generic/include/clc/workitem/get_work_dim.h; libclc/generic/include/integer/popcount.h; libclc/generic/include/math/clc_exp10.h; libclc/generic/include/math/clc_fma.h; libclc/generic/include/math/clc_fmod.h; libclc/generic/include/math/clc_hypot.h; libclc/generic/include/math/clc_ldexp.h; libclc/generic/include/math/clc_nextafter.h; libclc/generic/include/math/clc_pow.h; libclc/generic/include/math/clc_pown.h; libclc/generic/include/math/clc_powr.h; libclc/generic/include/math/clc_remainder.h; libclc/generic/include/math/clc_remquo.h; libclc/generic/include/math/clc_rootn.h; libclc/generic/include/math/clc_sqrt.h; libclc/generic/include/math/clc_tan.h; libclc/generic/include/math/clc_tanpi.h; libclc/generic/lib/math/ep_log.h; libcxx/benchmarks/format.bench.cpp; libcxx/benchmarks/formatted_size.bench.cpp; libcxx/benchmarks/formatter_float.bench.cpp; libcxx/benchmarks/format_to.bench.cpp; libcxx/benchmarks/format_to_n.bench.cpp; libcxx/benchmarks/to_chars.bench.cpp; libcxx/benchmarks/util_smartptr.bench.cpp; libcxx/benchmarks/variant_visit_1.bench.cpp; libcxx/benchmarks/variant_visit_2.bench.cpp; libcxx/benchmarks/variant_visit_3.bench.cpp; libcxx/include/__algorithm/adjacent_find.h; libcxx/include/__algorithm/all_of.h; libcxx/include/__algorithm/any_of.h; libcxx/include/__algorithm/count.h; libcxx/include/__algorithm/count_if.h; libcxx/include/__algorithm/find.h; libcxx/include/__algorithm/find_first_of.h; libcxx/include/__algorithm/find_if.h; libcxx/include/__algorithm/find_if_not.h; libcxx/include/__algorithm/for_each.h; libcxx/include/__algorithm/for_each_n.h; libcxx/include/__algorithm/iter_swap.h; libcxx/include/__algorithm/mismatch.h; libcxx/include/__algorithm/none_of.h; libcxx/include/__algorithm/swap_ranges.h;,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:159465,Testability,benchmark,benchmarks,159465,c/generic/include/clc/workitem/get_group_id.h; libclc/generic/include/clc/workitem/get_local_id.h; libclc/generic/include/clc/workitem/get_local_size.h; libclc/generic/include/clc/workitem/get_num_groups.h; libclc/generic/include/clc/workitem/get_work_dim.h; libclc/generic/include/integer/popcount.h; libclc/generic/include/math/clc_exp10.h; libclc/generic/include/math/clc_fma.h; libclc/generic/include/math/clc_fmod.h; libclc/generic/include/math/clc_hypot.h; libclc/generic/include/math/clc_ldexp.h; libclc/generic/include/math/clc_nextafter.h; libclc/generic/include/math/clc_pow.h; libclc/generic/include/math/clc_pown.h; libclc/generic/include/math/clc_powr.h; libclc/generic/include/math/clc_remainder.h; libclc/generic/include/math/clc_remquo.h; libclc/generic/include/math/clc_rootn.h; libclc/generic/include/math/clc_sqrt.h; libclc/generic/include/math/clc_tan.h; libclc/generic/include/math/clc_tanpi.h; libclc/generic/lib/math/ep_log.h; libcxx/benchmarks/format.bench.cpp; libcxx/benchmarks/formatted_size.bench.cpp; libcxx/benchmarks/formatter_float.bench.cpp; libcxx/benchmarks/format_to.bench.cpp; libcxx/benchmarks/format_to_n.bench.cpp; libcxx/benchmarks/to_chars.bench.cpp; libcxx/benchmarks/util_smartptr.bench.cpp; libcxx/benchmarks/variant_visit_1.bench.cpp; libcxx/benchmarks/variant_visit_2.bench.cpp; libcxx/benchmarks/variant_visit_3.bench.cpp; libcxx/include/__algorithm/adjacent_find.h; libcxx/include/__algorithm/all_of.h; libcxx/include/__algorithm/any_of.h; libcxx/include/__algorithm/count.h; libcxx/include/__algorithm/count_if.h; libcxx/include/__algorithm/find.h; libcxx/include/__algorithm/find_first_of.h; libcxx/include/__algorithm/find_if.h; libcxx/include/__algorithm/find_if_not.h; libcxx/include/__algorithm/for_each.h; libcxx/include/__algorithm/for_each_n.h; libcxx/include/__algorithm/iter_swap.h; libcxx/include/__algorithm/mismatch.h; libcxx/include/__algorithm/none_of.h; libcxx/include/__algorithm/swap_ranges.h; libcxx/include/__compare/is_eq.h; libc,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:159509,Testability,benchmark,benchmarks,159509,h; libclc/generic/include/clc/workitem/get_local_id.h; libclc/generic/include/clc/workitem/get_local_size.h; libclc/generic/include/clc/workitem/get_num_groups.h; libclc/generic/include/clc/workitem/get_work_dim.h; libclc/generic/include/integer/popcount.h; libclc/generic/include/math/clc_exp10.h; libclc/generic/include/math/clc_fma.h; libclc/generic/include/math/clc_fmod.h; libclc/generic/include/math/clc_hypot.h; libclc/generic/include/math/clc_ldexp.h; libclc/generic/include/math/clc_nextafter.h; libclc/generic/include/math/clc_pow.h; libclc/generic/include/math/clc_pown.h; libclc/generic/include/math/clc_powr.h; libclc/generic/include/math/clc_remainder.h; libclc/generic/include/math/clc_remquo.h; libclc/generic/include/math/clc_rootn.h; libclc/generic/include/math/clc_sqrt.h; libclc/generic/include/math/clc_tan.h; libclc/generic/include/math/clc_tanpi.h; libclc/generic/lib/math/ep_log.h; libcxx/benchmarks/format.bench.cpp; libcxx/benchmarks/formatted_size.bench.cpp; libcxx/benchmarks/formatter_float.bench.cpp; libcxx/benchmarks/format_to.bench.cpp; libcxx/benchmarks/format_to_n.bench.cpp; libcxx/benchmarks/to_chars.bench.cpp; libcxx/benchmarks/util_smartptr.bench.cpp; libcxx/benchmarks/variant_visit_1.bench.cpp; libcxx/benchmarks/variant_visit_2.bench.cpp; libcxx/benchmarks/variant_visit_3.bench.cpp; libcxx/include/__algorithm/adjacent_find.h; libcxx/include/__algorithm/all_of.h; libcxx/include/__algorithm/any_of.h; libcxx/include/__algorithm/count.h; libcxx/include/__algorithm/count_if.h; libcxx/include/__algorithm/find.h; libcxx/include/__algorithm/find_first_of.h; libcxx/include/__algorithm/find_if.h; libcxx/include/__algorithm/find_if_not.h; libcxx/include/__algorithm/for_each.h; libcxx/include/__algorithm/for_each_n.h; libcxx/include/__algorithm/iter_swap.h; libcxx/include/__algorithm/mismatch.h; libcxx/include/__algorithm/none_of.h; libcxx/include/__algorithm/swap_ranges.h; libcxx/include/__compare/is_eq.h; libcxx/include/__filesystem/file_time_type.h; lib,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:159554,Testability,benchmark,benchmarks,159554,_local_id.h; libclc/generic/include/clc/workitem/get_local_size.h; libclc/generic/include/clc/workitem/get_num_groups.h; libclc/generic/include/clc/workitem/get_work_dim.h; libclc/generic/include/integer/popcount.h; libclc/generic/include/math/clc_exp10.h; libclc/generic/include/math/clc_fma.h; libclc/generic/include/math/clc_fmod.h; libclc/generic/include/math/clc_hypot.h; libclc/generic/include/math/clc_ldexp.h; libclc/generic/include/math/clc_nextafter.h; libclc/generic/include/math/clc_pow.h; libclc/generic/include/math/clc_pown.h; libclc/generic/include/math/clc_powr.h; libclc/generic/include/math/clc_remainder.h; libclc/generic/include/math/clc_remquo.h; libclc/generic/include/math/clc_rootn.h; libclc/generic/include/math/clc_sqrt.h; libclc/generic/include/math/clc_tan.h; libclc/generic/include/math/clc_tanpi.h; libclc/generic/lib/math/ep_log.h; libcxx/benchmarks/format.bench.cpp; libcxx/benchmarks/formatted_size.bench.cpp; libcxx/benchmarks/formatter_float.bench.cpp; libcxx/benchmarks/format_to.bench.cpp; libcxx/benchmarks/format_to_n.bench.cpp; libcxx/benchmarks/to_chars.bench.cpp; libcxx/benchmarks/util_smartptr.bench.cpp; libcxx/benchmarks/variant_visit_1.bench.cpp; libcxx/benchmarks/variant_visit_2.bench.cpp; libcxx/benchmarks/variant_visit_3.bench.cpp; libcxx/include/__algorithm/adjacent_find.h; libcxx/include/__algorithm/all_of.h; libcxx/include/__algorithm/any_of.h; libcxx/include/__algorithm/count.h; libcxx/include/__algorithm/count_if.h; libcxx/include/__algorithm/find.h; libcxx/include/__algorithm/find_first_of.h; libcxx/include/__algorithm/find_if.h; libcxx/include/__algorithm/find_if_not.h; libcxx/include/__algorithm/for_each.h; libcxx/include/__algorithm/for_each_n.h; libcxx/include/__algorithm/iter_swap.h; libcxx/include/__algorithm/mismatch.h; libcxx/include/__algorithm/none_of.h; libcxx/include/__algorithm/swap_ranges.h; libcxx/include/__compare/is_eq.h; libcxx/include/__filesystem/file_time_type.h; libcxx/include/__filesystem/file_type.h; libc,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:159593,Testability,benchmark,benchmarks,159593,workitem/get_local_size.h; libclc/generic/include/clc/workitem/get_num_groups.h; libclc/generic/include/clc/workitem/get_work_dim.h; libclc/generic/include/integer/popcount.h; libclc/generic/include/math/clc_exp10.h; libclc/generic/include/math/clc_fma.h; libclc/generic/include/math/clc_fmod.h; libclc/generic/include/math/clc_hypot.h; libclc/generic/include/math/clc_ldexp.h; libclc/generic/include/math/clc_nextafter.h; libclc/generic/include/math/clc_pow.h; libclc/generic/include/math/clc_pown.h; libclc/generic/include/math/clc_powr.h; libclc/generic/include/math/clc_remainder.h; libclc/generic/include/math/clc_remquo.h; libclc/generic/include/math/clc_rootn.h; libclc/generic/include/math/clc_sqrt.h; libclc/generic/include/math/clc_tan.h; libclc/generic/include/math/clc_tanpi.h; libclc/generic/lib/math/ep_log.h; libcxx/benchmarks/format.bench.cpp; libcxx/benchmarks/formatted_size.bench.cpp; libcxx/benchmarks/formatter_float.bench.cpp; libcxx/benchmarks/format_to.bench.cpp; libcxx/benchmarks/format_to_n.bench.cpp; libcxx/benchmarks/to_chars.bench.cpp; libcxx/benchmarks/util_smartptr.bench.cpp; libcxx/benchmarks/variant_visit_1.bench.cpp; libcxx/benchmarks/variant_visit_2.bench.cpp; libcxx/benchmarks/variant_visit_3.bench.cpp; libcxx/include/__algorithm/adjacent_find.h; libcxx/include/__algorithm/all_of.h; libcxx/include/__algorithm/any_of.h; libcxx/include/__algorithm/count.h; libcxx/include/__algorithm/count_if.h; libcxx/include/__algorithm/find.h; libcxx/include/__algorithm/find_first_of.h; libcxx/include/__algorithm/find_if.h; libcxx/include/__algorithm/find_if_not.h; libcxx/include/__algorithm/for_each.h; libcxx/include/__algorithm/for_each_n.h; libcxx/include/__algorithm/iter_swap.h; libcxx/include/__algorithm/mismatch.h; libcxx/include/__algorithm/none_of.h; libcxx/include/__algorithm/swap_ranges.h; libcxx/include/__compare/is_eq.h; libcxx/include/__filesystem/file_time_type.h; libcxx/include/__filesystem/file_type.h; libcxx/include/__filesystem/space_info.h; li,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:159634,Testability,benchmark,benchmarks,159634,c/include/clc/workitem/get_num_groups.h; libclc/generic/include/clc/workitem/get_work_dim.h; libclc/generic/include/integer/popcount.h; libclc/generic/include/math/clc_exp10.h; libclc/generic/include/math/clc_fma.h; libclc/generic/include/math/clc_fmod.h; libclc/generic/include/math/clc_hypot.h; libclc/generic/include/math/clc_ldexp.h; libclc/generic/include/math/clc_nextafter.h; libclc/generic/include/math/clc_pow.h; libclc/generic/include/math/clc_pown.h; libclc/generic/include/math/clc_powr.h; libclc/generic/include/math/clc_remainder.h; libclc/generic/include/math/clc_remquo.h; libclc/generic/include/math/clc_rootn.h; libclc/generic/include/math/clc_sqrt.h; libclc/generic/include/math/clc_tan.h; libclc/generic/include/math/clc_tanpi.h; libclc/generic/lib/math/ep_log.h; libcxx/benchmarks/format.bench.cpp; libcxx/benchmarks/formatted_size.bench.cpp; libcxx/benchmarks/formatter_float.bench.cpp; libcxx/benchmarks/format_to.bench.cpp; libcxx/benchmarks/format_to_n.bench.cpp; libcxx/benchmarks/to_chars.bench.cpp; libcxx/benchmarks/util_smartptr.bench.cpp; libcxx/benchmarks/variant_visit_1.bench.cpp; libcxx/benchmarks/variant_visit_2.bench.cpp; libcxx/benchmarks/variant_visit_3.bench.cpp; libcxx/include/__algorithm/adjacent_find.h; libcxx/include/__algorithm/all_of.h; libcxx/include/__algorithm/any_of.h; libcxx/include/__algorithm/count.h; libcxx/include/__algorithm/count_if.h; libcxx/include/__algorithm/find.h; libcxx/include/__algorithm/find_first_of.h; libcxx/include/__algorithm/find_if.h; libcxx/include/__algorithm/find_if_not.h; libcxx/include/__algorithm/for_each.h; libcxx/include/__algorithm/for_each_n.h; libcxx/include/__algorithm/iter_swap.h; libcxx/include/__algorithm/mismatch.h; libcxx/include/__algorithm/none_of.h; libcxx/include/__algorithm/swap_ranges.h; libcxx/include/__compare/is_eq.h; libcxx/include/__filesystem/file_time_type.h; libcxx/include/__filesystem/file_type.h; libcxx/include/__filesystem/space_info.h; libcxx/include/__format/formatter_floatin,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:159672,Testability,benchmark,benchmarks,159672, libclc/generic/include/clc/workitem/get_work_dim.h; libclc/generic/include/integer/popcount.h; libclc/generic/include/math/clc_exp10.h; libclc/generic/include/math/clc_fma.h; libclc/generic/include/math/clc_fmod.h; libclc/generic/include/math/clc_hypot.h; libclc/generic/include/math/clc_ldexp.h; libclc/generic/include/math/clc_nextafter.h; libclc/generic/include/math/clc_pow.h; libclc/generic/include/math/clc_pown.h; libclc/generic/include/math/clc_powr.h; libclc/generic/include/math/clc_remainder.h; libclc/generic/include/math/clc_remquo.h; libclc/generic/include/math/clc_rootn.h; libclc/generic/include/math/clc_sqrt.h; libclc/generic/include/math/clc_tan.h; libclc/generic/include/math/clc_tanpi.h; libclc/generic/lib/math/ep_log.h; libcxx/benchmarks/format.bench.cpp; libcxx/benchmarks/formatted_size.bench.cpp; libcxx/benchmarks/formatter_float.bench.cpp; libcxx/benchmarks/format_to.bench.cpp; libcxx/benchmarks/format_to_n.bench.cpp; libcxx/benchmarks/to_chars.bench.cpp; libcxx/benchmarks/util_smartptr.bench.cpp; libcxx/benchmarks/variant_visit_1.bench.cpp; libcxx/benchmarks/variant_visit_2.bench.cpp; libcxx/benchmarks/variant_visit_3.bench.cpp; libcxx/include/__algorithm/adjacent_find.h; libcxx/include/__algorithm/all_of.h; libcxx/include/__algorithm/any_of.h; libcxx/include/__algorithm/count.h; libcxx/include/__algorithm/count_if.h; libcxx/include/__algorithm/find.h; libcxx/include/__algorithm/find_first_of.h; libcxx/include/__algorithm/find_if.h; libcxx/include/__algorithm/find_if_not.h; libcxx/include/__algorithm/for_each.h; libcxx/include/__algorithm/for_each_n.h; libcxx/include/__algorithm/iter_swap.h; libcxx/include/__algorithm/mismatch.h; libcxx/include/__algorithm/none_of.h; libcxx/include/__algorithm/swap_ranges.h; libcxx/include/__compare/is_eq.h; libcxx/include/__filesystem/file_time_type.h; libcxx/include/__filesystem/file_type.h; libcxx/include/__filesystem/space_info.h; libcxx/include/__format/formatter_floating_point.h; libcxx/include/__format/format,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:159715,Testability,benchmark,benchmarks,159715,k_dim.h; libclc/generic/include/integer/popcount.h; libclc/generic/include/math/clc_exp10.h; libclc/generic/include/math/clc_fma.h; libclc/generic/include/math/clc_fmod.h; libclc/generic/include/math/clc_hypot.h; libclc/generic/include/math/clc_ldexp.h; libclc/generic/include/math/clc_nextafter.h; libclc/generic/include/math/clc_pow.h; libclc/generic/include/math/clc_pown.h; libclc/generic/include/math/clc_powr.h; libclc/generic/include/math/clc_remainder.h; libclc/generic/include/math/clc_remquo.h; libclc/generic/include/math/clc_rootn.h; libclc/generic/include/math/clc_sqrt.h; libclc/generic/include/math/clc_tan.h; libclc/generic/include/math/clc_tanpi.h; libclc/generic/lib/math/ep_log.h; libcxx/benchmarks/format.bench.cpp; libcxx/benchmarks/formatted_size.bench.cpp; libcxx/benchmarks/formatter_float.bench.cpp; libcxx/benchmarks/format_to.bench.cpp; libcxx/benchmarks/format_to_n.bench.cpp; libcxx/benchmarks/to_chars.bench.cpp; libcxx/benchmarks/util_smartptr.bench.cpp; libcxx/benchmarks/variant_visit_1.bench.cpp; libcxx/benchmarks/variant_visit_2.bench.cpp; libcxx/benchmarks/variant_visit_3.bench.cpp; libcxx/include/__algorithm/adjacent_find.h; libcxx/include/__algorithm/all_of.h; libcxx/include/__algorithm/any_of.h; libcxx/include/__algorithm/count.h; libcxx/include/__algorithm/count_if.h; libcxx/include/__algorithm/find.h; libcxx/include/__algorithm/find_first_of.h; libcxx/include/__algorithm/find_if.h; libcxx/include/__algorithm/find_if_not.h; libcxx/include/__algorithm/for_each.h; libcxx/include/__algorithm/for_each_n.h; libcxx/include/__algorithm/iter_swap.h; libcxx/include/__algorithm/mismatch.h; libcxx/include/__algorithm/none_of.h; libcxx/include/__algorithm/swap_ranges.h; libcxx/include/__compare/is_eq.h; libcxx/include/__filesystem/file_time_type.h; libcxx/include/__filesystem/file_type.h; libcxx/include/__filesystem/space_info.h; libcxx/include/__format/formatter_floating_point.h; libcxx/include/__format/formatter_pointer.h; libcxx/include/__memory/voidi,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:159760,Testability,benchmark,benchmarks,159760,unt.h; libclc/generic/include/math/clc_exp10.h; libclc/generic/include/math/clc_fma.h; libclc/generic/include/math/clc_fmod.h; libclc/generic/include/math/clc_hypot.h; libclc/generic/include/math/clc_ldexp.h; libclc/generic/include/math/clc_nextafter.h; libclc/generic/include/math/clc_pow.h; libclc/generic/include/math/clc_pown.h; libclc/generic/include/math/clc_powr.h; libclc/generic/include/math/clc_remainder.h; libclc/generic/include/math/clc_remquo.h; libclc/generic/include/math/clc_rootn.h; libclc/generic/include/math/clc_sqrt.h; libclc/generic/include/math/clc_tan.h; libclc/generic/include/math/clc_tanpi.h; libclc/generic/lib/math/ep_log.h; libcxx/benchmarks/format.bench.cpp; libcxx/benchmarks/formatted_size.bench.cpp; libcxx/benchmarks/formatter_float.bench.cpp; libcxx/benchmarks/format_to.bench.cpp; libcxx/benchmarks/format_to_n.bench.cpp; libcxx/benchmarks/to_chars.bench.cpp; libcxx/benchmarks/util_smartptr.bench.cpp; libcxx/benchmarks/variant_visit_1.bench.cpp; libcxx/benchmarks/variant_visit_2.bench.cpp; libcxx/benchmarks/variant_visit_3.bench.cpp; libcxx/include/__algorithm/adjacent_find.h; libcxx/include/__algorithm/all_of.h; libcxx/include/__algorithm/any_of.h; libcxx/include/__algorithm/count.h; libcxx/include/__algorithm/count_if.h; libcxx/include/__algorithm/find.h; libcxx/include/__algorithm/find_first_of.h; libcxx/include/__algorithm/find_if.h; libcxx/include/__algorithm/find_if_not.h; libcxx/include/__algorithm/for_each.h; libcxx/include/__algorithm/for_each_n.h; libcxx/include/__algorithm/iter_swap.h; libcxx/include/__algorithm/mismatch.h; libcxx/include/__algorithm/none_of.h; libcxx/include/__algorithm/swap_ranges.h; libcxx/include/__compare/is_eq.h; libcxx/include/__filesystem/file_time_type.h; libcxx/include/__filesystem/file_type.h; libcxx/include/__filesystem/space_info.h; libcxx/include/__format/formatter_floating_point.h; libcxx/include/__format/formatter_pointer.h; libcxx/include/__memory/voidify.h; libcxx/include/__numeric/exclusive_scan,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:159805,Testability,benchmark,benchmarks,159805,h; libclc/generic/include/math/clc_fma.h; libclc/generic/include/math/clc_fmod.h; libclc/generic/include/math/clc_hypot.h; libclc/generic/include/math/clc_ldexp.h; libclc/generic/include/math/clc_nextafter.h; libclc/generic/include/math/clc_pow.h; libclc/generic/include/math/clc_pown.h; libclc/generic/include/math/clc_powr.h; libclc/generic/include/math/clc_remainder.h; libclc/generic/include/math/clc_remquo.h; libclc/generic/include/math/clc_rootn.h; libclc/generic/include/math/clc_sqrt.h; libclc/generic/include/math/clc_tan.h; libclc/generic/include/math/clc_tanpi.h; libclc/generic/lib/math/ep_log.h; libcxx/benchmarks/format.bench.cpp; libcxx/benchmarks/formatted_size.bench.cpp; libcxx/benchmarks/formatter_float.bench.cpp; libcxx/benchmarks/format_to.bench.cpp; libcxx/benchmarks/format_to_n.bench.cpp; libcxx/benchmarks/to_chars.bench.cpp; libcxx/benchmarks/util_smartptr.bench.cpp; libcxx/benchmarks/variant_visit_1.bench.cpp; libcxx/benchmarks/variant_visit_2.bench.cpp; libcxx/benchmarks/variant_visit_3.bench.cpp; libcxx/include/__algorithm/adjacent_find.h; libcxx/include/__algorithm/all_of.h; libcxx/include/__algorithm/any_of.h; libcxx/include/__algorithm/count.h; libcxx/include/__algorithm/count_if.h; libcxx/include/__algorithm/find.h; libcxx/include/__algorithm/find_first_of.h; libcxx/include/__algorithm/find_if.h; libcxx/include/__algorithm/find_if_not.h; libcxx/include/__algorithm/for_each.h; libcxx/include/__algorithm/for_each_n.h; libcxx/include/__algorithm/iter_swap.h; libcxx/include/__algorithm/mismatch.h; libcxx/include/__algorithm/none_of.h; libcxx/include/__algorithm/swap_ranges.h; libcxx/include/__compare/is_eq.h; libcxx/include/__filesystem/file_time_type.h; libcxx/include/__filesystem/file_type.h; libcxx/include/__filesystem/space_info.h; libcxx/include/__format/formatter_floating_point.h; libcxx/include/__format/formatter_pointer.h; libcxx/include/__memory/voidify.h; libcxx/include/__numeric/exclusive_scan.h; libcxx/include/__numeric/inclusive_scan.h,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:226970,Testability,test,test,226970,/tools/debugserver/source/MacOSX/MachException.h; lldb/tools/debugserver/source/MacOSX/MachThread.cpp; lldb/tools/debugserver/source/MacOSX/MachThread.h; lldb/tools/debugserver/source/MacOSX/MachThreadList.h; lldb/tools/debugserver/source/MacOSX/MachVMMemory.h; lldb/tools/debugserver/source/MacOSX/MachVMRegion.cpp; lldb/tools/debugserver/source/MacOSX/MachVMRegion.h; lldb/tools/debugserver/source/MacOSX/OsLogger.h; lldb/tools/debugserver/source/MacOSX/arm/DNBArchImpl.h; lldb/tools/debugserver/source/MacOSX/arm64/DNBArchImplARM64.h; lldb/tools/driver/Driver.cpp; lldb/tools/driver/Driver.h; lldb/tools/driver/Platform.cpp; lldb/tools/driver/Platform.h; lldb/tools/intel-features/cli-wrapper.cpp; lldb/tools/intel-features/intel-mpx/cli-wrapper-mpxtable.h; lldb/tools/lldb-instr/Instrument.cpp; lldb/tools/lldb-server/Acceptor.h; lldb/tools/lldb-server/LLDBServerUtilities.cpp; lldb/tools/lldb-server/SystemInitializerLLGS.cpp; lldb/tools/lldb-server/SystemInitializerLLGS.h; lldb/tools/lldb-test/SystemInitializerTest.cpp; lldb/tools/lldb-test/SystemInitializerTest.h; lldb/tools/lldb-vscode/BreakpointBase.cpp; lldb/tools/lldb-vscode/BreakpointBase.h; lldb/tools/lldb-vscode/ExceptionBreakpoint.cpp; lldb/tools/lldb-vscode/ExceptionBreakpoint.h; lldb/tools/lldb-vscode/FifoFiles.cpp; lldb/tools/lldb-vscode/FifoFiles.h; lldb/tools/lldb-vscode/FunctionBreakpoint.cpp; lldb/tools/lldb-vscode/FunctionBreakpoint.h; lldb/tools/lldb-vscode/IOStream.cpp; lldb/tools/lldb-vscode/IOStream.h; lldb/tools/lldb-vscode/JSONUtils.cpp; lldb/tools/lldb-vscode/JSONUtils.h; lldb/tools/lldb-vscode/lldb-vscode.cpp; lldb/tools/lldb-vscode/LLDBUtils.cpp; lldb/tools/lldb-vscode/LLDBUtils.h; lldb/tools/lldb-vscode/OutputRedirector.cpp; lldb/tools/lldb-vscode/OutputRedirector.h; lldb/tools/lldb-vscode/RunInTerminal.cpp; lldb/tools/lldb-vscode/RunInTerminal.h; lldb/tools/lldb-vscode/SourceBreakpoint.cpp; lldb/tools/lldb-vscode/SourceBreakpoint.h; lldb/tools/lldb-vscode/SourceReference.h; lldb/tools/lldb-vscode,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:227018,Testability,test,test,227018,h; lldb/tools/debugserver/source/MacOSX/MachThread.cpp; lldb/tools/debugserver/source/MacOSX/MachThread.h; lldb/tools/debugserver/source/MacOSX/MachThreadList.h; lldb/tools/debugserver/source/MacOSX/MachVMMemory.h; lldb/tools/debugserver/source/MacOSX/MachVMRegion.cpp; lldb/tools/debugserver/source/MacOSX/MachVMRegion.h; lldb/tools/debugserver/source/MacOSX/OsLogger.h; lldb/tools/debugserver/source/MacOSX/arm/DNBArchImpl.h; lldb/tools/debugserver/source/MacOSX/arm64/DNBArchImplARM64.h; lldb/tools/driver/Driver.cpp; lldb/tools/driver/Driver.h; lldb/tools/driver/Platform.cpp; lldb/tools/driver/Platform.h; lldb/tools/intel-features/cli-wrapper.cpp; lldb/tools/intel-features/intel-mpx/cli-wrapper-mpxtable.h; lldb/tools/lldb-instr/Instrument.cpp; lldb/tools/lldb-server/Acceptor.h; lldb/tools/lldb-server/LLDBServerUtilities.cpp; lldb/tools/lldb-server/SystemInitializerLLGS.cpp; lldb/tools/lldb-server/SystemInitializerLLGS.h; lldb/tools/lldb-test/SystemInitializerTest.cpp; lldb/tools/lldb-test/SystemInitializerTest.h; lldb/tools/lldb-vscode/BreakpointBase.cpp; lldb/tools/lldb-vscode/BreakpointBase.h; lldb/tools/lldb-vscode/ExceptionBreakpoint.cpp; lldb/tools/lldb-vscode/ExceptionBreakpoint.h; lldb/tools/lldb-vscode/FifoFiles.cpp; lldb/tools/lldb-vscode/FifoFiles.h; lldb/tools/lldb-vscode/FunctionBreakpoint.cpp; lldb/tools/lldb-vscode/FunctionBreakpoint.h; lldb/tools/lldb-vscode/IOStream.cpp; lldb/tools/lldb-vscode/IOStream.h; lldb/tools/lldb-vscode/JSONUtils.cpp; lldb/tools/lldb-vscode/JSONUtils.h; lldb/tools/lldb-vscode/lldb-vscode.cpp; lldb/tools/lldb-vscode/LLDBUtils.cpp; lldb/tools/lldb-vscode/LLDBUtils.h; lldb/tools/lldb-vscode/OutputRedirector.cpp; lldb/tools/lldb-vscode/OutputRedirector.h; lldb/tools/lldb-vscode/RunInTerminal.cpp; lldb/tools/lldb-vscode/RunInTerminal.h; lldb/tools/lldb-vscode/SourceBreakpoint.cpp; lldb/tools/lldb-vscode/SourceBreakpoint.h; lldb/tools/lldb-vscode/SourceReference.h; lldb/tools/lldb-vscode/VSCode.h; lldb/tools/lldb-vscode/VSCodeForward,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:231604,Testability,test,test-dwarf,231604,s/Process/Utility/MemoryTagManagerAArch64MTETest.cpp; lldb/unittests/Process/Utility/RegisterContextFreeBSDTest.cpp; lldb/unittests/Process/Utility/RegisterContextTest.cpp; lldb/unittests/ScriptInterpreter/Lua/LuaTests.cpp; lldb/unittests/ScriptInterpreter/Lua/ScriptInterpreterTests.cpp; lldb/unittests/ScriptInterpreter/Python/PythonTestSuite.cpp; lldb/unittests/ScriptInterpreter/Python/PythonTestSuite.h; lldb/unittests/Signals/UnixSignalsTest.cpp; lldb/unittests/Symbol/LocateSymbolFileTest.cpp; lldb/unittests/Symbol/MangledTest.cpp; lldb/unittests/Symbol/SymbolTest.cpp; lldb/unittests/Symbol/SymtabTest.cpp; lldb/unittests/Symbol/TestClangASTImporter.cpp; lldb/unittests/Symbol/TestDWARFCallFrameInfo.cpp; lldb/unittests/Symbol/TestTypeSystem.cpp; lldb/unittests/SymbolFile/DWARF/DWARFASTParserClangTests.cpp; lldb/unittests/SymbolFile/DWARF/DWARFDIETest.cpp; lldb/unittests/SymbolFile/DWARF/DWARFIndexCachingTest.cpp; lldb/unittests/SymbolFile/DWARF/DWARFUnitTest.cpp; lldb/unittests/SymbolFile/DWARF/Inputs/test-dwarf.cpp; lldb/unittests/SymbolFile/NativePDB/PdbFPOProgramToDWARFExpressionTests.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb-alt.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb-nested.h; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb-types.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb.h; lldb/unittests/Target/DynamicRegisterInfoTest.cpp; lldb/unittests/Target/ExecutionContextTest.cpp; lldb/unittests/Target/FindFileTest.cpp; lldb/unittests/Target/MemoryTagMapTest.cpp; lldb/unittests/Target/RemoteAwarePlatformTest.cpp; lldb/unittests/Target/StackFrameRecognizerTest.cpp; lldb/unittests/TestingSupport/MockTildeExpressionResolver.cpp; lldb/unittests/TestingSupport/MockTildeExpressionResolver.h; lldb/unittests/TestingSupport/SubsystemRAII.h; lldb/unittests/TestingSupport/TestUtilities.cpp; lldb/unittests/TestingSupport/Host/NativeProcessTestUtils.h; lldb/unittests/TestingSupport/Symbol/ClangTestUtils.h; l,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:231734,Testability,test,test-pdb-alt,231734,Process/Utility/RegisterContextTest.cpp; lldb/unittests/ScriptInterpreter/Lua/LuaTests.cpp; lldb/unittests/ScriptInterpreter/Lua/ScriptInterpreterTests.cpp; lldb/unittests/ScriptInterpreter/Python/PythonTestSuite.cpp; lldb/unittests/ScriptInterpreter/Python/PythonTestSuite.h; lldb/unittests/Signals/UnixSignalsTest.cpp; lldb/unittests/Symbol/LocateSymbolFileTest.cpp; lldb/unittests/Symbol/MangledTest.cpp; lldb/unittests/Symbol/SymbolTest.cpp; lldb/unittests/Symbol/SymtabTest.cpp; lldb/unittests/Symbol/TestClangASTImporter.cpp; lldb/unittests/Symbol/TestDWARFCallFrameInfo.cpp; lldb/unittests/Symbol/TestTypeSystem.cpp; lldb/unittests/SymbolFile/DWARF/DWARFASTParserClangTests.cpp; lldb/unittests/SymbolFile/DWARF/DWARFDIETest.cpp; lldb/unittests/SymbolFile/DWARF/DWARFIndexCachingTest.cpp; lldb/unittests/SymbolFile/DWARF/DWARFUnitTest.cpp; lldb/unittests/SymbolFile/DWARF/Inputs/test-dwarf.cpp; lldb/unittests/SymbolFile/NativePDB/PdbFPOProgramToDWARFExpressionTests.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb-alt.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb-nested.h; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb-types.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb.h; lldb/unittests/Target/DynamicRegisterInfoTest.cpp; lldb/unittests/Target/ExecutionContextTest.cpp; lldb/unittests/Target/FindFileTest.cpp; lldb/unittests/Target/MemoryTagMapTest.cpp; lldb/unittests/Target/RemoteAwarePlatformTest.cpp; lldb/unittests/Target/StackFrameRecognizerTest.cpp; lldb/unittests/TestingSupport/MockTildeExpressionResolver.cpp; lldb/unittests/TestingSupport/MockTildeExpressionResolver.h; lldb/unittests/TestingSupport/SubsystemRAII.h; lldb/unittests/TestingSupport/TestUtilities.cpp; lldb/unittests/TestingSupport/Host/NativeProcessTestUtils.h; lldb/unittests/TestingSupport/Symbol/ClangTestUtils.h; lldb/unittests/TestingSupport/Symbol/YAMLModuleTester.cpp; lldb/unittests/TestingSupport/Symbol/YAMLModuleTester.h; lldb/unittests/Th,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:231789,Testability,test,test-pdb-nested,231789,criptInterpreter/Lua/LuaTests.cpp; lldb/unittests/ScriptInterpreter/Lua/ScriptInterpreterTests.cpp; lldb/unittests/ScriptInterpreter/Python/PythonTestSuite.cpp; lldb/unittests/ScriptInterpreter/Python/PythonTestSuite.h; lldb/unittests/Signals/UnixSignalsTest.cpp; lldb/unittests/Symbol/LocateSymbolFileTest.cpp; lldb/unittests/Symbol/MangledTest.cpp; lldb/unittests/Symbol/SymbolTest.cpp; lldb/unittests/Symbol/SymtabTest.cpp; lldb/unittests/Symbol/TestClangASTImporter.cpp; lldb/unittests/Symbol/TestDWARFCallFrameInfo.cpp; lldb/unittests/Symbol/TestTypeSystem.cpp; lldb/unittests/SymbolFile/DWARF/DWARFASTParserClangTests.cpp; lldb/unittests/SymbolFile/DWARF/DWARFDIETest.cpp; lldb/unittests/SymbolFile/DWARF/DWARFIndexCachingTest.cpp; lldb/unittests/SymbolFile/DWARF/DWARFUnitTest.cpp; lldb/unittests/SymbolFile/DWARF/Inputs/test-dwarf.cpp; lldb/unittests/SymbolFile/NativePDB/PdbFPOProgramToDWARFExpressionTests.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb-alt.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb-nested.h; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb-types.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb.h; lldb/unittests/Target/DynamicRegisterInfoTest.cpp; lldb/unittests/Target/ExecutionContextTest.cpp; lldb/unittests/Target/FindFileTest.cpp; lldb/unittests/Target/MemoryTagMapTest.cpp; lldb/unittests/Target/RemoteAwarePlatformTest.cpp; lldb/unittests/Target/StackFrameRecognizerTest.cpp; lldb/unittests/TestingSupport/MockTildeExpressionResolver.cpp; lldb/unittests/TestingSupport/MockTildeExpressionResolver.h; lldb/unittests/TestingSupport/SubsystemRAII.h; lldb/unittests/TestingSupport/TestUtilities.cpp; lldb/unittests/TestingSupport/Host/NativeProcessTestUtils.h; lldb/unittests/TestingSupport/Symbol/ClangTestUtils.h; lldb/unittests/TestingSupport/Symbol/YAMLModuleTester.cpp; lldb/unittests/TestingSupport/Symbol/YAMLModuleTester.h; lldb/unittests/Thread/ThreadTest.cpp; lldb/unittests/UnwindAssembly/PPC64,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:231845,Testability,test,test-pdb-types,231845,Interpreter/Lua/ScriptInterpreterTests.cpp; lldb/unittests/ScriptInterpreter/Python/PythonTestSuite.cpp; lldb/unittests/ScriptInterpreter/Python/PythonTestSuite.h; lldb/unittests/Signals/UnixSignalsTest.cpp; lldb/unittests/Symbol/LocateSymbolFileTest.cpp; lldb/unittests/Symbol/MangledTest.cpp; lldb/unittests/Symbol/SymbolTest.cpp; lldb/unittests/Symbol/SymtabTest.cpp; lldb/unittests/Symbol/TestClangASTImporter.cpp; lldb/unittests/Symbol/TestDWARFCallFrameInfo.cpp; lldb/unittests/Symbol/TestTypeSystem.cpp; lldb/unittests/SymbolFile/DWARF/DWARFASTParserClangTests.cpp; lldb/unittests/SymbolFile/DWARF/DWARFDIETest.cpp; lldb/unittests/SymbolFile/DWARF/DWARFIndexCachingTest.cpp; lldb/unittests/SymbolFile/DWARF/DWARFUnitTest.cpp; lldb/unittests/SymbolFile/DWARF/Inputs/test-dwarf.cpp; lldb/unittests/SymbolFile/NativePDB/PdbFPOProgramToDWARFExpressionTests.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb-alt.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb-nested.h; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb-types.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb.h; lldb/unittests/Target/DynamicRegisterInfoTest.cpp; lldb/unittests/Target/ExecutionContextTest.cpp; lldb/unittests/Target/FindFileTest.cpp; lldb/unittests/Target/MemoryTagMapTest.cpp; lldb/unittests/Target/RemoteAwarePlatformTest.cpp; lldb/unittests/Target/StackFrameRecognizerTest.cpp; lldb/unittests/TestingSupport/MockTildeExpressionResolver.cpp; lldb/unittests/TestingSupport/MockTildeExpressionResolver.h; lldb/unittests/TestingSupport/SubsystemRAII.h; lldb/unittests/TestingSupport/TestUtilities.cpp; lldb/unittests/TestingSupport/Host/NativeProcessTestUtils.h; lldb/unittests/TestingSupport/Symbol/ClangTestUtils.h; lldb/unittests/TestingSupport/Symbol/YAMLModuleTester.cpp; lldb/unittests/TestingSupport/Symbol/YAMLModuleTester.h; lldb/unittests/Thread/ThreadTest.cpp; lldb/unittests/UnwindAssembly/PPC64/TestPPC64InstEmulation.cpp; lldb/unittests/Utility/AnsiT,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:231902,Testability,test,test-pdb,231902,tests/ScriptInterpreter/Python/PythonTestSuite.cpp; lldb/unittests/ScriptInterpreter/Python/PythonTestSuite.h; lldb/unittests/Signals/UnixSignalsTest.cpp; lldb/unittests/Symbol/LocateSymbolFileTest.cpp; lldb/unittests/Symbol/MangledTest.cpp; lldb/unittests/Symbol/SymbolTest.cpp; lldb/unittests/Symbol/SymtabTest.cpp; lldb/unittests/Symbol/TestClangASTImporter.cpp; lldb/unittests/Symbol/TestDWARFCallFrameInfo.cpp; lldb/unittests/Symbol/TestTypeSystem.cpp; lldb/unittests/SymbolFile/DWARF/DWARFASTParserClangTests.cpp; lldb/unittests/SymbolFile/DWARF/DWARFDIETest.cpp; lldb/unittests/SymbolFile/DWARF/DWARFIndexCachingTest.cpp; lldb/unittests/SymbolFile/DWARF/DWARFUnitTest.cpp; lldb/unittests/SymbolFile/DWARF/Inputs/test-dwarf.cpp; lldb/unittests/SymbolFile/NativePDB/PdbFPOProgramToDWARFExpressionTests.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb-alt.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb-nested.h; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb-types.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb.h; lldb/unittests/Target/DynamicRegisterInfoTest.cpp; lldb/unittests/Target/ExecutionContextTest.cpp; lldb/unittests/Target/FindFileTest.cpp; lldb/unittests/Target/MemoryTagMapTest.cpp; lldb/unittests/Target/RemoteAwarePlatformTest.cpp; lldb/unittests/Target/StackFrameRecognizerTest.cpp; lldb/unittests/TestingSupport/MockTildeExpressionResolver.cpp; lldb/unittests/TestingSupport/MockTildeExpressionResolver.h; lldb/unittests/TestingSupport/SubsystemRAII.h; lldb/unittests/TestingSupport/TestUtilities.cpp; lldb/unittests/TestingSupport/Host/NativeProcessTestUtils.h; lldb/unittests/TestingSupport/Symbol/ClangTestUtils.h; lldb/unittests/TestingSupport/Symbol/YAMLModuleTester.cpp; lldb/unittests/TestingSupport/Symbol/YAMLModuleTester.h; lldb/unittests/Thread/ThreadTest.cpp; lldb/unittests/UnwindAssembly/PPC64/TestPPC64InstEmulation.cpp; lldb/unittests/Utility/AnsiTerminalTest.cpp; lldb/unittests/Utility/ArgsTest.cpp;,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:231953,Testability,test,test-pdb,231953, lldb/unittests/ScriptInterpreter/Python/PythonTestSuite.h; lldb/unittests/Signals/UnixSignalsTest.cpp; lldb/unittests/Symbol/LocateSymbolFileTest.cpp; lldb/unittests/Symbol/MangledTest.cpp; lldb/unittests/Symbol/SymbolTest.cpp; lldb/unittests/Symbol/SymtabTest.cpp; lldb/unittests/Symbol/TestClangASTImporter.cpp; lldb/unittests/Symbol/TestDWARFCallFrameInfo.cpp; lldb/unittests/Symbol/TestTypeSystem.cpp; lldb/unittests/SymbolFile/DWARF/DWARFASTParserClangTests.cpp; lldb/unittests/SymbolFile/DWARF/DWARFDIETest.cpp; lldb/unittests/SymbolFile/DWARF/DWARFIndexCachingTest.cpp; lldb/unittests/SymbolFile/DWARF/DWARFUnitTest.cpp; lldb/unittests/SymbolFile/DWARF/Inputs/test-dwarf.cpp; lldb/unittests/SymbolFile/NativePDB/PdbFPOProgramToDWARFExpressionTests.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb-alt.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb-nested.h; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb-types.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb.h; lldb/unittests/Target/DynamicRegisterInfoTest.cpp; lldb/unittests/Target/ExecutionContextTest.cpp; lldb/unittests/Target/FindFileTest.cpp; lldb/unittests/Target/MemoryTagMapTest.cpp; lldb/unittests/Target/RemoteAwarePlatformTest.cpp; lldb/unittests/Target/StackFrameRecognizerTest.cpp; lldb/unittests/TestingSupport/MockTildeExpressionResolver.cpp; lldb/unittests/TestingSupport/MockTildeExpressionResolver.h; lldb/unittests/TestingSupport/SubsystemRAII.h; lldb/unittests/TestingSupport/TestUtilities.cpp; lldb/unittests/TestingSupport/Host/NativeProcessTestUtils.h; lldb/unittests/TestingSupport/Symbol/ClangTestUtils.h; lldb/unittests/TestingSupport/Symbol/YAMLModuleTester.cpp; lldb/unittests/TestingSupport/Symbol/YAMLModuleTester.h; lldb/unittests/Thread/ThreadTest.cpp; lldb/unittests/UnwindAssembly/PPC64/TestPPC64InstEmulation.cpp; lldb/unittests/Utility/AnsiTerminalTest.cpp; lldb/unittests/Utility/ArgsTest.cpp; lldb/unittests/Utility/BroadcasterTest.cpp; lldb/u,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:411318,Testability,test,tests,411318,on.cpp; openmp/runtime/src/kmp_version.h; openmp/runtime/src/kmp_wait_release.cpp; openmp/runtime/src/kmp_wait_release.h; openmp/runtime/src/kmp_wrapper_getpid.h; openmp/runtime/src/kmp_wrapper_malloc.h; openmp/runtime/src/ompd-specific.cpp; openmp/runtime/src/ompd-specific.h; openmp/runtime/src/ompt-event-specific.h; openmp/runtime/src/ompt-general.cpp; openmp/runtime/src/ompt-internal.h; openmp/runtime/src/ompt-specific.cpp; openmp/runtime/src/ompt-specific.h; openmp/runtime/src/z_Linux_util.cpp; openmp/runtime/src/z_Windows_NT-586_util.cpp; openmp/runtime/src/z_Windows_NT_util.cpp; openmp/runtime/src/thirdparty/ittnotify/ittnotify.h; openmp/runtime/src/thirdparty/ittnotify/ittnotify_config.h; openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.cpp; openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.h; openmp/runtime/src/thirdparty/ittnotify/ittnotify_types.h; openmp/runtime/src/thirdparty/ittnotify/legacy/ittnotify.h; openmp/tools/archer/ompt-tsan.cpp; openmp/tools/archer/tests/ompt/ompt-signal.h; openmp/tools/multiplex/ompt-multiplex.h; openmp/tools/multiplex/tests/ompt-signal.h; openmp/tools/multiplex/tests/custom_data_storage/second-tool.h; openmp/tools/multiplex/tests/print/first-tool.h; openmp/tools/multiplex/tests/print/second-tool.h; polly/include/polly/Canonicalization.h; polly/include/polly/CodePreparation.h; polly/include/polly/DeadCodeElimination.h; polly/include/polly/DeLICM.h; polly/include/polly/DependenceInfo.h; polly/include/polly/FlattenAlgo.h; polly/include/polly/FlattenSchedule.h; polly/include/polly/ForwardOpTree.h; polly/include/polly/JSONExporter.h; polly/include/polly/LinkAllPasses.h; polly/include/polly/ManualOptimizer.h; polly/include/polly/MatmulOptimizer.h; polly/include/polly/Options.h; polly/include/polly/PolyhedralInfo.h; polly/include/polly/PruneUnprofitable.h; polly/include/polly/RegisterPasses.h; polly/include/polly/ScheduleOptimizer.h; polly/include/polly/ScheduleTreeTransform.h; polly/include/polly/ScopBuilder.h; poll,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:411408,Testability,test,tests,411408,mp/runtime/src/kmp_wait_release.h; openmp/runtime/src/kmp_wrapper_getpid.h; openmp/runtime/src/kmp_wrapper_malloc.h; openmp/runtime/src/ompd-specific.cpp; openmp/runtime/src/ompd-specific.h; openmp/runtime/src/ompt-event-specific.h; openmp/runtime/src/ompt-general.cpp; openmp/runtime/src/ompt-internal.h; openmp/runtime/src/ompt-specific.cpp; openmp/runtime/src/ompt-specific.h; openmp/runtime/src/z_Linux_util.cpp; openmp/runtime/src/z_Windows_NT-586_util.cpp; openmp/runtime/src/z_Windows_NT_util.cpp; openmp/runtime/src/thirdparty/ittnotify/ittnotify.h; openmp/runtime/src/thirdparty/ittnotify/ittnotify_config.h; openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.cpp; openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.h; openmp/runtime/src/thirdparty/ittnotify/ittnotify_types.h; openmp/runtime/src/thirdparty/ittnotify/legacy/ittnotify.h; openmp/tools/archer/ompt-tsan.cpp; openmp/tools/archer/tests/ompt/ompt-signal.h; openmp/tools/multiplex/ompt-multiplex.h; openmp/tools/multiplex/tests/ompt-signal.h; openmp/tools/multiplex/tests/custom_data_storage/second-tool.h; openmp/tools/multiplex/tests/print/first-tool.h; openmp/tools/multiplex/tests/print/second-tool.h; polly/include/polly/Canonicalization.h; polly/include/polly/CodePreparation.h; polly/include/polly/DeadCodeElimination.h; polly/include/polly/DeLICM.h; polly/include/polly/DependenceInfo.h; polly/include/polly/FlattenAlgo.h; polly/include/polly/FlattenSchedule.h; polly/include/polly/ForwardOpTree.h; polly/include/polly/JSONExporter.h; polly/include/polly/LinkAllPasses.h; polly/include/polly/ManualOptimizer.h; polly/include/polly/MatmulOptimizer.h; polly/include/polly/Options.h; polly/include/polly/PolyhedralInfo.h; polly/include/polly/PruneUnprofitable.h; polly/include/polly/RegisterPasses.h; polly/include/polly/ScheduleOptimizer.h; polly/include/polly/ScheduleTreeTransform.h; polly/include/polly/ScopBuilder.h; polly/include/polly/ScopDetection.h; polly/include/polly/ScopDetectionDiagnostic.h; polly/i,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:411452,Testability,test,tests,411452,kmp_wrapper_getpid.h; openmp/runtime/src/kmp_wrapper_malloc.h; openmp/runtime/src/ompd-specific.cpp; openmp/runtime/src/ompd-specific.h; openmp/runtime/src/ompt-event-specific.h; openmp/runtime/src/ompt-general.cpp; openmp/runtime/src/ompt-internal.h; openmp/runtime/src/ompt-specific.cpp; openmp/runtime/src/ompt-specific.h; openmp/runtime/src/z_Linux_util.cpp; openmp/runtime/src/z_Windows_NT-586_util.cpp; openmp/runtime/src/z_Windows_NT_util.cpp; openmp/runtime/src/thirdparty/ittnotify/ittnotify.h; openmp/runtime/src/thirdparty/ittnotify/ittnotify_config.h; openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.cpp; openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.h; openmp/runtime/src/thirdparty/ittnotify/ittnotify_types.h; openmp/runtime/src/thirdparty/ittnotify/legacy/ittnotify.h; openmp/tools/archer/ompt-tsan.cpp; openmp/tools/archer/tests/ompt/ompt-signal.h; openmp/tools/multiplex/ompt-multiplex.h; openmp/tools/multiplex/tests/ompt-signal.h; openmp/tools/multiplex/tests/custom_data_storage/second-tool.h; openmp/tools/multiplex/tests/print/first-tool.h; openmp/tools/multiplex/tests/print/second-tool.h; polly/include/polly/Canonicalization.h; polly/include/polly/CodePreparation.h; polly/include/polly/DeadCodeElimination.h; polly/include/polly/DeLICM.h; polly/include/polly/DependenceInfo.h; polly/include/polly/FlattenAlgo.h; polly/include/polly/FlattenSchedule.h; polly/include/polly/ForwardOpTree.h; polly/include/polly/JSONExporter.h; polly/include/polly/LinkAllPasses.h; polly/include/polly/ManualOptimizer.h; polly/include/polly/MatmulOptimizer.h; polly/include/polly/Options.h; polly/include/polly/PolyhedralInfo.h; polly/include/polly/PruneUnprofitable.h; polly/include/polly/RegisterPasses.h; polly/include/polly/ScheduleOptimizer.h; polly/include/polly/ScheduleTreeTransform.h; polly/include/polly/ScopBuilder.h; polly/include/polly/ScopDetection.h; polly/include/polly/ScopDetectionDiagnostic.h; polly/include/polly/ScopInfo.h; polly/include/polly/ScopPass.,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:411516,Testability,test,tests,411516,loc.h; openmp/runtime/src/ompd-specific.cpp; openmp/runtime/src/ompd-specific.h; openmp/runtime/src/ompt-event-specific.h; openmp/runtime/src/ompt-general.cpp; openmp/runtime/src/ompt-internal.h; openmp/runtime/src/ompt-specific.cpp; openmp/runtime/src/ompt-specific.h; openmp/runtime/src/z_Linux_util.cpp; openmp/runtime/src/z_Windows_NT-586_util.cpp; openmp/runtime/src/z_Windows_NT_util.cpp; openmp/runtime/src/thirdparty/ittnotify/ittnotify.h; openmp/runtime/src/thirdparty/ittnotify/ittnotify_config.h; openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.cpp; openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.h; openmp/runtime/src/thirdparty/ittnotify/ittnotify_types.h; openmp/runtime/src/thirdparty/ittnotify/legacy/ittnotify.h; openmp/tools/archer/ompt-tsan.cpp; openmp/tools/archer/tests/ompt/ompt-signal.h; openmp/tools/multiplex/ompt-multiplex.h; openmp/tools/multiplex/tests/ompt-signal.h; openmp/tools/multiplex/tests/custom_data_storage/second-tool.h; openmp/tools/multiplex/tests/print/first-tool.h; openmp/tools/multiplex/tests/print/second-tool.h; polly/include/polly/Canonicalization.h; polly/include/polly/CodePreparation.h; polly/include/polly/DeadCodeElimination.h; polly/include/polly/DeLICM.h; polly/include/polly/DependenceInfo.h; polly/include/polly/FlattenAlgo.h; polly/include/polly/FlattenSchedule.h; polly/include/polly/ForwardOpTree.h; polly/include/polly/JSONExporter.h; polly/include/polly/LinkAllPasses.h; polly/include/polly/ManualOptimizer.h; polly/include/polly/MatmulOptimizer.h; polly/include/polly/Options.h; polly/include/polly/PolyhedralInfo.h; polly/include/polly/PruneUnprofitable.h; polly/include/polly/RegisterPasses.h; polly/include/polly/ScheduleOptimizer.h; polly/include/polly/ScheduleTreeTransform.h; polly/include/polly/ScopBuilder.h; polly/include/polly/ScopDetection.h; polly/include/polly/ScopDetectionDiagnostic.h; polly/include/polly/ScopInfo.h; polly/include/polly/ScopPass.h; polly/include/polly/Simplify.h; polly/include/polly/Zo,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:411565,Testability,test,tests,411565,p/runtime/src/ompd-specific.h; openmp/runtime/src/ompt-event-specific.h; openmp/runtime/src/ompt-general.cpp; openmp/runtime/src/ompt-internal.h; openmp/runtime/src/ompt-specific.cpp; openmp/runtime/src/ompt-specific.h; openmp/runtime/src/z_Linux_util.cpp; openmp/runtime/src/z_Windows_NT-586_util.cpp; openmp/runtime/src/z_Windows_NT_util.cpp; openmp/runtime/src/thirdparty/ittnotify/ittnotify.h; openmp/runtime/src/thirdparty/ittnotify/ittnotify_config.h; openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.cpp; openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.h; openmp/runtime/src/thirdparty/ittnotify/ittnotify_types.h; openmp/runtime/src/thirdparty/ittnotify/legacy/ittnotify.h; openmp/tools/archer/ompt-tsan.cpp; openmp/tools/archer/tests/ompt/ompt-signal.h; openmp/tools/multiplex/ompt-multiplex.h; openmp/tools/multiplex/tests/ompt-signal.h; openmp/tools/multiplex/tests/custom_data_storage/second-tool.h; openmp/tools/multiplex/tests/print/first-tool.h; openmp/tools/multiplex/tests/print/second-tool.h; polly/include/polly/Canonicalization.h; polly/include/polly/CodePreparation.h; polly/include/polly/DeadCodeElimination.h; polly/include/polly/DeLICM.h; polly/include/polly/DependenceInfo.h; polly/include/polly/FlattenAlgo.h; polly/include/polly/FlattenSchedule.h; polly/include/polly/ForwardOpTree.h; polly/include/polly/JSONExporter.h; polly/include/polly/LinkAllPasses.h; polly/include/polly/ManualOptimizer.h; polly/include/polly/MatmulOptimizer.h; polly/include/polly/Options.h; polly/include/polly/PolyhedralInfo.h; polly/include/polly/PruneUnprofitable.h; polly/include/polly/RegisterPasses.h; polly/include/polly/ScheduleOptimizer.h; polly/include/polly/ScheduleTreeTransform.h; polly/include/polly/ScopBuilder.h; polly/include/polly/ScopDetection.h; polly/include/polly/ScopDetectionDiagnostic.h; polly/include/polly/ScopInfo.h; polly/include/polly/ScopPass.h; polly/include/polly/Simplify.h; polly/include/polly/ZoneAlgo.h; polly/include/polly/CodeGen/BlockGenera,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:417743,Testability,benchmark,benchmark,417743,pstl/internal/glue_algorithm_impl.h; pstl/include/pstl/internal/glue_execution_defs.h; pstl/include/pstl/internal/glue_memory_defs.h; pstl/include/pstl/internal/glue_memory_impl.h; pstl/include/pstl/internal/glue_numeric_defs.h; pstl/include/pstl/internal/glue_numeric_impl.h; pstl/include/pstl/internal/numeric_fwd.h; pstl/include/pstl/internal/parallel_backend.h; pstl/include/pstl/internal/parallel_backend_omp.h; pstl/include/pstl/internal/parallel_backend_serial.h; pstl/include/pstl/internal/parallel_backend_utils.h; pstl/include/pstl/internal/parallel_impl.h; pstl/include/pstl/internal/omp/parallel_for.h; pstl/include/pstl/internal/omp/parallel_for_each.h; pstl/include/pstl/internal/omp/parallel_invoke.h; pstl/include/pstl/internal/omp/parallel_reduce.h; pstl/include/pstl/internal/omp/parallel_scan.h; pstl/include/pstl/internal/omp/parallel_stable_partial_sort.h; pstl/include/pstl/internal/omp/parallel_transform_scan.h; pstl/include/pstl/internal/omp/util.h; third-party/benchmark/cmake/thread_safety_attributes.cpp; third-party/benchmark/src/arraysize.h; third-party/benchmark/src/benchmark_api_internal.h; third-party/benchmark/src/benchmark_register.h; third-party/benchmark/src/benchmark_runner.h; third-party/benchmark/src/check.h; third-party/benchmark/src/colorprint.h; third-party/benchmark/src/commandlineflags.h; third-party/benchmark/src/complexity.h; third-party/benchmark/src/counter.h; third-party/benchmark/src/cycleclock.h; third-party/benchmark/src/internal_macros.h; third-party/benchmark/src/log.h; third-party/benchmark/src/mutex.h; third-party/benchmark/src/perf_counters.h; third-party/benchmark/src/re.h; third-party/benchmark/src/sleep.h; third-party/benchmark/src/statistics.h; third-party/benchmark/src/string_util.h; third-party/benchmark/src/thread_manager.h; third-party/benchmark/src/thread_timer.h; third-party/benchmark/src/timers.h; utils/bazel/llvm-project-overlay/clang/include/clang/Config/config.h; utils/bazel/llvm-project-overlay/llvm/include/ll,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:417801,Testability,benchmark,benchmark,417801,lgorithm_impl.h; pstl/include/pstl/internal/glue_execution_defs.h; pstl/include/pstl/internal/glue_memory_defs.h; pstl/include/pstl/internal/glue_memory_impl.h; pstl/include/pstl/internal/glue_numeric_defs.h; pstl/include/pstl/internal/glue_numeric_impl.h; pstl/include/pstl/internal/numeric_fwd.h; pstl/include/pstl/internal/parallel_backend.h; pstl/include/pstl/internal/parallel_backend_omp.h; pstl/include/pstl/internal/parallel_backend_serial.h; pstl/include/pstl/internal/parallel_backend_utils.h; pstl/include/pstl/internal/parallel_impl.h; pstl/include/pstl/internal/omp/parallel_for.h; pstl/include/pstl/internal/omp/parallel_for_each.h; pstl/include/pstl/internal/omp/parallel_invoke.h; pstl/include/pstl/internal/omp/parallel_reduce.h; pstl/include/pstl/internal/omp/parallel_scan.h; pstl/include/pstl/internal/omp/parallel_stable_partial_sort.h; pstl/include/pstl/internal/omp/parallel_transform_scan.h; pstl/include/pstl/internal/omp/util.h; third-party/benchmark/cmake/thread_safety_attributes.cpp; third-party/benchmark/src/arraysize.h; third-party/benchmark/src/benchmark_api_internal.h; third-party/benchmark/src/benchmark_register.h; third-party/benchmark/src/benchmark_runner.h; third-party/benchmark/src/check.h; third-party/benchmark/src/colorprint.h; third-party/benchmark/src/commandlineflags.h; third-party/benchmark/src/complexity.h; third-party/benchmark/src/counter.h; third-party/benchmark/src/cycleclock.h; third-party/benchmark/src/internal_macros.h; third-party/benchmark/src/log.h; third-party/benchmark/src/mutex.h; third-party/benchmark/src/perf_counters.h; third-party/benchmark/src/re.h; third-party/benchmark/src/sleep.h; third-party/benchmark/src/statistics.h; third-party/benchmark/src/string_util.h; third-party/benchmark/src/thread_manager.h; third-party/benchmark/src/thread_timer.h; third-party/benchmark/src/timers.h; utils/bazel/llvm-project-overlay/clang/include/clang/Config/config.h; utils/bazel/llvm-project-overlay/llvm/include/llvm/Config/config.h; ,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:417840,Testability,benchmark,benchmark,417840,lgorithm_impl.h; pstl/include/pstl/internal/glue_execution_defs.h; pstl/include/pstl/internal/glue_memory_defs.h; pstl/include/pstl/internal/glue_memory_impl.h; pstl/include/pstl/internal/glue_numeric_defs.h; pstl/include/pstl/internal/glue_numeric_impl.h; pstl/include/pstl/internal/numeric_fwd.h; pstl/include/pstl/internal/parallel_backend.h; pstl/include/pstl/internal/parallel_backend_omp.h; pstl/include/pstl/internal/parallel_backend_serial.h; pstl/include/pstl/internal/parallel_backend_utils.h; pstl/include/pstl/internal/parallel_impl.h; pstl/include/pstl/internal/omp/parallel_for.h; pstl/include/pstl/internal/omp/parallel_for_each.h; pstl/include/pstl/internal/omp/parallel_invoke.h; pstl/include/pstl/internal/omp/parallel_reduce.h; pstl/include/pstl/internal/omp/parallel_scan.h; pstl/include/pstl/internal/omp/parallel_stable_partial_sort.h; pstl/include/pstl/internal/omp/parallel_transform_scan.h; pstl/include/pstl/internal/omp/util.h; third-party/benchmark/cmake/thread_safety_attributes.cpp; third-party/benchmark/src/arraysize.h; third-party/benchmark/src/benchmark_api_internal.h; third-party/benchmark/src/benchmark_register.h; third-party/benchmark/src/benchmark_runner.h; third-party/benchmark/src/check.h; third-party/benchmark/src/colorprint.h; third-party/benchmark/src/commandlineflags.h; third-party/benchmark/src/complexity.h; third-party/benchmark/src/counter.h; third-party/benchmark/src/cycleclock.h; third-party/benchmark/src/internal_macros.h; third-party/benchmark/src/log.h; third-party/benchmark/src/mutex.h; third-party/benchmark/src/perf_counters.h; third-party/benchmark/src/re.h; third-party/benchmark/src/sleep.h; third-party/benchmark/src/statistics.h; third-party/benchmark/src/string_util.h; third-party/benchmark/src/thread_manager.h; third-party/benchmark/src/thread_timer.h; third-party/benchmark/src/timers.h; utils/bazel/llvm-project-overlay/clang/include/clang/Config/config.h; utils/bazel/llvm-project-overlay/llvm/include/llvm/Config/config.h; ,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:417892,Testability,benchmark,benchmark,417892,lgorithm_impl.h; pstl/include/pstl/internal/glue_execution_defs.h; pstl/include/pstl/internal/glue_memory_defs.h; pstl/include/pstl/internal/glue_memory_impl.h; pstl/include/pstl/internal/glue_numeric_defs.h; pstl/include/pstl/internal/glue_numeric_impl.h; pstl/include/pstl/internal/numeric_fwd.h; pstl/include/pstl/internal/parallel_backend.h; pstl/include/pstl/internal/parallel_backend_omp.h; pstl/include/pstl/internal/parallel_backend_serial.h; pstl/include/pstl/internal/parallel_backend_utils.h; pstl/include/pstl/internal/parallel_impl.h; pstl/include/pstl/internal/omp/parallel_for.h; pstl/include/pstl/internal/omp/parallel_for_each.h; pstl/include/pstl/internal/omp/parallel_invoke.h; pstl/include/pstl/internal/omp/parallel_reduce.h; pstl/include/pstl/internal/omp/parallel_scan.h; pstl/include/pstl/internal/omp/parallel_stable_partial_sort.h; pstl/include/pstl/internal/omp/parallel_transform_scan.h; pstl/include/pstl/internal/omp/util.h; third-party/benchmark/cmake/thread_safety_attributes.cpp; third-party/benchmark/src/arraysize.h; third-party/benchmark/src/benchmark_api_internal.h; third-party/benchmark/src/benchmark_register.h; third-party/benchmark/src/benchmark_runner.h; third-party/benchmark/src/check.h; third-party/benchmark/src/colorprint.h; third-party/benchmark/src/commandlineflags.h; third-party/benchmark/src/complexity.h; third-party/benchmark/src/counter.h; third-party/benchmark/src/cycleclock.h; third-party/benchmark/src/internal_macros.h; third-party/benchmark/src/log.h; third-party/benchmark/src/mutex.h; third-party/benchmark/src/perf_counters.h; third-party/benchmark/src/re.h; third-party/benchmark/src/sleep.h; third-party/benchmark/src/statistics.h; third-party/benchmark/src/string_util.h; third-party/benchmark/src/thread_manager.h; third-party/benchmark/src/thread_timer.h; third-party/benchmark/src/timers.h; utils/bazel/llvm-project-overlay/clang/include/clang/Config/config.h; utils/bazel/llvm-project-overlay/llvm/include/llvm/Config/config.h; ,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:417940,Testability,benchmark,benchmark,417940,lgorithm_impl.h; pstl/include/pstl/internal/glue_execution_defs.h; pstl/include/pstl/internal/glue_memory_defs.h; pstl/include/pstl/internal/glue_memory_impl.h; pstl/include/pstl/internal/glue_numeric_defs.h; pstl/include/pstl/internal/glue_numeric_impl.h; pstl/include/pstl/internal/numeric_fwd.h; pstl/include/pstl/internal/parallel_backend.h; pstl/include/pstl/internal/parallel_backend_omp.h; pstl/include/pstl/internal/parallel_backend_serial.h; pstl/include/pstl/internal/parallel_backend_utils.h; pstl/include/pstl/internal/parallel_impl.h; pstl/include/pstl/internal/omp/parallel_for.h; pstl/include/pstl/internal/omp/parallel_for_each.h; pstl/include/pstl/internal/omp/parallel_invoke.h; pstl/include/pstl/internal/omp/parallel_reduce.h; pstl/include/pstl/internal/omp/parallel_scan.h; pstl/include/pstl/internal/omp/parallel_stable_partial_sort.h; pstl/include/pstl/internal/omp/parallel_transform_scan.h; pstl/include/pstl/internal/omp/util.h; third-party/benchmark/cmake/thread_safety_attributes.cpp; third-party/benchmark/src/arraysize.h; third-party/benchmark/src/benchmark_api_internal.h; third-party/benchmark/src/benchmark_register.h; third-party/benchmark/src/benchmark_runner.h; third-party/benchmark/src/check.h; third-party/benchmark/src/colorprint.h; third-party/benchmark/src/commandlineflags.h; third-party/benchmark/src/complexity.h; third-party/benchmark/src/counter.h; third-party/benchmark/src/cycleclock.h; third-party/benchmark/src/internal_macros.h; third-party/benchmark/src/log.h; third-party/benchmark/src/mutex.h; third-party/benchmark/src/perf_counters.h; third-party/benchmark/src/re.h; third-party/benchmark/src/sleep.h; third-party/benchmark/src/statistics.h; third-party/benchmark/src/string_util.h; third-party/benchmark/src/thread_manager.h; third-party/benchmark/src/thread_timer.h; third-party/benchmark/src/timers.h; utils/bazel/llvm-project-overlay/clang/include/clang/Config/config.h; utils/bazel/llvm-project-overlay/llvm/include/llvm/Config/config.h; ,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:417986,Testability,benchmark,benchmark,417986,lgorithm_impl.h; pstl/include/pstl/internal/glue_execution_defs.h; pstl/include/pstl/internal/glue_memory_defs.h; pstl/include/pstl/internal/glue_memory_impl.h; pstl/include/pstl/internal/glue_numeric_defs.h; pstl/include/pstl/internal/glue_numeric_impl.h; pstl/include/pstl/internal/numeric_fwd.h; pstl/include/pstl/internal/parallel_backend.h; pstl/include/pstl/internal/parallel_backend_omp.h; pstl/include/pstl/internal/parallel_backend_serial.h; pstl/include/pstl/internal/parallel_backend_utils.h; pstl/include/pstl/internal/parallel_impl.h; pstl/include/pstl/internal/omp/parallel_for.h; pstl/include/pstl/internal/omp/parallel_for_each.h; pstl/include/pstl/internal/omp/parallel_invoke.h; pstl/include/pstl/internal/omp/parallel_reduce.h; pstl/include/pstl/internal/omp/parallel_scan.h; pstl/include/pstl/internal/omp/parallel_stable_partial_sort.h; pstl/include/pstl/internal/omp/parallel_transform_scan.h; pstl/include/pstl/internal/omp/util.h; third-party/benchmark/cmake/thread_safety_attributes.cpp; third-party/benchmark/src/arraysize.h; third-party/benchmark/src/benchmark_api_internal.h; third-party/benchmark/src/benchmark_register.h; third-party/benchmark/src/benchmark_runner.h; third-party/benchmark/src/check.h; third-party/benchmark/src/colorprint.h; third-party/benchmark/src/commandlineflags.h; third-party/benchmark/src/complexity.h; third-party/benchmark/src/counter.h; third-party/benchmark/src/cycleclock.h; third-party/benchmark/src/internal_macros.h; third-party/benchmark/src/log.h; third-party/benchmark/src/mutex.h; third-party/benchmark/src/perf_counters.h; third-party/benchmark/src/re.h; third-party/benchmark/src/sleep.h; third-party/benchmark/src/statistics.h; third-party/benchmark/src/string_util.h; third-party/benchmark/src/thread_manager.h; third-party/benchmark/src/thread_timer.h; third-party/benchmark/src/timers.h; utils/bazel/llvm-project-overlay/clang/include/clang/Config/config.h; utils/bazel/llvm-project-overlay/llvm/include/llvm/Config/config.h; ,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:418021,Testability,benchmark,benchmark,418021,lgorithm_impl.h; pstl/include/pstl/internal/glue_execution_defs.h; pstl/include/pstl/internal/glue_memory_defs.h; pstl/include/pstl/internal/glue_memory_impl.h; pstl/include/pstl/internal/glue_numeric_defs.h; pstl/include/pstl/internal/glue_numeric_impl.h; pstl/include/pstl/internal/numeric_fwd.h; pstl/include/pstl/internal/parallel_backend.h; pstl/include/pstl/internal/parallel_backend_omp.h; pstl/include/pstl/internal/parallel_backend_serial.h; pstl/include/pstl/internal/parallel_backend_utils.h; pstl/include/pstl/internal/parallel_impl.h; pstl/include/pstl/internal/omp/parallel_for.h; pstl/include/pstl/internal/omp/parallel_for_each.h; pstl/include/pstl/internal/omp/parallel_invoke.h; pstl/include/pstl/internal/omp/parallel_reduce.h; pstl/include/pstl/internal/omp/parallel_scan.h; pstl/include/pstl/internal/omp/parallel_stable_partial_sort.h; pstl/include/pstl/internal/omp/parallel_transform_scan.h; pstl/include/pstl/internal/omp/util.h; third-party/benchmark/cmake/thread_safety_attributes.cpp; third-party/benchmark/src/arraysize.h; third-party/benchmark/src/benchmark_api_internal.h; third-party/benchmark/src/benchmark_register.h; third-party/benchmark/src/benchmark_runner.h; third-party/benchmark/src/check.h; third-party/benchmark/src/colorprint.h; third-party/benchmark/src/commandlineflags.h; third-party/benchmark/src/complexity.h; third-party/benchmark/src/counter.h; third-party/benchmark/src/cycleclock.h; third-party/benchmark/src/internal_macros.h; third-party/benchmark/src/log.h; third-party/benchmark/src/mutex.h; third-party/benchmark/src/perf_counters.h; third-party/benchmark/src/re.h; third-party/benchmark/src/sleep.h; third-party/benchmark/src/statistics.h; third-party/benchmark/src/string_util.h; third-party/benchmark/src/thread_manager.h; third-party/benchmark/src/thread_timer.h; third-party/benchmark/src/timers.h; utils/bazel/llvm-project-overlay/clang/include/clang/Config/config.h; utils/bazel/llvm-project-overlay/llvm/include/llvm/Config/config.h; ,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:418061,Testability,benchmark,benchmark,418061,lgorithm_impl.h; pstl/include/pstl/internal/glue_execution_defs.h; pstl/include/pstl/internal/glue_memory_defs.h; pstl/include/pstl/internal/glue_memory_impl.h; pstl/include/pstl/internal/glue_numeric_defs.h; pstl/include/pstl/internal/glue_numeric_impl.h; pstl/include/pstl/internal/numeric_fwd.h; pstl/include/pstl/internal/parallel_backend.h; pstl/include/pstl/internal/parallel_backend_omp.h; pstl/include/pstl/internal/parallel_backend_serial.h; pstl/include/pstl/internal/parallel_backend_utils.h; pstl/include/pstl/internal/parallel_impl.h; pstl/include/pstl/internal/omp/parallel_for.h; pstl/include/pstl/internal/omp/parallel_for_each.h; pstl/include/pstl/internal/omp/parallel_invoke.h; pstl/include/pstl/internal/omp/parallel_reduce.h; pstl/include/pstl/internal/omp/parallel_scan.h; pstl/include/pstl/internal/omp/parallel_stable_partial_sort.h; pstl/include/pstl/internal/omp/parallel_transform_scan.h; pstl/include/pstl/internal/omp/util.h; third-party/benchmark/cmake/thread_safety_attributes.cpp; third-party/benchmark/src/arraysize.h; third-party/benchmark/src/benchmark_api_internal.h; third-party/benchmark/src/benchmark_register.h; third-party/benchmark/src/benchmark_runner.h; third-party/benchmark/src/check.h; third-party/benchmark/src/colorprint.h; third-party/benchmark/src/commandlineflags.h; third-party/benchmark/src/complexity.h; third-party/benchmark/src/counter.h; third-party/benchmark/src/cycleclock.h; third-party/benchmark/src/internal_macros.h; third-party/benchmark/src/log.h; third-party/benchmark/src/mutex.h; third-party/benchmark/src/perf_counters.h; third-party/benchmark/src/re.h; third-party/benchmark/src/sleep.h; third-party/benchmark/src/statistics.h; third-party/benchmark/src/string_util.h; third-party/benchmark/src/thread_manager.h; third-party/benchmark/src/thread_timer.h; third-party/benchmark/src/timers.h; utils/bazel/llvm-project-overlay/clang/include/clang/Config/config.h; utils/bazel/llvm-project-overlay/llvm/include/llvm/Config/config.h; ,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:418107,Testability,benchmark,benchmark,418107,lgorithm_impl.h; pstl/include/pstl/internal/glue_execution_defs.h; pstl/include/pstl/internal/glue_memory_defs.h; pstl/include/pstl/internal/glue_memory_impl.h; pstl/include/pstl/internal/glue_numeric_defs.h; pstl/include/pstl/internal/glue_numeric_impl.h; pstl/include/pstl/internal/numeric_fwd.h; pstl/include/pstl/internal/parallel_backend.h; pstl/include/pstl/internal/parallel_backend_omp.h; pstl/include/pstl/internal/parallel_backend_serial.h; pstl/include/pstl/internal/parallel_backend_utils.h; pstl/include/pstl/internal/parallel_impl.h; pstl/include/pstl/internal/omp/parallel_for.h; pstl/include/pstl/internal/omp/parallel_for_each.h; pstl/include/pstl/internal/omp/parallel_invoke.h; pstl/include/pstl/internal/omp/parallel_reduce.h; pstl/include/pstl/internal/omp/parallel_scan.h; pstl/include/pstl/internal/omp/parallel_stable_partial_sort.h; pstl/include/pstl/internal/omp/parallel_transform_scan.h; pstl/include/pstl/internal/omp/util.h; third-party/benchmark/cmake/thread_safety_attributes.cpp; third-party/benchmark/src/arraysize.h; third-party/benchmark/src/benchmark_api_internal.h; third-party/benchmark/src/benchmark_register.h; third-party/benchmark/src/benchmark_runner.h; third-party/benchmark/src/check.h; third-party/benchmark/src/colorprint.h; third-party/benchmark/src/commandlineflags.h; third-party/benchmark/src/complexity.h; third-party/benchmark/src/counter.h; third-party/benchmark/src/cycleclock.h; third-party/benchmark/src/internal_macros.h; third-party/benchmark/src/log.h; third-party/benchmark/src/mutex.h; third-party/benchmark/src/perf_counters.h; third-party/benchmark/src/re.h; third-party/benchmark/src/sleep.h; third-party/benchmark/src/statistics.h; third-party/benchmark/src/string_util.h; third-party/benchmark/src/thread_manager.h; third-party/benchmark/src/thread_timer.h; third-party/benchmark/src/timers.h; utils/bazel/llvm-project-overlay/clang/include/clang/Config/config.h; utils/bazel/llvm-project-overlay/llvm/include/llvm/Config/config.h; ,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:418147,Testability,benchmark,benchmark,418147,lgorithm_impl.h; pstl/include/pstl/internal/glue_execution_defs.h; pstl/include/pstl/internal/glue_memory_defs.h; pstl/include/pstl/internal/glue_memory_impl.h; pstl/include/pstl/internal/glue_numeric_defs.h; pstl/include/pstl/internal/glue_numeric_impl.h; pstl/include/pstl/internal/numeric_fwd.h; pstl/include/pstl/internal/parallel_backend.h; pstl/include/pstl/internal/parallel_backend_omp.h; pstl/include/pstl/internal/parallel_backend_serial.h; pstl/include/pstl/internal/parallel_backend_utils.h; pstl/include/pstl/internal/parallel_impl.h; pstl/include/pstl/internal/omp/parallel_for.h; pstl/include/pstl/internal/omp/parallel_for_each.h; pstl/include/pstl/internal/omp/parallel_invoke.h; pstl/include/pstl/internal/omp/parallel_reduce.h; pstl/include/pstl/internal/omp/parallel_scan.h; pstl/include/pstl/internal/omp/parallel_stable_partial_sort.h; pstl/include/pstl/internal/omp/parallel_transform_scan.h; pstl/include/pstl/internal/omp/util.h; third-party/benchmark/cmake/thread_safety_attributes.cpp; third-party/benchmark/src/arraysize.h; third-party/benchmark/src/benchmark_api_internal.h; third-party/benchmark/src/benchmark_register.h; third-party/benchmark/src/benchmark_runner.h; third-party/benchmark/src/check.h; third-party/benchmark/src/colorprint.h; third-party/benchmark/src/commandlineflags.h; third-party/benchmark/src/complexity.h; third-party/benchmark/src/counter.h; third-party/benchmark/src/cycleclock.h; third-party/benchmark/src/internal_macros.h; third-party/benchmark/src/log.h; third-party/benchmark/src/mutex.h; third-party/benchmark/src/perf_counters.h; third-party/benchmark/src/re.h; third-party/benchmark/src/sleep.h; third-party/benchmark/src/statistics.h; third-party/benchmark/src/string_util.h; third-party/benchmark/src/thread_manager.h; third-party/benchmark/src/thread_timer.h; third-party/benchmark/src/timers.h; utils/bazel/llvm-project-overlay/clang/include/clang/Config/config.h; utils/bazel/llvm-project-overlay/llvm/include/llvm/Config/config.h; ,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:418184,Testability,benchmark,benchmark,418184,lgorithm_impl.h; pstl/include/pstl/internal/glue_execution_defs.h; pstl/include/pstl/internal/glue_memory_defs.h; pstl/include/pstl/internal/glue_memory_impl.h; pstl/include/pstl/internal/glue_numeric_defs.h; pstl/include/pstl/internal/glue_numeric_impl.h; pstl/include/pstl/internal/numeric_fwd.h; pstl/include/pstl/internal/parallel_backend.h; pstl/include/pstl/internal/parallel_backend_omp.h; pstl/include/pstl/internal/parallel_backend_serial.h; pstl/include/pstl/internal/parallel_backend_utils.h; pstl/include/pstl/internal/parallel_impl.h; pstl/include/pstl/internal/omp/parallel_for.h; pstl/include/pstl/internal/omp/parallel_for_each.h; pstl/include/pstl/internal/omp/parallel_invoke.h; pstl/include/pstl/internal/omp/parallel_reduce.h; pstl/include/pstl/internal/omp/parallel_scan.h; pstl/include/pstl/internal/omp/parallel_stable_partial_sort.h; pstl/include/pstl/internal/omp/parallel_transform_scan.h; pstl/include/pstl/internal/omp/util.h; third-party/benchmark/cmake/thread_safety_attributes.cpp; third-party/benchmark/src/arraysize.h; third-party/benchmark/src/benchmark_api_internal.h; third-party/benchmark/src/benchmark_register.h; third-party/benchmark/src/benchmark_runner.h; third-party/benchmark/src/check.h; third-party/benchmark/src/colorprint.h; third-party/benchmark/src/commandlineflags.h; third-party/benchmark/src/complexity.h; third-party/benchmark/src/counter.h; third-party/benchmark/src/cycleclock.h; third-party/benchmark/src/internal_macros.h; third-party/benchmark/src/log.h; third-party/benchmark/src/mutex.h; third-party/benchmark/src/perf_counters.h; third-party/benchmark/src/re.h; third-party/benchmark/src/sleep.h; third-party/benchmark/src/statistics.h; third-party/benchmark/src/string_util.h; third-party/benchmark/src/thread_manager.h; third-party/benchmark/src/thread_timer.h; third-party/benchmark/src/timers.h; utils/bazel/llvm-project-overlay/clang/include/clang/Config/config.h; utils/bazel/llvm-project-overlay/llvm/include/llvm/Config/config.h; ,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:418224,Testability,benchmark,benchmark,418224,lgorithm_impl.h; pstl/include/pstl/internal/glue_execution_defs.h; pstl/include/pstl/internal/glue_memory_defs.h; pstl/include/pstl/internal/glue_memory_impl.h; pstl/include/pstl/internal/glue_numeric_defs.h; pstl/include/pstl/internal/glue_numeric_impl.h; pstl/include/pstl/internal/numeric_fwd.h; pstl/include/pstl/internal/parallel_backend.h; pstl/include/pstl/internal/parallel_backend_omp.h; pstl/include/pstl/internal/parallel_backend_serial.h; pstl/include/pstl/internal/parallel_backend_utils.h; pstl/include/pstl/internal/parallel_impl.h; pstl/include/pstl/internal/omp/parallel_for.h; pstl/include/pstl/internal/omp/parallel_for_each.h; pstl/include/pstl/internal/omp/parallel_invoke.h; pstl/include/pstl/internal/omp/parallel_reduce.h; pstl/include/pstl/internal/omp/parallel_scan.h; pstl/include/pstl/internal/omp/parallel_stable_partial_sort.h; pstl/include/pstl/internal/omp/parallel_transform_scan.h; pstl/include/pstl/internal/omp/util.h; third-party/benchmark/cmake/thread_safety_attributes.cpp; third-party/benchmark/src/arraysize.h; third-party/benchmark/src/benchmark_api_internal.h; third-party/benchmark/src/benchmark_register.h; third-party/benchmark/src/benchmark_runner.h; third-party/benchmark/src/check.h; third-party/benchmark/src/colorprint.h; third-party/benchmark/src/commandlineflags.h; third-party/benchmark/src/complexity.h; third-party/benchmark/src/counter.h; third-party/benchmark/src/cycleclock.h; third-party/benchmark/src/internal_macros.h; third-party/benchmark/src/log.h; third-party/benchmark/src/mutex.h; third-party/benchmark/src/perf_counters.h; third-party/benchmark/src/re.h; third-party/benchmark/src/sleep.h; third-party/benchmark/src/statistics.h; third-party/benchmark/src/string_util.h; third-party/benchmark/src/thread_manager.h; third-party/benchmark/src/thread_timer.h; third-party/benchmark/src/timers.h; utils/bazel/llvm-project-overlay/clang/include/clang/Config/config.h; utils/bazel/llvm-project-overlay/llvm/include/llvm/Config/config.h; ,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:418269,Testability,benchmark,benchmark,418269,lgorithm_impl.h; pstl/include/pstl/internal/glue_execution_defs.h; pstl/include/pstl/internal/glue_memory_defs.h; pstl/include/pstl/internal/glue_memory_impl.h; pstl/include/pstl/internal/glue_numeric_defs.h; pstl/include/pstl/internal/glue_numeric_impl.h; pstl/include/pstl/internal/numeric_fwd.h; pstl/include/pstl/internal/parallel_backend.h; pstl/include/pstl/internal/parallel_backend_omp.h; pstl/include/pstl/internal/parallel_backend_serial.h; pstl/include/pstl/internal/parallel_backend_utils.h; pstl/include/pstl/internal/parallel_impl.h; pstl/include/pstl/internal/omp/parallel_for.h; pstl/include/pstl/internal/omp/parallel_for_each.h; pstl/include/pstl/internal/omp/parallel_invoke.h; pstl/include/pstl/internal/omp/parallel_reduce.h; pstl/include/pstl/internal/omp/parallel_scan.h; pstl/include/pstl/internal/omp/parallel_stable_partial_sort.h; pstl/include/pstl/internal/omp/parallel_transform_scan.h; pstl/include/pstl/internal/omp/util.h; third-party/benchmark/cmake/thread_safety_attributes.cpp; third-party/benchmark/src/arraysize.h; third-party/benchmark/src/benchmark_api_internal.h; third-party/benchmark/src/benchmark_register.h; third-party/benchmark/src/benchmark_runner.h; third-party/benchmark/src/check.h; third-party/benchmark/src/colorprint.h; third-party/benchmark/src/commandlineflags.h; third-party/benchmark/src/complexity.h; third-party/benchmark/src/counter.h; third-party/benchmark/src/cycleclock.h; third-party/benchmark/src/internal_macros.h; third-party/benchmark/src/log.h; third-party/benchmark/src/mutex.h; third-party/benchmark/src/perf_counters.h; third-party/benchmark/src/re.h; third-party/benchmark/src/sleep.h; third-party/benchmark/src/statistics.h; third-party/benchmark/src/string_util.h; third-party/benchmark/src/thread_manager.h; third-party/benchmark/src/thread_timer.h; third-party/benchmark/src/timers.h; utils/bazel/llvm-project-overlay/clang/include/clang/Config/config.h; utils/bazel/llvm-project-overlay/llvm/include/llvm/Config/config.h; ,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:418283,Testability,log,log,418283,lgorithm_impl.h; pstl/include/pstl/internal/glue_execution_defs.h; pstl/include/pstl/internal/glue_memory_defs.h; pstl/include/pstl/internal/glue_memory_impl.h; pstl/include/pstl/internal/glue_numeric_defs.h; pstl/include/pstl/internal/glue_numeric_impl.h; pstl/include/pstl/internal/numeric_fwd.h; pstl/include/pstl/internal/parallel_backend.h; pstl/include/pstl/internal/parallel_backend_omp.h; pstl/include/pstl/internal/parallel_backend_serial.h; pstl/include/pstl/internal/parallel_backend_utils.h; pstl/include/pstl/internal/parallel_impl.h; pstl/include/pstl/internal/omp/parallel_for.h; pstl/include/pstl/internal/omp/parallel_for_each.h; pstl/include/pstl/internal/omp/parallel_invoke.h; pstl/include/pstl/internal/omp/parallel_reduce.h; pstl/include/pstl/internal/omp/parallel_scan.h; pstl/include/pstl/internal/omp/parallel_stable_partial_sort.h; pstl/include/pstl/internal/omp/parallel_transform_scan.h; pstl/include/pstl/internal/omp/util.h; third-party/benchmark/cmake/thread_safety_attributes.cpp; third-party/benchmark/src/arraysize.h; third-party/benchmark/src/benchmark_api_internal.h; third-party/benchmark/src/benchmark_register.h; third-party/benchmark/src/benchmark_runner.h; third-party/benchmark/src/check.h; third-party/benchmark/src/colorprint.h; third-party/benchmark/src/commandlineflags.h; third-party/benchmark/src/complexity.h; third-party/benchmark/src/counter.h; third-party/benchmark/src/cycleclock.h; third-party/benchmark/src/internal_macros.h; third-party/benchmark/src/log.h; third-party/benchmark/src/mutex.h; third-party/benchmark/src/perf_counters.h; third-party/benchmark/src/re.h; third-party/benchmark/src/sleep.h; third-party/benchmark/src/statistics.h; third-party/benchmark/src/string_util.h; third-party/benchmark/src/thread_manager.h; third-party/benchmark/src/thread_timer.h; third-party/benchmark/src/timers.h; utils/bazel/llvm-project-overlay/clang/include/clang/Config/config.h; utils/bazel/llvm-project-overlay/llvm/include/llvm/Config/config.h; ,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:418302,Testability,benchmark,benchmark,418302,lgorithm_impl.h; pstl/include/pstl/internal/glue_execution_defs.h; pstl/include/pstl/internal/glue_memory_defs.h; pstl/include/pstl/internal/glue_memory_impl.h; pstl/include/pstl/internal/glue_numeric_defs.h; pstl/include/pstl/internal/glue_numeric_impl.h; pstl/include/pstl/internal/numeric_fwd.h; pstl/include/pstl/internal/parallel_backend.h; pstl/include/pstl/internal/parallel_backend_omp.h; pstl/include/pstl/internal/parallel_backend_serial.h; pstl/include/pstl/internal/parallel_backend_utils.h; pstl/include/pstl/internal/parallel_impl.h; pstl/include/pstl/internal/omp/parallel_for.h; pstl/include/pstl/internal/omp/parallel_for_each.h; pstl/include/pstl/internal/omp/parallel_invoke.h; pstl/include/pstl/internal/omp/parallel_reduce.h; pstl/include/pstl/internal/omp/parallel_scan.h; pstl/include/pstl/internal/omp/parallel_stable_partial_sort.h; pstl/include/pstl/internal/omp/parallel_transform_scan.h; pstl/include/pstl/internal/omp/util.h; third-party/benchmark/cmake/thread_safety_attributes.cpp; third-party/benchmark/src/arraysize.h; third-party/benchmark/src/benchmark_api_internal.h; third-party/benchmark/src/benchmark_register.h; third-party/benchmark/src/benchmark_runner.h; third-party/benchmark/src/check.h; third-party/benchmark/src/colorprint.h; third-party/benchmark/src/commandlineflags.h; third-party/benchmark/src/complexity.h; third-party/benchmark/src/counter.h; third-party/benchmark/src/cycleclock.h; third-party/benchmark/src/internal_macros.h; third-party/benchmark/src/log.h; third-party/benchmark/src/mutex.h; third-party/benchmark/src/perf_counters.h; third-party/benchmark/src/re.h; third-party/benchmark/src/sleep.h; third-party/benchmark/src/statistics.h; third-party/benchmark/src/string_util.h; third-party/benchmark/src/thread_manager.h; third-party/benchmark/src/thread_timer.h; third-party/benchmark/src/timers.h; utils/bazel/llvm-project-overlay/clang/include/clang/Config/config.h; utils/bazel/llvm-project-overlay/llvm/include/llvm/Config/config.h; ,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:418337,Testability,benchmark,benchmark,418337,lgorithm_impl.h; pstl/include/pstl/internal/glue_execution_defs.h; pstl/include/pstl/internal/glue_memory_defs.h; pstl/include/pstl/internal/glue_memory_impl.h; pstl/include/pstl/internal/glue_numeric_defs.h; pstl/include/pstl/internal/glue_numeric_impl.h; pstl/include/pstl/internal/numeric_fwd.h; pstl/include/pstl/internal/parallel_backend.h; pstl/include/pstl/internal/parallel_backend_omp.h; pstl/include/pstl/internal/parallel_backend_serial.h; pstl/include/pstl/internal/parallel_backend_utils.h; pstl/include/pstl/internal/parallel_impl.h; pstl/include/pstl/internal/omp/parallel_for.h; pstl/include/pstl/internal/omp/parallel_for_each.h; pstl/include/pstl/internal/omp/parallel_invoke.h; pstl/include/pstl/internal/omp/parallel_reduce.h; pstl/include/pstl/internal/omp/parallel_scan.h; pstl/include/pstl/internal/omp/parallel_stable_partial_sort.h; pstl/include/pstl/internal/omp/parallel_transform_scan.h; pstl/include/pstl/internal/omp/util.h; third-party/benchmark/cmake/thread_safety_attributes.cpp; third-party/benchmark/src/arraysize.h; third-party/benchmark/src/benchmark_api_internal.h; third-party/benchmark/src/benchmark_register.h; third-party/benchmark/src/benchmark_runner.h; third-party/benchmark/src/check.h; third-party/benchmark/src/colorprint.h; third-party/benchmark/src/commandlineflags.h; third-party/benchmark/src/complexity.h; third-party/benchmark/src/counter.h; third-party/benchmark/src/cycleclock.h; third-party/benchmark/src/internal_macros.h; third-party/benchmark/src/log.h; third-party/benchmark/src/mutex.h; third-party/benchmark/src/perf_counters.h; third-party/benchmark/src/re.h; third-party/benchmark/src/sleep.h; third-party/benchmark/src/statistics.h; third-party/benchmark/src/string_util.h; third-party/benchmark/src/thread_manager.h; third-party/benchmark/src/thread_timer.h; third-party/benchmark/src/timers.h; utils/bazel/llvm-project-overlay/clang/include/clang/Config/config.h; utils/bazel/llvm-project-overlay/llvm/include/llvm/Config/config.h; ,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:418380,Testability,benchmark,benchmark,418380,lgorithm_impl.h; pstl/include/pstl/internal/glue_execution_defs.h; pstl/include/pstl/internal/glue_memory_defs.h; pstl/include/pstl/internal/glue_memory_impl.h; pstl/include/pstl/internal/glue_numeric_defs.h; pstl/include/pstl/internal/glue_numeric_impl.h; pstl/include/pstl/internal/numeric_fwd.h; pstl/include/pstl/internal/parallel_backend.h; pstl/include/pstl/internal/parallel_backend_omp.h; pstl/include/pstl/internal/parallel_backend_serial.h; pstl/include/pstl/internal/parallel_backend_utils.h; pstl/include/pstl/internal/parallel_impl.h; pstl/include/pstl/internal/omp/parallel_for.h; pstl/include/pstl/internal/omp/parallel_for_each.h; pstl/include/pstl/internal/omp/parallel_invoke.h; pstl/include/pstl/internal/omp/parallel_reduce.h; pstl/include/pstl/internal/omp/parallel_scan.h; pstl/include/pstl/internal/omp/parallel_stable_partial_sort.h; pstl/include/pstl/internal/omp/parallel_transform_scan.h; pstl/include/pstl/internal/omp/util.h; third-party/benchmark/cmake/thread_safety_attributes.cpp; third-party/benchmark/src/arraysize.h; third-party/benchmark/src/benchmark_api_internal.h; third-party/benchmark/src/benchmark_register.h; third-party/benchmark/src/benchmark_runner.h; third-party/benchmark/src/check.h; third-party/benchmark/src/colorprint.h; third-party/benchmark/src/commandlineflags.h; third-party/benchmark/src/complexity.h; third-party/benchmark/src/counter.h; third-party/benchmark/src/cycleclock.h; third-party/benchmark/src/internal_macros.h; third-party/benchmark/src/log.h; third-party/benchmark/src/mutex.h; third-party/benchmark/src/perf_counters.h; third-party/benchmark/src/re.h; third-party/benchmark/src/sleep.h; third-party/benchmark/src/statistics.h; third-party/benchmark/src/string_util.h; third-party/benchmark/src/thread_manager.h; third-party/benchmark/src/thread_timer.h; third-party/benchmark/src/timers.h; utils/bazel/llvm-project-overlay/clang/include/clang/Config/config.h; utils/bazel/llvm-project-overlay/llvm/include/llvm/Config/config.h; ,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:418412,Testability,benchmark,benchmark,418412,lgorithm_impl.h; pstl/include/pstl/internal/glue_execution_defs.h; pstl/include/pstl/internal/glue_memory_defs.h; pstl/include/pstl/internal/glue_memory_impl.h; pstl/include/pstl/internal/glue_numeric_defs.h; pstl/include/pstl/internal/glue_numeric_impl.h; pstl/include/pstl/internal/numeric_fwd.h; pstl/include/pstl/internal/parallel_backend.h; pstl/include/pstl/internal/parallel_backend_omp.h; pstl/include/pstl/internal/parallel_backend_serial.h; pstl/include/pstl/internal/parallel_backend_utils.h; pstl/include/pstl/internal/parallel_impl.h; pstl/include/pstl/internal/omp/parallel_for.h; pstl/include/pstl/internal/omp/parallel_for_each.h; pstl/include/pstl/internal/omp/parallel_invoke.h; pstl/include/pstl/internal/omp/parallel_reduce.h; pstl/include/pstl/internal/omp/parallel_scan.h; pstl/include/pstl/internal/omp/parallel_stable_partial_sort.h; pstl/include/pstl/internal/omp/parallel_transform_scan.h; pstl/include/pstl/internal/omp/util.h; third-party/benchmark/cmake/thread_safety_attributes.cpp; third-party/benchmark/src/arraysize.h; third-party/benchmark/src/benchmark_api_internal.h; third-party/benchmark/src/benchmark_register.h; third-party/benchmark/src/benchmark_runner.h; third-party/benchmark/src/check.h; third-party/benchmark/src/colorprint.h; third-party/benchmark/src/commandlineflags.h; third-party/benchmark/src/complexity.h; third-party/benchmark/src/counter.h; third-party/benchmark/src/cycleclock.h; third-party/benchmark/src/internal_macros.h; third-party/benchmark/src/log.h; third-party/benchmark/src/mutex.h; third-party/benchmark/src/perf_counters.h; third-party/benchmark/src/re.h; third-party/benchmark/src/sleep.h; third-party/benchmark/src/statistics.h; third-party/benchmark/src/string_util.h; third-party/benchmark/src/thread_manager.h; third-party/benchmark/src/thread_timer.h; third-party/benchmark/src/timers.h; utils/bazel/llvm-project-overlay/clang/include/clang/Config/config.h; utils/bazel/llvm-project-overlay/llvm/include/llvm/Config/config.h; ,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:418447,Testability,benchmark,benchmark,418447,lgorithm_impl.h; pstl/include/pstl/internal/glue_execution_defs.h; pstl/include/pstl/internal/glue_memory_defs.h; pstl/include/pstl/internal/glue_memory_impl.h; pstl/include/pstl/internal/glue_numeric_defs.h; pstl/include/pstl/internal/glue_numeric_impl.h; pstl/include/pstl/internal/numeric_fwd.h; pstl/include/pstl/internal/parallel_backend.h; pstl/include/pstl/internal/parallel_backend_omp.h; pstl/include/pstl/internal/parallel_backend_serial.h; pstl/include/pstl/internal/parallel_backend_utils.h; pstl/include/pstl/internal/parallel_impl.h; pstl/include/pstl/internal/omp/parallel_for.h; pstl/include/pstl/internal/omp/parallel_for_each.h; pstl/include/pstl/internal/omp/parallel_invoke.h; pstl/include/pstl/internal/omp/parallel_reduce.h; pstl/include/pstl/internal/omp/parallel_scan.h; pstl/include/pstl/internal/omp/parallel_stable_partial_sort.h; pstl/include/pstl/internal/omp/parallel_transform_scan.h; pstl/include/pstl/internal/omp/util.h; third-party/benchmark/cmake/thread_safety_attributes.cpp; third-party/benchmark/src/arraysize.h; third-party/benchmark/src/benchmark_api_internal.h; third-party/benchmark/src/benchmark_register.h; third-party/benchmark/src/benchmark_runner.h; third-party/benchmark/src/check.h; third-party/benchmark/src/colorprint.h; third-party/benchmark/src/commandlineflags.h; third-party/benchmark/src/complexity.h; third-party/benchmark/src/counter.h; third-party/benchmark/src/cycleclock.h; third-party/benchmark/src/internal_macros.h; third-party/benchmark/src/log.h; third-party/benchmark/src/mutex.h; third-party/benchmark/src/perf_counters.h; third-party/benchmark/src/re.h; third-party/benchmark/src/sleep.h; third-party/benchmark/src/statistics.h; third-party/benchmark/src/string_util.h; third-party/benchmark/src/thread_manager.h; third-party/benchmark/src/thread_timer.h; third-party/benchmark/src/timers.h; utils/bazel/llvm-project-overlay/clang/include/clang/Config/config.h; utils/bazel/llvm-project-overlay/llvm/include/llvm/Config/config.h; ,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:418487,Testability,benchmark,benchmark,418487,lgorithm_impl.h; pstl/include/pstl/internal/glue_execution_defs.h; pstl/include/pstl/internal/glue_memory_defs.h; pstl/include/pstl/internal/glue_memory_impl.h; pstl/include/pstl/internal/glue_numeric_defs.h; pstl/include/pstl/internal/glue_numeric_impl.h; pstl/include/pstl/internal/numeric_fwd.h; pstl/include/pstl/internal/parallel_backend.h; pstl/include/pstl/internal/parallel_backend_omp.h; pstl/include/pstl/internal/parallel_backend_serial.h; pstl/include/pstl/internal/parallel_backend_utils.h; pstl/include/pstl/internal/parallel_impl.h; pstl/include/pstl/internal/omp/parallel_for.h; pstl/include/pstl/internal/omp/parallel_for_each.h; pstl/include/pstl/internal/omp/parallel_invoke.h; pstl/include/pstl/internal/omp/parallel_reduce.h; pstl/include/pstl/internal/omp/parallel_scan.h; pstl/include/pstl/internal/omp/parallel_stable_partial_sort.h; pstl/include/pstl/internal/omp/parallel_transform_scan.h; pstl/include/pstl/internal/omp/util.h; third-party/benchmark/cmake/thread_safety_attributes.cpp; third-party/benchmark/src/arraysize.h; third-party/benchmark/src/benchmark_api_internal.h; third-party/benchmark/src/benchmark_register.h; third-party/benchmark/src/benchmark_runner.h; third-party/benchmark/src/check.h; third-party/benchmark/src/colorprint.h; third-party/benchmark/src/commandlineflags.h; third-party/benchmark/src/complexity.h; third-party/benchmark/src/counter.h; third-party/benchmark/src/cycleclock.h; third-party/benchmark/src/internal_macros.h; third-party/benchmark/src/log.h; third-party/benchmark/src/mutex.h; third-party/benchmark/src/perf_counters.h; third-party/benchmark/src/re.h; third-party/benchmark/src/sleep.h; third-party/benchmark/src/statistics.h; third-party/benchmark/src/string_util.h; third-party/benchmark/src/thread_manager.h; third-party/benchmark/src/thread_timer.h; third-party/benchmark/src/timers.h; utils/bazel/llvm-project-overlay/clang/include/clang/Config/config.h; utils/bazel/llvm-project-overlay/llvm/include/llvm/Config/config.h; ,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:418528,Testability,benchmark,benchmark,418528,lgorithm_impl.h; pstl/include/pstl/internal/glue_execution_defs.h; pstl/include/pstl/internal/glue_memory_defs.h; pstl/include/pstl/internal/glue_memory_impl.h; pstl/include/pstl/internal/glue_numeric_defs.h; pstl/include/pstl/internal/glue_numeric_impl.h; pstl/include/pstl/internal/numeric_fwd.h; pstl/include/pstl/internal/parallel_backend.h; pstl/include/pstl/internal/parallel_backend_omp.h; pstl/include/pstl/internal/parallel_backend_serial.h; pstl/include/pstl/internal/parallel_backend_utils.h; pstl/include/pstl/internal/parallel_impl.h; pstl/include/pstl/internal/omp/parallel_for.h; pstl/include/pstl/internal/omp/parallel_for_each.h; pstl/include/pstl/internal/omp/parallel_invoke.h; pstl/include/pstl/internal/omp/parallel_reduce.h; pstl/include/pstl/internal/omp/parallel_scan.h; pstl/include/pstl/internal/omp/parallel_stable_partial_sort.h; pstl/include/pstl/internal/omp/parallel_transform_scan.h; pstl/include/pstl/internal/omp/util.h; third-party/benchmark/cmake/thread_safety_attributes.cpp; third-party/benchmark/src/arraysize.h; third-party/benchmark/src/benchmark_api_internal.h; third-party/benchmark/src/benchmark_register.h; third-party/benchmark/src/benchmark_runner.h; third-party/benchmark/src/check.h; third-party/benchmark/src/colorprint.h; third-party/benchmark/src/commandlineflags.h; third-party/benchmark/src/complexity.h; third-party/benchmark/src/counter.h; third-party/benchmark/src/cycleclock.h; third-party/benchmark/src/internal_macros.h; third-party/benchmark/src/log.h; third-party/benchmark/src/mutex.h; third-party/benchmark/src/perf_counters.h; third-party/benchmark/src/re.h; third-party/benchmark/src/sleep.h; third-party/benchmark/src/statistics.h; third-party/benchmark/src/string_util.h; third-party/benchmark/src/thread_manager.h; third-party/benchmark/src/thread_timer.h; third-party/benchmark/src/timers.h; utils/bazel/llvm-project-overlay/clang/include/clang/Config/config.h; utils/bazel/llvm-project-overlay/llvm/include/llvm/Config/config.h; ,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:418572,Testability,benchmark,benchmark,418572,lgorithm_impl.h; pstl/include/pstl/internal/glue_execution_defs.h; pstl/include/pstl/internal/glue_memory_defs.h; pstl/include/pstl/internal/glue_memory_impl.h; pstl/include/pstl/internal/glue_numeric_defs.h; pstl/include/pstl/internal/glue_numeric_impl.h; pstl/include/pstl/internal/numeric_fwd.h; pstl/include/pstl/internal/parallel_backend.h; pstl/include/pstl/internal/parallel_backend_omp.h; pstl/include/pstl/internal/parallel_backend_serial.h; pstl/include/pstl/internal/parallel_backend_utils.h; pstl/include/pstl/internal/parallel_impl.h; pstl/include/pstl/internal/omp/parallel_for.h; pstl/include/pstl/internal/omp/parallel_for_each.h; pstl/include/pstl/internal/omp/parallel_invoke.h; pstl/include/pstl/internal/omp/parallel_reduce.h; pstl/include/pstl/internal/omp/parallel_scan.h; pstl/include/pstl/internal/omp/parallel_stable_partial_sort.h; pstl/include/pstl/internal/omp/parallel_transform_scan.h; pstl/include/pstl/internal/omp/util.h; third-party/benchmark/cmake/thread_safety_attributes.cpp; third-party/benchmark/src/arraysize.h; third-party/benchmark/src/benchmark_api_internal.h; third-party/benchmark/src/benchmark_register.h; third-party/benchmark/src/benchmark_runner.h; third-party/benchmark/src/check.h; third-party/benchmark/src/colorprint.h; third-party/benchmark/src/commandlineflags.h; third-party/benchmark/src/complexity.h; third-party/benchmark/src/counter.h; third-party/benchmark/src/cycleclock.h; third-party/benchmark/src/internal_macros.h; third-party/benchmark/src/log.h; third-party/benchmark/src/mutex.h; third-party/benchmark/src/perf_counters.h; third-party/benchmark/src/re.h; third-party/benchmark/src/sleep.h; third-party/benchmark/src/statistics.h; third-party/benchmark/src/string_util.h; third-party/benchmark/src/thread_manager.h; third-party/benchmark/src/thread_timer.h; third-party/benchmark/src/timers.h; utils/bazel/llvm-project-overlay/clang/include/clang/Config/config.h; utils/bazel/llvm-project-overlay/llvm/include/llvm/Config/config.h; ,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:418614,Testability,benchmark,benchmark,418614,lgorithm_impl.h; pstl/include/pstl/internal/glue_execution_defs.h; pstl/include/pstl/internal/glue_memory_defs.h; pstl/include/pstl/internal/glue_memory_impl.h; pstl/include/pstl/internal/glue_numeric_defs.h; pstl/include/pstl/internal/glue_numeric_impl.h; pstl/include/pstl/internal/numeric_fwd.h; pstl/include/pstl/internal/parallel_backend.h; pstl/include/pstl/internal/parallel_backend_omp.h; pstl/include/pstl/internal/parallel_backend_serial.h; pstl/include/pstl/internal/parallel_backend_utils.h; pstl/include/pstl/internal/parallel_impl.h; pstl/include/pstl/internal/omp/parallel_for.h; pstl/include/pstl/internal/omp/parallel_for_each.h; pstl/include/pstl/internal/omp/parallel_invoke.h; pstl/include/pstl/internal/omp/parallel_reduce.h; pstl/include/pstl/internal/omp/parallel_scan.h; pstl/include/pstl/internal/omp/parallel_stable_partial_sort.h; pstl/include/pstl/internal/omp/parallel_transform_scan.h; pstl/include/pstl/internal/omp/util.h; third-party/benchmark/cmake/thread_safety_attributes.cpp; third-party/benchmark/src/arraysize.h; third-party/benchmark/src/benchmark_api_internal.h; third-party/benchmark/src/benchmark_register.h; third-party/benchmark/src/benchmark_runner.h; third-party/benchmark/src/check.h; third-party/benchmark/src/colorprint.h; third-party/benchmark/src/commandlineflags.h; third-party/benchmark/src/complexity.h; third-party/benchmark/src/counter.h; third-party/benchmark/src/cycleclock.h; third-party/benchmark/src/internal_macros.h; third-party/benchmark/src/log.h; third-party/benchmark/src/mutex.h; third-party/benchmark/src/perf_counters.h; third-party/benchmark/src/re.h; third-party/benchmark/src/sleep.h; third-party/benchmark/src/statistics.h; third-party/benchmark/src/string_util.h; third-party/benchmark/src/thread_manager.h; third-party/benchmark/src/thread_timer.h; third-party/benchmark/src/timers.h; utils/bazel/llvm-project-overlay/clang/include/clang/Config/config.h; utils/bazel/llvm-project-overlay/llvm/include/llvm/Config/config.h; ,MatchSource.DOCS,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/LLVMPrintFunctionNames/CMakeLists.txt:80,Modifiability,plugin,plugin,80,"# If we don't need RTTI or EH, there's no reason to export anything; # from the plugin.; if(NOT MSVC) # MSVC mangles symbols differently, and; # PrintLLVMFunctionNames.export contains C++ symbols.; if(NOT LLVM_REQUIRES_RTTI); if(NOT LLVM_REQUIRES_EH); set(LLVM_EXPORTED_SYMBOL_FILE ${CMAKE_CURRENT_SOURCE_DIR}/LLVMPrintFunctionNames.exports); endif(); endif(); endif(). add_llvm_library(LLVMPrintFunctionNames MODULE LLVMPrintFunctionNames.cpp PLUGIN_TOOL clang). if(WIN32 OR CYGWIN); set(LLVM_LINK_COMPONENTS; Support; ); clang_target_link_libraries(LLVMPrintFunctionNames PRIVATE; clangAST; clangBasic; clangFrontend; ); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/examples/LLVMPrintFunctionNames/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/LLVMPrintFunctionNames/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/CMakeLists.txt:80,Modifiability,plugin,plugin,80,"# If we don't need RTTI or EH, there's no reason to export anything; # from the plugin.; if( NOT MSVC ) # MSVC mangles symbols differently, and; # PrintFunctionNames.export contains C++ symbols.; if( NOT LLVM_REQUIRES_RTTI ); if( NOT LLVM_REQUIRES_EH ); set(LLVM_EXPORTED_SYMBOL_FILE ${CMAKE_CURRENT_SOURCE_DIR}/PrintFunctionNames.exports); endif(); endif(); endif(). add_llvm_library(PrintFunctionNames MODULE PrintFunctionNames.cpp PLUGIN_TOOL clang). if(WIN32 OR CYGWIN); set(LLVM_LINK_COMPONENTS; Support; ); clang_target_link_libraries(PrintFunctionNames PRIVATE; clangAST; clangBasic; clangFrontend; ); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/examples/PrintFunctionNames/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt:617,Availability,error,error,617,"This is a simple example demonstrating how to use clang's facility for; providing AST consumers using a plugin. Build the plugin by running `make` in this directory. Once the plugin is built, you can run it using:; --; Linux:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c. Mac:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c; ",MatchSource.DOCS,interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt:1047,Availability,error,error,1047,"This is a simple example demonstrating how to use clang's facility for; providing AST consumers using a plugin. Build the plugin by running `make` in this directory. Once the plugin is built, you can run it using:; --; Linux:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c. Mac:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c; ",MatchSource.DOCS,interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt:104,Modifiability,plugin,plugin,104,"This is a simple example demonstrating how to use clang's facility for; providing AST consumers using a plugin. Build the plugin by running `make` in this directory. Once the plugin is built, you can run it using:; --; Linux:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c. Mac:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c; ",MatchSource.DOCS,interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt:122,Modifiability,plugin,plugin,122,"This is a simple example demonstrating how to use clang's facility for; providing AST consumers using a plugin. Build the plugin by running `make` in this directory. Once the plugin is built, you can run it using:; --; Linux:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c. Mac:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c; ",MatchSource.DOCS,interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt:175,Modifiability,plugin,plugin,175,"This is a simple example demonstrating how to use clang's facility for; providing AST consumers using a plugin. Build the plugin by running `make` in this directory. Once the plugin is built, you can run it using:; --; Linux:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c. Mac:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c; ",MatchSource.DOCS,interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt:296,Modifiability,plugin,plugin,296,"This is a simple example demonstrating how to use clang's facility for; providing AST consumers using a plugin. Build the plugin by running `make` in this directory. Once the plugin is built, you can run it using:; --; Linux:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c. Mac:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c; ",MatchSource.DOCS,interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt:401,Modifiability,plugin,plugin,401,"This is a simple example demonstrating how to use clang's facility for; providing AST consumers using a plugin. Build the plugin by running `make` in this directory. Once the plugin is built, you can run it using:; --; Linux:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c. Mac:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c; ",MatchSource.DOCS,interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt:419,Modifiability,plugin,plugin-arg-print-fns,419,"This is a simple example demonstrating how to use clang's facility for; providing AST consumers using a plugin. Build the plugin by running `make` in this directory. Once the plugin is built, you can run it using:; --; Linux:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c. Mac:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c; ",MatchSource.DOCS,interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt:446,Modifiability,plugin,plugin-arg-print-fns,446,"This is a simple example demonstrating how to use clang's facility for; providing AST consumers using a plugin. Build the plugin by running `make` in this directory. Once the plugin is built, you can run it using:; --; Linux:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c. Mac:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c; ",MatchSource.DOCS,interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt:574,Modifiability,plugin,plugin,574,"This is a simple example demonstrating how to use clang's facility for; providing AST consumers using a plugin. Build the plugin by running `make` in this directory. Once the plugin is built, you can run it using:; --; Linux:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c. Mac:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c; ",MatchSource.DOCS,interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt:592,Modifiability,plugin,plugin-arg-print-fns,592,"This is a simple example demonstrating how to use clang's facility for; providing AST consumers using a plugin. Build the plugin by running `make` in this directory. Once the plugin is built, you can run it using:; --; Linux:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c. Mac:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c; ",MatchSource.DOCS,interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt:720,Modifiability,plugin,plugin,720,"This is a simple example demonstrating how to use clang's facility for; providing AST consumers using a plugin. Build the plugin by running `make` in this directory. Once the plugin is built, you can run it using:; --; Linux:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c. Mac:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c; ",MatchSource.DOCS,interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt:828,Modifiability,plugin,plugin,828,"This is a simple example demonstrating how to use clang's facility for; providing AST consumers using a plugin. Build the plugin by running `make` in this directory. Once the plugin is built, you can run it using:; --; Linux:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c. Mac:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c; ",MatchSource.DOCS,interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt:846,Modifiability,plugin,plugin-arg-print-fns,846,"This is a simple example demonstrating how to use clang's facility for; providing AST consumers using a plugin. Build the plugin by running `make` in this directory. Once the plugin is built, you can run it using:; --; Linux:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c. Mac:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c; ",MatchSource.DOCS,interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt:873,Modifiability,plugin,plugin-arg-print-fns,873,"This is a simple example demonstrating how to use clang's facility for; providing AST consumers using a plugin. Build the plugin by running `make` in this directory. Once the plugin is built, you can run it using:; --; Linux:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c. Mac:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c; ",MatchSource.DOCS,interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt:1004,Modifiability,plugin,plugin,1004,"This is a simple example demonstrating how to use clang's facility for; providing AST consumers using a plugin. Build the plugin by running `make` in this directory. Once the plugin is built, you can run it using:; --; Linux:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c. Mac:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c; ",MatchSource.DOCS,interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt:1022,Modifiability,plugin,plugin-arg-print-fns,1022,"This is a simple example demonstrating how to use clang's facility for; providing AST consumers using a plugin. Build the plugin by running `make` in this directory. Once the plugin is built, you can run it using:; --; Linux:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c. Mac:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c; ",MatchSource.DOCS,interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt:241,Performance,load,load,241,"This is a simple example demonstrating how to use clang's facility for; providing AST consumers using a plugin. Build the plugin by running `make` in this directory. Once the plugin is built, you can run it using:; --; Linux:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c. Mac:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c; ",MatchSource.DOCS,interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt:346,Performance,load,load,346,"This is a simple example demonstrating how to use clang's facility for; providing AST consumers using a plugin. Build the plugin by running `make` in this directory. Once the plugin is built, you can run it using:; --; Linux:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c. Mac:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c; ",MatchSource.DOCS,interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt:519,Performance,load,load,519,"This is a simple example demonstrating how to use clang's facility for; providing AST consumers using a plugin. Build the plugin by running `make` in this directory. Once the plugin is built, you can run it using:; --; Linux:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c. Mac:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c; ",MatchSource.DOCS,interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt:662,Performance,load,load,662,"This is a simple example demonstrating how to use clang's facility for; providing AST consumers using a plugin. Build the plugin by running `make` in this directory. Once the plugin is built, you can run it using:; --; Linux:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c. Mac:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c; ",MatchSource.DOCS,interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt:770,Performance,load,load,770,"This is a simple example demonstrating how to use clang's facility for; providing AST consumers using a plugin. Build the plugin by running `make` in this directory. Once the plugin is built, you can run it using:; --; Linux:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c. Mac:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c; ",MatchSource.DOCS,interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt:946,Performance,load,load,946,"This is a simple example demonstrating how to use clang's facility for; providing AST consumers using a plugin. Build the plugin by running `make` in this directory. Once the plugin is built, you can run it using:; --; Linux:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c. Mac:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c; ",MatchSource.DOCS,interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt:10,Usability,simpl,simple,10,"This is a simple example demonstrating how to use clang's facility for; providing AST consumers using a plugin. Build the plugin by running `make` in this directory. Once the plugin is built, you can run it using:; --; Linux:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.so -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c. Mac:; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns help -plugin-arg-print-fns --example-argument some-input-file.c; $ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns -plugin-arg-print-fns -an-error some-input-file.c; ",MatchSource.DOCS,interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CMakeLists.txt:819,Modifiability,plugin,plugins,819,set(LLVM_LINK_COMPONENTS; FrontendOpenMP; Support; ). add_clang_library(clangAnalysis; AnalysisDeclContext.cpp; BodyFarm.cpp; CalledOnceCheck.cpp; CFG.cpp; CFGReachabilityAnalysis.cpp; CFGStmtMap.cpp; CallGraph.cpp; CloneDetection.cpp; CocoaConventions.cpp; ConstructionContext.cpp; Consumed.cpp; CodeInjector.cpp; Dominators.cpp; ExprMutationAnalyzer.cpp; IntervalPartition.cpp; IssueHash.cpp; LiveVariables.cpp; MacroExpansionContext.cpp; ObjCNoReturn.cpp; PathDiagnostic.cpp; PostOrderCFGView.cpp; ProgramPoint.cpp; ReachableCode.cpp; RetainSummaryManager.cpp; ThreadSafety.cpp; ThreadSafetyCommon.cpp; ThreadSafetyLogical.cpp; ThreadSafetyTIL.cpp; UninitializedValues.cpp; UnsafeBufferUsage.cpp. LINK_LIBS; clangAST; clangASTMatchers; clangBasic; clangLex. DEPENDS; omp_gen; ClangDriverOptions; ). add_subdirectory(plugins); add_subdirectory(FlowSensitive); ,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Analysis/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/CMakeLists.txt:266,Integrability,depend,depends,266,set(LLVM_LINK_COMPONENTS; BinaryFormat; Core; FrontendOpenMP; Support; TargetParser; ). # FIXME: the entry points to the interpreter should be moved out of clangAST; # into the parser or Sema in order to allow the interpreter to be moved to; # another library which depends on clangAST.; clang_tablegen(Opcodes.inc; -gen-clang-opcodes; SOURCE Interp/Opcodes.td; TARGET Opcodes). clang_tablegen(AttrDocTable.inc -gen-clang-attr-doc-table; -I ${CMAKE_CURRENT_SOURCE_DIR}/../../include/; SOURCE ${CMAKE_CURRENT_SOURCE_DIR}/../../include/clang/Basic/Attr.td; TARGET ClangAttrDocTable). add_clang_library(clangAST; APValue.cpp; ASTConcept.cpp; ASTConsumer.cpp; ASTContext.cpp; ASTDiagnostic.cpp; ASTDumper.cpp; ASTImporter.cpp; ASTImporterLookupTable.cpp; ASTStructuralEquivalence.cpp; ASTTypeTraits.cpp; AttrDocTable.cpp; AttrImpl.cpp; Comment.cpp; CommentBriefParser.cpp; CommentCommandTraits.cpp; CommentLexer.cpp; CommentParser.cpp; CommentSema.cpp; ComparisonCategories.cpp; ComputeDependence.cpp; CXXInheritance.cpp; DataCollection.cpp; Decl.cpp; DeclarationName.cpp; DeclBase.cpp; DeclCXX.cpp; DeclFriend.cpp; DeclGroup.cpp; DeclObjC.cpp; DeclOpenMP.cpp; DeclPrinter.cpp; DeclTemplate.cpp; ParentMapContext.cpp; Expr.cpp; ExprClassification.cpp; ExprConcepts.cpp; ExprConstant.cpp; ExprCXX.cpp; ExprObjC.cpp; ExternalASTMerger.cpp; ExternalASTSource.cpp; FormatString.cpp; InheritViz.cpp; Interp/ByteCodeEmitter.cpp; Interp/ByteCodeExprGen.cpp; Interp/ByteCodeGenError.cpp; Interp/ByteCodeStmtGen.cpp; Interp/Context.cpp; Interp/Descriptor.cpp; Interp/Disasm.cpp; Interp/EvalEmitter.cpp; Interp/Frame.cpp; Interp/Function.cpp; Interp/InterpBuiltin.cpp; Interp/Floating.cpp; Interp/EvaluationResult.cpp; Interp/Interp.cpp; Interp/InterpBlock.cpp; Interp/InterpFrame.cpp; Interp/InterpStack.cpp; Interp/InterpState.cpp; Interp/Pointer.cpp; Interp/PrimType.cpp; Interp/Program.cpp; Interp/Record.cpp; Interp/Source.cpp; Interp/State.cpp; ItaniumCXXABI.cpp; ItaniumMangle.cpp; JSONNodeDumper.cpp; Mangle,MatchSource.DOCS,interpreter/llvm-project/clang/lib/AST/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CMakeLists.txt:427,Performance,perform,performance,427,"set(LLVM_LINK_COMPONENTS; AggressiveInstCombine; Analysis; BitReader; BitWriter; CodeGenTypes; Core; Coroutines; Coverage; Demangle; Extensions; FrontendDriver; FrontendHLSL; FrontendOpenMP; FrontendOffloading; HIPStdPar; IPO; IRPrinter; IRReader; InstCombine; Instrumentation; LTO; Linker; MC; ObjCARCOpts; Object; Passes; ProfileData; ScalarOpts; Support; Target; TargetParser; TransformUtils; ). # Workaround for MSVC ARM64 performance regression:; # https://developercommunity.visualstudio.com/t/Compiling-a-specific-code-for-ARM64-with/10444970; # Since /O1 and /O2 represent a set of optimizations,; # our goal is to disable the /Og flag while retaining the other optimizations from the /O1|/O2 set; if(MSVC AND NOT CMAKE_CXX_COMPILER_ID MATCHES Clang; AND MSVC_VERSION VERSION_GREATER_EQUAL 1932; AND CMAKE_SYSTEM_PROCESSOR MATCHES ""ARM64""). string(TOUPPER ""${CMAKE_BUILD_TYPE}"" uppercase_CMAKE_BUILD_TYPE); string(REGEX MATCHALL ""/[Oo][12]"" opt_flags ""${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_${uppercase_CMAKE_BUILD_TYPE}}""); if (opt_flags); if(opt_flags MATCHES ""1$""); set(opt_flags ""/Od;/Os;/Oy;/Ob2;/GF;/Gy""); elseif (opt_flags MATCHES ""2$""); set(opt_flags ""/Od;/Oi;/Ot;/Oy;/Ob2;/GF;/Gy""); endif(); set_source_files_properties(CGBuiltin.cpp PROPERTIES COMPILE_OPTIONS ""${opt_flags}""); endif(); endif(). add_clang_library(clangCodeGen; ABIInfo.cpp; ABIInfoImpl.cpp; BackendUtil.cpp; CGAtomic.cpp; CGBlocks.cpp; CGBuiltin.cpp; CGCUDANV.cpp; CGCUDARuntime.cpp; CGCXX.cpp; CGCXXABI.cpp; CGCall.cpp; CGClass.cpp; CGCleanup.cpp; CGCoroutine.cpp; CGDebugInfo.cpp; CGDecl.cpp; CGDeclCXX.cpp; CGException.cpp; CGExpr.cpp; CGExprAgg.cpp; CGExprCXX.cpp; CGExprComplex.cpp; CGExprConstant.cpp; CGExprScalar.cpp; CGGPUBuiltin.cpp; CGHLSLRuntime.cpp; CGLoopInfo.cpp; CGNonTrivialStruct.cpp; CGObjC.cpp; CGObjCGNU.cpp; CGObjCMac.cpp; CGObjCRuntime.cpp; CGOpenCLRuntime.cpp; CGOpenMPRuntime.cpp; CGOpenMPRuntimeGPU.cpp; CGRecordLayoutBuilder.cpp; CGStmt.cpp; CGStmtOpenMP.cpp; CGVTT.cpp; CGVTables.cpp; CodeGe",MatchSource.DOCS,interpreter/llvm-project/clang/lib/CodeGen/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CMakeLists.txt:590,Performance,optimiz,optimizations,590,"set(LLVM_LINK_COMPONENTS; AggressiveInstCombine; Analysis; BitReader; BitWriter; CodeGenTypes; Core; Coroutines; Coverage; Demangle; Extensions; FrontendDriver; FrontendHLSL; FrontendOpenMP; FrontendOffloading; HIPStdPar; IPO; IRPrinter; IRReader; InstCombine; Instrumentation; LTO; Linker; MC; ObjCARCOpts; Object; Passes; ProfileData; ScalarOpts; Support; Target; TargetParser; TransformUtils; ). # Workaround for MSVC ARM64 performance regression:; # https://developercommunity.visualstudio.com/t/Compiling-a-specific-code-for-ARM64-with/10444970; # Since /O1 and /O2 represent a set of optimizations,; # our goal is to disable the /Og flag while retaining the other optimizations from the /O1|/O2 set; if(MSVC AND NOT CMAKE_CXX_COMPILER_ID MATCHES Clang; AND MSVC_VERSION VERSION_GREATER_EQUAL 1932; AND CMAKE_SYSTEM_PROCESSOR MATCHES ""ARM64""). string(TOUPPER ""${CMAKE_BUILD_TYPE}"" uppercase_CMAKE_BUILD_TYPE); string(REGEX MATCHALL ""/[Oo][12]"" opt_flags ""${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_${uppercase_CMAKE_BUILD_TYPE}}""); if (opt_flags); if(opt_flags MATCHES ""1$""); set(opt_flags ""/Od;/Os;/Oy;/Ob2;/GF;/Gy""); elseif (opt_flags MATCHES ""2$""); set(opt_flags ""/Od;/Oi;/Ot;/Oy;/Ob2;/GF;/Gy""); endif(); set_source_files_properties(CGBuiltin.cpp PROPERTIES COMPILE_OPTIONS ""${opt_flags}""); endif(); endif(). add_clang_library(clangCodeGen; ABIInfo.cpp; ABIInfoImpl.cpp; BackendUtil.cpp; CGAtomic.cpp; CGBlocks.cpp; CGBuiltin.cpp; CGCUDANV.cpp; CGCUDARuntime.cpp; CGCXX.cpp; CGCXXABI.cpp; CGCall.cpp; CGClass.cpp; CGCleanup.cpp; CGCoroutine.cpp; CGDebugInfo.cpp; CGDecl.cpp; CGDeclCXX.cpp; CGException.cpp; CGExpr.cpp; CGExprAgg.cpp; CGExprCXX.cpp; CGExprComplex.cpp; CGExprConstant.cpp; CGExprScalar.cpp; CGGPUBuiltin.cpp; CGHLSLRuntime.cpp; CGLoopInfo.cpp; CGNonTrivialStruct.cpp; CGObjC.cpp; CGObjCGNU.cpp; CGObjCMac.cpp; CGObjCRuntime.cpp; CGOpenCLRuntime.cpp; CGOpenMPRuntime.cpp; CGOpenMPRuntimeGPU.cpp; CGRecordLayoutBuilder.cpp; CGStmt.cpp; CGStmtOpenMP.cpp; CGVTT.cpp; CGVTables.cpp; CodeGe",MatchSource.DOCS,interpreter/llvm-project/clang/lib/CodeGen/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CMakeLists.txt:670,Performance,optimiz,optimizations,670,"set(LLVM_LINK_COMPONENTS; AggressiveInstCombine; Analysis; BitReader; BitWriter; CodeGenTypes; Core; Coroutines; Coverage; Demangle; Extensions; FrontendDriver; FrontendHLSL; FrontendOpenMP; FrontendOffloading; HIPStdPar; IPO; IRPrinter; IRReader; InstCombine; Instrumentation; LTO; Linker; MC; ObjCARCOpts; Object; Passes; ProfileData; ScalarOpts; Support; Target; TargetParser; TransformUtils; ). # Workaround for MSVC ARM64 performance regression:; # https://developercommunity.visualstudio.com/t/Compiling-a-specific-code-for-ARM64-with/10444970; # Since /O1 and /O2 represent a set of optimizations,; # our goal is to disable the /Og flag while retaining the other optimizations from the /O1|/O2 set; if(MSVC AND NOT CMAKE_CXX_COMPILER_ID MATCHES Clang; AND MSVC_VERSION VERSION_GREATER_EQUAL 1932; AND CMAKE_SYSTEM_PROCESSOR MATCHES ""ARM64""). string(TOUPPER ""${CMAKE_BUILD_TYPE}"" uppercase_CMAKE_BUILD_TYPE); string(REGEX MATCHALL ""/[Oo][12]"" opt_flags ""${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_${uppercase_CMAKE_BUILD_TYPE}}""); if (opt_flags); if(opt_flags MATCHES ""1$""); set(opt_flags ""/Od;/Os;/Oy;/Ob2;/GF;/Gy""); elseif (opt_flags MATCHES ""2$""); set(opt_flags ""/Od;/Oi;/Ot;/Oy;/Ob2;/GF;/Gy""); endif(); set_source_files_properties(CGBuiltin.cpp PROPERTIES COMPILE_OPTIONS ""${opt_flags}""); endif(); endif(). add_clang_library(clangCodeGen; ABIInfo.cpp; ABIInfoImpl.cpp; BackendUtil.cpp; CGAtomic.cpp; CGBlocks.cpp; CGBuiltin.cpp; CGCUDANV.cpp; CGCUDARuntime.cpp; CGCXX.cpp; CGCXXABI.cpp; CGCall.cpp; CGClass.cpp; CGCleanup.cpp; CGCoroutine.cpp; CGDebugInfo.cpp; CGDecl.cpp; CGDeclCXX.cpp; CGException.cpp; CGExpr.cpp; CGExprAgg.cpp; CGExprCXX.cpp; CGExprComplex.cpp; CGExprConstant.cpp; CGExprScalar.cpp; CGGPUBuiltin.cpp; CGHLSLRuntime.cpp; CGLoopInfo.cpp; CGNonTrivialStruct.cpp; CGObjC.cpp; CGObjCGNU.cpp; CGObjCMac.cpp; CGObjCRuntime.cpp; CGOpenCLRuntime.cpp; CGOpenMPRuntime.cpp; CGOpenMPRuntimeGPU.cpp; CGRecordLayoutBuilder.cpp; CGStmt.cpp; CGStmtOpenMP.cpp; CGVTT.cpp; CGVTables.cpp; CodeGe",MatchSource.DOCS,interpreter/llvm-project/clang/lib/CodeGen/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/README.txt:367,Availability,mask,masking,367,"IRgen optimization opportunities. //===---------------------------------------------------------------------===//. The common pattern of; --; short x; // or char, etc; (x == 10); --; generates an zext/sext of x which can easily be avoided. //===---------------------------------------------------------------------===//. Bitfields accesses can be shifted to simplify masking and sign; extension. For example, if the bitfield width is 8 and it is; appropriately aligned then is is a lot shorter to just load the char; directly. //===---------------------------------------------------------------------===//. It may be worth avoiding creation of alloca's for formal arguments; for the common situation where the argument is never written to or has; its address taken. The idea would be to begin generating code by using; the argument directly and if its address is taken or it is stored to; then generate the alloca and patch up the existing code. In theory, the same optimization could be a win for block local; variables as long as the declaration dominates all statements in the; block. NOTE: The main case we care about this for is for -O0 -g compile time; performance, and in that scenario we will need to emit the alloca; anyway currently to emit proper debug info. So this is blocked by; being able to emit debug information which refers to an LLVM; temporary, not an alloca. //===---------------------------------------------------------------------===//. We should try and avoid generating basic blocks which only contain; jumps. At -O0, this penalizes us all the way from IRgen (malloc &; instruction overhead), all the way down through code generation and; assembly time. On 176.gcc:expr.ll, it looks like over 12% of basic blocks are just; direct branches!. //===---------------------------------------------------------------------===//; ",MatchSource.DOCS,interpreter/llvm-project/clang/lib/CodeGen/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/README.txt:1633,Availability,down,down,1633,"IRgen optimization opportunities. //===---------------------------------------------------------------------===//. The common pattern of; --; short x; // or char, etc; (x == 10); --; generates an zext/sext of x which can easily be avoided. //===---------------------------------------------------------------------===//. Bitfields accesses can be shifted to simplify masking and sign; extension. For example, if the bitfield width is 8 and it is; appropriately aligned then is is a lot shorter to just load the char; directly. //===---------------------------------------------------------------------===//. It may be worth avoiding creation of alloca's for formal arguments; for the common situation where the argument is never written to or has; its address taken. The idea would be to begin generating code by using; the argument directly and if its address is taken or it is stored to; then generate the alloca and patch up the existing code. In theory, the same optimization could be a win for block local; variables as long as the declaration dominates all statements in the; block. NOTE: The main case we care about this for is for -O0 -g compile time; performance, and in that scenario we will need to emit the alloca; anyway currently to emit proper debug info. So this is blocked by; being able to emit debug information which refers to an LLVM; temporary, not an alloca. //===---------------------------------------------------------------------===//. We should try and avoid generating basic blocks which only contain; jumps. At -O0, this penalizes us all the way from IRgen (malloc &; instruction overhead), all the way down through code generation and; assembly time. On 176.gcc:expr.ll, it looks like over 12% of basic blocks are just; direct branches!. //===---------------------------------------------------------------------===//; ",MatchSource.DOCS,interpreter/llvm-project/clang/lib/CodeGen/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/README.txt:919,Deployability,patch,patch,919,"IRgen optimization opportunities. //===---------------------------------------------------------------------===//. The common pattern of; --; short x; // or char, etc; (x == 10); --; generates an zext/sext of x which can easily be avoided. //===---------------------------------------------------------------------===//. Bitfields accesses can be shifted to simplify masking and sign; extension. For example, if the bitfield width is 8 and it is; appropriately aligned then is is a lot shorter to just load the char; directly. //===---------------------------------------------------------------------===//. It may be worth avoiding creation of alloca's for formal arguments; for the common situation where the argument is never written to or has; its address taken. The idea would be to begin generating code by using; the argument directly and if its address is taken or it is stored to; then generate the alloca and patch up the existing code. In theory, the same optimization could be a win for block local; variables as long as the declaration dominates all statements in the; block. NOTE: The main case we care about this for is for -O0 -g compile time; performance, and in that scenario we will need to emit the alloca; anyway currently to emit proper debug info. So this is blocked by; being able to emit debug information which refers to an LLVM; temporary, not an alloca. //===---------------------------------------------------------------------===//. We should try and avoid generating basic blocks which only contain; jumps. At -O0, this penalizes us all the way from IRgen (malloc &; instruction overhead), all the way down through code generation and; assembly time. On 176.gcc:expr.ll, it looks like over 12% of basic blocks are just; direct branches!. //===---------------------------------------------------------------------===//; ",MatchSource.DOCS,interpreter/llvm-project/clang/lib/CodeGen/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/README.txt:1012,Modifiability,variab,variables,1012,"IRgen optimization opportunities. //===---------------------------------------------------------------------===//. The common pattern of; --; short x; // or char, etc; (x == 10); --; generates an zext/sext of x which can easily be avoided. //===---------------------------------------------------------------------===//. Bitfields accesses can be shifted to simplify masking and sign; extension. For example, if the bitfield width is 8 and it is; appropriately aligned then is is a lot shorter to just load the char; directly. //===---------------------------------------------------------------------===//. It may be worth avoiding creation of alloca's for formal arguments; for the common situation where the argument is never written to or has; its address taken. The idea would be to begin generating code by using; the argument directly and if its address is taken or it is stored to; then generate the alloca and patch up the existing code. In theory, the same optimization could be a win for block local; variables as long as the declaration dominates all statements in the; block. NOTE: The main case we care about this for is for -O0 -g compile time; performance, and in that scenario we will need to emit the alloca; anyway currently to emit proper debug info. So this is blocked by; being able to emit debug information which refers to an LLVM; temporary, not an alloca. //===---------------------------------------------------------------------===//. We should try and avoid generating basic blocks which only contain; jumps. At -O0, this penalizes us all the way from IRgen (malloc &; instruction overhead), all the way down through code generation and; assembly time. On 176.gcc:expr.ll, it looks like over 12% of basic blocks are just; direct branches!. //===---------------------------------------------------------------------===//; ",MatchSource.DOCS,interpreter/llvm-project/clang/lib/CodeGen/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/README.txt:6,Performance,optimiz,optimization,6,"IRgen optimization opportunities. //===---------------------------------------------------------------------===//. The common pattern of; --; short x; // or char, etc; (x == 10); --; generates an zext/sext of x which can easily be avoided. //===---------------------------------------------------------------------===//. Bitfields accesses can be shifted to simplify masking and sign; extension. For example, if the bitfield width is 8 and it is; appropriately aligned then is is a lot shorter to just load the char; directly. //===---------------------------------------------------------------------===//. It may be worth avoiding creation of alloca's for formal arguments; for the common situation where the argument is never written to or has; its address taken. The idea would be to begin generating code by using; the argument directly and if its address is taken or it is stored to; then generate the alloca and patch up the existing code. In theory, the same optimization could be a win for block local; variables as long as the declaration dominates all statements in the; block. NOTE: The main case we care about this for is for -O0 -g compile time; performance, and in that scenario we will need to emit the alloca; anyway currently to emit proper debug info. So this is blocked by; being able to emit debug information which refers to an LLVM; temporary, not an alloca. //===---------------------------------------------------------------------===//. We should try and avoid generating basic blocks which only contain; jumps. At -O0, this penalizes us all the way from IRgen (malloc &; instruction overhead), all the way down through code generation and; assembly time. On 176.gcc:expr.ll, it looks like over 12% of basic blocks are just; direct branches!. //===---------------------------------------------------------------------===//; ",MatchSource.DOCS,interpreter/llvm-project/clang/lib/CodeGen/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/README.txt:502,Performance,load,load,502,"IRgen optimization opportunities. //===---------------------------------------------------------------------===//. The common pattern of; --; short x; // or char, etc; (x == 10); --; generates an zext/sext of x which can easily be avoided. //===---------------------------------------------------------------------===//. Bitfields accesses can be shifted to simplify masking and sign; extension. For example, if the bitfield width is 8 and it is; appropriately aligned then is is a lot shorter to just load the char; directly. //===---------------------------------------------------------------------===//. It may be worth avoiding creation of alloca's for formal arguments; for the common situation where the argument is never written to or has; its address taken. The idea would be to begin generating code by using; the argument directly and if its address is taken or it is stored to; then generate the alloca and patch up the existing code. In theory, the same optimization could be a win for block local; variables as long as the declaration dominates all statements in the; block. NOTE: The main case we care about this for is for -O0 -g compile time; performance, and in that scenario we will need to emit the alloca; anyway currently to emit proper debug info. So this is blocked by; being able to emit debug information which refers to an LLVM; temporary, not an alloca. //===---------------------------------------------------------------------===//. We should try and avoid generating basic blocks which only contain; jumps. At -O0, this penalizes us all the way from IRgen (malloc &; instruction overhead), all the way down through code generation and; assembly time. On 176.gcc:expr.ll, it looks like over 12% of basic blocks are just; direct branches!. //===---------------------------------------------------------------------===//; ",MatchSource.DOCS,interpreter/llvm-project/clang/lib/CodeGen/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/README.txt:967,Performance,optimiz,optimization,967,"IRgen optimization opportunities. //===---------------------------------------------------------------------===//. The common pattern of; --; short x; // or char, etc; (x == 10); --; generates an zext/sext of x which can easily be avoided. //===---------------------------------------------------------------------===//. Bitfields accesses can be shifted to simplify masking and sign; extension. For example, if the bitfield width is 8 and it is; appropriately aligned then is is a lot shorter to just load the char; directly. //===---------------------------------------------------------------------===//. It may be worth avoiding creation of alloca's for formal arguments; for the common situation where the argument is never written to or has; its address taken. The idea would be to begin generating code by using; the argument directly and if its address is taken or it is stored to; then generate the alloca and patch up the existing code. In theory, the same optimization could be a win for block local; variables as long as the declaration dominates all statements in the; block. NOTE: The main case we care about this for is for -O0 -g compile time; performance, and in that scenario we will need to emit the alloca; anyway currently to emit proper debug info. So this is blocked by; being able to emit debug information which refers to an LLVM; temporary, not an alloca. //===---------------------------------------------------------------------===//. We should try and avoid generating basic blocks which only contain; jumps. At -O0, this penalizes us all the way from IRgen (malloc &; instruction overhead), all the way down through code generation and; assembly time. On 176.gcc:expr.ll, it looks like over 12% of basic blocks are just; direct branches!. //===---------------------------------------------------------------------===//; ",MatchSource.DOCS,interpreter/llvm-project/clang/lib/CodeGen/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/README.txt:1160,Performance,perform,performance,1160,"IRgen optimization opportunities. //===---------------------------------------------------------------------===//. The common pattern of; --; short x; // or char, etc; (x == 10); --; generates an zext/sext of x which can easily be avoided. //===---------------------------------------------------------------------===//. Bitfields accesses can be shifted to simplify masking and sign; extension. For example, if the bitfield width is 8 and it is; appropriately aligned then is is a lot shorter to just load the char; directly. //===---------------------------------------------------------------------===//. It may be worth avoiding creation of alloca's for formal arguments; for the common situation where the argument is never written to or has; its address taken. The idea would be to begin generating code by using; the argument directly and if its address is taken or it is stored to; then generate the alloca and patch up the existing code. In theory, the same optimization could be a win for block local; variables as long as the declaration dominates all statements in the; block. NOTE: The main case we care about this for is for -O0 -g compile time; performance, and in that scenario we will need to emit the alloca; anyway currently to emit proper debug info. So this is blocked by; being able to emit debug information which refers to an LLVM; temporary, not an alloca. //===---------------------------------------------------------------------===//. We should try and avoid generating basic blocks which only contain; jumps. At -O0, this penalizes us all the way from IRgen (malloc &; instruction overhead), all the way down through code generation and; assembly time. On 176.gcc:expr.ll, it looks like over 12% of basic blocks are just; direct branches!. //===---------------------------------------------------------------------===//; ",MatchSource.DOCS,interpreter/llvm-project/clang/lib/CodeGen/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/README.txt:231,Safety,avoid,avoided,231,"IRgen optimization opportunities. //===---------------------------------------------------------------------===//. The common pattern of; --; short x; // or char, etc; (x == 10); --; generates an zext/sext of x which can easily be avoided. //===---------------------------------------------------------------------===//. Bitfields accesses can be shifted to simplify masking and sign; extension. For example, if the bitfield width is 8 and it is; appropriately aligned then is is a lot shorter to just load the char; directly. //===---------------------------------------------------------------------===//. It may be worth avoiding creation of alloca's for formal arguments; for the common situation where the argument is never written to or has; its address taken. The idea would be to begin generating code by using; the argument directly and if its address is taken or it is stored to; then generate the alloca and patch up the existing code. In theory, the same optimization could be a win for block local; variables as long as the declaration dominates all statements in the; block. NOTE: The main case we care about this for is for -O0 -g compile time; performance, and in that scenario we will need to emit the alloca; anyway currently to emit proper debug info. So this is blocked by; being able to emit debug information which refers to an LLVM; temporary, not an alloca. //===---------------------------------------------------------------------===//. We should try and avoid generating basic blocks which only contain; jumps. At -O0, this penalizes us all the way from IRgen (malloc &; instruction overhead), all the way down through code generation and; assembly time. On 176.gcc:expr.ll, it looks like over 12% of basic blocks are just; direct branches!. //===---------------------------------------------------------------------===//; ",MatchSource.DOCS,interpreter/llvm-project/clang/lib/CodeGen/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/README.txt:624,Safety,avoid,avoiding,624,"IRgen optimization opportunities. //===---------------------------------------------------------------------===//. The common pattern of; --; short x; // or char, etc; (x == 10); --; generates an zext/sext of x which can easily be avoided. //===---------------------------------------------------------------------===//. Bitfields accesses can be shifted to simplify masking and sign; extension. For example, if the bitfield width is 8 and it is; appropriately aligned then is is a lot shorter to just load the char; directly. //===---------------------------------------------------------------------===//. It may be worth avoiding creation of alloca's for formal arguments; for the common situation where the argument is never written to or has; its address taken. The idea would be to begin generating code by using; the argument directly and if its address is taken or it is stored to; then generate the alloca and patch up the existing code. In theory, the same optimization could be a win for block local; variables as long as the declaration dominates all statements in the; block. NOTE: The main case we care about this for is for -O0 -g compile time; performance, and in that scenario we will need to emit the alloca; anyway currently to emit proper debug info. So this is blocked by; being able to emit debug information which refers to an LLVM; temporary, not an alloca. //===---------------------------------------------------------------------===//. We should try and avoid generating basic blocks which only contain; jumps. At -O0, this penalizes us all the way from IRgen (malloc &; instruction overhead), all the way down through code generation and; assembly time. On 176.gcc:expr.ll, it looks like over 12% of basic blocks are just; direct branches!. //===---------------------------------------------------------------------===//; ",MatchSource.DOCS,interpreter/llvm-project/clang/lib/CodeGen/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/README.txt:1481,Safety,avoid,avoid,1481,"IRgen optimization opportunities. //===---------------------------------------------------------------------===//. The common pattern of; --; short x; // or char, etc; (x == 10); --; generates an zext/sext of x which can easily be avoided. //===---------------------------------------------------------------------===//. Bitfields accesses can be shifted to simplify masking and sign; extension. For example, if the bitfield width is 8 and it is; appropriately aligned then is is a lot shorter to just load the char; directly. //===---------------------------------------------------------------------===//. It may be worth avoiding creation of alloca's for formal arguments; for the common situation where the argument is never written to or has; its address taken. The idea would be to begin generating code by using; the argument directly and if its address is taken or it is stored to; then generate the alloca and patch up the existing code. In theory, the same optimization could be a win for block local; variables as long as the declaration dominates all statements in the; block. NOTE: The main case we care about this for is for -O0 -g compile time; performance, and in that scenario we will need to emit the alloca; anyway currently to emit proper debug info. So this is blocked by; being able to emit debug information which refers to an LLVM; temporary, not an alloca. //===---------------------------------------------------------------------===//. We should try and avoid generating basic blocks which only contain; jumps. At -O0, this penalizes us all the way from IRgen (malloc &; instruction overhead), all the way down through code generation and; assembly time. On 176.gcc:expr.ll, it looks like over 12% of basic blocks are just; direct branches!. //===---------------------------------------------------------------------===//; ",MatchSource.DOCS,interpreter/llvm-project/clang/lib/CodeGen/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/README.txt:331,Security,access,accesses,331,"IRgen optimization opportunities. //===---------------------------------------------------------------------===//. The common pattern of; --; short x; // or char, etc; (x == 10); --; generates an zext/sext of x which can easily be avoided. //===---------------------------------------------------------------------===//. Bitfields accesses can be shifted to simplify masking and sign; extension. For example, if the bitfield width is 8 and it is; appropriately aligned then is is a lot shorter to just load the char; directly. //===---------------------------------------------------------------------===//. It may be worth avoiding creation of alloca's for formal arguments; for the common situation where the argument is never written to or has; its address taken. The idea would be to begin generating code by using; the argument directly and if its address is taken or it is stored to; then generate the alloca and patch up the existing code. In theory, the same optimization could be a win for block local; variables as long as the declaration dominates all statements in the; block. NOTE: The main case we care about this for is for -O0 -g compile time; performance, and in that scenario we will need to emit the alloca; anyway currently to emit proper debug info. So this is blocked by; being able to emit debug information which refers to an LLVM; temporary, not an alloca. //===---------------------------------------------------------------------===//. We should try and avoid generating basic blocks which only contain; jumps. At -O0, this penalizes us all the way from IRgen (malloc &; instruction overhead), all the way down through code generation and; assembly time. On 176.gcc:expr.ll, it looks like over 12% of basic blocks are just; direct branches!. //===---------------------------------------------------------------------===//; ",MatchSource.DOCS,interpreter/llvm-project/clang/lib/CodeGen/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/README.txt:358,Usability,simpl,simplify,358,"IRgen optimization opportunities. //===---------------------------------------------------------------------===//. The common pattern of; --; short x; // or char, etc; (x == 10); --; generates an zext/sext of x which can easily be avoided. //===---------------------------------------------------------------------===//. Bitfields accesses can be shifted to simplify masking and sign; extension. For example, if the bitfield width is 8 and it is; appropriately aligned then is is a lot shorter to just load the char; directly. //===---------------------------------------------------------------------===//. It may be worth avoiding creation of alloca's for formal arguments; for the common situation where the argument is never written to or has; its address taken. The idea would be to begin generating code by using; the argument directly and if its address is taken or it is stored to; then generate the alloca and patch up the existing code. In theory, the same optimization could be a win for block local; variables as long as the declaration dominates all statements in the; block. NOTE: The main case we care about this for is for -O0 -g compile time; performance, and in that scenario we will need to emit the alloca; anyway currently to emit proper debug info. So this is blocked by; being able to emit debug information which refers to an LLVM; temporary, not an alloca. //===---------------------------------------------------------------------===//. We should try and avoid generating basic blocks which only contain; jumps. At -O0, this penalizes us all the way from IRgen (malloc &; instruction overhead), all the way down through code generation and; assembly time. On 176.gcc:expr.ll, it looks like over 12% of basic blocks are just; direct branches!. //===---------------------------------------------------------------------===//; ",MatchSource.DOCS,interpreter/llvm-project/clang/lib/CodeGen/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:12097,Deployability,install,install,12097,"target(""ppc-htm-resource-headers"" ""${ppc_htm_files}""); add_header_target(""riscv-resource-headers"" ""${riscv_files};${riscv_generated_files}""); add_header_target(""systemz-resource-headers"" ""${systemz_files}""); add_header_target(""ve-resource-headers"" ""${ve_files}""); add_header_target(""webassembly-resource-headers"" ""${webassembly_files}""); add_header_target(""x86-resource-headers"" ""${x86_files}""). # Other header groupings; add_header_target(""hlsl-resource-headers"" ${hlsl_files}); add_header_target(""opencl-resource-headers"" ${opencl_files}); add_header_target(""llvm-libc-resource-headers"" ${llvm_libc_wrapper_files}); add_header_target(""openmp-resource-headers"" ${openmp_wrapper_files}); add_header_target(""windows-resource-headers"" ${windows_only_files}); add_header_target(""utility-resource-headers"" ${utility_files}). get_clang_resource_dir(header_install_dir SUBDIR include). #############################################################; # Install rules for the catch-all clang-resource-headers target; install(; FILES ${files} ${generated_files}; DESTINATION ${header_install_dir}; COMPONENT clang-resource-headers). install(; FILES ${cuda_wrapper_files}; DESTINATION ${header_install_dir}/cuda_wrappers; COMPONENT clang-resource-headers). install(; FILES ${cuda_wrapper_bits_files}; DESTINATION ${header_install_dir}/cuda_wrappers/bits; COMPONENT clang-resource-headers). install(; FILES ${ppc_wrapper_files}; DESTINATION ${header_install_dir}/ppc_wrappers; COMPONENT clang-resource-headers). install(; FILES ${llvm_libc_wrapper_files}; DESTINATION ${header_install_dir}/llvm_libc_wrappers; COMPONENT clang-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; COMPONENT clang-resource-headers). #############################################################; # Install rules for separate header lists; install(; FILES ${core_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT core-resource-headers). install(; FILES $",MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:12212,Deployability,install,install,12212,"rs"" ""${systemz_files}""); add_header_target(""ve-resource-headers"" ""${ve_files}""); add_header_target(""webassembly-resource-headers"" ""${webassembly_files}""); add_header_target(""x86-resource-headers"" ""${x86_files}""). # Other header groupings; add_header_target(""hlsl-resource-headers"" ${hlsl_files}); add_header_target(""opencl-resource-headers"" ${opencl_files}); add_header_target(""llvm-libc-resource-headers"" ${llvm_libc_wrapper_files}); add_header_target(""openmp-resource-headers"" ${openmp_wrapper_files}); add_header_target(""windows-resource-headers"" ${windows_only_files}); add_header_target(""utility-resource-headers"" ${utility_files}). get_clang_resource_dir(header_install_dir SUBDIR include). #############################################################; # Install rules for the catch-all clang-resource-headers target; install(; FILES ${files} ${generated_files}; DESTINATION ${header_install_dir}; COMPONENT clang-resource-headers). install(; FILES ${cuda_wrapper_files}; DESTINATION ${header_install_dir}/cuda_wrappers; COMPONENT clang-resource-headers). install(; FILES ${cuda_wrapper_bits_files}; DESTINATION ${header_install_dir}/cuda_wrappers/bits; COMPONENT clang-resource-headers). install(; FILES ${ppc_wrapper_files}; DESTINATION ${header_install_dir}/ppc_wrappers; COMPONENT clang-resource-headers). install(; FILES ${llvm_libc_wrapper_files}; DESTINATION ${header_install_dir}/llvm_libc_wrappers; COMPONENT clang-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; COMPONENT clang-resource-headers). #############################################################; # Install rules for separate header lists; install(; FILES ${core_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT core-resource-headers). install(; FILES ${arm_common_files} ${arm_common_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT arm-common-resource-headers). install(; FILES ${arm_only_files} ${arm_",MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:12335,Deployability,install,install,12335,""" ""${webassembly_files}""); add_header_target(""x86-resource-headers"" ""${x86_files}""). # Other header groupings; add_header_target(""hlsl-resource-headers"" ${hlsl_files}); add_header_target(""opencl-resource-headers"" ${opencl_files}); add_header_target(""llvm-libc-resource-headers"" ${llvm_libc_wrapper_files}); add_header_target(""openmp-resource-headers"" ${openmp_wrapper_files}); add_header_target(""windows-resource-headers"" ${windows_only_files}); add_header_target(""utility-resource-headers"" ${utility_files}). get_clang_resource_dir(header_install_dir SUBDIR include). #############################################################; # Install rules for the catch-all clang-resource-headers target; install(; FILES ${files} ${generated_files}; DESTINATION ${header_install_dir}; COMPONENT clang-resource-headers). install(; FILES ${cuda_wrapper_files}; DESTINATION ${header_install_dir}/cuda_wrappers; COMPONENT clang-resource-headers). install(; FILES ${cuda_wrapper_bits_files}; DESTINATION ${header_install_dir}/cuda_wrappers/bits; COMPONENT clang-resource-headers). install(; FILES ${ppc_wrapper_files}; DESTINATION ${header_install_dir}/ppc_wrappers; COMPONENT clang-resource-headers). install(; FILES ${llvm_libc_wrapper_files}; DESTINATION ${header_install_dir}/llvm_libc_wrappers; COMPONENT clang-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; COMPONENT clang-resource-headers). #############################################################; # Install rules for separate header lists; install(; FILES ${core_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT core-resource-headers). install(; FILES ${arm_common_files} ${arm_common_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT arm-common-resource-headers). install(; FILES ${arm_only_files} ${arm_only_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT arm-resource-headers). install(; FILES ${a",MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:12468,Deployability,install,install,12468,"t(""hlsl-resource-headers"" ${hlsl_files}); add_header_target(""opencl-resource-headers"" ${opencl_files}); add_header_target(""llvm-libc-resource-headers"" ${llvm_libc_wrapper_files}); add_header_target(""openmp-resource-headers"" ${openmp_wrapper_files}); add_header_target(""windows-resource-headers"" ${windows_only_files}); add_header_target(""utility-resource-headers"" ${utility_files}). get_clang_resource_dir(header_install_dir SUBDIR include). #############################################################; # Install rules for the catch-all clang-resource-headers target; install(; FILES ${files} ${generated_files}; DESTINATION ${header_install_dir}; COMPONENT clang-resource-headers). install(; FILES ${cuda_wrapper_files}; DESTINATION ${header_install_dir}/cuda_wrappers; COMPONENT clang-resource-headers). install(; FILES ${cuda_wrapper_bits_files}; DESTINATION ${header_install_dir}/cuda_wrappers/bits; COMPONENT clang-resource-headers). install(; FILES ${ppc_wrapper_files}; DESTINATION ${header_install_dir}/ppc_wrappers; COMPONENT clang-resource-headers). install(; FILES ${llvm_libc_wrapper_files}; DESTINATION ${header_install_dir}/llvm_libc_wrappers; COMPONENT clang-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; COMPONENT clang-resource-headers). #############################################################; # Install rules for separate header lists; install(; FILES ${core_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT core-resource-headers). install(; FILES ${arm_common_files} ${arm_common_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT arm-common-resource-headers). install(; FILES ${arm_only_files} ${arm_only_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT arm-resource-headers). install(; FILES ${aarch64_only_files} ${aarch64_only_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT aarch64-reso",MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:12589,Deployability,install,install,12589,"-libc-resource-headers"" ${llvm_libc_wrapper_files}); add_header_target(""openmp-resource-headers"" ${openmp_wrapper_files}); add_header_target(""windows-resource-headers"" ${windows_only_files}); add_header_target(""utility-resource-headers"" ${utility_files}). get_clang_resource_dir(header_install_dir SUBDIR include). #############################################################; # Install rules for the catch-all clang-resource-headers target; install(; FILES ${files} ${generated_files}; DESTINATION ${header_install_dir}; COMPONENT clang-resource-headers). install(; FILES ${cuda_wrapper_files}; DESTINATION ${header_install_dir}/cuda_wrappers; COMPONENT clang-resource-headers). install(; FILES ${cuda_wrapper_bits_files}; DESTINATION ${header_install_dir}/cuda_wrappers/bits; COMPONENT clang-resource-headers). install(; FILES ${ppc_wrapper_files}; DESTINATION ${header_install_dir}/ppc_wrappers; COMPONENT clang-resource-headers). install(; FILES ${llvm_libc_wrapper_files}; DESTINATION ${header_install_dir}/llvm_libc_wrappers; COMPONENT clang-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; COMPONENT clang-resource-headers). #############################################################; # Install rules for separate header lists; install(; FILES ${core_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT core-resource-headers). install(; FILES ${arm_common_files} ${arm_common_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT arm-common-resource-headers). install(; FILES ${arm_only_files} ${arm_only_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT arm-resource-headers). install(; FILES ${aarch64_only_files} ${aarch64_only_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT aarch64-resource-headers). install(; FILES ${cuda_wrapper_files}; DESTINATION ${header_install_dir}/cuda_wrappers; EXCLUDE_FROM_ALL; COMPON",MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:12722,Deployability,install,install,12722,"der_target(""windows-resource-headers"" ${windows_only_files}); add_header_target(""utility-resource-headers"" ${utility_files}). get_clang_resource_dir(header_install_dir SUBDIR include). #############################################################; # Install rules for the catch-all clang-resource-headers target; install(; FILES ${files} ${generated_files}; DESTINATION ${header_install_dir}; COMPONENT clang-resource-headers). install(; FILES ${cuda_wrapper_files}; DESTINATION ${header_install_dir}/cuda_wrappers; COMPONENT clang-resource-headers). install(; FILES ${cuda_wrapper_bits_files}; DESTINATION ${header_install_dir}/cuda_wrappers/bits; COMPONENT clang-resource-headers). install(; FILES ${ppc_wrapper_files}; DESTINATION ${header_install_dir}/ppc_wrappers; COMPONENT clang-resource-headers). install(; FILES ${llvm_libc_wrapper_files}; DESTINATION ${header_install_dir}/llvm_libc_wrappers; COMPONENT clang-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; COMPONENT clang-resource-headers). #############################################################; # Install rules for separate header lists; install(; FILES ${core_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT core-resource-headers). install(; FILES ${arm_common_files} ${arm_common_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT arm-common-resource-headers). install(; FILES ${arm_only_files} ${arm_only_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT arm-resource-headers). install(; FILES ${aarch64_only_files} ${aarch64_only_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT aarch64-resource-headers). install(; FILES ${cuda_wrapper_files}; DESTINATION ${header_install_dir}/cuda_wrappers; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${cuda_wrapper_bits_files}; DESTINATION ${header_install_dir}/cuda_wrappers/bits; EXCL",MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:12955,Deployability,install,install,12955,nclude). #############################################################; # Install rules for the catch-all clang-resource-headers target; install(; FILES ${files} ${generated_files}; DESTINATION ${header_install_dir}; COMPONENT clang-resource-headers). install(; FILES ${cuda_wrapper_files}; DESTINATION ${header_install_dir}/cuda_wrappers; COMPONENT clang-resource-headers). install(; FILES ${cuda_wrapper_bits_files}; DESTINATION ${header_install_dir}/cuda_wrappers/bits; COMPONENT clang-resource-headers). install(; FILES ${ppc_wrapper_files}; DESTINATION ${header_install_dir}/ppc_wrappers; COMPONENT clang-resource-headers). install(; FILES ${llvm_libc_wrapper_files}; DESTINATION ${header_install_dir}/llvm_libc_wrappers; COMPONENT clang-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; COMPONENT clang-resource-headers). #############################################################; # Install rules for separate header lists; install(; FILES ${core_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT core-resource-headers). install(; FILES ${arm_common_files} ${arm_common_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT arm-common-resource-headers). install(; FILES ${arm_only_files} ${arm_only_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT arm-resource-headers). install(; FILES ${aarch64_only_files} ${aarch64_only_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT aarch64-resource-headers). install(; FILES ${cuda_wrapper_files}; DESTINATION ${header_install_dir}/cuda_wrappers; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${cuda_wrapper_bits_files}; DESTINATION ${header_install_dir}/cuda_wrappers/bits; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${cuda_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(;,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:13073,Deployability,install,install,13073,N ${header_install_dir}; COMPONENT clang-resource-headers). install(; FILES ${cuda_wrapper_files}; DESTINATION ${header_install_dir}/cuda_wrappers; COMPONENT clang-resource-headers). install(; FILES ${cuda_wrapper_bits_files}; DESTINATION ${header_install_dir}/cuda_wrappers/bits; COMPONENT clang-resource-headers). install(; FILES ${ppc_wrapper_files}; DESTINATION ${header_install_dir}/ppc_wrappers; COMPONENT clang-resource-headers). install(; FILES ${llvm_libc_wrapper_files}; DESTINATION ${header_install_dir}/llvm_libc_wrappers; COMPONENT clang-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; COMPONENT clang-resource-headers). #############################################################; # Install rules for separate header lists; install(; FILES ${core_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT core-resource-headers). install(; FILES ${arm_common_files} ${arm_common_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT arm-common-resource-headers). install(; FILES ${arm_only_files} ${arm_only_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT arm-resource-headers). install(; FILES ${aarch64_only_files} ${aarch64_only_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT aarch64-resource-headers). install(; FILES ${cuda_wrapper_files}; DESTINATION ${header_install_dir}/cuda_wrappers; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${cuda_wrapper_bits_files}; DESTINATION ${header_install_dir}/cuda_wrappers/bits; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${cuda_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${hexagon_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT hexagon-resource-headers). install(; FILES ${hip_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:13233,Deployability,install,install,13233,ENT clang-resource-headers). install(; FILES ${cuda_wrapper_bits_files}; DESTINATION ${header_install_dir}/cuda_wrappers/bits; COMPONENT clang-resource-headers). install(; FILES ${ppc_wrapper_files}; DESTINATION ${header_install_dir}/ppc_wrappers; COMPONENT clang-resource-headers). install(; FILES ${llvm_libc_wrapper_files}; DESTINATION ${header_install_dir}/llvm_libc_wrappers; COMPONENT clang-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; COMPONENT clang-resource-headers). #############################################################; # Install rules for separate header lists; install(; FILES ${core_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT core-resource-headers). install(; FILES ${arm_common_files} ${arm_common_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT arm-common-resource-headers). install(; FILES ${arm_only_files} ${arm_only_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT arm-resource-headers). install(; FILES ${aarch64_only_files} ${aarch64_only_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT aarch64-resource-headers). install(; FILES ${cuda_wrapper_files}; DESTINATION ${header_install_dir}/cuda_wrappers; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${cuda_wrapper_bits_files}; DESTINATION ${header_install_dir}/cuda_wrappers/bits; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${cuda_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${hexagon_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT hexagon-resource-headers). install(; FILES ${hip_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT hip-resource-headers). install(; FILES ${loongarch_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT loongarch-resourc,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:13382,Deployability,install,install,13382,ders). install(; FILES ${ppc_wrapper_files}; DESTINATION ${header_install_dir}/ppc_wrappers; COMPONENT clang-resource-headers). install(; FILES ${llvm_libc_wrapper_files}; DESTINATION ${header_install_dir}/llvm_libc_wrappers; COMPONENT clang-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; COMPONENT clang-resource-headers). #############################################################; # Install rules for separate header lists; install(; FILES ${core_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT core-resource-headers). install(; FILES ${arm_common_files} ${arm_common_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT arm-common-resource-headers). install(; FILES ${arm_only_files} ${arm_only_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT arm-resource-headers). install(; FILES ${aarch64_only_files} ${aarch64_only_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT aarch64-resource-headers). install(; FILES ${cuda_wrapper_files}; DESTINATION ${header_install_dir}/cuda_wrappers; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${cuda_wrapper_bits_files}; DESTINATION ${header_install_dir}/cuda_wrappers/bits; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${cuda_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${hexagon_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT hexagon-resource-headers). install(; FILES ${hip_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT hip-resource-headers). install(; FILES ${loongarch_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT loongarch-resource-headers). install(; FILES ${mips_msa_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT mips-resource-headers). install(; FILES ${ppc,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:13543,Deployability,install,install,13543,libc_wrapper_files}; DESTINATION ${header_install_dir}/llvm_libc_wrappers; COMPONENT clang-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; COMPONENT clang-resource-headers). #############################################################; # Install rules for separate header lists; install(; FILES ${core_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT core-resource-headers). install(; FILES ${arm_common_files} ${arm_common_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT arm-common-resource-headers). install(; FILES ${arm_only_files} ${arm_only_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT arm-resource-headers). install(; FILES ${aarch64_only_files} ${aarch64_only_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT aarch64-resource-headers). install(; FILES ${cuda_wrapper_files}; DESTINATION ${header_install_dir}/cuda_wrappers; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${cuda_wrapper_bits_files}; DESTINATION ${header_install_dir}/cuda_wrappers/bits; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${cuda_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${hexagon_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT hexagon-resource-headers). install(; FILES ${hip_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT hip-resource-headers). install(; FILES ${loongarch_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT loongarch-resource-headers). install(; FILES ${mips_msa_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT mips-resource-headers). install(; FILES ${ppc_wrapper_files}; DESTINATION ${header_install_dir}/ppc_wrappers; EXCLUDE_FROM_ALL; COMPONENT ppc-resource-headers). install(; FILES ${ppc_files}; DEST,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:13683,Deployability,install,install,13683,les}; DESTINATION ${header_install_dir}/openmp_wrappers; COMPONENT clang-resource-headers). #############################################################; # Install rules for separate header lists; install(; FILES ${core_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT core-resource-headers). install(; FILES ${arm_common_files} ${arm_common_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT arm-common-resource-headers). install(; FILES ${arm_only_files} ${arm_only_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT arm-resource-headers). install(; FILES ${aarch64_only_files} ${aarch64_only_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT aarch64-resource-headers). install(; FILES ${cuda_wrapper_files}; DESTINATION ${header_install_dir}/cuda_wrappers; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${cuda_wrapper_bits_files}; DESTINATION ${header_install_dir}/cuda_wrappers/bits; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${cuda_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${hexagon_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT hexagon-resource-headers). install(; FILES ${hip_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT hip-resource-headers). install(; FILES ${loongarch_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT loongarch-resource-headers). install(; FILES ${mips_msa_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT mips-resource-headers). install(; FILES ${ppc_wrapper_files}; DESTINATION ${header_install_dir}/ppc_wrappers; EXCLUDE_FROM_ALL; COMPONENT ppc-resource-headers). install(; FILES ${ppc_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ppc-resource-headers). install(; FILES ${ppc_htm_files}; DESTINATION ${header_install_,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:13833,Deployability,install,install,13833,###################; # Install rules for separate header lists; install(; FILES ${core_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT core-resource-headers). install(; FILES ${arm_common_files} ${arm_common_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT arm-common-resource-headers). install(; FILES ${arm_only_files} ${arm_only_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT arm-resource-headers). install(; FILES ${aarch64_only_files} ${aarch64_only_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT aarch64-resource-headers). install(; FILES ${cuda_wrapper_files}; DESTINATION ${header_install_dir}/cuda_wrappers; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${cuda_wrapper_bits_files}; DESTINATION ${header_install_dir}/cuda_wrappers/bits; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${cuda_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${hexagon_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT hexagon-resource-headers). install(; FILES ${hip_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT hip-resource-headers). install(; FILES ${loongarch_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT loongarch-resource-headers). install(; FILES ${mips_msa_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT mips-resource-headers). install(; FILES ${ppc_wrapper_files}; DESTINATION ${header_install_dir}/ppc_wrappers; EXCLUDE_FROM_ALL; COMPONENT ppc-resource-headers). install(; FILES ${ppc_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ppc-resource-headers). install(; FILES ${ppc_htm_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ppc-htm-resource-headers). install(; FILES ${riscv_generated_files}; DESTINATION ${header_install_di,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:13951,Deployability,install,install,13951,ll_dir}; EXCLUDE_FROM_ALL; COMPONENT core-resource-headers). install(; FILES ${arm_common_files} ${arm_common_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT arm-common-resource-headers). install(; FILES ${arm_only_files} ${arm_only_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT arm-resource-headers). install(; FILES ${aarch64_only_files} ${aarch64_only_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT aarch64-resource-headers). install(; FILES ${cuda_wrapper_files}; DESTINATION ${header_install_dir}/cuda_wrappers; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${cuda_wrapper_bits_files}; DESTINATION ${header_install_dir}/cuda_wrappers/bits; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${cuda_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${hexagon_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT hexagon-resource-headers). install(; FILES ${hip_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT hip-resource-headers). install(; FILES ${loongarch_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT loongarch-resource-headers). install(; FILES ${mips_msa_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT mips-resource-headers). install(; FILES ${ppc_wrapper_files}; DESTINATION ${header_install_dir}/ppc_wrappers; EXCLUDE_FROM_ALL; COMPONENT ppc-resource-headers). install(; FILES ${ppc_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ppc-resource-headers). install(; FILES ${ppc_htm_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ppc-htm-resource-headers). install(; FILES ${riscv_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT riscv-resource-headers). install(; FILES ${riscv_files}; DESTINATION ${header_install_dir,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:14075,Deployability,install,install,14075,files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT arm-common-resource-headers). install(; FILES ${arm_only_files} ${arm_only_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT arm-resource-headers). install(; FILES ${aarch64_only_files} ${aarch64_only_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT aarch64-resource-headers). install(; FILES ${cuda_wrapper_files}; DESTINATION ${header_install_dir}/cuda_wrappers; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${cuda_wrapper_bits_files}; DESTINATION ${header_install_dir}/cuda_wrappers/bits; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${cuda_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${hexagon_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT hexagon-resource-headers). install(; FILES ${hip_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT hip-resource-headers). install(; FILES ${loongarch_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT loongarch-resource-headers). install(; FILES ${mips_msa_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT mips-resource-headers). install(; FILES ${ppc_wrapper_files}; DESTINATION ${header_install_dir}/ppc_wrappers; EXCLUDE_FROM_ALL; COMPONENT ppc-resource-headers). install(; FILES ${ppc_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ppc-resource-headers). install(; FILES ${ppc_htm_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ppc-htm-resource-headers). install(; FILES ${riscv_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT riscv-resource-headers). install(; FILES ${riscv_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT riscv-resource-headers). install(; FILES ${systemz_files}; DESTINATION ${header_install_d,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:14191,Deployability,install,install,14191,_only_files} ${arm_only_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT arm-resource-headers). install(; FILES ${aarch64_only_files} ${aarch64_only_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT aarch64-resource-headers). install(; FILES ${cuda_wrapper_files}; DESTINATION ${header_install_dir}/cuda_wrappers; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${cuda_wrapper_bits_files}; DESTINATION ${header_install_dir}/cuda_wrappers/bits; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${cuda_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${hexagon_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT hexagon-resource-headers). install(; FILES ${hip_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT hip-resource-headers). install(; FILES ${loongarch_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT loongarch-resource-headers). install(; FILES ${mips_msa_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT mips-resource-headers). install(; FILES ${ppc_wrapper_files}; DESTINATION ${header_install_dir}/ppc_wrappers; EXCLUDE_FROM_ALL; COMPONENT ppc-resource-headers). install(; FILES ${ppc_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ppc-resource-headers). install(; FILES ${ppc_htm_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ppc-htm-resource-headers). install(; FILES ${riscv_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT riscv-resource-headers). install(; FILES ${riscv_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT riscv-resource-headers). install(; FILES ${systemz_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT systemz-resource-headers). install(; FILES ${ve_files}; DESTINATION ${header_install_dir},MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:14319,Deployability,install,install,14319,). install(; FILES ${aarch64_only_files} ${aarch64_only_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT aarch64-resource-headers). install(; FILES ${cuda_wrapper_files}; DESTINATION ${header_install_dir}/cuda_wrappers; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${cuda_wrapper_bits_files}; DESTINATION ${header_install_dir}/cuda_wrappers/bits; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${cuda_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${hexagon_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT hexagon-resource-headers). install(; FILES ${hip_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT hip-resource-headers). install(; FILES ${loongarch_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT loongarch-resource-headers). install(; FILES ${mips_msa_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT mips-resource-headers). install(; FILES ${ppc_wrapper_files}; DESTINATION ${header_install_dir}/ppc_wrappers; EXCLUDE_FROM_ALL; COMPONENT ppc-resource-headers). install(; FILES ${ppc_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ppc-resource-headers). install(; FILES ${ppc_htm_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ppc-htm-resource-headers). install(; FILES ${riscv_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT riscv-resource-headers). install(; FILES ${riscv_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT riscv-resource-headers). install(; FILES ${systemz_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT systemz-resource-headers). install(; FILES ${ve_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ve-resource-headers). install(; FILES ${webassembly_files}; DESTINATION ${header_install_dir}; ,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:14441,Deployability,install,install,14441,MPONENT aarch64-resource-headers). install(; FILES ${cuda_wrapper_files}; DESTINATION ${header_install_dir}/cuda_wrappers; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${cuda_wrapper_bits_files}; DESTINATION ${header_install_dir}/cuda_wrappers/bits; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${cuda_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${hexagon_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT hexagon-resource-headers). install(; FILES ${hip_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT hip-resource-headers). install(; FILES ${loongarch_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT loongarch-resource-headers). install(; FILES ${mips_msa_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT mips-resource-headers). install(; FILES ${ppc_wrapper_files}; DESTINATION ${header_install_dir}/ppc_wrappers; EXCLUDE_FROM_ALL; COMPONENT ppc-resource-headers). install(; FILES ${ppc_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ppc-resource-headers). install(; FILES ${ppc_htm_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ppc-htm-resource-headers). install(; FILES ${riscv_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT riscv-resource-headers). install(; FILES ${riscv_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT riscv-resource-headers). install(; FILES ${systemz_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT systemz-resource-headers). install(; FILES ${ve_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ve-resource-headers). install(; FILES ${webassembly_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT webassembly-resource-headers). install(; FILES ${x86_files}; DESTINATION ${header_install_dir}; EXCLUD,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:14578,Deployability,install,install,14578,UDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${cuda_wrapper_bits_files}; DESTINATION ${header_install_dir}/cuda_wrappers/bits; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${cuda_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${hexagon_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT hexagon-resource-headers). install(; FILES ${hip_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT hip-resource-headers). install(; FILES ${loongarch_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT loongarch-resource-headers). install(; FILES ${mips_msa_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT mips-resource-headers). install(; FILES ${ppc_wrapper_files}; DESTINATION ${header_install_dir}/ppc_wrappers; EXCLUDE_FROM_ALL; COMPONENT ppc-resource-headers). install(; FILES ${ppc_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ppc-resource-headers). install(; FILES ${ppc_htm_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ppc-htm-resource-headers). install(; FILES ${riscv_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT riscv-resource-headers). install(; FILES ${riscv_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT riscv-resource-headers). install(; FILES ${systemz_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT systemz-resource-headers). install(; FILES ${ve_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ve-resource-headers). install(; FILES ${webassembly_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT webassembly-resource-headers). install(; FILES ${x86_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT x86-resource-headers). if(NOT CLANG_ENABLE_HLSL); set(EXCLUDE_HLSL EXCLUDE_FROM_ALL); endif(). install(;,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:14694,Deployability,install,install,14694,_dir}/cuda_wrappers/bits; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${cuda_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${hexagon_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT hexagon-resource-headers). install(; FILES ${hip_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT hip-resource-headers). install(; FILES ${loongarch_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT loongarch-resource-headers). install(; FILES ${mips_msa_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT mips-resource-headers). install(; FILES ${ppc_wrapper_files}; DESTINATION ${header_install_dir}/ppc_wrappers; EXCLUDE_FROM_ALL; COMPONENT ppc-resource-headers). install(; FILES ${ppc_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ppc-resource-headers). install(; FILES ${ppc_htm_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ppc-htm-resource-headers). install(; FILES ${riscv_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT riscv-resource-headers). install(; FILES ${riscv_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT riscv-resource-headers). install(; FILES ${systemz_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT systemz-resource-headers). install(; FILES ${ve_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ve-resource-headers). install(; FILES ${webassembly_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT webassembly-resource-headers). install(; FILES ${x86_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT x86-resource-headers). if(NOT CLANG_ENABLE_HLSL); set(EXCLUDE_HLSL EXCLUDE_FROM_ALL); endif(). install(; FILES ${hlsl_h}; DESTINATION ${header_install_dir}; ${EXCLUDE_HLSL}; COMPONENT hlsl-resource-headers). install(; FILES ,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:14818,Deployability,install,install,14818,er_install_dir}; EXCLUDE_FROM_ALL; COMPONENT cuda-resource-headers). install(; FILES ${hexagon_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT hexagon-resource-headers). install(; FILES ${hip_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT hip-resource-headers). install(; FILES ${loongarch_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT loongarch-resource-headers). install(; FILES ${mips_msa_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT mips-resource-headers). install(; FILES ${ppc_wrapper_files}; DESTINATION ${header_install_dir}/ppc_wrappers; EXCLUDE_FROM_ALL; COMPONENT ppc-resource-headers). install(; FILES ${ppc_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ppc-resource-headers). install(; FILES ${ppc_htm_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ppc-htm-resource-headers). install(; FILES ${riscv_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT riscv-resource-headers). install(; FILES ${riscv_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT riscv-resource-headers). install(; FILES ${systemz_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT systemz-resource-headers). install(; FILES ${ve_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ve-resource-headers). install(; FILES ${webassembly_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT webassembly-resource-headers). install(; FILES ${x86_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT x86-resource-headers). if(NOT CLANG_ENABLE_HLSL); set(EXCLUDE_HLSL EXCLUDE_FROM_ALL); endif(). install(; FILES ${hlsl_h}; DESTINATION ${header_install_dir}; ${EXCLUDE_HLSL}; COMPONENT hlsl-resource-headers). install(; FILES ${hlsl_subdir_files}; DESTINATION ${header_install_dir}/hlsl; ${EXCLUDE_HLSL}; COMPONENT hlsl-resource-headers). install(; FILE,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:14948,Deployability,install,install,14948,nstall_dir}; EXCLUDE_FROM_ALL; COMPONENT hexagon-resource-headers). install(; FILES ${hip_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT hip-resource-headers). install(; FILES ${loongarch_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT loongarch-resource-headers). install(; FILES ${mips_msa_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT mips-resource-headers). install(; FILES ${ppc_wrapper_files}; DESTINATION ${header_install_dir}/ppc_wrappers; EXCLUDE_FROM_ALL; COMPONENT ppc-resource-headers). install(; FILES ${ppc_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ppc-resource-headers). install(; FILES ${ppc_htm_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ppc-htm-resource-headers). install(; FILES ${riscv_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT riscv-resource-headers). install(; FILES ${riscv_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT riscv-resource-headers). install(; FILES ${systemz_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT systemz-resource-headers). install(; FILES ${ve_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ve-resource-headers). install(; FILES ${webassembly_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT webassembly-resource-headers). install(; FILES ${x86_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT x86-resource-headers). if(NOT CLANG_ENABLE_HLSL); set(EXCLUDE_HLSL EXCLUDE_FROM_ALL); endif(). install(; FILES ${hlsl_h}; DESTINATION ${header_install_dir}; ${EXCLUDE_HLSL}; COMPONENT hlsl-resource-headers). install(; FILES ${hlsl_subdir_files}; DESTINATION ${header_install_dir}/hlsl; ${EXCLUDE_HLSL}; COMPONENT hlsl-resource-headers). install(; FILES ${opencl_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT opencl-resource-headers). install(; FILES $,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:15068,Deployability,install,install,15068,tall_dir}; EXCLUDE_FROM_ALL; COMPONENT hip-resource-headers). install(; FILES ${loongarch_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT loongarch-resource-headers). install(; FILES ${mips_msa_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT mips-resource-headers). install(; FILES ${ppc_wrapper_files}; DESTINATION ${header_install_dir}/ppc_wrappers; EXCLUDE_FROM_ALL; COMPONENT ppc-resource-headers). install(; FILES ${ppc_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ppc-resource-headers). install(; FILES ${ppc_htm_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ppc-htm-resource-headers). install(; FILES ${riscv_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT riscv-resource-headers). install(; FILES ${riscv_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT riscv-resource-headers). install(; FILES ${systemz_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT systemz-resource-headers). install(; FILES ${ve_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ve-resource-headers). install(; FILES ${webassembly_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT webassembly-resource-headers). install(; FILES ${x86_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT x86-resource-headers). if(NOT CLANG_ENABLE_HLSL); set(EXCLUDE_HLSL EXCLUDE_FROM_ALL); endif(). install(; FILES ${hlsl_h}; DESTINATION ${header_install_dir}; ${EXCLUDE_HLSL}; COMPONENT hlsl-resource-headers). install(; FILES ${hlsl_subdir_files}; DESTINATION ${header_install_dir}/hlsl; ${EXCLUDE_HLSL}; COMPONENT hlsl-resource-headers). install(; FILES ${opencl_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT opencl-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; EXCLUDE_FROM_ALL; COMPONENT openmp-resource-hea,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:15192,Deployability,install,install,15192,install_dir}; EXCLUDE_FROM_ALL; COMPONENT loongarch-resource-headers). install(; FILES ${mips_msa_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT mips-resource-headers). install(; FILES ${ppc_wrapper_files}; DESTINATION ${header_install_dir}/ppc_wrappers; EXCLUDE_FROM_ALL; COMPONENT ppc-resource-headers). install(; FILES ${ppc_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ppc-resource-headers). install(; FILES ${ppc_htm_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ppc-htm-resource-headers). install(; FILES ${riscv_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT riscv-resource-headers). install(; FILES ${riscv_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT riscv-resource-headers). install(; FILES ${systemz_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT systemz-resource-headers). install(; FILES ${ve_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ve-resource-headers). install(; FILES ${webassembly_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT webassembly-resource-headers). install(; FILES ${x86_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT x86-resource-headers). if(NOT CLANG_ENABLE_HLSL); set(EXCLUDE_HLSL EXCLUDE_FROM_ALL); endif(). install(; FILES ${hlsl_h}; DESTINATION ${header_install_dir}; ${EXCLUDE_HLSL}; COMPONENT hlsl-resource-headers). install(; FILES ${hlsl_subdir_files}; DESTINATION ${header_install_dir}/hlsl; ${EXCLUDE_HLSL}; COMPONENT hlsl-resource-headers). install(; FILES ${opencl_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT opencl-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; EXCLUDE_FROM_ALL; COMPONENT openmp-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; EXCLUDE_FROM_ALL; CO,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:15306,Deployability,install,install,15306,der_install_dir}; EXCLUDE_FROM_ALL; COMPONENT mips-resource-headers). install(; FILES ${ppc_wrapper_files}; DESTINATION ${header_install_dir}/ppc_wrappers; EXCLUDE_FROM_ALL; COMPONENT ppc-resource-headers). install(; FILES ${ppc_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ppc-resource-headers). install(; FILES ${ppc_htm_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ppc-htm-resource-headers). install(; FILES ${riscv_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT riscv-resource-headers). install(; FILES ${riscv_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT riscv-resource-headers). install(; FILES ${systemz_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT systemz-resource-headers). install(; FILES ${ve_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ve-resource-headers). install(; FILES ${webassembly_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT webassembly-resource-headers). install(; FILES ${x86_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT x86-resource-headers). if(NOT CLANG_ENABLE_HLSL); set(EXCLUDE_HLSL EXCLUDE_FROM_ALL); endif(). install(; FILES ${hlsl_h}; DESTINATION ${header_install_dir}; ${EXCLUDE_HLSL}; COMPONENT hlsl-resource-headers). install(; FILES ${hlsl_subdir_files}; DESTINATION ${header_install_dir}/hlsl; ${EXCLUDE_HLSL}; COMPONENT hlsl-resource-headers). install(; FILES ${opencl_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT opencl-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; EXCLUDE_FROM_ALL; COMPONENT openmp-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; EXCLUDE_FROM_ALL; COMPONENT openmp-resource-headers). install(; FILES ${utility_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; CO,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:15438,Deployability,install,install,15438,ader_install_dir}/ppc_wrappers; EXCLUDE_FROM_ALL; COMPONENT ppc-resource-headers). install(; FILES ${ppc_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ppc-resource-headers). install(; FILES ${ppc_htm_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ppc-htm-resource-headers). install(; FILES ${riscv_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT riscv-resource-headers). install(; FILES ${riscv_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT riscv-resource-headers). install(; FILES ${systemz_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT systemz-resource-headers). install(; FILES ${ve_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ve-resource-headers). install(; FILES ${webassembly_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT webassembly-resource-headers). install(; FILES ${x86_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT x86-resource-headers). if(NOT CLANG_ENABLE_HLSL); set(EXCLUDE_HLSL EXCLUDE_FROM_ALL); endif(). install(; FILES ${hlsl_h}; DESTINATION ${header_install_dir}; ${EXCLUDE_HLSL}; COMPONENT hlsl-resource-headers). install(; FILES ${hlsl_subdir_files}; DESTINATION ${header_install_dir}/hlsl; ${EXCLUDE_HLSL}; COMPONENT hlsl-resource-headers). install(; FILES ${opencl_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT opencl-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; EXCLUDE_FROM_ALL; COMPONENT openmp-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; EXCLUDE_FROM_ALL; COMPONENT openmp-resource-headers). install(; FILES ${utility_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT utility-resource-headers). install(; FILES ${windows_only_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_AL,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:15626,Deployability,install,install,15626,ce-headers). install(; FILES ${ppc_htm_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ppc-htm-resource-headers). install(; FILES ${riscv_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT riscv-resource-headers). install(; FILES ${riscv_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT riscv-resource-headers). install(; FILES ${systemz_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT systemz-resource-headers). install(; FILES ${ve_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ve-resource-headers). install(; FILES ${webassembly_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT webassembly-resource-headers). install(; FILES ${x86_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT x86-resource-headers). if(NOT CLANG_ENABLE_HLSL); set(EXCLUDE_HLSL EXCLUDE_FROM_ALL); endif(). install(; FILES ${hlsl_h}; DESTINATION ${header_install_dir}; ${EXCLUDE_HLSL}; COMPONENT hlsl-resource-headers). install(; FILES ${hlsl_subdir_files}; DESTINATION ${header_install_dir}/hlsl; ${EXCLUDE_HLSL}; COMPONENT hlsl-resource-headers). install(; FILES ${opencl_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT opencl-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; EXCLUDE_FROM_ALL; COMPONENT openmp-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; EXCLUDE_FROM_ALL; COMPONENT openmp-resource-headers). install(; FILES ${utility_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT utility-resource-headers). install(; FILES ${windows_only_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT windows-resource-headers); #############################################################. if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-clang-resource-headers; D,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:15739,Deployability,install,install,15739,ource-headers). install(; FILES ${riscv_generated_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT riscv-resource-headers). install(; FILES ${riscv_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT riscv-resource-headers). install(; FILES ${systemz_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT systemz-resource-headers). install(; FILES ${ve_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ve-resource-headers). install(; FILES ${webassembly_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT webassembly-resource-headers). install(; FILES ${x86_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT x86-resource-headers). if(NOT CLANG_ENABLE_HLSL); set(EXCLUDE_HLSL EXCLUDE_FROM_ALL); endif(). install(; FILES ${hlsl_h}; DESTINATION ${header_install_dir}; ${EXCLUDE_HLSL}; COMPONENT hlsl-resource-headers). install(; FILES ${hlsl_subdir_files}; DESTINATION ${header_install_dir}/hlsl; ${EXCLUDE_HLSL}; COMPONENT hlsl-resource-headers). install(; FILES ${opencl_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT opencl-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; EXCLUDE_FROM_ALL; COMPONENT openmp-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; EXCLUDE_FROM_ALL; COMPONENT openmp-resource-headers). install(; FILES ${utility_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT utility-resource-headers). install(; FILES ${windows_only_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT windows-resource-headers); #############################################################. if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-clang-resource-headers; DEPENDS clang-resource-headers; COMPONENT clang-resource-headers). add_llvm_install_targets(install-core-resource-headers;,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:15868,Deployability,install,install,15868,-resource-headers). install(; FILES ${riscv_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT riscv-resource-headers). install(; FILES ${systemz_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT systemz-resource-headers). install(; FILES ${ve_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ve-resource-headers). install(; FILES ${webassembly_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT webassembly-resource-headers). install(; FILES ${x86_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT x86-resource-headers). if(NOT CLANG_ENABLE_HLSL); set(EXCLUDE_HLSL EXCLUDE_FROM_ALL); endif(). install(; FILES ${hlsl_h}; DESTINATION ${header_install_dir}; ${EXCLUDE_HLSL}; COMPONENT hlsl-resource-headers). install(; FILES ${hlsl_subdir_files}; DESTINATION ${header_install_dir}/hlsl; ${EXCLUDE_HLSL}; COMPONENT hlsl-resource-headers). install(; FILES ${opencl_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT opencl-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; EXCLUDE_FROM_ALL; COMPONENT openmp-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; EXCLUDE_FROM_ALL; COMPONENT openmp-resource-headers). install(; FILES ${utility_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT utility-resource-headers). install(; FILES ${windows_only_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT windows-resource-headers); #############################################################. if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-clang-resource-headers; DEPENDS clang-resource-headers; COMPONENT clang-resource-headers). add_llvm_install_targets(install-core-resource-headers; DEPENDS core-resource-headers; COMPONENT core-resource-headers); add_llvm_install_targets(install-arm-common-resource-header,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:15990,Deployability,install,install,15990,ers). install(; FILES ${systemz_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT systemz-resource-headers). install(; FILES ${ve_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ve-resource-headers). install(; FILES ${webassembly_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT webassembly-resource-headers). install(; FILES ${x86_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT x86-resource-headers). if(NOT CLANG_ENABLE_HLSL); set(EXCLUDE_HLSL EXCLUDE_FROM_ALL); endif(). install(; FILES ${hlsl_h}; DESTINATION ${header_install_dir}; ${EXCLUDE_HLSL}; COMPONENT hlsl-resource-headers). install(; FILES ${hlsl_subdir_files}; DESTINATION ${header_install_dir}/hlsl; ${EXCLUDE_HLSL}; COMPONENT hlsl-resource-headers). install(; FILES ${opencl_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT opencl-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; EXCLUDE_FROM_ALL; COMPONENT openmp-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; EXCLUDE_FROM_ALL; COMPONENT openmp-resource-headers). install(; FILES ${utility_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT utility-resource-headers). install(; FILES ${windows_only_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT windows-resource-headers); #############################################################. if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-clang-resource-headers; DEPENDS clang-resource-headers; COMPONENT clang-resource-headers). add_llvm_install_targets(install-core-resource-headers; DEPENDS core-resource-headers; COMPONENT core-resource-headers); add_llvm_install_targets(install-arm-common-resource-headers; DEPENDS arm-common-resource-headers; COMPONENT arm-common-resource-headers); add_llvm_install_targets(install-arm-resource-headers;,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:16136,Deployability,install,install,16136,${ve_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT ve-resource-headers). install(; FILES ${webassembly_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT webassembly-resource-headers). install(; FILES ${x86_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT x86-resource-headers). if(NOT CLANG_ENABLE_HLSL); set(EXCLUDE_HLSL EXCLUDE_FROM_ALL); endif(). install(; FILES ${hlsl_h}; DESTINATION ${header_install_dir}; ${EXCLUDE_HLSL}; COMPONENT hlsl-resource-headers). install(; FILES ${hlsl_subdir_files}; DESTINATION ${header_install_dir}/hlsl; ${EXCLUDE_HLSL}; COMPONENT hlsl-resource-headers). install(; FILES ${opencl_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT opencl-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; EXCLUDE_FROM_ALL; COMPONENT openmp-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; EXCLUDE_FROM_ALL; COMPONENT openmp-resource-headers). install(; FILES ${utility_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT utility-resource-headers). install(; FILES ${windows_only_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT windows-resource-headers); #############################################################. if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-clang-resource-headers; DEPENDS clang-resource-headers; COMPONENT clang-resource-headers). add_llvm_install_targets(install-core-resource-headers; DEPENDS core-resource-headers; COMPONENT core-resource-headers); add_llvm_install_targets(install-arm-common-resource-headers; DEPENDS arm-common-resource-headers; COMPONENT arm-common-resource-headers); add_llvm_install_targets(install-arm-resource-headers; DEPENDS arm-resource-headers; COMPONENT arm-resource-headers); add_llvm_install_targets(install-aarch64-resource-headers; DEPENDS aarch64-resourc,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:16282,Deployability,install,install,16282, DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT webassembly-resource-headers). install(; FILES ${x86_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT x86-resource-headers). if(NOT CLANG_ENABLE_HLSL); set(EXCLUDE_HLSL EXCLUDE_FROM_ALL); endif(). install(; FILES ${hlsl_h}; DESTINATION ${header_install_dir}; ${EXCLUDE_HLSL}; COMPONENT hlsl-resource-headers). install(; FILES ${hlsl_subdir_files}; DESTINATION ${header_install_dir}/hlsl; ${EXCLUDE_HLSL}; COMPONENT hlsl-resource-headers). install(; FILES ${opencl_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT opencl-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; EXCLUDE_FROM_ALL; COMPONENT openmp-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; EXCLUDE_FROM_ALL; COMPONENT openmp-resource-headers). install(; FILES ${utility_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT utility-resource-headers). install(; FILES ${windows_only_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT windows-resource-headers); #############################################################. if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-clang-resource-headers; DEPENDS clang-resource-headers; COMPONENT clang-resource-headers). add_llvm_install_targets(install-core-resource-headers; DEPENDS core-resource-headers; COMPONENT core-resource-headers); add_llvm_install_targets(install-arm-common-resource-headers; DEPENDS arm-common-resource-headers; COMPONENT arm-common-resource-headers); add_llvm_install_targets(install-arm-resource-headers; DEPENDS arm-resource-headers; COMPONENT arm-resource-headers); add_llvm_install_targets(install-aarch64-resource-headers; DEPENDS aarch64-resource-headers; COMPONENT aarch64-resource-headers); add_llvm_install_targets(install-cuda-resource-headers; DEPENDS cuda-resource-headers; ,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:16406,Deployability,install,install,16406,; EXCLUDE_FROM_ALL; COMPONENT x86-resource-headers). if(NOT CLANG_ENABLE_HLSL); set(EXCLUDE_HLSL EXCLUDE_FROM_ALL); endif(). install(; FILES ${hlsl_h}; DESTINATION ${header_install_dir}; ${EXCLUDE_HLSL}; COMPONENT hlsl-resource-headers). install(; FILES ${hlsl_subdir_files}; DESTINATION ${header_install_dir}/hlsl; ${EXCLUDE_HLSL}; COMPONENT hlsl-resource-headers). install(; FILES ${opencl_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT opencl-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; EXCLUDE_FROM_ALL; COMPONENT openmp-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; EXCLUDE_FROM_ALL; COMPONENT openmp-resource-headers). install(; FILES ${utility_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT utility-resource-headers). install(; FILES ${windows_only_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT windows-resource-headers); #############################################################. if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-clang-resource-headers; DEPENDS clang-resource-headers; COMPONENT clang-resource-headers). add_llvm_install_targets(install-core-resource-headers; DEPENDS core-resource-headers; COMPONENT core-resource-headers); add_llvm_install_targets(install-arm-common-resource-headers; DEPENDS arm-common-resource-headers; COMPONENT arm-common-resource-headers); add_llvm_install_targets(install-arm-resource-headers; DEPENDS arm-resource-headers; COMPONENT arm-resource-headers); add_llvm_install_targets(install-aarch64-resource-headers; DEPENDS aarch64-resource-headers; COMPONENT aarch64-resource-headers); add_llvm_install_targets(install-cuda-resource-headers; DEPENDS cuda-resource-headers; COMPONENT cuda-resource-headers); add_llvm_install_targets(install-hexagon-resource-headers; DEPENDS hexagon-resource-headers; COMPONENT hexagon-resource-head,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:16649,Deployability,install,install-clang-resource-headers,16649,r_install_dir}; ${EXCLUDE_HLSL}; COMPONENT hlsl-resource-headers). install(; FILES ${hlsl_subdir_files}; DESTINATION ${header_install_dir}/hlsl; ${EXCLUDE_HLSL}; COMPONENT hlsl-resource-headers). install(; FILES ${opencl_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT opencl-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; EXCLUDE_FROM_ALL; COMPONENT openmp-resource-headers). install(; FILES ${openmp_wrapper_files}; DESTINATION ${header_install_dir}/openmp_wrappers; EXCLUDE_FROM_ALL; COMPONENT openmp-resource-headers). install(; FILES ${utility_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT utility-resource-headers). install(; FILES ${windows_only_files}; DESTINATION ${header_install_dir}; EXCLUDE_FROM_ALL; COMPONENT windows-resource-headers); #############################################################. if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-clang-resource-headers; DEPENDS clang-resource-headers; COMPONENT clang-resource-headers). add_llvm_install_targets(install-core-resource-headers; DEPENDS core-resource-headers; COMPONENT core-resource-headers); add_llvm_install_targets(install-arm-common-resource-headers; DEPENDS arm-common-resource-headers; COMPONENT arm-common-resource-headers); add_llvm_install_targets(install-arm-resource-headers; DEPENDS arm-resource-headers; COMPONENT arm-resource-headers); add_llvm_install_targets(install-aarch64-resource-headers; DEPENDS aarch64-resource-headers; COMPONENT aarch64-resource-headers); add_llvm_install_targets(install-cuda-resource-headers; DEPENDS cuda-resource-headers; COMPONENT cuda-resource-headers); add_llvm_install_targets(install-hexagon-resource-headers; DEPENDS hexagon-resource-headers; COMPONENT hexagon-resource-headers); add_llvm_install_targets(install-hip-resource-headers; DEPENDS hip-resource-headers; COMPONENT hip-resource-headers); add_llvm_install_targets(install-mips-resource-,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:16773,Deployability,install,install-core-resource-headers,16773,ENDS clang-resource-headers; COMPONENT clang-resource-headers). add_llvm_install_targets(install-core-resource-headers; DEPENDS core-resource-headers; COMPONENT core-resource-headers); add_llvm_install_targets(install-arm-common-resource-headers; DEPENDS arm-common-resource-headers; COMPONENT arm-common-resource-headers); add_llvm_install_targets(install-arm-resource-headers; DEPENDS arm-resource-headers; COMPONENT arm-resource-headers); add_llvm_install_targets(install-aarch64-resource-headers; DEPENDS aarch64-resource-headers; COMPONENT aarch64-resource-headers); add_llvm_install_targets(install-cuda-resource-headers; DEPENDS cuda-resource-headers; COMPONENT cuda-resource-headers); add_llvm_install_targets(install-hexagon-resource-headers; DEPENDS hexagon-resource-headers; COMPONENT hexagon-resource-headers); add_llvm_install_targets(install-hip-resource-headers; DEPENDS hip-resource-headers; COMPONENT hip-resource-headers); add_llvm_install_targets(install-mips-resource-headers; DEPENDS mips-resource-headers; COMPONENT mips-resource-headers); add_llvm_install_targets(install-ppc-resource-headers; DEPENDS ppc-resource-headers; COMPONENT ppc-resource-headers); add_llvm_install_targets(install-ppc-htm-resource-headers; DEPENDS ppc-htm-resource-headers; COMPONENT ppc-htm-resource-headers); add_llvm_install_targets(install-riscv-resource-headers; DEPENDS riscv-resource-headers; COMPONENT riscv-resource-headers); add_llvm_install_targets(install-systemz-resource-headers; DEPENDS systemz-resource-headers; COMPONENT systemz-resource-headers); add_llvm_install_targets(install-ve-resource-headers; DEPENDS ve-resource-headers; COMPONENT ve-resource-headers); add_llvm_install_targets(install-x86-resource-headers; DEPENDS x86-resource-headers; COMPONENT x86-resource-headers); add_llvm_install_targets(install-webassembly-resource-headers; DEPENDS webassembly-resource-headers; COMPONENT webassembly-resource-headers). add_llvm_install_targets(install-hlsl-resource-headers; DEPEND,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:16894,Deployability,install,install-arm-common-resource-headers,16894,ENDS clang-resource-headers; COMPONENT clang-resource-headers). add_llvm_install_targets(install-core-resource-headers; DEPENDS core-resource-headers; COMPONENT core-resource-headers); add_llvm_install_targets(install-arm-common-resource-headers; DEPENDS arm-common-resource-headers; COMPONENT arm-common-resource-headers); add_llvm_install_targets(install-arm-resource-headers; DEPENDS arm-resource-headers; COMPONENT arm-resource-headers); add_llvm_install_targets(install-aarch64-resource-headers; DEPENDS aarch64-resource-headers; COMPONENT aarch64-resource-headers); add_llvm_install_targets(install-cuda-resource-headers; DEPENDS cuda-resource-headers; COMPONENT cuda-resource-headers); add_llvm_install_targets(install-hexagon-resource-headers; DEPENDS hexagon-resource-headers; COMPONENT hexagon-resource-headers); add_llvm_install_targets(install-hip-resource-headers; DEPENDS hip-resource-headers; COMPONENT hip-resource-headers); add_llvm_install_targets(install-mips-resource-headers; DEPENDS mips-resource-headers; COMPONENT mips-resource-headers); add_llvm_install_targets(install-ppc-resource-headers; DEPENDS ppc-resource-headers; COMPONENT ppc-resource-headers); add_llvm_install_targets(install-ppc-htm-resource-headers; DEPENDS ppc-htm-resource-headers; COMPONENT ppc-htm-resource-headers); add_llvm_install_targets(install-riscv-resource-headers; DEPENDS riscv-resource-headers; COMPONENT riscv-resource-headers); add_llvm_install_targets(install-systemz-resource-headers; DEPENDS systemz-resource-headers; COMPONENT systemz-resource-headers); add_llvm_install_targets(install-ve-resource-headers; DEPENDS ve-resource-headers; COMPONENT ve-resource-headers); add_llvm_install_targets(install-x86-resource-headers; DEPENDS x86-resource-headers; COMPONENT x86-resource-headers); add_llvm_install_targets(install-webassembly-resource-headers; DEPENDS webassembly-resource-headers; COMPONENT webassembly-resource-headers). add_llvm_install_targets(install-hlsl-resource-headers; DEPEND,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:17033,Deployability,install,install-arm-resource-headers,17033,ENDS clang-resource-headers; COMPONENT clang-resource-headers). add_llvm_install_targets(install-core-resource-headers; DEPENDS core-resource-headers; COMPONENT core-resource-headers); add_llvm_install_targets(install-arm-common-resource-headers; DEPENDS arm-common-resource-headers; COMPONENT arm-common-resource-headers); add_llvm_install_targets(install-arm-resource-headers; DEPENDS arm-resource-headers; COMPONENT arm-resource-headers); add_llvm_install_targets(install-aarch64-resource-headers; DEPENDS aarch64-resource-headers; COMPONENT aarch64-resource-headers); add_llvm_install_targets(install-cuda-resource-headers; DEPENDS cuda-resource-headers; COMPONENT cuda-resource-headers); add_llvm_install_targets(install-hexagon-resource-headers; DEPENDS hexagon-resource-headers; COMPONENT hexagon-resource-headers); add_llvm_install_targets(install-hip-resource-headers; DEPENDS hip-resource-headers; COMPONENT hip-resource-headers); add_llvm_install_targets(install-mips-resource-headers; DEPENDS mips-resource-headers; COMPONENT mips-resource-headers); add_llvm_install_targets(install-ppc-resource-headers; DEPENDS ppc-resource-headers; COMPONENT ppc-resource-headers); add_llvm_install_targets(install-ppc-htm-resource-headers; DEPENDS ppc-htm-resource-headers; COMPONENT ppc-htm-resource-headers); add_llvm_install_targets(install-riscv-resource-headers; DEPENDS riscv-resource-headers; COMPONENT riscv-resource-headers); add_llvm_install_targets(install-systemz-resource-headers; DEPENDS systemz-resource-headers; COMPONENT systemz-resource-headers); add_llvm_install_targets(install-ve-resource-headers; DEPENDS ve-resource-headers; COMPONENT ve-resource-headers); add_llvm_install_targets(install-x86-resource-headers; DEPENDS x86-resource-headers; COMPONENT x86-resource-headers); add_llvm_install_targets(install-webassembly-resource-headers; DEPENDS webassembly-resource-headers; COMPONENT webassembly-resource-headers). add_llvm_install_targets(install-hlsl-resource-headers; DEPEND,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:17151,Deployability,install,install-,17151,ENDS clang-resource-headers; COMPONENT clang-resource-headers). add_llvm_install_targets(install-core-resource-headers; DEPENDS core-resource-headers; COMPONENT core-resource-headers); add_llvm_install_targets(install-arm-common-resource-headers; DEPENDS arm-common-resource-headers; COMPONENT arm-common-resource-headers); add_llvm_install_targets(install-arm-resource-headers; DEPENDS arm-resource-headers; COMPONENT arm-resource-headers); add_llvm_install_targets(install-aarch64-resource-headers; DEPENDS aarch64-resource-headers; COMPONENT aarch64-resource-headers); add_llvm_install_targets(install-cuda-resource-headers; DEPENDS cuda-resource-headers; COMPONENT cuda-resource-headers); add_llvm_install_targets(install-hexagon-resource-headers; DEPENDS hexagon-resource-headers; COMPONENT hexagon-resource-headers); add_llvm_install_targets(install-hip-resource-headers; DEPENDS hip-resource-headers; COMPONENT hip-resource-headers); add_llvm_install_targets(install-mips-resource-headers; DEPENDS mips-resource-headers; COMPONENT mips-resource-headers); add_llvm_install_targets(install-ppc-resource-headers; DEPENDS ppc-resource-headers; COMPONENT ppc-resource-headers); add_llvm_install_targets(install-ppc-htm-resource-headers; DEPENDS ppc-htm-resource-headers; COMPONENT ppc-htm-resource-headers); add_llvm_install_targets(install-riscv-resource-headers; DEPENDS riscv-resource-headers; COMPONENT riscv-resource-headers); add_llvm_install_targets(install-systemz-resource-headers; DEPENDS systemz-resource-headers; COMPONENT systemz-resource-headers); add_llvm_install_targets(install-ve-resource-headers; DEPENDS ve-resource-headers; COMPONENT ve-resource-headers); add_llvm_install_targets(install-x86-resource-headers; DEPENDS x86-resource-headers; COMPONENT x86-resource-headers); add_llvm_install_targets(install-webassembly-resource-headers; DEPENDS webassembly-resource-headers; COMPONENT webassembly-resource-headers). add_llvm_install_targets(install-hlsl-resource-headers; DEPEND,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:17281,Deployability,install,install-cuda-resource-headers,17281,ENDS clang-resource-headers; COMPONENT clang-resource-headers). add_llvm_install_targets(install-core-resource-headers; DEPENDS core-resource-headers; COMPONENT core-resource-headers); add_llvm_install_targets(install-arm-common-resource-headers; DEPENDS arm-common-resource-headers; COMPONENT arm-common-resource-headers); add_llvm_install_targets(install-arm-resource-headers; DEPENDS arm-resource-headers; COMPONENT arm-resource-headers); add_llvm_install_targets(install-aarch64-resource-headers; DEPENDS aarch64-resource-headers; COMPONENT aarch64-resource-headers); add_llvm_install_targets(install-cuda-resource-headers; DEPENDS cuda-resource-headers; COMPONENT cuda-resource-headers); add_llvm_install_targets(install-hexagon-resource-headers; DEPENDS hexagon-resource-headers; COMPONENT hexagon-resource-headers); add_llvm_install_targets(install-hip-resource-headers; DEPENDS hip-resource-headers; COMPONENT hip-resource-headers); add_llvm_install_targets(install-mips-resource-headers; DEPENDS mips-resource-headers; COMPONENT mips-resource-headers); add_llvm_install_targets(install-ppc-resource-headers; DEPENDS ppc-resource-headers; COMPONENT ppc-resource-headers); add_llvm_install_targets(install-ppc-htm-resource-headers; DEPENDS ppc-htm-resource-headers; COMPONENT ppc-htm-resource-headers); add_llvm_install_targets(install-riscv-resource-headers; DEPENDS riscv-resource-headers; COMPONENT riscv-resource-headers); add_llvm_install_targets(install-systemz-resource-headers; DEPENDS systemz-resource-headers; COMPONENT systemz-resource-headers); add_llvm_install_targets(install-ve-resource-headers; DEPENDS ve-resource-headers; COMPONENT ve-resource-headers); add_llvm_install_targets(install-x86-resource-headers; DEPENDS x86-resource-headers; COMPONENT x86-resource-headers); add_llvm_install_targets(install-webassembly-resource-headers; DEPENDS webassembly-resource-headers; COMPONENT webassembly-resource-headers). add_llvm_install_targets(install-hlsl-resource-headers; DEPEND,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:17402,Deployability,install,install-hexagon-resource-headers,17402,ENDS clang-resource-headers; COMPONENT clang-resource-headers). add_llvm_install_targets(install-core-resource-headers; DEPENDS core-resource-headers; COMPONENT core-resource-headers); add_llvm_install_targets(install-arm-common-resource-headers; DEPENDS arm-common-resource-headers; COMPONENT arm-common-resource-headers); add_llvm_install_targets(install-arm-resource-headers; DEPENDS arm-resource-headers; COMPONENT arm-resource-headers); add_llvm_install_targets(install-aarch64-resource-headers; DEPENDS aarch64-resource-headers; COMPONENT aarch64-resource-headers); add_llvm_install_targets(install-cuda-resource-headers; DEPENDS cuda-resource-headers; COMPONENT cuda-resource-headers); add_llvm_install_targets(install-hexagon-resource-headers; DEPENDS hexagon-resource-headers; COMPONENT hexagon-resource-headers); add_llvm_install_targets(install-hip-resource-headers; DEPENDS hip-resource-headers; COMPONENT hip-resource-headers); add_llvm_install_targets(install-mips-resource-headers; DEPENDS mips-resource-headers; COMPONENT mips-resource-headers); add_llvm_install_targets(install-ppc-resource-headers; DEPENDS ppc-resource-headers; COMPONENT ppc-resource-headers); add_llvm_install_targets(install-ppc-htm-resource-headers; DEPENDS ppc-htm-resource-headers; COMPONENT ppc-htm-resource-headers); add_llvm_install_targets(install-riscv-resource-headers; DEPENDS riscv-resource-headers; COMPONENT riscv-resource-headers); add_llvm_install_targets(install-systemz-resource-headers; DEPENDS systemz-resource-headers; COMPONENT systemz-resource-headers); add_llvm_install_targets(install-ve-resource-headers; DEPENDS ve-resource-headers; COMPONENT ve-resource-headers); add_llvm_install_targets(install-x86-resource-headers; DEPENDS x86-resource-headers; COMPONENT x86-resource-headers); add_llvm_install_targets(install-webassembly-resource-headers; DEPENDS webassembly-resource-headers; COMPONENT webassembly-resource-headers). add_llvm_install_targets(install-hlsl-resource-headers; DEPEND,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:17532,Deployability,install,install-hip-resource-headers,17532,ENDS clang-resource-headers; COMPONENT clang-resource-headers). add_llvm_install_targets(install-core-resource-headers; DEPENDS core-resource-headers; COMPONENT core-resource-headers); add_llvm_install_targets(install-arm-common-resource-headers; DEPENDS arm-common-resource-headers; COMPONENT arm-common-resource-headers); add_llvm_install_targets(install-arm-resource-headers; DEPENDS arm-resource-headers; COMPONENT arm-resource-headers); add_llvm_install_targets(install-aarch64-resource-headers; DEPENDS aarch64-resource-headers; COMPONENT aarch64-resource-headers); add_llvm_install_targets(install-cuda-resource-headers; DEPENDS cuda-resource-headers; COMPONENT cuda-resource-headers); add_llvm_install_targets(install-hexagon-resource-headers; DEPENDS hexagon-resource-headers; COMPONENT hexagon-resource-headers); add_llvm_install_targets(install-hip-resource-headers; DEPENDS hip-resource-headers; COMPONENT hip-resource-headers); add_llvm_install_targets(install-mips-resource-headers; DEPENDS mips-resource-headers; COMPONENT mips-resource-headers); add_llvm_install_targets(install-ppc-resource-headers; DEPENDS ppc-resource-headers; COMPONENT ppc-resource-headers); add_llvm_install_targets(install-ppc-htm-resource-headers; DEPENDS ppc-htm-resource-headers; COMPONENT ppc-htm-resource-headers); add_llvm_install_targets(install-riscv-resource-headers; DEPENDS riscv-resource-headers; COMPONENT riscv-resource-headers); add_llvm_install_targets(install-systemz-resource-headers; DEPENDS systemz-resource-headers; COMPONENT systemz-resource-headers); add_llvm_install_targets(install-ve-resource-headers; DEPENDS ve-resource-headers; COMPONENT ve-resource-headers); add_llvm_install_targets(install-x86-resource-headers; DEPENDS x86-resource-headers; COMPONENT x86-resource-headers); add_llvm_install_targets(install-webassembly-resource-headers; DEPENDS webassembly-resource-headers; COMPONENT webassembly-resource-headers). add_llvm_install_targets(install-hlsl-resource-headers; DEPEND,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:17650,Deployability,install,install-mips-resource-headers,17650,ENDS clang-resource-headers; COMPONENT clang-resource-headers). add_llvm_install_targets(install-core-resource-headers; DEPENDS core-resource-headers; COMPONENT core-resource-headers); add_llvm_install_targets(install-arm-common-resource-headers; DEPENDS arm-common-resource-headers; COMPONENT arm-common-resource-headers); add_llvm_install_targets(install-arm-resource-headers; DEPENDS arm-resource-headers; COMPONENT arm-resource-headers); add_llvm_install_targets(install-aarch64-resource-headers; DEPENDS aarch64-resource-headers; COMPONENT aarch64-resource-headers); add_llvm_install_targets(install-cuda-resource-headers; DEPENDS cuda-resource-headers; COMPONENT cuda-resource-headers); add_llvm_install_targets(install-hexagon-resource-headers; DEPENDS hexagon-resource-headers; COMPONENT hexagon-resource-headers); add_llvm_install_targets(install-hip-resource-headers; DEPENDS hip-resource-headers; COMPONENT hip-resource-headers); add_llvm_install_targets(install-mips-resource-headers; DEPENDS mips-resource-headers; COMPONENT mips-resource-headers); add_llvm_install_targets(install-ppc-resource-headers; DEPENDS ppc-resource-headers; COMPONENT ppc-resource-headers); add_llvm_install_targets(install-ppc-htm-resource-headers; DEPENDS ppc-htm-resource-headers; COMPONENT ppc-htm-resource-headers); add_llvm_install_targets(install-riscv-resource-headers; DEPENDS riscv-resource-headers; COMPONENT riscv-resource-headers); add_llvm_install_targets(install-systemz-resource-headers; DEPENDS systemz-resource-headers; COMPONENT systemz-resource-headers); add_llvm_install_targets(install-ve-resource-headers; DEPENDS ve-resource-headers; COMPONENT ve-resource-headers); add_llvm_install_targets(install-x86-resource-headers; DEPENDS x86-resource-headers; COMPONENT x86-resource-headers); add_llvm_install_targets(install-webassembly-resource-headers; DEPENDS webassembly-resource-headers; COMPONENT webassembly-resource-headers). add_llvm_install_targets(install-hlsl-resource-headers; DEPEND,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:17771,Deployability,install,install-ppc-resource-headers,17771,ENDS clang-resource-headers; COMPONENT clang-resource-headers). add_llvm_install_targets(install-core-resource-headers; DEPENDS core-resource-headers; COMPONENT core-resource-headers); add_llvm_install_targets(install-arm-common-resource-headers; DEPENDS arm-common-resource-headers; COMPONENT arm-common-resource-headers); add_llvm_install_targets(install-arm-resource-headers; DEPENDS arm-resource-headers; COMPONENT arm-resource-headers); add_llvm_install_targets(install-aarch64-resource-headers; DEPENDS aarch64-resource-headers; COMPONENT aarch64-resource-headers); add_llvm_install_targets(install-cuda-resource-headers; DEPENDS cuda-resource-headers; COMPONENT cuda-resource-headers); add_llvm_install_targets(install-hexagon-resource-headers; DEPENDS hexagon-resource-headers; COMPONENT hexagon-resource-headers); add_llvm_install_targets(install-hip-resource-headers; DEPENDS hip-resource-headers; COMPONENT hip-resource-headers); add_llvm_install_targets(install-mips-resource-headers; DEPENDS mips-resource-headers; COMPONENT mips-resource-headers); add_llvm_install_targets(install-ppc-resource-headers; DEPENDS ppc-resource-headers; COMPONENT ppc-resource-headers); add_llvm_install_targets(install-ppc-htm-resource-headers; DEPENDS ppc-htm-resource-headers; COMPONENT ppc-htm-resource-headers); add_llvm_install_targets(install-riscv-resource-headers; DEPENDS riscv-resource-headers; COMPONENT riscv-resource-headers); add_llvm_install_targets(install-systemz-resource-headers; DEPENDS systemz-resource-headers; COMPONENT systemz-resource-headers); add_llvm_install_targets(install-ve-resource-headers; DEPENDS ve-resource-headers; COMPONENT ve-resource-headers); add_llvm_install_targets(install-x86-resource-headers; DEPENDS x86-resource-headers; COMPONENT x86-resource-headers); add_llvm_install_targets(install-webassembly-resource-headers; DEPENDS webassembly-resource-headers; COMPONENT webassembly-resource-headers). add_llvm_install_targets(install-hlsl-resource-headers; DEPEND,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:17889,Deployability,install,install-ppc-htm-resource-headers,17889,ENDS clang-resource-headers; COMPONENT clang-resource-headers). add_llvm_install_targets(install-core-resource-headers; DEPENDS core-resource-headers; COMPONENT core-resource-headers); add_llvm_install_targets(install-arm-common-resource-headers; DEPENDS arm-common-resource-headers; COMPONENT arm-common-resource-headers); add_llvm_install_targets(install-arm-resource-headers; DEPENDS arm-resource-headers; COMPONENT arm-resource-headers); add_llvm_install_targets(install-aarch64-resource-headers; DEPENDS aarch64-resource-headers; COMPONENT aarch64-resource-headers); add_llvm_install_targets(install-cuda-resource-headers; DEPENDS cuda-resource-headers; COMPONENT cuda-resource-headers); add_llvm_install_targets(install-hexagon-resource-headers; DEPENDS hexagon-resource-headers; COMPONENT hexagon-resource-headers); add_llvm_install_targets(install-hip-resource-headers; DEPENDS hip-resource-headers; COMPONENT hip-resource-headers); add_llvm_install_targets(install-mips-resource-headers; DEPENDS mips-resource-headers; COMPONENT mips-resource-headers); add_llvm_install_targets(install-ppc-resource-headers; DEPENDS ppc-resource-headers; COMPONENT ppc-resource-headers); add_llvm_install_targets(install-ppc-htm-resource-headers; DEPENDS ppc-htm-resource-headers; COMPONENT ppc-htm-resource-headers); add_llvm_install_targets(install-riscv-resource-headers; DEPENDS riscv-resource-headers; COMPONENT riscv-resource-headers); add_llvm_install_targets(install-systemz-resource-headers; DEPENDS systemz-resource-headers; COMPONENT systemz-resource-headers); add_llvm_install_targets(install-ve-resource-headers; DEPENDS ve-resource-headers; COMPONENT ve-resource-headers); add_llvm_install_targets(install-x86-resource-headers; DEPENDS x86-resource-headers; COMPONENT x86-resource-headers); add_llvm_install_targets(install-webassembly-resource-headers; DEPENDS webassembly-resource-headers; COMPONENT webassembly-resource-headers). add_llvm_install_targets(install-hlsl-resource-headers; DEPEND,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:18019,Deployability,install,install-riscv-resource-headers,18019,ENDS clang-resource-headers; COMPONENT clang-resource-headers). add_llvm_install_targets(install-core-resource-headers; DEPENDS core-resource-headers; COMPONENT core-resource-headers); add_llvm_install_targets(install-arm-common-resource-headers; DEPENDS arm-common-resource-headers; COMPONENT arm-common-resource-headers); add_llvm_install_targets(install-arm-resource-headers; DEPENDS arm-resource-headers; COMPONENT arm-resource-headers); add_llvm_install_targets(install-aarch64-resource-headers; DEPENDS aarch64-resource-headers; COMPONENT aarch64-resource-headers); add_llvm_install_targets(install-cuda-resource-headers; DEPENDS cuda-resource-headers; COMPONENT cuda-resource-headers); add_llvm_install_targets(install-hexagon-resource-headers; DEPENDS hexagon-resource-headers; COMPONENT hexagon-resource-headers); add_llvm_install_targets(install-hip-resource-headers; DEPENDS hip-resource-headers; COMPONENT hip-resource-headers); add_llvm_install_targets(install-mips-resource-headers; DEPENDS mips-resource-headers; COMPONENT mips-resource-headers); add_llvm_install_targets(install-ppc-resource-headers; DEPENDS ppc-resource-headers; COMPONENT ppc-resource-headers); add_llvm_install_targets(install-ppc-htm-resource-headers; DEPENDS ppc-htm-resource-headers; COMPONENT ppc-htm-resource-headers); add_llvm_install_targets(install-riscv-resource-headers; DEPENDS riscv-resource-headers; COMPONENT riscv-resource-headers); add_llvm_install_targets(install-systemz-resource-headers; DEPENDS systemz-resource-headers; COMPONENT systemz-resource-headers); add_llvm_install_targets(install-ve-resource-headers; DEPENDS ve-resource-headers; COMPONENT ve-resource-headers); add_llvm_install_targets(install-x86-resource-headers; DEPENDS x86-resource-headers; COMPONENT x86-resource-headers); add_llvm_install_targets(install-webassembly-resource-headers; DEPENDS webassembly-resource-headers; COMPONENT webassembly-resource-headers). add_llvm_install_targets(install-hlsl-resource-headers; DEPEND,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:18143,Deployability,install,install-systemz-resource-headers,18143,ENDS clang-resource-headers; COMPONENT clang-resource-headers). add_llvm_install_targets(install-core-resource-headers; DEPENDS core-resource-headers; COMPONENT core-resource-headers); add_llvm_install_targets(install-arm-common-resource-headers; DEPENDS arm-common-resource-headers; COMPONENT arm-common-resource-headers); add_llvm_install_targets(install-arm-resource-headers; DEPENDS arm-resource-headers; COMPONENT arm-resource-headers); add_llvm_install_targets(install-aarch64-resource-headers; DEPENDS aarch64-resource-headers; COMPONENT aarch64-resource-headers); add_llvm_install_targets(install-cuda-resource-headers; DEPENDS cuda-resource-headers; COMPONENT cuda-resource-headers); add_llvm_install_targets(install-hexagon-resource-headers; DEPENDS hexagon-resource-headers; COMPONENT hexagon-resource-headers); add_llvm_install_targets(install-hip-resource-headers; DEPENDS hip-resource-headers; COMPONENT hip-resource-headers); add_llvm_install_targets(install-mips-resource-headers; DEPENDS mips-resource-headers; COMPONENT mips-resource-headers); add_llvm_install_targets(install-ppc-resource-headers; DEPENDS ppc-resource-headers; COMPONENT ppc-resource-headers); add_llvm_install_targets(install-ppc-htm-resource-headers; DEPENDS ppc-htm-resource-headers; COMPONENT ppc-htm-resource-headers); add_llvm_install_targets(install-riscv-resource-headers; DEPENDS riscv-resource-headers; COMPONENT riscv-resource-headers); add_llvm_install_targets(install-systemz-resource-headers; DEPENDS systemz-resource-headers; COMPONENT systemz-resource-headers); add_llvm_install_targets(install-ve-resource-headers; DEPENDS ve-resource-headers; COMPONENT ve-resource-headers); add_llvm_install_targets(install-x86-resource-headers; DEPENDS x86-resource-headers; COMPONENT x86-resource-headers); add_llvm_install_targets(install-webassembly-resource-headers; DEPENDS webassembly-resource-headers; COMPONENT webassembly-resource-headers). add_llvm_install_targets(install-hlsl-resource-headers; DEPEND,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:18273,Deployability,install,install-ve-resource-headers,18273,ENDS clang-resource-headers; COMPONENT clang-resource-headers). add_llvm_install_targets(install-core-resource-headers; DEPENDS core-resource-headers; COMPONENT core-resource-headers); add_llvm_install_targets(install-arm-common-resource-headers; DEPENDS arm-common-resource-headers; COMPONENT arm-common-resource-headers); add_llvm_install_targets(install-arm-resource-headers; DEPENDS arm-resource-headers; COMPONENT arm-resource-headers); add_llvm_install_targets(install-aarch64-resource-headers; DEPENDS aarch64-resource-headers; COMPONENT aarch64-resource-headers); add_llvm_install_targets(install-cuda-resource-headers; DEPENDS cuda-resource-headers; COMPONENT cuda-resource-headers); add_llvm_install_targets(install-hexagon-resource-headers; DEPENDS hexagon-resource-headers; COMPONENT hexagon-resource-headers); add_llvm_install_targets(install-hip-resource-headers; DEPENDS hip-resource-headers; COMPONENT hip-resource-headers); add_llvm_install_targets(install-mips-resource-headers; DEPENDS mips-resource-headers; COMPONENT mips-resource-headers); add_llvm_install_targets(install-ppc-resource-headers; DEPENDS ppc-resource-headers; COMPONENT ppc-resource-headers); add_llvm_install_targets(install-ppc-htm-resource-headers; DEPENDS ppc-htm-resource-headers; COMPONENT ppc-htm-resource-headers); add_llvm_install_targets(install-riscv-resource-headers; DEPENDS riscv-resource-headers; COMPONENT riscv-resource-headers); add_llvm_install_targets(install-systemz-resource-headers; DEPENDS systemz-resource-headers; COMPONENT systemz-resource-headers); add_llvm_install_targets(install-ve-resource-headers; DEPENDS ve-resource-headers; COMPONENT ve-resource-headers); add_llvm_install_targets(install-x86-resource-headers; DEPENDS x86-resource-headers; COMPONENT x86-resource-headers); add_llvm_install_targets(install-webassembly-resource-headers; DEPENDS webassembly-resource-headers; COMPONENT webassembly-resource-headers). add_llvm_install_targets(install-hlsl-resource-headers; DEPEND,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:18388,Deployability,install,install-,18388,ENDS clang-resource-headers; COMPONENT clang-resource-headers). add_llvm_install_targets(install-core-resource-headers; DEPENDS core-resource-headers; COMPONENT core-resource-headers); add_llvm_install_targets(install-arm-common-resource-headers; DEPENDS arm-common-resource-headers; COMPONENT arm-common-resource-headers); add_llvm_install_targets(install-arm-resource-headers; DEPENDS arm-resource-headers; COMPONENT arm-resource-headers); add_llvm_install_targets(install-aarch64-resource-headers; DEPENDS aarch64-resource-headers; COMPONENT aarch64-resource-headers); add_llvm_install_targets(install-cuda-resource-headers; DEPENDS cuda-resource-headers; COMPONENT cuda-resource-headers); add_llvm_install_targets(install-hexagon-resource-headers; DEPENDS hexagon-resource-headers; COMPONENT hexagon-resource-headers); add_llvm_install_targets(install-hip-resource-headers; DEPENDS hip-resource-headers; COMPONENT hip-resource-headers); add_llvm_install_targets(install-mips-resource-headers; DEPENDS mips-resource-headers; COMPONENT mips-resource-headers); add_llvm_install_targets(install-ppc-resource-headers; DEPENDS ppc-resource-headers; COMPONENT ppc-resource-headers); add_llvm_install_targets(install-ppc-htm-resource-headers; DEPENDS ppc-htm-resource-headers; COMPONENT ppc-htm-resource-headers); add_llvm_install_targets(install-riscv-resource-headers; DEPENDS riscv-resource-headers; COMPONENT riscv-resource-headers); add_llvm_install_targets(install-systemz-resource-headers; DEPENDS systemz-resource-headers; COMPONENT systemz-resource-headers); add_llvm_install_targets(install-ve-resource-headers; DEPENDS ve-resource-headers; COMPONENT ve-resource-headers); add_llvm_install_targets(install-x86-resource-headers; DEPENDS x86-resource-headers; COMPONENT x86-resource-headers); add_llvm_install_targets(install-webassembly-resource-headers; DEPENDS webassembly-resource-headers; COMPONENT webassembly-resource-headers). add_llvm_install_targets(install-hlsl-resource-headers; DEPEND,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:18506,Deployability,install,install-webassembly-resource-headers,18506,ENDS clang-resource-headers; COMPONENT clang-resource-headers). add_llvm_install_targets(install-core-resource-headers; DEPENDS core-resource-headers; COMPONENT core-resource-headers); add_llvm_install_targets(install-arm-common-resource-headers; DEPENDS arm-common-resource-headers; COMPONENT arm-common-resource-headers); add_llvm_install_targets(install-arm-resource-headers; DEPENDS arm-resource-headers; COMPONENT arm-resource-headers); add_llvm_install_targets(install-aarch64-resource-headers; DEPENDS aarch64-resource-headers; COMPONENT aarch64-resource-headers); add_llvm_install_targets(install-cuda-resource-headers; DEPENDS cuda-resource-headers; COMPONENT cuda-resource-headers); add_llvm_install_targets(install-hexagon-resource-headers; DEPENDS hexagon-resource-headers; COMPONENT hexagon-resource-headers); add_llvm_install_targets(install-hip-resource-headers; DEPENDS hip-resource-headers; COMPONENT hip-resource-headers); add_llvm_install_targets(install-mips-resource-headers; DEPENDS mips-resource-headers; COMPONENT mips-resource-headers); add_llvm_install_targets(install-ppc-resource-headers; DEPENDS ppc-resource-headers; COMPONENT ppc-resource-headers); add_llvm_install_targets(install-ppc-htm-resource-headers; DEPENDS ppc-htm-resource-headers; COMPONENT ppc-htm-resource-headers); add_llvm_install_targets(install-riscv-resource-headers; DEPENDS riscv-resource-headers; COMPONENT riscv-resource-headers); add_llvm_install_targets(install-systemz-resource-headers; DEPENDS systemz-resource-headers; COMPONENT systemz-resource-headers); add_llvm_install_targets(install-ve-resource-headers; DEPENDS ve-resource-headers; COMPONENT ve-resource-headers); add_llvm_install_targets(install-x86-resource-headers; DEPENDS x86-resource-headers; COMPONENT x86-resource-headers); add_llvm_install_targets(install-webassembly-resource-headers; DEPENDS webassembly-resource-headers; COMPONENT webassembly-resource-headers). add_llvm_install_targets(install-hlsl-resource-headers; DEPEND,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:18648,Deployability,install,install-hlsl-resource-headers,18648,"uda-resource-headers; COMPONENT cuda-resource-headers); add_llvm_install_targets(install-hexagon-resource-headers; DEPENDS hexagon-resource-headers; COMPONENT hexagon-resource-headers); add_llvm_install_targets(install-hip-resource-headers; DEPENDS hip-resource-headers; COMPONENT hip-resource-headers); add_llvm_install_targets(install-mips-resource-headers; DEPENDS mips-resource-headers; COMPONENT mips-resource-headers); add_llvm_install_targets(install-ppc-resource-headers; DEPENDS ppc-resource-headers; COMPONENT ppc-resource-headers); add_llvm_install_targets(install-ppc-htm-resource-headers; DEPENDS ppc-htm-resource-headers; COMPONENT ppc-htm-resource-headers); add_llvm_install_targets(install-riscv-resource-headers; DEPENDS riscv-resource-headers; COMPONENT riscv-resource-headers); add_llvm_install_targets(install-systemz-resource-headers; DEPENDS systemz-resource-headers; COMPONENT systemz-resource-headers); add_llvm_install_targets(install-ve-resource-headers; DEPENDS ve-resource-headers; COMPONENT ve-resource-headers); add_llvm_install_targets(install-x86-resource-headers; DEPENDS x86-resource-headers; COMPONENT x86-resource-headers); add_llvm_install_targets(install-webassembly-resource-headers; DEPENDS webassembly-resource-headers; COMPONENT webassembly-resource-headers). add_llvm_install_targets(install-hlsl-resource-headers; DEPENDS hlsl-resource-headers; COMPONENT hlsl-resource-headers); add_llvm_install_targets(install-opencl-resource-headers; DEPENDS opencl-resource-headers; COMPONENT opencl-resource-headers); add_llvm_install_targets(install-openmp-resource-headers; DEPENDS openmp-resource-headers; COMPONENT openmp-resource-headers); add_llvm_install_targets(install-windows-resource-headers; DEPENDS windows-resource-headers; COMPONENT windows-resource-headers); add_llvm_install_targets(install-utility-resource-headers; DEPENDS utility-resource-headers; COMPONENT utility-resource-headers); endif(). source_group(""Clang Runtime Headers"" FILES ${files}); ",MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:18769,Deployability,install,install-opencl-resource-headers,18769,"uda-resource-headers; COMPONENT cuda-resource-headers); add_llvm_install_targets(install-hexagon-resource-headers; DEPENDS hexagon-resource-headers; COMPONENT hexagon-resource-headers); add_llvm_install_targets(install-hip-resource-headers; DEPENDS hip-resource-headers; COMPONENT hip-resource-headers); add_llvm_install_targets(install-mips-resource-headers; DEPENDS mips-resource-headers; COMPONENT mips-resource-headers); add_llvm_install_targets(install-ppc-resource-headers; DEPENDS ppc-resource-headers; COMPONENT ppc-resource-headers); add_llvm_install_targets(install-ppc-htm-resource-headers; DEPENDS ppc-htm-resource-headers; COMPONENT ppc-htm-resource-headers); add_llvm_install_targets(install-riscv-resource-headers; DEPENDS riscv-resource-headers; COMPONENT riscv-resource-headers); add_llvm_install_targets(install-systemz-resource-headers; DEPENDS systemz-resource-headers; COMPONENT systemz-resource-headers); add_llvm_install_targets(install-ve-resource-headers; DEPENDS ve-resource-headers; COMPONENT ve-resource-headers); add_llvm_install_targets(install-x86-resource-headers; DEPENDS x86-resource-headers; COMPONENT x86-resource-headers); add_llvm_install_targets(install-webassembly-resource-headers; DEPENDS webassembly-resource-headers; COMPONENT webassembly-resource-headers). add_llvm_install_targets(install-hlsl-resource-headers; DEPENDS hlsl-resource-headers; COMPONENT hlsl-resource-headers); add_llvm_install_targets(install-opencl-resource-headers; DEPENDS opencl-resource-headers; COMPONENT opencl-resource-headers); add_llvm_install_targets(install-openmp-resource-headers; DEPENDS openmp-resource-headers; COMPONENT openmp-resource-headers); add_llvm_install_targets(install-windows-resource-headers; DEPENDS windows-resource-headers; COMPONENT windows-resource-headers); add_llvm_install_targets(install-utility-resource-headers; DEPENDS utility-resource-headers; COMPONENT utility-resource-headers); endif(). source_group(""Clang Runtime Headers"" FILES ${files}); ",MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:18896,Deployability,install,install-openmp-resource-headers,18896,"uda-resource-headers; COMPONENT cuda-resource-headers); add_llvm_install_targets(install-hexagon-resource-headers; DEPENDS hexagon-resource-headers; COMPONENT hexagon-resource-headers); add_llvm_install_targets(install-hip-resource-headers; DEPENDS hip-resource-headers; COMPONENT hip-resource-headers); add_llvm_install_targets(install-mips-resource-headers; DEPENDS mips-resource-headers; COMPONENT mips-resource-headers); add_llvm_install_targets(install-ppc-resource-headers; DEPENDS ppc-resource-headers; COMPONENT ppc-resource-headers); add_llvm_install_targets(install-ppc-htm-resource-headers; DEPENDS ppc-htm-resource-headers; COMPONENT ppc-htm-resource-headers); add_llvm_install_targets(install-riscv-resource-headers; DEPENDS riscv-resource-headers; COMPONENT riscv-resource-headers); add_llvm_install_targets(install-systemz-resource-headers; DEPENDS systemz-resource-headers; COMPONENT systemz-resource-headers); add_llvm_install_targets(install-ve-resource-headers; DEPENDS ve-resource-headers; COMPONENT ve-resource-headers); add_llvm_install_targets(install-x86-resource-headers; DEPENDS x86-resource-headers; COMPONENT x86-resource-headers); add_llvm_install_targets(install-webassembly-resource-headers; DEPENDS webassembly-resource-headers; COMPONENT webassembly-resource-headers). add_llvm_install_targets(install-hlsl-resource-headers; DEPENDS hlsl-resource-headers; COMPONENT hlsl-resource-headers); add_llvm_install_targets(install-opencl-resource-headers; DEPENDS opencl-resource-headers; COMPONENT opencl-resource-headers); add_llvm_install_targets(install-openmp-resource-headers; DEPENDS openmp-resource-headers; COMPONENT openmp-resource-headers); add_llvm_install_targets(install-windows-resource-headers; DEPENDS windows-resource-headers; COMPONENT windows-resource-headers); add_llvm_install_targets(install-utility-resource-headers; DEPENDS utility-resource-headers; COMPONENT utility-resource-headers); endif(). source_group(""Clang Runtime Headers"" FILES ${files}); ",MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:19023,Deployability,install,install-windows-resource-headers,19023,"uda-resource-headers; COMPONENT cuda-resource-headers); add_llvm_install_targets(install-hexagon-resource-headers; DEPENDS hexagon-resource-headers; COMPONENT hexagon-resource-headers); add_llvm_install_targets(install-hip-resource-headers; DEPENDS hip-resource-headers; COMPONENT hip-resource-headers); add_llvm_install_targets(install-mips-resource-headers; DEPENDS mips-resource-headers; COMPONENT mips-resource-headers); add_llvm_install_targets(install-ppc-resource-headers; DEPENDS ppc-resource-headers; COMPONENT ppc-resource-headers); add_llvm_install_targets(install-ppc-htm-resource-headers; DEPENDS ppc-htm-resource-headers; COMPONENT ppc-htm-resource-headers); add_llvm_install_targets(install-riscv-resource-headers; DEPENDS riscv-resource-headers; COMPONENT riscv-resource-headers); add_llvm_install_targets(install-systemz-resource-headers; DEPENDS systemz-resource-headers; COMPONENT systemz-resource-headers); add_llvm_install_targets(install-ve-resource-headers; DEPENDS ve-resource-headers; COMPONENT ve-resource-headers); add_llvm_install_targets(install-x86-resource-headers; DEPENDS x86-resource-headers; COMPONENT x86-resource-headers); add_llvm_install_targets(install-webassembly-resource-headers; DEPENDS webassembly-resource-headers; COMPONENT webassembly-resource-headers). add_llvm_install_targets(install-hlsl-resource-headers; DEPENDS hlsl-resource-headers; COMPONENT hlsl-resource-headers); add_llvm_install_targets(install-opencl-resource-headers; DEPENDS opencl-resource-headers; COMPONENT opencl-resource-headers); add_llvm_install_targets(install-openmp-resource-headers; DEPENDS openmp-resource-headers; COMPONENT openmp-resource-headers); add_llvm_install_targets(install-windows-resource-headers; DEPENDS windows-resource-headers; COMPONENT windows-resource-headers); add_llvm_install_targets(install-utility-resource-headers; DEPENDS utility-resource-headers; COMPONENT utility-resource-headers); endif(). source_group(""Clang Runtime Headers"" FILES ${files}); ",MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:19153,Deployability,install,install-utility-resource-headers,19153,"uda-resource-headers; COMPONENT cuda-resource-headers); add_llvm_install_targets(install-hexagon-resource-headers; DEPENDS hexagon-resource-headers; COMPONENT hexagon-resource-headers); add_llvm_install_targets(install-hip-resource-headers; DEPENDS hip-resource-headers; COMPONENT hip-resource-headers); add_llvm_install_targets(install-mips-resource-headers; DEPENDS mips-resource-headers; COMPONENT mips-resource-headers); add_llvm_install_targets(install-ppc-resource-headers; DEPENDS ppc-resource-headers; COMPONENT ppc-resource-headers); add_llvm_install_targets(install-ppc-htm-resource-headers; DEPENDS ppc-htm-resource-headers; COMPONENT ppc-htm-resource-headers); add_llvm_install_targets(install-riscv-resource-headers; DEPENDS riscv-resource-headers; COMPONENT riscv-resource-headers); add_llvm_install_targets(install-systemz-resource-headers; DEPENDS systemz-resource-headers; COMPONENT systemz-resource-headers); add_llvm_install_targets(install-ve-resource-headers; DEPENDS ve-resource-headers; COMPONENT ve-resource-headers); add_llvm_install_targets(install-x86-resource-headers; DEPENDS x86-resource-headers; COMPONENT x86-resource-headers); add_llvm_install_targets(install-webassembly-resource-headers; DEPENDS webassembly-resource-headers; COMPONENT webassembly-resource-headers). add_llvm_install_targets(install-hlsl-resource-headers; DEPENDS hlsl-resource-headers; COMPONENT hlsl-resource-headers); add_llvm_install_targets(install-opencl-resource-headers; DEPENDS opencl-resource-headers; COMPONENT opencl-resource-headers); add_llvm_install_targets(install-openmp-resource-headers; DEPENDS openmp-resource-headers; COMPONENT openmp-resource-headers); add_llvm_install_targets(install-windows-resource-headers; DEPENDS windows-resource-headers; COMPONENT windows-resource-headers); add_llvm_install_targets(install-utility-resource-headers; DEPENDS utility-resource-headers; COMPONENT utility-resource-headers); endif(). source_group(""Clang Runtime Headers"" FILES ${files}); ",MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:8916,Integrability,message,message,8916,"on.h""; ""${CMAKE_CURRENT_BINARY_DIR}/arm_fp16.h""; ). list(APPEND arm_only_generated_files; ""${CMAKE_CURRENT_BINARY_DIR}/arm_mve.h""; ""${CMAKE_CURRENT_BINARY_DIR}/arm_cde.h""; ). list(APPEND aarch64_only_generated_files; ""${CMAKE_CURRENT_BINARY_DIR}/arm_sve.h""; ""${CMAKE_CURRENT_BINARY_DIR}/arm_sme.h""; ""${CMAKE_CURRENT_BINARY_DIR}/arm_bf16.h""; ""${CMAKE_CURRENT_BINARY_DIR}/arm_vector_types.h""; ); endif(); if(RISCV IN_LIST LLVM_TARGETS_TO_BUILD); # Generate riscv_vector.h; clang_generate_header(-gen-riscv-vector-header riscv_vector.td riscv_vector.h); list(APPEND riscv_generated_files; ""${CMAKE_CURRENT_BINARY_DIR}/riscv_vector.h""; ); endif(). # Check if the generated headers are included in a target specific lists; # Currently, all generated headers are target specific.; set(all_target_specific_generated_files; ${arm_common_generated_files}; ${arm_only_generated_files}; ${aarch64_only_generated_files}; ${riscv_generated_files}); foreach( f ${generated_files} ); if (NOT ${f} IN_LIST all_target_specific_generated_files); message(WARNING ""${f} is a generated header but it is not included in any ""; ""target specific header lists! The resource-headers ""; ""distribtion target will be incorrect!""); endif(); endforeach( f ). function(add_header_target target_name file_list); add_custom_target(${target_name} DEPENDS ${file_list}); set_target_properties(${target_name} PROPERTIES; FOLDER ""Misc""; RUNTIME_OUTPUT_DIRECTORY ""${output_dir}""); endfunction(). # The catch-all clang-resource-headers target; add_custom_target(""clang-resource-headers"" ALL DEPENDS ${out_files}); set_target_properties(""clang-resource-headers"" PROPERTIES; FOLDER ""Misc""; RUNTIME_OUTPUT_DIRECTORY ""${output_dir}""); add_dependencies(""clang-resource-headers""; ""core-resource-headers""; ""arm-common-resource-headers""; ""arm-resource-headers""; ""aarch64-resource-headers""; ""cuda-resource-headers""; ""hexagon-resource-headers""; ""hip-resource-headers""; ""hlsl-resource-headers""; ""loongarch-resource-headers""; ""mips-resource-headers""; """,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:5294,Testability,assert,assert,5294,"es}; ${systemz_files}; ${ve_files}; ${x86_files}; ${webassembly_files}; ${windows_only_files}; ${utility_files}; ). set(cuda_wrapper_files; cuda_wrappers/algorithm; cuda_wrappers/cmath; cuda_wrappers/complex; cuda_wrappers/new; ). set(cuda_wrapper_bits_files; cuda_wrappers/bits/shared_ptr_base.h; cuda_wrappers/bits/basic_string.h; cuda_wrappers/bits/basic_string.tcc; ). set(ppc_wrapper_files; ppc_wrappers/mmintrin.h; ppc_wrappers/xmmintrin.h; ppc_wrappers/mm_malloc.h; ppc_wrappers/emmintrin.h; ppc_wrappers/pmmintrin.h; ppc_wrappers/tmmintrin.h; ppc_wrappers/smmintrin.h; ppc_wrappers/nmmintrin.h; ppc_wrappers/bmiintrin.h; ppc_wrappers/bmi2intrin.h; ppc_wrappers/immintrin.h; ppc_wrappers/x86intrin.h; ppc_wrappers/x86gprintrin.h; ). set(openmp_wrapper_files; openmp_wrappers/math.h; openmp_wrappers/cmath; openmp_wrappers/complex.h; openmp_wrappers/complex; openmp_wrappers/__clang_openmp_device_functions.h; openmp_wrappers/complex_cmath.h; openmp_wrappers/new; ). set(llvm_libc_wrapper_files; llvm_libc_wrappers/assert.h; llvm_libc_wrappers/stdio.h; llvm_libc_wrappers/stdlib.h; llvm_libc_wrappers/string.h; llvm_libc_wrappers/ctype.h; llvm_libc_wrappers/inttypes.h; llvm_libc_wrappers/time.h; ). include(GetClangResourceDir); get_clang_resource_dir(output_dir PREFIX ${LLVM_LIBRARY_OUTPUT_INTDIR}/.. SUBDIR include); set(out_files); set(generated_files). set(arm_common_generated_files); set(arm_only_generated_files); set(aarch64_only_generated_files); set(riscv_generated_files). function(copy_header_to_output_dir src_dir file); set(src ${src_dir}/${file}); set(dst ${output_dir}/${file}); add_custom_command(OUTPUT ${dst}; DEPENDS ${src}; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${src} ${dst}; COMMENT ""Copying clang's ${file}...""); list(APPEND out_files ${dst}); set(out_files ${out_files} PARENT_SCOPE); endfunction(copy_header_to_output_dir). function(clang_generate_header td_option td_file out_file); clang_tablegen(${out_file} ${td_option}; -I ${CLANG_SOURCE_DIR}/include/cl",MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt:1613,Deployability,update,updated,1613,"s to isolate them from much; of the gore of the internal analysis engine. = How It Works =. The analyzer is inspired by several foundational research papers ([1],; [2]). (FIXME: kremenek to add more links). In a nutshell, the analyzer is basically a source code simulator that; traces out possible paths of execution. The state of the program; (values of variables and expressions) is encapsulated by the state; (ProgramState). A location in the program is called a program point; (ProgramPoint), and the combination of state and program point is a; node in an exploded graph (ExplodedGraph). The term ""exploded"" comes; from exploding the control-flow edges in the control-flow graph (CFG). Conceptually the analyzer does a reachability analysis through the; ExplodedGraph. We start at a root node, which has the entry program; point and initial state, and then simulate transitions by analyzing; individual expressions. The analysis of an expression can cause the; state to change, resulting in a new node in the ExplodedGraph with an; updated program point and an updated state. A bug is found by hitting; a node that satisfies some ""bug condition"" (basically a violation of a; checking invariant). The analyzer traces out multiple paths by reasoning about branches and; then bifurcating the state: on the true branch the conditions of the; branch are assumed to be true and on the false branch the conditions; of the branch are assumed to be false. Such ""assumptions"" create; constraints on the values of the program, and those constraints are; recorded in the ProgramState object (and are manipulated by the; ConstraintManager). If assuming the conditions of a branch would; cause the constraints to be unsatisfiable, the branch is considered; infeasible and that path is not taken. This is how we get; path-sensitivity. We reduce exponential blow-up by caching nodes. If; a new node with the same state and program point as an existing node; would get generated, the path ""caches out"" and we sim",MatchSource.DOCS,interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt:1642,Deployability,update,updated,1642,"s to isolate them from much; of the gore of the internal analysis engine. = How It Works =. The analyzer is inspired by several foundational research papers ([1],; [2]). (FIXME: kremenek to add more links). In a nutshell, the analyzer is basically a source code simulator that; traces out possible paths of execution. The state of the program; (values of variables and expressions) is encapsulated by the state; (ProgramState). A location in the program is called a program point; (ProgramPoint), and the combination of state and program point is a; node in an exploded graph (ExplodedGraph). The term ""exploded"" comes; from exploding the control-flow edges in the control-flow graph (CFG). Conceptually the analyzer does a reachability analysis through the; ExplodedGraph. We start at a root node, which has the entry program; point and initial state, and then simulate transitions by analyzing; individual expressions. The analysis of an expression can cause the; state to change, resulting in a new node in the ExplodedGraph with an; updated program point and an updated state. A bug is found by hitting; a node that satisfies some ""bug condition"" (basically a violation of a; checking invariant). The analyzer traces out multiple paths by reasoning about branches and; then bifurcating the state: on the true branch the conditions of the; branch are assumed to be true and on the false branch the conditions; of the branch are assumed to be false. Such ""assumptions"" create; constraints on the values of the program, and those constraints are; recorded in the ProgramState object (and are manipulated by the; ConstraintManager). If assuming the conditions of a branch would; cause the constraints to be unsatisfiable, the branch is considered; infeasible and that path is not taken. This is how we get; path-sensitivity. We reduce exponential blow-up by caching nodes. If; a new node with the same state and program point as an existing node; would get generated, the path ""caches out"" and we sim",MatchSource.DOCS,interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt:3573,Deployability,update,updated,3573,"enerated, the path ""caches out"" and we simply reuse the; existing node. Thus the ExplodedGraph is not a DAG; it can contain; cycles as paths loop back onto each other and cache out. ProgramState and ExplodedNodes are basically immutable once created. Once; one creates a ProgramState, you need to create a new one to get a new; ProgramState. This immutability is key since the ExplodedGraph represents; the behavior of the analyzed program from the entry point. To; represent these efficiently, we use functional data structures (e.g.,; ImmutableMaps) which share data between instances. Finally, individual Checkers work by also manipulating the analysis; state. The analyzer engine talks to them via a visitor interface.; For example, the PreVisitCallExpr() method is called by ExprEngine; to tell the Checker that we are about to analyze a CallExpr, and the; checker is asked to check for any preconditions that might not be; satisfied. The checker can do nothing, or it can generate a new; ProgramState and ExplodedNode which contains updated checker state. If it; finds a bug, it can tell the BugReporter object about the bug,; providing it an ExplodedNode which is the last node in the path that; triggered the problem. = Notes about C++ =. Since now constructors are seen before the variable that is constructed; in the CFG, we create a temporary object as the destination region that; is constructed into. See ExprEngine::VisitCXXConstructExpr(). In ExprEngine::processCallExit(), we always bind the object region to the; evaluated CXXConstructExpr. Then in VisitDeclStmt(), we compute the; corresponding lazy compound value if the variable is not a reference, and; bind the variable region to the lazy compound value. If the variable; is a reference, just use the object region as the initializer value. Before entering a C++ method (or ctor/dtor), the 'this' region is bound; to the object region. In ctors, we synthesize 'this' region with; CXXRecordDecl*, which means we do not use type q",MatchSource.DOCS,interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt:2404,Energy Efficiency,reduce,reduce,2404,"ate, and then simulate transitions by analyzing; individual expressions. The analysis of an expression can cause the; state to change, resulting in a new node in the ExplodedGraph with an; updated program point and an updated state. A bug is found by hitting; a node that satisfies some ""bug condition"" (basically a violation of a; checking invariant). The analyzer traces out multiple paths by reasoning about branches and; then bifurcating the state: on the true branch the conditions of the; branch are assumed to be true and on the false branch the conditions; of the branch are assumed to be false. Such ""assumptions"" create; constraints on the values of the program, and those constraints are; recorded in the ProgramState object (and are manipulated by the; ConstraintManager). If assuming the conditions of a branch would; cause the constraints to be unsatisfiable, the branch is considered; infeasible and that path is not taken. This is how we get; path-sensitivity. We reduce exponential blow-up by caching nodes. If; a new node with the same state and program point as an existing node; would get generated, the path ""caches out"" and we simply reuse the; existing node. Thus the ExplodedGraph is not a DAG; it can contain; cycles as paths loop back onto each other and cache out. ProgramState and ExplodedNodes are basically immutable once created. Once; one creates a ProgramState, you need to create a new one to get a new; ProgramState. This immutability is key since the ExplodedGraph represents; the behavior of the analyzed program from the entry point. To; represent these efficiently, we use functional data structures (e.g.,; ImmutableMaps) which share data between instances. Finally, individual Checkers work by also manipulating the analysis; state. The analyzer engine talks to them via a visitor interface.; For example, the PreVisitCallExpr() method is called by ExprEngine; to tell the Checker that we are about to analyze a CallExpr, and the; checker is asked to check fo",MatchSource.DOCS,interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt:3016,Energy Efficiency,efficient,efficiently,3016,"ch ""assumptions"" create; constraints on the values of the program, and those constraints are; recorded in the ProgramState object (and are manipulated by the; ConstraintManager). If assuming the conditions of a branch would; cause the constraints to be unsatisfiable, the branch is considered; infeasible and that path is not taken. This is how we get; path-sensitivity. We reduce exponential blow-up by caching nodes. If; a new node with the same state and program point as an existing node; would get generated, the path ""caches out"" and we simply reuse the; existing node. Thus the ExplodedGraph is not a DAG; it can contain; cycles as paths loop back onto each other and cache out. ProgramState and ExplodedNodes are basically immutable once created. Once; one creates a ProgramState, you need to create a new one to get a new; ProgramState. This immutability is key since the ExplodedGraph represents; the behavior of the analyzed program from the entry point. To; represent these efficiently, we use functional data structures (e.g.,; ImmutableMaps) which share data between instances. Finally, individual Checkers work by also manipulating the analysis; state. The analyzer engine talks to them via a visitor interface.; For example, the PreVisitCallExpr() method is called by ExprEngine; to tell the Checker that we are about to analyze a CallExpr, and the; checker is asked to check for any preconditions that might not be; satisfied. The checker can do nothing, or it can generate a new; ProgramState and ExplodedNode which contains updated checker state. If it; finds a bug, it can tell the BugReporter object about the bug,; providing it an ExplodedNode which is the last node in the path that; triggered the problem. = Notes about C++ =. Since now constructors are seen before the variable that is constructed; in the CFG, we create a temporary object as the destination region that; is constructed into. See ExprEngine::VisitCXXConstructExpr(). In ExprEngine::processCallExit(), we alway",MatchSource.DOCS,interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt:438,Integrability,interface,interfaces,438,"//===----------------------------------------------------------------------===//; // Clang Static Analyzer; //===----------------------------------------------------------------------===//. = Library Structure =. The analyzer library has two layers: a (low-level) static analysis; engine (ExprEngine.cpp and friends), and some static checkers; (*Checker.cpp). The latter are built on top of the former via the; Checker and CheckerVisitor interfaces (Checker.h and; CheckerVisitor.h). The Checker interface is designed to be minimal; and simple for checker writers, and attempts to isolate them from much; of the gore of the internal analysis engine. = How It Works =. The analyzer is inspired by several foundational research papers ([1],; [2]). (FIXME: kremenek to add more links). In a nutshell, the analyzer is basically a source code simulator that; traces out possible paths of execution. The state of the program; (values of variables and expressions) is encapsulated by the state; (ProgramState). A location in the program is called a program point; (ProgramPoint), and the combination of state and program point is a; node in an exploded graph (ExplodedGraph). The term ""exploded"" comes; from exploding the control-flow edges in the control-flow graph (CFG). Conceptually the analyzer does a reachability analysis through the; ExplodedGraph. We start at a root node, which has the entry program; point and initial state, and then simulate transitions by analyzing; individual expressions. The analysis of an expression can cause the; state to change, resulting in a new node in the ExplodedGraph with an; updated program point and an updated state. A bug is found by hitting; a node that satisfies some ""bug condition"" (basically a violation of a; checking invariant). The analyzer traces out multiple paths by reasoning about branches and; then bifurcating the state: on the true branch the conditions of the; branch are assumed to be true and on the false branch the conditions; of the branc",MatchSource.DOCS,interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt:496,Integrability,interface,interface,496,"//===----------------------------------------------------------------------===//; // Clang Static Analyzer; //===----------------------------------------------------------------------===//. = Library Structure =. The analyzer library has two layers: a (low-level) static analysis; engine (ExprEngine.cpp and friends), and some static checkers; (*Checker.cpp). The latter are built on top of the former via the; Checker and CheckerVisitor interfaces (Checker.h and; CheckerVisitor.h). The Checker interface is designed to be minimal; and simple for checker writers, and attempts to isolate them from much; of the gore of the internal analysis engine. = How It Works =. The analyzer is inspired by several foundational research papers ([1],; [2]). (FIXME: kremenek to add more links). In a nutshell, the analyzer is basically a source code simulator that; traces out possible paths of execution. The state of the program; (values of variables and expressions) is encapsulated by the state; (ProgramState). A location in the program is called a program point; (ProgramPoint), and the combination of state and program point is a; node in an exploded graph (ExplodedGraph). The term ""exploded"" comes; from exploding the control-flow edges in the control-flow graph (CFG). Conceptually the analyzer does a reachability analysis through the; ExplodedGraph. We start at a root node, which has the entry program; point and initial state, and then simulate transitions by analyzing; individual expressions. The analysis of an expression can cause the; state to change, resulting in a new node in the ExplodedGraph with an; updated program point and an updated state. A bug is found by hitting; a node that satisfies some ""bug condition"" (basically a violation of a; checking invariant). The analyzer traces out multiple paths by reasoning about branches and; then bifurcating the state: on the true branch the conditions of the; branch are assumed to be true and on the false branch the conditions; of the branc",MatchSource.DOCS,interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt:3246,Integrability,interface,interface,3246,"onditions of a branch would; cause the constraints to be unsatisfiable, the branch is considered; infeasible and that path is not taken. This is how we get; path-sensitivity. We reduce exponential blow-up by caching nodes. If; a new node with the same state and program point as an existing node; would get generated, the path ""caches out"" and we simply reuse the; existing node. Thus the ExplodedGraph is not a DAG; it can contain; cycles as paths loop back onto each other and cache out. ProgramState and ExplodedNodes are basically immutable once created. Once; one creates a ProgramState, you need to create a new one to get a new; ProgramState. This immutability is key since the ExplodedGraph represents; the behavior of the analyzed program from the entry point. To; represent these efficiently, we use functional data structures (e.g.,; ImmutableMaps) which share data between instances. Finally, individual Checkers work by also manipulating the analysis; state. The analyzer engine talks to them via a visitor interface.; For example, the PreVisitCallExpr() method is called by ExprEngine; to tell the Checker that we are about to analyze a CallExpr, and the; checker is asked to check for any preconditions that might not be; satisfied. The checker can do nothing, or it can generate a new; ProgramState and ExplodedNode which contains updated checker state. If it; finds a bug, it can tell the BugReporter object about the bug,; providing it an ExplodedNode which is the last node in the path that; triggered the problem. = Notes about C++ =. Since now constructors are seen before the variable that is constructed; in the CFG, we create a temporary object as the destination region that; is constructed into. See ExprEngine::VisitCXXConstructExpr(). In ExprEngine::processCallExit(), we always bind the object region to the; evaluated CXXConstructExpr. Then in VisitDeclStmt(), we compute the; corresponding lazy compound value if the variable is not a reference, and; bind the variable r",MatchSource.DOCS,interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt:5308,Integrability,interface,interfaces,5308,"; is a reference, just use the object region as the initializer value. Before entering a C++ method (or ctor/dtor), the 'this' region is bound; to the object region. In ctors, we synthesize 'this' region with; CXXRecordDecl*, which means we do not use type qualifiers. In methods, we; synthesize 'this' region with CXXMethodDecl*, which has getThisType(); taking type qualifiers into account. It does not matter we use qualified; 'this' region in one method and unqualified 'this' region in another; method, because we only need to ensure the 'this' region is consistent; when we synthesize it and create it directly from CXXThisExpr in a single; method call. = Working on the Analyzer =. If you are interested in bringing up support for C++ expressions, the; best place to look is the visitation logic in ExprEngine, which; handles the simulation of individual expressions. There are plenty of; examples there of how other expressions are handled. If you are interested in writing checkers, look at the Checker and; CheckerVisitor interfaces (Checker.h and CheckerVisitor.h). Also look; at the files named *Checker.cpp for examples on how you can implement; these interfaces. = Debugging the Analyzer =. There are some useful command-line options for debugging. For example:. $ clang -cc1 -help | grep analyze; -analyze-function <value>; -analyzer-display-progress; -analyzer-viz-egraph-graphviz; ... The first allows you to specify only analyzing a specific function.; The second prints to the console what function is being analyzed. The; third generates a graphviz dot file of the ExplodedGraph. This is; extremely useful when debugging the analyzer and viewing the; simulation results. Of course, viewing the CFG (Control-Flow Graph) is also useful:. $ clang -cc1 -analyzer-checker-help-developer. -analyzer-checker=debug.DumpCFG Display Control-Flow Graphs; -analyzer-checker=debug.ViewCFG View Control-Flow Graphs using GraphViz; (outdated below?); -cfg-add-implicit-dtors Add C++ implicit des",MatchSource.DOCS,interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt:5441,Integrability,interface,interfaces,5441," the object region. In ctors, we synthesize 'this' region with; CXXRecordDecl*, which means we do not use type qualifiers. In methods, we; synthesize 'this' region with CXXMethodDecl*, which has getThisType(); taking type qualifiers into account. It does not matter we use qualified; 'this' region in one method and unqualified 'this' region in another; method, because we only need to ensure the 'this' region is consistent; when we synthesize it and create it directly from CXXThisExpr in a single; method call. = Working on the Analyzer =. If you are interested in bringing up support for C++ expressions, the; best place to look is the visitation logic in ExprEngine, which; handles the simulation of individual expressions. There are plenty of; examples there of how other expressions are handled. If you are interested in writing checkers, look at the Checker and; CheckerVisitor interfaces (Checker.h and CheckerVisitor.h). Also look; at the files named *Checker.cpp for examples on how you can implement; these interfaces. = Debugging the Analyzer =. There are some useful command-line options for debugging. For example:. $ clang -cc1 -help | grep analyze; -analyze-function <value>; -analyzer-display-progress; -analyzer-viz-egraph-graphviz; ... The first allows you to specify only analyzing a specific function.; The second prints to the console what function is being analyzed. The; third generates a graphviz dot file of the ExplodedGraph. This is; extremely useful when debugging the analyzer and viewing the; simulation results. Of course, viewing the CFG (Control-Flow Graph) is also useful:. $ clang -cc1 -analyzer-checker-help-developer. -analyzer-checker=debug.DumpCFG Display Control-Flow Graphs; -analyzer-checker=debug.ViewCFG View Control-Flow Graphs using GraphViz; (outdated below?); -cfg-add-implicit-dtors Add C++ implicit destructors to CFGs for all analyses; -cfg-add-initializers Add C++ initializers to CFGs for all analyses; -unoptimized-cfg Generate unoptimized CFGs",MatchSource.DOCS,interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt:242,Modifiability,layers,layers,242,"//===----------------------------------------------------------------------===//; // Clang Static Analyzer; //===----------------------------------------------------------------------===//. = Library Structure =. The analyzer library has two layers: a (low-level) static analysis; engine (ExprEngine.cpp and friends), and some static checkers; (*Checker.cpp). The latter are built on top of the former via the; Checker and CheckerVisitor interfaces (Checker.h and; CheckerVisitor.h). The Checker interface is designed to be minimal; and simple for checker writers, and attempts to isolate them from much; of the gore of the internal analysis engine. = How It Works =. The analyzer is inspired by several foundational research papers ([1],; [2]). (FIXME: kremenek to add more links). In a nutshell, the analyzer is basically a source code simulator that; traces out possible paths of execution. The state of the program; (values of variables and expressions) is encapsulated by the state; (ProgramState). A location in the program is called a program point; (ProgramPoint), and the combination of state and program point is a; node in an exploded graph (ExplodedGraph). The term ""exploded"" comes; from exploding the control-flow edges in the control-flow graph (CFG). Conceptually the analyzer does a reachability analysis through the; ExplodedGraph. We start at a root node, which has the entry program; point and initial state, and then simulate transitions by analyzing; individual expressions. The analysis of an expression can cause the; state to change, resulting in a new node in the ExplodedGraph with an; updated program point and an updated state. A bug is found by hitting; a node that satisfies some ""bug condition"" (basically a violation of a; checking invariant). The analyzer traces out multiple paths by reasoning about branches and; then bifurcating the state: on the true branch the conditions of the; branch are assumed to be true and on the false branch the conditions; of the branc",MatchSource.DOCS,interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt:931,Modifiability,variab,variables,931,"//===----------------------------------------------------------------------===//; // Clang Static Analyzer; //===----------------------------------------------------------------------===//. = Library Structure =. The analyzer library has two layers: a (low-level) static analysis; engine (ExprEngine.cpp and friends), and some static checkers; (*Checker.cpp). The latter are built on top of the former via the; Checker and CheckerVisitor interfaces (Checker.h and; CheckerVisitor.h). The Checker interface is designed to be minimal; and simple for checker writers, and attempts to isolate them from much; of the gore of the internal analysis engine. = How It Works =. The analyzer is inspired by several foundational research papers ([1],; [2]). (FIXME: kremenek to add more links). In a nutshell, the analyzer is basically a source code simulator that; traces out possible paths of execution. The state of the program; (values of variables and expressions) is encapsulated by the state; (ProgramState). A location in the program is called a program point; (ProgramPoint), and the combination of state and program point is a; node in an exploded graph (ExplodedGraph). The term ""exploded"" comes; from exploding the control-flow edges in the control-flow graph (CFG). Conceptually the analyzer does a reachability analysis through the; ExplodedGraph. We start at a root node, which has the entry program; point and initial state, and then simulate transitions by analyzing; individual expressions. The analysis of an expression can cause the; state to change, resulting in a new node in the ExplodedGraph with an; updated program point and an updated state. A bug is found by hitting; a node that satisfies some ""bug condition"" (basically a violation of a; checking invariant). The analyzer traces out multiple paths by reasoning about branches and; then bifurcating the state: on the true branch the conditions of the; branch are assumed to be true and on the false branch the conditions; of the branc",MatchSource.DOCS,interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt:3824,Modifiability,variab,variable,3824,"rogramState. This immutability is key since the ExplodedGraph represents; the behavior of the analyzed program from the entry point. To; represent these efficiently, we use functional data structures (e.g.,; ImmutableMaps) which share data between instances. Finally, individual Checkers work by also manipulating the analysis; state. The analyzer engine talks to them via a visitor interface.; For example, the PreVisitCallExpr() method is called by ExprEngine; to tell the Checker that we are about to analyze a CallExpr, and the; checker is asked to check for any preconditions that might not be; satisfied. The checker can do nothing, or it can generate a new; ProgramState and ExplodedNode which contains updated checker state. If it; finds a bug, it can tell the BugReporter object about the bug,; providing it an ExplodedNode which is the last node in the path that; triggered the problem. = Notes about C++ =. Since now constructors are seen before the variable that is constructed; in the CFG, we create a temporary object as the destination region that; is constructed into. See ExprEngine::VisitCXXConstructExpr(). In ExprEngine::processCallExit(), we always bind the object region to the; evaluated CXXConstructExpr. Then in VisitDeclStmt(), we compute the; corresponding lazy compound value if the variable is not a reference, and; bind the variable region to the lazy compound value. If the variable; is a reference, just use the object region as the initializer value. Before entering a C++ method (or ctor/dtor), the 'this' region is bound; to the object region. In ctors, we synthesize 'this' region with; CXXRecordDecl*, which means we do not use type qualifiers. In methods, we; synthesize 'this' region with CXXMethodDecl*, which has getThisType(); taking type qualifiers into account. It does not matter we use qualified; 'this' region in one method and unqualified 'this' region in another; method, because we only need to ensure the 'this' region is consistent; when we synthesi",MatchSource.DOCS,interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt:4174,Modifiability,variab,variable,4174,"g the analysis; state. The analyzer engine talks to them via a visitor interface.; For example, the PreVisitCallExpr() method is called by ExprEngine; to tell the Checker that we are about to analyze a CallExpr, and the; checker is asked to check for any preconditions that might not be; satisfied. The checker can do nothing, or it can generate a new; ProgramState and ExplodedNode which contains updated checker state. If it; finds a bug, it can tell the BugReporter object about the bug,; providing it an ExplodedNode which is the last node in the path that; triggered the problem. = Notes about C++ =. Since now constructors are seen before the variable that is constructed; in the CFG, we create a temporary object as the destination region that; is constructed into. See ExprEngine::VisitCXXConstructExpr(). In ExprEngine::processCallExit(), we always bind the object region to the; evaluated CXXConstructExpr. Then in VisitDeclStmt(), we compute the; corresponding lazy compound value if the variable is not a reference, and; bind the variable region to the lazy compound value. If the variable; is a reference, just use the object region as the initializer value. Before entering a C++ method (or ctor/dtor), the 'this' region is bound; to the object region. In ctors, we synthesize 'this' region with; CXXRecordDecl*, which means we do not use type qualifiers. In methods, we; synthesize 'this' region with CXXMethodDecl*, which has getThisType(); taking type qualifiers into account. It does not matter we use qualified; 'this' region in one method and unqualified 'this' region in another; method, because we only need to ensure the 'this' region is consistent; when we synthesize it and create it directly from CXXThisExpr in a single; method call. = Working on the Analyzer =. If you are interested in bringing up support for C++ expressions, the; best place to look is the visitation logic in ExprEngine, which; handles the simulation of individual expressions. There are plenty of; exam",MatchSource.DOCS,interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt:4217,Modifiability,variab,variable,4217,"g the analysis; state. The analyzer engine talks to them via a visitor interface.; For example, the PreVisitCallExpr() method is called by ExprEngine; to tell the Checker that we are about to analyze a CallExpr, and the; checker is asked to check for any preconditions that might not be; satisfied. The checker can do nothing, or it can generate a new; ProgramState and ExplodedNode which contains updated checker state. If it; finds a bug, it can tell the BugReporter object about the bug,; providing it an ExplodedNode which is the last node in the path that; triggered the problem. = Notes about C++ =. Since now constructors are seen before the variable that is constructed; in the CFG, we create a temporary object as the destination region that; is constructed into. See ExprEngine::VisitCXXConstructExpr(). In ExprEngine::processCallExit(), we always bind the object region to the; evaluated CXXConstructExpr. Then in VisitDeclStmt(), we compute the; corresponding lazy compound value if the variable is not a reference, and; bind the variable region to the lazy compound value. If the variable; is a reference, just use the object region as the initializer value. Before entering a C++ method (or ctor/dtor), the 'this' region is bound; to the object region. In ctors, we synthesize 'this' region with; CXXRecordDecl*, which means we do not use type qualifiers. In methods, we; synthesize 'this' region with CXXMethodDecl*, which has getThisType(); taking type qualifiers into account. It does not matter we use qualified; 'this' region in one method and unqualified 'this' region in another; method, because we only need to ensure the 'this' region is consistent; when we synthesize it and create it directly from CXXThisExpr in a single; method call. = Working on the Analyzer =. If you are interested in bringing up support for C++ expressions, the; best place to look is the visitation logic in ExprEngine, which; handles the simulation of individual expressions. There are plenty of; exam",MatchSource.DOCS,interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt:4268,Modifiability,variab,variable,4268," called by ExprEngine; to tell the Checker that we are about to analyze a CallExpr, and the; checker is asked to check for any preconditions that might not be; satisfied. The checker can do nothing, or it can generate a new; ProgramState and ExplodedNode which contains updated checker state. If it; finds a bug, it can tell the BugReporter object about the bug,; providing it an ExplodedNode which is the last node in the path that; triggered the problem. = Notes about C++ =. Since now constructors are seen before the variable that is constructed; in the CFG, we create a temporary object as the destination region that; is constructed into. See ExprEngine::VisitCXXConstructExpr(). In ExprEngine::processCallExit(), we always bind the object region to the; evaluated CXXConstructExpr. Then in VisitDeclStmt(), we compute the; corresponding lazy compound value if the variable is not a reference, and; bind the variable region to the lazy compound value. If the variable; is a reference, just use the object region as the initializer value. Before entering a C++ method (or ctor/dtor), the 'this' region is bound; to the object region. In ctors, we synthesize 'this' region with; CXXRecordDecl*, which means we do not use type qualifiers. In methods, we; synthesize 'this' region with CXXMethodDecl*, which has getThisType(); taking type qualifiers into account. It does not matter we use qualified; 'this' region in one method and unqualified 'this' region in another; method, because we only need to ensure the 'this' region is consistent; when we synthesize it and create it directly from CXXThisExpr in a single; method call. = Working on the Analyzer =. If you are interested in bringing up support for C++ expressions, the; best place to look is the visitation logic in ExprEngine, which; handles the simulation of individual expressions. There are plenty of; examples there of how other expressions are handled. If you are interested in writing checkers, look at the Checker and; CheckerVis",MatchSource.DOCS,interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt:2554,Performance,cache,caches,2554," can cause the; state to change, resulting in a new node in the ExplodedGraph with an; updated program point and an updated state. A bug is found by hitting; a node that satisfies some ""bug condition"" (basically a violation of a; checking invariant). The analyzer traces out multiple paths by reasoning about branches and; then bifurcating the state: on the true branch the conditions of the; branch are assumed to be true and on the false branch the conditions; of the branch are assumed to be false. Such ""assumptions"" create; constraints on the values of the program, and those constraints are; recorded in the ProgramState object (and are manipulated by the; ConstraintManager). If assuming the conditions of a branch would; cause the constraints to be unsatisfiable, the branch is considered; infeasible and that path is not taken. This is how we get; path-sensitivity. We reduce exponential blow-up by caching nodes. If; a new node with the same state and program point as an existing node; would get generated, the path ""caches out"" and we simply reuse the; existing node. Thus the ExplodedGraph is not a DAG; it can contain; cycles as paths loop back onto each other and cache out. ProgramState and ExplodedNodes are basically immutable once created. Once; one creates a ProgramState, you need to create a new one to get a new; ProgramState. This immutability is key since the ExplodedGraph represents; the behavior of the analyzed program from the entry point. To; represent these efficiently, we use functional data structures (e.g.,; ImmutableMaps) which share data between instances. Finally, individual Checkers work by also manipulating the analysis; state. The analyzer engine talks to them via a visitor interface.; For example, the PreVisitCallExpr() method is called by ExprEngine; to tell the Checker that we are about to analyze a CallExpr, and the; checker is asked to check for any preconditions that might not be; satisfied. The checker can do nothing, or it can generate a new;",MatchSource.DOCS,interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt:2705,Performance,cache,cache,2705,"ug is found by hitting; a node that satisfies some ""bug condition"" (basically a violation of a; checking invariant). The analyzer traces out multiple paths by reasoning about branches and; then bifurcating the state: on the true branch the conditions of the; branch are assumed to be true and on the false branch the conditions; of the branch are assumed to be false. Such ""assumptions"" create; constraints on the values of the program, and those constraints are; recorded in the ProgramState object (and are manipulated by the; ConstraintManager). If assuming the conditions of a branch would; cause the constraints to be unsatisfiable, the branch is considered; infeasible and that path is not taken. This is how we get; path-sensitivity. We reduce exponential blow-up by caching nodes. If; a new node with the same state and program point as an existing node; would get generated, the path ""caches out"" and we simply reuse the; existing node. Thus the ExplodedGraph is not a DAG; it can contain; cycles as paths loop back onto each other and cache out. ProgramState and ExplodedNodes are basically immutable once created. Once; one creates a ProgramState, you need to create a new one to get a new; ProgramState. This immutability is key since the ExplodedGraph represents; the behavior of the analyzed program from the entry point. To; represent these efficiently, we use functional data structures (e.g.,; ImmutableMaps) which share data between instances. Finally, individual Checkers work by also manipulating the analysis; state. The analyzer engine talks to them via a visitor interface.; For example, the PreVisitCallExpr() method is called by ExprEngine; to tell the Checker that we are about to analyze a CallExpr, and the; checker is asked to check for any preconditions that might not be; satisfied. The checker can do nothing, or it can generate a new; ProgramState and ExplodedNode which contains updated checker state. If it; finds a bug, it can tell the BugReporter object about the",MatchSource.DOCS,interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt:5073,Testability,log,logic,5073,"o the; evaluated CXXConstructExpr. Then in VisitDeclStmt(), we compute the; corresponding lazy compound value if the variable is not a reference, and; bind the variable region to the lazy compound value. If the variable; is a reference, just use the object region as the initializer value. Before entering a C++ method (or ctor/dtor), the 'this' region is bound; to the object region. In ctors, we synthesize 'this' region with; CXXRecordDecl*, which means we do not use type qualifiers. In methods, we; synthesize 'this' region with CXXMethodDecl*, which has getThisType(); taking type qualifiers into account. It does not matter we use qualified; 'this' region in one method and unqualified 'this' region in another; method, because we only need to ensure the 'this' region is consistent; when we synthesize it and create it directly from CXXThisExpr in a single; method call. = Working on the Analyzer =. If you are interested in bringing up support for C++ expressions, the; best place to look is the visitation logic in ExprEngine, which; handles the simulation of individual expressions. There are plenty of; examples there of how other expressions are handled. If you are interested in writing checkers, look at the Checker and; CheckerVisitor interfaces (Checker.h and CheckerVisitor.h). Also look; at the files named *Checker.cpp for examples on how you can implement; these interfaces. = Debugging the Analyzer =. There are some useful command-line options for debugging. For example:. $ clang -cc1 -help | grep analyze; -analyze-function <value>; -analyzer-display-progress; -analyzer-viz-egraph-graphviz; ... The first allows you to specify only analyzing a specific function.; The second prints to the console what function is being analyzed. The; third generates a graphviz dot file of the ExplodedGraph. This is; extremely useful when debugging the analyzer and viewing the; simulation results. Of course, viewing the CFG (Control-Flow Graph) is also useful:. $ clang -cc1 -analyzer-ch",MatchSource.DOCS,interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt:537,Usability,simpl,simple,537,"//===----------------------------------------------------------------------===//; // Clang Static Analyzer; //===----------------------------------------------------------------------===//. = Library Structure =. The analyzer library has two layers: a (low-level) static analysis; engine (ExprEngine.cpp and friends), and some static checkers; (*Checker.cpp). The latter are built on top of the former via the; Checker and CheckerVisitor interfaces (Checker.h and; CheckerVisitor.h). The Checker interface is designed to be minimal; and simple for checker writers, and attempts to isolate them from much; of the gore of the internal analysis engine. = How It Works =. The analyzer is inspired by several foundational research papers ([1],; [2]). (FIXME: kremenek to add more links). In a nutshell, the analyzer is basically a source code simulator that; traces out possible paths of execution. The state of the program; (values of variables and expressions) is encapsulated by the state; (ProgramState). A location in the program is called a program point; (ProgramPoint), and the combination of state and program point is a; node in an exploded graph (ExplodedGraph). The term ""exploded"" comes; from exploding the control-flow edges in the control-flow graph (CFG). Conceptually the analyzer does a reachability analysis through the; ExplodedGraph. We start at a root node, which has the entry program; point and initial state, and then simulate transitions by analyzing; individual expressions. The analysis of an expression can cause the; state to change, resulting in a new node in the ExplodedGraph with an; updated program point and an updated state. A bug is found by hitting; a node that satisfies some ""bug condition"" (basically a violation of a; checking invariant). The analyzer traces out multiple paths by reasoning about branches and; then bifurcating the state: on the true branch the conditions of the; branch are assumed to be true and on the false branch the conditions; of the branc",MatchSource.DOCS,interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt:2573,Usability,simpl,simply,2573," can cause the; state to change, resulting in a new node in the ExplodedGraph with an; updated program point and an updated state. A bug is found by hitting; a node that satisfies some ""bug condition"" (basically a violation of a; checking invariant). The analyzer traces out multiple paths by reasoning about branches and; then bifurcating the state: on the true branch the conditions of the; branch are assumed to be true and on the false branch the conditions; of the branch are assumed to be false. Such ""assumptions"" create; constraints on the values of the program, and those constraints are; recorded in the ProgramState object (and are manipulated by the; ConstraintManager). If assuming the conditions of a branch would; cause the constraints to be unsatisfiable, the branch is considered; infeasible and that path is not taken. This is how we get; path-sensitivity. We reduce exponential blow-up by caching nodes. If; a new node with the same state and program point as an existing node; would get generated, the path ""caches out"" and we simply reuse the; existing node. Thus the ExplodedGraph is not a DAG; it can contain; cycles as paths loop back onto each other and cache out. ProgramState and ExplodedNodes are basically immutable once created. Once; one creates a ProgramState, you need to create a new one to get a new; ProgramState. This immutability is key since the ExplodedGraph represents; the behavior of the analyzed program from the entry point. To; represent these efficiently, we use functional data structures (e.g.,; ImmutableMaps) which share data between instances. Finally, individual Checkers work by also manipulating the analysis; state. The analyzer engine talks to them via a visitor interface.; For example, the PreVisitCallExpr() method is called by ExprEngine; to tell the Checker that we are about to analyze a CallExpr, and the; checker is asked to check for any preconditions that might not be; satisfied. The checker can do nothing, or it can generate a new;",MatchSource.DOCS,interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Testing/CMakeLists.txt:170,Integrability,interface,interface,170,"# Don't include this target in LLVMExports. FIXME: is there a cleaner way?; set(EXCLUDE_FROM_ALL ON). # Not add_clang_library: this is not part of clang's public library interface.; # Unit tests should depend on this with target_link_libraries(), rather; # than with clang_target_link_libraries().; add_llvm_library(clangTesting; CommandLineArgs.cpp; TestAST.cpp. BUILDTREE_ONLY. LINK_COMPONENTS; MC; Support; ). clang_target_link_libraries(clangTesting; PRIVATE; clangAST; clangBasic; clangFrontend; clangLex; clangSerialization; ). target_link_libraries(clangTesting; PRIVATE; llvm_gtest; ); ",MatchSource.DOCS,interpreter/llvm-project/clang/lib/Testing/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Testing/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Testing/CMakeLists.txt:202,Integrability,depend,depend,202,"# Don't include this target in LLVMExports. FIXME: is there a cleaner way?; set(EXCLUDE_FROM_ALL ON). # Not add_clang_library: this is not part of clang's public library interface.; # Unit tests should depend on this with target_link_libraries(), rather; # than with clang_target_link_libraries().; add_llvm_library(clangTesting; CommandLineArgs.cpp; TestAST.cpp. BUILDTREE_ONLY. LINK_COMPONENTS; MC; Support; ). clang_target_link_libraries(clangTesting; PRIVATE; clangAST; clangBasic; clangFrontend; clangLex; clangSerialization; ). target_link_libraries(clangTesting; PRIVATE; llvm_gtest; ); ",MatchSource.DOCS,interpreter/llvm-project/clang/lib/Testing/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Testing/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Testing/CMakeLists.txt:189,Testability,test,tests,189,"# Don't include this target in LLVMExports. FIXME: is there a cleaner way?; set(EXCLUDE_FROM_ALL ON). # Not add_clang_library: this is not part of clang's public library interface.; # Unit tests should depend on this with target_link_libraries(), rather; # than with clang_target_link_libraries().; add_llvm_library(clangTesting; CommandLineArgs.cpp; TestAST.cpp. BUILDTREE_ONLY. LINK_COMPONENTS; MC; Support; ). clang_target_link_libraries(clangTesting; PRIVATE; clangAST; clangBasic; clangFrontend; clangLex; clangSerialization; ). target_link_libraries(clangTesting; PRIVATE; llvm_gtest; ); ",MatchSource.DOCS,interpreter/llvm-project/clang/lib/Testing/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Testing/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/CMakeLists.txt:492,Integrability,message,message,492,"set(LLVM_LINK_COMPONENTS; Option; FrontendOpenMP; Support; TargetParser; ). add_subdirectory(Core); add_subdirectory(Inclusions); add_subdirectory(Refactoring); add_subdirectory(ASTDiff); add_subdirectory(DumpTool); add_subdirectory(Syntax); add_subdirectory(DependencyScanning); add_subdirectory(Transformer). # Replace the last lib component of the current binary directory with include; string(FIND ${CMAKE_CURRENT_BINARY_DIR} ""/lib/"" PATH_LIB_START REVERSE); if(PATH_LIB_START EQUAL -1); message(FATAL_ERROR ""Couldn't find lib component in binary directory""); endif(); math(EXPR PATH_LIB_END ""${PATH_LIB_START}+5""); string(SUBSTRING ${CMAKE_CURRENT_BINARY_DIR} 0 ${PATH_LIB_START} PATH_HEAD); string(SUBSTRING ${CMAKE_CURRENT_BINARY_DIR} ${PATH_LIB_END} -1 PATH_TAIL); string(CONCAT BINARY_INCLUDE_DIR ${PATH_HEAD} ""/include/clang/"" ${PATH_TAIL}). if (NOT Python3_EXECUTABLE; OR APPLE; OR CMAKE_CROSSCOMPILING; OR GENERATOR_IS_MULTI_CONFIG; OR NOT LLVM_NATIVE_ARCH IN_LIST LLVM_TARGETS_TO_BUILD; ); configure_file(; EmptyNodeIntrospection.inc.in; ${BINARY_INCLUDE_DIR}/NodeIntrospection.inc; COPYONLY; ); set(CLANG_TOOLING_BUILD_AST_INTROSPECTION ""OFF"" CACHE BOOL """"); else(); # The generation of ASTNodeAPI.json takes a long time in a; # Debug build due to parsing AST.h. Disable the processing; # but setting CLANG_TOOLING_BUILD_AST_INTROSPECTION as an; # internal hidden setting to override.; # When the processing is disabled, a trivial/empty JSON; # file is generated by clang-ast-dump and generate_cxx_src_locs.py; # generates the same API, but with a trivial implementation.; option(CLANG_TOOLING_BUILD_AST_INTROSPECTION ""Enable AST introspection"" TRUE). set(skip_expensive_processing $<OR:$<CONFIG:Debug>,$<NOT:$<BOOL:${CLANG_TOOLING_BUILD_AST_INTROSPECTION}>>>). set(implicitDirs); foreach(implicitDir ${CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES}); list(APPEND implicitDirs -I ${implicitDir}); endforeach(). include(GetClangResourceDir); get_clang_resource_dir(resource_dir PREFIX ${LLVM_BIN",MatchSource.DOCS,interpreter/llvm-project/clang/lib/Tooling/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/plugins/CMakeLists.txt:145,Modifiability,plugin,plugins,145,"# Since these do not specify a specific PLUGIN_TOOL (which could be clang or; # clang-tidy), we cannot compile this unless the platform supports plugins with; # undefined symbols, and cannot use it unless the user has opted for clang plugins).; if(CLANG_ENABLE_STATIC_ANALYZER AND CLANG_PLUGIN_SUPPORT AND LLVM_ENABLE_PLUGINS); add_subdirectory(SampleAnalyzer); add_subdirectory(CheckerDependencyHandling); add_subdirectory(CheckerOptionHandling); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/lib/Analysis/plugins/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/plugins/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/plugins/CMakeLists.txt:234,Modifiability,plugin,plugins,234,"# Since these do not specify a specific PLUGIN_TOOL (which could be clang or; # clang-tidy), we cannot compile this unless the platform supports plugins with; # undefined symbols, and cannot use it unless the user has opted for clang plugins).; if(CLANG_ENABLE_STATIC_ANALYZER AND CLANG_PLUGIN_SUPPORT AND LLVM_ENABLE_PLUGINS); add_subdirectory(SampleAnalyzer); add_subdirectory(CheckerDependencyHandling); add_subdirectory(CheckerOptionHandling); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/lib/Analysis/plugins/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/plugins/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/llvm_libc_wrappers/llvm-libc-decls/README.txt:128,Availability,avail,availible,128,LLVM libc declarations; ======================. This directory will be filled by the `libc` project with declarations that are; availible on the device. Each declaration will use the `__LIBC_ATTRS` attribute; to control emission on the device side.; ,MatchSource.DOCS,interpreter/llvm-project/clang/lib/Headers/llvm_libc_wrappers/llvm-libc-decls/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/llvm_libc_wrappers/llvm-libc-decls/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Inclusions/Stdlib/CMakeLists.txt:28,Performance,perform,performance,28,"# Workaround for MSVC ARM64 performance regression:; # https://developercommunity.visualstudio.com/t/Compiling-a-specific-code-for-ARM64-with/10444970; # Since /O1 and /O2 represent a set of optimizations,; # our goal is to disable the /Og flag while retaining the other optimizations from the /O1|/O2 set; if(MSVC AND NOT CMAKE_CXX_COMPILER_ID MATCHES Clang; AND MSVC_VERSION VERSION_GREATER_EQUAL 1932; AND CMAKE_SYSTEM_PROCESSOR MATCHES ""ARM64""). string(TOUPPER ""${CMAKE_BUILD_TYPE}"" uppercase_CMAKE_BUILD_TYPE); string(REGEX MATCHALL ""/[Oo][12]"" opt_flags ""${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_${uppercase_CMAKE_BUILD_TYPE}}""); if (opt_flags); if(opt_flags MATCHES ""1$""); set(opt_flags ""/Od;/Os;/Oy;/Ob2;/GF;/Gy""); elseif (opt_flags MATCHES ""2$""); set(opt_flags ""/Od;/Oi;/Ot;/Oy;/Ob2;/GF;/Gy""); endif(); set_source_files_properties(StandardLibrary.cpp PROPERTIES COMPILE_OPTIONS ""${opt_flags}""); endif(); endif(). add_clang_library(clangToolingInclusionsStdlib; StandardLibrary.cpp. LINK_LIBS; clangAST; ); ",MatchSource.DOCS,interpreter/llvm-project/clang/lib/Tooling/Inclusions/Stdlib/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Inclusions/Stdlib/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Inclusions/Stdlib/CMakeLists.txt:191,Performance,optimiz,optimizations,191,"# Workaround for MSVC ARM64 performance regression:; # https://developercommunity.visualstudio.com/t/Compiling-a-specific-code-for-ARM64-with/10444970; # Since /O1 and /O2 represent a set of optimizations,; # our goal is to disable the /Og flag while retaining the other optimizations from the /O1|/O2 set; if(MSVC AND NOT CMAKE_CXX_COMPILER_ID MATCHES Clang; AND MSVC_VERSION VERSION_GREATER_EQUAL 1932; AND CMAKE_SYSTEM_PROCESSOR MATCHES ""ARM64""). string(TOUPPER ""${CMAKE_BUILD_TYPE}"" uppercase_CMAKE_BUILD_TYPE); string(REGEX MATCHALL ""/[Oo][12]"" opt_flags ""${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_${uppercase_CMAKE_BUILD_TYPE}}""); if (opt_flags); if(opt_flags MATCHES ""1$""); set(opt_flags ""/Od;/Os;/Oy;/Ob2;/GF;/Gy""); elseif (opt_flags MATCHES ""2$""); set(opt_flags ""/Od;/Oi;/Ot;/Oy;/Ob2;/GF;/Gy""); endif(); set_source_files_properties(StandardLibrary.cpp PROPERTIES COMPILE_OPTIONS ""${opt_flags}""); endif(); endif(). add_clang_library(clangToolingInclusionsStdlib; StandardLibrary.cpp. LINK_LIBS; clangAST; ); ",MatchSource.DOCS,interpreter/llvm-project/clang/lib/Tooling/Inclusions/Stdlib/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Inclusions/Stdlib/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Inclusions/Stdlib/CMakeLists.txt:271,Performance,optimiz,optimizations,271,"# Workaround for MSVC ARM64 performance regression:; # https://developercommunity.visualstudio.com/t/Compiling-a-specific-code-for-ARM64-with/10444970; # Since /O1 and /O2 represent a set of optimizations,; # our goal is to disable the /Og flag while retaining the other optimizations from the /O1|/O2 set; if(MSVC AND NOT CMAKE_CXX_COMPILER_ID MATCHES Clang; AND MSVC_VERSION VERSION_GREATER_EQUAL 1932; AND CMAKE_SYSTEM_PROCESSOR MATCHES ""ARM64""). string(TOUPPER ""${CMAKE_BUILD_TYPE}"" uppercase_CMAKE_BUILD_TYPE); string(REGEX MATCHALL ""/[Oo][12]"" opt_flags ""${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_${uppercase_CMAKE_BUILD_TYPE}}""); if (opt_flags); if(opt_flags MATCHES ""1$""); set(opt_flags ""/Od;/Os;/Oy;/Ob2;/GF;/Gy""); elseif (opt_flags MATCHES ""2$""); set(opt_flags ""/Od;/Oi;/Ot;/Oy;/Ob2;/GF;/Gy""); endif(); set_source_files_properties(StandardLibrary.cpp PROPERTIES COMPILE_OPTIONS ""${opt_flags}""); endif(); endif(). add_clang_library(clangToolingInclusionsStdlib; StandardLibrary.cpp. LINK_LIBS; clangAST; ); ",MatchSource.DOCS,interpreter/llvm-project/clang/lib/Tooling/Inclusions/Stdlib/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Inclusions/Stdlib/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/apinotes-test/CMakeLists.txt:66,Testability,test,test,66,set(LLVM_LINK_COMPONENTS; Support); add_clang_executable(apinotes-test; APINotesTest.cpp; ); clang_target_link_libraries(apinotes-test PRIVATE; clangAPINotes); ,MatchSource.DOCS,interpreter/llvm-project/clang/tools/apinotes-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/apinotes-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/apinotes-test/CMakeLists.txt:130,Testability,test,test,130,set(LLVM_LINK_COMPONENTS; Support); add_clang_executable(apinotes-test; APINotesTest.cpp; ); clang_target_link_libraries(apinotes-test PRIVATE; clangAPINotes); ,MatchSource.DOCS,interpreter/llvm-project/clang/tools/apinotes-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/apinotes-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/arcmt-test/CMakeLists.txt:65,Testability,test,test,65,set(LLVM_LINK_COMPONENTS; support; ). add_clang_executable(arcmt-test; arcmt-test.cpp; ). clang_target_link_libraries(arcmt-test; PRIVATE; clangARCMigrate; clangBasic; clangFrontend; clangLex; clangSerialization; ); ,MatchSource.DOCS,interpreter/llvm-project/clang/tools/arcmt-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/arcmt-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/arcmt-test/CMakeLists.txt:77,Testability,test,test,77,set(LLVM_LINK_COMPONENTS; support; ). add_clang_executable(arcmt-test; arcmt-test.cpp; ). clang_target_link_libraries(arcmt-test; PRIVATE; clangARCMigrate; clangBasic; clangFrontend; clangLex; clangSerialization; ); ,MatchSource.DOCS,interpreter/llvm-project/clang/tools/arcmt-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/arcmt-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/arcmt-test/CMakeLists.txt:124,Testability,test,test,124,set(LLVM_LINK_COMPONENTS; support; ). add_clang_executable(arcmt-test; arcmt-test.cpp; ). clang_target_link_libraries(arcmt-test; PRIVATE; clangARCMigrate; clangBasic; clangFrontend; clangLex; clangSerialization; ); ,MatchSource.DOCS,interpreter/llvm-project/clang/tools/arcmt-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/arcmt-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-arcmt-test/CMakeLists.txt:29,Testability,test,test,29,add_clang_executable(c-arcmt-test; c-arcmt-test.c; ). if (LLVM_BUILD_STATIC); target_link_libraries(c-arcmt-test; PRIVATE; libclang_static; ); else(); target_link_libraries(c-arcmt-test; PRIVATE; libclang; ); endif(). set_target_properties(c-arcmt-test; PROPERTIES; LINKER_LANGUAGE CXX); ,MatchSource.DOCS,interpreter/llvm-project/clang/tools/c-arcmt-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-arcmt-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-arcmt-test/CMakeLists.txt:43,Testability,test,test,43,add_clang_executable(c-arcmt-test; c-arcmt-test.c; ). if (LLVM_BUILD_STATIC); target_link_libraries(c-arcmt-test; PRIVATE; libclang_static; ); else(); target_link_libraries(c-arcmt-test; PRIVATE; libclang; ); endif(). set_target_properties(c-arcmt-test; PROPERTIES; LINKER_LANGUAGE CXX); ,MatchSource.DOCS,interpreter/llvm-project/clang/tools/c-arcmt-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-arcmt-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-arcmt-test/CMakeLists.txt:108,Testability,test,test,108,add_clang_executable(c-arcmt-test; c-arcmt-test.c; ). if (LLVM_BUILD_STATIC); target_link_libraries(c-arcmt-test; PRIVATE; libclang_static; ); else(); target_link_libraries(c-arcmt-test; PRIVATE; libclang; ); endif(). set_target_properties(c-arcmt-test; PROPERTIES; LINKER_LANGUAGE CXX); ,MatchSource.DOCS,interpreter/llvm-project/clang/tools/c-arcmt-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-arcmt-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-arcmt-test/CMakeLists.txt:181,Testability,test,test,181,add_clang_executable(c-arcmt-test; c-arcmt-test.c; ). if (LLVM_BUILD_STATIC); target_link_libraries(c-arcmt-test; PRIVATE; libclang_static; ); else(); target_link_libraries(c-arcmt-test; PRIVATE; libclang; ); endif(). set_target_properties(c-arcmt-test; PROPERTIES; LINKER_LANGUAGE CXX); ,MatchSource.DOCS,interpreter/llvm-project/clang/tools/c-arcmt-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-arcmt-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-arcmt-test/CMakeLists.txt:248,Testability,test,test,248,add_clang_executable(c-arcmt-test; c-arcmt-test.c; ). if (LLVM_BUILD_STATIC); target_link_libraries(c-arcmt-test; PRIVATE; libclang_static; ); else(); target_link_libraries(c-arcmt-test; PRIVATE; libclang; ); endif(). set_target_properties(c-arcmt-test; PROPERTIES; LINKER_LANGUAGE CXX); ,MatchSource.DOCS,interpreter/llvm-project/clang/tools/c-arcmt-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-arcmt-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt:567,Availability,avail,available,567,"set(LLVM_LINK_COMPONENTS; support; ). add_clang_executable(c-index-test; c-index-test.c; core_main.cpp; ). if(NOT MSVC); set_property(; SOURCE c-index-test.c; PROPERTY COMPILE_FLAGS ""-std=gnu89""; ); endif(). if (LLVM_BUILD_STATIC); target_link_libraries(c-index-test; PRIVATE; libclang_static; clangCodeGen; clangIndex; ); else(); target_link_libraries(c-index-test; PRIVATE; libclang; clangAST; clangBasic; clangCodeGen; clangFrontend; clangIndex; clangSerialization; ); endif(). set_target_properties(c-index-test; PROPERTIES; LINKER_LANGUAGE CXX). # If libxml2 is available, make it available for c-index-test.; if (CLANG_HAVE_LIBXML); target_link_libraries(c-index-test PRIVATE LibXml2::LibXml2); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); if(INTERNAL_INSTALL_PREFIX); set(INSTALL_DESTINATION ""${INTERNAL_INSTALL_PREFIX}/bin""); set_property(TARGET c-index-test APPEND PROPERTY INSTALL_RPATH; ""@executable_path/../../lib""); else(); set(INSTALL_DESTINATION ""${CMAKE_INSTALL_BINDIR}""); endif(). install(TARGETS c-index-test; RUNTIME DESTINATION ""${INSTALL_DESTINATION}""; COMPONENT c-index-test). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-c-index-test; DEPENDS c-index-test; COMPONENT c-index-test); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt:586,Availability,avail,available,586,"set(LLVM_LINK_COMPONENTS; support; ). add_clang_executable(c-index-test; c-index-test.c; core_main.cpp; ). if(NOT MSVC); set_property(; SOURCE c-index-test.c; PROPERTY COMPILE_FLAGS ""-std=gnu89""; ); endif(). if (LLVM_BUILD_STATIC); target_link_libraries(c-index-test; PRIVATE; libclang_static; clangCodeGen; clangIndex; ); else(); target_link_libraries(c-index-test; PRIVATE; libclang; clangAST; clangBasic; clangCodeGen; clangFrontend; clangIndex; clangSerialization; ); endif(). set_target_properties(c-index-test; PROPERTIES; LINKER_LANGUAGE CXX). # If libxml2 is available, make it available for c-index-test.; if (CLANG_HAVE_LIBXML); target_link_libraries(c-index-test PRIVATE LibXml2::LibXml2); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); if(INTERNAL_INSTALL_PREFIX); set(INSTALL_DESTINATION ""${INTERNAL_INSTALL_PREFIX}/bin""); set_property(TARGET c-index-test APPEND PROPERTY INSTALL_RPATH; ""@executable_path/../../lib""); else(); set(INSTALL_DESTINATION ""${CMAKE_INSTALL_BINDIR}""); endif(). install(TARGETS c-index-test; RUNTIME DESTINATION ""${INSTALL_DESTINATION}""; COMPONENT c-index-test). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-c-index-test; DEPENDS c-index-test; COMPONENT c-index-test); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt:1000,Deployability,install,install,1000,"set(LLVM_LINK_COMPONENTS; support; ). add_clang_executable(c-index-test; c-index-test.c; core_main.cpp; ). if(NOT MSVC); set_property(; SOURCE c-index-test.c; PROPERTY COMPILE_FLAGS ""-std=gnu89""; ); endif(). if (LLVM_BUILD_STATIC); target_link_libraries(c-index-test; PRIVATE; libclang_static; clangCodeGen; clangIndex; ); else(); target_link_libraries(c-index-test; PRIVATE; libclang; clangAST; clangBasic; clangCodeGen; clangFrontend; clangIndex; clangSerialization; ); endif(). set_target_properties(c-index-test; PROPERTIES; LINKER_LANGUAGE CXX). # If libxml2 is available, make it available for c-index-test.; if (CLANG_HAVE_LIBXML); target_link_libraries(c-index-test PRIVATE LibXml2::LibXml2); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); if(INTERNAL_INSTALL_PREFIX); set(INSTALL_DESTINATION ""${INTERNAL_INSTALL_PREFIX}/bin""); set_property(TARGET c-index-test APPEND PROPERTY INSTALL_RPATH; ""@executable_path/../../lib""); else(); set(INSTALL_DESTINATION ""${CMAKE_INSTALL_BINDIR}""); endif(). install(TARGETS c-index-test; RUNTIME DESTINATION ""${INSTALL_DESTINATION}""; COMPONENT c-index-test). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-c-index-test; DEPENDS c-index-test; COMPONENT c-index-test); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt:1152,Deployability,install,install-c-index-test,1152,"set(LLVM_LINK_COMPONENTS; support; ). add_clang_executable(c-index-test; c-index-test.c; core_main.cpp; ). if(NOT MSVC); set_property(; SOURCE c-index-test.c; PROPERTY COMPILE_FLAGS ""-std=gnu89""; ); endif(). if (LLVM_BUILD_STATIC); target_link_libraries(c-index-test; PRIVATE; libclang_static; clangCodeGen; clangIndex; ); else(); target_link_libraries(c-index-test; PRIVATE; libclang; clangAST; clangBasic; clangCodeGen; clangFrontend; clangIndex; clangSerialization; ); endif(). set_target_properties(c-index-test; PROPERTIES; LINKER_LANGUAGE CXX). # If libxml2 is available, make it available for c-index-test.; if (CLANG_HAVE_LIBXML); target_link_libraries(c-index-test PRIVATE LibXml2::LibXml2); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); if(INTERNAL_INSTALL_PREFIX); set(INSTALL_DESTINATION ""${INTERNAL_INSTALL_PREFIX}/bin""); set_property(TARGET c-index-test APPEND PROPERTY INSTALL_RPATH; ""@executable_path/../../lib""); else(); set(INSTALL_DESTINATION ""${CMAKE_INSTALL_BINDIR}""); endif(). install(TARGETS c-index-test; RUNTIME DESTINATION ""${INSTALL_DESTINATION}""; COMPONENT c-index-test). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-c-index-test; DEPENDS c-index-test; COMPONENT c-index-test); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt:67,Testability,test,test,67,"set(LLVM_LINK_COMPONENTS; support; ). add_clang_executable(c-index-test; c-index-test.c; core_main.cpp; ). if(NOT MSVC); set_property(; SOURCE c-index-test.c; PROPERTY COMPILE_FLAGS ""-std=gnu89""; ); endif(). if (LLVM_BUILD_STATIC); target_link_libraries(c-index-test; PRIVATE; libclang_static; clangCodeGen; clangIndex; ); else(); target_link_libraries(c-index-test; PRIVATE; libclang; clangAST; clangBasic; clangCodeGen; clangFrontend; clangIndex; clangSerialization; ); endif(). set_target_properties(c-index-test; PROPERTIES; LINKER_LANGUAGE CXX). # If libxml2 is available, make it available for c-index-test.; if (CLANG_HAVE_LIBXML); target_link_libraries(c-index-test PRIVATE LibXml2::LibXml2); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); if(INTERNAL_INSTALL_PREFIX); set(INSTALL_DESTINATION ""${INTERNAL_INSTALL_PREFIX}/bin""); set_property(TARGET c-index-test APPEND PROPERTY INSTALL_RPATH; ""@executable_path/../../lib""); else(); set(INSTALL_DESTINATION ""${CMAKE_INSTALL_BINDIR}""); endif(). install(TARGETS c-index-test; RUNTIME DESTINATION ""${INSTALL_DESTINATION}""; COMPONENT c-index-test). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-c-index-test; DEPENDS c-index-test; COMPONENT c-index-test); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt:81,Testability,test,test,81,"set(LLVM_LINK_COMPONENTS; support; ). add_clang_executable(c-index-test; c-index-test.c; core_main.cpp; ). if(NOT MSVC); set_property(; SOURCE c-index-test.c; PROPERTY COMPILE_FLAGS ""-std=gnu89""; ); endif(). if (LLVM_BUILD_STATIC); target_link_libraries(c-index-test; PRIVATE; libclang_static; clangCodeGen; clangIndex; ); else(); target_link_libraries(c-index-test; PRIVATE; libclang; clangAST; clangBasic; clangCodeGen; clangFrontend; clangIndex; clangSerialization; ); endif(). set_target_properties(c-index-test; PROPERTIES; LINKER_LANGUAGE CXX). # If libxml2 is available, make it available for c-index-test.; if (CLANG_HAVE_LIBXML); target_link_libraries(c-index-test PRIVATE LibXml2::LibXml2); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); if(INTERNAL_INSTALL_PREFIX); set(INSTALL_DESTINATION ""${INTERNAL_INSTALL_PREFIX}/bin""); set_property(TARGET c-index-test APPEND PROPERTY INSTALL_RPATH; ""@executable_path/../../lib""); else(); set(INSTALL_DESTINATION ""${CMAKE_INSTALL_BINDIR}""); endif(). install(TARGETS c-index-test; RUNTIME DESTINATION ""${INSTALL_DESTINATION}""; COMPONENT c-index-test). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-c-index-test; DEPENDS c-index-test; COMPONENT c-index-test); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt:151,Testability,test,test,151,"set(LLVM_LINK_COMPONENTS; support; ). add_clang_executable(c-index-test; c-index-test.c; core_main.cpp; ). if(NOT MSVC); set_property(; SOURCE c-index-test.c; PROPERTY COMPILE_FLAGS ""-std=gnu89""; ); endif(). if (LLVM_BUILD_STATIC); target_link_libraries(c-index-test; PRIVATE; libclang_static; clangCodeGen; clangIndex; ); else(); target_link_libraries(c-index-test; PRIVATE; libclang; clangAST; clangBasic; clangCodeGen; clangFrontend; clangIndex; clangSerialization; ); endif(). set_target_properties(c-index-test; PROPERTIES; LINKER_LANGUAGE CXX). # If libxml2 is available, make it available for c-index-test.; if (CLANG_HAVE_LIBXML); target_link_libraries(c-index-test PRIVATE LibXml2::LibXml2); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); if(INTERNAL_INSTALL_PREFIX); set(INSTALL_DESTINATION ""${INTERNAL_INSTALL_PREFIX}/bin""); set_property(TARGET c-index-test APPEND PROPERTY INSTALL_RPATH; ""@executable_path/../../lib""); else(); set(INSTALL_DESTINATION ""${CMAKE_INSTALL_BINDIR}""); endif(). install(TARGETS c-index-test; RUNTIME DESTINATION ""${INSTALL_DESTINATION}""; COMPONENT c-index-test). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-c-index-test; DEPENDS c-index-test; COMPONENT c-index-test); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt:262,Testability,test,test,262,"set(LLVM_LINK_COMPONENTS; support; ). add_clang_executable(c-index-test; c-index-test.c; core_main.cpp; ). if(NOT MSVC); set_property(; SOURCE c-index-test.c; PROPERTY COMPILE_FLAGS ""-std=gnu89""; ); endif(). if (LLVM_BUILD_STATIC); target_link_libraries(c-index-test; PRIVATE; libclang_static; clangCodeGen; clangIndex; ); else(); target_link_libraries(c-index-test; PRIVATE; libclang; clangAST; clangBasic; clangCodeGen; clangFrontend; clangIndex; clangSerialization; ); endif(). set_target_properties(c-index-test; PROPERTIES; LINKER_LANGUAGE CXX). # If libxml2 is available, make it available for c-index-test.; if (CLANG_HAVE_LIBXML); target_link_libraries(c-index-test PRIVATE LibXml2::LibXml2); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); if(INTERNAL_INSTALL_PREFIX); set(INSTALL_DESTINATION ""${INTERNAL_INSTALL_PREFIX}/bin""); set_property(TARGET c-index-test APPEND PROPERTY INSTALL_RPATH; ""@executable_path/../../lib""); else(); set(INSTALL_DESTINATION ""${CMAKE_INSTALL_BINDIR}""); endif(). install(TARGETS c-index-test; RUNTIME DESTINATION ""${INSTALL_DESTINATION}""; COMPONENT c-index-test). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-c-index-test; DEPENDS c-index-test; COMPONENT c-index-test); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt:361,Testability,test,test,361,"set(LLVM_LINK_COMPONENTS; support; ). add_clang_executable(c-index-test; c-index-test.c; core_main.cpp; ). if(NOT MSVC); set_property(; SOURCE c-index-test.c; PROPERTY COMPILE_FLAGS ""-std=gnu89""; ); endif(). if (LLVM_BUILD_STATIC); target_link_libraries(c-index-test; PRIVATE; libclang_static; clangCodeGen; clangIndex; ); else(); target_link_libraries(c-index-test; PRIVATE; libclang; clangAST; clangBasic; clangCodeGen; clangFrontend; clangIndex; clangSerialization; ); endif(). set_target_properties(c-index-test; PROPERTIES; LINKER_LANGUAGE CXX). # If libxml2 is available, make it available for c-index-test.; if (CLANG_HAVE_LIBXML); target_link_libraries(c-index-test PRIVATE LibXml2::LibXml2); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); if(INTERNAL_INSTALL_PREFIX); set(INSTALL_DESTINATION ""${INTERNAL_INSTALL_PREFIX}/bin""); set_property(TARGET c-index-test APPEND PROPERTY INSTALL_RPATH; ""@executable_path/../../lib""); else(); set(INSTALL_DESTINATION ""${CMAKE_INSTALL_BINDIR}""); endif(). install(TARGETS c-index-test; RUNTIME DESTINATION ""${INSTALL_DESTINATION}""; COMPONENT c-index-test). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-c-index-test; DEPENDS c-index-test; COMPONENT c-index-test); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt:511,Testability,test,test,511,"set(LLVM_LINK_COMPONENTS; support; ). add_clang_executable(c-index-test; c-index-test.c; core_main.cpp; ). if(NOT MSVC); set_property(; SOURCE c-index-test.c; PROPERTY COMPILE_FLAGS ""-std=gnu89""; ); endif(). if (LLVM_BUILD_STATIC); target_link_libraries(c-index-test; PRIVATE; libclang_static; clangCodeGen; clangIndex; ); else(); target_link_libraries(c-index-test; PRIVATE; libclang; clangAST; clangBasic; clangCodeGen; clangFrontend; clangIndex; clangSerialization; ); endif(). set_target_properties(c-index-test; PROPERTIES; LINKER_LANGUAGE CXX). # If libxml2 is available, make it available for c-index-test.; if (CLANG_HAVE_LIBXML); target_link_libraries(c-index-test PRIVATE LibXml2::LibXml2); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); if(INTERNAL_INSTALL_PREFIX); set(INSTALL_DESTINATION ""${INTERNAL_INSTALL_PREFIX}/bin""); set_property(TARGET c-index-test APPEND PROPERTY INSTALL_RPATH; ""@executable_path/../../lib""); else(); set(INSTALL_DESTINATION ""${CMAKE_INSTALL_BINDIR}""); endif(). install(TARGETS c-index-test; RUNTIME DESTINATION ""${INSTALL_DESTINATION}""; COMPONENT c-index-test). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-c-index-test; DEPENDS c-index-test; COMPONENT c-index-test); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt:608,Testability,test,test,608,"set(LLVM_LINK_COMPONENTS; support; ). add_clang_executable(c-index-test; c-index-test.c; core_main.cpp; ). if(NOT MSVC); set_property(; SOURCE c-index-test.c; PROPERTY COMPILE_FLAGS ""-std=gnu89""; ); endif(). if (LLVM_BUILD_STATIC); target_link_libraries(c-index-test; PRIVATE; libclang_static; clangCodeGen; clangIndex; ); else(); target_link_libraries(c-index-test; PRIVATE; libclang; clangAST; clangBasic; clangCodeGen; clangFrontend; clangIndex; clangSerialization; ); endif(). set_target_properties(c-index-test; PROPERTIES; LINKER_LANGUAGE CXX). # If libxml2 is available, make it available for c-index-test.; if (CLANG_HAVE_LIBXML); target_link_libraries(c-index-test PRIVATE LibXml2::LibXml2); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); if(INTERNAL_INSTALL_PREFIX); set(INSTALL_DESTINATION ""${INTERNAL_INSTALL_PREFIX}/bin""); set_property(TARGET c-index-test APPEND PROPERTY INSTALL_RPATH; ""@executable_path/../../lib""); else(); set(INSTALL_DESTINATION ""${CMAKE_INSTALL_BINDIR}""); endif(). install(TARGETS c-index-test; RUNTIME DESTINATION ""${INSTALL_DESTINATION}""; COMPONENT c-index-test). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-c-index-test; DEPENDS c-index-test; COMPONENT c-index-test); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt:669,Testability,test,test,669,"set(LLVM_LINK_COMPONENTS; support; ). add_clang_executable(c-index-test; c-index-test.c; core_main.cpp; ). if(NOT MSVC); set_property(; SOURCE c-index-test.c; PROPERTY COMPILE_FLAGS ""-std=gnu89""; ); endif(). if (LLVM_BUILD_STATIC); target_link_libraries(c-index-test; PRIVATE; libclang_static; clangCodeGen; clangIndex; ); else(); target_link_libraries(c-index-test; PRIVATE; libclang; clangAST; clangBasic; clangCodeGen; clangFrontend; clangIndex; clangSerialization; ); endif(). set_target_properties(c-index-test; PROPERTIES; LINKER_LANGUAGE CXX). # If libxml2 is available, make it available for c-index-test.; if (CLANG_HAVE_LIBXML); target_link_libraries(c-index-test PRIVATE LibXml2::LibXml2); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); if(INTERNAL_INSTALL_PREFIX); set(INSTALL_DESTINATION ""${INTERNAL_INSTALL_PREFIX}/bin""); set_property(TARGET c-index-test APPEND PROPERTY INSTALL_RPATH; ""@executable_path/../../lib""); else(); set(INSTALL_DESTINATION ""${CMAKE_INSTALL_BINDIR}""); endif(). install(TARGETS c-index-test; RUNTIME DESTINATION ""${INSTALL_DESTINATION}""; COMPONENT c-index-test). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-c-index-test; DEPENDS c-index-test; COMPONENT c-index-test); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt:864,Testability,test,test,864,"set(LLVM_LINK_COMPONENTS; support; ). add_clang_executable(c-index-test; c-index-test.c; core_main.cpp; ). if(NOT MSVC); set_property(; SOURCE c-index-test.c; PROPERTY COMPILE_FLAGS ""-std=gnu89""; ); endif(). if (LLVM_BUILD_STATIC); target_link_libraries(c-index-test; PRIVATE; libclang_static; clangCodeGen; clangIndex; ); else(); target_link_libraries(c-index-test; PRIVATE; libclang; clangAST; clangBasic; clangCodeGen; clangFrontend; clangIndex; clangSerialization; ); endif(). set_target_properties(c-index-test; PROPERTIES; LINKER_LANGUAGE CXX). # If libxml2 is available, make it available for c-index-test.; if (CLANG_HAVE_LIBXML); target_link_libraries(c-index-test PRIVATE LibXml2::LibXml2); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); if(INTERNAL_INSTALL_PREFIX); set(INSTALL_DESTINATION ""${INTERNAL_INSTALL_PREFIX}/bin""); set_property(TARGET c-index-test APPEND PROPERTY INSTALL_RPATH; ""@executable_path/../../lib""); else(); set(INSTALL_DESTINATION ""${CMAKE_INSTALL_BINDIR}""); endif(). install(TARGETS c-index-test; RUNTIME DESTINATION ""${INSTALL_DESTINATION}""; COMPONENT c-index-test). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-c-index-test; DEPENDS c-index-test; COMPONENT c-index-test); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt:1024,Testability,test,test,1024,"set(LLVM_LINK_COMPONENTS; support; ). add_clang_executable(c-index-test; c-index-test.c; core_main.cpp; ). if(NOT MSVC); set_property(; SOURCE c-index-test.c; PROPERTY COMPILE_FLAGS ""-std=gnu89""; ); endif(). if (LLVM_BUILD_STATIC); target_link_libraries(c-index-test; PRIVATE; libclang_static; clangCodeGen; clangIndex; ); else(); target_link_libraries(c-index-test; PRIVATE; libclang; clangAST; clangBasic; clangCodeGen; clangFrontend; clangIndex; clangSerialization; ); endif(). set_target_properties(c-index-test; PROPERTIES; LINKER_LANGUAGE CXX). # If libxml2 is available, make it available for c-index-test.; if (CLANG_HAVE_LIBXML); target_link_libraries(c-index-test PRIVATE LibXml2::LibXml2); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); if(INTERNAL_INSTALL_PREFIX); set(INSTALL_DESTINATION ""${INTERNAL_INSTALL_PREFIX}/bin""); set_property(TARGET c-index-test APPEND PROPERTY INSTALL_RPATH; ""@executable_path/../../lib""); else(); set(INSTALL_DESTINATION ""${CMAKE_INSTALL_BINDIR}""); endif(). install(TARGETS c-index-test; RUNTIME DESTINATION ""${INSTALL_DESTINATION}""; COMPONENT c-index-test). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-c-index-test; DEPENDS c-index-test; COMPONENT c-index-test); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt:1094,Testability,test,test,1094,"set(LLVM_LINK_COMPONENTS; support; ). add_clang_executable(c-index-test; c-index-test.c; core_main.cpp; ). if(NOT MSVC); set_property(; SOURCE c-index-test.c; PROPERTY COMPILE_FLAGS ""-std=gnu89""; ); endif(). if (LLVM_BUILD_STATIC); target_link_libraries(c-index-test; PRIVATE; libclang_static; clangCodeGen; clangIndex; ); else(); target_link_libraries(c-index-test; PRIVATE; libclang; clangAST; clangBasic; clangCodeGen; clangFrontend; clangIndex; clangSerialization; ); endif(). set_target_properties(c-index-test; PROPERTIES; LINKER_LANGUAGE CXX). # If libxml2 is available, make it available for c-index-test.; if (CLANG_HAVE_LIBXML); target_link_libraries(c-index-test PRIVATE LibXml2::LibXml2); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); if(INTERNAL_INSTALL_PREFIX); set(INSTALL_DESTINATION ""${INTERNAL_INSTALL_PREFIX}/bin""); set_property(TARGET c-index-test APPEND PROPERTY INSTALL_RPATH; ""@executable_path/../../lib""); else(); set(INSTALL_DESTINATION ""${CMAKE_INSTALL_BINDIR}""); endif(). install(TARGETS c-index-test; RUNTIME DESTINATION ""${INSTALL_DESTINATION}""; COMPONENT c-index-test). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-c-index-test; DEPENDS c-index-test; COMPONENT c-index-test); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt:1168,Testability,test,test,1168,"set(LLVM_LINK_COMPONENTS; support; ). add_clang_executable(c-index-test; c-index-test.c; core_main.cpp; ). if(NOT MSVC); set_property(; SOURCE c-index-test.c; PROPERTY COMPILE_FLAGS ""-std=gnu89""; ); endif(). if (LLVM_BUILD_STATIC); target_link_libraries(c-index-test; PRIVATE; libclang_static; clangCodeGen; clangIndex; ); else(); target_link_libraries(c-index-test; PRIVATE; libclang; clangAST; clangBasic; clangCodeGen; clangFrontend; clangIndex; clangSerialization; ); endif(). set_target_properties(c-index-test; PROPERTIES; LINKER_LANGUAGE CXX). # If libxml2 is available, make it available for c-index-test.; if (CLANG_HAVE_LIBXML); target_link_libraries(c-index-test PRIVATE LibXml2::LibXml2); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); if(INTERNAL_INSTALL_PREFIX); set(INSTALL_DESTINATION ""${INTERNAL_INSTALL_PREFIX}/bin""); set_property(TARGET c-index-test APPEND PROPERTY INSTALL_RPATH; ""@executable_path/../../lib""); else(); set(INSTALL_DESTINATION ""${CMAKE_INSTALL_BINDIR}""); endif(). install(TARGETS c-index-test; RUNTIME DESTINATION ""${INSTALL_DESTINATION}""; COMPONENT c-index-test). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-c-index-test; DEPENDS c-index-test; COMPONENT c-index-test); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt:1190,Testability,test,test,1190,"set(LLVM_LINK_COMPONENTS; support; ). add_clang_executable(c-index-test; c-index-test.c; core_main.cpp; ). if(NOT MSVC); set_property(; SOURCE c-index-test.c; PROPERTY COMPILE_FLAGS ""-std=gnu89""; ); endif(). if (LLVM_BUILD_STATIC); target_link_libraries(c-index-test; PRIVATE; libclang_static; clangCodeGen; clangIndex; ); else(); target_link_libraries(c-index-test; PRIVATE; libclang; clangAST; clangBasic; clangCodeGen; clangFrontend; clangIndex; clangSerialization; ); endif(). set_target_properties(c-index-test; PROPERTIES; LINKER_LANGUAGE CXX). # If libxml2 is available, make it available for c-index-test.; if (CLANG_HAVE_LIBXML); target_link_libraries(c-index-test PRIVATE LibXml2::LibXml2); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); if(INTERNAL_INSTALL_PREFIX); set(INSTALL_DESTINATION ""${INTERNAL_INSTALL_PREFIX}/bin""); set_property(TARGET c-index-test APPEND PROPERTY INSTALL_RPATH; ""@executable_path/../../lib""); else(); set(INSTALL_DESTINATION ""${CMAKE_INSTALL_BINDIR}""); endif(). install(TARGETS c-index-test; RUNTIME DESTINATION ""${INSTALL_DESTINATION}""; COMPONENT c-index-test). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-c-index-test; DEPENDS c-index-test; COMPONENT c-index-test); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt:1214,Testability,test,test,1214,"set(LLVM_LINK_COMPONENTS; support; ). add_clang_executable(c-index-test; c-index-test.c; core_main.cpp; ). if(NOT MSVC); set_property(; SOURCE c-index-test.c; PROPERTY COMPILE_FLAGS ""-std=gnu89""; ); endif(). if (LLVM_BUILD_STATIC); target_link_libraries(c-index-test; PRIVATE; libclang_static; clangCodeGen; clangIndex; ); else(); target_link_libraries(c-index-test; PRIVATE; libclang; clangAST; clangBasic; clangCodeGen; clangFrontend; clangIndex; clangSerialization; ); endif(). set_target_properties(c-index-test; PROPERTIES; LINKER_LANGUAGE CXX). # If libxml2 is available, make it available for c-index-test.; if (CLANG_HAVE_LIBXML); target_link_libraries(c-index-test PRIVATE LibXml2::LibXml2); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); if(INTERNAL_INSTALL_PREFIX); set(INSTALL_DESTINATION ""${INTERNAL_INSTALL_PREFIX}/bin""); set_property(TARGET c-index-test APPEND PROPERTY INSTALL_RPATH; ""@executable_path/../../lib""); else(); set(INSTALL_DESTINATION ""${CMAKE_INSTALL_BINDIR}""); endif(). install(TARGETS c-index-test; RUNTIME DESTINATION ""${INSTALL_DESTINATION}""; COMPONENT c-index-test). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-c-index-test; DEPENDS c-index-test; COMPONENT c-index-test); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/CMakeLists.txt:347,Deployability,install,install,347,"set(LLVM_LINK_COMPONENTS support). add_clang_tool(clang-format; ClangFormat.cpp; ). set(CLANG_FORMAT_LIB_DEPS; clangBasic; clangFormat; clangRewrite; clangToolingCore; ). clang_target_link_libraries(clang-format; PRIVATE; ${CLANG_FORMAT_LIB_DEPS}; ). if( LLVM_LIB_FUZZING_ENGINE OR LLVM_USE_SANITIZE_COVERAGE ); add_subdirectory(fuzzer); endif(). install(FILES clang-format-bbedit.applescript; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(PROGRAMS clang-format-diff.py; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(FILES clang-format-sublime.py; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(FILES clang-format.el; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(FILES clang-format.py; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(PROGRAMS git-clang-format; DESTINATION ""${CMAKE_INSTALL_BINDIR}""; COMPONENT clang-format). if (WIN32 AND NOT CYGWIN); install(PROGRAMS git-clang-format.bat; DESTINATION ""${CMAKE_INSTALL_BINDIR}""; COMPONENT clang-format); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/CMakeLists.txt:465,Deployability,install,install,465,"set(LLVM_LINK_COMPONENTS support). add_clang_tool(clang-format; ClangFormat.cpp; ). set(CLANG_FORMAT_LIB_DEPS; clangBasic; clangFormat; clangRewrite; clangToolingCore; ). clang_target_link_libraries(clang-format; PRIVATE; ${CLANG_FORMAT_LIB_DEPS}; ). if( LLVM_LIB_FUZZING_ENGINE OR LLVM_USE_SANITIZE_COVERAGE ); add_subdirectory(fuzzer); endif(). install(FILES clang-format-bbedit.applescript; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(PROGRAMS clang-format-diff.py; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(FILES clang-format-sublime.py; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(FILES clang-format.el; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(FILES clang-format.py; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(PROGRAMS git-clang-format; DESTINATION ""${CMAKE_INSTALL_BINDIR}""; COMPONENT clang-format). if (WIN32 AND NOT CYGWIN); install(PROGRAMS git-clang-format.bat; DESTINATION ""${CMAKE_INSTALL_BINDIR}""; COMPONENT clang-format); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/CMakeLists.txt:575,Deployability,install,install,575,"set(LLVM_LINK_COMPONENTS support). add_clang_tool(clang-format; ClangFormat.cpp; ). set(CLANG_FORMAT_LIB_DEPS; clangBasic; clangFormat; clangRewrite; clangToolingCore; ). clang_target_link_libraries(clang-format; PRIVATE; ${CLANG_FORMAT_LIB_DEPS}; ). if( LLVM_LIB_FUZZING_ENGINE OR LLVM_USE_SANITIZE_COVERAGE ); add_subdirectory(fuzzer); endif(). install(FILES clang-format-bbedit.applescript; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(PROGRAMS clang-format-diff.py; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(FILES clang-format-sublime.py; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(FILES clang-format.el; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(FILES clang-format.py; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(PROGRAMS git-clang-format; DESTINATION ""${CMAKE_INSTALL_BINDIR}""; COMPONENT clang-format). if (WIN32 AND NOT CYGWIN); install(PROGRAMS git-clang-format.bat; DESTINATION ""${CMAKE_INSTALL_BINDIR}""; COMPONENT clang-format); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/CMakeLists.txt:685,Deployability,install,install,685,"set(LLVM_LINK_COMPONENTS support). add_clang_tool(clang-format; ClangFormat.cpp; ). set(CLANG_FORMAT_LIB_DEPS; clangBasic; clangFormat; clangRewrite; clangToolingCore; ). clang_target_link_libraries(clang-format; PRIVATE; ${CLANG_FORMAT_LIB_DEPS}; ). if( LLVM_LIB_FUZZING_ENGINE OR LLVM_USE_SANITIZE_COVERAGE ); add_subdirectory(fuzzer); endif(). install(FILES clang-format-bbedit.applescript; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(PROGRAMS clang-format-diff.py; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(FILES clang-format-sublime.py; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(FILES clang-format.el; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(FILES clang-format.py; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(PROGRAMS git-clang-format; DESTINATION ""${CMAKE_INSTALL_BINDIR}""; COMPONENT clang-format). if (WIN32 AND NOT CYGWIN); install(PROGRAMS git-clang-format.bat; DESTINATION ""${CMAKE_INSTALL_BINDIR}""; COMPONENT clang-format); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/CMakeLists.txt:787,Deployability,install,install,787,"set(LLVM_LINK_COMPONENTS support). add_clang_tool(clang-format; ClangFormat.cpp; ). set(CLANG_FORMAT_LIB_DEPS; clangBasic; clangFormat; clangRewrite; clangToolingCore; ). clang_target_link_libraries(clang-format; PRIVATE; ${CLANG_FORMAT_LIB_DEPS}; ). if( LLVM_LIB_FUZZING_ENGINE OR LLVM_USE_SANITIZE_COVERAGE ); add_subdirectory(fuzzer); endif(). install(FILES clang-format-bbedit.applescript; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(PROGRAMS clang-format-diff.py; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(FILES clang-format-sublime.py; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(FILES clang-format.el; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(FILES clang-format.py; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(PROGRAMS git-clang-format; DESTINATION ""${CMAKE_INSTALL_BINDIR}""; COMPONENT clang-format). if (WIN32 AND NOT CYGWIN); install(PROGRAMS git-clang-format.bat; DESTINATION ""${CMAKE_INSTALL_BINDIR}""; COMPONENT clang-format); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/CMakeLists.txt:889,Deployability,install,install,889,"set(LLVM_LINK_COMPONENTS support). add_clang_tool(clang-format; ClangFormat.cpp; ). set(CLANG_FORMAT_LIB_DEPS; clangBasic; clangFormat; clangRewrite; clangToolingCore; ). clang_target_link_libraries(clang-format; PRIVATE; ${CLANG_FORMAT_LIB_DEPS}; ). if( LLVM_LIB_FUZZING_ENGINE OR LLVM_USE_SANITIZE_COVERAGE ); add_subdirectory(fuzzer); endif(). install(FILES clang-format-bbedit.applescript; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(PROGRAMS clang-format-diff.py; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(FILES clang-format-sublime.py; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(FILES clang-format.el; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(FILES clang-format.py; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(PROGRAMS git-clang-format; DESTINATION ""${CMAKE_INSTALL_BINDIR}""; COMPONENT clang-format). if (WIN32 AND NOT CYGWIN); install(PROGRAMS git-clang-format.bat; DESTINATION ""${CMAKE_INSTALL_BINDIR}""; COMPONENT clang-format); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/CMakeLists.txt:1015,Deployability,install,install,1015,"set(LLVM_LINK_COMPONENTS support). add_clang_tool(clang-format; ClangFormat.cpp; ). set(CLANG_FORMAT_LIB_DEPS; clangBasic; clangFormat; clangRewrite; clangToolingCore; ). clang_target_link_libraries(clang-format; PRIVATE; ${CLANG_FORMAT_LIB_DEPS}; ). if( LLVM_LIB_FUZZING_ENGINE OR LLVM_USE_SANITIZE_COVERAGE ); add_subdirectory(fuzzer); endif(). install(FILES clang-format-bbedit.applescript; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(PROGRAMS clang-format-diff.py; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(FILES clang-format-sublime.py; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(FILES clang-format.el; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(FILES clang-format.py; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-format); install(PROGRAMS git-clang-format; DESTINATION ""${CMAKE_INSTALL_BINDIR}""; COMPONENT clang-format). if (WIN32 AND NOT CYGWIN); install(PROGRAMS git-clang-format.bat; DESTINATION ""${CMAKE_INSTALL_BINDIR}""; COMPONENT clang-format); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/CMakeLists.txt:389,Deployability,upgrade,upgraded,389,"option(BUILD_CLANG_FORMAT_VS_PLUGIN ""Build clang-format VS plugin"" OFF); if (BUILD_CLANG_FORMAT_VS_PLUGIN); add_custom_target(clang_format_exe_for_vsix; ${CMAKE_COMMAND} -E copy_if_different; ""${LLVM_TOOLS_BINARY_DIR}/clang-format.exe""; ""${CMAKE_CURRENT_SOURCE_DIR}/ClangFormat/clang-format.exe""; DEPENDS clang-format). # Build number added to Clang version to ensure that new VSIX can be upgraded; string(TIMESTAMP CLANG_FORMAT_VSIX_BUILD %y%m%d%H%M UTC). if (NOT CLANG_FORMAT_VS_VERSION); set(CLANG_FORMAT_VS_VERSION ""${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}.${CLANG_FORMAT_VSIX_BUILD}""); endif(). configure_file(""source.extension.vsixmanifest.in""; ""${CMAKE_CURRENT_SOURCE_DIR}/ClangFormat/source.extension.vsixmanifest""). find_program(NUGET_EXE nuget PATHS ${NUGET_EXE_DIR}); if (NOT NUGET_EXE); message(FATAL_ERROR ""Could not find nuget.exe. Download from https://www.nuget.org/nuget.exe""; "" and add parent directory to PATH or pass it via NUGET_EXE_DIR var.""); endif(). add_custom_target(clang_format_vsix ALL; COMMAND ${NUGET_EXE} restore ""${CMAKE_CURRENT_SOURCE_DIR}/ClangFormat.sln""; COMMAND devenv ""${CMAKE_CURRENT_SOURCE_DIR}/ClangFormat.sln"" /Build Release; DEPENDS clang_format_exe_for_vsix ""${CMAKE_CURRENT_SOURCE_DIR}/ClangFormat/source.extension.vsixmanifest""; COMMAND ${CMAKE_COMMAND} -E copy_if_different; ""${CMAKE_CURRENT_SOURCE_DIR}/ClangFormat/bin/Release/ClangFormat.vsix""; ""${LLVM_TOOLS_BINARY_DIR}/ClangFormat.vsix""; DEPENDS clang_format_exe_for_vsix); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format-vs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/CMakeLists.txt:824,Integrability,message,message,824,"option(BUILD_CLANG_FORMAT_VS_PLUGIN ""Build clang-format VS plugin"" OFF); if (BUILD_CLANG_FORMAT_VS_PLUGIN); add_custom_target(clang_format_exe_for_vsix; ${CMAKE_COMMAND} -E copy_if_different; ""${LLVM_TOOLS_BINARY_DIR}/clang-format.exe""; ""${CMAKE_CURRENT_SOURCE_DIR}/ClangFormat/clang-format.exe""; DEPENDS clang-format). # Build number added to Clang version to ensure that new VSIX can be upgraded; string(TIMESTAMP CLANG_FORMAT_VSIX_BUILD %y%m%d%H%M UTC). if (NOT CLANG_FORMAT_VS_VERSION); set(CLANG_FORMAT_VS_VERSION ""${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}.${CLANG_FORMAT_VSIX_BUILD}""); endif(). configure_file(""source.extension.vsixmanifest.in""; ""${CMAKE_CURRENT_SOURCE_DIR}/ClangFormat/source.extension.vsixmanifest""). find_program(NUGET_EXE nuget PATHS ${NUGET_EXE_DIR}); if (NOT NUGET_EXE); message(FATAL_ERROR ""Could not find nuget.exe. Download from https://www.nuget.org/nuget.exe""; "" and add parent directory to PATH or pass it via NUGET_EXE_DIR var.""); endif(). add_custom_target(clang_format_vsix ALL; COMMAND ${NUGET_EXE} restore ""${CMAKE_CURRENT_SOURCE_DIR}/ClangFormat.sln""; COMMAND devenv ""${CMAKE_CURRENT_SOURCE_DIR}/ClangFormat.sln"" /Build Release; DEPENDS clang_format_exe_for_vsix ""${CMAKE_CURRENT_SOURCE_DIR}/ClangFormat/source.extension.vsixmanifest""; COMMAND ${CMAKE_COMMAND} -E copy_if_different; ""${CMAKE_CURRENT_SOURCE_DIR}/ClangFormat/bin/Release/ClangFormat.vsix""; ""${LLVM_TOOLS_BINARY_DIR}/ClangFormat.vsix""; DEPENDS clang_format_exe_for_vsix); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format-vs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/CMakeLists.txt:59,Modifiability,plugin,plugin,59,"option(BUILD_CLANG_FORMAT_VS_PLUGIN ""Build clang-format VS plugin"" OFF); if (BUILD_CLANG_FORMAT_VS_PLUGIN); add_custom_target(clang_format_exe_for_vsix; ${CMAKE_COMMAND} -E copy_if_different; ""${LLVM_TOOLS_BINARY_DIR}/clang-format.exe""; ""${CMAKE_CURRENT_SOURCE_DIR}/ClangFormat/clang-format.exe""; DEPENDS clang-format). # Build number added to Clang version to ensure that new VSIX can be upgraded; string(TIMESTAMP CLANG_FORMAT_VSIX_BUILD %y%m%d%H%M UTC). if (NOT CLANG_FORMAT_VS_VERSION); set(CLANG_FORMAT_VS_VERSION ""${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}.${CLANG_FORMAT_VSIX_BUILD}""); endif(). configure_file(""source.extension.vsixmanifest.in""; ""${CMAKE_CURRENT_SOURCE_DIR}/ClangFormat/source.extension.vsixmanifest""). find_program(NUGET_EXE nuget PATHS ${NUGET_EXE_DIR}); if (NOT NUGET_EXE); message(FATAL_ERROR ""Could not find nuget.exe. Download from https://www.nuget.org/nuget.exe""; "" and add parent directory to PATH or pass it via NUGET_EXE_DIR var.""); endif(). add_custom_target(clang_format_vsix ALL; COMMAND ${NUGET_EXE} restore ""${CMAKE_CURRENT_SOURCE_DIR}/ClangFormat.sln""; COMMAND devenv ""${CMAKE_CURRENT_SOURCE_DIR}/ClangFormat.sln"" /Build Release; DEPENDS clang_format_exe_for_vsix ""${CMAKE_CURRENT_SOURCE_DIR}/ClangFormat/source.extension.vsixmanifest""; COMMAND ${CMAKE_COMMAND} -E copy_if_different; ""${CMAKE_CURRENT_SOURCE_DIR}/ClangFormat/bin/Release/ClangFormat.vsix""; ""${LLVM_TOOLS_BINARY_DIR}/ClangFormat.vsix""; DEPENDS clang_format_exe_for_vsix); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format-vs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/README.txt:433,Availability,avail,available,433,"This directory contains a VSPackage project to generate a Visual Studio extension; for clang-format. Build prerequisites are:; - Visual Studio 2015; - Extensions SDK (you'll be prompted to install it if you open ClangFormat.sln). The extension is built using CMake to generate the usual LLVM.sln by setting; the following CMake vars:. - BUILD_CLANG_FORMAT_VS_PLUGIN=ON. - NUGET_EXE_DIR=path/to/nuget_dir (unless nuget.exe is already available in PATH). example:; cd /d C:\code\llvm; mkdir build & cd build; cmake -DBUILD_CLANG_FORMAT_VS_PLUGIN=ON -DNUGET_EXE_DIR=C:\nuget .. Once LLVM.sln is generated, build the clang_format_vsix target, which will build; ClangFormat.sln, the C# extension application. The CMake build will copy clang-format.exe and LICENSE.TXT into the ClangFormat/; directory so they can be bundled with the plug-in, as well as creating; ClangFormat/source.extension.vsixmanifest. Once the plug-in has been built with; CMake once, it can be built manually from the ClangFormat.sln solution in Visual; Studio. ===========; Debugging; ===========. Once you've built the clang_format_vsix project from LLVM.sln at least once,; open ClangFormat.sln in Visual Studio, then:. - Make sure the ""Debug"" target is selected; - Open the ClangFormat project properties; - Select the Debug tab; - Set ""Start external program:"" to where your devenv.exe is installed. Typically; it's ""C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\devenv.exe""; - Set ""Command line arguments"" to: /rootsuffix Exp; - You can now set breakpoints if you like; - Press F5 to build and run with debugger. If all goes well, a new instance of Visual Studio will be launched in a special; mode where it uses the experimental hive instead of the normal configuration hive.; By default, when you build a VSIX project in Visual Studio, it auto-registers the; extension in the experimental hive, allowing you to test it. In the new Visual Studio; instance, open or create a C++ solution, and you should now se",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format-vs/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/README.txt:189,Deployability,install,install,189,"This directory contains a VSPackage project to generate a Visual Studio extension; for clang-format. Build prerequisites are:; - Visual Studio 2015; - Extensions SDK (you'll be prompted to install it if you open ClangFormat.sln). The extension is built using CMake to generate the usual LLVM.sln by setting; the following CMake vars:. - BUILD_CLANG_FORMAT_VS_PLUGIN=ON. - NUGET_EXE_DIR=path/to/nuget_dir (unless nuget.exe is already available in PATH). example:; cd /d C:\code\llvm; mkdir build & cd build; cmake -DBUILD_CLANG_FORMAT_VS_PLUGIN=ON -DNUGET_EXE_DIR=C:\nuget .. Once LLVM.sln is generated, build the clang_format_vsix target, which will build; ClangFormat.sln, the C# extension application. The CMake build will copy clang-format.exe and LICENSE.TXT into the ClangFormat/; directory so they can be bundled with the plug-in, as well as creating; ClangFormat/source.extension.vsixmanifest. Once the plug-in has been built with; CMake once, it can be built manually from the ClangFormat.sln solution in Visual; Studio. ===========; Debugging; ===========. Once you've built the clang_format_vsix project from LLVM.sln at least once,; open ClangFormat.sln in Visual Studio, then:. - Make sure the ""Debug"" target is selected; - Open the ClangFormat project properties; - Select the Debug tab; - Set ""Start external program:"" to where your devenv.exe is installed. Typically; it's ""C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\devenv.exe""; - Set ""Command line arguments"" to: /rootsuffix Exp; - You can now set breakpoints if you like; - Press F5 to build and run with debugger. If all goes well, a new instance of Visual Studio will be launched in a special; mode where it uses the experimental hive instead of the normal configuration hive.; By default, when you build a VSIX project in Visual Studio, it auto-registers the; extension in the experimental hive, allowing you to test it. In the new Visual Studio; instance, open or create a C++ solution, and you should now se",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format-vs/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/README.txt:1361,Deployability,install,installed,1361,"io 2015; - Extensions SDK (you'll be prompted to install it if you open ClangFormat.sln). The extension is built using CMake to generate the usual LLVM.sln by setting; the following CMake vars:. - BUILD_CLANG_FORMAT_VS_PLUGIN=ON. - NUGET_EXE_DIR=path/to/nuget_dir (unless nuget.exe is already available in PATH). example:; cd /d C:\code\llvm; mkdir build & cd build; cmake -DBUILD_CLANG_FORMAT_VS_PLUGIN=ON -DNUGET_EXE_DIR=C:\nuget .. Once LLVM.sln is generated, build the clang_format_vsix target, which will build; ClangFormat.sln, the C# extension application. The CMake build will copy clang-format.exe and LICENSE.TXT into the ClangFormat/; directory so they can be bundled with the plug-in, as well as creating; ClangFormat/source.extension.vsixmanifest. Once the plug-in has been built with; CMake once, it can be built manually from the ClangFormat.sln solution in Visual; Studio. ===========; Debugging; ===========. Once you've built the clang_format_vsix project from LLVM.sln at least once,; open ClangFormat.sln in Visual Studio, then:. - Make sure the ""Debug"" target is selected; - Open the ClangFormat project properties; - Select the Debug tab; - Set ""Start external program:"" to where your devenv.exe is installed. Typically; it's ""C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\devenv.exe""; - Set ""Command line arguments"" to: /rootsuffix Exp; - You can now set breakpoints if you like; - Press F5 to build and run with debugger. If all goes well, a new instance of Visual Studio will be launched in a special; mode where it uses the experimental hive instead of the normal configuration hive.; By default, when you build a VSIX project in Visual Studio, it auto-registers the; extension in the experimental hive, allowing you to test it. In the new Visual Studio; instance, open or create a C++ solution, and you should now see the Clang Format; entries in the Tool menu. You can test it out, and any breakpoints you set will be; hit where you can debug as usual.; ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format-vs/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/README.txt:1748,Deployability,configurat,configuration,1748,"io 2015; - Extensions SDK (you'll be prompted to install it if you open ClangFormat.sln). The extension is built using CMake to generate the usual LLVM.sln by setting; the following CMake vars:. - BUILD_CLANG_FORMAT_VS_PLUGIN=ON. - NUGET_EXE_DIR=path/to/nuget_dir (unless nuget.exe is already available in PATH). example:; cd /d C:\code\llvm; mkdir build & cd build; cmake -DBUILD_CLANG_FORMAT_VS_PLUGIN=ON -DNUGET_EXE_DIR=C:\nuget .. Once LLVM.sln is generated, build the clang_format_vsix target, which will build; ClangFormat.sln, the C# extension application. The CMake build will copy clang-format.exe and LICENSE.TXT into the ClangFormat/; directory so they can be bundled with the plug-in, as well as creating; ClangFormat/source.extension.vsixmanifest. Once the plug-in has been built with; CMake once, it can be built manually from the ClangFormat.sln solution in Visual; Studio. ===========; Debugging; ===========. Once you've built the clang_format_vsix project from LLVM.sln at least once,; open ClangFormat.sln in Visual Studio, then:. - Make sure the ""Debug"" target is selected; - Open the ClangFormat project properties; - Select the Debug tab; - Set ""Start external program:"" to where your devenv.exe is installed. Typically; it's ""C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\devenv.exe""; - Set ""Command line arguments"" to: /rootsuffix Exp; - You can now set breakpoints if you like; - Press F5 to build and run with debugger. If all goes well, a new instance of Visual Studio will be launched in a special; mode where it uses the experimental hive instead of the normal configuration hive.; By default, when you build a VSIX project in Visual Studio, it auto-registers the; extension in the experimental hive, allowing you to test it. In the new Visual Studio; instance, open or create a C++ solution, and you should now see the Clang Format; entries in the Tool menu. You can test it out, and any breakpoints you set will be; hit where you can debug as usual.; ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format-vs/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/README.txt:828,Modifiability,plug-in,plug-in,828,"This directory contains a VSPackage project to generate a Visual Studio extension; for clang-format. Build prerequisites are:; - Visual Studio 2015; - Extensions SDK (you'll be prompted to install it if you open ClangFormat.sln). The extension is built using CMake to generate the usual LLVM.sln by setting; the following CMake vars:. - BUILD_CLANG_FORMAT_VS_PLUGIN=ON. - NUGET_EXE_DIR=path/to/nuget_dir (unless nuget.exe is already available in PATH). example:; cd /d C:\code\llvm; mkdir build & cd build; cmake -DBUILD_CLANG_FORMAT_VS_PLUGIN=ON -DNUGET_EXE_DIR=C:\nuget .. Once LLVM.sln is generated, build the clang_format_vsix target, which will build; ClangFormat.sln, the C# extension application. The CMake build will copy clang-format.exe and LICENSE.TXT into the ClangFormat/; directory so they can be bundled with the plug-in, as well as creating; ClangFormat/source.extension.vsixmanifest. Once the plug-in has been built with; CMake once, it can be built manually from the ClangFormat.sln solution in Visual; Studio. ===========; Debugging; ===========. Once you've built the clang_format_vsix project from LLVM.sln at least once,; open ClangFormat.sln in Visual Studio, then:. - Make sure the ""Debug"" target is selected; - Open the ClangFormat project properties; - Select the Debug tab; - Set ""Start external program:"" to where your devenv.exe is installed. Typically; it's ""C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\devenv.exe""; - Set ""Command line arguments"" to: /rootsuffix Exp; - You can now set breakpoints if you like; - Press F5 to build and run with debugger. If all goes well, a new instance of Visual Studio will be launched in a special; mode where it uses the experimental hive instead of the normal configuration hive.; By default, when you build a VSIX project in Visual Studio, it auto-registers the; extension in the experimental hive, allowing you to test it. In the new Visual Studio; instance, open or create a C++ solution, and you should now se",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format-vs/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/README.txt:910,Modifiability,plug-in,plug-in,910,"This directory contains a VSPackage project to generate a Visual Studio extension; for clang-format. Build prerequisites are:; - Visual Studio 2015; - Extensions SDK (you'll be prompted to install it if you open ClangFormat.sln). The extension is built using CMake to generate the usual LLVM.sln by setting; the following CMake vars:. - BUILD_CLANG_FORMAT_VS_PLUGIN=ON. - NUGET_EXE_DIR=path/to/nuget_dir (unless nuget.exe is already available in PATH). example:; cd /d C:\code\llvm; mkdir build & cd build; cmake -DBUILD_CLANG_FORMAT_VS_PLUGIN=ON -DNUGET_EXE_DIR=C:\nuget .. Once LLVM.sln is generated, build the clang_format_vsix target, which will build; ClangFormat.sln, the C# extension application. The CMake build will copy clang-format.exe and LICENSE.TXT into the ClangFormat/; directory so they can be bundled with the plug-in, as well as creating; ClangFormat/source.extension.vsixmanifest. Once the plug-in has been built with; CMake once, it can be built manually from the ClangFormat.sln solution in Visual; Studio. ===========; Debugging; ===========. Once you've built the clang_format_vsix project from LLVM.sln at least once,; open ClangFormat.sln in Visual Studio, then:. - Make sure the ""Debug"" target is selected; - Open the ClangFormat project properties; - Select the Debug tab; - Set ""Start external program:"" to where your devenv.exe is installed. Typically; it's ""C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\devenv.exe""; - Set ""Command line arguments"" to: /rootsuffix Exp; - You can now set breakpoints if you like; - Press F5 to build and run with debugger. If all goes well, a new instance of Visual Studio will be launched in a special; mode where it uses the experimental hive instead of the normal configuration hive.; By default, when you build a VSIX project in Visual Studio, it auto-registers the; extension in the experimental hive, allowing you to test it. In the new Visual Studio; instance, open or create a C++ solution, and you should now se",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format-vs/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/README.txt:1748,Modifiability,config,configuration,1748,"io 2015; - Extensions SDK (you'll be prompted to install it if you open ClangFormat.sln). The extension is built using CMake to generate the usual LLVM.sln by setting; the following CMake vars:. - BUILD_CLANG_FORMAT_VS_PLUGIN=ON. - NUGET_EXE_DIR=path/to/nuget_dir (unless nuget.exe is already available in PATH). example:; cd /d C:\code\llvm; mkdir build & cd build; cmake -DBUILD_CLANG_FORMAT_VS_PLUGIN=ON -DNUGET_EXE_DIR=C:\nuget .. Once LLVM.sln is generated, build the clang_format_vsix target, which will build; ClangFormat.sln, the C# extension application. The CMake build will copy clang-format.exe and LICENSE.TXT into the ClangFormat/; directory so they can be bundled with the plug-in, as well as creating; ClangFormat/source.extension.vsixmanifest. Once the plug-in has been built with; CMake once, it can be built manually from the ClangFormat.sln solution in Visual; Studio. ===========; Debugging; ===========. Once you've built the clang_format_vsix project from LLVM.sln at least once,; open ClangFormat.sln in Visual Studio, then:. - Make sure the ""Debug"" target is selected; - Open the ClangFormat project properties; - Select the Debug tab; - Set ""Start external program:"" to where your devenv.exe is installed. Typically; it's ""C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\devenv.exe""; - Set ""Command line arguments"" to: /rootsuffix Exp; - You can now set breakpoints if you like; - Press F5 to build and run with debugger. If all goes well, a new instance of Visual Studio will be launched in a special; mode where it uses the experimental hive instead of the normal configuration hive.; By default, when you build a VSIX project in Visual Studio, it auto-registers the; extension in the experimental hive, allowing you to test it. In the new Visual Studio; instance, open or create a C++ solution, and you should now see the Clang Format; entries in the Tool menu. You can test it out, and any breakpoints you set will be; hit where you can debug as usual.; ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format-vs/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/README.txt:1904,Testability,test,test,1904,"io 2015; - Extensions SDK (you'll be prompted to install it if you open ClangFormat.sln). The extension is built using CMake to generate the usual LLVM.sln by setting; the following CMake vars:. - BUILD_CLANG_FORMAT_VS_PLUGIN=ON. - NUGET_EXE_DIR=path/to/nuget_dir (unless nuget.exe is already available in PATH). example:; cd /d C:\code\llvm; mkdir build & cd build; cmake -DBUILD_CLANG_FORMAT_VS_PLUGIN=ON -DNUGET_EXE_DIR=C:\nuget .. Once LLVM.sln is generated, build the clang_format_vsix target, which will build; ClangFormat.sln, the C# extension application. The CMake build will copy clang-format.exe and LICENSE.TXT into the ClangFormat/; directory so they can be bundled with the plug-in, as well as creating; ClangFormat/source.extension.vsixmanifest. Once the plug-in has been built with; CMake once, it can be built manually from the ClangFormat.sln solution in Visual; Studio. ===========; Debugging; ===========. Once you've built the clang_format_vsix project from LLVM.sln at least once,; open ClangFormat.sln in Visual Studio, then:. - Make sure the ""Debug"" target is selected; - Open the ClangFormat project properties; - Select the Debug tab; - Set ""Start external program:"" to where your devenv.exe is installed. Typically; it's ""C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\devenv.exe""; - Set ""Command line arguments"" to: /rootsuffix Exp; - You can now set breakpoints if you like; - Press F5 to build and run with debugger. If all goes well, a new instance of Visual Studio will be launched in a special; mode where it uses the experimental hive instead of the normal configuration hive.; By default, when you build a VSIX project in Visual Studio, it auto-registers the; extension in the experimental hive, allowing you to test it. In the new Visual Studio; instance, open or create a C++ solution, and you should now see the Clang Format; entries in the Tool menu. You can test it out, and any breakpoints you set will be; hit where you can debug as usual.; ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format-vs/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/README.txt:2055,Testability,test,test,2055,"io 2015; - Extensions SDK (you'll be prompted to install it if you open ClangFormat.sln). The extension is built using CMake to generate the usual LLVM.sln by setting; the following CMake vars:. - BUILD_CLANG_FORMAT_VS_PLUGIN=ON. - NUGET_EXE_DIR=path/to/nuget_dir (unless nuget.exe is already available in PATH). example:; cd /d C:\code\llvm; mkdir build & cd build; cmake -DBUILD_CLANG_FORMAT_VS_PLUGIN=ON -DNUGET_EXE_DIR=C:\nuget .. Once LLVM.sln is generated, build the clang_format_vsix target, which will build; ClangFormat.sln, the C# extension application. The CMake build will copy clang-format.exe and LICENSE.TXT into the ClangFormat/; directory so they can be bundled with the plug-in, as well as creating; ClangFormat/source.extension.vsixmanifest. Once the plug-in has been built with; CMake once, it can be built manually from the ClangFormat.sln solution in Visual; Studio. ===========; Debugging; ===========. Once you've built the clang_format_vsix project from LLVM.sln at least once,; open ClangFormat.sln in Visual Studio, then:. - Make sure the ""Debug"" target is selected; - Open the ClangFormat project properties; - Select the Debug tab; - Set ""Start external program:"" to where your devenv.exe is installed. Typically; it's ""C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\devenv.exe""; - Set ""Command line arguments"" to: /rootsuffix Exp; - You can now set breakpoints if you like; - Press F5 to build and run with debugger. If all goes well, a new instance of Visual Studio will be launched in a special; mode where it uses the experimental hive instead of the normal configuration hive.; By default, when you build a VSIX project in Visual Studio, it auto-registers the; extension in the experimental hive, allowing you to test it. In the new Visual Studio; instance, open or create a C++ solution, and you should now see the Clang Format; entries in the Tool menu. You can test it out, and any breakpoints you set will be; hit where you can debug as usual.; ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format-vs/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt:2575,Integrability,depend,dependencies,2575,"======; Building clang-objc-fuzzer; ===================================; Within your LLVM build directory, run CMake with the following variable; definitions:; - CMAKE_C_COMPILER=clang; - CMAKE_CXX_COMPILER=clang++; - LLVM_USE_SANITIZE_COVERAGE=YES; - LLVM_USE_SANITIZER=Address. Then build the clang-objc-fuzzer target. Example:; cd $LLVM_SOURCE_DIR; mkdir build && cd build; cmake .. -GNinja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ \; -DLLVM_USE_SANITIZE_COVERAGE=YES -DLLVM_USE_SANITIZER=Address; ninja clang-objc-fuzzer. ======================; Running clang-objc-fuzzer; ======================; bin/clang-objc-fuzzer CORPUS_DIR. e.g. using the example objc corpus,. bin/clang-objc-fuzzer <path to corpus_examples/objc> <path to new directory to store corpus findings>. =======================================================; Building clang-proto-fuzzer (Linux-only instructions); =======================================================; Install the necessary dependencies:; - binutils // needed for libprotobuf-mutator; - liblzma-dev // needed for libprotobuf-mutator; - libz-dev // needed for libprotobuf-mutator; - docbook2x // needed for libprotobuf-mutator; - Recent version of protobuf [3.3.0 is known to work]. Within your LLVM build directory, run CMake with the following variable; definitions:; - CMAKE_C_COMPILER=clang; - CMAKE_CXX_COMPILER=clang++; - LLVM_USE_SANITIZE_COVERAGE=YES; - LLVM_USE_SANITIZER=Address; - CLANG_ENABLE_PROTO_FUZZER=ON. Then build the clang-proto-fuzzer and clang-proto-to-cxx targets. Optionally,; you may also build clang-fuzzer with this setup. Example:; cd $LLVM_SOURCE_DIR; mkdir build && cd build; cmake .. -GNinja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ \; -DLLVM_USE_SANITIZE_COVERAGE=YES -DLLVM_USE_SANITIZER=Address \; -DCLANG_ENABLE_PROTO_FUZZER=ON; ninja clang-proto-fuzzer clang-proto-to-cxx. This directory also contains a Dockerfile which sets up all required; dependencies and builds the fuzzers. ==================",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt:3542,Integrability,depend,dependencies,3542,"===========================; Install the necessary dependencies:; - binutils // needed for libprotobuf-mutator; - liblzma-dev // needed for libprotobuf-mutator; - libz-dev // needed for libprotobuf-mutator; - docbook2x // needed for libprotobuf-mutator; - Recent version of protobuf [3.3.0 is known to work]. Within your LLVM build directory, run CMake with the following variable; definitions:; - CMAKE_C_COMPILER=clang; - CMAKE_CXX_COMPILER=clang++; - LLVM_USE_SANITIZE_COVERAGE=YES; - LLVM_USE_SANITIZER=Address; - CLANG_ENABLE_PROTO_FUZZER=ON. Then build the clang-proto-fuzzer and clang-proto-to-cxx targets. Optionally,; you may also build clang-fuzzer with this setup. Example:; cd $LLVM_SOURCE_DIR; mkdir build && cd build; cmake .. -GNinja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ \; -DLLVM_USE_SANITIZE_COVERAGE=YES -DLLVM_USE_SANITIZER=Address \; -DCLANG_ENABLE_PROTO_FUZZER=ON; ninja clang-proto-fuzzer clang-proto-to-cxx. This directory also contains a Dockerfile which sets up all required; dependencies and builds the fuzzers. ============================; Running clang-proto-fuzzer; ============================; bin/clang-proto-fuzzer CORPUS_DIR. Arguments can be specified after -ignore_remaining_args=1 to modify the compiler; invocation. For example, the following command line will fuzz LLVM with a; custom optimization level and target triple:; bin/clang-proto-fuzzer CORPUS_DIR -ignore_remaining_args=1 -O3 -triple \; arm64apple-ios9. To translate a clang-proto-fuzzer corpus output to C++:; bin/clang-proto-to-cxx CORPUS_OUTPUT_FILE. ===================; llvm-proto-fuzzer; ===================; Like, clang-proto-fuzzer, llvm-proto-fuzzer is also a protobuf-mutator based; fuzzer. It receives as input a cxx_loop_proto which it then converts into a; string of valid LLVM IR: a function with either a single loop or two nested; loops. It then creates a new string of IR by running optimization passes over; the original IR. Currently, it only runs a loop-vectorize",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt:393,Modifiability,layers,layers,393,"This directory contains three utilities for fuzzing Clang: clang-fuzzer,; clang-objc-fuzzer, and clang-proto-fuzzer. All use libFuzzer to generate inputs; to clang via coverage-guided mutation. The three utilities differ, however, in how they structure inputs to Clang.; clang-fuzzer makes no attempt to generate valid C++ programs and is therefore; primarily useful for stressing the surface layers of Clang (i.e. lexer, parser). clang-objc-fuzzer is similar but for Objective-C: it makes no attempt to; generate a valid Objective-C program. clang-proto-fuzzer uses a protobuf class to describe a subset of the C++; language and then uses libprotobuf-mutator to mutate instantiations of that; class, producing valid C++ programs in the process. As a result,; clang-proto-fuzzer is better at stressing deeper layers of Clang and LLVM. Some of the fuzzers have example corpuses inside the corpus_examples directory. ===================================; Building clang-fuzzer; ===================================; Within your LLVM build directory, run CMake with the following variable; definitions:; - CMAKE_C_COMPILER=clang; - CMAKE_CXX_COMPILER=clang++; - LLVM_USE_SANITIZE_COVERAGE=YES; - LLVM_USE_SANITIZER=Address. Then build the clang-fuzzer target. Example:; cd $LLVM_SOURCE_DIR; mkdir build && cd build; cmake .. -GNinja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ \; -DLLVM_USE_SANITIZE_COVERAGE=YES -DLLVM_USE_SANITIZER=Address; ninja clang-fuzzer. ======================; Running clang-fuzzer; ======================; bin/clang-fuzzer CORPUS_DIR. ===================================; Building clang-objc-fuzzer; ===================================; Within your LLVM build directory, run CMake with the following variable; definitions:; - CMAKE_C_COMPILER=clang; - CMAKE_CXX_COMPILER=clang++; - LLVM_USE_SANITIZE_COVERAGE=YES; - LLVM_USE_SANITIZER=Address. Then build the clang-objc-fuzzer target. Example:; cd $LLVM_SOURCE_DIR; mkdir build && cd build; cmake .. -GNinja -DCMAKE_C_C",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt:809,Modifiability,layers,layers,809,"This directory contains three utilities for fuzzing Clang: clang-fuzzer,; clang-objc-fuzzer, and clang-proto-fuzzer. All use libFuzzer to generate inputs; to clang via coverage-guided mutation. The three utilities differ, however, in how they structure inputs to Clang.; clang-fuzzer makes no attempt to generate valid C++ programs and is therefore; primarily useful for stressing the surface layers of Clang (i.e. lexer, parser). clang-objc-fuzzer is similar but for Objective-C: it makes no attempt to; generate a valid Objective-C program. clang-proto-fuzzer uses a protobuf class to describe a subset of the C++; language and then uses libprotobuf-mutator to mutate instantiations of that; class, producing valid C++ programs in the process. As a result,; clang-proto-fuzzer is better at stressing deeper layers of Clang and LLVM. Some of the fuzzers have example corpuses inside the corpus_examples directory. ===================================; Building clang-fuzzer; ===================================; Within your LLVM build directory, run CMake with the following variable; definitions:; - CMAKE_C_COMPILER=clang; - CMAKE_CXX_COMPILER=clang++; - LLVM_USE_SANITIZE_COVERAGE=YES; - LLVM_USE_SANITIZER=Address. Then build the clang-fuzzer target. Example:; cd $LLVM_SOURCE_DIR; mkdir build && cd build; cmake .. -GNinja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ \; -DLLVM_USE_SANITIZE_COVERAGE=YES -DLLVM_USE_SANITIZER=Address; ninja clang-fuzzer. ======================; Running clang-fuzzer; ======================; bin/clang-fuzzer CORPUS_DIR. ===================================; Building clang-objc-fuzzer; ===================================; Within your LLVM build directory, run CMake with the following variable; definitions:; - CMAKE_C_COMPILER=clang; - CMAKE_CXX_COMPILER=clang++; - LLVM_USE_SANITIZE_COVERAGE=YES; - LLVM_USE_SANITIZER=Address. Then build the clang-objc-fuzzer target. Example:; cd $LLVM_SOURCE_DIR; mkdir build && cd build; cmake .. -GNinja -DCMAKE_C_C",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt:1075,Modifiability,variab,variable,1075,"uzzer,; clang-objc-fuzzer, and clang-proto-fuzzer. All use libFuzzer to generate inputs; to clang via coverage-guided mutation. The three utilities differ, however, in how they structure inputs to Clang.; clang-fuzzer makes no attempt to generate valid C++ programs and is therefore; primarily useful for stressing the surface layers of Clang (i.e. lexer, parser). clang-objc-fuzzer is similar but for Objective-C: it makes no attempt to; generate a valid Objective-C program. clang-proto-fuzzer uses a protobuf class to describe a subset of the C++; language and then uses libprotobuf-mutator to mutate instantiations of that; class, producing valid C++ programs in the process. As a result,; clang-proto-fuzzer is better at stressing deeper layers of Clang and LLVM. Some of the fuzzers have example corpuses inside the corpus_examples directory. ===================================; Building clang-fuzzer; ===================================; Within your LLVM build directory, run CMake with the following variable; definitions:; - CMAKE_C_COMPILER=clang; - CMAKE_CXX_COMPILER=clang++; - LLVM_USE_SANITIZE_COVERAGE=YES; - LLVM_USE_SANITIZER=Address. Then build the clang-fuzzer target. Example:; cd $LLVM_SOURCE_DIR; mkdir build && cd build; cmake .. -GNinja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ \; -DLLVM_USE_SANITIZE_COVERAGE=YES -DLLVM_USE_SANITIZER=Address; ninja clang-fuzzer. ======================; Running clang-fuzzer; ======================; bin/clang-fuzzer CORPUS_DIR. ===================================; Building clang-objc-fuzzer; ===================================; Within your LLVM build directory, run CMake with the following variable; definitions:; - CMAKE_C_COMPILER=clang; - CMAKE_CXX_COMPILER=clang++; - LLVM_USE_SANITIZE_COVERAGE=YES; - LLVM_USE_SANITIZER=Address. Then build the clang-objc-fuzzer target. Example:; cd $LLVM_SOURCE_DIR; mkdir build && cd build; cmake .. -GNinja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ \; -DLLVM_USE_SANITIZE",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt:1732,Modifiability,variab,variable,1732," programs in the process. As a result,; clang-proto-fuzzer is better at stressing deeper layers of Clang and LLVM. Some of the fuzzers have example corpuses inside the corpus_examples directory. ===================================; Building clang-fuzzer; ===================================; Within your LLVM build directory, run CMake with the following variable; definitions:; - CMAKE_C_COMPILER=clang; - CMAKE_CXX_COMPILER=clang++; - LLVM_USE_SANITIZE_COVERAGE=YES; - LLVM_USE_SANITIZER=Address. Then build the clang-fuzzer target. Example:; cd $LLVM_SOURCE_DIR; mkdir build && cd build; cmake .. -GNinja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ \; -DLLVM_USE_SANITIZE_COVERAGE=YES -DLLVM_USE_SANITIZER=Address; ninja clang-fuzzer. ======================; Running clang-fuzzer; ======================; bin/clang-fuzzer CORPUS_DIR. ===================================; Building clang-objc-fuzzer; ===================================; Within your LLVM build directory, run CMake with the following variable; definitions:; - CMAKE_C_COMPILER=clang; - CMAKE_CXX_COMPILER=clang++; - LLVM_USE_SANITIZE_COVERAGE=YES; - LLVM_USE_SANITIZER=Address. Then build the clang-objc-fuzzer target. Example:; cd $LLVM_SOURCE_DIR; mkdir build && cd build; cmake .. -GNinja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ \; -DLLVM_USE_SANITIZE_COVERAGE=YES -DLLVM_USE_SANITIZER=Address; ninja clang-objc-fuzzer. ======================; Running clang-objc-fuzzer; ======================; bin/clang-objc-fuzzer CORPUS_DIR. e.g. using the example objc corpus,. bin/clang-objc-fuzzer <path to corpus_examples/objc> <path to new directory to store corpus findings>. =======================================================; Building clang-proto-fuzzer (Linux-only instructions); =======================================================; Install the necessary dependencies:; - binutils // needed for libprotobuf-mutator; - liblzma-dev // needed for libprotobuf-mutator; - libz-dev // needed for libprotobuf",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt:2896,Modifiability,variab,variable,2896,"ir build && cd build; cmake .. -GNinja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ \; -DLLVM_USE_SANITIZE_COVERAGE=YES -DLLVM_USE_SANITIZER=Address; ninja clang-objc-fuzzer. ======================; Running clang-objc-fuzzer; ======================; bin/clang-objc-fuzzer CORPUS_DIR. e.g. using the example objc corpus,. bin/clang-objc-fuzzer <path to corpus_examples/objc> <path to new directory to store corpus findings>. =======================================================; Building clang-proto-fuzzer (Linux-only instructions); =======================================================; Install the necessary dependencies:; - binutils // needed for libprotobuf-mutator; - liblzma-dev // needed for libprotobuf-mutator; - libz-dev // needed for libprotobuf-mutator; - docbook2x // needed for libprotobuf-mutator; - Recent version of protobuf [3.3.0 is known to work]. Within your LLVM build directory, run CMake with the following variable; definitions:; - CMAKE_C_COMPILER=clang; - CMAKE_CXX_COMPILER=clang++; - LLVM_USE_SANITIZE_COVERAGE=YES; - LLVM_USE_SANITIZER=Address; - CLANG_ENABLE_PROTO_FUZZER=ON. Then build the clang-proto-fuzzer and clang-proto-to-cxx targets. Optionally,; you may also build clang-fuzzer with this setup. Example:; cd $LLVM_SOURCE_DIR; mkdir build && cd build; cmake .. -GNinja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ \; -DLLVM_USE_SANITIZE_COVERAGE=YES -DLLVM_USE_SANITIZER=Address \; -DCLANG_ENABLE_PROTO_FUZZER=ON; ninja clang-proto-fuzzer clang-proto-to-cxx. This directory also contains a Dockerfile which sets up all required; dependencies and builds the fuzzers. ============================; Running clang-proto-fuzzer; ============================; bin/clang-proto-fuzzer CORPUS_DIR. Arguments can be specified after -ignore_remaining_args=1 to modify the compiler; invocation. For example, the following command line will fuzz LLVM with a; custom optimization level and target triple:; bin/clang-proto-fuzzer CORPUS_DIR -ignore_remai",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt:3866,Performance,optimiz,optimization,3866," variable; definitions:; - CMAKE_C_COMPILER=clang; - CMAKE_CXX_COMPILER=clang++; - LLVM_USE_SANITIZE_COVERAGE=YES; - LLVM_USE_SANITIZER=Address; - CLANG_ENABLE_PROTO_FUZZER=ON. Then build the clang-proto-fuzzer and clang-proto-to-cxx targets. Optionally,; you may also build clang-fuzzer with this setup. Example:; cd $LLVM_SOURCE_DIR; mkdir build && cd build; cmake .. -GNinja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ \; -DLLVM_USE_SANITIZE_COVERAGE=YES -DLLVM_USE_SANITIZER=Address \; -DCLANG_ENABLE_PROTO_FUZZER=ON; ninja clang-proto-fuzzer clang-proto-to-cxx. This directory also contains a Dockerfile which sets up all required; dependencies and builds the fuzzers. ============================; Running clang-proto-fuzzer; ============================; bin/clang-proto-fuzzer CORPUS_DIR. Arguments can be specified after -ignore_remaining_args=1 to modify the compiler; invocation. For example, the following command line will fuzz LLVM with a; custom optimization level and target triple:; bin/clang-proto-fuzzer CORPUS_DIR -ignore_remaining_args=1 -O3 -triple \; arm64apple-ios9. To translate a clang-proto-fuzzer corpus output to C++:; bin/clang-proto-to-cxx CORPUS_OUTPUT_FILE. ===================; llvm-proto-fuzzer; ===================; Like, clang-proto-fuzzer, llvm-proto-fuzzer is also a protobuf-mutator based; fuzzer. It receives as input a cxx_loop_proto which it then converts into a; string of valid LLVM IR: a function with either a single loop or two nested; loops. It then creates a new string of IR by running optimization passes over; the original IR. Currently, it only runs a loop-vectorize pass but more passes; can easily be added to the fuzzer. Once there are two versions of the input; function (optimized and not), llvm-proto-fuzzer uses LLVM's JIT Engine to; compile both functions. Lastly, it runs both functions on a suite of inputs and; checks that both functions behave the same on all inputs. In this way,; llvm-proto-fuzzer can find not only compil",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt:4442,Performance,optimiz,optimization,4442,"proto-fuzzer clang-proto-to-cxx. This directory also contains a Dockerfile which sets up all required; dependencies and builds the fuzzers. ============================; Running clang-proto-fuzzer; ============================; bin/clang-proto-fuzzer CORPUS_DIR. Arguments can be specified after -ignore_remaining_args=1 to modify the compiler; invocation. For example, the following command line will fuzz LLVM with a; custom optimization level and target triple:; bin/clang-proto-fuzzer CORPUS_DIR -ignore_remaining_args=1 -O3 -triple \; arm64apple-ios9. To translate a clang-proto-fuzzer corpus output to C++:; bin/clang-proto-to-cxx CORPUS_OUTPUT_FILE. ===================; llvm-proto-fuzzer; ===================; Like, clang-proto-fuzzer, llvm-proto-fuzzer is also a protobuf-mutator based; fuzzer. It receives as input a cxx_loop_proto which it then converts into a; string of valid LLVM IR: a function with either a single loop or two nested; loops. It then creates a new string of IR by running optimization passes over; the original IR. Currently, it only runs a loop-vectorize pass but more passes; can easily be added to the fuzzer. Once there are two versions of the input; function (optimized and not), llvm-proto-fuzzer uses LLVM's JIT Engine to; compile both functions. Lastly, it runs both functions on a suite of inputs and; checks that both functions behave the same on all inputs. In this way,; llvm-proto-fuzzer can find not only compiler crashes, but also miscompiles; originating from LLVM's optimization passes. llvm-proto-fuzzer is built very similarly to clang-proto-fuzzer. You can run the; fuzzer with the following command:; bin/clang-llvm-proto-fuzzer CORPUS_DIR. To translate a cxx_loop_proto file into LLVM IR do:; bin/clang-loop-proto-to-llvm CORPUS_OUTPUT_FILE; To translate a cxx_loop_proto file into C++ do:; bin/clang-loop-proto-to-cxx CORPUS_OUTPUT_FILE. Note: To get a higher number of executions per second with llvm-proto-fuzzer it; helps to build it without AS",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt:4635,Performance,optimiz,optimized,4635,"=============; bin/clang-proto-fuzzer CORPUS_DIR. Arguments can be specified after -ignore_remaining_args=1 to modify the compiler; invocation. For example, the following command line will fuzz LLVM with a; custom optimization level and target triple:; bin/clang-proto-fuzzer CORPUS_DIR -ignore_remaining_args=1 -O3 -triple \; arm64apple-ios9. To translate a clang-proto-fuzzer corpus output to C++:; bin/clang-proto-to-cxx CORPUS_OUTPUT_FILE. ===================; llvm-proto-fuzzer; ===================; Like, clang-proto-fuzzer, llvm-proto-fuzzer is also a protobuf-mutator based; fuzzer. It receives as input a cxx_loop_proto which it then converts into a; string of valid LLVM IR: a function with either a single loop or two nested; loops. It then creates a new string of IR by running optimization passes over; the original IR. Currently, it only runs a loop-vectorize pass but more passes; can easily be added to the fuzzer. Once there are two versions of the input; function (optimized and not), llvm-proto-fuzzer uses LLVM's JIT Engine to; compile both functions. Lastly, it runs both functions on a suite of inputs and; checks that both functions behave the same on all inputs. In this way,; llvm-proto-fuzzer can find not only compiler crashes, but also miscompiles; originating from LLVM's optimization passes. llvm-proto-fuzzer is built very similarly to clang-proto-fuzzer. You can run the; fuzzer with the following command:; bin/clang-llvm-proto-fuzzer CORPUS_DIR. To translate a cxx_loop_proto file into LLVM IR do:; bin/clang-loop-proto-to-llvm CORPUS_OUTPUT_FILE; To translate a cxx_loop_proto file into C++ do:; bin/clang-loop-proto-to-cxx CORPUS_OUTPUT_FILE. Note: To get a higher number of executions per second with llvm-proto-fuzzer it; helps to build it without ASan instrumentation and with the -O2 flag. Because; the fuzzer is not only compiling code, but also running it, as the inputs get; large, the time necessary to fuzz one input can get very high.; Example:; cmake .. ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt:4953,Performance,optimiz,optimization,4953,"optimization level and target triple:; bin/clang-proto-fuzzer CORPUS_DIR -ignore_remaining_args=1 -O3 -triple \; arm64apple-ios9. To translate a clang-proto-fuzzer corpus output to C++:; bin/clang-proto-to-cxx CORPUS_OUTPUT_FILE. ===================; llvm-proto-fuzzer; ===================; Like, clang-proto-fuzzer, llvm-proto-fuzzer is also a protobuf-mutator based; fuzzer. It receives as input a cxx_loop_proto which it then converts into a; string of valid LLVM IR: a function with either a single loop or two nested; loops. It then creates a new string of IR by running optimization passes over; the original IR. Currently, it only runs a loop-vectorize pass but more passes; can easily be added to the fuzzer. Once there are two versions of the input; function (optimized and not), llvm-proto-fuzzer uses LLVM's JIT Engine to; compile both functions. Lastly, it runs both functions on a suite of inputs and; checks that both functions behave the same on all inputs. In this way,; llvm-proto-fuzzer can find not only compiler crashes, but also miscompiles; originating from LLVM's optimization passes. llvm-proto-fuzzer is built very similarly to clang-proto-fuzzer. You can run the; fuzzer with the following command:; bin/clang-llvm-proto-fuzzer CORPUS_DIR. To translate a cxx_loop_proto file into LLVM IR do:; bin/clang-loop-proto-to-llvm CORPUS_OUTPUT_FILE; To translate a cxx_loop_proto file into C++ do:; bin/clang-loop-proto-to-cxx CORPUS_OUTPUT_FILE. Note: To get a higher number of executions per second with llvm-proto-fuzzer it; helps to build it without ASan instrumentation and with the -O2 flag. Because; the fuzzer is not only compiling code, but also running it, as the inputs get; large, the time necessary to fuzz one input can get very high.; Example:; cmake .. -GNinja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ \; -DCLANG_ENABLE_PROTO_FUZZER=ON -DLLVM_USE_SANITIZE_COVERAGE=YES \; -DCMAKE_CXX_FLAGS=""-O2""; ninja clang-llvm-proto-fuzzer clang-loop-proto-to-llvm; ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt:177,Usability,guid,guided,177,"This directory contains three utilities for fuzzing Clang: clang-fuzzer,; clang-objc-fuzzer, and clang-proto-fuzzer. All use libFuzzer to generate inputs; to clang via coverage-guided mutation. The three utilities differ, however, in how they structure inputs to Clang.; clang-fuzzer makes no attempt to generate valid C++ programs and is therefore; primarily useful for stressing the surface layers of Clang (i.e. lexer, parser). clang-objc-fuzzer is similar but for Objective-C: it makes no attempt to; generate a valid Objective-C program. clang-proto-fuzzer uses a protobuf class to describe a subset of the C++; language and then uses libprotobuf-mutator to mutate instantiations of that; class, producing valid C++ programs in the process. As a result,; clang-proto-fuzzer is better at stressing deeper layers of Clang and LLVM. Some of the fuzzers have example corpuses inside the corpus_examples directory. ===================================; Building clang-fuzzer; ===================================; Within your LLVM build directory, run CMake with the following variable; definitions:; - CMAKE_C_COMPILER=clang; - CMAKE_CXX_COMPILER=clang++; - LLVM_USE_SANITIZE_COVERAGE=YES; - LLVM_USE_SANITIZER=Address. Then build the clang-fuzzer target. Example:; cd $LLVM_SOURCE_DIR; mkdir build && cd build; cmake .. -GNinja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ \; -DLLVM_USE_SANITIZE_COVERAGE=YES -DLLVM_USE_SANITIZER=Address; ninja clang-fuzzer. ======================; Running clang-fuzzer; ======================; bin/clang-fuzzer CORPUS_DIR. ===================================; Building clang-objc-fuzzer; ===================================; Within your LLVM build directory, run CMake with the following variable; definitions:; - CMAKE_C_COMPILER=clang; - CMAKE_CXX_COMPILER=clang++; - LLVM_USE_SANITIZE_COVERAGE=YES; - LLVM_USE_SANITIZER=Address. Then build the clang-objc-fuzzer target. Example:; cd $LLVM_SOURCE_DIR; mkdir build && cd build; cmake .. -GNinja -DCMAKE_C_C",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-fuzzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-import-test/CMakeLists.txt:92,Testability,test,test,92,set(LLVM_LINK_COMPONENTS; Core; Support; TargetParser; ). add_clang_executable(clang-import-test; clang-import-test.cpp; DEPENDS; intrinsics_gen; ). set(CLANG_IMPORT_TEST_LIB_DEPS; clangAST; clangBasic; clangCodeGen; clangDriver; clangFrontend; clangLex; clangParse; clangSerialization; ). clang_target_link_libraries(clang-import-test; PRIVATE; ${CLANG_IMPORT_TEST_LIB_DEPS}; ); ,MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-import-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-import-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-import-test/CMakeLists.txt:111,Testability,test,test,111,set(LLVM_LINK_COMPONENTS; Core; Support; TargetParser; ). add_clang_executable(clang-import-test; clang-import-test.cpp; DEPENDS; intrinsics_gen; ). set(CLANG_IMPORT_TEST_LIB_DEPS; clangAST; clangBasic; clangCodeGen; clangDriver; clangFrontend; clangLex; clangParse; clangSerialization; ). clang_target_link_libraries(clang-import-test; PRIVATE; ${CLANG_IMPORT_TEST_LIB_DEPS}; ); ,MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-import-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-import-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-import-test/CMakeLists.txt:331,Testability,test,test,331,set(LLVM_LINK_COMPONENTS; Core; Support; TargetParser; ). add_clang_executable(clang-import-test; clang-import-test.cpp; DEPENDS; intrinsics_gen; ). set(CLANG_IMPORT_TEST_LIB_DEPS; clangAST; clangBasic; clangCodeGen; clangDriver; clangFrontend; clangLex; clangParse; clangSerialization; ). clang_target_link_libraries(clang-import-test; PRIVATE; ${CLANG_IMPORT_TEST_LIB_DEPS}; ); ,MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-import-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-import-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-linker-wrapper/CMakeLists.txt:494,Integrability,wrap,wrapper,494,set(LLVM_LINK_COMPONENTS; ${LLVM_TARGETS_TO_BUILD}; BitWriter; Core; BinaryFormat; MC; Target; TransformUtils; Analysis; Passes; IRReader; Object; Option; Support; TargetParser; CodeGen; LTO; FrontendOffloading; ). set(LLVM_TARGET_DEFINITIONS LinkerWrapperOpts.td); tablegen(LLVM LinkerWrapperOpts.inc -gen-opt-parser-defs); add_public_tablegen_target(LinkerWrapperOpts). if(NOT CLANG_BUILT_STANDALONE); set(tablegen_deps intrinsics_gen LinkerWrapperOpts); endif(). add_clang_tool(clang-linker-wrapper; ClangLinkerWrapper.cpp. DEPENDS; ${tablegen_deps}; ). set(CLANG_LINKER_WRAPPER_LIB_DEPS; clangBasic; ). target_link_libraries(clang-linker-wrapper; PRIVATE; ${CLANG_LINKER_WRAPPER_LIB_DEPS}; ); ,MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-linker-wrapper/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-linker-wrapper/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-linker-wrapper/CMakeLists.txt:642,Integrability,wrap,wrapper,642,set(LLVM_LINK_COMPONENTS; ${LLVM_TARGETS_TO_BUILD}; BitWriter; Core; BinaryFormat; MC; Target; TransformUtils; Analysis; Passes; IRReader; Object; Option; Support; TargetParser; CodeGen; LTO; FrontendOffloading; ). set(LLVM_TARGET_DEFINITIONS LinkerWrapperOpts.td); tablegen(LLVM LinkerWrapperOpts.inc -gen-opt-parser-defs); add_public_tablegen_target(LinkerWrapperOpts). if(NOT CLANG_BUILT_STANDALONE); set(tablegen_deps intrinsics_gen LinkerWrapperOpts); endif(). add_clang_tool(clang-linker-wrapper; ClangLinkerWrapper.cpp. DEPENDS; ${tablegen_deps}; ). set(CLANG_LINKER_WRAPPER_LIB_DEPS; clangBasic; ). target_link_libraries(clang-linker-wrapper; PRIVATE; ${CLANG_LINKER_WRAPPER_LIB_DEPS}; ); ,MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-linker-wrapper/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-linker-wrapper/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/CMakeLists.txt:67,Modifiability,refactor,refactor,67,set(LLVM_LINK_COMPONENTS; Option; Support; ). add_clang_tool(clang-refactor; ClangRefactor.cpp; TestSupport.cpp; ). clang_target_link_libraries(clang-refactor; PRIVATE; clangAST; clangBasic; clangFormat; clangFrontend; clangLex; clangRewrite; clangSerialization; clangTooling; clangToolingCore; clangToolingRefactoring; ); ,MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-refactor/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/CMakeLists.txt:150,Modifiability,refactor,refactor,150,set(LLVM_LINK_COMPONENTS; Option; Support; ). add_clang_tool(clang-refactor; ClangRefactor.cpp; TestSupport.cpp; ). clang_target_link_libraries(clang-refactor; PRIVATE; clangAST; clangBasic; clangFormat; clangFrontend; clangLex; clangRewrite; clangSerialization; clangTooling; clangToolingCore; clangToolingRefactoring; ); ,MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-refactor/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-rename/CMakeLists.txt:267,Deployability,install,install,267,"set(LLVM_LINK_COMPONENTS; Option; Support; ). add_clang_tool(clang-rename; ClangRename.cpp; ). clang_target_link_libraries(clang-rename; PRIVATE; clangBasic; clangFrontend; clangRewrite; clangSerialization; clangTooling; clangToolingCore; clangToolingRefactoring; ). install(FILES clang-rename.py; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-rename); install(FILES clang-rename.el; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-rename); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-rename/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-rename/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-rename/CMakeLists.txt:369,Deployability,install,install,369,"set(LLVM_LINK_COMPONENTS; Option; Support; ). add_clang_tool(clang-rename; ClangRename.cpp; ). clang_target_link_libraries(clang-rename; PRIVATE; clangBasic; clangFrontend; clangRewrite; clangSerialization; clangTooling; clangToolingCore; clangToolingRefactoring; ). install(FILES clang-rename.py; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-rename); install(FILES clang-rename.el; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT clang-rename); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-rename/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-rename/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-repl/CMakeLists.txt:260,Modifiability,plugin,plugins,260,"set( LLVM_LINK_COMPONENTS; ${LLVM_TARGETS_TO_BUILD}; Core; LineEditor; Option; OrcJIT; Support; ). add_clang_tool(clang-repl; ClangRepl.cpp; ). clang_target_link_libraries(clang-repl PRIVATE; clangAST; clangBasic; clangFrontend; clangInterpreter; ). # Support plugins.; if(CLANG_PLUGIN_SUPPORT); export_executable_symbols_for_plugins(clang-repl); endif(). string(TOUPPER ""${CMAKE_SYSTEM_PROCESSOR}"" system_processor); if(system_processor MATCHES ""ARM""); set(FLAG_LONG_PLT ""-Wl,--long-plt""); llvm_check_linker_flag(CXX ${FLAG_LONG_PLT} LINKER_HAS_FLAG_LONG_PLT); # Linkers without this flag are assumed to have long PLTs by default; if(LINKER_HAS_FLAG_LONG_PLT); target_link_options(clang-repl PRIVATE ${FLAG_LONG_PLT}); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-repl/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-repl/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-shlib/CMakeLists.txt:728,Availability,redundant,redundant,728,"# Building libclang-cpp.so fails if LLVM_ENABLE_PIC=Off; if (NOT LLVM_ENABLE_PIC); return(); endif(). get_property(clang_libs GLOBAL PROPERTY CLANG_STATIC_LIBS). foreach (lib ${clang_libs}); if(XCODE); # Xcode doesn't support object libraries, so we have to trick it into; # linking the static libraries instead.; list(APPEND _DEPS ""-force_load"" ${lib}); else(); list(APPEND _OBJECTS $<TARGET_OBJECTS:obj.${lib}>); endif(); if (BUILD_SHARED_LIBS); # If we are building static libraries, then we don't need to add the static; # libraries as a dependency, because we are already linking against the; # individual object files.; list(APPEND _DEPS $<TARGET_PROPERTY:${lib},INTERFACE_LINK_LIBRARIES>); endif(). # clang libraries are redundant since we are linking all the individual; # object files into libclang-cpp.so, so filter them out from _DEPS.; # This avoids problems with LLVM global data when building with; # BUILD_SHARED_LIBS=ON; # FIXME: We could use list(FILTER) with cmake >= 3.6; # FIXME: With cmake >= 3.15 we could use the generator expression; # $<FILTER:list,INCLUDE|EXCLUDE,regex>; get_target_property(interface ${lib} LINK_LIBRARIES); if (interface); foreach(lib ${interface}); if (NOT ${lib} MATCHES ""^clang""); list(APPEND _DEPS ${lib}); endif(); endforeach(); endif(); endforeach (). if (CLANG_LINK_CLANG_DYLIB); set(INSTALL_WITH_TOOLCHAIN INSTALL_WITH_TOOLCHAIN); endif(). add_clang_library(clang-cpp; SHARED; ${INSTALL_WITH_TOOLCHAIN}; clang-shlib.cpp; ${_OBJECTS}; LINK_LIBS; ${_DEPS}); # Optimize function calls for default visibility definitions to avoid PLT and; # reduce dynamic relocations.; if (NOT APPLE AND NOT MINGW AND NOT LLVM_LINKER_IS_SOLARISLD_ILLUMOS); target_link_options(clang-cpp PRIVATE LINKER:-Bsymbolic-functions); endif(); if (MINGW OR CYGWIN); # The clang-cpp DLL is supposed to export all symbols (except for ones; # that are explicitly hidden). Normally, this is what happens anyway, but; # if there are symbols that are marked explicitly as dllexport, w",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-shlib/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-shlib/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-shlib/CMakeLists.txt:1590,Energy Efficiency,reduce,reduce,1590," object libraries, so we have to trick it into; # linking the static libraries instead.; list(APPEND _DEPS ""-force_load"" ${lib}); else(); list(APPEND _OBJECTS $<TARGET_OBJECTS:obj.${lib}>); endif(); if (BUILD_SHARED_LIBS); # If we are building static libraries, then we don't need to add the static; # libraries as a dependency, because we are already linking against the; # individual object files.; list(APPEND _DEPS $<TARGET_PROPERTY:${lib},INTERFACE_LINK_LIBRARIES>); endif(). # clang libraries are redundant since we are linking all the individual; # object files into libclang-cpp.so, so filter them out from _DEPS.; # This avoids problems with LLVM global data when building with; # BUILD_SHARED_LIBS=ON; # FIXME: We could use list(FILTER) with cmake >= 3.6; # FIXME: With cmake >= 3.15 we could use the generator expression; # $<FILTER:list,INCLUDE|EXCLUDE,regex>; get_target_property(interface ${lib} LINK_LIBRARIES); if (interface); foreach(lib ${interface}); if (NOT ${lib} MATCHES ""^clang""); list(APPEND _DEPS ${lib}); endif(); endforeach(); endif(); endforeach (). if (CLANG_LINK_CLANG_DYLIB); set(INSTALL_WITH_TOOLCHAIN INSTALL_WITH_TOOLCHAIN); endif(). add_clang_library(clang-cpp; SHARED; ${INSTALL_WITH_TOOLCHAIN}; clang-shlib.cpp; ${_OBJECTS}; LINK_LIBS; ${_DEPS}); # Optimize function calls for default visibility definitions to avoid PLT and; # reduce dynamic relocations.; if (NOT APPLE AND NOT MINGW AND NOT LLVM_LINKER_IS_SOLARISLD_ILLUMOS); target_link_options(clang-cpp PRIVATE LINKER:-Bsymbolic-functions); endif(); if (MINGW OR CYGWIN); # The clang-cpp DLL is supposed to export all symbols (except for ones; # that are explicitly hidden). Normally, this is what happens anyway, but; # if there are symbols that are marked explicitly as dllexport, we'd only; # export them and nothing else. Therefore, add --export-all-symbols to; # make sure we export all symbols despite potential dllexports.; target_link_options(clang-cpp PRIVATE LINKER:--export-all-symbols); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-shlib/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-shlib/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-shlib/CMakeLists.txt:542,Integrability,depend,dependency,542,"# Building libclang-cpp.so fails if LLVM_ENABLE_PIC=Off; if (NOT LLVM_ENABLE_PIC); return(); endif(). get_property(clang_libs GLOBAL PROPERTY CLANG_STATIC_LIBS). foreach (lib ${clang_libs}); if(XCODE); # Xcode doesn't support object libraries, so we have to trick it into; # linking the static libraries instead.; list(APPEND _DEPS ""-force_load"" ${lib}); else(); list(APPEND _OBJECTS $<TARGET_OBJECTS:obj.${lib}>); endif(); if (BUILD_SHARED_LIBS); # If we are building static libraries, then we don't need to add the static; # libraries as a dependency, because we are already linking against the; # individual object files.; list(APPEND _DEPS $<TARGET_PROPERTY:${lib},INTERFACE_LINK_LIBRARIES>); endif(). # clang libraries are redundant since we are linking all the individual; # object files into libclang-cpp.so, so filter them out from _DEPS.; # This avoids problems with LLVM global data when building with; # BUILD_SHARED_LIBS=ON; # FIXME: We could use list(FILTER) with cmake >= 3.6; # FIXME: With cmake >= 3.15 we could use the generator expression; # $<FILTER:list,INCLUDE|EXCLUDE,regex>; get_target_property(interface ${lib} LINK_LIBRARIES); if (interface); foreach(lib ${interface}); if (NOT ${lib} MATCHES ""^clang""); list(APPEND _DEPS ${lib}); endif(); endforeach(); endif(); endforeach (). if (CLANG_LINK_CLANG_DYLIB); set(INSTALL_WITH_TOOLCHAIN INSTALL_WITH_TOOLCHAIN); endif(). add_clang_library(clang-cpp; SHARED; ${INSTALL_WITH_TOOLCHAIN}; clang-shlib.cpp; ${_OBJECTS}; LINK_LIBS; ${_DEPS}); # Optimize function calls for default visibility definitions to avoid PLT and; # reduce dynamic relocations.; if (NOT APPLE AND NOT MINGW AND NOT LLVM_LINKER_IS_SOLARISLD_ILLUMOS); target_link_options(clang-cpp PRIVATE LINKER:-Bsymbolic-functions); endif(); if (MINGW OR CYGWIN); # The clang-cpp DLL is supposed to export all symbols (except for ones; # that are explicitly hidden). Normally, this is what happens anyway, but; # if there are symbols that are marked explicitly as dllexport, w",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-shlib/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-shlib/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-shlib/CMakeLists.txt:1118,Integrability,interface,interface,1118,"). foreach (lib ${clang_libs}); if(XCODE); # Xcode doesn't support object libraries, so we have to trick it into; # linking the static libraries instead.; list(APPEND _DEPS ""-force_load"" ${lib}); else(); list(APPEND _OBJECTS $<TARGET_OBJECTS:obj.${lib}>); endif(); if (BUILD_SHARED_LIBS); # If we are building static libraries, then we don't need to add the static; # libraries as a dependency, because we are already linking against the; # individual object files.; list(APPEND _DEPS $<TARGET_PROPERTY:${lib},INTERFACE_LINK_LIBRARIES>); endif(). # clang libraries are redundant since we are linking all the individual; # object files into libclang-cpp.so, so filter them out from _DEPS.; # This avoids problems with LLVM global data when building with; # BUILD_SHARED_LIBS=ON; # FIXME: We could use list(FILTER) with cmake >= 3.6; # FIXME: With cmake >= 3.15 we could use the generator expression; # $<FILTER:list,INCLUDE|EXCLUDE,regex>; get_target_property(interface ${lib} LINK_LIBRARIES); if (interface); foreach(lib ${interface}); if (NOT ${lib} MATCHES ""^clang""); list(APPEND _DEPS ${lib}); endif(); endforeach(); endif(); endforeach (). if (CLANG_LINK_CLANG_DYLIB); set(INSTALL_WITH_TOOLCHAIN INSTALL_WITH_TOOLCHAIN); endif(). add_clang_library(clang-cpp; SHARED; ${INSTALL_WITH_TOOLCHAIN}; clang-shlib.cpp; ${_OBJECTS}; LINK_LIBS; ${_DEPS}); # Optimize function calls for default visibility definitions to avoid PLT and; # reduce dynamic relocations.; if (NOT APPLE AND NOT MINGW AND NOT LLVM_LINKER_IS_SOLARISLD_ILLUMOS); target_link_options(clang-cpp PRIVATE LINKER:-Bsymbolic-functions); endif(); if (MINGW OR CYGWIN); # The clang-cpp DLL is supposed to export all symbols (except for ones; # that are explicitly hidden). Normally, this is what happens anyway, but; # if there are symbols that are marked explicitly as dllexport, we'd only; # export them and nothing else. Therefore, add --export-all-symbols to; # make sure we export all symbols despite potential dllexports.; target_link",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-shlib/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-shlib/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-shlib/CMakeLists.txt:1156,Integrability,interface,interface,1156,"). foreach (lib ${clang_libs}); if(XCODE); # Xcode doesn't support object libraries, so we have to trick it into; # linking the static libraries instead.; list(APPEND _DEPS ""-force_load"" ${lib}); else(); list(APPEND _OBJECTS $<TARGET_OBJECTS:obj.${lib}>); endif(); if (BUILD_SHARED_LIBS); # If we are building static libraries, then we don't need to add the static; # libraries as a dependency, because we are already linking against the; # individual object files.; list(APPEND _DEPS $<TARGET_PROPERTY:${lib},INTERFACE_LINK_LIBRARIES>); endif(). # clang libraries are redundant since we are linking all the individual; # object files into libclang-cpp.so, so filter them out from _DEPS.; # This avoids problems with LLVM global data when building with; # BUILD_SHARED_LIBS=ON; # FIXME: We could use list(FILTER) with cmake >= 3.6; # FIXME: With cmake >= 3.15 we could use the generator expression; # $<FILTER:list,INCLUDE|EXCLUDE,regex>; get_target_property(interface ${lib} LINK_LIBRARIES); if (interface); foreach(lib ${interface}); if (NOT ${lib} MATCHES ""^clang""); list(APPEND _DEPS ${lib}); endif(); endforeach(); endif(); endforeach (). if (CLANG_LINK_CLANG_DYLIB); set(INSTALL_WITH_TOOLCHAIN INSTALL_WITH_TOOLCHAIN); endif(). add_clang_library(clang-cpp; SHARED; ${INSTALL_WITH_TOOLCHAIN}; clang-shlib.cpp; ${_OBJECTS}; LINK_LIBS; ${_DEPS}); # Optimize function calls for default visibility definitions to avoid PLT and; # reduce dynamic relocations.; if (NOT APPLE AND NOT MINGW AND NOT LLVM_LINKER_IS_SOLARISLD_ILLUMOS); target_link_options(clang-cpp PRIVATE LINKER:-Bsymbolic-functions); endif(); if (MINGW OR CYGWIN); # The clang-cpp DLL is supposed to export all symbols (except for ones; # that are explicitly hidden). Normally, this is what happens anyway, but; # if there are symbols that are marked explicitly as dllexport, we'd only; # export them and nothing else. Therefore, add --export-all-symbols to; # make sure we export all symbols despite potential dllexports.; target_link",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-shlib/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-shlib/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-shlib/CMakeLists.txt:1182,Integrability,interface,interface,1182,"). foreach (lib ${clang_libs}); if(XCODE); # Xcode doesn't support object libraries, so we have to trick it into; # linking the static libraries instead.; list(APPEND _DEPS ""-force_load"" ${lib}); else(); list(APPEND _OBJECTS $<TARGET_OBJECTS:obj.${lib}>); endif(); if (BUILD_SHARED_LIBS); # If we are building static libraries, then we don't need to add the static; # libraries as a dependency, because we are already linking against the; # individual object files.; list(APPEND _DEPS $<TARGET_PROPERTY:${lib},INTERFACE_LINK_LIBRARIES>); endif(). # clang libraries are redundant since we are linking all the individual; # object files into libclang-cpp.so, so filter them out from _DEPS.; # This avoids problems with LLVM global data when building with; # BUILD_SHARED_LIBS=ON; # FIXME: We could use list(FILTER) with cmake >= 3.6; # FIXME: With cmake >= 3.15 we could use the generator expression; # $<FILTER:list,INCLUDE|EXCLUDE,regex>; get_target_property(interface ${lib} LINK_LIBRARIES); if (interface); foreach(lib ${interface}); if (NOT ${lib} MATCHES ""^clang""); list(APPEND _DEPS ${lib}); endif(); endforeach(); endif(); endforeach (). if (CLANG_LINK_CLANG_DYLIB); set(INSTALL_WITH_TOOLCHAIN INSTALL_WITH_TOOLCHAIN); endif(). add_clang_library(clang-cpp; SHARED; ${INSTALL_WITH_TOOLCHAIN}; clang-shlib.cpp; ${_OBJECTS}; LINK_LIBS; ${_DEPS}); # Optimize function calls for default visibility definitions to avoid PLT and; # reduce dynamic relocations.; if (NOT APPLE AND NOT MINGW AND NOT LLVM_LINKER_IS_SOLARISLD_ILLUMOS); target_link_options(clang-cpp PRIVATE LINKER:-Bsymbolic-functions); endif(); if (MINGW OR CYGWIN); # The clang-cpp DLL is supposed to export all symbols (except for ones; # that are explicitly hidden). Normally, this is what happens anyway, but; # if there are symbols that are marked explicitly as dllexport, we'd only; # export them and nothing else. Therefore, add --export-all-symbols to; # make sure we export all symbols despite potential dllexports.; target_link",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-shlib/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-shlib/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-shlib/CMakeLists.txt:728,Safety,redund,redundant,728,"# Building libclang-cpp.so fails if LLVM_ENABLE_PIC=Off; if (NOT LLVM_ENABLE_PIC); return(); endif(). get_property(clang_libs GLOBAL PROPERTY CLANG_STATIC_LIBS). foreach (lib ${clang_libs}); if(XCODE); # Xcode doesn't support object libraries, so we have to trick it into; # linking the static libraries instead.; list(APPEND _DEPS ""-force_load"" ${lib}); else(); list(APPEND _OBJECTS $<TARGET_OBJECTS:obj.${lib}>); endif(); if (BUILD_SHARED_LIBS); # If we are building static libraries, then we don't need to add the static; # libraries as a dependency, because we are already linking against the; # individual object files.; list(APPEND _DEPS $<TARGET_PROPERTY:${lib},INTERFACE_LINK_LIBRARIES>); endif(). # clang libraries are redundant since we are linking all the individual; # object files into libclang-cpp.so, so filter them out from _DEPS.; # This avoids problems with LLVM global data when building with; # BUILD_SHARED_LIBS=ON; # FIXME: We could use list(FILTER) with cmake >= 3.6; # FIXME: With cmake >= 3.15 we could use the generator expression; # $<FILTER:list,INCLUDE|EXCLUDE,regex>; get_target_property(interface ${lib} LINK_LIBRARIES); if (interface); foreach(lib ${interface}); if (NOT ${lib} MATCHES ""^clang""); list(APPEND _DEPS ${lib}); endif(); endforeach(); endif(); endforeach (). if (CLANG_LINK_CLANG_DYLIB); set(INSTALL_WITH_TOOLCHAIN INSTALL_WITH_TOOLCHAIN); endif(). add_clang_library(clang-cpp; SHARED; ${INSTALL_WITH_TOOLCHAIN}; clang-shlib.cpp; ${_OBJECTS}; LINK_LIBS; ${_DEPS}); # Optimize function calls for default visibility definitions to avoid PLT and; # reduce dynamic relocations.; if (NOT APPLE AND NOT MINGW AND NOT LLVM_LINKER_IS_SOLARISLD_ILLUMOS); target_link_options(clang-cpp PRIVATE LINKER:-Bsymbolic-functions); endif(); if (MINGW OR CYGWIN); # The clang-cpp DLL is supposed to export all symbols (except for ones; # that are explicitly hidden). Normally, this is what happens anyway, but; # if there are symbols that are marked explicitly as dllexport, w",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-shlib/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-shlib/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-shlib/CMakeLists.txt:855,Safety,avoid,avoids,855,"# Building libclang-cpp.so fails if LLVM_ENABLE_PIC=Off; if (NOT LLVM_ENABLE_PIC); return(); endif(). get_property(clang_libs GLOBAL PROPERTY CLANG_STATIC_LIBS). foreach (lib ${clang_libs}); if(XCODE); # Xcode doesn't support object libraries, so we have to trick it into; # linking the static libraries instead.; list(APPEND _DEPS ""-force_load"" ${lib}); else(); list(APPEND _OBJECTS $<TARGET_OBJECTS:obj.${lib}>); endif(); if (BUILD_SHARED_LIBS); # If we are building static libraries, then we don't need to add the static; # libraries as a dependency, because we are already linking against the; # individual object files.; list(APPEND _DEPS $<TARGET_PROPERTY:${lib},INTERFACE_LINK_LIBRARIES>); endif(). # clang libraries are redundant since we are linking all the individual; # object files into libclang-cpp.so, so filter them out from _DEPS.; # This avoids problems with LLVM global data when building with; # BUILD_SHARED_LIBS=ON; # FIXME: We could use list(FILTER) with cmake >= 3.6; # FIXME: With cmake >= 3.15 we could use the generator expression; # $<FILTER:list,INCLUDE|EXCLUDE,regex>; get_target_property(interface ${lib} LINK_LIBRARIES); if (interface); foreach(lib ${interface}); if (NOT ${lib} MATCHES ""^clang""); list(APPEND _DEPS ${lib}); endif(); endforeach(); endif(); endforeach (). if (CLANG_LINK_CLANG_DYLIB); set(INSTALL_WITH_TOOLCHAIN INSTALL_WITH_TOOLCHAIN); endif(). add_clang_library(clang-cpp; SHARED; ${INSTALL_WITH_TOOLCHAIN}; clang-shlib.cpp; ${_OBJECTS}; LINK_LIBS; ${_DEPS}); # Optimize function calls for default visibility definitions to avoid PLT and; # reduce dynamic relocations.; if (NOT APPLE AND NOT MINGW AND NOT LLVM_LINKER_IS_SOLARISLD_ILLUMOS); target_link_options(clang-cpp PRIVATE LINKER:-Bsymbolic-functions); endif(); if (MINGW OR CYGWIN); # The clang-cpp DLL is supposed to export all symbols (except for ones; # that are explicitly hidden). Normally, this is what happens anyway, but; # if there are symbols that are marked explicitly as dllexport, w",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-shlib/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-shlib/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-shlib/CMakeLists.txt:1573,Safety,avoid,avoid,1573," object libraries, so we have to trick it into; # linking the static libraries instead.; list(APPEND _DEPS ""-force_load"" ${lib}); else(); list(APPEND _OBJECTS $<TARGET_OBJECTS:obj.${lib}>); endif(); if (BUILD_SHARED_LIBS); # If we are building static libraries, then we don't need to add the static; # libraries as a dependency, because we are already linking against the; # individual object files.; list(APPEND _DEPS $<TARGET_PROPERTY:${lib},INTERFACE_LINK_LIBRARIES>); endif(). # clang libraries are redundant since we are linking all the individual; # object files into libclang-cpp.so, so filter them out from _DEPS.; # This avoids problems with LLVM global data when building with; # BUILD_SHARED_LIBS=ON; # FIXME: We could use list(FILTER) with cmake >= 3.6; # FIXME: With cmake >= 3.15 we could use the generator expression; # $<FILTER:list,INCLUDE|EXCLUDE,regex>; get_target_property(interface ${lib} LINK_LIBRARIES); if (interface); foreach(lib ${interface}); if (NOT ${lib} MATCHES ""^clang""); list(APPEND _DEPS ${lib}); endif(); endforeach(); endif(); endforeach (). if (CLANG_LINK_CLANG_DYLIB); set(INSTALL_WITH_TOOLCHAIN INSTALL_WITH_TOOLCHAIN); endif(). add_clang_library(clang-cpp; SHARED; ${INSTALL_WITH_TOOLCHAIN}; clang-shlib.cpp; ${_OBJECTS}; LINK_LIBS; ${_DEPS}); # Optimize function calls for default visibility definitions to avoid PLT and; # reduce dynamic relocations.; if (NOT APPLE AND NOT MINGW AND NOT LLVM_LINKER_IS_SOLARISLD_ILLUMOS); target_link_options(clang-cpp PRIVATE LINKER:-Bsymbolic-functions); endif(); if (MINGW OR CYGWIN); # The clang-cpp DLL is supposed to export all symbols (except for ones; # that are explicitly hidden). Normally, this is what happens anyway, but; # if there are symbols that are marked explicitly as dllexport, we'd only; # export them and nothing else. Therefore, add --export-all-symbols to; # make sure we export all symbols despite potential dllexports.; target_link_options(clang-cpp PRIVATE LINKER:--export-all-symbols); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-shlib/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-shlib/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/CMakeLists.txt:2918,Deployability,configurat,configuration,2918,"E ""${CLANG_VENDOR} clang""); else(); set(TOOL_INFO_NAME ""clang""); endif(). set(TOOL_INFO_UTI ""${CLANG_VENDOR_UTI}""); set(TOOL_INFO_VERSION ""${CLANG_VERSION}""); set(TOOL_INFO_BUILD_VERSION ""${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}""). set(TOOL_INFO_PLIST_OUT ""${CMAKE_CURRENT_BINARY_DIR}/${TOOL_INFO_PLIST}""). if(LLVM_TOOL_LLVM_DRIVER_BUILD AND clang IN_LIST LLVM_DRIVER_TOOLS); set(TARGET_NAME llvm-driver); else(); set(TARGET_NAME clang); endif(). target_link_libraries(${TARGET_NAME}; PRIVATE; ""-Wl,-sectcreate,__TEXT,__info_plist,\""${TOOL_INFO_PLIST_OUT}\""""); configure_file(""${TOOL_INFO_PLIST}.in"" ""${TOOL_INFO_PLIST_OUT}"" @ONLY). set(TOOL_INFO_UTI); set(TOOL_INFO_NAME); set(TOOL_INFO_VERSION); set(TOOL_INFO_BUILD_VERSION); endif(). if(CLANG_ORDER_FILE AND; (LLVM_LINKER_IS_APPLE OR LLVM_LINKER_IS_GOLD OR LLVM_LINKER_IS_LLD)); include(LLVMCheckLinkerFlag). if (LLVM_LINKER_IS_APPLE OR (LLVM_LINKER_IS_LLD AND APPLE)); set(LINKER_ORDER_FILE_OPTION ""-Wl,-order_file,${CLANG_ORDER_FILE}""); elseif (LLVM_LINKER_IS_GOLD); set(LINKER_ORDER_FILE_OPTION ""-Wl,--section-ordering-file,${CLANG_ORDER_FILE}""); elseif (LLVM_LINKER_IS_LLD); set(LINKER_ORDER_FILE_OPTION ""-Wl,--symbol-ordering-file,${CLANG_ORDER_FILE}""); endif(). # This is a test to ensure the actual order file works with the linker.; llvm_check_linker_flag(CXX ${LINKER_ORDER_FILE_OPTION} LINKER_ORDER_FILE_WORKS). # Passing an empty order file disables some linker layout optimizations.; # To work around this and enable workflows for re-linking when the order file; # changes we check during configuration if the file is empty, and make it a; # configuration dependency.; file(READ ${CLANG_ORDER_FILE} ORDER_FILE LIMIT 20); if(""${ORDER_FILE}"" STREQUAL ""\n""); set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS ${CLANG_ORDER_FILE}); elseif(LINKER_ORDER_FILE_WORKS); target_link_libraries(clang PRIVATE ${LINKER_ORDER_FILE_OPTION}); set_target_properties(clang PROPERTIES LINK_DEPENDS ${CLANG_ORDER_FILE}); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/driver/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/CMakeLists.txt:2971,Deployability,configurat,configuration,2971,"E ""${CLANG_VENDOR} clang""); else(); set(TOOL_INFO_NAME ""clang""); endif(). set(TOOL_INFO_UTI ""${CLANG_VENDOR_UTI}""); set(TOOL_INFO_VERSION ""${CLANG_VERSION}""); set(TOOL_INFO_BUILD_VERSION ""${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}""). set(TOOL_INFO_PLIST_OUT ""${CMAKE_CURRENT_BINARY_DIR}/${TOOL_INFO_PLIST}""). if(LLVM_TOOL_LLVM_DRIVER_BUILD AND clang IN_LIST LLVM_DRIVER_TOOLS); set(TARGET_NAME llvm-driver); else(); set(TARGET_NAME clang); endif(). target_link_libraries(${TARGET_NAME}; PRIVATE; ""-Wl,-sectcreate,__TEXT,__info_plist,\""${TOOL_INFO_PLIST_OUT}\""""); configure_file(""${TOOL_INFO_PLIST}.in"" ""${TOOL_INFO_PLIST_OUT}"" @ONLY). set(TOOL_INFO_UTI); set(TOOL_INFO_NAME); set(TOOL_INFO_VERSION); set(TOOL_INFO_BUILD_VERSION); endif(). if(CLANG_ORDER_FILE AND; (LLVM_LINKER_IS_APPLE OR LLVM_LINKER_IS_GOLD OR LLVM_LINKER_IS_LLD)); include(LLVMCheckLinkerFlag). if (LLVM_LINKER_IS_APPLE OR (LLVM_LINKER_IS_LLD AND APPLE)); set(LINKER_ORDER_FILE_OPTION ""-Wl,-order_file,${CLANG_ORDER_FILE}""); elseif (LLVM_LINKER_IS_GOLD); set(LINKER_ORDER_FILE_OPTION ""-Wl,--section-ordering-file,${CLANG_ORDER_FILE}""); elseif (LLVM_LINKER_IS_LLD); set(LINKER_ORDER_FILE_OPTION ""-Wl,--symbol-ordering-file,${CLANG_ORDER_FILE}""); endif(). # This is a test to ensure the actual order file works with the linker.; llvm_check_linker_flag(CXX ${LINKER_ORDER_FILE_OPTION} LINKER_ORDER_FILE_WORKS). # Passing an empty order file disables some linker layout optimizations.; # To work around this and enable workflows for re-linking when the order file; # changes we check during configuration if the file is empty, and make it a; # configuration dependency.; file(READ ${CLANG_ORDER_FILE} ORDER_FILE LIMIT 20); if(""${ORDER_FILE}"" STREQUAL ""\n""); set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS ${CLANG_ORDER_FILE}); elseif(LINKER_ORDER_FILE_WORKS); target_link_libraries(clang PRIVATE ${LINKER_ORDER_FILE_OPTION}); set_target_properties(clang PROPERTIES LINK_DEPENDS ${CLANG_ORDER_FILE}); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/driver/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/CMakeLists.txt:2985,Integrability,depend,dependency,2985,"E ""${CLANG_VENDOR} clang""); else(); set(TOOL_INFO_NAME ""clang""); endif(). set(TOOL_INFO_UTI ""${CLANG_VENDOR_UTI}""); set(TOOL_INFO_VERSION ""${CLANG_VERSION}""); set(TOOL_INFO_BUILD_VERSION ""${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}""). set(TOOL_INFO_PLIST_OUT ""${CMAKE_CURRENT_BINARY_DIR}/${TOOL_INFO_PLIST}""). if(LLVM_TOOL_LLVM_DRIVER_BUILD AND clang IN_LIST LLVM_DRIVER_TOOLS); set(TARGET_NAME llvm-driver); else(); set(TARGET_NAME clang); endif(). target_link_libraries(${TARGET_NAME}; PRIVATE; ""-Wl,-sectcreate,__TEXT,__info_plist,\""${TOOL_INFO_PLIST_OUT}\""""); configure_file(""${TOOL_INFO_PLIST}.in"" ""${TOOL_INFO_PLIST_OUT}"" @ONLY). set(TOOL_INFO_UTI); set(TOOL_INFO_NAME); set(TOOL_INFO_VERSION); set(TOOL_INFO_BUILD_VERSION); endif(). if(CLANG_ORDER_FILE AND; (LLVM_LINKER_IS_APPLE OR LLVM_LINKER_IS_GOLD OR LLVM_LINKER_IS_LLD)); include(LLVMCheckLinkerFlag). if (LLVM_LINKER_IS_APPLE OR (LLVM_LINKER_IS_LLD AND APPLE)); set(LINKER_ORDER_FILE_OPTION ""-Wl,-order_file,${CLANG_ORDER_FILE}""); elseif (LLVM_LINKER_IS_GOLD); set(LINKER_ORDER_FILE_OPTION ""-Wl,--section-ordering-file,${CLANG_ORDER_FILE}""); elseif (LLVM_LINKER_IS_LLD); set(LINKER_ORDER_FILE_OPTION ""-Wl,--symbol-ordering-file,${CLANG_ORDER_FILE}""); endif(). # This is a test to ensure the actual order file works with the linker.; llvm_check_linker_flag(CXX ${LINKER_ORDER_FILE_OPTION} LINKER_ORDER_FILE_WORKS). # Passing an empty order file disables some linker layout optimizations.; # To work around this and enable workflows for re-linking when the order file; # changes we check during configuration if the file is empty, and make it a; # configuration dependency.; file(READ ${CLANG_ORDER_FILE} ORDER_FILE LIMIT 20); if(""${ORDER_FILE}"" STREQUAL ""\n""); set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS ${CLANG_ORDER_FILE}); elseif(LINKER_ORDER_FILE_WORKS); target_link_libraries(clang PRIVATE ${LINKER_ORDER_FILE_OPTION}); set_target_properties(clang PROPERTIES LINK_DEPENDS ${CLANG_ORDER_FILE}); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/driver/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/CMakeLists.txt:246,Modifiability,plugin,plugins,246,"set( LLVM_LINK_COMPONENTS; ${LLVM_TARGETS_TO_BUILD}; Analysis; CodeGen; Core; IPO; AggressiveInstCombine; InstCombine; Instrumentation; MC; MCParser; ObjCARCOpts; Option; ScalarOpts; Support; TargetParser; TransformUtils; Vectorize; ). # Support plugins.; if(CLANG_PLUGIN_SUPPORT); set(support_plugins SUPPORT_PLUGINS); endif(). add_clang_tool(clang; driver.cpp; cc1_main.cpp; cc1as_main.cpp; cc1gen_reproducer_main.cpp. DEPENDS; intrinsics_gen; ${support_plugins}; GENERATE_DRIVER; ). clang_target_link_libraries(clang; PRIVATE; clangBasic; clangCodeGen; clangDriver; clangFrontend; clangFrontendTool; clangSerialization; ). if(WIN32 AND NOT CYGWIN); # Prevent versioning if the buildhost is targeting for Win32.; else(); set_target_properties(clang PROPERTIES VERSION ${CLANG_EXECUTABLE_VERSION}); endif(). # Support plugins.; if(CLANG_PLUGIN_SUPPORT); export_executable_symbols_for_plugins(clang); endif(). add_dependencies(clang clang-resource-headers). if(NOT CLANG_LINKS_TO_CREATE); set(CLANG_LINKS_TO_CREATE clang++ clang-cl clang-cpp); endif(). if (CLANG_ENABLE_HLSL); set(HLSL_LINK clang-dxc); endif(). foreach(link ${CLANG_LINKS_TO_CREATE} ${HLSL_LINK}); add_clang_symlink(${link} clang); endforeach(). # Configure plist creation for OS X.; set (TOOL_INFO_PLIST ""Info.plist"" CACHE STRING ""Plist name""); if (APPLE); if (CLANG_VENDOR); set(TOOL_INFO_NAME ""${CLANG_VENDOR} clang""); else(); set(TOOL_INFO_NAME ""clang""); endif(). set(TOOL_INFO_UTI ""${CLANG_VENDOR_UTI}""); set(TOOL_INFO_VERSION ""${CLANG_VERSION}""); set(TOOL_INFO_BUILD_VERSION ""${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}""). set(TOOL_INFO_PLIST_OUT ""${CMAKE_CURRENT_BINARY_DIR}/${TOOL_INFO_PLIST}""). if(LLVM_TOOL_LLVM_DRIVER_BUILD AND clang IN_LIST LLVM_DRIVER_TOOLS); set(TARGET_NAME llvm-driver); else(); set(TARGET_NAME clang); endif(). target_link_libraries(${TARGET_NAME}; PRIVATE; ""-Wl,-sectcreate,__TEXT,__info_plist,\""${TOOL_INFO_PLIST_OUT}\""""); configure_file(""${TOOL_INFO_PLIST}.in"" ""${TOOL_INFO_PLIST_OUT}"" @ONLY). set(",MatchSource.DOCS,interpreter/llvm-project/clang/tools/driver/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/CMakeLists.txt:819,Modifiability,plugin,plugins,819,"set( LLVM_LINK_COMPONENTS; ${LLVM_TARGETS_TO_BUILD}; Analysis; CodeGen; Core; IPO; AggressiveInstCombine; InstCombine; Instrumentation; MC; MCParser; ObjCARCOpts; Option; ScalarOpts; Support; TargetParser; TransformUtils; Vectorize; ). # Support plugins.; if(CLANG_PLUGIN_SUPPORT); set(support_plugins SUPPORT_PLUGINS); endif(). add_clang_tool(clang; driver.cpp; cc1_main.cpp; cc1as_main.cpp; cc1gen_reproducer_main.cpp. DEPENDS; intrinsics_gen; ${support_plugins}; GENERATE_DRIVER; ). clang_target_link_libraries(clang; PRIVATE; clangBasic; clangCodeGen; clangDriver; clangFrontend; clangFrontendTool; clangSerialization; ). if(WIN32 AND NOT CYGWIN); # Prevent versioning if the buildhost is targeting for Win32.; else(); set_target_properties(clang PROPERTIES VERSION ${CLANG_EXECUTABLE_VERSION}); endif(). # Support plugins.; if(CLANG_PLUGIN_SUPPORT); export_executable_symbols_for_plugins(clang); endif(). add_dependencies(clang clang-resource-headers). if(NOT CLANG_LINKS_TO_CREATE); set(CLANG_LINKS_TO_CREATE clang++ clang-cl clang-cpp); endif(). if (CLANG_ENABLE_HLSL); set(HLSL_LINK clang-dxc); endif(). foreach(link ${CLANG_LINKS_TO_CREATE} ${HLSL_LINK}); add_clang_symlink(${link} clang); endforeach(). # Configure plist creation for OS X.; set (TOOL_INFO_PLIST ""Info.plist"" CACHE STRING ""Plist name""); if (APPLE); if (CLANG_VENDOR); set(TOOL_INFO_NAME ""${CLANG_VENDOR} clang""); else(); set(TOOL_INFO_NAME ""clang""); endif(). set(TOOL_INFO_UTI ""${CLANG_VENDOR_UTI}""); set(TOOL_INFO_VERSION ""${CLANG_VERSION}""); set(TOOL_INFO_BUILD_VERSION ""${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}""). set(TOOL_INFO_PLIST_OUT ""${CMAKE_CURRENT_BINARY_DIR}/${TOOL_INFO_PLIST}""). if(LLVM_TOOL_LLVM_DRIVER_BUILD AND clang IN_LIST LLVM_DRIVER_TOOLS); set(TARGET_NAME llvm-driver); else(); set(TARGET_NAME clang); endif(). target_link_libraries(${TARGET_NAME}; PRIVATE; ""-Wl,-sectcreate,__TEXT,__info_plist,\""${TOOL_INFO_PLIST_OUT}\""""); configure_file(""${TOOL_INFO_PLIST}.in"" ""${TOOL_INFO_PLIST_OUT}"" @ONLY). set(",MatchSource.DOCS,interpreter/llvm-project/clang/tools/driver/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/CMakeLists.txt:2918,Modifiability,config,configuration,2918,"E ""${CLANG_VENDOR} clang""); else(); set(TOOL_INFO_NAME ""clang""); endif(). set(TOOL_INFO_UTI ""${CLANG_VENDOR_UTI}""); set(TOOL_INFO_VERSION ""${CLANG_VERSION}""); set(TOOL_INFO_BUILD_VERSION ""${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}""). set(TOOL_INFO_PLIST_OUT ""${CMAKE_CURRENT_BINARY_DIR}/${TOOL_INFO_PLIST}""). if(LLVM_TOOL_LLVM_DRIVER_BUILD AND clang IN_LIST LLVM_DRIVER_TOOLS); set(TARGET_NAME llvm-driver); else(); set(TARGET_NAME clang); endif(). target_link_libraries(${TARGET_NAME}; PRIVATE; ""-Wl,-sectcreate,__TEXT,__info_plist,\""${TOOL_INFO_PLIST_OUT}\""""); configure_file(""${TOOL_INFO_PLIST}.in"" ""${TOOL_INFO_PLIST_OUT}"" @ONLY). set(TOOL_INFO_UTI); set(TOOL_INFO_NAME); set(TOOL_INFO_VERSION); set(TOOL_INFO_BUILD_VERSION); endif(). if(CLANG_ORDER_FILE AND; (LLVM_LINKER_IS_APPLE OR LLVM_LINKER_IS_GOLD OR LLVM_LINKER_IS_LLD)); include(LLVMCheckLinkerFlag). if (LLVM_LINKER_IS_APPLE OR (LLVM_LINKER_IS_LLD AND APPLE)); set(LINKER_ORDER_FILE_OPTION ""-Wl,-order_file,${CLANG_ORDER_FILE}""); elseif (LLVM_LINKER_IS_GOLD); set(LINKER_ORDER_FILE_OPTION ""-Wl,--section-ordering-file,${CLANG_ORDER_FILE}""); elseif (LLVM_LINKER_IS_LLD); set(LINKER_ORDER_FILE_OPTION ""-Wl,--symbol-ordering-file,${CLANG_ORDER_FILE}""); endif(). # This is a test to ensure the actual order file works with the linker.; llvm_check_linker_flag(CXX ${LINKER_ORDER_FILE_OPTION} LINKER_ORDER_FILE_WORKS). # Passing an empty order file disables some linker layout optimizations.; # To work around this and enable workflows for re-linking when the order file; # changes we check during configuration if the file is empty, and make it a; # configuration dependency.; file(READ ${CLANG_ORDER_FILE} ORDER_FILE LIMIT 20); if(""${ORDER_FILE}"" STREQUAL ""\n""); set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS ${CLANG_ORDER_FILE}); elseif(LINKER_ORDER_FILE_WORKS); target_link_libraries(clang PRIVATE ${LINKER_ORDER_FILE_OPTION}); set_target_properties(clang PROPERTIES LINK_DEPENDS ${CLANG_ORDER_FILE}); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/driver/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/CMakeLists.txt:2971,Modifiability,config,configuration,2971,"E ""${CLANG_VENDOR} clang""); else(); set(TOOL_INFO_NAME ""clang""); endif(). set(TOOL_INFO_UTI ""${CLANG_VENDOR_UTI}""); set(TOOL_INFO_VERSION ""${CLANG_VERSION}""); set(TOOL_INFO_BUILD_VERSION ""${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}""). set(TOOL_INFO_PLIST_OUT ""${CMAKE_CURRENT_BINARY_DIR}/${TOOL_INFO_PLIST}""). if(LLVM_TOOL_LLVM_DRIVER_BUILD AND clang IN_LIST LLVM_DRIVER_TOOLS); set(TARGET_NAME llvm-driver); else(); set(TARGET_NAME clang); endif(). target_link_libraries(${TARGET_NAME}; PRIVATE; ""-Wl,-sectcreate,__TEXT,__info_plist,\""${TOOL_INFO_PLIST_OUT}\""""); configure_file(""${TOOL_INFO_PLIST}.in"" ""${TOOL_INFO_PLIST_OUT}"" @ONLY). set(TOOL_INFO_UTI); set(TOOL_INFO_NAME); set(TOOL_INFO_VERSION); set(TOOL_INFO_BUILD_VERSION); endif(). if(CLANG_ORDER_FILE AND; (LLVM_LINKER_IS_APPLE OR LLVM_LINKER_IS_GOLD OR LLVM_LINKER_IS_LLD)); include(LLVMCheckLinkerFlag). if (LLVM_LINKER_IS_APPLE OR (LLVM_LINKER_IS_LLD AND APPLE)); set(LINKER_ORDER_FILE_OPTION ""-Wl,-order_file,${CLANG_ORDER_FILE}""); elseif (LLVM_LINKER_IS_GOLD); set(LINKER_ORDER_FILE_OPTION ""-Wl,--section-ordering-file,${CLANG_ORDER_FILE}""); elseif (LLVM_LINKER_IS_LLD); set(LINKER_ORDER_FILE_OPTION ""-Wl,--symbol-ordering-file,${CLANG_ORDER_FILE}""); endif(). # This is a test to ensure the actual order file works with the linker.; llvm_check_linker_flag(CXX ${LINKER_ORDER_FILE_OPTION} LINKER_ORDER_FILE_WORKS). # Passing an empty order file disables some linker layout optimizations.; # To work around this and enable workflows for re-linking when the order file; # changes we check during configuration if the file is empty, and make it a; # configuration dependency.; file(READ ${CLANG_ORDER_FILE} ORDER_FILE LIMIT 20); if(""${ORDER_FILE}"" STREQUAL ""\n""); set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS ${CLANG_ORDER_FILE}); elseif(LINKER_ORDER_FILE_WORKS); target_link_libraries(clang PRIVATE ${LINKER_ORDER_FILE_OPTION}); set_target_properties(clang PROPERTIES LINK_DEPENDS ${CLANG_ORDER_FILE}); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/driver/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/CMakeLists.txt:2797,Performance,optimiz,optimizations,2797,"E ""${CLANG_VENDOR} clang""); else(); set(TOOL_INFO_NAME ""clang""); endif(). set(TOOL_INFO_UTI ""${CLANG_VENDOR_UTI}""); set(TOOL_INFO_VERSION ""${CLANG_VERSION}""); set(TOOL_INFO_BUILD_VERSION ""${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}""). set(TOOL_INFO_PLIST_OUT ""${CMAKE_CURRENT_BINARY_DIR}/${TOOL_INFO_PLIST}""). if(LLVM_TOOL_LLVM_DRIVER_BUILD AND clang IN_LIST LLVM_DRIVER_TOOLS); set(TARGET_NAME llvm-driver); else(); set(TARGET_NAME clang); endif(). target_link_libraries(${TARGET_NAME}; PRIVATE; ""-Wl,-sectcreate,__TEXT,__info_plist,\""${TOOL_INFO_PLIST_OUT}\""""); configure_file(""${TOOL_INFO_PLIST}.in"" ""${TOOL_INFO_PLIST_OUT}"" @ONLY). set(TOOL_INFO_UTI); set(TOOL_INFO_NAME); set(TOOL_INFO_VERSION); set(TOOL_INFO_BUILD_VERSION); endif(). if(CLANG_ORDER_FILE AND; (LLVM_LINKER_IS_APPLE OR LLVM_LINKER_IS_GOLD OR LLVM_LINKER_IS_LLD)); include(LLVMCheckLinkerFlag). if (LLVM_LINKER_IS_APPLE OR (LLVM_LINKER_IS_LLD AND APPLE)); set(LINKER_ORDER_FILE_OPTION ""-Wl,-order_file,${CLANG_ORDER_FILE}""); elseif (LLVM_LINKER_IS_GOLD); set(LINKER_ORDER_FILE_OPTION ""-Wl,--section-ordering-file,${CLANG_ORDER_FILE}""); elseif (LLVM_LINKER_IS_LLD); set(LINKER_ORDER_FILE_OPTION ""-Wl,--symbol-ordering-file,${CLANG_ORDER_FILE}""); endif(). # This is a test to ensure the actual order file works with the linker.; llvm_check_linker_flag(CXX ${LINKER_ORDER_FILE_OPTION} LINKER_ORDER_FILE_WORKS). # Passing an empty order file disables some linker layout optimizations.; # To work around this and enable workflows for re-linking when the order file; # changes we check during configuration if the file is empty, and make it a; # configuration dependency.; file(READ ${CLANG_ORDER_FILE} ORDER_FILE LIMIT 20); if(""${ORDER_FILE}"" STREQUAL ""\n""); set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS ${CLANG_ORDER_FILE}); elseif(LINKER_ORDER_FILE_WORKS); target_link_libraries(clang PRIVATE ${LINKER_ORDER_FILE_OPTION}); set_target_properties(clang PROPERTIES LINK_DEPENDS ${CLANG_ORDER_FILE}); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/driver/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/CMakeLists.txt:2597,Testability,test,test,2597,"E ""${CLANG_VENDOR} clang""); else(); set(TOOL_INFO_NAME ""clang""); endif(). set(TOOL_INFO_UTI ""${CLANG_VENDOR_UTI}""); set(TOOL_INFO_VERSION ""${CLANG_VERSION}""); set(TOOL_INFO_BUILD_VERSION ""${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}""). set(TOOL_INFO_PLIST_OUT ""${CMAKE_CURRENT_BINARY_DIR}/${TOOL_INFO_PLIST}""). if(LLVM_TOOL_LLVM_DRIVER_BUILD AND clang IN_LIST LLVM_DRIVER_TOOLS); set(TARGET_NAME llvm-driver); else(); set(TARGET_NAME clang); endif(). target_link_libraries(${TARGET_NAME}; PRIVATE; ""-Wl,-sectcreate,__TEXT,__info_plist,\""${TOOL_INFO_PLIST_OUT}\""""); configure_file(""${TOOL_INFO_PLIST}.in"" ""${TOOL_INFO_PLIST_OUT}"" @ONLY). set(TOOL_INFO_UTI); set(TOOL_INFO_NAME); set(TOOL_INFO_VERSION); set(TOOL_INFO_BUILD_VERSION); endif(). if(CLANG_ORDER_FILE AND; (LLVM_LINKER_IS_APPLE OR LLVM_LINKER_IS_GOLD OR LLVM_LINKER_IS_LLD)); include(LLVMCheckLinkerFlag). if (LLVM_LINKER_IS_APPLE OR (LLVM_LINKER_IS_LLD AND APPLE)); set(LINKER_ORDER_FILE_OPTION ""-Wl,-order_file,${CLANG_ORDER_FILE}""); elseif (LLVM_LINKER_IS_GOLD); set(LINKER_ORDER_FILE_OPTION ""-Wl,--section-ordering-file,${CLANG_ORDER_FILE}""); elseif (LLVM_LINKER_IS_LLD); set(LINKER_ORDER_FILE_OPTION ""-Wl,--symbol-ordering-file,${CLANG_ORDER_FILE}""); endif(). # This is a test to ensure the actual order file works with the linker.; llvm_check_linker_flag(CXX ${LINKER_ORDER_FILE_OPTION} LINKER_ORDER_FILE_WORKS). # Passing an empty order file disables some linker layout optimizations.; # To work around this and enable workflows for re-linking when the order file; # changes we check during configuration if the file is empty, and make it a; # configuration dependency.; file(READ ${CLANG_ORDER_FILE} ORDER_FILE LIMIT 20); if(""${ORDER_FILE}"" STREQUAL ""\n""); set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS ${CLANG_ORDER_FILE}); elseif(LINKER_ORDER_FILE_WORKS); target_link_libraries(clang PRIVATE ${LINKER_ORDER_FILE_OPTION}); set_target_properties(clang PROPERTIES LINK_DEPENDS ${CLANG_ORDER_FILE}); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/driver/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CMakeLists.txt:26,Deployability,update,updated,26,"# The SOVERSION should be updated only if a change is made to the libclang; # ABI, and when it is updated, it should be updated to the current; # LLVM_VERSION_MAJOR.; # Please also see clang/tools/libclang/libclang.map. # This option defaults to CLANG_FORCE_MATCHING_LIBCLANG_SOVERSION; # to ON - which means that it by default matches CLANG_VERSION_MAJOR; #; # TODO: This should probably not be a option going forward but we; # we should commit to a way to do it. But due to getting this out; # in LLVM 15.x we opted for a option.; set(LIBCLANG_SOVERSION_ARG); if(NOT CLANG_FORCE_MATCHING_LIBCLANG_SOVERSION); set(LIBCLANG_SOVERSION_ARG SOVERSION 13); endif(). # TODO: harmonize usage of LIBCLANG_SOVERSION / LIBCLANG_LIBARY_VERSION; # below; this was added under time-pressure to avoid reverting the; # better default from LLVM 14 for LLVM 15.0.0-rc3, hence no time; # to clean up previous inconsistencies. set(SOURCES; ARCMigrate.cpp; BuildSystem.cpp; CIndex.cpp; CIndexCXX.cpp; CIndexCodeCompletion.cpp; CIndexDiagnostic.cpp; CIndexHigh.cpp; CIndexInclusionStack.cpp; CIndexUSRs.cpp; CIndexer.cpp; CXComment.cpp; CXCursor.cpp; CXExtractAPI.cpp; CXIndexDataConsumer.cpp; CXCompilationDatabase.cpp; CXLoadedDiagnostic.cpp; CXSourceLocation.cpp; CXStoredDiagnostic.cpp; CXString.cpp; CXType.cpp; Indexing.cpp; FatalErrorHandler.cpp; Rewrite.cpp. ADDITIONAL_HEADERS; CIndexDiagnostic.h; CIndexer.h; CXCursor.h; CXLoadedDiagnostic.h; CXSourceLocation.h; CXString.h; CXTranslationUnit.h; CXType.h; Index_Internal.h; ../../include/clang-c/Index.h; ). set(LIBS; clangAST; clangBasic; clangDriver; clangExtractAPI; clangFrontend; clangIndex; clangLex; clangRewrite; clangSema; clangSerialization; clangTooling; ). if (CLANG_ENABLE_ARCMT); list(APPEND LIBS clangARCMigrate); endif (). if (HAVE_LIBDL); list(APPEND LIBS ${CMAKE_DL_LIBS}); elseif (CLANG_BUILT_STANDALONE); find_library(DL_LIBRARY_PATH dl); if (DL_LIBRARY_PATH); list(APPEND LIBS dl); endif (); endif (). option(LIBCLANG_BUILD_STATIC; ""Build l",MatchSource.DOCS,interpreter/llvm-project/clang/tools/libclang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CMakeLists.txt:98,Deployability,update,updated,98,"# The SOVERSION should be updated only if a change is made to the libclang; # ABI, and when it is updated, it should be updated to the current; # LLVM_VERSION_MAJOR.; # Please also see clang/tools/libclang/libclang.map. # This option defaults to CLANG_FORCE_MATCHING_LIBCLANG_SOVERSION; # to ON - which means that it by default matches CLANG_VERSION_MAJOR; #; # TODO: This should probably not be a option going forward but we; # we should commit to a way to do it. But due to getting this out; # in LLVM 15.x we opted for a option.; set(LIBCLANG_SOVERSION_ARG); if(NOT CLANG_FORCE_MATCHING_LIBCLANG_SOVERSION); set(LIBCLANG_SOVERSION_ARG SOVERSION 13); endif(). # TODO: harmonize usage of LIBCLANG_SOVERSION / LIBCLANG_LIBARY_VERSION; # below; this was added under time-pressure to avoid reverting the; # better default from LLVM 14 for LLVM 15.0.0-rc3, hence no time; # to clean up previous inconsistencies. set(SOURCES; ARCMigrate.cpp; BuildSystem.cpp; CIndex.cpp; CIndexCXX.cpp; CIndexCodeCompletion.cpp; CIndexDiagnostic.cpp; CIndexHigh.cpp; CIndexInclusionStack.cpp; CIndexUSRs.cpp; CIndexer.cpp; CXComment.cpp; CXCursor.cpp; CXExtractAPI.cpp; CXIndexDataConsumer.cpp; CXCompilationDatabase.cpp; CXLoadedDiagnostic.cpp; CXSourceLocation.cpp; CXStoredDiagnostic.cpp; CXString.cpp; CXType.cpp; Indexing.cpp; FatalErrorHandler.cpp; Rewrite.cpp. ADDITIONAL_HEADERS; CIndexDiagnostic.h; CIndexer.h; CXCursor.h; CXLoadedDiagnostic.h; CXSourceLocation.h; CXString.h; CXTranslationUnit.h; CXType.h; Index_Internal.h; ../../include/clang-c/Index.h; ). set(LIBS; clangAST; clangBasic; clangDriver; clangExtractAPI; clangFrontend; clangIndex; clangLex; clangRewrite; clangSema; clangSerialization; clangTooling; ). if (CLANG_ENABLE_ARCMT); list(APPEND LIBS clangARCMigrate); endif (). if (HAVE_LIBDL); list(APPEND LIBS ${CMAKE_DL_LIBS}); elseif (CLANG_BUILT_STANDALONE); find_library(DL_LIBRARY_PATH dl); if (DL_LIBRARY_PATH); list(APPEND LIBS dl); endif (); endif (). option(LIBCLANG_BUILD_STATIC; ""Build l",MatchSource.DOCS,interpreter/llvm-project/clang/tools/libclang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CMakeLists.txt:120,Deployability,update,updated,120,"# The SOVERSION should be updated only if a change is made to the libclang; # ABI, and when it is updated, it should be updated to the current; # LLVM_VERSION_MAJOR.; # Please also see clang/tools/libclang/libclang.map. # This option defaults to CLANG_FORCE_MATCHING_LIBCLANG_SOVERSION; # to ON - which means that it by default matches CLANG_VERSION_MAJOR; #; # TODO: This should probably not be a option going forward but we; # we should commit to a way to do it. But due to getting this out; # in LLVM 15.x we opted for a option.; set(LIBCLANG_SOVERSION_ARG); if(NOT CLANG_FORCE_MATCHING_LIBCLANG_SOVERSION); set(LIBCLANG_SOVERSION_ARG SOVERSION 13); endif(). # TODO: harmonize usage of LIBCLANG_SOVERSION / LIBCLANG_LIBARY_VERSION; # below; this was added under time-pressure to avoid reverting the; # better default from LLVM 14 for LLVM 15.0.0-rc3, hence no time; # to clean up previous inconsistencies. set(SOURCES; ARCMigrate.cpp; BuildSystem.cpp; CIndex.cpp; CIndexCXX.cpp; CIndexCodeCompletion.cpp; CIndexDiagnostic.cpp; CIndexHigh.cpp; CIndexInclusionStack.cpp; CIndexUSRs.cpp; CIndexer.cpp; CXComment.cpp; CXCursor.cpp; CXExtractAPI.cpp; CXIndexDataConsumer.cpp; CXCompilationDatabase.cpp; CXLoadedDiagnostic.cpp; CXSourceLocation.cpp; CXStoredDiagnostic.cpp; CXString.cpp; CXType.cpp; Indexing.cpp; FatalErrorHandler.cpp; Rewrite.cpp. ADDITIONAL_HEADERS; CIndexDiagnostic.h; CIndexer.h; CXCursor.h; CXLoadedDiagnostic.h; CXSourceLocation.h; CXString.h; CXTranslationUnit.h; CXType.h; Index_Internal.h; ../../include/clang-c/Index.h; ). set(LIBS; clangAST; clangBasic; clangDriver; clangExtractAPI; clangFrontend; clangIndex; clangLex; clangRewrite; clangSema; clangSerialization; clangTooling; ). if (CLANG_ENABLE_ARCMT); list(APPEND LIBS clangARCMigrate); endif (). if (HAVE_LIBDL); list(APPEND LIBS ${CMAKE_DL_LIBS}); elseif (CLANG_BUILT_STANDALONE); find_library(DL_LIBRARY_PATH dl); if (DL_LIBRARY_PATH); list(APPEND LIBS dl); endif (); endif (). option(LIBCLANG_BUILD_STATIC; ""Build l",MatchSource.DOCS,interpreter/llvm-project/clang/tools/libclang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CMakeLists.txt:6132,Deployability,install,install,6132,"SION_SCRIPT_COMPAT); target_link_options(libclang PRIVATE ""-Wl,--version-script,${CMAKE_CURRENT_SOURCE_DIR}/libclang.map""); target_link_options(libclang PRIVATE ""-Wl,-z,gnu-version-script-compat""); else(); target_link_options(libclang PRIVATE ""-Wl,-M,${CMAKE_CURRENT_SOURCE_DIR}/libclang.map""); endif(); else(); target_link_options(libclang PRIVATE ""-Wl,--version-script,${CMAKE_CURRENT_SOURCE_DIR}/libclang.map""); endif(); # Ensure that libclang.so gets rebuilt when the linker script changes.; set_property(SOURCE ARCMigrate.cpp APPEND PROPERTY; OBJECT_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/libclang.map). set_target_properties(libclang PROPERTIES; VERSION ${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}${LLVM_VERSION_SUFFIX}; ${LIBCLANG_SOVERSION_ARG}); endif(); endif(). if(INTERNAL_INSTALL_PREFIX); set(LIBCLANG_HEADERS_INSTALL_DESTINATION ""${INTERNAL_INSTALL_PREFIX}/include""); else(); set(LIBCLANG_HEADERS_INSTALL_DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""); endif(). install(DIRECTORY ../../include/clang-c; COMPONENT libclang-headers; DESTINATION ""${LIBCLANG_HEADERS_INSTALL_DESTINATION}""; FILES_MATCHING; PATTERN ""*.h""; ). # LLVM_DISTRIBUTION_COMPONENTS requires that each component have both a; # component and an install-component target, so add a dummy libclang-headers; # target to allow using it in LLVM_DISTRIBUTION_COMPONENTS.; add_custom_target(libclang-headers); set_target_properties(libclang-headers PROPERTIES FOLDER ""Misc""). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-libclang-headers; COMPONENT libclang-headers); endif(). # Create a target to install the python bindings to make them easier to; # distribute. Since the bindings are over libclang, which is installed; # unbundled to the clang version, follow suit.; foreach(PythonVersion ${CLANG_PYTHON_BINDINGS_VERSIONS}); install(DIRECTORY; ${CMAKE_CURRENT_SOURCE_DIR}/../../bindings/python/clang; COMPONENT; libclang-python-bindings; DESTINATION; ""lib${LLVM_LIBDIR_SUFFIX}/python${PythonVers",MatchSource.DOCS,interpreter/llvm-project/clang/tools/libclang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CMakeLists.txt:6382,Deployability,install,install-component,6382,"_link_options(libclang PRIVATE ""-Wl,-M,${CMAKE_CURRENT_SOURCE_DIR}/libclang.map""); endif(); else(); target_link_options(libclang PRIVATE ""-Wl,--version-script,${CMAKE_CURRENT_SOURCE_DIR}/libclang.map""); endif(); # Ensure that libclang.so gets rebuilt when the linker script changes.; set_property(SOURCE ARCMigrate.cpp APPEND PROPERTY; OBJECT_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/libclang.map). set_target_properties(libclang PROPERTIES; VERSION ${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}${LLVM_VERSION_SUFFIX}; ${LIBCLANG_SOVERSION_ARG}); endif(); endif(). if(INTERNAL_INSTALL_PREFIX); set(LIBCLANG_HEADERS_INSTALL_DESTINATION ""${INTERNAL_INSTALL_PREFIX}/include""); else(); set(LIBCLANG_HEADERS_INSTALL_DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""); endif(). install(DIRECTORY ../../include/clang-c; COMPONENT libclang-headers; DESTINATION ""${LIBCLANG_HEADERS_INSTALL_DESTINATION}""; FILES_MATCHING; PATTERN ""*.h""; ). # LLVM_DISTRIBUTION_COMPONENTS requires that each component have both a; # component and an install-component target, so add a dummy libclang-headers; # target to allow using it in LLVM_DISTRIBUTION_COMPONENTS.; add_custom_target(libclang-headers); set_target_properties(libclang-headers PROPERTIES FOLDER ""Misc""). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-libclang-headers; COMPONENT libclang-headers); endif(). # Create a target to install the python bindings to make them easier to; # distribute. Since the bindings are over libclang, which is installed; # unbundled to the clang version, follow suit.; foreach(PythonVersion ${CLANG_PYTHON_BINDINGS_VERSIONS}); install(DIRECTORY; ${CMAKE_CURRENT_SOURCE_DIR}/../../bindings/python/clang; COMPONENT; libclang-python-bindings; DESTINATION; ""lib${LLVM_LIBDIR_SUFFIX}/python${PythonVersion}/site-packages""); endforeach(); if(NOT LLVM_ENABLE_IDE); add_custom_target(libclang-python-bindings); add_llvm_install_targets(install-libclang-python-bindings; COMPONENT; libclang-python-bindings); endif(). ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/libclang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CMakeLists.txt:6656,Deployability,install,install-libclang-headers,6656,"_link_options(libclang PRIVATE ""-Wl,-M,${CMAKE_CURRENT_SOURCE_DIR}/libclang.map""); endif(); else(); target_link_options(libclang PRIVATE ""-Wl,--version-script,${CMAKE_CURRENT_SOURCE_DIR}/libclang.map""); endif(); # Ensure that libclang.so gets rebuilt when the linker script changes.; set_property(SOURCE ARCMigrate.cpp APPEND PROPERTY; OBJECT_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/libclang.map). set_target_properties(libclang PROPERTIES; VERSION ${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}${LLVM_VERSION_SUFFIX}; ${LIBCLANG_SOVERSION_ARG}); endif(); endif(). if(INTERNAL_INSTALL_PREFIX); set(LIBCLANG_HEADERS_INSTALL_DESTINATION ""${INTERNAL_INSTALL_PREFIX}/include""); else(); set(LIBCLANG_HEADERS_INSTALL_DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""); endif(). install(DIRECTORY ../../include/clang-c; COMPONENT libclang-headers; DESTINATION ""${LIBCLANG_HEADERS_INSTALL_DESTINATION}""; FILES_MATCHING; PATTERN ""*.h""; ). # LLVM_DISTRIBUTION_COMPONENTS requires that each component have both a; # component and an install-component target, so add a dummy libclang-headers; # target to allow using it in LLVM_DISTRIBUTION_COMPONENTS.; add_custom_target(libclang-headers); set_target_properties(libclang-headers PROPERTIES FOLDER ""Misc""). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-libclang-headers; COMPONENT libclang-headers); endif(). # Create a target to install the python bindings to make them easier to; # distribute. Since the bindings are over libclang, which is installed; # unbundled to the clang version, follow suit.; foreach(PythonVersion ${CLANG_PYTHON_BINDINGS_VERSIONS}); install(DIRECTORY; ${CMAKE_CURRENT_SOURCE_DIR}/../../bindings/python/clang; COMPONENT; libclang-python-bindings; DESTINATION; ""lib${LLVM_LIBDIR_SUFFIX}/python${PythonVersion}/site-packages""); endforeach(); if(NOT LLVM_ENABLE_IDE); add_custom_target(libclang-python-bindings); add_llvm_install_targets(install-libclang-python-bindings; COMPONENT; libclang-python-bindings); endif(). ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/libclang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CMakeLists.txt:6741,Deployability,install,install,6741,"_link_options(libclang PRIVATE ""-Wl,-M,${CMAKE_CURRENT_SOURCE_DIR}/libclang.map""); endif(); else(); target_link_options(libclang PRIVATE ""-Wl,--version-script,${CMAKE_CURRENT_SOURCE_DIR}/libclang.map""); endif(); # Ensure that libclang.so gets rebuilt when the linker script changes.; set_property(SOURCE ARCMigrate.cpp APPEND PROPERTY; OBJECT_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/libclang.map). set_target_properties(libclang PROPERTIES; VERSION ${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}${LLVM_VERSION_SUFFIX}; ${LIBCLANG_SOVERSION_ARG}); endif(); endif(). if(INTERNAL_INSTALL_PREFIX); set(LIBCLANG_HEADERS_INSTALL_DESTINATION ""${INTERNAL_INSTALL_PREFIX}/include""); else(); set(LIBCLANG_HEADERS_INSTALL_DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""); endif(). install(DIRECTORY ../../include/clang-c; COMPONENT libclang-headers; DESTINATION ""${LIBCLANG_HEADERS_INSTALL_DESTINATION}""; FILES_MATCHING; PATTERN ""*.h""; ). # LLVM_DISTRIBUTION_COMPONENTS requires that each component have both a; # component and an install-component target, so add a dummy libclang-headers; # target to allow using it in LLVM_DISTRIBUTION_COMPONENTS.; add_custom_target(libclang-headers); set_target_properties(libclang-headers PROPERTIES FOLDER ""Misc""). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-libclang-headers; COMPONENT libclang-headers); endif(). # Create a target to install the python bindings to make them easier to; # distribute. Since the bindings are over libclang, which is installed; # unbundled to the clang version, follow suit.; foreach(PythonVersion ${CLANG_PYTHON_BINDINGS_VERSIONS}); install(DIRECTORY; ${CMAKE_CURRENT_SOURCE_DIR}/../../bindings/python/clang; COMPONENT; libclang-python-bindings; DESTINATION; ""lib${LLVM_LIBDIR_SUFFIX}/python${PythonVersion}/site-packages""); endforeach(); if(NOT LLVM_ENABLE_IDE); add_custom_target(libclang-python-bindings); add_llvm_install_targets(install-libclang-python-bindings; COMPONENT; libclang-python-bindings); endif(). ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/libclang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CMakeLists.txt:6854,Deployability,install,installed,6854,"_link_options(libclang PRIVATE ""-Wl,-M,${CMAKE_CURRENT_SOURCE_DIR}/libclang.map""); endif(); else(); target_link_options(libclang PRIVATE ""-Wl,--version-script,${CMAKE_CURRENT_SOURCE_DIR}/libclang.map""); endif(); # Ensure that libclang.so gets rebuilt when the linker script changes.; set_property(SOURCE ARCMigrate.cpp APPEND PROPERTY; OBJECT_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/libclang.map). set_target_properties(libclang PROPERTIES; VERSION ${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}${LLVM_VERSION_SUFFIX}; ${LIBCLANG_SOVERSION_ARG}); endif(); endif(). if(INTERNAL_INSTALL_PREFIX); set(LIBCLANG_HEADERS_INSTALL_DESTINATION ""${INTERNAL_INSTALL_PREFIX}/include""); else(); set(LIBCLANG_HEADERS_INSTALL_DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""); endif(). install(DIRECTORY ../../include/clang-c; COMPONENT libclang-headers; DESTINATION ""${LIBCLANG_HEADERS_INSTALL_DESTINATION}""; FILES_MATCHING; PATTERN ""*.h""; ). # LLVM_DISTRIBUTION_COMPONENTS requires that each component have both a; # component and an install-component target, so add a dummy libclang-headers; # target to allow using it in LLVM_DISTRIBUTION_COMPONENTS.; add_custom_target(libclang-headers); set_target_properties(libclang-headers PROPERTIES FOLDER ""Misc""). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-libclang-headers; COMPONENT libclang-headers); endif(). # Create a target to install the python bindings to make them easier to; # distribute. Since the bindings are over libclang, which is installed; # unbundled to the clang version, follow suit.; foreach(PythonVersion ${CLANG_PYTHON_BINDINGS_VERSIONS}); install(DIRECTORY; ${CMAKE_CURRENT_SOURCE_DIR}/../../bindings/python/clang; COMPONENT; libclang-python-bindings; DESTINATION; ""lib${LLVM_LIBDIR_SUFFIX}/python${PythonVersion}/site-packages""); endforeach(); if(NOT LLVM_ENABLE_IDE); add_custom_target(libclang-python-bindings); add_llvm_install_targets(install-libclang-python-bindings; COMPONENT; libclang-python-bindings); endif(). ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/libclang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CMakeLists.txt:6971,Deployability,install,install,6971,"_link_options(libclang PRIVATE ""-Wl,-M,${CMAKE_CURRENT_SOURCE_DIR}/libclang.map""); endif(); else(); target_link_options(libclang PRIVATE ""-Wl,--version-script,${CMAKE_CURRENT_SOURCE_DIR}/libclang.map""); endif(); # Ensure that libclang.so gets rebuilt when the linker script changes.; set_property(SOURCE ARCMigrate.cpp APPEND PROPERTY; OBJECT_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/libclang.map). set_target_properties(libclang PROPERTIES; VERSION ${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}${LLVM_VERSION_SUFFIX}; ${LIBCLANG_SOVERSION_ARG}); endif(); endif(). if(INTERNAL_INSTALL_PREFIX); set(LIBCLANG_HEADERS_INSTALL_DESTINATION ""${INTERNAL_INSTALL_PREFIX}/include""); else(); set(LIBCLANG_HEADERS_INSTALL_DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""); endif(). install(DIRECTORY ../../include/clang-c; COMPONENT libclang-headers; DESTINATION ""${LIBCLANG_HEADERS_INSTALL_DESTINATION}""; FILES_MATCHING; PATTERN ""*.h""; ). # LLVM_DISTRIBUTION_COMPONENTS requires that each component have both a; # component and an install-component target, so add a dummy libclang-headers; # target to allow using it in LLVM_DISTRIBUTION_COMPONENTS.; add_custom_target(libclang-headers); set_target_properties(libclang-headers PROPERTIES FOLDER ""Misc""). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-libclang-headers; COMPONENT libclang-headers); endif(). # Create a target to install the python bindings to make them easier to; # distribute. Since the bindings are over libclang, which is installed; # unbundled to the clang version, follow suit.; foreach(PythonVersion ${CLANG_PYTHON_BINDINGS_VERSIONS}); install(DIRECTORY; ${CMAKE_CURRENT_SOURCE_DIR}/../../bindings/python/clang; COMPONENT; libclang-python-bindings; DESTINATION; ""lib${LLVM_LIBDIR_SUFFIX}/python${PythonVersion}/site-packages""); endforeach(); if(NOT LLVM_ENABLE_IDE); add_custom_target(libclang-python-bindings); add_llvm_install_targets(install-libclang-python-bindings; COMPONENT; libclang-python-bindings); endif(). ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/libclang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CMakeLists.txt:7272,Deployability,install,install-libclang-python-bindings,7272,"_link_options(libclang PRIVATE ""-Wl,-M,${CMAKE_CURRENT_SOURCE_DIR}/libclang.map""); endif(); else(); target_link_options(libclang PRIVATE ""-Wl,--version-script,${CMAKE_CURRENT_SOURCE_DIR}/libclang.map""); endif(); # Ensure that libclang.so gets rebuilt when the linker script changes.; set_property(SOURCE ARCMigrate.cpp APPEND PROPERTY; OBJECT_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/libclang.map). set_target_properties(libclang PROPERTIES; VERSION ${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}${LLVM_VERSION_SUFFIX}; ${LIBCLANG_SOVERSION_ARG}); endif(); endif(). if(INTERNAL_INSTALL_PREFIX); set(LIBCLANG_HEADERS_INSTALL_DESTINATION ""${INTERNAL_INSTALL_PREFIX}/include""); else(); set(LIBCLANG_HEADERS_INSTALL_DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""); endif(). install(DIRECTORY ../../include/clang-c; COMPONENT libclang-headers; DESTINATION ""${LIBCLANG_HEADERS_INSTALL_DESTINATION}""; FILES_MATCHING; PATTERN ""*.h""; ). # LLVM_DISTRIBUTION_COMPONENTS requires that each component have both a; # component and an install-component target, so add a dummy libclang-headers; # target to allow using it in LLVM_DISTRIBUTION_COMPONENTS.; add_custom_target(libclang-headers); set_target_properties(libclang-headers PROPERTIES FOLDER ""Misc""). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-libclang-headers; COMPONENT libclang-headers); endif(). # Create a target to install the python bindings to make them easier to; # distribute. Since the bindings are over libclang, which is installed; # unbundled to the clang version, follow suit.; foreach(PythonVersion ${CLANG_PYTHON_BINDINGS_VERSIONS}); install(DIRECTORY; ${CMAKE_CURRENT_SOURCE_DIR}/../../bindings/python/clang; COMPONENT; libclang-python-bindings; DESTINATION; ""lib${LLVM_LIBDIR_SUFFIX}/python${PythonVersion}/site-packages""); endforeach(); if(NOT LLVM_ENABLE_IDE); add_custom_target(libclang-python-bindings); add_llvm_install_targets(install-libclang-python-bindings; COMPONENT; libclang-python-bindings); endif(). ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/libclang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CMakeLists.txt:782,Safety,avoid,avoid,782,"# The SOVERSION should be updated only if a change is made to the libclang; # ABI, and when it is updated, it should be updated to the current; # LLVM_VERSION_MAJOR.; # Please also see clang/tools/libclang/libclang.map. # This option defaults to CLANG_FORCE_MATCHING_LIBCLANG_SOVERSION; # to ON - which means that it by default matches CLANG_VERSION_MAJOR; #; # TODO: This should probably not be a option going forward but we; # we should commit to a way to do it. But due to getting this out; # in LLVM 15.x we opted for a option.; set(LIBCLANG_SOVERSION_ARG); if(NOT CLANG_FORCE_MATCHING_LIBCLANG_SOVERSION); set(LIBCLANG_SOVERSION_ARG SOVERSION 13); endif(). # TODO: harmonize usage of LIBCLANG_SOVERSION / LIBCLANG_LIBARY_VERSION; # below; this was added under time-pressure to avoid reverting the; # better default from LLVM 14 for LLVM 15.0.0-rc3, hence no time; # to clean up previous inconsistencies. set(SOURCES; ARCMigrate.cpp; BuildSystem.cpp; CIndex.cpp; CIndexCXX.cpp; CIndexCodeCompletion.cpp; CIndexDiagnostic.cpp; CIndexHigh.cpp; CIndexInclusionStack.cpp; CIndexUSRs.cpp; CIndexer.cpp; CXComment.cpp; CXCursor.cpp; CXExtractAPI.cpp; CXIndexDataConsumer.cpp; CXCompilationDatabase.cpp; CXLoadedDiagnostic.cpp; CXSourceLocation.cpp; CXStoredDiagnostic.cpp; CXString.cpp; CXType.cpp; Indexing.cpp; FatalErrorHandler.cpp; Rewrite.cpp. ADDITIONAL_HEADERS; CIndexDiagnostic.h; CIndexer.h; CXCursor.h; CXLoadedDiagnostic.h; CXSourceLocation.h; CXString.h; CXTranslationUnit.h; CXType.h; Index_Internal.h; ../../include/clang-c/Index.h; ). set(LIBS; clangAST; clangBasic; clangDriver; clangExtractAPI; clangFrontend; clangIndex; clangLex; clangRewrite; clangSema; clangSerialization; clangTooling; ). if (CLANG_ENABLE_ARCMT); list(APPEND LIBS clangARCMigrate); endif (). if (HAVE_LIBDL); list(APPEND LIBS ${CMAKE_DL_LIBS}); elseif (CLANG_BUILT_STANDALONE); find_library(DL_LIBRARY_PATH dl); if (DL_LIBRARY_PATH); list(APPEND LIBS dl); endif (); endif (). option(LIBCLANG_BUILD_STATIC; ""Build l",MatchSource.DOCS,interpreter/llvm-project/clang/tools/libclang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build/CMakeLists.txt:893,Deployability,install,install,893,"option(CLANG_INSTALL_SCANBUILD ""Install the scan-build tool"" ON). include(GNUInstallDirs). if (WIN32 AND NOT CYGWIN); set(BinFiles; scan-build; scan-build.bat; 	); set(LibexecFiles; ccc-analyzer; c++-analyzer; ccc-analyzer.bat; c++-analyzer.bat; 	); else(); set(BinFiles; scan-build; 	); set(LibexecFiles; ccc-analyzer; c++-analyzer; 	); if (APPLE); list(APPEND BinFiles; set-xcode-analyzer; 	 ); endif(); endif(). set(ManPages; scan-build.1). set(ShareFiles; scanview.css; sorttable.js). if(CLANG_INSTALL_SCANBUILD); foreach(BinFile ${BinFiles}); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/bin/${BinFile}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/bin; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/bin/${BinFile}; ${CMAKE_BINARY_DIR}/bin/; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/bin/${BinFile}); list(APPEND Depends ${CMAKE_BINARY_DIR}/bin/${BinFile}); install(PROGRAMS bin/${BinFile}; DESTINATION ""${CMAKE_INSTALL_BINDIR}""; COMPONENT scan-build); endforeach(). foreach(LibexecFile ${LibexecFiles}); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/libexec/${LibexecFile}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/libexec; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/libexec/${LibexecFile}; ${CMAKE_BINARY_DIR}/libexec/; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/libexec/${LibexecFile}); list(APPEND Depends ${CMAKE_BINARY_DIR}/libexec/${LibexecFile}); install(PROGRAMS libexec/${LibexecFile}; DESTINATION ""${CMAKE_INSTALL_LIBEXECDIR}""; COMPONENT scan-build); endforeach(). foreach(ManPage ${ManPages}); add_custom_command(OUTPUT ""${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_MANDIR}/man1/${ManPage}""; COMMAND ${CMAKE_COMMAND} -E make_directory; ""${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_MANDIR}/man1""; COMMAND ${CMAKE_COMMAND} -E copy; ""${CMAKE_CURRENT_SOURCE_DIR}/man/${ManPage}""; ""${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_MANDIR}/man1/""; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/man/${ManPage}); list(APPEND Depends ""${CMAKE_BINARY_DIR}/${CMAKE_INSTA",MatchSource.DOCS,interpreter/llvm-project/clang/tools/scan-build/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build/CMakeLists.txt:1425,Deployability,install,install,1425,"can-build; 	); set(LibexecFiles; ccc-analyzer; c++-analyzer; 	); if (APPLE); list(APPEND BinFiles; set-xcode-analyzer; 	 ); endif(); endif(). set(ManPages; scan-build.1). set(ShareFiles; scanview.css; sorttable.js). if(CLANG_INSTALL_SCANBUILD); foreach(BinFile ${BinFiles}); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/bin/${BinFile}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/bin; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/bin/${BinFile}; ${CMAKE_BINARY_DIR}/bin/; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/bin/${BinFile}); list(APPEND Depends ${CMAKE_BINARY_DIR}/bin/${BinFile}); install(PROGRAMS bin/${BinFile}; DESTINATION ""${CMAKE_INSTALL_BINDIR}""; COMPONENT scan-build); endforeach(). foreach(LibexecFile ${LibexecFiles}); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/libexec/${LibexecFile}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/libexec; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/libexec/${LibexecFile}; ${CMAKE_BINARY_DIR}/libexec/; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/libexec/${LibexecFile}); list(APPEND Depends ${CMAKE_BINARY_DIR}/libexec/${LibexecFile}); install(PROGRAMS libexec/${LibexecFile}; DESTINATION ""${CMAKE_INSTALL_LIBEXECDIR}""; COMPONENT scan-build); endforeach(). foreach(ManPage ${ManPages}); add_custom_command(OUTPUT ""${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_MANDIR}/man1/${ManPage}""; COMMAND ${CMAKE_COMMAND} -E make_directory; ""${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_MANDIR}/man1""; COMMAND ${CMAKE_COMMAND} -E copy; ""${CMAKE_CURRENT_SOURCE_DIR}/man/${ManPage}""; ""${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_MANDIR}/man1/""; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/man/${ManPage}); list(APPEND Depends ""${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_MANDIR}/man1/${ManPage}""); install(FILES man/${ManPage}; DESTINATION ""${CMAKE_INSTALL_MANDIR}/man1""; COMPONENT scan-build); endforeach(). foreach(ShareFile ${ShareFiles}); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/share/scan-build/${ShareFile}; COMMAND ${CMAKE_COMM",MatchSource.DOCS,interpreter/llvm-project/clang/tools/scan-build/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build/CMakeLists.txt:2031,Deployability,install,install,2031,"PEND Depends ${CMAKE_BINARY_DIR}/bin/${BinFile}); install(PROGRAMS bin/${BinFile}; DESTINATION ""${CMAKE_INSTALL_BINDIR}""; COMPONENT scan-build); endforeach(). foreach(LibexecFile ${LibexecFiles}); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/libexec/${LibexecFile}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/libexec; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/libexec/${LibexecFile}; ${CMAKE_BINARY_DIR}/libexec/; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/libexec/${LibexecFile}); list(APPEND Depends ${CMAKE_BINARY_DIR}/libexec/${LibexecFile}); install(PROGRAMS libexec/${LibexecFile}; DESTINATION ""${CMAKE_INSTALL_LIBEXECDIR}""; COMPONENT scan-build); endforeach(). foreach(ManPage ${ManPages}); add_custom_command(OUTPUT ""${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_MANDIR}/man1/${ManPage}""; COMMAND ${CMAKE_COMMAND} -E make_directory; ""${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_MANDIR}/man1""; COMMAND ${CMAKE_COMMAND} -E copy; ""${CMAKE_CURRENT_SOURCE_DIR}/man/${ManPage}""; ""${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_MANDIR}/man1/""; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/man/${ManPage}); list(APPEND Depends ""${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_MANDIR}/man1/${ManPage}""); install(FILES man/${ManPage}; DESTINATION ""${CMAKE_INSTALL_MANDIR}/man1""; COMPONENT scan-build); endforeach(). foreach(ShareFile ${ShareFiles}); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/share/scan-build/${ShareFile}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/share/scan-build; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/share/scan-build/${ShareFile}; ${CMAKE_BINARY_DIR}/share/scan-build/; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/share/scan-build/${ShareFile}); list(APPEND Depends ${CMAKE_BINARY_DIR}/share/scan-build/${ShareFile}); install(FILES share/scan-build/${ShareFile}; DESTINATION ""${CMAKE_INSTALL_DATADIR}/scan-build""; COMPONENT scan-build); endforeach(). add_custom_target(scan-build ALL DEPENDS ${Depends}); set_target_properties(scan-build PROPERTIES FOLDE",MatchSource.DOCS,interpreter/llvm-project/clang/tools/scan-build/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build/CMakeLists.txt:2607,Deployability,install,install,2607," endforeach(). foreach(LibexecFile ${LibexecFiles}); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/libexec/${LibexecFile}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/libexec; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/libexec/${LibexecFile}; ${CMAKE_BINARY_DIR}/libexec/; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/libexec/${LibexecFile}); list(APPEND Depends ${CMAKE_BINARY_DIR}/libexec/${LibexecFile}); install(PROGRAMS libexec/${LibexecFile}; DESTINATION ""${CMAKE_INSTALL_LIBEXECDIR}""; COMPONENT scan-build); endforeach(). foreach(ManPage ${ManPages}); add_custom_command(OUTPUT ""${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_MANDIR}/man1/${ManPage}""; COMMAND ${CMAKE_COMMAND} -E make_directory; ""${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_MANDIR}/man1""; COMMAND ${CMAKE_COMMAND} -E copy; ""${CMAKE_CURRENT_SOURCE_DIR}/man/${ManPage}""; ""${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_MANDIR}/man1/""; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/man/${ManPage}); list(APPEND Depends ""${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_MANDIR}/man1/${ManPage}""); install(FILES man/${ManPage}; DESTINATION ""${CMAKE_INSTALL_MANDIR}/man1""; COMPONENT scan-build); endforeach(). foreach(ShareFile ${ShareFiles}); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/share/scan-build/${ShareFile}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/share/scan-build; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/share/scan-build/${ShareFile}; ${CMAKE_BINARY_DIR}/share/scan-build/; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/share/scan-build/${ShareFile}); list(APPEND Depends ${CMAKE_BINARY_DIR}/share/scan-build/${ShareFile}); install(FILES share/scan-build/${ShareFile}; DESTINATION ""${CMAKE_INSTALL_DATADIR}/scan-build""; COMPONENT scan-build); endforeach(). add_custom_target(scan-build ALL DEPENDS ${Depends}); set_target_properties(scan-build PROPERTIES FOLDER ""Misc""). if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(""install-scan-build""; DEPENDS scan-build; COMPONENT scan-build); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/scan-build/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build/CMakeLists.txt:2905,Deployability,install,install-scan-build,2905," endforeach(). foreach(LibexecFile ${LibexecFiles}); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/libexec/${LibexecFile}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/libexec; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/libexec/${LibexecFile}; ${CMAKE_BINARY_DIR}/libexec/; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/libexec/${LibexecFile}); list(APPEND Depends ${CMAKE_BINARY_DIR}/libexec/${LibexecFile}); install(PROGRAMS libexec/${LibexecFile}; DESTINATION ""${CMAKE_INSTALL_LIBEXECDIR}""; COMPONENT scan-build); endforeach(). foreach(ManPage ${ManPages}); add_custom_command(OUTPUT ""${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_MANDIR}/man1/${ManPage}""; COMMAND ${CMAKE_COMMAND} -E make_directory; ""${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_MANDIR}/man1""; COMMAND ${CMAKE_COMMAND} -E copy; ""${CMAKE_CURRENT_SOURCE_DIR}/man/${ManPage}""; ""${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_MANDIR}/man1/""; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/man/${ManPage}); list(APPEND Depends ""${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_MANDIR}/man1/${ManPage}""); install(FILES man/${ManPage}; DESTINATION ""${CMAKE_INSTALL_MANDIR}/man1""; COMPONENT scan-build); endforeach(). foreach(ShareFile ${ShareFiles}); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/share/scan-build/${ShareFile}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/share/scan-build; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/share/scan-build/${ShareFile}; ${CMAKE_BINARY_DIR}/share/scan-build/; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/share/scan-build/${ShareFile}); list(APPEND Depends ${CMAKE_BINARY_DIR}/share/scan-build/${ShareFile}); install(FILES share/scan-build/${ShareFile}; DESTINATION ""${CMAKE_INSTALL_DATADIR}/scan-build""; COMPONENT scan-build); endforeach(). add_custom_target(scan-build ALL DEPENDS ${Depends}); set_target_properties(scan-build PROPERTIES FOLDER ""Misc""). if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(""install-scan-build""; DEPENDS scan-build; COMPONENT scan-build); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/scan-build/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/CMakeLists.txt:976,Deployability,install,install,976,"bScanbuild; ""__init__.py""; ""analyze.py""; ""arguments.py""; ""clang.py""; ""compilation.py""; ""intercept.py""; ""report.py""; ""shell.py""). set (LibScanbuildResources; ""scanview.css""; ""selectable.js""; ""sorttable.js""). # libear is compiled dynamically in build_libear using the specified cc; # compiler.; set (LibEar; ""__init__.py""; ""config.h.in""; ""ear.c""). foreach(BinFile ${BinFiles}); if (""${BinFile}"" STREQUAL ""scan-build""); # Need to rename scan-build to scan-build-py to prevent overwriting; # scan-build Perl implementation.; add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/bin/scan-build-py; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/bin; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/bin/scan-build; ${CMAKE_BINARY_DIR}/bin/scan-build-py; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/bin/scan-build); install (PROGRAMS ""bin/scan-build""; DESTINATION ""${CMAKE_INSTALL_BINDIR}""; RENAME scan-build-py; COMPONENT scan-build-py); list(APPEND Depends ${CMAKE_BINARY_DIR}/bin/scan-build-py); else(); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/bin/${BinFile}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/bin; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/bin/${BinFile}; ${CMAKE_BINARY_DIR}/bin/; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/bin/${BinFile}); install(PROGRAMS bin/${BinFile}; DESTINATION ""${CMAKE_INSTALL_BINDIR}""; COMPONENT scan-build-py); list(APPEND Depends ${CMAKE_BINARY_DIR}/bin/${BinFile}); endif(); endforeach(). foreach(lib ${LibExecs}); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/libexec/${lib}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/libexec; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/libexec/${lib}; ${CMAKE_BINARY_DIR}/libexec/; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/libexec/${lib}); list(APPEND Depends ${CMAKE_BINARY_DIR}/libexec/${lib}); install(PROGRAMS libexec/${lib}; DESTINATION ""${CMAKE_INSTALL_LIBEXECDIR}""; COMPONENT scan-build-py); endforeach(). foreach(lib ${LibScanbu",MatchSource.DOCS,interpreter/llvm-project/clang/tools/scan-build-py/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/CMakeLists.txt:1455,Deployability,install,install,1455,"bScanbuild; ""__init__.py""; ""analyze.py""; ""arguments.py""; ""clang.py""; ""compilation.py""; ""intercept.py""; ""report.py""; ""shell.py""). set (LibScanbuildResources; ""scanview.css""; ""selectable.js""; ""sorttable.js""). # libear is compiled dynamically in build_libear using the specified cc; # compiler.; set (LibEar; ""__init__.py""; ""config.h.in""; ""ear.c""). foreach(BinFile ${BinFiles}); if (""${BinFile}"" STREQUAL ""scan-build""); # Need to rename scan-build to scan-build-py to prevent overwriting; # scan-build Perl implementation.; add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/bin/scan-build-py; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/bin; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/bin/scan-build; ${CMAKE_BINARY_DIR}/bin/scan-build-py; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/bin/scan-build); install (PROGRAMS ""bin/scan-build""; DESTINATION ""${CMAKE_INSTALL_BINDIR}""; RENAME scan-build-py; COMPONENT scan-build-py); list(APPEND Depends ${CMAKE_BINARY_DIR}/bin/scan-build-py); else(); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/bin/${BinFile}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/bin; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/bin/${BinFile}; ${CMAKE_BINARY_DIR}/bin/; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/bin/${BinFile}); install(PROGRAMS bin/${BinFile}; DESTINATION ""${CMAKE_INSTALL_BINDIR}""; COMPONENT scan-build-py); list(APPEND Depends ${CMAKE_BINARY_DIR}/bin/${BinFile}); endif(); endforeach(). foreach(lib ${LibExecs}); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/libexec/${lib}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/libexec; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/libexec/${lib}; ${CMAKE_BINARY_DIR}/libexec/; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/libexec/${lib}); list(APPEND Depends ${CMAKE_BINARY_DIR}/libexec/${lib}); install(PROGRAMS libexec/${lib}; DESTINATION ""${CMAKE_INSTALL_LIBEXECDIR}""; COMPONENT scan-build-py); endforeach(). foreach(lib ${LibScanbu",MatchSource.DOCS,interpreter/llvm-project/clang/tools/scan-build-py/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/CMakeLists.txt:2012,Deployability,install,install,2012,"ild; ${CMAKE_BINARY_DIR}/bin/scan-build-py; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/bin/scan-build); install (PROGRAMS ""bin/scan-build""; DESTINATION ""${CMAKE_INSTALL_BINDIR}""; RENAME scan-build-py; COMPONENT scan-build-py); list(APPEND Depends ${CMAKE_BINARY_DIR}/bin/scan-build-py); else(); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/bin/${BinFile}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/bin; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/bin/${BinFile}; ${CMAKE_BINARY_DIR}/bin/; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/bin/${BinFile}); install(PROGRAMS bin/${BinFile}; DESTINATION ""${CMAKE_INSTALL_BINDIR}""; COMPONENT scan-build-py); list(APPEND Depends ${CMAKE_BINARY_DIR}/bin/${BinFile}); endif(); endforeach(). foreach(lib ${LibExecs}); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/libexec/${lib}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/libexec; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/libexec/${lib}; ${CMAKE_BINARY_DIR}/libexec/; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/libexec/${lib}); list(APPEND Depends ${CMAKE_BINARY_DIR}/libexec/${lib}); install(PROGRAMS libexec/${lib}; DESTINATION ""${CMAKE_INSTALL_LIBEXECDIR}""; COMPONENT scan-build-py); endforeach(). foreach(lib ${LibScanbuild}); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/lib/libscanbuild/${lib}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/lib; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/lib/libscanbuild; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/lib/libscanbuild/${lib}; ${CMAKE_BINARY_DIR}/lib/libscanbuild/; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/lib/libscanbuild/${lib}); list(APPEND Depends ${CMAKE_BINARY_DIR}/lib/libscanbuild/${lib}); install(FILES lib/libscanbuild/${lib}; DESTINATION lib${CLANG_LIBDIR_SUFFIX}/libscanbuild; COMPONENT scan-build-py); endforeach(). foreach(resource ${LibScanbuildResources}); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/lib/libscanbuild/resource",MatchSource.DOCS,interpreter/llvm-project/clang/tools/scan-build-py/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/CMakeLists.txt:2634,Deployability,install,install,2634,"inFile}); install(PROGRAMS bin/${BinFile}; DESTINATION ""${CMAKE_INSTALL_BINDIR}""; COMPONENT scan-build-py); list(APPEND Depends ${CMAKE_BINARY_DIR}/bin/${BinFile}); endif(); endforeach(). foreach(lib ${LibExecs}); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/libexec/${lib}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/libexec; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/libexec/${lib}; ${CMAKE_BINARY_DIR}/libexec/; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/libexec/${lib}); list(APPEND Depends ${CMAKE_BINARY_DIR}/libexec/${lib}); install(PROGRAMS libexec/${lib}; DESTINATION ""${CMAKE_INSTALL_LIBEXECDIR}""; COMPONENT scan-build-py); endforeach(). foreach(lib ${LibScanbuild}); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/lib/libscanbuild/${lib}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/lib; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/lib/libscanbuild; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/lib/libscanbuild/${lib}; ${CMAKE_BINARY_DIR}/lib/libscanbuild/; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/lib/libscanbuild/${lib}); list(APPEND Depends ${CMAKE_BINARY_DIR}/lib/libscanbuild/${lib}); install(FILES lib/libscanbuild/${lib}; DESTINATION lib${CLANG_LIBDIR_SUFFIX}/libscanbuild; COMPONENT scan-build-py); endforeach(). foreach(resource ${LibScanbuildResources}); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/lib/libscanbuild/resources/${resource}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/lib; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/lib/libscanbuild; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/lib/libscanbuild/resources; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/lib/libscanbuild/resources/${resource}; ${CMAKE_BINARY_DIR}/lib/libscanbuild/resources; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/lib/libscanbuild/resources/${resource}); list(APPEND Depends ${CMAKE_BINARY_DIR}/lib/libscanbuild/resources/${resource}); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/scan-build-py/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/CMakeLists.txt:3446,Deployability,install,install,3446,T ${CMAKE_BINARY_DIR}/lib/libscanbuild/${lib}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/lib; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/lib/libscanbuild; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/lib/libscanbuild/${lib}; ${CMAKE_BINARY_DIR}/lib/libscanbuild/; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/lib/libscanbuild/${lib}); list(APPEND Depends ${CMAKE_BINARY_DIR}/lib/libscanbuild/${lib}); install(FILES lib/libscanbuild/${lib}; DESTINATION lib${CLANG_LIBDIR_SUFFIX}/libscanbuild; COMPONENT scan-build-py); endforeach(). foreach(resource ${LibScanbuildResources}); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/lib/libscanbuild/resources/${resource}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/lib; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/lib/libscanbuild; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/lib/libscanbuild/resources; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/lib/libscanbuild/resources/${resource}; ${CMAKE_BINARY_DIR}/lib/libscanbuild/resources; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/lib/libscanbuild/resources/${resource}); list(APPEND Depends ${CMAKE_BINARY_DIR}/lib/libscanbuild/resources/${resource}); install(FILES lib/libscanbuild/resources/${resource}; DESTINATION lib${CLANG_LIBDIR_SUFFIX}/libscanbuild/resources; COMPONENT scan-build-py); endforeach(). foreach(lib ${LibEar}); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/lib/libear/${lib}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/lib; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/lib/libear; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/lib/libear/${lib}; ${CMAKE_BINARY_DIR}/lib/libear/; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/lib/libear/${lib}); list(APPEND Depends ${CMAKE_BINARY_DIR}/lib/libear/${lib}); install(FILES lib/libear/${lib}; DESTINATION lib${CLANG_LIBDIR_SUFFIX}/libear; COMPONENT scan-build-py); endforeach(),MatchSource.DOCS,interpreter/llvm-project/clang/tools/scan-build-py/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/CMakeLists.txt:4066,Deployability,install,install,4066," ${CMAKE_BINARY_DIR}/lib/libscanbuild; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/lib/libscanbuild/${lib}; ${CMAKE_BINARY_DIR}/lib/libscanbuild/; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/lib/libscanbuild/${lib}); list(APPEND Depends ${CMAKE_BINARY_DIR}/lib/libscanbuild/${lib}); install(FILES lib/libscanbuild/${lib}; DESTINATION lib${CLANG_LIBDIR_SUFFIX}/libscanbuild; COMPONENT scan-build-py); endforeach(). foreach(resource ${LibScanbuildResources}); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/lib/libscanbuild/resources/${resource}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/lib; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/lib/libscanbuild; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/lib/libscanbuild/resources; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/lib/libscanbuild/resources/${resource}; ${CMAKE_BINARY_DIR}/lib/libscanbuild/resources; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/lib/libscanbuild/resources/${resource}); list(APPEND Depends ${CMAKE_BINARY_DIR}/lib/libscanbuild/resources/${resource}); install(FILES lib/libscanbuild/resources/${resource}; DESTINATION lib${CLANG_LIBDIR_SUFFIX}/libscanbuild/resources; COMPONENT scan-build-py); endforeach(). foreach(lib ${LibEar}); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/lib/libear/${lib}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/lib; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/lib/libear; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/lib/libear/${lib}; ${CMAKE_BINARY_DIR}/lib/libear/; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/lib/libear/${lib}); list(APPEND Depends ${CMAKE_BINARY_DIR}/lib/libear/${lib}); install(FILES lib/libear/${lib}; DESTINATION lib${CLANG_LIBDIR_SUFFIX}/libear; COMPONENT scan-build-py); endforeach(). add_custom_target(scan-build-py ALL DEPENDS ${Depends}); add_llvm_install_targets(""install-scan-build-py""; DEPENDS scan-build-py; COMPONENT scan-build-py); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/scan-build-py/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/CMakeLists.txt:4268,Deployability,install,install-scan-build-py,4268," ${CMAKE_BINARY_DIR}/lib/libscanbuild; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/lib/libscanbuild/${lib}; ${CMAKE_BINARY_DIR}/lib/libscanbuild/; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/lib/libscanbuild/${lib}); list(APPEND Depends ${CMAKE_BINARY_DIR}/lib/libscanbuild/${lib}); install(FILES lib/libscanbuild/${lib}; DESTINATION lib${CLANG_LIBDIR_SUFFIX}/libscanbuild; COMPONENT scan-build-py); endforeach(). foreach(resource ${LibScanbuildResources}); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/lib/libscanbuild/resources/${resource}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/lib; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/lib/libscanbuild; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/lib/libscanbuild/resources; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/lib/libscanbuild/resources/${resource}; ${CMAKE_BINARY_DIR}/lib/libscanbuild/resources; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/lib/libscanbuild/resources/${resource}); list(APPEND Depends ${CMAKE_BINARY_DIR}/lib/libscanbuild/resources/${resource}); install(FILES lib/libscanbuild/resources/${resource}; DESTINATION lib${CLANG_LIBDIR_SUFFIX}/libscanbuild/resources; COMPONENT scan-build-py); endforeach(). foreach(lib ${LibEar}); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/lib/libear/${lib}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/lib; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/lib/libear; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/lib/libear/${lib}; ${CMAKE_BINARY_DIR}/lib/libear/; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/lib/libear/${lib}); list(APPEND Depends ${CMAKE_BINARY_DIR}/lib/libear/${lib}); install(FILES lib/libear/${lib}; DESTINATION lib${CLANG_LIBDIR_SUFFIX}/libear; COMPONENT scan-build-py); endforeach(). add_custom_target(scan-build-py ALL DEPENDS ${Depends}); add_llvm_install_targets(""install-scan-build-py""; DEPENDS scan-build-py; COMPONENT scan-build-py); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/scan-build-py/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/CMakeLists.txt:473,Modifiability,config,config,473,"set (BinFiles; ""analyze-build""; ""intercept-build""; ""scan-build""). set (LibExecs; ""analyze-c++""; ""analyze-cc""; ""intercept-c++""; ""intercept-cc""). set (LibScanbuild; ""__init__.py""; ""analyze.py""; ""arguments.py""; ""clang.py""; ""compilation.py""; ""intercept.py""; ""report.py""; ""shell.py""). set (LibScanbuildResources; ""scanview.css""; ""selectable.js""; ""sorttable.js""). # libear is compiled dynamically in build_libear using the specified cc; # compiler.; set (LibEar; ""__init__.py""; ""config.h.in""; ""ear.c""). foreach(BinFile ${BinFiles}); if (""${BinFile}"" STREQUAL ""scan-build""); # Need to rename scan-build to scan-build-py to prevent overwriting; # scan-build Perl implementation.; add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/bin/scan-build-py; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/bin; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/bin/scan-build; ${CMAKE_BINARY_DIR}/bin/scan-build-py; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/bin/scan-build); install (PROGRAMS ""bin/scan-build""; DESTINATION ""${CMAKE_INSTALL_BINDIR}""; RENAME scan-build-py; COMPONENT scan-build-py); list(APPEND Depends ${CMAKE_BINARY_DIR}/bin/scan-build-py); else(); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/bin/${BinFile}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/bin; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/bin/${BinFile}; ${CMAKE_BINARY_DIR}/bin/; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/bin/${BinFile}); install(PROGRAMS bin/${BinFile}; DESTINATION ""${CMAKE_INSTALL_BINDIR}""; COMPONENT scan-build-py); list(APPEND Depends ${CMAKE_BINARY_DIR}/bin/${BinFile}); endif(); endforeach(). foreach(lib ${LibExecs}); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/libexec/${lib}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/libexec; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/libexec/${lib}; ${CMAKE_BINARY_DIR}/libexec/; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/libexec/${lib}); list(APPEND Depends ${CMAKE_BINARY_DIR}/libexe",MatchSource.DOCS,interpreter/llvm-project/clang/tools/scan-build-py/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/CMakeLists.txt:566,Deployability,install,install,566,"option(CLANG_INSTALL_SCANVIEW ""Install the scan-view tool"" ON). set(BinFiles; scan-view). set(ShareFiles; ScanView.py; Reporter.py; startfile.py; bugcatcher.ico). if(CLANG_INSTALL_SCANVIEW); foreach(BinFile ${BinFiles}); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/bin/${BinFile}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/bin; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/bin/${BinFile}; ${CMAKE_BINARY_DIR}/bin/; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/bin/${BinFile}); list(APPEND Depends ${CMAKE_BINARY_DIR}/bin/${BinFile}); install(PROGRAMS bin/${BinFile}; DESTINATION ""${CMAKE_INSTALL_BINDIR}""; COMPONENT scan-view); endforeach(). foreach(ShareFile ${ShareFiles}); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/share/scan-view/${ShareFile}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/share/scan-view; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/share/${ShareFile}; ${CMAKE_BINARY_DIR}/share/scan-view/; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/share/${ShareFile}); list(APPEND Depends ${CMAKE_BINARY_DIR}/share/scan-view/${ShareFile}); install(FILES share/${ShareFile}; DESTINATION ""${CMAKE_INSTALL_DATADIR}/scan-view""; COMPONENT scan-view); endforeach(). add_custom_target(scan-view ALL DEPENDS ${Depends}); set_target_properties(scan-view PROPERTIES FOLDER ""Misc""). if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(""install-scan-view""; DEPENDS scan-view; COMPONENT scan-view); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/scan-view/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/CMakeLists.txt:1113,Deployability,install,install,1113,"option(CLANG_INSTALL_SCANVIEW ""Install the scan-view tool"" ON). set(BinFiles; scan-view). set(ShareFiles; ScanView.py; Reporter.py; startfile.py; bugcatcher.ico). if(CLANG_INSTALL_SCANVIEW); foreach(BinFile ${BinFiles}); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/bin/${BinFile}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/bin; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/bin/${BinFile}; ${CMAKE_BINARY_DIR}/bin/; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/bin/${BinFile}); list(APPEND Depends ${CMAKE_BINARY_DIR}/bin/${BinFile}); install(PROGRAMS bin/${BinFile}; DESTINATION ""${CMAKE_INSTALL_BINDIR}""; COMPONENT scan-view); endforeach(). foreach(ShareFile ${ShareFiles}); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/share/scan-view/${ShareFile}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/share/scan-view; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/share/${ShareFile}; ${CMAKE_BINARY_DIR}/share/scan-view/; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/share/${ShareFile}); list(APPEND Depends ${CMAKE_BINARY_DIR}/share/scan-view/${ShareFile}); install(FILES share/${ShareFile}; DESTINATION ""${CMAKE_INSTALL_DATADIR}/scan-view""; COMPONENT scan-view); endforeach(). add_custom_target(scan-view ALL DEPENDS ${Depends}); set_target_properties(scan-view PROPERTIES FOLDER ""Misc""). if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(""install-scan-view""; DEPENDS scan-view; COMPONENT scan-view); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/scan-view/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/CMakeLists.txt:1396,Deployability,install,install-scan-view,1396,"option(CLANG_INSTALL_SCANVIEW ""Install the scan-view tool"" ON). set(BinFiles; scan-view). set(ShareFiles; ScanView.py; Reporter.py; startfile.py; bugcatcher.ico). if(CLANG_INSTALL_SCANVIEW); foreach(BinFile ${BinFiles}); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/bin/${BinFile}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/bin; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/bin/${BinFile}; ${CMAKE_BINARY_DIR}/bin/; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/bin/${BinFile}); list(APPEND Depends ${CMAKE_BINARY_DIR}/bin/${BinFile}); install(PROGRAMS bin/${BinFile}; DESTINATION ""${CMAKE_INSTALL_BINDIR}""; COMPONENT scan-view); endforeach(). foreach(ShareFile ${ShareFiles}); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/share/scan-view/${ShareFile}; COMMAND ${CMAKE_COMMAND} -E make_directory; ${CMAKE_BINARY_DIR}/share/scan-view; COMMAND ${CMAKE_COMMAND} -E copy; ${CMAKE_CURRENT_SOURCE_DIR}/share/${ShareFile}; ${CMAKE_BINARY_DIR}/share/scan-view/; DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/share/${ShareFile}); list(APPEND Depends ${CMAKE_BINARY_DIR}/share/scan-view/${ShareFile}); install(FILES share/${ShareFile}; DESTINATION ""${CMAKE_INSTALL_DATADIR}/scan-view""; COMPONENT scan-view); endforeach(). add_custom_target(scan-view ALL DEPENDS ${Depends}); set_target_properties(scan-view PROPERTIES FOLDER ""Misc""). if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(""install-scan-view""; DEPENDS scan-view; COMPONENT scan-view); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/tools/scan-view/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt:1691,Availability,avail,available,1691,"t control, are controlled by, or are under common; control with that entity. For the purposes of this definition,; ""control"" means (i) the power, direct or indirect, to cause the; direction or management of such entity, whether by contract or; otherwise, or (ii) ownership of fifty percent (50%) or more of the; outstanding shares, or (iii) beneficial ownership of such entity. ""You"" (or ""Your"") shall mean an individual or Legal Entity; exercising permissions granted by this License. ""Source"" form shall mean the preferred form for making modifications,; including but not limited to software source code, documentation; source, and configuration files. ""Object"" form shall mean any form resulting from mechanical; transformation or translation of a Source form, including but; not limited to compiled object code, generated documentation,; and conversions to other media types. ""Work"" shall mean the work of authorship, whether in Source or; Object form, made available under the License, as indicated by a; copyright notice that is included in or attached to the work; (an example is provided in the Appendix below). ""Derivative Works"" shall mean any work, whether in Source or Object; form, that is based on (or derived from) the Work and for which the; editorial revisions, annotations, elaborations, or other modifications; represent, as a whole, an original work of authorship. For the purposes; of this License, Derivative Works shall not include works that remain; separable from, or merely link (or bind by name) to the interfaces of,; the Work and Derivative Works thereof. ""Contribution"" shall mean any work of authorship, including; the original version of the Work and any modifications or additions; to that Work or Derivative Works thereof, that is intentionally; submitted to Licensor for inclusion in the Work by the copyright owner; or by an individual or Legal Entity authorized to submit on behalf of; the copyright owner. For the purposes of this definition, ""submitted""; means",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt:8653,Availability,failure,failure,8653,"cing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or; agreed to in writing, Licensor provides the Work (and each; Contributor provides its Contributions) on an ""AS IS"" BASIS,; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or; implied, including, without limitation, any warranties or conditions; of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A; PARTICULAR PURPOSE. You are solely responsible for determining the; appropriateness of using or redistributing the Work and assume any; risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory,; whether in tort (including negligence), contract, or otherwise,; unless required by applicable law (such as deliberate and grossly; negligent acts) or agreed to in writing, shall any Contributor be; liable to You for damages, including any direct, indirect, special,; incidental, or consequential damages of any character arising as a; result of this License or out of the use or inability to use the; Work (including but not limited to damages for loss of goodwill,; work stoppage, computer failure or malfunction, or any and all; other commercial damages or losses), even if such Contributor; has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing; the Work or Derivative Works thereof, You may choose to offer,; and charge a fee for, acceptance of support, warranty, indemnity,; or other liability obligations and/or rights consistent with this; License. However, in accepting such obligations, You may act only; on Your own behalf and on Your sole responsibility, not on behalf; of any other Contributor, and only if You agree to indemnify,; defend, and hold each Contributor harmless for any liability; incurred by, or claims asserted against, such Contributor by reason; of your accepting any such warranty or additional liability.",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt:1363,Deployability,configurat,configuration,1363,"licenses/. TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION. 1. Definitions. ""License"" shall mean the terms and conditions for use, reproduction,; and distribution as defined by Sections 1 through 9 of this document. ""Licensor"" shall mean the copyright owner or entity authorized by; the copyright owner that is granting the License. ""Legal Entity"" shall mean the union of the acting entity and all; other entities that control, are controlled by, or are under common; control with that entity. For the purposes of this definition,; ""control"" means (i) the power, direct or indirect, to cause the; direction or management of such entity, whether by contract or; otherwise, or (ii) ownership of fifty percent (50%) or more of the; outstanding shares, or (iii) beneficial ownership of such entity. ""You"" (or ""Your"") shall mean an individual or Legal Entity; exercising permissions granted by this License. ""Source"" form shall mean the preferred form for making modifications,; including but not limited to software source code, documentation; source, and configuration files. ""Object"" form shall mean any form resulting from mechanical; transformation or translation of a Source form, including but; not limited to compiled object code, generated documentation,; and conversions to other media types. ""Work"" shall mean the work of authorship, whether in Source or; Object form, made available under the License, as indicated by a; copyright notice that is included in or attached to the work; (an example is provided in the Appendix below). ""Derivative Works"" shall mean any work, whether in Source or Object; form, that is based on (or derived from) the Work and for which the; editorial revisions, annotations, elaborations, or other modifications; represent, as a whole, an original work of authorship. For the purposes; of this License, Derivative Works shall not include works that remain; separable from, or merely link (or bind by name) to the interfaces of,; the Work and Derivative",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt:867,Energy Efficiency,power,power,867,"==============================================================================; The LLVM Project is under the Apache License v2.0 with LLVM Exceptions:; ==============================================================================. Apache License; Version 2.0, January 2004; http://www.apache.org/licenses/. TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION. 1. Definitions. ""License"" shall mean the terms and conditions for use, reproduction,; and distribution as defined by Sections 1 through 9 of this document. ""Licensor"" shall mean the copyright owner or entity authorized by; the copyright owner that is granting the License. ""Legal Entity"" shall mean the union of the acting entity and all; other entities that control, are controlled by, or are under common; control with that entity. For the purposes of this definition,; ""control"" means (i) the power, direct or indirect, to cause the; direction or management of such entity, whether by contract or; otherwise, or (ii) ownership of fifty percent (50%) or more of the; outstanding shares, or (iii) beneficial ownership of such entity. ""You"" (or ""Your"") shall mean an individual or Legal Entity; exercising permissions granted by this License. ""Source"" form shall mean the preferred form for making modifications,; including but not limited to software source code, documentation; source, and configuration files. ""Object"" form shall mean any form resulting from mechanical; transformation or translation of a Source form, including but; not limited to compiled object code, generated documentation,; and conversions to other media types. ""Work"" shall mean the work of authorship, whether in Source or; Object form, made available under the License, as indicated by a; copyright notice that is included in or attached to the work; (an example is provided in the Appendix below). ""Derivative Works"" shall mean any work, whether in Source or Object; form, that is based on (or derived from) the Work and for which the; editorial revi",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt:3558,Energy Efficiency,charge,charge,3558," or Legal Entity authorized to submit on behalf of; the copyright owner. For the purposes of this definition, ""submitted""; means any form of electronic, verbal, or written communication sent; to the Licensor or its representatives, including but not limited to; communication on electronic mailing lists, source code control systems,; and issue tracking systems that are managed by, or on behalf of, the; Licensor for the purpose of discussing and improving the Work, but; excluding communication that is conspicuously marked or otherwise; designated in writing by the copyright owner as ""Not a Contribution."". ""Contributor"" shall mean Licensor and any individual or Legal Entity; on behalf of whom a Contribution has been received by Licensor and; subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of; this License, each Contributor hereby grants to You a perpetual,; worldwide, non-exclusive, no-charge, royalty-free, irrevocable; copyright license to reproduce, prepare Derivative Works of,; publicly display, publicly perform, sublicense, and distribute the; Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of; this License, each Contributor hereby grants to You a perpetual,; worldwide, non-exclusive, no-charge, royalty-free, irrevocable; (except as stated in this section) patent license to make, have made,; use, offer to sell, sell, import, and otherwise transfer the Work,; where such license applies only to those patent claims licensable; by such Contributor that are necessarily infringed by their; Contribution(s) alone or by combination of their Contribution(s); with the Work to which such Contribution(s) was submitted. If You; institute patent litigation against any entity (including a; cross-claim or counterclaim in a lawsuit) alleging that the Work; or a Contribution incorporated within the Work constitutes direct; or contributory patent infrin",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt:3943,Energy Efficiency,charge,charge,3943,"nication that is conspicuously marked or otherwise; designated in writing by the copyright owner as ""Not a Contribution."". ""Contributor"" shall mean Licensor and any individual or Legal Entity; on behalf of whom a Contribution has been received by Licensor and; subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of; this License, each Contributor hereby grants to You a perpetual,; worldwide, non-exclusive, no-charge, royalty-free, irrevocable; copyright license to reproduce, prepare Derivative Works of,; publicly display, publicly perform, sublicense, and distribute the; Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of; this License, each Contributor hereby grants to You a perpetual,; worldwide, non-exclusive, no-charge, royalty-free, irrevocable; (except as stated in this section) patent license to make, have made,; use, offer to sell, sell, import, and otherwise transfer the Work,; where such license applies only to those patent claims licensable; by such Contributor that are necessarily infringed by their; Contribution(s) alone or by combination of their Contribution(s); with the Work to which such Contribution(s) was submitted. If You; institute patent litigation against any entity (including a; cross-claim or counterclaim in a lawsuit) alleging that the Work; or a Contribution incorporated within the Work constitutes direct; or contributory patent infringement, then any patent licenses; granted to You under this License for that Work shall terminate; as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the; Work or Derivative Works thereof in any medium, with or without; modifications, and in Source or Object form, provided that You; meet the following conditions:. (a) You must give any other recipients of the Work or; Derivative Works a copy of this License; and. (b) You must cause",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt:8946,Energy Efficiency,charge,charge,8946," of using or redistributing the Work and assume any; risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory,; whether in tort (including negligence), contract, or otherwise,; unless required by applicable law (such as deliberate and grossly; negligent acts) or agreed to in writing, shall any Contributor be; liable to You for damages, including any direct, indirect, special,; incidental, or consequential damages of any character arising as a; result of this License or out of the use or inability to use the; Work (including but not limited to damages for loss of goodwill,; work stoppage, computer failure or malfunction, or any and all; other commercial damages or losses), even if such Contributor; has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing; the Work or Derivative Works thereof, You may choose to offer,; and charge a fee for, acceptance of support, warranty, indemnity,; or other liability obligations and/or rights consistent with this; License. However, in accepting such obligations, You may act only; on Your own behalf and on Your sole responsibility, not on behalf; of any other Contributor, and only if You agree to indemnify,; defend, and hold each Contributor harmless for any liability; incurred by, or claims asserted against, such Contributor by reason; of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS. APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following; boilerplate notice, with the fields enclosed by brackets ""[]""; replaced with your own identifying information. (Don't include; the brackets!) The text should be enclosed in the appropriate; comment syntax for the file format. We also recommend that a; file or class name and description of purpose be included on the; same ""printed page"" as the copyright n",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt:12650,Energy Efficiency,charge,charge,12650,"fied clearly using at least one of two; mechanisms:; 1) It will be in a separate directory tree with its own `LICENSE.txt` or; `LICENSE` file at the top containing the specific license and restrictions; which apply to that software, or; 2) It will contain specific license and restriction terms at the top of every; file. ==============================================================================; Legacy LLVM License (https://llvm.org/docs/DeveloperPolicy.html#legacy):; ==============================================================================; University of Illinois/NCSA; Open Source License. Copyright (c) 2007-2018 University of Illinois at Urbana-Champaign.; All rights reserved. Developed by:. LLVM Team. University of Illinois at Urbana-Champaign. http://llvm.org. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal with the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:. * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimers. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimers in the documentation and/or other materials provided with the distribution. * Neither the names of the LLVM Team, University of Illinois at Urbana-Champaign, nor the names of its contributors may be used to endorse or promote products derived from this Software without specific prior written permission. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHAL",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt:959,Integrability,contract,contract,959,"==============================================================================; The LLVM Project is under the Apache License v2.0 with LLVM Exceptions:; ==============================================================================. Apache License; Version 2.0, January 2004; http://www.apache.org/licenses/. TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION. 1. Definitions. ""License"" shall mean the terms and conditions for use, reproduction,; and distribution as defined by Sections 1 through 9 of this document. ""Licensor"" shall mean the copyright owner or entity authorized by; the copyright owner that is granting the License. ""Legal Entity"" shall mean the union of the acting entity and all; other entities that control, are controlled by, or are under common; control with that entity. For the purposes of this definition,; ""control"" means (i) the power, direct or indirect, to cause the; direction or management of such entity, whether by contract or; otherwise, or (ii) ownership of fifty percent (50%) or more of the; outstanding shares, or (iii) beneficial ownership of such entity. ""You"" (or ""Your"") shall mean an individual or Legal Entity; exercising permissions granted by this License. ""Source"" form shall mean the preferred form for making modifications,; including but not limited to software source code, documentation; source, and configuration files. ""Object"" form shall mean any form resulting from mechanical; transformation or translation of a Source form, including but; not limited to compiled object code, generated documentation,; and conversions to other media types. ""Work"" shall mean the work of authorship, whether in Source or; Object form, made available under the License, as indicated by a; copyright notice that is included in or attached to the work; (an example is provided in the Appendix below). ""Derivative Works"" shall mean any work, whether in Source or Object; form, that is based on (or derived from) the Work and for which the; editorial revi",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt:2259,Integrability,interface,interfaces,2259," ""Source"" form shall mean the preferred form for making modifications,; including but not limited to software source code, documentation; source, and configuration files. ""Object"" form shall mean any form resulting from mechanical; transformation or translation of a Source form, including but; not limited to compiled object code, generated documentation,; and conversions to other media types. ""Work"" shall mean the work of authorship, whether in Source or; Object form, made available under the License, as indicated by a; copyright notice that is included in or attached to the work; (an example is provided in the Appendix below). ""Derivative Works"" shall mean any work, whether in Source or Object; form, that is based on (or derived from) the Work and for which the; editorial revisions, annotations, elaborations, or other modifications; represent, as a whole, an original work of authorship. For the purposes; of this License, Derivative Works shall not include works that remain; separable from, or merely link (or bind by name) to the interfaces of,; the Work and Derivative Works thereof. ""Contribution"" shall mean any work of authorship, including; the original version of the Work and any modifications or additions; to that Work or Derivative Works thereof, that is intentionally; submitted to Licensor for inclusion in the Work by the copyright owner; or by an individual or Legal Entity authorized to submit on behalf of; the copyright owner. For the purposes of this definition, ""submitted""; means any form of electronic, verbal, or written communication sent; to the Licensor or its representatives, including but not limited to; communication on electronic mailing lists, source code control systems,; and issue tracking systems that are managed by, or on behalf of, the; Licensor for the purpose of discussing and improving the Work, but; excluding communication that is conspicuously marked or otherwise; designated in writing by the copyright owner as ""Not a Contribution."". ""C",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt:8201,Integrability,contract,contract,8201,"cing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or; agreed to in writing, Licensor provides the Work (and each; Contributor provides its Contributions) on an ""AS IS"" BASIS,; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or; implied, including, without limitation, any warranties or conditions; of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A; PARTICULAR PURPOSE. You are solely responsible for determining the; appropriateness of using or redistributing the Work and assume any; risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory,; whether in tort (including negligence), contract, or otherwise,; unless required by applicable law (such as deliberate and grossly; negligent acts) or agreed to in writing, shall any Contributor be; liable to You for damages, including any direct, indirect, special,; incidental, or consequential damages of any character arising as a; result of this License or out of the use or inability to use the; Work (including but not limited to damages for loss of goodwill,; work stoppage, computer failure or malfunction, or any and all; other commercial damages or losses), even if such Contributor; has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing; the Work or Derivative Works thereof, You may choose to offer,; and charge a fee for, acceptance of support, warranty, indemnity,; or other liability obligations and/or rights consistent with this; License. However, in accepting such obligations, You may act only; on Your own behalf and on Your sole responsibility, not on behalf; of any other Contributor, and only if You agree to indemnify,; defend, and hold each Contributor harmless for any liability; incurred by, or claims asserted against, such Contributor by reason; of your accepting any such warranty or additional liability.",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt:1363,Modifiability,config,configuration,1363,"licenses/. TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION. 1. Definitions. ""License"" shall mean the terms and conditions for use, reproduction,; and distribution as defined by Sections 1 through 9 of this document. ""Licensor"" shall mean the copyright owner or entity authorized by; the copyright owner that is granting the License. ""Legal Entity"" shall mean the union of the acting entity and all; other entities that control, are controlled by, or are under common; control with that entity. For the purposes of this definition,; ""control"" means (i) the power, direct or indirect, to cause the; direction or management of such entity, whether by contract or; otherwise, or (ii) ownership of fifty percent (50%) or more of the; outstanding shares, or (iii) beneficial ownership of such entity. ""You"" (or ""Your"") shall mean an individual or Legal Entity; exercising permissions granted by this License. ""Source"" form shall mean the preferred form for making modifications,; including but not limited to software source code, documentation; source, and configuration files. ""Object"" form shall mean any form resulting from mechanical; transformation or translation of a Source form, including but; not limited to compiled object code, generated documentation,; and conversions to other media types. ""Work"" shall mean the work of authorship, whether in Source or; Object form, made available under the License, as indicated by a; copyright notice that is included in or attached to the work; (an example is provided in the Appendix below). ""Derivative Works"" shall mean any work, whether in Source or Object; form, that is based on (or derived from) the Work and for which the; editorial revisions, annotations, elaborations, or other modifications; represent, as a whole, an original work of authorship. For the purposes; of this License, Derivative Works shall not include works that remain; separable from, or merely link (or bind by name) to the interfaces of,; the Work and Derivative",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt:3682,Performance,perform,perform,3682," or Legal Entity authorized to submit on behalf of; the copyright owner. For the purposes of this definition, ""submitted""; means any form of electronic, verbal, or written communication sent; to the Licensor or its representatives, including but not limited to; communication on electronic mailing lists, source code control systems,; and issue tracking systems that are managed by, or on behalf of, the; Licensor for the purpose of discussing and improving the Work, but; excluding communication that is conspicuously marked or otherwise; designated in writing by the copyright owner as ""Not a Contribution."". ""Contributor"" shall mean Licensor and any individual or Legal Entity; on behalf of whom a Contribution has been received by Licensor and; subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of; this License, each Contributor hereby grants to You a perpetual,; worldwide, non-exclusive, no-charge, royalty-free, irrevocable; copyright license to reproduce, prepare Derivative Works of,; publicly display, publicly perform, sublicense, and distribute the; Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of; this License, each Contributor hereby grants to You a perpetual,; worldwide, non-exclusive, no-charge, royalty-free, irrevocable; (except as stated in this section) patent license to make, have made,; use, offer to sell, sell, import, and otherwise transfer the Work,; where such license applies only to those patent claims licensable; by such Contributor that are necessarily infringed by their; Contribution(s) alone or by combination of their Contribution(s); with the Work to which such Contribution(s) was submitted. If You; institute patent litigation against any entity (including a; cross-claim or counterclaim in a lawsuit) alleging that the Work; or a Contribution incorporated within the Work constitutes direct; or contributory patent infrin",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt:8022,Safety,risk,risks,8022,"ithout any additional terms or conditions.; Notwithstanding the above, nothing herein shall supersede or modify; the terms of any separate license agreement you may have executed; with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade; names, trademarks, service marks, or product names of the Licensor,; except as required for reasonable and customary use in describing the; origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or; agreed to in writing, Licensor provides the Work (and each; Contributor provides its Contributions) on an ""AS IS"" BASIS,; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or; implied, including, without limitation, any warranties or conditions; of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A; PARTICULAR PURPOSE. You are solely responsible for determining the; appropriateness of using or redistributing the Work and assume any; risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory,; whether in tort (including negligence), contract, or otherwise,; unless required by applicable law (such as deliberate and grossly; negligent acts) or agreed to in writing, shall any Contributor be; liable to You for damages, including any direct, indirect, special,; incidental, or consequential damages of any character arising as a; result of this License or out of the use or inability to use the; Work (including but not limited to damages for loss of goodwill,; work stoppage, computer failure or malfunction, or any and all; other commercial damages or losses), even if such Contributor; has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing; the Work or Derivative Works thereof, You may choose to offer,; and charge a fee for, acceptance of support, warranty, in",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt:579,Security,authoriz,authorized,579,"==============================================================================; The LLVM Project is under the Apache License v2.0 with LLVM Exceptions:; ==============================================================================. Apache License; Version 2.0, January 2004; http://www.apache.org/licenses/. TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION. 1. Definitions. ""License"" shall mean the terms and conditions for use, reproduction,; and distribution as defined by Sections 1 through 9 of this document. ""Licensor"" shall mean the copyright owner or entity authorized by; the copyright owner that is granting the License. ""Legal Entity"" shall mean the union of the acting entity and all; other entities that control, are controlled by, or are under common; control with that entity. For the purposes of this definition,; ""control"" means (i) the power, direct or indirect, to cause the; direction or management of such entity, whether by contract or; otherwise, or (ii) ownership of fifty percent (50%) or more of the; outstanding shares, or (iii) beneficial ownership of such entity. ""You"" (or ""Your"") shall mean an individual or Legal Entity; exercising permissions granted by this License. ""Source"" form shall mean the preferred form for making modifications,; including but not limited to software source code, documentation; source, and configuration files. ""Object"" form shall mean any form resulting from mechanical; transformation or translation of a Source form, including but; not limited to compiled object code, generated documentation,; and conversions to other media types. ""Work"" shall mean the work of authorship, whether in Source or; Object form, made available under the License, as indicated by a; copyright notice that is included in or attached to the work; (an example is provided in the Appendix below). ""Derivative Works"" shall mean any work, whether in Source or Object; form, that is based on (or derived from) the Work and for which the; editorial revi",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt:2617,Security,authoriz,authorized,2617," including but; not limited to compiled object code, generated documentation,; and conversions to other media types. ""Work"" shall mean the work of authorship, whether in Source or; Object form, made available under the License, as indicated by a; copyright notice that is included in or attached to the work; (an example is provided in the Appendix below). ""Derivative Works"" shall mean any work, whether in Source or Object; form, that is based on (or derived from) the Work and for which the; editorial revisions, annotations, elaborations, or other modifications; represent, as a whole, an original work of authorship. For the purposes; of this License, Derivative Works shall not include works that remain; separable from, or merely link (or bind by name) to the interfaces of,; the Work and Derivative Works thereof. ""Contribution"" shall mean any work of authorship, including; the original version of the Work and any modifications or additions; to that Work or Derivative Works thereof, that is intentionally; submitted to Licensor for inclusion in the Work by the copyright owner; or by an individual or Legal Entity authorized to submit on behalf of; the copyright owner. For the purposes of this definition, ""submitted""; means any form of electronic, verbal, or written communication sent; to the Licensor or its representatives, including but not limited to; communication on electronic mailing lists, source code control systems,; and issue tracking systems that are managed by, or on behalf of, the; Licensor for the purpose of discussing and improving the Work, but; excluding communication that is conspicuously marked or otherwise; designated in writing by the copyright owner as ""Not a Contribution."". ""Contributor"" shall mean Licensor and any individual or Legal Entity; on behalf of whom a Contribution has been received by Licensor and; subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of; this License, each Contributor",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt:9358,Testability,assert,asserted,9358,"erate and grossly; negligent acts) or agreed to in writing, shall any Contributor be; liable to You for damages, including any direct, indirect, special,; incidental, or consequential damages of any character arising as a; result of this License or out of the use or inability to use the; Work (including but not limited to damages for loss of goodwill,; work stoppage, computer failure or malfunction, or any and all; other commercial damages or losses), even if such Contributor; has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing; the Work or Derivative Works thereof, You may choose to offer,; and charge a fee for, acceptance of support, warranty, indemnity,; or other liability obligations and/or rights consistent with this; License. However, in accepting such obligations, You may act only; on Your own behalf and on Your sole responsibility, not on behalf; of any other Contributor, and only if You agree to indemnify,; defend, and hold each Contributor harmless for any liability; incurred by, or claims asserted against, such Contributor by reason; of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS. APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following; boilerplate notice, with the fields enclosed by brackets ""[]""; replaced with your own identifying information. (Don't include; the brackets!) The text should be enclosed in the appropriate; comment syntax for the file format. We also recommend that a; file or class name and description of purpose be included on the; same ""printed page"" as the copyright notice for easier; identification within third-party archives. Copyright [yyyy] [name of copyright owner]. Licensed under the Apache License, Version 2.0 (the ""License"");; you may not use this file except in compliance with the License.; You may obtain a copy of the License at. http://www.apache.org/lice",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt:11834,Usability,clear,clearly,11834,"hout complying; with the conditions of Sections 4(a), 4(b) and 4(d) of the License. In addition, if you combine or link compiled forms of this Software with; software that is licensed under the GPLv2 (""Combined Software"") and if a; court of competent jurisdiction determines that the patent provision (Section; 3), the indemnity provision (Section 9) or other Section of the License; conflicts with the conditions of the GPLv2, you may retroactively and; prospectively choose to deem waived or otherwise exclude such Section(s) of; the License, but only in their entirety and only with respect to the Combined; Software. ==============================================================================; Software from third parties included in the LLVM Project:; ==============================================================================; The LLVM Project contains third party software which is under different license; terms. All such code will be identified clearly using at least one of two; mechanisms:; 1) It will be in a separate directory tree with its own `LICENSE.txt` or; `LICENSE` file at the top containing the specific license and restrictions; which apply to that software, or; 2) It will contain specific license and restriction terms at the top of every; file. ==============================================================================; Legacy LLVM License (https://llvm.org/docs/DeveloperPolicy.html#legacy):; ==============================================================================; University of Illinois/NCSA; Open Source License. Copyright (c) 2007-2018 University of Illinois at Urbana-Champaign.; All rights reserved. Developed by:. LLVM Team. University of Illinois at Urbana-Champaign. http://llvm.org. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal with the Software without restriction, including without limitation the rights to use, copy, modify, merge,",MatchSource.DOCS,interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/license.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/hmaptool/CMakeLists.txt:0,Deployability,install,install,0,"install(PROGRAMS hmaptool DESTINATION ""${CLANG_TOOLS_INSTALL_DIR}"" COMPONENT hmaptool); add_custom_target(hmaptool ALL DEPENDS ""hmaptool""); set_target_properties(hmaptool PROPERTIES FOLDER ""Utils""). if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(""install-hmaptool""; DEPENDS hmaptool; COMPONENT hmaptool); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/utils/hmaptool/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/hmaptool/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/hmaptool/CMakeLists.txt:250,Deployability,install,install-hmaptool,250,"install(PROGRAMS hmaptool DESTINATION ""${CLANG_TOOLS_INSTALL_DIR}"" COMPONENT hmaptool); add_custom_target(hmaptool ALL DEPENDS ""hmaptool""); set_target_properties(hmaptool PROPERTIES FOLDER ""Utils""). if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(""install-hmaptool""; DEPENDS hmaptool; COMPONENT hmaptool); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/utils/hmaptool/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/hmaptool/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt:402,Integrability,depend,dependencies,402,"include(LLVMExternalProjectUtils). set(CLANG_PGO_TRAINING_DATA ""${CMAKE_CURRENT_SOURCE_DIR}"" CACHE PATH; ""The path to a lit testsuite containing samples for PGO and order file generation""; ); set(CLANG_PGO_TRAINING_DATA_SOURCE_DIR OFF CACHE STRING ""Path to source directory containing cmake project with source files to use for generating pgo data""); set(CLANG_PGO_TRAINING_DEPS """" CACHE STRING ""Extra dependencies needed to build the PGO training data.""). if(LLVM_BUILD_INSTRUMENTED); configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/pgo-data/lit.site.cfg; ). add_lit_testsuite(generate-profraw ""Generating clang PGO data""; ${CMAKE_CURRENT_BINARY_DIR}/pgo-data/; EXCLUDE_FROM_CHECK_ALL; DEPENDS clang clear-profraw ${CLANG_PGO_TRAINING_DEPS}; ). add_custom_target(clear-profraw; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py clean ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_BINARY_DIR}/profiles/ profraw; COMMENT ""Clearing old profraw data""). if(NOT LLVM_PROFDATA); find_program(LLVM_PROFDATA llvm-profdata); endif(). if(NOT LLVM_PROFDATA); message(STATUS ""To enable merging PGO data LLVM_PROFDATA has to point to llvm-profdata""); else(); add_custom_target(generate-profdata; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py merge ${LLVM_PROFDATA} ${CMAKE_CURRENT_BINARY_DIR}/clang.profdata ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_BINARY_DIR}/profiles/; COMMENT ""Merging profdata""; DEPENDS generate-profraw); if (CLANG_PGO_TRAINING_DATA_SOURCE_DIR); llvm_ExternalProject_Add(generate-profraw-external ${CLANG_PGO_TRAINING_DATA_SOURCE_DIR}; USE_TOOLCHAIN EXLUDE_FROM_ALL NO_INSTALL DEPENDS generate-profraw); add_dependencies(generate-profdata generate-profraw-external); endif(); endif(); endif(). find_program(DTRACE dtrace); # TODO: Look into supporting this for the driver build. It will require changing; # the perf-helper.py file to understand to call `llvm` as `llvm clang`.; if(APPLE AND DTRACE AND N",MatchSource.DOCS,interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt:1113,Integrability,message,message,1113,"O_TRAINING_DATA_SOURCE_DIR OFF CACHE STRING ""Path to source directory containing cmake project with source files to use for generating pgo data""); set(CLANG_PGO_TRAINING_DEPS """" CACHE STRING ""Extra dependencies needed to build the PGO training data.""). if(LLVM_BUILD_INSTRUMENTED); configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/pgo-data/lit.site.cfg; ). add_lit_testsuite(generate-profraw ""Generating clang PGO data""; ${CMAKE_CURRENT_BINARY_DIR}/pgo-data/; EXCLUDE_FROM_CHECK_ALL; DEPENDS clang clear-profraw ${CLANG_PGO_TRAINING_DEPS}; ). add_custom_target(clear-profraw; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py clean ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_BINARY_DIR}/profiles/ profraw; COMMENT ""Clearing old profraw data""). if(NOT LLVM_PROFDATA); find_program(LLVM_PROFDATA llvm-profdata); endif(). if(NOT LLVM_PROFDATA); message(STATUS ""To enable merging PGO data LLVM_PROFDATA has to point to llvm-profdata""); else(); add_custom_target(generate-profdata; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py merge ${LLVM_PROFDATA} ${CMAKE_CURRENT_BINARY_DIR}/clang.profdata ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_BINARY_DIR}/profiles/; COMMENT ""Merging profdata""; DEPENDS generate-profraw); if (CLANG_PGO_TRAINING_DATA_SOURCE_DIR); llvm_ExternalProject_Add(generate-profraw-external ${CLANG_PGO_TRAINING_DATA_SOURCE_DIR}; USE_TOOLCHAIN EXLUDE_FROM_ALL NO_INSTALL DEPENDS generate-profraw); add_dependencies(generate-profdata generate-profraw-external); endif(); endif(); endif(). find_program(DTRACE dtrace); # TODO: Look into supporting this for the driver build. It will require changing; # the perf-helper.py file to understand to call `llvm` as `llvm clang`.; if(APPLE AND DTRACE AND NOT LLVM_TOOL_LLVM_DRIVER_BUILD); configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/order-files.lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/order-files/lit.site.cfg; ). add_lit_testsuite(generate-dtrac",MatchSource.DOCS,interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt:2574,Integrability,message,message,2574," ${CLANG_PGO_TRAINING_DATA_SOURCE_DIR}; USE_TOOLCHAIN EXLUDE_FROM_ALL NO_INSTALL DEPENDS generate-profraw); add_dependencies(generate-profdata generate-profraw-external); endif(); endif(); endif(). find_program(DTRACE dtrace); # TODO: Look into supporting this for the driver build. It will require changing; # the perf-helper.py file to understand to call `llvm` as `llvm clang`.; if(APPLE AND DTRACE AND NOT LLVM_TOOL_LLVM_DRIVER_BUILD); configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/order-files.lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/order-files/lit.site.cfg; ). add_lit_testsuite(generate-dtrace-logs ""Generating clang dtrace data""; ${CMAKE_CURRENT_BINARY_DIR}/order-files/; EXCLUDE_FROM_CHECK_ALL; ARGS -j 1; DEPENDS clang clear-dtrace-logs; ). add_custom_target(clear-dtrace-logs; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py clean ${CMAKE_CURRENT_BINARY_DIR} dtrace; COMMENT ""Clearing old dtrace data""). if(NOT CLANG_ORDER_FILE); message(FATAL_ERROR ""Output clang order file is not set""); endif(). add_custom_target(generate-order-file; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py gen-order-file --binary $<TARGET_FILE:clang> --output ${CLANG_ORDER_FILE} ${CMAKE_CURRENT_BINARY_DIR}; COMMENT ""Generating order file""; DEPENDS generate-dtrace-logs); endif(). if(CLANG_BOLT_INSTRUMENT AND NOT LLVM_BUILD_INSTRUMENTED); configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/bolt.lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/bolt-fdata/lit.site.cfg; ). add_lit_testsuite(generate-bolt-fdata ""Generating BOLT profile for Clang""; ${CMAKE_CURRENT_BINARY_DIR}/bolt-fdata/; EXCLUDE_FROM_CHECK_ALL; DEPENDS clang-instrumented clear-bolt-fdata; ). add_custom_target(clear-bolt-fdata; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py clean ${CMAKE_CURRENT_BINARY_DIR} fdata; COMMENT ""Clearing old BOLT fdata""). # Merge profiles into one using merge-fdata; add_custom_target(clang-bolt-profile; COMMAND ""${Py",MatchSource.DOCS,interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt:124,Testability,test,testsuite,124,"include(LLVMExternalProjectUtils). set(CLANG_PGO_TRAINING_DATA ""${CMAKE_CURRENT_SOURCE_DIR}"" CACHE PATH; ""The path to a lit testsuite containing samples for PGO and order file generation""; ); set(CLANG_PGO_TRAINING_DATA_SOURCE_DIR OFF CACHE STRING ""Path to source directory containing cmake project with source files to use for generating pgo data""); set(CLANG_PGO_TRAINING_DEPS """" CACHE STRING ""Extra dependencies needed to build the PGO training data.""). if(LLVM_BUILD_INSTRUMENTED); configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/pgo-data/lit.site.cfg; ). add_lit_testsuite(generate-profraw ""Generating clang PGO data""; ${CMAKE_CURRENT_BINARY_DIR}/pgo-data/; EXCLUDE_FROM_CHECK_ALL; DEPENDS clang clear-profraw ${CLANG_PGO_TRAINING_DEPS}; ). add_custom_target(clear-profraw; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py clean ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_BINARY_DIR}/profiles/ profraw; COMMENT ""Clearing old profraw data""). if(NOT LLVM_PROFDATA); find_program(LLVM_PROFDATA llvm-profdata); endif(). if(NOT LLVM_PROFDATA); message(STATUS ""To enable merging PGO data LLVM_PROFDATA has to point to llvm-profdata""); else(); add_custom_target(generate-profdata; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py merge ${LLVM_PROFDATA} ${CMAKE_CURRENT_BINARY_DIR}/clang.profdata ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_BINARY_DIR}/profiles/; COMMENT ""Merging profdata""; DEPENDS generate-profraw); if (CLANG_PGO_TRAINING_DATA_SOURCE_DIR); llvm_ExternalProject_Add(generate-profraw-external ${CLANG_PGO_TRAINING_DATA_SOURCE_DIR}; USE_TOOLCHAIN EXLUDE_FROM_ALL NO_INSTALL DEPENDS generate-profraw); add_dependencies(generate-profdata generate-profraw-external); endif(); endif(); endif(). find_program(DTRACE dtrace); # TODO: Look into supporting this for the driver build. It will require changing; # the perf-helper.py file to understand to call `llvm` as `llvm clang`.; if(APPLE AND DTRACE AND N",MatchSource.DOCS,interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt:2207,Testability,log,logs,2207,"n3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py merge ${LLVM_PROFDATA} ${CMAKE_CURRENT_BINARY_DIR}/clang.profdata ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_BINARY_DIR}/profiles/; COMMENT ""Merging profdata""; DEPENDS generate-profraw); if (CLANG_PGO_TRAINING_DATA_SOURCE_DIR); llvm_ExternalProject_Add(generate-profraw-external ${CLANG_PGO_TRAINING_DATA_SOURCE_DIR}; USE_TOOLCHAIN EXLUDE_FROM_ALL NO_INSTALL DEPENDS generate-profraw); add_dependencies(generate-profdata generate-profraw-external); endif(); endif(); endif(). find_program(DTRACE dtrace); # TODO: Look into supporting this for the driver build. It will require changing; # the perf-helper.py file to understand to call `llvm` as `llvm clang`.; if(APPLE AND DTRACE AND NOT LLVM_TOOL_LLVM_DRIVER_BUILD); configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/order-files.lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/order-files/lit.site.cfg; ). add_lit_testsuite(generate-dtrace-logs ""Generating clang dtrace data""; ${CMAKE_CURRENT_BINARY_DIR}/order-files/; EXCLUDE_FROM_CHECK_ALL; ARGS -j 1; DEPENDS clang clear-dtrace-logs; ). add_custom_target(clear-dtrace-logs; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py clean ${CMAKE_CURRENT_BINARY_DIR} dtrace; COMMENT ""Clearing old dtrace data""). if(NOT CLANG_ORDER_FILE); message(FATAL_ERROR ""Output clang order file is not set""); endif(). add_custom_target(generate-order-file; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py gen-order-file --binary $<TARGET_FILE:clang> --output ${CLANG_ORDER_FILE} ${CMAKE_CURRENT_BINARY_DIR}; COMMENT ""Generating order file""; DEPENDS generate-dtrace-logs); endif(). if(CLANG_BOLT_INSTRUMENT AND NOT LLVM_BUILD_INSTRUMENTED); configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/bolt.lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/bolt-fdata/lit.site.cfg; ). add_lit_testsuite(generate-bolt-fdata ""Generating BOLT profile for Clang""; ${CMAKE_CURRENT_BINARY_DIR}/bolt-fdata/; EXCLUDE_FROM_CHECK_ALL; DE",MatchSource.DOCS,interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt:2348,Testability,log,logs,2348,"n3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py merge ${LLVM_PROFDATA} ${CMAKE_CURRENT_BINARY_DIR}/clang.profdata ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_BINARY_DIR}/profiles/; COMMENT ""Merging profdata""; DEPENDS generate-profraw); if (CLANG_PGO_TRAINING_DATA_SOURCE_DIR); llvm_ExternalProject_Add(generate-profraw-external ${CLANG_PGO_TRAINING_DATA_SOURCE_DIR}; USE_TOOLCHAIN EXLUDE_FROM_ALL NO_INSTALL DEPENDS generate-profraw); add_dependencies(generate-profdata generate-profraw-external); endif(); endif(); endif(). find_program(DTRACE dtrace); # TODO: Look into supporting this for the driver build. It will require changing; # the perf-helper.py file to understand to call `llvm` as `llvm clang`.; if(APPLE AND DTRACE AND NOT LLVM_TOOL_LLVM_DRIVER_BUILD); configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/order-files.lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/order-files/lit.site.cfg; ). add_lit_testsuite(generate-dtrace-logs ""Generating clang dtrace data""; ${CMAKE_CURRENT_BINARY_DIR}/order-files/; EXCLUDE_FROM_CHECK_ALL; ARGS -j 1; DEPENDS clang clear-dtrace-logs; ). add_custom_target(clear-dtrace-logs; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py clean ${CMAKE_CURRENT_BINARY_DIR} dtrace; COMMENT ""Clearing old dtrace data""). if(NOT CLANG_ORDER_FILE); message(FATAL_ERROR ""Output clang order file is not set""); endif(). add_custom_target(generate-order-file; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py gen-order-file --binary $<TARGET_FILE:clang> --output ${CLANG_ORDER_FILE} ${CMAKE_CURRENT_BINARY_DIR}; COMMENT ""Generating order file""; DEPENDS generate-dtrace-logs); endif(). if(CLANG_BOLT_INSTRUMENT AND NOT LLVM_BUILD_INSTRUMENTED); configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/bolt.lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/bolt-fdata/lit.site.cfg; ). add_lit_testsuite(generate-bolt-fdata ""Generating BOLT profile for Clang""; ${CMAKE_CURRENT_BINARY_DIR}/bolt-fdata/; EXCLUDE_FROM_CHECK_ALL; DE",MatchSource.DOCS,interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt:2388,Testability,log,logs,2388,"_DIR} ${CMAKE_BINARY_DIR}/profiles/; COMMENT ""Merging profdata""; DEPENDS generate-profraw); if (CLANG_PGO_TRAINING_DATA_SOURCE_DIR); llvm_ExternalProject_Add(generate-profraw-external ${CLANG_PGO_TRAINING_DATA_SOURCE_DIR}; USE_TOOLCHAIN EXLUDE_FROM_ALL NO_INSTALL DEPENDS generate-profraw); add_dependencies(generate-profdata generate-profraw-external); endif(); endif(); endif(). find_program(DTRACE dtrace); # TODO: Look into supporting this for the driver build. It will require changing; # the perf-helper.py file to understand to call `llvm` as `llvm clang`.; if(APPLE AND DTRACE AND NOT LLVM_TOOL_LLVM_DRIVER_BUILD); configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/order-files.lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/order-files/lit.site.cfg; ). add_lit_testsuite(generate-dtrace-logs ""Generating clang dtrace data""; ${CMAKE_CURRENT_BINARY_DIR}/order-files/; EXCLUDE_FROM_CHECK_ALL; ARGS -j 1; DEPENDS clang clear-dtrace-logs; ). add_custom_target(clear-dtrace-logs; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py clean ${CMAKE_CURRENT_BINARY_DIR} dtrace; COMMENT ""Clearing old dtrace data""). if(NOT CLANG_ORDER_FILE); message(FATAL_ERROR ""Output clang order file is not set""); endif(). add_custom_target(generate-order-file; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py gen-order-file --binary $<TARGET_FILE:clang> --output ${CLANG_ORDER_FILE} ${CMAKE_CURRENT_BINARY_DIR}; COMMENT ""Generating order file""; DEPENDS generate-dtrace-logs); endif(). if(CLANG_BOLT_INSTRUMENT AND NOT LLVM_BUILD_INSTRUMENTED); configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/bolt.lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/bolt-fdata/lit.site.cfg; ). add_lit_testsuite(generate-bolt-fdata ""Generating BOLT profile for Clang""; ${CMAKE_CURRENT_BINARY_DIR}/bolt-fdata/; EXCLUDE_FROM_CHECK_ALL; DEPENDS clang-instrumented clear-bolt-fdata; ). add_custom_target(clear-bolt-fdata; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-",MatchSource.DOCS,interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt:2916,Testability,log,logs,2916,"porting this for the driver build. It will require changing; # the perf-helper.py file to understand to call `llvm` as `llvm clang`.; if(APPLE AND DTRACE AND NOT LLVM_TOOL_LLVM_DRIVER_BUILD); configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/order-files.lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/order-files/lit.site.cfg; ). add_lit_testsuite(generate-dtrace-logs ""Generating clang dtrace data""; ${CMAKE_CURRENT_BINARY_DIR}/order-files/; EXCLUDE_FROM_CHECK_ALL; ARGS -j 1; DEPENDS clang clear-dtrace-logs; ). add_custom_target(clear-dtrace-logs; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py clean ${CMAKE_CURRENT_BINARY_DIR} dtrace; COMMENT ""Clearing old dtrace data""). if(NOT CLANG_ORDER_FILE); message(FATAL_ERROR ""Output clang order file is not set""); endif(). add_custom_target(generate-order-file; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py gen-order-file --binary $<TARGET_FILE:clang> --output ${CLANG_ORDER_FILE} ${CMAKE_CURRENT_BINARY_DIR}; COMMENT ""Generating order file""; DEPENDS generate-dtrace-logs); endif(). if(CLANG_BOLT_INSTRUMENT AND NOT LLVM_BUILD_INSTRUMENTED); configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/bolt.lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/bolt-fdata/lit.site.cfg; ). add_lit_testsuite(generate-bolt-fdata ""Generating BOLT profile for Clang""; ${CMAKE_CURRENT_BINARY_DIR}/bolt-fdata/; EXCLUDE_FROM_CHECK_ALL; DEPENDS clang-instrumented clear-bolt-fdata; ). add_custom_target(clear-bolt-fdata; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py clean ${CMAKE_CURRENT_BINARY_DIR} fdata; COMMENT ""Clearing old BOLT fdata""). # Merge profiles into one using merge-fdata; add_custom_target(clang-bolt-profile; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py merge-fdata $<TARGET_FILE:merge-fdata> ${CMAKE_CURRENT_BINARY_DIR}/prof.fdata ${CMAKE_CURRENT_BINARY_DIR}; COMMENT ""Merging BOLT fdata""; DEPENDS merge-fdata generate-bolt-fdata); endif()",MatchSource.DOCS,interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt:751,Usability,clear,clear-profraw,751,"include(LLVMExternalProjectUtils). set(CLANG_PGO_TRAINING_DATA ""${CMAKE_CURRENT_SOURCE_DIR}"" CACHE PATH; ""The path to a lit testsuite containing samples for PGO and order file generation""; ); set(CLANG_PGO_TRAINING_DATA_SOURCE_DIR OFF CACHE STRING ""Path to source directory containing cmake project with source files to use for generating pgo data""); set(CLANG_PGO_TRAINING_DEPS """" CACHE STRING ""Extra dependencies needed to build the PGO training data.""). if(LLVM_BUILD_INSTRUMENTED); configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/pgo-data/lit.site.cfg; ). add_lit_testsuite(generate-profraw ""Generating clang PGO data""; ${CMAKE_CURRENT_BINARY_DIR}/pgo-data/; EXCLUDE_FROM_CHECK_ALL; DEPENDS clang clear-profraw ${CLANG_PGO_TRAINING_DEPS}; ). add_custom_target(clear-profraw; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py clean ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_BINARY_DIR}/profiles/ profraw; COMMENT ""Clearing old profraw data""). if(NOT LLVM_PROFDATA); find_program(LLVM_PROFDATA llvm-profdata); endif(). if(NOT LLVM_PROFDATA); message(STATUS ""To enable merging PGO data LLVM_PROFDATA has to point to llvm-profdata""); else(); add_custom_target(generate-profdata; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py merge ${LLVM_PROFDATA} ${CMAKE_CURRENT_BINARY_DIR}/clang.profdata ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_BINARY_DIR}/profiles/; COMMENT ""Merging profdata""; DEPENDS generate-profraw); if (CLANG_PGO_TRAINING_DATA_SOURCE_DIR); llvm_ExternalProject_Add(generate-profraw-external ${CLANG_PGO_TRAINING_DATA_SOURCE_DIR}; USE_TOOLCHAIN EXLUDE_FROM_ALL NO_INSTALL DEPENDS generate-profraw); add_dependencies(generate-profdata generate-profraw-external); endif(); endif(); endif(). find_program(DTRACE dtrace); # TODO: Look into supporting this for the driver build. It will require changing; # the perf-helper.py file to understand to call `llvm` as `llvm clang`.; if(APPLE AND DTRACE AND N",MatchSource.DOCS,interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt:814,Usability,clear,clear-profraw,814,"include(LLVMExternalProjectUtils). set(CLANG_PGO_TRAINING_DATA ""${CMAKE_CURRENT_SOURCE_DIR}"" CACHE PATH; ""The path to a lit testsuite containing samples for PGO and order file generation""; ); set(CLANG_PGO_TRAINING_DATA_SOURCE_DIR OFF CACHE STRING ""Path to source directory containing cmake project with source files to use for generating pgo data""); set(CLANG_PGO_TRAINING_DEPS """" CACHE STRING ""Extra dependencies needed to build the PGO training data.""). if(LLVM_BUILD_INSTRUMENTED); configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/pgo-data/lit.site.cfg; ). add_lit_testsuite(generate-profraw ""Generating clang PGO data""; ${CMAKE_CURRENT_BINARY_DIR}/pgo-data/; EXCLUDE_FROM_CHECK_ALL; DEPENDS clang clear-profraw ${CLANG_PGO_TRAINING_DEPS}; ). add_custom_target(clear-profraw; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py clean ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_BINARY_DIR}/profiles/ profraw; COMMENT ""Clearing old profraw data""). if(NOT LLVM_PROFDATA); find_program(LLVM_PROFDATA llvm-profdata); endif(). if(NOT LLVM_PROFDATA); message(STATUS ""To enable merging PGO data LLVM_PROFDATA has to point to llvm-profdata""); else(); add_custom_target(generate-profdata; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py merge ${LLVM_PROFDATA} ${CMAKE_CURRENT_BINARY_DIR}/clang.profdata ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_BINARY_DIR}/profiles/; COMMENT ""Merging profdata""; DEPENDS generate-profraw); if (CLANG_PGO_TRAINING_DATA_SOURCE_DIR); llvm_ExternalProject_Add(generate-profraw-external ${CLANG_PGO_TRAINING_DATA_SOURCE_DIR}; USE_TOOLCHAIN EXLUDE_FROM_ALL NO_INSTALL DEPENDS generate-profraw); add_dependencies(generate-profdata generate-profraw-external); endif(); endif(); endif(). find_program(DTRACE dtrace); # TODO: Look into supporting this for the driver build. It will require changing; # the perf-helper.py file to understand to call `llvm` as `llvm clang`.; if(APPLE AND DTRACE AND N",MatchSource.DOCS,interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt:2335,Usability,clear,clear-dtrace-logs,2335,"n3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py merge ${LLVM_PROFDATA} ${CMAKE_CURRENT_BINARY_DIR}/clang.profdata ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_BINARY_DIR}/profiles/; COMMENT ""Merging profdata""; DEPENDS generate-profraw); if (CLANG_PGO_TRAINING_DATA_SOURCE_DIR); llvm_ExternalProject_Add(generate-profraw-external ${CLANG_PGO_TRAINING_DATA_SOURCE_DIR}; USE_TOOLCHAIN EXLUDE_FROM_ALL NO_INSTALL DEPENDS generate-profraw); add_dependencies(generate-profdata generate-profraw-external); endif(); endif(); endif(). find_program(DTRACE dtrace); # TODO: Look into supporting this for the driver build. It will require changing; # the perf-helper.py file to understand to call `llvm` as `llvm clang`.; if(APPLE AND DTRACE AND NOT LLVM_TOOL_LLVM_DRIVER_BUILD); configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/order-files.lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/order-files/lit.site.cfg; ). add_lit_testsuite(generate-dtrace-logs ""Generating clang dtrace data""; ${CMAKE_CURRENT_BINARY_DIR}/order-files/; EXCLUDE_FROM_CHECK_ALL; ARGS -j 1; DEPENDS clang clear-dtrace-logs; ). add_custom_target(clear-dtrace-logs; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py clean ${CMAKE_CURRENT_BINARY_DIR} dtrace; COMMENT ""Clearing old dtrace data""). if(NOT CLANG_ORDER_FILE); message(FATAL_ERROR ""Output clang order file is not set""); endif(). add_custom_target(generate-order-file; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py gen-order-file --binary $<TARGET_FILE:clang> --output ${CLANG_ORDER_FILE} ${CMAKE_CURRENT_BINARY_DIR}; COMMENT ""Generating order file""; DEPENDS generate-dtrace-logs); endif(). if(CLANG_BOLT_INSTRUMENT AND NOT LLVM_BUILD_INSTRUMENTED); configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/bolt.lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/bolt-fdata/lit.site.cfg; ). add_lit_testsuite(generate-bolt-fdata ""Generating BOLT profile for Clang""; ${CMAKE_CURRENT_BINARY_DIR}/bolt-fdata/; EXCLUDE_FROM_CHECK_ALL; DE",MatchSource.DOCS,interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt:2375,Usability,clear,clear-dtrace-logs,2375,"_DIR} ${CMAKE_BINARY_DIR}/profiles/; COMMENT ""Merging profdata""; DEPENDS generate-profraw); if (CLANG_PGO_TRAINING_DATA_SOURCE_DIR); llvm_ExternalProject_Add(generate-profraw-external ${CLANG_PGO_TRAINING_DATA_SOURCE_DIR}; USE_TOOLCHAIN EXLUDE_FROM_ALL NO_INSTALL DEPENDS generate-profraw); add_dependencies(generate-profdata generate-profraw-external); endif(); endif(); endif(). find_program(DTRACE dtrace); # TODO: Look into supporting this for the driver build. It will require changing; # the perf-helper.py file to understand to call `llvm` as `llvm clang`.; if(APPLE AND DTRACE AND NOT LLVM_TOOL_LLVM_DRIVER_BUILD); configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/order-files.lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/order-files/lit.site.cfg; ). add_lit_testsuite(generate-dtrace-logs ""Generating clang dtrace data""; ${CMAKE_CURRENT_BINARY_DIR}/order-files/; EXCLUDE_FROM_CHECK_ALL; ARGS -j 1; DEPENDS clang clear-dtrace-logs; ). add_custom_target(clear-dtrace-logs; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py clean ${CMAKE_CURRENT_BINARY_DIR} dtrace; COMMENT ""Clearing old dtrace data""). if(NOT CLANG_ORDER_FILE); message(FATAL_ERROR ""Output clang order file is not set""); endif(). add_custom_target(generate-order-file; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py gen-order-file --binary $<TARGET_FILE:clang> --output ${CLANG_ORDER_FILE} ${CMAKE_CURRENT_BINARY_DIR}; COMMENT ""Generating order file""; DEPENDS generate-dtrace-logs); endif(). if(CLANG_BOLT_INSTRUMENT AND NOT LLVM_BUILD_INSTRUMENTED); configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/bolt.lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/bolt-fdata/lit.site.cfg; ). add_lit_testsuite(generate-bolt-fdata ""Generating BOLT profile for Clang""; ${CMAKE_CURRENT_BINARY_DIR}/bolt-fdata/; EXCLUDE_FROM_CHECK_ALL; DEPENDS clang-instrumented clear-bolt-fdata; ). add_custom_target(clear-bolt-fdata; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-",MatchSource.DOCS,interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt:3289,Usability,clear,clear-bolt-fdata,3289,"rting this for the driver build. It will require changing; # the perf-helper.py file to understand to call `llvm` as `llvm clang`.; if(APPLE AND DTRACE AND NOT LLVM_TOOL_LLVM_DRIVER_BUILD); configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/order-files.lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/order-files/lit.site.cfg; ). add_lit_testsuite(generate-dtrace-logs ""Generating clang dtrace data""; ${CMAKE_CURRENT_BINARY_DIR}/order-files/; EXCLUDE_FROM_CHECK_ALL; ARGS -j 1; DEPENDS clang clear-dtrace-logs; ). add_custom_target(clear-dtrace-logs; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py clean ${CMAKE_CURRENT_BINARY_DIR} dtrace; COMMENT ""Clearing old dtrace data""). if(NOT CLANG_ORDER_FILE); message(FATAL_ERROR ""Output clang order file is not set""); endif(). add_custom_target(generate-order-file; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py gen-order-file --binary $<TARGET_FILE:clang> --output ${CLANG_ORDER_FILE} ${CMAKE_CURRENT_BINARY_DIR}; COMMENT ""Generating order file""; DEPENDS generate-dtrace-logs); endif(). if(CLANG_BOLT_INSTRUMENT AND NOT LLVM_BUILD_INSTRUMENTED); configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/bolt.lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/bolt-fdata/lit.site.cfg; ). add_lit_testsuite(generate-bolt-fdata ""Generating BOLT profile for Clang""; ${CMAKE_CURRENT_BINARY_DIR}/bolt-fdata/; EXCLUDE_FROM_CHECK_ALL; DEPENDS clang-instrumented clear-bolt-fdata; ). add_custom_target(clear-bolt-fdata; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py clean ${CMAKE_CURRENT_BINARY_DIR} fdata; COMMENT ""Clearing old BOLT fdata""). # Merge profiles into one using merge-fdata; add_custom_target(clang-bolt-profile; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py merge-fdata $<TARGET_FILE:merge-fdata> ${CMAKE_CURRENT_BINARY_DIR}/prof.fdata ${CMAKE_CURRENT_BINARY_DIR}; COMMENT ""Merging BOLT fdata""; DEPENDS merge-fdata generate-bolt-fdata); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt:3328,Usability,clear,clear-bolt-fdata,3328,"rting this for the driver build. It will require changing; # the perf-helper.py file to understand to call `llvm` as `llvm clang`.; if(APPLE AND DTRACE AND NOT LLVM_TOOL_LLVM_DRIVER_BUILD); configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/order-files.lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/order-files/lit.site.cfg; ). add_lit_testsuite(generate-dtrace-logs ""Generating clang dtrace data""; ${CMAKE_CURRENT_BINARY_DIR}/order-files/; EXCLUDE_FROM_CHECK_ALL; ARGS -j 1; DEPENDS clang clear-dtrace-logs; ). add_custom_target(clear-dtrace-logs; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py clean ${CMAKE_CURRENT_BINARY_DIR} dtrace; COMMENT ""Clearing old dtrace data""). if(NOT CLANG_ORDER_FILE); message(FATAL_ERROR ""Output clang order file is not set""); endif(). add_custom_target(generate-order-file; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py gen-order-file --binary $<TARGET_FILE:clang> --output ${CLANG_ORDER_FILE} ${CMAKE_CURRENT_BINARY_DIR}; COMMENT ""Generating order file""; DEPENDS generate-dtrace-logs); endif(). if(CLANG_BOLT_INSTRUMENT AND NOT LLVM_BUILD_INSTRUMENTED); configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/bolt.lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/bolt-fdata/lit.site.cfg; ). add_lit_testsuite(generate-bolt-fdata ""Generating BOLT profile for Clang""; ${CMAKE_CURRENT_BINARY_DIR}/bolt-fdata/; EXCLUDE_FROM_CHECK_ALL; DEPENDS clang-instrumented clear-bolt-fdata; ). add_custom_target(clear-bolt-fdata; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py clean ${CMAKE_CURRENT_BINARY_DIR} fdata; COMMENT ""Clearing old BOLT fdata""). # Merge profiles into one using merge-fdata; add_custom_target(clang-bolt-profile; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py merge-fdata $<TARGET_FILE:merge-fdata> ${CMAKE_CURRENT_BINARY_DIR}/prof.fdata ${CMAKE_CURRENT_BINARY_DIR}; COMMENT ""Merging BOLT fdata""; DEPENDS merge-fdata generate-bolt-fdata); endif(); ",MatchSource.DOCS,interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/README.txt:107,Usability,simpl,simple,107,==========================; Performance Training Data; ==========================. This directory contains simple source files for use as training data for; generating PGO data and linker order files for clang.; ,MatchSource.DOCS,interpreter/llvm-project/clang/utils/perf-training/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMakeLists.txt:3411,Deployability,install,install,3411,"e(${CMAKE_CURRENT_SOURCE_DIR}/doxygen.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/doxygen.cfg @ONLY). set(abs_top_srcdir); set(abs_top_builddir); set(DOT); set(enable_searchengine); set(searchengine_url); set(enable_server_based_search); set(enable_external_search); set(extra_search_mappings); set(llvm_doxygen_generate_qhp); set(llvm_doxygen_qch_filename); set(llvm_doxygen_qhp_namespace); set(llvm_doxygen_qhelpgenerator_path); set(llvm_doxygen_qhp_cust_filter_name); set(llvm_doxygen_qhp_cust_filter_attrs); set(DOT_IMAGE_FORMAT). add_custom_target(doxygen-llvm; COMMAND ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/doxygen.cfg; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}; COMMENT ""Generating llvm doxygen documentation."" VERBATIM). if (LLVM_BUILD_DOCS); add_dependencies(doxygen doxygen-llvm); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); # ./ suffix is needed to copy the contents of html directory without; # appending html/ into LLVM_INSTALL_DOXYGEN_HTML_DIR.; install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/doxygen/html/.; COMPONENT doxygen-html; DESTINATION ""${LLVM_INSTALL_DOXYGEN_HTML_DIR}""); endif(); endif(); endif(). if (LLVM_ENABLE_SPHINX); include(AddSphinxTarget); if (SPHINX_FOUND); if (${SPHINX_OUTPUT_HTML}); add_sphinx_target(html llvm); endif(). if (${SPHINX_OUTPUT_MAN}); add_sphinx_target(man llvm); add_sphinx_target(man llvm-dwarfdump); add_sphinx_target(man dsymutil); endif(). endif(); endif(). list(FIND LLVM_BINDINGS_LIST ocaml uses_ocaml); if( NOT uses_ocaml LESS 0 AND LLVM_ENABLE_OCAMLDOC ); set(doc_targets; ocaml_llvm; ocaml_llvm_all_backends; ocaml_llvm_analysis; ocaml_llvm_bitreader; ocaml_llvm_bitwriter; ocaml_llvm_executionengine; ocaml_llvm_irreader; ocaml_llvm_linker; ocaml_llvm_target; ocaml_llvm_transform_utils; ). foreach(llvm_target ${LLVM_TARGETS_TO_BUILD}); list(APPEND doc_targets ocaml_llvm_${llvm_target}); endforeach(). set(odoc_files); foreach( doc_target ${doc_targets} ); get_target_property(odoc_file ${doc_target} OCAML_ODOC); list(APPEND",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMakeLists.txt:5142,Deployability,install,install,5142,"is needed to copy the contents of html directory without; # appending html/ into LLVM_INSTALL_DOXYGEN_HTML_DIR.; install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/doxygen/html/.; COMPONENT doxygen-html; DESTINATION ""${LLVM_INSTALL_DOXYGEN_HTML_DIR}""); endif(); endif(); endif(). if (LLVM_ENABLE_SPHINX); include(AddSphinxTarget); if (SPHINX_FOUND); if (${SPHINX_OUTPUT_HTML}); add_sphinx_target(html llvm); endif(). if (${SPHINX_OUTPUT_MAN}); add_sphinx_target(man llvm); add_sphinx_target(man llvm-dwarfdump); add_sphinx_target(man dsymutil); endif(). endif(); endif(). list(FIND LLVM_BINDINGS_LIST ocaml uses_ocaml); if( NOT uses_ocaml LESS 0 AND LLVM_ENABLE_OCAMLDOC ); set(doc_targets; ocaml_llvm; ocaml_llvm_all_backends; ocaml_llvm_analysis; ocaml_llvm_bitreader; ocaml_llvm_bitwriter; ocaml_llvm_executionengine; ocaml_llvm_irreader; ocaml_llvm_linker; ocaml_llvm_target; ocaml_llvm_transform_utils; ). foreach(llvm_target ${LLVM_TARGETS_TO_BUILD}); list(APPEND doc_targets ocaml_llvm_${llvm_target}); endforeach(). set(odoc_files); foreach( doc_target ${doc_targets} ); get_target_property(odoc_file ${doc_target} OCAML_ODOC); list(APPEND odoc_files -load ${odoc_file}); endforeach(). add_custom_target(ocaml_doc; COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_CURRENT_BINARY_DIR}/ocamldoc/html; COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_CURRENT_BINARY_DIR}/ocamldoc/html; COMMAND ${OCAMLFIND} ocamldoc -d ${CMAKE_CURRENT_BINARY_DIR}/ocamldoc/html; -sort -colorize-code -html ${odoc_files}; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/_ocamldoc/style.css; ${CMAKE_CURRENT_BINARY_DIR}/ocamldoc/html). add_dependencies(ocaml_doc ${doc_targets}). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); # ./ suffix is needed to copy the contents of html directory without; # appending html/ into LLVM_INSTALL_OCAMLDOC_HTML_DIR.; install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/ocamldoc/html/.; COMPONENT ocamldoc-html; DESTINATION ""${LLVM_INSTALL_OCAMLDOC_HTML_DIR}""); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMakeLists.txt:1520,Integrability,message,message,1520,"set(enable_searchengine ""NO""); set(searchengine_url """"); set(enable_server_based_search ""NO""); set(enable_external_search ""NO""); set(extra_search_mappings """"); endif(). # If asked, configure doxygen for the creation of a Qt Compressed Help file.; option(LLVM_ENABLE_DOXYGEN_QT_HELP; ""Generate a Qt Compressed Help file."" OFF); if (LLVM_ENABLE_DOXYGEN_QT_HELP); set(LLVM_DOXYGEN_QCH_FILENAME ""org.llvm.qch"" CACHE STRING; ""Filename of the Qt Compressed help file""); set(LLVM_DOXYGEN_QHP_NAMESPACE ""org.llvm"" CACHE STRING; ""Namespace under which the intermediate Qt Help Project file lives""); set(LLVM_DOXYGEN_QHP_CUST_FILTER_NAME ""${PACKAGE_STRING}"" CACHE STRING; ""See http://qt-project.org/doc/qt-4.8/qthelpproject.html#custom-filters""); set(LLVM_DOXYGEN_QHP_CUST_FILTER_ATTRS ""${PACKAGE_NAME},${PACKAGE_VERSION}"" CACHE STRING; ""See http://qt-project.org/doc/qt-4.8/qthelpproject.html#filter-attributes""); find_program(LLVM_DOXYGEN_QHELPGENERATOR_PATH qhelpgenerator; DOC ""Path to the qhelpgenerator binary""); if (NOT LLVM_DOXYGEN_QHELPGENERATOR_PATH); message(FATAL_ERROR ""Failed to find qhelpgenerator binary""); endif(). set(llvm_doxygen_generate_qhp ""YES""); set(llvm_doxygen_qch_filename ""${LLVM_DOXYGEN_QCH_FILENAME}""); set(llvm_doxygen_qhp_namespace ""${LLVM_DOXYGEN_QHP_NAMESPACE}""); set(llvm_doxygen_qhelpgenerator_path ""${LLVM_DOXYGEN_QHELPGENERATOR_PATH}""); set(llvm_doxygen_qhp_cust_filter_name ""${LLVM_DOXYGEN_QHP_CUST_FILTER_NAME}""); set(llvm_doxygen_qhp_cust_filter_attrs ""${LLVM_DOXYGEN_QHP_CUST_FILTER_ATTRS}""). else(); set(llvm_doxygen_generate_qhp ""NO""); set(llvm_doxygen_qch_filename """"); set(llvm_doxygen_qhp_namespace """"); set(llvm_doxygen_qhelpgenerator_path """"); set(llvm_doxygen_qhp_cust_filter_name """"); set(llvm_doxygen_qhp_cust_filter_attrs """"); endif(). option(LLVM_DOXYGEN_SVG; ""Use svg instead of png files for doxygen graphs."" OFF); if (LLVM_DOXYGEN_SVG); set(DOT_IMAGE_FORMAT ""svg""); else(); set(DOT_IMAGE_FORMAT ""png""); endif(). configure_file(${CMAKE_CURRENT_SOURCE_DIR",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMakeLists.txt:649,Modifiability,config,configure,649,"; if (DOXYGEN_FOUND); if (LLVM_ENABLE_DOXYGEN); set(abs_top_srcdir ${CMAKE_CURRENT_SOURCE_DIR}); set(abs_top_builddir ${CMAKE_CURRENT_BINARY_DIR}). if (HAVE_DOT); set(DOT ${LLVM_PATH_DOT}); endif(). if (LLVM_DOXYGEN_EXTERNAL_SEARCH); set(enable_searchengine ""YES""); set(searchengine_url ""${LLVM_DOXYGEN_SEARCHENGINE_URL}""); set(enable_server_based_search ""YES""); set(enable_external_search ""YES""); set(extra_search_mappings ""${LLVM_DOXYGEN_SEARCH_MAPPINGS}""); else(); set(enable_searchengine ""NO""); set(searchengine_url """"); set(enable_server_based_search ""NO""); set(enable_external_search ""NO""); set(extra_search_mappings """"); endif(). # If asked, configure doxygen for the creation of a Qt Compressed Help file.; option(LLVM_ENABLE_DOXYGEN_QT_HELP; ""Generate a Qt Compressed Help file."" OFF); if (LLVM_ENABLE_DOXYGEN_QT_HELP); set(LLVM_DOXYGEN_QCH_FILENAME ""org.llvm.qch"" CACHE STRING; ""Filename of the Qt Compressed help file""); set(LLVM_DOXYGEN_QHP_NAMESPACE ""org.llvm"" CACHE STRING; ""Namespace under which the intermediate Qt Help Project file lives""); set(LLVM_DOXYGEN_QHP_CUST_FILTER_NAME ""${PACKAGE_STRING}"" CACHE STRING; ""See http://qt-project.org/doc/qt-4.8/qthelpproject.html#custom-filters""); set(LLVM_DOXYGEN_QHP_CUST_FILTER_ATTRS ""${PACKAGE_NAME},${PACKAGE_VERSION}"" CACHE STRING; ""See http://qt-project.org/doc/qt-4.8/qthelpproject.html#filter-attributes""); find_program(LLVM_DOXYGEN_QHELPGENERATOR_PATH qhelpgenerator; DOC ""Path to the qhelpgenerator binary""); if (NOT LLVM_DOXYGEN_QHELPGENERATOR_PATH); message(FATAL_ERROR ""Failed to find qhelpgenerator binary""); endif(). set(llvm_doxygen_generate_qhp ""YES""); set(llvm_doxygen_qch_filename ""${LLVM_DOXYGEN_QCH_FILENAME}""); set(llvm_doxygen_qhp_namespace ""${LLVM_DOXYGEN_QHP_NAMESPACE}""); set(llvm_doxygen_qhelpgenerator_path ""${LLVM_DOXYGEN_QHELPGENERATOR_PATH}""); set(llvm_doxygen_qhp_cust_filter_name ""${LLVM_DOXYGEN_QHP_CUST_FILTER_NAME}""); set(llvm_doxygen_qhp_cust_filter_attrs ""${LLVM_DOXYGEN_QHP_CUST_FILTER_ATTRS}""). else(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMakeLists.txt:4453,Performance,load,load,4453,"is needed to copy the contents of html directory without; # appending html/ into LLVM_INSTALL_DOXYGEN_HTML_DIR.; install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/doxygen/html/.; COMPONENT doxygen-html; DESTINATION ""${LLVM_INSTALL_DOXYGEN_HTML_DIR}""); endif(); endif(); endif(). if (LLVM_ENABLE_SPHINX); include(AddSphinxTarget); if (SPHINX_FOUND); if (${SPHINX_OUTPUT_HTML}); add_sphinx_target(html llvm); endif(). if (${SPHINX_OUTPUT_MAN}); add_sphinx_target(man llvm); add_sphinx_target(man llvm-dwarfdump); add_sphinx_target(man dsymutil); endif(). endif(); endif(). list(FIND LLVM_BINDINGS_LIST ocaml uses_ocaml); if( NOT uses_ocaml LESS 0 AND LLVM_ENABLE_OCAMLDOC ); set(doc_targets; ocaml_llvm; ocaml_llvm_all_backends; ocaml_llvm_analysis; ocaml_llvm_bitreader; ocaml_llvm_bitwriter; ocaml_llvm_executionengine; ocaml_llvm_irreader; ocaml_llvm_linker; ocaml_llvm_target; ocaml_llvm_transform_utils; ). foreach(llvm_target ${LLVM_TARGETS_TO_BUILD}); list(APPEND doc_targets ocaml_llvm_${llvm_target}); endforeach(). set(odoc_files); foreach( doc_target ${doc_targets} ); get_target_property(odoc_file ${doc_target} OCAML_ODOC); list(APPEND odoc_files -load ${odoc_file}); endforeach(). add_custom_target(ocaml_doc; COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_CURRENT_BINARY_DIR}/ocamldoc/html; COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_CURRENT_BINARY_DIR}/ocamldoc/html; COMMAND ${OCAMLFIND} ocamldoc -d ${CMAKE_CURRENT_BINARY_DIR}/ocamldoc/html; -sort -colorize-code -html ${odoc_files}; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/_ocamldoc/style.css; ${CMAKE_CURRENT_BINARY_DIR}/ocamldoc/html). add_dependencies(ocaml_doc ${doc_targets}). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); # ./ suffix is needed to copy the contents of html directory without; # appending html/ into LLVM_INSTALL_OCAMLDOC_HTML_DIR.; install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/ocamldoc/html/.; COMPONENT ocamldoc-html; DESTINATION ""${LLVM_INSTALL_OCAMLDOC_HTML_DIR}""); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt:1077,Availability,redundant,redundant,1077,"/ Representing sign/zero extension of function results; //===----------------------------------------------------------------------===//. Mar 25, 2009 - Initial Revision. Most ABIs specify that functions which return small integers do so in a; specific integer GPR. This is an efficient way to go, but raises the question:; if the returned value is smaller than the register, what do the high bits hold?. There are three (interesting) possible answers: undefined, zero extended, or; sign extended. The number of bits in question depends on the data-type that; the front-end is referencing (typically i1/i8/i16/i32). Knowing the answer to this is important for two reasons: 1) we want to be able; to implement the ABI correctly. If we need to sign extend the result according; to the ABI, we really really do need to do this to preserve correctness. 2); this information is often useful for optimization purposes, and we want the; mid-level optimizers to be able to process this (e.g. eliminate redundant; extensions). For example, lets pretend that X86 requires the caller to properly extend the; result of a return (I'm not sure this is the case, but the argument doesn't; depend on this). Given this, we should compile this:. int a();; short b() { return a(); }. into:. _b:; 	subl	$12, %esp; 	call	L_a$stub; 	addl	$12, %esp; 	cwtl; 	ret. An optimization example is that we should be able to eliminate the explicit; sign extension in this example:. short y();; int z() {; return ((int)y() << 16) >> 16;; }. _z:; 	subl	$12, %esp; 	call	_y; 	;; movswl %ax, %eax -> not needed because eax is already sext'd; 	addl	$12, %esp; 	ret. //===----------------------------------------------------------------------===//; // What we have right now.; //===----------------------------------------------------------------------===//. Currently, these sorts of things are modelled by compiling a function to return; the small type and a signext/zeroext marker is used. For example, we compile; Z into:. define i32 ",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt:360,Energy Efficiency,efficient,efficient,360,"//===----------------------------------------------------------------------===//; // Representing sign/zero extension of function results; //===----------------------------------------------------------------------===//. Mar 25, 2009 - Initial Revision. Most ABIs specify that functions which return small integers do so in a; specific integer GPR. This is an efficient way to go, but raises the question:; if the returned value is smaller than the register, what do the high bits hold?. There are three (interesting) possible answers: undefined, zero extended, or; sign extended. The number of bits in question depends on the data-type that; the front-end is referencing (typically i1/i8/i16/i32). Knowing the answer to this is important for two reasons: 1) we want to be able; to implement the ABI correctly. If we need to sign extend the result according; to the ABI, we really really do need to do this to preserve correctness. 2); this information is often useful for optimization purposes, and we want the; mid-level optimizers to be able to process this (e.g. eliminate redundant; extensions). For example, lets pretend that X86 requires the caller to properly extend the; result of a return (I'm not sure this is the case, but the argument doesn't; depend on this). Given this, we should compile this:. int a();; short b() { return a(); }. into:. _b:; 	subl	$12, %esp; 	call	L_a$stub; 	addl	$12, %esp; 	cwtl; 	ret. An optimization example is that we should be able to eliminate the explicit; sign extension in this example:. short y();; int z() {; return ((int)y() << 16) >> 16;; }. _z:; 	subl	$12, %esp; 	call	_y; 	;; movswl %ax, %eax -> not needed because eax is already sext'd; 	addl	$12, %esp; 	ret. //===----------------------------------------------------------------------===//; // What we have right now.; //===----------------------------------------------------------------------===//. Currently, these sorts of things are modelled by compiling a function to return; the small type a",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt:612,Integrability,depend,depends,612,"//===----------------------------------------------------------------------===//; // Representing sign/zero extension of function results; //===----------------------------------------------------------------------===//. Mar 25, 2009 - Initial Revision. Most ABIs specify that functions which return small integers do so in a; specific integer GPR. This is an efficient way to go, but raises the question:; if the returned value is smaller than the register, what do the high bits hold?. There are three (interesting) possible answers: undefined, zero extended, or; sign extended. The number of bits in question depends on the data-type that; the front-end is referencing (typically i1/i8/i16/i32). Knowing the answer to this is important for two reasons: 1) we want to be able; to implement the ABI correctly. If we need to sign extend the result according; to the ABI, we really really do need to do this to preserve correctness. 2); this information is often useful for optimization purposes, and we want the; mid-level optimizers to be able to process this (e.g. eliminate redundant; extensions). For example, lets pretend that X86 requires the caller to properly extend the; result of a return (I'm not sure this is the case, but the argument doesn't; depend on this). Given this, we should compile this:. int a();; short b() { return a(); }. into:. _b:; 	subl	$12, %esp; 	call	L_a$stub; 	addl	$12, %esp; 	cwtl; 	ret. An optimization example is that we should be able to eliminate the explicit; sign extension in this example:. short y();; int z() {; return ((int)y() << 16) >> 16;; }. _z:; 	subl	$12, %esp; 	call	_y; 	;; movswl %ax, %eax -> not needed because eax is already sext'd; 	addl	$12, %esp; 	ret. //===----------------------------------------------------------------------===//; // What we have right now.; //===----------------------------------------------------------------------===//. Currently, these sorts of things are modelled by compiling a function to return; the small type a",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt:1257,Integrability,depend,depend,1257,"----------------------------===//. Mar 25, 2009 - Initial Revision. Most ABIs specify that functions which return small integers do so in a; specific integer GPR. This is an efficient way to go, but raises the question:; if the returned value is smaller than the register, what do the high bits hold?. There are three (interesting) possible answers: undefined, zero extended, or; sign extended. The number of bits in question depends on the data-type that; the front-end is referencing (typically i1/i8/i16/i32). Knowing the answer to this is important for two reasons: 1) we want to be able; to implement the ABI correctly. If we need to sign extend the result according; to the ABI, we really really do need to do this to preserve correctness. 2); this information is often useful for optimization purposes, and we want the; mid-level optimizers to be able to process this (e.g. eliminate redundant; extensions). For example, lets pretend that X86 requires the caller to properly extend the; result of a return (I'm not sure this is the case, but the argument doesn't; depend on this). Given this, we should compile this:. int a();; short b() { return a(); }. into:. _b:; 	subl	$12, %esp; 	call	L_a$stub; 	addl	$12, %esp; 	cwtl; 	ret. An optimization example is that we should be able to eliminate the explicit; sign extension in this example:. short y();; int z() {; return ((int)y() << 16) >> 16;; }. _z:; 	subl	$12, %esp; 	call	_y; 	;; movswl %ax, %eax -> not needed because eax is already sext'd; 	addl	$12, %esp; 	ret. //===----------------------------------------------------------------------===//; // What we have right now.; //===----------------------------------------------------------------------===//. Currently, these sorts of things are modelled by compiling a function to return; the small type and a signext/zeroext marker is used. For example, we compile; Z into:. define i32 @z() nounwind {; entry:; 	%0 = tail call signext i16 (...)* @y() nounwind; 	%1 = sext i16 %0 to i32; 	re",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt:552,Modifiability,extend,extended,552,"//===----------------------------------------------------------------------===//; // Representing sign/zero extension of function results; //===----------------------------------------------------------------------===//. Mar 25, 2009 - Initial Revision. Most ABIs specify that functions which return small integers do so in a; specific integer GPR. This is an efficient way to go, but raises the question:; if the returned value is smaller than the register, what do the high bits hold?. There are three (interesting) possible answers: undefined, zero extended, or; sign extended. The number of bits in question depends on the data-type that; the front-end is referencing (typically i1/i8/i16/i32). Knowing the answer to this is important for two reasons: 1) we want to be able; to implement the ABI correctly. If we need to sign extend the result according; to the ABI, we really really do need to do this to preserve correctness. 2); this information is often useful for optimization purposes, and we want the; mid-level optimizers to be able to process this (e.g. eliminate redundant; extensions). For example, lets pretend that X86 requires the caller to properly extend the; result of a return (I'm not sure this is the case, but the argument doesn't; depend on this). Given this, we should compile this:. int a();; short b() { return a(); }. into:. _b:; 	subl	$12, %esp; 	call	L_a$stub; 	addl	$12, %esp; 	cwtl; 	ret. An optimization example is that we should be able to eliminate the explicit; sign extension in this example:. short y();; int z() {; return ((int)y() << 16) >> 16;; }. _z:; 	subl	$12, %esp; 	call	_y; 	;; movswl %ax, %eax -> not needed because eax is already sext'd; 	addl	$12, %esp; 	ret. //===----------------------------------------------------------------------===//; // What we have right now.; //===----------------------------------------------------------------------===//. Currently, these sorts of things are modelled by compiling a function to return; the small type a",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt:571,Modifiability,extend,extended,571,"//===----------------------------------------------------------------------===//; // Representing sign/zero extension of function results; //===----------------------------------------------------------------------===//. Mar 25, 2009 - Initial Revision. Most ABIs specify that functions which return small integers do so in a; specific integer GPR. This is an efficient way to go, but raises the question:; if the returned value is smaller than the register, what do the high bits hold?. There are three (interesting) possible answers: undefined, zero extended, or; sign extended. The number of bits in question depends on the data-type that; the front-end is referencing (typically i1/i8/i16/i32). Knowing the answer to this is important for two reasons: 1) we want to be able; to implement the ABI correctly. If we need to sign extend the result according; to the ABI, we really really do need to do this to preserve correctness. 2); this information is often useful for optimization purposes, and we want the; mid-level optimizers to be able to process this (e.g. eliminate redundant; extensions). For example, lets pretend that X86 requires the caller to properly extend the; result of a return (I'm not sure this is the case, but the argument doesn't; depend on this). Given this, we should compile this:. int a();; short b() { return a(); }. into:. _b:; 	subl	$12, %esp; 	call	L_a$stub; 	addl	$12, %esp; 	cwtl; 	ret. An optimization example is that we should be able to eliminate the explicit; sign extension in this example:. short y();; int z() {; return ((int)y() << 16) >> 16;; }. _z:; 	subl	$12, %esp; 	call	_y; 	;; movswl %ax, %eax -> not needed because eax is already sext'd; 	addl	$12, %esp; 	ret. //===----------------------------------------------------------------------===//; // What we have right now.; //===----------------------------------------------------------------------===//. Currently, these sorts of things are modelled by compiling a function to return; the small type a",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt:830,Modifiability,extend,extend,830,"//===----------------------------------------------------------------------===//; // Representing sign/zero extension of function results; //===----------------------------------------------------------------------===//. Mar 25, 2009 - Initial Revision. Most ABIs specify that functions which return small integers do so in a; specific integer GPR. This is an efficient way to go, but raises the question:; if the returned value is smaller than the register, what do the high bits hold?. There are three (interesting) possible answers: undefined, zero extended, or; sign extended. The number of bits in question depends on the data-type that; the front-end is referencing (typically i1/i8/i16/i32). Knowing the answer to this is important for two reasons: 1) we want to be able; to implement the ABI correctly. If we need to sign extend the result according; to the ABI, we really really do need to do this to preserve correctness. 2); this information is often useful for optimization purposes, and we want the; mid-level optimizers to be able to process this (e.g. eliminate redundant; extensions). For example, lets pretend that X86 requires the caller to properly extend the; result of a return (I'm not sure this is the case, but the argument doesn't; depend on this). Given this, we should compile this:. int a();; short b() { return a(); }. into:. _b:; 	subl	$12, %esp; 	call	L_a$stub; 	addl	$12, %esp; 	cwtl; 	ret. An optimization example is that we should be able to eliminate the explicit; sign extension in this example:. short y();; int z() {; return ((int)y() << 16) >> 16;; }. _z:; 	subl	$12, %esp; 	call	_y; 	;; movswl %ax, %eax -> not needed because eax is already sext'd; 	addl	$12, %esp; 	ret. //===----------------------------------------------------------------------===//; // What we have right now.; //===----------------------------------------------------------------------===//. Currently, these sorts of things are modelled by compiling a function to return; the small type a",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt:1168,Modifiability,extend,extend,1168,"----------------------------===//. Mar 25, 2009 - Initial Revision. Most ABIs specify that functions which return small integers do so in a; specific integer GPR. This is an efficient way to go, but raises the question:; if the returned value is smaller than the register, what do the high bits hold?. There are three (interesting) possible answers: undefined, zero extended, or; sign extended. The number of bits in question depends on the data-type that; the front-end is referencing (typically i1/i8/i16/i32). Knowing the answer to this is important for two reasons: 1) we want to be able; to implement the ABI correctly. If we need to sign extend the result according; to the ABI, we really really do need to do this to preserve correctness. 2); this information is often useful for optimization purposes, and we want the; mid-level optimizers to be able to process this (e.g. eliminate redundant; extensions). For example, lets pretend that X86 requires the caller to properly extend the; result of a return (I'm not sure this is the case, but the argument doesn't; depend on this). Given this, we should compile this:. int a();; short b() { return a(); }. into:. _b:; 	subl	$12, %esp; 	call	L_a$stub; 	addl	$12, %esp; 	cwtl; 	ret. An optimization example is that we should be able to eliminate the explicit; sign extension in this example:. short y();; int z() {; return ((int)y() << 16) >> 16;; }. _z:; 	subl	$12, %esp; 	call	_y; 	;; movswl %ax, %eax -> not needed because eax is already sext'd; 	addl	$12, %esp; 	ret. //===----------------------------------------------------------------------===//; // What we have right now.; //===----------------------------------------------------------------------===//. Currently, these sorts of things are modelled by compiling a function to return; the small type and a signext/zeroext marker is used. For example, we compile; Z into:. define i32 @z() nounwind {; entry:; 	%0 = tail call signext i16 (...)* @y() nounwind; 	%1 = sext i16 %0 to i32; 	re",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt:2532,Modifiability,extend,extend,2532,";; movswl %ax, %eax -> not needed because eax is already sext'd; 	addl	$12, %esp; 	ret. //===----------------------------------------------------------------------===//; // What we have right now.; //===----------------------------------------------------------------------===//. Currently, these sorts of things are modelled by compiling a function to return; the small type and a signext/zeroext marker is used. For example, we compile; Z into:. define i32 @z() nounwind {; entry:; 	%0 = tail call signext i16 (...)* @y() nounwind; 	%1 = sext i16 %0 to i32; 	ret i32 %1; }. and b into:. define signext i16 @b() nounwind {; entry:; 	%0 = tail call i32 (...)* @a() nounwind		; <i32> [#uses=1]; 	%retval12 = trunc i32 %0 to i16		; <i16> [#uses=1]; 	ret i16 %retval12; }. This has some problems: 1) the actual precise semantics are really poorly; defined (see PR3779). 2) some targets might want the caller to extend, some; might want the callee to extend 3) the mid-level optimizer doesn't know the; size of the GPR, so it doesn't know that %0 is sign extended up to 32-bits ; here, and even if it did, it could not eliminate the sext. 4) the code; generator has historically assumed that the result is extended to i32, which is; a problem on PIC16 (and is also probably wrong on alpha and other 64-bit; targets). //===----------------------------------------------------------------------===//; // The proposal; //===----------------------------------------------------------------------===//. I suggest that we have the front-end fully lower out the ABI issues here to; LLVM IR. This makes it 100% explicit what is going on and means that there is; no cause for confusion. For example, the cases above should compile into:. define i32 @z() nounwind {; entry:; %0 = tail call i32 (...)* @y() nounwind; 	%1 = trunc i32 %0 to i16; %2 = sext i16 %1 to i32; ret i32 %2; }; define i32 @b() nounwind {; entry:; 	%0 = tail call i32 (...)* @a() nounwind; 	%retval12 = trunc i32 %0 to i16; 	%tmp = sext i16 %r",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt:2571,Modifiability,extend,extend,2571,";; movswl %ax, %eax -> not needed because eax is already sext'd; 	addl	$12, %esp; 	ret. //===----------------------------------------------------------------------===//; // What we have right now.; //===----------------------------------------------------------------------===//. Currently, these sorts of things are modelled by compiling a function to return; the small type and a signext/zeroext marker is used. For example, we compile; Z into:. define i32 @z() nounwind {; entry:; 	%0 = tail call signext i16 (...)* @y() nounwind; 	%1 = sext i16 %0 to i32; 	ret i32 %1; }. and b into:. define signext i16 @b() nounwind {; entry:; 	%0 = tail call i32 (...)* @a() nounwind		; <i32> [#uses=1]; 	%retval12 = trunc i32 %0 to i16		; <i16> [#uses=1]; 	ret i16 %retval12; }. This has some problems: 1) the actual precise semantics are really poorly; defined (see PR3779). 2) some targets might want the caller to extend, some; might want the callee to extend 3) the mid-level optimizer doesn't know the; size of the GPR, so it doesn't know that %0 is sign extended up to 32-bits ; here, and even if it did, it could not eliminate the sext. 4) the code; generator has historically assumed that the result is extended to i32, which is; a problem on PIC16 (and is also probably wrong on alpha and other 64-bit; targets). //===----------------------------------------------------------------------===//; // The proposal; //===----------------------------------------------------------------------===//. I suggest that we have the front-end fully lower out the ABI issues here to; LLVM IR. This makes it 100% explicit what is going on and means that there is; no cause for confusion. For example, the cases above should compile into:. define i32 @z() nounwind {; entry:; %0 = tail call i32 (...)* @y() nounwind; 	%1 = trunc i32 %0 to i16; %2 = sext i16 %1 to i32; ret i32 %2; }; define i32 @b() nounwind {; entry:; 	%0 = tail call i32 (...)* @a() nounwind; 	%retval12 = trunc i32 %0 to i16; 	%tmp = sext i16 %r",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt:2675,Modifiability,extend,extended,2675,";; movswl %ax, %eax -> not needed because eax is already sext'd; 	addl	$12, %esp; 	ret. //===----------------------------------------------------------------------===//; // What we have right now.; //===----------------------------------------------------------------------===//. Currently, these sorts of things are modelled by compiling a function to return; the small type and a signext/zeroext marker is used. For example, we compile; Z into:. define i32 @z() nounwind {; entry:; 	%0 = tail call signext i16 (...)* @y() nounwind; 	%1 = sext i16 %0 to i32; 	ret i32 %1; }. and b into:. define signext i16 @b() nounwind {; entry:; 	%0 = tail call i32 (...)* @a() nounwind		; <i32> [#uses=1]; 	%retval12 = trunc i32 %0 to i16		; <i16> [#uses=1]; 	ret i16 %retval12; }. This has some problems: 1) the actual precise semantics are really poorly; defined (see PR3779). 2) some targets might want the caller to extend, some; might want the callee to extend 3) the mid-level optimizer doesn't know the; size of the GPR, so it doesn't know that %0 is sign extended up to 32-bits ; here, and even if it did, it could not eliminate the sext. 4) the code; generator has historically assumed that the result is extended to i32, which is; a problem on PIC16 (and is also probably wrong on alpha and other 64-bit; targets). //===----------------------------------------------------------------------===//; // The proposal; //===----------------------------------------------------------------------===//. I suggest that we have the front-end fully lower out the ABI issues here to; LLVM IR. This makes it 100% explicit what is going on and means that there is; no cause for confusion. For example, the cases above should compile into:. define i32 @z() nounwind {; entry:; %0 = tail call i32 (...)* @y() nounwind; 	%1 = trunc i32 %0 to i16; %2 = sext i16 %1 to i32; ret i32 %2; }; define i32 @b() nounwind {; entry:; 	%0 = tail call i32 (...)* @a() nounwind; 	%retval12 = trunc i32 %0 to i16; 	%tmp = sext i16 %r",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt:2826,Modifiability,extend,extended,2826,"--------------------------------------------------===//. Currently, these sorts of things are modelled by compiling a function to return; the small type and a signext/zeroext marker is used. For example, we compile; Z into:. define i32 @z() nounwind {; entry:; 	%0 = tail call signext i16 (...)* @y() nounwind; 	%1 = sext i16 %0 to i32; 	ret i32 %1; }. and b into:. define signext i16 @b() nounwind {; entry:; 	%0 = tail call i32 (...)* @a() nounwind		; <i32> [#uses=1]; 	%retval12 = trunc i32 %0 to i16		; <i16> [#uses=1]; 	ret i16 %retval12; }. This has some problems: 1) the actual precise semantics are really poorly; defined (see PR3779). 2) some targets might want the caller to extend, some; might want the callee to extend 3) the mid-level optimizer doesn't know the; size of the GPR, so it doesn't know that %0 is sign extended up to 32-bits ; here, and even if it did, it could not eliminate the sext. 4) the code; generator has historically assumed that the result is extended to i32, which is; a problem on PIC16 (and is also probably wrong on alpha and other 64-bit; targets). //===----------------------------------------------------------------------===//; // The proposal; //===----------------------------------------------------------------------===//. I suggest that we have the front-end fully lower out the ABI issues here to; LLVM IR. This makes it 100% explicit what is going on and means that there is; no cause for confusion. For example, the cases above should compile into:. define i32 @z() nounwind {; entry:; %0 = tail call i32 (...)* @y() nounwind; 	%1 = trunc i32 %0 to i16; %2 = sext i16 %1 to i32; ret i32 %2; }; define i32 @b() nounwind {; entry:; 	%0 = tail call i32 (...)* @a() nounwind; 	%retval12 = trunc i32 %0 to i16; 	%tmp = sext i16 %retval12 to i32; 	ret i32 %tmp; }. In this model, no functions will return an i1/i8/i16 (and on a x86-64 target; that extends results to i64, no i32). This solves the ambiguity issue, allows us ; to fully describe all possib",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt:3741,Modifiability,extend,extends,3741,"if it did, it could not eliminate the sext. 4) the code; generator has historically assumed that the result is extended to i32, which is; a problem on PIC16 (and is also probably wrong on alpha and other 64-bit; targets). //===----------------------------------------------------------------------===//; // The proposal; //===----------------------------------------------------------------------===//. I suggest that we have the front-end fully lower out the ABI issues here to; LLVM IR. This makes it 100% explicit what is going on and means that there is; no cause for confusion. For example, the cases above should compile into:. define i32 @z() nounwind {; entry:; %0 = tail call i32 (...)* @y() nounwind; 	%1 = trunc i32 %0 to i16; %2 = sext i16 %1 to i32; ret i32 %2; }; define i32 @b() nounwind {; entry:; 	%0 = tail call i32 (...)* @a() nounwind; 	%retval12 = trunc i32 %0 to i16; 	%tmp = sext i16 %retval12 to i32; 	ret i32 %tmp; }. In this model, no functions will return an i1/i8/i16 (and on a x86-64 target; that extends results to i64, no i32). This solves the ambiguity issue, allows us ; to fully describe all possible ABIs, and now allows the optimizers to reason; about and eliminate these extensions. The one thing that is missing is the ability for the front-end and optimizer to; specify/infer the guarantees provided by the ABI to allow other optimizations.; For example, in the y/z case, since y is known to return a sign extended value,; the trunc/sext in z should be eliminable. This can be done by introducing new sext/zext attributes which mean ""I know; that the result of the function is sign extended at least N bits. Given this,; and given that it is stuck on the y function, the mid-level optimizer could; easily eliminate the extensions etc with existing functionality. The major disadvantage of doing this sort of thing is that it makes the ABI; lowering stuff even more explicit in the front-end, and that we would like to; eventually move to having the code generat",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt:4160,Modifiability,extend,extended,4160,"===----------------------------------------------------------------------===//. I suggest that we have the front-end fully lower out the ABI issues here to; LLVM IR. This makes it 100% explicit what is going on and means that there is; no cause for confusion. For example, the cases above should compile into:. define i32 @z() nounwind {; entry:; %0 = tail call i32 (...)* @y() nounwind; 	%1 = trunc i32 %0 to i16; %2 = sext i16 %1 to i32; ret i32 %2; }; define i32 @b() nounwind {; entry:; 	%0 = tail call i32 (...)* @a() nounwind; 	%retval12 = trunc i32 %0 to i16; 	%tmp = sext i16 %retval12 to i32; 	ret i32 %tmp; }. In this model, no functions will return an i1/i8/i16 (and on a x86-64 target; that extends results to i64, no i32). This solves the ambiguity issue, allows us ; to fully describe all possible ABIs, and now allows the optimizers to reason; about and eliminate these extensions. The one thing that is missing is the ability for the front-end and optimizer to; specify/infer the guarantees provided by the ABI to allow other optimizations.; For example, in the y/z case, since y is known to return a sign extended value,; the trunc/sext in z should be eliminable. This can be done by introducing new sext/zext attributes which mean ""I know; that the result of the function is sign extended at least N bits. Given this,; and given that it is stuck on the y function, the mid-level optimizer could; easily eliminate the extensions etc with existing functionality. The major disadvantage of doing this sort of thing is that it makes the ABI; lowering stuff even more explicit in the front-end, and that we would like to; eventually move to having the code generator do more of this work. However,; the sad truth of the matter is that this is a) unlikely to happen anytime in; the near future, and b) this is no worse than we have now with the existing; attributes. C compilers fundamentally have to reason about the target in many ways. ; This is ugly and horrible, but a fact of life. ",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt:4336,Modifiability,extend,extended,4336,"===----------------------------------------------------------------------===//. I suggest that we have the front-end fully lower out the ABI issues here to; LLVM IR. This makes it 100% explicit what is going on and means that there is; no cause for confusion. For example, the cases above should compile into:. define i32 @z() nounwind {; entry:; %0 = tail call i32 (...)* @y() nounwind; 	%1 = trunc i32 %0 to i16; %2 = sext i16 %1 to i32; ret i32 %2; }; define i32 @b() nounwind {; entry:; 	%0 = tail call i32 (...)* @a() nounwind; 	%retval12 = trunc i32 %0 to i16; 	%tmp = sext i16 %retval12 to i32; 	ret i32 %tmp; }. In this model, no functions will return an i1/i8/i16 (and on a x86-64 target; that extends results to i64, no i32). This solves the ambiguity issue, allows us ; to fully describe all possible ABIs, and now allows the optimizers to reason; about and eliminate these extensions. The one thing that is missing is the ability for the front-end and optimizer to; specify/infer the guarantees provided by the ABI to allow other optimizations.; For example, in the y/z case, since y is known to return a sign extended value,; the trunc/sext in z should be eliminable. This can be done by introducing new sext/zext attributes which mean ""I know; that the result of the function is sign extended at least N bits. Given this,; and given that it is stuck on the y function, the mid-level optimizer could; easily eliminate the extensions etc with existing functionality. The major disadvantage of doing this sort of thing is that it makes the ABI; lowering stuff even more explicit in the front-end, and that we would like to; eventually move to having the code generator do more of this work. However,; the sad truth of the matter is that this is a) unlikely to happen anytime in; the near future, and b) this is no worse than we have now with the existing; attributes. C compilers fundamentally have to reason about the target in many ways. ; This is ugly and horrible, but a fact of life. ",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt:973,Performance,optimiz,optimization,973,"//===----------------------------------------------------------------------===//; // Representing sign/zero extension of function results; //===----------------------------------------------------------------------===//. Mar 25, 2009 - Initial Revision. Most ABIs specify that functions which return small integers do so in a; specific integer GPR. This is an efficient way to go, but raises the question:; if the returned value is smaller than the register, what do the high bits hold?. There are three (interesting) possible answers: undefined, zero extended, or; sign extended. The number of bits in question depends on the data-type that; the front-end is referencing (typically i1/i8/i16/i32). Knowing the answer to this is important for two reasons: 1) we want to be able; to implement the ABI correctly. If we need to sign extend the result according; to the ABI, we really really do need to do this to preserve correctness. 2); this information is often useful for optimization purposes, and we want the; mid-level optimizers to be able to process this (e.g. eliminate redundant; extensions). For example, lets pretend that X86 requires the caller to properly extend the; result of a return (I'm not sure this is the case, but the argument doesn't; depend on this). Given this, we should compile this:. int a();; short b() { return a(); }. into:. _b:; 	subl	$12, %esp; 	call	L_a$stub; 	addl	$12, %esp; 	cwtl; 	ret. An optimization example is that we should be able to eliminate the explicit; sign extension in this example:. short y();; int z() {; return ((int)y() << 16) >> 16;; }. _z:; 	subl	$12, %esp; 	call	_y; 	;; movswl %ax, %eax -> not needed because eax is already sext'd; 	addl	$12, %esp; 	ret. //===----------------------------------------------------------------------===//; // What we have right now.; //===----------------------------------------------------------------------===//. Currently, these sorts of things are modelled by compiling a function to return; the small type a",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt:1023,Performance,optimiz,optimizers,1023,"//===----------------------------------------------------------------------===//; // Representing sign/zero extension of function results; //===----------------------------------------------------------------------===//. Mar 25, 2009 - Initial Revision. Most ABIs specify that functions which return small integers do so in a; specific integer GPR. This is an efficient way to go, but raises the question:; if the returned value is smaller than the register, what do the high bits hold?. There are three (interesting) possible answers: undefined, zero extended, or; sign extended. The number of bits in question depends on the data-type that; the front-end is referencing (typically i1/i8/i16/i32). Knowing the answer to this is important for two reasons: 1) we want to be able; to implement the ABI correctly. If we need to sign extend the result according; to the ABI, we really really do need to do this to preserve correctness. 2); this information is often useful for optimization purposes, and we want the; mid-level optimizers to be able to process this (e.g. eliminate redundant; extensions). For example, lets pretend that X86 requires the caller to properly extend the; result of a return (I'm not sure this is the case, but the argument doesn't; depend on this). Given this, we should compile this:. int a();; short b() { return a(); }. into:. _b:; 	subl	$12, %esp; 	call	L_a$stub; 	addl	$12, %esp; 	cwtl; 	ret. An optimization example is that we should be able to eliminate the explicit; sign extension in this example:. short y();; int z() {; return ((int)y() << 16) >> 16;; }. _z:; 	subl	$12, %esp; 	call	_y; 	;; movswl %ax, %eax -> not needed because eax is already sext'd; 	addl	$12, %esp; 	ret. //===----------------------------------------------------------------------===//; // What we have right now.; //===----------------------------------------------------------------------===//. Currently, these sorts of things are modelled by compiling a function to return; the small type a",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt:1426,Performance,optimiz,optimization,1426,"its hold?. There are three (interesting) possible answers: undefined, zero extended, or; sign extended. The number of bits in question depends on the data-type that; the front-end is referencing (typically i1/i8/i16/i32). Knowing the answer to this is important for two reasons: 1) we want to be able; to implement the ABI correctly. If we need to sign extend the result according; to the ABI, we really really do need to do this to preserve correctness. 2); this information is often useful for optimization purposes, and we want the; mid-level optimizers to be able to process this (e.g. eliminate redundant; extensions). For example, lets pretend that X86 requires the caller to properly extend the; result of a return (I'm not sure this is the case, but the argument doesn't; depend on this). Given this, we should compile this:. int a();; short b() { return a(); }. into:. _b:; 	subl	$12, %esp; 	call	L_a$stub; 	addl	$12, %esp; 	cwtl; 	ret. An optimization example is that we should be able to eliminate the explicit; sign extension in this example:. short y();; int z() {; return ((int)y() << 16) >> 16;; }. _z:; 	subl	$12, %esp; 	call	_y; 	;; movswl %ax, %eax -> not needed because eax is already sext'd; 	addl	$12, %esp; 	ret. //===----------------------------------------------------------------------===//; // What we have right now.; //===----------------------------------------------------------------------===//. Currently, these sorts of things are modelled by compiling a function to return; the small type and a signext/zeroext marker is used. For example, we compile; Z into:. define i32 @z() nounwind {; entry:; 	%0 = tail call signext i16 (...)* @y() nounwind; 	%1 = sext i16 %0 to i32; 	ret i32 %1; }. and b into:. define signext i16 @b() nounwind {; entry:; 	%0 = tail call i32 (...)* @a() nounwind		; <i32> [#uses=1]; 	%retval12 = trunc i32 %0 to i16		; <i16> [#uses=1]; 	ret i16 %retval12; }. This has some problems: 1) the actual precise semantics are really poorly; defined ",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt:2595,Performance,optimiz,optimizer,2595,";; movswl %ax, %eax -> not needed because eax is already sext'd; 	addl	$12, %esp; 	ret. //===----------------------------------------------------------------------===//; // What we have right now.; //===----------------------------------------------------------------------===//. Currently, these sorts of things are modelled by compiling a function to return; the small type and a signext/zeroext marker is used. For example, we compile; Z into:. define i32 @z() nounwind {; entry:; 	%0 = tail call signext i16 (...)* @y() nounwind; 	%1 = sext i16 %0 to i32; 	ret i32 %1; }. and b into:. define signext i16 @b() nounwind {; entry:; 	%0 = tail call i32 (...)* @a() nounwind		; <i32> [#uses=1]; 	%retval12 = trunc i32 %0 to i16		; <i16> [#uses=1]; 	ret i16 %retval12; }. This has some problems: 1) the actual precise semantics are really poorly; defined (see PR3779). 2) some targets might want the caller to extend, some; might want the callee to extend 3) the mid-level optimizer doesn't know the; size of the GPR, so it doesn't know that %0 is sign extended up to 32-bits ; here, and even if it did, it could not eliminate the sext. 4) the code; generator has historically assumed that the result is extended to i32, which is; a problem on PIC16 (and is also probably wrong on alpha and other 64-bit; targets). //===----------------------------------------------------------------------===//; // The proposal; //===----------------------------------------------------------------------===//. I suggest that we have the front-end fully lower out the ABI issues here to; LLVM IR. This makes it 100% explicit what is going on and means that there is; no cause for confusion. For example, the cases above should compile into:. define i32 @z() nounwind {; entry:; %0 = tail call i32 (...)* @y() nounwind; 	%1 = trunc i32 %0 to i16; %2 = sext i16 %1 to i32; ret i32 %2; }; define i32 @b() nounwind {; entry:; 	%0 = tail call i32 (...)* @a() nounwind; 	%retval12 = trunc i32 %0 to i16; 	%tmp = sext i16 %r",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt:3875,Performance,optimiz,optimizers,3875,"a problem on PIC16 (and is also probably wrong on alpha and other 64-bit; targets). //===----------------------------------------------------------------------===//; // The proposal; //===----------------------------------------------------------------------===//. I suggest that we have the front-end fully lower out the ABI issues here to; LLVM IR. This makes it 100% explicit what is going on and means that there is; no cause for confusion. For example, the cases above should compile into:. define i32 @z() nounwind {; entry:; %0 = tail call i32 (...)* @y() nounwind; 	%1 = trunc i32 %0 to i16; %2 = sext i16 %1 to i32; ret i32 %2; }; define i32 @b() nounwind {; entry:; 	%0 = tail call i32 (...)* @a() nounwind; 	%retval12 = trunc i32 %0 to i16; 	%tmp = sext i16 %retval12 to i32; 	ret i32 %tmp; }. In this model, no functions will return an i1/i8/i16 (and on a x86-64 target; that extends results to i64, no i32). This solves the ambiguity issue, allows us ; to fully describe all possible ABIs, and now allows the optimizers to reason; about and eliminate these extensions. The one thing that is missing is the ability for the front-end and optimizer to; specify/infer the guarantees provided by the ABI to allow other optimizations.; For example, in the y/z case, since y is known to return a sign extended value,; the trunc/sext in z should be eliminable. This can be done by introducing new sext/zext attributes which mean ""I know; that the result of the function is sign extended at least N bits. Given this,; and given that it is stuck on the y function, the mid-level optimizer could; easily eliminate the extensions etc with existing functionality. The major disadvantage of doing this sort of thing is that it makes the ABI; lowering stuff even more explicit in the front-end, and that we would like to; eventually move to having the code generator do more of this work. However,; the sad truth of the matter is that this is a) unlikely to happen anytime in; the near future, and b) th",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt:4002,Performance,optimiz,optimizer,4002,"=//; // The proposal; //===----------------------------------------------------------------------===//. I suggest that we have the front-end fully lower out the ABI issues here to; LLVM IR. This makes it 100% explicit what is going on and means that there is; no cause for confusion. For example, the cases above should compile into:. define i32 @z() nounwind {; entry:; %0 = tail call i32 (...)* @y() nounwind; 	%1 = trunc i32 %0 to i16; %2 = sext i16 %1 to i32; ret i32 %2; }; define i32 @b() nounwind {; entry:; 	%0 = tail call i32 (...)* @a() nounwind; 	%retval12 = trunc i32 %0 to i16; 	%tmp = sext i16 %retval12 to i32; 	ret i32 %tmp; }. In this model, no functions will return an i1/i8/i16 (and on a x86-64 target; that extends results to i64, no i32). This solves the ambiguity issue, allows us ; to fully describe all possible ABIs, and now allows the optimizers to reason; about and eliminate these extensions. The one thing that is missing is the ability for the front-end and optimizer to; specify/infer the guarantees provided by the ABI to allow other optimizations.; For example, in the y/z case, since y is known to return a sign extended value,; the trunc/sext in z should be eliminable. This can be done by introducing new sext/zext attributes which mean ""I know; that the result of the function is sign extended at least N bits. Given this,; and given that it is stuck on the y function, the mid-level optimizer could; easily eliminate the extensions etc with existing functionality. The major disadvantage of doing this sort of thing is that it makes the ABI; lowering stuff even more explicit in the front-end, and that we would like to; eventually move to having the code generator do more of this work. However,; the sad truth of the matter is that this is a) unlikely to happen anytime in; the near future, and b) this is no worse than we have now with the existing; attributes. C compilers fundamentally have to reason about the target in many ways. ; This is ugly and horrib",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt:4080,Performance,optimiz,optimizations,4080,"=//; // The proposal; //===----------------------------------------------------------------------===//. I suggest that we have the front-end fully lower out the ABI issues here to; LLVM IR. This makes it 100% explicit what is going on and means that there is; no cause for confusion. For example, the cases above should compile into:. define i32 @z() nounwind {; entry:; %0 = tail call i32 (...)* @y() nounwind; 	%1 = trunc i32 %0 to i16; %2 = sext i16 %1 to i32; ret i32 %2; }; define i32 @b() nounwind {; entry:; 	%0 = tail call i32 (...)* @a() nounwind; 	%retval12 = trunc i32 %0 to i16; 	%tmp = sext i16 %retval12 to i32; 	ret i32 %tmp; }. In this model, no functions will return an i1/i8/i16 (and on a x86-64 target; that extends results to i64, no i32). This solves the ambiguity issue, allows us ; to fully describe all possible ABIs, and now allows the optimizers to reason; about and eliminate these extensions. The one thing that is missing is the ability for the front-end and optimizer to; specify/infer the guarantees provided by the ABI to allow other optimizations.; For example, in the y/z case, since y is known to return a sign extended value,; the trunc/sext in z should be eliminable. This can be done by introducing new sext/zext attributes which mean ""I know; that the result of the function is sign extended at least N bits. Given this,; and given that it is stuck on the y function, the mid-level optimizer could; easily eliminate the extensions etc with existing functionality. The major disadvantage of doing this sort of thing is that it makes the ABI; lowering stuff even more explicit in the front-end, and that we would like to; eventually move to having the code generator do more of this work. However,; the sad truth of the matter is that this is a) unlikely to happen anytime in; the near future, and b) this is no worse than we have now with the existing; attributes. C compilers fundamentally have to reason about the target in many ways. ; This is ugly and horrib",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt:4435,Performance,optimiz,optimizer,4435,"===----------------------------------------------------------------------===//. I suggest that we have the front-end fully lower out the ABI issues here to; LLVM IR. This makes it 100% explicit what is going on and means that there is; no cause for confusion. For example, the cases above should compile into:. define i32 @z() nounwind {; entry:; %0 = tail call i32 (...)* @y() nounwind; 	%1 = trunc i32 %0 to i16; %2 = sext i16 %1 to i32; ret i32 %2; }; define i32 @b() nounwind {; entry:; 	%0 = tail call i32 (...)* @a() nounwind; 	%retval12 = trunc i32 %0 to i16; 	%tmp = sext i16 %retval12 to i32; 	ret i32 %tmp; }. In this model, no functions will return an i1/i8/i16 (and on a x86-64 target; that extends results to i64, no i32). This solves the ambiguity issue, allows us ; to fully describe all possible ABIs, and now allows the optimizers to reason; about and eliminate these extensions. The one thing that is missing is the ability for the front-end and optimizer to; specify/infer the guarantees provided by the ABI to allow other optimizations.; For example, in the y/z case, since y is known to return a sign extended value,; the trunc/sext in z should be eliminable. This can be done by introducing new sext/zext attributes which mean ""I know; that the result of the function is sign extended at least N bits. Given this,; and given that it is stuck on the y function, the mid-level optimizer could; easily eliminate the extensions etc with existing functionality. The major disadvantage of doing this sort of thing is that it makes the ABI; lowering stuff even more explicit in the front-end, and that we would like to; eventually move to having the code generator do more of this work. However,; the sad truth of the matter is that this is a) unlikely to happen anytime in; the near future, and b) this is no worse than we have now with the existing; attributes. C compilers fundamentally have to reason about the target in many ways. ; This is ugly and horrible, but a fact of life. ",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt:1077,Safety,redund,redundant,1077,"/ Representing sign/zero extension of function results; //===----------------------------------------------------------------------===//. Mar 25, 2009 - Initial Revision. Most ABIs specify that functions which return small integers do so in a; specific integer GPR. This is an efficient way to go, but raises the question:; if the returned value is smaller than the register, what do the high bits hold?. There are three (interesting) possible answers: undefined, zero extended, or; sign extended. The number of bits in question depends on the data-type that; the front-end is referencing (typically i1/i8/i16/i32). Knowing the answer to this is important for two reasons: 1) we want to be able; to implement the ABI correctly. If we need to sign extend the result according; to the ABI, we really really do need to do this to preserve correctness. 2); this information is often useful for optimization purposes, and we want the; mid-level optimizers to be able to process this (e.g. eliminate redundant; extensions). For example, lets pretend that X86 requires the caller to properly extend the; result of a return (I'm not sure this is the case, but the argument doesn't; depend on this). Given this, we should compile this:. int a();; short b() { return a(); }. into:. _b:; 	subl	$12, %esp; 	call	L_a$stub; 	addl	$12, %esp; 	cwtl; 	ret. An optimization example is that we should be able to eliminate the explicit; sign extension in this example:. short y();; int z() {; return ((int)y() << 16) >> 16;; }. _z:; 	subl	$12, %esp; 	call	_y; 	;; movswl %ax, %eax -> not needed because eax is already sext'd; 	addl	$12, %esp; 	ret. //===----------------------------------------------------------------------===//; // What we have right now.; //===----------------------------------------------------------------------===//. Currently, these sorts of things are modelled by compiling a function to return; the small type and a signext/zeroext marker is used. For example, we compile; Z into:. define i32 ",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt:1387,Testability,stub,stub,1387,"ses the question:; if the returned value is smaller than the register, what do the high bits hold?. There are three (interesting) possible answers: undefined, zero extended, or; sign extended. The number of bits in question depends on the data-type that; the front-end is referencing (typically i1/i8/i16/i32). Knowing the answer to this is important for two reasons: 1) we want to be able; to implement the ABI correctly. If we need to sign extend the result according; to the ABI, we really really do need to do this to preserve correctness. 2); this information is often useful for optimization purposes, and we want the; mid-level optimizers to be able to process this (e.g. eliminate redundant; extensions). For example, lets pretend that X86 requires the caller to properly extend the; result of a return (I'm not sure this is the case, but the argument doesn't; depend on this). Given this, we should compile this:. int a();; short b() { return a(); }. into:. _b:; 	subl	$12, %esp; 	call	L_a$stub; 	addl	$12, %esp; 	cwtl; 	ret. An optimization example is that we should be able to eliminate the explicit; sign extension in this example:. short y();; int z() {; return ((int)y() << 16) >> 16;; }. _z:; 	subl	$12, %esp; 	call	_y; 	;; movswl %ax, %eax -> not needed because eax is already sext'd; 	addl	$12, %esp; 	ret. //===----------------------------------------------------------------------===//; // What we have right now.; //===----------------------------------------------------------------------===//. Currently, these sorts of things are modelled by compiling a function to return; the small type and a signext/zeroext marker is used. For example, we compile; Z into:. define i32 @z() nounwind {; entry:; 	%0 = tail call signext i16 (...)* @y() nounwind; 	%1 = sext i16 %0 to i32; 	ret i32 %1; }. and b into:. define signext i16 @b() nounwind {; entry:; 	%0 = tail call i32 (...)* @a() nounwind		; <i32> [#uses=1]; 	%retval12 = trunc i32 %0 to i16		; <i16> [#uses=1]; 	ret i16 %retval1",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/README.txt:2176,Availability,down,download,2176," HTML locally, install; Sphinx <http://sphinx-doc.org/> and then do:. cd <build-dir>; cmake -DLLVM_ENABLE_SPHINX=true -DSPHINX_OUTPUT_HTML=true <src-dir>; make -j3 docs-llvm-html; $BROWSER <build-dir>/docs/html/index.html. The mapping between reStructuredText files and generated documentation is; `docs/Foo.rst` <-> `<build-dir>/docs//html/Foo.html` <-> `https://llvm.org/docs/Foo.html`. If you are interested in writing new documentation, you will want to read; `SphinxQuickstartTemplate.rst` which will get you writing documentation; very fast and includes examples of the most important reStructuredText; markup syntax. Manpage Output; ===============. Building the manpages is similar to building the HTML documentation. The; primary difference is to use the `man` makefile target, instead of the; default (which is `html`). Sphinx then produces the man pages in the; directory `<build-dir>/docs/man/`. cd <build-dir>; cmake -DLLVM_ENABLE_SPHINX=true -DSPHINX_OUTPUT_MAN=true <src-dir>; make -j3 docs-llvm-man; man -l <build-dir>/docs/man/FileCheck.1. The correspondence between .rst files and man pages is; `docs/CommandGuide/Foo.rst` <-> `<build-dir>/docs//man/Foo.1`.; These .rst files are also included during HTML generation so they are also; viewable online (as noted above) at e.g.; `https://llvm.org/docs/CommandGuide/Foo.html`. Checking links; ==============. The reachability of external links in the documentation can be checked by; running:. cd llvm/docs/; sphinx-build -b linkcheck . _build/lintcheck/; # report will be generated in _build/lintcheck/output.txt. Doxygen page Output; ==============. Install doxygen <https://www.doxygen.nl/download.html> and dot2tex <https://dot2tex.readthedocs.io/en/latest>. cd <build-dir>; cmake -DLLVM_ENABLE_DOXYGEN=On <llvm-top-src-dir>; make doxygen-llvm # for LLVM docs; make doxygen-clang # for clang docs. It will generate html in. <build-dir>/docs/doxygen/html # for LLVM docs; <build-dir>/tools/clang/docs/doxygen/html # for clang docs; ",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/README.txt:396,Deployability,update,updated,396,"LLVM Documentation; ==================. LLVM's documentation is written in reStructuredText, a lightweight; plaintext markup language (file extension `.rst`). While the; reStructuredText documentation should be quite readable in source form, it; is mostly meant to be processed by the Sphinx documentation generation; system to create HTML pages which are hosted on <https://llvm.org/docs/> and; updated after every commit. Manpage output is also supported, see below. If you instead would like to generate and view the HTML locally, install; Sphinx <http://sphinx-doc.org/> and then do:. cd <build-dir>; cmake -DLLVM_ENABLE_SPHINX=true -DSPHINX_OUTPUT_HTML=true <src-dir>; make -j3 docs-llvm-html; $BROWSER <build-dir>/docs/html/index.html. The mapping between reStructuredText files and generated documentation is; `docs/Foo.rst` <-> `<build-dir>/docs//html/Foo.html` <-> `https://llvm.org/docs/Foo.html`. If you are interested in writing new documentation, you will want to read; `SphinxQuickstartTemplate.rst` which will get you writing documentation; very fast and includes examples of the most important reStructuredText; markup syntax. Manpage Output; ===============. Building the manpages is similar to building the HTML documentation. The; primary difference is to use the `man` makefile target, instead of the; default (which is `html`). Sphinx then produces the man pages in the; directory `<build-dir>/docs/man/`. cd <build-dir>; cmake -DLLVM_ENABLE_SPHINX=true -DSPHINX_OUTPUT_MAN=true <src-dir>; make -j3 docs-llvm-man; man -l <build-dir>/docs/man/FileCheck.1. The correspondence between .rst files and man pages is; `docs/CommandGuide/Foo.rst` <-> `<build-dir>/docs//man/Foo.1`.; These .rst files are also included during HTML generation so they are also; viewable online (as noted above) at e.g.; `https://llvm.org/docs/CommandGuide/Foo.html`. Checking links; ==============. The reachability of external links in the documentation can be checked by; running:. cd llvm/docs/; sphinx-b",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/README.txt:534,Deployability,install,install,534,"LLVM Documentation; ==================. LLVM's documentation is written in reStructuredText, a lightweight; plaintext markup language (file extension `.rst`). While the; reStructuredText documentation should be quite readable in source form, it; is mostly meant to be processed by the Sphinx documentation generation; system to create HTML pages which are hosted on <https://llvm.org/docs/> and; updated after every commit. Manpage output is also supported, see below. If you instead would like to generate and view the HTML locally, install; Sphinx <http://sphinx-doc.org/> and then do:. cd <build-dir>; cmake -DLLVM_ENABLE_SPHINX=true -DSPHINX_OUTPUT_HTML=true <src-dir>; make -j3 docs-llvm-html; $BROWSER <build-dir>/docs/html/index.html. The mapping between reStructuredText files and generated documentation is; `docs/Foo.rst` <-> `<build-dir>/docs//html/Foo.html` <-> `https://llvm.org/docs/Foo.html`. If you are interested in writing new documentation, you will want to read; `SphinxQuickstartTemplate.rst` which will get you writing documentation; very fast and includes examples of the most important reStructuredText; markup syntax. Manpage Output; ===============. Building the manpages is similar to building the HTML documentation. The; primary difference is to use the `man` makefile target, instead of the; default (which is `html`). Sphinx then produces the man pages in the; directory `<build-dir>/docs/man/`. cd <build-dir>; cmake -DLLVM_ENABLE_SPHINX=true -DSPHINX_OUTPUT_MAN=true <src-dir>; make -j3 docs-llvm-man; man -l <build-dir>/docs/man/FileCheck.1. The correspondence between .rst files and man pages is; `docs/CommandGuide/Foo.rst` <-> `<build-dir>/docs//man/Foo.1`.; These .rst files are also included during HTML generation so they are also; viewable online (as noted above) at e.g.; `https://llvm.org/docs/CommandGuide/Foo.html`. Checking links; ==============. The reachability of external links in the documentation can be checked by; running:. cd llvm/docs/; sphinx-b",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:10079,Modifiability,plugin,plugins,10079,b407830e0db0f843b1c1028119c9cd1; # via -r requirements.txt; idna==3.6 \; --hash=sha256:9ecdbbd083b06798ae1e86adcbfe8ab1479cf864e4ee30fe4e46a003d12491ca \; --hash=sha256:c05567e9c24a6b9faaa835c4821bad0590fbb9d5779e7caa6e1cc4978e7eb24f; # via requests; imagesize==1.4.1 \; --hash=sha256:0d8d18d08f840c19d0ee7ca1fd82490fdc3729b7ac93f49870406ddde8ef8d8b \; --hash=sha256:69150444affb9cb0d5cc5a92b3676f0b2fb7cd9ae39e947a5e11a36b4497cd4a; # via sphinx; jinja2==3.1.2 \; --hash=sha256:31351a702a408a9e7595a8fc6150fc3f43bb6bf7e319770cbc0db9df9437e852 \; --hash=sha256:6088930bfe239f0e6710546ab9c19c9ef35e29792895fed6e6e31a023a182a61; # via; # myst-parser; # sphinx; markdown==3.5.1 \; --hash=sha256:5874b47d4ee3f0b14d764324d2c94c03ea66bee56f2d929da9f2508d65e722dc \; --hash=sha256:b65d7beb248dc22f2e8a31fb706d93798093c308dc1aba295aedeb9d41a813bd; # via sphinx-markdown-tables; markdown-it-py==3.0.0 \; --hash=sha256:355216845c60bd96232cd8d8c40e8f9765cc86f46880e43a8fd22dc1a1a8cab1 \; --hash=sha256:e3f60a94fa066dc52ec76661e37c851cb232d92f9886b15cb560aaada2df8feb; # via; # mdit-py-plugins; # myst-parser; markupsafe==2.1.3 \; --hash=sha256:05fb21170423db021895e1ea1e1f3ab3adb85d1c2333cbc2310f2a26bc77272e \; --hash=sha256:0a4e4a1aff6c7ac4cd55792abf96c915634c2b97e3cc1c7129578aa68ebd754e \; --hash=sha256:10bbfe99883db80bdbaff2dcf681dfc6533a614f700da1287707e8a5d78a8431 \; --hash=sha256:134da1eca9ec0ae528110ccc9e48041e0828d79f24121a1a146161103c76e686 \; --hash=sha256:14ff806850827afd6b07a5f32bd917fb7f45b046ba40c57abdb636674a8b559c \; --hash=sha256:1577735524cdad32f9f694208aa75e422adba74f1baee7551620e43a3141f559 \; --hash=sha256:1b40069d487e7edb2676d3fbdb2b0829ffa2cd63a2ec26c4938b2d34391b4ecc \; --hash=sha256:1b8dd8c3fd14349433c79fa8abeb573a55fc0fdd769133baac1f5e07abf54aeb \; --hash=sha256:1f67c7038d560d92149c060157d623c542173016c4babc0c1913cca0564b9939 \; --hash=sha256:282c2cb35b5b673bbcadb33a585408104df04f14b2d9b01d4c345a3b92861c2c \; --hash=sha256:2c1b19b3aaacc6e57b7e25710ff571c24d6c3613a45e905b,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:15064,Modifiability,plugin,plugins,15064,; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \; --hash=sha256:ab4a0df41e7c16a1392727727e7998a467472d0ad65f3ad5e6e765015df08636 \; --hash=sha256:ad9e82fb8f09ade1c3e1b996a6337afac2b8b9e365f926f5a61aacc71adc5b3c \; --hash=sha256:af598ed32d6ae86f1b747b82783958b1a4ab8f617b06fe68795c7f026abbdcad \; --hash=sha256:b076b6226fb84157e3f7c971a47ff3a679d837cf338547532ab866c57930dbee \; --hash=sha256:b7ff0f54cb4ff66dd38bebd335a38e2c22c41a8ee45aa608efc890ac3e3931bc \; --hash=sha256:bfce63a9e7834b12b87c64d6b155fdd9b3b96191b6bd334bf37db7ff1fe457f2 \; --hash=sha256:c011a4149cfbcf9f03994ec2edffcb8b1dc2d2aede7ca243746df97a5d41ce48 \; --hash=sha256:c9c804664ebe8f83a211cace637506669e7890fec1b4195b505c214e50dd4eb7 \; --hash=sha256:ca379055a47383d02a5400cb0d110cef0a776fc644cda797db0c5696cfd7e18e \; --hash=sha256:cb0932dc158471523c9637e807d9bfb93e06a95cbf010f1a38b98623b929ef2b \; --hash=sha256:cd0f502fe016460680cd20aaa5a76d241d6f35a1c3350c474bac1273803893fa \; --hash=sha256:ceb01949af7121f9fc39f7d27f91be8546f3fb112c608bc4029aef0bab86a2a5 \; --hash=sha256:d080e0a5eb2529460b30190fcfcc4199bd7f827663f858a226a81bc27beaa97e \; --hash=sha256:dd15ff04ffd7e05ffcb7fe79f1b98041b8ea30ae9234aed2a9168b5797c3effb \; --hash=sha256:df0be2b576a7abbf737b1575f048c23fb1d769f267ec4358296f31c2479db8f9 \; --hash=sha256:e09031c87a1e51556fdcb46e5bd4f59dfb743061cf93c4d6831bf894f125eb57 \; --hash=sha256:e4dd52d80b8c83fdce44e12478ad2e85c64ea965e75d66dbeafb0a3e77308fcc \; --hash=sha256:f698de3fd0c4e6972b92290a45bd9b1536bffe8c6759c62471efaa8acb4c37bc \; --hash=sha256:fec21693218efe39aa7f8599346e90c705afa52c5b31ae019b2e57e8f6542bb2 \; --hash=sha256:ffcc3f7c66b5f5b7931a5aa68fc9cecc51e685ef90282f4a82f0f5e9b704ad11; # via jinja2; mdit-py-plugins==0.,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:122,Security,hash,hashes,122,#; # This file is autogenerated by pip-compile with Python 3.11; # by the following command:; #; # pip-compile --generate-hashes --output-file=requirements-hashed.txt requirements.txt; #; alabaster==0.7.13 \; --hash=sha256:1ee19aca801bbabb5ba3f5f258e4422dfa86f82f3e9cefb0859b283cdd7f62a3 \; --hash=sha256:a27a4a084d5e690e16e01e03ad2b2e552c61a65469419b907243193de1a84ae2; # via sphinx; babel==2.14.0 \; --hash=sha256:6919867db036398ba21eb5c7a0f6b28ab8cbc3ae7a73a44ebe34ae74a4e7d363 \; --hash=sha256:efb1a25b7118e67ce3a259bed20545c29cb68be8ad2c784c83689981b7a57287; # via sphinx; beautifulsoup4==4.12.2 \; --hash=sha256:492bbc69dca35d12daac71c4db1bfff0c876c00ef4a2ffacce226d4638eb72da \; --hash=sha256:bd2520ca0d9d7d12694a53d44ac482d181b4ec1888909b035a3dbf40d0f57d4a; # via furo; certifi==2023.11.17 \; --hash=sha256:9b469f3a900bf28dc19b8cfbf8019bf47f7fdd1a65a1d4ffb98fc14166beb4d1 \; --hash=sha256:e036ab49d5b79556f99cfc2d9320b34cfbe5be05c5871b51de9329f0603b0474; # via requests; charset-normalizer==3.3.2 \; --hash=sha256:06435b539f889b1f6f4ac1758871aae42dc3a8c0e24ac9e60c2384973ad73027 \; --hash=sha256:06a81e93cd441c56a9b65d8e1d043daeb97a3d0856d177d5c90ba85acb3db087 \; --hash=sha256:0a55554a2fa0d408816b3b5cedf0045f4b8e1a6065aec45849de2d6f3f8e9786 \; --hash=sha256:0b2b64d2bb6d3fb9112bafa732def486049e63de9618b5843bcdd081d8144cd8 \; --hash=sha256:10955842570876604d404661fbccbc9c7e684caf432c09c715ec38fbae45ae09 \; --hash=sha256:122c7fa62b130ed55f8f285bfd56d5f4b4a5b503609d181f9ad85e55c89f4185 \; --hash=sha256:1ceae2f17a9c33cb48e3263960dc5fc8005351ee19db217e9b1bb15d28c02574 \; --hash=sha256:1d3193f4a680c64b4b6a9115943538edb896edc190f0b222e73761716519268e \; --hash=sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519 \; --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \; --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sh,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:156,Security,hash,hashed,156,#; # This file is autogenerated by pip-compile with Python 3.11; # by the following command:; #; # pip-compile --generate-hashes --output-file=requirements-hashed.txt requirements.txt; #; alabaster==0.7.13 \; --hash=sha256:1ee19aca801bbabb5ba3f5f258e4422dfa86f82f3e9cefb0859b283cdd7f62a3 \; --hash=sha256:a27a4a084d5e690e16e01e03ad2b2e552c61a65469419b907243193de1a84ae2; # via sphinx; babel==2.14.0 \; --hash=sha256:6919867db036398ba21eb5c7a0f6b28ab8cbc3ae7a73a44ebe34ae74a4e7d363 \; --hash=sha256:efb1a25b7118e67ce3a259bed20545c29cb68be8ad2c784c83689981b7a57287; # via sphinx; beautifulsoup4==4.12.2 \; --hash=sha256:492bbc69dca35d12daac71c4db1bfff0c876c00ef4a2ffacce226d4638eb72da \; --hash=sha256:bd2520ca0d9d7d12694a53d44ac482d181b4ec1888909b035a3dbf40d0f57d4a; # via furo; certifi==2023.11.17 \; --hash=sha256:9b469f3a900bf28dc19b8cfbf8019bf47f7fdd1a65a1d4ffb98fc14166beb4d1 \; --hash=sha256:e036ab49d5b79556f99cfc2d9320b34cfbe5be05c5871b51de9329f0603b0474; # via requests; charset-normalizer==3.3.2 \; --hash=sha256:06435b539f889b1f6f4ac1758871aae42dc3a8c0e24ac9e60c2384973ad73027 \; --hash=sha256:06a81e93cd441c56a9b65d8e1d043daeb97a3d0856d177d5c90ba85acb3db087 \; --hash=sha256:0a55554a2fa0d408816b3b5cedf0045f4b8e1a6065aec45849de2d6f3f8e9786 \; --hash=sha256:0b2b64d2bb6d3fb9112bafa732def486049e63de9618b5843bcdd081d8144cd8 \; --hash=sha256:10955842570876604d404661fbccbc9c7e684caf432c09c715ec38fbae45ae09 \; --hash=sha256:122c7fa62b130ed55f8f285bfd56d5f4b4a5b503609d181f9ad85e55c89f4185 \; --hash=sha256:1ceae2f17a9c33cb48e3263960dc5fc8005351ee19db217e9b1bb15d28c02574 \; --hash=sha256:1d3193f4a680c64b4b6a9115943538edb896edc190f0b222e73761716519268e \; --hash=sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519 \; --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \; --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sh,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:211,Security,hash,hash,211,#; # This file is autogenerated by pip-compile with Python 3.11; # by the following command:; #; # pip-compile --generate-hashes --output-file=requirements-hashed.txt requirements.txt; #; alabaster==0.7.13 \; --hash=sha256:1ee19aca801bbabb5ba3f5f258e4422dfa86f82f3e9cefb0859b283cdd7f62a3 \; --hash=sha256:a27a4a084d5e690e16e01e03ad2b2e552c61a65469419b907243193de1a84ae2; # via sphinx; babel==2.14.0 \; --hash=sha256:6919867db036398ba21eb5c7a0f6b28ab8cbc3ae7a73a44ebe34ae74a4e7d363 \; --hash=sha256:efb1a25b7118e67ce3a259bed20545c29cb68be8ad2c784c83689981b7a57287; # via sphinx; beautifulsoup4==4.12.2 \; --hash=sha256:492bbc69dca35d12daac71c4db1bfff0c876c00ef4a2ffacce226d4638eb72da \; --hash=sha256:bd2520ca0d9d7d12694a53d44ac482d181b4ec1888909b035a3dbf40d0f57d4a; # via furo; certifi==2023.11.17 \; --hash=sha256:9b469f3a900bf28dc19b8cfbf8019bf47f7fdd1a65a1d4ffb98fc14166beb4d1 \; --hash=sha256:e036ab49d5b79556f99cfc2d9320b34cfbe5be05c5871b51de9329f0603b0474; # via requests; charset-normalizer==3.3.2 \; --hash=sha256:06435b539f889b1f6f4ac1758871aae42dc3a8c0e24ac9e60c2384973ad73027 \; --hash=sha256:06a81e93cd441c56a9b65d8e1d043daeb97a3d0856d177d5c90ba85acb3db087 \; --hash=sha256:0a55554a2fa0d408816b3b5cedf0045f4b8e1a6065aec45849de2d6f3f8e9786 \; --hash=sha256:0b2b64d2bb6d3fb9112bafa732def486049e63de9618b5843bcdd081d8144cd8 \; --hash=sha256:10955842570876604d404661fbccbc9c7e684caf432c09c715ec38fbae45ae09 \; --hash=sha256:122c7fa62b130ed55f8f285bfd56d5f4b4a5b503609d181f9ad85e55c89f4185 \; --hash=sha256:1ceae2f17a9c33cb48e3263960dc5fc8005351ee19db217e9b1bb15d28c02574 \; --hash=sha256:1d3193f4a680c64b4b6a9115943538edb896edc190f0b222e73761716519268e \; --hash=sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519 \; --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \; --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sh,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:293,Security,hash,hash,293,#; # This file is autogenerated by pip-compile with Python 3.11; # by the following command:; #; # pip-compile --generate-hashes --output-file=requirements-hashed.txt requirements.txt; #; alabaster==0.7.13 \; --hash=sha256:1ee19aca801bbabb5ba3f5f258e4422dfa86f82f3e9cefb0859b283cdd7f62a3 \; --hash=sha256:a27a4a084d5e690e16e01e03ad2b2e552c61a65469419b907243193de1a84ae2; # via sphinx; babel==2.14.0 \; --hash=sha256:6919867db036398ba21eb5c7a0f6b28ab8cbc3ae7a73a44ebe34ae74a4e7d363 \; --hash=sha256:efb1a25b7118e67ce3a259bed20545c29cb68be8ad2c784c83689981b7a57287; # via sphinx; beautifulsoup4==4.12.2 \; --hash=sha256:492bbc69dca35d12daac71c4db1bfff0c876c00ef4a2ffacce226d4638eb72da \; --hash=sha256:bd2520ca0d9d7d12694a53d44ac482d181b4ec1888909b035a3dbf40d0f57d4a; # via furo; certifi==2023.11.17 \; --hash=sha256:9b469f3a900bf28dc19b8cfbf8019bf47f7fdd1a65a1d4ffb98fc14166beb4d1 \; --hash=sha256:e036ab49d5b79556f99cfc2d9320b34cfbe5be05c5871b51de9329f0603b0474; # via requests; charset-normalizer==3.3.2 \; --hash=sha256:06435b539f889b1f6f4ac1758871aae42dc3a8c0e24ac9e60c2384973ad73027 \; --hash=sha256:06a81e93cd441c56a9b65d8e1d043daeb97a3d0856d177d5c90ba85acb3db087 \; --hash=sha256:0a55554a2fa0d408816b3b5cedf0045f4b8e1a6065aec45849de2d6f3f8e9786 \; --hash=sha256:0b2b64d2bb6d3fb9112bafa732def486049e63de9618b5843bcdd081d8144cd8 \; --hash=sha256:10955842570876604d404661fbccbc9c7e684caf432c09c715ec38fbae45ae09 \; --hash=sha256:122c7fa62b130ed55f8f285bfd56d5f4b4a5b503609d181f9ad85e55c89f4185 \; --hash=sha256:1ceae2f17a9c33cb48e3263960dc5fc8005351ee19db217e9b1bb15d28c02574 \; --hash=sha256:1d3193f4a680c64b4b6a9115943538edb896edc190f0b222e73761716519268e \; --hash=sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519 \; --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \; --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sh,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:404,Security,hash,hash,404,#; # This file is autogenerated by pip-compile with Python 3.11; # by the following command:; #; # pip-compile --generate-hashes --output-file=requirements-hashed.txt requirements.txt; #; alabaster==0.7.13 \; --hash=sha256:1ee19aca801bbabb5ba3f5f258e4422dfa86f82f3e9cefb0859b283cdd7f62a3 \; --hash=sha256:a27a4a084d5e690e16e01e03ad2b2e552c61a65469419b907243193de1a84ae2; # via sphinx; babel==2.14.0 \; --hash=sha256:6919867db036398ba21eb5c7a0f6b28ab8cbc3ae7a73a44ebe34ae74a4e7d363 \; --hash=sha256:efb1a25b7118e67ce3a259bed20545c29cb68be8ad2c784c83689981b7a57287; # via sphinx; beautifulsoup4==4.12.2 \; --hash=sha256:492bbc69dca35d12daac71c4db1bfff0c876c00ef4a2ffacce226d4638eb72da \; --hash=sha256:bd2520ca0d9d7d12694a53d44ac482d181b4ec1888909b035a3dbf40d0f57d4a; # via furo; certifi==2023.11.17 \; --hash=sha256:9b469f3a900bf28dc19b8cfbf8019bf47f7fdd1a65a1d4ffb98fc14166beb4d1 \; --hash=sha256:e036ab49d5b79556f99cfc2d9320b34cfbe5be05c5871b51de9329f0603b0474; # via requests; charset-normalizer==3.3.2 \; --hash=sha256:06435b539f889b1f6f4ac1758871aae42dc3a8c0e24ac9e60c2384973ad73027 \; --hash=sha256:06a81e93cd441c56a9b65d8e1d043daeb97a3d0856d177d5c90ba85acb3db087 \; --hash=sha256:0a55554a2fa0d408816b3b5cedf0045f4b8e1a6065aec45849de2d6f3f8e9786 \; --hash=sha256:0b2b64d2bb6d3fb9112bafa732def486049e63de9618b5843bcdd081d8144cd8 \; --hash=sha256:10955842570876604d404661fbccbc9c7e684caf432c09c715ec38fbae45ae09 \; --hash=sha256:122c7fa62b130ed55f8f285bfd56d5f4b4a5b503609d181f9ad85e55c89f4185 \; --hash=sha256:1ceae2f17a9c33cb48e3263960dc5fc8005351ee19db217e9b1bb15d28c02574 \; --hash=sha256:1d3193f4a680c64b4b6a9115943538edb896edc190f0b222e73761716519268e \; --hash=sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519 \; --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \; --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sh,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:486,Security,hash,hash,486,#; # This file is autogenerated by pip-compile with Python 3.11; # by the following command:; #; # pip-compile --generate-hashes --output-file=requirements-hashed.txt requirements.txt; #; alabaster==0.7.13 \; --hash=sha256:1ee19aca801bbabb5ba3f5f258e4422dfa86f82f3e9cefb0859b283cdd7f62a3 \; --hash=sha256:a27a4a084d5e690e16e01e03ad2b2e552c61a65469419b907243193de1a84ae2; # via sphinx; babel==2.14.0 \; --hash=sha256:6919867db036398ba21eb5c7a0f6b28ab8cbc3ae7a73a44ebe34ae74a4e7d363 \; --hash=sha256:efb1a25b7118e67ce3a259bed20545c29cb68be8ad2c784c83689981b7a57287; # via sphinx; beautifulsoup4==4.12.2 \; --hash=sha256:492bbc69dca35d12daac71c4db1bfff0c876c00ef4a2ffacce226d4638eb72da \; --hash=sha256:bd2520ca0d9d7d12694a53d44ac482d181b4ec1888909b035a3dbf40d0f57d4a; # via furo; certifi==2023.11.17 \; --hash=sha256:9b469f3a900bf28dc19b8cfbf8019bf47f7fdd1a65a1d4ffb98fc14166beb4d1 \; --hash=sha256:e036ab49d5b79556f99cfc2d9320b34cfbe5be05c5871b51de9329f0603b0474; # via requests; charset-normalizer==3.3.2 \; --hash=sha256:06435b539f889b1f6f4ac1758871aae42dc3a8c0e24ac9e60c2384973ad73027 \; --hash=sha256:06a81e93cd441c56a9b65d8e1d043daeb97a3d0856d177d5c90ba85acb3db087 \; --hash=sha256:0a55554a2fa0d408816b3b5cedf0045f4b8e1a6065aec45849de2d6f3f8e9786 \; --hash=sha256:0b2b64d2bb6d3fb9112bafa732def486049e63de9618b5843bcdd081d8144cd8 \; --hash=sha256:10955842570876604d404661fbccbc9c7e684caf432c09c715ec38fbae45ae09 \; --hash=sha256:122c7fa62b130ed55f8f285bfd56d5f4b4a5b503609d181f9ad85e55c89f4185 \; --hash=sha256:1ceae2f17a9c33cb48e3263960dc5fc8005351ee19db217e9b1bb15d28c02574 \; --hash=sha256:1d3193f4a680c64b4b6a9115943538edb896edc190f0b222e73761716519268e \; --hash=sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519 \; --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \; --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sh,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:606,Security,hash,hash,606,#; # This file is autogenerated by pip-compile with Python 3.11; # by the following command:; #; # pip-compile --generate-hashes --output-file=requirements-hashed.txt requirements.txt; #; alabaster==0.7.13 \; --hash=sha256:1ee19aca801bbabb5ba3f5f258e4422dfa86f82f3e9cefb0859b283cdd7f62a3 \; --hash=sha256:a27a4a084d5e690e16e01e03ad2b2e552c61a65469419b907243193de1a84ae2; # via sphinx; babel==2.14.0 \; --hash=sha256:6919867db036398ba21eb5c7a0f6b28ab8cbc3ae7a73a44ebe34ae74a4e7d363 \; --hash=sha256:efb1a25b7118e67ce3a259bed20545c29cb68be8ad2c784c83689981b7a57287; # via sphinx; beautifulsoup4==4.12.2 \; --hash=sha256:492bbc69dca35d12daac71c4db1bfff0c876c00ef4a2ffacce226d4638eb72da \; --hash=sha256:bd2520ca0d9d7d12694a53d44ac482d181b4ec1888909b035a3dbf40d0f57d4a; # via furo; certifi==2023.11.17 \; --hash=sha256:9b469f3a900bf28dc19b8cfbf8019bf47f7fdd1a65a1d4ffb98fc14166beb4d1 \; --hash=sha256:e036ab49d5b79556f99cfc2d9320b34cfbe5be05c5871b51de9329f0603b0474; # via requests; charset-normalizer==3.3.2 \; --hash=sha256:06435b539f889b1f6f4ac1758871aae42dc3a8c0e24ac9e60c2384973ad73027 \; --hash=sha256:06a81e93cd441c56a9b65d8e1d043daeb97a3d0856d177d5c90ba85acb3db087 \; --hash=sha256:0a55554a2fa0d408816b3b5cedf0045f4b8e1a6065aec45849de2d6f3f8e9786 \; --hash=sha256:0b2b64d2bb6d3fb9112bafa732def486049e63de9618b5843bcdd081d8144cd8 \; --hash=sha256:10955842570876604d404661fbccbc9c7e684caf432c09c715ec38fbae45ae09 \; --hash=sha256:122c7fa62b130ed55f8f285bfd56d5f4b4a5b503609d181f9ad85e55c89f4185 \; --hash=sha256:1ceae2f17a9c33cb48e3263960dc5fc8005351ee19db217e9b1bb15d28c02574 \; --hash=sha256:1d3193f4a680c64b4b6a9115943538edb896edc190f0b222e73761716519268e \; --hash=sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519 \; --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \; --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sh,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:688,Security,hash,hash,688,#; # This file is autogenerated by pip-compile with Python 3.11; # by the following command:; #; # pip-compile --generate-hashes --output-file=requirements-hashed.txt requirements.txt; #; alabaster==0.7.13 \; --hash=sha256:1ee19aca801bbabb5ba3f5f258e4422dfa86f82f3e9cefb0859b283cdd7f62a3 \; --hash=sha256:a27a4a084d5e690e16e01e03ad2b2e552c61a65469419b907243193de1a84ae2; # via sphinx; babel==2.14.0 \; --hash=sha256:6919867db036398ba21eb5c7a0f6b28ab8cbc3ae7a73a44ebe34ae74a4e7d363 \; --hash=sha256:efb1a25b7118e67ce3a259bed20545c29cb68be8ad2c784c83689981b7a57287; # via sphinx; beautifulsoup4==4.12.2 \; --hash=sha256:492bbc69dca35d12daac71c4db1bfff0c876c00ef4a2ffacce226d4638eb72da \; --hash=sha256:bd2520ca0d9d7d12694a53d44ac482d181b4ec1888909b035a3dbf40d0f57d4a; # via furo; certifi==2023.11.17 \; --hash=sha256:9b469f3a900bf28dc19b8cfbf8019bf47f7fdd1a65a1d4ffb98fc14166beb4d1 \; --hash=sha256:e036ab49d5b79556f99cfc2d9320b34cfbe5be05c5871b51de9329f0603b0474; # via requests; charset-normalizer==3.3.2 \; --hash=sha256:06435b539f889b1f6f4ac1758871aae42dc3a8c0e24ac9e60c2384973ad73027 \; --hash=sha256:06a81e93cd441c56a9b65d8e1d043daeb97a3d0856d177d5c90ba85acb3db087 \; --hash=sha256:0a55554a2fa0d408816b3b5cedf0045f4b8e1a6065aec45849de2d6f3f8e9786 \; --hash=sha256:0b2b64d2bb6d3fb9112bafa732def486049e63de9618b5843bcdd081d8144cd8 \; --hash=sha256:10955842570876604d404661fbccbc9c7e684caf432c09c715ec38fbae45ae09 \; --hash=sha256:122c7fa62b130ed55f8f285bfd56d5f4b4a5b503609d181f9ad85e55c89f4185 \; --hash=sha256:1ceae2f17a9c33cb48e3263960dc5fc8005351ee19db217e9b1bb15d28c02574 \; --hash=sha256:1d3193f4a680c64b4b6a9115943538edb896edc190f0b222e73761716519268e \; --hash=sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519 \; --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \; --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sh,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:803,Security,hash,hash,803,#; # This file is autogenerated by pip-compile with Python 3.11; # by the following command:; #; # pip-compile --generate-hashes --output-file=requirements-hashed.txt requirements.txt; #; alabaster==0.7.13 \; --hash=sha256:1ee19aca801bbabb5ba3f5f258e4422dfa86f82f3e9cefb0859b283cdd7f62a3 \; --hash=sha256:a27a4a084d5e690e16e01e03ad2b2e552c61a65469419b907243193de1a84ae2; # via sphinx; babel==2.14.0 \; --hash=sha256:6919867db036398ba21eb5c7a0f6b28ab8cbc3ae7a73a44ebe34ae74a4e7d363 \; --hash=sha256:efb1a25b7118e67ce3a259bed20545c29cb68be8ad2c784c83689981b7a57287; # via sphinx; beautifulsoup4==4.12.2 \; --hash=sha256:492bbc69dca35d12daac71c4db1bfff0c876c00ef4a2ffacce226d4638eb72da \; --hash=sha256:bd2520ca0d9d7d12694a53d44ac482d181b4ec1888909b035a3dbf40d0f57d4a; # via furo; certifi==2023.11.17 \; --hash=sha256:9b469f3a900bf28dc19b8cfbf8019bf47f7fdd1a65a1d4ffb98fc14166beb4d1 \; --hash=sha256:e036ab49d5b79556f99cfc2d9320b34cfbe5be05c5871b51de9329f0603b0474; # via requests; charset-normalizer==3.3.2 \; --hash=sha256:06435b539f889b1f6f4ac1758871aae42dc3a8c0e24ac9e60c2384973ad73027 \; --hash=sha256:06a81e93cd441c56a9b65d8e1d043daeb97a3d0856d177d5c90ba85acb3db087 \; --hash=sha256:0a55554a2fa0d408816b3b5cedf0045f4b8e1a6065aec45849de2d6f3f8e9786 \; --hash=sha256:0b2b64d2bb6d3fb9112bafa732def486049e63de9618b5843bcdd081d8144cd8 \; --hash=sha256:10955842570876604d404661fbccbc9c7e684caf432c09c715ec38fbae45ae09 \; --hash=sha256:122c7fa62b130ed55f8f285bfd56d5f4b4a5b503609d181f9ad85e55c89f4185 \; --hash=sha256:1ceae2f17a9c33cb48e3263960dc5fc8005351ee19db217e9b1bb15d28c02574 \; --hash=sha256:1d3193f4a680c64b4b6a9115943538edb896edc190f0b222e73761716519268e \; --hash=sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519 \; --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \; --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sh,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:885,Security,hash,hash,885,#; # This file is autogenerated by pip-compile with Python 3.11; # by the following command:; #; # pip-compile --generate-hashes --output-file=requirements-hashed.txt requirements.txt; #; alabaster==0.7.13 \; --hash=sha256:1ee19aca801bbabb5ba3f5f258e4422dfa86f82f3e9cefb0859b283cdd7f62a3 \; --hash=sha256:a27a4a084d5e690e16e01e03ad2b2e552c61a65469419b907243193de1a84ae2; # via sphinx; babel==2.14.0 \; --hash=sha256:6919867db036398ba21eb5c7a0f6b28ab8cbc3ae7a73a44ebe34ae74a4e7d363 \; --hash=sha256:efb1a25b7118e67ce3a259bed20545c29cb68be8ad2c784c83689981b7a57287; # via sphinx; beautifulsoup4==4.12.2 \; --hash=sha256:492bbc69dca35d12daac71c4db1bfff0c876c00ef4a2ffacce226d4638eb72da \; --hash=sha256:bd2520ca0d9d7d12694a53d44ac482d181b4ec1888909b035a3dbf40d0f57d4a; # via furo; certifi==2023.11.17 \; --hash=sha256:9b469f3a900bf28dc19b8cfbf8019bf47f7fdd1a65a1d4ffb98fc14166beb4d1 \; --hash=sha256:e036ab49d5b79556f99cfc2d9320b34cfbe5be05c5871b51de9329f0603b0474; # via requests; charset-normalizer==3.3.2 \; --hash=sha256:06435b539f889b1f6f4ac1758871aae42dc3a8c0e24ac9e60c2384973ad73027 \; --hash=sha256:06a81e93cd441c56a9b65d8e1d043daeb97a3d0856d177d5c90ba85acb3db087 \; --hash=sha256:0a55554a2fa0d408816b3b5cedf0045f4b8e1a6065aec45849de2d6f3f8e9786 \; --hash=sha256:0b2b64d2bb6d3fb9112bafa732def486049e63de9618b5843bcdd081d8144cd8 \; --hash=sha256:10955842570876604d404661fbccbc9c7e684caf432c09c715ec38fbae45ae09 \; --hash=sha256:122c7fa62b130ed55f8f285bfd56d5f4b4a5b503609d181f9ad85e55c89f4185 \; --hash=sha256:1ceae2f17a9c33cb48e3263960dc5fc8005351ee19db217e9b1bb15d28c02574 \; --hash=sha256:1d3193f4a680c64b4b6a9115943538edb896edc190f0b222e73761716519268e \; --hash=sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519 \; --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \; --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sh,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:1010,Security,hash,hash,1010,2 \; --hash=sha256:06435b539f889b1f6f4ac1758871aae42dc3a8c0e24ac9e60c2384973ad73027 \; --hash=sha256:06a81e93cd441c56a9b65d8e1d043daeb97a3d0856d177d5c90ba85acb3db087 \; --hash=sha256:0a55554a2fa0d408816b3b5cedf0045f4b8e1a6065aec45849de2d6f3f8e9786 \; --hash=sha256:0b2b64d2bb6d3fb9112bafa732def486049e63de9618b5843bcdd081d8144cd8 \; --hash=sha256:10955842570876604d404661fbccbc9c7e684caf432c09c715ec38fbae45ae09 \; --hash=sha256:122c7fa62b130ed55f8f285bfd56d5f4b4a5b503609d181f9ad85e55c89f4185 \; --hash=sha256:1ceae2f17a9c33cb48e3263960dc5fc8005351ee19db217e9b1bb15d28c02574 \; --hash=sha256:1d3193f4a680c64b4b6a9115943538edb896edc190f0b222e73761716519268e \; --hash=sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519 \; --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \; --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sh,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:1092,Security,hash,hash,1092,2 \; --hash=sha256:06435b539f889b1f6f4ac1758871aae42dc3a8c0e24ac9e60c2384973ad73027 \; --hash=sha256:06a81e93cd441c56a9b65d8e1d043daeb97a3d0856d177d5c90ba85acb3db087 \; --hash=sha256:0a55554a2fa0d408816b3b5cedf0045f4b8e1a6065aec45849de2d6f3f8e9786 \; --hash=sha256:0b2b64d2bb6d3fb9112bafa732def486049e63de9618b5843bcdd081d8144cd8 \; --hash=sha256:10955842570876604d404661fbccbc9c7e684caf432c09c715ec38fbae45ae09 \; --hash=sha256:122c7fa62b130ed55f8f285bfd56d5f4b4a5b503609d181f9ad85e55c89f4185 \; --hash=sha256:1ceae2f17a9c33cb48e3263960dc5fc8005351ee19db217e9b1bb15d28c02574 \; --hash=sha256:1d3193f4a680c64b4b6a9115943538edb896edc190f0b222e73761716519268e \; --hash=sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519 \; --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \; --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sh,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:1174,Security,hash,hash,1174,2 \; --hash=sha256:06435b539f889b1f6f4ac1758871aae42dc3a8c0e24ac9e60c2384973ad73027 \; --hash=sha256:06a81e93cd441c56a9b65d8e1d043daeb97a3d0856d177d5c90ba85acb3db087 \; --hash=sha256:0a55554a2fa0d408816b3b5cedf0045f4b8e1a6065aec45849de2d6f3f8e9786 \; --hash=sha256:0b2b64d2bb6d3fb9112bafa732def486049e63de9618b5843bcdd081d8144cd8 \; --hash=sha256:10955842570876604d404661fbccbc9c7e684caf432c09c715ec38fbae45ae09 \; --hash=sha256:122c7fa62b130ed55f8f285bfd56d5f4b4a5b503609d181f9ad85e55c89f4185 \; --hash=sha256:1ceae2f17a9c33cb48e3263960dc5fc8005351ee19db217e9b1bb15d28c02574 \; --hash=sha256:1d3193f4a680c64b4b6a9115943538edb896edc190f0b222e73761716519268e \; --hash=sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519 \; --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \; --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sh,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:1256,Security,hash,hash,1256,2 \; --hash=sha256:06435b539f889b1f6f4ac1758871aae42dc3a8c0e24ac9e60c2384973ad73027 \; --hash=sha256:06a81e93cd441c56a9b65d8e1d043daeb97a3d0856d177d5c90ba85acb3db087 \; --hash=sha256:0a55554a2fa0d408816b3b5cedf0045f4b8e1a6065aec45849de2d6f3f8e9786 \; --hash=sha256:0b2b64d2bb6d3fb9112bafa732def486049e63de9618b5843bcdd081d8144cd8 \; --hash=sha256:10955842570876604d404661fbccbc9c7e684caf432c09c715ec38fbae45ae09 \; --hash=sha256:122c7fa62b130ed55f8f285bfd56d5f4b4a5b503609d181f9ad85e55c89f4185 \; --hash=sha256:1ceae2f17a9c33cb48e3263960dc5fc8005351ee19db217e9b1bb15d28c02574 \; --hash=sha256:1d3193f4a680c64b4b6a9115943538edb896edc190f0b222e73761716519268e \; --hash=sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519 \; --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \; --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sh,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:1338,Security,hash,hash,1338,2 \; --hash=sha256:06435b539f889b1f6f4ac1758871aae42dc3a8c0e24ac9e60c2384973ad73027 \; --hash=sha256:06a81e93cd441c56a9b65d8e1d043daeb97a3d0856d177d5c90ba85acb3db087 \; --hash=sha256:0a55554a2fa0d408816b3b5cedf0045f4b8e1a6065aec45849de2d6f3f8e9786 \; --hash=sha256:0b2b64d2bb6d3fb9112bafa732def486049e63de9618b5843bcdd081d8144cd8 \; --hash=sha256:10955842570876604d404661fbccbc9c7e684caf432c09c715ec38fbae45ae09 \; --hash=sha256:122c7fa62b130ed55f8f285bfd56d5f4b4a5b503609d181f9ad85e55c89f4185 \; --hash=sha256:1ceae2f17a9c33cb48e3263960dc5fc8005351ee19db217e9b1bb15d28c02574 \; --hash=sha256:1d3193f4a680c64b4b6a9115943538edb896edc190f0b222e73761716519268e \; --hash=sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519 \; --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \; --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sh,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:1420,Security,hash,hash,1420,2 \; --hash=sha256:06435b539f889b1f6f4ac1758871aae42dc3a8c0e24ac9e60c2384973ad73027 \; --hash=sha256:06a81e93cd441c56a9b65d8e1d043daeb97a3d0856d177d5c90ba85acb3db087 \; --hash=sha256:0a55554a2fa0d408816b3b5cedf0045f4b8e1a6065aec45849de2d6f3f8e9786 \; --hash=sha256:0b2b64d2bb6d3fb9112bafa732def486049e63de9618b5843bcdd081d8144cd8 \; --hash=sha256:10955842570876604d404661fbccbc9c7e684caf432c09c715ec38fbae45ae09 \; --hash=sha256:122c7fa62b130ed55f8f285bfd56d5f4b4a5b503609d181f9ad85e55c89f4185 \; --hash=sha256:1ceae2f17a9c33cb48e3263960dc5fc8005351ee19db217e9b1bb15d28c02574 \; --hash=sha256:1d3193f4a680c64b4b6a9115943538edb896edc190f0b222e73761716519268e \; --hash=sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519 \; --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \; --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sh,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:1502,Security,hash,hash,1502,2 \; --hash=sha256:06435b539f889b1f6f4ac1758871aae42dc3a8c0e24ac9e60c2384973ad73027 \; --hash=sha256:06a81e93cd441c56a9b65d8e1d043daeb97a3d0856d177d5c90ba85acb3db087 \; --hash=sha256:0a55554a2fa0d408816b3b5cedf0045f4b8e1a6065aec45849de2d6f3f8e9786 \; --hash=sha256:0b2b64d2bb6d3fb9112bafa732def486049e63de9618b5843bcdd081d8144cd8 \; --hash=sha256:10955842570876604d404661fbccbc9c7e684caf432c09c715ec38fbae45ae09 \; --hash=sha256:122c7fa62b130ed55f8f285bfd56d5f4b4a5b503609d181f9ad85e55c89f4185 \; --hash=sha256:1ceae2f17a9c33cb48e3263960dc5fc8005351ee19db217e9b1bb15d28c02574 \; --hash=sha256:1d3193f4a680c64b4b6a9115943538edb896edc190f0b222e73761716519268e \; --hash=sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519 \; --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \; --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sh,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:1584,Security,hash,hash,1584,2 \; --hash=sha256:06435b539f889b1f6f4ac1758871aae42dc3a8c0e24ac9e60c2384973ad73027 \; --hash=sha256:06a81e93cd441c56a9b65d8e1d043daeb97a3d0856d177d5c90ba85acb3db087 \; --hash=sha256:0a55554a2fa0d408816b3b5cedf0045f4b8e1a6065aec45849de2d6f3f8e9786 \; --hash=sha256:0b2b64d2bb6d3fb9112bafa732def486049e63de9618b5843bcdd081d8144cd8 \; --hash=sha256:10955842570876604d404661fbccbc9c7e684caf432c09c715ec38fbae45ae09 \; --hash=sha256:122c7fa62b130ed55f8f285bfd56d5f4b4a5b503609d181f9ad85e55c89f4185 \; --hash=sha256:1ceae2f17a9c33cb48e3263960dc5fc8005351ee19db217e9b1bb15d28c02574 \; --hash=sha256:1d3193f4a680c64b4b6a9115943538edb896edc190f0b222e73761716519268e \; --hash=sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519 \; --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \; --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sh,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:1666,Security,hash,hash,1666,2 \; --hash=sha256:06435b539f889b1f6f4ac1758871aae42dc3a8c0e24ac9e60c2384973ad73027 \; --hash=sha256:06a81e93cd441c56a9b65d8e1d043daeb97a3d0856d177d5c90ba85acb3db087 \; --hash=sha256:0a55554a2fa0d408816b3b5cedf0045f4b8e1a6065aec45849de2d6f3f8e9786 \; --hash=sha256:0b2b64d2bb6d3fb9112bafa732def486049e63de9618b5843bcdd081d8144cd8 \; --hash=sha256:10955842570876604d404661fbccbc9c7e684caf432c09c715ec38fbae45ae09 \; --hash=sha256:122c7fa62b130ed55f8f285bfd56d5f4b4a5b503609d181f9ad85e55c89f4185 \; --hash=sha256:1ceae2f17a9c33cb48e3263960dc5fc8005351ee19db217e9b1bb15d28c02574 \; --hash=sha256:1d3193f4a680c64b4b6a9115943538edb896edc190f0b222e73761716519268e \; --hash=sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519 \; --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \; --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sh,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:1748,Security,hash,hash,1748,2 \; --hash=sha256:06435b539f889b1f6f4ac1758871aae42dc3a8c0e24ac9e60c2384973ad73027 \; --hash=sha256:06a81e93cd441c56a9b65d8e1d043daeb97a3d0856d177d5c90ba85acb3db087 \; --hash=sha256:0a55554a2fa0d408816b3b5cedf0045f4b8e1a6065aec45849de2d6f3f8e9786 \; --hash=sha256:0b2b64d2bb6d3fb9112bafa732def486049e63de9618b5843bcdd081d8144cd8 \; --hash=sha256:10955842570876604d404661fbccbc9c7e684caf432c09c715ec38fbae45ae09 \; --hash=sha256:122c7fa62b130ed55f8f285bfd56d5f4b4a5b503609d181f9ad85e55c89f4185 \; --hash=sha256:1ceae2f17a9c33cb48e3263960dc5fc8005351ee19db217e9b1bb15d28c02574 \; --hash=sha256:1d3193f4a680c64b4b6a9115943538edb896edc190f0b222e73761716519268e \; --hash=sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519 \; --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \; --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sh,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:1830,Security,hash,hash,1830,2 \; --hash=sha256:06435b539f889b1f6f4ac1758871aae42dc3a8c0e24ac9e60c2384973ad73027 \; --hash=sha256:06a81e93cd441c56a9b65d8e1d043daeb97a3d0856d177d5c90ba85acb3db087 \; --hash=sha256:0a55554a2fa0d408816b3b5cedf0045f4b8e1a6065aec45849de2d6f3f8e9786 \; --hash=sha256:0b2b64d2bb6d3fb9112bafa732def486049e63de9618b5843bcdd081d8144cd8 \; --hash=sha256:10955842570876604d404661fbccbc9c7e684caf432c09c715ec38fbae45ae09 \; --hash=sha256:122c7fa62b130ed55f8f285bfd56d5f4b4a5b503609d181f9ad85e55c89f4185 \; --hash=sha256:1ceae2f17a9c33cb48e3263960dc5fc8005351ee19db217e9b1bb15d28c02574 \; --hash=sha256:1d3193f4a680c64b4b6a9115943538edb896edc190f0b222e73761716519268e \; --hash=sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519 \; --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \; --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sh,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:1912,Security,hash,hash,1912,2 \; --hash=sha256:06435b539f889b1f6f4ac1758871aae42dc3a8c0e24ac9e60c2384973ad73027 \; --hash=sha256:06a81e93cd441c56a9b65d8e1d043daeb97a3d0856d177d5c90ba85acb3db087 \; --hash=sha256:0a55554a2fa0d408816b3b5cedf0045f4b8e1a6065aec45849de2d6f3f8e9786 \; --hash=sha256:0b2b64d2bb6d3fb9112bafa732def486049e63de9618b5843bcdd081d8144cd8 \; --hash=sha256:10955842570876604d404661fbccbc9c7e684caf432c09c715ec38fbae45ae09 \; --hash=sha256:122c7fa62b130ed55f8f285bfd56d5f4b4a5b503609d181f9ad85e55c89f4185 \; --hash=sha256:1ceae2f17a9c33cb48e3263960dc5fc8005351ee19db217e9b1bb15d28c02574 \; --hash=sha256:1d3193f4a680c64b4b6a9115943538edb896edc190f0b222e73761716519268e \; --hash=sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519 \; --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \; --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sh,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:1994,Security,hash,hash,1994,2 \; --hash=sha256:06435b539f889b1f6f4ac1758871aae42dc3a8c0e24ac9e60c2384973ad73027 \; --hash=sha256:06a81e93cd441c56a9b65d8e1d043daeb97a3d0856d177d5c90ba85acb3db087 \; --hash=sha256:0a55554a2fa0d408816b3b5cedf0045f4b8e1a6065aec45849de2d6f3f8e9786 \; --hash=sha256:0b2b64d2bb6d3fb9112bafa732def486049e63de9618b5843bcdd081d8144cd8 \; --hash=sha256:10955842570876604d404661fbccbc9c7e684caf432c09c715ec38fbae45ae09 \; --hash=sha256:122c7fa62b130ed55f8f285bfd56d5f4b4a5b503609d181f9ad85e55c89f4185 \; --hash=sha256:1ceae2f17a9c33cb48e3263960dc5fc8005351ee19db217e9b1bb15d28c02574 \; --hash=sha256:1d3193f4a680c64b4b6a9115943538edb896edc190f0b222e73761716519268e \; --hash=sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519 \; --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \; --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sh,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:2076,Security,hash,hash,2076,3ad73027 \; --hash=sha256:06a81e93cd441c56a9b65d8e1d043daeb97a3d0856d177d5c90ba85acb3db087 \; --hash=sha256:0a55554a2fa0d408816b3b5cedf0045f4b8e1a6065aec45849de2d6f3f8e9786 \; --hash=sha256:0b2b64d2bb6d3fb9112bafa732def486049e63de9618b5843bcdd081d8144cd8 \; --hash=sha256:10955842570876604d404661fbccbc9c7e684caf432c09c715ec38fbae45ae09 \; --hash=sha256:122c7fa62b130ed55f8f285bfd56d5f4b4a5b503609d181f9ad85e55c89f4185 \; --hash=sha256:1ceae2f17a9c33cb48e3263960dc5fc8005351ee19db217e9b1bb15d28c02574 \; --hash=sha256:1d3193f4a680c64b4b6a9115943538edb896edc190f0b222e73761716519268e \; --hash=sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519 \; --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \; --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sha256:2e81c7b9c8979ce92ed306c249d46894776a909505d8f5a4ba55b14206e3222f \; --hash=sha256:3287761bc4ee9e33561a7e058c72ac0938c4f57fe49a09eae428fd88aafe7bb6 \; --hash=sha256:34d1c8da1e78d2e001f363791c98a272bb734000fcef47a491c1e3b0505657a8 \; --hash=sha256:37e55c8e51c236f95b033f6fb391d7d7970ba5fe7ff453dad675e88cf303377a \; --hash=sha256:3d47fa203a7bd9c5b6cee4736ee84ca03b8ef23193c0d1ca99b5089f72645c73 \; --hash=sha256:3e4d1f6587322d2788836a99c69062fbb091331ec940e02d12d179c1d53e25fc \; --hash=sha256:42cb296636fcc8b0644486d15c12376cb9fa75443e00fb25de0b8602e64c1714 \; --hash=sha256:45485e01ff4d3630ec0d9617310448a8702f70e9c01906b0d0118bdf9d124cf2 \; --hash=sha256:4a78b2b446bd7c934f5dcedc588903fb2f5eec172f3d29e52a9096a43722adfc \; --hash=sha256:4ab2fe47fae9e0f9dee8c04187ce5d09f48eabe611be8259444906793ab7cbce \; --hash=sha256:4d0d1650369165a14e14e1e47b372cfcb31d6ab44e6e33cb2d4e57265290044d \; --hash=sha256:549a3a73da901d5bc3ce8d24e0600d1fa85524c10287f6004fbab87672bf3e1e \; --hash=sha256:55086ee1064215781fff39a1af09518bc9255b50d6333f2e4c74ca09fac6a8f6 \; --hash=sha256:572c376,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:2158,Security,hash,hash,2158,cb3db087 \; --hash=sha256:0a55554a2fa0d408816b3b5cedf0045f4b8e1a6065aec45849de2d6f3f8e9786 \; --hash=sha256:0b2b64d2bb6d3fb9112bafa732def486049e63de9618b5843bcdd081d8144cd8 \; --hash=sha256:10955842570876604d404661fbccbc9c7e684caf432c09c715ec38fbae45ae09 \; --hash=sha256:122c7fa62b130ed55f8f285bfd56d5f4b4a5b503609d181f9ad85e55c89f4185 \; --hash=sha256:1ceae2f17a9c33cb48e3263960dc5fc8005351ee19db217e9b1bb15d28c02574 \; --hash=sha256:1d3193f4a680c64b4b6a9115943538edb896edc190f0b222e73761716519268e \; --hash=sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519 \; --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \; --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sha256:2e81c7b9c8979ce92ed306c249d46894776a909505d8f5a4ba55b14206e3222f \; --hash=sha256:3287761bc4ee9e33561a7e058c72ac0938c4f57fe49a09eae428fd88aafe7bb6 \; --hash=sha256:34d1c8da1e78d2e001f363791c98a272bb734000fcef47a491c1e3b0505657a8 \; --hash=sha256:37e55c8e51c236f95b033f6fb391d7d7970ba5fe7ff453dad675e88cf303377a \; --hash=sha256:3d47fa203a7bd9c5b6cee4736ee84ca03b8ef23193c0d1ca99b5089f72645c73 \; --hash=sha256:3e4d1f6587322d2788836a99c69062fbb091331ec940e02d12d179c1d53e25fc \; --hash=sha256:42cb296636fcc8b0644486d15c12376cb9fa75443e00fb25de0b8602e64c1714 \; --hash=sha256:45485e01ff4d3630ec0d9617310448a8702f70e9c01906b0d0118bdf9d124cf2 \; --hash=sha256:4a78b2b446bd7c934f5dcedc588903fb2f5eec172f3d29e52a9096a43722adfc \; --hash=sha256:4ab2fe47fae9e0f9dee8c04187ce5d09f48eabe611be8259444906793ab7cbce \; --hash=sha256:4d0d1650369165a14e14e1e47b372cfcb31d6ab44e6e33cb2d4e57265290044d \; --hash=sha256:549a3a73da901d5bc3ce8d24e0600d1fa85524c10287f6004fbab87672bf3e1e \; --hash=sha256:55086ee1064215781fff39a1af09518bc9255b50d6333f2e4c74ca09fac6a8f6 \; --hash=sha256:572c3763a264ba47b3cf708a44ce965d98555f618ca42c926a9c1616d8f34269 \; --hash=sha256:573f6ea,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:2240,Security,hash,hash,2240,3f8e9786 \; --hash=sha256:0b2b64d2bb6d3fb9112bafa732def486049e63de9618b5843bcdd081d8144cd8 \; --hash=sha256:10955842570876604d404661fbccbc9c7e684caf432c09c715ec38fbae45ae09 \; --hash=sha256:122c7fa62b130ed55f8f285bfd56d5f4b4a5b503609d181f9ad85e55c89f4185 \; --hash=sha256:1ceae2f17a9c33cb48e3263960dc5fc8005351ee19db217e9b1bb15d28c02574 \; --hash=sha256:1d3193f4a680c64b4b6a9115943538edb896edc190f0b222e73761716519268e \; --hash=sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519 \; --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \; --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sha256:2e81c7b9c8979ce92ed306c249d46894776a909505d8f5a4ba55b14206e3222f \; --hash=sha256:3287761bc4ee9e33561a7e058c72ac0938c4f57fe49a09eae428fd88aafe7bb6 \; --hash=sha256:34d1c8da1e78d2e001f363791c98a272bb734000fcef47a491c1e3b0505657a8 \; --hash=sha256:37e55c8e51c236f95b033f6fb391d7d7970ba5fe7ff453dad675e88cf303377a \; --hash=sha256:3d47fa203a7bd9c5b6cee4736ee84ca03b8ef23193c0d1ca99b5089f72645c73 \; --hash=sha256:3e4d1f6587322d2788836a99c69062fbb091331ec940e02d12d179c1d53e25fc \; --hash=sha256:42cb296636fcc8b0644486d15c12376cb9fa75443e00fb25de0b8602e64c1714 \; --hash=sha256:45485e01ff4d3630ec0d9617310448a8702f70e9c01906b0d0118bdf9d124cf2 \; --hash=sha256:4a78b2b446bd7c934f5dcedc588903fb2f5eec172f3d29e52a9096a43722adfc \; --hash=sha256:4ab2fe47fae9e0f9dee8c04187ce5d09f48eabe611be8259444906793ab7cbce \; --hash=sha256:4d0d1650369165a14e14e1e47b372cfcb31d6ab44e6e33cb2d4e57265290044d \; --hash=sha256:549a3a73da901d5bc3ce8d24e0600d1fa85524c10287f6004fbab87672bf3e1e \; --hash=sha256:55086ee1064215781fff39a1af09518bc9255b50d6333f2e4c74ca09fac6a8f6 \; --hash=sha256:572c3763a264ba47b3cf708a44ce965d98555f618ca42c926a9c1616d8f34269 \; --hash=sha256:573f6eac48f4769d667c4442081b1794f52919e7edada77495aaed9236d13a96 \; --hash=sha256:5b4c145,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:2322,Security,hash,hash,2322,d8144cd8 \; --hash=sha256:10955842570876604d404661fbccbc9c7e684caf432c09c715ec38fbae45ae09 \; --hash=sha256:122c7fa62b130ed55f8f285bfd56d5f4b4a5b503609d181f9ad85e55c89f4185 \; --hash=sha256:1ceae2f17a9c33cb48e3263960dc5fc8005351ee19db217e9b1bb15d28c02574 \; --hash=sha256:1d3193f4a680c64b4b6a9115943538edb896edc190f0b222e73761716519268e \; --hash=sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519 \; --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \; --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sha256:2e81c7b9c8979ce92ed306c249d46894776a909505d8f5a4ba55b14206e3222f \; --hash=sha256:3287761bc4ee9e33561a7e058c72ac0938c4f57fe49a09eae428fd88aafe7bb6 \; --hash=sha256:34d1c8da1e78d2e001f363791c98a272bb734000fcef47a491c1e3b0505657a8 \; --hash=sha256:37e55c8e51c236f95b033f6fb391d7d7970ba5fe7ff453dad675e88cf303377a \; --hash=sha256:3d47fa203a7bd9c5b6cee4736ee84ca03b8ef23193c0d1ca99b5089f72645c73 \; --hash=sha256:3e4d1f6587322d2788836a99c69062fbb091331ec940e02d12d179c1d53e25fc \; --hash=sha256:42cb296636fcc8b0644486d15c12376cb9fa75443e00fb25de0b8602e64c1714 \; --hash=sha256:45485e01ff4d3630ec0d9617310448a8702f70e9c01906b0d0118bdf9d124cf2 \; --hash=sha256:4a78b2b446bd7c934f5dcedc588903fb2f5eec172f3d29e52a9096a43722adfc \; --hash=sha256:4ab2fe47fae9e0f9dee8c04187ce5d09f48eabe611be8259444906793ab7cbce \; --hash=sha256:4d0d1650369165a14e14e1e47b372cfcb31d6ab44e6e33cb2d4e57265290044d \; --hash=sha256:549a3a73da901d5bc3ce8d24e0600d1fa85524c10287f6004fbab87672bf3e1e \; --hash=sha256:55086ee1064215781fff39a1af09518bc9255b50d6333f2e4c74ca09fac6a8f6 \; --hash=sha256:572c3763a264ba47b3cf708a44ce965d98555f618ca42c926a9c1616d8f34269 \; --hash=sha256:573f6eac48f4769d667c4442081b1794f52919e7edada77495aaed9236d13a96 \; --hash=sha256:5b4c145409bef602a690e7cfad0a15a55c13320ff7a3ad7ca59c13bb8ba4d45d \; --hash=sha256:6463eff,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:2404,Security,hash,hash,2404,ae45ae09 \; --hash=sha256:122c7fa62b130ed55f8f285bfd56d5f4b4a5b503609d181f9ad85e55c89f4185 \; --hash=sha256:1ceae2f17a9c33cb48e3263960dc5fc8005351ee19db217e9b1bb15d28c02574 \; --hash=sha256:1d3193f4a680c64b4b6a9115943538edb896edc190f0b222e73761716519268e \; --hash=sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519 \; --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \; --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sha256:2e81c7b9c8979ce92ed306c249d46894776a909505d8f5a4ba55b14206e3222f \; --hash=sha256:3287761bc4ee9e33561a7e058c72ac0938c4f57fe49a09eae428fd88aafe7bb6 \; --hash=sha256:34d1c8da1e78d2e001f363791c98a272bb734000fcef47a491c1e3b0505657a8 \; --hash=sha256:37e55c8e51c236f95b033f6fb391d7d7970ba5fe7ff453dad675e88cf303377a \; --hash=sha256:3d47fa203a7bd9c5b6cee4736ee84ca03b8ef23193c0d1ca99b5089f72645c73 \; --hash=sha256:3e4d1f6587322d2788836a99c69062fbb091331ec940e02d12d179c1d53e25fc \; --hash=sha256:42cb296636fcc8b0644486d15c12376cb9fa75443e00fb25de0b8602e64c1714 \; --hash=sha256:45485e01ff4d3630ec0d9617310448a8702f70e9c01906b0d0118bdf9d124cf2 \; --hash=sha256:4a78b2b446bd7c934f5dcedc588903fb2f5eec172f3d29e52a9096a43722adfc \; --hash=sha256:4ab2fe47fae9e0f9dee8c04187ce5d09f48eabe611be8259444906793ab7cbce \; --hash=sha256:4d0d1650369165a14e14e1e47b372cfcb31d6ab44e6e33cb2d4e57265290044d \; --hash=sha256:549a3a73da901d5bc3ce8d24e0600d1fa85524c10287f6004fbab87672bf3e1e \; --hash=sha256:55086ee1064215781fff39a1af09518bc9255b50d6333f2e4c74ca09fac6a8f6 \; --hash=sha256:572c3763a264ba47b3cf708a44ce965d98555f618ca42c926a9c1616d8f34269 \; --hash=sha256:573f6eac48f4769d667c4442081b1794f52919e7edada77495aaed9236d13a96 \; --hash=sha256:5b4c145409bef602a690e7cfad0a15a55c13320ff7a3ad7ca59c13bb8ba4d45d \; --hash=sha256:6463effa3186ea09411d50efc7d85360b38d5f09b870c48e4600f63af490e56a \; --hash=sha256:65f6f63,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:2486,Security,hash,hash,2486,c89f4185 \; --hash=sha256:1ceae2f17a9c33cb48e3263960dc5fc8005351ee19db217e9b1bb15d28c02574 \; --hash=sha256:1d3193f4a680c64b4b6a9115943538edb896edc190f0b222e73761716519268e \; --hash=sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519 \; --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \; --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sha256:2e81c7b9c8979ce92ed306c249d46894776a909505d8f5a4ba55b14206e3222f \; --hash=sha256:3287761bc4ee9e33561a7e058c72ac0938c4f57fe49a09eae428fd88aafe7bb6 \; --hash=sha256:34d1c8da1e78d2e001f363791c98a272bb734000fcef47a491c1e3b0505657a8 \; --hash=sha256:37e55c8e51c236f95b033f6fb391d7d7970ba5fe7ff453dad675e88cf303377a \; --hash=sha256:3d47fa203a7bd9c5b6cee4736ee84ca03b8ef23193c0d1ca99b5089f72645c73 \; --hash=sha256:3e4d1f6587322d2788836a99c69062fbb091331ec940e02d12d179c1d53e25fc \; --hash=sha256:42cb296636fcc8b0644486d15c12376cb9fa75443e00fb25de0b8602e64c1714 \; --hash=sha256:45485e01ff4d3630ec0d9617310448a8702f70e9c01906b0d0118bdf9d124cf2 \; --hash=sha256:4a78b2b446bd7c934f5dcedc588903fb2f5eec172f3d29e52a9096a43722adfc \; --hash=sha256:4ab2fe47fae9e0f9dee8c04187ce5d09f48eabe611be8259444906793ab7cbce \; --hash=sha256:4d0d1650369165a14e14e1e47b372cfcb31d6ab44e6e33cb2d4e57265290044d \; --hash=sha256:549a3a73da901d5bc3ce8d24e0600d1fa85524c10287f6004fbab87672bf3e1e \; --hash=sha256:55086ee1064215781fff39a1af09518bc9255b50d6333f2e4c74ca09fac6a8f6 \; --hash=sha256:572c3763a264ba47b3cf708a44ce965d98555f618ca42c926a9c1616d8f34269 \; --hash=sha256:573f6eac48f4769d667c4442081b1794f52919e7edada77495aaed9236d13a96 \; --hash=sha256:5b4c145409bef602a690e7cfad0a15a55c13320ff7a3ad7ca59c13bb8ba4d45d \; --hash=sha256:6463effa3186ea09411d50efc7d85360b38d5f09b870c48e4600f63af490e56a \; --hash=sha256:65f6f63034100ead094b8744b3b97965785388f308a64cf8d7c34f2f2e5be0c4 \; --hash=sha256:6639466,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:2568,Security,hash,hash,2568,28c02574 \; --hash=sha256:1d3193f4a680c64b4b6a9115943538edb896edc190f0b222e73761716519268e \; --hash=sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519 \; --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \; --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sha256:2e81c7b9c8979ce92ed306c249d46894776a909505d8f5a4ba55b14206e3222f \; --hash=sha256:3287761bc4ee9e33561a7e058c72ac0938c4f57fe49a09eae428fd88aafe7bb6 \; --hash=sha256:34d1c8da1e78d2e001f363791c98a272bb734000fcef47a491c1e3b0505657a8 \; --hash=sha256:37e55c8e51c236f95b033f6fb391d7d7970ba5fe7ff453dad675e88cf303377a \; --hash=sha256:3d47fa203a7bd9c5b6cee4736ee84ca03b8ef23193c0d1ca99b5089f72645c73 \; --hash=sha256:3e4d1f6587322d2788836a99c69062fbb091331ec940e02d12d179c1d53e25fc \; --hash=sha256:42cb296636fcc8b0644486d15c12376cb9fa75443e00fb25de0b8602e64c1714 \; --hash=sha256:45485e01ff4d3630ec0d9617310448a8702f70e9c01906b0d0118bdf9d124cf2 \; --hash=sha256:4a78b2b446bd7c934f5dcedc588903fb2f5eec172f3d29e52a9096a43722adfc \; --hash=sha256:4ab2fe47fae9e0f9dee8c04187ce5d09f48eabe611be8259444906793ab7cbce \; --hash=sha256:4d0d1650369165a14e14e1e47b372cfcb31d6ab44e6e33cb2d4e57265290044d \; --hash=sha256:549a3a73da901d5bc3ce8d24e0600d1fa85524c10287f6004fbab87672bf3e1e \; --hash=sha256:55086ee1064215781fff39a1af09518bc9255b50d6333f2e4c74ca09fac6a8f6 \; --hash=sha256:572c3763a264ba47b3cf708a44ce965d98555f618ca42c926a9c1616d8f34269 \; --hash=sha256:573f6eac48f4769d667c4442081b1794f52919e7edada77495aaed9236d13a96 \; --hash=sha256:5b4c145409bef602a690e7cfad0a15a55c13320ff7a3ad7ca59c13bb8ba4d45d \; --hash=sha256:6463effa3186ea09411d50efc7d85360b38d5f09b870c48e4600f63af490e56a \; --hash=sha256:65f6f63034100ead094b8744b3b97965785388f308a64cf8d7c34f2f2e5be0c4 \; --hash=sha256:663946639d296df6a2bb2aa51b60a2454ca1cb29835324c640dafb5ff2131a77 \; --hash=sha256:6897af5,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:2650,Security,hash,hash,2650,6519268e \; --hash=sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519 \; --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \; --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sha256:2e81c7b9c8979ce92ed306c249d46894776a909505d8f5a4ba55b14206e3222f \; --hash=sha256:3287761bc4ee9e33561a7e058c72ac0938c4f57fe49a09eae428fd88aafe7bb6 \; --hash=sha256:34d1c8da1e78d2e001f363791c98a272bb734000fcef47a491c1e3b0505657a8 \; --hash=sha256:37e55c8e51c236f95b033f6fb391d7d7970ba5fe7ff453dad675e88cf303377a \; --hash=sha256:3d47fa203a7bd9c5b6cee4736ee84ca03b8ef23193c0d1ca99b5089f72645c73 \; --hash=sha256:3e4d1f6587322d2788836a99c69062fbb091331ec940e02d12d179c1d53e25fc \; --hash=sha256:42cb296636fcc8b0644486d15c12376cb9fa75443e00fb25de0b8602e64c1714 \; --hash=sha256:45485e01ff4d3630ec0d9617310448a8702f70e9c01906b0d0118bdf9d124cf2 \; --hash=sha256:4a78b2b446bd7c934f5dcedc588903fb2f5eec172f3d29e52a9096a43722adfc \; --hash=sha256:4ab2fe47fae9e0f9dee8c04187ce5d09f48eabe611be8259444906793ab7cbce \; --hash=sha256:4d0d1650369165a14e14e1e47b372cfcb31d6ab44e6e33cb2d4e57265290044d \; --hash=sha256:549a3a73da901d5bc3ce8d24e0600d1fa85524c10287f6004fbab87672bf3e1e \; --hash=sha256:55086ee1064215781fff39a1af09518bc9255b50d6333f2e4c74ca09fac6a8f6 \; --hash=sha256:572c3763a264ba47b3cf708a44ce965d98555f618ca42c926a9c1616d8f34269 \; --hash=sha256:573f6eac48f4769d667c4442081b1794f52919e7edada77495aaed9236d13a96 \; --hash=sha256:5b4c145409bef602a690e7cfad0a15a55c13320ff7a3ad7ca59c13bb8ba4d45d \; --hash=sha256:6463effa3186ea09411d50efc7d85360b38d5f09b870c48e4600f63af490e56a \; --hash=sha256:65f6f63034100ead094b8744b3b97965785388f308a64cf8d7c34f2f2e5be0c4 \; --hash=sha256:663946639d296df6a2bb2aa51b60a2454ca1cb29835324c640dafb5ff2131a77 \; --hash=sha256:6897af51655e3691ff853668779c7bad41579facacf5fd7253b0133308cf000d \; --hash=sha256:68d1f8a,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:2732,Security,hash,hash,2732,0640e519 \; --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \; --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sha256:2e81c7b9c8979ce92ed306c249d46894776a909505d8f5a4ba55b14206e3222f \; --hash=sha256:3287761bc4ee9e33561a7e058c72ac0938c4f57fe49a09eae428fd88aafe7bb6 \; --hash=sha256:34d1c8da1e78d2e001f363791c98a272bb734000fcef47a491c1e3b0505657a8 \; --hash=sha256:37e55c8e51c236f95b033f6fb391d7d7970ba5fe7ff453dad675e88cf303377a \; --hash=sha256:3d47fa203a7bd9c5b6cee4736ee84ca03b8ef23193c0d1ca99b5089f72645c73 \; --hash=sha256:3e4d1f6587322d2788836a99c69062fbb091331ec940e02d12d179c1d53e25fc \; --hash=sha256:42cb296636fcc8b0644486d15c12376cb9fa75443e00fb25de0b8602e64c1714 \; --hash=sha256:45485e01ff4d3630ec0d9617310448a8702f70e9c01906b0d0118bdf9d124cf2 \; --hash=sha256:4a78b2b446bd7c934f5dcedc588903fb2f5eec172f3d29e52a9096a43722adfc \; --hash=sha256:4ab2fe47fae9e0f9dee8c04187ce5d09f48eabe611be8259444906793ab7cbce \; --hash=sha256:4d0d1650369165a14e14e1e47b372cfcb31d6ab44e6e33cb2d4e57265290044d \; --hash=sha256:549a3a73da901d5bc3ce8d24e0600d1fa85524c10287f6004fbab87672bf3e1e \; --hash=sha256:55086ee1064215781fff39a1af09518bc9255b50d6333f2e4c74ca09fac6a8f6 \; --hash=sha256:572c3763a264ba47b3cf708a44ce965d98555f618ca42c926a9c1616d8f34269 \; --hash=sha256:573f6eac48f4769d667c4442081b1794f52919e7edada77495aaed9236d13a96 \; --hash=sha256:5b4c145409bef602a690e7cfad0a15a55c13320ff7a3ad7ca59c13bb8ba4d45d \; --hash=sha256:6463effa3186ea09411d50efc7d85360b38d5f09b870c48e4600f63af490e56a \; --hash=sha256:65f6f63034100ead094b8744b3b97965785388f308a64cf8d7c34f2f2e5be0c4 \; --hash=sha256:663946639d296df6a2bb2aa51b60a2454ca1cb29835324c640dafb5ff2131a77 \; --hash=sha256:6897af51655e3691ff853668779c7bad41579facacf5fd7253b0133308cf000d \; --hash=sha256:68d1f8a9e9e37c1223b656399be5d6b448dea850bed7d0f87a8311f1ff3dabb0 \; --hash=sha256:6ac7ffc,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:2814,Security,hash,hash,2814,5793f898 \; --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sha256:2e81c7b9c8979ce92ed306c249d46894776a909505d8f5a4ba55b14206e3222f \; --hash=sha256:3287761bc4ee9e33561a7e058c72ac0938c4f57fe49a09eae428fd88aafe7bb6 \; --hash=sha256:34d1c8da1e78d2e001f363791c98a272bb734000fcef47a491c1e3b0505657a8 \; --hash=sha256:37e55c8e51c236f95b033f6fb391d7d7970ba5fe7ff453dad675e88cf303377a \; --hash=sha256:3d47fa203a7bd9c5b6cee4736ee84ca03b8ef23193c0d1ca99b5089f72645c73 \; --hash=sha256:3e4d1f6587322d2788836a99c69062fbb091331ec940e02d12d179c1d53e25fc \; --hash=sha256:42cb296636fcc8b0644486d15c12376cb9fa75443e00fb25de0b8602e64c1714 \; --hash=sha256:45485e01ff4d3630ec0d9617310448a8702f70e9c01906b0d0118bdf9d124cf2 \; --hash=sha256:4a78b2b446bd7c934f5dcedc588903fb2f5eec172f3d29e52a9096a43722adfc \; --hash=sha256:4ab2fe47fae9e0f9dee8c04187ce5d09f48eabe611be8259444906793ab7cbce \; --hash=sha256:4d0d1650369165a14e14e1e47b372cfcb31d6ab44e6e33cb2d4e57265290044d \; --hash=sha256:549a3a73da901d5bc3ce8d24e0600d1fa85524c10287f6004fbab87672bf3e1e \; --hash=sha256:55086ee1064215781fff39a1af09518bc9255b50d6333f2e4c74ca09fac6a8f6 \; --hash=sha256:572c3763a264ba47b3cf708a44ce965d98555f618ca42c926a9c1616d8f34269 \; --hash=sha256:573f6eac48f4769d667c4442081b1794f52919e7edada77495aaed9236d13a96 \; --hash=sha256:5b4c145409bef602a690e7cfad0a15a55c13320ff7a3ad7ca59c13bb8ba4d45d \; --hash=sha256:6463effa3186ea09411d50efc7d85360b38d5f09b870c48e4600f63af490e56a \; --hash=sha256:65f6f63034100ead094b8744b3b97965785388f308a64cf8d7c34f2f2e5be0c4 \; --hash=sha256:663946639d296df6a2bb2aa51b60a2454ca1cb29835324c640dafb5ff2131a77 \; --hash=sha256:6897af51655e3691ff853668779c7bad41579facacf5fd7253b0133308cf000d \; --hash=sha256:68d1f8a9e9e37c1223b656399be5d6b448dea850bed7d0f87a8311f1ff3dabb0 \; --hash=sha256:6ac7ffc7ad6d040517be39eb591cac5ff87416c2537df6ba3cba3bae290c0fed \; --hash=sha256:6b32518,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:2896,Security,hash,hash,2896,2b1b2269 \; --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \; --hash=sha256:2e81c7b9c8979ce92ed306c249d46894776a909505d8f5a4ba55b14206e3222f \; --hash=sha256:3287761bc4ee9e33561a7e058c72ac0938c4f57fe49a09eae428fd88aafe7bb6 \; --hash=sha256:34d1c8da1e78d2e001f363791c98a272bb734000fcef47a491c1e3b0505657a8 \; --hash=sha256:37e55c8e51c236f95b033f6fb391d7d7970ba5fe7ff453dad675e88cf303377a \; --hash=sha256:3d47fa203a7bd9c5b6cee4736ee84ca03b8ef23193c0d1ca99b5089f72645c73 \; --hash=sha256:3e4d1f6587322d2788836a99c69062fbb091331ec940e02d12d179c1d53e25fc \; --hash=sha256:42cb296636fcc8b0644486d15c12376cb9fa75443e00fb25de0b8602e64c1714 \; --hash=sha256:45485e01ff4d3630ec0d9617310448a8702f70e9c01906b0d0118bdf9d124cf2 \; --hash=sha256:4a78b2b446bd7c934f5dcedc588903fb2f5eec172f3d29e52a9096a43722adfc \; --hash=sha256:4ab2fe47fae9e0f9dee8c04187ce5d09f48eabe611be8259444906793ab7cbce \; --hash=sha256:4d0d1650369165a14e14e1e47b372cfcb31d6ab44e6e33cb2d4e57265290044d \; --hash=sha256:549a3a73da901d5bc3ce8d24e0600d1fa85524c10287f6004fbab87672bf3e1e \; --hash=sha256:55086ee1064215781fff39a1af09518bc9255b50d6333f2e4c74ca09fac6a8f6 \; --hash=sha256:572c3763a264ba47b3cf708a44ce965d98555f618ca42c926a9c1616d8f34269 \; --hash=sha256:573f6eac48f4769d667c4442081b1794f52919e7edada77495aaed9236d13a96 \; --hash=sha256:5b4c145409bef602a690e7cfad0a15a55c13320ff7a3ad7ca59c13bb8ba4d45d \; --hash=sha256:6463effa3186ea09411d50efc7d85360b38d5f09b870c48e4600f63af490e56a \; --hash=sha256:65f6f63034100ead094b8744b3b97965785388f308a64cf8d7c34f2f2e5be0c4 \; --hash=sha256:663946639d296df6a2bb2aa51b60a2454ca1cb29835324c640dafb5ff2131a77 \; --hash=sha256:6897af51655e3691ff853668779c7bad41579facacf5fd7253b0133308cf000d \; --hash=sha256:68d1f8a9e9e37c1223b656399be5d6b448dea850bed7d0f87a8311f1ff3dabb0 \; --hash=sha256:6ac7ffc7ad6d040517be39eb591cac5ff87416c2537df6ba3cba3bae290c0fed \; --hash=sha256:6b3251890fff30ee142c44144871185dbe13b11bab478a88887a639655be1068 \; --hash=sha256:6c4caee,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:2978,Security,hash,hash,2978,1721cdd3 \; --hash=sha256:2e81c7b9c8979ce92ed306c249d46894776a909505d8f5a4ba55b14206e3222f \; --hash=sha256:3287761bc4ee9e33561a7e058c72ac0938c4f57fe49a09eae428fd88aafe7bb6 \; --hash=sha256:34d1c8da1e78d2e001f363791c98a272bb734000fcef47a491c1e3b0505657a8 \; --hash=sha256:37e55c8e51c236f95b033f6fb391d7d7970ba5fe7ff453dad675e88cf303377a \; --hash=sha256:3d47fa203a7bd9c5b6cee4736ee84ca03b8ef23193c0d1ca99b5089f72645c73 \; --hash=sha256:3e4d1f6587322d2788836a99c69062fbb091331ec940e02d12d179c1d53e25fc \; --hash=sha256:42cb296636fcc8b0644486d15c12376cb9fa75443e00fb25de0b8602e64c1714 \; --hash=sha256:45485e01ff4d3630ec0d9617310448a8702f70e9c01906b0d0118bdf9d124cf2 \; --hash=sha256:4a78b2b446bd7c934f5dcedc588903fb2f5eec172f3d29e52a9096a43722adfc \; --hash=sha256:4ab2fe47fae9e0f9dee8c04187ce5d09f48eabe611be8259444906793ab7cbce \; --hash=sha256:4d0d1650369165a14e14e1e47b372cfcb31d6ab44e6e33cb2d4e57265290044d \; --hash=sha256:549a3a73da901d5bc3ce8d24e0600d1fa85524c10287f6004fbab87672bf3e1e \; --hash=sha256:55086ee1064215781fff39a1af09518bc9255b50d6333f2e4c74ca09fac6a8f6 \; --hash=sha256:572c3763a264ba47b3cf708a44ce965d98555f618ca42c926a9c1616d8f34269 \; --hash=sha256:573f6eac48f4769d667c4442081b1794f52919e7edada77495aaed9236d13a96 \; --hash=sha256:5b4c145409bef602a690e7cfad0a15a55c13320ff7a3ad7ca59c13bb8ba4d45d \; --hash=sha256:6463effa3186ea09411d50efc7d85360b38d5f09b870c48e4600f63af490e56a \; --hash=sha256:65f6f63034100ead094b8744b3b97965785388f308a64cf8d7c34f2f2e5be0c4 \; --hash=sha256:663946639d296df6a2bb2aa51b60a2454ca1cb29835324c640dafb5ff2131a77 \; --hash=sha256:6897af51655e3691ff853668779c7bad41579facacf5fd7253b0133308cf000d \; --hash=sha256:68d1f8a9e9e37c1223b656399be5d6b448dea850bed7d0f87a8311f1ff3dabb0 \; --hash=sha256:6ac7ffc7ad6d040517be39eb591cac5ff87416c2537df6ba3cba3bae290c0fed \; --hash=sha256:6b3251890fff30ee142c44144871185dbe13b11bab478a88887a639655be1068 \; --hash=sha256:6c4caeef8fa63d06bd437cd4bdcf3ffefe6738fb1b25951440d80dc7df8c03ac \; --hash=sha256:6ef1d82,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:3060,Security,hash,hash,3060,06e3222f \; --hash=sha256:3287761bc4ee9e33561a7e058c72ac0938c4f57fe49a09eae428fd88aafe7bb6 \; --hash=sha256:34d1c8da1e78d2e001f363791c98a272bb734000fcef47a491c1e3b0505657a8 \; --hash=sha256:37e55c8e51c236f95b033f6fb391d7d7970ba5fe7ff453dad675e88cf303377a \; --hash=sha256:3d47fa203a7bd9c5b6cee4736ee84ca03b8ef23193c0d1ca99b5089f72645c73 \; --hash=sha256:3e4d1f6587322d2788836a99c69062fbb091331ec940e02d12d179c1d53e25fc \; --hash=sha256:42cb296636fcc8b0644486d15c12376cb9fa75443e00fb25de0b8602e64c1714 \; --hash=sha256:45485e01ff4d3630ec0d9617310448a8702f70e9c01906b0d0118bdf9d124cf2 \; --hash=sha256:4a78b2b446bd7c934f5dcedc588903fb2f5eec172f3d29e52a9096a43722adfc \; --hash=sha256:4ab2fe47fae9e0f9dee8c04187ce5d09f48eabe611be8259444906793ab7cbce \; --hash=sha256:4d0d1650369165a14e14e1e47b372cfcb31d6ab44e6e33cb2d4e57265290044d \; --hash=sha256:549a3a73da901d5bc3ce8d24e0600d1fa85524c10287f6004fbab87672bf3e1e \; --hash=sha256:55086ee1064215781fff39a1af09518bc9255b50d6333f2e4c74ca09fac6a8f6 \; --hash=sha256:572c3763a264ba47b3cf708a44ce965d98555f618ca42c926a9c1616d8f34269 \; --hash=sha256:573f6eac48f4769d667c4442081b1794f52919e7edada77495aaed9236d13a96 \; --hash=sha256:5b4c145409bef602a690e7cfad0a15a55c13320ff7a3ad7ca59c13bb8ba4d45d \; --hash=sha256:6463effa3186ea09411d50efc7d85360b38d5f09b870c48e4600f63af490e56a \; --hash=sha256:65f6f63034100ead094b8744b3b97965785388f308a64cf8d7c34f2f2e5be0c4 \; --hash=sha256:663946639d296df6a2bb2aa51b60a2454ca1cb29835324c640dafb5ff2131a77 \; --hash=sha256:6897af51655e3691ff853668779c7bad41579facacf5fd7253b0133308cf000d \; --hash=sha256:68d1f8a9e9e37c1223b656399be5d6b448dea850bed7d0f87a8311f1ff3dabb0 \; --hash=sha256:6ac7ffc7ad6d040517be39eb591cac5ff87416c2537df6ba3cba3bae290c0fed \; --hash=sha256:6b3251890fff30ee142c44144871185dbe13b11bab478a88887a639655be1068 \; --hash=sha256:6c4caeef8fa63d06bd437cd4bdcf3ffefe6738fb1b25951440d80dc7df8c03ac \; --hash=sha256:6ef1d82a3af9d3eecdba2321dc1b3c238245d890843e040e41e470ffa64c3e25 \; --hash=sha256:753f10e,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:3142,Security,hash,hash,3142,aafe7bb6 \; --hash=sha256:34d1c8da1e78d2e001f363791c98a272bb734000fcef47a491c1e3b0505657a8 \; --hash=sha256:37e55c8e51c236f95b033f6fb391d7d7970ba5fe7ff453dad675e88cf303377a \; --hash=sha256:3d47fa203a7bd9c5b6cee4736ee84ca03b8ef23193c0d1ca99b5089f72645c73 \; --hash=sha256:3e4d1f6587322d2788836a99c69062fbb091331ec940e02d12d179c1d53e25fc \; --hash=sha256:42cb296636fcc8b0644486d15c12376cb9fa75443e00fb25de0b8602e64c1714 \; --hash=sha256:45485e01ff4d3630ec0d9617310448a8702f70e9c01906b0d0118bdf9d124cf2 \; --hash=sha256:4a78b2b446bd7c934f5dcedc588903fb2f5eec172f3d29e52a9096a43722adfc \; --hash=sha256:4ab2fe47fae9e0f9dee8c04187ce5d09f48eabe611be8259444906793ab7cbce \; --hash=sha256:4d0d1650369165a14e14e1e47b372cfcb31d6ab44e6e33cb2d4e57265290044d \; --hash=sha256:549a3a73da901d5bc3ce8d24e0600d1fa85524c10287f6004fbab87672bf3e1e \; --hash=sha256:55086ee1064215781fff39a1af09518bc9255b50d6333f2e4c74ca09fac6a8f6 \; --hash=sha256:572c3763a264ba47b3cf708a44ce965d98555f618ca42c926a9c1616d8f34269 \; --hash=sha256:573f6eac48f4769d667c4442081b1794f52919e7edada77495aaed9236d13a96 \; --hash=sha256:5b4c145409bef602a690e7cfad0a15a55c13320ff7a3ad7ca59c13bb8ba4d45d \; --hash=sha256:6463effa3186ea09411d50efc7d85360b38d5f09b870c48e4600f63af490e56a \; --hash=sha256:65f6f63034100ead094b8744b3b97965785388f308a64cf8d7c34f2f2e5be0c4 \; --hash=sha256:663946639d296df6a2bb2aa51b60a2454ca1cb29835324c640dafb5ff2131a77 \; --hash=sha256:6897af51655e3691ff853668779c7bad41579facacf5fd7253b0133308cf000d \; --hash=sha256:68d1f8a9e9e37c1223b656399be5d6b448dea850bed7d0f87a8311f1ff3dabb0 \; --hash=sha256:6ac7ffc7ad6d040517be39eb591cac5ff87416c2537df6ba3cba3bae290c0fed \; --hash=sha256:6b3251890fff30ee142c44144871185dbe13b11bab478a88887a639655be1068 \; --hash=sha256:6c4caeef8fa63d06bd437cd4bdcf3ffefe6738fb1b25951440d80dc7df8c03ac \; --hash=sha256:6ef1d82a3af9d3eecdba2321dc1b3c238245d890843e040e41e470ffa64c3e25 \; --hash=sha256:753f10e867343b4511128c6ed8c82f7bec3bd026875576dfd88483c5c73b2fd8 \; --hash=sha256:7cd13a2,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:3224,Security,hash,hash,3224,505657a8 \; --hash=sha256:37e55c8e51c236f95b033f6fb391d7d7970ba5fe7ff453dad675e88cf303377a \; --hash=sha256:3d47fa203a7bd9c5b6cee4736ee84ca03b8ef23193c0d1ca99b5089f72645c73 \; --hash=sha256:3e4d1f6587322d2788836a99c69062fbb091331ec940e02d12d179c1d53e25fc \; --hash=sha256:42cb296636fcc8b0644486d15c12376cb9fa75443e00fb25de0b8602e64c1714 \; --hash=sha256:45485e01ff4d3630ec0d9617310448a8702f70e9c01906b0d0118bdf9d124cf2 \; --hash=sha256:4a78b2b446bd7c934f5dcedc588903fb2f5eec172f3d29e52a9096a43722adfc \; --hash=sha256:4ab2fe47fae9e0f9dee8c04187ce5d09f48eabe611be8259444906793ab7cbce \; --hash=sha256:4d0d1650369165a14e14e1e47b372cfcb31d6ab44e6e33cb2d4e57265290044d \; --hash=sha256:549a3a73da901d5bc3ce8d24e0600d1fa85524c10287f6004fbab87672bf3e1e \; --hash=sha256:55086ee1064215781fff39a1af09518bc9255b50d6333f2e4c74ca09fac6a8f6 \; --hash=sha256:572c3763a264ba47b3cf708a44ce965d98555f618ca42c926a9c1616d8f34269 \; --hash=sha256:573f6eac48f4769d667c4442081b1794f52919e7edada77495aaed9236d13a96 \; --hash=sha256:5b4c145409bef602a690e7cfad0a15a55c13320ff7a3ad7ca59c13bb8ba4d45d \; --hash=sha256:6463effa3186ea09411d50efc7d85360b38d5f09b870c48e4600f63af490e56a \; --hash=sha256:65f6f63034100ead094b8744b3b97965785388f308a64cf8d7c34f2f2e5be0c4 \; --hash=sha256:663946639d296df6a2bb2aa51b60a2454ca1cb29835324c640dafb5ff2131a77 \; --hash=sha256:6897af51655e3691ff853668779c7bad41579facacf5fd7253b0133308cf000d \; --hash=sha256:68d1f8a9e9e37c1223b656399be5d6b448dea850bed7d0f87a8311f1ff3dabb0 \; --hash=sha256:6ac7ffc7ad6d040517be39eb591cac5ff87416c2537df6ba3cba3bae290c0fed \; --hash=sha256:6b3251890fff30ee142c44144871185dbe13b11bab478a88887a639655be1068 \; --hash=sha256:6c4caeef8fa63d06bd437cd4bdcf3ffefe6738fb1b25951440d80dc7df8c03ac \; --hash=sha256:6ef1d82a3af9d3eecdba2321dc1b3c238245d890843e040e41e470ffa64c3e25 \; --hash=sha256:753f10e867343b4511128c6ed8c82f7bec3bd026875576dfd88483c5c73b2fd8 \; --hash=sha256:7cd13a2e3ddeed6913a65e66e94b51d80a041145a026c27e6bb76c31a853c6ab \; --hash=sha256:7ed9e52,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:3306,Security,hash,hash,3306,f303377a \; --hash=sha256:3d47fa203a7bd9c5b6cee4736ee84ca03b8ef23193c0d1ca99b5089f72645c73 \; --hash=sha256:3e4d1f6587322d2788836a99c69062fbb091331ec940e02d12d179c1d53e25fc \; --hash=sha256:42cb296636fcc8b0644486d15c12376cb9fa75443e00fb25de0b8602e64c1714 \; --hash=sha256:45485e01ff4d3630ec0d9617310448a8702f70e9c01906b0d0118bdf9d124cf2 \; --hash=sha256:4a78b2b446bd7c934f5dcedc588903fb2f5eec172f3d29e52a9096a43722adfc \; --hash=sha256:4ab2fe47fae9e0f9dee8c04187ce5d09f48eabe611be8259444906793ab7cbce \; --hash=sha256:4d0d1650369165a14e14e1e47b372cfcb31d6ab44e6e33cb2d4e57265290044d \; --hash=sha256:549a3a73da901d5bc3ce8d24e0600d1fa85524c10287f6004fbab87672bf3e1e \; --hash=sha256:55086ee1064215781fff39a1af09518bc9255b50d6333f2e4c74ca09fac6a8f6 \; --hash=sha256:572c3763a264ba47b3cf708a44ce965d98555f618ca42c926a9c1616d8f34269 \; --hash=sha256:573f6eac48f4769d667c4442081b1794f52919e7edada77495aaed9236d13a96 \; --hash=sha256:5b4c145409bef602a690e7cfad0a15a55c13320ff7a3ad7ca59c13bb8ba4d45d \; --hash=sha256:6463effa3186ea09411d50efc7d85360b38d5f09b870c48e4600f63af490e56a \; --hash=sha256:65f6f63034100ead094b8744b3b97965785388f308a64cf8d7c34f2f2e5be0c4 \; --hash=sha256:663946639d296df6a2bb2aa51b60a2454ca1cb29835324c640dafb5ff2131a77 \; --hash=sha256:6897af51655e3691ff853668779c7bad41579facacf5fd7253b0133308cf000d \; --hash=sha256:68d1f8a9e9e37c1223b656399be5d6b448dea850bed7d0f87a8311f1ff3dabb0 \; --hash=sha256:6ac7ffc7ad6d040517be39eb591cac5ff87416c2537df6ba3cba3bae290c0fed \; --hash=sha256:6b3251890fff30ee142c44144871185dbe13b11bab478a88887a639655be1068 \; --hash=sha256:6c4caeef8fa63d06bd437cd4bdcf3ffefe6738fb1b25951440d80dc7df8c03ac \; --hash=sha256:6ef1d82a3af9d3eecdba2321dc1b3c238245d890843e040e41e470ffa64c3e25 \; --hash=sha256:753f10e867343b4511128c6ed8c82f7bec3bd026875576dfd88483c5c73b2fd8 \; --hash=sha256:7cd13a2e3ddeed6913a65e66e94b51d80a041145a026c27e6bb76c31a853c6ab \; --hash=sha256:7ed9e526742851e8d5cc9e6cf41427dfc6068d4f5a3bb03659444b4cabf6bc26 \; --hash=sha256:7f04c83,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:3388,Security,hash,hash,3388,72645c73 \; --hash=sha256:3e4d1f6587322d2788836a99c69062fbb091331ec940e02d12d179c1d53e25fc \; --hash=sha256:42cb296636fcc8b0644486d15c12376cb9fa75443e00fb25de0b8602e64c1714 \; --hash=sha256:45485e01ff4d3630ec0d9617310448a8702f70e9c01906b0d0118bdf9d124cf2 \; --hash=sha256:4a78b2b446bd7c934f5dcedc588903fb2f5eec172f3d29e52a9096a43722adfc \; --hash=sha256:4ab2fe47fae9e0f9dee8c04187ce5d09f48eabe611be8259444906793ab7cbce \; --hash=sha256:4d0d1650369165a14e14e1e47b372cfcb31d6ab44e6e33cb2d4e57265290044d \; --hash=sha256:549a3a73da901d5bc3ce8d24e0600d1fa85524c10287f6004fbab87672bf3e1e \; --hash=sha256:55086ee1064215781fff39a1af09518bc9255b50d6333f2e4c74ca09fac6a8f6 \; --hash=sha256:572c3763a264ba47b3cf708a44ce965d98555f618ca42c926a9c1616d8f34269 \; --hash=sha256:573f6eac48f4769d667c4442081b1794f52919e7edada77495aaed9236d13a96 \; --hash=sha256:5b4c145409bef602a690e7cfad0a15a55c13320ff7a3ad7ca59c13bb8ba4d45d \; --hash=sha256:6463effa3186ea09411d50efc7d85360b38d5f09b870c48e4600f63af490e56a \; --hash=sha256:65f6f63034100ead094b8744b3b97965785388f308a64cf8d7c34f2f2e5be0c4 \; --hash=sha256:663946639d296df6a2bb2aa51b60a2454ca1cb29835324c640dafb5ff2131a77 \; --hash=sha256:6897af51655e3691ff853668779c7bad41579facacf5fd7253b0133308cf000d \; --hash=sha256:68d1f8a9e9e37c1223b656399be5d6b448dea850bed7d0f87a8311f1ff3dabb0 \; --hash=sha256:6ac7ffc7ad6d040517be39eb591cac5ff87416c2537df6ba3cba3bae290c0fed \; --hash=sha256:6b3251890fff30ee142c44144871185dbe13b11bab478a88887a639655be1068 \; --hash=sha256:6c4caeef8fa63d06bd437cd4bdcf3ffefe6738fb1b25951440d80dc7df8c03ac \; --hash=sha256:6ef1d82a3af9d3eecdba2321dc1b3c238245d890843e040e41e470ffa64c3e25 \; --hash=sha256:753f10e867343b4511128c6ed8c82f7bec3bd026875576dfd88483c5c73b2fd8 \; --hash=sha256:7cd13a2e3ddeed6913a65e66e94b51d80a041145a026c27e6bb76c31a853c6ab \; --hash=sha256:7ed9e526742851e8d5cc9e6cf41427dfc6068d4f5a3bb03659444b4cabf6bc26 \; --hash=sha256:7f04c839ed0b6b98b1a7501a002144b76c18fb1c1850c8b98d458ac269e26ed2 \; --hash=sha256:802fe99,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:3470,Security,hash,hash,3470,d53e25fc \; --hash=sha256:42cb296636fcc8b0644486d15c12376cb9fa75443e00fb25de0b8602e64c1714 \; --hash=sha256:45485e01ff4d3630ec0d9617310448a8702f70e9c01906b0d0118bdf9d124cf2 \; --hash=sha256:4a78b2b446bd7c934f5dcedc588903fb2f5eec172f3d29e52a9096a43722adfc \; --hash=sha256:4ab2fe47fae9e0f9dee8c04187ce5d09f48eabe611be8259444906793ab7cbce \; --hash=sha256:4d0d1650369165a14e14e1e47b372cfcb31d6ab44e6e33cb2d4e57265290044d \; --hash=sha256:549a3a73da901d5bc3ce8d24e0600d1fa85524c10287f6004fbab87672bf3e1e \; --hash=sha256:55086ee1064215781fff39a1af09518bc9255b50d6333f2e4c74ca09fac6a8f6 \; --hash=sha256:572c3763a264ba47b3cf708a44ce965d98555f618ca42c926a9c1616d8f34269 \; --hash=sha256:573f6eac48f4769d667c4442081b1794f52919e7edada77495aaed9236d13a96 \; --hash=sha256:5b4c145409bef602a690e7cfad0a15a55c13320ff7a3ad7ca59c13bb8ba4d45d \; --hash=sha256:6463effa3186ea09411d50efc7d85360b38d5f09b870c48e4600f63af490e56a \; --hash=sha256:65f6f63034100ead094b8744b3b97965785388f308a64cf8d7c34f2f2e5be0c4 \; --hash=sha256:663946639d296df6a2bb2aa51b60a2454ca1cb29835324c640dafb5ff2131a77 \; --hash=sha256:6897af51655e3691ff853668779c7bad41579facacf5fd7253b0133308cf000d \; --hash=sha256:68d1f8a9e9e37c1223b656399be5d6b448dea850bed7d0f87a8311f1ff3dabb0 \; --hash=sha256:6ac7ffc7ad6d040517be39eb591cac5ff87416c2537df6ba3cba3bae290c0fed \; --hash=sha256:6b3251890fff30ee142c44144871185dbe13b11bab478a88887a639655be1068 \; --hash=sha256:6c4caeef8fa63d06bd437cd4bdcf3ffefe6738fb1b25951440d80dc7df8c03ac \; --hash=sha256:6ef1d82a3af9d3eecdba2321dc1b3c238245d890843e040e41e470ffa64c3e25 \; --hash=sha256:753f10e867343b4511128c6ed8c82f7bec3bd026875576dfd88483c5c73b2fd8 \; --hash=sha256:7cd13a2e3ddeed6913a65e66e94b51d80a041145a026c27e6bb76c31a853c6ab \; --hash=sha256:7ed9e526742851e8d5cc9e6cf41427dfc6068d4f5a3bb03659444b4cabf6bc26 \; --hash=sha256:7f04c839ed0b6b98b1a7501a002144b76c18fb1c1850c8b98d458ac269e26ed2 \; --hash=sha256:802fe99cca7457642125a8a88a084cef28ff0cf9407060f7b93dca5aa25480db \; --hash=sha256:80402cd,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:3552,Security,hash,hash,3552,e64c1714 \; --hash=sha256:45485e01ff4d3630ec0d9617310448a8702f70e9c01906b0d0118bdf9d124cf2 \; --hash=sha256:4a78b2b446bd7c934f5dcedc588903fb2f5eec172f3d29e52a9096a43722adfc \; --hash=sha256:4ab2fe47fae9e0f9dee8c04187ce5d09f48eabe611be8259444906793ab7cbce \; --hash=sha256:4d0d1650369165a14e14e1e47b372cfcb31d6ab44e6e33cb2d4e57265290044d \; --hash=sha256:549a3a73da901d5bc3ce8d24e0600d1fa85524c10287f6004fbab87672bf3e1e \; --hash=sha256:55086ee1064215781fff39a1af09518bc9255b50d6333f2e4c74ca09fac6a8f6 \; --hash=sha256:572c3763a264ba47b3cf708a44ce965d98555f618ca42c926a9c1616d8f34269 \; --hash=sha256:573f6eac48f4769d667c4442081b1794f52919e7edada77495aaed9236d13a96 \; --hash=sha256:5b4c145409bef602a690e7cfad0a15a55c13320ff7a3ad7ca59c13bb8ba4d45d \; --hash=sha256:6463effa3186ea09411d50efc7d85360b38d5f09b870c48e4600f63af490e56a \; --hash=sha256:65f6f63034100ead094b8744b3b97965785388f308a64cf8d7c34f2f2e5be0c4 \; --hash=sha256:663946639d296df6a2bb2aa51b60a2454ca1cb29835324c640dafb5ff2131a77 \; --hash=sha256:6897af51655e3691ff853668779c7bad41579facacf5fd7253b0133308cf000d \; --hash=sha256:68d1f8a9e9e37c1223b656399be5d6b448dea850bed7d0f87a8311f1ff3dabb0 \; --hash=sha256:6ac7ffc7ad6d040517be39eb591cac5ff87416c2537df6ba3cba3bae290c0fed \; --hash=sha256:6b3251890fff30ee142c44144871185dbe13b11bab478a88887a639655be1068 \; --hash=sha256:6c4caeef8fa63d06bd437cd4bdcf3ffefe6738fb1b25951440d80dc7df8c03ac \; --hash=sha256:6ef1d82a3af9d3eecdba2321dc1b3c238245d890843e040e41e470ffa64c3e25 \; --hash=sha256:753f10e867343b4511128c6ed8c82f7bec3bd026875576dfd88483c5c73b2fd8 \; --hash=sha256:7cd13a2e3ddeed6913a65e66e94b51d80a041145a026c27e6bb76c31a853c6ab \; --hash=sha256:7ed9e526742851e8d5cc9e6cf41427dfc6068d4f5a3bb03659444b4cabf6bc26 \; --hash=sha256:7f04c839ed0b6b98b1a7501a002144b76c18fb1c1850c8b98d458ac269e26ed2 \; --hash=sha256:802fe99cca7457642125a8a88a084cef28ff0cf9407060f7b93dca5aa25480db \; --hash=sha256:80402cd6ee291dcb72644d6eac93785fe2c8b9cb30893c1af5b8fdd753b9d40f \; --hash=sha256:8465322,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:3634,Security,hash,hash,3634,9d124cf2 \; --hash=sha256:4a78b2b446bd7c934f5dcedc588903fb2f5eec172f3d29e52a9096a43722adfc \; --hash=sha256:4ab2fe47fae9e0f9dee8c04187ce5d09f48eabe611be8259444906793ab7cbce \; --hash=sha256:4d0d1650369165a14e14e1e47b372cfcb31d6ab44e6e33cb2d4e57265290044d \; --hash=sha256:549a3a73da901d5bc3ce8d24e0600d1fa85524c10287f6004fbab87672bf3e1e \; --hash=sha256:55086ee1064215781fff39a1af09518bc9255b50d6333f2e4c74ca09fac6a8f6 \; --hash=sha256:572c3763a264ba47b3cf708a44ce965d98555f618ca42c926a9c1616d8f34269 \; --hash=sha256:573f6eac48f4769d667c4442081b1794f52919e7edada77495aaed9236d13a96 \; --hash=sha256:5b4c145409bef602a690e7cfad0a15a55c13320ff7a3ad7ca59c13bb8ba4d45d \; --hash=sha256:6463effa3186ea09411d50efc7d85360b38d5f09b870c48e4600f63af490e56a \; --hash=sha256:65f6f63034100ead094b8744b3b97965785388f308a64cf8d7c34f2f2e5be0c4 \; --hash=sha256:663946639d296df6a2bb2aa51b60a2454ca1cb29835324c640dafb5ff2131a77 \; --hash=sha256:6897af51655e3691ff853668779c7bad41579facacf5fd7253b0133308cf000d \; --hash=sha256:68d1f8a9e9e37c1223b656399be5d6b448dea850bed7d0f87a8311f1ff3dabb0 \; --hash=sha256:6ac7ffc7ad6d040517be39eb591cac5ff87416c2537df6ba3cba3bae290c0fed \; --hash=sha256:6b3251890fff30ee142c44144871185dbe13b11bab478a88887a639655be1068 \; --hash=sha256:6c4caeef8fa63d06bd437cd4bdcf3ffefe6738fb1b25951440d80dc7df8c03ac \; --hash=sha256:6ef1d82a3af9d3eecdba2321dc1b3c238245d890843e040e41e470ffa64c3e25 \; --hash=sha256:753f10e867343b4511128c6ed8c82f7bec3bd026875576dfd88483c5c73b2fd8 \; --hash=sha256:7cd13a2e3ddeed6913a65e66e94b51d80a041145a026c27e6bb76c31a853c6ab \; --hash=sha256:7ed9e526742851e8d5cc9e6cf41427dfc6068d4f5a3bb03659444b4cabf6bc26 \; --hash=sha256:7f04c839ed0b6b98b1a7501a002144b76c18fb1c1850c8b98d458ac269e26ed2 \; --hash=sha256:802fe99cca7457642125a8a88a084cef28ff0cf9407060f7b93dca5aa25480db \; --hash=sha256:80402cd6ee291dcb72644d6eac93785fe2c8b9cb30893c1af5b8fdd753b9d40f \; --hash=sha256:8465322196c8b4d7ab6d1e049e4c5cb460d0394da4a27d23cc242fbf0034b6b5 \; --hash=sha256:86216b5,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:3716,Security,hash,hash,3716,3722adfc \; --hash=sha256:4ab2fe47fae9e0f9dee8c04187ce5d09f48eabe611be8259444906793ab7cbce \; --hash=sha256:4d0d1650369165a14e14e1e47b372cfcb31d6ab44e6e33cb2d4e57265290044d \; --hash=sha256:549a3a73da901d5bc3ce8d24e0600d1fa85524c10287f6004fbab87672bf3e1e \; --hash=sha256:55086ee1064215781fff39a1af09518bc9255b50d6333f2e4c74ca09fac6a8f6 \; --hash=sha256:572c3763a264ba47b3cf708a44ce965d98555f618ca42c926a9c1616d8f34269 \; --hash=sha256:573f6eac48f4769d667c4442081b1794f52919e7edada77495aaed9236d13a96 \; --hash=sha256:5b4c145409bef602a690e7cfad0a15a55c13320ff7a3ad7ca59c13bb8ba4d45d \; --hash=sha256:6463effa3186ea09411d50efc7d85360b38d5f09b870c48e4600f63af490e56a \; --hash=sha256:65f6f63034100ead094b8744b3b97965785388f308a64cf8d7c34f2f2e5be0c4 \; --hash=sha256:663946639d296df6a2bb2aa51b60a2454ca1cb29835324c640dafb5ff2131a77 \; --hash=sha256:6897af51655e3691ff853668779c7bad41579facacf5fd7253b0133308cf000d \; --hash=sha256:68d1f8a9e9e37c1223b656399be5d6b448dea850bed7d0f87a8311f1ff3dabb0 \; --hash=sha256:6ac7ffc7ad6d040517be39eb591cac5ff87416c2537df6ba3cba3bae290c0fed \; --hash=sha256:6b3251890fff30ee142c44144871185dbe13b11bab478a88887a639655be1068 \; --hash=sha256:6c4caeef8fa63d06bd437cd4bdcf3ffefe6738fb1b25951440d80dc7df8c03ac \; --hash=sha256:6ef1d82a3af9d3eecdba2321dc1b3c238245d890843e040e41e470ffa64c3e25 \; --hash=sha256:753f10e867343b4511128c6ed8c82f7bec3bd026875576dfd88483c5c73b2fd8 \; --hash=sha256:7cd13a2e3ddeed6913a65e66e94b51d80a041145a026c27e6bb76c31a853c6ab \; --hash=sha256:7ed9e526742851e8d5cc9e6cf41427dfc6068d4f5a3bb03659444b4cabf6bc26 \; --hash=sha256:7f04c839ed0b6b98b1a7501a002144b76c18fb1c1850c8b98d458ac269e26ed2 \; --hash=sha256:802fe99cca7457642125a8a88a084cef28ff0cf9407060f7b93dca5aa25480db \; --hash=sha256:80402cd6ee291dcb72644d6eac93785fe2c8b9cb30893c1af5b8fdd753b9d40f \; --hash=sha256:8465322196c8b4d7ab6d1e049e4c5cb460d0394da4a27d23cc242fbf0034b6b5 \; --hash=sha256:86216b5cee4b06df986d214f664305142d9c76df9b6512be2738aa72a2048f99 \; --hash=sha256:87d1351,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:3798,Security,hash,hash,3798,3ab7cbce \; --hash=sha256:4d0d1650369165a14e14e1e47b372cfcb31d6ab44e6e33cb2d4e57265290044d \; --hash=sha256:549a3a73da901d5bc3ce8d24e0600d1fa85524c10287f6004fbab87672bf3e1e \; --hash=sha256:55086ee1064215781fff39a1af09518bc9255b50d6333f2e4c74ca09fac6a8f6 \; --hash=sha256:572c3763a264ba47b3cf708a44ce965d98555f618ca42c926a9c1616d8f34269 \; --hash=sha256:573f6eac48f4769d667c4442081b1794f52919e7edada77495aaed9236d13a96 \; --hash=sha256:5b4c145409bef602a690e7cfad0a15a55c13320ff7a3ad7ca59c13bb8ba4d45d \; --hash=sha256:6463effa3186ea09411d50efc7d85360b38d5f09b870c48e4600f63af490e56a \; --hash=sha256:65f6f63034100ead094b8744b3b97965785388f308a64cf8d7c34f2f2e5be0c4 \; --hash=sha256:663946639d296df6a2bb2aa51b60a2454ca1cb29835324c640dafb5ff2131a77 \; --hash=sha256:6897af51655e3691ff853668779c7bad41579facacf5fd7253b0133308cf000d \; --hash=sha256:68d1f8a9e9e37c1223b656399be5d6b448dea850bed7d0f87a8311f1ff3dabb0 \; --hash=sha256:6ac7ffc7ad6d040517be39eb591cac5ff87416c2537df6ba3cba3bae290c0fed \; --hash=sha256:6b3251890fff30ee142c44144871185dbe13b11bab478a88887a639655be1068 \; --hash=sha256:6c4caeef8fa63d06bd437cd4bdcf3ffefe6738fb1b25951440d80dc7df8c03ac \; --hash=sha256:6ef1d82a3af9d3eecdba2321dc1b3c238245d890843e040e41e470ffa64c3e25 \; --hash=sha256:753f10e867343b4511128c6ed8c82f7bec3bd026875576dfd88483c5c73b2fd8 \; --hash=sha256:7cd13a2e3ddeed6913a65e66e94b51d80a041145a026c27e6bb76c31a853c6ab \; --hash=sha256:7ed9e526742851e8d5cc9e6cf41427dfc6068d4f5a3bb03659444b4cabf6bc26 \; --hash=sha256:7f04c839ed0b6b98b1a7501a002144b76c18fb1c1850c8b98d458ac269e26ed2 \; --hash=sha256:802fe99cca7457642125a8a88a084cef28ff0cf9407060f7b93dca5aa25480db \; --hash=sha256:80402cd6ee291dcb72644d6eac93785fe2c8b9cb30893c1af5b8fdd753b9d40f \; --hash=sha256:8465322196c8b4d7ab6d1e049e4c5cb460d0394da4a27d23cc242fbf0034b6b5 \; --hash=sha256:86216b5cee4b06df986d214f664305142d9c76df9b6512be2738aa72a2048f99 \; --hash=sha256:87d1351268731db79e0f8e745d92493ee2841c974128ef629dc518b937d9194c \; --hash=sha256:8bdb58f,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:3880,Security,hash,hash,3880,5290044d \; --hash=sha256:549a3a73da901d5bc3ce8d24e0600d1fa85524c10287f6004fbab87672bf3e1e \; --hash=sha256:55086ee1064215781fff39a1af09518bc9255b50d6333f2e4c74ca09fac6a8f6 \; --hash=sha256:572c3763a264ba47b3cf708a44ce965d98555f618ca42c926a9c1616d8f34269 \; --hash=sha256:573f6eac48f4769d667c4442081b1794f52919e7edada77495aaed9236d13a96 \; --hash=sha256:5b4c145409bef602a690e7cfad0a15a55c13320ff7a3ad7ca59c13bb8ba4d45d \; --hash=sha256:6463effa3186ea09411d50efc7d85360b38d5f09b870c48e4600f63af490e56a \; --hash=sha256:65f6f63034100ead094b8744b3b97965785388f308a64cf8d7c34f2f2e5be0c4 \; --hash=sha256:663946639d296df6a2bb2aa51b60a2454ca1cb29835324c640dafb5ff2131a77 \; --hash=sha256:6897af51655e3691ff853668779c7bad41579facacf5fd7253b0133308cf000d \; --hash=sha256:68d1f8a9e9e37c1223b656399be5d6b448dea850bed7d0f87a8311f1ff3dabb0 \; --hash=sha256:6ac7ffc7ad6d040517be39eb591cac5ff87416c2537df6ba3cba3bae290c0fed \; --hash=sha256:6b3251890fff30ee142c44144871185dbe13b11bab478a88887a639655be1068 \; --hash=sha256:6c4caeef8fa63d06bd437cd4bdcf3ffefe6738fb1b25951440d80dc7df8c03ac \; --hash=sha256:6ef1d82a3af9d3eecdba2321dc1b3c238245d890843e040e41e470ffa64c3e25 \; --hash=sha256:753f10e867343b4511128c6ed8c82f7bec3bd026875576dfd88483c5c73b2fd8 \; --hash=sha256:7cd13a2e3ddeed6913a65e66e94b51d80a041145a026c27e6bb76c31a853c6ab \; --hash=sha256:7ed9e526742851e8d5cc9e6cf41427dfc6068d4f5a3bb03659444b4cabf6bc26 \; --hash=sha256:7f04c839ed0b6b98b1a7501a002144b76c18fb1c1850c8b98d458ac269e26ed2 \; --hash=sha256:802fe99cca7457642125a8a88a084cef28ff0cf9407060f7b93dca5aa25480db \; --hash=sha256:80402cd6ee291dcb72644d6eac93785fe2c8b9cb30893c1af5b8fdd753b9d40f \; --hash=sha256:8465322196c8b4d7ab6d1e049e4c5cb460d0394da4a27d23cc242fbf0034b6b5 \; --hash=sha256:86216b5cee4b06df986d214f664305142d9c76df9b6512be2738aa72a2048f99 \; --hash=sha256:87d1351268731db79e0f8e745d92493ee2841c974128ef629dc518b937d9194c \; --hash=sha256:8bdb58ff7ba23002a4c5808d608e4e6c687175724f54a5dade5fa8c67b604e4d \; --hash=sha256:8c622a5,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:3962,Security,hash,hash,3962,72bf3e1e \; --hash=sha256:55086ee1064215781fff39a1af09518bc9255b50d6333f2e4c74ca09fac6a8f6 \; --hash=sha256:572c3763a264ba47b3cf708a44ce965d98555f618ca42c926a9c1616d8f34269 \; --hash=sha256:573f6eac48f4769d667c4442081b1794f52919e7edada77495aaed9236d13a96 \; --hash=sha256:5b4c145409bef602a690e7cfad0a15a55c13320ff7a3ad7ca59c13bb8ba4d45d \; --hash=sha256:6463effa3186ea09411d50efc7d85360b38d5f09b870c48e4600f63af490e56a \; --hash=sha256:65f6f63034100ead094b8744b3b97965785388f308a64cf8d7c34f2f2e5be0c4 \; --hash=sha256:663946639d296df6a2bb2aa51b60a2454ca1cb29835324c640dafb5ff2131a77 \; --hash=sha256:6897af51655e3691ff853668779c7bad41579facacf5fd7253b0133308cf000d \; --hash=sha256:68d1f8a9e9e37c1223b656399be5d6b448dea850bed7d0f87a8311f1ff3dabb0 \; --hash=sha256:6ac7ffc7ad6d040517be39eb591cac5ff87416c2537df6ba3cba3bae290c0fed \; --hash=sha256:6b3251890fff30ee142c44144871185dbe13b11bab478a88887a639655be1068 \; --hash=sha256:6c4caeef8fa63d06bd437cd4bdcf3ffefe6738fb1b25951440d80dc7df8c03ac \; --hash=sha256:6ef1d82a3af9d3eecdba2321dc1b3c238245d890843e040e41e470ffa64c3e25 \; --hash=sha256:753f10e867343b4511128c6ed8c82f7bec3bd026875576dfd88483c5c73b2fd8 \; --hash=sha256:7cd13a2e3ddeed6913a65e66e94b51d80a041145a026c27e6bb76c31a853c6ab \; --hash=sha256:7ed9e526742851e8d5cc9e6cf41427dfc6068d4f5a3bb03659444b4cabf6bc26 \; --hash=sha256:7f04c839ed0b6b98b1a7501a002144b76c18fb1c1850c8b98d458ac269e26ed2 \; --hash=sha256:802fe99cca7457642125a8a88a084cef28ff0cf9407060f7b93dca5aa25480db \; --hash=sha256:80402cd6ee291dcb72644d6eac93785fe2c8b9cb30893c1af5b8fdd753b9d40f \; --hash=sha256:8465322196c8b4d7ab6d1e049e4c5cb460d0394da4a27d23cc242fbf0034b6b5 \; --hash=sha256:86216b5cee4b06df986d214f664305142d9c76df9b6512be2738aa72a2048f99 \; --hash=sha256:87d1351268731db79e0f8e745d92493ee2841c974128ef629dc518b937d9194c \; --hash=sha256:8bdb58ff7ba23002a4c5808d608e4e6c687175724f54a5dade5fa8c67b604e4d \; --hash=sha256:8c622a5fe39a48f78944a87d4fb8a53ee07344641b0562c540d840748571b811 \; --hash=sha256:8d756e4,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:4044,Security,hash,hash,4044,fac6a8f6 \; --hash=sha256:572c3763a264ba47b3cf708a44ce965d98555f618ca42c926a9c1616d8f34269 \; --hash=sha256:573f6eac48f4769d667c4442081b1794f52919e7edada77495aaed9236d13a96 \; --hash=sha256:5b4c145409bef602a690e7cfad0a15a55c13320ff7a3ad7ca59c13bb8ba4d45d \; --hash=sha256:6463effa3186ea09411d50efc7d85360b38d5f09b870c48e4600f63af490e56a \; --hash=sha256:65f6f63034100ead094b8744b3b97965785388f308a64cf8d7c34f2f2e5be0c4 \; --hash=sha256:663946639d296df6a2bb2aa51b60a2454ca1cb29835324c640dafb5ff2131a77 \; --hash=sha256:6897af51655e3691ff853668779c7bad41579facacf5fd7253b0133308cf000d \; --hash=sha256:68d1f8a9e9e37c1223b656399be5d6b448dea850bed7d0f87a8311f1ff3dabb0 \; --hash=sha256:6ac7ffc7ad6d040517be39eb591cac5ff87416c2537df6ba3cba3bae290c0fed \; --hash=sha256:6b3251890fff30ee142c44144871185dbe13b11bab478a88887a639655be1068 \; --hash=sha256:6c4caeef8fa63d06bd437cd4bdcf3ffefe6738fb1b25951440d80dc7df8c03ac \; --hash=sha256:6ef1d82a3af9d3eecdba2321dc1b3c238245d890843e040e41e470ffa64c3e25 \; --hash=sha256:753f10e867343b4511128c6ed8c82f7bec3bd026875576dfd88483c5c73b2fd8 \; --hash=sha256:7cd13a2e3ddeed6913a65e66e94b51d80a041145a026c27e6bb76c31a853c6ab \; --hash=sha256:7ed9e526742851e8d5cc9e6cf41427dfc6068d4f5a3bb03659444b4cabf6bc26 \; --hash=sha256:7f04c839ed0b6b98b1a7501a002144b76c18fb1c1850c8b98d458ac269e26ed2 \; --hash=sha256:802fe99cca7457642125a8a88a084cef28ff0cf9407060f7b93dca5aa25480db \; --hash=sha256:80402cd6ee291dcb72644d6eac93785fe2c8b9cb30893c1af5b8fdd753b9d40f \; --hash=sha256:8465322196c8b4d7ab6d1e049e4c5cb460d0394da4a27d23cc242fbf0034b6b5 \; --hash=sha256:86216b5cee4b06df986d214f664305142d9c76df9b6512be2738aa72a2048f99 \; --hash=sha256:87d1351268731db79e0f8e745d92493ee2841c974128ef629dc518b937d9194c \; --hash=sha256:8bdb58ff7ba23002a4c5808d608e4e6c687175724f54a5dade5fa8c67b604e4d \; --hash=sha256:8c622a5fe39a48f78944a87d4fb8a53ee07344641b0562c540d840748571b811 \; --hash=sha256:8d756e44e94489e49571086ef83b2bb8ce311e730092d2c34ca8f7d925cb20aa \; --hash=sha256:8f4a014,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:4126,Security,hash,hash,4126,d8f34269 \; --hash=sha256:573f6eac48f4769d667c4442081b1794f52919e7edada77495aaed9236d13a96 \; --hash=sha256:5b4c145409bef602a690e7cfad0a15a55c13320ff7a3ad7ca59c13bb8ba4d45d \; --hash=sha256:6463effa3186ea09411d50efc7d85360b38d5f09b870c48e4600f63af490e56a \; --hash=sha256:65f6f63034100ead094b8744b3b97965785388f308a64cf8d7c34f2f2e5be0c4 \; --hash=sha256:663946639d296df6a2bb2aa51b60a2454ca1cb29835324c640dafb5ff2131a77 \; --hash=sha256:6897af51655e3691ff853668779c7bad41579facacf5fd7253b0133308cf000d \; --hash=sha256:68d1f8a9e9e37c1223b656399be5d6b448dea850bed7d0f87a8311f1ff3dabb0 \; --hash=sha256:6ac7ffc7ad6d040517be39eb591cac5ff87416c2537df6ba3cba3bae290c0fed \; --hash=sha256:6b3251890fff30ee142c44144871185dbe13b11bab478a88887a639655be1068 \; --hash=sha256:6c4caeef8fa63d06bd437cd4bdcf3ffefe6738fb1b25951440d80dc7df8c03ac \; --hash=sha256:6ef1d82a3af9d3eecdba2321dc1b3c238245d890843e040e41e470ffa64c3e25 \; --hash=sha256:753f10e867343b4511128c6ed8c82f7bec3bd026875576dfd88483c5c73b2fd8 \; --hash=sha256:7cd13a2e3ddeed6913a65e66e94b51d80a041145a026c27e6bb76c31a853c6ab \; --hash=sha256:7ed9e526742851e8d5cc9e6cf41427dfc6068d4f5a3bb03659444b4cabf6bc26 \; --hash=sha256:7f04c839ed0b6b98b1a7501a002144b76c18fb1c1850c8b98d458ac269e26ed2 \; --hash=sha256:802fe99cca7457642125a8a88a084cef28ff0cf9407060f7b93dca5aa25480db \; --hash=sha256:80402cd6ee291dcb72644d6eac93785fe2c8b9cb30893c1af5b8fdd753b9d40f \; --hash=sha256:8465322196c8b4d7ab6d1e049e4c5cb460d0394da4a27d23cc242fbf0034b6b5 \; --hash=sha256:86216b5cee4b06df986d214f664305142d9c76df9b6512be2738aa72a2048f99 \; --hash=sha256:87d1351268731db79e0f8e745d92493ee2841c974128ef629dc518b937d9194c \; --hash=sha256:8bdb58ff7ba23002a4c5808d608e4e6c687175724f54a5dade5fa8c67b604e4d \; --hash=sha256:8c622a5fe39a48f78944a87d4fb8a53ee07344641b0562c540d840748571b811 \; --hash=sha256:8d756e44e94489e49571086ef83b2bb8ce311e730092d2c34ca8f7d925cb20aa \; --hash=sha256:8f4a014bc36d3c57402e2977dada34f9c12300af536839dc38c0beab8878f38a \; --hash=sha256:9063e24,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:4208,Security,hash,hash,4208,36d13a96 \; --hash=sha256:5b4c145409bef602a690e7cfad0a15a55c13320ff7a3ad7ca59c13bb8ba4d45d \; --hash=sha256:6463effa3186ea09411d50efc7d85360b38d5f09b870c48e4600f63af490e56a \; --hash=sha256:65f6f63034100ead094b8744b3b97965785388f308a64cf8d7c34f2f2e5be0c4 \; --hash=sha256:663946639d296df6a2bb2aa51b60a2454ca1cb29835324c640dafb5ff2131a77 \; --hash=sha256:6897af51655e3691ff853668779c7bad41579facacf5fd7253b0133308cf000d \; --hash=sha256:68d1f8a9e9e37c1223b656399be5d6b448dea850bed7d0f87a8311f1ff3dabb0 \; --hash=sha256:6ac7ffc7ad6d040517be39eb591cac5ff87416c2537df6ba3cba3bae290c0fed \; --hash=sha256:6b3251890fff30ee142c44144871185dbe13b11bab478a88887a639655be1068 \; --hash=sha256:6c4caeef8fa63d06bd437cd4bdcf3ffefe6738fb1b25951440d80dc7df8c03ac \; --hash=sha256:6ef1d82a3af9d3eecdba2321dc1b3c238245d890843e040e41e470ffa64c3e25 \; --hash=sha256:753f10e867343b4511128c6ed8c82f7bec3bd026875576dfd88483c5c73b2fd8 \; --hash=sha256:7cd13a2e3ddeed6913a65e66e94b51d80a041145a026c27e6bb76c31a853c6ab \; --hash=sha256:7ed9e526742851e8d5cc9e6cf41427dfc6068d4f5a3bb03659444b4cabf6bc26 \; --hash=sha256:7f04c839ed0b6b98b1a7501a002144b76c18fb1c1850c8b98d458ac269e26ed2 \; --hash=sha256:802fe99cca7457642125a8a88a084cef28ff0cf9407060f7b93dca5aa25480db \; --hash=sha256:80402cd6ee291dcb72644d6eac93785fe2c8b9cb30893c1af5b8fdd753b9d40f \; --hash=sha256:8465322196c8b4d7ab6d1e049e4c5cb460d0394da4a27d23cc242fbf0034b6b5 \; --hash=sha256:86216b5cee4b06df986d214f664305142d9c76df9b6512be2738aa72a2048f99 \; --hash=sha256:87d1351268731db79e0f8e745d92493ee2841c974128ef629dc518b937d9194c \; --hash=sha256:8bdb58ff7ba23002a4c5808d608e4e6c687175724f54a5dade5fa8c67b604e4d \; --hash=sha256:8c622a5fe39a48f78944a87d4fb8a53ee07344641b0562c540d840748571b811 \; --hash=sha256:8d756e44e94489e49571086ef83b2bb8ce311e730092d2c34ca8f7d925cb20aa \; --hash=sha256:8f4a014bc36d3c57402e2977dada34f9c12300af536839dc38c0beab8878f38a \; --hash=sha256:9063e24fdb1e498ab71cb7419e24622516c4a04476b17a2dab57e8baa30d6e03 \; --hash=sha256:90d5584,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:4290,Security,hash,hash,4290,8ba4d45d \; --hash=sha256:6463effa3186ea09411d50efc7d85360b38d5f09b870c48e4600f63af490e56a \; --hash=sha256:65f6f63034100ead094b8744b3b97965785388f308a64cf8d7c34f2f2e5be0c4 \; --hash=sha256:663946639d296df6a2bb2aa51b60a2454ca1cb29835324c640dafb5ff2131a77 \; --hash=sha256:6897af51655e3691ff853668779c7bad41579facacf5fd7253b0133308cf000d \; --hash=sha256:68d1f8a9e9e37c1223b656399be5d6b448dea850bed7d0f87a8311f1ff3dabb0 \; --hash=sha256:6ac7ffc7ad6d040517be39eb591cac5ff87416c2537df6ba3cba3bae290c0fed \; --hash=sha256:6b3251890fff30ee142c44144871185dbe13b11bab478a88887a639655be1068 \; --hash=sha256:6c4caeef8fa63d06bd437cd4bdcf3ffefe6738fb1b25951440d80dc7df8c03ac \; --hash=sha256:6ef1d82a3af9d3eecdba2321dc1b3c238245d890843e040e41e470ffa64c3e25 \; --hash=sha256:753f10e867343b4511128c6ed8c82f7bec3bd026875576dfd88483c5c73b2fd8 \; --hash=sha256:7cd13a2e3ddeed6913a65e66e94b51d80a041145a026c27e6bb76c31a853c6ab \; --hash=sha256:7ed9e526742851e8d5cc9e6cf41427dfc6068d4f5a3bb03659444b4cabf6bc26 \; --hash=sha256:7f04c839ed0b6b98b1a7501a002144b76c18fb1c1850c8b98d458ac269e26ed2 \; --hash=sha256:802fe99cca7457642125a8a88a084cef28ff0cf9407060f7b93dca5aa25480db \; --hash=sha256:80402cd6ee291dcb72644d6eac93785fe2c8b9cb30893c1af5b8fdd753b9d40f \; --hash=sha256:8465322196c8b4d7ab6d1e049e4c5cb460d0394da4a27d23cc242fbf0034b6b5 \; --hash=sha256:86216b5cee4b06df986d214f664305142d9c76df9b6512be2738aa72a2048f99 \; --hash=sha256:87d1351268731db79e0f8e745d92493ee2841c974128ef629dc518b937d9194c \; --hash=sha256:8bdb58ff7ba23002a4c5808d608e4e6c687175724f54a5dade5fa8c67b604e4d \; --hash=sha256:8c622a5fe39a48f78944a87d4fb8a53ee07344641b0562c540d840748571b811 \; --hash=sha256:8d756e44e94489e49571086ef83b2bb8ce311e730092d2c34ca8f7d925cb20aa \; --hash=sha256:8f4a014bc36d3c57402e2977dada34f9c12300af536839dc38c0beab8878f38a \; --hash=sha256:9063e24fdb1e498ab71cb7419e24622516c4a04476b17a2dab57e8baa30d6e03 \; --hash=sha256:90d558489962fd4918143277a773316e56c72da56ec7aa3dc3dbbe20fdfed15b \; --hash=sha256:923c0c8,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:4372,Security,hash,hash,4372,f490e56a \; --hash=sha256:65f6f63034100ead094b8744b3b97965785388f308a64cf8d7c34f2f2e5be0c4 \; --hash=sha256:663946639d296df6a2bb2aa51b60a2454ca1cb29835324c640dafb5ff2131a77 \; --hash=sha256:6897af51655e3691ff853668779c7bad41579facacf5fd7253b0133308cf000d \; --hash=sha256:68d1f8a9e9e37c1223b656399be5d6b448dea850bed7d0f87a8311f1ff3dabb0 \; --hash=sha256:6ac7ffc7ad6d040517be39eb591cac5ff87416c2537df6ba3cba3bae290c0fed \; --hash=sha256:6b3251890fff30ee142c44144871185dbe13b11bab478a88887a639655be1068 \; --hash=sha256:6c4caeef8fa63d06bd437cd4bdcf3ffefe6738fb1b25951440d80dc7df8c03ac \; --hash=sha256:6ef1d82a3af9d3eecdba2321dc1b3c238245d890843e040e41e470ffa64c3e25 \; --hash=sha256:753f10e867343b4511128c6ed8c82f7bec3bd026875576dfd88483c5c73b2fd8 \; --hash=sha256:7cd13a2e3ddeed6913a65e66e94b51d80a041145a026c27e6bb76c31a853c6ab \; --hash=sha256:7ed9e526742851e8d5cc9e6cf41427dfc6068d4f5a3bb03659444b4cabf6bc26 \; --hash=sha256:7f04c839ed0b6b98b1a7501a002144b76c18fb1c1850c8b98d458ac269e26ed2 \; --hash=sha256:802fe99cca7457642125a8a88a084cef28ff0cf9407060f7b93dca5aa25480db \; --hash=sha256:80402cd6ee291dcb72644d6eac93785fe2c8b9cb30893c1af5b8fdd753b9d40f \; --hash=sha256:8465322196c8b4d7ab6d1e049e4c5cb460d0394da4a27d23cc242fbf0034b6b5 \; --hash=sha256:86216b5cee4b06df986d214f664305142d9c76df9b6512be2738aa72a2048f99 \; --hash=sha256:87d1351268731db79e0f8e745d92493ee2841c974128ef629dc518b937d9194c \; --hash=sha256:8bdb58ff7ba23002a4c5808d608e4e6c687175724f54a5dade5fa8c67b604e4d \; --hash=sha256:8c622a5fe39a48f78944a87d4fb8a53ee07344641b0562c540d840748571b811 \; --hash=sha256:8d756e44e94489e49571086ef83b2bb8ce311e730092d2c34ca8f7d925cb20aa \; --hash=sha256:8f4a014bc36d3c57402e2977dada34f9c12300af536839dc38c0beab8878f38a \; --hash=sha256:9063e24fdb1e498ab71cb7419e24622516c4a04476b17a2dab57e8baa30d6e03 \; --hash=sha256:90d558489962fd4918143277a773316e56c72da56ec7aa3dc3dbbe20fdfed15b \; --hash=sha256:923c0c831b7cfcb071580d3f46c4baf50f174be571576556269530f4bbd79d04 \; --hash=sha256:95f2a57,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:4454,Security,hash,hash,4454,2e5be0c4 \; --hash=sha256:663946639d296df6a2bb2aa51b60a2454ca1cb29835324c640dafb5ff2131a77 \; --hash=sha256:6897af51655e3691ff853668779c7bad41579facacf5fd7253b0133308cf000d \; --hash=sha256:68d1f8a9e9e37c1223b656399be5d6b448dea850bed7d0f87a8311f1ff3dabb0 \; --hash=sha256:6ac7ffc7ad6d040517be39eb591cac5ff87416c2537df6ba3cba3bae290c0fed \; --hash=sha256:6b3251890fff30ee142c44144871185dbe13b11bab478a88887a639655be1068 \; --hash=sha256:6c4caeef8fa63d06bd437cd4bdcf3ffefe6738fb1b25951440d80dc7df8c03ac \; --hash=sha256:6ef1d82a3af9d3eecdba2321dc1b3c238245d890843e040e41e470ffa64c3e25 \; --hash=sha256:753f10e867343b4511128c6ed8c82f7bec3bd026875576dfd88483c5c73b2fd8 \; --hash=sha256:7cd13a2e3ddeed6913a65e66e94b51d80a041145a026c27e6bb76c31a853c6ab \; --hash=sha256:7ed9e526742851e8d5cc9e6cf41427dfc6068d4f5a3bb03659444b4cabf6bc26 \; --hash=sha256:7f04c839ed0b6b98b1a7501a002144b76c18fb1c1850c8b98d458ac269e26ed2 \; --hash=sha256:802fe99cca7457642125a8a88a084cef28ff0cf9407060f7b93dca5aa25480db \; --hash=sha256:80402cd6ee291dcb72644d6eac93785fe2c8b9cb30893c1af5b8fdd753b9d40f \; --hash=sha256:8465322196c8b4d7ab6d1e049e4c5cb460d0394da4a27d23cc242fbf0034b6b5 \; --hash=sha256:86216b5cee4b06df986d214f664305142d9c76df9b6512be2738aa72a2048f99 \; --hash=sha256:87d1351268731db79e0f8e745d92493ee2841c974128ef629dc518b937d9194c \; --hash=sha256:8bdb58ff7ba23002a4c5808d608e4e6c687175724f54a5dade5fa8c67b604e4d \; --hash=sha256:8c622a5fe39a48f78944a87d4fb8a53ee07344641b0562c540d840748571b811 \; --hash=sha256:8d756e44e94489e49571086ef83b2bb8ce311e730092d2c34ca8f7d925cb20aa \; --hash=sha256:8f4a014bc36d3c57402e2977dada34f9c12300af536839dc38c0beab8878f38a \; --hash=sha256:9063e24fdb1e498ab71cb7419e24622516c4a04476b17a2dab57e8baa30d6e03 \; --hash=sha256:90d558489962fd4918143277a773316e56c72da56ec7aa3dc3dbbe20fdfed15b \; --hash=sha256:923c0c831b7cfcb071580d3f46c4baf50f174be571576556269530f4bbd79d04 \; --hash=sha256:95f2a5796329323b8f0512e09dbb7a1860c46a39da62ecb2324f116fa8fdc85c \; --hash=sha256:96b02a3,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:4536,Security,hash,hash,4536,f2131a77 \; --hash=sha256:6897af51655e3691ff853668779c7bad41579facacf5fd7253b0133308cf000d \; --hash=sha256:68d1f8a9e9e37c1223b656399be5d6b448dea850bed7d0f87a8311f1ff3dabb0 \; --hash=sha256:6ac7ffc7ad6d040517be39eb591cac5ff87416c2537df6ba3cba3bae290c0fed \; --hash=sha256:6b3251890fff30ee142c44144871185dbe13b11bab478a88887a639655be1068 \; --hash=sha256:6c4caeef8fa63d06bd437cd4bdcf3ffefe6738fb1b25951440d80dc7df8c03ac \; --hash=sha256:6ef1d82a3af9d3eecdba2321dc1b3c238245d890843e040e41e470ffa64c3e25 \; --hash=sha256:753f10e867343b4511128c6ed8c82f7bec3bd026875576dfd88483c5c73b2fd8 \; --hash=sha256:7cd13a2e3ddeed6913a65e66e94b51d80a041145a026c27e6bb76c31a853c6ab \; --hash=sha256:7ed9e526742851e8d5cc9e6cf41427dfc6068d4f5a3bb03659444b4cabf6bc26 \; --hash=sha256:7f04c839ed0b6b98b1a7501a002144b76c18fb1c1850c8b98d458ac269e26ed2 \; --hash=sha256:802fe99cca7457642125a8a88a084cef28ff0cf9407060f7b93dca5aa25480db \; --hash=sha256:80402cd6ee291dcb72644d6eac93785fe2c8b9cb30893c1af5b8fdd753b9d40f \; --hash=sha256:8465322196c8b4d7ab6d1e049e4c5cb460d0394da4a27d23cc242fbf0034b6b5 \; --hash=sha256:86216b5cee4b06df986d214f664305142d9c76df9b6512be2738aa72a2048f99 \; --hash=sha256:87d1351268731db79e0f8e745d92493ee2841c974128ef629dc518b937d9194c \; --hash=sha256:8bdb58ff7ba23002a4c5808d608e4e6c687175724f54a5dade5fa8c67b604e4d \; --hash=sha256:8c622a5fe39a48f78944a87d4fb8a53ee07344641b0562c540d840748571b811 \; --hash=sha256:8d756e44e94489e49571086ef83b2bb8ce311e730092d2c34ca8f7d925cb20aa \; --hash=sha256:8f4a014bc36d3c57402e2977dada34f9c12300af536839dc38c0beab8878f38a \; --hash=sha256:9063e24fdb1e498ab71cb7419e24622516c4a04476b17a2dab57e8baa30d6e03 \; --hash=sha256:90d558489962fd4918143277a773316e56c72da56ec7aa3dc3dbbe20fdfed15b \; --hash=sha256:923c0c831b7cfcb071580d3f46c4baf50f174be571576556269530f4bbd79d04 \; --hash=sha256:95f2a5796329323b8f0512e09dbb7a1860c46a39da62ecb2324f116fa8fdc85c \; --hash=sha256:96b02a3dc4381e5494fad39be677abcb5e6634bf7b4fa83a6dd3112607547001 \; --hash=sha256:9f96df6,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:4618,Security,hash,hash,4618,08cf000d \; --hash=sha256:68d1f8a9e9e37c1223b656399be5d6b448dea850bed7d0f87a8311f1ff3dabb0 \; --hash=sha256:6ac7ffc7ad6d040517be39eb591cac5ff87416c2537df6ba3cba3bae290c0fed \; --hash=sha256:6b3251890fff30ee142c44144871185dbe13b11bab478a88887a639655be1068 \; --hash=sha256:6c4caeef8fa63d06bd437cd4bdcf3ffefe6738fb1b25951440d80dc7df8c03ac \; --hash=sha256:6ef1d82a3af9d3eecdba2321dc1b3c238245d890843e040e41e470ffa64c3e25 \; --hash=sha256:753f10e867343b4511128c6ed8c82f7bec3bd026875576dfd88483c5c73b2fd8 \; --hash=sha256:7cd13a2e3ddeed6913a65e66e94b51d80a041145a026c27e6bb76c31a853c6ab \; --hash=sha256:7ed9e526742851e8d5cc9e6cf41427dfc6068d4f5a3bb03659444b4cabf6bc26 \; --hash=sha256:7f04c839ed0b6b98b1a7501a002144b76c18fb1c1850c8b98d458ac269e26ed2 \; --hash=sha256:802fe99cca7457642125a8a88a084cef28ff0cf9407060f7b93dca5aa25480db \; --hash=sha256:80402cd6ee291dcb72644d6eac93785fe2c8b9cb30893c1af5b8fdd753b9d40f \; --hash=sha256:8465322196c8b4d7ab6d1e049e4c5cb460d0394da4a27d23cc242fbf0034b6b5 \; --hash=sha256:86216b5cee4b06df986d214f664305142d9c76df9b6512be2738aa72a2048f99 \; --hash=sha256:87d1351268731db79e0f8e745d92493ee2841c974128ef629dc518b937d9194c \; --hash=sha256:8bdb58ff7ba23002a4c5808d608e4e6c687175724f54a5dade5fa8c67b604e4d \; --hash=sha256:8c622a5fe39a48f78944a87d4fb8a53ee07344641b0562c540d840748571b811 \; --hash=sha256:8d756e44e94489e49571086ef83b2bb8ce311e730092d2c34ca8f7d925cb20aa \; --hash=sha256:8f4a014bc36d3c57402e2977dada34f9c12300af536839dc38c0beab8878f38a \; --hash=sha256:9063e24fdb1e498ab71cb7419e24622516c4a04476b17a2dab57e8baa30d6e03 \; --hash=sha256:90d558489962fd4918143277a773316e56c72da56ec7aa3dc3dbbe20fdfed15b \; --hash=sha256:923c0c831b7cfcb071580d3f46c4baf50f174be571576556269530f4bbd79d04 \; --hash=sha256:95f2a5796329323b8f0512e09dbb7a1860c46a39da62ecb2324f116fa8fdc85c \; --hash=sha256:96b02a3dc4381e5494fad39be677abcb5e6634bf7b4fa83a6dd3112607547001 \; --hash=sha256:9f96df6923e21816da7e0ad3fd47dd8f94b2a5ce594e00677c0013018b813458 \; --hash=sha256:a10af20,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:4700,Security,hash,hash,4700,ff3dabb0 \; --hash=sha256:6ac7ffc7ad6d040517be39eb591cac5ff87416c2537df6ba3cba3bae290c0fed \; --hash=sha256:6b3251890fff30ee142c44144871185dbe13b11bab478a88887a639655be1068 \; --hash=sha256:6c4caeef8fa63d06bd437cd4bdcf3ffefe6738fb1b25951440d80dc7df8c03ac \; --hash=sha256:6ef1d82a3af9d3eecdba2321dc1b3c238245d890843e040e41e470ffa64c3e25 \; --hash=sha256:753f10e867343b4511128c6ed8c82f7bec3bd026875576dfd88483c5c73b2fd8 \; --hash=sha256:7cd13a2e3ddeed6913a65e66e94b51d80a041145a026c27e6bb76c31a853c6ab \; --hash=sha256:7ed9e526742851e8d5cc9e6cf41427dfc6068d4f5a3bb03659444b4cabf6bc26 \; --hash=sha256:7f04c839ed0b6b98b1a7501a002144b76c18fb1c1850c8b98d458ac269e26ed2 \; --hash=sha256:802fe99cca7457642125a8a88a084cef28ff0cf9407060f7b93dca5aa25480db \; --hash=sha256:80402cd6ee291dcb72644d6eac93785fe2c8b9cb30893c1af5b8fdd753b9d40f \; --hash=sha256:8465322196c8b4d7ab6d1e049e4c5cb460d0394da4a27d23cc242fbf0034b6b5 \; --hash=sha256:86216b5cee4b06df986d214f664305142d9c76df9b6512be2738aa72a2048f99 \; --hash=sha256:87d1351268731db79e0f8e745d92493ee2841c974128ef629dc518b937d9194c \; --hash=sha256:8bdb58ff7ba23002a4c5808d608e4e6c687175724f54a5dade5fa8c67b604e4d \; --hash=sha256:8c622a5fe39a48f78944a87d4fb8a53ee07344641b0562c540d840748571b811 \; --hash=sha256:8d756e44e94489e49571086ef83b2bb8ce311e730092d2c34ca8f7d925cb20aa \; --hash=sha256:8f4a014bc36d3c57402e2977dada34f9c12300af536839dc38c0beab8878f38a \; --hash=sha256:9063e24fdb1e498ab71cb7419e24622516c4a04476b17a2dab57e8baa30d6e03 \; --hash=sha256:90d558489962fd4918143277a773316e56c72da56ec7aa3dc3dbbe20fdfed15b \; --hash=sha256:923c0c831b7cfcb071580d3f46c4baf50f174be571576556269530f4bbd79d04 \; --hash=sha256:95f2a5796329323b8f0512e09dbb7a1860c46a39da62ecb2324f116fa8fdc85c \; --hash=sha256:96b02a3dc4381e5494fad39be677abcb5e6634bf7b4fa83a6dd3112607547001 \; --hash=sha256:9f96df6923e21816da7e0ad3fd47dd8f94b2a5ce594e00677c0013018b813458 \; --hash=sha256:a10af20b82360ab00827f916a6058451b723b4e65030c5a18577c8b2de5b3389 \; --hash=sha256:a50aebf,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:4782,Security,hash,hash,4782,290c0fed \; --hash=sha256:6b3251890fff30ee142c44144871185dbe13b11bab478a88887a639655be1068 \; --hash=sha256:6c4caeef8fa63d06bd437cd4bdcf3ffefe6738fb1b25951440d80dc7df8c03ac \; --hash=sha256:6ef1d82a3af9d3eecdba2321dc1b3c238245d890843e040e41e470ffa64c3e25 \; --hash=sha256:753f10e867343b4511128c6ed8c82f7bec3bd026875576dfd88483c5c73b2fd8 \; --hash=sha256:7cd13a2e3ddeed6913a65e66e94b51d80a041145a026c27e6bb76c31a853c6ab \; --hash=sha256:7ed9e526742851e8d5cc9e6cf41427dfc6068d4f5a3bb03659444b4cabf6bc26 \; --hash=sha256:7f04c839ed0b6b98b1a7501a002144b76c18fb1c1850c8b98d458ac269e26ed2 \; --hash=sha256:802fe99cca7457642125a8a88a084cef28ff0cf9407060f7b93dca5aa25480db \; --hash=sha256:80402cd6ee291dcb72644d6eac93785fe2c8b9cb30893c1af5b8fdd753b9d40f \; --hash=sha256:8465322196c8b4d7ab6d1e049e4c5cb460d0394da4a27d23cc242fbf0034b6b5 \; --hash=sha256:86216b5cee4b06df986d214f664305142d9c76df9b6512be2738aa72a2048f99 \; --hash=sha256:87d1351268731db79e0f8e745d92493ee2841c974128ef629dc518b937d9194c \; --hash=sha256:8bdb58ff7ba23002a4c5808d608e4e6c687175724f54a5dade5fa8c67b604e4d \; --hash=sha256:8c622a5fe39a48f78944a87d4fb8a53ee07344641b0562c540d840748571b811 \; --hash=sha256:8d756e44e94489e49571086ef83b2bb8ce311e730092d2c34ca8f7d925cb20aa \; --hash=sha256:8f4a014bc36d3c57402e2977dada34f9c12300af536839dc38c0beab8878f38a \; --hash=sha256:9063e24fdb1e498ab71cb7419e24622516c4a04476b17a2dab57e8baa30d6e03 \; --hash=sha256:90d558489962fd4918143277a773316e56c72da56ec7aa3dc3dbbe20fdfed15b \; --hash=sha256:923c0c831b7cfcb071580d3f46c4baf50f174be571576556269530f4bbd79d04 \; --hash=sha256:95f2a5796329323b8f0512e09dbb7a1860c46a39da62ecb2324f116fa8fdc85c \; --hash=sha256:96b02a3dc4381e5494fad39be677abcb5e6634bf7b4fa83a6dd3112607547001 \; --hash=sha256:9f96df6923e21816da7e0ad3fd47dd8f94b2a5ce594e00677c0013018b813458 \; --hash=sha256:a10af20b82360ab00827f916a6058451b723b4e65030c5a18577c8b2de5b3389 \; --hash=sha256:a50aebfa173e157099939b17f18600f72f84eed3049e743b68ad15bd69b6bf99 \; --hash=sha256:a981a53,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:4864,Security,hash,hash,4864,55be1068 \; --hash=sha256:6c4caeef8fa63d06bd437cd4bdcf3ffefe6738fb1b25951440d80dc7df8c03ac \; --hash=sha256:6ef1d82a3af9d3eecdba2321dc1b3c238245d890843e040e41e470ffa64c3e25 \; --hash=sha256:753f10e867343b4511128c6ed8c82f7bec3bd026875576dfd88483c5c73b2fd8 \; --hash=sha256:7cd13a2e3ddeed6913a65e66e94b51d80a041145a026c27e6bb76c31a853c6ab \; --hash=sha256:7ed9e526742851e8d5cc9e6cf41427dfc6068d4f5a3bb03659444b4cabf6bc26 \; --hash=sha256:7f04c839ed0b6b98b1a7501a002144b76c18fb1c1850c8b98d458ac269e26ed2 \; --hash=sha256:802fe99cca7457642125a8a88a084cef28ff0cf9407060f7b93dca5aa25480db \; --hash=sha256:80402cd6ee291dcb72644d6eac93785fe2c8b9cb30893c1af5b8fdd753b9d40f \; --hash=sha256:8465322196c8b4d7ab6d1e049e4c5cb460d0394da4a27d23cc242fbf0034b6b5 \; --hash=sha256:86216b5cee4b06df986d214f664305142d9c76df9b6512be2738aa72a2048f99 \; --hash=sha256:87d1351268731db79e0f8e745d92493ee2841c974128ef629dc518b937d9194c \; --hash=sha256:8bdb58ff7ba23002a4c5808d608e4e6c687175724f54a5dade5fa8c67b604e4d \; --hash=sha256:8c622a5fe39a48f78944a87d4fb8a53ee07344641b0562c540d840748571b811 \; --hash=sha256:8d756e44e94489e49571086ef83b2bb8ce311e730092d2c34ca8f7d925cb20aa \; --hash=sha256:8f4a014bc36d3c57402e2977dada34f9c12300af536839dc38c0beab8878f38a \; --hash=sha256:9063e24fdb1e498ab71cb7419e24622516c4a04476b17a2dab57e8baa30d6e03 \; --hash=sha256:90d558489962fd4918143277a773316e56c72da56ec7aa3dc3dbbe20fdfed15b \; --hash=sha256:923c0c831b7cfcb071580d3f46c4baf50f174be571576556269530f4bbd79d04 \; --hash=sha256:95f2a5796329323b8f0512e09dbb7a1860c46a39da62ecb2324f116fa8fdc85c \; --hash=sha256:96b02a3dc4381e5494fad39be677abcb5e6634bf7b4fa83a6dd3112607547001 \; --hash=sha256:9f96df6923e21816da7e0ad3fd47dd8f94b2a5ce594e00677c0013018b813458 \; --hash=sha256:a10af20b82360ab00827f916a6058451b723b4e65030c5a18577c8b2de5b3389 \; --hash=sha256:a50aebfa173e157099939b17f18600f72f84eed3049e743b68ad15bd69b6bf99 \; --hash=sha256:a981a536974bbc7a512cf44ed14938cf01030a99e9b3a06dd59578882f06f985 \; --hash=sha256:a9a8e90,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:4946,Security,hash,hash,4946,df8c03ac \; --hash=sha256:6ef1d82a3af9d3eecdba2321dc1b3c238245d890843e040e41e470ffa64c3e25 \; --hash=sha256:753f10e867343b4511128c6ed8c82f7bec3bd026875576dfd88483c5c73b2fd8 \; --hash=sha256:7cd13a2e3ddeed6913a65e66e94b51d80a041145a026c27e6bb76c31a853c6ab \; --hash=sha256:7ed9e526742851e8d5cc9e6cf41427dfc6068d4f5a3bb03659444b4cabf6bc26 \; --hash=sha256:7f04c839ed0b6b98b1a7501a002144b76c18fb1c1850c8b98d458ac269e26ed2 \; --hash=sha256:802fe99cca7457642125a8a88a084cef28ff0cf9407060f7b93dca5aa25480db \; --hash=sha256:80402cd6ee291dcb72644d6eac93785fe2c8b9cb30893c1af5b8fdd753b9d40f \; --hash=sha256:8465322196c8b4d7ab6d1e049e4c5cb460d0394da4a27d23cc242fbf0034b6b5 \; --hash=sha256:86216b5cee4b06df986d214f664305142d9c76df9b6512be2738aa72a2048f99 \; --hash=sha256:87d1351268731db79e0f8e745d92493ee2841c974128ef629dc518b937d9194c \; --hash=sha256:8bdb58ff7ba23002a4c5808d608e4e6c687175724f54a5dade5fa8c67b604e4d \; --hash=sha256:8c622a5fe39a48f78944a87d4fb8a53ee07344641b0562c540d840748571b811 \; --hash=sha256:8d756e44e94489e49571086ef83b2bb8ce311e730092d2c34ca8f7d925cb20aa \; --hash=sha256:8f4a014bc36d3c57402e2977dada34f9c12300af536839dc38c0beab8878f38a \; --hash=sha256:9063e24fdb1e498ab71cb7419e24622516c4a04476b17a2dab57e8baa30d6e03 \; --hash=sha256:90d558489962fd4918143277a773316e56c72da56ec7aa3dc3dbbe20fdfed15b \; --hash=sha256:923c0c831b7cfcb071580d3f46c4baf50f174be571576556269530f4bbd79d04 \; --hash=sha256:95f2a5796329323b8f0512e09dbb7a1860c46a39da62ecb2324f116fa8fdc85c \; --hash=sha256:96b02a3dc4381e5494fad39be677abcb5e6634bf7b4fa83a6dd3112607547001 \; --hash=sha256:9f96df6923e21816da7e0ad3fd47dd8f94b2a5ce594e00677c0013018b813458 \; --hash=sha256:a10af20b82360ab00827f916a6058451b723b4e65030c5a18577c8b2de5b3389 \; --hash=sha256:a50aebfa173e157099939b17f18600f72f84eed3049e743b68ad15bd69b6bf99 \; --hash=sha256:a981a536974bbc7a512cf44ed14938cf01030a99e9b3a06dd59578882f06f985 \; --hash=sha256:a9a8e9031d613fd2009c182b69c7b2c1ef8239a0efb1df3f7c8da66d5dd3d537 \; --hash=sha256:ae5f416,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:5028,Security,hash,hash,5028,a64c3e25 \; --hash=sha256:753f10e867343b4511128c6ed8c82f7bec3bd026875576dfd88483c5c73b2fd8 \; --hash=sha256:7cd13a2e3ddeed6913a65e66e94b51d80a041145a026c27e6bb76c31a853c6ab \; --hash=sha256:7ed9e526742851e8d5cc9e6cf41427dfc6068d4f5a3bb03659444b4cabf6bc26 \; --hash=sha256:7f04c839ed0b6b98b1a7501a002144b76c18fb1c1850c8b98d458ac269e26ed2 \; --hash=sha256:802fe99cca7457642125a8a88a084cef28ff0cf9407060f7b93dca5aa25480db \; --hash=sha256:80402cd6ee291dcb72644d6eac93785fe2c8b9cb30893c1af5b8fdd753b9d40f \; --hash=sha256:8465322196c8b4d7ab6d1e049e4c5cb460d0394da4a27d23cc242fbf0034b6b5 \; --hash=sha256:86216b5cee4b06df986d214f664305142d9c76df9b6512be2738aa72a2048f99 \; --hash=sha256:87d1351268731db79e0f8e745d92493ee2841c974128ef629dc518b937d9194c \; --hash=sha256:8bdb58ff7ba23002a4c5808d608e4e6c687175724f54a5dade5fa8c67b604e4d \; --hash=sha256:8c622a5fe39a48f78944a87d4fb8a53ee07344641b0562c540d840748571b811 \; --hash=sha256:8d756e44e94489e49571086ef83b2bb8ce311e730092d2c34ca8f7d925cb20aa \; --hash=sha256:8f4a014bc36d3c57402e2977dada34f9c12300af536839dc38c0beab8878f38a \; --hash=sha256:9063e24fdb1e498ab71cb7419e24622516c4a04476b17a2dab57e8baa30d6e03 \; --hash=sha256:90d558489962fd4918143277a773316e56c72da56ec7aa3dc3dbbe20fdfed15b \; --hash=sha256:923c0c831b7cfcb071580d3f46c4baf50f174be571576556269530f4bbd79d04 \; --hash=sha256:95f2a5796329323b8f0512e09dbb7a1860c46a39da62ecb2324f116fa8fdc85c \; --hash=sha256:96b02a3dc4381e5494fad39be677abcb5e6634bf7b4fa83a6dd3112607547001 \; --hash=sha256:9f96df6923e21816da7e0ad3fd47dd8f94b2a5ce594e00677c0013018b813458 \; --hash=sha256:a10af20b82360ab00827f916a6058451b723b4e65030c5a18577c8b2de5b3389 \; --hash=sha256:a50aebfa173e157099939b17f18600f72f84eed3049e743b68ad15bd69b6bf99 \; --hash=sha256:a981a536974bbc7a512cf44ed14938cf01030a99e9b3a06dd59578882f06f985 \; --hash=sha256:a9a8e9031d613fd2009c182b69c7b2c1ef8239a0efb1df3f7c8da66d5dd3d537 \; --hash=sha256:ae5f4161f18c61806f411a13b0310bea87f987c7d2ecdbdaad0e94eb2e404238 \; --hash=sha256:aed38f6,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:5110,Security,hash,hash,5110,c73b2fd8 \; --hash=sha256:7cd13a2e3ddeed6913a65e66e94b51d80a041145a026c27e6bb76c31a853c6ab \; --hash=sha256:7ed9e526742851e8d5cc9e6cf41427dfc6068d4f5a3bb03659444b4cabf6bc26 \; --hash=sha256:7f04c839ed0b6b98b1a7501a002144b76c18fb1c1850c8b98d458ac269e26ed2 \; --hash=sha256:802fe99cca7457642125a8a88a084cef28ff0cf9407060f7b93dca5aa25480db \; --hash=sha256:80402cd6ee291dcb72644d6eac93785fe2c8b9cb30893c1af5b8fdd753b9d40f \; --hash=sha256:8465322196c8b4d7ab6d1e049e4c5cb460d0394da4a27d23cc242fbf0034b6b5 \; --hash=sha256:86216b5cee4b06df986d214f664305142d9c76df9b6512be2738aa72a2048f99 \; --hash=sha256:87d1351268731db79e0f8e745d92493ee2841c974128ef629dc518b937d9194c \; --hash=sha256:8bdb58ff7ba23002a4c5808d608e4e6c687175724f54a5dade5fa8c67b604e4d \; --hash=sha256:8c622a5fe39a48f78944a87d4fb8a53ee07344641b0562c540d840748571b811 \; --hash=sha256:8d756e44e94489e49571086ef83b2bb8ce311e730092d2c34ca8f7d925cb20aa \; --hash=sha256:8f4a014bc36d3c57402e2977dada34f9c12300af536839dc38c0beab8878f38a \; --hash=sha256:9063e24fdb1e498ab71cb7419e24622516c4a04476b17a2dab57e8baa30d6e03 \; --hash=sha256:90d558489962fd4918143277a773316e56c72da56ec7aa3dc3dbbe20fdfed15b \; --hash=sha256:923c0c831b7cfcb071580d3f46c4baf50f174be571576556269530f4bbd79d04 \; --hash=sha256:95f2a5796329323b8f0512e09dbb7a1860c46a39da62ecb2324f116fa8fdc85c \; --hash=sha256:96b02a3dc4381e5494fad39be677abcb5e6634bf7b4fa83a6dd3112607547001 \; --hash=sha256:9f96df6923e21816da7e0ad3fd47dd8f94b2a5ce594e00677c0013018b813458 \; --hash=sha256:a10af20b82360ab00827f916a6058451b723b4e65030c5a18577c8b2de5b3389 \; --hash=sha256:a50aebfa173e157099939b17f18600f72f84eed3049e743b68ad15bd69b6bf99 \; --hash=sha256:a981a536974bbc7a512cf44ed14938cf01030a99e9b3a06dd59578882f06f985 \; --hash=sha256:a9a8e9031d613fd2009c182b69c7b2c1ef8239a0efb1df3f7c8da66d5dd3d537 \; --hash=sha256:ae5f4161f18c61806f411a13b0310bea87f987c7d2ecdbdaad0e94eb2e404238 \; --hash=sha256:aed38f6e4fb3f5d6bf81bfa990a07806be9d83cf7bacef998ab1a9bd660a581f \; --hash=sha256:b01b88d,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:5192,Security,hash,hash,5192,a853c6ab \; --hash=sha256:7ed9e526742851e8d5cc9e6cf41427dfc6068d4f5a3bb03659444b4cabf6bc26 \; --hash=sha256:7f04c839ed0b6b98b1a7501a002144b76c18fb1c1850c8b98d458ac269e26ed2 \; --hash=sha256:802fe99cca7457642125a8a88a084cef28ff0cf9407060f7b93dca5aa25480db \; --hash=sha256:80402cd6ee291dcb72644d6eac93785fe2c8b9cb30893c1af5b8fdd753b9d40f \; --hash=sha256:8465322196c8b4d7ab6d1e049e4c5cb460d0394da4a27d23cc242fbf0034b6b5 \; --hash=sha256:86216b5cee4b06df986d214f664305142d9c76df9b6512be2738aa72a2048f99 \; --hash=sha256:87d1351268731db79e0f8e745d92493ee2841c974128ef629dc518b937d9194c \; --hash=sha256:8bdb58ff7ba23002a4c5808d608e4e6c687175724f54a5dade5fa8c67b604e4d \; --hash=sha256:8c622a5fe39a48f78944a87d4fb8a53ee07344641b0562c540d840748571b811 \; --hash=sha256:8d756e44e94489e49571086ef83b2bb8ce311e730092d2c34ca8f7d925cb20aa \; --hash=sha256:8f4a014bc36d3c57402e2977dada34f9c12300af536839dc38c0beab8878f38a \; --hash=sha256:9063e24fdb1e498ab71cb7419e24622516c4a04476b17a2dab57e8baa30d6e03 \; --hash=sha256:90d558489962fd4918143277a773316e56c72da56ec7aa3dc3dbbe20fdfed15b \; --hash=sha256:923c0c831b7cfcb071580d3f46c4baf50f174be571576556269530f4bbd79d04 \; --hash=sha256:95f2a5796329323b8f0512e09dbb7a1860c46a39da62ecb2324f116fa8fdc85c \; --hash=sha256:96b02a3dc4381e5494fad39be677abcb5e6634bf7b4fa83a6dd3112607547001 \; --hash=sha256:9f96df6923e21816da7e0ad3fd47dd8f94b2a5ce594e00677c0013018b813458 \; --hash=sha256:a10af20b82360ab00827f916a6058451b723b4e65030c5a18577c8b2de5b3389 \; --hash=sha256:a50aebfa173e157099939b17f18600f72f84eed3049e743b68ad15bd69b6bf99 \; --hash=sha256:a981a536974bbc7a512cf44ed14938cf01030a99e9b3a06dd59578882f06f985 \; --hash=sha256:a9a8e9031d613fd2009c182b69c7b2c1ef8239a0efb1df3f7c8da66d5dd3d537 \; --hash=sha256:ae5f4161f18c61806f411a13b0310bea87f987c7d2ecdbdaad0e94eb2e404238 \; --hash=sha256:aed38f6e4fb3f5d6bf81bfa990a07806be9d83cf7bacef998ab1a9bd660a581f \; --hash=sha256:b01b88d45a6fcb69667cd6d2f7a9aeb4bf53760d7fc536bf679ec94fe9f3ff3d \; --hash=sha256:b261ccd,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:5274,Security,hash,hash,5274,abf6bc26 \; --hash=sha256:7f04c839ed0b6b98b1a7501a002144b76c18fb1c1850c8b98d458ac269e26ed2 \; --hash=sha256:802fe99cca7457642125a8a88a084cef28ff0cf9407060f7b93dca5aa25480db \; --hash=sha256:80402cd6ee291dcb72644d6eac93785fe2c8b9cb30893c1af5b8fdd753b9d40f \; --hash=sha256:8465322196c8b4d7ab6d1e049e4c5cb460d0394da4a27d23cc242fbf0034b6b5 \; --hash=sha256:86216b5cee4b06df986d214f664305142d9c76df9b6512be2738aa72a2048f99 \; --hash=sha256:87d1351268731db79e0f8e745d92493ee2841c974128ef629dc518b937d9194c \; --hash=sha256:8bdb58ff7ba23002a4c5808d608e4e6c687175724f54a5dade5fa8c67b604e4d \; --hash=sha256:8c622a5fe39a48f78944a87d4fb8a53ee07344641b0562c540d840748571b811 \; --hash=sha256:8d756e44e94489e49571086ef83b2bb8ce311e730092d2c34ca8f7d925cb20aa \; --hash=sha256:8f4a014bc36d3c57402e2977dada34f9c12300af536839dc38c0beab8878f38a \; --hash=sha256:9063e24fdb1e498ab71cb7419e24622516c4a04476b17a2dab57e8baa30d6e03 \; --hash=sha256:90d558489962fd4918143277a773316e56c72da56ec7aa3dc3dbbe20fdfed15b \; --hash=sha256:923c0c831b7cfcb071580d3f46c4baf50f174be571576556269530f4bbd79d04 \; --hash=sha256:95f2a5796329323b8f0512e09dbb7a1860c46a39da62ecb2324f116fa8fdc85c \; --hash=sha256:96b02a3dc4381e5494fad39be677abcb5e6634bf7b4fa83a6dd3112607547001 \; --hash=sha256:9f96df6923e21816da7e0ad3fd47dd8f94b2a5ce594e00677c0013018b813458 \; --hash=sha256:a10af20b82360ab00827f916a6058451b723b4e65030c5a18577c8b2de5b3389 \; --hash=sha256:a50aebfa173e157099939b17f18600f72f84eed3049e743b68ad15bd69b6bf99 \; --hash=sha256:a981a536974bbc7a512cf44ed14938cf01030a99e9b3a06dd59578882f06f985 \; --hash=sha256:a9a8e9031d613fd2009c182b69c7b2c1ef8239a0efb1df3f7c8da66d5dd3d537 \; --hash=sha256:ae5f4161f18c61806f411a13b0310bea87f987c7d2ecdbdaad0e94eb2e404238 \; --hash=sha256:aed38f6e4fb3f5d6bf81bfa990a07806be9d83cf7bacef998ab1a9bd660a581f \; --hash=sha256:b01b88d45a6fcb69667cd6d2f7a9aeb4bf53760d7fc536bf679ec94fe9f3ff3d \; --hash=sha256:b261ccdec7821281dade748d088bb6e9b69e6d15b30652b74cbbac25e280b796 \; --hash=sha256:b2b0a0c,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:5356,Security,hash,hash,5356,69e26ed2 \; --hash=sha256:802fe99cca7457642125a8a88a084cef28ff0cf9407060f7b93dca5aa25480db \; --hash=sha256:80402cd6ee291dcb72644d6eac93785fe2c8b9cb30893c1af5b8fdd753b9d40f \; --hash=sha256:8465322196c8b4d7ab6d1e049e4c5cb460d0394da4a27d23cc242fbf0034b6b5 \; --hash=sha256:86216b5cee4b06df986d214f664305142d9c76df9b6512be2738aa72a2048f99 \; --hash=sha256:87d1351268731db79e0f8e745d92493ee2841c974128ef629dc518b937d9194c \; --hash=sha256:8bdb58ff7ba23002a4c5808d608e4e6c687175724f54a5dade5fa8c67b604e4d \; --hash=sha256:8c622a5fe39a48f78944a87d4fb8a53ee07344641b0562c540d840748571b811 \; --hash=sha256:8d756e44e94489e49571086ef83b2bb8ce311e730092d2c34ca8f7d925cb20aa \; --hash=sha256:8f4a014bc36d3c57402e2977dada34f9c12300af536839dc38c0beab8878f38a \; --hash=sha256:9063e24fdb1e498ab71cb7419e24622516c4a04476b17a2dab57e8baa30d6e03 \; --hash=sha256:90d558489962fd4918143277a773316e56c72da56ec7aa3dc3dbbe20fdfed15b \; --hash=sha256:923c0c831b7cfcb071580d3f46c4baf50f174be571576556269530f4bbd79d04 \; --hash=sha256:95f2a5796329323b8f0512e09dbb7a1860c46a39da62ecb2324f116fa8fdc85c \; --hash=sha256:96b02a3dc4381e5494fad39be677abcb5e6634bf7b4fa83a6dd3112607547001 \; --hash=sha256:9f96df6923e21816da7e0ad3fd47dd8f94b2a5ce594e00677c0013018b813458 \; --hash=sha256:a10af20b82360ab00827f916a6058451b723b4e65030c5a18577c8b2de5b3389 \; --hash=sha256:a50aebfa173e157099939b17f18600f72f84eed3049e743b68ad15bd69b6bf99 \; --hash=sha256:a981a536974bbc7a512cf44ed14938cf01030a99e9b3a06dd59578882f06f985 \; --hash=sha256:a9a8e9031d613fd2009c182b69c7b2c1ef8239a0efb1df3f7c8da66d5dd3d537 \; --hash=sha256:ae5f4161f18c61806f411a13b0310bea87f987c7d2ecdbdaad0e94eb2e404238 \; --hash=sha256:aed38f6e4fb3f5d6bf81bfa990a07806be9d83cf7bacef998ab1a9bd660a581f \; --hash=sha256:b01b88d45a6fcb69667cd6d2f7a9aeb4bf53760d7fc536bf679ec94fe9f3ff3d \; --hash=sha256:b261ccdec7821281dade748d088bb6e9b69e6d15b30652b74cbbac25e280b796 \; --hash=sha256:b2b0a0c0517616b6869869f8c581d4eb2dd83a4d79e0ebcb7d373ef9956aeb0a \; --hash=sha256:b4a23f6,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:5438,Security,hash,hash,5438,a25480db \; --hash=sha256:80402cd6ee291dcb72644d6eac93785fe2c8b9cb30893c1af5b8fdd753b9d40f \; --hash=sha256:8465322196c8b4d7ab6d1e049e4c5cb460d0394da4a27d23cc242fbf0034b6b5 \; --hash=sha256:86216b5cee4b06df986d214f664305142d9c76df9b6512be2738aa72a2048f99 \; --hash=sha256:87d1351268731db79e0f8e745d92493ee2841c974128ef629dc518b937d9194c \; --hash=sha256:8bdb58ff7ba23002a4c5808d608e4e6c687175724f54a5dade5fa8c67b604e4d \; --hash=sha256:8c622a5fe39a48f78944a87d4fb8a53ee07344641b0562c540d840748571b811 \; --hash=sha256:8d756e44e94489e49571086ef83b2bb8ce311e730092d2c34ca8f7d925cb20aa \; --hash=sha256:8f4a014bc36d3c57402e2977dada34f9c12300af536839dc38c0beab8878f38a \; --hash=sha256:9063e24fdb1e498ab71cb7419e24622516c4a04476b17a2dab57e8baa30d6e03 \; --hash=sha256:90d558489962fd4918143277a773316e56c72da56ec7aa3dc3dbbe20fdfed15b \; --hash=sha256:923c0c831b7cfcb071580d3f46c4baf50f174be571576556269530f4bbd79d04 \; --hash=sha256:95f2a5796329323b8f0512e09dbb7a1860c46a39da62ecb2324f116fa8fdc85c \; --hash=sha256:96b02a3dc4381e5494fad39be677abcb5e6634bf7b4fa83a6dd3112607547001 \; --hash=sha256:9f96df6923e21816da7e0ad3fd47dd8f94b2a5ce594e00677c0013018b813458 \; --hash=sha256:a10af20b82360ab00827f916a6058451b723b4e65030c5a18577c8b2de5b3389 \; --hash=sha256:a50aebfa173e157099939b17f18600f72f84eed3049e743b68ad15bd69b6bf99 \; --hash=sha256:a981a536974bbc7a512cf44ed14938cf01030a99e9b3a06dd59578882f06f985 \; --hash=sha256:a9a8e9031d613fd2009c182b69c7b2c1ef8239a0efb1df3f7c8da66d5dd3d537 \; --hash=sha256:ae5f4161f18c61806f411a13b0310bea87f987c7d2ecdbdaad0e94eb2e404238 \; --hash=sha256:aed38f6e4fb3f5d6bf81bfa990a07806be9d83cf7bacef998ab1a9bd660a581f \; --hash=sha256:b01b88d45a6fcb69667cd6d2f7a9aeb4bf53760d7fc536bf679ec94fe9f3ff3d \; --hash=sha256:b261ccdec7821281dade748d088bb6e9b69e6d15b30652b74cbbac25e280b796 \; --hash=sha256:b2b0a0c0517616b6869869f8c581d4eb2dd83a4d79e0ebcb7d373ef9956aeb0a \; --hash=sha256:b4a23f61ce87adf89be746c8a8974fe1c823c891d8f86eb218bb957c924bb143 \; --hash=sha256:bd8f7df,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:5520,Security,hash,hash,5520,53b9d40f \; --hash=sha256:8465322196c8b4d7ab6d1e049e4c5cb460d0394da4a27d23cc242fbf0034b6b5 \; --hash=sha256:86216b5cee4b06df986d214f664305142d9c76df9b6512be2738aa72a2048f99 \; --hash=sha256:87d1351268731db79e0f8e745d92493ee2841c974128ef629dc518b937d9194c \; --hash=sha256:8bdb58ff7ba23002a4c5808d608e4e6c687175724f54a5dade5fa8c67b604e4d \; --hash=sha256:8c622a5fe39a48f78944a87d4fb8a53ee07344641b0562c540d840748571b811 \; --hash=sha256:8d756e44e94489e49571086ef83b2bb8ce311e730092d2c34ca8f7d925cb20aa \; --hash=sha256:8f4a014bc36d3c57402e2977dada34f9c12300af536839dc38c0beab8878f38a \; --hash=sha256:9063e24fdb1e498ab71cb7419e24622516c4a04476b17a2dab57e8baa30d6e03 \; --hash=sha256:90d558489962fd4918143277a773316e56c72da56ec7aa3dc3dbbe20fdfed15b \; --hash=sha256:923c0c831b7cfcb071580d3f46c4baf50f174be571576556269530f4bbd79d04 \; --hash=sha256:95f2a5796329323b8f0512e09dbb7a1860c46a39da62ecb2324f116fa8fdc85c \; --hash=sha256:96b02a3dc4381e5494fad39be677abcb5e6634bf7b4fa83a6dd3112607547001 \; --hash=sha256:9f96df6923e21816da7e0ad3fd47dd8f94b2a5ce594e00677c0013018b813458 \; --hash=sha256:a10af20b82360ab00827f916a6058451b723b4e65030c5a18577c8b2de5b3389 \; --hash=sha256:a50aebfa173e157099939b17f18600f72f84eed3049e743b68ad15bd69b6bf99 \; --hash=sha256:a981a536974bbc7a512cf44ed14938cf01030a99e9b3a06dd59578882f06f985 \; --hash=sha256:a9a8e9031d613fd2009c182b69c7b2c1ef8239a0efb1df3f7c8da66d5dd3d537 \; --hash=sha256:ae5f4161f18c61806f411a13b0310bea87f987c7d2ecdbdaad0e94eb2e404238 \; --hash=sha256:aed38f6e4fb3f5d6bf81bfa990a07806be9d83cf7bacef998ab1a9bd660a581f \; --hash=sha256:b01b88d45a6fcb69667cd6d2f7a9aeb4bf53760d7fc536bf679ec94fe9f3ff3d \; --hash=sha256:b261ccdec7821281dade748d088bb6e9b69e6d15b30652b74cbbac25e280b796 \; --hash=sha256:b2b0a0c0517616b6869869f8c581d4eb2dd83a4d79e0ebcb7d373ef9956aeb0a \; --hash=sha256:b4a23f61ce87adf89be746c8a8974fe1c823c891d8f86eb218bb957c924bb143 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:5602,Security,hash,hash,5602,0034b6b5 \; --hash=sha256:86216b5cee4b06df986d214f664305142d9c76df9b6512be2738aa72a2048f99 \; --hash=sha256:87d1351268731db79e0f8e745d92493ee2841c974128ef629dc518b937d9194c \; --hash=sha256:8bdb58ff7ba23002a4c5808d608e4e6c687175724f54a5dade5fa8c67b604e4d \; --hash=sha256:8c622a5fe39a48f78944a87d4fb8a53ee07344641b0562c540d840748571b811 \; --hash=sha256:8d756e44e94489e49571086ef83b2bb8ce311e730092d2c34ca8f7d925cb20aa \; --hash=sha256:8f4a014bc36d3c57402e2977dada34f9c12300af536839dc38c0beab8878f38a \; --hash=sha256:9063e24fdb1e498ab71cb7419e24622516c4a04476b17a2dab57e8baa30d6e03 \; --hash=sha256:90d558489962fd4918143277a773316e56c72da56ec7aa3dc3dbbe20fdfed15b \; --hash=sha256:923c0c831b7cfcb071580d3f46c4baf50f174be571576556269530f4bbd79d04 \; --hash=sha256:95f2a5796329323b8f0512e09dbb7a1860c46a39da62ecb2324f116fa8fdc85c \; --hash=sha256:96b02a3dc4381e5494fad39be677abcb5e6634bf7b4fa83a6dd3112607547001 \; --hash=sha256:9f96df6923e21816da7e0ad3fd47dd8f94b2a5ce594e00677c0013018b813458 \; --hash=sha256:a10af20b82360ab00827f916a6058451b723b4e65030c5a18577c8b2de5b3389 \; --hash=sha256:a50aebfa173e157099939b17f18600f72f84eed3049e743b68ad15bd69b6bf99 \; --hash=sha256:a981a536974bbc7a512cf44ed14938cf01030a99e9b3a06dd59578882f06f985 \; --hash=sha256:a9a8e9031d613fd2009c182b69c7b2c1ef8239a0efb1df3f7c8da66d5dd3d537 \; --hash=sha256:ae5f4161f18c61806f411a13b0310bea87f987c7d2ecdbdaad0e94eb2e404238 \; --hash=sha256:aed38f6e4fb3f5d6bf81bfa990a07806be9d83cf7bacef998ab1a9bd660a581f \; --hash=sha256:b01b88d45a6fcb69667cd6d2f7a9aeb4bf53760d7fc536bf679ec94fe9f3ff3d \; --hash=sha256:b261ccdec7821281dade748d088bb6e9b69e6d15b30652b74cbbac25e280b796 \; --hash=sha256:b2b0a0c0517616b6869869f8c581d4eb2dd83a4d79e0ebcb7d373ef9956aeb0a \; --hash=sha256:b4a23f61ce87adf89be746c8a8974fe1c823c891d8f86eb218bb957c924bb143 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4f,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:5684,Security,hash,hash,5684,a2048f99 \; --hash=sha256:87d1351268731db79e0f8e745d92493ee2841c974128ef629dc518b937d9194c \; --hash=sha256:8bdb58ff7ba23002a4c5808d608e4e6c687175724f54a5dade5fa8c67b604e4d \; --hash=sha256:8c622a5fe39a48f78944a87d4fb8a53ee07344641b0562c540d840748571b811 \; --hash=sha256:8d756e44e94489e49571086ef83b2bb8ce311e730092d2c34ca8f7d925cb20aa \; --hash=sha256:8f4a014bc36d3c57402e2977dada34f9c12300af536839dc38c0beab8878f38a \; --hash=sha256:9063e24fdb1e498ab71cb7419e24622516c4a04476b17a2dab57e8baa30d6e03 \; --hash=sha256:90d558489962fd4918143277a773316e56c72da56ec7aa3dc3dbbe20fdfed15b \; --hash=sha256:923c0c831b7cfcb071580d3f46c4baf50f174be571576556269530f4bbd79d04 \; --hash=sha256:95f2a5796329323b8f0512e09dbb7a1860c46a39da62ecb2324f116fa8fdc85c \; --hash=sha256:96b02a3dc4381e5494fad39be677abcb5e6634bf7b4fa83a6dd3112607547001 \; --hash=sha256:9f96df6923e21816da7e0ad3fd47dd8f94b2a5ce594e00677c0013018b813458 \; --hash=sha256:a10af20b82360ab00827f916a6058451b723b4e65030c5a18577c8b2de5b3389 \; --hash=sha256:a50aebfa173e157099939b17f18600f72f84eed3049e743b68ad15bd69b6bf99 \; --hash=sha256:a981a536974bbc7a512cf44ed14938cf01030a99e9b3a06dd59578882f06f985 \; --hash=sha256:a9a8e9031d613fd2009c182b69c7b2c1ef8239a0efb1df3f7c8da66d5dd3d537 \; --hash=sha256:ae5f4161f18c61806f411a13b0310bea87f987c7d2ecdbdaad0e94eb2e404238 \; --hash=sha256:aed38f6e4fb3f5d6bf81bfa990a07806be9d83cf7bacef998ab1a9bd660a581f \; --hash=sha256:b01b88d45a6fcb69667cd6d2f7a9aeb4bf53760d7fc536bf679ec94fe9f3ff3d \; --hash=sha256:b261ccdec7821281dade748d088bb6e9b69e6d15b30652b74cbbac25e280b796 \; --hash=sha256:b2b0a0c0517616b6869869f8c581d4eb2dd83a4d79e0ebcb7d373ef9956aeb0a \; --hash=sha256:b4a23f61ce87adf89be746c8a8974fe1c823c891d8f86eb218bb957c924bb143 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \; --hash=sha256:c083af6,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:5766,Security,hash,hash,5766,37d9194c \; --hash=sha256:8bdb58ff7ba23002a4c5808d608e4e6c687175724f54a5dade5fa8c67b604e4d \; --hash=sha256:8c622a5fe39a48f78944a87d4fb8a53ee07344641b0562c540d840748571b811 \; --hash=sha256:8d756e44e94489e49571086ef83b2bb8ce311e730092d2c34ca8f7d925cb20aa \; --hash=sha256:8f4a014bc36d3c57402e2977dada34f9c12300af536839dc38c0beab8878f38a \; --hash=sha256:9063e24fdb1e498ab71cb7419e24622516c4a04476b17a2dab57e8baa30d6e03 \; --hash=sha256:90d558489962fd4918143277a773316e56c72da56ec7aa3dc3dbbe20fdfed15b \; --hash=sha256:923c0c831b7cfcb071580d3f46c4baf50f174be571576556269530f4bbd79d04 \; --hash=sha256:95f2a5796329323b8f0512e09dbb7a1860c46a39da62ecb2324f116fa8fdc85c \; --hash=sha256:96b02a3dc4381e5494fad39be677abcb5e6634bf7b4fa83a6dd3112607547001 \; --hash=sha256:9f96df6923e21816da7e0ad3fd47dd8f94b2a5ce594e00677c0013018b813458 \; --hash=sha256:a10af20b82360ab00827f916a6058451b723b4e65030c5a18577c8b2de5b3389 \; --hash=sha256:a50aebfa173e157099939b17f18600f72f84eed3049e743b68ad15bd69b6bf99 \; --hash=sha256:a981a536974bbc7a512cf44ed14938cf01030a99e9b3a06dd59578882f06f985 \; --hash=sha256:a9a8e9031d613fd2009c182b69c7b2c1ef8239a0efb1df3f7c8da66d5dd3d537 \; --hash=sha256:ae5f4161f18c61806f411a13b0310bea87f987c7d2ecdbdaad0e94eb2e404238 \; --hash=sha256:aed38f6e4fb3f5d6bf81bfa990a07806be9d83cf7bacef998ab1a9bd660a581f \; --hash=sha256:b01b88d45a6fcb69667cd6d2f7a9aeb4bf53760d7fc536bf679ec94fe9f3ff3d \; --hash=sha256:b261ccdec7821281dade748d088bb6e9b69e6d15b30652b74cbbac25e280b796 \; --hash=sha256:b2b0a0c0517616b6869869f8c581d4eb2dd83a4d79e0ebcb7d373ef9956aeb0a \; --hash=sha256:b4a23f61ce87adf89be746c8a8974fe1c823c891d8f86eb218bb957c924bb143 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \; --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \; --hash=sha256:c180f51,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:5848,Security,hash,hash,5848,7b604e4d \; --hash=sha256:8c622a5fe39a48f78944a87d4fb8a53ee07344641b0562c540d840748571b811 \; --hash=sha256:8d756e44e94489e49571086ef83b2bb8ce311e730092d2c34ca8f7d925cb20aa \; --hash=sha256:8f4a014bc36d3c57402e2977dada34f9c12300af536839dc38c0beab8878f38a \; --hash=sha256:9063e24fdb1e498ab71cb7419e24622516c4a04476b17a2dab57e8baa30d6e03 \; --hash=sha256:90d558489962fd4918143277a773316e56c72da56ec7aa3dc3dbbe20fdfed15b \; --hash=sha256:923c0c831b7cfcb071580d3f46c4baf50f174be571576556269530f4bbd79d04 \; --hash=sha256:95f2a5796329323b8f0512e09dbb7a1860c46a39da62ecb2324f116fa8fdc85c \; --hash=sha256:96b02a3dc4381e5494fad39be677abcb5e6634bf7b4fa83a6dd3112607547001 \; --hash=sha256:9f96df6923e21816da7e0ad3fd47dd8f94b2a5ce594e00677c0013018b813458 \; --hash=sha256:a10af20b82360ab00827f916a6058451b723b4e65030c5a18577c8b2de5b3389 \; --hash=sha256:a50aebfa173e157099939b17f18600f72f84eed3049e743b68ad15bd69b6bf99 \; --hash=sha256:a981a536974bbc7a512cf44ed14938cf01030a99e9b3a06dd59578882f06f985 \; --hash=sha256:a9a8e9031d613fd2009c182b69c7b2c1ef8239a0efb1df3f7c8da66d5dd3d537 \; --hash=sha256:ae5f4161f18c61806f411a13b0310bea87f987c7d2ecdbdaad0e94eb2e404238 \; --hash=sha256:aed38f6e4fb3f5d6bf81bfa990a07806be9d83cf7bacef998ab1a9bd660a581f \; --hash=sha256:b01b88d45a6fcb69667cd6d2f7a9aeb4bf53760d7fc536bf679ec94fe9f3ff3d \; --hash=sha256:b261ccdec7821281dade748d088bb6e9b69e6d15b30652b74cbbac25e280b796 \; --hash=sha256:b2b0a0c0517616b6869869f8c581d4eb2dd83a4d79e0ebcb7d373ef9956aeb0a \; --hash=sha256:b4a23f61ce87adf89be746c8a8974fe1c823c891d8f86eb218bb957c924bb143 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \; --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \; --hash=sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711 \; --hash=sha256:c235ebd,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:5930,Security,hash,hash,5930,8571b811 \; --hash=sha256:8d756e44e94489e49571086ef83b2bb8ce311e730092d2c34ca8f7d925cb20aa \; --hash=sha256:8f4a014bc36d3c57402e2977dada34f9c12300af536839dc38c0beab8878f38a \; --hash=sha256:9063e24fdb1e498ab71cb7419e24622516c4a04476b17a2dab57e8baa30d6e03 \; --hash=sha256:90d558489962fd4918143277a773316e56c72da56ec7aa3dc3dbbe20fdfed15b \; --hash=sha256:923c0c831b7cfcb071580d3f46c4baf50f174be571576556269530f4bbd79d04 \; --hash=sha256:95f2a5796329323b8f0512e09dbb7a1860c46a39da62ecb2324f116fa8fdc85c \; --hash=sha256:96b02a3dc4381e5494fad39be677abcb5e6634bf7b4fa83a6dd3112607547001 \; --hash=sha256:9f96df6923e21816da7e0ad3fd47dd8f94b2a5ce594e00677c0013018b813458 \; --hash=sha256:a10af20b82360ab00827f916a6058451b723b4e65030c5a18577c8b2de5b3389 \; --hash=sha256:a50aebfa173e157099939b17f18600f72f84eed3049e743b68ad15bd69b6bf99 \; --hash=sha256:a981a536974bbc7a512cf44ed14938cf01030a99e9b3a06dd59578882f06f985 \; --hash=sha256:a9a8e9031d613fd2009c182b69c7b2c1ef8239a0efb1df3f7c8da66d5dd3d537 \; --hash=sha256:ae5f4161f18c61806f411a13b0310bea87f987c7d2ecdbdaad0e94eb2e404238 \; --hash=sha256:aed38f6e4fb3f5d6bf81bfa990a07806be9d83cf7bacef998ab1a9bd660a581f \; --hash=sha256:b01b88d45a6fcb69667cd6d2f7a9aeb4bf53760d7fc536bf679ec94fe9f3ff3d \; --hash=sha256:b261ccdec7821281dade748d088bb6e9b69e6d15b30652b74cbbac25e280b796 \; --hash=sha256:b2b0a0c0517616b6869869f8c581d4eb2dd83a4d79e0ebcb7d373ef9956aeb0a \; --hash=sha256:b4a23f61ce87adf89be746c8a8974fe1c823c891d8f86eb218bb957c924bb143 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \; --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \; --hash=sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711 \; --hash=sha256:c235ebd9baae02f1b77bcea61bce332cb4331dc3617d254df3323aa01ab47bd4 \; --hash=sha256:cd70574,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:6012,Security,hash,hash,6012,25cb20aa \; --hash=sha256:8f4a014bc36d3c57402e2977dada34f9c12300af536839dc38c0beab8878f38a \; --hash=sha256:9063e24fdb1e498ab71cb7419e24622516c4a04476b17a2dab57e8baa30d6e03 \; --hash=sha256:90d558489962fd4918143277a773316e56c72da56ec7aa3dc3dbbe20fdfed15b \; --hash=sha256:923c0c831b7cfcb071580d3f46c4baf50f174be571576556269530f4bbd79d04 \; --hash=sha256:95f2a5796329323b8f0512e09dbb7a1860c46a39da62ecb2324f116fa8fdc85c \; --hash=sha256:96b02a3dc4381e5494fad39be677abcb5e6634bf7b4fa83a6dd3112607547001 \; --hash=sha256:9f96df6923e21816da7e0ad3fd47dd8f94b2a5ce594e00677c0013018b813458 \; --hash=sha256:a10af20b82360ab00827f916a6058451b723b4e65030c5a18577c8b2de5b3389 \; --hash=sha256:a50aebfa173e157099939b17f18600f72f84eed3049e743b68ad15bd69b6bf99 \; --hash=sha256:a981a536974bbc7a512cf44ed14938cf01030a99e9b3a06dd59578882f06f985 \; --hash=sha256:a9a8e9031d613fd2009c182b69c7b2c1ef8239a0efb1df3f7c8da66d5dd3d537 \; --hash=sha256:ae5f4161f18c61806f411a13b0310bea87f987c7d2ecdbdaad0e94eb2e404238 \; --hash=sha256:aed38f6e4fb3f5d6bf81bfa990a07806be9d83cf7bacef998ab1a9bd660a581f \; --hash=sha256:b01b88d45a6fcb69667cd6d2f7a9aeb4bf53760d7fc536bf679ec94fe9f3ff3d \; --hash=sha256:b261ccdec7821281dade748d088bb6e9b69e6d15b30652b74cbbac25e280b796 \; --hash=sha256:b2b0a0c0517616b6869869f8c581d4eb2dd83a4d79e0ebcb7d373ef9956aeb0a \; --hash=sha256:b4a23f61ce87adf89be746c8a8974fe1c823c891d8f86eb218bb957c924bb143 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \; --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \; --hash=sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711 \; --hash=sha256:c235ebd9baae02f1b77bcea61bce332cb4331dc3617d254df3323aa01ab47bd4 \; --hash=sha256:cd70574b12bb8a4d2aaa0094515df2463cb429d8536cfb6c7ce983246983e5a6 \; --hash=sha256:d0eccce,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:6094,Security,hash,hash,6094,8878f38a \; --hash=sha256:9063e24fdb1e498ab71cb7419e24622516c4a04476b17a2dab57e8baa30d6e03 \; --hash=sha256:90d558489962fd4918143277a773316e56c72da56ec7aa3dc3dbbe20fdfed15b \; --hash=sha256:923c0c831b7cfcb071580d3f46c4baf50f174be571576556269530f4bbd79d04 \; --hash=sha256:95f2a5796329323b8f0512e09dbb7a1860c46a39da62ecb2324f116fa8fdc85c \; --hash=sha256:96b02a3dc4381e5494fad39be677abcb5e6634bf7b4fa83a6dd3112607547001 \; --hash=sha256:9f96df6923e21816da7e0ad3fd47dd8f94b2a5ce594e00677c0013018b813458 \; --hash=sha256:a10af20b82360ab00827f916a6058451b723b4e65030c5a18577c8b2de5b3389 \; --hash=sha256:a50aebfa173e157099939b17f18600f72f84eed3049e743b68ad15bd69b6bf99 \; --hash=sha256:a981a536974bbc7a512cf44ed14938cf01030a99e9b3a06dd59578882f06f985 \; --hash=sha256:a9a8e9031d613fd2009c182b69c7b2c1ef8239a0efb1df3f7c8da66d5dd3d537 \; --hash=sha256:ae5f4161f18c61806f411a13b0310bea87f987c7d2ecdbdaad0e94eb2e404238 \; --hash=sha256:aed38f6e4fb3f5d6bf81bfa990a07806be9d83cf7bacef998ab1a9bd660a581f \; --hash=sha256:b01b88d45a6fcb69667cd6d2f7a9aeb4bf53760d7fc536bf679ec94fe9f3ff3d \; --hash=sha256:b261ccdec7821281dade748d088bb6e9b69e6d15b30652b74cbbac25e280b796 \; --hash=sha256:b2b0a0c0517616b6869869f8c581d4eb2dd83a4d79e0ebcb7d373ef9956aeb0a \; --hash=sha256:b4a23f61ce87adf89be746c8a8974fe1c823c891d8f86eb218bb957c924bb143 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \; --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \; --hash=sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711 \; --hash=sha256:c235ebd9baae02f1b77bcea61bce332cb4331dc3617d254df3323aa01ab47bd4 \; --hash=sha256:cd70574b12bb8a4d2aaa0094515df2463cb429d8536cfb6c7ce983246983e5a6 \; --hash=sha256:d0eccceffcb53201b5bfebb52600a5fb483a20b61da9dbc885f8b103cbe7598c \; --hash=sha256:d965bba,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:6176,Security,hash,hash,6176,a30d6e03 \; --hash=sha256:90d558489962fd4918143277a773316e56c72da56ec7aa3dc3dbbe20fdfed15b \; --hash=sha256:923c0c831b7cfcb071580d3f46c4baf50f174be571576556269530f4bbd79d04 \; --hash=sha256:95f2a5796329323b8f0512e09dbb7a1860c46a39da62ecb2324f116fa8fdc85c \; --hash=sha256:96b02a3dc4381e5494fad39be677abcb5e6634bf7b4fa83a6dd3112607547001 \; --hash=sha256:9f96df6923e21816da7e0ad3fd47dd8f94b2a5ce594e00677c0013018b813458 \; --hash=sha256:a10af20b82360ab00827f916a6058451b723b4e65030c5a18577c8b2de5b3389 \; --hash=sha256:a50aebfa173e157099939b17f18600f72f84eed3049e743b68ad15bd69b6bf99 \; --hash=sha256:a981a536974bbc7a512cf44ed14938cf01030a99e9b3a06dd59578882f06f985 \; --hash=sha256:a9a8e9031d613fd2009c182b69c7b2c1ef8239a0efb1df3f7c8da66d5dd3d537 \; --hash=sha256:ae5f4161f18c61806f411a13b0310bea87f987c7d2ecdbdaad0e94eb2e404238 \; --hash=sha256:aed38f6e4fb3f5d6bf81bfa990a07806be9d83cf7bacef998ab1a9bd660a581f \; --hash=sha256:b01b88d45a6fcb69667cd6d2f7a9aeb4bf53760d7fc536bf679ec94fe9f3ff3d \; --hash=sha256:b261ccdec7821281dade748d088bb6e9b69e6d15b30652b74cbbac25e280b796 \; --hash=sha256:b2b0a0c0517616b6869869f8c581d4eb2dd83a4d79e0ebcb7d373ef9956aeb0a \; --hash=sha256:b4a23f61ce87adf89be746c8a8974fe1c823c891d8f86eb218bb957c924bb143 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \; --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \; --hash=sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711 \; --hash=sha256:c235ebd9baae02f1b77bcea61bce332cb4331dc3617d254df3323aa01ab47bd4 \; --hash=sha256:cd70574b12bb8a4d2aaa0094515df2463cb429d8536cfb6c7ce983246983e5a6 \; --hash=sha256:d0eccceffcb53201b5bfebb52600a5fb483a20b61da9dbc885f8b103cbe7598c \; --hash=sha256:d965bba47ddeec8cd560687584e88cf699fd28f192ceb452d1d7ee807c5597b7 \; --hash=sha256:db364ec,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:6258,Security,hash,hash,6258,fdfed15b \; --hash=sha256:923c0c831b7cfcb071580d3f46c4baf50f174be571576556269530f4bbd79d04 \; --hash=sha256:95f2a5796329323b8f0512e09dbb7a1860c46a39da62ecb2324f116fa8fdc85c \; --hash=sha256:96b02a3dc4381e5494fad39be677abcb5e6634bf7b4fa83a6dd3112607547001 \; --hash=sha256:9f96df6923e21816da7e0ad3fd47dd8f94b2a5ce594e00677c0013018b813458 \; --hash=sha256:a10af20b82360ab00827f916a6058451b723b4e65030c5a18577c8b2de5b3389 \; --hash=sha256:a50aebfa173e157099939b17f18600f72f84eed3049e743b68ad15bd69b6bf99 \; --hash=sha256:a981a536974bbc7a512cf44ed14938cf01030a99e9b3a06dd59578882f06f985 \; --hash=sha256:a9a8e9031d613fd2009c182b69c7b2c1ef8239a0efb1df3f7c8da66d5dd3d537 \; --hash=sha256:ae5f4161f18c61806f411a13b0310bea87f987c7d2ecdbdaad0e94eb2e404238 \; --hash=sha256:aed38f6e4fb3f5d6bf81bfa990a07806be9d83cf7bacef998ab1a9bd660a581f \; --hash=sha256:b01b88d45a6fcb69667cd6d2f7a9aeb4bf53760d7fc536bf679ec94fe9f3ff3d \; --hash=sha256:b261ccdec7821281dade748d088bb6e9b69e6d15b30652b74cbbac25e280b796 \; --hash=sha256:b2b0a0c0517616b6869869f8c581d4eb2dd83a4d79e0ebcb7d373ef9956aeb0a \; --hash=sha256:b4a23f61ce87adf89be746c8a8974fe1c823c891d8f86eb218bb957c924bb143 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \; --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \; --hash=sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711 \; --hash=sha256:c235ebd9baae02f1b77bcea61bce332cb4331dc3617d254df3323aa01ab47bd4 \; --hash=sha256:cd70574b12bb8a4d2aaa0094515df2463cb429d8536cfb6c7ce983246983e5a6 \; --hash=sha256:d0eccceffcb53201b5bfebb52600a5fb483a20b61da9dbc885f8b103cbe7598c \; --hash=sha256:d965bba47ddeec8cd560687584e88cf699fd28f192ceb452d1d7ee807c5597b7 \; --hash=sha256:db364eca23f876da6f9e16c9da0df51aa4f104a972735574842618b8c6d999d4 \; --hash=sha256:ddbb255,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:6340,Security,hash,hash,6340,bbd79d04 \; --hash=sha256:95f2a5796329323b8f0512e09dbb7a1860c46a39da62ecb2324f116fa8fdc85c \; --hash=sha256:96b02a3dc4381e5494fad39be677abcb5e6634bf7b4fa83a6dd3112607547001 \; --hash=sha256:9f96df6923e21816da7e0ad3fd47dd8f94b2a5ce594e00677c0013018b813458 \; --hash=sha256:a10af20b82360ab00827f916a6058451b723b4e65030c5a18577c8b2de5b3389 \; --hash=sha256:a50aebfa173e157099939b17f18600f72f84eed3049e743b68ad15bd69b6bf99 \; --hash=sha256:a981a536974bbc7a512cf44ed14938cf01030a99e9b3a06dd59578882f06f985 \; --hash=sha256:a9a8e9031d613fd2009c182b69c7b2c1ef8239a0efb1df3f7c8da66d5dd3d537 \; --hash=sha256:ae5f4161f18c61806f411a13b0310bea87f987c7d2ecdbdaad0e94eb2e404238 \; --hash=sha256:aed38f6e4fb3f5d6bf81bfa990a07806be9d83cf7bacef998ab1a9bd660a581f \; --hash=sha256:b01b88d45a6fcb69667cd6d2f7a9aeb4bf53760d7fc536bf679ec94fe9f3ff3d \; --hash=sha256:b261ccdec7821281dade748d088bb6e9b69e6d15b30652b74cbbac25e280b796 \; --hash=sha256:b2b0a0c0517616b6869869f8c581d4eb2dd83a4d79e0ebcb7d373ef9956aeb0a \; --hash=sha256:b4a23f61ce87adf89be746c8a8974fe1c823c891d8f86eb218bb957c924bb143 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \; --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \; --hash=sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711 \; --hash=sha256:c235ebd9baae02f1b77bcea61bce332cb4331dc3617d254df3323aa01ab47bd4 \; --hash=sha256:cd70574b12bb8a4d2aaa0094515df2463cb429d8536cfb6c7ce983246983e5a6 \; --hash=sha256:d0eccceffcb53201b5bfebb52600a5fb483a20b61da9dbc885f8b103cbe7598c \; --hash=sha256:d965bba47ddeec8cd560687584e88cf699fd28f192ceb452d1d7ee807c5597b7 \; --hash=sha256:db364eca23f876da6f9e16c9da0df51aa4f104a972735574842618b8c6d999d4 \; --hash=sha256:ddbb2551d7e0102e7252db79ba445cdab71b26640817ab1e3e3648dad515003b \; --hash=sha256:deb6be0,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:6422,Security,hash,hash,6422,a8fdc85c \; --hash=sha256:96b02a3dc4381e5494fad39be677abcb5e6634bf7b4fa83a6dd3112607547001 \; --hash=sha256:9f96df6923e21816da7e0ad3fd47dd8f94b2a5ce594e00677c0013018b813458 \; --hash=sha256:a10af20b82360ab00827f916a6058451b723b4e65030c5a18577c8b2de5b3389 \; --hash=sha256:a50aebfa173e157099939b17f18600f72f84eed3049e743b68ad15bd69b6bf99 \; --hash=sha256:a981a536974bbc7a512cf44ed14938cf01030a99e9b3a06dd59578882f06f985 \; --hash=sha256:a9a8e9031d613fd2009c182b69c7b2c1ef8239a0efb1df3f7c8da66d5dd3d537 \; --hash=sha256:ae5f4161f18c61806f411a13b0310bea87f987c7d2ecdbdaad0e94eb2e404238 \; --hash=sha256:aed38f6e4fb3f5d6bf81bfa990a07806be9d83cf7bacef998ab1a9bd660a581f \; --hash=sha256:b01b88d45a6fcb69667cd6d2f7a9aeb4bf53760d7fc536bf679ec94fe9f3ff3d \; --hash=sha256:b261ccdec7821281dade748d088bb6e9b69e6d15b30652b74cbbac25e280b796 \; --hash=sha256:b2b0a0c0517616b6869869f8c581d4eb2dd83a4d79e0ebcb7d373ef9956aeb0a \; --hash=sha256:b4a23f61ce87adf89be746c8a8974fe1c823c891d8f86eb218bb957c924bb143 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \; --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \; --hash=sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711 \; --hash=sha256:c235ebd9baae02f1b77bcea61bce332cb4331dc3617d254df3323aa01ab47bd4 \; --hash=sha256:cd70574b12bb8a4d2aaa0094515df2463cb429d8536cfb6c7ce983246983e5a6 \; --hash=sha256:d0eccceffcb53201b5bfebb52600a5fb483a20b61da9dbc885f8b103cbe7598c \; --hash=sha256:d965bba47ddeec8cd560687584e88cf699fd28f192ceb452d1d7ee807c5597b7 \; --hash=sha256:db364eca23f876da6f9e16c9da0df51aa4f104a972735574842618b8c6d999d4 \; --hash=sha256:ddbb2551d7e0102e7252db79ba445cdab71b26640817ab1e3e3648dad515003b \; --hash=sha256:deb6be0ac38ece9ba87dea880e438f25ca3eddfac8b002a2ec3d9183a454e8ae \; --hash=sha256:e06ed3e,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:6504,Security,hash,hash,6504,07547001 \; --hash=sha256:9f96df6923e21816da7e0ad3fd47dd8f94b2a5ce594e00677c0013018b813458 \; --hash=sha256:a10af20b82360ab00827f916a6058451b723b4e65030c5a18577c8b2de5b3389 \; --hash=sha256:a50aebfa173e157099939b17f18600f72f84eed3049e743b68ad15bd69b6bf99 \; --hash=sha256:a981a536974bbc7a512cf44ed14938cf01030a99e9b3a06dd59578882f06f985 \; --hash=sha256:a9a8e9031d613fd2009c182b69c7b2c1ef8239a0efb1df3f7c8da66d5dd3d537 \; --hash=sha256:ae5f4161f18c61806f411a13b0310bea87f987c7d2ecdbdaad0e94eb2e404238 \; --hash=sha256:aed38f6e4fb3f5d6bf81bfa990a07806be9d83cf7bacef998ab1a9bd660a581f \; --hash=sha256:b01b88d45a6fcb69667cd6d2f7a9aeb4bf53760d7fc536bf679ec94fe9f3ff3d \; --hash=sha256:b261ccdec7821281dade748d088bb6e9b69e6d15b30652b74cbbac25e280b796 \; --hash=sha256:b2b0a0c0517616b6869869f8c581d4eb2dd83a4d79e0ebcb7d373ef9956aeb0a \; --hash=sha256:b4a23f61ce87adf89be746c8a8974fe1c823c891d8f86eb218bb957c924bb143 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \; --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \; --hash=sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711 \; --hash=sha256:c235ebd9baae02f1b77bcea61bce332cb4331dc3617d254df3323aa01ab47bd4 \; --hash=sha256:cd70574b12bb8a4d2aaa0094515df2463cb429d8536cfb6c7ce983246983e5a6 \; --hash=sha256:d0eccceffcb53201b5bfebb52600a5fb483a20b61da9dbc885f8b103cbe7598c \; --hash=sha256:d965bba47ddeec8cd560687584e88cf699fd28f192ceb452d1d7ee807c5597b7 \; --hash=sha256:db364eca23f876da6f9e16c9da0df51aa4f104a972735574842618b8c6d999d4 \; --hash=sha256:ddbb2551d7e0102e7252db79ba445cdab71b26640817ab1e3e3648dad515003b \; --hash=sha256:deb6be0ac38ece9ba87dea880e438f25ca3eddfac8b002a2ec3d9183a454e8ae \; --hash=sha256:e06ed3eb3218bc64786f7db41917d4e686cc4856944f53d5bdf83a6884432e12 \; --hash=sha256:e27ad93,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:6586,Security,hash,hash,6586,8b813458 \; --hash=sha256:a10af20b82360ab00827f916a6058451b723b4e65030c5a18577c8b2de5b3389 \; --hash=sha256:a50aebfa173e157099939b17f18600f72f84eed3049e743b68ad15bd69b6bf99 \; --hash=sha256:a981a536974bbc7a512cf44ed14938cf01030a99e9b3a06dd59578882f06f985 \; --hash=sha256:a9a8e9031d613fd2009c182b69c7b2c1ef8239a0efb1df3f7c8da66d5dd3d537 \; --hash=sha256:ae5f4161f18c61806f411a13b0310bea87f987c7d2ecdbdaad0e94eb2e404238 \; --hash=sha256:aed38f6e4fb3f5d6bf81bfa990a07806be9d83cf7bacef998ab1a9bd660a581f \; --hash=sha256:b01b88d45a6fcb69667cd6d2f7a9aeb4bf53760d7fc536bf679ec94fe9f3ff3d \; --hash=sha256:b261ccdec7821281dade748d088bb6e9b69e6d15b30652b74cbbac25e280b796 \; --hash=sha256:b2b0a0c0517616b6869869f8c581d4eb2dd83a4d79e0ebcb7d373ef9956aeb0a \; --hash=sha256:b4a23f61ce87adf89be746c8a8974fe1c823c891d8f86eb218bb957c924bb143 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \; --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \; --hash=sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711 \; --hash=sha256:c235ebd9baae02f1b77bcea61bce332cb4331dc3617d254df3323aa01ab47bd4 \; --hash=sha256:cd70574b12bb8a4d2aaa0094515df2463cb429d8536cfb6c7ce983246983e5a6 \; --hash=sha256:d0eccceffcb53201b5bfebb52600a5fb483a20b61da9dbc885f8b103cbe7598c \; --hash=sha256:d965bba47ddeec8cd560687584e88cf699fd28f192ceb452d1d7ee807c5597b7 \; --hash=sha256:db364eca23f876da6f9e16c9da0df51aa4f104a972735574842618b8c6d999d4 \; --hash=sha256:ddbb2551d7e0102e7252db79ba445cdab71b26640817ab1e3e3648dad515003b \; --hash=sha256:deb6be0ac38ece9ba87dea880e438f25ca3eddfac8b002a2ec3d9183a454e8ae \; --hash=sha256:e06ed3eb3218bc64786f7db41917d4e686cc4856944f53d5bdf83a6884432e12 \; --hash=sha256:e27ad930a842b4c5eb8ac0016b0a54f5aebbe679340c26101df33424142c143c \; --hash=sha256:e537484,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:6668,Security,hash,hash,6668,de5b3389 \; --hash=sha256:a50aebfa173e157099939b17f18600f72f84eed3049e743b68ad15bd69b6bf99 \; --hash=sha256:a981a536974bbc7a512cf44ed14938cf01030a99e9b3a06dd59578882f06f985 \; --hash=sha256:a9a8e9031d613fd2009c182b69c7b2c1ef8239a0efb1df3f7c8da66d5dd3d537 \; --hash=sha256:ae5f4161f18c61806f411a13b0310bea87f987c7d2ecdbdaad0e94eb2e404238 \; --hash=sha256:aed38f6e4fb3f5d6bf81bfa990a07806be9d83cf7bacef998ab1a9bd660a581f \; --hash=sha256:b01b88d45a6fcb69667cd6d2f7a9aeb4bf53760d7fc536bf679ec94fe9f3ff3d \; --hash=sha256:b261ccdec7821281dade748d088bb6e9b69e6d15b30652b74cbbac25e280b796 \; --hash=sha256:b2b0a0c0517616b6869869f8c581d4eb2dd83a4d79e0ebcb7d373ef9956aeb0a \; --hash=sha256:b4a23f61ce87adf89be746c8a8974fe1c823c891d8f86eb218bb957c924bb143 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \; --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \; --hash=sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711 \; --hash=sha256:c235ebd9baae02f1b77bcea61bce332cb4331dc3617d254df3323aa01ab47bd4 \; --hash=sha256:cd70574b12bb8a4d2aaa0094515df2463cb429d8536cfb6c7ce983246983e5a6 \; --hash=sha256:d0eccceffcb53201b5bfebb52600a5fb483a20b61da9dbc885f8b103cbe7598c \; --hash=sha256:d965bba47ddeec8cd560687584e88cf699fd28f192ceb452d1d7ee807c5597b7 \; --hash=sha256:db364eca23f876da6f9e16c9da0df51aa4f104a972735574842618b8c6d999d4 \; --hash=sha256:ddbb2551d7e0102e7252db79ba445cdab71b26640817ab1e3e3648dad515003b \; --hash=sha256:deb6be0ac38ece9ba87dea880e438f25ca3eddfac8b002a2ec3d9183a454e8ae \; --hash=sha256:e06ed3eb3218bc64786f7db41917d4e686cc4856944f53d5bdf83a6884432e12 \; --hash=sha256:e27ad930a842b4c5eb8ac0016b0a54f5aebbe679340c26101df33424142c143c \; --hash=sha256:e537484df0d8f426ce2afb2d0f8e1c3d0b114b83f8850e5f2fbea0e797bd82ae \; --hash=sha256:eb00ed9,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:6750,Security,hash,hash,6750,69b6bf99 \; --hash=sha256:a981a536974bbc7a512cf44ed14938cf01030a99e9b3a06dd59578882f06f985 \; --hash=sha256:a9a8e9031d613fd2009c182b69c7b2c1ef8239a0efb1df3f7c8da66d5dd3d537 \; --hash=sha256:ae5f4161f18c61806f411a13b0310bea87f987c7d2ecdbdaad0e94eb2e404238 \; --hash=sha256:aed38f6e4fb3f5d6bf81bfa990a07806be9d83cf7bacef998ab1a9bd660a581f \; --hash=sha256:b01b88d45a6fcb69667cd6d2f7a9aeb4bf53760d7fc536bf679ec94fe9f3ff3d \; --hash=sha256:b261ccdec7821281dade748d088bb6e9b69e6d15b30652b74cbbac25e280b796 \; --hash=sha256:b2b0a0c0517616b6869869f8c581d4eb2dd83a4d79e0ebcb7d373ef9956aeb0a \; --hash=sha256:b4a23f61ce87adf89be746c8a8974fe1c823c891d8f86eb218bb957c924bb143 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \; --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \; --hash=sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711 \; --hash=sha256:c235ebd9baae02f1b77bcea61bce332cb4331dc3617d254df3323aa01ab47bd4 \; --hash=sha256:cd70574b12bb8a4d2aaa0094515df2463cb429d8536cfb6c7ce983246983e5a6 \; --hash=sha256:d0eccceffcb53201b5bfebb52600a5fb483a20b61da9dbc885f8b103cbe7598c \; --hash=sha256:d965bba47ddeec8cd560687584e88cf699fd28f192ceb452d1d7ee807c5597b7 \; --hash=sha256:db364eca23f876da6f9e16c9da0df51aa4f104a972735574842618b8c6d999d4 \; --hash=sha256:ddbb2551d7e0102e7252db79ba445cdab71b26640817ab1e3e3648dad515003b \; --hash=sha256:deb6be0ac38ece9ba87dea880e438f25ca3eddfac8b002a2ec3d9183a454e8ae \; --hash=sha256:e06ed3eb3218bc64786f7db41917d4e686cc4856944f53d5bdf83a6884432e12 \; --hash=sha256:e27ad930a842b4c5eb8ac0016b0a54f5aebbe679340c26101df33424142c143c \; --hash=sha256:e537484df0d8f426ce2afb2d0f8e1c3d0b114b83f8850e5f2fbea0e797bd82ae \; --hash=sha256:eb00ed941194665c332bf8e078baf037d6c35d7c4f3102ea2d4f16ca94a26dc8 \; --hash=sha256:eb6904c,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:6832,Security,hash,hash,6832,2f06f985 \; --hash=sha256:a9a8e9031d613fd2009c182b69c7b2c1ef8239a0efb1df3f7c8da66d5dd3d537 \; --hash=sha256:ae5f4161f18c61806f411a13b0310bea87f987c7d2ecdbdaad0e94eb2e404238 \; --hash=sha256:aed38f6e4fb3f5d6bf81bfa990a07806be9d83cf7bacef998ab1a9bd660a581f \; --hash=sha256:b01b88d45a6fcb69667cd6d2f7a9aeb4bf53760d7fc536bf679ec94fe9f3ff3d \; --hash=sha256:b261ccdec7821281dade748d088bb6e9b69e6d15b30652b74cbbac25e280b796 \; --hash=sha256:b2b0a0c0517616b6869869f8c581d4eb2dd83a4d79e0ebcb7d373ef9956aeb0a \; --hash=sha256:b4a23f61ce87adf89be746c8a8974fe1c823c891d8f86eb218bb957c924bb143 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \; --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \; --hash=sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711 \; --hash=sha256:c235ebd9baae02f1b77bcea61bce332cb4331dc3617d254df3323aa01ab47bd4 \; --hash=sha256:cd70574b12bb8a4d2aaa0094515df2463cb429d8536cfb6c7ce983246983e5a6 \; --hash=sha256:d0eccceffcb53201b5bfebb52600a5fb483a20b61da9dbc885f8b103cbe7598c \; --hash=sha256:d965bba47ddeec8cd560687584e88cf699fd28f192ceb452d1d7ee807c5597b7 \; --hash=sha256:db364eca23f876da6f9e16c9da0df51aa4f104a972735574842618b8c6d999d4 \; --hash=sha256:ddbb2551d7e0102e7252db79ba445cdab71b26640817ab1e3e3648dad515003b \; --hash=sha256:deb6be0ac38ece9ba87dea880e438f25ca3eddfac8b002a2ec3d9183a454e8ae \; --hash=sha256:e06ed3eb3218bc64786f7db41917d4e686cc4856944f53d5bdf83a6884432e12 \; --hash=sha256:e27ad930a842b4c5eb8ac0016b0a54f5aebbe679340c26101df33424142c143c \; --hash=sha256:e537484df0d8f426ce2afb2d0f8e1c3d0b114b83f8850e5f2fbea0e797bd82ae \; --hash=sha256:eb00ed941194665c332bf8e078baf037d6c35d7c4f3102ea2d4f16ca94a26dc8 \; --hash=sha256:eb6904c354526e758fda7167b33005998fb68c46fbc10e013ca97f21ca5c8887 \; --hash=sha256:eb8821e,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:6914,Security,hash,hash,6914,5dd3d537 \; --hash=sha256:ae5f4161f18c61806f411a13b0310bea87f987c7d2ecdbdaad0e94eb2e404238 \; --hash=sha256:aed38f6e4fb3f5d6bf81bfa990a07806be9d83cf7bacef998ab1a9bd660a581f \; --hash=sha256:b01b88d45a6fcb69667cd6d2f7a9aeb4bf53760d7fc536bf679ec94fe9f3ff3d \; --hash=sha256:b261ccdec7821281dade748d088bb6e9b69e6d15b30652b74cbbac25e280b796 \; --hash=sha256:b2b0a0c0517616b6869869f8c581d4eb2dd83a4d79e0ebcb7d373ef9956aeb0a \; --hash=sha256:b4a23f61ce87adf89be746c8a8974fe1c823c891d8f86eb218bb957c924bb143 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \; --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \; --hash=sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711 \; --hash=sha256:c235ebd9baae02f1b77bcea61bce332cb4331dc3617d254df3323aa01ab47bd4 \; --hash=sha256:cd70574b12bb8a4d2aaa0094515df2463cb429d8536cfb6c7ce983246983e5a6 \; --hash=sha256:d0eccceffcb53201b5bfebb52600a5fb483a20b61da9dbc885f8b103cbe7598c \; --hash=sha256:d965bba47ddeec8cd560687584e88cf699fd28f192ceb452d1d7ee807c5597b7 \; --hash=sha256:db364eca23f876da6f9e16c9da0df51aa4f104a972735574842618b8c6d999d4 \; --hash=sha256:ddbb2551d7e0102e7252db79ba445cdab71b26640817ab1e3e3648dad515003b \; --hash=sha256:deb6be0ac38ece9ba87dea880e438f25ca3eddfac8b002a2ec3d9183a454e8ae \; --hash=sha256:e06ed3eb3218bc64786f7db41917d4e686cc4856944f53d5bdf83a6884432e12 \; --hash=sha256:e27ad930a842b4c5eb8ac0016b0a54f5aebbe679340c26101df33424142c143c \; --hash=sha256:e537484df0d8f426ce2afb2d0f8e1c3d0b114b83f8850e5f2fbea0e797bd82ae \; --hash=sha256:eb00ed941194665c332bf8e078baf037d6c35d7c4f3102ea2d4f16ca94a26dc8 \; --hash=sha256:eb6904c354526e758fda7167b33005998fb68c46fbc10e013ca97f21ca5c8887 \; --hash=sha256:eb8821e09e916165e160797a6c17edda0679379a4be5c716c260e836e122f54b \; --hash=sha256:efcb3f6,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:6996,Security,hash,hash,6996,2e404238 \; --hash=sha256:aed38f6e4fb3f5d6bf81bfa990a07806be9d83cf7bacef998ab1a9bd660a581f \; --hash=sha256:b01b88d45a6fcb69667cd6d2f7a9aeb4bf53760d7fc536bf679ec94fe9f3ff3d \; --hash=sha256:b261ccdec7821281dade748d088bb6e9b69e6d15b30652b74cbbac25e280b796 \; --hash=sha256:b2b0a0c0517616b6869869f8c581d4eb2dd83a4d79e0ebcb7d373ef9956aeb0a \; --hash=sha256:b4a23f61ce87adf89be746c8a8974fe1c823c891d8f86eb218bb957c924bb143 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \; --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \; --hash=sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711 \; --hash=sha256:c235ebd9baae02f1b77bcea61bce332cb4331dc3617d254df3323aa01ab47bd4 \; --hash=sha256:cd70574b12bb8a4d2aaa0094515df2463cb429d8536cfb6c7ce983246983e5a6 \; --hash=sha256:d0eccceffcb53201b5bfebb52600a5fb483a20b61da9dbc885f8b103cbe7598c \; --hash=sha256:d965bba47ddeec8cd560687584e88cf699fd28f192ceb452d1d7ee807c5597b7 \; --hash=sha256:db364eca23f876da6f9e16c9da0df51aa4f104a972735574842618b8c6d999d4 \; --hash=sha256:ddbb2551d7e0102e7252db79ba445cdab71b26640817ab1e3e3648dad515003b \; --hash=sha256:deb6be0ac38ece9ba87dea880e438f25ca3eddfac8b002a2ec3d9183a454e8ae \; --hash=sha256:e06ed3eb3218bc64786f7db41917d4e686cc4856944f53d5bdf83a6884432e12 \; --hash=sha256:e27ad930a842b4c5eb8ac0016b0a54f5aebbe679340c26101df33424142c143c \; --hash=sha256:e537484df0d8f426ce2afb2d0f8e1c3d0b114b83f8850e5f2fbea0e797bd82ae \; --hash=sha256:eb00ed941194665c332bf8e078baf037d6c35d7c4f3102ea2d4f16ca94a26dc8 \; --hash=sha256:eb6904c354526e758fda7167b33005998fb68c46fbc10e013ca97f21ca5c8887 \; --hash=sha256:eb8821e09e916165e160797a6c17edda0679379a4be5c716c260e836e122f54b \; --hash=sha256:efcb3f6676480691518c177e3b465bcddf57cea040302f9f4e6e191af91174d4 \; --hash=sha256:f27273b,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:7078,Security,hash,hash,7078,660a581f \; --hash=sha256:b01b88d45a6fcb69667cd6d2f7a9aeb4bf53760d7fc536bf679ec94fe9f3ff3d \; --hash=sha256:b261ccdec7821281dade748d088bb6e9b69e6d15b30652b74cbbac25e280b796 \; --hash=sha256:b2b0a0c0517616b6869869f8c581d4eb2dd83a4d79e0ebcb7d373ef9956aeb0a \; --hash=sha256:b4a23f61ce87adf89be746c8a8974fe1c823c891d8f86eb218bb957c924bb143 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \; --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \; --hash=sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711 \; --hash=sha256:c235ebd9baae02f1b77bcea61bce332cb4331dc3617d254df3323aa01ab47bd4 \; --hash=sha256:cd70574b12bb8a4d2aaa0094515df2463cb429d8536cfb6c7ce983246983e5a6 \; --hash=sha256:d0eccceffcb53201b5bfebb52600a5fb483a20b61da9dbc885f8b103cbe7598c \; --hash=sha256:d965bba47ddeec8cd560687584e88cf699fd28f192ceb452d1d7ee807c5597b7 \; --hash=sha256:db364eca23f876da6f9e16c9da0df51aa4f104a972735574842618b8c6d999d4 \; --hash=sha256:ddbb2551d7e0102e7252db79ba445cdab71b26640817ab1e3e3648dad515003b \; --hash=sha256:deb6be0ac38ece9ba87dea880e438f25ca3eddfac8b002a2ec3d9183a454e8ae \; --hash=sha256:e06ed3eb3218bc64786f7db41917d4e686cc4856944f53d5bdf83a6884432e12 \; --hash=sha256:e27ad930a842b4c5eb8ac0016b0a54f5aebbe679340c26101df33424142c143c \; --hash=sha256:e537484df0d8f426ce2afb2d0f8e1c3d0b114b83f8850e5f2fbea0e797bd82ae \; --hash=sha256:eb00ed941194665c332bf8e078baf037d6c35d7c4f3102ea2d4f16ca94a26dc8 \; --hash=sha256:eb6904c354526e758fda7167b33005998fb68c46fbc10e013ca97f21ca5c8887 \; --hash=sha256:eb8821e09e916165e160797a6c17edda0679379a4be5c716c260e836e122f54b \; --hash=sha256:efcb3f6676480691518c177e3b465bcddf57cea040302f9f4e6e191af91174d4 \; --hash=sha256:f27273b60488abe721a075bcca6d7f3964f9f6f067c8c4c605743023d7d3944f \; --hash=sha256:f30c3cb,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:7160,Security,hash,hash,7160,e9f3ff3d \; --hash=sha256:b261ccdec7821281dade748d088bb6e9b69e6d15b30652b74cbbac25e280b796 \; --hash=sha256:b2b0a0c0517616b6869869f8c581d4eb2dd83a4d79e0ebcb7d373ef9956aeb0a \; --hash=sha256:b4a23f61ce87adf89be746c8a8974fe1c823c891d8f86eb218bb957c924bb143 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \; --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \; --hash=sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711 \; --hash=sha256:c235ebd9baae02f1b77bcea61bce332cb4331dc3617d254df3323aa01ab47bd4 \; --hash=sha256:cd70574b12bb8a4d2aaa0094515df2463cb429d8536cfb6c7ce983246983e5a6 \; --hash=sha256:d0eccceffcb53201b5bfebb52600a5fb483a20b61da9dbc885f8b103cbe7598c \; --hash=sha256:d965bba47ddeec8cd560687584e88cf699fd28f192ceb452d1d7ee807c5597b7 \; --hash=sha256:db364eca23f876da6f9e16c9da0df51aa4f104a972735574842618b8c6d999d4 \; --hash=sha256:ddbb2551d7e0102e7252db79ba445cdab71b26640817ab1e3e3648dad515003b \; --hash=sha256:deb6be0ac38ece9ba87dea880e438f25ca3eddfac8b002a2ec3d9183a454e8ae \; --hash=sha256:e06ed3eb3218bc64786f7db41917d4e686cc4856944f53d5bdf83a6884432e12 \; --hash=sha256:e27ad930a842b4c5eb8ac0016b0a54f5aebbe679340c26101df33424142c143c \; --hash=sha256:e537484df0d8f426ce2afb2d0f8e1c3d0b114b83f8850e5f2fbea0e797bd82ae \; --hash=sha256:eb00ed941194665c332bf8e078baf037d6c35d7c4f3102ea2d4f16ca94a26dc8 \; --hash=sha256:eb6904c354526e758fda7167b33005998fb68c46fbc10e013ca97f21ca5c8887 \; --hash=sha256:eb8821e09e916165e160797a6c17edda0679379a4be5c716c260e836e122f54b \; --hash=sha256:efcb3f6676480691518c177e3b465bcddf57cea040302f9f4e6e191af91174d4 \; --hash=sha256:f27273b60488abe721a075bcca6d7f3964f9f6f067c8c4c605743023d7d3944f \; --hash=sha256:f30c3cb33b24454a82faecaf01b19c18562b1e89558fb6c56de4d9118a032fd5 \; --hash=sha256:fb69256,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:7242,Security,hash,hash,7242,e280b796 \; --hash=sha256:b2b0a0c0517616b6869869f8c581d4eb2dd83a4d79e0ebcb7d373ef9956aeb0a \; --hash=sha256:b4a23f61ce87adf89be746c8a8974fe1c823c891d8f86eb218bb957c924bb143 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \; --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \; --hash=sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711 \; --hash=sha256:c235ebd9baae02f1b77bcea61bce332cb4331dc3617d254df3323aa01ab47bd4 \; --hash=sha256:cd70574b12bb8a4d2aaa0094515df2463cb429d8536cfb6c7ce983246983e5a6 \; --hash=sha256:d0eccceffcb53201b5bfebb52600a5fb483a20b61da9dbc885f8b103cbe7598c \; --hash=sha256:d965bba47ddeec8cd560687584e88cf699fd28f192ceb452d1d7ee807c5597b7 \; --hash=sha256:db364eca23f876da6f9e16c9da0df51aa4f104a972735574842618b8c6d999d4 \; --hash=sha256:ddbb2551d7e0102e7252db79ba445cdab71b26640817ab1e3e3648dad515003b \; --hash=sha256:deb6be0ac38ece9ba87dea880e438f25ca3eddfac8b002a2ec3d9183a454e8ae \; --hash=sha256:e06ed3eb3218bc64786f7db41917d4e686cc4856944f53d5bdf83a6884432e12 \; --hash=sha256:e27ad930a842b4c5eb8ac0016b0a54f5aebbe679340c26101df33424142c143c \; --hash=sha256:e537484df0d8f426ce2afb2d0f8e1c3d0b114b83f8850e5f2fbea0e797bd82ae \; --hash=sha256:eb00ed941194665c332bf8e078baf037d6c35d7c4f3102ea2d4f16ca94a26dc8 \; --hash=sha256:eb6904c354526e758fda7167b33005998fb68c46fbc10e013ca97f21ca5c8887 \; --hash=sha256:eb8821e09e916165e160797a6c17edda0679379a4be5c716c260e836e122f54b \; --hash=sha256:efcb3f6676480691518c177e3b465bcddf57cea040302f9f4e6e191af91174d4 \; --hash=sha256:f27273b60488abe721a075bcca6d7f3964f9f6f067c8c4c605743023d7d3944f \; --hash=sha256:f30c3cb33b24454a82faecaf01b19c18562b1e89558fb6c56de4d9118a032fd5 \; --hash=sha256:fb69256e180cb6c8a894fee62b3afebae785babc1ee98b81cdf68bbca1987f33 \; --hash=sha256:fd1abc0,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:7324,Security,hash,hash,7324,956aeb0a \; --hash=sha256:b4a23f61ce87adf89be746c8a8974fe1c823c891d8f86eb218bb957c924bb143 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \; --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \; --hash=sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711 \; --hash=sha256:c235ebd9baae02f1b77bcea61bce332cb4331dc3617d254df3323aa01ab47bd4 \; --hash=sha256:cd70574b12bb8a4d2aaa0094515df2463cb429d8536cfb6c7ce983246983e5a6 \; --hash=sha256:d0eccceffcb53201b5bfebb52600a5fb483a20b61da9dbc885f8b103cbe7598c \; --hash=sha256:d965bba47ddeec8cd560687584e88cf699fd28f192ceb452d1d7ee807c5597b7 \; --hash=sha256:db364eca23f876da6f9e16c9da0df51aa4f104a972735574842618b8c6d999d4 \; --hash=sha256:ddbb2551d7e0102e7252db79ba445cdab71b26640817ab1e3e3648dad515003b \; --hash=sha256:deb6be0ac38ece9ba87dea880e438f25ca3eddfac8b002a2ec3d9183a454e8ae \; --hash=sha256:e06ed3eb3218bc64786f7db41917d4e686cc4856944f53d5bdf83a6884432e12 \; --hash=sha256:e27ad930a842b4c5eb8ac0016b0a54f5aebbe679340c26101df33424142c143c \; --hash=sha256:e537484df0d8f426ce2afb2d0f8e1c3d0b114b83f8850e5f2fbea0e797bd82ae \; --hash=sha256:eb00ed941194665c332bf8e078baf037d6c35d7c4f3102ea2d4f16ca94a26dc8 \; --hash=sha256:eb6904c354526e758fda7167b33005998fb68c46fbc10e013ca97f21ca5c8887 \; --hash=sha256:eb8821e09e916165e160797a6c17edda0679379a4be5c716c260e836e122f54b \; --hash=sha256:efcb3f6676480691518c177e3b465bcddf57cea040302f9f4e6e191af91174d4 \; --hash=sha256:f27273b60488abe721a075bcca6d7f3964f9f6f067c8c4c605743023d7d3944f \; --hash=sha256:f30c3cb33b24454a82faecaf01b19c18562b1e89558fb6c56de4d9118a032fd5 \; --hash=sha256:fb69256e180cb6c8a894fee62b3afebae785babc1ee98b81cdf68bbca1987f33 \; --hash=sha256:fd1abc0d89e30cc4e02e4064dc67fcc51bd941eb395c502aac3ec19fab46b519 \; --hash=sha256:ff8fa36,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:7406,Security,hash,hash,7406,924bb143 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \; --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \; --hash=sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711 \; --hash=sha256:c235ebd9baae02f1b77bcea61bce332cb4331dc3617d254df3323aa01ab47bd4 \; --hash=sha256:cd70574b12bb8a4d2aaa0094515df2463cb429d8536cfb6c7ce983246983e5a6 \; --hash=sha256:d0eccceffcb53201b5bfebb52600a5fb483a20b61da9dbc885f8b103cbe7598c \; --hash=sha256:d965bba47ddeec8cd560687584e88cf699fd28f192ceb452d1d7ee807c5597b7 \; --hash=sha256:db364eca23f876da6f9e16c9da0df51aa4f104a972735574842618b8c6d999d4 \; --hash=sha256:ddbb2551d7e0102e7252db79ba445cdab71b26640817ab1e3e3648dad515003b \; --hash=sha256:deb6be0ac38ece9ba87dea880e438f25ca3eddfac8b002a2ec3d9183a454e8ae \; --hash=sha256:e06ed3eb3218bc64786f7db41917d4e686cc4856944f53d5bdf83a6884432e12 \; --hash=sha256:e27ad930a842b4c5eb8ac0016b0a54f5aebbe679340c26101df33424142c143c \; --hash=sha256:e537484df0d8f426ce2afb2d0f8e1c3d0b114b83f8850e5f2fbea0e797bd82ae \; --hash=sha256:eb00ed941194665c332bf8e078baf037d6c35d7c4f3102ea2d4f16ca94a26dc8 \; --hash=sha256:eb6904c354526e758fda7167b33005998fb68c46fbc10e013ca97f21ca5c8887 \; --hash=sha256:eb8821e09e916165e160797a6c17edda0679379a4be5c716c260e836e122f54b \; --hash=sha256:efcb3f6676480691518c177e3b465bcddf57cea040302f9f4e6e191af91174d4 \; --hash=sha256:f27273b60488abe721a075bcca6d7f3964f9f6f067c8c4c605743023d7d3944f \; --hash=sha256:f30c3cb33b24454a82faecaf01b19c18562b1e89558fb6c56de4d9118a032fd5 \; --hash=sha256:fb69256e180cb6c8a894fee62b3afebae785babc1ee98b81cdf68bbca1987f33 \; --hash=sha256:fd1abc0d89e30cc4e02e4064dc67fcc51bd941eb395c502aac3ec19fab46b519 \; --hash=sha256:ff8fa367d09b717b2a17a052544193ad76cd49979c805768879cb63d9ca50561; # via requests; commonm,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:7488,Security,hash,hash,7488,3 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \; --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \; --hash=sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711 \; --hash=sha256:c235ebd9baae02f1b77bcea61bce332cb4331dc3617d254df3323aa01ab47bd4 \; --hash=sha256:cd70574b12bb8a4d2aaa0094515df2463cb429d8536cfb6c7ce983246983e5a6 \; --hash=sha256:d0eccceffcb53201b5bfebb52600a5fb483a20b61da9dbc885f8b103cbe7598c \; --hash=sha256:d965bba47ddeec8cd560687584e88cf699fd28f192ceb452d1d7ee807c5597b7 \; --hash=sha256:db364eca23f876da6f9e16c9da0df51aa4f104a972735574842618b8c6d999d4 \; --hash=sha256:ddbb2551d7e0102e7252db79ba445cdab71b26640817ab1e3e3648dad515003b \; --hash=sha256:deb6be0ac38ece9ba87dea880e438f25ca3eddfac8b002a2ec3d9183a454e8ae \; --hash=sha256:e06ed3eb3218bc64786f7db41917d4e686cc4856944f53d5bdf83a6884432e12 \; --hash=sha256:e27ad930a842b4c5eb8ac0016b0a54f5aebbe679340c26101df33424142c143c \; --hash=sha256:e537484df0d8f426ce2afb2d0f8e1c3d0b114b83f8850e5f2fbea0e797bd82ae \; --hash=sha256:eb00ed941194665c332bf8e078baf037d6c35d7c4f3102ea2d4f16ca94a26dc8 \; --hash=sha256:eb6904c354526e758fda7167b33005998fb68c46fbc10e013ca97f21ca5c8887 \; --hash=sha256:eb8821e09e916165e160797a6c17edda0679379a4be5c716c260e836e122f54b \; --hash=sha256:efcb3f6676480691518c177e3b465bcddf57cea040302f9f4e6e191af91174d4 \; --hash=sha256:f27273b60488abe721a075bcca6d7f3964f9f6f067c8c4c605743023d7d3944f \; --hash=sha256:f30c3cb33b24454a82faecaf01b19c18562b1e89558fb6c56de4d9118a032fd5 \; --hash=sha256:fb69256e180cb6c8a894fee62b3afebae785babc1ee98b81cdf68bbca1987f33 \; --hash=sha256:fd1abc0d89e30cc4e02e4064dc67fcc51bd941eb395c502aac3ec19fab46b519 \; --hash=sha256:ff8fa367d09b717b2a17a052544193ad76cd49979c805768879cb63d9ca50561; # via requests; commonmark==0.,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:7570,Security,hash,hash,7570,3 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \; --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \; --hash=sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711 \; --hash=sha256:c235ebd9baae02f1b77bcea61bce332cb4331dc3617d254df3323aa01ab47bd4 \; --hash=sha256:cd70574b12bb8a4d2aaa0094515df2463cb429d8536cfb6c7ce983246983e5a6 \; --hash=sha256:d0eccceffcb53201b5bfebb52600a5fb483a20b61da9dbc885f8b103cbe7598c \; --hash=sha256:d965bba47ddeec8cd560687584e88cf699fd28f192ceb452d1d7ee807c5597b7 \; --hash=sha256:db364eca23f876da6f9e16c9da0df51aa4f104a972735574842618b8c6d999d4 \; --hash=sha256:ddbb2551d7e0102e7252db79ba445cdab71b26640817ab1e3e3648dad515003b \; --hash=sha256:deb6be0ac38ece9ba87dea880e438f25ca3eddfac8b002a2ec3d9183a454e8ae \; --hash=sha256:e06ed3eb3218bc64786f7db41917d4e686cc4856944f53d5bdf83a6884432e12 \; --hash=sha256:e27ad930a842b4c5eb8ac0016b0a54f5aebbe679340c26101df33424142c143c \; --hash=sha256:e537484df0d8f426ce2afb2d0f8e1c3d0b114b83f8850e5f2fbea0e797bd82ae \; --hash=sha256:eb00ed941194665c332bf8e078baf037d6c35d7c4f3102ea2d4f16ca94a26dc8 \; --hash=sha256:eb6904c354526e758fda7167b33005998fb68c46fbc10e013ca97f21ca5c8887 \; --hash=sha256:eb8821e09e916165e160797a6c17edda0679379a4be5c716c260e836e122f54b \; --hash=sha256:efcb3f6676480691518c177e3b465bcddf57cea040302f9f4e6e191af91174d4 \; --hash=sha256:f27273b60488abe721a075bcca6d7f3964f9f6f067c8c4c605743023d7d3944f \; --hash=sha256:f30c3cb33b24454a82faecaf01b19c18562b1e89558fb6c56de4d9118a032fd5 \; --hash=sha256:fb69256e180cb6c8a894fee62b3afebae785babc1ee98b81cdf68bbca1987f33 \; --hash=sha256:fd1abc0d89e30cc4e02e4064dc67fcc51bd941eb395c502aac3ec19fab46b519 \; --hash=sha256:ff8fa367d09b717b2a17a052544193ad76cd49979c805768879cb63d9ca50561; # via requests; commonmark==0.,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:7652,Security,hash,hash,7652,3 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \; --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \; --hash=sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711 \; --hash=sha256:c235ebd9baae02f1b77bcea61bce332cb4331dc3617d254df3323aa01ab47bd4 \; --hash=sha256:cd70574b12bb8a4d2aaa0094515df2463cb429d8536cfb6c7ce983246983e5a6 \; --hash=sha256:d0eccceffcb53201b5bfebb52600a5fb483a20b61da9dbc885f8b103cbe7598c \; --hash=sha256:d965bba47ddeec8cd560687584e88cf699fd28f192ceb452d1d7ee807c5597b7 \; --hash=sha256:db364eca23f876da6f9e16c9da0df51aa4f104a972735574842618b8c6d999d4 \; --hash=sha256:ddbb2551d7e0102e7252db79ba445cdab71b26640817ab1e3e3648dad515003b \; --hash=sha256:deb6be0ac38ece9ba87dea880e438f25ca3eddfac8b002a2ec3d9183a454e8ae \; --hash=sha256:e06ed3eb3218bc64786f7db41917d4e686cc4856944f53d5bdf83a6884432e12 \; --hash=sha256:e27ad930a842b4c5eb8ac0016b0a54f5aebbe679340c26101df33424142c143c \; --hash=sha256:e537484df0d8f426ce2afb2d0f8e1c3d0b114b83f8850e5f2fbea0e797bd82ae \; --hash=sha256:eb00ed941194665c332bf8e078baf037d6c35d7c4f3102ea2d4f16ca94a26dc8 \; --hash=sha256:eb6904c354526e758fda7167b33005998fb68c46fbc10e013ca97f21ca5c8887 \; --hash=sha256:eb8821e09e916165e160797a6c17edda0679379a4be5c716c260e836e122f54b \; --hash=sha256:efcb3f6676480691518c177e3b465bcddf57cea040302f9f4e6e191af91174d4 \; --hash=sha256:f27273b60488abe721a075bcca6d7f3964f9f6f067c8c4c605743023d7d3944f \; --hash=sha256:f30c3cb33b24454a82faecaf01b19c18562b1e89558fb6c56de4d9118a032fd5 \; --hash=sha256:fb69256e180cb6c8a894fee62b3afebae785babc1ee98b81cdf68bbca1987f33 \; --hash=sha256:fd1abc0d89e30cc4e02e4064dc67fcc51bd941eb395c502aac3ec19fab46b519 \; --hash=sha256:ff8fa367d09b717b2a17a052544193ad76cd49979c805768879cb63d9ca50561; # via requests; commonmark==0.,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:7734,Security,hash,hash,7734,3 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \; --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \; --hash=sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711 \; --hash=sha256:c235ebd9baae02f1b77bcea61bce332cb4331dc3617d254df3323aa01ab47bd4 \; --hash=sha256:cd70574b12bb8a4d2aaa0094515df2463cb429d8536cfb6c7ce983246983e5a6 \; --hash=sha256:d0eccceffcb53201b5bfebb52600a5fb483a20b61da9dbc885f8b103cbe7598c \; --hash=sha256:d965bba47ddeec8cd560687584e88cf699fd28f192ceb452d1d7ee807c5597b7 \; --hash=sha256:db364eca23f876da6f9e16c9da0df51aa4f104a972735574842618b8c6d999d4 \; --hash=sha256:ddbb2551d7e0102e7252db79ba445cdab71b26640817ab1e3e3648dad515003b \; --hash=sha256:deb6be0ac38ece9ba87dea880e438f25ca3eddfac8b002a2ec3d9183a454e8ae \; --hash=sha256:e06ed3eb3218bc64786f7db41917d4e686cc4856944f53d5bdf83a6884432e12 \; --hash=sha256:e27ad930a842b4c5eb8ac0016b0a54f5aebbe679340c26101df33424142c143c \; --hash=sha256:e537484df0d8f426ce2afb2d0f8e1c3d0b114b83f8850e5f2fbea0e797bd82ae \; --hash=sha256:eb00ed941194665c332bf8e078baf037d6c35d7c4f3102ea2d4f16ca94a26dc8 \; --hash=sha256:eb6904c354526e758fda7167b33005998fb68c46fbc10e013ca97f21ca5c8887 \; --hash=sha256:eb8821e09e916165e160797a6c17edda0679379a4be5c716c260e836e122f54b \; --hash=sha256:efcb3f6676480691518c177e3b465bcddf57cea040302f9f4e6e191af91174d4 \; --hash=sha256:f27273b60488abe721a075bcca6d7f3964f9f6f067c8c4c605743023d7d3944f \; --hash=sha256:f30c3cb33b24454a82faecaf01b19c18562b1e89558fb6c56de4d9118a032fd5 \; --hash=sha256:fb69256e180cb6c8a894fee62b3afebae785babc1ee98b81cdf68bbca1987f33 \; --hash=sha256:fd1abc0d89e30cc4e02e4064dc67fcc51bd941eb395c502aac3ec19fab46b519 \; --hash=sha256:ff8fa367d09b717b2a17a052544193ad76cd49979c805768879cb63d9ca50561; # via requests; commonmark==0.,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:7816,Security,hash,hash,7816,3 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \; --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \; --hash=sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711 \; --hash=sha256:c235ebd9baae02f1b77bcea61bce332cb4331dc3617d254df3323aa01ab47bd4 \; --hash=sha256:cd70574b12bb8a4d2aaa0094515df2463cb429d8536cfb6c7ce983246983e5a6 \; --hash=sha256:d0eccceffcb53201b5bfebb52600a5fb483a20b61da9dbc885f8b103cbe7598c \; --hash=sha256:d965bba47ddeec8cd560687584e88cf699fd28f192ceb452d1d7ee807c5597b7 \; --hash=sha256:db364eca23f876da6f9e16c9da0df51aa4f104a972735574842618b8c6d999d4 \; --hash=sha256:ddbb2551d7e0102e7252db79ba445cdab71b26640817ab1e3e3648dad515003b \; --hash=sha256:deb6be0ac38ece9ba87dea880e438f25ca3eddfac8b002a2ec3d9183a454e8ae \; --hash=sha256:e06ed3eb3218bc64786f7db41917d4e686cc4856944f53d5bdf83a6884432e12 \; --hash=sha256:e27ad930a842b4c5eb8ac0016b0a54f5aebbe679340c26101df33424142c143c \; --hash=sha256:e537484df0d8f426ce2afb2d0f8e1c3d0b114b83f8850e5f2fbea0e797bd82ae \; --hash=sha256:eb00ed941194665c332bf8e078baf037d6c35d7c4f3102ea2d4f16ca94a26dc8 \; --hash=sha256:eb6904c354526e758fda7167b33005998fb68c46fbc10e013ca97f21ca5c8887 \; --hash=sha256:eb8821e09e916165e160797a6c17edda0679379a4be5c716c260e836e122f54b \; --hash=sha256:efcb3f6676480691518c177e3b465bcddf57cea040302f9f4e6e191af91174d4 \; --hash=sha256:f27273b60488abe721a075bcca6d7f3964f9f6f067c8c4c605743023d7d3944f \; --hash=sha256:f30c3cb33b24454a82faecaf01b19c18562b1e89558fb6c56de4d9118a032fd5 \; --hash=sha256:fb69256e180cb6c8a894fee62b3afebae785babc1ee98b81cdf68bbca1987f33 \; --hash=sha256:fd1abc0d89e30cc4e02e4064dc67fcc51bd941eb395c502aac3ec19fab46b519 \; --hash=sha256:ff8fa367d09b717b2a17a052544193ad76cd49979c805768879cb63d9ca50561; # via requests; commonmark==0.,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:7898,Security,hash,hash,7898,3 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \; --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \; --hash=sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711 \; --hash=sha256:c235ebd9baae02f1b77bcea61bce332cb4331dc3617d254df3323aa01ab47bd4 \; --hash=sha256:cd70574b12bb8a4d2aaa0094515df2463cb429d8536cfb6c7ce983246983e5a6 \; --hash=sha256:d0eccceffcb53201b5bfebb52600a5fb483a20b61da9dbc885f8b103cbe7598c \; --hash=sha256:d965bba47ddeec8cd560687584e88cf699fd28f192ceb452d1d7ee807c5597b7 \; --hash=sha256:db364eca23f876da6f9e16c9da0df51aa4f104a972735574842618b8c6d999d4 \; --hash=sha256:ddbb2551d7e0102e7252db79ba445cdab71b26640817ab1e3e3648dad515003b \; --hash=sha256:deb6be0ac38ece9ba87dea880e438f25ca3eddfac8b002a2ec3d9183a454e8ae \; --hash=sha256:e06ed3eb3218bc64786f7db41917d4e686cc4856944f53d5bdf83a6884432e12 \; --hash=sha256:e27ad930a842b4c5eb8ac0016b0a54f5aebbe679340c26101df33424142c143c \; --hash=sha256:e537484df0d8f426ce2afb2d0f8e1c3d0b114b83f8850e5f2fbea0e797bd82ae \; --hash=sha256:eb00ed941194665c332bf8e078baf037d6c35d7c4f3102ea2d4f16ca94a26dc8 \; --hash=sha256:eb6904c354526e758fda7167b33005998fb68c46fbc10e013ca97f21ca5c8887 \; --hash=sha256:eb8821e09e916165e160797a6c17edda0679379a4be5c716c260e836e122f54b \; --hash=sha256:efcb3f6676480691518c177e3b465bcddf57cea040302f9f4e6e191af91174d4 \; --hash=sha256:f27273b60488abe721a075bcca6d7f3964f9f6f067c8c4c605743023d7d3944f \; --hash=sha256:f30c3cb33b24454a82faecaf01b19c18562b1e89558fb6c56de4d9118a032fd5 \; --hash=sha256:fb69256e180cb6c8a894fee62b3afebae785babc1ee98b81cdf68bbca1987f33 \; --hash=sha256:fd1abc0d89e30cc4e02e4064dc67fcc51bd941eb395c502aac3ec19fab46b519 \; --hash=sha256:ff8fa367d09b717b2a17a052544193ad76cd49979c805768879cb63d9ca50561; # via requests; commonmark==0.,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:7980,Security,hash,hash,7980,3 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \; --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \; --hash=sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711 \; --hash=sha256:c235ebd9baae02f1b77bcea61bce332cb4331dc3617d254df3323aa01ab47bd4 \; --hash=sha256:cd70574b12bb8a4d2aaa0094515df2463cb429d8536cfb6c7ce983246983e5a6 \; --hash=sha256:d0eccceffcb53201b5bfebb52600a5fb483a20b61da9dbc885f8b103cbe7598c \; --hash=sha256:d965bba47ddeec8cd560687584e88cf699fd28f192ceb452d1d7ee807c5597b7 \; --hash=sha256:db364eca23f876da6f9e16c9da0df51aa4f104a972735574842618b8c6d999d4 \; --hash=sha256:ddbb2551d7e0102e7252db79ba445cdab71b26640817ab1e3e3648dad515003b \; --hash=sha256:deb6be0ac38ece9ba87dea880e438f25ca3eddfac8b002a2ec3d9183a454e8ae \; --hash=sha256:e06ed3eb3218bc64786f7db41917d4e686cc4856944f53d5bdf83a6884432e12 \; --hash=sha256:e27ad930a842b4c5eb8ac0016b0a54f5aebbe679340c26101df33424142c143c \; --hash=sha256:e537484df0d8f426ce2afb2d0f8e1c3d0b114b83f8850e5f2fbea0e797bd82ae \; --hash=sha256:eb00ed941194665c332bf8e078baf037d6c35d7c4f3102ea2d4f16ca94a26dc8 \; --hash=sha256:eb6904c354526e758fda7167b33005998fb68c46fbc10e013ca97f21ca5c8887 \; --hash=sha256:eb8821e09e916165e160797a6c17edda0679379a4be5c716c260e836e122f54b \; --hash=sha256:efcb3f6676480691518c177e3b465bcddf57cea040302f9f4e6e191af91174d4 \; --hash=sha256:f27273b60488abe721a075bcca6d7f3964f9f6f067c8c4c605743023d7d3944f \; --hash=sha256:f30c3cb33b24454a82faecaf01b19c18562b1e89558fb6c56de4d9118a032fd5 \; --hash=sha256:fb69256e180cb6c8a894fee62b3afebae785babc1ee98b81cdf68bbca1987f33 \; --hash=sha256:fd1abc0d89e30cc4e02e4064dc67fcc51bd941eb395c502aac3ec19fab46b519 \; --hash=sha256:ff8fa367d09b717b2a17a052544193ad76cd49979c805768879cb63d9ca50561; # via requests; commonmark==0.,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:8062,Security,hash,hash,8062,3 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \; --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \; --hash=sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711 \; --hash=sha256:c235ebd9baae02f1b77bcea61bce332cb4331dc3617d254df3323aa01ab47bd4 \; --hash=sha256:cd70574b12bb8a4d2aaa0094515df2463cb429d8536cfb6c7ce983246983e5a6 \; --hash=sha256:d0eccceffcb53201b5bfebb52600a5fb483a20b61da9dbc885f8b103cbe7598c \; --hash=sha256:d965bba47ddeec8cd560687584e88cf699fd28f192ceb452d1d7ee807c5597b7 \; --hash=sha256:db364eca23f876da6f9e16c9da0df51aa4f104a972735574842618b8c6d999d4 \; --hash=sha256:ddbb2551d7e0102e7252db79ba445cdab71b26640817ab1e3e3648dad515003b \; --hash=sha256:deb6be0ac38ece9ba87dea880e438f25ca3eddfac8b002a2ec3d9183a454e8ae \; --hash=sha256:e06ed3eb3218bc64786f7db41917d4e686cc4856944f53d5bdf83a6884432e12 \; --hash=sha256:e27ad930a842b4c5eb8ac0016b0a54f5aebbe679340c26101df33424142c143c \; --hash=sha256:e537484df0d8f426ce2afb2d0f8e1c3d0b114b83f8850e5f2fbea0e797bd82ae \; --hash=sha256:eb00ed941194665c332bf8e078baf037d6c35d7c4f3102ea2d4f16ca94a26dc8 \; --hash=sha256:eb6904c354526e758fda7167b33005998fb68c46fbc10e013ca97f21ca5c8887 \; --hash=sha256:eb8821e09e916165e160797a6c17edda0679379a4be5c716c260e836e122f54b \; --hash=sha256:efcb3f6676480691518c177e3b465bcddf57cea040302f9f4e6e191af91174d4 \; --hash=sha256:f27273b60488abe721a075bcca6d7f3964f9f6f067c8c4c605743023d7d3944f \; --hash=sha256:f30c3cb33b24454a82faecaf01b19c18562b1e89558fb6c56de4d9118a032fd5 \; --hash=sha256:fb69256e180cb6c8a894fee62b3afebae785babc1ee98b81cdf68bbca1987f33 \; --hash=sha256:fd1abc0d89e30cc4e02e4064dc67fcc51bd941eb395c502aac3ec19fab46b519 \; --hash=sha256:ff8fa367d09b717b2a17a052544193ad76cd49979c805768879cb63d9ca50561; # via requests; commonmark==0.,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:8144,Security,hash,hash,8144,3 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \; --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \; --hash=sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711 \; --hash=sha256:c235ebd9baae02f1b77bcea61bce332cb4331dc3617d254df3323aa01ab47bd4 \; --hash=sha256:cd70574b12bb8a4d2aaa0094515df2463cb429d8536cfb6c7ce983246983e5a6 \; --hash=sha256:d0eccceffcb53201b5bfebb52600a5fb483a20b61da9dbc885f8b103cbe7598c \; --hash=sha256:d965bba47ddeec8cd560687584e88cf699fd28f192ceb452d1d7ee807c5597b7 \; --hash=sha256:db364eca23f876da6f9e16c9da0df51aa4f104a972735574842618b8c6d999d4 \; --hash=sha256:ddbb2551d7e0102e7252db79ba445cdab71b26640817ab1e3e3648dad515003b \; --hash=sha256:deb6be0ac38ece9ba87dea880e438f25ca3eddfac8b002a2ec3d9183a454e8ae \; --hash=sha256:e06ed3eb3218bc64786f7db41917d4e686cc4856944f53d5bdf83a6884432e12 \; --hash=sha256:e27ad930a842b4c5eb8ac0016b0a54f5aebbe679340c26101df33424142c143c \; --hash=sha256:e537484df0d8f426ce2afb2d0f8e1c3d0b114b83f8850e5f2fbea0e797bd82ae \; --hash=sha256:eb00ed941194665c332bf8e078baf037d6c35d7c4f3102ea2d4f16ca94a26dc8 \; --hash=sha256:eb6904c354526e758fda7167b33005998fb68c46fbc10e013ca97f21ca5c8887 \; --hash=sha256:eb8821e09e916165e160797a6c17edda0679379a4be5c716c260e836e122f54b \; --hash=sha256:efcb3f6676480691518c177e3b465bcddf57cea040302f9f4e6e191af91174d4 \; --hash=sha256:f27273b60488abe721a075bcca6d7f3964f9f6f067c8c4c605743023d7d3944f \; --hash=sha256:f30c3cb33b24454a82faecaf01b19c18562b1e89558fb6c56de4d9118a032fd5 \; --hash=sha256:fb69256e180cb6c8a894fee62b3afebae785babc1ee98b81cdf68bbca1987f33 \; --hash=sha256:fd1abc0d89e30cc4e02e4064dc67fcc51bd941eb395c502aac3ec19fab46b519 \; --hash=sha256:ff8fa367d09b717b2a17a052544193ad76cd49979c805768879cb63d9ca50561; # via requests; commonmark==0.,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:8226,Security,hash,hash,8226,3 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \; --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \; --hash=sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711 \; --hash=sha256:c235ebd9baae02f1b77bcea61bce332cb4331dc3617d254df3323aa01ab47bd4 \; --hash=sha256:cd70574b12bb8a4d2aaa0094515df2463cb429d8536cfb6c7ce983246983e5a6 \; --hash=sha256:d0eccceffcb53201b5bfebb52600a5fb483a20b61da9dbc885f8b103cbe7598c \; --hash=sha256:d965bba47ddeec8cd560687584e88cf699fd28f192ceb452d1d7ee807c5597b7 \; --hash=sha256:db364eca23f876da6f9e16c9da0df51aa4f104a972735574842618b8c6d999d4 \; --hash=sha256:ddbb2551d7e0102e7252db79ba445cdab71b26640817ab1e3e3648dad515003b \; --hash=sha256:deb6be0ac38ece9ba87dea880e438f25ca3eddfac8b002a2ec3d9183a454e8ae \; --hash=sha256:e06ed3eb3218bc64786f7db41917d4e686cc4856944f53d5bdf83a6884432e12 \; --hash=sha256:e27ad930a842b4c5eb8ac0016b0a54f5aebbe679340c26101df33424142c143c \; --hash=sha256:e537484df0d8f426ce2afb2d0f8e1c3d0b114b83f8850e5f2fbea0e797bd82ae \; --hash=sha256:eb00ed941194665c332bf8e078baf037d6c35d7c4f3102ea2d4f16ca94a26dc8 \; --hash=sha256:eb6904c354526e758fda7167b33005998fb68c46fbc10e013ca97f21ca5c8887 \; --hash=sha256:eb8821e09e916165e160797a6c17edda0679379a4be5c716c260e836e122f54b \; --hash=sha256:efcb3f6676480691518c177e3b465bcddf57cea040302f9f4e6e191af91174d4 \; --hash=sha256:f27273b60488abe721a075bcca6d7f3964f9f6f067c8c4c605743023d7d3944f \; --hash=sha256:f30c3cb33b24454a82faecaf01b19c18562b1e89558fb6c56de4d9118a032fd5 \; --hash=sha256:fb69256e180cb6c8a894fee62b3afebae785babc1ee98b81cdf68bbca1987f33 \; --hash=sha256:fd1abc0d89e30cc4e02e4064dc67fcc51bd941eb395c502aac3ec19fab46b519 \; --hash=sha256:ff8fa367d09b717b2a17a052544193ad76cd49979c805768879cb63d9ca50561; # via requests; commonmark==0.,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:8308,Security,hash,hash,8308,3 \; --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \; --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \; --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \; --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \; --hash=sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711 \; --hash=sha256:c235ebd9baae02f1b77bcea61bce332cb4331dc3617d254df3323aa01ab47bd4 \; --hash=sha256:cd70574b12bb8a4d2aaa0094515df2463cb429d8536cfb6c7ce983246983e5a6 \; --hash=sha256:d0eccceffcb53201b5bfebb52600a5fb483a20b61da9dbc885f8b103cbe7598c \; --hash=sha256:d965bba47ddeec8cd560687584e88cf699fd28f192ceb452d1d7ee807c5597b7 \; --hash=sha256:db364eca23f876da6f9e16c9da0df51aa4f104a972735574842618b8c6d999d4 \; --hash=sha256:ddbb2551d7e0102e7252db79ba445cdab71b26640817ab1e3e3648dad515003b \; --hash=sha256:deb6be0ac38ece9ba87dea880e438f25ca3eddfac8b002a2ec3d9183a454e8ae \; --hash=sha256:e06ed3eb3218bc64786f7db41917d4e686cc4856944f53d5bdf83a6884432e12 \; --hash=sha256:e27ad930a842b4c5eb8ac0016b0a54f5aebbe679340c26101df33424142c143c \; --hash=sha256:e537484df0d8f426ce2afb2d0f8e1c3d0b114b83f8850e5f2fbea0e797bd82ae \; --hash=sha256:eb00ed941194665c332bf8e078baf037d6c35d7c4f3102ea2d4f16ca94a26dc8 \; --hash=sha256:eb6904c354526e758fda7167b33005998fb68c46fbc10e013ca97f21ca5c8887 \; --hash=sha256:eb8821e09e916165e160797a6c17edda0679379a4be5c716c260e836e122f54b \; --hash=sha256:efcb3f6676480691518c177e3b465bcddf57cea040302f9f4e6e191af91174d4 \; --hash=sha256:f27273b60488abe721a075bcca6d7f3964f9f6f067c8c4c605743023d7d3944f \; --hash=sha256:f30c3cb33b24454a82faecaf01b19c18562b1e89558fb6c56de4d9118a032fd5 \; --hash=sha256:fb69256e180cb6c8a894fee62b3afebae785babc1ee98b81cdf68bbca1987f33 \; --hash=sha256:fd1abc0d89e30cc4e02e4064dc67fcc51bd941eb395c502aac3ec19fab46b519 \; --hash=sha256:ff8fa367d09b717b2a17a052544193ad76cd49979c805768879cb63d9ca50561; # via requests; commonmark==0.,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:8425,Security,hash,hash,8425,b8ac0016b0a54f5aebbe679340c26101df33424142c143c \; --hash=sha256:e537484df0d8f426ce2afb2d0f8e1c3d0b114b83f8850e5f2fbea0e797bd82ae \; --hash=sha256:eb00ed941194665c332bf8e078baf037d6c35d7c4f3102ea2d4f16ca94a26dc8 \; --hash=sha256:eb6904c354526e758fda7167b33005998fb68c46fbc10e013ca97f21ca5c8887 \; --hash=sha256:eb8821e09e916165e160797a6c17edda0679379a4be5c716c260e836e122f54b \; --hash=sha256:efcb3f6676480691518c177e3b465bcddf57cea040302f9f4e6e191af91174d4 \; --hash=sha256:f27273b60488abe721a075bcca6d7f3964f9f6f067c8c4c605743023d7d3944f \; --hash=sha256:f30c3cb33b24454a82faecaf01b19c18562b1e89558fb6c56de4d9118a032fd5 \; --hash=sha256:fb69256e180cb6c8a894fee62b3afebae785babc1ee98b81cdf68bbca1987f33 \; --hash=sha256:fd1abc0d89e30cc4e02e4064dc67fcc51bd941eb395c502aac3ec19fab46b519 \; --hash=sha256:ff8fa367d09b717b2a17a052544193ad76cd49979c805768879cb63d9ca50561; # via requests; commonmark==0.9.1 \; --hash=sha256:452f9dc859be7f06631ddcb328b6919c67984aca654e5fefb3914d54691aed60 \; --hash=sha256:da2f38c92590f83de410ba1a3cbceafbc74fee9def35f9251ba9a971d6d66fd9; # via recommonmark; docutils==0.20.1 \; --hash=sha256:96f387a2c5562db4476f09f13bbab2192e764cac08ebbf3a34a95d9b1e4a59d6 \; --hash=sha256:f08a4e276c3a1583a86dce3e34aba3fe04d02bba2dd51ed16106244e8a923e3b; # via; # -r requirements.txt; # myst-parser; # recommonmark; # sphinx; furo==2023.8.19 \; --hash=sha256:12f99f87a1873b6746228cfde18f77244e6c1ffb85d7fed95e638aae70d80590 \; --hash=sha256:e671ee638ab3f1b472f4033b0167f502ab407830e0db0f843b1c1028119c9cd1; # via -r requirements.txt; idna==3.6 \; --hash=sha256:9ecdbbd083b06798ae1e86adcbfe8ab1479cf864e4ee30fe4e46a003d12491ca \; --hash=sha256:c05567e9c24a6b9faaa835c4821bad0590fbb9d5779e7caa6e1cc4978e7eb24f; # via requests; imagesize==1.4.1 \; --hash=sha256:0d8d18d08f840c19d0ee7ca1fd82490fdc3729b7ac93f49870406ddde8ef8d8b \; --hash=sha256:69150444affb9cb0d5cc5a92b3676f0b2fb7cd9ae39e947a5e11a36b4497cd4a; # via sphinx; jinja2==3.1.2 \; --hash=sha256:31351a702a408a9e7595a8fc6150fc3f43,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:8507,Security,hash,hash,8507,b8ac0016b0a54f5aebbe679340c26101df33424142c143c \; --hash=sha256:e537484df0d8f426ce2afb2d0f8e1c3d0b114b83f8850e5f2fbea0e797bd82ae \; --hash=sha256:eb00ed941194665c332bf8e078baf037d6c35d7c4f3102ea2d4f16ca94a26dc8 \; --hash=sha256:eb6904c354526e758fda7167b33005998fb68c46fbc10e013ca97f21ca5c8887 \; --hash=sha256:eb8821e09e916165e160797a6c17edda0679379a4be5c716c260e836e122f54b \; --hash=sha256:efcb3f6676480691518c177e3b465bcddf57cea040302f9f4e6e191af91174d4 \; --hash=sha256:f27273b60488abe721a075bcca6d7f3964f9f6f067c8c4c605743023d7d3944f \; --hash=sha256:f30c3cb33b24454a82faecaf01b19c18562b1e89558fb6c56de4d9118a032fd5 \; --hash=sha256:fb69256e180cb6c8a894fee62b3afebae785babc1ee98b81cdf68bbca1987f33 \; --hash=sha256:fd1abc0d89e30cc4e02e4064dc67fcc51bd941eb395c502aac3ec19fab46b519 \; --hash=sha256:ff8fa367d09b717b2a17a052544193ad76cd49979c805768879cb63d9ca50561; # via requests; commonmark==0.9.1 \; --hash=sha256:452f9dc859be7f06631ddcb328b6919c67984aca654e5fefb3914d54691aed60 \; --hash=sha256:da2f38c92590f83de410ba1a3cbceafbc74fee9def35f9251ba9a971d6d66fd9; # via recommonmark; docutils==0.20.1 \; --hash=sha256:96f387a2c5562db4476f09f13bbab2192e764cac08ebbf3a34a95d9b1e4a59d6 \; --hash=sha256:f08a4e276c3a1583a86dce3e34aba3fe04d02bba2dd51ed16106244e8a923e3b; # via; # -r requirements.txt; # myst-parser; # recommonmark; # sphinx; furo==2023.8.19 \; --hash=sha256:12f99f87a1873b6746228cfde18f77244e6c1ffb85d7fed95e638aae70d80590 \; --hash=sha256:e671ee638ab3f1b472f4033b0167f502ab407830e0db0f843b1c1028119c9cd1; # via -r requirements.txt; idna==3.6 \; --hash=sha256:9ecdbbd083b06798ae1e86adcbfe8ab1479cf864e4ee30fe4e46a003d12491ca \; --hash=sha256:c05567e9c24a6b9faaa835c4821bad0590fbb9d5779e7caa6e1cc4978e7eb24f; # via requests; imagesize==1.4.1 \; --hash=sha256:0d8d18d08f840c19d0ee7ca1fd82490fdc3729b7ac93f49870406ddde8ef8d8b \; --hash=sha256:69150444affb9cb0d5cc5a92b3676f0b2fb7cd9ae39e947a5e11a36b4497cd4a; # via sphinx; jinja2==3.1.2 \; --hash=sha256:31351a702a408a9e7595a8fc6150fc3f43,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:8627,Security,hash,hash,8627,16ca94a26dc8 \; --hash=sha256:eb6904c354526e758fda7167b33005998fb68c46fbc10e013ca97f21ca5c8887 \; --hash=sha256:eb8821e09e916165e160797a6c17edda0679379a4be5c716c260e836e122f54b \; --hash=sha256:efcb3f6676480691518c177e3b465bcddf57cea040302f9f4e6e191af91174d4 \; --hash=sha256:f27273b60488abe721a075bcca6d7f3964f9f6f067c8c4c605743023d7d3944f \; --hash=sha256:f30c3cb33b24454a82faecaf01b19c18562b1e89558fb6c56de4d9118a032fd5 \; --hash=sha256:fb69256e180cb6c8a894fee62b3afebae785babc1ee98b81cdf68bbca1987f33 \; --hash=sha256:fd1abc0d89e30cc4e02e4064dc67fcc51bd941eb395c502aac3ec19fab46b519 \; --hash=sha256:ff8fa367d09b717b2a17a052544193ad76cd49979c805768879cb63d9ca50561; # via requests; commonmark==0.9.1 \; --hash=sha256:452f9dc859be7f06631ddcb328b6919c67984aca654e5fefb3914d54691aed60 \; --hash=sha256:da2f38c92590f83de410ba1a3cbceafbc74fee9def35f9251ba9a971d6d66fd9; # via recommonmark; docutils==0.20.1 \; --hash=sha256:96f387a2c5562db4476f09f13bbab2192e764cac08ebbf3a34a95d9b1e4a59d6 \; --hash=sha256:f08a4e276c3a1583a86dce3e34aba3fe04d02bba2dd51ed16106244e8a923e3b; # via; # -r requirements.txt; # myst-parser; # recommonmark; # sphinx; furo==2023.8.19 \; --hash=sha256:12f99f87a1873b6746228cfde18f77244e6c1ffb85d7fed95e638aae70d80590 \; --hash=sha256:e671ee638ab3f1b472f4033b0167f502ab407830e0db0f843b1c1028119c9cd1; # via -r requirements.txt; idna==3.6 \; --hash=sha256:9ecdbbd083b06798ae1e86adcbfe8ab1479cf864e4ee30fe4e46a003d12491ca \; --hash=sha256:c05567e9c24a6b9faaa835c4821bad0590fbb9d5779e7caa6e1cc4978e7eb24f; # via requests; imagesize==1.4.1 \; --hash=sha256:0d8d18d08f840c19d0ee7ca1fd82490fdc3729b7ac93f49870406ddde8ef8d8b \; --hash=sha256:69150444affb9cb0d5cc5a92b3676f0b2fb7cd9ae39e947a5e11a36b4497cd4a; # via sphinx; jinja2==3.1.2 \; --hash=sha256:31351a702a408a9e7595a8fc6150fc3f43bb6bf7e319770cbc0db9df9437e852 \; --hash=sha256:6088930bfe239f0e6710546ab9c19c9ef35e29792895fed6e6e31a023a182a61; # via; # myst-parser; # sphinx; markdown==3.5.1 \; --hash=sha256:5874b47d4ee3f0b14d7,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:8709,Security,hash,hash,8709,16ca94a26dc8 \; --hash=sha256:eb6904c354526e758fda7167b33005998fb68c46fbc10e013ca97f21ca5c8887 \; --hash=sha256:eb8821e09e916165e160797a6c17edda0679379a4be5c716c260e836e122f54b \; --hash=sha256:efcb3f6676480691518c177e3b465bcddf57cea040302f9f4e6e191af91174d4 \; --hash=sha256:f27273b60488abe721a075bcca6d7f3964f9f6f067c8c4c605743023d7d3944f \; --hash=sha256:f30c3cb33b24454a82faecaf01b19c18562b1e89558fb6c56de4d9118a032fd5 \; --hash=sha256:fb69256e180cb6c8a894fee62b3afebae785babc1ee98b81cdf68bbca1987f33 \; --hash=sha256:fd1abc0d89e30cc4e02e4064dc67fcc51bd941eb395c502aac3ec19fab46b519 \; --hash=sha256:ff8fa367d09b717b2a17a052544193ad76cd49979c805768879cb63d9ca50561; # via requests; commonmark==0.9.1 \; --hash=sha256:452f9dc859be7f06631ddcb328b6919c67984aca654e5fefb3914d54691aed60 \; --hash=sha256:da2f38c92590f83de410ba1a3cbceafbc74fee9def35f9251ba9a971d6d66fd9; # via recommonmark; docutils==0.20.1 \; --hash=sha256:96f387a2c5562db4476f09f13bbab2192e764cac08ebbf3a34a95d9b1e4a59d6 \; --hash=sha256:f08a4e276c3a1583a86dce3e34aba3fe04d02bba2dd51ed16106244e8a923e3b; # via; # -r requirements.txt; # myst-parser; # recommonmark; # sphinx; furo==2023.8.19 \; --hash=sha256:12f99f87a1873b6746228cfde18f77244e6c1ffb85d7fed95e638aae70d80590 \; --hash=sha256:e671ee638ab3f1b472f4033b0167f502ab407830e0db0f843b1c1028119c9cd1; # via -r requirements.txt; idna==3.6 \; --hash=sha256:9ecdbbd083b06798ae1e86adcbfe8ab1479cf864e4ee30fe4e46a003d12491ca \; --hash=sha256:c05567e9c24a6b9faaa835c4821bad0590fbb9d5779e7caa6e1cc4978e7eb24f; # via requests; imagesize==1.4.1 \; --hash=sha256:0d8d18d08f840c19d0ee7ca1fd82490fdc3729b7ac93f49870406ddde8ef8d8b \; --hash=sha256:69150444affb9cb0d5cc5a92b3676f0b2fb7cd9ae39e947a5e11a36b4497cd4a; # via sphinx; jinja2==3.1.2 \; --hash=sha256:31351a702a408a9e7595a8fc6150fc3f43bb6bf7e319770cbc0db9df9437e852 \; --hash=sha256:6088930bfe239f0e6710546ab9c19c9ef35e29792895fed6e6e31a023a182a61; # via; # myst-parser; # sphinx; markdown==3.5.1 \; --hash=sha256:5874b47d4ee3f0b14d7,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:8879,Security,hash,hash,8879,f91174d4 \; --hash=sha256:f27273b60488abe721a075bcca6d7f3964f9f6f067c8c4c605743023d7d3944f \; --hash=sha256:f30c3cb33b24454a82faecaf01b19c18562b1e89558fb6c56de4d9118a032fd5 \; --hash=sha256:fb69256e180cb6c8a894fee62b3afebae785babc1ee98b81cdf68bbca1987f33 \; --hash=sha256:fd1abc0d89e30cc4e02e4064dc67fcc51bd941eb395c502aac3ec19fab46b519 \; --hash=sha256:ff8fa367d09b717b2a17a052544193ad76cd49979c805768879cb63d9ca50561; # via requests; commonmark==0.9.1 \; --hash=sha256:452f9dc859be7f06631ddcb328b6919c67984aca654e5fefb3914d54691aed60 \; --hash=sha256:da2f38c92590f83de410ba1a3cbceafbc74fee9def35f9251ba9a971d6d66fd9; # via recommonmark; docutils==0.20.1 \; --hash=sha256:96f387a2c5562db4476f09f13bbab2192e764cac08ebbf3a34a95d9b1e4a59d6 \; --hash=sha256:f08a4e276c3a1583a86dce3e34aba3fe04d02bba2dd51ed16106244e8a923e3b; # via; # -r requirements.txt; # myst-parser; # recommonmark; # sphinx; furo==2023.8.19 \; --hash=sha256:12f99f87a1873b6746228cfde18f77244e6c1ffb85d7fed95e638aae70d80590 \; --hash=sha256:e671ee638ab3f1b472f4033b0167f502ab407830e0db0f843b1c1028119c9cd1; # via -r requirements.txt; idna==3.6 \; --hash=sha256:9ecdbbd083b06798ae1e86adcbfe8ab1479cf864e4ee30fe4e46a003d12491ca \; --hash=sha256:c05567e9c24a6b9faaa835c4821bad0590fbb9d5779e7caa6e1cc4978e7eb24f; # via requests; imagesize==1.4.1 \; --hash=sha256:0d8d18d08f840c19d0ee7ca1fd82490fdc3729b7ac93f49870406ddde8ef8d8b \; --hash=sha256:69150444affb9cb0d5cc5a92b3676f0b2fb7cd9ae39e947a5e11a36b4497cd4a; # via sphinx; jinja2==3.1.2 \; --hash=sha256:31351a702a408a9e7595a8fc6150fc3f43bb6bf7e319770cbc0db9df9437e852 \; --hash=sha256:6088930bfe239f0e6710546ab9c19c9ef35e29792895fed6e6e31a023a182a61; # via; # myst-parser; # sphinx; markdown==3.5.1 \; --hash=sha256:5874b47d4ee3f0b14d764324d2c94c03ea66bee56f2d929da9f2508d65e722dc \; --hash=sha256:b65d7beb248dc22f2e8a31fb706d93798093c308dc1aba295aedeb9d41a813bd; # via sphinx-markdown-tables; markdown-it-py==3.0.0 \; --hash=sha256:355216845c60bd96232cd8d8c40e8f9765cc86f46880e43a8fd2,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:8961,Security,hash,hash,8961,f91174d4 \; --hash=sha256:f27273b60488abe721a075bcca6d7f3964f9f6f067c8c4c605743023d7d3944f \; --hash=sha256:f30c3cb33b24454a82faecaf01b19c18562b1e89558fb6c56de4d9118a032fd5 \; --hash=sha256:fb69256e180cb6c8a894fee62b3afebae785babc1ee98b81cdf68bbca1987f33 \; --hash=sha256:fd1abc0d89e30cc4e02e4064dc67fcc51bd941eb395c502aac3ec19fab46b519 \; --hash=sha256:ff8fa367d09b717b2a17a052544193ad76cd49979c805768879cb63d9ca50561; # via requests; commonmark==0.9.1 \; --hash=sha256:452f9dc859be7f06631ddcb328b6919c67984aca654e5fefb3914d54691aed60 \; --hash=sha256:da2f38c92590f83de410ba1a3cbceafbc74fee9def35f9251ba9a971d6d66fd9; # via recommonmark; docutils==0.20.1 \; --hash=sha256:96f387a2c5562db4476f09f13bbab2192e764cac08ebbf3a34a95d9b1e4a59d6 \; --hash=sha256:f08a4e276c3a1583a86dce3e34aba3fe04d02bba2dd51ed16106244e8a923e3b; # via; # -r requirements.txt; # myst-parser; # recommonmark; # sphinx; furo==2023.8.19 \; --hash=sha256:12f99f87a1873b6746228cfde18f77244e6c1ffb85d7fed95e638aae70d80590 \; --hash=sha256:e671ee638ab3f1b472f4033b0167f502ab407830e0db0f843b1c1028119c9cd1; # via -r requirements.txt; idna==3.6 \; --hash=sha256:9ecdbbd083b06798ae1e86adcbfe8ab1479cf864e4ee30fe4e46a003d12491ca \; --hash=sha256:c05567e9c24a6b9faaa835c4821bad0590fbb9d5779e7caa6e1cc4978e7eb24f; # via requests; imagesize==1.4.1 \; --hash=sha256:0d8d18d08f840c19d0ee7ca1fd82490fdc3729b7ac93f49870406ddde8ef8d8b \; --hash=sha256:69150444affb9cb0d5cc5a92b3676f0b2fb7cd9ae39e947a5e11a36b4497cd4a; # via sphinx; jinja2==3.1.2 \; --hash=sha256:31351a702a408a9e7595a8fc6150fc3f43bb6bf7e319770cbc0db9df9437e852 \; --hash=sha256:6088930bfe239f0e6710546ab9c19c9ef35e29792895fed6e6e31a023a182a61; # via; # myst-parser; # sphinx; markdown==3.5.1 \; --hash=sha256:5874b47d4ee3f0b14d764324d2c94c03ea66bee56f2d929da9f2508d65e722dc \; --hash=sha256:b65d7beb248dc22f2e8a31fb706d93798093c308dc1aba295aedeb9d41a813bd; # via sphinx-markdown-tables; markdown-it-py==3.0.0 \; --hash=sha256:355216845c60bd96232cd8d8c40e8f9765cc86f46880e43a8fd2,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:9081,Security,hash,hash,9081,a894fee62b3afebae785babc1ee98b81cdf68bbca1987f33 \; --hash=sha256:fd1abc0d89e30cc4e02e4064dc67fcc51bd941eb395c502aac3ec19fab46b519 \; --hash=sha256:ff8fa367d09b717b2a17a052544193ad76cd49979c805768879cb63d9ca50561; # via requests; commonmark==0.9.1 \; --hash=sha256:452f9dc859be7f06631ddcb328b6919c67984aca654e5fefb3914d54691aed60 \; --hash=sha256:da2f38c92590f83de410ba1a3cbceafbc74fee9def35f9251ba9a971d6d66fd9; # via recommonmark; docutils==0.20.1 \; --hash=sha256:96f387a2c5562db4476f09f13bbab2192e764cac08ebbf3a34a95d9b1e4a59d6 \; --hash=sha256:f08a4e276c3a1583a86dce3e34aba3fe04d02bba2dd51ed16106244e8a923e3b; # via; # -r requirements.txt; # myst-parser; # recommonmark; # sphinx; furo==2023.8.19 \; --hash=sha256:12f99f87a1873b6746228cfde18f77244e6c1ffb85d7fed95e638aae70d80590 \; --hash=sha256:e671ee638ab3f1b472f4033b0167f502ab407830e0db0f843b1c1028119c9cd1; # via -r requirements.txt; idna==3.6 \; --hash=sha256:9ecdbbd083b06798ae1e86adcbfe8ab1479cf864e4ee30fe4e46a003d12491ca \; --hash=sha256:c05567e9c24a6b9faaa835c4821bad0590fbb9d5779e7caa6e1cc4978e7eb24f; # via requests; imagesize==1.4.1 \; --hash=sha256:0d8d18d08f840c19d0ee7ca1fd82490fdc3729b7ac93f49870406ddde8ef8d8b \; --hash=sha256:69150444affb9cb0d5cc5a92b3676f0b2fb7cd9ae39e947a5e11a36b4497cd4a; # via sphinx; jinja2==3.1.2 \; --hash=sha256:31351a702a408a9e7595a8fc6150fc3f43bb6bf7e319770cbc0db9df9437e852 \; --hash=sha256:6088930bfe239f0e6710546ab9c19c9ef35e29792895fed6e6e31a023a182a61; # via; # myst-parser; # sphinx; markdown==3.5.1 \; --hash=sha256:5874b47d4ee3f0b14d764324d2c94c03ea66bee56f2d929da9f2508d65e722dc \; --hash=sha256:b65d7beb248dc22f2e8a31fb706d93798093c308dc1aba295aedeb9d41a813bd; # via sphinx-markdown-tables; markdown-it-py==3.0.0 \; --hash=sha256:355216845c60bd96232cd8d8c40e8f9765cc86f46880e43a8fd22dc1a1a8cab1 \; --hash=sha256:e3f60a94fa066dc52ec76661e37c851cb232d92f9886b15cb560aaada2df8feb; # via; # mdit-py-plugins; # myst-parser; markupsafe==2.1.3 \; --hash=sha256:05fb21170423db021895e1ea1e1f3ab3ad,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:9163,Security,hash,hash,9163,a894fee62b3afebae785babc1ee98b81cdf68bbca1987f33 \; --hash=sha256:fd1abc0d89e30cc4e02e4064dc67fcc51bd941eb395c502aac3ec19fab46b519 \; --hash=sha256:ff8fa367d09b717b2a17a052544193ad76cd49979c805768879cb63d9ca50561; # via requests; commonmark==0.9.1 \; --hash=sha256:452f9dc859be7f06631ddcb328b6919c67984aca654e5fefb3914d54691aed60 \; --hash=sha256:da2f38c92590f83de410ba1a3cbceafbc74fee9def35f9251ba9a971d6d66fd9; # via recommonmark; docutils==0.20.1 \; --hash=sha256:96f387a2c5562db4476f09f13bbab2192e764cac08ebbf3a34a95d9b1e4a59d6 \; --hash=sha256:f08a4e276c3a1583a86dce3e34aba3fe04d02bba2dd51ed16106244e8a923e3b; # via; # -r requirements.txt; # myst-parser; # recommonmark; # sphinx; furo==2023.8.19 \; --hash=sha256:12f99f87a1873b6746228cfde18f77244e6c1ffb85d7fed95e638aae70d80590 \; --hash=sha256:e671ee638ab3f1b472f4033b0167f502ab407830e0db0f843b1c1028119c9cd1; # via -r requirements.txt; idna==3.6 \; --hash=sha256:9ecdbbd083b06798ae1e86adcbfe8ab1479cf864e4ee30fe4e46a003d12491ca \; --hash=sha256:c05567e9c24a6b9faaa835c4821bad0590fbb9d5779e7caa6e1cc4978e7eb24f; # via requests; imagesize==1.4.1 \; --hash=sha256:0d8d18d08f840c19d0ee7ca1fd82490fdc3729b7ac93f49870406ddde8ef8d8b \; --hash=sha256:69150444affb9cb0d5cc5a92b3676f0b2fb7cd9ae39e947a5e11a36b4497cd4a; # via sphinx; jinja2==3.1.2 \; --hash=sha256:31351a702a408a9e7595a8fc6150fc3f43bb6bf7e319770cbc0db9df9437e852 \; --hash=sha256:6088930bfe239f0e6710546ab9c19c9ef35e29792895fed6e6e31a023a182a61; # via; # myst-parser; # sphinx; markdown==3.5.1 \; --hash=sha256:5874b47d4ee3f0b14d764324d2c94c03ea66bee56f2d929da9f2508d65e722dc \; --hash=sha256:b65d7beb248dc22f2e8a31fb706d93798093c308dc1aba295aedeb9d41a813bd; # via sphinx-markdown-tables; markdown-it-py==3.0.0 \; --hash=sha256:355216845c60bd96232cd8d8c40e8f9765cc86f46880e43a8fd22dc1a1a8cab1 \; --hash=sha256:e3f60a94fa066dc52ec76661e37c851cb232d92f9886b15cb560aaada2df8feb; # via; # mdit-py-plugins; # myst-parser; markupsafe==2.1.3 \; --hash=sha256:05fb21170423db021895e1ea1e1f3ab3ad,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:9279,Security,hash,hash,9279,8879cb63d9ca50561; # via requests; commonmark==0.9.1 \; --hash=sha256:452f9dc859be7f06631ddcb328b6919c67984aca654e5fefb3914d54691aed60 \; --hash=sha256:da2f38c92590f83de410ba1a3cbceafbc74fee9def35f9251ba9a971d6d66fd9; # via recommonmark; docutils==0.20.1 \; --hash=sha256:96f387a2c5562db4476f09f13bbab2192e764cac08ebbf3a34a95d9b1e4a59d6 \; --hash=sha256:f08a4e276c3a1583a86dce3e34aba3fe04d02bba2dd51ed16106244e8a923e3b; # via; # -r requirements.txt; # myst-parser; # recommonmark; # sphinx; furo==2023.8.19 \; --hash=sha256:12f99f87a1873b6746228cfde18f77244e6c1ffb85d7fed95e638aae70d80590 \; --hash=sha256:e671ee638ab3f1b472f4033b0167f502ab407830e0db0f843b1c1028119c9cd1; # via -r requirements.txt; idna==3.6 \; --hash=sha256:9ecdbbd083b06798ae1e86adcbfe8ab1479cf864e4ee30fe4e46a003d12491ca \; --hash=sha256:c05567e9c24a6b9faaa835c4821bad0590fbb9d5779e7caa6e1cc4978e7eb24f; # via requests; imagesize==1.4.1 \; --hash=sha256:0d8d18d08f840c19d0ee7ca1fd82490fdc3729b7ac93f49870406ddde8ef8d8b \; --hash=sha256:69150444affb9cb0d5cc5a92b3676f0b2fb7cd9ae39e947a5e11a36b4497cd4a; # via sphinx; jinja2==3.1.2 \; --hash=sha256:31351a702a408a9e7595a8fc6150fc3f43bb6bf7e319770cbc0db9df9437e852 \; --hash=sha256:6088930bfe239f0e6710546ab9c19c9ef35e29792895fed6e6e31a023a182a61; # via; # myst-parser; # sphinx; markdown==3.5.1 \; --hash=sha256:5874b47d4ee3f0b14d764324d2c94c03ea66bee56f2d929da9f2508d65e722dc \; --hash=sha256:b65d7beb248dc22f2e8a31fb706d93798093c308dc1aba295aedeb9d41a813bd; # via sphinx-markdown-tables; markdown-it-py==3.0.0 \; --hash=sha256:355216845c60bd96232cd8d8c40e8f9765cc86f46880e43a8fd22dc1a1a8cab1 \; --hash=sha256:e3f60a94fa066dc52ec76661e37c851cb232d92f9886b15cb560aaada2df8feb; # via; # mdit-py-plugins; # myst-parser; markupsafe==2.1.3 \; --hash=sha256:05fb21170423db021895e1ea1e1f3ab3adb85d1c2333cbc2310f2a26bc77272e \; --hash=sha256:0a4e4a1aff6c7ac4cd55792abf96c915634c2b97e3cc1c7129578aa68ebd754e \; --hash=sha256:10bbfe99883db80bdbaff2dcf681dfc6533a614f700da1287707e8a5d78a8431 \,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:9361,Security,hash,hash,9361,8879cb63d9ca50561; # via requests; commonmark==0.9.1 \; --hash=sha256:452f9dc859be7f06631ddcb328b6919c67984aca654e5fefb3914d54691aed60 \; --hash=sha256:da2f38c92590f83de410ba1a3cbceafbc74fee9def35f9251ba9a971d6d66fd9; # via recommonmark; docutils==0.20.1 \; --hash=sha256:96f387a2c5562db4476f09f13bbab2192e764cac08ebbf3a34a95d9b1e4a59d6 \; --hash=sha256:f08a4e276c3a1583a86dce3e34aba3fe04d02bba2dd51ed16106244e8a923e3b; # via; # -r requirements.txt; # myst-parser; # recommonmark; # sphinx; furo==2023.8.19 \; --hash=sha256:12f99f87a1873b6746228cfde18f77244e6c1ffb85d7fed95e638aae70d80590 \; --hash=sha256:e671ee638ab3f1b472f4033b0167f502ab407830e0db0f843b1c1028119c9cd1; # via -r requirements.txt; idna==3.6 \; --hash=sha256:9ecdbbd083b06798ae1e86adcbfe8ab1479cf864e4ee30fe4e46a003d12491ca \; --hash=sha256:c05567e9c24a6b9faaa835c4821bad0590fbb9d5779e7caa6e1cc4978e7eb24f; # via requests; imagesize==1.4.1 \; --hash=sha256:0d8d18d08f840c19d0ee7ca1fd82490fdc3729b7ac93f49870406ddde8ef8d8b \; --hash=sha256:69150444affb9cb0d5cc5a92b3676f0b2fb7cd9ae39e947a5e11a36b4497cd4a; # via sphinx; jinja2==3.1.2 \; --hash=sha256:31351a702a408a9e7595a8fc6150fc3f43bb6bf7e319770cbc0db9df9437e852 \; --hash=sha256:6088930bfe239f0e6710546ab9c19c9ef35e29792895fed6e6e31a023a182a61; # via; # myst-parser; # sphinx; markdown==3.5.1 \; --hash=sha256:5874b47d4ee3f0b14d764324d2c94c03ea66bee56f2d929da9f2508d65e722dc \; --hash=sha256:b65d7beb248dc22f2e8a31fb706d93798093c308dc1aba295aedeb9d41a813bd; # via sphinx-markdown-tables; markdown-it-py==3.0.0 \; --hash=sha256:355216845c60bd96232cd8d8c40e8f9765cc86f46880e43a8fd22dc1a1a8cab1 \; --hash=sha256:e3f60a94fa066dc52ec76661e37c851cb232d92f9886b15cb560aaada2df8feb; # via; # mdit-py-plugins; # myst-parser; markupsafe==2.1.3 \; --hash=sha256:05fb21170423db021895e1ea1e1f3ab3adb85d1c2333cbc2310f2a26bc77272e \; --hash=sha256:0a4e4a1aff6c7ac4cd55792abf96c915634c2b97e3cc1c7129578aa68ebd754e \; --hash=sha256:10bbfe99883db80bdbaff2dcf681dfc6533a614f700da1287707e8a5d78a8431 \,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:9472,Security,hash,hash,9472,9a971d6d66fd9; # via recommonmark; docutils==0.20.1 \; --hash=sha256:96f387a2c5562db4476f09f13bbab2192e764cac08ebbf3a34a95d9b1e4a59d6 \; --hash=sha256:f08a4e276c3a1583a86dce3e34aba3fe04d02bba2dd51ed16106244e8a923e3b; # via; # -r requirements.txt; # myst-parser; # recommonmark; # sphinx; furo==2023.8.19 \; --hash=sha256:12f99f87a1873b6746228cfde18f77244e6c1ffb85d7fed95e638aae70d80590 \; --hash=sha256:e671ee638ab3f1b472f4033b0167f502ab407830e0db0f843b1c1028119c9cd1; # via -r requirements.txt; idna==3.6 \; --hash=sha256:9ecdbbd083b06798ae1e86adcbfe8ab1479cf864e4ee30fe4e46a003d12491ca \; --hash=sha256:c05567e9c24a6b9faaa835c4821bad0590fbb9d5779e7caa6e1cc4978e7eb24f; # via requests; imagesize==1.4.1 \; --hash=sha256:0d8d18d08f840c19d0ee7ca1fd82490fdc3729b7ac93f49870406ddde8ef8d8b \; --hash=sha256:69150444affb9cb0d5cc5a92b3676f0b2fb7cd9ae39e947a5e11a36b4497cd4a; # via sphinx; jinja2==3.1.2 \; --hash=sha256:31351a702a408a9e7595a8fc6150fc3f43bb6bf7e319770cbc0db9df9437e852 \; --hash=sha256:6088930bfe239f0e6710546ab9c19c9ef35e29792895fed6e6e31a023a182a61; # via; # myst-parser; # sphinx; markdown==3.5.1 \; --hash=sha256:5874b47d4ee3f0b14d764324d2c94c03ea66bee56f2d929da9f2508d65e722dc \; --hash=sha256:b65d7beb248dc22f2e8a31fb706d93798093c308dc1aba295aedeb9d41a813bd; # via sphinx-markdown-tables; markdown-it-py==3.0.0 \; --hash=sha256:355216845c60bd96232cd8d8c40e8f9765cc86f46880e43a8fd22dc1a1a8cab1 \; --hash=sha256:e3f60a94fa066dc52ec76661e37c851cb232d92f9886b15cb560aaada2df8feb; # via; # mdit-py-plugins; # myst-parser; markupsafe==2.1.3 \; --hash=sha256:05fb21170423db021895e1ea1e1f3ab3adb85d1c2333cbc2310f2a26bc77272e \; --hash=sha256:0a4e4a1aff6c7ac4cd55792abf96c915634c2b97e3cc1c7129578aa68ebd754e \; --hash=sha256:10bbfe99883db80bdbaff2dcf681dfc6533a614f700da1287707e8a5d78a8431 \; --hash=sha256:134da1eca9ec0ae528110ccc9e48041e0828d79f24121a1a146161103c76e686 \; --hash=sha256:14ff806850827afd6b07a5f32bd917fb7f45b046ba40c57abdb636674a8b559c \; --hash=sha256:1577735524cdad32f9f6942,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:9554,Security,hash,hash,9554,9a971d6d66fd9; # via recommonmark; docutils==0.20.1 \; --hash=sha256:96f387a2c5562db4476f09f13bbab2192e764cac08ebbf3a34a95d9b1e4a59d6 \; --hash=sha256:f08a4e276c3a1583a86dce3e34aba3fe04d02bba2dd51ed16106244e8a923e3b; # via; # -r requirements.txt; # myst-parser; # recommonmark; # sphinx; furo==2023.8.19 \; --hash=sha256:12f99f87a1873b6746228cfde18f77244e6c1ffb85d7fed95e638aae70d80590 \; --hash=sha256:e671ee638ab3f1b472f4033b0167f502ab407830e0db0f843b1c1028119c9cd1; # via -r requirements.txt; idna==3.6 \; --hash=sha256:9ecdbbd083b06798ae1e86adcbfe8ab1479cf864e4ee30fe4e46a003d12491ca \; --hash=sha256:c05567e9c24a6b9faaa835c4821bad0590fbb9d5779e7caa6e1cc4978e7eb24f; # via requests; imagesize==1.4.1 \; --hash=sha256:0d8d18d08f840c19d0ee7ca1fd82490fdc3729b7ac93f49870406ddde8ef8d8b \; --hash=sha256:69150444affb9cb0d5cc5a92b3676f0b2fb7cd9ae39e947a5e11a36b4497cd4a; # via sphinx; jinja2==3.1.2 \; --hash=sha256:31351a702a408a9e7595a8fc6150fc3f43bb6bf7e319770cbc0db9df9437e852 \; --hash=sha256:6088930bfe239f0e6710546ab9c19c9ef35e29792895fed6e6e31a023a182a61; # via; # myst-parser; # sphinx; markdown==3.5.1 \; --hash=sha256:5874b47d4ee3f0b14d764324d2c94c03ea66bee56f2d929da9f2508d65e722dc \; --hash=sha256:b65d7beb248dc22f2e8a31fb706d93798093c308dc1aba295aedeb9d41a813bd; # via sphinx-markdown-tables; markdown-it-py==3.0.0 \; --hash=sha256:355216845c60bd96232cd8d8c40e8f9765cc86f46880e43a8fd22dc1a1a8cab1 \; --hash=sha256:e3f60a94fa066dc52ec76661e37c851cb232d92f9886b15cb560aaada2df8feb; # via; # mdit-py-plugins; # myst-parser; markupsafe==2.1.3 \; --hash=sha256:05fb21170423db021895e1ea1e1f3ab3adb85d1c2333cbc2310f2a26bc77272e \; --hash=sha256:0a4e4a1aff6c7ac4cd55792abf96c915634c2b97e3cc1c7129578aa68ebd754e \; --hash=sha256:10bbfe99883db80bdbaff2dcf681dfc6533a614f700da1287707e8a5d78a8431 \; --hash=sha256:134da1eca9ec0ae528110ccc9e48041e0828d79f24121a1a146161103c76e686 \; --hash=sha256:14ff806850827afd6b07a5f32bd917fb7f45b046ba40c57abdb636674a8b559c \; --hash=sha256:1577735524cdad32f9f6942,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:9685,Security,hash,hash,9685,; # via; # -r requirements.txt; # myst-parser; # recommonmark; # sphinx; furo==2023.8.19 \; --hash=sha256:12f99f87a1873b6746228cfde18f77244e6c1ffb85d7fed95e638aae70d80590 \; --hash=sha256:e671ee638ab3f1b472f4033b0167f502ab407830e0db0f843b1c1028119c9cd1; # via -r requirements.txt; idna==3.6 \; --hash=sha256:9ecdbbd083b06798ae1e86adcbfe8ab1479cf864e4ee30fe4e46a003d12491ca \; --hash=sha256:c05567e9c24a6b9faaa835c4821bad0590fbb9d5779e7caa6e1cc4978e7eb24f; # via requests; imagesize==1.4.1 \; --hash=sha256:0d8d18d08f840c19d0ee7ca1fd82490fdc3729b7ac93f49870406ddde8ef8d8b \; --hash=sha256:69150444affb9cb0d5cc5a92b3676f0b2fb7cd9ae39e947a5e11a36b4497cd4a; # via sphinx; jinja2==3.1.2 \; --hash=sha256:31351a702a408a9e7595a8fc6150fc3f43bb6bf7e319770cbc0db9df9437e852 \; --hash=sha256:6088930bfe239f0e6710546ab9c19c9ef35e29792895fed6e6e31a023a182a61; # via; # myst-parser; # sphinx; markdown==3.5.1 \; --hash=sha256:5874b47d4ee3f0b14d764324d2c94c03ea66bee56f2d929da9f2508d65e722dc \; --hash=sha256:b65d7beb248dc22f2e8a31fb706d93798093c308dc1aba295aedeb9d41a813bd; # via sphinx-markdown-tables; markdown-it-py==3.0.0 \; --hash=sha256:355216845c60bd96232cd8d8c40e8f9765cc86f46880e43a8fd22dc1a1a8cab1 \; --hash=sha256:e3f60a94fa066dc52ec76661e37c851cb232d92f9886b15cb560aaada2df8feb; # via; # mdit-py-plugins; # myst-parser; markupsafe==2.1.3 \; --hash=sha256:05fb21170423db021895e1ea1e1f3ab3adb85d1c2333cbc2310f2a26bc77272e \; --hash=sha256:0a4e4a1aff6c7ac4cd55792abf96c915634c2b97e3cc1c7129578aa68ebd754e \; --hash=sha256:10bbfe99883db80bdbaff2dcf681dfc6533a614f700da1287707e8a5d78a8431 \; --hash=sha256:134da1eca9ec0ae528110ccc9e48041e0828d79f24121a1a146161103c76e686 \; --hash=sha256:14ff806850827afd6b07a5f32bd917fb7f45b046ba40c57abdb636674a8b559c \; --hash=sha256:1577735524cdad32f9f694208aa75e422adba74f1baee7551620e43a3141f559 \; --hash=sha256:1b40069d487e7edb2676d3fbdb2b0829ffa2cd63a2ec26c4938b2d34391b4ecc \; --hash=sha256:1b8dd8c3fd14349433c79fa8abeb573a55fc0fdd769133baac1f5e07abf54aeb \; --hash,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:9767,Security,hash,hash,9767,; # via; # -r requirements.txt; # myst-parser; # recommonmark; # sphinx; furo==2023.8.19 \; --hash=sha256:12f99f87a1873b6746228cfde18f77244e6c1ffb85d7fed95e638aae70d80590 \; --hash=sha256:e671ee638ab3f1b472f4033b0167f502ab407830e0db0f843b1c1028119c9cd1; # via -r requirements.txt; idna==3.6 \; --hash=sha256:9ecdbbd083b06798ae1e86adcbfe8ab1479cf864e4ee30fe4e46a003d12491ca \; --hash=sha256:c05567e9c24a6b9faaa835c4821bad0590fbb9d5779e7caa6e1cc4978e7eb24f; # via requests; imagesize==1.4.1 \; --hash=sha256:0d8d18d08f840c19d0ee7ca1fd82490fdc3729b7ac93f49870406ddde8ef8d8b \; --hash=sha256:69150444affb9cb0d5cc5a92b3676f0b2fb7cd9ae39e947a5e11a36b4497cd4a; # via sphinx; jinja2==3.1.2 \; --hash=sha256:31351a702a408a9e7595a8fc6150fc3f43bb6bf7e319770cbc0db9df9437e852 \; --hash=sha256:6088930bfe239f0e6710546ab9c19c9ef35e29792895fed6e6e31a023a182a61; # via; # myst-parser; # sphinx; markdown==3.5.1 \; --hash=sha256:5874b47d4ee3f0b14d764324d2c94c03ea66bee56f2d929da9f2508d65e722dc \; --hash=sha256:b65d7beb248dc22f2e8a31fb706d93798093c308dc1aba295aedeb9d41a813bd; # via sphinx-markdown-tables; markdown-it-py==3.0.0 \; --hash=sha256:355216845c60bd96232cd8d8c40e8f9765cc86f46880e43a8fd22dc1a1a8cab1 \; --hash=sha256:e3f60a94fa066dc52ec76661e37c851cb232d92f9886b15cb560aaada2df8feb; # via; # mdit-py-plugins; # myst-parser; markupsafe==2.1.3 \; --hash=sha256:05fb21170423db021895e1ea1e1f3ab3adb85d1c2333cbc2310f2a26bc77272e \; --hash=sha256:0a4e4a1aff6c7ac4cd55792abf96c915634c2b97e3cc1c7129578aa68ebd754e \; --hash=sha256:10bbfe99883db80bdbaff2dcf681dfc6533a614f700da1287707e8a5d78a8431 \; --hash=sha256:134da1eca9ec0ae528110ccc9e48041e0828d79f24121a1a146161103c76e686 \; --hash=sha256:14ff806850827afd6b07a5f32bd917fb7f45b046ba40c57abdb636674a8b559c \; --hash=sha256:1577735524cdad32f9f694208aa75e422adba74f1baee7551620e43a3141f559 \; --hash=sha256:1b40069d487e7edb2676d3fbdb2b0829ffa2cd63a2ec26c4938b2d34391b4ecc \; --hash=sha256:1b8dd8c3fd14349433c79fa8abeb573a55fc0fdd769133baac1f5e07abf54aeb \; --hash,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:9902,Security,hash,hash,9902,b407830e0db0f843b1c1028119c9cd1; # via -r requirements.txt; idna==3.6 \; --hash=sha256:9ecdbbd083b06798ae1e86adcbfe8ab1479cf864e4ee30fe4e46a003d12491ca \; --hash=sha256:c05567e9c24a6b9faaa835c4821bad0590fbb9d5779e7caa6e1cc4978e7eb24f; # via requests; imagesize==1.4.1 \; --hash=sha256:0d8d18d08f840c19d0ee7ca1fd82490fdc3729b7ac93f49870406ddde8ef8d8b \; --hash=sha256:69150444affb9cb0d5cc5a92b3676f0b2fb7cd9ae39e947a5e11a36b4497cd4a; # via sphinx; jinja2==3.1.2 \; --hash=sha256:31351a702a408a9e7595a8fc6150fc3f43bb6bf7e319770cbc0db9df9437e852 \; --hash=sha256:6088930bfe239f0e6710546ab9c19c9ef35e29792895fed6e6e31a023a182a61; # via; # myst-parser; # sphinx; markdown==3.5.1 \; --hash=sha256:5874b47d4ee3f0b14d764324d2c94c03ea66bee56f2d929da9f2508d65e722dc \; --hash=sha256:b65d7beb248dc22f2e8a31fb706d93798093c308dc1aba295aedeb9d41a813bd; # via sphinx-markdown-tables; markdown-it-py==3.0.0 \; --hash=sha256:355216845c60bd96232cd8d8c40e8f9765cc86f46880e43a8fd22dc1a1a8cab1 \; --hash=sha256:e3f60a94fa066dc52ec76661e37c851cb232d92f9886b15cb560aaada2df8feb; # via; # mdit-py-plugins; # myst-parser; markupsafe==2.1.3 \; --hash=sha256:05fb21170423db021895e1ea1e1f3ab3adb85d1c2333cbc2310f2a26bc77272e \; --hash=sha256:0a4e4a1aff6c7ac4cd55792abf96c915634c2b97e3cc1c7129578aa68ebd754e \; --hash=sha256:10bbfe99883db80bdbaff2dcf681dfc6533a614f700da1287707e8a5d78a8431 \; --hash=sha256:134da1eca9ec0ae528110ccc9e48041e0828d79f24121a1a146161103c76e686 \; --hash=sha256:14ff806850827afd6b07a5f32bd917fb7f45b046ba40c57abdb636674a8b559c \; --hash=sha256:1577735524cdad32f9f694208aa75e422adba74f1baee7551620e43a3141f559 \; --hash=sha256:1b40069d487e7edb2676d3fbdb2b0829ffa2cd63a2ec26c4938b2d34391b4ecc \; --hash=sha256:1b8dd8c3fd14349433c79fa8abeb573a55fc0fdd769133baac1f5e07abf54aeb \; --hash=sha256:1f67c7038d560d92149c060157d623c542173016c4babc0c1913cca0564b9939 \; --hash=sha256:282c2cb35b5b673bbcadb33a585408104df04f14b2d9b01d4c345a3b92861c2c \; --hash=sha256:2c1b19b3aaacc6e57b7e25710ff571c24d6c3613a45e905b,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:9984,Security,hash,hash,9984,b407830e0db0f843b1c1028119c9cd1; # via -r requirements.txt; idna==3.6 \; --hash=sha256:9ecdbbd083b06798ae1e86adcbfe8ab1479cf864e4ee30fe4e46a003d12491ca \; --hash=sha256:c05567e9c24a6b9faaa835c4821bad0590fbb9d5779e7caa6e1cc4978e7eb24f; # via requests; imagesize==1.4.1 \; --hash=sha256:0d8d18d08f840c19d0ee7ca1fd82490fdc3729b7ac93f49870406ddde8ef8d8b \; --hash=sha256:69150444affb9cb0d5cc5a92b3676f0b2fb7cd9ae39e947a5e11a36b4497cd4a; # via sphinx; jinja2==3.1.2 \; --hash=sha256:31351a702a408a9e7595a8fc6150fc3f43bb6bf7e319770cbc0db9df9437e852 \; --hash=sha256:6088930bfe239f0e6710546ab9c19c9ef35e29792895fed6e6e31a023a182a61; # via; # myst-parser; # sphinx; markdown==3.5.1 \; --hash=sha256:5874b47d4ee3f0b14d764324d2c94c03ea66bee56f2d929da9f2508d65e722dc \; --hash=sha256:b65d7beb248dc22f2e8a31fb706d93798093c308dc1aba295aedeb9d41a813bd; # via sphinx-markdown-tables; markdown-it-py==3.0.0 \; --hash=sha256:355216845c60bd96232cd8d8c40e8f9765cc86f46880e43a8fd22dc1a1a8cab1 \; --hash=sha256:e3f60a94fa066dc52ec76661e37c851cb232d92f9886b15cb560aaada2df8feb; # via; # mdit-py-plugins; # myst-parser; markupsafe==2.1.3 \; --hash=sha256:05fb21170423db021895e1ea1e1f3ab3adb85d1c2333cbc2310f2a26bc77272e \; --hash=sha256:0a4e4a1aff6c7ac4cd55792abf96c915634c2b97e3cc1c7129578aa68ebd754e \; --hash=sha256:10bbfe99883db80bdbaff2dcf681dfc6533a614f700da1287707e8a5d78a8431 \; --hash=sha256:134da1eca9ec0ae528110ccc9e48041e0828d79f24121a1a146161103c76e686 \; --hash=sha256:14ff806850827afd6b07a5f32bd917fb7f45b046ba40c57abdb636674a8b559c \; --hash=sha256:1577735524cdad32f9f694208aa75e422adba74f1baee7551620e43a3141f559 \; --hash=sha256:1b40069d487e7edb2676d3fbdb2b0829ffa2cd63a2ec26c4938b2d34391b4ecc \; --hash=sha256:1b8dd8c3fd14349433c79fa8abeb573a55fc0fdd769133baac1f5e07abf54aeb \; --hash=sha256:1f67c7038d560d92149c060157d623c542173016c4babc0c1913cca0564b9939 \; --hash=sha256:282c2cb35b5b673bbcadb33a585408104df04f14b2d9b01d4c345a3b92861c2c \; --hash=sha256:2c1b19b3aaacc6e57b7e25710ff571c24d6c3613a45e905b,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:10126,Security,hash,hash,10126,,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:10208,Security,hash,hash,10208,,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:10290,Security,hash,hash,10290,,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:10372,Security,hash,hash,10372,,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:10454,Security,hash,hash,10454,,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:10536,Security,hash,hash,10536,,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:10618,Security,hash,hash,10618,,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:10700,Security,hash,hash,10700,,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:10782,Security,hash,hash,10782,,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:10864,Security,hash,hash,10864,,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:10946,Security,hash,hash,10946,,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:11028,Security,hash,hash,11028,,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:11110,Security,hash,hash,11110,,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:11192,Security,hash,hash,11192,bc77272e \; --hash=sha256:0a4e4a1aff6c7ac4cd55792abf96c915634c2b97e3cc1c7129578aa68ebd754e \; --hash=sha256:10bbfe99883db80bdbaff2dcf681dfc6533a614f700da1287707e8a5d78a8431 \; --hash=sha256:134da1eca9ec0ae528110ccc9e48041e0828d79f24121a1a146161103c76e686 \; --hash=sha256:14ff806850827afd6b07a5f32bd917fb7f45b046ba40c57abdb636674a8b559c \; --hash=sha256:1577735524cdad32f9f694208aa75e422adba74f1baee7551620e43a3141f559 \; --hash=sha256:1b40069d487e7edb2676d3fbdb2b0829ffa2cd63a2ec26c4938b2d34391b4ecc \; --hash=sha256:1b8dd8c3fd14349433c79fa8abeb573a55fc0fdd769133baac1f5e07abf54aeb \; --hash=sha256:1f67c7038d560d92149c060157d623c542173016c4babc0c1913cca0564b9939 \; --hash=sha256:282c2cb35b5b673bbcadb33a585408104df04f14b2d9b01d4c345a3b92861c2c \; --hash=sha256:2c1b19b3aaacc6e57b7e25710ff571c24d6c3613a45e905b1fde04d691b98ee0 \; --hash=sha256:2ef12179d3a291be237280175b542c07a36e7f60718296278d8593d21ca937d4 \; --hash=sha256:338ae27d6b8745585f87218a3f23f1512dbf52c26c28e322dbe54bcede54ccb9 \; --hash=sha256:3c0fae6c3be832a0a0473ac912810b2877c8cb9d76ca48de1ed31e1c68386575 \; --hash=sha256:3fd4abcb888d15a94f32b75d8fd18ee162ca0c064f35b11134be77050296d6ba \; --hash=sha256:42de32b22b6b804f42c5d98be4f7e5e977ecdd9ee9b660fda1a3edf03b11792d \; --hash=sha256:47d4f1c5f80fc62fdd7777d0d40a2e9dda0a05883ab11374334f6c4de38adffd \; --hash=sha256:504b320cd4b7eff6f968eddf81127112db685e81f7e36e75f9f84f0df46041c3 \; --hash=sha256:525808b8019e36eb524b8c68acdd63a37e75714eac50e988180b169d64480a00 \; --hash=sha256:56d9f2ecac662ca1611d183feb03a3fa4406469dafe241673d521dd5ae92a155 \; --hash=sha256:5bbe06f8eeafd38e5d0a4894ffec89378b6c6a625ff57e3028921f8ff59318ac \; --hash=sha256:65c1a9bcdadc6c28eecee2c119465aebff8f7a584dd719facdd9e825ec61ab52 \; --hash=sha256:68e78619a61ecf91e76aa3e6e8e33fc4894a2bebe93410754bd28fce0a8a4f9f \; --hash=sha256:69c0f17e9f5a7afdf2cc9fb2d1ce6aabdb3bafb7f38017c0b77862bcec2bbad8 \; --hash=sha256:6b2b56950d93e41f33b4223ead100ea0fe11f8e6ee5f641eb753ce4b77a7042b \; --hash=sha256:715d356,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:11274,Security,hash,hash,11274,8ebd754e \; --hash=sha256:10bbfe99883db80bdbaff2dcf681dfc6533a614f700da1287707e8a5d78a8431 \; --hash=sha256:134da1eca9ec0ae528110ccc9e48041e0828d79f24121a1a146161103c76e686 \; --hash=sha256:14ff806850827afd6b07a5f32bd917fb7f45b046ba40c57abdb636674a8b559c \; --hash=sha256:1577735524cdad32f9f694208aa75e422adba74f1baee7551620e43a3141f559 \; --hash=sha256:1b40069d487e7edb2676d3fbdb2b0829ffa2cd63a2ec26c4938b2d34391b4ecc \; --hash=sha256:1b8dd8c3fd14349433c79fa8abeb573a55fc0fdd769133baac1f5e07abf54aeb \; --hash=sha256:1f67c7038d560d92149c060157d623c542173016c4babc0c1913cca0564b9939 \; --hash=sha256:282c2cb35b5b673bbcadb33a585408104df04f14b2d9b01d4c345a3b92861c2c \; --hash=sha256:2c1b19b3aaacc6e57b7e25710ff571c24d6c3613a45e905b1fde04d691b98ee0 \; --hash=sha256:2ef12179d3a291be237280175b542c07a36e7f60718296278d8593d21ca937d4 \; --hash=sha256:338ae27d6b8745585f87218a3f23f1512dbf52c26c28e322dbe54bcede54ccb9 \; --hash=sha256:3c0fae6c3be832a0a0473ac912810b2877c8cb9d76ca48de1ed31e1c68386575 \; --hash=sha256:3fd4abcb888d15a94f32b75d8fd18ee162ca0c064f35b11134be77050296d6ba \; --hash=sha256:42de32b22b6b804f42c5d98be4f7e5e977ecdd9ee9b660fda1a3edf03b11792d \; --hash=sha256:47d4f1c5f80fc62fdd7777d0d40a2e9dda0a05883ab11374334f6c4de38adffd \; --hash=sha256:504b320cd4b7eff6f968eddf81127112db685e81f7e36e75f9f84f0df46041c3 \; --hash=sha256:525808b8019e36eb524b8c68acdd63a37e75714eac50e988180b169d64480a00 \; --hash=sha256:56d9f2ecac662ca1611d183feb03a3fa4406469dafe241673d521dd5ae92a155 \; --hash=sha256:5bbe06f8eeafd38e5d0a4894ffec89378b6c6a625ff57e3028921f8ff59318ac \; --hash=sha256:65c1a9bcdadc6c28eecee2c119465aebff8f7a584dd719facdd9e825ec61ab52 \; --hash=sha256:68e78619a61ecf91e76aa3e6e8e33fc4894a2bebe93410754bd28fce0a8a4f9f \; --hash=sha256:69c0f17e9f5a7afdf2cc9fb2d1ce6aabdb3bafb7f38017c0b77862bcec2bbad8 \; --hash=sha256:6b2b56950d93e41f33b4223ead100ea0fe11f8e6ee5f641eb753ce4b77a7042b \; --hash=sha256:715d3562f79d540f251b99ebd6d8baa547118974341db04f5ad06d5ea3eb8007 \; --hash=sha256:787003c,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:11356,Security,hash,hash,11356,d78a8431 \; --hash=sha256:134da1eca9ec0ae528110ccc9e48041e0828d79f24121a1a146161103c76e686 \; --hash=sha256:14ff806850827afd6b07a5f32bd917fb7f45b046ba40c57abdb636674a8b559c \; --hash=sha256:1577735524cdad32f9f694208aa75e422adba74f1baee7551620e43a3141f559 \; --hash=sha256:1b40069d487e7edb2676d3fbdb2b0829ffa2cd63a2ec26c4938b2d34391b4ecc \; --hash=sha256:1b8dd8c3fd14349433c79fa8abeb573a55fc0fdd769133baac1f5e07abf54aeb \; --hash=sha256:1f67c7038d560d92149c060157d623c542173016c4babc0c1913cca0564b9939 \; --hash=sha256:282c2cb35b5b673bbcadb33a585408104df04f14b2d9b01d4c345a3b92861c2c \; --hash=sha256:2c1b19b3aaacc6e57b7e25710ff571c24d6c3613a45e905b1fde04d691b98ee0 \; --hash=sha256:2ef12179d3a291be237280175b542c07a36e7f60718296278d8593d21ca937d4 \; --hash=sha256:338ae27d6b8745585f87218a3f23f1512dbf52c26c28e322dbe54bcede54ccb9 \; --hash=sha256:3c0fae6c3be832a0a0473ac912810b2877c8cb9d76ca48de1ed31e1c68386575 \; --hash=sha256:3fd4abcb888d15a94f32b75d8fd18ee162ca0c064f35b11134be77050296d6ba \; --hash=sha256:42de32b22b6b804f42c5d98be4f7e5e977ecdd9ee9b660fda1a3edf03b11792d \; --hash=sha256:47d4f1c5f80fc62fdd7777d0d40a2e9dda0a05883ab11374334f6c4de38adffd \; --hash=sha256:504b320cd4b7eff6f968eddf81127112db685e81f7e36e75f9f84f0df46041c3 \; --hash=sha256:525808b8019e36eb524b8c68acdd63a37e75714eac50e988180b169d64480a00 \; --hash=sha256:56d9f2ecac662ca1611d183feb03a3fa4406469dafe241673d521dd5ae92a155 \; --hash=sha256:5bbe06f8eeafd38e5d0a4894ffec89378b6c6a625ff57e3028921f8ff59318ac \; --hash=sha256:65c1a9bcdadc6c28eecee2c119465aebff8f7a584dd719facdd9e825ec61ab52 \; --hash=sha256:68e78619a61ecf91e76aa3e6e8e33fc4894a2bebe93410754bd28fce0a8a4f9f \; --hash=sha256:69c0f17e9f5a7afdf2cc9fb2d1ce6aabdb3bafb7f38017c0b77862bcec2bbad8 \; --hash=sha256:6b2b56950d93e41f33b4223ead100ea0fe11f8e6ee5f641eb753ce4b77a7042b \; --hash=sha256:715d3562f79d540f251b99ebd6d8baa547118974341db04f5ad06d5ea3eb8007 \; --hash=sha256:787003c0ddb00500e49a10f2844fac87aa6ce977b90b0feaaf9de23c22508b24 \; --hash=sha256:7ef3cb2,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:11438,Security,hash,hash,11438,3c76e686 \; --hash=sha256:14ff806850827afd6b07a5f32bd917fb7f45b046ba40c57abdb636674a8b559c \; --hash=sha256:1577735524cdad32f9f694208aa75e422adba74f1baee7551620e43a3141f559 \; --hash=sha256:1b40069d487e7edb2676d3fbdb2b0829ffa2cd63a2ec26c4938b2d34391b4ecc \; --hash=sha256:1b8dd8c3fd14349433c79fa8abeb573a55fc0fdd769133baac1f5e07abf54aeb \; --hash=sha256:1f67c7038d560d92149c060157d623c542173016c4babc0c1913cca0564b9939 \; --hash=sha256:282c2cb35b5b673bbcadb33a585408104df04f14b2d9b01d4c345a3b92861c2c \; --hash=sha256:2c1b19b3aaacc6e57b7e25710ff571c24d6c3613a45e905b1fde04d691b98ee0 \; --hash=sha256:2ef12179d3a291be237280175b542c07a36e7f60718296278d8593d21ca937d4 \; --hash=sha256:338ae27d6b8745585f87218a3f23f1512dbf52c26c28e322dbe54bcede54ccb9 \; --hash=sha256:3c0fae6c3be832a0a0473ac912810b2877c8cb9d76ca48de1ed31e1c68386575 \; --hash=sha256:3fd4abcb888d15a94f32b75d8fd18ee162ca0c064f35b11134be77050296d6ba \; --hash=sha256:42de32b22b6b804f42c5d98be4f7e5e977ecdd9ee9b660fda1a3edf03b11792d \; --hash=sha256:47d4f1c5f80fc62fdd7777d0d40a2e9dda0a05883ab11374334f6c4de38adffd \; --hash=sha256:504b320cd4b7eff6f968eddf81127112db685e81f7e36e75f9f84f0df46041c3 \; --hash=sha256:525808b8019e36eb524b8c68acdd63a37e75714eac50e988180b169d64480a00 \; --hash=sha256:56d9f2ecac662ca1611d183feb03a3fa4406469dafe241673d521dd5ae92a155 \; --hash=sha256:5bbe06f8eeafd38e5d0a4894ffec89378b6c6a625ff57e3028921f8ff59318ac \; --hash=sha256:65c1a9bcdadc6c28eecee2c119465aebff8f7a584dd719facdd9e825ec61ab52 \; --hash=sha256:68e78619a61ecf91e76aa3e6e8e33fc4894a2bebe93410754bd28fce0a8a4f9f \; --hash=sha256:69c0f17e9f5a7afdf2cc9fb2d1ce6aabdb3bafb7f38017c0b77862bcec2bbad8 \; --hash=sha256:6b2b56950d93e41f33b4223ead100ea0fe11f8e6ee5f641eb753ce4b77a7042b \; --hash=sha256:715d3562f79d540f251b99ebd6d8baa547118974341db04f5ad06d5ea3eb8007 \; --hash=sha256:787003c0ddb00500e49a10f2844fac87aa6ce977b90b0feaaf9de23c22508b24 \; --hash=sha256:7ef3cb2ebbf91e330e3bb937efada0edd9003683db6b57bb108c4001f37a02ea \; --hash=sha256:8023faf,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:11520,Security,hash,hash,11520,4a8b559c \; --hash=sha256:1577735524cdad32f9f694208aa75e422adba74f1baee7551620e43a3141f559 \; --hash=sha256:1b40069d487e7edb2676d3fbdb2b0829ffa2cd63a2ec26c4938b2d34391b4ecc \; --hash=sha256:1b8dd8c3fd14349433c79fa8abeb573a55fc0fdd769133baac1f5e07abf54aeb \; --hash=sha256:1f67c7038d560d92149c060157d623c542173016c4babc0c1913cca0564b9939 \; --hash=sha256:282c2cb35b5b673bbcadb33a585408104df04f14b2d9b01d4c345a3b92861c2c \; --hash=sha256:2c1b19b3aaacc6e57b7e25710ff571c24d6c3613a45e905b1fde04d691b98ee0 \; --hash=sha256:2ef12179d3a291be237280175b542c07a36e7f60718296278d8593d21ca937d4 \; --hash=sha256:338ae27d6b8745585f87218a3f23f1512dbf52c26c28e322dbe54bcede54ccb9 \; --hash=sha256:3c0fae6c3be832a0a0473ac912810b2877c8cb9d76ca48de1ed31e1c68386575 \; --hash=sha256:3fd4abcb888d15a94f32b75d8fd18ee162ca0c064f35b11134be77050296d6ba \; --hash=sha256:42de32b22b6b804f42c5d98be4f7e5e977ecdd9ee9b660fda1a3edf03b11792d \; --hash=sha256:47d4f1c5f80fc62fdd7777d0d40a2e9dda0a05883ab11374334f6c4de38adffd \; --hash=sha256:504b320cd4b7eff6f968eddf81127112db685e81f7e36e75f9f84f0df46041c3 \; --hash=sha256:525808b8019e36eb524b8c68acdd63a37e75714eac50e988180b169d64480a00 \; --hash=sha256:56d9f2ecac662ca1611d183feb03a3fa4406469dafe241673d521dd5ae92a155 \; --hash=sha256:5bbe06f8eeafd38e5d0a4894ffec89378b6c6a625ff57e3028921f8ff59318ac \; --hash=sha256:65c1a9bcdadc6c28eecee2c119465aebff8f7a584dd719facdd9e825ec61ab52 \; --hash=sha256:68e78619a61ecf91e76aa3e6e8e33fc4894a2bebe93410754bd28fce0a8a4f9f \; --hash=sha256:69c0f17e9f5a7afdf2cc9fb2d1ce6aabdb3bafb7f38017c0b77862bcec2bbad8 \; --hash=sha256:6b2b56950d93e41f33b4223ead100ea0fe11f8e6ee5f641eb753ce4b77a7042b \; --hash=sha256:715d3562f79d540f251b99ebd6d8baa547118974341db04f5ad06d5ea3eb8007 \; --hash=sha256:787003c0ddb00500e49a10f2844fac87aa6ce977b90b0feaaf9de23c22508b24 \; --hash=sha256:7ef3cb2ebbf91e330e3bb937efada0edd9003683db6b57bb108c4001f37a02ea \; --hash=sha256:8023faf4e01efadfa183e863fefde0046de576c6f14659e8782065bcece22198 \; --hash=sha256:8758846,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:11602,Security,hash,hash,11602,3141f559 \; --hash=sha256:1b40069d487e7edb2676d3fbdb2b0829ffa2cd63a2ec26c4938b2d34391b4ecc \; --hash=sha256:1b8dd8c3fd14349433c79fa8abeb573a55fc0fdd769133baac1f5e07abf54aeb \; --hash=sha256:1f67c7038d560d92149c060157d623c542173016c4babc0c1913cca0564b9939 \; --hash=sha256:282c2cb35b5b673bbcadb33a585408104df04f14b2d9b01d4c345a3b92861c2c \; --hash=sha256:2c1b19b3aaacc6e57b7e25710ff571c24d6c3613a45e905b1fde04d691b98ee0 \; --hash=sha256:2ef12179d3a291be237280175b542c07a36e7f60718296278d8593d21ca937d4 \; --hash=sha256:338ae27d6b8745585f87218a3f23f1512dbf52c26c28e322dbe54bcede54ccb9 \; --hash=sha256:3c0fae6c3be832a0a0473ac912810b2877c8cb9d76ca48de1ed31e1c68386575 \; --hash=sha256:3fd4abcb888d15a94f32b75d8fd18ee162ca0c064f35b11134be77050296d6ba \; --hash=sha256:42de32b22b6b804f42c5d98be4f7e5e977ecdd9ee9b660fda1a3edf03b11792d \; --hash=sha256:47d4f1c5f80fc62fdd7777d0d40a2e9dda0a05883ab11374334f6c4de38adffd \; --hash=sha256:504b320cd4b7eff6f968eddf81127112db685e81f7e36e75f9f84f0df46041c3 \; --hash=sha256:525808b8019e36eb524b8c68acdd63a37e75714eac50e988180b169d64480a00 \; --hash=sha256:56d9f2ecac662ca1611d183feb03a3fa4406469dafe241673d521dd5ae92a155 \; --hash=sha256:5bbe06f8eeafd38e5d0a4894ffec89378b6c6a625ff57e3028921f8ff59318ac \; --hash=sha256:65c1a9bcdadc6c28eecee2c119465aebff8f7a584dd719facdd9e825ec61ab52 \; --hash=sha256:68e78619a61ecf91e76aa3e6e8e33fc4894a2bebe93410754bd28fce0a8a4f9f \; --hash=sha256:69c0f17e9f5a7afdf2cc9fb2d1ce6aabdb3bafb7f38017c0b77862bcec2bbad8 \; --hash=sha256:6b2b56950d93e41f33b4223ead100ea0fe11f8e6ee5f641eb753ce4b77a7042b \; --hash=sha256:715d3562f79d540f251b99ebd6d8baa547118974341db04f5ad06d5ea3eb8007 \; --hash=sha256:787003c0ddb00500e49a10f2844fac87aa6ce977b90b0feaaf9de23c22508b24 \; --hash=sha256:7ef3cb2ebbf91e330e3bb937efada0edd9003683db6b57bb108c4001f37a02ea \; --hash=sha256:8023faf4e01efadfa183e863fefde0046de576c6f14659e8782065bcece22198 \; --hash=sha256:8758846a7e80910096950b67071243da3e5a20ed2546e6392603c096778d48e0 \; --hash=sha256:8afafd9,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:11684,Security,hash,hash,11684,391b4ecc \; --hash=sha256:1b8dd8c3fd14349433c79fa8abeb573a55fc0fdd769133baac1f5e07abf54aeb \; --hash=sha256:1f67c7038d560d92149c060157d623c542173016c4babc0c1913cca0564b9939 \; --hash=sha256:282c2cb35b5b673bbcadb33a585408104df04f14b2d9b01d4c345a3b92861c2c \; --hash=sha256:2c1b19b3aaacc6e57b7e25710ff571c24d6c3613a45e905b1fde04d691b98ee0 \; --hash=sha256:2ef12179d3a291be237280175b542c07a36e7f60718296278d8593d21ca937d4 \; --hash=sha256:338ae27d6b8745585f87218a3f23f1512dbf52c26c28e322dbe54bcede54ccb9 \; --hash=sha256:3c0fae6c3be832a0a0473ac912810b2877c8cb9d76ca48de1ed31e1c68386575 \; --hash=sha256:3fd4abcb888d15a94f32b75d8fd18ee162ca0c064f35b11134be77050296d6ba \; --hash=sha256:42de32b22b6b804f42c5d98be4f7e5e977ecdd9ee9b660fda1a3edf03b11792d \; --hash=sha256:47d4f1c5f80fc62fdd7777d0d40a2e9dda0a05883ab11374334f6c4de38adffd \; --hash=sha256:504b320cd4b7eff6f968eddf81127112db685e81f7e36e75f9f84f0df46041c3 \; --hash=sha256:525808b8019e36eb524b8c68acdd63a37e75714eac50e988180b169d64480a00 \; --hash=sha256:56d9f2ecac662ca1611d183feb03a3fa4406469dafe241673d521dd5ae92a155 \; --hash=sha256:5bbe06f8eeafd38e5d0a4894ffec89378b6c6a625ff57e3028921f8ff59318ac \; --hash=sha256:65c1a9bcdadc6c28eecee2c119465aebff8f7a584dd719facdd9e825ec61ab52 \; --hash=sha256:68e78619a61ecf91e76aa3e6e8e33fc4894a2bebe93410754bd28fce0a8a4f9f \; --hash=sha256:69c0f17e9f5a7afdf2cc9fb2d1ce6aabdb3bafb7f38017c0b77862bcec2bbad8 \; --hash=sha256:6b2b56950d93e41f33b4223ead100ea0fe11f8e6ee5f641eb753ce4b77a7042b \; --hash=sha256:715d3562f79d540f251b99ebd6d8baa547118974341db04f5ad06d5ea3eb8007 \; --hash=sha256:787003c0ddb00500e49a10f2844fac87aa6ce977b90b0feaaf9de23c22508b24 \; --hash=sha256:7ef3cb2ebbf91e330e3bb937efada0edd9003683db6b57bb108c4001f37a02ea \; --hash=sha256:8023faf4e01efadfa183e863fefde0046de576c6f14659e8782065bcece22198 \; --hash=sha256:8758846a7e80910096950b67071243da3e5a20ed2546e6392603c096778d48e0 \; --hash=sha256:8afafd99945ead6e075b973fefa56379c5b5c53fd8937dad92c662da5d8fd5ee \; --hash=sha256:8c41976,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:11766,Security,hash,hash,11766,abf54aeb \; --hash=sha256:1f67c7038d560d92149c060157d623c542173016c4babc0c1913cca0564b9939 \; --hash=sha256:282c2cb35b5b673bbcadb33a585408104df04f14b2d9b01d4c345a3b92861c2c \; --hash=sha256:2c1b19b3aaacc6e57b7e25710ff571c24d6c3613a45e905b1fde04d691b98ee0 \; --hash=sha256:2ef12179d3a291be237280175b542c07a36e7f60718296278d8593d21ca937d4 \; --hash=sha256:338ae27d6b8745585f87218a3f23f1512dbf52c26c28e322dbe54bcede54ccb9 \; --hash=sha256:3c0fae6c3be832a0a0473ac912810b2877c8cb9d76ca48de1ed31e1c68386575 \; --hash=sha256:3fd4abcb888d15a94f32b75d8fd18ee162ca0c064f35b11134be77050296d6ba \; --hash=sha256:42de32b22b6b804f42c5d98be4f7e5e977ecdd9ee9b660fda1a3edf03b11792d \; --hash=sha256:47d4f1c5f80fc62fdd7777d0d40a2e9dda0a05883ab11374334f6c4de38adffd \; --hash=sha256:504b320cd4b7eff6f968eddf81127112db685e81f7e36e75f9f84f0df46041c3 \; --hash=sha256:525808b8019e36eb524b8c68acdd63a37e75714eac50e988180b169d64480a00 \; --hash=sha256:56d9f2ecac662ca1611d183feb03a3fa4406469dafe241673d521dd5ae92a155 \; --hash=sha256:5bbe06f8eeafd38e5d0a4894ffec89378b6c6a625ff57e3028921f8ff59318ac \; --hash=sha256:65c1a9bcdadc6c28eecee2c119465aebff8f7a584dd719facdd9e825ec61ab52 \; --hash=sha256:68e78619a61ecf91e76aa3e6e8e33fc4894a2bebe93410754bd28fce0a8a4f9f \; --hash=sha256:69c0f17e9f5a7afdf2cc9fb2d1ce6aabdb3bafb7f38017c0b77862bcec2bbad8 \; --hash=sha256:6b2b56950d93e41f33b4223ead100ea0fe11f8e6ee5f641eb753ce4b77a7042b \; --hash=sha256:715d3562f79d540f251b99ebd6d8baa547118974341db04f5ad06d5ea3eb8007 \; --hash=sha256:787003c0ddb00500e49a10f2844fac87aa6ce977b90b0feaaf9de23c22508b24 \; --hash=sha256:7ef3cb2ebbf91e330e3bb937efada0edd9003683db6b57bb108c4001f37a02ea \; --hash=sha256:8023faf4e01efadfa183e863fefde0046de576c6f14659e8782065bcece22198 \; --hash=sha256:8758846a7e80910096950b67071243da3e5a20ed2546e6392603c096778d48e0 \; --hash=sha256:8afafd99945ead6e075b973fefa56379c5b5c53fd8937dad92c662da5d8fd5ee \; --hash=sha256:8c41976a29d078bb235fea9b2ecd3da465df42a562910f9022f1a03107bd02be \; --hash=sha256:8e254ae,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:11848,Security,hash,hash,11848,564b9939 \; --hash=sha256:282c2cb35b5b673bbcadb33a585408104df04f14b2d9b01d4c345a3b92861c2c \; --hash=sha256:2c1b19b3aaacc6e57b7e25710ff571c24d6c3613a45e905b1fde04d691b98ee0 \; --hash=sha256:2ef12179d3a291be237280175b542c07a36e7f60718296278d8593d21ca937d4 \; --hash=sha256:338ae27d6b8745585f87218a3f23f1512dbf52c26c28e322dbe54bcede54ccb9 \; --hash=sha256:3c0fae6c3be832a0a0473ac912810b2877c8cb9d76ca48de1ed31e1c68386575 \; --hash=sha256:3fd4abcb888d15a94f32b75d8fd18ee162ca0c064f35b11134be77050296d6ba \; --hash=sha256:42de32b22b6b804f42c5d98be4f7e5e977ecdd9ee9b660fda1a3edf03b11792d \; --hash=sha256:47d4f1c5f80fc62fdd7777d0d40a2e9dda0a05883ab11374334f6c4de38adffd \; --hash=sha256:504b320cd4b7eff6f968eddf81127112db685e81f7e36e75f9f84f0df46041c3 \; --hash=sha256:525808b8019e36eb524b8c68acdd63a37e75714eac50e988180b169d64480a00 \; --hash=sha256:56d9f2ecac662ca1611d183feb03a3fa4406469dafe241673d521dd5ae92a155 \; --hash=sha256:5bbe06f8eeafd38e5d0a4894ffec89378b6c6a625ff57e3028921f8ff59318ac \; --hash=sha256:65c1a9bcdadc6c28eecee2c119465aebff8f7a584dd719facdd9e825ec61ab52 \; --hash=sha256:68e78619a61ecf91e76aa3e6e8e33fc4894a2bebe93410754bd28fce0a8a4f9f \; --hash=sha256:69c0f17e9f5a7afdf2cc9fb2d1ce6aabdb3bafb7f38017c0b77862bcec2bbad8 \; --hash=sha256:6b2b56950d93e41f33b4223ead100ea0fe11f8e6ee5f641eb753ce4b77a7042b \; --hash=sha256:715d3562f79d540f251b99ebd6d8baa547118974341db04f5ad06d5ea3eb8007 \; --hash=sha256:787003c0ddb00500e49a10f2844fac87aa6ce977b90b0feaaf9de23c22508b24 \; --hash=sha256:7ef3cb2ebbf91e330e3bb937efada0edd9003683db6b57bb108c4001f37a02ea \; --hash=sha256:8023faf4e01efadfa183e863fefde0046de576c6f14659e8782065bcece22198 \; --hash=sha256:8758846a7e80910096950b67071243da3e5a20ed2546e6392603c096778d48e0 \; --hash=sha256:8afafd99945ead6e075b973fefa56379c5b5c53fd8937dad92c662da5d8fd5ee \; --hash=sha256:8c41976a29d078bb235fea9b2ecd3da465df42a562910f9022f1a03107bd02be \; --hash=sha256:8e254ae696c88d98da6555f5ace2279cf7cd5b3f52be2b5cf97feafe883b58d2 \; --hash=sha256:8f92938,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:11930,Security,hash,hash,11930,92861c2c \; --hash=sha256:2c1b19b3aaacc6e57b7e25710ff571c24d6c3613a45e905b1fde04d691b98ee0 \; --hash=sha256:2ef12179d3a291be237280175b542c07a36e7f60718296278d8593d21ca937d4 \; --hash=sha256:338ae27d6b8745585f87218a3f23f1512dbf52c26c28e322dbe54bcede54ccb9 \; --hash=sha256:3c0fae6c3be832a0a0473ac912810b2877c8cb9d76ca48de1ed31e1c68386575 \; --hash=sha256:3fd4abcb888d15a94f32b75d8fd18ee162ca0c064f35b11134be77050296d6ba \; --hash=sha256:42de32b22b6b804f42c5d98be4f7e5e977ecdd9ee9b660fda1a3edf03b11792d \; --hash=sha256:47d4f1c5f80fc62fdd7777d0d40a2e9dda0a05883ab11374334f6c4de38adffd \; --hash=sha256:504b320cd4b7eff6f968eddf81127112db685e81f7e36e75f9f84f0df46041c3 \; --hash=sha256:525808b8019e36eb524b8c68acdd63a37e75714eac50e988180b169d64480a00 \; --hash=sha256:56d9f2ecac662ca1611d183feb03a3fa4406469dafe241673d521dd5ae92a155 \; --hash=sha256:5bbe06f8eeafd38e5d0a4894ffec89378b6c6a625ff57e3028921f8ff59318ac \; --hash=sha256:65c1a9bcdadc6c28eecee2c119465aebff8f7a584dd719facdd9e825ec61ab52 \; --hash=sha256:68e78619a61ecf91e76aa3e6e8e33fc4894a2bebe93410754bd28fce0a8a4f9f \; --hash=sha256:69c0f17e9f5a7afdf2cc9fb2d1ce6aabdb3bafb7f38017c0b77862bcec2bbad8 \; --hash=sha256:6b2b56950d93e41f33b4223ead100ea0fe11f8e6ee5f641eb753ce4b77a7042b \; --hash=sha256:715d3562f79d540f251b99ebd6d8baa547118974341db04f5ad06d5ea3eb8007 \; --hash=sha256:787003c0ddb00500e49a10f2844fac87aa6ce977b90b0feaaf9de23c22508b24 \; --hash=sha256:7ef3cb2ebbf91e330e3bb937efada0edd9003683db6b57bb108c4001f37a02ea \; --hash=sha256:8023faf4e01efadfa183e863fefde0046de576c6f14659e8782065bcece22198 \; --hash=sha256:8758846a7e80910096950b67071243da3e5a20ed2546e6392603c096778d48e0 \; --hash=sha256:8afafd99945ead6e075b973fefa56379c5b5c53fd8937dad92c662da5d8fd5ee \; --hash=sha256:8c41976a29d078bb235fea9b2ecd3da465df42a562910f9022f1a03107bd02be \; --hash=sha256:8e254ae696c88d98da6555f5ace2279cf7cd5b3f52be2b5cf97feafe883b58d2 \; --hash=sha256:8f9293864fe09b8149f0cc42ce56e3f0e54de883a9de90cd427f191c346eb2e1 \; --hash=sha256:9402b03,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:12012,Security,hash,hash,12012,91b98ee0 \; --hash=sha256:2ef12179d3a291be237280175b542c07a36e7f60718296278d8593d21ca937d4 \; --hash=sha256:338ae27d6b8745585f87218a3f23f1512dbf52c26c28e322dbe54bcede54ccb9 \; --hash=sha256:3c0fae6c3be832a0a0473ac912810b2877c8cb9d76ca48de1ed31e1c68386575 \; --hash=sha256:3fd4abcb888d15a94f32b75d8fd18ee162ca0c064f35b11134be77050296d6ba \; --hash=sha256:42de32b22b6b804f42c5d98be4f7e5e977ecdd9ee9b660fda1a3edf03b11792d \; --hash=sha256:47d4f1c5f80fc62fdd7777d0d40a2e9dda0a05883ab11374334f6c4de38adffd \; --hash=sha256:504b320cd4b7eff6f968eddf81127112db685e81f7e36e75f9f84f0df46041c3 \; --hash=sha256:525808b8019e36eb524b8c68acdd63a37e75714eac50e988180b169d64480a00 \; --hash=sha256:56d9f2ecac662ca1611d183feb03a3fa4406469dafe241673d521dd5ae92a155 \; --hash=sha256:5bbe06f8eeafd38e5d0a4894ffec89378b6c6a625ff57e3028921f8ff59318ac \; --hash=sha256:65c1a9bcdadc6c28eecee2c119465aebff8f7a584dd719facdd9e825ec61ab52 \; --hash=sha256:68e78619a61ecf91e76aa3e6e8e33fc4894a2bebe93410754bd28fce0a8a4f9f \; --hash=sha256:69c0f17e9f5a7afdf2cc9fb2d1ce6aabdb3bafb7f38017c0b77862bcec2bbad8 \; --hash=sha256:6b2b56950d93e41f33b4223ead100ea0fe11f8e6ee5f641eb753ce4b77a7042b \; --hash=sha256:715d3562f79d540f251b99ebd6d8baa547118974341db04f5ad06d5ea3eb8007 \; --hash=sha256:787003c0ddb00500e49a10f2844fac87aa6ce977b90b0feaaf9de23c22508b24 \; --hash=sha256:7ef3cb2ebbf91e330e3bb937efada0edd9003683db6b57bb108c4001f37a02ea \; --hash=sha256:8023faf4e01efadfa183e863fefde0046de576c6f14659e8782065bcece22198 \; --hash=sha256:8758846a7e80910096950b67071243da3e5a20ed2546e6392603c096778d48e0 \; --hash=sha256:8afafd99945ead6e075b973fefa56379c5b5c53fd8937dad92c662da5d8fd5ee \; --hash=sha256:8c41976a29d078bb235fea9b2ecd3da465df42a562910f9022f1a03107bd02be \; --hash=sha256:8e254ae696c88d98da6555f5ace2279cf7cd5b3f52be2b5cf97feafe883b58d2 \; --hash=sha256:8f9293864fe09b8149f0cc42ce56e3f0e54de883a9de90cd427f191c346eb2e1 \; --hash=sha256:9402b03f1a1b4dc4c19845e5c749e3ab82d5078d16a2a4c2cd2df62d57bb0707 \; --hash=sha256:962f82a,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:12094,Security,hash,hash,12094,1ca937d4 \; --hash=sha256:338ae27d6b8745585f87218a3f23f1512dbf52c26c28e322dbe54bcede54ccb9 \; --hash=sha256:3c0fae6c3be832a0a0473ac912810b2877c8cb9d76ca48de1ed31e1c68386575 \; --hash=sha256:3fd4abcb888d15a94f32b75d8fd18ee162ca0c064f35b11134be77050296d6ba \; --hash=sha256:42de32b22b6b804f42c5d98be4f7e5e977ecdd9ee9b660fda1a3edf03b11792d \; --hash=sha256:47d4f1c5f80fc62fdd7777d0d40a2e9dda0a05883ab11374334f6c4de38adffd \; --hash=sha256:504b320cd4b7eff6f968eddf81127112db685e81f7e36e75f9f84f0df46041c3 \; --hash=sha256:525808b8019e36eb524b8c68acdd63a37e75714eac50e988180b169d64480a00 \; --hash=sha256:56d9f2ecac662ca1611d183feb03a3fa4406469dafe241673d521dd5ae92a155 \; --hash=sha256:5bbe06f8eeafd38e5d0a4894ffec89378b6c6a625ff57e3028921f8ff59318ac \; --hash=sha256:65c1a9bcdadc6c28eecee2c119465aebff8f7a584dd719facdd9e825ec61ab52 \; --hash=sha256:68e78619a61ecf91e76aa3e6e8e33fc4894a2bebe93410754bd28fce0a8a4f9f \; --hash=sha256:69c0f17e9f5a7afdf2cc9fb2d1ce6aabdb3bafb7f38017c0b77862bcec2bbad8 \; --hash=sha256:6b2b56950d93e41f33b4223ead100ea0fe11f8e6ee5f641eb753ce4b77a7042b \; --hash=sha256:715d3562f79d540f251b99ebd6d8baa547118974341db04f5ad06d5ea3eb8007 \; --hash=sha256:787003c0ddb00500e49a10f2844fac87aa6ce977b90b0feaaf9de23c22508b24 \; --hash=sha256:7ef3cb2ebbf91e330e3bb937efada0edd9003683db6b57bb108c4001f37a02ea \; --hash=sha256:8023faf4e01efadfa183e863fefde0046de576c6f14659e8782065bcece22198 \; --hash=sha256:8758846a7e80910096950b67071243da3e5a20ed2546e6392603c096778d48e0 \; --hash=sha256:8afafd99945ead6e075b973fefa56379c5b5c53fd8937dad92c662da5d8fd5ee \; --hash=sha256:8c41976a29d078bb235fea9b2ecd3da465df42a562910f9022f1a03107bd02be \; --hash=sha256:8e254ae696c88d98da6555f5ace2279cf7cd5b3f52be2b5cf97feafe883b58d2 \; --hash=sha256:8f9293864fe09b8149f0cc42ce56e3f0e54de883a9de90cd427f191c346eb2e1 \; --hash=sha256:9402b03f1a1b4dc4c19845e5c749e3ab82d5078d16a2a4c2cd2df62d57bb0707 \; --hash=sha256:962f82a3086483f5e5f64dbad880d31038b698494799b097bc59c2edf392fce6 \; --hash=sha256:9aad3c1,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:12176,Security,hash,hash,12176,de54ccb9 \; --hash=sha256:3c0fae6c3be832a0a0473ac912810b2877c8cb9d76ca48de1ed31e1c68386575 \; --hash=sha256:3fd4abcb888d15a94f32b75d8fd18ee162ca0c064f35b11134be77050296d6ba \; --hash=sha256:42de32b22b6b804f42c5d98be4f7e5e977ecdd9ee9b660fda1a3edf03b11792d \; --hash=sha256:47d4f1c5f80fc62fdd7777d0d40a2e9dda0a05883ab11374334f6c4de38adffd \; --hash=sha256:504b320cd4b7eff6f968eddf81127112db685e81f7e36e75f9f84f0df46041c3 \; --hash=sha256:525808b8019e36eb524b8c68acdd63a37e75714eac50e988180b169d64480a00 \; --hash=sha256:56d9f2ecac662ca1611d183feb03a3fa4406469dafe241673d521dd5ae92a155 \; --hash=sha256:5bbe06f8eeafd38e5d0a4894ffec89378b6c6a625ff57e3028921f8ff59318ac \; --hash=sha256:65c1a9bcdadc6c28eecee2c119465aebff8f7a584dd719facdd9e825ec61ab52 \; --hash=sha256:68e78619a61ecf91e76aa3e6e8e33fc4894a2bebe93410754bd28fce0a8a4f9f \; --hash=sha256:69c0f17e9f5a7afdf2cc9fb2d1ce6aabdb3bafb7f38017c0b77862bcec2bbad8 \; --hash=sha256:6b2b56950d93e41f33b4223ead100ea0fe11f8e6ee5f641eb753ce4b77a7042b \; --hash=sha256:715d3562f79d540f251b99ebd6d8baa547118974341db04f5ad06d5ea3eb8007 \; --hash=sha256:787003c0ddb00500e49a10f2844fac87aa6ce977b90b0feaaf9de23c22508b24 \; --hash=sha256:7ef3cb2ebbf91e330e3bb937efada0edd9003683db6b57bb108c4001f37a02ea \; --hash=sha256:8023faf4e01efadfa183e863fefde0046de576c6f14659e8782065bcece22198 \; --hash=sha256:8758846a7e80910096950b67071243da3e5a20ed2546e6392603c096778d48e0 \; --hash=sha256:8afafd99945ead6e075b973fefa56379c5b5c53fd8937dad92c662da5d8fd5ee \; --hash=sha256:8c41976a29d078bb235fea9b2ecd3da465df42a562910f9022f1a03107bd02be \; --hash=sha256:8e254ae696c88d98da6555f5ace2279cf7cd5b3f52be2b5cf97feafe883b58d2 \; --hash=sha256:8f9293864fe09b8149f0cc42ce56e3f0e54de883a9de90cd427f191c346eb2e1 \; --hash=sha256:9402b03f1a1b4dc4c19845e5c749e3ab82d5078d16a2a4c2cd2df62d57bb0707 \; --hash=sha256:962f82a3086483f5e5f64dbad880d31038b698494799b097bc59c2edf392fce6 \; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:12258,Security,hash,hash,12258,68386575 \; --hash=sha256:3fd4abcb888d15a94f32b75d8fd18ee162ca0c064f35b11134be77050296d6ba \; --hash=sha256:42de32b22b6b804f42c5d98be4f7e5e977ecdd9ee9b660fda1a3edf03b11792d \; --hash=sha256:47d4f1c5f80fc62fdd7777d0d40a2e9dda0a05883ab11374334f6c4de38adffd \; --hash=sha256:504b320cd4b7eff6f968eddf81127112db685e81f7e36e75f9f84f0df46041c3 \; --hash=sha256:525808b8019e36eb524b8c68acdd63a37e75714eac50e988180b169d64480a00 \; --hash=sha256:56d9f2ecac662ca1611d183feb03a3fa4406469dafe241673d521dd5ae92a155 \; --hash=sha256:5bbe06f8eeafd38e5d0a4894ffec89378b6c6a625ff57e3028921f8ff59318ac \; --hash=sha256:65c1a9bcdadc6c28eecee2c119465aebff8f7a584dd719facdd9e825ec61ab52 \; --hash=sha256:68e78619a61ecf91e76aa3e6e8e33fc4894a2bebe93410754bd28fce0a8a4f9f \; --hash=sha256:69c0f17e9f5a7afdf2cc9fb2d1ce6aabdb3bafb7f38017c0b77862bcec2bbad8 \; --hash=sha256:6b2b56950d93e41f33b4223ead100ea0fe11f8e6ee5f641eb753ce4b77a7042b \; --hash=sha256:715d3562f79d540f251b99ebd6d8baa547118974341db04f5ad06d5ea3eb8007 \; --hash=sha256:787003c0ddb00500e49a10f2844fac87aa6ce977b90b0feaaf9de23c22508b24 \; --hash=sha256:7ef3cb2ebbf91e330e3bb937efada0edd9003683db6b57bb108c4001f37a02ea \; --hash=sha256:8023faf4e01efadfa183e863fefde0046de576c6f14659e8782065bcece22198 \; --hash=sha256:8758846a7e80910096950b67071243da3e5a20ed2546e6392603c096778d48e0 \; --hash=sha256:8afafd99945ead6e075b973fefa56379c5b5c53fd8937dad92c662da5d8fd5ee \; --hash=sha256:8c41976a29d078bb235fea9b2ecd3da465df42a562910f9022f1a03107bd02be \; --hash=sha256:8e254ae696c88d98da6555f5ace2279cf7cd5b3f52be2b5cf97feafe883b58d2 \; --hash=sha256:8f9293864fe09b8149f0cc42ce56e3f0e54de883a9de90cd427f191c346eb2e1 \; --hash=sha256:9402b03f1a1b4dc4c19845e5c749e3ab82d5078d16a2a4c2cd2df62d57bb0707 \; --hash=sha256:962f82a3086483f5e5f64dbad880d31038b698494799b097bc59c2edf392fce6 \; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:12340,Security,hash,hash,12340,0296d6ba \; --hash=sha256:42de32b22b6b804f42c5d98be4f7e5e977ecdd9ee9b660fda1a3edf03b11792d \; --hash=sha256:47d4f1c5f80fc62fdd7777d0d40a2e9dda0a05883ab11374334f6c4de38adffd \; --hash=sha256:504b320cd4b7eff6f968eddf81127112db685e81f7e36e75f9f84f0df46041c3 \; --hash=sha256:525808b8019e36eb524b8c68acdd63a37e75714eac50e988180b169d64480a00 \; --hash=sha256:56d9f2ecac662ca1611d183feb03a3fa4406469dafe241673d521dd5ae92a155 \; --hash=sha256:5bbe06f8eeafd38e5d0a4894ffec89378b6c6a625ff57e3028921f8ff59318ac \; --hash=sha256:65c1a9bcdadc6c28eecee2c119465aebff8f7a584dd719facdd9e825ec61ab52 \; --hash=sha256:68e78619a61ecf91e76aa3e6e8e33fc4894a2bebe93410754bd28fce0a8a4f9f \; --hash=sha256:69c0f17e9f5a7afdf2cc9fb2d1ce6aabdb3bafb7f38017c0b77862bcec2bbad8 \; --hash=sha256:6b2b56950d93e41f33b4223ead100ea0fe11f8e6ee5f641eb753ce4b77a7042b \; --hash=sha256:715d3562f79d540f251b99ebd6d8baa547118974341db04f5ad06d5ea3eb8007 \; --hash=sha256:787003c0ddb00500e49a10f2844fac87aa6ce977b90b0feaaf9de23c22508b24 \; --hash=sha256:7ef3cb2ebbf91e330e3bb937efada0edd9003683db6b57bb108c4001f37a02ea \; --hash=sha256:8023faf4e01efadfa183e863fefde0046de576c6f14659e8782065bcece22198 \; --hash=sha256:8758846a7e80910096950b67071243da3e5a20ed2546e6392603c096778d48e0 \; --hash=sha256:8afafd99945ead6e075b973fefa56379c5b5c53fd8937dad92c662da5d8fd5ee \; --hash=sha256:8c41976a29d078bb235fea9b2ecd3da465df42a562910f9022f1a03107bd02be \; --hash=sha256:8e254ae696c88d98da6555f5ace2279cf7cd5b3f52be2b5cf97feafe883b58d2 \; --hash=sha256:8f9293864fe09b8149f0cc42ce56e3f0e54de883a9de90cd427f191c346eb2e1 \; --hash=sha256:9402b03f1a1b4dc4c19845e5c749e3ab82d5078d16a2a4c2cd2df62d57bb0707 \; --hash=sha256:962f82a3086483f5e5f64dbad880d31038b698494799b097bc59c2edf392fce6 \; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd13,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:12422,Security,hash,hash,12422,3b11792d \; --hash=sha256:47d4f1c5f80fc62fdd7777d0d40a2e9dda0a05883ab11374334f6c4de38adffd \; --hash=sha256:504b320cd4b7eff6f968eddf81127112db685e81f7e36e75f9f84f0df46041c3 \; --hash=sha256:525808b8019e36eb524b8c68acdd63a37e75714eac50e988180b169d64480a00 \; --hash=sha256:56d9f2ecac662ca1611d183feb03a3fa4406469dafe241673d521dd5ae92a155 \; --hash=sha256:5bbe06f8eeafd38e5d0a4894ffec89378b6c6a625ff57e3028921f8ff59318ac \; --hash=sha256:65c1a9bcdadc6c28eecee2c119465aebff8f7a584dd719facdd9e825ec61ab52 \; --hash=sha256:68e78619a61ecf91e76aa3e6e8e33fc4894a2bebe93410754bd28fce0a8a4f9f \; --hash=sha256:69c0f17e9f5a7afdf2cc9fb2d1ce6aabdb3bafb7f38017c0b77862bcec2bbad8 \; --hash=sha256:6b2b56950d93e41f33b4223ead100ea0fe11f8e6ee5f641eb753ce4b77a7042b \; --hash=sha256:715d3562f79d540f251b99ebd6d8baa547118974341db04f5ad06d5ea3eb8007 \; --hash=sha256:787003c0ddb00500e49a10f2844fac87aa6ce977b90b0feaaf9de23c22508b24 \; --hash=sha256:7ef3cb2ebbf91e330e3bb937efada0edd9003683db6b57bb108c4001f37a02ea \; --hash=sha256:8023faf4e01efadfa183e863fefde0046de576c6f14659e8782065bcece22198 \; --hash=sha256:8758846a7e80910096950b67071243da3e5a20ed2546e6392603c096778d48e0 \; --hash=sha256:8afafd99945ead6e075b973fefa56379c5b5c53fd8937dad92c662da5d8fd5ee \; --hash=sha256:8c41976a29d078bb235fea9b2ecd3da465df42a562910f9022f1a03107bd02be \; --hash=sha256:8e254ae696c88d98da6555f5ace2279cf7cd5b3f52be2b5cf97feafe883b58d2 \; --hash=sha256:8f9293864fe09b8149f0cc42ce56e3f0e54de883a9de90cd427f191c346eb2e1 \; --hash=sha256:9402b03f1a1b4dc4c19845e5c749e3ab82d5078d16a2a4c2cd2df62d57bb0707 \; --hash=sha256:962f82a3086483f5e5f64dbad880d31038b698494799b097bc59c2edf392fce6 \; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \; --hash=sha256:ab4a0df,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:12504,Security,hash,hash,12504,e38adffd \; --hash=sha256:504b320cd4b7eff6f968eddf81127112db685e81f7e36e75f9f84f0df46041c3 \; --hash=sha256:525808b8019e36eb524b8c68acdd63a37e75714eac50e988180b169d64480a00 \; --hash=sha256:56d9f2ecac662ca1611d183feb03a3fa4406469dafe241673d521dd5ae92a155 \; --hash=sha256:5bbe06f8eeafd38e5d0a4894ffec89378b6c6a625ff57e3028921f8ff59318ac \; --hash=sha256:65c1a9bcdadc6c28eecee2c119465aebff8f7a584dd719facdd9e825ec61ab52 \; --hash=sha256:68e78619a61ecf91e76aa3e6e8e33fc4894a2bebe93410754bd28fce0a8a4f9f \; --hash=sha256:69c0f17e9f5a7afdf2cc9fb2d1ce6aabdb3bafb7f38017c0b77862bcec2bbad8 \; --hash=sha256:6b2b56950d93e41f33b4223ead100ea0fe11f8e6ee5f641eb753ce4b77a7042b \; --hash=sha256:715d3562f79d540f251b99ebd6d8baa547118974341db04f5ad06d5ea3eb8007 \; --hash=sha256:787003c0ddb00500e49a10f2844fac87aa6ce977b90b0feaaf9de23c22508b24 \; --hash=sha256:7ef3cb2ebbf91e330e3bb937efada0edd9003683db6b57bb108c4001f37a02ea \; --hash=sha256:8023faf4e01efadfa183e863fefde0046de576c6f14659e8782065bcece22198 \; --hash=sha256:8758846a7e80910096950b67071243da3e5a20ed2546e6392603c096778d48e0 \; --hash=sha256:8afafd99945ead6e075b973fefa56379c5b5c53fd8937dad92c662da5d8fd5ee \; --hash=sha256:8c41976a29d078bb235fea9b2ecd3da465df42a562910f9022f1a03107bd02be \; --hash=sha256:8e254ae696c88d98da6555f5ace2279cf7cd5b3f52be2b5cf97feafe883b58d2 \; --hash=sha256:8f9293864fe09b8149f0cc42ce56e3f0e54de883a9de90cd427f191c346eb2e1 \; --hash=sha256:9402b03f1a1b4dc4c19845e5c749e3ab82d5078d16a2a4c2cd2df62d57bb0707 \; --hash=sha256:962f82a3086483f5e5f64dbad880d31038b698494799b097bc59c2edf392fce6 \; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \; --hash=sha256:ab4a0df41e7c16a1392727727e7998a467472d0ad65f3ad5e6e765015df08636 \; --hash=sha256:ad9e82f,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:12586,Security,hash,hash,12586,f46041c3 \; --hash=sha256:525808b8019e36eb524b8c68acdd63a37e75714eac50e988180b169d64480a00 \; --hash=sha256:56d9f2ecac662ca1611d183feb03a3fa4406469dafe241673d521dd5ae92a155 \; --hash=sha256:5bbe06f8eeafd38e5d0a4894ffec89378b6c6a625ff57e3028921f8ff59318ac \; --hash=sha256:65c1a9bcdadc6c28eecee2c119465aebff8f7a584dd719facdd9e825ec61ab52 \; --hash=sha256:68e78619a61ecf91e76aa3e6e8e33fc4894a2bebe93410754bd28fce0a8a4f9f \; --hash=sha256:69c0f17e9f5a7afdf2cc9fb2d1ce6aabdb3bafb7f38017c0b77862bcec2bbad8 \; --hash=sha256:6b2b56950d93e41f33b4223ead100ea0fe11f8e6ee5f641eb753ce4b77a7042b \; --hash=sha256:715d3562f79d540f251b99ebd6d8baa547118974341db04f5ad06d5ea3eb8007 \; --hash=sha256:787003c0ddb00500e49a10f2844fac87aa6ce977b90b0feaaf9de23c22508b24 \; --hash=sha256:7ef3cb2ebbf91e330e3bb937efada0edd9003683db6b57bb108c4001f37a02ea \; --hash=sha256:8023faf4e01efadfa183e863fefde0046de576c6f14659e8782065bcece22198 \; --hash=sha256:8758846a7e80910096950b67071243da3e5a20ed2546e6392603c096778d48e0 \; --hash=sha256:8afafd99945ead6e075b973fefa56379c5b5c53fd8937dad92c662da5d8fd5ee \; --hash=sha256:8c41976a29d078bb235fea9b2ecd3da465df42a562910f9022f1a03107bd02be \; --hash=sha256:8e254ae696c88d98da6555f5ace2279cf7cd5b3f52be2b5cf97feafe883b58d2 \; --hash=sha256:8f9293864fe09b8149f0cc42ce56e3f0e54de883a9de90cd427f191c346eb2e1 \; --hash=sha256:9402b03f1a1b4dc4c19845e5c749e3ab82d5078d16a2a4c2cd2df62d57bb0707 \; --hash=sha256:962f82a3086483f5e5f64dbad880d31038b698494799b097bc59c2edf392fce6 \; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \; --hash=sha256:ab4a0df41e7c16a1392727727e7998a467472d0ad65f3ad5e6e765015df08636 \; --hash=sha256:ad9e82fb8f09ade1c3e1b996a6337afac2b8b9e365f926f5a61aacc71adc5b3c \; --hash=sha256:af598ed,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:12668,Security,hash,hash,12668,64480a00 \; --hash=sha256:56d9f2ecac662ca1611d183feb03a3fa4406469dafe241673d521dd5ae92a155 \; --hash=sha256:5bbe06f8eeafd38e5d0a4894ffec89378b6c6a625ff57e3028921f8ff59318ac \; --hash=sha256:65c1a9bcdadc6c28eecee2c119465aebff8f7a584dd719facdd9e825ec61ab52 \; --hash=sha256:68e78619a61ecf91e76aa3e6e8e33fc4894a2bebe93410754bd28fce0a8a4f9f \; --hash=sha256:69c0f17e9f5a7afdf2cc9fb2d1ce6aabdb3bafb7f38017c0b77862bcec2bbad8 \; --hash=sha256:6b2b56950d93e41f33b4223ead100ea0fe11f8e6ee5f641eb753ce4b77a7042b \; --hash=sha256:715d3562f79d540f251b99ebd6d8baa547118974341db04f5ad06d5ea3eb8007 \; --hash=sha256:787003c0ddb00500e49a10f2844fac87aa6ce977b90b0feaaf9de23c22508b24 \; --hash=sha256:7ef3cb2ebbf91e330e3bb937efada0edd9003683db6b57bb108c4001f37a02ea \; --hash=sha256:8023faf4e01efadfa183e863fefde0046de576c6f14659e8782065bcece22198 \; --hash=sha256:8758846a7e80910096950b67071243da3e5a20ed2546e6392603c096778d48e0 \; --hash=sha256:8afafd99945ead6e075b973fefa56379c5b5c53fd8937dad92c662da5d8fd5ee \; --hash=sha256:8c41976a29d078bb235fea9b2ecd3da465df42a562910f9022f1a03107bd02be \; --hash=sha256:8e254ae696c88d98da6555f5ace2279cf7cd5b3f52be2b5cf97feafe883b58d2 \; --hash=sha256:8f9293864fe09b8149f0cc42ce56e3f0e54de883a9de90cd427f191c346eb2e1 \; --hash=sha256:9402b03f1a1b4dc4c19845e5c749e3ab82d5078d16a2a4c2cd2df62d57bb0707 \; --hash=sha256:962f82a3086483f5e5f64dbad880d31038b698494799b097bc59c2edf392fce6 \; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \; --hash=sha256:ab4a0df41e7c16a1392727727e7998a467472d0ad65f3ad5e6e765015df08636 \; --hash=sha256:ad9e82fb8f09ade1c3e1b996a6337afac2b8b9e365f926f5a61aacc71adc5b3c \; --hash=sha256:af598ed32d6ae86f1b747b82783958b1a4ab8f617b06fe68795c7f026abbdcad \; --hash=sha256:b076b62,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:12750,Security,hash,hash,12750,ae92a155 \; --hash=sha256:5bbe06f8eeafd38e5d0a4894ffec89378b6c6a625ff57e3028921f8ff59318ac \; --hash=sha256:65c1a9bcdadc6c28eecee2c119465aebff8f7a584dd719facdd9e825ec61ab52 \; --hash=sha256:68e78619a61ecf91e76aa3e6e8e33fc4894a2bebe93410754bd28fce0a8a4f9f \; --hash=sha256:69c0f17e9f5a7afdf2cc9fb2d1ce6aabdb3bafb7f38017c0b77862bcec2bbad8 \; --hash=sha256:6b2b56950d93e41f33b4223ead100ea0fe11f8e6ee5f641eb753ce4b77a7042b \; --hash=sha256:715d3562f79d540f251b99ebd6d8baa547118974341db04f5ad06d5ea3eb8007 \; --hash=sha256:787003c0ddb00500e49a10f2844fac87aa6ce977b90b0feaaf9de23c22508b24 \; --hash=sha256:7ef3cb2ebbf91e330e3bb937efada0edd9003683db6b57bb108c4001f37a02ea \; --hash=sha256:8023faf4e01efadfa183e863fefde0046de576c6f14659e8782065bcece22198 \; --hash=sha256:8758846a7e80910096950b67071243da3e5a20ed2546e6392603c096778d48e0 \; --hash=sha256:8afafd99945ead6e075b973fefa56379c5b5c53fd8937dad92c662da5d8fd5ee \; --hash=sha256:8c41976a29d078bb235fea9b2ecd3da465df42a562910f9022f1a03107bd02be \; --hash=sha256:8e254ae696c88d98da6555f5ace2279cf7cd5b3f52be2b5cf97feafe883b58d2 \; --hash=sha256:8f9293864fe09b8149f0cc42ce56e3f0e54de883a9de90cd427f191c346eb2e1 \; --hash=sha256:9402b03f1a1b4dc4c19845e5c749e3ab82d5078d16a2a4c2cd2df62d57bb0707 \; --hash=sha256:962f82a3086483f5e5f64dbad880d31038b698494799b097bc59c2edf392fce6 \; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \; --hash=sha256:ab4a0df41e7c16a1392727727e7998a467472d0ad65f3ad5e6e765015df08636 \; --hash=sha256:ad9e82fb8f09ade1c3e1b996a6337afac2b8b9e365f926f5a61aacc71adc5b3c \; --hash=sha256:af598ed32d6ae86f1b747b82783958b1a4ab8f617b06fe68795c7f026abbdcad \; --hash=sha256:b076b6226fb84157e3f7c971a47ff3a679d837cf338547532ab866c57930dbee \; --hash=sha256:b7ff0f5,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:12832,Security,hash,hash,12832,f59318ac \; --hash=sha256:65c1a9bcdadc6c28eecee2c119465aebff8f7a584dd719facdd9e825ec61ab52 \; --hash=sha256:68e78619a61ecf91e76aa3e6e8e33fc4894a2bebe93410754bd28fce0a8a4f9f \; --hash=sha256:69c0f17e9f5a7afdf2cc9fb2d1ce6aabdb3bafb7f38017c0b77862bcec2bbad8 \; --hash=sha256:6b2b56950d93e41f33b4223ead100ea0fe11f8e6ee5f641eb753ce4b77a7042b \; --hash=sha256:715d3562f79d540f251b99ebd6d8baa547118974341db04f5ad06d5ea3eb8007 \; --hash=sha256:787003c0ddb00500e49a10f2844fac87aa6ce977b90b0feaaf9de23c22508b24 \; --hash=sha256:7ef3cb2ebbf91e330e3bb937efada0edd9003683db6b57bb108c4001f37a02ea \; --hash=sha256:8023faf4e01efadfa183e863fefde0046de576c6f14659e8782065bcece22198 \; --hash=sha256:8758846a7e80910096950b67071243da3e5a20ed2546e6392603c096778d48e0 \; --hash=sha256:8afafd99945ead6e075b973fefa56379c5b5c53fd8937dad92c662da5d8fd5ee \; --hash=sha256:8c41976a29d078bb235fea9b2ecd3da465df42a562910f9022f1a03107bd02be \; --hash=sha256:8e254ae696c88d98da6555f5ace2279cf7cd5b3f52be2b5cf97feafe883b58d2 \; --hash=sha256:8f9293864fe09b8149f0cc42ce56e3f0e54de883a9de90cd427f191c346eb2e1 \; --hash=sha256:9402b03f1a1b4dc4c19845e5c749e3ab82d5078d16a2a4c2cd2df62d57bb0707 \; --hash=sha256:962f82a3086483f5e5f64dbad880d31038b698494799b097bc59c2edf392fce6 \; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \; --hash=sha256:ab4a0df41e7c16a1392727727e7998a467472d0ad65f3ad5e6e765015df08636 \; --hash=sha256:ad9e82fb8f09ade1c3e1b996a6337afac2b8b9e365f926f5a61aacc71adc5b3c \; --hash=sha256:af598ed32d6ae86f1b747b82783958b1a4ab8f617b06fe68795c7f026abbdcad \; --hash=sha256:b076b6226fb84157e3f7c971a47ff3a679d837cf338547532ab866c57930dbee \; --hash=sha256:b7ff0f54cb4ff66dd38bebd335a38e2c22c41a8ee45aa608efc890ac3e3931bc \; --hash=sha256:bfce63a,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:12914,Security,hash,hash,12914,ec61ab52 \; --hash=sha256:68e78619a61ecf91e76aa3e6e8e33fc4894a2bebe93410754bd28fce0a8a4f9f \; --hash=sha256:69c0f17e9f5a7afdf2cc9fb2d1ce6aabdb3bafb7f38017c0b77862bcec2bbad8 \; --hash=sha256:6b2b56950d93e41f33b4223ead100ea0fe11f8e6ee5f641eb753ce4b77a7042b \; --hash=sha256:715d3562f79d540f251b99ebd6d8baa547118974341db04f5ad06d5ea3eb8007 \; --hash=sha256:787003c0ddb00500e49a10f2844fac87aa6ce977b90b0feaaf9de23c22508b24 \; --hash=sha256:7ef3cb2ebbf91e330e3bb937efada0edd9003683db6b57bb108c4001f37a02ea \; --hash=sha256:8023faf4e01efadfa183e863fefde0046de576c6f14659e8782065bcece22198 \; --hash=sha256:8758846a7e80910096950b67071243da3e5a20ed2546e6392603c096778d48e0 \; --hash=sha256:8afafd99945ead6e075b973fefa56379c5b5c53fd8937dad92c662da5d8fd5ee \; --hash=sha256:8c41976a29d078bb235fea9b2ecd3da465df42a562910f9022f1a03107bd02be \; --hash=sha256:8e254ae696c88d98da6555f5ace2279cf7cd5b3f52be2b5cf97feafe883b58d2 \; --hash=sha256:8f9293864fe09b8149f0cc42ce56e3f0e54de883a9de90cd427f191c346eb2e1 \; --hash=sha256:9402b03f1a1b4dc4c19845e5c749e3ab82d5078d16a2a4c2cd2df62d57bb0707 \; --hash=sha256:962f82a3086483f5e5f64dbad880d31038b698494799b097bc59c2edf392fce6 \; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \; --hash=sha256:ab4a0df41e7c16a1392727727e7998a467472d0ad65f3ad5e6e765015df08636 \; --hash=sha256:ad9e82fb8f09ade1c3e1b996a6337afac2b8b9e365f926f5a61aacc71adc5b3c \; --hash=sha256:af598ed32d6ae86f1b747b82783958b1a4ab8f617b06fe68795c7f026abbdcad \; --hash=sha256:b076b6226fb84157e3f7c971a47ff3a679d837cf338547532ab866c57930dbee \; --hash=sha256:b7ff0f54cb4ff66dd38bebd335a38e2c22c41a8ee45aa608efc890ac3e3931bc \; --hash=sha256:bfce63a9e7834b12b87c64d6b155fdd9b3b96191b6bd334bf37db7ff1fe457f2 \; --hash=sha256:c011a41,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:12996,Security,hash,hash,12996,0a8a4f9f \; --hash=sha256:69c0f17e9f5a7afdf2cc9fb2d1ce6aabdb3bafb7f38017c0b77862bcec2bbad8 \; --hash=sha256:6b2b56950d93e41f33b4223ead100ea0fe11f8e6ee5f641eb753ce4b77a7042b \; --hash=sha256:715d3562f79d540f251b99ebd6d8baa547118974341db04f5ad06d5ea3eb8007 \; --hash=sha256:787003c0ddb00500e49a10f2844fac87aa6ce977b90b0feaaf9de23c22508b24 \; --hash=sha256:7ef3cb2ebbf91e330e3bb937efada0edd9003683db6b57bb108c4001f37a02ea \; --hash=sha256:8023faf4e01efadfa183e863fefde0046de576c6f14659e8782065bcece22198 \; --hash=sha256:8758846a7e80910096950b67071243da3e5a20ed2546e6392603c096778d48e0 \; --hash=sha256:8afafd99945ead6e075b973fefa56379c5b5c53fd8937dad92c662da5d8fd5ee \; --hash=sha256:8c41976a29d078bb235fea9b2ecd3da465df42a562910f9022f1a03107bd02be \; --hash=sha256:8e254ae696c88d98da6555f5ace2279cf7cd5b3f52be2b5cf97feafe883b58d2 \; --hash=sha256:8f9293864fe09b8149f0cc42ce56e3f0e54de883a9de90cd427f191c346eb2e1 \; --hash=sha256:9402b03f1a1b4dc4c19845e5c749e3ab82d5078d16a2a4c2cd2df62d57bb0707 \; --hash=sha256:962f82a3086483f5e5f64dbad880d31038b698494799b097bc59c2edf392fce6 \; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \; --hash=sha256:ab4a0df41e7c16a1392727727e7998a467472d0ad65f3ad5e6e765015df08636 \; --hash=sha256:ad9e82fb8f09ade1c3e1b996a6337afac2b8b9e365f926f5a61aacc71adc5b3c \; --hash=sha256:af598ed32d6ae86f1b747b82783958b1a4ab8f617b06fe68795c7f026abbdcad \; --hash=sha256:b076b6226fb84157e3f7c971a47ff3a679d837cf338547532ab866c57930dbee \; --hash=sha256:b7ff0f54cb4ff66dd38bebd335a38e2c22c41a8ee45aa608efc890ac3e3931bc \; --hash=sha256:bfce63a9e7834b12b87c64d6b155fdd9b3b96191b6bd334bf37db7ff1fe457f2 \; --hash=sha256:c011a4149cfbcf9f03994ec2edffcb8b1dc2d2aede7ca243746df97a5d41ce48 \; --hash=sha256:c9c8046,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:13078,Security,hash,hash,13078,ec2bbad8 \; --hash=sha256:6b2b56950d93e41f33b4223ead100ea0fe11f8e6ee5f641eb753ce4b77a7042b \; --hash=sha256:715d3562f79d540f251b99ebd6d8baa547118974341db04f5ad06d5ea3eb8007 \; --hash=sha256:787003c0ddb00500e49a10f2844fac87aa6ce977b90b0feaaf9de23c22508b24 \; --hash=sha256:7ef3cb2ebbf91e330e3bb937efada0edd9003683db6b57bb108c4001f37a02ea \; --hash=sha256:8023faf4e01efadfa183e863fefde0046de576c6f14659e8782065bcece22198 \; --hash=sha256:8758846a7e80910096950b67071243da3e5a20ed2546e6392603c096778d48e0 \; --hash=sha256:8afafd99945ead6e075b973fefa56379c5b5c53fd8937dad92c662da5d8fd5ee \; --hash=sha256:8c41976a29d078bb235fea9b2ecd3da465df42a562910f9022f1a03107bd02be \; --hash=sha256:8e254ae696c88d98da6555f5ace2279cf7cd5b3f52be2b5cf97feafe883b58d2 \; --hash=sha256:8f9293864fe09b8149f0cc42ce56e3f0e54de883a9de90cd427f191c346eb2e1 \; --hash=sha256:9402b03f1a1b4dc4c19845e5c749e3ab82d5078d16a2a4c2cd2df62d57bb0707 \; --hash=sha256:962f82a3086483f5e5f64dbad880d31038b698494799b097bc59c2edf392fce6 \; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \; --hash=sha256:ab4a0df41e7c16a1392727727e7998a467472d0ad65f3ad5e6e765015df08636 \; --hash=sha256:ad9e82fb8f09ade1c3e1b996a6337afac2b8b9e365f926f5a61aacc71adc5b3c \; --hash=sha256:af598ed32d6ae86f1b747b82783958b1a4ab8f617b06fe68795c7f026abbdcad \; --hash=sha256:b076b6226fb84157e3f7c971a47ff3a679d837cf338547532ab866c57930dbee \; --hash=sha256:b7ff0f54cb4ff66dd38bebd335a38e2c22c41a8ee45aa608efc890ac3e3931bc \; --hash=sha256:bfce63a9e7834b12b87c64d6b155fdd9b3b96191b6bd334bf37db7ff1fe457f2 \; --hash=sha256:c011a4149cfbcf9f03994ec2edffcb8b1dc2d2aede7ca243746df97a5d41ce48 \; --hash=sha256:c9c804664ebe8f83a211cace637506669e7890fec1b4195b505c214e50dd4eb7 \; --hash=sha256:ca37905,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:13160,Security,hash,hash,13160,77a7042b \; --hash=sha256:715d3562f79d540f251b99ebd6d8baa547118974341db04f5ad06d5ea3eb8007 \; --hash=sha256:787003c0ddb00500e49a10f2844fac87aa6ce977b90b0feaaf9de23c22508b24 \; --hash=sha256:7ef3cb2ebbf91e330e3bb937efada0edd9003683db6b57bb108c4001f37a02ea \; --hash=sha256:8023faf4e01efadfa183e863fefde0046de576c6f14659e8782065bcece22198 \; --hash=sha256:8758846a7e80910096950b67071243da3e5a20ed2546e6392603c096778d48e0 \; --hash=sha256:8afafd99945ead6e075b973fefa56379c5b5c53fd8937dad92c662da5d8fd5ee \; --hash=sha256:8c41976a29d078bb235fea9b2ecd3da465df42a562910f9022f1a03107bd02be \; --hash=sha256:8e254ae696c88d98da6555f5ace2279cf7cd5b3f52be2b5cf97feafe883b58d2 \; --hash=sha256:8f9293864fe09b8149f0cc42ce56e3f0e54de883a9de90cd427f191c346eb2e1 \; --hash=sha256:9402b03f1a1b4dc4c19845e5c749e3ab82d5078d16a2a4c2cd2df62d57bb0707 \; --hash=sha256:962f82a3086483f5e5f64dbad880d31038b698494799b097bc59c2edf392fce6 \; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \; --hash=sha256:ab4a0df41e7c16a1392727727e7998a467472d0ad65f3ad5e6e765015df08636 \; --hash=sha256:ad9e82fb8f09ade1c3e1b996a6337afac2b8b9e365f926f5a61aacc71adc5b3c \; --hash=sha256:af598ed32d6ae86f1b747b82783958b1a4ab8f617b06fe68795c7f026abbdcad \; --hash=sha256:b076b6226fb84157e3f7c971a47ff3a679d837cf338547532ab866c57930dbee \; --hash=sha256:b7ff0f54cb4ff66dd38bebd335a38e2c22c41a8ee45aa608efc890ac3e3931bc \; --hash=sha256:bfce63a9e7834b12b87c64d6b155fdd9b3b96191b6bd334bf37db7ff1fe457f2 \; --hash=sha256:c011a4149cfbcf9f03994ec2edffcb8b1dc2d2aede7ca243746df97a5d41ce48 \; --hash=sha256:c9c804664ebe8f83a211cace637506669e7890fec1b4195b505c214e50dd4eb7 \; --hash=sha256:ca379055a47383d02a5400cb0d110cef0a776fc644cda797db0c5696cfd7e18e \; --hash=sha256:cb0932d,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:13242,Security,hash,hash,13242,a3eb8007 \; --hash=sha256:787003c0ddb00500e49a10f2844fac87aa6ce977b90b0feaaf9de23c22508b24 \; --hash=sha256:7ef3cb2ebbf91e330e3bb937efada0edd9003683db6b57bb108c4001f37a02ea \; --hash=sha256:8023faf4e01efadfa183e863fefde0046de576c6f14659e8782065bcece22198 \; --hash=sha256:8758846a7e80910096950b67071243da3e5a20ed2546e6392603c096778d48e0 \; --hash=sha256:8afafd99945ead6e075b973fefa56379c5b5c53fd8937dad92c662da5d8fd5ee \; --hash=sha256:8c41976a29d078bb235fea9b2ecd3da465df42a562910f9022f1a03107bd02be \; --hash=sha256:8e254ae696c88d98da6555f5ace2279cf7cd5b3f52be2b5cf97feafe883b58d2 \; --hash=sha256:8f9293864fe09b8149f0cc42ce56e3f0e54de883a9de90cd427f191c346eb2e1 \; --hash=sha256:9402b03f1a1b4dc4c19845e5c749e3ab82d5078d16a2a4c2cd2df62d57bb0707 \; --hash=sha256:962f82a3086483f5e5f64dbad880d31038b698494799b097bc59c2edf392fce6 \; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \; --hash=sha256:ab4a0df41e7c16a1392727727e7998a467472d0ad65f3ad5e6e765015df08636 \; --hash=sha256:ad9e82fb8f09ade1c3e1b996a6337afac2b8b9e365f926f5a61aacc71adc5b3c \; --hash=sha256:af598ed32d6ae86f1b747b82783958b1a4ab8f617b06fe68795c7f026abbdcad \; --hash=sha256:b076b6226fb84157e3f7c971a47ff3a679d837cf338547532ab866c57930dbee \; --hash=sha256:b7ff0f54cb4ff66dd38bebd335a38e2c22c41a8ee45aa608efc890ac3e3931bc \; --hash=sha256:bfce63a9e7834b12b87c64d6b155fdd9b3b96191b6bd334bf37db7ff1fe457f2 \; --hash=sha256:c011a4149cfbcf9f03994ec2edffcb8b1dc2d2aede7ca243746df97a5d41ce48 \; --hash=sha256:c9c804664ebe8f83a211cace637506669e7890fec1b4195b505c214e50dd4eb7 \; --hash=sha256:ca379055a47383d02a5400cb0d110cef0a776fc644cda797db0c5696cfd7e18e \; --hash=sha256:cb0932dc158471523c9637e807d9bfb93e06a95cbf010f1a38b98623b929ef2b \; --hash=sha256:cd0f502,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:13324,Security,hash,hash,13324,22508b24 \; --hash=sha256:7ef3cb2ebbf91e330e3bb937efada0edd9003683db6b57bb108c4001f37a02ea \; --hash=sha256:8023faf4e01efadfa183e863fefde0046de576c6f14659e8782065bcece22198 \; --hash=sha256:8758846a7e80910096950b67071243da3e5a20ed2546e6392603c096778d48e0 \; --hash=sha256:8afafd99945ead6e075b973fefa56379c5b5c53fd8937dad92c662da5d8fd5ee \; --hash=sha256:8c41976a29d078bb235fea9b2ecd3da465df42a562910f9022f1a03107bd02be \; --hash=sha256:8e254ae696c88d98da6555f5ace2279cf7cd5b3f52be2b5cf97feafe883b58d2 \; --hash=sha256:8f9293864fe09b8149f0cc42ce56e3f0e54de883a9de90cd427f191c346eb2e1 \; --hash=sha256:9402b03f1a1b4dc4c19845e5c749e3ab82d5078d16a2a4c2cd2df62d57bb0707 \; --hash=sha256:962f82a3086483f5e5f64dbad880d31038b698494799b097bc59c2edf392fce6 \; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \; --hash=sha256:ab4a0df41e7c16a1392727727e7998a467472d0ad65f3ad5e6e765015df08636 \; --hash=sha256:ad9e82fb8f09ade1c3e1b996a6337afac2b8b9e365f926f5a61aacc71adc5b3c \; --hash=sha256:af598ed32d6ae86f1b747b82783958b1a4ab8f617b06fe68795c7f026abbdcad \; --hash=sha256:b076b6226fb84157e3f7c971a47ff3a679d837cf338547532ab866c57930dbee \; --hash=sha256:b7ff0f54cb4ff66dd38bebd335a38e2c22c41a8ee45aa608efc890ac3e3931bc \; --hash=sha256:bfce63a9e7834b12b87c64d6b155fdd9b3b96191b6bd334bf37db7ff1fe457f2 \; --hash=sha256:c011a4149cfbcf9f03994ec2edffcb8b1dc2d2aede7ca243746df97a5d41ce48 \; --hash=sha256:c9c804664ebe8f83a211cace637506669e7890fec1b4195b505c214e50dd4eb7 \; --hash=sha256:ca379055a47383d02a5400cb0d110cef0a776fc644cda797db0c5696cfd7e18e \; --hash=sha256:cb0932dc158471523c9637e807d9bfb93e06a95cbf010f1a38b98623b929ef2b \; --hash=sha256:cd0f502fe016460680cd20aaa5a76d241d6f35a1c3350c474bac1273803893fa \; --hash=sha256:ceb0194,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:13406,Security,hash,hash,13406,f37a02ea \; --hash=sha256:8023faf4e01efadfa183e863fefde0046de576c6f14659e8782065bcece22198 \; --hash=sha256:8758846a7e80910096950b67071243da3e5a20ed2546e6392603c096778d48e0 \; --hash=sha256:8afafd99945ead6e075b973fefa56379c5b5c53fd8937dad92c662da5d8fd5ee \; --hash=sha256:8c41976a29d078bb235fea9b2ecd3da465df42a562910f9022f1a03107bd02be \; --hash=sha256:8e254ae696c88d98da6555f5ace2279cf7cd5b3f52be2b5cf97feafe883b58d2 \; --hash=sha256:8f9293864fe09b8149f0cc42ce56e3f0e54de883a9de90cd427f191c346eb2e1 \; --hash=sha256:9402b03f1a1b4dc4c19845e5c749e3ab82d5078d16a2a4c2cd2df62d57bb0707 \; --hash=sha256:962f82a3086483f5e5f64dbad880d31038b698494799b097bc59c2edf392fce6 \; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \; --hash=sha256:ab4a0df41e7c16a1392727727e7998a467472d0ad65f3ad5e6e765015df08636 \; --hash=sha256:ad9e82fb8f09ade1c3e1b996a6337afac2b8b9e365f926f5a61aacc71adc5b3c \; --hash=sha256:af598ed32d6ae86f1b747b82783958b1a4ab8f617b06fe68795c7f026abbdcad \; --hash=sha256:b076b6226fb84157e3f7c971a47ff3a679d837cf338547532ab866c57930dbee \; --hash=sha256:b7ff0f54cb4ff66dd38bebd335a38e2c22c41a8ee45aa608efc890ac3e3931bc \; --hash=sha256:bfce63a9e7834b12b87c64d6b155fdd9b3b96191b6bd334bf37db7ff1fe457f2 \; --hash=sha256:c011a4149cfbcf9f03994ec2edffcb8b1dc2d2aede7ca243746df97a5d41ce48 \; --hash=sha256:c9c804664ebe8f83a211cace637506669e7890fec1b4195b505c214e50dd4eb7 \; --hash=sha256:ca379055a47383d02a5400cb0d110cef0a776fc644cda797db0c5696cfd7e18e \; --hash=sha256:cb0932dc158471523c9637e807d9bfb93e06a95cbf010f1a38b98623b929ef2b \; --hash=sha256:cd0f502fe016460680cd20aaa5a76d241d6f35a1c3350c474bac1273803893fa \; --hash=sha256:ceb01949af7121f9fc39f7d27f91be8546f3fb112c608bc4029aef0bab86a2a5 \; --hash=sha256:d080e0a,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:13488,Security,hash,hash,13488,ece22198 \; --hash=sha256:8758846a7e80910096950b67071243da3e5a20ed2546e6392603c096778d48e0 \; --hash=sha256:8afafd99945ead6e075b973fefa56379c5b5c53fd8937dad92c662da5d8fd5ee \; --hash=sha256:8c41976a29d078bb235fea9b2ecd3da465df42a562910f9022f1a03107bd02be \; --hash=sha256:8e254ae696c88d98da6555f5ace2279cf7cd5b3f52be2b5cf97feafe883b58d2 \; --hash=sha256:8f9293864fe09b8149f0cc42ce56e3f0e54de883a9de90cd427f191c346eb2e1 \; --hash=sha256:9402b03f1a1b4dc4c19845e5c749e3ab82d5078d16a2a4c2cd2df62d57bb0707 \; --hash=sha256:962f82a3086483f5e5f64dbad880d31038b698494799b097bc59c2edf392fce6 \; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \; --hash=sha256:ab4a0df41e7c16a1392727727e7998a467472d0ad65f3ad5e6e765015df08636 \; --hash=sha256:ad9e82fb8f09ade1c3e1b996a6337afac2b8b9e365f926f5a61aacc71adc5b3c \; --hash=sha256:af598ed32d6ae86f1b747b82783958b1a4ab8f617b06fe68795c7f026abbdcad \; --hash=sha256:b076b6226fb84157e3f7c971a47ff3a679d837cf338547532ab866c57930dbee \; --hash=sha256:b7ff0f54cb4ff66dd38bebd335a38e2c22c41a8ee45aa608efc890ac3e3931bc \; --hash=sha256:bfce63a9e7834b12b87c64d6b155fdd9b3b96191b6bd334bf37db7ff1fe457f2 \; --hash=sha256:c011a4149cfbcf9f03994ec2edffcb8b1dc2d2aede7ca243746df97a5d41ce48 \; --hash=sha256:c9c804664ebe8f83a211cace637506669e7890fec1b4195b505c214e50dd4eb7 \; --hash=sha256:ca379055a47383d02a5400cb0d110cef0a776fc644cda797db0c5696cfd7e18e \; --hash=sha256:cb0932dc158471523c9637e807d9bfb93e06a95cbf010f1a38b98623b929ef2b \; --hash=sha256:cd0f502fe016460680cd20aaa5a76d241d6f35a1c3350c474bac1273803893fa \; --hash=sha256:ceb01949af7121f9fc39f7d27f91be8546f3fb112c608bc4029aef0bab86a2a5 \; --hash=sha256:d080e0a5eb2529460b30190fcfcc4199bd7f827663f858a226a81bc27beaa97e \; --hash=sha256:dd15ff0,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:13570,Security,hash,hash,13570,778d48e0 \; --hash=sha256:8afafd99945ead6e075b973fefa56379c5b5c53fd8937dad92c662da5d8fd5ee \; --hash=sha256:8c41976a29d078bb235fea9b2ecd3da465df42a562910f9022f1a03107bd02be \; --hash=sha256:8e254ae696c88d98da6555f5ace2279cf7cd5b3f52be2b5cf97feafe883b58d2 \; --hash=sha256:8f9293864fe09b8149f0cc42ce56e3f0e54de883a9de90cd427f191c346eb2e1 \; --hash=sha256:9402b03f1a1b4dc4c19845e5c749e3ab82d5078d16a2a4c2cd2df62d57bb0707 \; --hash=sha256:962f82a3086483f5e5f64dbad880d31038b698494799b097bc59c2edf392fce6 \; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \; --hash=sha256:ab4a0df41e7c16a1392727727e7998a467472d0ad65f3ad5e6e765015df08636 \; --hash=sha256:ad9e82fb8f09ade1c3e1b996a6337afac2b8b9e365f926f5a61aacc71adc5b3c \; --hash=sha256:af598ed32d6ae86f1b747b82783958b1a4ab8f617b06fe68795c7f026abbdcad \; --hash=sha256:b076b6226fb84157e3f7c971a47ff3a679d837cf338547532ab866c57930dbee \; --hash=sha256:b7ff0f54cb4ff66dd38bebd335a38e2c22c41a8ee45aa608efc890ac3e3931bc \; --hash=sha256:bfce63a9e7834b12b87c64d6b155fdd9b3b96191b6bd334bf37db7ff1fe457f2 \; --hash=sha256:c011a4149cfbcf9f03994ec2edffcb8b1dc2d2aede7ca243746df97a5d41ce48 \; --hash=sha256:c9c804664ebe8f83a211cace637506669e7890fec1b4195b505c214e50dd4eb7 \; --hash=sha256:ca379055a47383d02a5400cb0d110cef0a776fc644cda797db0c5696cfd7e18e \; --hash=sha256:cb0932dc158471523c9637e807d9bfb93e06a95cbf010f1a38b98623b929ef2b \; --hash=sha256:cd0f502fe016460680cd20aaa5a76d241d6f35a1c3350c474bac1273803893fa \; --hash=sha256:ceb01949af7121f9fc39f7d27f91be8546f3fb112c608bc4029aef0bab86a2a5 \; --hash=sha256:d080e0a5eb2529460b30190fcfcc4199bd7f827663f858a226a81bc27beaa97e \; --hash=sha256:dd15ff04ffd7e05ffcb7fe79f1b98041b8ea30ae9234aed2a9168b5797c3effb \; --hash=sha256:df0be2b,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:13652,Security,hash,hash,13652,5d8fd5ee \; --hash=sha256:8c41976a29d078bb235fea9b2ecd3da465df42a562910f9022f1a03107bd02be \; --hash=sha256:8e254ae696c88d98da6555f5ace2279cf7cd5b3f52be2b5cf97feafe883b58d2 \; --hash=sha256:8f9293864fe09b8149f0cc42ce56e3f0e54de883a9de90cd427f191c346eb2e1 \; --hash=sha256:9402b03f1a1b4dc4c19845e5c749e3ab82d5078d16a2a4c2cd2df62d57bb0707 \; --hash=sha256:962f82a3086483f5e5f64dbad880d31038b698494799b097bc59c2edf392fce6 \; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \; --hash=sha256:ab4a0df41e7c16a1392727727e7998a467472d0ad65f3ad5e6e765015df08636 \; --hash=sha256:ad9e82fb8f09ade1c3e1b996a6337afac2b8b9e365f926f5a61aacc71adc5b3c \; --hash=sha256:af598ed32d6ae86f1b747b82783958b1a4ab8f617b06fe68795c7f026abbdcad \; --hash=sha256:b076b6226fb84157e3f7c971a47ff3a679d837cf338547532ab866c57930dbee \; --hash=sha256:b7ff0f54cb4ff66dd38bebd335a38e2c22c41a8ee45aa608efc890ac3e3931bc \; --hash=sha256:bfce63a9e7834b12b87c64d6b155fdd9b3b96191b6bd334bf37db7ff1fe457f2 \; --hash=sha256:c011a4149cfbcf9f03994ec2edffcb8b1dc2d2aede7ca243746df97a5d41ce48 \; --hash=sha256:c9c804664ebe8f83a211cace637506669e7890fec1b4195b505c214e50dd4eb7 \; --hash=sha256:ca379055a47383d02a5400cb0d110cef0a776fc644cda797db0c5696cfd7e18e \; --hash=sha256:cb0932dc158471523c9637e807d9bfb93e06a95cbf010f1a38b98623b929ef2b \; --hash=sha256:cd0f502fe016460680cd20aaa5a76d241d6f35a1c3350c474bac1273803893fa \; --hash=sha256:ceb01949af7121f9fc39f7d27f91be8546f3fb112c608bc4029aef0bab86a2a5 \; --hash=sha256:d080e0a5eb2529460b30190fcfcc4199bd7f827663f858a226a81bc27beaa97e \; --hash=sha256:dd15ff04ffd7e05ffcb7fe79f1b98041b8ea30ae9234aed2a9168b5797c3effb \; --hash=sha256:df0be2b576a7abbf737b1575f048c23fb1d769f267ec4358296f31c2479db8f9 \; --hash=sha256:e09031c,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:13734,Security,hash,hash,13734,07bd02be \; --hash=sha256:8e254ae696c88d98da6555f5ace2279cf7cd5b3f52be2b5cf97feafe883b58d2 \; --hash=sha256:8f9293864fe09b8149f0cc42ce56e3f0e54de883a9de90cd427f191c346eb2e1 \; --hash=sha256:9402b03f1a1b4dc4c19845e5c749e3ab82d5078d16a2a4c2cd2df62d57bb0707 \; --hash=sha256:962f82a3086483f5e5f64dbad880d31038b698494799b097bc59c2edf392fce6 \; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \; --hash=sha256:ab4a0df41e7c16a1392727727e7998a467472d0ad65f3ad5e6e765015df08636 \; --hash=sha256:ad9e82fb8f09ade1c3e1b996a6337afac2b8b9e365f926f5a61aacc71adc5b3c \; --hash=sha256:af598ed32d6ae86f1b747b82783958b1a4ab8f617b06fe68795c7f026abbdcad \; --hash=sha256:b076b6226fb84157e3f7c971a47ff3a679d837cf338547532ab866c57930dbee \; --hash=sha256:b7ff0f54cb4ff66dd38bebd335a38e2c22c41a8ee45aa608efc890ac3e3931bc \; --hash=sha256:bfce63a9e7834b12b87c64d6b155fdd9b3b96191b6bd334bf37db7ff1fe457f2 \; --hash=sha256:c011a4149cfbcf9f03994ec2edffcb8b1dc2d2aede7ca243746df97a5d41ce48 \; --hash=sha256:c9c804664ebe8f83a211cace637506669e7890fec1b4195b505c214e50dd4eb7 \; --hash=sha256:ca379055a47383d02a5400cb0d110cef0a776fc644cda797db0c5696cfd7e18e \; --hash=sha256:cb0932dc158471523c9637e807d9bfb93e06a95cbf010f1a38b98623b929ef2b \; --hash=sha256:cd0f502fe016460680cd20aaa5a76d241d6f35a1c3350c474bac1273803893fa \; --hash=sha256:ceb01949af7121f9fc39f7d27f91be8546f3fb112c608bc4029aef0bab86a2a5 \; --hash=sha256:d080e0a5eb2529460b30190fcfcc4199bd7f827663f858a226a81bc27beaa97e \; --hash=sha256:dd15ff04ffd7e05ffcb7fe79f1b98041b8ea30ae9234aed2a9168b5797c3effb \; --hash=sha256:df0be2b576a7abbf737b1575f048c23fb1d769f267ec4358296f31c2479db8f9 \; --hash=sha256:e09031c87a1e51556fdcb46e5bd4f59dfb743061cf93c4d6831bf894f125eb57 \; --hash=sha256:e4dd52d,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:13816,Security,hash,hash,13816,883b58d2 \; --hash=sha256:8f9293864fe09b8149f0cc42ce56e3f0e54de883a9de90cd427f191c346eb2e1 \; --hash=sha256:9402b03f1a1b4dc4c19845e5c749e3ab82d5078d16a2a4c2cd2df62d57bb0707 \; --hash=sha256:962f82a3086483f5e5f64dbad880d31038b698494799b097bc59c2edf392fce6 \; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \; --hash=sha256:ab4a0df41e7c16a1392727727e7998a467472d0ad65f3ad5e6e765015df08636 \; --hash=sha256:ad9e82fb8f09ade1c3e1b996a6337afac2b8b9e365f926f5a61aacc71adc5b3c \; --hash=sha256:af598ed32d6ae86f1b747b82783958b1a4ab8f617b06fe68795c7f026abbdcad \; --hash=sha256:b076b6226fb84157e3f7c971a47ff3a679d837cf338547532ab866c57930dbee \; --hash=sha256:b7ff0f54cb4ff66dd38bebd335a38e2c22c41a8ee45aa608efc890ac3e3931bc \; --hash=sha256:bfce63a9e7834b12b87c64d6b155fdd9b3b96191b6bd334bf37db7ff1fe457f2 \; --hash=sha256:c011a4149cfbcf9f03994ec2edffcb8b1dc2d2aede7ca243746df97a5d41ce48 \; --hash=sha256:c9c804664ebe8f83a211cace637506669e7890fec1b4195b505c214e50dd4eb7 \; --hash=sha256:ca379055a47383d02a5400cb0d110cef0a776fc644cda797db0c5696cfd7e18e \; --hash=sha256:cb0932dc158471523c9637e807d9bfb93e06a95cbf010f1a38b98623b929ef2b \; --hash=sha256:cd0f502fe016460680cd20aaa5a76d241d6f35a1c3350c474bac1273803893fa \; --hash=sha256:ceb01949af7121f9fc39f7d27f91be8546f3fb112c608bc4029aef0bab86a2a5 \; --hash=sha256:d080e0a5eb2529460b30190fcfcc4199bd7f827663f858a226a81bc27beaa97e \; --hash=sha256:dd15ff04ffd7e05ffcb7fe79f1b98041b8ea30ae9234aed2a9168b5797c3effb \; --hash=sha256:df0be2b576a7abbf737b1575f048c23fb1d769f267ec4358296f31c2479db8f9 \; --hash=sha256:e09031c87a1e51556fdcb46e5bd4f59dfb743061cf93c4d6831bf894f125eb57 \; --hash=sha256:e4dd52d80b8c83fdce44e12478ad2e85c64ea965e75d66dbeafb0a3e77308fcc \; --hash=sha256:f698de3,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:13898,Security,hash,hash,13898,346eb2e1 \; --hash=sha256:9402b03f1a1b4dc4c19845e5c749e3ab82d5078d16a2a4c2cd2df62d57bb0707 \; --hash=sha256:962f82a3086483f5e5f64dbad880d31038b698494799b097bc59c2edf392fce6 \; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \; --hash=sha256:ab4a0df41e7c16a1392727727e7998a467472d0ad65f3ad5e6e765015df08636 \; --hash=sha256:ad9e82fb8f09ade1c3e1b996a6337afac2b8b9e365f926f5a61aacc71adc5b3c \; --hash=sha256:af598ed32d6ae86f1b747b82783958b1a4ab8f617b06fe68795c7f026abbdcad \; --hash=sha256:b076b6226fb84157e3f7c971a47ff3a679d837cf338547532ab866c57930dbee \; --hash=sha256:b7ff0f54cb4ff66dd38bebd335a38e2c22c41a8ee45aa608efc890ac3e3931bc \; --hash=sha256:bfce63a9e7834b12b87c64d6b155fdd9b3b96191b6bd334bf37db7ff1fe457f2 \; --hash=sha256:c011a4149cfbcf9f03994ec2edffcb8b1dc2d2aede7ca243746df97a5d41ce48 \; --hash=sha256:c9c804664ebe8f83a211cace637506669e7890fec1b4195b505c214e50dd4eb7 \; --hash=sha256:ca379055a47383d02a5400cb0d110cef0a776fc644cda797db0c5696cfd7e18e \; --hash=sha256:cb0932dc158471523c9637e807d9bfb93e06a95cbf010f1a38b98623b929ef2b \; --hash=sha256:cd0f502fe016460680cd20aaa5a76d241d6f35a1c3350c474bac1273803893fa \; --hash=sha256:ceb01949af7121f9fc39f7d27f91be8546f3fb112c608bc4029aef0bab86a2a5 \; --hash=sha256:d080e0a5eb2529460b30190fcfcc4199bd7f827663f858a226a81bc27beaa97e \; --hash=sha256:dd15ff04ffd7e05ffcb7fe79f1b98041b8ea30ae9234aed2a9168b5797c3effb \; --hash=sha256:df0be2b576a7abbf737b1575f048c23fb1d769f267ec4358296f31c2479db8f9 \; --hash=sha256:e09031c87a1e51556fdcb46e5bd4f59dfb743061cf93c4d6831bf894f125eb57 \; --hash=sha256:e4dd52d80b8c83fdce44e12478ad2e85c64ea965e75d66dbeafb0a3e77308fcc \; --hash=sha256:f698de3fd0c4e6972b92290a45bd9b1536bffe8c6759c62471efaa8acb4c37bc \; --hash=sha256:fec2169,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:13980,Security,hash,hash,13980,57bb0707 \; --hash=sha256:962f82a3086483f5e5f64dbad880d31038b698494799b097bc59c2edf392fce6 \; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \; --hash=sha256:ab4a0df41e7c16a1392727727e7998a467472d0ad65f3ad5e6e765015df08636 \; --hash=sha256:ad9e82fb8f09ade1c3e1b996a6337afac2b8b9e365f926f5a61aacc71adc5b3c \; --hash=sha256:af598ed32d6ae86f1b747b82783958b1a4ab8f617b06fe68795c7f026abbdcad \; --hash=sha256:b076b6226fb84157e3f7c971a47ff3a679d837cf338547532ab866c57930dbee \; --hash=sha256:b7ff0f54cb4ff66dd38bebd335a38e2c22c41a8ee45aa608efc890ac3e3931bc \; --hash=sha256:bfce63a9e7834b12b87c64d6b155fdd9b3b96191b6bd334bf37db7ff1fe457f2 \; --hash=sha256:c011a4149cfbcf9f03994ec2edffcb8b1dc2d2aede7ca243746df97a5d41ce48 \; --hash=sha256:c9c804664ebe8f83a211cace637506669e7890fec1b4195b505c214e50dd4eb7 \; --hash=sha256:ca379055a47383d02a5400cb0d110cef0a776fc644cda797db0c5696cfd7e18e \; --hash=sha256:cb0932dc158471523c9637e807d9bfb93e06a95cbf010f1a38b98623b929ef2b \; --hash=sha256:cd0f502fe016460680cd20aaa5a76d241d6f35a1c3350c474bac1273803893fa \; --hash=sha256:ceb01949af7121f9fc39f7d27f91be8546f3fb112c608bc4029aef0bab86a2a5 \; --hash=sha256:d080e0a5eb2529460b30190fcfcc4199bd7f827663f858a226a81bc27beaa97e \; --hash=sha256:dd15ff04ffd7e05ffcb7fe79f1b98041b8ea30ae9234aed2a9168b5797c3effb \; --hash=sha256:df0be2b576a7abbf737b1575f048c23fb1d769f267ec4358296f31c2479db8f9 \; --hash=sha256:e09031c87a1e51556fdcb46e5bd4f59dfb743061cf93c4d6831bf894f125eb57 \; --hash=sha256:e4dd52d80b8c83fdce44e12478ad2e85c64ea965e75d66dbeafb0a3e77308fcc \; --hash=sha256:f698de3fd0c4e6972b92290a45bd9b1536bffe8c6759c62471efaa8acb4c37bc \; --hash=sha256:fec21693218efe39aa7f8599346e90c705afa52c5b31ae019b2e57e8f6542bb2 \; --hash=sha256:ffcc3f7,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:14062,Security,hash,hash,14062,f392fce6 \; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \; --hash=sha256:ab4a0df41e7c16a1392727727e7998a467472d0ad65f3ad5e6e765015df08636 \; --hash=sha256:ad9e82fb8f09ade1c3e1b996a6337afac2b8b9e365f926f5a61aacc71adc5b3c \; --hash=sha256:af598ed32d6ae86f1b747b82783958b1a4ab8f617b06fe68795c7f026abbdcad \; --hash=sha256:b076b6226fb84157e3f7c971a47ff3a679d837cf338547532ab866c57930dbee \; --hash=sha256:b7ff0f54cb4ff66dd38bebd335a38e2c22c41a8ee45aa608efc890ac3e3931bc \; --hash=sha256:bfce63a9e7834b12b87c64d6b155fdd9b3b96191b6bd334bf37db7ff1fe457f2 \; --hash=sha256:c011a4149cfbcf9f03994ec2edffcb8b1dc2d2aede7ca243746df97a5d41ce48 \; --hash=sha256:c9c804664ebe8f83a211cace637506669e7890fec1b4195b505c214e50dd4eb7 \; --hash=sha256:ca379055a47383d02a5400cb0d110cef0a776fc644cda797db0c5696cfd7e18e \; --hash=sha256:cb0932dc158471523c9637e807d9bfb93e06a95cbf010f1a38b98623b929ef2b \; --hash=sha256:cd0f502fe016460680cd20aaa5a76d241d6f35a1c3350c474bac1273803893fa \; --hash=sha256:ceb01949af7121f9fc39f7d27f91be8546f3fb112c608bc4029aef0bab86a2a5 \; --hash=sha256:d080e0a5eb2529460b30190fcfcc4199bd7f827663f858a226a81bc27beaa97e \; --hash=sha256:dd15ff04ffd7e05ffcb7fe79f1b98041b8ea30ae9234aed2a9168b5797c3effb \; --hash=sha256:df0be2b576a7abbf737b1575f048c23fb1d769f267ec4358296f31c2479db8f9 \; --hash=sha256:e09031c87a1e51556fdcb46e5bd4f59dfb743061cf93c4d6831bf894f125eb57 \; --hash=sha256:e4dd52d80b8c83fdce44e12478ad2e85c64ea965e75d66dbeafb0a3e77308fcc \; --hash=sha256:f698de3fd0c4e6972b92290a45bd9b1536bffe8c6759c62471efaa8acb4c37bc \; --hash=sha256:fec21693218efe39aa7f8599346e90c705afa52c5b31ae019b2e57e8f6542bb2 \; --hash=sha256:ffcc3f7c66b5f5b7931a5aa68fc9cecc51e685ef90282f4a82f0f5e9b704ad11; # via jinja2; mdit-py-p,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:14144,Security,hash,hash,14144,; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \; --hash=sha256:ab4a0df41e7c16a1392727727e7998a467472d0ad65f3ad5e6e765015df08636 \; --hash=sha256:ad9e82fb8f09ade1c3e1b996a6337afac2b8b9e365f926f5a61aacc71adc5b3c \; --hash=sha256:af598ed32d6ae86f1b747b82783958b1a4ab8f617b06fe68795c7f026abbdcad \; --hash=sha256:b076b6226fb84157e3f7c971a47ff3a679d837cf338547532ab866c57930dbee \; --hash=sha256:b7ff0f54cb4ff66dd38bebd335a38e2c22c41a8ee45aa608efc890ac3e3931bc \; --hash=sha256:bfce63a9e7834b12b87c64d6b155fdd9b3b96191b6bd334bf37db7ff1fe457f2 \; --hash=sha256:c011a4149cfbcf9f03994ec2edffcb8b1dc2d2aede7ca243746df97a5d41ce48 \; --hash=sha256:c9c804664ebe8f83a211cace637506669e7890fec1b4195b505c214e50dd4eb7 \; --hash=sha256:ca379055a47383d02a5400cb0d110cef0a776fc644cda797db0c5696cfd7e18e \; --hash=sha256:cb0932dc158471523c9637e807d9bfb93e06a95cbf010f1a38b98623b929ef2b \; --hash=sha256:cd0f502fe016460680cd20aaa5a76d241d6f35a1c3350c474bac1273803893fa \; --hash=sha256:ceb01949af7121f9fc39f7d27f91be8546f3fb112c608bc4029aef0bab86a2a5 \; --hash=sha256:d080e0a5eb2529460b30190fcfcc4199bd7f827663f858a226a81bc27beaa97e \; --hash=sha256:dd15ff04ffd7e05ffcb7fe79f1b98041b8ea30ae9234aed2a9168b5797c3effb \; --hash=sha256:df0be2b576a7abbf737b1575f048c23fb1d769f267ec4358296f31c2479db8f9 \; --hash=sha256:e09031c87a1e51556fdcb46e5bd4f59dfb743061cf93c4d6831bf894f125eb57 \; --hash=sha256:e4dd52d80b8c83fdce44e12478ad2e85c64ea965e75d66dbeafb0a3e77308fcc \; --hash=sha256:f698de3fd0c4e6972b92290a45bd9b1536bffe8c6759c62471efaa8acb4c37bc \; --hash=sha256:fec21693218efe39aa7f8599346e90c705afa52c5b31ae019b2e57e8f6542bb2 \; --hash=sha256:ffcc3f7c66b5f5b7931a5aa68fc9cecc51e685ef90282f4a82f0f5e9b704ad11; # via jinja2; mdit-py-plugins==0.,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:14226,Security,hash,hash,14226,; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \; --hash=sha256:ab4a0df41e7c16a1392727727e7998a467472d0ad65f3ad5e6e765015df08636 \; --hash=sha256:ad9e82fb8f09ade1c3e1b996a6337afac2b8b9e365f926f5a61aacc71adc5b3c \; --hash=sha256:af598ed32d6ae86f1b747b82783958b1a4ab8f617b06fe68795c7f026abbdcad \; --hash=sha256:b076b6226fb84157e3f7c971a47ff3a679d837cf338547532ab866c57930dbee \; --hash=sha256:b7ff0f54cb4ff66dd38bebd335a38e2c22c41a8ee45aa608efc890ac3e3931bc \; --hash=sha256:bfce63a9e7834b12b87c64d6b155fdd9b3b96191b6bd334bf37db7ff1fe457f2 \; --hash=sha256:c011a4149cfbcf9f03994ec2edffcb8b1dc2d2aede7ca243746df97a5d41ce48 \; --hash=sha256:c9c804664ebe8f83a211cace637506669e7890fec1b4195b505c214e50dd4eb7 \; --hash=sha256:ca379055a47383d02a5400cb0d110cef0a776fc644cda797db0c5696cfd7e18e \; --hash=sha256:cb0932dc158471523c9637e807d9bfb93e06a95cbf010f1a38b98623b929ef2b \; --hash=sha256:cd0f502fe016460680cd20aaa5a76d241d6f35a1c3350c474bac1273803893fa \; --hash=sha256:ceb01949af7121f9fc39f7d27f91be8546f3fb112c608bc4029aef0bab86a2a5 \; --hash=sha256:d080e0a5eb2529460b30190fcfcc4199bd7f827663f858a226a81bc27beaa97e \; --hash=sha256:dd15ff04ffd7e05ffcb7fe79f1b98041b8ea30ae9234aed2a9168b5797c3effb \; --hash=sha256:df0be2b576a7abbf737b1575f048c23fb1d769f267ec4358296f31c2479db8f9 \; --hash=sha256:e09031c87a1e51556fdcb46e5bd4f59dfb743061cf93c4d6831bf894f125eb57 \; --hash=sha256:e4dd52d80b8c83fdce44e12478ad2e85c64ea965e75d66dbeafb0a3e77308fcc \; --hash=sha256:f698de3fd0c4e6972b92290a45bd9b1536bffe8c6759c62471efaa8acb4c37bc \; --hash=sha256:fec21693218efe39aa7f8599346e90c705afa52c5b31ae019b2e57e8f6542bb2 \; --hash=sha256:ffcc3f7c66b5f5b7931a5aa68fc9cecc51e685ef90282f4a82f0f5e9b704ad11; # via jinja2; mdit-py-plugins==0.,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:14308,Security,hash,hash,14308,; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \; --hash=sha256:ab4a0df41e7c16a1392727727e7998a467472d0ad65f3ad5e6e765015df08636 \; --hash=sha256:ad9e82fb8f09ade1c3e1b996a6337afac2b8b9e365f926f5a61aacc71adc5b3c \; --hash=sha256:af598ed32d6ae86f1b747b82783958b1a4ab8f617b06fe68795c7f026abbdcad \; --hash=sha256:b076b6226fb84157e3f7c971a47ff3a679d837cf338547532ab866c57930dbee \; --hash=sha256:b7ff0f54cb4ff66dd38bebd335a38e2c22c41a8ee45aa608efc890ac3e3931bc \; --hash=sha256:bfce63a9e7834b12b87c64d6b155fdd9b3b96191b6bd334bf37db7ff1fe457f2 \; --hash=sha256:c011a4149cfbcf9f03994ec2edffcb8b1dc2d2aede7ca243746df97a5d41ce48 \; --hash=sha256:c9c804664ebe8f83a211cace637506669e7890fec1b4195b505c214e50dd4eb7 \; --hash=sha256:ca379055a47383d02a5400cb0d110cef0a776fc644cda797db0c5696cfd7e18e \; --hash=sha256:cb0932dc158471523c9637e807d9bfb93e06a95cbf010f1a38b98623b929ef2b \; --hash=sha256:cd0f502fe016460680cd20aaa5a76d241d6f35a1c3350c474bac1273803893fa \; --hash=sha256:ceb01949af7121f9fc39f7d27f91be8546f3fb112c608bc4029aef0bab86a2a5 \; --hash=sha256:d080e0a5eb2529460b30190fcfcc4199bd7f827663f858a226a81bc27beaa97e \; --hash=sha256:dd15ff04ffd7e05ffcb7fe79f1b98041b8ea30ae9234aed2a9168b5797c3effb \; --hash=sha256:df0be2b576a7abbf737b1575f048c23fb1d769f267ec4358296f31c2479db8f9 \; --hash=sha256:e09031c87a1e51556fdcb46e5bd4f59dfb743061cf93c4d6831bf894f125eb57 \; --hash=sha256:e4dd52d80b8c83fdce44e12478ad2e85c64ea965e75d66dbeafb0a3e77308fcc \; --hash=sha256:f698de3fd0c4e6972b92290a45bd9b1536bffe8c6759c62471efaa8acb4c37bc \; --hash=sha256:fec21693218efe39aa7f8599346e90c705afa52c5b31ae019b2e57e8f6542bb2 \; --hash=sha256:ffcc3f7c66b5f5b7931a5aa68fc9cecc51e685ef90282f4a82f0f5e9b704ad11; # via jinja2; mdit-py-plugins==0.,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:14390,Security,hash,hash,14390,; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \; --hash=sha256:ab4a0df41e7c16a1392727727e7998a467472d0ad65f3ad5e6e765015df08636 \; --hash=sha256:ad9e82fb8f09ade1c3e1b996a6337afac2b8b9e365f926f5a61aacc71adc5b3c \; --hash=sha256:af598ed32d6ae86f1b747b82783958b1a4ab8f617b06fe68795c7f026abbdcad \; --hash=sha256:b076b6226fb84157e3f7c971a47ff3a679d837cf338547532ab866c57930dbee \; --hash=sha256:b7ff0f54cb4ff66dd38bebd335a38e2c22c41a8ee45aa608efc890ac3e3931bc \; --hash=sha256:bfce63a9e7834b12b87c64d6b155fdd9b3b96191b6bd334bf37db7ff1fe457f2 \; --hash=sha256:c011a4149cfbcf9f03994ec2edffcb8b1dc2d2aede7ca243746df97a5d41ce48 \; --hash=sha256:c9c804664ebe8f83a211cace637506669e7890fec1b4195b505c214e50dd4eb7 \; --hash=sha256:ca379055a47383d02a5400cb0d110cef0a776fc644cda797db0c5696cfd7e18e \; --hash=sha256:cb0932dc158471523c9637e807d9bfb93e06a95cbf010f1a38b98623b929ef2b \; --hash=sha256:cd0f502fe016460680cd20aaa5a76d241d6f35a1c3350c474bac1273803893fa \; --hash=sha256:ceb01949af7121f9fc39f7d27f91be8546f3fb112c608bc4029aef0bab86a2a5 \; --hash=sha256:d080e0a5eb2529460b30190fcfcc4199bd7f827663f858a226a81bc27beaa97e \; --hash=sha256:dd15ff04ffd7e05ffcb7fe79f1b98041b8ea30ae9234aed2a9168b5797c3effb \; --hash=sha256:df0be2b576a7abbf737b1575f048c23fb1d769f267ec4358296f31c2479db8f9 \; --hash=sha256:e09031c87a1e51556fdcb46e5bd4f59dfb743061cf93c4d6831bf894f125eb57 \; --hash=sha256:e4dd52d80b8c83fdce44e12478ad2e85c64ea965e75d66dbeafb0a3e77308fcc \; --hash=sha256:f698de3fd0c4e6972b92290a45bd9b1536bffe8c6759c62471efaa8acb4c37bc \; --hash=sha256:fec21693218efe39aa7f8599346e90c705afa52c5b31ae019b2e57e8f6542bb2 \; --hash=sha256:ffcc3f7c66b5f5b7931a5aa68fc9cecc51e685ef90282f4a82f0f5e9b704ad11; # via jinja2; mdit-py-plugins==0.,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:14472,Security,hash,hash,14472,; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \; --hash=sha256:ab4a0df41e7c16a1392727727e7998a467472d0ad65f3ad5e6e765015df08636 \; --hash=sha256:ad9e82fb8f09ade1c3e1b996a6337afac2b8b9e365f926f5a61aacc71adc5b3c \; --hash=sha256:af598ed32d6ae86f1b747b82783958b1a4ab8f617b06fe68795c7f026abbdcad \; --hash=sha256:b076b6226fb84157e3f7c971a47ff3a679d837cf338547532ab866c57930dbee \; --hash=sha256:b7ff0f54cb4ff66dd38bebd335a38e2c22c41a8ee45aa608efc890ac3e3931bc \; --hash=sha256:bfce63a9e7834b12b87c64d6b155fdd9b3b96191b6bd334bf37db7ff1fe457f2 \; --hash=sha256:c011a4149cfbcf9f03994ec2edffcb8b1dc2d2aede7ca243746df97a5d41ce48 \; --hash=sha256:c9c804664ebe8f83a211cace637506669e7890fec1b4195b505c214e50dd4eb7 \; --hash=sha256:ca379055a47383d02a5400cb0d110cef0a776fc644cda797db0c5696cfd7e18e \; --hash=sha256:cb0932dc158471523c9637e807d9bfb93e06a95cbf010f1a38b98623b929ef2b \; --hash=sha256:cd0f502fe016460680cd20aaa5a76d241d6f35a1c3350c474bac1273803893fa \; --hash=sha256:ceb01949af7121f9fc39f7d27f91be8546f3fb112c608bc4029aef0bab86a2a5 \; --hash=sha256:d080e0a5eb2529460b30190fcfcc4199bd7f827663f858a226a81bc27beaa97e \; --hash=sha256:dd15ff04ffd7e05ffcb7fe79f1b98041b8ea30ae9234aed2a9168b5797c3effb \; --hash=sha256:df0be2b576a7abbf737b1575f048c23fb1d769f267ec4358296f31c2479db8f9 \; --hash=sha256:e09031c87a1e51556fdcb46e5bd4f59dfb743061cf93c4d6831bf894f125eb57 \; --hash=sha256:e4dd52d80b8c83fdce44e12478ad2e85c64ea965e75d66dbeafb0a3e77308fcc \; --hash=sha256:f698de3fd0c4e6972b92290a45bd9b1536bffe8c6759c62471efaa8acb4c37bc \; --hash=sha256:fec21693218efe39aa7f8599346e90c705afa52c5b31ae019b2e57e8f6542bb2 \; --hash=sha256:ffcc3f7c66b5f5b7931a5aa68fc9cecc51e685ef90282f4a82f0f5e9b704ad11; # via jinja2; mdit-py-plugins==0.,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:14554,Security,hash,hash,14554,; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \; --hash=sha256:ab4a0df41e7c16a1392727727e7998a467472d0ad65f3ad5e6e765015df08636 \; --hash=sha256:ad9e82fb8f09ade1c3e1b996a6337afac2b8b9e365f926f5a61aacc71adc5b3c \; --hash=sha256:af598ed32d6ae86f1b747b82783958b1a4ab8f617b06fe68795c7f026abbdcad \; --hash=sha256:b076b6226fb84157e3f7c971a47ff3a679d837cf338547532ab866c57930dbee \; --hash=sha256:b7ff0f54cb4ff66dd38bebd335a38e2c22c41a8ee45aa608efc890ac3e3931bc \; --hash=sha256:bfce63a9e7834b12b87c64d6b155fdd9b3b96191b6bd334bf37db7ff1fe457f2 \; --hash=sha256:c011a4149cfbcf9f03994ec2edffcb8b1dc2d2aede7ca243746df97a5d41ce48 \; --hash=sha256:c9c804664ebe8f83a211cace637506669e7890fec1b4195b505c214e50dd4eb7 \; --hash=sha256:ca379055a47383d02a5400cb0d110cef0a776fc644cda797db0c5696cfd7e18e \; --hash=sha256:cb0932dc158471523c9637e807d9bfb93e06a95cbf010f1a38b98623b929ef2b \; --hash=sha256:cd0f502fe016460680cd20aaa5a76d241d6f35a1c3350c474bac1273803893fa \; --hash=sha256:ceb01949af7121f9fc39f7d27f91be8546f3fb112c608bc4029aef0bab86a2a5 \; --hash=sha256:d080e0a5eb2529460b30190fcfcc4199bd7f827663f858a226a81bc27beaa97e \; --hash=sha256:dd15ff04ffd7e05ffcb7fe79f1b98041b8ea30ae9234aed2a9168b5797c3effb \; --hash=sha256:df0be2b576a7abbf737b1575f048c23fb1d769f267ec4358296f31c2479db8f9 \; --hash=sha256:e09031c87a1e51556fdcb46e5bd4f59dfb743061cf93c4d6831bf894f125eb57 \; --hash=sha256:e4dd52d80b8c83fdce44e12478ad2e85c64ea965e75d66dbeafb0a3e77308fcc \; --hash=sha256:f698de3fd0c4e6972b92290a45bd9b1536bffe8c6759c62471efaa8acb4c37bc \; --hash=sha256:fec21693218efe39aa7f8599346e90c705afa52c5b31ae019b2e57e8f6542bb2 \; --hash=sha256:ffcc3f7c66b5f5b7931a5aa68fc9cecc51e685ef90282f4a82f0f5e9b704ad11; # via jinja2; mdit-py-plugins==0.,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:14636,Security,hash,hash,14636,; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \; --hash=sha256:ab4a0df41e7c16a1392727727e7998a467472d0ad65f3ad5e6e765015df08636 \; --hash=sha256:ad9e82fb8f09ade1c3e1b996a6337afac2b8b9e365f926f5a61aacc71adc5b3c \; --hash=sha256:af598ed32d6ae86f1b747b82783958b1a4ab8f617b06fe68795c7f026abbdcad \; --hash=sha256:b076b6226fb84157e3f7c971a47ff3a679d837cf338547532ab866c57930dbee \; --hash=sha256:b7ff0f54cb4ff66dd38bebd335a38e2c22c41a8ee45aa608efc890ac3e3931bc \; --hash=sha256:bfce63a9e7834b12b87c64d6b155fdd9b3b96191b6bd334bf37db7ff1fe457f2 \; --hash=sha256:c011a4149cfbcf9f03994ec2edffcb8b1dc2d2aede7ca243746df97a5d41ce48 \; --hash=sha256:c9c804664ebe8f83a211cace637506669e7890fec1b4195b505c214e50dd4eb7 \; --hash=sha256:ca379055a47383d02a5400cb0d110cef0a776fc644cda797db0c5696cfd7e18e \; --hash=sha256:cb0932dc158471523c9637e807d9bfb93e06a95cbf010f1a38b98623b929ef2b \; --hash=sha256:cd0f502fe016460680cd20aaa5a76d241d6f35a1c3350c474bac1273803893fa \; --hash=sha256:ceb01949af7121f9fc39f7d27f91be8546f3fb112c608bc4029aef0bab86a2a5 \; --hash=sha256:d080e0a5eb2529460b30190fcfcc4199bd7f827663f858a226a81bc27beaa97e \; --hash=sha256:dd15ff04ffd7e05ffcb7fe79f1b98041b8ea30ae9234aed2a9168b5797c3effb \; --hash=sha256:df0be2b576a7abbf737b1575f048c23fb1d769f267ec4358296f31c2479db8f9 \; --hash=sha256:e09031c87a1e51556fdcb46e5bd4f59dfb743061cf93c4d6831bf894f125eb57 \; --hash=sha256:e4dd52d80b8c83fdce44e12478ad2e85c64ea965e75d66dbeafb0a3e77308fcc \; --hash=sha256:f698de3fd0c4e6972b92290a45bd9b1536bffe8c6759c62471efaa8acb4c37bc \; --hash=sha256:fec21693218efe39aa7f8599346e90c705afa52c5b31ae019b2e57e8f6542bb2 \; --hash=sha256:ffcc3f7c66b5f5b7931a5aa68fc9cecc51e685ef90282f4a82f0f5e9b704ad11; # via jinja2; mdit-py-plugins==0.,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:14718,Security,hash,hash,14718,; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \; --hash=sha256:ab4a0df41e7c16a1392727727e7998a467472d0ad65f3ad5e6e765015df08636 \; --hash=sha256:ad9e82fb8f09ade1c3e1b996a6337afac2b8b9e365f926f5a61aacc71adc5b3c \; --hash=sha256:af598ed32d6ae86f1b747b82783958b1a4ab8f617b06fe68795c7f026abbdcad \; --hash=sha256:b076b6226fb84157e3f7c971a47ff3a679d837cf338547532ab866c57930dbee \; --hash=sha256:b7ff0f54cb4ff66dd38bebd335a38e2c22c41a8ee45aa608efc890ac3e3931bc \; --hash=sha256:bfce63a9e7834b12b87c64d6b155fdd9b3b96191b6bd334bf37db7ff1fe457f2 \; --hash=sha256:c011a4149cfbcf9f03994ec2edffcb8b1dc2d2aede7ca243746df97a5d41ce48 \; --hash=sha256:c9c804664ebe8f83a211cace637506669e7890fec1b4195b505c214e50dd4eb7 \; --hash=sha256:ca379055a47383d02a5400cb0d110cef0a776fc644cda797db0c5696cfd7e18e \; --hash=sha256:cb0932dc158471523c9637e807d9bfb93e06a95cbf010f1a38b98623b929ef2b \; --hash=sha256:cd0f502fe016460680cd20aaa5a76d241d6f35a1c3350c474bac1273803893fa \; --hash=sha256:ceb01949af7121f9fc39f7d27f91be8546f3fb112c608bc4029aef0bab86a2a5 \; --hash=sha256:d080e0a5eb2529460b30190fcfcc4199bd7f827663f858a226a81bc27beaa97e \; --hash=sha256:dd15ff04ffd7e05ffcb7fe79f1b98041b8ea30ae9234aed2a9168b5797c3effb \; --hash=sha256:df0be2b576a7abbf737b1575f048c23fb1d769f267ec4358296f31c2479db8f9 \; --hash=sha256:e09031c87a1e51556fdcb46e5bd4f59dfb743061cf93c4d6831bf894f125eb57 \; --hash=sha256:e4dd52d80b8c83fdce44e12478ad2e85c64ea965e75d66dbeafb0a3e77308fcc \; --hash=sha256:f698de3fd0c4e6972b92290a45bd9b1536bffe8c6759c62471efaa8acb4c37bc \; --hash=sha256:fec21693218efe39aa7f8599346e90c705afa52c5b31ae019b2e57e8f6542bb2 \; --hash=sha256:ffcc3f7c66b5f5b7931a5aa68fc9cecc51e685ef90282f4a82f0f5e9b704ad11; # via jinja2; mdit-py-plugins==0.,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:14800,Security,hash,hash,14800,; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \; --hash=sha256:ab4a0df41e7c16a1392727727e7998a467472d0ad65f3ad5e6e765015df08636 \; --hash=sha256:ad9e82fb8f09ade1c3e1b996a6337afac2b8b9e365f926f5a61aacc71adc5b3c \; --hash=sha256:af598ed32d6ae86f1b747b82783958b1a4ab8f617b06fe68795c7f026abbdcad \; --hash=sha256:b076b6226fb84157e3f7c971a47ff3a679d837cf338547532ab866c57930dbee \; --hash=sha256:b7ff0f54cb4ff66dd38bebd335a38e2c22c41a8ee45aa608efc890ac3e3931bc \; --hash=sha256:bfce63a9e7834b12b87c64d6b155fdd9b3b96191b6bd334bf37db7ff1fe457f2 \; --hash=sha256:c011a4149cfbcf9f03994ec2edffcb8b1dc2d2aede7ca243746df97a5d41ce48 \; --hash=sha256:c9c804664ebe8f83a211cace637506669e7890fec1b4195b505c214e50dd4eb7 \; --hash=sha256:ca379055a47383d02a5400cb0d110cef0a776fc644cda797db0c5696cfd7e18e \; --hash=sha256:cb0932dc158471523c9637e807d9bfb93e06a95cbf010f1a38b98623b929ef2b \; --hash=sha256:cd0f502fe016460680cd20aaa5a76d241d6f35a1c3350c474bac1273803893fa \; --hash=sha256:ceb01949af7121f9fc39f7d27f91be8546f3fb112c608bc4029aef0bab86a2a5 \; --hash=sha256:d080e0a5eb2529460b30190fcfcc4199bd7f827663f858a226a81bc27beaa97e \; --hash=sha256:dd15ff04ffd7e05ffcb7fe79f1b98041b8ea30ae9234aed2a9168b5797c3effb \; --hash=sha256:df0be2b576a7abbf737b1575f048c23fb1d769f267ec4358296f31c2479db8f9 \; --hash=sha256:e09031c87a1e51556fdcb46e5bd4f59dfb743061cf93c4d6831bf894f125eb57 \; --hash=sha256:e4dd52d80b8c83fdce44e12478ad2e85c64ea965e75d66dbeafb0a3e77308fcc \; --hash=sha256:f698de3fd0c4e6972b92290a45bd9b1536bffe8c6759c62471efaa8acb4c37bc \; --hash=sha256:fec21693218efe39aa7f8599346e90c705afa52c5b31ae019b2e57e8f6542bb2 \; --hash=sha256:ffcc3f7c66b5f5b7931a5aa68fc9cecc51e685ef90282f4a82f0f5e9b704ad11; # via jinja2; mdit-py-plugins==0.,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:14882,Security,hash,hash,14882,; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \; --hash=sha256:ab4a0df41e7c16a1392727727e7998a467472d0ad65f3ad5e6e765015df08636 \; --hash=sha256:ad9e82fb8f09ade1c3e1b996a6337afac2b8b9e365f926f5a61aacc71adc5b3c \; --hash=sha256:af598ed32d6ae86f1b747b82783958b1a4ab8f617b06fe68795c7f026abbdcad \; --hash=sha256:b076b6226fb84157e3f7c971a47ff3a679d837cf338547532ab866c57930dbee \; --hash=sha256:b7ff0f54cb4ff66dd38bebd335a38e2c22c41a8ee45aa608efc890ac3e3931bc \; --hash=sha256:bfce63a9e7834b12b87c64d6b155fdd9b3b96191b6bd334bf37db7ff1fe457f2 \; --hash=sha256:c011a4149cfbcf9f03994ec2edffcb8b1dc2d2aede7ca243746df97a5d41ce48 \; --hash=sha256:c9c804664ebe8f83a211cace637506669e7890fec1b4195b505c214e50dd4eb7 \; --hash=sha256:ca379055a47383d02a5400cb0d110cef0a776fc644cda797db0c5696cfd7e18e \; --hash=sha256:cb0932dc158471523c9637e807d9bfb93e06a95cbf010f1a38b98623b929ef2b \; --hash=sha256:cd0f502fe016460680cd20aaa5a76d241d6f35a1c3350c474bac1273803893fa \; --hash=sha256:ceb01949af7121f9fc39f7d27f91be8546f3fb112c608bc4029aef0bab86a2a5 \; --hash=sha256:d080e0a5eb2529460b30190fcfcc4199bd7f827663f858a226a81bc27beaa97e \; --hash=sha256:dd15ff04ffd7e05ffcb7fe79f1b98041b8ea30ae9234aed2a9168b5797c3effb \; --hash=sha256:df0be2b576a7abbf737b1575f048c23fb1d769f267ec4358296f31c2479db8f9 \; --hash=sha256:e09031c87a1e51556fdcb46e5bd4f59dfb743061cf93c4d6831bf894f125eb57 \; --hash=sha256:e4dd52d80b8c83fdce44e12478ad2e85c64ea965e75d66dbeafb0a3e77308fcc \; --hash=sha256:f698de3fd0c4e6972b92290a45bd9b1536bffe8c6759c62471efaa8acb4c37bc \; --hash=sha256:fec21693218efe39aa7f8599346e90c705afa52c5b31ae019b2e57e8f6542bb2 \; --hash=sha256:ffcc3f7c66b5f5b7931a5aa68fc9cecc51e685ef90282f4a82f0f5e9b704ad11; # via jinja2; mdit-py-plugins==0.,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:14964,Security,hash,hash,14964,; --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \; --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \; --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \; --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \; --hash=sha256:ab4a0df41e7c16a1392727727e7998a467472d0ad65f3ad5e6e765015df08636 \; --hash=sha256:ad9e82fb8f09ade1c3e1b996a6337afac2b8b9e365f926f5a61aacc71adc5b3c \; --hash=sha256:af598ed32d6ae86f1b747b82783958b1a4ab8f617b06fe68795c7f026abbdcad \; --hash=sha256:b076b6226fb84157e3f7c971a47ff3a679d837cf338547532ab866c57930dbee \; --hash=sha256:b7ff0f54cb4ff66dd38bebd335a38e2c22c41a8ee45aa608efc890ac3e3931bc \; --hash=sha256:bfce63a9e7834b12b87c64d6b155fdd9b3b96191b6bd334bf37db7ff1fe457f2 \; --hash=sha256:c011a4149cfbcf9f03994ec2edffcb8b1dc2d2aede7ca243746df97a5d41ce48 \; --hash=sha256:c9c804664ebe8f83a211cace637506669e7890fec1b4195b505c214e50dd4eb7 \; --hash=sha256:ca379055a47383d02a5400cb0d110cef0a776fc644cda797db0c5696cfd7e18e \; --hash=sha256:cb0932dc158471523c9637e807d9bfb93e06a95cbf010f1a38b98623b929ef2b \; --hash=sha256:cd0f502fe016460680cd20aaa5a76d241d6f35a1c3350c474bac1273803893fa \; --hash=sha256:ceb01949af7121f9fc39f7d27f91be8546f3fb112c608bc4029aef0bab86a2a5 \; --hash=sha256:d080e0a5eb2529460b30190fcfcc4199bd7f827663f858a226a81bc27beaa97e \; --hash=sha256:dd15ff04ffd7e05ffcb7fe79f1b98041b8ea30ae9234aed2a9168b5797c3effb \; --hash=sha256:df0be2b576a7abbf737b1575f048c23fb1d769f267ec4358296f31c2479db8f9 \; --hash=sha256:e09031c87a1e51556fdcb46e5bd4f59dfb743061cf93c4d6831bf894f125eb57 \; --hash=sha256:e4dd52d80b8c83fdce44e12478ad2e85c64ea965e75d66dbeafb0a3e77308fcc \; --hash=sha256:f698de3fd0c4e6972b92290a45bd9b1536bffe8c6759c62471efaa8acb4c37bc \; --hash=sha256:fec21693218efe39aa7f8599346e90c705afa52c5b31ae019b2e57e8f6542bb2 \; --hash=sha256:ffcc3f7c66b5f5b7931a5aa68fc9cecc51e685ef90282f4a82f0f5e9b704ad11; # via jinja2; mdit-py-plugins==0.,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:15084,Security,hash,hash,15084,9637e807d9bfb93e06a95cbf010f1a38b98623b929ef2b \; --hash=sha256:cd0f502fe016460680cd20aaa5a76d241d6f35a1c3350c474bac1273803893fa \; --hash=sha256:ceb01949af7121f9fc39f7d27f91be8546f3fb112c608bc4029aef0bab86a2a5 \; --hash=sha256:d080e0a5eb2529460b30190fcfcc4199bd7f827663f858a226a81bc27beaa97e \; --hash=sha256:dd15ff04ffd7e05ffcb7fe79f1b98041b8ea30ae9234aed2a9168b5797c3effb \; --hash=sha256:df0be2b576a7abbf737b1575f048c23fb1d769f267ec4358296f31c2479db8f9 \; --hash=sha256:e09031c87a1e51556fdcb46e5bd4f59dfb743061cf93c4d6831bf894f125eb57 \; --hash=sha256:e4dd52d80b8c83fdce44e12478ad2e85c64ea965e75d66dbeafb0a3e77308fcc \; --hash=sha256:f698de3fd0c4e6972b92290a45bd9b1536bffe8c6759c62471efaa8acb4c37bc \; --hash=sha256:fec21693218efe39aa7f8599346e90c705afa52c5b31ae019b2e57e8f6542bb2 \; --hash=sha256:ffcc3f7c66b5f5b7931a5aa68fc9cecc51e685ef90282f4a82f0f5e9b704ad11; # via jinja2; mdit-py-plugins==0.4.0 \; --hash=sha256:b51b3bb70691f57f974e257e367107857a93b36f322a9e6d44ca5bf28ec2def9 \; --hash=sha256:d8ab27e9aed6c38aa716819fedfde15ca275715955f8a185a8e1cf90fb1d2c1b; # via myst-parser; mdurl==0.1.2 \; --hash=sha256:84008a41e51615a49fc9966191ff91509e3c40b939176e643fd50a5c2196b8f8 \; --hash=sha256:bb413d29f5eea38f31dd4754dd7377d4465116fb207585f97bf925588687c1ba; # via markdown-it-py; myst-parser==2.0.0 \; --hash=sha256:7c36344ae39c8e740dad7fdabf5aa6fc4897a813083c6cc9990044eb93656b14 \; --hash=sha256:ea929a67a6a0b1683cdbe19b8d2e724cd7643f8aa3e7bb18dd65beac3483bead; # via -r requirements.txt; packaging==23.2 \; --hash=sha256:048fb0e9405036518eaaf48a55953c750c11e1a1b68e0dd1a9d62ed0c092cfc5 \; --hash=sha256:8c491190033a9af7e1d931d0b5dacc2ef47509b34dd0de67ed209b5203fc88c7; # via sphinx; pygments==2.17.2 \; --hash=sha256:b27c2826c47d0f3219f29554824c30c5e8945175d888647acd804ddd04af846c \; --hash=sha256:da46cec9fd2de5be3a8a784f434e4c4ab670b4ff54d605c4c2717e9d49c4c367; # via; # furo; # sphinx; pyyaml==6.0.1 \; --hash=sha256:04ac92ad1925b2cff1db0cfebffb6ffc43457495c9b3c39d3fcae417d7125dc5 \; ,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:15166,Security,hash,hash,15166,9637e807d9bfb93e06a95cbf010f1a38b98623b929ef2b \; --hash=sha256:cd0f502fe016460680cd20aaa5a76d241d6f35a1c3350c474bac1273803893fa \; --hash=sha256:ceb01949af7121f9fc39f7d27f91be8546f3fb112c608bc4029aef0bab86a2a5 \; --hash=sha256:d080e0a5eb2529460b30190fcfcc4199bd7f827663f858a226a81bc27beaa97e \; --hash=sha256:dd15ff04ffd7e05ffcb7fe79f1b98041b8ea30ae9234aed2a9168b5797c3effb \; --hash=sha256:df0be2b576a7abbf737b1575f048c23fb1d769f267ec4358296f31c2479db8f9 \; --hash=sha256:e09031c87a1e51556fdcb46e5bd4f59dfb743061cf93c4d6831bf894f125eb57 \; --hash=sha256:e4dd52d80b8c83fdce44e12478ad2e85c64ea965e75d66dbeafb0a3e77308fcc \; --hash=sha256:f698de3fd0c4e6972b92290a45bd9b1536bffe8c6759c62471efaa8acb4c37bc \; --hash=sha256:fec21693218efe39aa7f8599346e90c705afa52c5b31ae019b2e57e8f6542bb2 \; --hash=sha256:ffcc3f7c66b5f5b7931a5aa68fc9cecc51e685ef90282f4a82f0f5e9b704ad11; # via jinja2; mdit-py-plugins==0.4.0 \; --hash=sha256:b51b3bb70691f57f974e257e367107857a93b36f322a9e6d44ca5bf28ec2def9 \; --hash=sha256:d8ab27e9aed6c38aa716819fedfde15ca275715955f8a185a8e1cf90fb1d2c1b; # via myst-parser; mdurl==0.1.2 \; --hash=sha256:84008a41e51615a49fc9966191ff91509e3c40b939176e643fd50a5c2196b8f8 \; --hash=sha256:bb413d29f5eea38f31dd4754dd7377d4465116fb207585f97bf925588687c1ba; # via markdown-it-py; myst-parser==2.0.0 \; --hash=sha256:7c36344ae39c8e740dad7fdabf5aa6fc4897a813083c6cc9990044eb93656b14 \; --hash=sha256:ea929a67a6a0b1683cdbe19b8d2e724cd7643f8aa3e7bb18dd65beac3483bead; # via -r requirements.txt; packaging==23.2 \; --hash=sha256:048fb0e9405036518eaaf48a55953c750c11e1a1b68e0dd1a9d62ed0c092cfc5 \; --hash=sha256:8c491190033a9af7e1d931d0b5dacc2ef47509b34dd0de67ed209b5203fc88c7; # via sphinx; pygments==2.17.2 \; --hash=sha256:b27c2826c47d0f3219f29554824c30c5e8945175d888647acd804ddd04af846c \; --hash=sha256:da46cec9fd2de5be3a8a784f434e4c4ab670b4ff54d605c4c2717e9d49c4c367; # via; # furo; # sphinx; pyyaml==6.0.1 \; --hash=sha256:04ac92ad1925b2cff1db0cfebffb6ffc43457495c9b3c39d3fcae417d7125dc5 \; ,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:15281,Security,hash,hash,15281,ab86a2a5 \; --hash=sha256:d080e0a5eb2529460b30190fcfcc4199bd7f827663f858a226a81bc27beaa97e \; --hash=sha256:dd15ff04ffd7e05ffcb7fe79f1b98041b8ea30ae9234aed2a9168b5797c3effb \; --hash=sha256:df0be2b576a7abbf737b1575f048c23fb1d769f267ec4358296f31c2479db8f9 \; --hash=sha256:e09031c87a1e51556fdcb46e5bd4f59dfb743061cf93c4d6831bf894f125eb57 \; --hash=sha256:e4dd52d80b8c83fdce44e12478ad2e85c64ea965e75d66dbeafb0a3e77308fcc \; --hash=sha256:f698de3fd0c4e6972b92290a45bd9b1536bffe8c6759c62471efaa8acb4c37bc \; --hash=sha256:fec21693218efe39aa7f8599346e90c705afa52c5b31ae019b2e57e8f6542bb2 \; --hash=sha256:ffcc3f7c66b5f5b7931a5aa68fc9cecc51e685ef90282f4a82f0f5e9b704ad11; # via jinja2; mdit-py-plugins==0.4.0 \; --hash=sha256:b51b3bb70691f57f974e257e367107857a93b36f322a9e6d44ca5bf28ec2def9 \; --hash=sha256:d8ab27e9aed6c38aa716819fedfde15ca275715955f8a185a8e1cf90fb1d2c1b; # via myst-parser; mdurl==0.1.2 \; --hash=sha256:84008a41e51615a49fc9966191ff91509e3c40b939176e643fd50a5c2196b8f8 \; --hash=sha256:bb413d29f5eea38f31dd4754dd7377d4465116fb207585f97bf925588687c1ba; # via markdown-it-py; myst-parser==2.0.0 \; --hash=sha256:7c36344ae39c8e740dad7fdabf5aa6fc4897a813083c6cc9990044eb93656b14 \; --hash=sha256:ea929a67a6a0b1683cdbe19b8d2e724cd7643f8aa3e7bb18dd65beac3483bead; # via -r requirements.txt; packaging==23.2 \; --hash=sha256:048fb0e9405036518eaaf48a55953c750c11e1a1b68e0dd1a9d62ed0c092cfc5 \; --hash=sha256:8c491190033a9af7e1d931d0b5dacc2ef47509b34dd0de67ed209b5203fc88c7; # via sphinx; pygments==2.17.2 \; --hash=sha256:b27c2826c47d0f3219f29554824c30c5e8945175d888647acd804ddd04af846c \; --hash=sha256:da46cec9fd2de5be3a8a784f434e4c4ab670b4ff54d605c4c2717e9d49c4c367; # via; # furo; # sphinx; pyyaml==6.0.1 \; --hash=sha256:04ac92ad1925b2cff1db0cfebffb6ffc43457495c9b3c39d3fcae417d7125dc5 \; --hash=sha256:062582fca9fabdd2c8b54a3ef1c978d786e0f6b3a1510e0ac93ef59e0ddae2bc \; --hash=sha256:0d3304d8c0adc42be59c5f8a4d9e3d7379e6955ad754aa9d6ab7a398b59dd1df \; --hash=sha256:1635fd110e8d85d55237ab3,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:15363,Security,hash,hash,15363,ab86a2a5 \; --hash=sha256:d080e0a5eb2529460b30190fcfcc4199bd7f827663f858a226a81bc27beaa97e \; --hash=sha256:dd15ff04ffd7e05ffcb7fe79f1b98041b8ea30ae9234aed2a9168b5797c3effb \; --hash=sha256:df0be2b576a7abbf737b1575f048c23fb1d769f267ec4358296f31c2479db8f9 \; --hash=sha256:e09031c87a1e51556fdcb46e5bd4f59dfb743061cf93c4d6831bf894f125eb57 \; --hash=sha256:e4dd52d80b8c83fdce44e12478ad2e85c64ea965e75d66dbeafb0a3e77308fcc \; --hash=sha256:f698de3fd0c4e6972b92290a45bd9b1536bffe8c6759c62471efaa8acb4c37bc \; --hash=sha256:fec21693218efe39aa7f8599346e90c705afa52c5b31ae019b2e57e8f6542bb2 \; --hash=sha256:ffcc3f7c66b5f5b7931a5aa68fc9cecc51e685ef90282f4a82f0f5e9b704ad11; # via jinja2; mdit-py-plugins==0.4.0 \; --hash=sha256:b51b3bb70691f57f974e257e367107857a93b36f322a9e6d44ca5bf28ec2def9 \; --hash=sha256:d8ab27e9aed6c38aa716819fedfde15ca275715955f8a185a8e1cf90fb1d2c1b; # via myst-parser; mdurl==0.1.2 \; --hash=sha256:84008a41e51615a49fc9966191ff91509e3c40b939176e643fd50a5c2196b8f8 \; --hash=sha256:bb413d29f5eea38f31dd4754dd7377d4465116fb207585f97bf925588687c1ba; # via markdown-it-py; myst-parser==2.0.0 \; --hash=sha256:7c36344ae39c8e740dad7fdabf5aa6fc4897a813083c6cc9990044eb93656b14 \; --hash=sha256:ea929a67a6a0b1683cdbe19b8d2e724cd7643f8aa3e7bb18dd65beac3483bead; # via -r requirements.txt; packaging==23.2 \; --hash=sha256:048fb0e9405036518eaaf48a55953c750c11e1a1b68e0dd1a9d62ed0c092cfc5 \; --hash=sha256:8c491190033a9af7e1d931d0b5dacc2ef47509b34dd0de67ed209b5203fc88c7; # via sphinx; pygments==2.17.2 \; --hash=sha256:b27c2826c47d0f3219f29554824c30c5e8945175d888647acd804ddd04af846c \; --hash=sha256:da46cec9fd2de5be3a8a784f434e4c4ab670b4ff54d605c4c2717e9d49c4c367; # via; # furo; # sphinx; pyyaml==6.0.1 \; --hash=sha256:04ac92ad1925b2cff1db0cfebffb6ffc43457495c9b3c39d3fcae417d7125dc5 \; --hash=sha256:062582fca9fabdd2c8b54a3ef1c978d786e0f6b3a1510e0ac93ef59e0ddae2bc \; --hash=sha256:0d3304d8c0adc42be59c5f8a4d9e3d7379e6955ad754aa9d6ab7a398b59dd1df \; --hash=sha256:1635fd110e8d85d55237ab3,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:15487,Security,hash,hash,15487,76a7abbf737b1575f048c23fb1d769f267ec4358296f31c2479db8f9 \; --hash=sha256:e09031c87a1e51556fdcb46e5bd4f59dfb743061cf93c4d6831bf894f125eb57 \; --hash=sha256:e4dd52d80b8c83fdce44e12478ad2e85c64ea965e75d66dbeafb0a3e77308fcc \; --hash=sha256:f698de3fd0c4e6972b92290a45bd9b1536bffe8c6759c62471efaa8acb4c37bc \; --hash=sha256:fec21693218efe39aa7f8599346e90c705afa52c5b31ae019b2e57e8f6542bb2 \; --hash=sha256:ffcc3f7c66b5f5b7931a5aa68fc9cecc51e685ef90282f4a82f0f5e9b704ad11; # via jinja2; mdit-py-plugins==0.4.0 \; --hash=sha256:b51b3bb70691f57f974e257e367107857a93b36f322a9e6d44ca5bf28ec2def9 \; --hash=sha256:d8ab27e9aed6c38aa716819fedfde15ca275715955f8a185a8e1cf90fb1d2c1b; # via myst-parser; mdurl==0.1.2 \; --hash=sha256:84008a41e51615a49fc9966191ff91509e3c40b939176e643fd50a5c2196b8f8 \; --hash=sha256:bb413d29f5eea38f31dd4754dd7377d4465116fb207585f97bf925588687c1ba; # via markdown-it-py; myst-parser==2.0.0 \; --hash=sha256:7c36344ae39c8e740dad7fdabf5aa6fc4897a813083c6cc9990044eb93656b14 \; --hash=sha256:ea929a67a6a0b1683cdbe19b8d2e724cd7643f8aa3e7bb18dd65beac3483bead; # via -r requirements.txt; packaging==23.2 \; --hash=sha256:048fb0e9405036518eaaf48a55953c750c11e1a1b68e0dd1a9d62ed0c092cfc5 \; --hash=sha256:8c491190033a9af7e1d931d0b5dacc2ef47509b34dd0de67ed209b5203fc88c7; # via sphinx; pygments==2.17.2 \; --hash=sha256:b27c2826c47d0f3219f29554824c30c5e8945175d888647acd804ddd04af846c \; --hash=sha256:da46cec9fd2de5be3a8a784f434e4c4ab670b4ff54d605c4c2717e9d49c4c367; # via; # furo; # sphinx; pyyaml==6.0.1 \; --hash=sha256:04ac92ad1925b2cff1db0cfebffb6ffc43457495c9b3c39d3fcae417d7125dc5 \; --hash=sha256:062582fca9fabdd2c8b54a3ef1c978d786e0f6b3a1510e0ac93ef59e0ddae2bc \; --hash=sha256:0d3304d8c0adc42be59c5f8a4d9e3d7379e6955ad754aa9d6ab7a398b59dd1df \; --hash=sha256:1635fd110e8d85d55237ab316b5b011de701ea0f29d07611174a1b42f1444741 \; --hash=sha256:184c5108a2aca3c5b3d3bf9395d50893a7ab82a38004c8f61c258d4428e80206 \; --hash=sha256:18aeb1bf9a78867dc38b259769503436b7c72f7a1f1f4c93ff9a17de54,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:15569,Security,hash,hash,15569,76a7abbf737b1575f048c23fb1d769f267ec4358296f31c2479db8f9 \; --hash=sha256:e09031c87a1e51556fdcb46e5bd4f59dfb743061cf93c4d6831bf894f125eb57 \; --hash=sha256:e4dd52d80b8c83fdce44e12478ad2e85c64ea965e75d66dbeafb0a3e77308fcc \; --hash=sha256:f698de3fd0c4e6972b92290a45bd9b1536bffe8c6759c62471efaa8acb4c37bc \; --hash=sha256:fec21693218efe39aa7f8599346e90c705afa52c5b31ae019b2e57e8f6542bb2 \; --hash=sha256:ffcc3f7c66b5f5b7931a5aa68fc9cecc51e685ef90282f4a82f0f5e9b704ad11; # via jinja2; mdit-py-plugins==0.4.0 \; --hash=sha256:b51b3bb70691f57f974e257e367107857a93b36f322a9e6d44ca5bf28ec2def9 \; --hash=sha256:d8ab27e9aed6c38aa716819fedfde15ca275715955f8a185a8e1cf90fb1d2c1b; # via myst-parser; mdurl==0.1.2 \; --hash=sha256:84008a41e51615a49fc9966191ff91509e3c40b939176e643fd50a5c2196b8f8 \; --hash=sha256:bb413d29f5eea38f31dd4754dd7377d4465116fb207585f97bf925588687c1ba; # via markdown-it-py; myst-parser==2.0.0 \; --hash=sha256:7c36344ae39c8e740dad7fdabf5aa6fc4897a813083c6cc9990044eb93656b14 \; --hash=sha256:ea929a67a6a0b1683cdbe19b8d2e724cd7643f8aa3e7bb18dd65beac3483bead; # via -r requirements.txt; packaging==23.2 \; --hash=sha256:048fb0e9405036518eaaf48a55953c750c11e1a1b68e0dd1a9d62ed0c092cfc5 \; --hash=sha256:8c491190033a9af7e1d931d0b5dacc2ef47509b34dd0de67ed209b5203fc88c7; # via sphinx; pygments==2.17.2 \; --hash=sha256:b27c2826c47d0f3219f29554824c30c5e8945175d888647acd804ddd04af846c \; --hash=sha256:da46cec9fd2de5be3a8a784f434e4c4ab670b4ff54d605c4c2717e9d49c4c367; # via; # furo; # sphinx; pyyaml==6.0.1 \; --hash=sha256:04ac92ad1925b2cff1db0cfebffb6ffc43457495c9b3c39d3fcae417d7125dc5 \; --hash=sha256:062582fca9fabdd2c8b54a3ef1c978d786e0f6b3a1510e0ac93ef59e0ddae2bc \; --hash=sha256:0d3304d8c0adc42be59c5f8a4d9e3d7379e6955ad754aa9d6ab7a398b59dd1df \; --hash=sha256:1635fd110e8d85d55237ab316b5b011de701ea0f29d07611174a1b42f1444741 \; --hash=sha256:184c5108a2aca3c5b3d3bf9395d50893a7ab82a38004c8f61c258d4428e80206 \; --hash=sha256:18aeb1bf9a78867dc38b259769503436b7c72f7a1f1f4c93ff9a17de54,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:15695,Security,hash,hash,15695,3e77308fcc \; --hash=sha256:f698de3fd0c4e6972b92290a45bd9b1536bffe8c6759c62471efaa8acb4c37bc \; --hash=sha256:fec21693218efe39aa7f8599346e90c705afa52c5b31ae019b2e57e8f6542bb2 \; --hash=sha256:ffcc3f7c66b5f5b7931a5aa68fc9cecc51e685ef90282f4a82f0f5e9b704ad11; # via jinja2; mdit-py-plugins==0.4.0 \; --hash=sha256:b51b3bb70691f57f974e257e367107857a93b36f322a9e6d44ca5bf28ec2def9 \; --hash=sha256:d8ab27e9aed6c38aa716819fedfde15ca275715955f8a185a8e1cf90fb1d2c1b; # via myst-parser; mdurl==0.1.2 \; --hash=sha256:84008a41e51615a49fc9966191ff91509e3c40b939176e643fd50a5c2196b8f8 \; --hash=sha256:bb413d29f5eea38f31dd4754dd7377d4465116fb207585f97bf925588687c1ba; # via markdown-it-py; myst-parser==2.0.0 \; --hash=sha256:7c36344ae39c8e740dad7fdabf5aa6fc4897a813083c6cc9990044eb93656b14 \; --hash=sha256:ea929a67a6a0b1683cdbe19b8d2e724cd7643f8aa3e7bb18dd65beac3483bead; # via -r requirements.txt; packaging==23.2 \; --hash=sha256:048fb0e9405036518eaaf48a55953c750c11e1a1b68e0dd1a9d62ed0c092cfc5 \; --hash=sha256:8c491190033a9af7e1d931d0b5dacc2ef47509b34dd0de67ed209b5203fc88c7; # via sphinx; pygments==2.17.2 \; --hash=sha256:b27c2826c47d0f3219f29554824c30c5e8945175d888647acd804ddd04af846c \; --hash=sha256:da46cec9fd2de5be3a8a784f434e4c4ab670b4ff54d605c4c2717e9d49c4c367; # via; # furo; # sphinx; pyyaml==6.0.1 \; --hash=sha256:04ac92ad1925b2cff1db0cfebffb6ffc43457495c9b3c39d3fcae417d7125dc5 \; --hash=sha256:062582fca9fabdd2c8b54a3ef1c978d786e0f6b3a1510e0ac93ef59e0ddae2bc \; --hash=sha256:0d3304d8c0adc42be59c5f8a4d9e3d7379e6955ad754aa9d6ab7a398b59dd1df \; --hash=sha256:1635fd110e8d85d55237ab316b5b011de701ea0f29d07611174a1b42f1444741 \; --hash=sha256:184c5108a2aca3c5b3d3bf9395d50893a7ab82a38004c8f61c258d4428e80206 \; --hash=sha256:18aeb1bf9a78867dc38b259769503436b7c72f7a1f1f4c93ff9a17de54319b27 \; --hash=sha256:1d4c7e777c441b20e32f52bd377e0c409713e8bb1386e1099c2415f26e479595 \; --hash=sha256:1e2722cc9fbb45d9b87631ac70924c11d3a401b2d7f410cc0e3bbf249f2dca62 \; --hash=sha256:1fe35611261b29bd1de007,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:15777,Security,hash,hash,15777,3e77308fcc \; --hash=sha256:f698de3fd0c4e6972b92290a45bd9b1536bffe8c6759c62471efaa8acb4c37bc \; --hash=sha256:fec21693218efe39aa7f8599346e90c705afa52c5b31ae019b2e57e8f6542bb2 \; --hash=sha256:ffcc3f7c66b5f5b7931a5aa68fc9cecc51e685ef90282f4a82f0f5e9b704ad11; # via jinja2; mdit-py-plugins==0.4.0 \; --hash=sha256:b51b3bb70691f57f974e257e367107857a93b36f322a9e6d44ca5bf28ec2def9 \; --hash=sha256:d8ab27e9aed6c38aa716819fedfde15ca275715955f8a185a8e1cf90fb1d2c1b; # via myst-parser; mdurl==0.1.2 \; --hash=sha256:84008a41e51615a49fc9966191ff91509e3c40b939176e643fd50a5c2196b8f8 \; --hash=sha256:bb413d29f5eea38f31dd4754dd7377d4465116fb207585f97bf925588687c1ba; # via markdown-it-py; myst-parser==2.0.0 \; --hash=sha256:7c36344ae39c8e740dad7fdabf5aa6fc4897a813083c6cc9990044eb93656b14 \; --hash=sha256:ea929a67a6a0b1683cdbe19b8d2e724cd7643f8aa3e7bb18dd65beac3483bead; # via -r requirements.txt; packaging==23.2 \; --hash=sha256:048fb0e9405036518eaaf48a55953c750c11e1a1b68e0dd1a9d62ed0c092cfc5 \; --hash=sha256:8c491190033a9af7e1d931d0b5dacc2ef47509b34dd0de67ed209b5203fc88c7; # via sphinx; pygments==2.17.2 \; --hash=sha256:b27c2826c47d0f3219f29554824c30c5e8945175d888647acd804ddd04af846c \; --hash=sha256:da46cec9fd2de5be3a8a784f434e4c4ab670b4ff54d605c4c2717e9d49c4c367; # via; # furo; # sphinx; pyyaml==6.0.1 \; --hash=sha256:04ac92ad1925b2cff1db0cfebffb6ffc43457495c9b3c39d3fcae417d7125dc5 \; --hash=sha256:062582fca9fabdd2c8b54a3ef1c978d786e0f6b3a1510e0ac93ef59e0ddae2bc \; --hash=sha256:0d3304d8c0adc42be59c5f8a4d9e3d7379e6955ad754aa9d6ab7a398b59dd1df \; --hash=sha256:1635fd110e8d85d55237ab316b5b011de701ea0f29d07611174a1b42f1444741 \; --hash=sha256:184c5108a2aca3c5b3d3bf9395d50893a7ab82a38004c8f61c258d4428e80206 \; --hash=sha256:18aeb1bf9a78867dc38b259769503436b7c72f7a1f1f4c93ff9a17de54319b27 \; --hash=sha256:1d4c7e777c441b20e32f52bd377e0c409713e8bb1386e1099c2415f26e479595 \; --hash=sha256:1e2722cc9fbb45d9b87631ac70924c11d3a401b2d7f410cc0e3bbf249f2dca62 \; --hash=sha256:1fe35611261b29bd1de007,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:15891,Security,hash,hash,15891,6b5f5b7931a5aa68fc9cecc51e685ef90282f4a82f0f5e9b704ad11; # via jinja2; mdit-py-plugins==0.4.0 \; --hash=sha256:b51b3bb70691f57f974e257e367107857a93b36f322a9e6d44ca5bf28ec2def9 \; --hash=sha256:d8ab27e9aed6c38aa716819fedfde15ca275715955f8a185a8e1cf90fb1d2c1b; # via myst-parser; mdurl==0.1.2 \; --hash=sha256:84008a41e51615a49fc9966191ff91509e3c40b939176e643fd50a5c2196b8f8 \; --hash=sha256:bb413d29f5eea38f31dd4754dd7377d4465116fb207585f97bf925588687c1ba; # via markdown-it-py; myst-parser==2.0.0 \; --hash=sha256:7c36344ae39c8e740dad7fdabf5aa6fc4897a813083c6cc9990044eb93656b14 \; --hash=sha256:ea929a67a6a0b1683cdbe19b8d2e724cd7643f8aa3e7bb18dd65beac3483bead; # via -r requirements.txt; packaging==23.2 \; --hash=sha256:048fb0e9405036518eaaf48a55953c750c11e1a1b68e0dd1a9d62ed0c092cfc5 \; --hash=sha256:8c491190033a9af7e1d931d0b5dacc2ef47509b34dd0de67ed209b5203fc88c7; # via sphinx; pygments==2.17.2 \; --hash=sha256:b27c2826c47d0f3219f29554824c30c5e8945175d888647acd804ddd04af846c \; --hash=sha256:da46cec9fd2de5be3a8a784f434e4c4ab670b4ff54d605c4c2717e9d49c4c367; # via; # furo; # sphinx; pyyaml==6.0.1 \; --hash=sha256:04ac92ad1925b2cff1db0cfebffb6ffc43457495c9b3c39d3fcae417d7125dc5 \; --hash=sha256:062582fca9fabdd2c8b54a3ef1c978d786e0f6b3a1510e0ac93ef59e0ddae2bc \; --hash=sha256:0d3304d8c0adc42be59c5f8a4d9e3d7379e6955ad754aa9d6ab7a398b59dd1df \; --hash=sha256:1635fd110e8d85d55237ab316b5b011de701ea0f29d07611174a1b42f1444741 \; --hash=sha256:184c5108a2aca3c5b3d3bf9395d50893a7ab82a38004c8f61c258d4428e80206 \; --hash=sha256:18aeb1bf9a78867dc38b259769503436b7c72f7a1f1f4c93ff9a17de54319b27 \; --hash=sha256:1d4c7e777c441b20e32f52bd377e0c409713e8bb1386e1099c2415f26e479595 \; --hash=sha256:1e2722cc9fbb45d9b87631ac70924c11d3a401b2d7f410cc0e3bbf249f2dca62 \; --hash=sha256:1fe35611261b29bd1de0070f0b2f47cb6ff71fa6595c077e42bd0c419fa27b98 \; --hash=sha256:28c119d996beec18c05208a8bd78cbe4007878c6dd15091efb73a30e90539696 \; --hash=sha256:326c013efe8048858a6d312ddd31d56e468118ad4cdeda36c719bf5bb6,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:15973,Security,hash,hash,15973,6b5f5b7931a5aa68fc9cecc51e685ef90282f4a82f0f5e9b704ad11; # via jinja2; mdit-py-plugins==0.4.0 \; --hash=sha256:b51b3bb70691f57f974e257e367107857a93b36f322a9e6d44ca5bf28ec2def9 \; --hash=sha256:d8ab27e9aed6c38aa716819fedfde15ca275715955f8a185a8e1cf90fb1d2c1b; # via myst-parser; mdurl==0.1.2 \; --hash=sha256:84008a41e51615a49fc9966191ff91509e3c40b939176e643fd50a5c2196b8f8 \; --hash=sha256:bb413d29f5eea38f31dd4754dd7377d4465116fb207585f97bf925588687c1ba; # via markdown-it-py; myst-parser==2.0.0 \; --hash=sha256:7c36344ae39c8e740dad7fdabf5aa6fc4897a813083c6cc9990044eb93656b14 \; --hash=sha256:ea929a67a6a0b1683cdbe19b8d2e724cd7643f8aa3e7bb18dd65beac3483bead; # via -r requirements.txt; packaging==23.2 \; --hash=sha256:048fb0e9405036518eaaf48a55953c750c11e1a1b68e0dd1a9d62ed0c092cfc5 \; --hash=sha256:8c491190033a9af7e1d931d0b5dacc2ef47509b34dd0de67ed209b5203fc88c7; # via sphinx; pygments==2.17.2 \; --hash=sha256:b27c2826c47d0f3219f29554824c30c5e8945175d888647acd804ddd04af846c \; --hash=sha256:da46cec9fd2de5be3a8a784f434e4c4ab670b4ff54d605c4c2717e9d49c4c367; # via; # furo; # sphinx; pyyaml==6.0.1 \; --hash=sha256:04ac92ad1925b2cff1db0cfebffb6ffc43457495c9b3c39d3fcae417d7125dc5 \; --hash=sha256:062582fca9fabdd2c8b54a3ef1c978d786e0f6b3a1510e0ac93ef59e0ddae2bc \; --hash=sha256:0d3304d8c0adc42be59c5f8a4d9e3d7379e6955ad754aa9d6ab7a398b59dd1df \; --hash=sha256:1635fd110e8d85d55237ab316b5b011de701ea0f29d07611174a1b42f1444741 \; --hash=sha256:184c5108a2aca3c5b3d3bf9395d50893a7ab82a38004c8f61c258d4428e80206 \; --hash=sha256:18aeb1bf9a78867dc38b259769503436b7c72f7a1f1f4c93ff9a17de54319b27 \; --hash=sha256:1d4c7e777c441b20e32f52bd377e0c409713e8bb1386e1099c2415f26e479595 \; --hash=sha256:1e2722cc9fbb45d9b87631ac70924c11d3a401b2d7f410cc0e3bbf249f2dca62 \; --hash=sha256:1fe35611261b29bd1de0070f0b2f47cb6ff71fa6595c077e42bd0c419fa27b98 \; --hash=sha256:28c119d996beec18c05208a8bd78cbe4007878c6dd15091efb73a30e90539696 \; --hash=sha256:326c013efe8048858a6d312ddd31d56e468118ad4cdeda36c719bf5bb6,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:16095,Security,hash,hash,16095,,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:16177,Security,hash,hash,16177,,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:16259,Security,hash,hash,16259,,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:16341,Security,hash,hash,16341,,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:16423,Security,hash,hash,16423,,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:16505,Security,hash,hash,16505,,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:16587,Security,hash,hash,16587,,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt:16669,Security,hash,hash,16669,,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/requirements-hashed.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/requirements-hashed.txt
