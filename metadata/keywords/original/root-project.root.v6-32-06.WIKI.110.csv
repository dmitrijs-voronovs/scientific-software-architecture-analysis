id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://root.cern/doc/master/RInterface_8hxx_source.html:109283,Integrability,interface,interfaces,109283,"/ is filled with each one of the elements of the container. In case multiple columns of container type; 1936 /// are provided (e.g. values and weights) they must have the same length for each one of the events (but; 1937 /// possibly different lengths between events).; 1938 /// This action is *lazy*: upon invocation of this method the calculation is; 1939 /// booked but not executed. Also see RResultPtr.; 1940 ///; 1941 /// ### Example usage:; 1942 /// ~~~{.cpp}; 1943 /// // Deduce column types (this invocation needs jitting internally); 1944 /// auto myHist1 = myDf.Histo2D({""histName"", ""histTitle"", 64u, 0., 128., 32u, -4., 4.}, ""myValueX"", ""myValueY"");; 1945 /// // Explicit column types; 1946 /// auto myHist2 = myDf.Histo2D<float, float>({""histName"", ""histTitle"", 64u, 0., 128., 32u, -4., 4.}, ""myValueX"", ""myValueY"");; 1947 /// ~~~; 1948 ///; 1949 ///; 1950 /// \note Differently from other ROOT interfaces, the returned histogram is not associated to gDirectory; 1951 /// and the caller is responsible for its lifetime (in particular, a typical source of confusion is that; 1952 /// if result histograms go out of scope before the end of the program, ROOT might display a blank canvas).; 1953 template <typename V1 = RDFDetail::RInferredType, typename V2 = RDFDetail::RInferredType>; 1954 RResultPtr<::TH2D> Histo2D(const TH2DModel &model, std::string_view v1Name = """", std::string_view v2Name = """"); 1955 {; 1956 std::shared_ptr<::TH2D> h(nullptr);; 1957 {; 1958 ROOT::Internal::RDF::RIgnoreErrorLevelRAII iel(kError);; 1959 h = model.GetHistogram();; 1960 }; 1961 if (!RDFInternal::HistoUtils<::TH2D>::HasAxisLimits(*h)) {; 1962 throw std::runtime_error(""2D histograms with no axes limits are not supported yet."");; 1963 }; 1964 const std::vector<std::string_view> columnViews = {v1Name, v2Name};; 1965 const auto userColumns = RDFInternal::AtLeastOneEmptyString(columnViews); 1966 ? ColumnNames_t(); 1967 : ColumnNames_t(columnViews.begin(), columnViews.end());; 1968 return CreateActi",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:111269,Integrability,wrap,wrapped,111269,"mnViews); 1966 ? ColumnNames_t(); 1967 : ColumnNames_t(columnViews.begin(), columnViews.end());; 1968 return CreateAction<RDFInternal::ActionTags::Histo2D, V1, V2>(userColumns, h, h, fProxiedPtr);; 1969 }; 1970 ; 1971 ////////////////////////////////////////////////////////////////////////////; 1972 /// \brief Fill and return a weighted two-dimensional histogram (*lazy action*).; 1973 /// \tparam V1 The type of the column used to fill the x axis of the histogram.; 1974 /// \tparam V2 The type of the column used to fill the y axis of the histogram.; 1975 /// \tparam W The type of the column used for the weights of the histogram.; 1976 /// \param[in] model The returned histogram will be constructed using this as a model.; 1977 /// \param[in] v1Name The name of the column that will fill the x axis.; 1978 /// \param[in] v2Name The name of the column that will fill the y axis.; 1979 /// \param[in] wName The name of the column that will provide the weights.; 1980 /// \return the bidimensional histogram wrapped in a RResultPtr.; 1981 ///; 1982 /// This action is *lazy*: upon invocation of this method the calculation is; 1983 /// booked but not executed. Also see RResultPtr.; 1984 ///; 1985 /// ### Example usage:; 1986 /// ~~~{.cpp}; 1987 /// // Deduce column types (this invocation needs jitting internally); 1988 /// auto myHist1 = myDf.Histo2D({""histName"", ""histTitle"", 64u, 0., 128., 32u, -4., 4.}, ""myValueX"", ""myValueY"", ""myWeight"");; 1989 /// // Explicit column types; 1990 /// auto myHist2 = myDf.Histo2D<float, float, double>({""histName"", ""histTitle"", 64u, 0., 128., 32u, -4., 4.}, ""myValueX"", ""myValueY"", ""myWeight"");; 1991 /// ~~~; 1992 ///; 1993 /// See the documentation of the first Histo2D() overload for more details.; 1994 template <typename V1 = RDFDetail::RInferredType, typename V2 = RDFDetail::RInferredType,; 1995 typename W = RDFDetail::RInferredType>; 1996 RResultPtr<::TH2D>; 1997 Histo2D(const TH2DModel &model, std::string_view v1Name, std::string_view v2Name, s",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:114028,Integrability,wrap,wrapped,114028,"pename W>; 2015 RResultPtr<::TH2D> Histo2D(const TH2DModel &model); 2016 {; 2017 return Histo2D<V1, V2, W>(model, """", """", """");; 2018 }; 2019 ; 2020 ////////////////////////////////////////////////////////////////////////////; 2021 /// \brief Fill and return a three-dimensional histogram (*lazy action*).; 2022 /// \tparam V1 The type of the column used to fill the x axis of the histogram. Inferred if not present.; 2023 /// \tparam V2 The type of the column used to fill the y axis of the histogram. Inferred if not present.; 2024 /// \tparam V3 The type of the column used to fill the z axis of the histogram. Inferred if not present.; 2025 /// \param[in] model The returned histogram will be constructed using this as a model.; 2026 /// \param[in] v1Name The name of the column that will fill the x axis.; 2027 /// \param[in] v2Name The name of the column that will fill the y axis.; 2028 /// \param[in] v3Name The name of the column that will fill the z axis.; 2029 /// \return the tridimensional histogram wrapped in a RResultPtr.; 2030 ///; 2031 /// This action is *lazy*: upon invocation of this method the calculation is; 2032 /// booked but not executed. Also see RResultPtr.; 2033 ///; 2034 /// ### Example usage:; 2035 /// ~~~{.cpp}; 2036 /// // Deduce column types (this invocation needs jitting internally); 2037 /// auto myHist1 = myDf.Histo3D({""name"", ""title"", 64u, 0., 128., 32u, -4., 4., 8u, -2., 2.},; 2038 /// ""myValueX"", ""myValueY"", ""myValueZ"");; 2039 /// // Explicit column types; 2040 /// auto myHist2 = myDf.Histo3D<double, double, float>({""name"", ""title"", 64u, 0., 128., 32u, -4., 4., 8u, -2., 2.},; 2041 /// ""myValueX"", ""myValueY"", ""myValueZ"");; 2042 /// ~~~; 2043 ///; 2044 /// \note Differently from other ROOT interfaces, the returned histogram is not associated to gDirectory; 2045 /// and the caller is responsible for its lifetime (in particular, a typical source of confusion is that; 2046 /// if result histograms go out of scope before the end of the program, ROOT ",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:114755,Integrability,interface,interfaces,114755,"[in] v2Name The name of the column that will fill the y axis.; 2028 /// \param[in] v3Name The name of the column that will fill the z axis.; 2029 /// \return the tridimensional histogram wrapped in a RResultPtr.; 2030 ///; 2031 /// This action is *lazy*: upon invocation of this method the calculation is; 2032 /// booked but not executed. Also see RResultPtr.; 2033 ///; 2034 /// ### Example usage:; 2035 /// ~~~{.cpp}; 2036 /// // Deduce column types (this invocation needs jitting internally); 2037 /// auto myHist1 = myDf.Histo3D({""name"", ""title"", 64u, 0., 128., 32u, -4., 4., 8u, -2., 2.},; 2038 /// ""myValueX"", ""myValueY"", ""myValueZ"");; 2039 /// // Explicit column types; 2040 /// auto myHist2 = myDf.Histo3D<double, double, float>({""name"", ""title"", 64u, 0., 128., 32u, -4., 4., 8u, -2., 2.},; 2041 /// ""myValueX"", ""myValueY"", ""myValueZ"");; 2042 /// ~~~; 2043 ///; 2044 /// \note Differently from other ROOT interfaces, the returned histogram is not associated to gDirectory; 2045 /// and the caller is responsible for its lifetime (in particular, a typical source of confusion is that; 2046 /// if result histograms go out of scope before the end of the program, ROOT might display a blank canvas).; 2047 template <typename V1 = RDFDetail::RInferredType, typename V2 = RDFDetail::RInferredType,; 2048 typename V3 = RDFDetail::RInferredType>; 2049 RResultPtr<::TH3D> Histo3D(const TH3DModel &model, std::string_view v1Name = """", std::string_view v2Name = """",; 2050 std::string_view v3Name = """"); 2051 {; 2052 std::shared_ptr<::TH3D> h(nullptr);; 2053 {; 2054 ROOT::Internal::RDF::RIgnoreErrorLevelRAII iel(kError);; 2055 h = model.GetHistogram();; 2056 }; 2057 if (!RDFInternal::HistoUtils<::TH3D>::HasAxisLimits(*h)) {; 2058 throw std::runtime_error(""3D histograms with no axes limits are not supported yet."");; 2059 }; 2060 const std::vector<std::string_view> columnViews = {v1Name, v2Name, v3Name};; 2061 const auto userColumns = RDFInternal::AtLeastOneEmptyString(columnViews); 2062 ? Column",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:117093,Integrability,wrap,wrapped,117093,"////////////////////////////////////; 2068 /// \brief Fill and return a three-dimensional histogram (*lazy action*).; 2069 /// \tparam V1 The type of the column used to fill the x axis of the histogram. Inferred if not present.; 2070 /// \tparam V2 The type of the column used to fill the y axis of the histogram. Inferred if not present.; 2071 /// \tparam V3 The type of the column used to fill the z axis of the histogram. Inferred if not present.; 2072 /// \tparam W The type of the column used for the weights of the histogram. Inferred if not present.; 2073 /// \param[in] model The returned histogram will be constructed using this as a model.; 2074 /// \param[in] v1Name The name of the column that will fill the x axis.; 2075 /// \param[in] v2Name The name of the column that will fill the y axis.; 2076 /// \param[in] v3Name The name of the column that will fill the z axis.; 2077 /// \param[in] wName The name of the column that will provide the weights.; 2078 /// \return the tridimensional histogram wrapped in a RResultPtr.; 2079 ///; 2080 /// This action is *lazy*: upon invocation of this method the calculation is; 2081 /// booked but not executed. Also see RResultPtr.; 2082 ///; 2083 /// ### Example usage:; 2084 /// ~~~{.cpp}; 2085 /// // Deduce column types (this invocation needs jitting internally); 2086 /// auto myHist1 = myDf.Histo3D({""name"", ""title"", 64u, 0., 128., 32u, -4., 4., 8u, -2., 2.},; 2087 /// ""myValueX"", ""myValueY"", ""myValueZ"", ""myWeight"");; 2088 /// // Explicit column types; 2089 /// using d_t = double;; 2090 /// auto myHist2 = myDf.Histo3D<d_t, d_t, float, d_t>({""name"", ""title"", 64u, 0., 128., 32u, -4., 4., 8u, -2., 2.},; 2091 /// ""myValueX"", ""myValueY"", ""myValueZ"", ""myWeight"");; 2092 /// ~~~; 2093 ///; 2094 ///; 2095 /// See the documentation of the first Histo2D() overload for more details.; 2096 template <typename V1 = RDFDetail::RInferredType, typename V2 = RDFDetail::RInferredType,; 2097 typename V3 = RDFDetail::RInferredType, typename W = RDFDe",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:119955,Integrability,wrap,wrapped,119955,", V1, V2, V3, W>(userColumns, h, h, fProxiedPtr);; 2114 }; 2115 ; 2116 template <typename V1, typename V2, typename V3, typename W>; 2117 RResultPtr<::TH3D> Histo3D(const TH3DModel &model); 2118 {; 2119 return Histo3D<V1, V2, V3, W>(model, """", """", """", """");; 2120 }; 2121 ; 2122 ////////////////////////////////////////////////////////////////////////////; 2123 /// \brief Fill and return an N-dimensional histogram (*lazy action*).; 2124 /// \tparam FirstColumn The first type of the column the values of which are used to fill the object. Inferred if not; 2125 /// present.; 2126 /// \tparam OtherColumns A list of the other types of the columns the values of which are used to fill the; 2127 /// object.; 2128 /// \param[in] model The returned histogram will be constructed using this as a model.; 2129 /// \param[in] columnList; 2130 /// A list containing the names of the columns that will be passed when calling `Fill`.; 2131 /// (N columns for unweighted filling, or N+1 columns for weighted filling); 2132 /// \return the N-dimensional histogram wrapped in a RResultPtr.; 2133 ///; 2134 /// This action is *lazy*: upon invocation of this method the calculation is; 2135 /// booked but not executed. See RResultPtr documentation.; 2136 ///; 2137 /// ### Example usage:; 2138 /// ~~~{.cpp}; 2139 /// auto myFilledObj = myDf.HistoND<float, float, float, float>({""name"",""title"", 4,; 2140 /// {40,40,40,40}, {20.,20.,20.,20.}, {60.,60.,60.,60.}},; 2141 /// {""col0"", ""col1"", ""col2"", ""col3""});; 2142 /// ~~~; 2143 ///; 2144 template <typename FirstColumn, typename... OtherColumns> // need FirstColumn to disambiguate overloads; 2145 RResultPtr<::THnD> HistoND(const THnDModel &model, const ColumnNames_t &columnList); 2146 {; 2147 std::shared_ptr<::THnD> h(nullptr);; 2148 {; 2149 ROOT::Internal::RDF::RIgnoreErrorLevelRAII iel(kError);; 2150 h = model.GetHistogram();; 2151 ; 2152 if (int(columnList.size()) == (h->GetNdimensions() + 1)) {; 2153 h->Sumw2();; 2154 } else if (int(columnList.size()) !",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:121686,Integrability,wrap,wrapped,121686,"el &model, const ColumnNames_t &columnList); 2146 {; 2147 std::shared_ptr<::THnD> h(nullptr);; 2148 {; 2149 ROOT::Internal::RDF::RIgnoreErrorLevelRAII iel(kError);; 2150 h = model.GetHistogram();; 2151 ; 2152 if (int(columnList.size()) == (h->GetNdimensions() + 1)) {; 2153 h->Sumw2();; 2154 } else if (int(columnList.size()) != h->GetNdimensions()) {; 2155 throw std::runtime_error(""Wrong number of columns for the specified number of histogram axes."");; 2156 }; 2157 }; 2158 return CreateAction<RDFInternal::ActionTags::HistoND, FirstColumn, OtherColumns...>(columnList, h, h,; 2159 fProxiedPtr);; 2160 }; 2161 ; 2162 ////////////////////////////////////////////////////////////////////////////; 2163 /// \brief Fill and return an N-dimensional histogram (*lazy action*).; 2164 /// \param[in] model The returned histogram will be constructed using this as a model.; 2165 /// \param[in] columnList A list containing the names of the columns that will be passed when calling `Fill`; 2166 /// (N columns for unweighted filling, or N+1 columns for weighted filling); 2167 /// \return the N-dimensional histogram wrapped in a RResultPtr.; 2168 ///; 2169 /// This action is *lazy*: upon invocation of this method the calculation is; 2170 /// booked but not executed. Also see RResultPtr.; 2171 ///; 2172 /// ### Example usage:; 2173 /// ~~~{.cpp}; 2174 /// auto myFilledObj = myDf.HistoND({""name"",""title"", 4,; 2175 /// {40,40,40,40}, {20.,20.,20.,20.}, {60.,60.,60.,60.}},; 2176 /// {""col0"", ""col1"", ""col2"", ""col3""});; 2177 /// ~~~; 2178 ///; 2179 RResultPtr<::THnD> HistoND(const THnDModel &model, const ColumnNames_t &columnList); 2180 {; 2181 std::shared_ptr<::THnD> h(nullptr);; 2182 {; 2183 ROOT::Internal::RDF::RIgnoreErrorLevelRAII iel(kError);; 2184 h = model.GetHistogram();; 2185 ; 2186 if (int(columnList.size()) == (h->GetNdimensions() + 1)) {; 2187 h->Sumw2();; 2188 } else if (int(columnList.size()) != h->GetNdimensions()) {; 2189 throw std::runtime_error(""Wrong number of columns for the ",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:123249,Integrability,wrap,wrapped,123249,"llptr);; 2182 {; 2183 ROOT::Internal::RDF::RIgnoreErrorLevelRAII iel(kError);; 2184 h = model.GetHistogram();; 2185 ; 2186 if (int(columnList.size()) == (h->GetNdimensions() + 1)) {; 2187 h->Sumw2();; 2188 } else if (int(columnList.size()) != h->GetNdimensions()) {; 2189 throw std::runtime_error(""Wrong number of columns for the specified number of histogram axes."");; 2190 }; 2191 }; 2192 return CreateAction<RDFInternal::ActionTags::HistoND, RDFDetail::RInferredType>(columnList, h, h, fProxiedPtr,; 2193 columnList.size());; 2194 }; 2195 ; 2196 ////////////////////////////////////////////////////////////////////////////; 2197 /// \brief Fill and return a TGraph object (*lazy action*).; 2198 /// \tparam X The type of the column used to fill the x axis.; 2199 /// \tparam Y The type of the column used to fill the y axis.; 2200 /// \param[in] x The name of the column that will fill the x axis.; 2201 /// \param[in] y The name of the column that will fill the y axis.; 2202 /// \return the TGraph wrapped in a RResultPtr.; 2203 ///; 2204 /// Columns can be of a container type (e.g. std::vector<double>), in which case the TGraph; 2205 /// is filled with each one of the elements of the container.; 2206 /// If Multithreading is enabled, the order in which points are inserted is undefined.; 2207 /// If the Graph has to be drawn, it is suggested to the user to sort it on the x before printing.; 2208 /// A name and a title to the TGraph is given based on the input column names.; 2209 ///; 2210 /// This action is *lazy*: upon invocation of this method the calculation is; 2211 /// booked but not executed. Also see RResultPtr.; 2212 ///; 2213 /// ### Example usage:; 2214 /// ~~~{.cpp}; 2215 /// // Deduce column types (this invocation needs jitting internally); 2216 /// auto myGraph1 = myDf.Graph(""xValues"", ""yValues"");; 2217 /// // Explicit column types; 2218 /// auto myGraph2 = myDf.Graph<int, float>(""xValues"", ""yValues"");; 2219 /// ~~~; 2220 ///; 2221 /// \note Differently from other",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:124252,Integrability,interface,interfaces,124252,"ector<double>), in which case the TGraph; 2205 /// is filled with each one of the elements of the container.; 2206 /// If Multithreading is enabled, the order in which points are inserted is undefined.; 2207 /// If the Graph has to be drawn, it is suggested to the user to sort it on the x before printing.; 2208 /// A name and a title to the TGraph is given based on the input column names.; 2209 ///; 2210 /// This action is *lazy*: upon invocation of this method the calculation is; 2211 /// booked but not executed. Also see RResultPtr.; 2212 ///; 2213 /// ### Example usage:; 2214 /// ~~~{.cpp}; 2215 /// // Deduce column types (this invocation needs jitting internally); 2216 /// auto myGraph1 = myDf.Graph(""xValues"", ""yValues"");; 2217 /// // Explicit column types; 2218 /// auto myGraph2 = myDf.Graph<int, float>(""xValues"", ""yValues"");; 2219 /// ~~~; 2220 ///; 2221 /// \note Differently from other ROOT interfaces, the returned TGraph is not associated to gDirectory; 2222 /// and the caller is responsible for its lifetime (in particular, a typical source of confusion is that; 2223 /// if result histograms go out of scope before the end of the program, ROOT might display a blank canvas).; 2224 template <typename X = RDFDetail::RInferredType, typename Y = RDFDetail::RInferredType>; 2225 RResultPtr<::TGraph> Graph(std::string_view x = """", std::string_view y = """"); 2226 {; 2227 auto graph = std::make_shared<::TGraph>();; 2228 const std::vector<std::string_view> columnViews = {x, y};; 2229 const auto userColumns = RDFInternal::AtLeastOneEmptyString(columnViews); 2230 ? ColumnNames_t(); 2231 : ColumnNames_t(columnViews.begin(), columnViews.end());; 2232 ; 2233 const auto validatedColumns = GetValidatedColumnNames(2, userColumns);; 2234 ; 2235 // We build a default name and title based on the input columns; 2236 const auto g_name = validatedColumns[1] + ""_vs_"" + validatedColumns[0];; 2237 const auto g_title = validatedColumns[1] + "" vs "" + validatedColumns[0];; 2238 graph->SetNam",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:126247,Integrability,wrap,wrapped,126247,"uild a default name and title based on the input columns; 2236 const auto g_name = validatedColumns[1] + ""_vs_"" + validatedColumns[0];; 2237 const auto g_title = validatedColumns[1] + "" vs "" + validatedColumns[0];; 2238 graph->SetNameTitle(g_name.c_str(), g_title.c_str());; 2239 graph->GetXaxis()->SetTitle(validatedColumns[0].c_str());; 2240 graph->GetYaxis()->SetTitle(validatedColumns[1].c_str());; 2241 ; 2242 return CreateAction<RDFInternal::ActionTags::Graph, X, Y>(validatedColumns, graph, graph, fProxiedPtr);; 2243 }; 2244 ; 2245 ////////////////////////////////////////////////////////////////////////////; 2246 /// \brief Fill and return a TGraphAsymmErrors object (*lazy action*).; 2247 /// \param[in] x The name of the column that will fill the x axis.; 2248 /// \param[in] y The name of the column that will fill the y axis.; 2249 /// \param[in] exl The name of the column of X low errors; 2250 /// \param[in] exh The name of the column of X high errors; 2251 /// \param[in] eyl The name of the column of Y low errors; 2252 /// \param[in] eyh The name of the column of Y high errors; 2253 /// \return the TGraphAsymmErrors wrapped in a RResultPtr.; 2254 ///; 2255 /// Columns can be of a container type (e.g. std::vector<double>), in which case the graph; 2256 /// is filled with each one of the elements of the container.; 2257 /// If Multithreading is enabled, the order in which points are inserted is undefined.; 2258 ///; 2259 /// This action is *lazy*: upon invocation of this method the calculation is; 2260 /// booked but not executed. Also see RResultPtr.; 2261 ///; 2262 /// ### Example usage:; 2263 /// ~~~{.cpp}; 2264 /// // Deduce column types (this invocation needs jitting internally); 2265 /// auto myGAE1 = myDf.GraphAsymmErrors(""xValues"", ""yValues"", ""exl"", ""exh"", ""eyl"", ""eyh"");; 2266 /// // Explicit column types; 2267 /// using f = float; 2268 /// auto myGAE2 = myDf.GraphAsymmErrors<f, f, f, f, f, f>(""xValues"", ""yValues"", ""exl"", ""exh"", ""eyl"", ""eyh"");; 2269 /// ~~~",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:127165,Integrability,interface,interfaces,127165,"ymmErrors wrapped in a RResultPtr.; 2254 ///; 2255 /// Columns can be of a container type (e.g. std::vector<double>), in which case the graph; 2256 /// is filled with each one of the elements of the container.; 2257 /// If Multithreading is enabled, the order in which points are inserted is undefined.; 2258 ///; 2259 /// This action is *lazy*: upon invocation of this method the calculation is; 2260 /// booked but not executed. Also see RResultPtr.; 2261 ///; 2262 /// ### Example usage:; 2263 /// ~~~{.cpp}; 2264 /// // Deduce column types (this invocation needs jitting internally); 2265 /// auto myGAE1 = myDf.GraphAsymmErrors(""xValues"", ""yValues"", ""exl"", ""exh"", ""eyl"", ""eyh"");; 2266 /// // Explicit column types; 2267 /// using f = float; 2268 /// auto myGAE2 = myDf.GraphAsymmErrors<f, f, f, f, f, f>(""xValues"", ""yValues"", ""exl"", ""exh"", ""eyl"", ""eyh"");; 2269 /// ~~~; 2270 ///; 2271 /// \note Differently from other ROOT interfaces, the returned TGraphAsymmErrors is not associated to gDirectory; 2272 /// and the caller is responsible for its lifetime (in particular, a typical source of confusion is that; 2273 /// if result histograms go out of scope before the end of the program, ROOT might display a blank canvas).; 2274 template <typename X = RDFDetail::RInferredType, typename Y = RDFDetail::RInferredType,; 2275 typename EXL = RDFDetail::RInferredType, typename EXH = RDFDetail::RInferredType,; 2276 typename EYL = RDFDetail::RInferredType, typename EYH = RDFDetail::RInferredType>; 2277 RResultPtr<::TGraphAsymmErrors>; 2278 GraphAsymmErrors(std::string_view x = """", std::string_view y = """", std::string_view exl = """",; 2279 std::string_view exh = """", std::string_view eyl = """", std::string_view eyh = """"); 2280 {; 2281 auto graph = std::make_shared<::TGraphAsymmErrors>();; 2282 const std::vector<std::string_view> columnViews = {x, y, exl, exh, eyl, eyh};; 2283 const auto userColumns = RDFInternal::AtLeastOneEmptyString(columnViews); 2284 ? ColumnNames_t(); 2285 : ColumnNames_t(c",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:129637,Integrability,wrap,wrapped,129637,"ame.c_str(), g_title.c_str());; 2293 graph->GetXaxis()->SetTitle(validatedColumns[0].c_str());; 2294 graph->GetYaxis()->SetTitle(validatedColumns[1].c_str());; 2295 ; 2296 return CreateAction<RDFInternal::ActionTags::GraphAsymmErrors, X, Y, EXL, EXH, EYL, EYH>(validatedColumns, graph,; 2297 graph, fProxiedPtr);; 2298 }; 2299 ; 2300 ////////////////////////////////////////////////////////////////////////////; 2301 /// \brief Fill and return a one-dimensional profile (*lazy action*).; 2302 /// \tparam V1 The type of the column the values of which are used to fill the profile. Inferred if not present.; 2303 /// \tparam V2 The type of the column the values of which are used to fill the profile. Inferred if not present.; 2304 /// \param[in] model The model to be considered to build the new return value.; 2305 /// \param[in] v1Name The name of the column that will fill the x axis.; 2306 /// \param[in] v2Name The name of the column that will fill the y axis.; 2307 /// \return the monodimensional profile wrapped in a RResultPtr.; 2308 ///; 2309 /// This action is *lazy*: upon invocation of this method the calculation is; 2310 /// booked but not executed. Also see RResultPtr.; 2311 ///; 2312 /// ### Example usage:; 2313 /// ~~~{.cpp}; 2314 /// // Deduce column types (this invocation needs jitting internally); 2315 /// auto myProf1 = myDf.Profile1D({""profName"", ""profTitle"", 64u, -4., 4.}, ""xValues"", ""yValues"");; 2316 /// // Explicit column types; 2317 /// auto myProf2 = myDf.Graph<int, float>({""profName"", ""profTitle"", 64u, -4., 4.}, ""xValues"", ""yValues"");; 2318 /// ~~~; 2319 ///; 2320 /// \note Differently from other ROOT interfaces, the returned profile is not associated to gDirectory; 2321 /// and the caller is responsible for its lifetime (in particular, a typical source of confusion is that; 2322 /// if result histograms go out of scope before the end of the program, ROOT might display a blank canvas).; 2323 template <typename V1 = RDFDetail::RInferredType, typename V2 = R",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:130265,Integrability,interface,interfaces,130265,"aram[in] model The model to be considered to build the new return value.; 2305 /// \param[in] v1Name The name of the column that will fill the x axis.; 2306 /// \param[in] v2Name The name of the column that will fill the y axis.; 2307 /// \return the monodimensional profile wrapped in a RResultPtr.; 2308 ///; 2309 /// This action is *lazy*: upon invocation of this method the calculation is; 2310 /// booked but not executed. Also see RResultPtr.; 2311 ///; 2312 /// ### Example usage:; 2313 /// ~~~{.cpp}; 2314 /// // Deduce column types (this invocation needs jitting internally); 2315 /// auto myProf1 = myDf.Profile1D({""profName"", ""profTitle"", 64u, -4., 4.}, ""xValues"", ""yValues"");; 2316 /// // Explicit column types; 2317 /// auto myProf2 = myDf.Graph<int, float>({""profName"", ""profTitle"", 64u, -4., 4.}, ""xValues"", ""yValues"");; 2318 /// ~~~; 2319 ///; 2320 /// \note Differently from other ROOT interfaces, the returned profile is not associated to gDirectory; 2321 /// and the caller is responsible for its lifetime (in particular, a typical source of confusion is that; 2322 /// if result histograms go out of scope before the end of the program, ROOT might display a blank canvas).; 2323 template <typename V1 = RDFDetail::RInferredType, typename V2 = RDFDetail::RInferredType>; 2324 RResultPtr<::TProfile>; 2325 Profile1D(const TProfile1DModel &model, std::string_view v1Name = """", std::string_view v2Name = """"); 2326 {; 2327 std::shared_ptr<::TProfile> h(nullptr);; 2328 {; 2329 ROOT::Internal::RDF::RIgnoreErrorLevelRAII iel(kError);; 2330 h = model.GetProfile();; 2331 }; 2332 ; 2333 if (!RDFInternal::HistoUtils<::TProfile>::HasAxisLimits(*h)) {; 2334 throw std::runtime_error(""Profiles with no axes limits are not supported yet."");; 2335 }; 2336 const std::vector<std::string_view> columnViews = {v1Name, v2Name};; 2337 const auto userColumns = RDFInternal::AtLeastOneEmptyString(columnViews); 2338 ? ColumnNames_t(); 2339 : ColumnNames_t(columnViews.begin(), columnViews.end());; 234",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:132361,Integrability,wrap,wrapped,132361,"s.end());; 2340 return CreateAction<RDFInternal::ActionTags::Profile1D, V1, V2>(userColumns, h, h, fProxiedPtr);; 2341 }; 2342 ; 2343 ////////////////////////////////////////////////////////////////////////////; 2344 /// \brief Fill and return a one-dimensional profile (*lazy action*).; 2345 /// \tparam V1 The type of the column the values of which are used to fill the profile. Inferred if not present.; 2346 /// \tparam V2 The type of the column the values of which are used to fill the profile. Inferred if not present.; 2347 /// \tparam W The type of the column the weights of which are used to fill the profile. Inferred if not present.; 2348 /// \param[in] model The model to be considered to build the new return value.; 2349 /// \param[in] v1Name The name of the column that will fill the x axis.; 2350 /// \param[in] v2Name The name of the column that will fill the y axis.; 2351 /// \param[in] wName The name of the column that will provide the weights.; 2352 /// \return the monodimensional profile wrapped in a RResultPtr.; 2353 ///; 2354 /// This action is *lazy*: upon invocation of this method the calculation is; 2355 /// booked but not executed. Also see RResultPtr.; 2356 ///; 2357 /// ### Example usage:; 2358 /// ~~~{.cpp}; 2359 /// // Deduce column types (this invocation needs jitting internally); 2360 /// auto myProf1 = myDf.Profile1D({""profName"", ""profTitle"", 64u, -4., 4.}, ""xValues"", ""yValues"", ""weight"");; 2361 /// // Explicit column types; 2362 /// auto myProf2 = myDf.Profile1D<int, float, double>({""profName"", ""profTitle"", 64u, -4., 4.},; 2363 /// ""xValues"", ""yValues"", ""weight"");; 2364 /// ~~~; 2365 ///; 2366 /// See the first Profile1D() overload for more details.; 2367 template <typename V1 = RDFDetail::RInferredType, typename V2 = RDFDetail::RInferredType,; 2368 typename W = RDFDetail::RInferredType>; 2369 RResultPtr<::TProfile>; 2370 Profile1D(const TProfile1DModel &model, std::string_view v1Name, std::string_view v2Name, std::string_view wName); 2371 {; 2",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:135334,Integrability,wrap,wrapped,135334," W>; 2392 RResultPtr<::TProfile> Profile1D(const TProfile1DModel &model); 2393 {; 2394 return Profile1D<V1, V2, W>(model, """", """", """");; 2395 }; 2396 ; 2397 ////////////////////////////////////////////////////////////////////////////; 2398 /// \brief Fill and return a two-dimensional profile (*lazy action*).; 2399 /// \tparam V1 The type of the column used to fill the x axis of the histogram. Inferred if not present.; 2400 /// \tparam V2 The type of the column used to fill the y axis of the histogram. Inferred if not present.; 2401 /// \tparam V3 The type of the column used to fill the z axis of the histogram. Inferred if not present.; 2402 /// \param[in] model The returned profile will be constructed using this as a model.; 2403 /// \param[in] v1Name The name of the column that will fill the x axis.; 2404 /// \param[in] v2Name The name of the column that will fill the y axis.; 2405 /// \param[in] v3Name The name of the column that will fill the z axis.; 2406 /// \return the bidimensional profile wrapped in a RResultPtr.; 2407 ///; 2408 /// This action is *lazy*: upon invocation of this method the calculation is; 2409 /// booked but not executed. Also see RResultPtr.; 2410 ///; 2411 /// ### Example usage:; 2412 /// ~~~{.cpp}; 2413 /// // Deduce column types (this invocation needs jitting internally); 2414 /// auto myProf1 = myDf.Profile2D({""profName"", ""profTitle"", 40, -4, 4, 40, -4, 4, 0, 20},; 2415 /// ""xValues"", ""yValues"", ""zValues"");; 2416 /// // Explicit column types; 2417 /// auto myProf2 = myDf.Profile2D<int, float, double>({""profName"", ""profTitle"", 40, -4, 4, 40, -4, 4, 0, 20},; 2418 /// ""xValues"", ""yValues"", ""zValues"");; 2419 /// ~~~; 2420 ///; 2421 /// \note Differently from other ROOT interfaces, the returned profile is not associated to gDirectory; 2422 /// and the caller is responsible for its lifetime (in particular, a typical source of confusion is that; 2423 /// if result histograms go out of scope before the end of the program, ROOT might display a bla",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:136046,Integrability,interface,interfaces,136046,"e of the column that will fill the x axis.; 2404 /// \param[in] v2Name The name of the column that will fill the y axis.; 2405 /// \param[in] v3Name The name of the column that will fill the z axis.; 2406 /// \return the bidimensional profile wrapped in a RResultPtr.; 2407 ///; 2408 /// This action is *lazy*: upon invocation of this method the calculation is; 2409 /// booked but not executed. Also see RResultPtr.; 2410 ///; 2411 /// ### Example usage:; 2412 /// ~~~{.cpp}; 2413 /// // Deduce column types (this invocation needs jitting internally); 2414 /// auto myProf1 = myDf.Profile2D({""profName"", ""profTitle"", 40, -4, 4, 40, -4, 4, 0, 20},; 2415 /// ""xValues"", ""yValues"", ""zValues"");; 2416 /// // Explicit column types; 2417 /// auto myProf2 = myDf.Profile2D<int, float, double>({""profName"", ""profTitle"", 40, -4, 4, 40, -4, 4, 0, 20},; 2418 /// ""xValues"", ""yValues"", ""zValues"");; 2419 /// ~~~; 2420 ///; 2421 /// \note Differently from other ROOT interfaces, the returned profile is not associated to gDirectory; 2422 /// and the caller is responsible for its lifetime (in particular, a typical source of confusion is that; 2423 /// if result histograms go out of scope before the end of the program, ROOT might display a blank canvas).; 2424 template <typename V1 = RDFDetail::RInferredType, typename V2 = RDFDetail::RInferredType,; 2425 typename V3 = RDFDetail::RInferredType>; 2426 RResultPtr<::TProfile2D> Profile2D(const TProfile2DModel &model, std::string_view v1Name = """",; 2427 std::string_view v2Name = """", std::string_view v3Name = """"); 2428 {; 2429 std::shared_ptr<::TProfile2D> h(nullptr);; 2430 {; 2431 ROOT::Internal::RDF::RIgnoreErrorLevelRAII iel(kError);; 2432 h = model.GetProfile();; 2433 }; 2434 ; 2435 if (!RDFInternal::HistoUtils<::TProfile2D>::HasAxisLimits(*h)) {; 2436 throw std::runtime_error(""2D profiles with no axes limits are not supported yet."");; 2437 }; 2438 const std::vector<std::string_view> columnViews = {v1Name, v2Name, v3Name};; 2439 const auto userColu",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:138406,Integrability,wrap,wrapped,138406,"//////////////////////////////////////////; 2446 /// \brief Fill and return a two-dimensional profile (*lazy action*).; 2447 /// \tparam V1 The type of the column used to fill the x axis of the histogram. Inferred if not present.; 2448 /// \tparam V2 The type of the column used to fill the y axis of the histogram. Inferred if not present.; 2449 /// \tparam V3 The type of the column used to fill the z axis of the histogram. Inferred if not present.; 2450 /// \tparam W The type of the column used for the weights of the histogram. Inferred if not present.; 2451 /// \param[in] model The returned histogram will be constructed using this as a model.; 2452 /// \param[in] v1Name The name of the column that will fill the x axis.; 2453 /// \param[in] v2Name The name of the column that will fill the y axis.; 2454 /// \param[in] v3Name The name of the column that will fill the z axis.; 2455 /// \param[in] wName The name of the column that will provide the weights.; 2456 /// \return the bidimensional profile wrapped in a RResultPtr.; 2457 ///; 2458 /// This action is *lazy*: upon invocation of this method the calculation is; 2459 /// booked but not executed. Also see RResultPtr.; 2460 ///; 2461 /// ### Example usage:; 2462 /// ~~~{.cpp}; 2463 /// // Deduce column types (this invocation needs jitting internally); 2464 /// auto myProf1 = myDf.Profile2D({""profName"", ""profTitle"", 40, -4, 4, 40, -4, 4, 0, 20},; 2465 /// ""xValues"", ""yValues"", ""zValues"", ""weight"");; 2466 /// // Explicit column types; 2467 /// auto myProf2 = myDf.Profile2D<int, float, double, int>({""profName"", ""profTitle"", 40, -4, 4, 40, -4, 4, 0, 20},; 2468 /// ""xValues"", ""yValues"", ""zValues"", ""weight"");; 2469 /// ~~~; 2470 ///; 2471 /// See the first Profile2D() overload for more details.; 2472 template <typename V1 = RDFDetail::RInferredType, typename V2 = RDFDetail::RInferredType,; 2473 typename V3 = RDFDetail::RInferredType, typename W = RDFDetail::RInferredType>; 2474 RResultPtr<::TProfile2D> Profile2D(const TProfi",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:142067,Integrability,wrap,wrapped,142067,"/ (these types can also be passed as template parameters to this method); 2508 /// - a `Merge` method with signature `Merge(TCollection *)` or `Merge(const std::vector<T *>&)` that merges the; 2509 /// objects passed as argument into the object on which `Merge` was called (an analogous of TH1::Merge). Note that; 2510 /// if the signature that takes a `TCollection*` is used, then T must inherit from TObject (to allow insertion in; 2511 /// the TCollection*).; 2512 ///; 2513 /// \tparam FirstColumn The first type of the column the values of which are used to fill the object. Inferred together with OtherColumns if not present.; 2514 /// \tparam OtherColumns A list of the other types of the columns the values of which are used to fill the object.; 2515 /// \tparam T The type of the object to fill. Automatically deduced.; 2516 /// \param[in] model The model to be considered to build the new return value.; 2517 /// \param[in] columnList A list containing the names of the columns that will be passed when calling `Fill`; 2518 /// \return the filled object wrapped in a RResultPtr.; 2519 ///; 2520 /// The user gives up ownership of the model object.; 2521 /// The list of column names to be used for filling must always be specified.; 2522 /// This action is *lazy*: upon invocation of this method the calculation is booked but not executed.; 2523 /// Also see RResultPtr.; 2524 ///; 2525 /// ### Example usage:; 2526 /// ~~~{.cpp}; 2527 /// MyClass obj;; 2528 /// // Deduce column types (this invocation needs jitting internally, and in this case; 2529 /// // MyClass needs to be known to the interpreter); 2530 /// auto myFilledObj = myDf.Fill(obj, {""col0"", ""col1""});; 2531 /// // explicit column types; 2532 /// auto myFilledObj = myDf.Fill<float, float>(obj, {""col0"", ""col1""});; 2533 /// ~~~; 2534 ///; 2535 template <typename FirstColumn = RDFDetail::RInferredType, typename... OtherColumns, typename T>; 2536 RResultPtr<std::decay_t<T>> Fill(T &&model, const ColumnNames_t &columnList);",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:143764,Integrability,wrap,wrapped,143764,"ll<float, float>(obj, {""col0"", ""col1""});; 2533 /// ~~~; 2534 ///; 2535 template <typename FirstColumn = RDFDetail::RInferredType, typename... OtherColumns, typename T>; 2536 RResultPtr<std::decay_t<T>> Fill(T &&model, const ColumnNames_t &columnList); 2537 {; 2538 auto h = std::make_shared<std::decay_t<T>>(std::forward<T>(model));; 2539 if (!RDFInternal::HistoUtils<T>::HasAxisLimits(*h)) {; 2540 throw std::runtime_error(""The absence of axes limits is not supported yet."");; 2541 }; 2542 return CreateAction<RDFInternal::ActionTags::Fill, FirstColumn, OtherColumns...>(columnList, h, h, fProxiedPtr,; 2543 columnList.size());; 2544 }; 2545 ; 2546 ////////////////////////////////////////////////////////////////////////////; 2547 /// \brief Return a TStatistic object, filled once per event (*lazy action*).; 2548 ///; 2549 /// \tparam V The type of the value column; 2550 /// \param[in] value The name of the column with the values to fill the statistics with.; 2551 /// \return the filled TStatistic object wrapped in a RResultPtr.; 2552 ///; 2553 /// ### Example usage:; 2554 /// ~~~{.cpp}; 2555 /// // Deduce column type (this invocation needs jitting internally); 2556 /// auto stats0 = myDf.Stats(""values"");; 2557 /// // Explicit column type; 2558 /// auto stats1 = myDf.Stats<float>(""values"");; 2559 /// ~~~; 2560 ///; 2561 template <typename V = RDFDetail::RInferredType>; 2562 RResultPtr<TStatistic> Stats(std::string_view value = """"); 2563 {; 2564 ColumnNames_t columns;; 2565 if (!value.empty()) {; 2566 columns.emplace_back(std::string(value));; 2567 }; 2568 const auto validColumnNames = GetValidatedColumnNames(1, columns);; 2569 if (std::is_same<V, RDFDetail::RInferredType>::value) {; 2570 return Fill(TStatistic(), validColumnNames);; 2571 } else {; 2572 return Fill<V>(TStatistic(), validColumnNames);; 2573 }; 2574 }; 2575 ; 2576 ////////////////////////////////////////////////////////////////////////////; 2577 /// \brief Return a TStatistic object, filled once per event (*la",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:145113,Integrability,wrap,wrapped,145113,"ame V = RDFDetail::RInferredType>; 2562 RResultPtr<TStatistic> Stats(std::string_view value = """"); 2563 {; 2564 ColumnNames_t columns;; 2565 if (!value.empty()) {; 2566 columns.emplace_back(std::string(value));; 2567 }; 2568 const auto validColumnNames = GetValidatedColumnNames(1, columns);; 2569 if (std::is_same<V, RDFDetail::RInferredType>::value) {; 2570 return Fill(TStatistic(), validColumnNames);; 2571 } else {; 2572 return Fill<V>(TStatistic(), validColumnNames);; 2573 }; 2574 }; 2575 ; 2576 ////////////////////////////////////////////////////////////////////////////; 2577 /// \brief Return a TStatistic object, filled once per event (*lazy action*).; 2578 ///; 2579 /// \tparam V The type of the value column; 2580 /// \tparam W The type of the weight column; 2581 /// \param[in] value The name of the column with the values to fill the statistics with.; 2582 /// \param[in] weight The name of the column with the weights to fill the statistics with.; 2583 /// \return the filled TStatistic object wrapped in a RResultPtr.; 2584 ///; 2585 /// ### Example usage:; 2586 /// ~~~{.cpp}; 2587 /// // Deduce column types (this invocation needs jitting internally); 2588 /// auto stats0 = myDf.Stats(""values"", ""weights"");; 2589 /// // Explicit column types; 2590 /// auto stats1 = myDf.Stats<int, float>(""values"", ""weights"");; 2591 /// ~~~; 2592 ///; 2593 template <typename V = RDFDetail::RInferredType, typename W = RDFDetail::RInferredType>; 2594 RResultPtr<TStatistic> Stats(std::string_view value, std::string_view weight); 2595 {; 2596 ColumnNames_t columns{std::string(value), std::string(weight)};; 2597 constexpr auto vIsInferred = std::is_same<V, RDFDetail::RInferredType>::value;; 2598 constexpr auto wIsInferred = std::is_same<W, RDFDetail::RInferredType>::value;; 2599 const auto validColumnNames = GetValidatedColumnNames(2, columns);; 2600 // We have 3 cases:; 2601 // 1. Both types are inferred: we use Fill and let the jit kick in.; 2602 // 2. One of the two types is explicit",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:147161,Integrability,wrap,wrapped,147161,"s not supported.; 2603 // 3. Both types are explicit: we invoke the fully compiled Fill method.; 2604 if (vIsInferred && wIsInferred) {; 2605 return Fill(TStatistic(), validColumnNames);; 2606 } else if (vIsInferred != wIsInferred) {; 2607 std::string error(""The "");; 2608 error += vIsInferred ? ""value "" : ""weight "";; 2609 error += ""column type is explicit, while the "";; 2610 error += vIsInferred ? ""weight "" : ""value "";; 2611 error += "" is specified to be inferred. This case is not supported: please specify both types or none."";; 2612 throw std::runtime_error(error);; 2613 } else {; 2614 return Fill<V, W>(TStatistic(), validColumnNames);; 2615 }; 2616 }; 2617 ; 2618 ////////////////////////////////////////////////////////////////////////////; 2619 /// \brief Return the minimum of processed column values (*lazy action*).; 2620 /// \tparam T The type of the branch/column.; 2621 /// \param[in] columnName The name of the branch/column to be treated.; 2622 /// \return the minimum value of the selected column wrapped in a RResultPtr.; 2623 ///; 2624 /// If T is not specified, RDataFrame will infer it from the data and just-in-time compile the correct; 2625 /// template specialization of this method.; 2626 /// If the type of the column is inferred, the return type is `double`, the type of the column otherwise.; 2627 ///; 2628 /// This action is *lazy*: upon invocation of this method the calculation is; 2629 /// booked but not executed. Also see RResultPtr.; 2630 ///; 2631 /// ### Example usage:; 2632 /// ~~~{.cpp}; 2633 /// // Deduce column type (this invocation needs jitting internally); 2634 /// auto minVal0 = myDf.Min(""values"");; 2635 /// // Explicit column type; 2636 /// auto minVal1 = myDf.Min<double>(""values"");; 2637 /// ~~~; 2638 ///; 2639 template <typename T = RDFDetail::RInferredType>; 2640 RResultPtr<RDFDetail::MinReturnType_t<T>> Min(std::string_view columnName = """"); 2641 {; 2642 const auto userColumns = columnName.empty() ? ColumnNames_t() : ColumnNames_t({std",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:148771,Integrability,wrap,wrapped,148771,"34 /// auto minVal0 = myDf.Min(""values"");; 2635 /// // Explicit column type; 2636 /// auto minVal1 = myDf.Min<double>(""values"");; 2637 /// ~~~; 2638 ///; 2639 template <typename T = RDFDetail::RInferredType>; 2640 RResultPtr<RDFDetail::MinReturnType_t<T>> Min(std::string_view columnName = """"); 2641 {; 2642 const auto userColumns = columnName.empty() ? ColumnNames_t() : ColumnNames_t({std::string(columnName)});; 2643 using RetType_t = RDFDetail::MinReturnType_t<T>;; 2644 auto minV = std::make_shared<RetType_t>(std::numeric_limits<RetType_t>::max());; 2645 return CreateAction<RDFInternal::ActionTags::Min, T>(userColumns, minV, minV, fProxiedPtr);; 2646 }; 2647 ; 2648 ////////////////////////////////////////////////////////////////////////////; 2649 /// \brief Return the maximum of processed column values (*lazy action*).; 2650 /// \tparam T The type of the branch/column.; 2651 /// \param[in] columnName The name of the branch/column to be treated.; 2652 /// \return the maximum value of the selected column wrapped in a RResultPtr.; 2653 ///; 2654 /// If T is not specified, RDataFrame will infer it from the data and just-in-time compile the correct; 2655 /// template specialization of this method.; 2656 /// If the type of the column is inferred, the return type is `double`, the type of the column otherwise.; 2657 ///; 2658 /// This action is *lazy*: upon invocation of this method the calculation is; 2659 /// booked but not executed. Also see RResultPtr.; 2660 ///; 2661 /// ### Example usage:; 2662 /// ~~~{.cpp}; 2663 /// // Deduce column type (this invocation needs jitting internally); 2664 /// auto maxVal0 = myDf.Max(""values"");; 2665 /// // Explicit column type; 2666 /// auto maxVal1 = myDf.Max<double>(""values"");; 2667 /// ~~~; 2668 ///; 2669 template <typename T = RDFDetail::RInferredType>; 2670 RResultPtr<RDFDetail::MaxReturnType_t<T>> Max(std::string_view columnName = """"); 2671 {; 2672 const auto userColumns = columnName.empty() ? ColumnNames_t() : ColumnNames_t({std",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:150378,Integrability,wrap,wrapped,150378,"2664 /// auto maxVal0 = myDf.Max(""values"");; 2665 /// // Explicit column type; 2666 /// auto maxVal1 = myDf.Max<double>(""values"");; 2667 /// ~~~; 2668 ///; 2669 template <typename T = RDFDetail::RInferredType>; 2670 RResultPtr<RDFDetail::MaxReturnType_t<T>> Max(std::string_view columnName = """"); 2671 {; 2672 const auto userColumns = columnName.empty() ? ColumnNames_t() : ColumnNames_t({std::string(columnName)});; 2673 using RetType_t = RDFDetail::MaxReturnType_t<T>;; 2674 auto maxV = std::make_shared<RetType_t>(std::numeric_limits<RetType_t>::lowest());; 2675 return CreateAction<RDFInternal::ActionTags::Max, T>(userColumns, maxV, maxV, fProxiedPtr);; 2676 }; 2677 ; 2678 ////////////////////////////////////////////////////////////////////////////; 2679 /// \brief Return the mean of processed column values (*lazy action*).; 2680 /// \tparam T The type of the branch/column.; 2681 /// \param[in] columnName The name of the branch/column to be treated.; 2682 /// \return the mean value of the selected column wrapped in a RResultPtr.; 2683 ///; 2684 /// If T is not specified, RDataFrame will infer it from the data and just-in-time compile the correct; 2685 /// template specialization of this method.; 2686 ///; 2687 /// This action is *lazy*: upon invocation of this method the calculation is; 2688 /// booked but not executed. Also see RResultPtr.; 2689 ///; 2690 /// ### Example usage:; 2691 /// ~~~{.cpp}; 2692 /// // Deduce column type (this invocation needs jitting internally); 2693 /// auto meanVal0 = myDf.Mean(""values"");; 2694 /// // Explicit column type; 2695 /// auto meanVal1 = myDf.Mean<double>(""values"");; 2696 /// ~~~; 2697 ///; 2698 template <typename T = RDFDetail::RInferredType>; 2699 RResultPtr<double> Mean(std::string_view columnName = """"); 2700 {; 2701 const auto userColumns = columnName.empty() ? ColumnNames_t() : ColumnNames_t({std::string(columnName)});; 2702 auto meanV = std::make_shared<double>(0);; 2703 return CreateAction<RDFInternal::ActionTags::Mean, T>(",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:151799,Integrability,wrap,wrapped,151799,"cpp}; 2692 /// // Deduce column type (this invocation needs jitting internally); 2693 /// auto meanVal0 = myDf.Mean(""values"");; 2694 /// // Explicit column type; 2695 /// auto meanVal1 = myDf.Mean<double>(""values"");; 2696 /// ~~~; 2697 ///; 2698 template <typename T = RDFDetail::RInferredType>; 2699 RResultPtr<double> Mean(std::string_view columnName = """"); 2700 {; 2701 const auto userColumns = columnName.empty() ? ColumnNames_t() : ColumnNames_t({std::string(columnName)});; 2702 auto meanV = std::make_shared<double>(0);; 2703 return CreateAction<RDFInternal::ActionTags::Mean, T>(userColumns, meanV, meanV, fProxiedPtr);; 2704 }; 2705 ; 2706 ////////////////////////////////////////////////////////////////////////////; 2707 /// \brief Return the unbiased standard deviation of processed column values (*lazy action*).; 2708 /// \tparam T The type of the branch/column.; 2709 /// \param[in] columnName The name of the branch/column to be treated.; 2710 /// \return the standard deviation value of the selected column wrapped in a RResultPtr.; 2711 ///; 2712 /// If T is not specified, RDataFrame will infer it from the data and just-in-time compile the correct; 2713 /// template specialization of this method.; 2714 ///; 2715 /// This action is *lazy*: upon invocation of this method the calculation is; 2716 /// booked but not executed. Also see RResultPtr.; 2717 ///; 2718 /// ### Example usage:; 2719 /// ~~~{.cpp}; 2720 /// // Deduce column type (this invocation needs jitting internally); 2721 /// auto stdDev0 = myDf.StdDev(""values"");; 2722 /// // Explicit column type; 2723 /// auto stdDev1 = myDf.StdDev<double>(""values"");; 2724 /// ~~~; 2725 ///; 2726 template <typename T = RDFDetail::RInferredType>; 2727 RResultPtr<double> StdDev(std::string_view columnName = """"); 2728 {; 2729 const auto userColumns = columnName.empty() ? ColumnNames_t() : ColumnNames_t({std::string(columnName)});; 2730 auto stdDeviationV = std::make_shared<double>(0);; 2731 return CreateAction<RDFInternal::Ac",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:153349,Integrability,wrap,wrapped,153349," Explicit column type; 2723 /// auto stdDev1 = myDf.StdDev<double>(""values"");; 2724 /// ~~~; 2725 ///; 2726 template <typename T = RDFDetail::RInferredType>; 2727 RResultPtr<double> StdDev(std::string_view columnName = """"); 2728 {; 2729 const auto userColumns = columnName.empty() ? ColumnNames_t() : ColumnNames_t({std::string(columnName)});; 2730 auto stdDeviationV = std::make_shared<double>(0);; 2731 return CreateAction<RDFInternal::ActionTags::StdDev, T>(userColumns, stdDeviationV, stdDeviationV, fProxiedPtr);; 2732 }; 2733 ; 2734 // clang-format off; 2735 ////////////////////////////////////////////////////////////////////////////; 2736 /// \brief Return the sum of processed column values (*lazy action*).; 2737 /// \tparam T The type of the branch/column.; 2738 /// \param[in] columnName The name of the branch/column.; 2739 /// \param[in] initValue Optional initial value for the sum. If not present, the column values must be default-constructible.; 2740 /// \return the sum of the selected column wrapped in a RResultPtr.; 2741 ///; 2742 /// If T is not specified, RDataFrame will infer it from the data and just-in-time compile the correct; 2743 /// template specialization of this method.; 2744 /// If the type of the column is inferred, the return type is `double`, the type of the column otherwise.; 2745 ///; 2746 /// This action is *lazy*: upon invocation of this method the calculation is; 2747 /// booked but not executed. Also see RResultPtr.; 2748 ///; 2749 /// ### Example usage:; 2750 /// ~~~{.cpp}; 2751 /// // Deduce column type (this invocation needs jitting internally); 2752 /// auto sum0 = myDf.Sum(""values"");; 2753 /// // Explicit column type; 2754 /// auto sum1 = myDf.Sum<double>(""values"");; 2755 /// ~~~; 2756 ///; 2757 template <typename T = RDFDetail::RInferredType>; 2758 RResultPtr<RDFDetail::SumReturnType_t<T>>; 2759 Sum(std::string_view columnName = """",; 2760 const RDFDetail::SumReturnType_t<T> &initValue = RDFDetail::SumReturnType_t<T>{}); 2761 {; 2762",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:154846,Integrability,wrap,wrapped,154846,"Example usage:; 2750 /// ~~~{.cpp}; 2751 /// // Deduce column type (this invocation needs jitting internally); 2752 /// auto sum0 = myDf.Sum(""values"");; 2753 /// // Explicit column type; 2754 /// auto sum1 = myDf.Sum<double>(""values"");; 2755 /// ~~~; 2756 ///; 2757 template <typename T = RDFDetail::RInferredType>; 2758 RResultPtr<RDFDetail::SumReturnType_t<T>>; 2759 Sum(std::string_view columnName = """",; 2760 const RDFDetail::SumReturnType_t<T> &initValue = RDFDetail::SumReturnType_t<T>{}); 2761 {; 2762 const auto userColumns = columnName.empty() ? ColumnNames_t() : ColumnNames_t({std::string(columnName)});; 2763 auto sumV = std::make_shared<RDFDetail::SumReturnType_t<T>>(initValue);; 2764 return CreateAction<RDFInternal::ActionTags::Sum, T>(userColumns, sumV, sumV, fProxiedPtr);; 2765 }; 2766 // clang-format on; 2767 ; 2768 ////////////////////////////////////////////////////////////////////////////; 2769 /// \brief Gather filtering statistics.; 2770 /// \return the resulting `RCutFlowReport` instance wrapped in a RResultPtr.; 2771 ///; 2772 /// Calling `Report` on the main `RDataFrame` object gathers stats for; 2773 /// all named filters in the call graph. Calling this method on a; 2774 /// stored chain state (i.e. a graph node different from the first) gathers; 2775 /// the stats for all named filters in the chain section between the original; 2776 /// `RDataFrame` and that node (included). Stats are gathered in the same; 2777 /// order as the named filters have been added to the graph.; 2778 /// A RResultPtr<RCutFlowReport> is returned to allow inspection of the; 2779 /// effects cuts had.; 2780 ///; 2781 /// This action is *lazy*: upon invocation of; 2782 /// this method the calculation is booked but not executed. See RResultPtr; 2783 /// documentation.; 2784 ///; 2785 /// ### Example usage:; 2786 /// ~~~{.cpp}; 2787 /// auto filtered = d.Filter(cut1, {""b1""}, ""Cut1"").Filter(cut2, {""b2""}, ""Cut2"");; 2788 /// auto cutReport = filtered3.Report();; 2789 /// cutReport",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:158884,Integrability,wrap,wrapped,158884,"///////////////; 2831 /// \brief Execute a user-defined accumulation operation on the processed column values in each processing slot.; 2832 /// \tparam F The type of the aggregator callable. Automatically deduced.; 2833 /// \tparam U The type of the aggregator variable. Must be default-constructible, copy-constructible and copy-assignable. Automatically deduced.; 2834 /// \tparam T The type of the column to apply the reduction to. Automatically deduced.; 2835 /// \param[in] aggregator A callable with signature `U(U,T)` or `void(U&,T)`, where T is the type of the column, U is the type of the aggregator variable; 2836 /// \param[in] merger A callable with signature `U(U,U)` or `void(std::vector<U>&)` used to merge the results of the accumulations of each thread; 2837 /// \param[in] columnName The column to be aggregated. If omitted, the first default column is used instead.; 2838 /// \param[in] aggIdentity The aggregator variable of each thread is initialized to this value (or is default-constructed if the parameter is omitted); 2839 /// \return the result of the aggregation wrapped in a RResultPtr.; 2840 ///; 2841 /// An aggregator callable takes two values, an aggregator variable and a column value. The aggregator variable is; 2842 /// initialized to aggIdentity or default-constructed if aggIdentity is omitted.; 2843 /// This action calls the aggregator callable for each processed entry, passing in the aggregator variable and; 2844 /// the value of the column columnName.; 2845 /// If the signature is `U(U,T)` the aggregator variable is then copy-assigned the result of the execution of the callable.; 2846 /// Otherwise the signature of aggregator must be `void(U&,T)`.; 2847 ///; 2848 /// The merger callable is used to merge the partial accumulation results of each processing thread. It is only called in multi-thread executions.; 2849 /// If its signature is `U(U,U)` the aggregator variables of each thread are merged two by two.; 2850 /// If its signature is `void(st",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:163324,Integrability,wrap,wrapped,163324,"g-format off; 2897 ////////////////////////////////////////////////////////////////////////////; 2898 /// \brief Execute a user-defined accumulation operation on the processed column values in each processing slot.; 2899 /// \tparam F The type of the aggregator callable. Automatically deduced.; 2900 /// \tparam U The type of the aggregator variable. Must be default-constructible, copy-constructible and copy-assignable. Automatically deduced.; 2901 /// \tparam T The type of the column to apply the reduction to. Automatically deduced.; 2902 /// \param[in] aggregator A callable with signature `U(U,T)` or `void(U,T)`, where T is the type of the column, U is the type of the aggregator variable; 2903 /// \param[in] merger A callable with signature `U(U,U)` or `void(std::vector<U>&)` used to merge the results of the accumulations of each thread; 2904 /// \param[in] columnName The column to be aggregated. If omitted, the first default column is used instead.; 2905 /// \return the result of the aggregation wrapped in a RResultPtr.; 2906 ///; 2907 /// See previous Aggregate overload for more information.; 2908 // clang-format on; 2909 template <typename AccFun, typename MergeFun, typename R = typename TTraits::CallableTraits<AccFun>::ret_type,; 2910 typename ArgTypes = typename TTraits::CallableTraits<AccFun>::arg_types,; 2911 typename U = TTraits::TakeFirstParameter_t<ArgTypes>,; 2912 typename T = TTraits::TakeFirstParameter_t<TTraits::RemoveFirstParameter_t<ArgTypes>>>; 2913 RResultPtr<U> Aggregate(AccFun aggregator, MergeFun merger, std::string_view columnName = """"); 2914 {; 2915 static_assert(; 2916 std::is_default_constructible<U>::value,; 2917 ""aggregated object cannot be default-constructed. Please provide an initialisation value (aggIdentity)"");; 2918 return Aggregate(std::move(aggregator), std::move(merger), columnName, U());; 2919 }; 2920 ; 2921 // clang-format off; 2922 ////////////////////////////////////////////////////////////////////////////; 2923 /// \brief Boo",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:164692,Integrability,interface,interface,164692,"t<ArgTypes>,; 2912 typename T = TTraits::TakeFirstParameter_t<TTraits::RemoveFirstParameter_t<ArgTypes>>>; 2913 RResultPtr<U> Aggregate(AccFun aggregator, MergeFun merger, std::string_view columnName = """"); 2914 {; 2915 static_assert(; 2916 std::is_default_constructible<U>::value,; 2917 ""aggregated object cannot be default-constructed. Please provide an initialisation value (aggIdentity)"");; 2918 return Aggregate(std::move(aggregator), std::move(merger), columnName, U());; 2919 }; 2920 ; 2921 // clang-format off; 2922 ////////////////////////////////////////////////////////////////////////////; 2923 /// \brief Book execution of a custom action using a user-defined helper object.; 2924 /// \tparam FirstColumn The type of the first column used by this action. Inferred together with OtherColumns if not present.; 2925 /// \tparam OtherColumns A list of the types of the other columns used by this action; 2926 /// \tparam Helper The type of the user-defined helper. See below for the required interface it should expose.; 2927 /// \param[in] helper The Action Helper to be scheduled.; 2928 /// \param[in] columns The names of the columns on which the helper acts.; 2929 /// \return the result of the helper wrapped in a RResultPtr.; 2930 ///; 2931 /// This method books a custom action for execution. The behavior of the action is completely dependent on the; 2932 /// Helper object provided by the caller. The required interface for the helper is described below (more; 2933 /// methods that the ones required can be present, e.g. a constructor that takes the number of worker threads is usually useful):; 2934 ///; 2935 /// ### Mandatory interface; 2936 ///; 2937 /// * `Helper` must publicly inherit from `ROOT::Detail::RDF::RActionImpl<Helper>`; 2938 /// * `Helper::Result_t`: public alias for the type of the result of this action helper. `Result_t` must be default-constructible.; 2939 /// * `Helper(Helper &&)`: a move-constructor is required. Copy-constructors are discouraged.; 2940 /",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:164906,Integrability,wrap,wrapped,164906,"; 2914 {; 2915 static_assert(; 2916 std::is_default_constructible<U>::value,; 2917 ""aggregated object cannot be default-constructed. Please provide an initialisation value (aggIdentity)"");; 2918 return Aggregate(std::move(aggregator), std::move(merger), columnName, U());; 2919 }; 2920 ; 2921 // clang-format off; 2922 ////////////////////////////////////////////////////////////////////////////; 2923 /// \brief Book execution of a custom action using a user-defined helper object.; 2924 /// \tparam FirstColumn The type of the first column used by this action. Inferred together with OtherColumns if not present.; 2925 /// \tparam OtherColumns A list of the types of the other columns used by this action; 2926 /// \tparam Helper The type of the user-defined helper. See below for the required interface it should expose.; 2927 /// \param[in] helper The Action Helper to be scheduled.; 2928 /// \param[in] columns The names of the columns on which the helper acts.; 2929 /// \return the result of the helper wrapped in a RResultPtr.; 2930 ///; 2931 /// This method books a custom action for execution. The behavior of the action is completely dependent on the; 2932 /// Helper object provided by the caller. The required interface for the helper is described below (more; 2933 /// methods that the ones required can be present, e.g. a constructor that takes the number of worker threads is usually useful):; 2934 ///; 2935 /// ### Mandatory interface; 2936 ///; 2937 /// * `Helper` must publicly inherit from `ROOT::Detail::RDF::RActionImpl<Helper>`; 2938 /// * `Helper::Result_t`: public alias for the type of the result of this action helper. `Result_t` must be default-constructible.; 2939 /// * `Helper(Helper &&)`: a move-constructor is required. Copy-constructors are discouraged.; 2940 /// * `std::shared_ptr<Result_t> GetResultPtr() const`: return a shared_ptr to the result of this action (of type; 2941 /// Result_t). The RResultPtr returned by Book will point to this object. Note that t",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:165041,Integrability,depend,dependent,165041,"alisation value (aggIdentity)"");; 2918 return Aggregate(std::move(aggregator), std::move(merger), columnName, U());; 2919 }; 2920 ; 2921 // clang-format off; 2922 ////////////////////////////////////////////////////////////////////////////; 2923 /// \brief Book execution of a custom action using a user-defined helper object.; 2924 /// \tparam FirstColumn The type of the first column used by this action. Inferred together with OtherColumns if not present.; 2925 /// \tparam OtherColumns A list of the types of the other columns used by this action; 2926 /// \tparam Helper The type of the user-defined helper. See below for the required interface it should expose.; 2927 /// \param[in] helper The Action Helper to be scheduled.; 2928 /// \param[in] columns The names of the columns on which the helper acts.; 2929 /// \return the result of the helper wrapped in a RResultPtr.; 2930 ///; 2931 /// This method books a custom action for execution. The behavior of the action is completely dependent on the; 2932 /// Helper object provided by the caller. The required interface for the helper is described below (more; 2933 /// methods that the ones required can be present, e.g. a constructor that takes the number of worker threads is usually useful):; 2934 ///; 2935 /// ### Mandatory interface; 2936 ///; 2937 /// * `Helper` must publicly inherit from `ROOT::Detail::RDF::RActionImpl<Helper>`; 2938 /// * `Helper::Result_t`: public alias for the type of the result of this action helper. `Result_t` must be default-constructible.; 2939 /// * `Helper(Helper &&)`: a move-constructor is required. Copy-constructors are discouraged.; 2940 /// * `std::shared_ptr<Result_t> GetResultPtr() const`: return a shared_ptr to the result of this action (of type; 2941 /// Result_t). The RResultPtr returned by Book will point to this object. Note that this method can be called; 2942 /// _before_ Initialize(), because the RResultPtr is constructed before the event loop is started.; 2943 /// * `void Initiali",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:165119,Integrability,interface,interface,165119,";; 2919 }; 2920 ; 2921 // clang-format off; 2922 ////////////////////////////////////////////////////////////////////////////; 2923 /// \brief Book execution of a custom action using a user-defined helper object.; 2924 /// \tparam FirstColumn The type of the first column used by this action. Inferred together with OtherColumns if not present.; 2925 /// \tparam OtherColumns A list of the types of the other columns used by this action; 2926 /// \tparam Helper The type of the user-defined helper. See below for the required interface it should expose.; 2927 /// \param[in] helper The Action Helper to be scheduled.; 2928 /// \param[in] columns The names of the columns on which the helper acts.; 2929 /// \return the result of the helper wrapped in a RResultPtr.; 2930 ///; 2931 /// This method books a custom action for execution. The behavior of the action is completely dependent on the; 2932 /// Helper object provided by the caller. The required interface for the helper is described below (more; 2933 /// methods that the ones required can be present, e.g. a constructor that takes the number of worker threads is usually useful):; 2934 ///; 2935 /// ### Mandatory interface; 2936 ///; 2937 /// * `Helper` must publicly inherit from `ROOT::Detail::RDF::RActionImpl<Helper>`; 2938 /// * `Helper::Result_t`: public alias for the type of the result of this action helper. `Result_t` must be default-constructible.; 2939 /// * `Helper(Helper &&)`: a move-constructor is required. Copy-constructors are discouraged.; 2940 /// * `std::shared_ptr<Result_t> GetResultPtr() const`: return a shared_ptr to the result of this action (of type; 2941 /// Result_t). The RResultPtr returned by Book will point to this object. Note that this method can be called; 2942 /// _before_ Initialize(), because the RResultPtr is constructed before the event loop is started.; 2943 /// * `void Initialize()`: this method is called once before starting the event-loop. Useful for setup operations.; 2944 /// It must re",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:165339,Integrability,interface,interface,165339,"// \tparam FirstColumn The type of the first column used by this action. Inferred together with OtherColumns if not present.; 2925 /// \tparam OtherColumns A list of the types of the other columns used by this action; 2926 /// \tparam Helper The type of the user-defined helper. See below for the required interface it should expose.; 2927 /// \param[in] helper The Action Helper to be scheduled.; 2928 /// \param[in] columns The names of the columns on which the helper acts.; 2929 /// \return the result of the helper wrapped in a RResultPtr.; 2930 ///; 2931 /// This method books a custom action for execution. The behavior of the action is completely dependent on the; 2932 /// Helper object provided by the caller. The required interface for the helper is described below (more; 2933 /// methods that the ones required can be present, e.g. a constructor that takes the number of worker threads is usually useful):; 2934 ///; 2935 /// ### Mandatory interface; 2936 ///; 2937 /// * `Helper` must publicly inherit from `ROOT::Detail::RDF::RActionImpl<Helper>`; 2938 /// * `Helper::Result_t`: public alias for the type of the result of this action helper. `Result_t` must be default-constructible.; 2939 /// * `Helper(Helper &&)`: a move-constructor is required. Copy-constructors are discouraged.; 2940 /// * `std::shared_ptr<Result_t> GetResultPtr() const`: return a shared_ptr to the result of this action (of type; 2941 /// Result_t). The RResultPtr returned by Book will point to this object. Note that this method can be called; 2942 /// _before_ Initialize(), because the RResultPtr is constructed before the event loop is started.; 2943 /// * `void Initialize()`: this method is called once before starting the event-loop. Useful for setup operations.; 2944 /// It must reset the state of the helper to the expected state at the beginning of the event loop: the same helper,; 2945 /// or copies of it, might be used for multiple event loops (e.g. in the presence of systematic variations).; ",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:171066,Integrability,wrap,wrapped,171066,"r = std::make_shared<HelperT>(std::forward<Helper>(helper));; 2993 auto resPtr = hPtr->GetResultPtr();; 2994 ; 2995 if (std::is_same<FirstColumn, RDFDetail::RInferredType>::value && columns.empty()) {; 2996 return CallCreateActionWithoutColsIfPossible<HelperT>(resPtr, hPtr, TTraits::TypeList<FirstColumn>{});; 2997 } else {; 2998 return CreateAction<RDFInternal::ActionTags::Book, FirstColumn, OtherColumns...>(columns, resPtr, hPtr,; 2999 fProxiedPtr, columns.size());; 3000 }; 3001 }; 3002 ; 3003 ////////////////////////////////////////////////////////////////////////////; 3004 /// \brief Provides a representation of the columns in the dataset.; 3005 /// \tparam ColumnTypes variadic list of branch/column types.; 3006 /// \param[in] columnList Names of the columns to be displayed.; 3007 /// \param[in] nRows Number of events for each column to be displayed.; 3008 /// \param[in] nMaxCollectionElements Maximum number of collection elements to display per row.; 3009 /// \return the `RDisplay` instance wrapped in a RResultPtr.; 3010 ///; 3011 /// This function returns a `RResultPtr<RDisplay>` containing all the entries to be displayed, organized in a tabular; 3012 /// form. RDisplay will either print on the standard output a summarized version through `RDisplay::Print()` or will; 3013 /// return a complete version through `RDisplay::AsString()`.; 3014 ///; 3015 /// This action is *lazy*: upon invocation of this method the calculation is booked but not executed. Also see; 3016 /// RResultPtr.; 3017 ///; 3018 /// Example usage:; 3019 /// ~~~{.cpp}; 3020 /// // Preparing the RResultPtr<RDisplay> object with all columns and default number of entries; 3021 /// auto d1 = rdf.Display("""");; 3022 /// // Preparing the RResultPtr<RDisplay> object with two columns and 128 entries; 3023 /// auto d2 = d.Display({""x"", ""y""}, 128);; 3024 /// // Printing the short representations, the event loop will run; 3025 /// d1->Print();; 3026 /// d2->Print();; 3027 /// ~~~; 3028 template <typename... C",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:173291,Integrability,wrap,wrapped,173291,"insert(newCols.begin(), ""rdfentry_""); // Artificially insert first column; 3034 auto displayer = std::make_shared<RDisplay>(newCols, GetColumnTypeNamesList(newCols), nMaxCollectionElements);; 3035 using displayHelperArgs_t = std::pair<size_t, std::shared_ptr<RDisplay>>;; 3036 // Need to add ULong64_t type corresponding to the first column rdfentry_; 3037 return CreateAction<RDFInternal::ActionTags::Display, ULong64_t, ColumnTypes...>(; 3038 std::move(newCols), displayer, std::make_shared<displayHelperArgs_t>(nRows, displayer), fProxiedPtr);; 3039 }; 3040 ; 3041 ////////////////////////////////////////////////////////////////////////////; 3042 /// \brief Provides a representation of the columns in the dataset.; 3043 /// \param[in] columnList Names of the columns to be displayed.; 3044 /// \param[in] nRows Number of events for each column to be displayed.; 3045 /// \param[in] nMaxCollectionElements Maximum number of collection elements to display per row.; 3046 /// \return the `RDisplay` instance wrapped in a RResultPtr.; 3047 ///; 3048 /// This overload automatically infers the column types.; 3049 /// See the previous overloads for further details.; 3050 ///; 3051 /// Invoked when no types are specified to Display; 3052 RResultPtr<RDisplay> Display(const ColumnNames_t &columnList, size_t nRows = 5, size_t nMaxCollectionElements = 10); 3053 {; 3054 CheckIMTDisabled(""Display"");; 3055 auto newCols = columnList;; 3056 newCols.insert(newCols.begin(), ""rdfentry_""); // Artificially insert first column; 3057 auto displayer = std::make_shared<RDisplay>(newCols, GetColumnTypeNamesList(newCols), nMaxCollectionElements);; 3058 using displayHelperArgs_t = std::pair<size_t, std::shared_ptr<RDisplay>>;; 3059 return CreateAction<RDFInternal::ActionTags::Display, RDFDetail::RInferredType>(; 3060 std::move(newCols), displayer, std::make_shared<displayHelperArgs_t>(nRows, displayer), fProxiedPtr,; 3061 columnList.size() + 1);; 3062 }; 3063 ; 3064 ////////////////////////////////////////",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:174696,Integrability,wrap,wrapped,174696,"uto newCols = columnList;; 3056 newCols.insert(newCols.begin(), ""rdfentry_""); // Artificially insert first column; 3057 auto displayer = std::make_shared<RDisplay>(newCols, GetColumnTypeNamesList(newCols), nMaxCollectionElements);; 3058 using displayHelperArgs_t = std::pair<size_t, std::shared_ptr<RDisplay>>;; 3059 return CreateAction<RDFInternal::ActionTags::Display, RDFDetail::RInferredType>(; 3060 std::move(newCols), displayer, std::make_shared<displayHelperArgs_t>(nRows, displayer), fProxiedPtr,; 3061 columnList.size() + 1);; 3062 }; 3063 ; 3064 ////////////////////////////////////////////////////////////////////////////; 3065 /// \brief Provides a representation of the columns in the dataset.; 3066 /// \param[in] columnNameRegexp A regular expression to select the columns.; 3067 /// \param[in] nRows Number of events for each column to be displayed.; 3068 /// \param[in] nMaxCollectionElements Maximum number of collection elements to display per row.; 3069 /// \return the `RDisplay` instance wrapped in a RResultPtr.; 3070 ///; 3071 /// The existing columns are matched against the regular expression. If the string provided; 3072 /// is empty, all columns are selected.; 3073 /// See the previous overloads for further details.; 3074 RResultPtr<RDisplay>; 3075 Display(std::string_view columnNameRegexp = """", size_t nRows = 5, size_t nMaxCollectionElements = 10); 3076 {; 3077 const auto columnNames = GetColumnNames();; 3078 const auto selectedColumns = RDFInternal::ConvertRegexToColumns(columnNames, columnNameRegexp, ""Display"");; 3079 return Display(selectedColumns, nRows, nMaxCollectionElements);; 3080 }; 3081 ; 3082 ////////////////////////////////////////////////////////////////////////////; 3083 /// \brief Provides a representation of the columns in the dataset.; 3084 /// \param[in] columnList Names of the columns to be displayed.; 3085 /// \param[in] nRows Number of events for each column to be displayed.; 3086 /// \param[in] nMaxCollectionElements Number of maximu",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:175755,Integrability,wrap,wrapped,175755,"existing columns are matched against the regular expression. If the string provided; 3072 /// is empty, all columns are selected.; 3073 /// See the previous overloads for further details.; 3074 RResultPtr<RDisplay>; 3075 Display(std::string_view columnNameRegexp = """", size_t nRows = 5, size_t nMaxCollectionElements = 10); 3076 {; 3077 const auto columnNames = GetColumnNames();; 3078 const auto selectedColumns = RDFInternal::ConvertRegexToColumns(columnNames, columnNameRegexp, ""Display"");; 3079 return Display(selectedColumns, nRows, nMaxCollectionElements);; 3080 }; 3081 ; 3082 ////////////////////////////////////////////////////////////////////////////; 3083 /// \brief Provides a representation of the columns in the dataset.; 3084 /// \param[in] columnList Names of the columns to be displayed.; 3085 /// \param[in] nRows Number of events for each column to be displayed.; 3086 /// \param[in] nMaxCollectionElements Number of maximum elements in collection.; 3087 /// \return the `RDisplay` instance wrapped in a RResultPtr.; 3088 ///; 3089 /// See the previous overloads for further details.; 3090 RResultPtr<RDisplay>; 3091 Display(std::initializer_list<std::string> columnList, size_t nRows = 5, size_t nMaxCollectionElements = 10); 3092 {; 3093 ColumnNames_t selectedColumns(columnList);; 3094 return Display(selectedColumns, nRows, nMaxCollectionElements);; 3095 }; 3096 ; 3097private:; 3098 template <typename F, typename DefineType, typename RetType = typename TTraits::CallableTraits<F>::ret_type>; 3099 std::enable_if_t<std::is_default_constructible<RetType>::value, RInterface<Proxied, DS_t>>; 3100 DefineImpl(std::string_view name, F &&expression, const ColumnNames_t &columns, const std::string &where); 3101 {; 3102 if (where.compare(0, 8, ""Redefine"") != 0) { // not a Redefine; 3103 RDFInternal::CheckValidCppVarName(name, where);; 3104 RDFInternal::CheckForRedefinition(where, name, fColRegister, fLoopManager->GetBranchNames(),; 3105 fDataSource ? fDataSource->GetColumnNames",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:184210,Integrability,inject,inject,184210,"216 ; 3217 return cachedRDF;; 3218 }; 3219 ; 3220 template <bool IsSingleColumn, typename F>; 3221 RInterface<Proxied, DS_t>; 3222 VaryImpl(const std::vector<std::string> &colNames, F &&expression, const ColumnNames_t &inputColumns,; 3223 const std::vector<std::string> &variationTags, std::string_view variationName); 3224 {; 3225 using F_t = std::decay_t<F>;; 3226 using ColTypes_t = typename TTraits::CallableTraits<F_t>::arg_types;; 3227 using RetType = typename TTraits::CallableTraits<F_t>::ret_type;; 3228 constexpr auto nColumns = ColTypes_t::list_size;; 3229 ; 3230 SanityChecksForVary<RetType>(colNames, variationTags, variationName);; 3231 ; 3232 const auto validColumnNames = GetValidatedColumnNames(nColumns, inputColumns);; 3233 CheckAndFillDSColumns(validColumnNames, ColTypes_t{});; 3234 ; 3235 auto retTypeName = RDFInternal::TypeID2TypeName(typeid(RetType));; 3236 if (retTypeName.empty()) {; 3237 // The type is not known to the interpreter, but we don't want to error out; 3238 // here, rather if/when this column is used in jitted code, so we inject a broken but telling type name.; 3239 const auto demangledType = RDFInternal::DemangleTypeIdName(typeid(RetType));; 3240 retTypeName = ""CLING_UNKNOWN_TYPE_"" + demangledType;; 3241 }; 3242 ; 3243 auto variation = std::make_shared<RDFInternal::RVariation<F_t, IsSingleColumn>>(; 3244 colNames, variationName, std::forward<F>(expression), variationTags, retTypeName, fColRegister, *fLoopManager,; 3245 validColumnNames);; 3246 ; 3247 RDFInternal::RColumnRegister newCols(fColRegister);; 3248 newCols.AddVariation(std::move(variation));; 3249 ; 3250 RInterface<Proxied> newInterface(fProxiedPtr, *fLoopManager, std::move(newCols));; 3251 ; 3252 return newInterface;; 3253 }; 3254 ; 3255 RInterface<Proxied, DS_t> JittedVaryImpl(const std::vector<std::string> &colNames, std::string_view expression,; 3256 const std::vector<std::string> &variationTags,; 3257 std::string_view variationName, bool isSingleColumn); 3258 {; 3259 R__ASSERT",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:194379,Integrability,interface,interface,194379,"int=-1)Create RAction object, return RResultPtr for the action Overload for the case in which all column typ...Definition RInterfaceBase.hxx:150; ROOT::RDF::RInterfaceBase::fDataSourceRDataSource * fDataSourceNon-owning pointer to a data-source object. Null if no data-source. RLoopManager has ownership of the...Definition RInterfaceBase.hxx:57; ROOT::RDF::RInterfaceBase::CheckAndFillDSColumnsvoid CheckAndFillDSColumns(ColumnNames_t validCols, TTraits::TypeList< ColumnTypes... > typeList)Definition RInterfaceBase.hxx:136; ROOT::RDF::RInterfaceBase::CheckIMTDisabledvoid CheckIMTDisabled(std::string_view callerName)Definition RInterfaceBase.cxx:417; ROOT::RDF::RInterfaceBase::GetColumnNamesColumnNames_t GetColumnNames()Returns the names of the available columns.Definition RInterfaceBase.cxx:152; ROOT::RDF::RInterfaceBase::fColRegisterRDFInternal::RColumnRegister fColRegisterContains the columns defined up to this node.Definition RInterfaceBase.hxx:60; ROOT::RDF::RInterfaceThe public interface to the RDataFrame federation of classes.Definition RInterface.hxx:113; ROOT::RDF::RInterface::HistoNDRResultPtr<::THnD > HistoND(const THnDModel &model, const ColumnNames_t &columnList)Fill and return an N-dimensional histogram (lazy action).Definition RInterface.hxx:2179; ROOT::RDF::RInterface::RInterfaceRInterface(const RInterface &)=defaultCopy-ctor for RInterface.; ROOT::RDF::RInterface::Histo1DRResultPtr<::TH1D > Histo1D(std::string_view vName, std::string_view wName)Fill and return a one-dimensional histogram with the weighted values of a column (lazy action).Definition RInterface.hxx:1900; ROOT::RDF::RInterface::RInterfaceRInterface(const std::shared_ptr< Proxied > &proxied, RLoopManager &lm, const RDFInternal::RColumnRegister &colRegister)Definition RInterface.hxx:3312; ROOT::RDF::RInterface::Histo1DRResultPtr<::TH1D > Histo1D(const TH1DModel &model={"""", """", 128u, 0., 0.})Fill and return a one-dimensional histogram with the weighted values of a column (lazy action).Definit",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:197927,Integrability,depend,dependent,197927,"iations, std::string_view variationName="""")Register systematic variations for a single existing column using auto-generated variation tags.Definition RInterface.hxx:901; ROOT::RDF::RInterface::VaryRInterface< Proxied, DS_t > Vary(std::string_view colName, std::string_view expression, std::size_t nVariations, std::string_view variationName="""")Register systematic variations for a single existing column using auto-generated variation tags.Definition RInterface.hxx:1107; ROOT::RDF::RInterface::GraphRResultPtr<::TGraph > Graph(std::string_view x="""", std::string_view y="""")Fill and return a TGraph object (lazy action).Definition RInterface.hxx:2225; ROOT::RDF::RInterface::CallCreateActionWithoutColsIfPossibleRResultPtr< ActionResultType > CallCreateActionWithoutColsIfPossible(const std::shared_ptr< ActionResultType > &, const std::shared_ptr< Helper > &, Others...)Definition RInterface.hxx:3301; ROOT::RDF::RInterface::DefineSlotRInterface< Proxied, DS_t > DefineSlot(std::string_view name, F expression, const ColumnNames_t &columns={})Define a new column with a value dependent on the processing slot.Definition RInterface.hxx:470; ROOT::RDF::RInterface::StdDevRResultPtr< double > StdDev(std::string_view columnName="""")Return the unbiased standard deviation of processed column values (lazy action).Definition RInterface.hxx:2727; ROOT::RDF::RInterface::DefineImplstd::enable_if_t< std::is_default_constructible< RetType >::value, RInterface< Proxied, DS_t > > DefineImpl(std::string_view name, F &&expression, const ColumnNames_t &columns, const std::string &where)Definition RInterface.hxx:3100; ROOT::RDF::RInterface::DefinePerSampleRInterface< Proxied, DS_t > DefinePerSample(std::string_view name, F expression)Define a new column that is updated when the input sample changes.Definition RInterface.hxx:735; ROOT::RDF::RInterface::operator=RInterface & operator=(RInterface &&)=defaultMove-assignment operator for RInterface.; ROOT::RDF::RInterface::VaryRInterface< Proxied, DS_t > Vary(",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:213162,Integrability,depend,dependent,213162,"ace::GraphAsymmErrorsRResultPtr<::TGraphAsymmErrors > GraphAsymmErrors(std::string_view x="""", std::string_view y="""", std::string_view exl="""", std::string_view exh="""", std::string_view eyl="""", std::string_view eyh="""")Fill and return a TGraphAsymmErrors object (lazy action).Definition RInterface.hxx:2278; ROOT::RDF::RInterface::SnapshotRResultPtr< RInterface< RLoopManager > > Snapshot(std::string_view treename, std::string_view filename, const ColumnNames_t &columnList, const RSnapshotOptions &options=RSnapshotOptions())Save selected columns to disk, in a new TTree treename in file filename.Definition RInterface.hxx:1317; ROOT::RDF::RInterface::AggregateRResultPtr< U > Aggregate(AccFun aggregator, MergeFun merger, std::string_view columnName="""")Execute a user-defined accumulation operation on the processed column values in each processing slot.Definition RInterface.hxx:2913; ROOT::RDF::RInterface::DefineSlotEntryRInterface< Proxied, DS_t > DefineSlotEntry(std::string_view name, F expression, const ColumnNames_t &columns={})Define a new column with a value dependent on the processing slot and the current entry.Definition RInterface.hxx:500; ROOT::RDF::RInterface::MinRResultPtr< RDFDetail::MinReturnType_t< T > > Min(std::string_view columnName="""")Return the minimum of processed column values (lazy action).Definition RInterface.hxx:2640; ROOT::RDF::RInterface::ReduceRResultPtr< T > Reduce(F f, std::string_view columnName="""")Execute a user-defined reduce operation on the values of a column.Definition RInterface.hxx:1688; ROOT::RDF::RInterface::Foreachvoid Foreach(F f, const ColumnNames_t &columns={})Execute a user-defined function on each entry (instant action).Definition RInterface.hxx:1611; ROOT::RDF::RInterface::FilterRInterface< RDFDetail::RJittedFilter, DS_t > Filter(std::string_view expression, std::string_view name="""")Append a filter to the call graph.Definition RInterface.hxx:288; ROOT::RDF::RInterface::Profile2DRResultPtr<::TProfile2D > Profile2D(const TProfile2DM",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:217481,Integrability,interface,interface,217481,"g_view wName)Fill and return a one-dimensional profile (lazy action).Definition RInterface.hxx:2370; ROOT::RDF::RInterface::Histo3DRResultPtr<::TH3D > Histo3D(const TH3DModel &model)Definition RInterface.hxx:2117; ROOT::RDF::RInterface::MaxRResultPtr< RDFDetail::MaxReturnType_t< T > > Max(std::string_view columnName="""")Return the maximum of processed column values (lazy action).Definition RInterface.hxx:2670; ROOT::RDF::RInterface::VaryRInterface< Proxied, DS_t > Vary(std::initializer_list< std::string > colNames, std::string_view expression, std::size_t nVariations, std::string_view variationName)Register systematic variations for multiple existing columns using auto-generated variation tags.Definition RInterface.hxx:1168; ROOT::RDF::RLazyDSA RDataSource implementation which is built on top of result proxies.Definition RLazyDSImpl.hxx:41; ROOT::RDF::RResultPtrSmart pointer for the return type of actions.Definition RResultPtr.hxx:119; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TypeTraits::RemoveFirstParameter_ttypename RemoveFirstParameter< T >::type RemoveFirstParameter_tDefinition TypeTraits.hxx:169; TDirectory::TContextTDirectory::TContext keeps track and restore the current directory.Definition TDirectory.h:89; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TStatisticStatistical variable, defined by its mean and variance (RMS).Definition TStatistic.h:33; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; F#define F(x, y, z); ROOT::Detail::RDFDefinition RooAbsDataHelper.h:80; ROOT::Detail::RDF::CreateLMFromTTreestd::shared_ptr< ROOT::Detail::RDF::RLoopManager > CreateLMFromTTree(std::string_view datasetName, std::string_view fileNameGlob, const std::vector< std::string > &defaultColumns, bool checkFile=true)Create an RLoopManager that reads a TChain.Definition RLoopManager.cxx:1189; ROOT::",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:8314,Modifiability,variab,variable,8314,"Node's by value.; 173 operator RNode() const; 174 {; 175 return RNode(std::static_pointer_cast<::ROOT::Detail::RDF::RNodeBase>(fProxiedPtr), *fLoopManager, fColRegister);; 176 }; 177 ; 178 ////////////////////////////////////////////////////////////////////////////; 179 /// \brief Append a filter to the call graph.; 180 /// \param[in] f Function, lambda expression, functor class or any other callable object. It must return a `bool`; 181 /// signalling whether the event has passed the selection (true) or not (false).; 182 /// \param[in] columns Names of the columns/branches in input to the filter function.; 183 /// \param[in] name Optional name of this filter. See `Report`.; 184 /// \return the filter node of the computation graph.; 185 ///; 186 /// Append a filter node at the point of the call graph corresponding to the; 187 /// object this method is called on.; 188 /// The callable `f` should not have side-effects (e.g. modification of an; 189 /// external or static variable) to ensure correct results when implicit; 190 /// multi-threading is active.; 191 ///; 192 /// RDataFrame only evaluates filters when necessary: if multiple filters; 193 /// are chained one after another, they are executed in order and the first; 194 /// one returning false causes the event to be discarded.; 195 /// Even if multiple actions or transformations depend on the same filter,; 196 /// it is executed once per entry. If its result is requested more than; 197 /// once, the cached result is served.; 198 ///; 199 /// ### Example usage:; 200 /// ~~~{.cpp}; 201 /// // C++ callable (function, functor class, lambda...) that takes two parameters of the types of ""x"" and ""y""; 202 /// auto filtered = df.Filter(myCut, {""x"", ""y""});; 203 ///; 204 /// // String: it must contain valid C++ except that column names can be used instead of variable names; 205 /// auto filtered = df.Filter(""x*y > 0"");; 206 /// ~~~; 207 ///; 208 /// \note If the body of the string expression contains an explicit `return` stat",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:9163,Modifiability,variab,variable,9163,"point of the call graph corresponding to the; 187 /// object this method is called on.; 188 /// The callable `f` should not have side-effects (e.g. modification of an; 189 /// external or static variable) to ensure correct results when implicit; 190 /// multi-threading is active.; 191 ///; 192 /// RDataFrame only evaluates filters when necessary: if multiple filters; 193 /// are chained one after another, they are executed in order and the first; 194 /// one returning false causes the event to be discarded.; 195 /// Even if multiple actions or transformations depend on the same filter,; 196 /// it is executed once per entry. If its result is requested more than; 197 /// once, the cached result is served.; 198 ///; 199 /// ### Example usage:; 200 /// ~~~{.cpp}; 201 /// // C++ callable (function, functor class, lambda...) that takes two parameters of the types of ""x"" and ""y""; 202 /// auto filtered = df.Filter(myCut, {""x"", ""y""});; 203 ///; 204 /// // String: it must contain valid C++ except that column names can be used instead of variable names; 205 /// auto filtered = df.Filter(""x*y > 0"");; 206 /// ~~~; 207 ///; 208 /// \note If the body of the string expression contains an explicit `return` statement (even if it is in a nested; 209 /// scope), RDataFrame _will not_ add another one in front of the expression. So this will not work:; 210 /// ~~~{.cpp}; 211 /// df.Filter(""Sum(Map(vec, [](float e) { return e*e > 0.5; }))""); 212 /// ~~~; 213 /// but instead this will:; 214 /// ~~~{.cpp}; 215 /// df.Filter(""return Sum(Map(vec, [](float e) { return e*e > 0.5; }))""); 216 /// ~~~; 217 template <typename F, std::enable_if_t<!std::is_convertible<F, std::string>::value, int> = 0>; 218 RInterface<RDFDetail::RFilter<F, Proxied>, DS_t>; 219 Filter(F f, const ColumnNames_t &columns = {}, std::string_view name = """"); 220 {; 221 RDFInternal::CheckFilter(f);; 222 using ColTypes_t = typename TTraits::CallableTraits<F>::arg_types;; 223 constexpr auto nColumns = ColTypes_t::list_size;; 22",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:12701,Modifiability,variab,variable,12701,"2 /// signalling whether the event has passed the selection (true) or not (false).; 253 /// \param[in] columns Names of the columns/branches in input to the filter function.; 254 /// \return the filter node of the computation graph.; 255 ///; 256 /// Refer to the first overload of this method for the full documentation.; 257 template <typename F>; 258 RInterface<RDFDetail::RFilter<F, Proxied>, DS_t> Filter(F f, const std::initializer_list<std::string> &columns); 259 {; 260 return Filter(f, ColumnNames_t{columns});; 261 }; 262 ; 263 ////////////////////////////////////////////////////////////////////////////; 264 /// \brief Append a filter to the call graph.; 265 /// \param[in] expression The filter expression in C++; 266 /// \param[in] name Optional name of this filter. See `Report`.; 267 /// \return the filter node of the computation graph.; 268 ///; 269 /// The expression is just-in-time compiled and used to filter entries. It must; 270 /// be valid C++ syntax in which variable names are substituted with the names; 271 /// of branches/columns.; 272 ///; 273 /// ### Example usage:; 274 /// ~~~{.cpp}; 275 /// auto filtered_df = df.Filter(""myCollection.size() > 3"");; 276 /// auto filtered_name_df = df.Filter(""myCollection.size() > 3"", ""Minumum collection size"");; 277 /// ~~~; 278 ///; 279 /// \note If the body of the string expression contains an explicit `return` statement (even if it is in a nested; 280 /// scope), RDataFrame _will not_ add another one in front of the expression. So this will not work:; 281 /// ~~~{.cpp}; 282 /// df.Filter(""Sum(Map(vec, [](float e) { return e*e > 0.5; }))""); 283 /// ~~~; 284 /// but instead this will:; 285 /// ~~~{.cpp}; 286 /// df.Filter(""return Sum(Map(vec, [](float e) { return e*e > 0.5; }))""); 287 /// ~~~; 288 RInterface<RDFDetail::RJittedFilter, DS_t> Filter(std::string_view expression, std::string_view name = """"); 289 {; 290 // deleted by the jitted call to JitFilterHelper; 291 auto upcastNodeOnHeap = RDFInternal::MakeSharedO",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:20183,Modifiability,variab,variable,20183,"roxiedPtr, fColRegister, columns);; 398 return RInterface<F_t, DS_t>(std::move(filterPtr), *fLoopManager, fColRegister);; 399 }; 400 ; 401 // clang-format off; 402 ////////////////////////////////////////////////////////////////////////////; 403 /// \brief Define a new column.; 404 /// \param[in] name The name of the defined column.; 405 /// \param[in] expression Function, lambda expression, functor class or any other callable object producing the defined value. Returns the value that will be assigned to the defined column.; 406 /// \param[in] columns Names of the columns/branches in input to the producer function.; 407 /// \return the first node of the computation graph for which the new quantity is defined.; 408 ///; 409 /// Define a column that will be visible from all subsequent nodes; 410 /// of the functional chain. The `expression` is only evaluated for entries that pass; 411 /// all the preceding filters.; 412 /// A new variable is created called `name`, accessible as if it was contained; 413 /// in the dataset from subsequent transformations/actions.; 414 ///; 415 /// Use cases include:; 416 /// * caching the results of complex calculations for easy and efficient multiple access; 417 /// * extraction of quantities of interest from complex objects; 418 ///; 419 /// An exception is thrown if the name of the new column is already in use in this branch of the computation graph.; 420 ///; 421 /// ### Example usage:; 422 /// ~~~{.cpp}; 423 /// // assuming a function with signature:; 424 /// double myComplexCalculation(const RVec<float> &muon_pts);; 425 /// // we can pass it directly to Define; 426 /// auto df_with_define = df.Define(""newColumn"", myComplexCalculation, {""muon_pts""});; 427 /// // alternatively, we can pass the body of the function as a string, as in Filter:; 428 /// auto df_with_define = df.Define(""newColumn"", ""x*x + y*y"");; 429 /// ~~~; 430 ///; 431 /// \note If the body of the string expression contains an explicit `return` statement (even if it is",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:26538,Modifiability,variab,variable,26538,"ry_"", ""column1"", ""column2""}); 495 /// DefineSlotEntry(""x"", function, {""column1"", ""column2""}); 496 /// ~~~; 497 ///; 498 /// See Define() for more information.; 499 template <typename F>; 500 RInterface<Proxied, DS_t> DefineSlotEntry(std::string_view name, F expression, const ColumnNames_t &columns = {}); 501 {; 502 return DefineImpl<F, RDFDetail::ExtraArgsForDefine::SlotAndEntry>(name, std::move(expression), columns,; 503 ""DefineSlotEntry"");; 504 }; 505 // clang-format on; 506 ; 507 ////////////////////////////////////////////////////////////////////////////; 508 /// \brief Define a new column.; 509 /// \param[in] name The name of the defined column.; 510 /// \param[in] expression An expression in C++ which represents the defined value; 511 /// \return the first node of the computation graph for which the new quantity is defined.; 512 ///; 513 /// The expression is just-in-time compiled and used to produce the column entries.; 514 /// It must be valid C++ syntax in which variable names are substituted with the names; 515 /// of branches/columns.; 516 ///; 517 /// \note If the body of the string expression contains an explicit `return` statement (even if it is in a nested; 518 /// scope), RDataFrame _will not_ add another one in front of the expression. So this will not work:; 519 /// ~~~{.cpp}; 520 /// df.Define(""x2"", ""Map(v, [](float e) { return e*e; })""); 521 /// ~~~; 522 /// but instead this will:; 523 /// ~~~{.cpp}; 524 /// df.Define(""x2"", ""return Map(v, [](float e) { return e*e; })""); 525 /// ~~~; 526 ///; 527 /// Refer to the first overload of this method for the full documentation.; 528 RInterface<Proxied, DS_t> Define(std::string_view name, std::string_view expression); 529 {; 530 constexpr auto where = ""Define"";; 531 RDFInternal::CheckValidCppVarName(name, where);; 532 // these checks must be done before jitting lest we throw exceptions in jitted code; 533 RDFInternal::CheckForRedefinition(where, name, fColRegister, fLoopManager->GetBranchNames(),; 534 fDat",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:32242,Modifiability,variab,variable,32242,"n case the column to re-define does not already exist.; 594 ///; 595 /// See DefineSlotEntry() for more information.; 596 // clang-format on; 597 template <typename F>; 598 RInterface<Proxied, DS_t> RedefineSlotEntry(std::string_view name, F expression, const ColumnNames_t &columns = {}); 599 {; 600 return DefineImpl<F, RDFDetail::ExtraArgsForDefine::SlotAndEntry>(name, std::move(expression), columns,; 601 ""RedefineSlotEntry"");; 602 }; 603 ; 604 ////////////////////////////////////////////////////////////////////////////; 605 /// \brief Overwrite the value and/or type of an existing column.; 606 /// \param[in] name The name of the column to redefine.; 607 /// \param[in] expression An expression in C++ which represents the defined value; 608 /// \return the first node of the computation graph for which the new quantity is defined.; 609 ///; 610 /// The expression is just-in-time compiled and used to produce the column entries.; 611 /// It must be valid C++ syntax in which variable names are substituted with the names; 612 /// of branches/columns.; 613 ///; 614 /// The old value of the column can be used as an input for the expression.; 615 /// An exception is thrown in case the column to re-define does not already exist.; 616 ///; 617 /// Aliases cannot be overridden. See the corresponding Define() overload for more information.; 618 RInterface<Proxied, DS_t> Redefine(std::string_view name, std::string_view expression); 619 {; 620 constexpr auto where = ""Redefine"";; 621 RDFInternal::CheckValidCppVarName(name, where);; 622 RDFInternal::CheckForDefinition(where, name, fColRegister, fLoopManager->GetBranchNames(),; 623 fDataSource ? fDataSource->GetColumnNames() : ColumnNames_t{});; 624 RDFInternal::CheckForNoVariations(where, name, fColRegister);; 625 ; 626 auto upcastNodeOnHeap = RDFInternal::MakeSharedOnHeap(RDFInternal::UpcastNode(fProxiedPtr));; 627 auto jittedDefine = RDFInternal::BookDefineJit(name, expression, *fLoopManager, fDataSource, fColRegister,; 628 fLoop",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:40629,Modifiability,variab,variable,40629,"me, retTypeName, std::move(expression), *fLoopManager);; 751 ; 752 RDFInternal::RColumnRegister newCols(fColRegister);; 753 newCols.AddDefine(std::move(newColumn));; 754 RInterface<Proxied> newInterface(fProxiedPtr, *fLoopManager, std::move(newCols));; 755 return newInterface;; 756 }; 757 ; 758 // clang-format off; 759 ////////////////////////////////////////////////////////////////////////////; 760 /// \brief Define a new column that is updated when the input sample changes.; 761 /// \param[in] name The name of the defined column.; 762 /// \param[in] expression A valid C++ expression as a string, which will be used to compute the defined value.; 763 /// \return the first node of the computation graph for which the new quantity is defined.; 764 ///; 765 /// The expression is just-in-time compiled and used to produce the column entries.; 766 /// It must be valid C++ syntax and the usage of the special variable names `rdfslot_` and `rdfsampleinfo_` is; 767 /// permitted, where these variables will take the same values as the `slot` and `id` parameters described at the; 768 /// DefinePerSample(std::string_view name, F expression) overload. See the documentation of that overload for more information.; 769 ///; 770 /// ### Example usage:; 771 /// ~~~{.py}; 772 /// df = ROOT.RDataFrame('mytree', ['sample1.root','sample2.root']); 773 /// df.DefinePerSample('weightbysample', 'rdfsampleinfo_.Contains(""sample1"") ? 1.0f : 2.0f'); 774 /// ~~~; 775 ///; 776 /// \note; 777 /// If you have declared some C++ function to the interpreter, the correct syntax to call that function with this; 778 /// overload of DefinePerSample is by calling it explicitly with the special names `rdfslot_` and `rdfsampleinfo_` as; 779 /// input parameters. This is for example the correct way to call this overload when working in PyROOT:; 780 /// ~~~{.py}; 781 /// ROOT.gInterpreter.Declare(; 782 /// """"""; 783 /// float weights(unsigned int slot, const ROOT::RDF::RSampleInfo &id){; 784 /// return id.Contains",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:40711,Modifiability,variab,variables,40711,"me, retTypeName, std::move(expression), *fLoopManager);; 751 ; 752 RDFInternal::RColumnRegister newCols(fColRegister);; 753 newCols.AddDefine(std::move(newColumn));; 754 RInterface<Proxied> newInterface(fProxiedPtr, *fLoopManager, std::move(newCols));; 755 return newInterface;; 756 }; 757 ; 758 // clang-format off; 759 ////////////////////////////////////////////////////////////////////////////; 760 /// \brief Define a new column that is updated when the input sample changes.; 761 /// \param[in] name The name of the defined column.; 762 /// \param[in] expression A valid C++ expression as a string, which will be used to compute the defined value.; 763 /// \return the first node of the computation graph for which the new quantity is defined.; 764 ///; 765 /// The expression is just-in-time compiled and used to produce the column entries.; 766 /// It must be valid C++ syntax and the usage of the special variable names `rdfslot_` and `rdfsampleinfo_` is; 767 /// permitted, where these variables will take the same values as the `slot` and `id` parameters described at the; 768 /// DefinePerSample(std::string_view name, F expression) overload. See the documentation of that overload for more information.; 769 ///; 770 /// ### Example usage:; 771 /// ~~~{.py}; 772 /// df = ROOT.RDataFrame('mytree', ['sample1.root','sample2.root']); 773 /// df.DefinePerSample('weightbysample', 'rdfsampleinfo_.Contains(""sample1"") ? 1.0f : 2.0f'); 774 /// ~~~; 775 ///; 776 /// \note; 777 /// If you have declared some C++ function to the interpreter, the correct syntax to call that function with this; 778 /// overload of DefinePerSample is by calling it explicitly with the special names `rdfslot_` and `rdfsampleinfo_` as; 779 /// input parameters. This is for example the correct way to call this overload when working in PyROOT:; 780 /// ~~~{.py}; 781 /// ROOT.gInterpreter.Declare(; 782 /// """"""; 783 /// float weights(unsigned int slot, const ROOT::RDF::RSampleInfo &id){; 784 /// return id.Contains",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:44067,Modifiability,flexible,flexible,44067," DS_t> newInterface(fProxiedPtr, *fLoopManager, std::move(newCols));; 811 ; 812 return newInterface;; 813 }; 814 ; 815 /// \brief Register systematic variations for a single existing column using custom variation tags.; 816 /// \param[in] colName name of the column for which varied values are provided.; 817 /// \param[in] expression a callable that evaluates the varied values for the specified columns. The callable can; 818 /// take any column values as input, similarly to what happens during Filter and Define calls. It must; 819 /// return an RVec of varied values, one for each variation tag, in the same order as the tags.; 820 /// \param[in] inputColumns the names of the columns to be passed to the callable.; 821 /// \param[in] variationTags names for each of the varied values, e.g. `""up""` and `""down""`.; 822 /// \param[in] variationName a generic name for this set of varied values, e.g. `""ptvariation""`.; 823 ///; 824 /// Vary provides a natural and flexible syntax to define systematic variations that automatically propagate to; 825 /// Filters, Defines and results. RDataFrame usage of columns with attached variations does not change, but for; 826 /// results that depend on any varied quantity, a map/dictionary of varied results can be produced with; 827 /// ROOT::RDF::Experimental::VariationsFor (see the example below).; 828 ///; 829 /// The dictionary will contain a ""nominal"" value (accessed with the ""nominal"" key) for the unchanged result, and; 830 /// values for each of the systematic variations that affected the result (via upstream Filters or via direct or; 831 /// indirect dependencies of the column values on some registered variations). The keys will be a composition of; 832 /// variation names and tags, e.g. ""pt:up"" and ""pt:down"" for the example below.; 833 ///; 834 /// In the following example we add up/down variations of pt and fill a histogram with a quantity that depends on pt.; 835 /// We automatically obtain three histograms in output (""nominal"", ""pt:",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:68308,Modifiability,variab,variable,68308,"eturn newInterface;; 1236 }; 1237 ; 1238 ////////////////////////////////////////////////////////////////////////////; 1239 /// \brief Save selected columns to disk, in a new TTree `treename` in file `filename`.; 1240 /// \tparam ColumnTypes variadic list of branch/column types.; 1241 /// \param[in] treename The name of the output TTree.; 1242 /// \param[in] filename The name of the output TFile.; 1243 /// \param[in] columnList The list of names of the columns/branches to be written.; 1244 /// \param[in] options RSnapshotOptions struct with extra options to pass to TFile and TTree.; 1245 /// \return a `RDataFrame` that wraps the snapshotted dataset.; 1246 ///; 1247 /// Support for writing of nested branches is limited (although RDataFrame is able to read them) and dot ('.'); 1248 /// characters in input column names will be replaced by underscores ('_') in the branches produced by Snapshot.; 1249 /// When writing a variable size array through Snapshot, it is required that the column indicating its size is also; 1250 /// written out and it appears before the array in the columnList.; 1251 ///; 1252 /// By default, in case of TTree or TChain inputs, Snapshot will try to write out all top-level branches. For other; 1253 /// types of inputs, all columns returned by GetColumnNames() will be written out. If friend trees or chains are; 1254 /// present, by default all friend top-level branches that have names that do not collide with; 1255 /// names of branches in the main TTree/TChain will be written out. Since v6.24, Snapshot will also write out; 1256 /// friend branches with the same names of branches in the main TTree/TChain with names of the form; 1257 /// `<friendname>_<branchname>` in order to differentiate them from the branches in the main tree/chain.; 1258 ///; 1259 /// ### Writing to a sub-directory; 1260 ///; 1261 /// Snapshot supports writing the TTree in a sub-directory inside the TFile. It is sufficient to specify the path to; 1262 /// the TTree as part of th",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:70819,Modifiability,variab,variable,70819,"outputs in which (clusters of) entries will be shuffled with; 1267 /// respect to the input TTree. Using such ""shuffled"" TTrees as friends of the original trees would result in wrong; 1268 /// associations between entries in the main TTree and entries in the ""shuffled"" friend. Since v6.22, ROOT will; 1269 /// error out if such a ""shuffled"" TTree is used in a friendship.; 1270 ///; 1271 /// \note In case no events are written out (e.g. because no event passes all filters) the behavior of Snapshot in; 1272 /// single-thread and multi-thread runs is different: in single-thread runs, Snapshot will write out a TTree with; 1273 /// the specified name and zero entries; in multi-thread runs, no TTree object will be written out to disk.; 1274 ///; 1275 /// \note Snapshot will refuse to process columns with names of the form `#columnname`. These are special columns; 1276 /// made available by some data sources (e.g. RNTupleDS) that represent the size of column `columnname`, and are; 1277 /// not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an; 1278 /// Alias(): `df.Alias(""nbar"", ""#bar"").Snapshot(..., {""nbar""})`.; 1279 ///; 1280 /// ### Example invocations:; 1281 ///; 1282 /// ~~~{.cpp}; 1283 /// // without specifying template parameters (column types automatically deduced); 1284 /// df.Snapshot(""outputTree"", ""outputFile.root"", {""x"", ""y""});; 1285 ///; 1286 /// // specifying template parameters (""x"" is `int`, ""y"" is `float`); 1287 /// df.Snapshot<int, float>(""outputTree"", ""outputFile.root"", {""x"", ""y""});; 1288 /// ~~~; 1289 ///; 1290 /// To book a Snapshot without triggering the event loop, one needs to set the appropriate flag in; 1291 /// `RSnapshotOptions`:; 1292 /// ~~~{.cpp}; 1293 /// RSnapshotOptions opts;; 1294 /// opts.fLazy = true;; 1295 /// df.Snapshot(""outputTree"", ""outputFile.root"", {""x""}, opts);; 1296 /// ~~~; 1297 template <typename... ColumnTypes>; 1298 RResultPtr<RInterface<RLoopManager>>; 1299 Snapshot(std:",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:80601,Modifiability,variab,variable,80601,"//////////////////////////////////////////////////////////////; 1425 /// \brief Save selected columns in memory.; 1426 /// \tparam ColumnTypes variadic list of branch/column types.; 1427 /// \param[in] columnList columns to be cached in memory.; 1428 /// \return a `RDataFrame` that wraps the cached dataset.; 1429 ///; 1430 /// This action returns a new `RDataFrame` object, completely detached from; 1431 /// the originating `RDataFrame`. The new dataframe only contains the cached; 1432 /// columns and stores their content in memory for fast, zero-copy subsequent access.; 1433 ///; 1434 /// Use `Cache` if you know you will only need a subset of the (`Filter`ed) data that; 1435 /// fits in memory and that will be accessed many times.; 1436 ///; 1437 /// \note Cache will refuse to process columns with names of the form `#columnname`. These are special columns; 1438 /// made available by some data sources (e.g. RNTupleDS) that represent the size of column `columnname`, and are; 1439 /// not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an; 1440 /// Alias(): `df.Alias(""nbar"", ""#bar"").Cache<std::size_t>(..., {""nbar""})`.; 1441 ///; 1442 /// ### Example usage:; 1443 ///; 1444 /// **Types and columns specified:**; 1445 /// ~~~{.cpp}; 1446 /// auto cache_some_cols_df = df.Cache<double, MyClass, int>({""col0"", ""col1"", ""col2""});; 1447 /// ~~~; 1448 ///; 1449 /// **Types inferred and columns specified (this invocation relies on jitting):**; 1450 /// ~~~{.cpp}; 1451 /// auto cache_some_cols_df = df.Cache({""col0"", ""col1"", ""col2""});; 1452 /// ~~~; 1453 ///; 1454 /// **Types inferred and columns selected with a regexp (this invocation relies on jitting):**; 1455 /// ~~~{.cpp}; 1456 /// auto cache_all_cols_df = df.Cache(myRegexp);; 1457 /// ~~~; 1458 template <typename... ColumnTypes>; 1459 RInterface<RLoopManager> Cache(const ColumnNames_t &columnList); 1460 {; 1461 auto staticSeq = std::make_index_sequence<sizeof...(ColumnTypes)>",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:141392,Modifiability,inherit,inherit,141392,"template <typename V1, typename V2, typename V3, typename W>; 2496 RResultPtr<::TProfile2D> Profile2D(const TProfile2DModel &model); 2497 {; 2498 return Profile2D<V1, V2, V3, W>(model, """", """", """", """");; 2499 }; 2500 ; 2501 ////////////////////////////////////////////////////////////////////////////; 2502 /// \brief Return an object of type T on which `T::Fill` will be called once per event (*lazy action*).; 2503 ///; 2504 /// Type T must provide at least:; 2505 /// - a copy-constructor; 2506 /// - a `Fill` method that accepts as many arguments and with same types as the column names passed as columnList; 2507 /// (these types can also be passed as template parameters to this method); 2508 /// - a `Merge` method with signature `Merge(TCollection *)` or `Merge(const std::vector<T *>&)` that merges the; 2509 /// objects passed as argument into the object on which `Merge` was called (an analogous of TH1::Merge). Note that; 2510 /// if the signature that takes a `TCollection*` is used, then T must inherit from TObject (to allow insertion in; 2511 /// the TCollection*).; 2512 ///; 2513 /// \tparam FirstColumn The first type of the column the values of which are used to fill the object. Inferred together with OtherColumns if not present.; 2514 /// \tparam OtherColumns A list of the other types of the columns the values of which are used to fill the object.; 2515 /// \tparam T The type of the object to fill. Automatically deduced.; 2516 /// \param[in] model The model to be considered to build the new return value.; 2517 /// \param[in] columnList A list containing the names of the columns that will be passed when calling `Fill`; 2518 /// \return the filled object wrapped in a RResultPtr.; 2519 ///; 2520 /// The user gives up ownership of the model object.; 2521 /// The list of column names to be used for filling must always be specified.; 2522 /// This action is *lazy*: upon invocation of this method the calculation is booked but not executed.; 2523 /// Also see RResultPtr.; ",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:158055,Modifiability,variab,variable,158055,"filters names.; 2815 ///; 2816 /// If called on a root node, all the filters in the computation graph will; 2817 /// be printed. For any other node, only the filters upstream of that node.; 2818 /// Filters without a name are printed as ""Unnamed Filter""; 2819 /// This is not an action nor a transformation, just a query to the RDataFrame object.; 2820 ///; 2821 /// ### Example usage:; 2822 /// ~~~{.cpp}; 2823 /// auto filtNames = d.GetFilterNames();; 2824 /// for (auto &&filtName : filtNames) std::cout << filtName << std::endl;; 2825 /// ~~~; 2826 ///; 2827 std::vector<std::string> GetFilterNames() { return RDFInternal::GetFilterNames(fProxiedPtr); }; 2828 ; 2829 // clang-format off; 2830 ////////////////////////////////////////////////////////////////////////////; 2831 /// \brief Execute a user-defined accumulation operation on the processed column values in each processing slot.; 2832 /// \tparam F The type of the aggregator callable. Automatically deduced.; 2833 /// \tparam U The type of the aggregator variable. Must be default-constructible, copy-constructible and copy-assignable. Automatically deduced.; 2834 /// \tparam T The type of the column to apply the reduction to. Automatically deduced.; 2835 /// \param[in] aggregator A callable with signature `U(U,T)` or `void(U&,T)`, where T is the type of the column, U is the type of the aggregator variable; 2836 /// \param[in] merger A callable with signature `U(U,U)` or `void(std::vector<U>&)` used to merge the results of the accumulations of each thread; 2837 /// \param[in] columnName The column to be aggregated. If omitted, the first default column is used instead.; 2838 /// \param[in] aggIdentity The aggregator variable of each thread is initialized to this value (or is default-constructed if the parameter is omitted); 2839 /// \return the result of the aggregation wrapped in a RResultPtr.; 2840 ///; 2841 /// An aggregator callable takes two values, an aggregator variable and a column value. The aggregator variable",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:158403,Modifiability,variab,variable,158403,"pp}; 2823 /// auto filtNames = d.GetFilterNames();; 2824 /// for (auto &&filtName : filtNames) std::cout << filtName << std::endl;; 2825 /// ~~~; 2826 ///; 2827 std::vector<std::string> GetFilterNames() { return RDFInternal::GetFilterNames(fProxiedPtr); }; 2828 ; 2829 // clang-format off; 2830 ////////////////////////////////////////////////////////////////////////////; 2831 /// \brief Execute a user-defined accumulation operation on the processed column values in each processing slot.; 2832 /// \tparam F The type of the aggregator callable. Automatically deduced.; 2833 /// \tparam U The type of the aggregator variable. Must be default-constructible, copy-constructible and copy-assignable. Automatically deduced.; 2834 /// \tparam T The type of the column to apply the reduction to. Automatically deduced.; 2835 /// \param[in] aggregator A callable with signature `U(U,T)` or `void(U&,T)`, where T is the type of the column, U is the type of the aggregator variable; 2836 /// \param[in] merger A callable with signature `U(U,U)` or `void(std::vector<U>&)` used to merge the results of the accumulations of each thread; 2837 /// \param[in] columnName The column to be aggregated. If omitted, the first default column is used instead.; 2838 /// \param[in] aggIdentity The aggregator variable of each thread is initialized to this value (or is default-constructed if the parameter is omitted); 2839 /// \return the result of the aggregation wrapped in a RResultPtr.; 2840 ///; 2841 /// An aggregator callable takes two values, an aggregator variable and a column value. The aggregator variable is; 2842 /// initialized to aggIdentity or default-constructed if aggIdentity is omitted.; 2843 /// This action calls the aggregator callable for each processed entry, passing in the aggregator variable and; 2844 /// the value of the column columnName.; 2845 /// If the signature is `U(U,T)` the aggregator variable is then copy-assigned the result of the execution of the callable.; 2846 /// Otherwis",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:158727,Modifiability,variab,variable,158727,"///////////////; 2831 /// \brief Execute a user-defined accumulation operation on the processed column values in each processing slot.; 2832 /// \tparam F The type of the aggregator callable. Automatically deduced.; 2833 /// \tparam U The type of the aggregator variable. Must be default-constructible, copy-constructible and copy-assignable. Automatically deduced.; 2834 /// \tparam T The type of the column to apply the reduction to. Automatically deduced.; 2835 /// \param[in] aggregator A callable with signature `U(U,T)` or `void(U&,T)`, where T is the type of the column, U is the type of the aggregator variable; 2836 /// \param[in] merger A callable with signature `U(U,U)` or `void(std::vector<U>&)` used to merge the results of the accumulations of each thread; 2837 /// \param[in] columnName The column to be aggregated. If omitted, the first default column is used instead.; 2838 /// \param[in] aggIdentity The aggregator variable of each thread is initialized to this value (or is default-constructed if the parameter is omitted); 2839 /// \return the result of the aggregation wrapped in a RResultPtr.; 2840 ///; 2841 /// An aggregator callable takes two values, an aggregator variable and a column value. The aggregator variable is; 2842 /// initialized to aggIdentity or default-constructed if aggIdentity is omitted.; 2843 /// This action calls the aggregator callable for each processed entry, passing in the aggregator variable and; 2844 /// the value of the column columnName.; 2845 /// If the signature is `U(U,T)` the aggregator variable is then copy-assigned the result of the execution of the callable.; 2846 /// Otherwise the signature of aggregator must be `void(U&,T)`.; 2847 ///; 2848 /// The merger callable is used to merge the partial accumulation results of each processing thread. It is only called in multi-thread executions.; 2849 /// If its signature is `U(U,U)` the aggregator variables of each thread are merged two by two.; 2850 /// If its signature is `void(st",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:158984,Modifiability,variab,variable,158984,"the aggregator callable. Automatically deduced.; 2833 /// \tparam U The type of the aggregator variable. Must be default-constructible, copy-constructible and copy-assignable. Automatically deduced.; 2834 /// \tparam T The type of the column to apply the reduction to. Automatically deduced.; 2835 /// \param[in] aggregator A callable with signature `U(U,T)` or `void(U&,T)`, where T is the type of the column, U is the type of the aggregator variable; 2836 /// \param[in] merger A callable with signature `U(U,U)` or `void(std::vector<U>&)` used to merge the results of the accumulations of each thread; 2837 /// \param[in] columnName The column to be aggregated. If omitted, the first default column is used instead.; 2838 /// \param[in] aggIdentity The aggregator variable of each thread is initialized to this value (or is default-constructed if the parameter is omitted); 2839 /// \return the result of the aggregation wrapped in a RResultPtr.; 2840 ///; 2841 /// An aggregator callable takes two values, an aggregator variable and a column value. The aggregator variable is; 2842 /// initialized to aggIdentity or default-constructed if aggIdentity is omitted.; 2843 /// This action calls the aggregator callable for each processed entry, passing in the aggregator variable and; 2844 /// the value of the column columnName.; 2845 /// If the signature is `U(U,T)` the aggregator variable is then copy-assigned the result of the execution of the callable.; 2846 /// Otherwise the signature of aggregator must be `void(U&,T)`.; 2847 ///; 2848 /// The merger callable is used to merge the partial accumulation results of each processing thread. It is only called in multi-thread executions.; 2849 /// If its signature is `U(U,U)` the aggregator variables of each thread are merged two by two.; 2850 /// If its signature is `void(std::vector<U>& a)` it is assumed that it merges all aggregators in a[0].; 2851 ///; 2852 /// This action is *lazy*: upon invocation of this method the calculation is bo",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:159028,Modifiability,variab,variable,159028," be default-constructible, copy-constructible and copy-assignable. Automatically deduced.; 2834 /// \tparam T The type of the column to apply the reduction to. Automatically deduced.; 2835 /// \param[in] aggregator A callable with signature `U(U,T)` or `void(U&,T)`, where T is the type of the column, U is the type of the aggregator variable; 2836 /// \param[in] merger A callable with signature `U(U,U)` or `void(std::vector<U>&)` used to merge the results of the accumulations of each thread; 2837 /// \param[in] columnName The column to be aggregated. If omitted, the first default column is used instead.; 2838 /// \param[in] aggIdentity The aggregator variable of each thread is initialized to this value (or is default-constructed if the parameter is omitted); 2839 /// \return the result of the aggregation wrapped in a RResultPtr.; 2840 ///; 2841 /// An aggregator callable takes two values, an aggregator variable and a column value. The aggregator variable is; 2842 /// initialized to aggIdentity or default-constructed if aggIdentity is omitted.; 2843 /// This action calls the aggregator callable for each processed entry, passing in the aggregator variable and; 2844 /// the value of the column columnName.; 2845 /// If the signature is `U(U,T)` the aggregator variable is then copy-assigned the result of the execution of the callable.; 2846 /// Otherwise the signature of aggregator must be `void(U&,T)`.; 2847 ///; 2848 /// The merger callable is used to merge the partial accumulation results of each processing thread. It is only called in multi-thread executions.; 2849 /// If its signature is `U(U,U)` the aggregator variables of each thread are merged two by two.; 2850 /// If its signature is `void(std::vector<U>& a)` it is assumed that it merges all aggregators in a[0].; 2851 ///; 2852 /// This action is *lazy*: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr.; 2853 ///; 2854 /// Example usage:; 2855 /// ~~~{.cpp}; 2856 /// ",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:159231,Modifiability,variab,variable,159231,"ply the reduction to. Automatically deduced.; 2835 /// \param[in] aggregator A callable with signature `U(U,T)` or `void(U&,T)`, where T is the type of the column, U is the type of the aggregator variable; 2836 /// \param[in] merger A callable with signature `U(U,U)` or `void(std::vector<U>&)` used to merge the results of the accumulations of each thread; 2837 /// \param[in] columnName The column to be aggregated. If omitted, the first default column is used instead.; 2838 /// \param[in] aggIdentity The aggregator variable of each thread is initialized to this value (or is default-constructed if the parameter is omitted); 2839 /// \return the result of the aggregation wrapped in a RResultPtr.; 2840 ///; 2841 /// An aggregator callable takes two values, an aggregator variable and a column value. The aggregator variable is; 2842 /// initialized to aggIdentity or default-constructed if aggIdentity is omitted.; 2843 /// This action calls the aggregator callable for each processed entry, passing in the aggregator variable and; 2844 /// the value of the column columnName.; 2845 /// If the signature is `U(U,T)` the aggregator variable is then copy-assigned the result of the execution of the callable.; 2846 /// Otherwise the signature of aggregator must be `void(U&,T)`.; 2847 ///; 2848 /// The merger callable is used to merge the partial accumulation results of each processing thread. It is only called in multi-thread executions.; 2849 /// If its signature is `U(U,U)` the aggregator variables of each thread are merged two by two.; 2850 /// If its signature is `void(std::vector<U>& a)` it is assumed that it merges all aggregators in a[0].; 2851 ///; 2852 /// This action is *lazy*: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr.; 2853 ///; 2854 /// Example usage:; 2855 /// ~~~{.cpp}; 2856 /// auto aggregator = [](double acc, double x) { return acc * x; };; 2857 /// ROOT::EnableImplicitMT();; 2858 /// // If multithread is enabled,",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:159344,Modifiability,variab,variable,159344,"e of the column, U is the type of the aggregator variable; 2836 /// \param[in] merger A callable with signature `U(U,U)` or `void(std::vector<U>&)` used to merge the results of the accumulations of each thread; 2837 /// \param[in] columnName The column to be aggregated. If omitted, the first default column is used instead.; 2838 /// \param[in] aggIdentity The aggregator variable of each thread is initialized to this value (or is default-constructed if the parameter is omitted); 2839 /// \return the result of the aggregation wrapped in a RResultPtr.; 2840 ///; 2841 /// An aggregator callable takes two values, an aggregator variable and a column value. The aggregator variable is; 2842 /// initialized to aggIdentity or default-constructed if aggIdentity is omitted.; 2843 /// This action calls the aggregator callable for each processed entry, passing in the aggregator variable and; 2844 /// the value of the column columnName.; 2845 /// If the signature is `U(U,T)` the aggregator variable is then copy-assigned the result of the execution of the callable.; 2846 /// Otherwise the signature of aggregator must be `void(U&,T)`.; 2847 ///; 2848 /// The merger callable is used to merge the partial accumulation results of each processing thread. It is only called in multi-thread executions.; 2849 /// If its signature is `U(U,U)` the aggregator variables of each thread are merged two by two.; 2850 /// If its signature is `void(std::vector<U>& a)` it is assumed that it merges all aggregators in a[0].; 2851 ///; 2852 /// This action is *lazy*: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr.; 2853 ///; 2854 /// Example usage:; 2855 /// ~~~{.cpp}; 2856 /// auto aggregator = [](double acc, double x) { return acc * x; };; 2857 /// ROOT::EnableImplicitMT();; 2858 /// // If multithread is enabled, the aggregator function will be called by more threads; 2859 /// // and will produce a vector of partial accumulators.; 2860 /// // The merger fu",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:159707,Modifiability,variab,variables,159707,"Identity The aggregator variable of each thread is initialized to this value (or is default-constructed if the parameter is omitted); 2839 /// \return the result of the aggregation wrapped in a RResultPtr.; 2840 ///; 2841 /// An aggregator callable takes two values, an aggregator variable and a column value. The aggregator variable is; 2842 /// initialized to aggIdentity or default-constructed if aggIdentity is omitted.; 2843 /// This action calls the aggregator callable for each processed entry, passing in the aggregator variable and; 2844 /// the value of the column columnName.; 2845 /// If the signature is `U(U,T)` the aggregator variable is then copy-assigned the result of the execution of the callable.; 2846 /// Otherwise the signature of aggregator must be `void(U&,T)`.; 2847 ///; 2848 /// The merger callable is used to merge the partial accumulation results of each processing thread. It is only called in multi-thread executions.; 2849 /// If its signature is `U(U,U)` the aggregator variables of each thread are merged two by two.; 2850 /// If its signature is `void(std::vector<U>& a)` it is assumed that it merges all aggregators in a[0].; 2851 ///; 2852 /// This action is *lazy*: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr.; 2853 ///; 2854 /// Example usage:; 2855 /// ~~~{.cpp}; 2856 /// auto aggregator = [](double acc, double x) { return acc * x; };; 2857 /// ROOT::EnableImplicitMT();; 2858 /// // If multithread is enabled, the aggregator function will be called by more threads; 2859 /// // and will produce a vector of partial accumulators.; 2860 /// // The merger function performs the final aggregation of these partial results.; 2861 /// auto merger = [](std::vector<double> &accumulators) {; 2862 /// for (auto i : ROOT::TSeqU(1u, accumulators.size())) {; 2863 /// accumulators[0] *= accumulators[i];; 2864 /// }; 2865 /// };; 2866 ///; 2867 /// // The accumulator is initialized at this value by every thread.; ",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:162653,Modifiability,variab,variable,162653,"string(columnName)});; 2883 ; 2884 const auto validColumnNames = GetValidatedColumnNames(1, columns);; 2885 CheckAndFillDSColumns(validColumnNames, TTraits::TypeList<T>());; 2886 ; 2887 auto accObjPtr = std::make_shared<U>(aggIdentity);; 2888 using Helper_t = RDFInternal::AggregateHelper<AccFun, MergeFun, R, T, U>;; 2889 using Action_t = RDFInternal::RAction<Helper_t, Proxied>;; 2890 auto action = std::make_unique<Action_t>(; 2891 Helper_t(std::move(aggregator), std::move(merger), accObjPtr, fLoopManager->GetNSlots()), validColumnNames,; 2892 fProxiedPtr, fColRegister);; 2893 return MakeResultPtr(accObjPtr, *fLoopManager, std::move(action));; 2894 }; 2895 ; 2896 // clang-format off; 2897 ////////////////////////////////////////////////////////////////////////////; 2898 /// \brief Execute a user-defined accumulation operation on the processed column values in each processing slot.; 2899 /// \tparam F The type of the aggregator callable. Automatically deduced.; 2900 /// \tparam U The type of the aggregator variable. Must be default-constructible, copy-constructible and copy-assignable. Automatically deduced.; 2901 /// \tparam T The type of the column to apply the reduction to. Automatically deduced.; 2902 /// \param[in] aggregator A callable with signature `U(U,T)` or `void(U,T)`, where T is the type of the column, U is the type of the aggregator variable; 2903 /// \param[in] merger A callable with signature `U(U,U)` or `void(std::vector<U>&)` used to merge the results of the accumulations of each thread; 2904 /// \param[in] columnName The column to be aggregated. If omitted, the first default column is used instead.; 2905 /// \return the result of the aggregation wrapped in a RResultPtr.; 2906 ///; 2907 /// See previous Aggregate overload for more information.; 2908 // clang-format on; 2909 template <typename AccFun, typename MergeFun, typename R = typename TTraits::CallableTraits<AccFun>::ret_type,; 2910 typename ArgTypes = typename TTraits::CallableTraits<AccFun>::a",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:163000,Modifiability,variab,variable,163000,"td::make_unique<Action_t>(; 2891 Helper_t(std::move(aggregator), std::move(merger), accObjPtr, fLoopManager->GetNSlots()), validColumnNames,; 2892 fProxiedPtr, fColRegister);; 2893 return MakeResultPtr(accObjPtr, *fLoopManager, std::move(action));; 2894 }; 2895 ; 2896 // clang-format off; 2897 ////////////////////////////////////////////////////////////////////////////; 2898 /// \brief Execute a user-defined accumulation operation on the processed column values in each processing slot.; 2899 /// \tparam F The type of the aggregator callable. Automatically deduced.; 2900 /// \tparam U The type of the aggregator variable. Must be default-constructible, copy-constructible and copy-assignable. Automatically deduced.; 2901 /// \tparam T The type of the column to apply the reduction to. Automatically deduced.; 2902 /// \param[in] aggregator A callable with signature `U(U,T)` or `void(U,T)`, where T is the type of the column, U is the type of the aggregator variable; 2903 /// \param[in] merger A callable with signature `U(U,U)` or `void(std::vector<U>&)` used to merge the results of the accumulations of each thread; 2904 /// \param[in] columnName The column to be aggregated. If omitted, the first default column is used instead.; 2905 /// \return the result of the aggregation wrapped in a RResultPtr.; 2906 ///; 2907 /// See previous Aggregate overload for more information.; 2908 // clang-format on; 2909 template <typename AccFun, typename MergeFun, typename R = typename TTraits::CallableTraits<AccFun>::ret_type,; 2910 typename ArgTypes = typename TTraits::CallableTraits<AccFun>::arg_types,; 2911 typename U = TTraits::TakeFirstParameter_t<ArgTypes>,; 2912 typename T = TTraits::TakeFirstParameter_t<TTraits::RemoveFirstParameter_t<ArgTypes>>>; 2913 RResultPtr<U> Aggregate(AccFun aggregator, MergeFun merger, std::string_view columnName = """"); 2914 {; 2915 static_assert(; 2916 std::is_default_constructible<U>::value,; 2917 ""aggregated object cannot be default-constructed. Please",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:165394,Modifiability,inherit,inherit,165394,"// \tparam FirstColumn The type of the first column used by this action. Inferred together with OtherColumns if not present.; 2925 /// \tparam OtherColumns A list of the types of the other columns used by this action; 2926 /// \tparam Helper The type of the user-defined helper. See below for the required interface it should expose.; 2927 /// \param[in] helper The Action Helper to be scheduled.; 2928 /// \param[in] columns The names of the columns on which the helper acts.; 2929 /// \return the result of the helper wrapped in a RResultPtr.; 2930 ///; 2931 /// This method books a custom action for execution. The behavior of the action is completely dependent on the; 2932 /// Helper object provided by the caller. The required interface for the helper is described below (more; 2933 /// methods that the ones required can be present, e.g. a constructor that takes the number of worker threads is usually useful):; 2934 ///; 2935 /// ### Mandatory interface; 2936 ///; 2937 /// * `Helper` must publicly inherit from `ROOT::Detail::RDF::RActionImpl<Helper>`; 2938 /// * `Helper::Result_t`: public alias for the type of the result of this action helper. `Result_t` must be default-constructible.; 2939 /// * `Helper(Helper &&)`: a move-constructor is required. Copy-constructors are discouraged.; 2940 /// * `std::shared_ptr<Result_t> GetResultPtr() const`: return a shared_ptr to the result of this action (of type; 2941 /// Result_t). The RResultPtr returned by Book will point to this object. Note that this method can be called; 2942 /// _before_ Initialize(), because the RResultPtr is constructed before the event loop is started.; 2943 /// * `void Initialize()`: this method is called once before starting the event-loop. Useful for setup operations.; 2944 /// It must reset the state of the helper to the expected state at the beginning of the event loop: the same helper,; 2945 /// or copies of it, might be used for multiple event loops (e.g. in the presence of systematic variations).; ",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:169985,Modifiability,inherit,inherit,169985,"iled; 2973 /// by RDataFrame. In that case the Helper class needs to be known to the ROOT interpreter.; 2974 ///; 2975 /// This action is *lazy*: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr.; 2976 ///; 2977 /// ### Examples; 2978 /// See [this tutorial](https://root.cern/doc/master/df018__customActions_8C.html) for an example implementation of an action helper.; 2979 ///; 2980 /// It is also possible to inspect the code used by built-in RDataFrame actions at ActionHelpers.hxx.; 2981 ///; 2982 // clang-format on; 2983 template <typename FirstColumn = RDFDetail::RInferredType, typename... OtherColumns, typename Helper>; 2984 RResultPtr<typename std::decay_t<Helper>::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}); 2985 {; 2986 using HelperT = std::decay_t<Helper>;; 2987 // TODO add more static sanity checks on Helper; 2988 using AH = RDFDetail::RActionImpl<HelperT>;; 2989 static_assert(std::is_base_of<AH, HelperT>::value && std::is_convertible<HelperT *, AH *>::value,; 2990 ""Action helper of type T must publicly inherit from ROOT::Detail::RDF::RActionImpl<T>"");; 2991 ; 2992 auto hPtr = std::make_shared<HelperT>(std::forward<Helper>(helper));; 2993 auto resPtr = hPtr->GetResultPtr();; 2994 ; 2995 if (std::is_same<FirstColumn, RDFDetail::RInferredType>::value && columns.empty()) {; 2996 return CallCreateActionWithoutColsIfPossible<HelperT>(resPtr, hPtr, TTraits::TypeList<FirstColumn>{});; 2997 } else {; 2998 return CreateAction<RDFInternal::ActionTags::Book, FirstColumn, OtherColumns...>(columns, resPtr, hPtr,; 2999 fProxiedPtr, columns.size());; 3000 }; 3001 }; 3002 ; 3003 ////////////////////////////////////////////////////////////////////////////; 3004 /// \brief Provides a representation of the columns in the dataset.; 3005 /// \tparam ColumnTypes variadic list of branch/column types.; 3006 /// \param[in] columnList Names of the columns to be displayed.; 3007 /// \param[in] nRows Number of events f",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:217924,Modifiability,variab,variable,217924,"t > Vary(std::initializer_list< std::string > colNames, std::string_view expression, std::size_t nVariations, std::string_view variationName)Register systematic variations for multiple existing columns using auto-generated variation tags.Definition RInterface.hxx:1168; ROOT::RDF::RLazyDSA RDataSource implementation which is built on top of result proxies.Definition RLazyDSImpl.hxx:41; ROOT::RDF::RResultPtrSmart pointer for the return type of actions.Definition RResultPtr.hxx:119; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TypeTraits::RemoveFirstParameter_ttypename RemoveFirstParameter< T >::type RemoveFirstParameter_tDefinition TypeTraits.hxx:169; TDirectory::TContextTDirectory::TContext keeps track and restore the current directory.Definition TDirectory.h:89; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TStatisticStatistical variable, defined by its mean and variance (RMS).Definition TStatistic.h:33; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; F#define F(x, y, z); ROOT::Detail::RDFDefinition RooAbsDataHelper.h:80; ROOT::Detail::RDF::CreateLMFromTTreestd::shared_ptr< ROOT::Detail::RDF::RLoopManager > CreateLMFromTTree(std::string_view datasetName, std::string_view fileNameGlob, const std::vector< std::string > &defaultColumns, bool checkFile=true)Create an RLoopManager that reads a TChain.Definition RLoopManager.cxx:1189; ROOT::Internal::RDFDefinition RArrowDS.hxx:23; ROOT::Internal::RDF::CheckForNoVariationsvoid CheckForNoVariations(const std::string &where, std::string_view definedColView, const RColumnRegister &colRegister)Throw if the column has systematic variations attached.Definition RDFInterfaceUtils.cxx:548; ROOT::Internal::RDF::ParseTreePathParsedTreePath ParseTreePath(std::string_view fullTreeName)Definition RDFInterfaceUtils.cxx:635; ROOT::Internal::RDF::CheckForRedefiniti",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:223775,Modifiability,variab,variable-sized,223775,"ionJitstd::shared_ptr< RJittedVariation > BookVariationJit(const std::vector< std::string > &colNames, std::string_view variationName, const std::vector< std::string > &variationTags, std::string_view expression, RLoopManager &lm, RDataSource *ds, const RColumnRegister &colRegister, const ColumnNames_t &branches, std::shared_ptr< RNodeBase > *upcastNodeOnHeap, bool isSingleColumn)Book the jitting of a Vary call.Definition RDFInterfaceUtils.cxx:782; ROOT::Internal::RDF::CheckForDuplicateSnapshotColumnsvoid CheckForDuplicateSnapshotColumns(const ColumnNames_t &cols)Definition RDFInterfaceUtils.cxx:985; ROOT::Internal::RDF::ConvertRegexToColumnsColumnNames_t ConvertRegexToColumns(const ColumnNames_t &colNames, std::string_view columnNameRegexp, std::string_view callerName)Definition RDFInterfaceUtils.cxx:450; ROOT::Internal::RDF::AddSizeBranchesstd::pair< std::vector< std::string >, std::vector< std::string > > AddSizeBranches(const std::vector< std::string > &branches, TTree *tree, std::vector< std::string > &&colsWithoutAliases, std::vector< std::string > &&colsWithAliases)Return copies of colsWithoutAliases and colsWithAliases with size branches for variable-sized array b...Definition RDFInterfaceUtils.cxx:1001; ROOT::Internal::RDF::BookDefinePerSampleJitstd::shared_ptr< RJittedDefine > BookDefinePerSampleJit(std::string_view name, std::string_view expression, RLoopManager &lm, const RColumnRegister &colRegister, std::shared_ptr< RNodeBase > *upcastNodeOnHeap)Book the jitting of a DefinePerSample call.Definition RDFInterfaceUtils.cxx:750; ROOT::Internal::TreeUtils::GetTopLevelBranchNamesstd::vector< std::string > GetTopLevelBranchNames(TTree &t)Get all the top-level branches names, including the ones of the friend trees.Definition InternalTreeUtils.cxx:74; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOT::RDF::RNodeRInterface<::ROOT::Detail::RDF::RNodeBase, void > RNodeDefinition InterfaceUtils.hxx:57; ROOT::RDF::ColumnNames_tstd::vector< std::string ",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:6744,Performance,perform,performance,6744,"f Move-ctor for RInterface.; 141 RInterface(RInterface &&) = default;; 142 ; 143 ////////////////////////////////////////////////////////////////////////////; 144 /// \brief Move-assignment operator for RInterface.; 145 RInterface &operator=(RInterface &&) = default;; 146 ; 147 ////////////////////////////////////////////////////////////////////////////; 148 /// \brief Build a RInterface from a RLoopManager.; 149 /// This constructor is only available for RInterface<RLoopManager>.; 150 template <typename T = Proxied, typename = std::enable_if_t<std::is_same<T, RLoopManager>::value, int>>; 151 RInterface(const std::shared_ptr<RLoopManager> &proxied) : RInterfaceBase(proxied), fProxiedPtr(proxied); 152 {; 153 }; 154 ; 155 ////////////////////////////////////////////////////////////////////////////; 156 /// \brief Cast any RDataFrame node to a common type ROOT::RDF::RNode.; 157 /// Different RDataFrame methods return different C++ types. All nodes, however,; 158 /// can be cast to this common type at the cost of a small performance penalty.; 159 /// This allows, for example, storing RDataFrame nodes in a vector, or passing them; 160 /// around via (non-template, C++11) helper functions.; 161 /// Example usage:; 162 /// ~~~{.cpp}; 163 /// // a function that conditionally adds a Range to a RDataFrame node.; 164 /// RNode MaybeAddRange(RNode df, bool mustAddRange); 165 /// {; 166 /// return mustAddRange ? df.Range(1) : df;; 167 /// }; 168 /// // use as :; 169 /// ROOT::RDataFrame df(10);; 170 /// auto maybeRanged = MaybeAddRange(df, true);; 171 /// ~~~; 172 /// Note that it is not a problem to pass RNode's by value.; 173 operator RNode() const; 174 {; 175 return RNode(std::static_pointer_cast<::ROOT::Detail::RDF::RNodeBase>(fProxiedPtr), *fLoopManager, fColRegister);; 176 }; 177 ; 178 ////////////////////////////////////////////////////////////////////////////; 179 /// \brief Append a filter to the call graph.; 180 /// \param[in] f Function, lambda expression, functor clas",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:8373,Performance,multi-thread,multi-threading,8373,"Node's by value.; 173 operator RNode() const; 174 {; 175 return RNode(std::static_pointer_cast<::ROOT::Detail::RDF::RNodeBase>(fProxiedPtr), *fLoopManager, fColRegister);; 176 }; 177 ; 178 ////////////////////////////////////////////////////////////////////////////; 179 /// \brief Append a filter to the call graph.; 180 /// \param[in] f Function, lambda expression, functor class or any other callable object. It must return a `bool`; 181 /// signalling whether the event has passed the selection (true) or not (false).; 182 /// \param[in] columns Names of the columns/branches in input to the filter function.; 183 /// \param[in] name Optional name of this filter. See `Report`.; 184 /// \return the filter node of the computation graph.; 185 ///; 186 /// Append a filter node at the point of the call graph corresponding to the; 187 /// object this method is called on.; 188 /// The callable `f` should not have side-effects (e.g. modification of an; 189 /// external or static variable) to ensure correct results when implicit; 190 /// multi-threading is active.; 191 ///; 192 /// RDataFrame only evaluates filters when necessary: if multiple filters; 193 /// are chained one after another, they are executed in order and the first; 194 /// one returning false causes the event to be discarded.; 195 /// Even if multiple actions or transformations depend on the same filter,; 196 /// it is executed once per entry. If its result is requested more than; 197 /// once, the cached result is served.; 198 ///; 199 /// ### Example usage:; 200 /// ~~~{.cpp}; 201 /// // C++ callable (function, functor class, lambda...) that takes two parameters of the types of ""x"" and ""y""; 202 /// auto filtered = df.Filter(myCut, {""x"", ""y""});; 203 ///; 204 /// // String: it must contain valid C++ except that column names can be used instead of variable names; 205 /// auto filtered = df.Filter(""x*y > 0"");; 206 /// ~~~; 207 ///; 208 /// \note If the body of the string expression contains an explicit `return` stat",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:8808,Performance,cache,cached,8808,"ther the event has passed the selection (true) or not (false).; 182 /// \param[in] columns Names of the columns/branches in input to the filter function.; 183 /// \param[in] name Optional name of this filter. See `Report`.; 184 /// \return the filter node of the computation graph.; 185 ///; 186 /// Append a filter node at the point of the call graph corresponding to the; 187 /// object this method is called on.; 188 /// The callable `f` should not have side-effects (e.g. modification of an; 189 /// external or static variable) to ensure correct results when implicit; 190 /// multi-threading is active.; 191 ///; 192 /// RDataFrame only evaluates filters when necessary: if multiple filters; 193 /// are chained one after another, they are executed in order and the first; 194 /// one returning false causes the event to be discarded.; 195 /// Even if multiple actions or transformations depend on the same filter,; 196 /// it is executed once per entry. If its result is requested more than; 197 /// once, the cached result is served.; 198 ///; 199 /// ### Example usage:; 200 /// ~~~{.cpp}; 201 /// // C++ callable (function, functor class, lambda...) that takes two parameters of the types of ""x"" and ""y""; 202 /// auto filtered = df.Filter(myCut, {""x"", ""y""});; 203 ///; 204 /// // String: it must contain valid C++ except that column names can be used instead of variable names; 205 /// auto filtered = df.Filter(""x*y > 0"");; 206 /// ~~~; 207 ///; 208 /// \note If the body of the string expression contains an explicit `return` statement (even if it is in a nested; 209 /// scope), RDataFrame _will not_ add another one in front of the expression. So this will not work:; 210 /// ~~~{.cpp}; 211 /// df.Filter(""Sum(Map(vec, [](float e) { return e*e > 0.5; }))""); 212 /// ~~~; 213 /// but instead this will:; 214 /// ~~~{.cpp}; 215 /// df.Filter(""return Sum(Map(vec, [](float e) { return e*e > 0.5; }))""); 216 /// ~~~; 217 template <typename F, std::enable_if_t<!std::is_convertible<F, std::st",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:23309,Performance,perform,performant,23309,"functor class or any other callable object producing the defined value. Returns the value that will be assigned to the defined column.; 452 /// \param[in] columns Names of the columns/branches in input to the producer function (excluding the slot number).; 453 /// \return the first node of the computation graph for which the new quantity is defined.; 454 ///; 455 /// This alternative implementation of `Define` is meant as a helper to evaluate new column values in a thread-safe manner.; 456 /// The expression must be a callable of signature R(unsigned int, T1, T2, ...) where `T1, T2...` are the types; 457 /// of the columns that the expression takes as input. The first parameter is reserved for an unsigned integer; 458 /// representing a ""slot number"". RDataFrame guarantees that different threads will invoke the expression with; 459 /// different slot numbers - slot numbers will range from zero to ROOT::GetThreadPoolSize()-1.; 460 ///; 461 /// The following two calls are equivalent, although `DefineSlot` is slightly more performant:; 462 /// ~~~{.cpp}; 463 /// int function(unsigned int, double, double);; 464 /// df.Define(""x"", function, {""rdfslot_"", ""column1"", ""column2""}); 465 /// df.DefineSlot(""x"", function, {""column1"", ""column2""}); 466 /// ~~~; 467 ///; 468 /// See Define() for more information.; 469 template <typename F>; 470 RInterface<Proxied, DS_t> DefineSlot(std::string_view name, F expression, const ColumnNames_t &columns = {}); 471 {; 472 return DefineImpl<F, RDFDetail::ExtraArgsForDefine::Slot>(name, std::move(expression), columns, ""DefineSlot"");; 473 }; 474 // clang-format on; 475 ; 476 // clang-format off; 477 ////////////////////////////////////////////////////////////////////////////; 478 /// \brief Define a new column with a value dependent on the processing slot and the current entry.; 479 /// \param[in] name The name of the defined column.; 480 /// \param[in] expression Function, lambda expression, functor class or any other callable object producing",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:25406,Performance,perform,performant,25406,"\param[in] columns Names of the columns/branches in input to the producer function (excluding slot and entry).; 482 /// \return the first node of the computation graph for which the new quantity is defined.; 483 ///; 484 /// This alternative implementation of `Define` is meant as a helper in writing entry-specific, thread-safe custom; 485 /// columns. The expression must be a callable of signature R(unsigned int, ULong64_t, T1, T2, ...) where `T1, T2...`; 486 /// are the types of the columns that the expression takes as input. The first parameter is reserved for an unsigned; 487 /// integer representing a ""slot number"". RDataFrame guarantees that different threads will invoke the expression with; 488 /// different slot numbers - slot numbers will range from zero to ROOT::GetThreadPoolSize()-1. The second parameter; 489 /// is reserved for a `ULong64_t` representing the current entry being processed by the current thread.; 490 ///; 491 /// The following two `Define`s are equivalent, although `DefineSlotEntry` is slightly more performant:; 492 /// ~~~{.cpp}; 493 /// int function(unsigned int, ULong64_t, double, double);; 494 /// Define(""x"", function, {""rdfslot_"", ""rdfentry_"", ""column1"", ""column2""}); 495 /// DefineSlotEntry(""x"", function, {""column1"", ""column2""}); 496 /// ~~~; 497 ///; 498 /// See Define() for more information.; 499 template <typename F>; 500 RInterface<Proxied, DS_t> DefineSlotEntry(std::string_view name, F expression, const ColumnNames_t &columns = {}); 501 {; 502 return DefineImpl<F, RDFDetail::ExtraArgsForDefine::SlotAndEntry>(name, std::move(expression), columns,; 503 ""DefineSlotEntry"");; 504 }; 505 // clang-format on; 506 ; 507 ////////////////////////////////////////////////////////////////////////////; 508 /// \brief Define a new column.; 509 /// \param[in] name The name of the defined column.; 510 /// \param[in] expression An expression in C++ which represents the defined value; 511 /// \return the first node of the computation graph for which t",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:38310,Performance,multi-thread,multi-thread,38310,"quantity is defined.; 710 ///; 711 /// The signature of the callable passed as second argument should be `T(unsigned int slot, const ROOT::RDF::RSampleInfo &id)`; 712 /// where:; 713 /// - `T` is the type of the defined column; 714 /// - `slot` is a number in the range [0, nThreads) that is different for each processing thread. This can simplify; 715 /// the definition of thread-safe callables if you are interested in using parallel capabilities of RDataFrame.; 716 /// - `id` is an instance of a ROOT::RDF::RSampleInfo object which contains information about the sample which is; 717 /// being processed (see the class docs for more information).; 718 ///; 719 /// DefinePerSample() is useful to e.g. define a quantity that depends on which TTree in which TFile is being; 720 /// processed or to inject a callback into the event loop that is only called when the processing of a new sample; 721 /// starts rather than at every entry.; 722 ///; 723 /// The callable will be invoked once per input TTree or once per multi-thread task, whichever is more often.; 724 ///; 725 /// ### Example usage:; 726 /// ~~~{.cpp}; 727 /// ROOT::RDataFrame df{""mytree"", {""sample1.root"",""sample2.root""}};; 728 /// df.DefinePerSample(""weightbysample"",; 729 /// [](unsigned int slot, const ROOT::RDF::RSampleInfo &id); 730 /// { return id.Contains(""sample1"") ? 1.0f : 2.0f; });; 731 /// ~~~; 732 // clang-format on; 733 // TODO we could SFINAE on F's signature to provide friendlier compilation errors in case of signature mismatch; 734 template <typename F, typename RetType_t = typename TTraits::CallableTraits<F>::ret_type>; 735 RInterface<Proxied, DS_t> DefinePerSample(std::string_view name, F expression); 736 {; 737 RDFInternal::CheckValidCppVarName(name, ""DefinePerSample"");; 738 RDFInternal::CheckForRedefinition(""DefinePerSample"", name, fColRegister, fLoopManager->GetBranchNames(),; 739 fDataSource ? fDataSource->GetColumnNames() : ColumnNames_t{});; 740 ; 741 auto retTypeName = RDFInternal::TypeID2Typ",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:69587,Performance,multi-thread,multi-thread,69587,"top-level branches. For other; 1253 /// types of inputs, all columns returned by GetColumnNames() will be written out. If friend trees or chains are; 1254 /// present, by default all friend top-level branches that have names that do not collide with; 1255 /// names of branches in the main TTree/TChain will be written out. Since v6.24, Snapshot will also write out; 1256 /// friend branches with the same names of branches in the main TTree/TChain with names of the form; 1257 /// `<friendname>_<branchname>` in order to differentiate them from the branches in the main tree/chain.; 1258 ///; 1259 /// ### Writing to a sub-directory; 1260 ///; 1261 /// Snapshot supports writing the TTree in a sub-directory inside the TFile. It is sufficient to specify the path to; 1262 /// the TTree as part of the TTree name, e.g. `df.Snapshot(""subdir/t"", ""f.root"")` write TTree `t` in the; 1263 /// sub-directory `subdir` of file `f.root` (creating file and sub-directory as needed).; 1264 ///; 1265 /// \attention In multi-thread runs (i.e. when EnableImplicitMT() has been called) threads will loop over clusters of; 1266 /// entries in an undefined order, so Snapshot will produce outputs in which (clusters of) entries will be shuffled with; 1267 /// respect to the input TTree. Using such ""shuffled"" TTrees as friends of the original trees would result in wrong; 1268 /// associations between entries in the main TTree and entries in the ""shuffled"" friend. Since v6.22, ROOT will; 1269 /// error out if such a ""shuffled"" TTree is used in a friendship.; 1270 ///; 1271 /// \note In case no events are written out (e.g. because no event passes all filters) the behavior of Snapshot in; 1272 /// single-thread and multi-thread runs is different: in single-thread runs, Snapshot will write out a TTree with; 1273 /// the specified name and zero entries; in multi-thread runs, no TTree object will be written out to disk.; 1274 ///; 1275 /// \note Snapshot will refuse to process columns with names of the form ",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:70285,Performance,multi-thread,multi-thread,70285,"ath to; 1262 /// the TTree as part of the TTree name, e.g. `df.Snapshot(""subdir/t"", ""f.root"")` write TTree `t` in the; 1263 /// sub-directory `subdir` of file `f.root` (creating file and sub-directory as needed).; 1264 ///; 1265 /// \attention In multi-thread runs (i.e. when EnableImplicitMT() has been called) threads will loop over clusters of; 1266 /// entries in an undefined order, so Snapshot will produce outputs in which (clusters of) entries will be shuffled with; 1267 /// respect to the input TTree. Using such ""shuffled"" TTrees as friends of the original trees would result in wrong; 1268 /// associations between entries in the main TTree and entries in the ""shuffled"" friend. Since v6.22, ROOT will; 1269 /// error out if such a ""shuffled"" TTree is used in a friendship.; 1270 ///; 1271 /// \note In case no events are written out (e.g. because no event passes all filters) the behavior of Snapshot in; 1272 /// single-thread and multi-thread runs is different: in single-thread runs, Snapshot will write out a TTree with; 1273 /// the specified name and zero entries; in multi-thread runs, no TTree object will be written out to disk.; 1274 ///; 1275 /// \note Snapshot will refuse to process columns with names of the form `#columnname`. These are special columns; 1276 /// made available by some data sources (e.g. RNTupleDS) that represent the size of column `columnname`, and are; 1277 /// not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an; 1278 /// Alias(): `df.Alias(""nbar"", ""#bar"").Snapshot(..., {""nbar""})`.; 1279 ///; 1280 /// ### Example invocations:; 1281 ///; 1282 /// ~~~{.cpp}; 1283 /// // without specifying template parameters (column types automatically deduced); 1284 /// df.Snapshot(""outputTree"", ""outputFile.root"", {""x"", ""y""});; 1285 ///; 1286 /// // specifying template parameters (""x"" is `int`, ""y"" is `float`); 1287 /// df.Snapshot<int, float>(""outputTree"", ""outputFile.root"", {""x"", ""y""});; 1288 /// ~~~; ",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:70427,Performance,multi-thread,multi-thread,70427,"ath to; 1262 /// the TTree as part of the TTree name, e.g. `df.Snapshot(""subdir/t"", ""f.root"")` write TTree `t` in the; 1263 /// sub-directory `subdir` of file `f.root` (creating file and sub-directory as needed).; 1264 ///; 1265 /// \attention In multi-thread runs (i.e. when EnableImplicitMT() has been called) threads will loop over clusters of; 1266 /// entries in an undefined order, so Snapshot will produce outputs in which (clusters of) entries will be shuffled with; 1267 /// respect to the input TTree. Using such ""shuffled"" TTrees as friends of the original trees would result in wrong; 1268 /// associations between entries in the main TTree and entries in the ""shuffled"" friend. Since v6.22, ROOT will; 1269 /// error out if such a ""shuffled"" TTree is used in a friendship.; 1270 ///; 1271 /// \note In case no events are written out (e.g. because no event passes all filters) the behavior of Snapshot in; 1272 /// single-thread and multi-thread runs is different: in single-thread runs, Snapshot will write out a TTree with; 1273 /// the specified name and zero entries; in multi-thread runs, no TTree object will be written out to disk.; 1274 ///; 1275 /// \note Snapshot will refuse to process columns with names of the form `#columnname`. These are special columns; 1276 /// made available by some data sources (e.g. RNTupleDS) that represent the size of column `columnname`, and are; 1277 /// not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an; 1278 /// Alias(): `df.Alias(""nbar"", ""#bar"").Snapshot(..., {""nbar""})`.; 1279 ///; 1280 /// ### Example invocations:; 1281 ///; 1282 /// ~~~{.cpp}; 1283 /// // without specifying template parameters (column types automatically deduced); 1284 /// df.Snapshot(""outputTree"", ""outputFile.root"", {""x"", ""y""});; 1285 ///; 1286 /// // specifying template parameters (""x"" is `int`, ""y"" is `float`); 1287 /// df.Snapshot<int, float>(""outputTree"", ""outputFile.root"", {""x"", ""y""});; 1288 /// ~~~; ",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:79762,Performance,cache,cached,79762,"tra options to pass to TFile and TTree.; 1409 /// \return a `RDataFrame` that wraps the snapshotted dataset.; 1410 ///; 1411 /// This function returns a `RDataFrame` built with the output tree as a source.; 1412 /// The types of the columns are automatically inferred and do not need to be specified.; 1413 ///; 1414 /// See above for a more complete description and example usages.; 1415 RResultPtr<RInterface<RLoopManager>> Snapshot(std::string_view treename, std::string_view filename,; 1416 std::initializer_list<std::string> columnList,; 1417 const RSnapshotOptions &options = RSnapshotOptions()); 1418 {; 1419 ColumnNames_t selectedColumns(columnList);; 1420 return Snapshot(treename, filename, selectedColumns, options);; 1421 }; 1422 // clang-format on; 1423 ; 1424 ////////////////////////////////////////////////////////////////////////////; 1425 /// \brief Save selected columns in memory.; 1426 /// \tparam ColumnTypes variadic list of branch/column types.; 1427 /// \param[in] columnList columns to be cached in memory.; 1428 /// \return a `RDataFrame` that wraps the cached dataset.; 1429 ///; 1430 /// This action returns a new `RDataFrame` object, completely detached from; 1431 /// the originating `RDataFrame`. The new dataframe only contains the cached; 1432 /// columns and stores their content in memory for fast, zero-copy subsequent access.; 1433 ///; 1434 /// Use `Cache` if you know you will only need a subset of the (`Filter`ed) data that; 1435 /// fits in memory and that will be accessed many times.; 1436 ///; 1437 /// \note Cache will refuse to process columns with names of the form `#columnname`. These are special columns; 1438 /// made available by some data sources (e.g. RNTupleDS) that represent the size of column `columnname`, and are; 1439 /// not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an; 1440 /// Alias(): `df.Alias(""nbar"", ""#bar"").Cache<std::size_t>(..., {""nbar""})`.; 1441 ///; 1442 /// ### Ex",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:79828,Performance,cache,cached,79828,"taFrame` that wraps the snapshotted dataset.; 1410 ///; 1411 /// This function returns a `RDataFrame` built with the output tree as a source.; 1412 /// The types of the columns are automatically inferred and do not need to be specified.; 1413 ///; 1414 /// See above for a more complete description and example usages.; 1415 RResultPtr<RInterface<RLoopManager>> Snapshot(std::string_view treename, std::string_view filename,; 1416 std::initializer_list<std::string> columnList,; 1417 const RSnapshotOptions &options = RSnapshotOptions()); 1418 {; 1419 ColumnNames_t selectedColumns(columnList);; 1420 return Snapshot(treename, filename, selectedColumns, options);; 1421 }; 1422 // clang-format on; 1423 ; 1424 ////////////////////////////////////////////////////////////////////////////; 1425 /// \brief Save selected columns in memory.; 1426 /// \tparam ColumnTypes variadic list of branch/column types.; 1427 /// \param[in] columnList columns to be cached in memory.; 1428 /// \return a `RDataFrame` that wraps the cached dataset.; 1429 ///; 1430 /// This action returns a new `RDataFrame` object, completely detached from; 1431 /// the originating `RDataFrame`. The new dataframe only contains the cached; 1432 /// columns and stores their content in memory for fast, zero-copy subsequent access.; 1433 ///; 1434 /// Use `Cache` if you know you will only need a subset of the (`Filter`ed) data that; 1435 /// fits in memory and that will be accessed many times.; 1436 ///; 1437 /// \note Cache will refuse to process columns with names of the form `#columnname`. These are special columns; 1438 /// made available by some data sources (e.g. RNTupleDS) that represent the size of column `columnname`, and are; 1439 /// not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an; 1440 /// Alias(): `df.Alias(""nbar"", ""#bar"").Cache<std::size_t>(..., {""nbar""})`.; 1441 ///; 1442 /// ### Example usage:; 1443 ///; 1444 /// **Types and columns specified:*",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:80012,Performance,cache,cached,80012,"fied.; 1413 ///; 1414 /// See above for a more complete description and example usages.; 1415 RResultPtr<RInterface<RLoopManager>> Snapshot(std::string_view treename, std::string_view filename,; 1416 std::initializer_list<std::string> columnList,; 1417 const RSnapshotOptions &options = RSnapshotOptions()); 1418 {; 1419 ColumnNames_t selectedColumns(columnList);; 1420 return Snapshot(treename, filename, selectedColumns, options);; 1421 }; 1422 // clang-format on; 1423 ; 1424 ////////////////////////////////////////////////////////////////////////////; 1425 /// \brief Save selected columns in memory.; 1426 /// \tparam ColumnTypes variadic list of branch/column types.; 1427 /// \param[in] columnList columns to be cached in memory.; 1428 /// \return a `RDataFrame` that wraps the cached dataset.; 1429 ///; 1430 /// This action returns a new `RDataFrame` object, completely detached from; 1431 /// the originating `RDataFrame`. The new dataframe only contains the cached; 1432 /// columns and stores their content in memory for fast, zero-copy subsequent access.; 1433 ///; 1434 /// Use `Cache` if you know you will only need a subset of the (`Filter`ed) data that; 1435 /// fits in memory and that will be accessed many times.; 1436 ///; 1437 /// \note Cache will refuse to process columns with names of the form `#columnname`. These are special columns; 1438 /// made available by some data sources (e.g. RNTupleDS) that represent the size of column `columnname`, and are; 1439 /// not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an; 1440 /// Alias(): `df.Alias(""nbar"", ""#bar"").Cache<std::size_t>(..., {""nbar""})`.; 1441 ///; 1442 /// ### Example usage:; 1443 ///; 1444 /// **Types and columns specified:**; 1445 /// ~~~{.cpp}; 1446 /// auto cache_some_cols_df = df.Cache<double, MyClass, int>({""col0"", ""col1"", ""col2""});; 1447 /// ~~~; 1448 ///; 1449 /// **Types inferred and columns specified (this invocation relies on jitting):**; 145",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:81796,Performance,cache,cached,81796,"; 1445 /// ~~~{.cpp}; 1446 /// auto cache_some_cols_df = df.Cache<double, MyClass, int>({""col0"", ""col1"", ""col2""});; 1447 /// ~~~; 1448 ///; 1449 /// **Types inferred and columns specified (this invocation relies on jitting):**; 1450 /// ~~~{.cpp}; 1451 /// auto cache_some_cols_df = df.Cache({""col0"", ""col1"", ""col2""});; 1452 /// ~~~; 1453 ///; 1454 /// **Types inferred and columns selected with a regexp (this invocation relies on jitting):**; 1455 /// ~~~{.cpp}; 1456 /// auto cache_all_cols_df = df.Cache(myRegexp);; 1457 /// ~~~; 1458 template <typename... ColumnTypes>; 1459 RInterface<RLoopManager> Cache(const ColumnNames_t &columnList); 1460 {; 1461 auto staticSeq = std::make_index_sequence<sizeof...(ColumnTypes)>();; 1462 return CacheImpl<ColumnTypes...>(columnList, staticSeq);; 1463 }; 1464 ; 1465 ////////////////////////////////////////////////////////////////////////////; 1466 /// \brief Save selected columns in memory.; 1467 /// \param[in] columnList columns to be cached in memory; 1468 /// \return a `RDataFrame` that wraps the cached dataset.; 1469 ///; 1470 /// See the previous overloads for more information.; 1471 RInterface<RLoopManager> Cache(const ColumnNames_t &columnList); 1472 {; 1473 // Early return: if the list of columns is empty, just return an empty RDF; 1474 // If we proceed, the jitted call will not compile!; 1475 if (columnList.empty()) {; 1476 auto nEntries = *this->Count();; 1477 RInterface<RLoopManager> emptyRDF(std::make_shared<RLoopManager>(nEntries));; 1478 return emptyRDF;; 1479 }; 1480 ; 1481 std::stringstream cacheCall;; 1482 auto upcastNode = RDFInternal::UpcastNode(fProxiedPtr);; 1483 RInterface<TTraits::TakeFirstParameter_t<decltype(upcastNode)>> upcastInterface(fProxiedPtr, *fLoopManager,; 1484 fColRegister);; 1485 // build a string equivalent to; 1486 // ""(RInterface<nodetype*>*)(this)->Cache<Ts...>(*(ColumnNames_t*)(&columnList))""; 1487 RInterface<RLoopManager> resRDF(std::make_shared<ROOT::Detail::RDF::RLoopManager>(0));; 1488 ca",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:81861,Performance,cache,cached,81861,"; 1445 /// ~~~{.cpp}; 1446 /// auto cache_some_cols_df = df.Cache<double, MyClass, int>({""col0"", ""col1"", ""col2""});; 1447 /// ~~~; 1448 ///; 1449 /// **Types inferred and columns specified (this invocation relies on jitting):**; 1450 /// ~~~{.cpp}; 1451 /// auto cache_some_cols_df = df.Cache({""col0"", ""col1"", ""col2""});; 1452 /// ~~~; 1453 ///; 1454 /// **Types inferred and columns selected with a regexp (this invocation relies on jitting):**; 1455 /// ~~~{.cpp}; 1456 /// auto cache_all_cols_df = df.Cache(myRegexp);; 1457 /// ~~~; 1458 template <typename... ColumnTypes>; 1459 RInterface<RLoopManager> Cache(const ColumnNames_t &columnList); 1460 {; 1461 auto staticSeq = std::make_index_sequence<sizeof...(ColumnTypes)>();; 1462 return CacheImpl<ColumnTypes...>(columnList, staticSeq);; 1463 }; 1464 ; 1465 ////////////////////////////////////////////////////////////////////////////; 1466 /// \brief Save selected columns in memory.; 1467 /// \param[in] columnList columns to be cached in memory; 1468 /// \return a `RDataFrame` that wraps the cached dataset.; 1469 ///; 1470 /// See the previous overloads for more information.; 1471 RInterface<RLoopManager> Cache(const ColumnNames_t &columnList); 1472 {; 1473 // Early return: if the list of columns is empty, just return an empty RDF; 1474 // If we proceed, the jitted call will not compile!; 1475 if (columnList.empty()) {; 1476 auto nEntries = *this->Count();; 1477 RInterface<RLoopManager> emptyRDF(std::make_shared<RLoopManager>(nEntries));; 1478 return emptyRDF;; 1479 }; 1480 ; 1481 std::stringstream cacheCall;; 1482 auto upcastNode = RDFInternal::UpcastNode(fProxiedPtr);; 1483 RInterface<TTraits::TakeFirstParameter_t<decltype(upcastNode)>> upcastInterface(fProxiedPtr, *fLoopManager,; 1484 fColRegister);; 1485 // build a string equivalent to; 1486 // ""(RInterface<nodetype*>*)(this)->Cache<Ts...>(*(ColumnNames_t*)(&columnList))""; 1487 RInterface<RLoopManager> resRDF(std::make_shared<ROOT::Detail::RDF::RLoopManager>(0));; 1488 ca",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:82378,Performance,cache,cacheCall,82378,"ColumnNames_t &columnList); 1460 {; 1461 auto staticSeq = std::make_index_sequence<sizeof...(ColumnTypes)>();; 1462 return CacheImpl<ColumnTypes...>(columnList, staticSeq);; 1463 }; 1464 ; 1465 ////////////////////////////////////////////////////////////////////////////; 1466 /// \brief Save selected columns in memory.; 1467 /// \param[in] columnList columns to be cached in memory; 1468 /// \return a `RDataFrame` that wraps the cached dataset.; 1469 ///; 1470 /// See the previous overloads for more information.; 1471 RInterface<RLoopManager> Cache(const ColumnNames_t &columnList); 1472 {; 1473 // Early return: if the list of columns is empty, just return an empty RDF; 1474 // If we proceed, the jitted call will not compile!; 1475 if (columnList.empty()) {; 1476 auto nEntries = *this->Count();; 1477 RInterface<RLoopManager> emptyRDF(std::make_shared<RLoopManager>(nEntries));; 1478 return emptyRDF;; 1479 }; 1480 ; 1481 std::stringstream cacheCall;; 1482 auto upcastNode = RDFInternal::UpcastNode(fProxiedPtr);; 1483 RInterface<TTraits::TakeFirstParameter_t<decltype(upcastNode)>> upcastInterface(fProxiedPtr, *fLoopManager,; 1484 fColRegister);; 1485 // build a string equivalent to; 1486 // ""(RInterface<nodetype*>*)(this)->Cache<Ts...>(*(ColumnNames_t*)(&columnList))""; 1487 RInterface<RLoopManager> resRDF(std::make_shared<ROOT::Detail::RDF::RLoopManager>(0));; 1488 cacheCall << ""*reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>*>(""; 1489 << RDFInternal::PrettyPrintAddr(&resRDF); 1490 << "") = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(""; 1491 << RDFInternal::PrettyPrintAddr(&upcastInterface) << "")->Cache<"";; 1492 ; 1493 const auto columnListWithoutSizeColumns = RDFInternal::FilterArraySizeColNames(columnList, ""Cache"");; 1494 ; 1495 const auto validColumnNames =; 1496 GetValidatedColumnNames(columnListWithoutSizeColumns.size(), columnListWithoutSizeColumns);; 1497 const auto colTypes = GetValidatedArgTypes(validColumnNames, ",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:82811,Performance,cache,cacheCall,82811,"_t &columnList); 1472 {; 1473 // Early return: if the list of columns is empty, just return an empty RDF; 1474 // If we proceed, the jitted call will not compile!; 1475 if (columnList.empty()) {; 1476 auto nEntries = *this->Count();; 1477 RInterface<RLoopManager> emptyRDF(std::make_shared<RLoopManager>(nEntries));; 1478 return emptyRDF;; 1479 }; 1480 ; 1481 std::stringstream cacheCall;; 1482 auto upcastNode = RDFInternal::UpcastNode(fProxiedPtr);; 1483 RInterface<TTraits::TakeFirstParameter_t<decltype(upcastNode)>> upcastInterface(fProxiedPtr, *fLoopManager,; 1484 fColRegister);; 1485 // build a string equivalent to; 1486 // ""(RInterface<nodetype*>*)(this)->Cache<Ts...>(*(ColumnNames_t*)(&columnList))""; 1487 RInterface<RLoopManager> resRDF(std::make_shared<ROOT::Detail::RDF::RLoopManager>(0));; 1488 cacheCall << ""*reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>*>(""; 1489 << RDFInternal::PrettyPrintAddr(&resRDF); 1490 << "") = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(""; 1491 << RDFInternal::PrettyPrintAddr(&upcastInterface) << "")->Cache<"";; 1492 ; 1493 const auto columnListWithoutSizeColumns = RDFInternal::FilterArraySizeColNames(columnList, ""Cache"");; 1494 ; 1495 const auto validColumnNames =; 1496 GetValidatedColumnNames(columnListWithoutSizeColumns.size(), columnListWithoutSizeColumns);; 1497 const auto colTypes = GetValidatedArgTypes(validColumnNames, fColRegister, fLoopManager->GetTree(), fDataSource,; 1498 ""Cache"", /*vector2RVec=*/false);; 1499 for (const auto &colType : colTypes); 1500 cacheCall << colType << "", "";; 1501 if (!columnListWithoutSizeColumns.empty()); 1502 cacheCall.seekp(-2, cacheCall.cur); // remove the last "",; 1503 cacheCall << "">(*reinterpret_cast<std::vector<std::string>*>("" // vector<string> should be ColumnNames_t; 1504 << RDFInternal::PrettyPrintAddr(&columnListWithoutSizeColumns) << ""));"";; 1505 ; 1506 // book the code to jit with the RLoopManager and trigger the event loop; 1507 fLoopM",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:83570,Performance,cache,cacheCall,83570,"irstParameter_t<decltype(upcastNode)>> upcastInterface(fProxiedPtr, *fLoopManager,; 1484 fColRegister);; 1485 // build a string equivalent to; 1486 // ""(RInterface<nodetype*>*)(this)->Cache<Ts...>(*(ColumnNames_t*)(&columnList))""; 1487 RInterface<RLoopManager> resRDF(std::make_shared<ROOT::Detail::RDF::RLoopManager>(0));; 1488 cacheCall << ""*reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>*>(""; 1489 << RDFInternal::PrettyPrintAddr(&resRDF); 1490 << "") = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(""; 1491 << RDFInternal::PrettyPrintAddr(&upcastInterface) << "")->Cache<"";; 1492 ; 1493 const auto columnListWithoutSizeColumns = RDFInternal::FilterArraySizeColNames(columnList, ""Cache"");; 1494 ; 1495 const auto validColumnNames =; 1496 GetValidatedColumnNames(columnListWithoutSizeColumns.size(), columnListWithoutSizeColumns);; 1497 const auto colTypes = GetValidatedArgTypes(validColumnNames, fColRegister, fLoopManager->GetTree(), fDataSource,; 1498 ""Cache"", /*vector2RVec=*/false);; 1499 for (const auto &colType : colTypes); 1500 cacheCall << colType << "", "";; 1501 if (!columnListWithoutSizeColumns.empty()); 1502 cacheCall.seekp(-2, cacheCall.cur); // remove the last "",; 1503 cacheCall << "">(*reinterpret_cast<std::vector<std::string>*>("" // vector<string> should be ColumnNames_t; 1504 << RDFInternal::PrettyPrintAddr(&columnListWithoutSizeColumns) << ""));"";; 1505 ; 1506 // book the code to jit with the RLoopManager and trigger the event loop; 1507 fLoopManager->ToJitExec(cacheCall.str());; 1508 fLoopManager->Jit();; 1509 ; 1510 return resRDF;; 1511 }; 1512 ; 1513 ////////////////////////////////////////////////////////////////////////////; 1514 /// \brief Save selected columns in memory.; 1515 /// \param[in] columnNameRegexp The regular expression to match the column names to be selected. The presence of a '^' and a '$' at the end of the string is implicitly assumed if they are not specified. The dialect supported is PCRE via",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:83655,Performance,cache,cacheCall,83655,"pe*>*)(this)->Cache<Ts...>(*(ColumnNames_t*)(&columnList))""; 1487 RInterface<RLoopManager> resRDF(std::make_shared<ROOT::Detail::RDF::RLoopManager>(0));; 1488 cacheCall << ""*reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>*>(""; 1489 << RDFInternal::PrettyPrintAddr(&resRDF); 1490 << "") = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(""; 1491 << RDFInternal::PrettyPrintAddr(&upcastInterface) << "")->Cache<"";; 1492 ; 1493 const auto columnListWithoutSizeColumns = RDFInternal::FilterArraySizeColNames(columnList, ""Cache"");; 1494 ; 1495 const auto validColumnNames =; 1496 GetValidatedColumnNames(columnListWithoutSizeColumns.size(), columnListWithoutSizeColumns);; 1497 const auto colTypes = GetValidatedArgTypes(validColumnNames, fColRegister, fLoopManager->GetTree(), fDataSource,; 1498 ""Cache"", /*vector2RVec=*/false);; 1499 for (const auto &colType : colTypes); 1500 cacheCall << colType << "", "";; 1501 if (!columnListWithoutSizeColumns.empty()); 1502 cacheCall.seekp(-2, cacheCall.cur); // remove the last "",; 1503 cacheCall << "">(*reinterpret_cast<std::vector<std::string>*>("" // vector<string> should be ColumnNames_t; 1504 << RDFInternal::PrettyPrintAddr(&columnListWithoutSizeColumns) << ""));"";; 1505 ; 1506 // book the code to jit with the RLoopManager and trigger the event loop; 1507 fLoopManager->ToJitExec(cacheCall.str());; 1508 fLoopManager->Jit();; 1509 ; 1510 return resRDF;; 1511 }; 1512 ; 1513 ////////////////////////////////////////////////////////////////////////////; 1514 /// \brief Save selected columns in memory.; 1515 /// \param[in] columnNameRegexp The regular expression to match the column names to be selected. The presence of a '^' and a '$' at the end of the string is implicitly assumed if they are not specified. The dialect supported is PCRE via the TPRegexp class. An empty string signals the selection of all columns.; 1516 /// \return a `RDataFrame` that wraps the cached dataset.; 1517 ///; 1518 /// The existing",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:83675,Performance,cache,cacheCall,83675,"..>(*(ColumnNames_t*)(&columnList))""; 1487 RInterface<RLoopManager> resRDF(std::make_shared<ROOT::Detail::RDF::RLoopManager>(0));; 1488 cacheCall << ""*reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>*>(""; 1489 << RDFInternal::PrettyPrintAddr(&resRDF); 1490 << "") = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(""; 1491 << RDFInternal::PrettyPrintAddr(&upcastInterface) << "")->Cache<"";; 1492 ; 1493 const auto columnListWithoutSizeColumns = RDFInternal::FilterArraySizeColNames(columnList, ""Cache"");; 1494 ; 1495 const auto validColumnNames =; 1496 GetValidatedColumnNames(columnListWithoutSizeColumns.size(), columnListWithoutSizeColumns);; 1497 const auto colTypes = GetValidatedArgTypes(validColumnNames, fColRegister, fLoopManager->GetTree(), fDataSource,; 1498 ""Cache"", /*vector2RVec=*/false);; 1499 for (const auto &colType : colTypes); 1500 cacheCall << colType << "", "";; 1501 if (!columnListWithoutSizeColumns.empty()); 1502 cacheCall.seekp(-2, cacheCall.cur); // remove the last "",; 1503 cacheCall << "">(*reinterpret_cast<std::vector<std::string>*>("" // vector<string> should be ColumnNames_t; 1504 << RDFInternal::PrettyPrintAddr(&columnListWithoutSizeColumns) << ""));"";; 1505 ; 1506 // book the code to jit with the RLoopManager and trigger the event loop; 1507 fLoopManager->ToJitExec(cacheCall.str());; 1508 fLoopManager->Jit();; 1509 ; 1510 return resRDF;; 1511 }; 1512 ; 1513 ////////////////////////////////////////////////////////////////////////////; 1514 /// \brief Save selected columns in memory.; 1515 /// \param[in] columnNameRegexp The regular expression to match the column names to be selected. The presence of a '^' and a '$' at the end of the string is implicitly assumed if they are not specified. The dialect supported is PCRE via the TPRegexp class. An empty string signals the selection of all columns.; 1516 /// \return a `RDataFrame` that wraps the cached dataset.; 1517 ///; 1518 /// The existing columns are matched a",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:83719,Performance,cache,cacheCall,83719,"terface<ROOT::Detail::RDF::RLoopManager>*>(""; 1489 << RDFInternal::PrettyPrintAddr(&resRDF); 1490 << "") = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(""; 1491 << RDFInternal::PrettyPrintAddr(&upcastInterface) << "")->Cache<"";; 1492 ; 1493 const auto columnListWithoutSizeColumns = RDFInternal::FilterArraySizeColNames(columnList, ""Cache"");; 1494 ; 1495 const auto validColumnNames =; 1496 GetValidatedColumnNames(columnListWithoutSizeColumns.size(), columnListWithoutSizeColumns);; 1497 const auto colTypes = GetValidatedArgTypes(validColumnNames, fColRegister, fLoopManager->GetTree(), fDataSource,; 1498 ""Cache"", /*vector2RVec=*/false);; 1499 for (const auto &colType : colTypes); 1500 cacheCall << colType << "", "";; 1501 if (!columnListWithoutSizeColumns.empty()); 1502 cacheCall.seekp(-2, cacheCall.cur); // remove the last "",; 1503 cacheCall << "">(*reinterpret_cast<std::vector<std::string>*>("" // vector<string> should be ColumnNames_t; 1504 << RDFInternal::PrettyPrintAddr(&columnListWithoutSizeColumns) << ""));"";; 1505 ; 1506 // book the code to jit with the RLoopManager and trigger the event loop; 1507 fLoopManager->ToJitExec(cacheCall.str());; 1508 fLoopManager->Jit();; 1509 ; 1510 return resRDF;; 1511 }; 1512 ; 1513 ////////////////////////////////////////////////////////////////////////////; 1514 /// \brief Save selected columns in memory.; 1515 /// \param[in] columnNameRegexp The regular expression to match the column names to be selected. The presence of a '^' and a '$' at the end of the string is implicitly assumed if they are not specified. The dialect supported is PCRE via the TPRegexp class. An empty string signals the selection of all columns.; 1516 /// \return a `RDataFrame` that wraps the cached dataset.; 1517 ///; 1518 /// The existing columns are matched against the regular expression. If the string provided; 1519 /// is empty, all columns are selected. See the previous overloads for more information.; 1520 RInterface<RLoopManager> Ca",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:84019,Performance,cache,cacheCall,84019,"terface<ROOT::Detail::RDF::RLoopManager>*>(""; 1489 << RDFInternal::PrettyPrintAddr(&resRDF); 1490 << "") = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(""; 1491 << RDFInternal::PrettyPrintAddr(&upcastInterface) << "")->Cache<"";; 1492 ; 1493 const auto columnListWithoutSizeColumns = RDFInternal::FilterArraySizeColNames(columnList, ""Cache"");; 1494 ; 1495 const auto validColumnNames =; 1496 GetValidatedColumnNames(columnListWithoutSizeColumns.size(), columnListWithoutSizeColumns);; 1497 const auto colTypes = GetValidatedArgTypes(validColumnNames, fColRegister, fLoopManager->GetTree(), fDataSource,; 1498 ""Cache"", /*vector2RVec=*/false);; 1499 for (const auto &colType : colTypes); 1500 cacheCall << colType << "", "";; 1501 if (!columnListWithoutSizeColumns.empty()); 1502 cacheCall.seekp(-2, cacheCall.cur); // remove the last "",; 1503 cacheCall << "">(*reinterpret_cast<std::vector<std::string>*>("" // vector<string> should be ColumnNames_t; 1504 << RDFInternal::PrettyPrintAddr(&columnListWithoutSizeColumns) << ""));"";; 1505 ; 1506 // book the code to jit with the RLoopManager and trigger the event loop; 1507 fLoopManager->ToJitExec(cacheCall.str());; 1508 fLoopManager->Jit();; 1509 ; 1510 return resRDF;; 1511 }; 1512 ; 1513 ////////////////////////////////////////////////////////////////////////////; 1514 /// \brief Save selected columns in memory.; 1515 /// \param[in] columnNameRegexp The regular expression to match the column names to be selected. The presence of a '^' and a '$' at the end of the string is implicitly assumed if they are not specified. The dialect supported is PCRE via the TPRegexp class. An empty string signals the selection of all columns.; 1516 /// \return a `RDataFrame` that wraps the cached dataset.; 1517 ///; 1518 /// The existing columns are matched against the regular expression. If the string provided; 1519 /// is empty, all columns are selected. See the previous overloads for more information.; 1520 RInterface<RLoopManager> Ca",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:84605,Performance,cache,cached,84605,"pe << "", "";; 1501 if (!columnListWithoutSizeColumns.empty()); 1502 cacheCall.seekp(-2, cacheCall.cur); // remove the last "",; 1503 cacheCall << "">(*reinterpret_cast<std::vector<std::string>*>("" // vector<string> should be ColumnNames_t; 1504 << RDFInternal::PrettyPrintAddr(&columnListWithoutSizeColumns) << ""));"";; 1505 ; 1506 // book the code to jit with the RLoopManager and trigger the event loop; 1507 fLoopManager->ToJitExec(cacheCall.str());; 1508 fLoopManager->Jit();; 1509 ; 1510 return resRDF;; 1511 }; 1512 ; 1513 ////////////////////////////////////////////////////////////////////////////; 1514 /// \brief Save selected columns in memory.; 1515 /// \param[in] columnNameRegexp The regular expression to match the column names to be selected. The presence of a '^' and a '$' at the end of the string is implicitly assumed if they are not specified. The dialect supported is PCRE via the TPRegexp class. An empty string signals the selection of all columns.; 1516 /// \return a `RDataFrame` that wraps the cached dataset.; 1517 ///; 1518 /// The existing columns are matched against the regular expression. If the string provided; 1519 /// is empty, all columns are selected. See the previous overloads for more information.; 1520 RInterface<RLoopManager> Cache(std::string_view columnNameRegexp = """"); 1521 {; 1522 const auto definedColumns = fColRegister.GenerateColumnNames();; 1523 auto *tree = fLoopManager->GetTree();; 1524 const auto treeBranchNames =; 1525 tree != nullptr ? ROOT::Internal::TreeUtils::GetTopLevelBranchNames(*tree) : ColumnNames_t{};; 1526 const auto dsColumns = fDataSource ? fDataSource->GetColumnNames() : ColumnNames_t{};; 1527 // Ignore R_rdf_sizeof_* columns coming from datasources: we don't want to Snapshot those; 1528 ColumnNames_t dsColumnsWithoutSizeColumns;; 1529 std::copy_if(dsColumns.begin(), dsColumns.end(), std::back_inserter(dsColumnsWithoutSizeColumns),; 1530 [](const std::string &name) { return name.size() < 13 || name.substr(0, 13) != ""R_r",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:86339,Performance,cache,cached,86339,"ant to Snapshot those; 1528 ColumnNames_t dsColumnsWithoutSizeColumns;; 1529 std::copy_if(dsColumns.begin(), dsColumns.end(), std::back_inserter(dsColumnsWithoutSizeColumns),; 1530 [](const std::string &name) { return name.size() < 13 || name.substr(0, 13) != ""R_rdf_sizeof_""; });; 1531 ColumnNames_t columnNames;; 1532 columnNames.reserve(definedColumns.size() + treeBranchNames.size() + dsColumns.size());; 1533 columnNames.insert(columnNames.end(), definedColumns.begin(), definedColumns.end());; 1534 columnNames.insert(columnNames.end(), treeBranchNames.begin(), treeBranchNames.end());; 1535 columnNames.insert(columnNames.end(), dsColumns.begin(), dsColumns.end());; 1536 const auto selectedColumns = RDFInternal::ConvertRegexToColumns(columnNames, columnNameRegexp, ""Cache"");; 1537 return Cache(selectedColumns);; 1538 }; 1539 ; 1540 ////////////////////////////////////////////////////////////////////////////; 1541 /// \brief Save selected columns in memory.; 1542 /// \param[in] columnList columns to be cached in memory.; 1543 /// \return a `RDataFrame` that wraps the cached dataset.; 1544 ///; 1545 /// See the previous overloads for more information.; 1546 RInterface<RLoopManager> Cache(std::initializer_list<std::string> columnList); 1547 {; 1548 ColumnNames_t selectedColumns(columnList);; 1549 return Cache(selectedColumns);; 1550 }; 1551 ; 1552 // clang-format off; 1553 ////////////////////////////////////////////////////////////////////////////; 1554 /// \brief Creates a node that filters entries based on range: [begin, end).; 1555 /// \param[in] begin Initial entry number considered for this range.; 1556 /// \param[in] end Final entry number (excluded) considered for this range. 0 means that the range goes until the end of the dataset.; 1557 /// \param[in] stride Process one entry of the [begin, end) range every `stride` entries. Must be strictly greater than 0.; 1558 /// \return the first node of the computation graph for which the event loop is limited to a certai",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:86405,Performance,cache,cached,86405,"lumns;; 1529 std::copy_if(dsColumns.begin(), dsColumns.end(), std::back_inserter(dsColumnsWithoutSizeColumns),; 1530 [](const std::string &name) { return name.size() < 13 || name.substr(0, 13) != ""R_rdf_sizeof_""; });; 1531 ColumnNames_t columnNames;; 1532 columnNames.reserve(definedColumns.size() + treeBranchNames.size() + dsColumns.size());; 1533 columnNames.insert(columnNames.end(), definedColumns.begin(), definedColumns.end());; 1534 columnNames.insert(columnNames.end(), treeBranchNames.begin(), treeBranchNames.end());; 1535 columnNames.insert(columnNames.end(), dsColumns.begin(), dsColumns.end());; 1536 const auto selectedColumns = RDFInternal::ConvertRegexToColumns(columnNames, columnNameRegexp, ""Cache"");; 1537 return Cache(selectedColumns);; 1538 }; 1539 ; 1540 ////////////////////////////////////////////////////////////////////////////; 1541 /// \brief Save selected columns in memory.; 1542 /// \param[in] columnList columns to be cached in memory.; 1543 /// \return a `RDataFrame` that wraps the cached dataset.; 1544 ///; 1545 /// See the previous overloads for more information.; 1546 RInterface<RLoopManager> Cache(std::initializer_list<std::string> columnList); 1547 {; 1548 ColumnNames_t selectedColumns(columnList);; 1549 return Cache(selectedColumns);; 1550 }; 1551 ; 1552 // clang-format off; 1553 ////////////////////////////////////////////////////////////////////////////; 1554 /// \brief Creates a node that filters entries based on range: [begin, end).; 1555 /// \param[in] begin Initial entry number considered for this range.; 1556 /// \param[in] end Final entry number (excluded) considered for this range. 0 means that the range goes until the end of the dataset.; 1557 /// \param[in] stride Process one entry of the [begin, end) range every `stride` entries. Must be strictly greater than 0.; 1558 /// \return the first node of the computation graph for which the event loop is limited to a certain range of entries.; 1559 ///; 1560 /// Note that in case of pre",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:89477,Performance,perform,performing,89477,":RRange<Proxied>, DS_t> newInterface(std::move(rangePtr), *fLoopManager, fColRegister);; 1580 return newInterface;; 1581 }; 1582 ; 1583 // clang-format off; 1584 ////////////////////////////////////////////////////////////////////////////; 1585 /// \brief Creates a node that filters entries based on range.; 1586 /// \param[in] end Final entry number (excluded) considered for this range. 0 means that the range goes until the end of the dataset.; 1587 /// \return a node of the computation graph for which the range is defined.; 1588 ///; 1589 /// See the other Range overload for a detailed description.; 1590 // clang-format on; 1591 RInterface<RDFDetail::RRange<Proxied>, DS_t> Range(unsigned int end) { return Range(0, end, 1); }; 1592 ; 1593 // clang-format off; 1594 ////////////////////////////////////////////////////////////////////////////; 1595 /// \brief Execute a user-defined function on each entry (*instant action*).; 1596 /// \param[in] f Function, lambda expression, functor class or any other callable object performing user defined calculations.; 1597 /// \param[in] columns Names of the columns/branches in input to the user function.; 1598 ///; 1599 /// The callable `f` is invoked once per entry. This is an *instant action*:; 1600 /// upon invocation, an event loop as well as execution of all scheduled actions; 1601 /// is triggered.; 1602 /// Users are responsible for the thread-safety of this callable when executing; 1603 /// with implicit multi-threading enabled (i.e. ROOT::EnableImplicitMT).; 1604 ///; 1605 /// ### Example usage:; 1606 /// ~~~{.cpp}; 1607 /// myDf.Foreach([](int i){ std::cout << i << std::endl;}, {""myIntColumn""});; 1608 /// ~~~; 1609 // clang-format on; 1610 template <typename F>; 1611 void Foreach(F f, const ColumnNames_t &columns = {}); 1612 {; 1613 using arg_types = typename TTraits::CallableTraits<decltype(f)>::arg_types_nodecay;; 1614 using ret_type = typename TTraits::CallableTraits<decltype(f)>::ret_type;; 1615 ForeachSlot(RDFInterna",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:89919,Performance,multi-thread,multi-threading,89919,"d of the dataset.; 1587 /// \return a node of the computation graph for which the range is defined.; 1588 ///; 1589 /// See the other Range overload for a detailed description.; 1590 // clang-format on; 1591 RInterface<RDFDetail::RRange<Proxied>, DS_t> Range(unsigned int end) { return Range(0, end, 1); }; 1592 ; 1593 // clang-format off; 1594 ////////////////////////////////////////////////////////////////////////////; 1595 /// \brief Execute a user-defined function on each entry (*instant action*).; 1596 /// \param[in] f Function, lambda expression, functor class or any other callable object performing user defined calculations.; 1597 /// \param[in] columns Names of the columns/branches in input to the user function.; 1598 ///; 1599 /// The callable `f` is invoked once per entry. This is an *instant action*:; 1600 /// upon invocation, an event loop as well as execution of all scheduled actions; 1601 /// is triggered.; 1602 /// Users are responsible for the thread-safety of this callable when executing; 1603 /// with implicit multi-threading enabled (i.e. ROOT::EnableImplicitMT).; 1604 ///; 1605 /// ### Example usage:; 1606 /// ~~~{.cpp}; 1607 /// myDf.Foreach([](int i){ std::cout << i << std::endl;}, {""myIntColumn""});; 1608 /// ~~~; 1609 // clang-format on; 1610 template <typename F>; 1611 void Foreach(F f, const ColumnNames_t &columns = {}); 1612 {; 1613 using arg_types = typename TTraits::CallableTraits<decltype(f)>::arg_types_nodecay;; 1614 using ret_type = typename TTraits::CallableTraits<decltype(f)>::ret_type;; 1615 ForeachSlot(RDFInternal::AddSlotParameter<ret_type>(f, arg_types()), columns);; 1616 }; 1617 ; 1618 // clang-format off; 1619 ////////////////////////////////////////////////////////////////////////////; 1620 /// \brief Execute a user-defined function requiring a processing slot index on each entry (*instant action*).; 1621 /// \param[in] f Function, lambda expression, functor class or any other callable object performing user defined calculations",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:90841,Performance,perform,performing,90841,"602 /// Users are responsible for the thread-safety of this callable when executing; 1603 /// with implicit multi-threading enabled (i.e. ROOT::EnableImplicitMT).; 1604 ///; 1605 /// ### Example usage:; 1606 /// ~~~{.cpp}; 1607 /// myDf.Foreach([](int i){ std::cout << i << std::endl;}, {""myIntColumn""});; 1608 /// ~~~; 1609 // clang-format on; 1610 template <typename F>; 1611 void Foreach(F f, const ColumnNames_t &columns = {}); 1612 {; 1613 using arg_types = typename TTraits::CallableTraits<decltype(f)>::arg_types_nodecay;; 1614 using ret_type = typename TTraits::CallableTraits<decltype(f)>::ret_type;; 1615 ForeachSlot(RDFInternal::AddSlotParameter<ret_type>(f, arg_types()), columns);; 1616 }; 1617 ; 1618 // clang-format off; 1619 ////////////////////////////////////////////////////////////////////////////; 1620 /// \brief Execute a user-defined function requiring a processing slot index on each entry (*instant action*).; 1621 /// \param[in] f Function, lambda expression, functor class or any other callable object performing user defined calculations.; 1622 /// \param[in] columns Names of the columns/branches in input to the user function.; 1623 ///; 1624 /// Same as `Foreach`, but the user-defined function takes an extra; 1625 /// `unsigned int` as its first parameter, the *processing slot index*.; 1626 /// This *slot index* will be assigned a different value, `0` to `poolSize - 1`,; 1627 /// for each thread of execution.; 1628 /// This is meant as a helper in writing thread-safe `Foreach`; 1629 /// actions when using `RDataFrame` after `ROOT::EnableImplicitMT()`.; 1630 /// The user-defined processing callable is able to follow different; 1631 /// *streams of processing* indexed by the first parameter.; 1632 /// `ForeachSlot` works just as well with single-thread execution: in that; 1633 /// case `slot` will always be `0`.; 1634 ///; 1635 /// ### Example usage:; 1636 /// ~~~{.cpp}; 1637 /// myDf.ForeachSlot([](unsigned int s, int i){ std::cout << ""Slot "" << s << "": ",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:93367,Performance,perform,performs,93367,";; 1651 ; 1652 auto action = std::make_unique<Action_t>(Helper_t(std::move(f)), validColumnNames, fProxiedPtr, fColRegister);; 1653 ; 1654 fLoopManager->Run();; 1655 }; 1656 ; 1657 // clang-format off; 1658 ////////////////////////////////////////////////////////////////////////////; 1659 /// \brief Execute a user-defined reduce operation on the values of a column.; 1660 /// \tparam F The type of the reduce callable. Automatically deduced.; 1661 /// \tparam T The type of the column to apply the reduction to. Automatically deduced.; 1662 /// \param[in] f A callable with signature `T(T,T)`; 1663 /// \param[in] columnName The column to be reduced. If omitted, the first default column is used instead.; 1664 /// \return the reduced quantity wrapped in a ROOT::RDF:RResultPtr.; 1665 ///; 1666 /// A reduction takes two values of a column and merges them into one (e.g.; 1667 /// by summing them, taking the maximum, etc). This action performs the; 1668 /// specified reduction operation on all processed column values, returning; 1669 /// a single value of the same type. The callable f must satisfy the general; 1670 /// requirements of a *processing function* besides having signature `T(T,T)`; 1671 /// where `T` is the type of column columnName.; 1672 ///; 1673 /// The returned reduced value of each thread (e.g. the initial value of a sum) is initialized to a; 1674 /// default-constructed T object. This is commonly expected to be the neutral/identity element for the specific; 1675 /// reduction operation `f` (e.g. 0 for a sum, 1 for a product). If a default-constructed T does not satisfy this; 1676 /// requirement, users should explicitly specify an initialization value for T by calling the appropriate `Reduce`; 1677 /// overload.; 1678 ///; 1679 /// ### Example usage:; 1680 /// ~~~{.cpp}; 1681 /// auto sumOfIntCol = d.Reduce([](int x, int y) { return x + y; }, ""intCol"");; 1682 /// ~~~; 1683 ///; 1684 /// This action is *lazy*: upon invocation of this method the calculation is;",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:159628,Performance,multi-thread,multi-thread,159628,"mitted, the first default column is used instead.; 2838 /// \param[in] aggIdentity The aggregator variable of each thread is initialized to this value (or is default-constructed if the parameter is omitted); 2839 /// \return the result of the aggregation wrapped in a RResultPtr.; 2840 ///; 2841 /// An aggregator callable takes two values, an aggregator variable and a column value. The aggregator variable is; 2842 /// initialized to aggIdentity or default-constructed if aggIdentity is omitted.; 2843 /// This action calls the aggregator callable for each processed entry, passing in the aggregator variable and; 2844 /// the value of the column columnName.; 2845 /// If the signature is `U(U,T)` the aggregator variable is then copy-assigned the result of the execution of the callable.; 2846 /// Otherwise the signature of aggregator must be `void(U&,T)`.; 2847 ///; 2848 /// The merger callable is used to merge the partial accumulation results of each processing thread. It is only called in multi-thread executions.; 2849 /// If its signature is `U(U,U)` the aggregator variables of each thread are merged two by two.; 2850 /// If its signature is `void(std::vector<U>& a)` it is assumed that it merges all aggregators in a[0].; 2851 ///; 2852 /// This action is *lazy*: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr.; 2853 ///; 2854 /// Example usage:; 2855 /// ~~~{.cpp}; 2856 /// auto aggregator = [](double acc, double x) { return acc * x; };; 2857 /// ROOT::EnableImplicitMT();; 2858 /// // If multithread is enabled, the aggregator function will be called by more threads; 2859 /// // and will produce a vector of partial accumulators.; 2860 /// // The merger function performs the final aggregation of these partial results.; 2861 /// auto merger = [](std::vector<double> &accumulators) {; 2862 /// for (auto i : ROOT::TSeqU(1u, accumulators.size())) {; 2863 /// accumulators[0] *= accumulators[i];; 2864 /// }; 2865 /// };; 2866 ///; 2",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:160361,Performance,perform,performs,160361,"ed the result of the execution of the callable.; 2846 /// Otherwise the signature of aggregator must be `void(U&,T)`.; 2847 ///; 2848 /// The merger callable is used to merge the partial accumulation results of each processing thread. It is only called in multi-thread executions.; 2849 /// If its signature is `U(U,U)` the aggregator variables of each thread are merged two by two.; 2850 /// If its signature is `void(std::vector<U>& a)` it is assumed that it merges all aggregators in a[0].; 2851 ///; 2852 /// This action is *lazy*: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr.; 2853 ///; 2854 /// Example usage:; 2855 /// ~~~{.cpp}; 2856 /// auto aggregator = [](double acc, double x) { return acc * x; };; 2857 /// ROOT::EnableImplicitMT();; 2858 /// // If multithread is enabled, the aggregator function will be called by more threads; 2859 /// // and will produce a vector of partial accumulators.; 2860 /// // The merger function performs the final aggregation of these partial results.; 2861 /// auto merger = [](std::vector<double> &accumulators) {; 2862 /// for (auto i : ROOT::TSeqU(1u, accumulators.size())) {; 2863 /// accumulators[0] *= accumulators[i];; 2864 /// }; 2865 /// };; 2866 ///; 2867 /// // The accumulator is initialized at this value by every thread.; 2868 /// double initValue = 1.;; 2869 ///; 2870 /// // Multiplies all elements of the column ""x""; 2871 /// auto result = d.Aggregate(aggregator, merger, ""x"", initValue);; 2872 /// ~~~; 2873 // clang-format on; 2874 template <typename AccFun, typename MergeFun, typename R = typename TTraits::CallableTraits<AccFun>::ret_type,; 2875 typename ArgTypes = typename TTraits::CallableTraits<AccFun>::arg_types,; 2876 typename ArgTypesNoDecay = typename TTraits::CallableTraits<AccFun>::arg_types_nodecay,; 2877 typename U = TTraits::TakeFirstParameter_t<ArgTypes>,; 2878 typename T = TTraits::TakeFirstParameter_t<TTraits::RemoveFirstParameter_t<ArgTypes>>>; 2879 RResultPtr<",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:166764,Performance,optimiz,optimizations,166764,"sult of this action (of type; 2941 /// Result_t). The RResultPtr returned by Book will point to this object. Note that this method can be called; 2942 /// _before_ Initialize(), because the RResultPtr is constructed before the event loop is started.; 2943 /// * `void Initialize()`: this method is called once before starting the event-loop. Useful for setup operations.; 2944 /// It must reset the state of the helper to the expected state at the beginning of the event loop: the same helper,; 2945 /// or copies of it, might be used for multiple event loops (e.g. in the presence of systematic variations).; 2946 /// * `void InitTask(TTreeReader *, unsigned int slot)`: each working thread shall call this method during the event; 2947 /// loop, before processing a batch of entries. The pointer passed as argument, if not null, will point to the TTreeReader; 2948 /// that RDataFrame has set up to read the task's batch of entries. It is passed to the helper to allow certain advanced optimizations; 2949 /// it should not usually serve any purpose for the Helper. This method is often no-op for simple helpers.; 2950 /// * `void Exec(unsigned int slot, ColumnTypes...columnValues)`: each working thread shall call this method; 2951 /// during the event-loop, possibly concurrently. No two threads will ever call Exec with the same 'slot' value:; 2952 /// this parameter is there to facilitate writing thread-safe helpers. The other arguments will be the values of; 2953 /// the requested columns for the particular entry being processed.; 2954 /// * `void Finalize()`: this method is called at the end of the event loop. Commonly used to finalize the contents of the result.; 2955 /// * `std::string GetActionName()`: it returns a string identifier for this type of action that RDataFrame will use in; 2956 /// diagnostics, SaveGraph(), etc.; 2957 ///; 2958 /// ### Optional methods; 2959 ///; 2960 /// If these methods are implemented they enable extra functionality as per the description below.",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:167048,Performance,concurren,concurrently,167048,"vent loop is started.; 2943 /// * `void Initialize()`: this method is called once before starting the event-loop. Useful for setup operations.; 2944 /// It must reset the state of the helper to the expected state at the beginning of the event loop: the same helper,; 2945 /// or copies of it, might be used for multiple event loops (e.g. in the presence of systematic variations).; 2946 /// * `void InitTask(TTreeReader *, unsigned int slot)`: each working thread shall call this method during the event; 2947 /// loop, before processing a batch of entries. The pointer passed as argument, if not null, will point to the TTreeReader; 2948 /// that RDataFrame has set up to read the task's batch of entries. It is passed to the helper to allow certain advanced optimizations; 2949 /// it should not usually serve any purpose for the Helper. This method is often no-op for simple helpers.; 2950 /// * `void Exec(unsigned int slot, ColumnTypes...columnValues)`: each working thread shall call this method; 2951 /// during the event-loop, possibly concurrently. No two threads will ever call Exec with the same 'slot' value:; 2952 /// this parameter is there to facilitate writing thread-safe helpers. The other arguments will be the values of; 2953 /// the requested columns for the particular entry being processed.; 2954 /// * `void Finalize()`: this method is called at the end of the event loop. Commonly used to finalize the contents of the result.; 2955 /// * `std::string GetActionName()`: it returns a string identifier for this type of action that RDataFrame will use in; 2956 /// diagnostics, SaveGraph(), etc.; 2957 ///; 2958 /// ### Optional methods; 2959 ///; 2960 /// If these methods are implemented they enable extra functionality as per the description below.; 2961 ///; 2962 /// * `Result_t &PartialUpdate(unsigned int slot)`: if present, it must return the value of the partial result of this action for the given 'slot'.; 2963 /// Different threads might call this method concurrentl",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:167993,Performance,concurren,concurrently,167993,"is method; 2951 /// during the event-loop, possibly concurrently. No two threads will ever call Exec with the same 'slot' value:; 2952 /// this parameter is there to facilitate writing thread-safe helpers. The other arguments will be the values of; 2953 /// the requested columns for the particular entry being processed.; 2954 /// * `void Finalize()`: this method is called at the end of the event loop. Commonly used to finalize the contents of the result.; 2955 /// * `std::string GetActionName()`: it returns a string identifier for this type of action that RDataFrame will use in; 2956 /// diagnostics, SaveGraph(), etc.; 2957 ///; 2958 /// ### Optional methods; 2959 ///; 2960 /// If these methods are implemented they enable extra functionality as per the description below.; 2961 ///; 2962 /// * `Result_t &PartialUpdate(unsigned int slot)`: if present, it must return the value of the partial result of this action for the given 'slot'.; 2963 /// Different threads might call this method concurrently, but will do so with different 'slot' numbers.; 2964 /// RDataFrame leverages this method to implement RResultPtr::OnPartialResult().; 2965 /// * `ROOT::RDF::SampleCallback_t GetSampleCallback()`: if present, it must return a callable with the; 2966 /// appropriate signature (see ROOT::RDF::SampleCallback_t) that will be invoked at the beginning of the processing; 2967 /// of every sample, as in DefinePerSample().; 2968 /// * `Helper MakeNew(void *newResult)`: if implemented, it enables varying the action's result with VariationsFor(). It takes a; 2969 /// type-erased new result that can be safely cast to a `std::shared_ptr<Result_t> *` (a pointer to shared pointer) and should; 2970 /// be used as the action's output result.; 2971 ///; 2972 /// In case Book is called without specifying column types as template arguments, corresponding typed code will be just-in-time compiled; 2973 /// by RDataFrame. In that case the Helper class needs to be known to the ROOT interpreter.; 2974",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:182063,Performance,cache,cache,182063," input; 3180 // to check for the presence of the TTree inside. But at this moment the; 3181 // filename we are using here corresponds to a file which does not exist yet,; 3182 // i.e. the output file of the Snapshot call. Thus, checkFile=false will; 3183 // prevent the function from trying to open a non-existent file.; 3184 auto newRDF = std::make_shared<RInterface<RLoopManager>>(ROOT::Detail::RDF::CreateLMFromTTree(; 3185 fullTreeName, filename, /*defaultColumns=*/columnListWithoutSizeColumns, /*checkFile=*/false));; 3186 ; 3187 // The Snapshot helper will use validCols (with aliases resolved) as input columns, and; 3188 // columnListWithoutSizeColumns (still with aliases in it, passed through snapHelperArgs) as output column names.; 3189 auto resPtr = CreateAction<RDFInternal::ActionTags::Snapshot, ColumnTypes...>(validCols, newRDF, snapHelperArgs,; 3190 fProxiedPtr);; 3191 ; 3192 if (!options.fLazy); 3193 *resPtr;; 3194 return resPtr;; 3195 }; 3196 ; 3197 ////////////////////////////////////////////////////////////////////////////; 3198 /// \brief Implementation of cache.; 3199 template <typename... ColTypes, std::size_t... S>; 3200 RInterface<RLoopManager> CacheImpl(const ColumnNames_t &columnList, std::index_sequence<S...>); 3201 {; 3202 const auto columnListWithoutSizeColumns = RDFInternal::FilterArraySizeColNames(columnList, ""Snapshot"");; 3203 ; 3204 // Check at compile time that the columns types are copy constructible; 3205 constexpr bool areCopyConstructible =; 3206 RDFInternal::TEvalAnd<std::is_copy_constructible<ColTypes>::value...>::value;; 3207 static_assert(areCopyConstructible, ""Columns of a type which is not copy constructible cannot be cached yet."");; 3208 ; 3209 RDFInternal::CheckTypesAndPars(sizeof...(ColTypes), columnListWithoutSizeColumns.size());; 3210 ; 3211 auto colHolders = std::make_tuple(Take<ColTypes>(columnListWithoutSizeColumns[S])...);; 3212 auto ds = std::make_unique<RLazyDS<ColTypes...>>(; 3213 std::make_pair(columnListWithoutSizeCo",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:182660,Performance,cache,cached,182660,"/ columnListWithoutSizeColumns (still with aliases in it, passed through snapHelperArgs) as output column names.; 3189 auto resPtr = CreateAction<RDFInternal::ActionTags::Snapshot, ColumnTypes...>(validCols, newRDF, snapHelperArgs,; 3190 fProxiedPtr);; 3191 ; 3192 if (!options.fLazy); 3193 *resPtr;; 3194 return resPtr;; 3195 }; 3196 ; 3197 ////////////////////////////////////////////////////////////////////////////; 3198 /// \brief Implementation of cache.; 3199 template <typename... ColTypes, std::size_t... S>; 3200 RInterface<RLoopManager> CacheImpl(const ColumnNames_t &columnList, std::index_sequence<S...>); 3201 {; 3202 const auto columnListWithoutSizeColumns = RDFInternal::FilterArraySizeColNames(columnList, ""Snapshot"");; 3203 ; 3204 // Check at compile time that the columns types are copy constructible; 3205 constexpr bool areCopyConstructible =; 3206 RDFInternal::TEvalAnd<std::is_copy_constructible<ColTypes>::value...>::value;; 3207 static_assert(areCopyConstructible, ""Columns of a type which is not copy constructible cannot be cached yet."");; 3208 ; 3209 RDFInternal::CheckTypesAndPars(sizeof...(ColTypes), columnListWithoutSizeColumns.size());; 3210 ; 3211 auto colHolders = std::make_tuple(Take<ColTypes>(columnListWithoutSizeColumns[S])...);; 3212 auto ds = std::make_unique<RLazyDS<ColTypes...>>(; 3213 std::make_pair(columnListWithoutSizeColumns[S], std::get<S>(colHolders))...);; 3214 ; 3215 RInterface<RLoopManager> cachedRDF(std::make_shared<RLoopManager>(std::move(ds), columnListWithoutSizeColumns));; 3216 ; 3217 return cachedRDF;; 3218 }; 3219 ; 3220 template <bool IsSingleColumn, typename F>; 3221 RInterface<Proxied, DS_t>; 3222 VaryImpl(const std::vector<std::string> &colNames, F &&expression, const ColumnNames_t &inputColumns,; 3223 const std::vector<std::string> &variationTags, std::string_view variationName); 3224 {; 3225 using F_t = std::decay_t<F>;; 3226 using ColTypes_t = typename TTraits::CallableTraits<F_t>::arg_types;; 3227 using RetType = typen",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:183056,Performance,cache,cachedRDF,183056,"lTypes>::value...>::value;; 3207 static_assert(areCopyConstructible, ""Columns of a type which is not copy constructible cannot be cached yet."");; 3208 ; 3209 RDFInternal::CheckTypesAndPars(sizeof...(ColTypes), columnListWithoutSizeColumns.size());; 3210 ; 3211 auto colHolders = std::make_tuple(Take<ColTypes>(columnListWithoutSizeColumns[S])...);; 3212 auto ds = std::make_unique<RLazyDS<ColTypes...>>(; 3213 std::make_pair(columnListWithoutSizeColumns[S], std::get<S>(colHolders))...);; 3214 ; 3215 RInterface<RLoopManager> cachedRDF(std::make_shared<RLoopManager>(std::move(ds), columnListWithoutSizeColumns));; 3216 ; 3217 return cachedRDF;; 3218 }; 3219 ; 3220 template <bool IsSingleColumn, typename F>; 3221 RInterface<Proxied, DS_t>; 3222 VaryImpl(const std::vector<std::string> &colNames, F &&expression, const ColumnNames_t &inputColumns,; 3223 const std::vector<std::string> &variationTags, std::string_view variationName); 3224 {; 3225 using F_t = std::decay_t<F>;; 3226 using ColTypes_t = typename TTraits::CallableTraits<F_t>::arg_types;; 3227 using RetType = typename TTraits::CallableTraits<F_t>::ret_type;; 3228 constexpr auto nColumns = ColTypes_t::list_size;; 3229 ; 3230 SanityChecksForVary<RetType>(colNames, variationTags, variationName);; 3231 ; 3232 const auto validColumnNames = GetValidatedColumnNames(nColumns, inputColumns);; 3233 CheckAndFillDSColumns(validColumnNames, ColTypes_t{});; 3234 ; 3235 auto retTypeName = RDFInternal::TypeID2TypeName(typeid(RetType));; 3236 if (retTypeName.empty()) {; 3237 // The type is not known to the interpreter, but we don't want to error out; 3238 // here, rather if/when this column is used in jitted code, so we inject a broken but telling type name.; 3239 const auto demangledType = RDFInternal::DemangleTypeIdName(typeid(RetType));; 3240 retTypeName = ""CLING_UNKNOWN_TYPE_"" + demangledType;; 3241 }; 3242 ; 3243 auto variation = std::make_shared<RDFInternal::RVariation<F_t, IsSingleColumn>>(; 3244 colNames, variationName, std::f",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:183164,Performance,cache,cachedRDF,183164,"lTypes>::value...>::value;; 3207 static_assert(areCopyConstructible, ""Columns of a type which is not copy constructible cannot be cached yet."");; 3208 ; 3209 RDFInternal::CheckTypesAndPars(sizeof...(ColTypes), columnListWithoutSizeColumns.size());; 3210 ; 3211 auto colHolders = std::make_tuple(Take<ColTypes>(columnListWithoutSizeColumns[S])...);; 3212 auto ds = std::make_unique<RLazyDS<ColTypes...>>(; 3213 std::make_pair(columnListWithoutSizeColumns[S], std::get<S>(colHolders))...);; 3214 ; 3215 RInterface<RLoopManager> cachedRDF(std::make_shared<RLoopManager>(std::move(ds), columnListWithoutSizeColumns));; 3216 ; 3217 return cachedRDF;; 3218 }; 3219 ; 3220 template <bool IsSingleColumn, typename F>; 3221 RInterface<Proxied, DS_t>; 3222 VaryImpl(const std::vector<std::string> &colNames, F &&expression, const ColumnNames_t &inputColumns,; 3223 const std::vector<std::string> &variationTags, std::string_view variationName); 3224 {; 3225 using F_t = std::decay_t<F>;; 3226 using ColTypes_t = typename TTraits::CallableTraits<F_t>::arg_types;; 3227 using RetType = typename TTraits::CallableTraits<F_t>::ret_type;; 3228 constexpr auto nColumns = ColTypes_t::list_size;; 3229 ; 3230 SanityChecksForVary<RetType>(colNames, variationTags, variationName);; 3231 ; 3232 const auto validColumnNames = GetValidatedColumnNames(nColumns, inputColumns);; 3233 CheckAndFillDSColumns(validColumnNames, ColTypes_t{});; 3234 ; 3235 auto retTypeName = RDFInternal::TypeID2TypeName(typeid(RetType));; 3236 if (retTypeName.empty()) {; 3237 // The type is not known to the interpreter, but we don't want to error out; 3238 // here, rather if/when this column is used in jitted code, so we inject a broken but telling type name.; 3239 const auto demangledType = RDFInternal::DemangleTypeIdName(typeid(RetType));; 3240 retTypeName = ""CLING_UNKNOWN_TYPE_"" + demangledType;; 3241 }; 3242 ; 3243 auto variation = std::make_shared<RDFInternal::RVariation<F_t, IsSingleColumn>>(; 3244 colNames, variationName, std::f",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:208565,Performance,cache,cache,208565,"xx:1840; ROOT::RDF::RInterface::VaryRInterface< Proxied, DS_t > Vary(const std::vector< std::string > &colNames, F &&expression, const ColumnNames_t &inputColumns, const std::vector< std::string > &variationTags, std::string_view variationName)Register systematic variations for multiple existing columns using custom variation tags.Definition RInterface.hxx:950; ROOT::RDF::RInterface::RedefineSlotEntryRInterface< Proxied, DS_t > RedefineSlotEntry(std::string_view name, F expression, const ColumnNames_t &columns={})Overwrite the value and/or type of an existing column.Definition RInterface.hxx:598; ROOT::RDF::RInterface::Histo1DRResultPtr<::TH1D > Histo1D(const TH1DModel &model, std::string_view vName, std::string_view wName)Fill and return a one-dimensional histogram with the weighted values of a column (lazy action).Definition RInterface.hxx:1866; ROOT::RDF::RInterface::CacheImplRInterface< RLoopManager > CacheImpl(const ColumnNames_t &columnList, std::index_sequence< S... >)Implementation of cache.Definition RInterface.hxx:3200; ROOT::RDF::RInterface::RangeRInterface< RDFDetail::RRange< Proxied >, DS_t > Range(unsigned int end)Creates a node that filters entries based on range.Definition RInterface.hxx:1591; ROOT::RDF::RInterface::FilterMissingRInterface< RDFDetail::RFilterWithMissingValues< Proxied >, DS_t > FilterMissing(std::string_view column)Keep only the entries that have missing values.Definition RInterface.hxx:388; ROOT::RDF::RInterface::TakeRResultPtr< COLL > Take(std::string_view column="""")Return a collection of values of a column (lazy action, returns a std::vector by default).Definition RInterface.hxx:1761; ROOT::RDF::RInterface::CacheRInterface< RLoopManager > Cache(std::initializer_list< std::string > columnList)Save selected columns in memory.Definition RInterface.hxx:1546; ROOT::RDF::RInterface::Profile2DRResultPtr<::TProfile2D > Profile2D(const TProfile2DModel &model, std::string_view v1Name="""", std::string_view v2Name="""", std::string_view v3Name=""""",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:224960,Performance,multi-thread,multi-threading,224960,"ew name, std::string_view expression, RLoopManager &lm, const RColumnRegister &colRegister, std::shared_ptr< RNodeBase > *upcastNodeOnHeap)Book the jitting of a DefinePerSample call.Definition RDFInterfaceUtils.cxx:750; ROOT::Internal::TreeUtils::GetTopLevelBranchNamesstd::vector< std::string > GetTopLevelBranchNames(TTree &t)Get all the top-level branches names, including the ones of the friend trees.Definition InternalTreeUtils.cxx:74; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOT::RDF::RNodeRInterface<::ROOT::Detail::RDF::RNodeBase, void > RNodeDefinition InterfaceUtils.hxx:57; ROOT::RDF::ColumnNames_tstd::vector< std::string > ColumnNames_tDefinition RInterfaceBase.hxx:35; ROOT::TypeTraitsROOT type_traits extensions.Definition TypeTraits.hxx:21; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; ROOT::IsImplicitMTEnabledBool_t IsImplicitMTEnabled()Returns true if the implicit multi-threading in ROOT is enabled.Definition TROOT.cxx:570; ROOT::DisableImplicitMTvoid DisableImplicitMT()Disables the implicit multi-threading in ROOT (see EnableImplicitMT).Definition TROOT.cxx:556; graphDefinition graph.py:1; ROOT::Detail::RDF::RInferredTypeDefinition Utils.hxx:59; ROOT::Internal::RDF::RemoveFirstParameterIftype is TypeList if MustRemove is false, otherwise it is a TypeList with the first type removedDefinition Utils.hxx:141; ROOT::Internal::RDF::RemoveFirstTwoParametersIfDefinition Utils.hxx:154; ROOT::RDF::RSnapshotOptionsA collection of options to steer the creation of the dataset on file.Definition RSnapshotOptions.hxx:22; ROOT::RDF::RSnapshotOptions::fLazybool fLazyDo not start the event loop when Snapshot is called.Definition RSnapshotOptions.hxx:45; ROOT::RDF::TH1D",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:225149,Performance,multi-thread,multi-threading,225149,"rSample call.Definition RDFInterfaceUtils.cxx:750; ROOT::Internal::TreeUtils::GetTopLevelBranchNamesstd::vector< std::string > GetTopLevelBranchNames(TTree &t)Get all the top-level branches names, including the ones of the friend trees.Definition InternalTreeUtils.cxx:74; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOT::RDF::RNodeRInterface<::ROOT::Detail::RDF::RNodeBase, void > RNodeDefinition InterfaceUtils.hxx:57; ROOT::RDF::ColumnNames_tstd::vector< std::string > ColumnNames_tDefinition RInterfaceBase.hxx:35; ROOT::TypeTraitsROOT type_traits extensions.Definition TypeTraits.hxx:21; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; ROOT::IsImplicitMTEnabledBool_t IsImplicitMTEnabled()Returns true if the implicit multi-threading in ROOT is enabled.Definition TROOT.cxx:570; ROOT::DisableImplicitMTvoid DisableImplicitMT()Disables the implicit multi-threading in ROOT (see EnableImplicitMT).Definition TROOT.cxx:556; graphDefinition graph.py:1; ROOT::Detail::RDF::RInferredTypeDefinition Utils.hxx:59; ROOT::Internal::RDF::RemoveFirstParameterIftype is TypeList if MustRemove is false, otherwise it is a TypeList with the first type removedDefinition Utils.hxx:141; ROOT::Internal::RDF::RemoveFirstTwoParametersIfDefinition Utils.hxx:154; ROOT::RDF::RSnapshotOptionsA collection of options to steer the creation of the dataset on file.Definition RSnapshotOptions.hxx:22; ROOT::RDF::RSnapshotOptions::fLazybool fLazyDo not start the event loop when Snapshot is called.Definition RSnapshotOptions.hxx:45; ROOT::RDF::TH1DModelA struct which stores the parameters of a TH1D.Definition HistoModels.hxx:30; ROOT::RDF::TH1DModel::GetHistogramstd::shared_ptr<::TH1D > GetHistogram() constDefini",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:225279,Performance,multi-thread,multi-threading,225279,"chNames(TTree &t)Get all the top-level branches names, including the ones of the friend trees.Definition InternalTreeUtils.cxx:74; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOT::RDF::RNodeRInterface<::ROOT::Detail::RDF::RNodeBase, void > RNodeDefinition InterfaceUtils.hxx:57; ROOT::RDF::ColumnNames_tstd::vector< std::string > ColumnNames_tDefinition RInterfaceBase.hxx:35; ROOT::TypeTraitsROOT type_traits extensions.Definition TypeTraits.hxx:21; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; ROOT::IsImplicitMTEnabledBool_t IsImplicitMTEnabled()Returns true if the implicit multi-threading in ROOT is enabled.Definition TROOT.cxx:570; ROOT::DisableImplicitMTvoid DisableImplicitMT()Disables the implicit multi-threading in ROOT (see EnableImplicitMT).Definition TROOT.cxx:556; graphDefinition graph.py:1; ROOT::Detail::RDF::RInferredTypeDefinition Utils.hxx:59; ROOT::Internal::RDF::RemoveFirstParameterIftype is TypeList if MustRemove is false, otherwise it is a TypeList with the first type removedDefinition Utils.hxx:141; ROOT::Internal::RDF::RemoveFirstTwoParametersIfDefinition Utils.hxx:154; ROOT::RDF::RSnapshotOptionsA collection of options to steer the creation of the dataset on file.Definition RSnapshotOptions.hxx:22; ROOT::RDF::RSnapshotOptions::fLazybool fLazyDo not start the event loop when Snapshot is called.Definition RSnapshotOptions.hxx:45; ROOT::RDF::TH1DModelA struct which stores the parameters of a TH1D.Definition HistoModels.hxx:30; ROOT::RDF::TH1DModel::GetHistogramstd::shared_ptr<::TH1D > GetHistogram() constDefinition RDFHistoModels.cxx:103; ROOT::RDF::TH2DModelA struct which stores the parameters of a TH2D.Definition HistoModels.hxx:48; ROOT::RDF::TH2DM",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:22750,Safety,safe,safe,22750,"> = 0>; 441 RInterface<Proxied, DS_t> Define(std::string_view name, F expression, const ColumnNames_t &columns = {}); 442 {; 443 return DefineImpl<F, RDFDetail::ExtraArgsForDefine::None>(name, std::move(expression), columns, ""Define"");; 444 }; 445 // clang-format on; 446 ; 447 // clang-format off; 448 ////////////////////////////////////////////////////////////////////////////; 449 /// \brief Define a new column with a value dependent on the processing slot.; 450 /// \param[in] name The name of the defined column.; 451 /// \param[in] expression Function, lambda expression, functor class or any other callable object producing the defined value. Returns the value that will be assigned to the defined column.; 452 /// \param[in] columns Names of the columns/branches in input to the producer function (excluding the slot number).; 453 /// \return the first node of the computation graph for which the new quantity is defined.; 454 ///; 455 /// This alternative implementation of `Define` is meant as a helper to evaluate new column values in a thread-safe manner.; 456 /// The expression must be a callable of signature R(unsigned int, T1, T2, ...) where `T1, T2...` are the types; 457 /// of the columns that the expression takes as input. The first parameter is reserved for an unsigned integer; 458 /// representing a ""slot number"". RDataFrame guarantees that different threads will invoke the expression with; 459 /// different slot numbers - slot numbers will range from zero to ROOT::GetThreadPoolSize()-1.; 460 ///; 461 /// The following two calls are equivalent, although `DefineSlot` is slightly more performant:; 462 /// ~~~{.cpp}; 463 /// int function(unsigned int, double, double);; 464 /// df.Define(""x"", function, {""rdfslot_"", ""column1"", ""column2""}); 465 /// df.DefineSlot(""x"", function, {""column1"", ""column2""}); 466 /// ~~~; 467 ///; 468 /// See Define() for more information.; 469 template <typename F>; 470 RInterface<Proxied, DS_t> DefineSlot(std::string_view name, F expressi",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:24689,Safety,safe,safe,24689,"S_t> DefineSlot(std::string_view name, F expression, const ColumnNames_t &columns = {}); 471 {; 472 return DefineImpl<F, RDFDetail::ExtraArgsForDefine::Slot>(name, std::move(expression), columns, ""DefineSlot"");; 473 }; 474 // clang-format on; 475 ; 476 // clang-format off; 477 ////////////////////////////////////////////////////////////////////////////; 478 /// \brief Define a new column with a value dependent on the processing slot and the current entry.; 479 /// \param[in] name The name of the defined column.; 480 /// \param[in] expression Function, lambda expression, functor class or any other callable object producing the defined value. Returns the value that will be assigned to the defined column.; 481 /// \param[in] columns Names of the columns/branches in input to the producer function (excluding slot and entry).; 482 /// \return the first node of the computation graph for which the new quantity is defined.; 483 ///; 484 /// This alternative implementation of `Define` is meant as a helper in writing entry-specific, thread-safe custom; 485 /// columns. The expression must be a callable of signature R(unsigned int, ULong64_t, T1, T2, ...) where `T1, T2...`; 486 /// are the types of the columns that the expression takes as input. The first parameter is reserved for an unsigned; 487 /// integer representing a ""slot number"". RDataFrame guarantees that different threads will invoke the expression with; 488 /// different slot numbers - slot numbers will range from zero to ROOT::GetThreadPoolSize()-1. The second parameter; 489 /// is reserved for a `ULong64_t` representing the current entry being processed by the current thread.; 490 ///; 491 /// The following two `Define`s are equivalent, although `DefineSlotEntry` is slightly more performant:; 492 /// ~~~{.cpp}; 493 /// int function(unsigned int, ULong64_t, double, double);; 494 /// Define(""x"", function, {""rdfslot_"", ""rdfentry_"", ""column1"", ""column2""}); 495 /// DefineSlotEntry(""x"", function, {""column1"", ""column2""});",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:37673,Safety,safe,safe,37673,"; 697 newCols.AddDefine(std::move(newColumn));; 698 ; 699 RInterface<Proxied> newInterface(fProxiedPtr, *fLoopManager, std::move(newCols));; 700 ; 701 return newInterface;; 702 }; 703 ; 704 // clang-format off; 705 ////////////////////////////////////////////////////////////////////////////; 706 /// \brief Define a new column that is updated when the input sample changes.; 707 /// \param[in] name The name of the defined column.; 708 /// \param[in] expression A C++ callable that computes the new value of the defined column.; 709 /// \return the first node of the computation graph for which the new quantity is defined.; 710 ///; 711 /// The signature of the callable passed as second argument should be `T(unsigned int slot, const ROOT::RDF::RSampleInfo &id)`; 712 /// where:; 713 /// - `T` is the type of the defined column; 714 /// - `slot` is a number in the range [0, nThreads) that is different for each processing thread. This can simplify; 715 /// the definition of thread-safe callables if you are interested in using parallel capabilities of RDataFrame.; 716 /// - `id` is an instance of a ROOT::RDF::RSampleInfo object which contains information about the sample which is; 717 /// being processed (see the class docs for more information).; 718 ///; 719 /// DefinePerSample() is useful to e.g. define a quantity that depends on which TTree in which TFile is being; 720 /// processed or to inject a callback into the event loop that is only called when the processing of a new sample; 721 /// starts rather than at every entry.; 722 ///; 723 /// The callable will be invoked once per input TTree or once per multi-thread task, whichever is more often.; 724 ///; 725 /// ### Example usage:; 726 /// ~~~{.cpp}; 727 /// ROOT::RDataFrame df{""mytree"", {""sample1.root"",""sample2.root""}};; 728 /// df.DefinePerSample(""weightbysample"",; 729 /// [](unsigned int slot, const ROOT::RDF::RSampleInfo &id); 730 /// { return id.Contains(""sample1"") ? 1.0f : 2.0f; });; 731 /// ~~~; 732 // clang-format ",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:52608,Safety,avoid,avoided,52608,"ion), inputColumns, variationTags, variationName);; 954 }; 955 ; 956 /// \brief Register systematic variations for multiple existing columns using custom variation tags.; 957 /// \param[in] colNames set of names of the columns for which varied values are provided.; 958 /// \param[in] expression a callable that evaluates the varied values for the specified columns. The callable can; 959 /// take any column values as input, similarly to what happens during Filter and Define calls. It must; 960 /// return an RVec of varied values, one for each variation tag, in the same order as the tags.; 961 /// \param[in] inputColumns the names of the columns to be passed to the callable.; 962 /// \param[in] variationTags names for each of the varied values, e.g. `""up""` and `""down""`.; 963 /// \param[in] variationName a generic name for this set of varied values, e.g. `""ptvariation""`.; 964 /// colName is used if none is provided.; 965 ///; 966 /// \note This overload ensures that the ambiguity between C++20 string, vector<string> construction from init list; 967 /// is avoided.; 968 ///; 969 /// \sa This Vary() overload for more information.; 970 template <typename F>; 971 RInterface<Proxied, DS_t>; 972 Vary(std::initializer_list<std::string> colNames, F &&expression, const ColumnNames_t &inputColumns,; 973 const std::vector<std::string> &variationTags, std::string_view variationName); 974 {; 975 return Vary(std::vector<std::string>(colNames), std::forward<F>(expression), inputColumns, variationTags, variationName);; 976 }; 977 ; 978 /// \brief Register systematic variations for multiple existing columns using auto-generated tags.; 979 /// \param[in] colNames set of names of the columns for which varied values are provided.; 980 /// \param[in] expression a callable that evaluates the varied values for the specified columns. The callable can; 981 /// take any column values as input, similarly to what happens during Filter and Define calls. It must; 982 /// return an RVec of varied valu",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:56789,Safety,avoid,avoided,56789,"ng custom variation tags.; 1026 /// \param[in] colNames set of names of the columns for which varied values are provided.; 1027 /// \param[in] expression a callable that evaluates the varied values for the specified columns. The callable can; 1028 /// take any column values as input, similarly to what happens during Filter and Define calls. It must; 1029 /// return an RVec of varied values, one for each variation tag, in the same order as the tags.; 1030 /// \param[in] inputColumns the names of the columns to be passed to the callable.; 1031 /// \param[in] inputColumns the names of the columns to be passed to the callable.; 1032 /// \param[in] nVariations number of variations returned by the expression. The corresponding tags will be `""0""`,; 1033 /// `""1""`, etc. ; 1034 /// \param[in] variationName a generic name for this set of varied values, e.g. `""ptvariation""`.; 1035 /// colName is used if none is provided.; 1036 ///; 1037 /// \note This overload ensures that the ambiguity between C++20 string, vector<string> construction from init list; 1038 /// is avoided.; 1039 ///; 1040 /// \sa This Vary() overload for more information.; 1041 template <typename F>; 1042 RInterface<Proxied, DS_t>; 1043 Vary(std::initializer_list<std::string> colNames, F &&expression, const ColumnNames_t &inputColumns,; 1044 std::size_t nVariations, std::string_view variationName); 1045 {; 1046 return Vary(std::vector<std::string>(colNames), std::forward<F>(expression), inputColumns, nVariations, variationName);; 1047 }; 1048 ; 1049 /// \brief Register systematic variations for a single existing column using custom variation tags.; 1050 /// \param[in] colName name of the column for which varied values are provided.; 1051 /// \param[in] expression a string containing valid C++ code that evaluates to an RVec containing the varied; 1052 /// values for the specified column.; 1053 /// \param[in] variationTags names for each of the varied values, e.g. `""up""` and `""down""`.; 1054 /// \param[in] variati",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:63761,Safety,avoid,avoided,63761,"tionTags;; 1148 variationTags.reserve(nVariations);; 1149 for (std::size_t i = 0u; i < nVariations; ++i); 1150 variationTags.emplace_back(std::to_string(i));; 1151 ; 1152 return Vary(colNames, expression, std::move(variationTags), variationName);; 1153 }; 1154 ; 1155 /// \brief Register systematic variations for multiple existing columns using auto-generated variation tags.; 1156 /// \param[in] colNames set of names of the columns for which varied values are provided.; 1157 /// \param[in] expression a string containing valid C++ code that evaluates to an RVec containing the varied; 1158 /// values for the specified column.; 1159 /// \param[in] nVariations number of variations returned by the expression. The corresponding tags will be `""0""`,; 1160 /// `""1""`, etc. ; 1161 /// \param[in] variationName a generic name for this set of varied values, e.g. `""ptvariation""`.; 1162 /// colName is used if none is provided.; 1163 ///; 1164 /// \note This overload ensures that the ambiguity between C++20 string, vector<string> construction from init list; 1165 /// is avoided.; 1166 ///; 1167 /// \sa This Vary() overload for more information.; 1168 RInterface<Proxied, DS_t> Vary(std::initializer_list<std::string> colNames, std::string_view expression,; 1169 std::size_t nVariations, std::string_view variationName); 1170 {; 1171 return Vary(std::vector<std::string>(colNames), expression, nVariations, variationName);; 1172 }; 1173 ; 1174 /// \brief Register systematic variations for multiple existing columns using custom variation tags.; 1175 /// \param[in] colNames set of names of the columns for which varied values are provided.; 1176 /// \param[in] expression a string containing valid C++ code that evaluates to an RVec or RVecs containing the varied; 1177 /// values for the specified columns.; 1178 /// \param[in] variationTags names for each of the varied values, e.g. `""up""` and `""down""`.; 1179 /// \param[in] variationName a generic name for this set of varied values, e.g. `""ptvari",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:89856,Safety,safe,safety,89856,"d of the dataset.; 1587 /// \return a node of the computation graph for which the range is defined.; 1588 ///; 1589 /// See the other Range overload for a detailed description.; 1590 // clang-format on; 1591 RInterface<RDFDetail::RRange<Proxied>, DS_t> Range(unsigned int end) { return Range(0, end, 1); }; 1592 ; 1593 // clang-format off; 1594 ////////////////////////////////////////////////////////////////////////////; 1595 /// \brief Execute a user-defined function on each entry (*instant action*).; 1596 /// \param[in] f Function, lambda expression, functor class or any other callable object performing user defined calculations.; 1597 /// \param[in] columns Names of the columns/branches in input to the user function.; 1598 ///; 1599 /// The callable `f` is invoked once per entry. This is an *instant action*:; 1600 /// upon invocation, an event loop as well as execution of all scheduled actions; 1601 /// is triggered.; 1602 /// Users are responsible for the thread-safety of this callable when executing; 1603 /// with implicit multi-threading enabled (i.e. ROOT::EnableImplicitMT).; 1604 ///; 1605 /// ### Example usage:; 1606 /// ~~~{.cpp}; 1607 /// myDf.Foreach([](int i){ std::cout << i << std::endl;}, {""myIntColumn""});; 1608 /// ~~~; 1609 // clang-format on; 1610 template <typename F>; 1611 void Foreach(F f, const ColumnNames_t &columns = {}); 1612 {; 1613 using arg_types = typename TTraits::CallableTraits<decltype(f)>::arg_types_nodecay;; 1614 using ret_type = typename TTraits::CallableTraits<decltype(f)>::ret_type;; 1615 ForeachSlot(RDFInternal::AddSlotParameter<ret_type>(f, arg_types()), columns);; 1616 }; 1617 ; 1618 // clang-format off; 1619 ////////////////////////////////////////////////////////////////////////////; 1620 /// \brief Execute a user-defined function requiring a processing slot index on each entry (*instant action*).; 1621 /// \param[in] f Function, lambda expression, functor class or any other callable object performing user defined calculations",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:91312,Safety,safe,safe,91312,"s_nodecay;; 1614 using ret_type = typename TTraits::CallableTraits<decltype(f)>::ret_type;; 1615 ForeachSlot(RDFInternal::AddSlotParameter<ret_type>(f, arg_types()), columns);; 1616 }; 1617 ; 1618 // clang-format off; 1619 ////////////////////////////////////////////////////////////////////////////; 1620 /// \brief Execute a user-defined function requiring a processing slot index on each entry (*instant action*).; 1621 /// \param[in] f Function, lambda expression, functor class or any other callable object performing user defined calculations.; 1622 /// \param[in] columns Names of the columns/branches in input to the user function.; 1623 ///; 1624 /// Same as `Foreach`, but the user-defined function takes an extra; 1625 /// `unsigned int` as its first parameter, the *processing slot index*.; 1626 /// This *slot index* will be assigned a different value, `0` to `poolSize - 1`,; 1627 /// for each thread of execution.; 1628 /// This is meant as a helper in writing thread-safe `Foreach`; 1629 /// actions when using `RDataFrame` after `ROOT::EnableImplicitMT()`.; 1630 /// The user-defined processing callable is able to follow different; 1631 /// *streams of processing* indexed by the first parameter.; 1632 /// `ForeachSlot` works just as well with single-thread execution: in that; 1633 /// case `slot` will always be `0`.; 1634 ///; 1635 /// ### Example usage:; 1636 /// ~~~{.cpp}; 1637 /// myDf.ForeachSlot([](unsigned int s, int i){ std::cout << ""Slot "" << s << "": ""<< i << std::endl;}, {""myIntColumn""});; 1638 /// ~~~; 1639 // clang-format on; 1640 template <typename F>; 1641 void ForeachSlot(F f, const ColumnNames_t &columns = {}); 1642 {; 1643 using ColTypes_t = TypeTraits::RemoveFirstParameter_t<typename TTraits::CallableTraits<F>::arg_types>;; 1644 constexpr auto nColumns = ColTypes_t::list_size;; 1645 ; 1646 const auto validColumnNames = GetValidatedColumnNames(nColumns, columns);; 1647 CheckAndFillDSColumns(validColumnNames, ColTypes_t());; 1648 ; 1649 using Helper_t ",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:167188,Safety,safe,safe,167188,"tup operations.; 2944 /// It must reset the state of the helper to the expected state at the beginning of the event loop: the same helper,; 2945 /// or copies of it, might be used for multiple event loops (e.g. in the presence of systematic variations).; 2946 /// * `void InitTask(TTreeReader *, unsigned int slot)`: each working thread shall call this method during the event; 2947 /// loop, before processing a batch of entries. The pointer passed as argument, if not null, will point to the TTreeReader; 2948 /// that RDataFrame has set up to read the task's batch of entries. It is passed to the helper to allow certain advanced optimizations; 2949 /// it should not usually serve any purpose for the Helper. This method is often no-op for simple helpers.; 2950 /// * `void Exec(unsigned int slot, ColumnTypes...columnValues)`: each working thread shall call this method; 2951 /// during the event-loop, possibly concurrently. No two threads will ever call Exec with the same 'slot' value:; 2952 /// this parameter is there to facilitate writing thread-safe helpers. The other arguments will be the values of; 2953 /// the requested columns for the particular entry being processed.; 2954 /// * `void Finalize()`: this method is called at the end of the event loop. Commonly used to finalize the contents of the result.; 2955 /// * `std::string GetActionName()`: it returns a string identifier for this type of action that RDataFrame will use in; 2956 /// diagnostics, SaveGraph(), etc.; 2957 ///; 2958 /// ### Optional methods; 2959 ///; 2960 /// If these methods are implemented they enable extra functionality as per the description below.; 2961 ///; 2962 /// * `Result_t &PartialUpdate(unsigned int slot)`: if present, it must return the value of the partial result of this action for the given 'slot'.; 2963 /// Different threads might call this method concurrently, but will do so with different 'slot' numbers.; 2964 /// RDataFrame leverages this method to implement RResultPtr::OnPartialR",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:168604,Safety,safe,safely,168604,"## Optional methods; 2959 ///; 2960 /// If these methods are implemented they enable extra functionality as per the description below.; 2961 ///; 2962 /// * `Result_t &PartialUpdate(unsigned int slot)`: if present, it must return the value of the partial result of this action for the given 'slot'.; 2963 /// Different threads might call this method concurrently, but will do so with different 'slot' numbers.; 2964 /// RDataFrame leverages this method to implement RResultPtr::OnPartialResult().; 2965 /// * `ROOT::RDF::SampleCallback_t GetSampleCallback()`: if present, it must return a callable with the; 2966 /// appropriate signature (see ROOT::RDF::SampleCallback_t) that will be invoked at the beginning of the processing; 2967 /// of every sample, as in DefinePerSample().; 2968 /// * `Helper MakeNew(void *newResult)`: if implemented, it enables varying the action's result with VariationsFor(). It takes a; 2969 /// type-erased new result that can be safely cast to a `std::shared_ptr<Result_t> *` (a pointer to shared pointer) and should; 2970 /// be used as the action's output result.; 2971 ///; 2972 /// In case Book is called without specifying column types as template arguments, corresponding typed code will be just-in-time compiled; 2973 /// by RDataFrame. In that case the Helper class needs to be known to the ROOT interpreter.; 2974 ///; 2975 /// This action is *lazy*: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr.; 2976 ///; 2977 /// ### Examples; 2978 /// See [this tutorial](https://root.cern/doc/master/df018__customActions_8C.html) for an example implementation of an action helper.; 2979 ///; 2980 /// It is also possible to inspect the code used by built-in RDataFrame actions at ActionHelpers.hxx.; 2981 ///; 2982 // clang-format on; 2983 template <typename FirstColumn = RDFDetail::RInferredType, typename... OtherColumns, typename Helper>; 2984 RResultPtr<typename std::decay_t<Helper>::Result_t> Book(Helper &&helper,",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:169762,Safety,sanity check,sanity checks,169762,"iled; 2973 /// by RDataFrame. In that case the Helper class needs to be known to the ROOT interpreter.; 2974 ///; 2975 /// This action is *lazy*: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr.; 2976 ///; 2977 /// ### Examples; 2978 /// See [this tutorial](https://root.cern/doc/master/df018__customActions_8C.html) for an example implementation of an action helper.; 2979 ///; 2980 /// It is also possible to inspect the code used by built-in RDataFrame actions at ActionHelpers.hxx.; 2981 ///; 2982 // clang-format on; 2983 template <typename FirstColumn = RDFDetail::RInferredType, typename... OtherColumns, typename Helper>; 2984 RResultPtr<typename std::decay_t<Helper>::Result_t> Book(Helper &&helper, const ColumnNames_t &columns = {}); 2985 {; 2986 using HelperT = std::decay_t<Helper>;; 2987 // TODO add more static sanity checks on Helper; 2988 using AH = RDFDetail::RActionImpl<HelperT>;; 2989 static_assert(std::is_base_of<AH, HelperT>::value && std::is_convertible<HelperT *, AH *>::value,; 2990 ""Action helper of type T must publicly inherit from ROOT::Detail::RDF::RActionImpl<T>"");; 2991 ; 2992 auto hPtr = std::make_shared<HelperT>(std::forward<Helper>(helper));; 2993 auto resPtr = hPtr->GetResultPtr();; 2994 ; 2995 if (std::is_same<FirstColumn, RDFDetail::RInferredType>::value && columns.empty()) {; 2996 return CallCreateActionWithoutColsIfPossible<HelperT>(resPtr, hPtr, TTraits::TypeList<FirstColumn>{});; 2997 } else {; 2998 return CreateAction<RDFInternal::ActionTags::Book, FirstColumn, OtherColumns...>(columns, resPtr, hPtr,; 2999 fProxiedPtr, columns.size());; 3000 }; 3001 }; 3002 ; 3003 ////////////////////////////////////////////////////////////////////////////; 3004 /// \brief Provides a representation of the columns in the dataset.; 3005 /// \tparam ColumnTypes variadic list of branch/column types.; 3006 /// \param[in] columnList Names of the columns to be displayed.; 3007 /// \param[in] nRows Number of events f",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:20218,Security,access,accessible,20218,"roxiedPtr, fColRegister, columns);; 398 return RInterface<F_t, DS_t>(std::move(filterPtr), *fLoopManager, fColRegister);; 399 }; 400 ; 401 // clang-format off; 402 ////////////////////////////////////////////////////////////////////////////; 403 /// \brief Define a new column.; 404 /// \param[in] name The name of the defined column.; 405 /// \param[in] expression Function, lambda expression, functor class or any other callable object producing the defined value. Returns the value that will be assigned to the defined column.; 406 /// \param[in] columns Names of the columns/branches in input to the producer function.; 407 /// \return the first node of the computation graph for which the new quantity is defined.; 408 ///; 409 /// Define a column that will be visible from all subsequent nodes; 410 /// of the functional chain. The `expression` is only evaluated for entries that pass; 411 /// all the preceding filters.; 412 /// A new variable is created called `name`, accessible as if it was contained; 413 /// in the dataset from subsequent transformations/actions.; 414 ///; 415 /// Use cases include:; 416 /// * caching the results of complex calculations for easy and efficient multiple access; 417 /// * extraction of quantities of interest from complex objects; 418 ///; 419 /// An exception is thrown if the name of the new column is already in use in this branch of the computation graph.; 420 ///; 421 /// ### Example usage:; 422 /// ~~~{.cpp}; 423 /// // assuming a function with signature:; 424 /// double myComplexCalculation(const RVec<float> &muon_pts);; 425 /// // we can pass it directly to Define; 426 /// auto df_with_define = df.Define(""newColumn"", myComplexCalculation, {""muon_pts""});; 427 /// // alternatively, we can pass the body of the function as a string, as in Filter:; 428 /// auto df_with_define = df.Define(""newColumn"", ""x*x + y*y"");; 429 /// ~~~; 430 ///; 431 /// \note If the body of the string expression contains an explicit `return` statement (even if it is",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:20441,Security,access,access,20441,"; 403 /// \brief Define a new column.; 404 /// \param[in] name The name of the defined column.; 405 /// \param[in] expression Function, lambda expression, functor class or any other callable object producing the defined value. Returns the value that will be assigned to the defined column.; 406 /// \param[in] columns Names of the columns/branches in input to the producer function.; 407 /// \return the first node of the computation graph for which the new quantity is defined.; 408 ///; 409 /// Define a column that will be visible from all subsequent nodes; 410 /// of the functional chain. The `expression` is only evaluated for entries that pass; 411 /// all the preceding filters.; 412 /// A new variable is created called `name`, accessible as if it was contained; 413 /// in the dataset from subsequent transformations/actions.; 414 ///; 415 /// Use cases include:; 416 /// * caching the results of complex calculations for easy and efficient multiple access; 417 /// * extraction of quantities of interest from complex objects; 418 ///; 419 /// An exception is thrown if the name of the new column is already in use in this branch of the computation graph.; 420 ///; 421 /// ### Example usage:; 422 /// ~~~{.cpp}; 423 /// // assuming a function with signature:; 424 /// double myComplexCalculation(const RVec<float> &muon_pts);; 425 /// // we can pass it directly to Define; 426 /// auto df_with_define = df.Define(""newColumn"", myComplexCalculation, {""muon_pts""});; 427 /// // alternatively, we can pass the body of the function as a string, as in Filter:; 428 /// auto df_with_define = df.Define(""newColumn"", ""x*x + y*y"");; 429 /// ~~~; 430 ///; 431 /// \note If the body of the string expression contains an explicit `return` statement (even if it is in a nested; 432 /// scope), RDataFrame _will not_ add another one in front of the expression. So this will not work:; 433 /// ~~~{.cpp}; 434 /// df.Define(""x2"", ""Map(v, [](float e) { return e*e; })""); 435 /// ~~~; 436 /// but instead thi",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:38092,Security,inject,inject,38092,"olumn.; 708 /// \param[in] expression A C++ callable that computes the new value of the defined column.; 709 /// \return the first node of the computation graph for which the new quantity is defined.; 710 ///; 711 /// The signature of the callable passed as second argument should be `T(unsigned int slot, const ROOT::RDF::RSampleInfo &id)`; 712 /// where:; 713 /// - `T` is the type of the defined column; 714 /// - `slot` is a number in the range [0, nThreads) that is different for each processing thread. This can simplify; 715 /// the definition of thread-safe callables if you are interested in using parallel capabilities of RDataFrame.; 716 /// - `id` is an instance of a ROOT::RDF::RSampleInfo object which contains information about the sample which is; 717 /// being processed (see the class docs for more information).; 718 ///; 719 /// DefinePerSample() is useful to e.g. define a quantity that depends on which TTree in which TFile is being; 720 /// processed or to inject a callback into the event loop that is only called when the processing of a new sample; 721 /// starts rather than at every entry.; 722 ///; 723 /// The callable will be invoked once per input TTree or once per multi-thread task, whichever is more often.; 724 ///; 725 /// ### Example usage:; 726 /// ~~~{.cpp}; 727 /// ROOT::RDataFrame df{""mytree"", {""sample1.root"",""sample2.root""}};; 728 /// df.DefinePerSample(""weightbysample"",; 729 /// [](unsigned int slot, const ROOT::RDF::RSampleInfo &id); 730 /// { return id.Contains(""sample1"") ? 1.0f : 2.0f; });; 731 /// ~~~; 732 // clang-format on; 733 // TODO we could SFINAE on F's signature to provide friendlier compilation errors in case of signature mismatch; 734 template <typename F, typename RetType_t = typename TTraits::CallableTraits<F>::ret_type>; 735 RInterface<Proxied, DS_t> DefinePerSample(std::string_view name, F expression); 736 {; 737 RDFInternal::CheckValidCppVarName(name, ""DefinePerSample"");; 738 RDFInternal::CheckForRedefinition(""DefinePerSampl",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:42249,Security,access,accessible,42249,"]); 773 /// df.DefinePerSample('weightbysample', 'rdfsampleinfo_.Contains(""sample1"") ? 1.0f : 2.0f'); 774 /// ~~~; 775 ///; 776 /// \note; 777 /// If you have declared some C++ function to the interpreter, the correct syntax to call that function with this; 778 /// overload of DefinePerSample is by calling it explicitly with the special names `rdfslot_` and `rdfsampleinfo_` as; 779 /// input parameters. This is for example the correct way to call this overload when working in PyROOT:; 780 /// ~~~{.py}; 781 /// ROOT.gInterpreter.Declare(; 782 /// """"""; 783 /// float weights(unsigned int slot, const ROOT::RDF::RSampleInfo &id){; 784 /// return id.Contains(""sample1"") ? 1.0f : 2.0f;; 785 /// }; 786 /// """"""); 787 /// df = ROOT.RDataFrame(""mytree"", [""sample1.root"",""sample2.root""]); 788 /// df.DefinePerSample(""weightsbysample"", ""weights(rdfslot_, rdfsampleinfo_)""); 789 /// ~~~; 790 ///; 791 /// \note; 792 /// Differently from what happens in Define(), the string expression passed to DefinePerSample cannot contain; 793 /// column names other than those mentioned above: the expression is evaluated once before the processing of the; 794 /// sample even starts, so column values are not accessible.; 795 // clang-format on; 796 RInterface<Proxied, DS_t> DefinePerSample(std::string_view name, std::string_view expression); 797 {; 798 RDFInternal::CheckValidCppVarName(name, ""DefinePerSample"");; 799 // these checks must be done before jitting lest we throw exceptions in jitted code; 800 RDFInternal::CheckForRedefinition(""DefinePerSample"", name, fColRegister, fLoopManager->GetBranchNames(),; 801 fDataSource ? fDataSource->GetColumnNames() : ColumnNames_t{});; 802 ; 803 auto upcastNodeOnHeap = RDFInternal::MakeSharedOnHeap(RDFInternal::UpcastNode(fProxiedPtr));; 804 auto jittedDefine =; 805 RDFInternal::BookDefinePerSampleJit(name, expression, *fLoopManager, fColRegister, upcastNodeOnHeap);; 806 ; 807 RDFInternal::RColumnRegister newCols(fColRegister);; 808 newCols.AddDefine(std::move(j",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:44511,Security,access,accessed,44511," Define calls. It must; 819 /// return an RVec of varied values, one for each variation tag, in the same order as the tags.; 820 /// \param[in] inputColumns the names of the columns to be passed to the callable.; 821 /// \param[in] variationTags names for each of the varied values, e.g. `""up""` and `""down""`.; 822 /// \param[in] variationName a generic name for this set of varied values, e.g. `""ptvariation""`.; 823 ///; 824 /// Vary provides a natural and flexible syntax to define systematic variations that automatically propagate to; 825 /// Filters, Defines and results. RDataFrame usage of columns with attached variations does not change, but for; 826 /// results that depend on any varied quantity, a map/dictionary of varied results can be produced with; 827 /// ROOT::RDF::Experimental::VariationsFor (see the example below).; 828 ///; 829 /// The dictionary will contain a ""nominal"" value (accessed with the ""nominal"" key) for the unchanged result, and; 830 /// values for each of the systematic variations that affected the result (via upstream Filters or via direct or; 831 /// indirect dependencies of the column values on some registered variations). The keys will be a composition of; 832 /// variation names and tags, e.g. ""pt:up"" and ""pt:down"" for the example below.; 833 ///; 834 /// In the following example we add up/down variations of pt and fill a histogram with a quantity that depends on pt.; 835 /// We automatically obtain three histograms in output (""nominal"", ""pt:up"" and ""pt:down""):; 836 /// ~~~{.cpp}; 837 /// auto nominal_hx =; 838 /// df.Vary(""pt"", [] (double pt) { return RVecD{pt*0.9, pt*1.1}; }, {""down"", ""up""}); 839 /// .Filter(""pt > k""); 840 /// .Define(""x"", someFunc, {""pt""}); 841 /// .Histo1D(""x"");; 842 ///; 843 /// auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; 844 /// hx[""nominal""].Draw();; 845 /// hx[""pt:down""].Draw(""SAME"");; 846 /// hx[""pt:up""].Draw(""SAME"");; 847 /// ~~~; 848 /// RDataFrame computes all variations as part of a single l",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:47994,Security,access,accessible,47994,"; 873 /// \param[in] colName name of the column for which varied values are provided.; 874 /// \param[in] expression a callable that evaluates the varied values for the specified columns. The callable can; 875 /// take any column values as input, similarly to what happens during Filter and Define calls. It must; 876 /// return an RVec of varied values, one for each variation tag, in the same order as the tags.; 877 /// \param[in] inputColumns the names of the columns to be passed to the callable.; 878 /// \param[in] nVariations number of variations returned by the expression. The corresponding tags will be `""0""`,; 879 /// `""1""`, etc. ; 880 /// \param[in] variationName a generic name for this set of varied values, e.g. `""ptvariation""`.; 881 /// colName is used if none is provided.; 882 ///; 883 /// This overload of Vary takes an nVariations parameter instead of a list of tag names.; 884 /// The varied results will be accessible via the keys of the dictionary with the form `variationName:N` where `N`; 885 /// is the corresponding sequential tag starting at 0 and going up to `nVariations - 1`.; 886 ///; 887 /// Example usage:; 888 /// ~~~{.cpp}; 889 /// auto nominal_hx =; 890 /// df.Vary(""pt"", [] (double pt) { return RVecD{pt*0.9, pt*1.1}; }, 2); 891 /// .Histo1D(""x"");; 892 ///; 893 /// auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; 894 /// hx[""nominal""].Draw();; 895 /// hx[""x:0""].Draw(""SAME"");; 896 /// hx[""x:1""].Draw(""SAME"");; 897 /// ~~~; 898 ///; 899 /// \sa This Vary() overload for more information.; 900 template <typename F>; 901 RInterface<Proxied, DS_t> Vary(std::string_view colName, F &&expression, const ColumnNames_t &inputColumns,; 902 std::size_t nVariations, std::string_view variationName = """"); 903 {; 904 R__ASSERT(nVariations > 0 && ""Must have at least one variation."");; 905 ; 906 std::vector<std::string> variationTags;; 907 variationTags.reserve(nVariations);; 908 for (std::size_t i = 0u; i < nVariations; ++i); 909 variationTags.emplace_b",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:61757,Security,access,accessible,61757,"::move(variationTags), variationName);; 1116 }; 1117 ; 1118 /// \brief Register systematic variations for multiple existing columns using auto-generated variation tags.; 1119 /// \param[in] colNames set of names of the columns for which varied values are provided.; 1120 /// \param[in] expression a string containing valid C++ code that evaluates to an RVec or RVecs containing the varied; 1121 /// values for the specified columns.; 1122 /// \param[in] nVariations number of variations returned by the expression. The corresponding tags will be `""0""`,; 1123 /// `""1""`, etc. ; 1124 /// \param[in] variationName a generic name for this set of varied values, e.g. `""ptvariation""`.; 1125 ///; 1126 /// This overload adds the possibility for the expression used to evaluate the varied values to be just-in-time; 1127 /// compiled. It takes an nVariations parameter instead of a list of tag names.; 1128 /// The varied results will be accessible via the keys of the dictionary with the form `variationName:N` where `N`; 1129 /// is the corresponding sequential tag starting at 0 and going up to `nVariations - 1`.; 1130 /// The example below shows how Vary() is used while dealing with multiple columns.; 1131 ///; 1132 /// ~~~{.cpp}; 1133 /// auto nominal_hx =; 1134 /// df.Vary({""x"", ""y""}, ""ROOT::RVec<ROOT::RVecD>{{x*0.9, x*1.1}, {y*0.9, y*1.1}}"", 2, ""xy""); 1135 /// .Histo1D(""x"", ""y"");; 1136 ///; 1137 /// auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; 1138 /// hx[""nominal""].Draw();; 1139 /// hx[""xy:0""].Draw(""SAME"");; 1140 /// hx[""xy:1""].Draw(""SAME"");; 1141 /// ~~~; 1142 ///; 1143 /// \sa This Vary() overload for more information.; 1144 RInterface<Proxied, DS_t> Vary(const std::vector<std::string> &colNames, std::string_view expression,; 1145 std::size_t nVariations, std::string_view variationName); 1146 {; 1147 std::vector<std::string> variationTags;; 1148 variationTags.reserve(nVariations);; 1149 for (std::size_t i = 0u; i < nVariations; ++i); 1150 variationTags.emplace_ba",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:66579,Security,access,accessible,66579,"3 /// \brief Allow to refer to a column with a different name.; 1204 /// \param[in] alias name of the column alias; 1205 /// \param[in] columnName of the column to be aliased; 1206 /// \return the first node of the computation graph for which the alias is available.; 1207 ///; 1208 /// Aliasing an alias is supported.; 1209 ///; 1210 /// ### Example usage:; 1211 /// ~~~{.cpp}; 1212 /// auto df_with_alias = df.Alias(""simple_name"", ""very_long&complex_name!!!"");; 1213 /// ~~~; 1214 RInterface<Proxied, DS_t> Alias(std::string_view alias, std::string_view columnName); 1215 {; 1216 // The symmetry with Define is clear. We want to:; 1217 // - Create globally the alias and return this very node, unchanged; 1218 // - Make aliases accessible based on chains and not globally; 1219 ; 1220 // Helper to find out if a name is a column; 1221 auto &dsColumnNames = fDataSource ? fDataSource->GetColumnNames() : ColumnNames_t{};; 1222 ; 1223 constexpr auto where = ""Alias"";; 1224 RDFInternal::CheckValidCppVarName(alias, where);; 1225 // If the alias name is a column name, there is a problem; 1226 RDFInternal::CheckForRedefinition(where, alias, fColRegister, fLoopManager->GetBranchNames(), dsColumnNames);; 1227 ; 1228 const auto validColumnName = GetValidatedColumnNames(1, {std::string(columnName)})[0];; 1229 ; 1230 RDFInternal::RColumnRegister newCols(fColRegister);; 1231 newCols.AddAlias(alias, validColumnName);; 1232 ; 1233 RInterface<Proxied, DS_t> newInterface(fProxiedPtr, *fLoopManager, std::move(newCols));; 1234 ; 1235 return newInterface;; 1236 }; 1237 ; 1238 ////////////////////////////////////////////////////////////////////////////; 1239 /// \brief Save selected columns to disk, in a new TTree `treename` in file `filename`.; 1240 /// \tparam ColumnTypes variadic list of branch/column types.; 1241 /// \param[in] treename The name of the output TTree.; 1242 /// \param[in] filename The name of the output TFile.; 1243 /// \param[in] columnList The list of names of the columns/branc",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:80103,Security,access,access,80103,"fied.; 1413 ///; 1414 /// See above for a more complete description and example usages.; 1415 RResultPtr<RInterface<RLoopManager>> Snapshot(std::string_view treename, std::string_view filename,; 1416 std::initializer_list<std::string> columnList,; 1417 const RSnapshotOptions &options = RSnapshotOptions()); 1418 {; 1419 ColumnNames_t selectedColumns(columnList);; 1420 return Snapshot(treename, filename, selectedColumns, options);; 1421 }; 1422 // clang-format on; 1423 ; 1424 ////////////////////////////////////////////////////////////////////////////; 1425 /// \brief Save selected columns in memory.; 1426 /// \tparam ColumnTypes variadic list of branch/column types.; 1427 /// \param[in] columnList columns to be cached in memory.; 1428 /// \return a `RDataFrame` that wraps the cached dataset.; 1429 ///; 1430 /// This action returns a new `RDataFrame` object, completely detached from; 1431 /// the originating `RDataFrame`. The new dataframe only contains the cached; 1432 /// columns and stores their content in memory for fast, zero-copy subsequent access.; 1433 ///; 1434 /// Use `Cache` if you know you will only need a subset of the (`Filter`ed) data that; 1435 /// fits in memory and that will be accessed many times.; 1436 ///; 1437 /// \note Cache will refuse to process columns with names of the form `#columnname`. These are special columns; 1438 /// made available by some data sources (e.g. RNTupleDS) that represent the size of column `columnname`, and are; 1439 /// not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an; 1440 /// Alias(): `df.Alias(""nbar"", ""#bar"").Cache<std::size_t>(..., {""nbar""})`.; 1441 ///; 1442 /// ### Example usage:; 1443 ///; 1444 /// **Types and columns specified:**; 1445 /// ~~~{.cpp}; 1446 /// auto cache_some_cols_df = df.Cache<double, MyClass, int>({""col0"", ""col1"", ""col2""});; 1447 /// ~~~; 1448 ///; 1449 /// **Types inferred and columns specified (this invocation relies on jitting):**; 145",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:80255,Security,access,accessed,80255,"g_view treename, std::string_view filename,; 1416 std::initializer_list<std::string> columnList,; 1417 const RSnapshotOptions &options = RSnapshotOptions()); 1418 {; 1419 ColumnNames_t selectedColumns(columnList);; 1420 return Snapshot(treename, filename, selectedColumns, options);; 1421 }; 1422 // clang-format on; 1423 ; 1424 ////////////////////////////////////////////////////////////////////////////; 1425 /// \brief Save selected columns in memory.; 1426 /// \tparam ColumnTypes variadic list of branch/column types.; 1427 /// \param[in] columnList columns to be cached in memory.; 1428 /// \return a `RDataFrame` that wraps the cached dataset.; 1429 ///; 1430 /// This action returns a new `RDataFrame` object, completely detached from; 1431 /// the originating `RDataFrame`. The new dataframe only contains the cached; 1432 /// columns and stores their content in memory for fast, zero-copy subsequent access.; 1433 ///; 1434 /// Use `Cache` if you know you will only need a subset of the (`Filter`ed) data that; 1435 /// fits in memory and that will be accessed many times.; 1436 ///; 1437 /// \note Cache will refuse to process columns with names of the form `#columnname`. These are special columns; 1438 /// made available by some data sources (e.g. RNTupleDS) that represent the size of column `columnname`, and are; 1439 /// not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an; 1440 /// Alias(): `df.Alias(""nbar"", ""#bar"").Cache<std::size_t>(..., {""nbar""})`.; 1441 ///; 1442 /// ### Example usage:; 1443 ///; 1444 /// **Types and columns specified:**; 1445 /// ~~~{.cpp}; 1446 /// auto cache_some_cols_df = df.Cache<double, MyClass, int>({""col0"", ""col1"", ""col2""});; 1447 /// ~~~; 1448 ///; 1449 /// **Types inferred and columns specified (this invocation relies on jitting):**; 1450 /// ~~~{.cpp}; 1451 /// auto cache_some_cols_df = df.Cache({""col0"", ""col1"", ""col2""});; 1452 /// ~~~; 1453 ///; 1454 /// **Types inferred and columns",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:101335,Security,validat,validatedColumns,101335,"duce column type (this invocation needs jitting internally); 1795 /// auto myHist1 = myDf.Histo1D({""histName"", ""histTitle"", 64u, 0., 128.}, ""myColumn"");; 1796 /// // Explicit column type; 1797 /// auto myHist2 = myDf.Histo1D<float>({""histName"", ""histTitle"", 64u, 0., 128.}, ""myColumn"");; 1798 /// ~~~; 1799 ///; 1800 /// \note Differently from other ROOT interfaces, the returned histogram is not associated to gDirectory; 1801 /// and the caller is responsible for its lifetime (in particular, a typical source of confusion is that; 1802 /// if result histograms go out of scope before the end of the program, ROOT might display a blank canvas).; 1803 template <typename V = RDFDetail::RInferredType>; 1804 RResultPtr<::TH1D> Histo1D(const TH1DModel &model = {"""", """", 128u, 0., 0.}, std::string_view vName = """"); 1805 {; 1806 const auto userColumns = vName.empty() ? ColumnNames_t() : ColumnNames_t({std::string(vName)});; 1807 ; 1808 const auto validatedColumns = GetValidatedColumnNames(1, userColumns);; 1809 ; 1810 std::shared_ptr<::TH1D> h(nullptr);; 1811 {; 1812 ROOT::Internal::RDF::RIgnoreErrorLevelRAII iel(kError);; 1813 h = model.GetHistogram();; 1814 h->SetDirectory(nullptr);; 1815 }; 1816 ; 1817 if (h->GetXaxis()->GetXmax() == h->GetXaxis()->GetXmin()); 1818 RDFInternal::HistoUtils<::TH1D>::SetCanExtendAllAxes(*h);; 1819 return CreateAction<RDFInternal::ActionTags::Histo1D, V>(validatedColumns, h, h, fProxiedPtr);; 1820 }; 1821 ; 1822 ////////////////////////////////////////////////////////////////////////////; 1823 /// \brief Fill and return a one-dimensional histogram with the values of a column (*lazy action*).; 1824 /// \tparam V The type of the column used to fill the histogram.; 1825 /// \param[in] vName The name of the column that will fill the histogram.; 1826 /// \return the monodimensional histogram wrapped in a RResultPtr.; 1827 ///; 1828 /// This overload uses a default model histogram TH1D(name, title, 128u, 0., 0.).; 1829 /// The ""name"" and ""title"" strings",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:101784,Security,validat,validatedColumns,101784," is not associated to gDirectory; 1801 /// and the caller is responsible for its lifetime (in particular, a typical source of confusion is that; 1802 /// if result histograms go out of scope before the end of the program, ROOT might display a blank canvas).; 1803 template <typename V = RDFDetail::RInferredType>; 1804 RResultPtr<::TH1D> Histo1D(const TH1DModel &model = {"""", """", 128u, 0., 0.}, std::string_view vName = """"); 1805 {; 1806 const auto userColumns = vName.empty() ? ColumnNames_t() : ColumnNames_t({std::string(vName)});; 1807 ; 1808 const auto validatedColumns = GetValidatedColumnNames(1, userColumns);; 1809 ; 1810 std::shared_ptr<::TH1D> h(nullptr);; 1811 {; 1812 ROOT::Internal::RDF::RIgnoreErrorLevelRAII iel(kError);; 1813 h = model.GetHistogram();; 1814 h->SetDirectory(nullptr);; 1815 }; 1816 ; 1817 if (h->GetXaxis()->GetXmax() == h->GetXaxis()->GetXmin()); 1818 RDFInternal::HistoUtils<::TH1D>::SetCanExtendAllAxes(*h);; 1819 return CreateAction<RDFInternal::ActionTags::Histo1D, V>(validatedColumns, h, h, fProxiedPtr);; 1820 }; 1821 ; 1822 ////////////////////////////////////////////////////////////////////////////; 1823 /// \brief Fill and return a one-dimensional histogram with the values of a column (*lazy action*).; 1824 /// \tparam V The type of the column used to fill the histogram.; 1825 /// \param[in] vName The name of the column that will fill the histogram.; 1826 /// \return the monodimensional histogram wrapped in a RResultPtr.; 1827 ///; 1828 /// This overload uses a default model histogram TH1D(name, title, 128u, 0., 0.).; 1829 /// The ""name"" and ""title"" strings are built starting from the input column name.; 1830 /// See the description of the first Histo1D() overload for more details.; 1831 ///; 1832 /// ### Example usage:; 1833 /// ~~~{.cpp}; 1834 /// // Deduce column type (this invocation needs jitting internally); 1835 /// auto myHist1 = myDf.Histo1D(""myColumn"");; 1836 /// // Explicit column type; 1837 /// auto myHist2 = myDf.Histo1D<float",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:125029,Security,validat,validatedColumns,125029,"lues"");; 2219 /// ~~~; 2220 ///; 2221 /// \note Differently from other ROOT interfaces, the returned TGraph is not associated to gDirectory; 2222 /// and the caller is responsible for its lifetime (in particular, a typical source of confusion is that; 2223 /// if result histograms go out of scope before the end of the program, ROOT might display a blank canvas).; 2224 template <typename X = RDFDetail::RInferredType, typename Y = RDFDetail::RInferredType>; 2225 RResultPtr<::TGraph> Graph(std::string_view x = """", std::string_view y = """"); 2226 {; 2227 auto graph = std::make_shared<::TGraph>();; 2228 const std::vector<std::string_view> columnViews = {x, y};; 2229 const auto userColumns = RDFInternal::AtLeastOneEmptyString(columnViews); 2230 ? ColumnNames_t(); 2231 : ColumnNames_t(columnViews.begin(), columnViews.end());; 2232 ; 2233 const auto validatedColumns = GetValidatedColumnNames(2, userColumns);; 2234 ; 2235 // We build a default name and title based on the input columns; 2236 const auto g_name = validatedColumns[1] + ""_vs_"" + validatedColumns[0];; 2237 const auto g_title = validatedColumns[1] + "" vs "" + validatedColumns[0];; 2238 graph->SetNameTitle(g_name.c_str(), g_title.c_str());; 2239 graph->GetXaxis()->SetTitle(validatedColumns[0].c_str());; 2240 graph->GetYaxis()->SetTitle(validatedColumns[1].c_str());; 2241 ; 2242 return CreateAction<RDFInternal::ActionTags::Graph, X, Y>(validatedColumns, graph, graph, fProxiedPtr);; 2243 }; 2244 ; 2245 ////////////////////////////////////////////////////////////////////////////; 2246 /// \brief Fill and return a TGraphAsymmErrors object (*lazy action*).; 2247 /// \param[in] x The name of the column that will fill the x axis.; 2248 /// \param[in] y The name of the column that will fill the y axis.; 2249 /// \param[in] exl The name of the column of X low errors; 2250 /// \param[in] exh The name of the column of X high errors; 2251 /// \param[in] eyl The name of the column of Y low errors; 2252 /// \param[in] eyh The name o",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:125192,Security,validat,validatedColumns,125192,"lues"");; 2219 /// ~~~; 2220 ///; 2221 /// \note Differently from other ROOT interfaces, the returned TGraph is not associated to gDirectory; 2222 /// and the caller is responsible for its lifetime (in particular, a typical source of confusion is that; 2223 /// if result histograms go out of scope before the end of the program, ROOT might display a blank canvas).; 2224 template <typename X = RDFDetail::RInferredType, typename Y = RDFDetail::RInferredType>; 2225 RResultPtr<::TGraph> Graph(std::string_view x = """", std::string_view y = """"); 2226 {; 2227 auto graph = std::make_shared<::TGraph>();; 2228 const std::vector<std::string_view> columnViews = {x, y};; 2229 const auto userColumns = RDFInternal::AtLeastOneEmptyString(columnViews); 2230 ? ColumnNames_t(); 2231 : ColumnNames_t(columnViews.begin(), columnViews.end());; 2232 ; 2233 const auto validatedColumns = GetValidatedColumnNames(2, userColumns);; 2234 ; 2235 // We build a default name and title based on the input columns; 2236 const auto g_name = validatedColumns[1] + ""_vs_"" + validatedColumns[0];; 2237 const auto g_title = validatedColumns[1] + "" vs "" + validatedColumns[0];; 2238 graph->SetNameTitle(g_name.c_str(), g_title.c_str());; 2239 graph->GetXaxis()->SetTitle(validatedColumns[0].c_str());; 2240 graph->GetYaxis()->SetTitle(validatedColumns[1].c_str());; 2241 ; 2242 return CreateAction<RDFInternal::ActionTags::Graph, X, Y>(validatedColumns, graph, graph, fProxiedPtr);; 2243 }; 2244 ; 2245 ////////////////////////////////////////////////////////////////////////////; 2246 /// \brief Fill and return a TGraphAsymmErrors object (*lazy action*).; 2247 /// \param[in] x The name of the column that will fill the x axis.; 2248 /// \param[in] y The name of the column that will fill the y axis.; 2249 /// \param[in] exl The name of the column of X low errors; 2250 /// \param[in] exh The name of the column of X high errors; 2251 /// \param[in] eyl The name of the column of Y low errors; 2252 /// \param[in] eyh The name o",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:125223,Security,validat,validatedColumns,125223,"lues"");; 2219 /// ~~~; 2220 ///; 2221 /// \note Differently from other ROOT interfaces, the returned TGraph is not associated to gDirectory; 2222 /// and the caller is responsible for its lifetime (in particular, a typical source of confusion is that; 2223 /// if result histograms go out of scope before the end of the program, ROOT might display a blank canvas).; 2224 template <typename X = RDFDetail::RInferredType, typename Y = RDFDetail::RInferredType>; 2225 RResultPtr<::TGraph> Graph(std::string_view x = """", std::string_view y = """"); 2226 {; 2227 auto graph = std::make_shared<::TGraph>();; 2228 const std::vector<std::string_view> columnViews = {x, y};; 2229 const auto userColumns = RDFInternal::AtLeastOneEmptyString(columnViews); 2230 ? ColumnNames_t(); 2231 : ColumnNames_t(columnViews.begin(), columnViews.end());; 2232 ; 2233 const auto validatedColumns = GetValidatedColumnNames(2, userColumns);; 2234 ; 2235 // We build a default name and title based on the input columns; 2236 const auto g_name = validatedColumns[1] + ""_vs_"" + validatedColumns[0];; 2237 const auto g_title = validatedColumns[1] + "" vs "" + validatedColumns[0];; 2238 graph->SetNameTitle(g_name.c_str(), g_title.c_str());; 2239 graph->GetXaxis()->SetTitle(validatedColumns[0].c_str());; 2240 graph->GetYaxis()->SetTitle(validatedColumns[1].c_str());; 2241 ; 2242 return CreateAction<RDFInternal::ActionTags::Graph, X, Y>(validatedColumns, graph, graph, fProxiedPtr);; 2243 }; 2244 ; 2245 ////////////////////////////////////////////////////////////////////////////; 2246 /// \brief Fill and return a TGraphAsymmErrors object (*lazy action*).; 2247 /// \param[in] x The name of the column that will fill the x axis.; 2248 /// \param[in] y The name of the column that will fill the y axis.; 2249 /// \param[in] exl The name of the column of X low errors; 2250 /// \param[in] exh The name of the column of X high errors; 2251 /// \param[in] eyl The name of the column of Y low errors; 2252 /// \param[in] eyh The name o",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:125271,Security,validat,validatedColumns,125271,"lues"");; 2219 /// ~~~; 2220 ///; 2221 /// \note Differently from other ROOT interfaces, the returned TGraph is not associated to gDirectory; 2222 /// and the caller is responsible for its lifetime (in particular, a typical source of confusion is that; 2223 /// if result histograms go out of scope before the end of the program, ROOT might display a blank canvas).; 2224 template <typename X = RDFDetail::RInferredType, typename Y = RDFDetail::RInferredType>; 2225 RResultPtr<::TGraph> Graph(std::string_view x = """", std::string_view y = """"); 2226 {; 2227 auto graph = std::make_shared<::TGraph>();; 2228 const std::vector<std::string_view> columnViews = {x, y};; 2229 const auto userColumns = RDFInternal::AtLeastOneEmptyString(columnViews); 2230 ? ColumnNames_t(); 2231 : ColumnNames_t(columnViews.begin(), columnViews.end());; 2232 ; 2233 const auto validatedColumns = GetValidatedColumnNames(2, userColumns);; 2234 ; 2235 // We build a default name and title based on the input columns; 2236 const auto g_name = validatedColumns[1] + ""_vs_"" + validatedColumns[0];; 2237 const auto g_title = validatedColumns[1] + "" vs "" + validatedColumns[0];; 2238 graph->SetNameTitle(g_name.c_str(), g_title.c_str());; 2239 graph->GetXaxis()->SetTitle(validatedColumns[0].c_str());; 2240 graph->GetYaxis()->SetTitle(validatedColumns[1].c_str());; 2241 ; 2242 return CreateAction<RDFInternal::ActionTags::Graph, X, Y>(validatedColumns, graph, graph, fProxiedPtr);; 2243 }; 2244 ; 2245 ////////////////////////////////////////////////////////////////////////////; 2246 /// \brief Fill and return a TGraphAsymmErrors object (*lazy action*).; 2247 /// \param[in] x The name of the column that will fill the x axis.; 2248 /// \param[in] y The name of the column that will fill the y axis.; 2249 /// \param[in] exl The name of the column of X low errors; 2250 /// \param[in] exh The name of the column of X high errors; 2251 /// \param[in] eyl The name of the column of Y low errors; 2252 /// \param[in] eyh The name o",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:125302,Security,validat,validatedColumns,125302,"lues"");; 2219 /// ~~~; 2220 ///; 2221 /// \note Differently from other ROOT interfaces, the returned TGraph is not associated to gDirectory; 2222 /// and the caller is responsible for its lifetime (in particular, a typical source of confusion is that; 2223 /// if result histograms go out of scope before the end of the program, ROOT might display a blank canvas).; 2224 template <typename X = RDFDetail::RInferredType, typename Y = RDFDetail::RInferredType>; 2225 RResultPtr<::TGraph> Graph(std::string_view x = """", std::string_view y = """"); 2226 {; 2227 auto graph = std::make_shared<::TGraph>();; 2228 const std::vector<std::string_view> columnViews = {x, y};; 2229 const auto userColumns = RDFInternal::AtLeastOneEmptyString(columnViews); 2230 ? ColumnNames_t(); 2231 : ColumnNames_t(columnViews.begin(), columnViews.end());; 2232 ; 2233 const auto validatedColumns = GetValidatedColumnNames(2, userColumns);; 2234 ; 2235 // We build a default name and title based on the input columns; 2236 const auto g_name = validatedColumns[1] + ""_vs_"" + validatedColumns[0];; 2237 const auto g_title = validatedColumns[1] + "" vs "" + validatedColumns[0];; 2238 graph->SetNameTitle(g_name.c_str(), g_title.c_str());; 2239 graph->GetXaxis()->SetTitle(validatedColumns[0].c_str());; 2240 graph->GetYaxis()->SetTitle(validatedColumns[1].c_str());; 2241 ; 2242 return CreateAction<RDFInternal::ActionTags::Graph, X, Y>(validatedColumns, graph, graph, fProxiedPtr);; 2243 }; 2244 ; 2245 ////////////////////////////////////////////////////////////////////////////; 2246 /// \brief Fill and return a TGraphAsymmErrors object (*lazy action*).; 2247 /// \param[in] x The name of the column that will fill the x axis.; 2248 /// \param[in] y The name of the column that will fill the y axis.; 2249 /// \param[in] exl The name of the column of X low errors; 2250 /// \param[in] exh The name of the column of X high errors; 2251 /// \param[in] eyl The name of the column of Y low errors; 2252 /// \param[in] eyh The name o",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:125417,Security,validat,validatedColumns,125417," of confusion is that; 2223 /// if result histograms go out of scope before the end of the program, ROOT might display a blank canvas).; 2224 template <typename X = RDFDetail::RInferredType, typename Y = RDFDetail::RInferredType>; 2225 RResultPtr<::TGraph> Graph(std::string_view x = """", std::string_view y = """"); 2226 {; 2227 auto graph = std::make_shared<::TGraph>();; 2228 const std::vector<std::string_view> columnViews = {x, y};; 2229 const auto userColumns = RDFInternal::AtLeastOneEmptyString(columnViews); 2230 ? ColumnNames_t(); 2231 : ColumnNames_t(columnViews.begin(), columnViews.end());; 2232 ; 2233 const auto validatedColumns = GetValidatedColumnNames(2, userColumns);; 2234 ; 2235 // We build a default name and title based on the input columns; 2236 const auto g_name = validatedColumns[1] + ""_vs_"" + validatedColumns[0];; 2237 const auto g_title = validatedColumns[1] + "" vs "" + validatedColumns[0];; 2238 graph->SetNameTitle(g_name.c_str(), g_title.c_str());; 2239 graph->GetXaxis()->SetTitle(validatedColumns[0].c_str());; 2240 graph->GetYaxis()->SetTitle(validatedColumns[1].c_str());; 2241 ; 2242 return CreateAction<RDFInternal::ActionTags::Graph, X, Y>(validatedColumns, graph, graph, fProxiedPtr);; 2243 }; 2244 ; 2245 ////////////////////////////////////////////////////////////////////////////; 2246 /// \brief Fill and return a TGraphAsymmErrors object (*lazy action*).; 2247 /// \param[in] x The name of the column that will fill the x axis.; 2248 /// \param[in] y The name of the column that will fill the y axis.; 2249 /// \param[in] exl The name of the column of X low errors; 2250 /// \param[in] exh The name of the column of X high errors; 2251 /// \param[in] eyl The name of the column of Y low errors; 2252 /// \param[in] eyh The name of the column of Y high errors; 2253 /// \return the TGraphAsymmErrors wrapped in a RResultPtr.; 2254 ///; 2255 /// Columns can be of a container type (e.g. std::vector<double>), in which case the graph; 2256 /// is filled with e",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:125481,Security,validat,validatedColumns,125481,"cope before the end of the program, ROOT might display a blank canvas).; 2224 template <typename X = RDFDetail::RInferredType, typename Y = RDFDetail::RInferredType>; 2225 RResultPtr<::TGraph> Graph(std::string_view x = """", std::string_view y = """"); 2226 {; 2227 auto graph = std::make_shared<::TGraph>();; 2228 const std::vector<std::string_view> columnViews = {x, y};; 2229 const auto userColumns = RDFInternal::AtLeastOneEmptyString(columnViews); 2230 ? ColumnNames_t(); 2231 : ColumnNames_t(columnViews.begin(), columnViews.end());; 2232 ; 2233 const auto validatedColumns = GetValidatedColumnNames(2, userColumns);; 2234 ; 2235 // We build a default name and title based on the input columns; 2236 const auto g_name = validatedColumns[1] + ""_vs_"" + validatedColumns[0];; 2237 const auto g_title = validatedColumns[1] + "" vs "" + validatedColumns[0];; 2238 graph->SetNameTitle(g_name.c_str(), g_title.c_str());; 2239 graph->GetXaxis()->SetTitle(validatedColumns[0].c_str());; 2240 graph->GetYaxis()->SetTitle(validatedColumns[1].c_str());; 2241 ; 2242 return CreateAction<RDFInternal::ActionTags::Graph, X, Y>(validatedColumns, graph, graph, fProxiedPtr);; 2243 }; 2244 ; 2245 ////////////////////////////////////////////////////////////////////////////; 2246 /// \brief Fill and return a TGraphAsymmErrors object (*lazy action*).; 2247 /// \param[in] x The name of the column that will fill the x axis.; 2248 /// \param[in] y The name of the column that will fill the y axis.; 2249 /// \param[in] exl The name of the column of X low errors; 2250 /// \param[in] exh The name of the column of X high errors; 2251 /// \param[in] eyl The name of the column of Y low errors; 2252 /// \param[in] eyh The name of the column of Y high errors; 2253 /// \return the TGraphAsymmErrors wrapped in a RResultPtr.; 2254 ///; 2255 /// Columns can be of a container type (e.g. std::vector<double>), in which case the graph; 2256 /// is filled with each one of the elements of the container.; 2257 /// If Multithre",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:125582,Security,validat,validatedColumns,125582,"<::TGraph> Graph(std::string_view x = """", std::string_view y = """"); 2226 {; 2227 auto graph = std::make_shared<::TGraph>();; 2228 const std::vector<std::string_view> columnViews = {x, y};; 2229 const auto userColumns = RDFInternal::AtLeastOneEmptyString(columnViews); 2230 ? ColumnNames_t(); 2231 : ColumnNames_t(columnViews.begin(), columnViews.end());; 2232 ; 2233 const auto validatedColumns = GetValidatedColumnNames(2, userColumns);; 2234 ; 2235 // We build a default name and title based on the input columns; 2236 const auto g_name = validatedColumns[1] + ""_vs_"" + validatedColumns[0];; 2237 const auto g_title = validatedColumns[1] + "" vs "" + validatedColumns[0];; 2238 graph->SetNameTitle(g_name.c_str(), g_title.c_str());; 2239 graph->GetXaxis()->SetTitle(validatedColumns[0].c_str());; 2240 graph->GetYaxis()->SetTitle(validatedColumns[1].c_str());; 2241 ; 2242 return CreateAction<RDFInternal::ActionTags::Graph, X, Y>(validatedColumns, graph, graph, fProxiedPtr);; 2243 }; 2244 ; 2245 ////////////////////////////////////////////////////////////////////////////; 2246 /// \brief Fill and return a TGraphAsymmErrors object (*lazy action*).; 2247 /// \param[in] x The name of the column that will fill the x axis.; 2248 /// \param[in] y The name of the column that will fill the y axis.; 2249 /// \param[in] exl The name of the column of X low errors; 2250 /// \param[in] exh The name of the column of X high errors; 2251 /// \param[in] eyl The name of the column of Y low errors; 2252 /// \param[in] eyh The name of the column of Y high errors; 2253 /// \return the TGraphAsymmErrors wrapped in a RResultPtr.; 2254 ///; 2255 /// Columns can be of a container type (e.g. std::vector<double>), in which case the graph; 2256 /// is filled with each one of the elements of the container.; 2257 /// If Multithreading is enabled, the order in which points are inserted is undefined.; 2258 ///; 2259 /// This action is *lazy*: upon invocation of this method the calculation is; 2260 /// booked bu",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:128302,Security,validat,validatedColumns,128302," blank canvas).; 2274 template <typename X = RDFDetail::RInferredType, typename Y = RDFDetail::RInferredType,; 2275 typename EXL = RDFDetail::RInferredType, typename EXH = RDFDetail::RInferredType,; 2276 typename EYL = RDFDetail::RInferredType, typename EYH = RDFDetail::RInferredType>; 2277 RResultPtr<::TGraphAsymmErrors>; 2278 GraphAsymmErrors(std::string_view x = """", std::string_view y = """", std::string_view exl = """",; 2279 std::string_view exh = """", std::string_view eyl = """", std::string_view eyh = """"); 2280 {; 2281 auto graph = std::make_shared<::TGraphAsymmErrors>();; 2282 const std::vector<std::string_view> columnViews = {x, y, exl, exh, eyl, eyh};; 2283 const auto userColumns = RDFInternal::AtLeastOneEmptyString(columnViews); 2284 ? ColumnNames_t(); 2285 : ColumnNames_t(columnViews.begin(), columnViews.end());; 2286 ; 2287 const auto validatedColumns = GetValidatedColumnNames(6, userColumns);; 2288 ; 2289 // We build a default name and title based on the input columns; 2290 const auto g_name = validatedColumns[1] + ""_vs_"" + validatedColumns[0];; 2291 const auto g_title = validatedColumns[1] + "" vs "" + validatedColumns[0];; 2292 graph->SetNameTitle(g_name.c_str(), g_title.c_str());; 2293 graph->GetXaxis()->SetTitle(validatedColumns[0].c_str());; 2294 graph->GetYaxis()->SetTitle(validatedColumns[1].c_str());; 2295 ; 2296 return CreateAction<RDFInternal::ActionTags::GraphAsymmErrors, X, Y, EXL, EXH, EYL, EYH>(validatedColumns, graph,; 2297 graph, fProxiedPtr);; 2298 }; 2299 ; 2300 ////////////////////////////////////////////////////////////////////////////; 2301 /// \brief Fill and return a one-dimensional profile (*lazy action*).; 2302 /// \tparam V1 The type of the column the values of which are used to fill the profile. Inferred if not present.; 2303 /// \tparam V2 The type of the column the values of which are used to fill the profile. Inferred if not present.; 2304 /// \param[in] model The model to be considered to build the new return value.; 2305 /// \para",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:128465,Security,validat,validatedColumns,128465," blank canvas).; 2274 template <typename X = RDFDetail::RInferredType, typename Y = RDFDetail::RInferredType,; 2275 typename EXL = RDFDetail::RInferredType, typename EXH = RDFDetail::RInferredType,; 2276 typename EYL = RDFDetail::RInferredType, typename EYH = RDFDetail::RInferredType>; 2277 RResultPtr<::TGraphAsymmErrors>; 2278 GraphAsymmErrors(std::string_view x = """", std::string_view y = """", std::string_view exl = """",; 2279 std::string_view exh = """", std::string_view eyl = """", std::string_view eyh = """"); 2280 {; 2281 auto graph = std::make_shared<::TGraphAsymmErrors>();; 2282 const std::vector<std::string_view> columnViews = {x, y, exl, exh, eyl, eyh};; 2283 const auto userColumns = RDFInternal::AtLeastOneEmptyString(columnViews); 2284 ? ColumnNames_t(); 2285 : ColumnNames_t(columnViews.begin(), columnViews.end());; 2286 ; 2287 const auto validatedColumns = GetValidatedColumnNames(6, userColumns);; 2288 ; 2289 // We build a default name and title based on the input columns; 2290 const auto g_name = validatedColumns[1] + ""_vs_"" + validatedColumns[0];; 2291 const auto g_title = validatedColumns[1] + "" vs "" + validatedColumns[0];; 2292 graph->SetNameTitle(g_name.c_str(), g_title.c_str());; 2293 graph->GetXaxis()->SetTitle(validatedColumns[0].c_str());; 2294 graph->GetYaxis()->SetTitle(validatedColumns[1].c_str());; 2295 ; 2296 return CreateAction<RDFInternal::ActionTags::GraphAsymmErrors, X, Y, EXL, EXH, EYL, EYH>(validatedColumns, graph,; 2297 graph, fProxiedPtr);; 2298 }; 2299 ; 2300 ////////////////////////////////////////////////////////////////////////////; 2301 /// \brief Fill and return a one-dimensional profile (*lazy action*).; 2302 /// \tparam V1 The type of the column the values of which are used to fill the profile. Inferred if not present.; 2303 /// \tparam V2 The type of the column the values of which are used to fill the profile. Inferred if not present.; 2304 /// \param[in] model The model to be considered to build the new return value.; 2305 /// \para",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:128496,Security,validat,validatedColumns,128496," blank canvas).; 2274 template <typename X = RDFDetail::RInferredType, typename Y = RDFDetail::RInferredType,; 2275 typename EXL = RDFDetail::RInferredType, typename EXH = RDFDetail::RInferredType,; 2276 typename EYL = RDFDetail::RInferredType, typename EYH = RDFDetail::RInferredType>; 2277 RResultPtr<::TGraphAsymmErrors>; 2278 GraphAsymmErrors(std::string_view x = """", std::string_view y = """", std::string_view exl = """",; 2279 std::string_view exh = """", std::string_view eyl = """", std::string_view eyh = """"); 2280 {; 2281 auto graph = std::make_shared<::TGraphAsymmErrors>();; 2282 const std::vector<std::string_view> columnViews = {x, y, exl, exh, eyl, eyh};; 2283 const auto userColumns = RDFInternal::AtLeastOneEmptyString(columnViews); 2284 ? ColumnNames_t(); 2285 : ColumnNames_t(columnViews.begin(), columnViews.end());; 2286 ; 2287 const auto validatedColumns = GetValidatedColumnNames(6, userColumns);; 2288 ; 2289 // We build a default name and title based on the input columns; 2290 const auto g_name = validatedColumns[1] + ""_vs_"" + validatedColumns[0];; 2291 const auto g_title = validatedColumns[1] + "" vs "" + validatedColumns[0];; 2292 graph->SetNameTitle(g_name.c_str(), g_title.c_str());; 2293 graph->GetXaxis()->SetTitle(validatedColumns[0].c_str());; 2294 graph->GetYaxis()->SetTitle(validatedColumns[1].c_str());; 2295 ; 2296 return CreateAction<RDFInternal::ActionTags::GraphAsymmErrors, X, Y, EXL, EXH, EYL, EYH>(validatedColumns, graph,; 2297 graph, fProxiedPtr);; 2298 }; 2299 ; 2300 ////////////////////////////////////////////////////////////////////////////; 2301 /// \brief Fill and return a one-dimensional profile (*lazy action*).; 2302 /// \tparam V1 The type of the column the values of which are used to fill the profile. Inferred if not present.; 2303 /// \tparam V2 The type of the column the values of which are used to fill the profile. Inferred if not present.; 2304 /// \param[in] model The model to be considered to build the new return value.; 2305 /// \para",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:128544,Security,validat,validatedColumns,128544," blank canvas).; 2274 template <typename X = RDFDetail::RInferredType, typename Y = RDFDetail::RInferredType,; 2275 typename EXL = RDFDetail::RInferredType, typename EXH = RDFDetail::RInferredType,; 2276 typename EYL = RDFDetail::RInferredType, typename EYH = RDFDetail::RInferredType>; 2277 RResultPtr<::TGraphAsymmErrors>; 2278 GraphAsymmErrors(std::string_view x = """", std::string_view y = """", std::string_view exl = """",; 2279 std::string_view exh = """", std::string_view eyl = """", std::string_view eyh = """"); 2280 {; 2281 auto graph = std::make_shared<::TGraphAsymmErrors>();; 2282 const std::vector<std::string_view> columnViews = {x, y, exl, exh, eyl, eyh};; 2283 const auto userColumns = RDFInternal::AtLeastOneEmptyString(columnViews); 2284 ? ColumnNames_t(); 2285 : ColumnNames_t(columnViews.begin(), columnViews.end());; 2286 ; 2287 const auto validatedColumns = GetValidatedColumnNames(6, userColumns);; 2288 ; 2289 // We build a default name and title based on the input columns; 2290 const auto g_name = validatedColumns[1] + ""_vs_"" + validatedColumns[0];; 2291 const auto g_title = validatedColumns[1] + "" vs "" + validatedColumns[0];; 2292 graph->SetNameTitle(g_name.c_str(), g_title.c_str());; 2293 graph->GetXaxis()->SetTitle(validatedColumns[0].c_str());; 2294 graph->GetYaxis()->SetTitle(validatedColumns[1].c_str());; 2295 ; 2296 return CreateAction<RDFInternal::ActionTags::GraphAsymmErrors, X, Y, EXL, EXH, EYL, EYH>(validatedColumns, graph,; 2297 graph, fProxiedPtr);; 2298 }; 2299 ; 2300 ////////////////////////////////////////////////////////////////////////////; 2301 /// \brief Fill and return a one-dimensional profile (*lazy action*).; 2302 /// \tparam V1 The type of the column the values of which are used to fill the profile. Inferred if not present.; 2303 /// \tparam V2 The type of the column the values of which are used to fill the profile. Inferred if not present.; 2304 /// \param[in] model The model to be considered to build the new return value.; 2305 /// \para",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:128575,Security,validat,validatedColumns,128575," blank canvas).; 2274 template <typename X = RDFDetail::RInferredType, typename Y = RDFDetail::RInferredType,; 2275 typename EXL = RDFDetail::RInferredType, typename EXH = RDFDetail::RInferredType,; 2276 typename EYL = RDFDetail::RInferredType, typename EYH = RDFDetail::RInferredType>; 2277 RResultPtr<::TGraphAsymmErrors>; 2278 GraphAsymmErrors(std::string_view x = """", std::string_view y = """", std::string_view exl = """",; 2279 std::string_view exh = """", std::string_view eyl = """", std::string_view eyh = """"); 2280 {; 2281 auto graph = std::make_shared<::TGraphAsymmErrors>();; 2282 const std::vector<std::string_view> columnViews = {x, y, exl, exh, eyl, eyh};; 2283 const auto userColumns = RDFInternal::AtLeastOneEmptyString(columnViews); 2284 ? ColumnNames_t(); 2285 : ColumnNames_t(columnViews.begin(), columnViews.end());; 2286 ; 2287 const auto validatedColumns = GetValidatedColumnNames(6, userColumns);; 2288 ; 2289 // We build a default name and title based on the input columns; 2290 const auto g_name = validatedColumns[1] + ""_vs_"" + validatedColumns[0];; 2291 const auto g_title = validatedColumns[1] + "" vs "" + validatedColumns[0];; 2292 graph->SetNameTitle(g_name.c_str(), g_title.c_str());; 2293 graph->GetXaxis()->SetTitle(validatedColumns[0].c_str());; 2294 graph->GetYaxis()->SetTitle(validatedColumns[1].c_str());; 2295 ; 2296 return CreateAction<RDFInternal::ActionTags::GraphAsymmErrors, X, Y, EXL, EXH, EYL, EYH>(validatedColumns, graph,; 2297 graph, fProxiedPtr);; 2298 }; 2299 ; 2300 ////////////////////////////////////////////////////////////////////////////; 2301 /// \brief Fill and return a one-dimensional profile (*lazy action*).; 2302 /// \tparam V1 The type of the column the values of which are used to fill the profile. Inferred if not present.; 2303 /// \tparam V2 The type of the column the values of which are used to fill the profile. Inferred if not present.; 2304 /// \param[in] model The model to be considered to build the new return value.; 2305 /// \para",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:128690,Security,validat,validatedColumns,128690,":RInferredType, typename EYH = RDFDetail::RInferredType>; 2277 RResultPtr<::TGraphAsymmErrors>; 2278 GraphAsymmErrors(std::string_view x = """", std::string_view y = """", std::string_view exl = """",; 2279 std::string_view exh = """", std::string_view eyl = """", std::string_view eyh = """"); 2280 {; 2281 auto graph = std::make_shared<::TGraphAsymmErrors>();; 2282 const std::vector<std::string_view> columnViews = {x, y, exl, exh, eyl, eyh};; 2283 const auto userColumns = RDFInternal::AtLeastOneEmptyString(columnViews); 2284 ? ColumnNames_t(); 2285 : ColumnNames_t(columnViews.begin(), columnViews.end());; 2286 ; 2287 const auto validatedColumns = GetValidatedColumnNames(6, userColumns);; 2288 ; 2289 // We build a default name and title based on the input columns; 2290 const auto g_name = validatedColumns[1] + ""_vs_"" + validatedColumns[0];; 2291 const auto g_title = validatedColumns[1] + "" vs "" + validatedColumns[0];; 2292 graph->SetNameTitle(g_name.c_str(), g_title.c_str());; 2293 graph->GetXaxis()->SetTitle(validatedColumns[0].c_str());; 2294 graph->GetYaxis()->SetTitle(validatedColumns[1].c_str());; 2295 ; 2296 return CreateAction<RDFInternal::ActionTags::GraphAsymmErrors, X, Y, EXL, EXH, EYL, EYH>(validatedColumns, graph,; 2297 graph, fProxiedPtr);; 2298 }; 2299 ; 2300 ////////////////////////////////////////////////////////////////////////////; 2301 /// \brief Fill and return a one-dimensional profile (*lazy action*).; 2302 /// \tparam V1 The type of the column the values of which are used to fill the profile. Inferred if not present.; 2303 /// \tparam V2 The type of the column the values of which are used to fill the profile. Inferred if not present.; 2304 /// \param[in] model The model to be considered to build the new return value.; 2305 /// \param[in] v1Name The name of the column that will fill the x axis.; 2306 /// \param[in] v2Name The name of the column that will fill the y axis.; 2307 /// \return the monodimensional profile wrapped in a RResultPtr.; 2308 ///; 2309 ",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:128754,Security,validat,validatedColumns,128754,"ResultPtr<::TGraphAsymmErrors>; 2278 GraphAsymmErrors(std::string_view x = """", std::string_view y = """", std::string_view exl = """",; 2279 std::string_view exh = """", std::string_view eyl = """", std::string_view eyh = """"); 2280 {; 2281 auto graph = std::make_shared<::TGraphAsymmErrors>();; 2282 const std::vector<std::string_view> columnViews = {x, y, exl, exh, eyl, eyh};; 2283 const auto userColumns = RDFInternal::AtLeastOneEmptyString(columnViews); 2284 ? ColumnNames_t(); 2285 : ColumnNames_t(columnViews.begin(), columnViews.end());; 2286 ; 2287 const auto validatedColumns = GetValidatedColumnNames(6, userColumns);; 2288 ; 2289 // We build a default name and title based on the input columns; 2290 const auto g_name = validatedColumns[1] + ""_vs_"" + validatedColumns[0];; 2291 const auto g_title = validatedColumns[1] + "" vs "" + validatedColumns[0];; 2292 graph->SetNameTitle(g_name.c_str(), g_title.c_str());; 2293 graph->GetXaxis()->SetTitle(validatedColumns[0].c_str());; 2294 graph->GetYaxis()->SetTitle(validatedColumns[1].c_str());; 2295 ; 2296 return CreateAction<RDFInternal::ActionTags::GraphAsymmErrors, X, Y, EXL, EXH, EYL, EYH>(validatedColumns, graph,; 2297 graph, fProxiedPtr);; 2298 }; 2299 ; 2300 ////////////////////////////////////////////////////////////////////////////; 2301 /// \brief Fill and return a one-dimensional profile (*lazy action*).; 2302 /// \tparam V1 The type of the column the values of which are used to fill the profile. Inferred if not present.; 2303 /// \tparam V2 The type of the column the values of which are used to fill the profile. Inferred if not present.; 2304 /// \param[in] model The model to be considered to build the new return value.; 2305 /// \param[in] v1Name The name of the column that will fill the x axis.; 2306 /// \param[in] v2Name The name of the column that will fill the y axis.; 2307 /// \return the monodimensional profile wrapped in a RResultPtr.; 2308 ///; 2309 /// This action is *lazy*: upon invocation of this method the ca",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:128886,Security,validat,validatedColumns,128886,"ng_view eyh = """"); 2280 {; 2281 auto graph = std::make_shared<::TGraphAsymmErrors>();; 2282 const std::vector<std::string_view> columnViews = {x, y, exl, exh, eyl, eyh};; 2283 const auto userColumns = RDFInternal::AtLeastOneEmptyString(columnViews); 2284 ? ColumnNames_t(); 2285 : ColumnNames_t(columnViews.begin(), columnViews.end());; 2286 ; 2287 const auto validatedColumns = GetValidatedColumnNames(6, userColumns);; 2288 ; 2289 // We build a default name and title based on the input columns; 2290 const auto g_name = validatedColumns[1] + ""_vs_"" + validatedColumns[0];; 2291 const auto g_title = validatedColumns[1] + "" vs "" + validatedColumns[0];; 2292 graph->SetNameTitle(g_name.c_str(), g_title.c_str());; 2293 graph->GetXaxis()->SetTitle(validatedColumns[0].c_str());; 2294 graph->GetYaxis()->SetTitle(validatedColumns[1].c_str());; 2295 ; 2296 return CreateAction<RDFInternal::ActionTags::GraphAsymmErrors, X, Y, EXL, EXH, EYL, EYH>(validatedColumns, graph,; 2297 graph, fProxiedPtr);; 2298 }; 2299 ; 2300 ////////////////////////////////////////////////////////////////////////////; 2301 /// \brief Fill and return a one-dimensional profile (*lazy action*).; 2302 /// \tparam V1 The type of the column the values of which are used to fill the profile. Inferred if not present.; 2303 /// \tparam V2 The type of the column the values of which are used to fill the profile. Inferred if not present.; 2304 /// \param[in] model The model to be considered to build the new return value.; 2305 /// \param[in] v1Name The name of the column that will fill the x axis.; 2306 /// \param[in] v2Name The name of the column that will fill the y axis.; 2307 /// \return the monodimensional profile wrapped in a RResultPtr.; 2308 ///; 2309 /// This action is *lazy*: upon invocation of this method the calculation is; 2310 /// booked but not executed. Also see RResultPtr.; 2311 ///; 2312 /// ### Example usage:; 2313 /// ~~~{.cpp}; 2314 /// // Deduce column types (this invocation needs jitting internall",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:164712,Security,expose,expose,164712,"t<ArgTypes>,; 2912 typename T = TTraits::TakeFirstParameter_t<TTraits::RemoveFirstParameter_t<ArgTypes>>>; 2913 RResultPtr<U> Aggregate(AccFun aggregator, MergeFun merger, std::string_view columnName = """"); 2914 {; 2915 static_assert(; 2916 std::is_default_constructible<U>::value,; 2917 ""aggregated object cannot be default-constructed. Please provide an initialisation value (aggIdentity)"");; 2918 return Aggregate(std::move(aggregator), std::move(merger), columnName, U());; 2919 }; 2920 ; 2921 // clang-format off; 2922 ////////////////////////////////////////////////////////////////////////////; 2923 /// \brief Book execution of a custom action using a user-defined helper object.; 2924 /// \tparam FirstColumn The type of the first column used by this action. Inferred together with OtherColumns if not present.; 2925 /// \tparam OtherColumns A list of the types of the other columns used by this action; 2926 /// \tparam Helper The type of the user-defined helper. See below for the required interface it should expose.; 2927 /// \param[in] helper The Action Helper to be scheduled.; 2928 /// \param[in] columns The names of the columns on which the helper acts.; 2929 /// \return the result of the helper wrapped in a RResultPtr.; 2930 ///; 2931 /// This method books a custom action for execution. The behavior of the action is completely dependent on the; 2932 /// Helper object provided by the caller. The required interface for the helper is described below (more; 2933 /// methods that the ones required can be present, e.g. a constructor that takes the number of worker threads is usually useful):; 2934 ///; 2935 /// ### Mandatory interface; 2936 ///; 2937 /// * `Helper` must publicly inherit from `ROOT::Detail::RDF::RActionImpl<Helper>`; 2938 /// * `Helper::Result_t`: public alias for the type of the result of this action helper. `Result_t` must be default-constructible.; 2939 /// * `Helper(Helper &&)`: a move-constructor is required. Copy-constructors are discouraged.; 2940 /",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:184210,Security,inject,inject,184210,"216 ; 3217 return cachedRDF;; 3218 }; 3219 ; 3220 template <bool IsSingleColumn, typename F>; 3221 RInterface<Proxied, DS_t>; 3222 VaryImpl(const std::vector<std::string> &colNames, F &&expression, const ColumnNames_t &inputColumns,; 3223 const std::vector<std::string> &variationTags, std::string_view variationName); 3224 {; 3225 using F_t = std::decay_t<F>;; 3226 using ColTypes_t = typename TTraits::CallableTraits<F_t>::arg_types;; 3227 using RetType = typename TTraits::CallableTraits<F_t>::ret_type;; 3228 constexpr auto nColumns = ColTypes_t::list_size;; 3229 ; 3230 SanityChecksForVary<RetType>(colNames, variationTags, variationName);; 3231 ; 3232 const auto validColumnNames = GetValidatedColumnNames(nColumns, inputColumns);; 3233 CheckAndFillDSColumns(validColumnNames, ColTypes_t{});; 3234 ; 3235 auto retTypeName = RDFInternal::TypeID2TypeName(typeid(RetType));; 3236 if (retTypeName.empty()) {; 3237 // The type is not known to the interpreter, but we don't want to error out; 3238 // here, rather if/when this column is used in jitted code, so we inject a broken but telling type name.; 3239 const auto demangledType = RDFInternal::DemangleTypeIdName(typeid(RetType));; 3240 retTypeName = ""CLING_UNKNOWN_TYPE_"" + demangledType;; 3241 }; 3242 ; 3243 auto variation = std::make_shared<RDFInternal::RVariation<F_t, IsSingleColumn>>(; 3244 colNames, variationName, std::forward<F>(expression), variationTags, retTypeName, fColRegister, *fLoopManager,; 3245 validColumnNames);; 3246 ; 3247 RDFInternal::RColumnRegister newCols(fColRegister);; 3248 newCols.AddVariation(std::move(variation));; 3249 ; 3250 RInterface<Proxied> newInterface(fProxiedPtr, *fLoopManager, std::move(newCols));; 3251 ; 3252 return newInterface;; 3253 }; 3254 ; 3255 RInterface<Proxied, DS_t> JittedVaryImpl(const std::vector<std::string> &colNames, std::string_view expression,; 3256 const std::vector<std::string> &variationTags,; 3257 std::string_view variationName, bool isSingleColumn); 3258 {; 3259 R__ASSERT",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:37630,Usability,simpl,simplify,37630,"; 697 newCols.AddDefine(std::move(newColumn));; 698 ; 699 RInterface<Proxied> newInterface(fProxiedPtr, *fLoopManager, std::move(newCols));; 700 ; 701 return newInterface;; 702 }; 703 ; 704 // clang-format off; 705 ////////////////////////////////////////////////////////////////////////////; 706 /// \brief Define a new column that is updated when the input sample changes.; 707 /// \param[in] name The name of the defined column.; 708 /// \param[in] expression A C++ callable that computes the new value of the defined column.; 709 /// \return the first node of the computation graph for which the new quantity is defined.; 710 ///; 711 /// The signature of the callable passed as second argument should be `T(unsigned int slot, const ROOT::RDF::RSampleInfo &id)`; 712 /// where:; 713 /// - `T` is the type of the defined column; 714 /// - `slot` is a number in the range [0, nThreads) that is different for each processing thread. This can simplify; 715 /// the definition of thread-safe callables if you are interested in using parallel capabilities of RDataFrame.; 716 /// - `id` is an instance of a ROOT::RDF::RSampleInfo object which contains information about the sample which is; 717 /// being processed (see the class docs for more information).; 718 ///; 719 /// DefinePerSample() is useful to e.g. define a quantity that depends on which TTree in which TFile is being; 720 /// processed or to inject a callback into the event loop that is only called when the processing of a new sample; 721 /// starts rather than at every entry.; 722 ///; 723 /// The callable will be invoked once per input TTree or once per multi-thread task, whichever is more often.; 724 ///; 725 /// ### Example usage:; 726 /// ~~~{.cpp}; 727 /// ROOT::RDataFrame df{""mytree"", {""sample1.root"",""sample2.root""}};; 728 /// df.DefinePerSample(""weightbysample"",; 729 /// [](unsigned int slot, const ROOT::RDF::RSampleInfo &id); 730 /// { return id.Contains(""sample1"") ? 1.0f : 2.0f; });; 731 /// ~~~; 732 // clang-format ",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:66462,Usability,clear,clear,66462,"/// ~~~; 1194 ///; 1195 /// \sa This Vary() overload for more information.; 1196 RInterface<Proxied, DS_t> Vary(const std::vector<std::string> &colNames, std::string_view expression,; 1197 const std::vector<std::string> &variationTags, std::string_view variationName); 1198 {; 1199 return JittedVaryImpl(colNames, expression, variationTags, variationName, /*isSingleColumn=*/false);; 1200 }; 1201 ; 1202 ////////////////////////////////////////////////////////////////////////////; 1203 /// \brief Allow to refer to a column with a different name.; 1204 /// \param[in] alias name of the column alias; 1205 /// \param[in] columnName of the column to be aliased; 1206 /// \return the first node of the computation graph for which the alias is available.; 1207 ///; 1208 /// Aliasing an alias is supported.; 1209 ///; 1210 /// ### Example usage:; 1211 /// ~~~{.cpp}; 1212 /// auto df_with_alias = df.Alias(""simple_name"", ""very_long&complex_name!!!"");; 1213 /// ~~~; 1214 RInterface<Proxied, DS_t> Alias(std::string_view alias, std::string_view columnName); 1215 {; 1216 // The symmetry with Define is clear. We want to:; 1217 // - Create globally the alias and return this very node, unchanged; 1218 // - Make aliases accessible based on chains and not globally; 1219 ; 1220 // Helper to find out if a name is a column; 1221 auto &dsColumnNames = fDataSource ? fDataSource->GetColumnNames() : ColumnNames_t{};; 1222 ; 1223 constexpr auto where = ""Alias"";; 1224 RDFInternal::CheckValidCppVarName(alias, where);; 1225 // If the alias name is a column name, there is a problem; 1226 RDFInternal::CheckForRedefinition(where, alias, fColRegister, fLoopManager->GetBranchNames(), dsColumnNames);; 1227 ; 1228 const auto validColumnName = GetValidatedColumnNames(1, {std::string(columnName)})[0];; 1229 ; 1230 RDFInternal::RColumnRegister newCols(fColRegister);; 1231 newCols.AddAlias(alias, validColumnName);; 1232 ; 1233 RInterface<Proxied, DS_t> newInterface(fProxiedPtr, *fLoopManager, std::move(newCols));;",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:166875,Usability,simpl,simple,166875,"nt to this object. Note that this method can be called; 2942 /// _before_ Initialize(), because the RResultPtr is constructed before the event loop is started.; 2943 /// * `void Initialize()`: this method is called once before starting the event-loop. Useful for setup operations.; 2944 /// It must reset the state of the helper to the expected state at the beginning of the event loop: the same helper,; 2945 /// or copies of it, might be used for multiple event loops (e.g. in the presence of systematic variations).; 2946 /// * `void InitTask(TTreeReader *, unsigned int slot)`: each working thread shall call this method during the event; 2947 /// loop, before processing a batch of entries. The pointer passed as argument, if not null, will point to the TTreeReader; 2948 /// that RDataFrame has set up to read the task's batch of entries. It is passed to the helper to allow certain advanced optimizations; 2949 /// it should not usually serve any purpose for the Helper. This method is often no-op for simple helpers.; 2950 /// * `void Exec(unsigned int slot, ColumnTypes...columnValues)`: each working thread shall call this method; 2951 /// during the event-loop, possibly concurrently. No two threads will ever call Exec with the same 'slot' value:; 2952 /// this parameter is there to facilitate writing thread-safe helpers. The other arguments will be the values of; 2953 /// the requested columns for the particular entry being processed.; 2954 /// * `void Finalize()`: this method is called at the end of the event loop. Commonly used to finalize the contents of the result.; 2955 /// * `std::string GetActionName()`: it returns a string identifier for this type of action that RDataFrame will use in; 2956 /// diagnostics, SaveGraph(), etc.; 2957 ///; 2958 /// ### Optional methods; 2959 ///; 2960 /// If these methods are implemented they enable extra functionality as per the description below.; 2961 ///; 2962 /// * `Result_t &PartialUpdate(unsigned int slot)`: if present, it must r",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RInterface_8hxx_source.html:178727,Usability,simpl,simply,178727," by jitted actions; 3124 auto retTypeName = RDFInternal::TypeID2TypeName(typeid(RetType));; 3125 if (retTypeName.empty()) {; 3126 // The type is not known to the interpreter.; 3127 // We must not error out here, but if/when this column is used in jitted code; 3128 const auto demangledType = RDFInternal::DemangleTypeIdName(typeid(RetType));; 3129 retTypeName = ""CLING_UNKNOWN_TYPE_"" + demangledType;; 3130 }; 3131 ; 3132 using NewCol_t = RDFDetail::RDefine<F, DefineType>;; 3133 auto newColumn = std::make_shared<NewCol_t>(name, retTypeName, std::forward<F>(expression), validColumnNames,; 3134 fColRegister, *fLoopManager);; 3135 ; 3136 RDFInternal::RColumnRegister newCols(fColRegister);; 3137 newCols.AddDefine(std::move(newColumn));; 3138 ; 3139 RInterface<Proxied> newInterface(fProxiedPtr, *fLoopManager, std::move(newCols));; 3140 ; 3141 return newInterface;; 3142 }; 3143 ; 3144 // This overload is chosen when the callable passed to Define or DefineSlot returns void.; 3145 // It simply fires a compile-time error. This is preferable to a static_assert in the main `Define` overload because; 3146 // this way compilation of `Define` has no way to continue after throwing the error.; 3147 template <typename F, typename DefineType, typename RetType = typename TTraits::CallableTraits<F>::ret_type,; 3148 bool IsFStringConv = std::is_convertible<F, std::string>::value,; 3149 bool IsRetTypeDefConstr = std::is_default_constructible<RetType>::value>; 3150 std::enable_if_t<!IsFStringConv && !IsRetTypeDefConstr, RInterface<Proxied, DS_t>>; 3151 DefineImpl(std::string_view, F, const ColumnNames_t &, const std::string &); 3152 {; 3153 static_assert(std::is_default_constructible<typename TTraits::CallableTraits<F>::ret_type>::value,; 3154 ""Error in `Define`: type returned by expression is not default-constructible"");; 3155 return *this; // never reached; 3156 }; 3157 ; 3158 template <typename... ColumnTypes>; 3159 RResultPtr<RInterface<RLoopManager>> SnapshotImpl(std::string_view fullTree",MatchSource.WIKI,doc/master/RInterface_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx.html:1091,Availability,error,errors,1091,"T  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Macros |; Enumerations |; Functions ; RLogger.hxx File ReferenceCore ROOT classes » Base ROOT classes | ROOT7 classes. #include <atomic>; #include <list>; #include <memory>; #include <mutex>; #include <sstream>; #include <string>; #include <utility>. Include dependency graph for RLogger.hxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  ROOT::Experimental::Detail::RLogBuilder;  Builds a diagnostic entry, emitted by the static RLogManager upon destruction of this builder, where - by definition - the RLogEntry has been completely built. More...;  ; class  ROOT::Experimental::RLogChannel;  A log configuration for a channel, e.g. More...;  ; class  ROOT::Experimental::RLogDiagCount;  Keep track of emitted errors and warnings. More...;  ; class  ROOT::Experimental::RLogEntry;  A diagnostic that can be emitted by the RLogManager. More...;  ; class  ROOT::Experimental::RLogHandler;  Abstract RLogHandler base class. More...;  ; struct  ROOT::Experimental::RLogLocation;  A diagnostic location, part of an RLogEntry. More...;  ; class  ROOT::Experimental::RLogManager;  A RLogHandler that multiplexes diagnostics to different client RLogHandlers and keeps track of the sum of RLogDiagCounts for all channels. More...;  ; class  ROOT::Experimental::RLogScopedDiagCount;  Object to count the number of warnings and errors emitted by a section of code, after construction of this type. More...;  ; class  ROOT::Experimental::RLogScopedVerbosity;  Change the verbosity level (global or specific to the RLogChannel passed to the constructor) for the lifetime of this object. More...;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doe",MatchSource.WIKI,doc/master/RLogger_8hxx.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx.html
https://root.cern/doc/master/RLogger_8hxx.html:1698,Availability,error,errors,1698," or Opera instead. Classes; class  ROOT::Experimental::Detail::RLogBuilder;  Builds a diagnostic entry, emitted by the static RLogManager upon destruction of this builder, where - by definition - the RLogEntry has been completely built. More...;  ; class  ROOT::Experimental::RLogChannel;  A log configuration for a channel, e.g. More...;  ; class  ROOT::Experimental::RLogDiagCount;  Keep track of emitted errors and warnings. More...;  ; class  ROOT::Experimental::RLogEntry;  A diagnostic that can be emitted by the RLogManager. More...;  ; class  ROOT::Experimental::RLogHandler;  Abstract RLogHandler base class. More...;  ; struct  ROOT::Experimental::RLogLocation;  A diagnostic location, part of an RLogEntry. More...;  ; class  ROOT::Experimental::RLogManager;  A RLogHandler that multiplexes diagnostics to different client RLogHandlers and keeps track of the sum of RLogDiagCounts for all channels. More...;  ; class  ROOT::Experimental::RLogScopedDiagCount;  Object to count the number of warnings and errors emitted by a section of code, after construction of this type. More...;  ; class  ROOT::Experimental::RLogScopedVerbosity;  Change the verbosity level (global or specific to the RLogChannel passed to the constructor) for the lifetime of this object. More...;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Experimental;  ; namespace  ROOT::Experimental::Detail;  ; namespace  ROOT::Experimental::Internal;  . Macros; #define R__LOG_PRETTY_FUNCTION   __PRETTY_FUNCTION__;  ; #define R__LOG_TO_CHANNEL(SEVERITY, CHANNEL);  ; LogMacros; Macros to log diagnostics.; R__LOG_INFO(ROOT::Experimental::HistLog()) << ""all we know is "" << 42;; ; RLogScopedVerbosity verbose(kDebug + 5);; const int decreasedInfoLevel = 5;; R__LOG_DEBUG(ROOT::WebGUILog(), decreasedInfoLevel) << ""nitty-gritty details"";; R__LOG_DEBUG#define R",MatchSource.WIKI,doc/master/RLogger_8hxx.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx.html
https://root.cern/doc/master/RLogger_8hxx.html:980,Deployability,configurat,configuration,980,". ROOT: core/foundation/inc/ROOT/RLogger.hxx File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Macros |; Enumerations |; Functions ; RLogger.hxx File ReferenceCore ROOT classes » Base ROOT classes | ROOT7 classes. #include <atomic>; #include <list>; #include <memory>; #include <mutex>; #include <sstream>; #include <string>; #include <utility>. Include dependency graph for RLogger.hxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  ROOT::Experimental::Detail::RLogBuilder;  Builds a diagnostic entry, emitted by the static RLogManager upon destruction of this builder, where - by definition - the RLogEntry has been completely built. More...;  ; class  ROOT::Experimental::RLogChannel;  A log configuration for a channel, e.g. More...;  ; class  ROOT::Experimental::RLogDiagCount;  Keep track of emitted errors and warnings. More...;  ; class  ROOT::Experimental::RLogEntry;  A diagnostic that can be emitted by the RLogManager. More...;  ; class  ROOT::Experimental::RLogHandler;  Abstract RLogHandler base class. More...;  ; struct  ROOT::Experimental::RLogLocation;  A diagnostic location, part of an RLogEntry. More...;  ; class  ROOT::Experimental::RLogManager;  A RLogHandler that multiplexes diagnostics to different client RLogHandlers and keeps track of the sum of RLogDiagCounts for all channels. More...;  ; class  ROOT::Experimental::RLogScopedDiagCount;  Object to count the number of warnings and errors emitted by a section of code, after construction of this type. More...;  ; class  ROOT::Experimental::RLogScopedVerbosity;  Change the verbosity level (global or specific to the RLogChannel passed to the constructor) for the lifetime of this object. More...;  . Namespaces; namespace  ROOT;  tbb:",MatchSource.WIKI,doc/master/RLogger_8hxx.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx.html
https://root.cern/doc/master/RLogger_8hxx.html:426,Integrability,depend,dependency,426,". ROOT: core/foundation/inc/ROOT/RLogger.hxx File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Macros |; Enumerations |; Functions ; RLogger.hxx File ReferenceCore ROOT classes » Base ROOT classes | ROOT7 classes. #include <atomic>; #include <list>; #include <memory>; #include <mutex>; #include <sstream>; #include <string>; #include <utility>. Include dependency graph for RLogger.hxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  ROOT::Experimental::Detail::RLogBuilder;  Builds a diagnostic entry, emitted by the static RLogManager upon destruction of this builder, where - by definition - the RLogEntry has been completely built. More...;  ; class  ROOT::Experimental::RLogChannel;  A log configuration for a channel, e.g. More...;  ; class  ROOT::Experimental::RLogDiagCount;  Keep track of emitted errors and warnings. More...;  ; class  ROOT::Experimental::RLogEntry;  A diagnostic that can be emitted by the RLogManager. More...;  ; class  ROOT::Experimental::RLogHandler;  Abstract RLogHandler base class. More...;  ; struct  ROOT::Experimental::RLogLocation;  A diagnostic location, part of an RLogEntry. More...;  ; class  ROOT::Experimental::RLogManager;  A RLogHandler that multiplexes diagnostics to different client RLogHandlers and keeps track of the sum of RLogDiagCounts for all channels. More...;  ; class  ROOT::Experimental::RLogScopedDiagCount;  Object to count the number of warnings and errors emitted by a section of code, after construction of this type. More...;  ; class  ROOT::Experimental::RLogScopedVerbosity;  Change the verbosity level (global or specific to the RLogChannel passed to the constructor) for the lifetime of this object. More...;  . Namespaces; namespace  ROOT;  tbb:",MatchSource.WIKI,doc/master/RLogger_8hxx.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx.html
https://root.cern/doc/master/RLogger_8hxx.html:6170,Integrability,message,messages,6170," Definition at line 365 of file RLogger.hxx. ◆ R__LOG_ERROR. #define R__LOG_ERROR; (;  ; ...);    R__LOG_TO_CHANNEL(ROOT::Experimental::ELogLevel::kError, __VA_ARGS__). Definition at line 362 of file RLogger.hxx. ◆ R__LOG_FATAL. #define R__LOG_FATAL; (;  ; ...);    R__LOG_TO_CHANNEL(ROOT::Experimental::ELogLevel::kFatal, __VA_ARGS__). Definition at line 361 of file RLogger.hxx. ◆ R__LOG_INFO. #define R__LOG_INFO; (;  ; ...);    R__LOG_TO_CHANNEL(ROOT::Experimental::ELogLevel::kInfo, __VA_ARGS__). Definition at line 364 of file RLogger.hxx. ◆ R__LOG_PRETTY_FUNCTION. #define R__LOG_PRETTY_FUNCTION   __PRETTY_FUNCTION__. Definition at line 326 of file RLogger.hxx. ◆ R__LOG_TO_CHANNEL. #define R__LOG_TO_CHANNEL; (;  ; SEVERITY, .  ; CHANNEL . ). Value: ((SEVERITY < ROOT::Experimental::ELogLevel::kInfo + 0) || \; ROOT::Experimental::Internal::GetChannelOrManager(CHANNEL).GetEffectiveVerbosity( \; ROOT::Experimental::RLogManager::Get()) >= SEVERITY) && \; ROOT::Experimental::Detail::RLogBuilder(SEVERITY, ROOT::Experimental::Internal::GetChannelOrManager(CHANNEL), \; __FILE__, __LINE__, R__LOG_PRETTY_FUNCTION); R__LOG_PRETTY_FUNCTION#define R__LOG_PRETTY_FUNCTIONDefinition RLogger.hxx:326; ROOT::Experimental::RLogChannel::GetEffectiveVerbosityELogLevel GetEffectiveVerbosity(const RLogManager &mgr) constDefinition RLogger.hxx:313; ROOT::Experimental::RLogManager::Getstatic RLogManager & Get()Definition RLogger.cxx:62; ROOT::Experimental::Internal::GetChannelOrManagerRLogChannel & GetChannelOrManager()Definition RLogger.hxx:302; ROOT::Experimental::ELogLevel::kInfo@ kInfoInformational messages; used for instance for tracing. Definition at line 344 of file RLogger.hxx. ◆ R__LOG_WARNING. #define R__LOG_WARNING; (;  ; ...);    R__LOG_TO_CHANNEL(ROOT::Experimental::ELogLevel::kWarning, __VA_ARGS__). Definition at line 363 of file RLogger.hxx. corefoundationincROOTRLogger.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/RLogger_8hxx.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx.html
https://root.cern/doc/master/RLogger_8hxx.html:980,Modifiability,config,configuration,980,". ROOT: core/foundation/inc/ROOT/RLogger.hxx File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Macros |; Enumerations |; Functions ; RLogger.hxx File ReferenceCore ROOT classes » Base ROOT classes | ROOT7 classes. #include <atomic>; #include <list>; #include <memory>; #include <mutex>; #include <sstream>; #include <string>; #include <utility>. Include dependency graph for RLogger.hxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  ROOT::Experimental::Detail::RLogBuilder;  Builds a diagnostic entry, emitted by the static RLogManager upon destruction of this builder, where - by definition - the RLogEntry has been completely built. More...;  ; class  ROOT::Experimental::RLogChannel;  A log configuration for a channel, e.g. More...;  ; class  ROOT::Experimental::RLogDiagCount;  Keep track of emitted errors and warnings. More...;  ; class  ROOT::Experimental::RLogEntry;  A diagnostic that can be emitted by the RLogManager. More...;  ; class  ROOT::Experimental::RLogHandler;  Abstract RLogHandler base class. More...;  ; struct  ROOT::Experimental::RLogLocation;  A diagnostic location, part of an RLogEntry. More...;  ; class  ROOT::Experimental::RLogManager;  A RLogHandler that multiplexes diagnostics to different client RLogHandlers and keeps track of the sum of RLogDiagCounts for all channels. More...;  ; class  ROOT::Experimental::RLogScopedDiagCount;  Object to count the number of warnings and errors emitted by a section of code, after construction of this type. More...;  ; class  ROOT::Experimental::RLogScopedVerbosity;  Change the verbosity level (global or specific to the RLogChannel passed to the constructor) for the lifetime of this object. More...;  . Namespaces; namespace  ROOT;  tbb:",MatchSource.WIKI,doc/master/RLogger_8hxx.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx.html
https://root.cern/doc/master/RLogger_8hxx.html:976,Testability,log,log,976,". ROOT: core/foundation/inc/ROOT/RLogger.hxx File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Macros |; Enumerations |; Functions ; RLogger.hxx File ReferenceCore ROOT classes » Base ROOT classes | ROOT7 classes. #include <atomic>; #include <list>; #include <memory>; #include <mutex>; #include <sstream>; #include <string>; #include <utility>. Include dependency graph for RLogger.hxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  ROOT::Experimental::Detail::RLogBuilder;  Builds a diagnostic entry, emitted by the static RLogManager upon destruction of this builder, where - by definition - the RLogEntry has been completely built. More...;  ; class  ROOT::Experimental::RLogChannel;  A log configuration for a channel, e.g. More...;  ; class  ROOT::Experimental::RLogDiagCount;  Keep track of emitted errors and warnings. More...;  ; class  ROOT::Experimental::RLogEntry;  A diagnostic that can be emitted by the RLogManager. More...;  ; class  ROOT::Experimental::RLogHandler;  Abstract RLogHandler base class. More...;  ; struct  ROOT::Experimental::RLogLocation;  A diagnostic location, part of an RLogEntry. More...;  ; class  ROOT::Experimental::RLogManager;  A RLogHandler that multiplexes diagnostics to different client RLogHandlers and keeps track of the sum of RLogDiagCounts for all channels. More...;  ; class  ROOT::Experimental::RLogScopedDiagCount;  Object to count the number of warnings and errors emitted by a section of code, after construction of this type. More...;  ; class  ROOT::Experimental::RLogScopedVerbosity;  Change the verbosity level (global or specific to the RLogChannel passed to the constructor) for the lifetime of this object. More...;  . Namespaces; namespace  ROOT;  tbb:",MatchSource.WIKI,doc/master/RLogger_8hxx.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx.html
https://root.cern/doc/master/RLogger_8hxx.html:2414,Testability,log,log,2414,";  A diagnostic location, part of an RLogEntry. More...;  ; class  ROOT::Experimental::RLogManager;  A RLogHandler that multiplexes diagnostics to different client RLogHandlers and keeps track of the sum of RLogDiagCounts for all channels. More...;  ; class  ROOT::Experimental::RLogScopedDiagCount;  Object to count the number of warnings and errors emitted by a section of code, after construction of this type. More...;  ; class  ROOT::Experimental::RLogScopedVerbosity;  Change the verbosity level (global or specific to the RLogChannel passed to the constructor) for the lifetime of this object. More...;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Experimental;  ; namespace  ROOT::Experimental::Detail;  ; namespace  ROOT::Experimental::Internal;  . Macros; #define R__LOG_PRETTY_FUNCTION   __PRETTY_FUNCTION__;  ; #define R__LOG_TO_CHANNEL(SEVERITY, CHANNEL);  ; LogMacros; Macros to log diagnostics.; R__LOG_INFO(ROOT::Experimental::HistLog()) << ""all we know is "" << 42;; ; RLogScopedVerbosity verbose(kDebug + 5);; const int decreasedInfoLevel = 5;; R__LOG_DEBUG(ROOT::WebGUILog(), decreasedInfoLevel) << ""nitty-gritty details"";; R__LOG_DEBUG#define R__LOG_DEBUG(DEBUGLEVEL,...)Definition RLogger.hxx:365; R__LOG_INFO#define R__LOG_INFO(...)Definition RLogger.hxx:364; ROOT::Experimental::HistLogRLogChannel & HistLog()Log channel for Hist diagnostics.Definition RAxis.cxx:25; ROOT::WebGUILogROOT::Experimental::RLogChannel & WebGUILog()Log channel for WebGUI diagnostics.Definition RWebDisplayArgs.cxx:24; ; #define R__LOG_DEBUG(DEBUGLEVEL, ...)   R__LOG_TO_CHANNEL(ROOT::Experimental::ELogLevel::kDebug + DEBUGLEVEL, __VA_ARGS__);  ; #define R__LOG_ERROR(...)   R__LOG_TO_CHANNEL(ROOT::Experimental::ELogLevel::kError, __VA_ARGS__);  ; #define R__LOG_FATAL(...)   R__LOG_TO_CHANNEL(ROOT::Experimental::ELogLevel::kFatal",MatchSource.WIKI,doc/master/RLogger_8hxx.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx.html
https://root.cern/doc/master/RLogger_8hxx_source.html:1255,Availability,error,error,1255,"ange without notice. It might trigger earthquakes. Feedback; 6/// is welcome!; 7 ; 8/*************************************************************************; 9 * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; 10 * All rights reserved. *; 11 * *; 12 * For the licensing terms see $ROOTSYS/LICENSE. *; 13 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 14 *************************************************************************/; 15 ; 16#ifndef ROOT7_RLogger; 17#define ROOT7_RLogger; 18 ; 19#include <atomic>; 20#include <list>; 21#include <memory>; 22#include <mutex>; 23#include <sstream>; 24#include <string>; 25#include <utility>; 26 ; 27namespace ROOT {; 28namespace Experimental {; 29 ; 30class RLogEntry;; 31class RLogManager;; 32 ; 33/**; 34 Kinds of diagnostics.; 35 */; 36enum class ELogLevel : unsigned char {; 37 kUnset,; 38 kFatal, ///< An error which causes further processing to be unreliable; 39 kError, ///< An error; 40 kWarning, ///< Warnings about likely unexpected behavior; 41 kInfo, ///< Informational messages; used for instance for tracing; 42 kDebug ///< Debug information; only useful for developers; can have added verbosity up to 255-kDebug.; 43};; 44 ; 45inline ELogLevel operator+(ELogLevel severity, int offset); 46{; 47 return static_cast<ELogLevel>(static_cast<int>(severity) + offset);; 48}; 49 ; 50/**; 51 Keep track of emitted errors and warnings.; 52 */; 53class RLogDiagCount {; 54protected:; 55 std::atomic<long long> fNumWarnings{0ll}; /// Number of warnings.; 56 std::atomic<long long> fNumErrors{0ll}; /// Number of errors.; 57 std::atomic<long long> fNumFatalErrors{0ll}; /// Number of fatal errors.; 58 ; 59public:; 60 /// Returns the current number of warnings.; 61 long long GetNumWarnings() const { return fNumWarnings; }; 62 ; 63 /// Returns the current number of errors.; 64 long long GetNumErrors() const { return fNumErrors; }; 65 ; 66 /// Returns the current number of fatal errors.; 67 long long GetNumFatalErrors() c",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:1330,Availability,error,error,1330,"ange without notice. It might trigger earthquakes. Feedback; 6/// is welcome!; 7 ; 8/*************************************************************************; 9 * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; 10 * All rights reserved. *; 11 * *; 12 * For the licensing terms see $ROOTSYS/LICENSE. *; 13 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 14 *************************************************************************/; 15 ; 16#ifndef ROOT7_RLogger; 17#define ROOT7_RLogger; 18 ; 19#include <atomic>; 20#include <list>; 21#include <memory>; 22#include <mutex>; 23#include <sstream>; 24#include <string>; 25#include <utility>; 26 ; 27namespace ROOT {; 28namespace Experimental {; 29 ; 30class RLogEntry;; 31class RLogManager;; 32 ; 33/**; 34 Kinds of diagnostics.; 35 */; 36enum class ELogLevel : unsigned char {; 37 kUnset,; 38 kFatal, ///< An error which causes further processing to be unreliable; 39 kError, ///< An error; 40 kWarning, ///< Warnings about likely unexpected behavior; 41 kInfo, ///< Informational messages; used for instance for tracing; 42 kDebug ///< Debug information; only useful for developers; can have added verbosity up to 255-kDebug.; 43};; 44 ; 45inline ELogLevel operator+(ELogLevel severity, int offset); 46{; 47 return static_cast<ELogLevel>(static_cast<int>(severity) + offset);; 48}; 49 ; 50/**; 51 Keep track of emitted errors and warnings.; 52 */; 53class RLogDiagCount {; 54protected:; 55 std::atomic<long long> fNumWarnings{0ll}; /// Number of warnings.; 56 std::atomic<long long> fNumErrors{0ll}; /// Number of errors.; 57 std::atomic<long long> fNumFatalErrors{0ll}; /// Number of fatal errors.; 58 ; 59public:; 60 /// Returns the current number of warnings.; 61 long long GetNumWarnings() const { return fNumWarnings; }; 62 ; 63 /// Returns the current number of errors.; 64 long long GetNumErrors() const { return fNumErrors; }; 65 ; 66 /// Returns the current number of fatal errors.; 67 long long GetNumFatalErrors() c",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:1766,Availability,error,errors,1766,"SE. *; 13 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 14 *************************************************************************/; 15 ; 16#ifndef ROOT7_RLogger; 17#define ROOT7_RLogger; 18 ; 19#include <atomic>; 20#include <list>; 21#include <memory>; 22#include <mutex>; 23#include <sstream>; 24#include <string>; 25#include <utility>; 26 ; 27namespace ROOT {; 28namespace Experimental {; 29 ; 30class RLogEntry;; 31class RLogManager;; 32 ; 33/**; 34 Kinds of diagnostics.; 35 */; 36enum class ELogLevel : unsigned char {; 37 kUnset,; 38 kFatal, ///< An error which causes further processing to be unreliable; 39 kError, ///< An error; 40 kWarning, ///< Warnings about likely unexpected behavior; 41 kInfo, ///< Informational messages; used for instance for tracing; 42 kDebug ///< Debug information; only useful for developers; can have added verbosity up to 255-kDebug.; 43};; 44 ; 45inline ELogLevel operator+(ELogLevel severity, int offset); 46{; 47 return static_cast<ELogLevel>(static_cast<int>(severity) + offset);; 48}; 49 ; 50/**; 51 Keep track of emitted errors and warnings.; 52 */; 53class RLogDiagCount {; 54protected:; 55 std::atomic<long long> fNumWarnings{0ll}; /// Number of warnings.; 56 std::atomic<long long> fNumErrors{0ll}; /// Number of errors.; 57 std::atomic<long long> fNumFatalErrors{0ll}; /// Number of fatal errors.; 58 ; 59public:; 60 /// Returns the current number of warnings.; 61 long long GetNumWarnings() const { return fNumWarnings; }; 62 ; 63 /// Returns the current number of errors.; 64 long long GetNumErrors() const { return fNumErrors; }; 65 ; 66 /// Returns the current number of fatal errors.; 67 long long GetNumFatalErrors() const { return fNumFatalErrors; }; 68 ; 69 /// Increase warning or error count.; 70 void Increment(ELogLevel severity); 71 {; 72 switch (severity) {; 73 case ELogLevel::kFatal: ++fNumFatalErrors; break;; 74 case ELogLevel::kError: ++fNumErrors; break;; 75 case ELogLevel::kWarning: ++fNumWarnings; break;; 7",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:1961,Availability,error,errors,1961,"nclude <memory>; 22#include <mutex>; 23#include <sstream>; 24#include <string>; 25#include <utility>; 26 ; 27namespace ROOT {; 28namespace Experimental {; 29 ; 30class RLogEntry;; 31class RLogManager;; 32 ; 33/**; 34 Kinds of diagnostics.; 35 */; 36enum class ELogLevel : unsigned char {; 37 kUnset,; 38 kFatal, ///< An error which causes further processing to be unreliable; 39 kError, ///< An error; 40 kWarning, ///< Warnings about likely unexpected behavior; 41 kInfo, ///< Informational messages; used for instance for tracing; 42 kDebug ///< Debug information; only useful for developers; can have added verbosity up to 255-kDebug.; 43};; 44 ; 45inline ELogLevel operator+(ELogLevel severity, int offset); 46{; 47 return static_cast<ELogLevel>(static_cast<int>(severity) + offset);; 48}; 49 ; 50/**; 51 Keep track of emitted errors and warnings.; 52 */; 53class RLogDiagCount {; 54protected:; 55 std::atomic<long long> fNumWarnings{0ll}; /// Number of warnings.; 56 std::atomic<long long> fNumErrors{0ll}; /// Number of errors.; 57 std::atomic<long long> fNumFatalErrors{0ll}; /// Number of fatal errors.; 58 ; 59public:; 60 /// Returns the current number of warnings.; 61 long long GetNumWarnings() const { return fNumWarnings; }; 62 ; 63 /// Returns the current number of errors.; 64 long long GetNumErrors() const { return fNumErrors; }; 65 ; 66 /// Returns the current number of fatal errors.; 67 long long GetNumFatalErrors() const { return fNumFatalErrors; }; 68 ; 69 /// Increase warning or error count.; 70 void Increment(ELogLevel severity); 71 {; 72 switch (severity) {; 73 case ELogLevel::kFatal: ++fNumFatalErrors; break;; 74 case ELogLevel::kError: ++fNumErrors; break;; 75 case ELogLevel::kWarning: ++fNumWarnings; break;; 76 default:;; 77 }; 78 }; 79};; 80 ; 81/**; 82 Abstract RLogHandler base class. ROOT logs everything from info to error; 83 to entities of this class.; 84 */; 85class RLogHandler {; 86public:; 87 virtual ~RLogHandler();; 88 /// Emit a log entry.; 89 /// \pa",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:2038,Availability,error,errors,2038,"string>; 25#include <utility>; 26 ; 27namespace ROOT {; 28namespace Experimental {; 29 ; 30class RLogEntry;; 31class RLogManager;; 32 ; 33/**; 34 Kinds of diagnostics.; 35 */; 36enum class ELogLevel : unsigned char {; 37 kUnset,; 38 kFatal, ///< An error which causes further processing to be unreliable; 39 kError, ///< An error; 40 kWarning, ///< Warnings about likely unexpected behavior; 41 kInfo, ///< Informational messages; used for instance for tracing; 42 kDebug ///< Debug information; only useful for developers; can have added verbosity up to 255-kDebug.; 43};; 44 ; 45inline ELogLevel operator+(ELogLevel severity, int offset); 46{; 47 return static_cast<ELogLevel>(static_cast<int>(severity) + offset);; 48}; 49 ; 50/**; 51 Keep track of emitted errors and warnings.; 52 */; 53class RLogDiagCount {; 54protected:; 55 std::atomic<long long> fNumWarnings{0ll}; /// Number of warnings.; 56 std::atomic<long long> fNumErrors{0ll}; /// Number of errors.; 57 std::atomic<long long> fNumFatalErrors{0ll}; /// Number of fatal errors.; 58 ; 59public:; 60 /// Returns the current number of warnings.; 61 long long GetNumWarnings() const { return fNumWarnings; }; 62 ; 63 /// Returns the current number of errors.; 64 long long GetNumErrors() const { return fNumErrors; }; 65 ; 66 /// Returns the current number of fatal errors.; 67 long long GetNumFatalErrors() const { return fNumFatalErrors; }; 68 ; 69 /// Increase warning or error count.; 70 void Increment(ELogLevel severity); 71 {; 72 switch (severity) {; 73 case ELogLevel::kFatal: ++fNumFatalErrors; break;; 74 case ELogLevel::kError: ++fNumErrors; break;; 75 case ELogLevel::kWarning: ++fNumWarnings; break;; 76 default:;; 77 }; 78 }; 79};; 80 ; 81/**; 82 Abstract RLogHandler base class. ROOT logs everything from info to error; 83 to entities of this class.; 84 */; 85class RLogHandler {; 86public:; 87 virtual ~RLogHandler();; 88 /// Emit a log entry.; 89 /// \param entry - the RLogEntry to be emitted.; 90 /// \returns false if furth",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:2215,Availability,error,errors,2215,"nostics.; 35 */; 36enum class ELogLevel : unsigned char {; 37 kUnset,; 38 kFatal, ///< An error which causes further processing to be unreliable; 39 kError, ///< An error; 40 kWarning, ///< Warnings about likely unexpected behavior; 41 kInfo, ///< Informational messages; used for instance for tracing; 42 kDebug ///< Debug information; only useful for developers; can have added verbosity up to 255-kDebug.; 43};; 44 ; 45inline ELogLevel operator+(ELogLevel severity, int offset); 46{; 47 return static_cast<ELogLevel>(static_cast<int>(severity) + offset);; 48}; 49 ; 50/**; 51 Keep track of emitted errors and warnings.; 52 */; 53class RLogDiagCount {; 54protected:; 55 std::atomic<long long> fNumWarnings{0ll}; /// Number of warnings.; 56 std::atomic<long long> fNumErrors{0ll}; /// Number of errors.; 57 std::atomic<long long> fNumFatalErrors{0ll}; /// Number of fatal errors.; 58 ; 59public:; 60 /// Returns the current number of warnings.; 61 long long GetNumWarnings() const { return fNumWarnings; }; 62 ; 63 /// Returns the current number of errors.; 64 long long GetNumErrors() const { return fNumErrors; }; 65 ; 66 /// Returns the current number of fatal errors.; 67 long long GetNumFatalErrors() const { return fNumFatalErrors; }; 68 ; 69 /// Increase warning or error count.; 70 void Increment(ELogLevel severity); 71 {; 72 switch (severity) {; 73 case ELogLevel::kFatal: ++fNumFatalErrors; break;; 74 case ELogLevel::kError: ++fNumErrors; break;; 75 case ELogLevel::kWarning: ++fNumWarnings; break;; 76 default:;; 77 }; 78 }; 79};; 80 ; 81/**; 82 Abstract RLogHandler base class. ROOT logs everything from info to error; 83 to entities of this class.; 84 */; 85class RLogHandler {; 86public:; 87 virtual ~RLogHandler();; 88 /// Emit a log entry.; 89 /// \param entry - the RLogEntry to be emitted.; 90 /// \returns false if further emission of this Log should be suppressed.; 91 ///; 92 /// \note This function is called concurrently; log emission must be locked; 93 /// if needed. (The d",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:2330,Availability,error,errors,2330,"er processing to be unreliable; 39 kError, ///< An error; 40 kWarning, ///< Warnings about likely unexpected behavior; 41 kInfo, ///< Informational messages; used for instance for tracing; 42 kDebug ///< Debug information; only useful for developers; can have added verbosity up to 255-kDebug.; 43};; 44 ; 45inline ELogLevel operator+(ELogLevel severity, int offset); 46{; 47 return static_cast<ELogLevel>(static_cast<int>(severity) + offset);; 48}; 49 ; 50/**; 51 Keep track of emitted errors and warnings.; 52 */; 53class RLogDiagCount {; 54protected:; 55 std::atomic<long long> fNumWarnings{0ll}; /// Number of warnings.; 56 std::atomic<long long> fNumErrors{0ll}; /// Number of errors.; 57 std::atomic<long long> fNumFatalErrors{0ll}; /// Number of fatal errors.; 58 ; 59public:; 60 /// Returns the current number of warnings.; 61 long long GetNumWarnings() const { return fNumWarnings; }; 62 ; 63 /// Returns the current number of errors.; 64 long long GetNumErrors() const { return fNumErrors; }; 65 ; 66 /// Returns the current number of fatal errors.; 67 long long GetNumFatalErrors() const { return fNumFatalErrors; }; 68 ; 69 /// Increase warning or error count.; 70 void Increment(ELogLevel severity); 71 {; 72 switch (severity) {; 73 case ELogLevel::kFatal: ++fNumFatalErrors; break;; 74 case ELogLevel::kError: ++fNumErrors; break;; 75 case ELogLevel::kWarning: ++fNumWarnings; break;; 76 default:;; 77 }; 78 }; 79};; 80 ; 81/**; 82 Abstract RLogHandler base class. ROOT logs everything from info to error; 83 to entities of this class.; 84 */; 85class RLogHandler {; 86public:; 87 virtual ~RLogHandler();; 88 /// Emit a log entry.; 89 /// \param entry - the RLogEntry to be emitted.; 90 /// \returns false if further emission of this Log should be suppressed.; 91 ///; 92 /// \note This function is called concurrently; log emission must be locked; 93 /// if needed. (The default log handler using ROOT's DefaultErrorHandler is locked.); 94 virtual bool Emit(const RLogEntry &entry) = 0;",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:2439,Availability,error,error,2439,"or; 41 kInfo, ///< Informational messages; used for instance for tracing; 42 kDebug ///< Debug information; only useful for developers; can have added verbosity up to 255-kDebug.; 43};; 44 ; 45inline ELogLevel operator+(ELogLevel severity, int offset); 46{; 47 return static_cast<ELogLevel>(static_cast<int>(severity) + offset);; 48}; 49 ; 50/**; 51 Keep track of emitted errors and warnings.; 52 */; 53class RLogDiagCount {; 54protected:; 55 std::atomic<long long> fNumWarnings{0ll}; /// Number of warnings.; 56 std::atomic<long long> fNumErrors{0ll}; /// Number of errors.; 57 std::atomic<long long> fNumFatalErrors{0ll}; /// Number of fatal errors.; 58 ; 59public:; 60 /// Returns the current number of warnings.; 61 long long GetNumWarnings() const { return fNumWarnings; }; 62 ; 63 /// Returns the current number of errors.; 64 long long GetNumErrors() const { return fNumErrors; }; 65 ; 66 /// Returns the current number of fatal errors.; 67 long long GetNumFatalErrors() const { return fNumFatalErrors; }; 68 ; 69 /// Increase warning or error count.; 70 void Increment(ELogLevel severity); 71 {; 72 switch (severity) {; 73 case ELogLevel::kFatal: ++fNumFatalErrors; break;; 74 case ELogLevel::kError: ++fNumErrors; break;; 75 case ELogLevel::kWarning: ++fNumWarnings; break;; 76 default:;; 77 }; 78 }; 79};; 80 ; 81/**; 82 Abstract RLogHandler base class. ROOT logs everything from info to error; 83 to entities of this class.; 84 */; 85class RLogHandler {; 86public:; 87 virtual ~RLogHandler();; 88 /// Emit a log entry.; 89 /// \param entry - the RLogEntry to be emitted.; 90 /// \returns false if further emission of this Log should be suppressed.; 91 ///; 92 /// \note This function is called concurrently; log emission must be locked; 93 /// if needed. (The default log handler using ROOT's DefaultErrorHandler is locked.); 94 virtual bool Emit(const RLogEntry &entry) = 0;; 95};; 96 ; 97/**; 98 A log configuration for a channel, e.g. ""RHist"".; 99 Each ROOT module has its own log, with",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:2792,Availability,error,error,2792,"/; 53class RLogDiagCount {; 54protected:; 55 std::atomic<long long> fNumWarnings{0ll}; /// Number of warnings.; 56 std::atomic<long long> fNumErrors{0ll}; /// Number of errors.; 57 std::atomic<long long> fNumFatalErrors{0ll}; /// Number of fatal errors.; 58 ; 59public:; 60 /// Returns the current number of warnings.; 61 long long GetNumWarnings() const { return fNumWarnings; }; 62 ; 63 /// Returns the current number of errors.; 64 long long GetNumErrors() const { return fNumErrors; }; 65 ; 66 /// Returns the current number of fatal errors.; 67 long long GetNumFatalErrors() const { return fNumFatalErrors; }; 68 ; 69 /// Increase warning or error count.; 70 void Increment(ELogLevel severity); 71 {; 72 switch (severity) {; 73 case ELogLevel::kFatal: ++fNumFatalErrors; break;; 74 case ELogLevel::kError: ++fNumErrors; break;; 75 case ELogLevel::kWarning: ++fNumWarnings; break;; 76 default:;; 77 }; 78 }; 79};; 80 ; 81/**; 82 Abstract RLogHandler base class. ROOT logs everything from info to error; 83 to entities of this class.; 84 */; 85class RLogHandler {; 86public:; 87 virtual ~RLogHandler();; 88 /// Emit a log entry.; 89 /// \param entry - the RLogEntry to be emitted.; 90 /// \returns false if further emission of this Log should be suppressed.; 91 ///; 92 /// \note This function is called concurrently; log emission must be locked; 93 /// if needed. (The default log handler using ROOT's DefaultErrorHandler is locked.); 94 virtual bool Emit(const RLogEntry &entry) = 0;; 95};; 96 ; 97/**; 98 A log configuration for a channel, e.g. ""RHist"".; 99 Each ROOT module has its own log, with potentially distinct verbosity.; 100 */; 101class RLogChannel : public RLogDiagCount {; 102 /// Name as shown in diagnostics; 103 std::string fName;; 104 ; 105 /// Verbosity of this channel. By default, use the global verbosity.; 106 ELogLevel fVerbosity = ELogLevel::kUnset;; 107 ; 108public:; 109 /// Construct an anonymous channel.; 110 RLogChannel() = default;; 111 ; 112 /// Construct an anony",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:9030,Availability,error,errors,9030,"ine,; 220 const std::string &funcname); 221 : fEntry(level, channel, {filename, funcname, line}); 222 {; 223 }; 224 ; 225 /// Emit the log entry through the static log manager.; 226 ~RLogBuilder(); 227 {; 228 fEntry.fMessage = str();; 229 RLogManager::Get().Emit(fEntry);; 230 }; 231};; 232} // namespace Detail; 233 ; 234/**; 235 Change the verbosity level (global or specific to the RLogChannel passed to the; 236 constructor) for the lifetime of this object.; 237 Example:; 238~~~ {.cpp}; 239 RLogScopedVerbosity debugThis(gFooLog, ELogLevel::kDebug);; 240 Foo::SomethingToDebug();; 241~~~; 242 */; 243class RLogScopedVerbosity {; 244 RLogChannel *fChannel;; 245 ELogLevel fPrevLevel;; 246 ; 247public:; 248 RLogScopedVerbosity(RLogChannel &channel, ELogLevel verbosity); 249 : fChannel(&channel), fPrevLevel(channel.SetVerbosity(verbosity)); 250 {; 251 }; 252 explicit RLogScopedVerbosity(ELogLevel verbosity) : RLogScopedVerbosity(RLogManager::Get(), verbosity) {}; 253 ~RLogScopedVerbosity() { fChannel->SetVerbosity(fPrevLevel); }; 254};; 255 ; 256/**; 257 Object to count the number of warnings and errors emitted by a section of code,; 258 after construction of this type.; 259 */; 260class RLogScopedDiagCount {; 261 RLogDiagCount *fCounter = nullptr;; 262 /// The number of the RLogDiagCount's emitted warnings at construction time of *this.; 263 long long fInitialWarnings = 0;; 264 /// The number of the RLogDiagCount's emitted errors at construction time.; 265 long long fInitialErrors = 0;; 266 /// The number of the RLogDiagCount's emitted fatal errors at construction time.; 267 long long fInitialFatalErrors = 0;; 268 ; 269public:; 270 /// Construct the scoped count given a counter (e.g. a channel or RLogManager).; 271 /// The counter's lifetime must exceed the lifetime of this object!; 272 explicit RLogScopedDiagCount(RLogDiagCount &cnt); 273 : fCounter(&cnt), fInitialWarnings(cnt.GetNumWarnings()), fInitialErrors(cnt.GetNumErrors()),; 274 fInitialFatalErrors(cnt.GetNumFatalE",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:9364,Availability,error,errors,9364,"; 236 constructor) for the lifetime of this object.; 237 Example:; 238~~~ {.cpp}; 239 RLogScopedVerbosity debugThis(gFooLog, ELogLevel::kDebug);; 240 Foo::SomethingToDebug();; 241~~~; 242 */; 243class RLogScopedVerbosity {; 244 RLogChannel *fChannel;; 245 ELogLevel fPrevLevel;; 246 ; 247public:; 248 RLogScopedVerbosity(RLogChannel &channel, ELogLevel verbosity); 249 : fChannel(&channel), fPrevLevel(channel.SetVerbosity(verbosity)); 250 {; 251 }; 252 explicit RLogScopedVerbosity(ELogLevel verbosity) : RLogScopedVerbosity(RLogManager::Get(), verbosity) {}; 253 ~RLogScopedVerbosity() { fChannel->SetVerbosity(fPrevLevel); }; 254};; 255 ; 256/**; 257 Object to count the number of warnings and errors emitted by a section of code,; 258 after construction of this type.; 259 */; 260class RLogScopedDiagCount {; 261 RLogDiagCount *fCounter = nullptr;; 262 /// The number of the RLogDiagCount's emitted warnings at construction time of *this.; 263 long long fInitialWarnings = 0;; 264 /// The number of the RLogDiagCount's emitted errors at construction time.; 265 long long fInitialErrors = 0;; 266 /// The number of the RLogDiagCount's emitted fatal errors at construction time.; 267 long long fInitialFatalErrors = 0;; 268 ; 269public:; 270 /// Construct the scoped count given a counter (e.g. a channel or RLogManager).; 271 /// The counter's lifetime must exceed the lifetime of this object!; 272 explicit RLogScopedDiagCount(RLogDiagCount &cnt); 273 : fCounter(&cnt), fInitialWarnings(cnt.GetNumWarnings()), fInitialErrors(cnt.GetNumErrors()),; 274 fInitialFatalErrors(cnt.GetNumFatalErrors()); 275 {; 276 }; 277 ; 278 /// Construct the scoped count for any diagnostic, whatever its channel.; 279 RLogScopedDiagCount() : RLogScopedDiagCount(RLogManager::Get()) {}; 280 ; 281 /// Get the number of warnings that the RLogDiagCount has emitted since construction of *this.; 282 long long GetAccumulatedWarnings() const { return fCounter->GetNumWarnings() - fInitialWarnings; }; 283 ; 284 /// Get th",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:9485,Availability,error,errors,9485,"oLog, ELogLevel::kDebug);; 240 Foo::SomethingToDebug();; 241~~~; 242 */; 243class RLogScopedVerbosity {; 244 RLogChannel *fChannel;; 245 ELogLevel fPrevLevel;; 246 ; 247public:; 248 RLogScopedVerbosity(RLogChannel &channel, ELogLevel verbosity); 249 : fChannel(&channel), fPrevLevel(channel.SetVerbosity(verbosity)); 250 {; 251 }; 252 explicit RLogScopedVerbosity(ELogLevel verbosity) : RLogScopedVerbosity(RLogManager::Get(), verbosity) {}; 253 ~RLogScopedVerbosity() { fChannel->SetVerbosity(fPrevLevel); }; 254};; 255 ; 256/**; 257 Object to count the number of warnings and errors emitted by a section of code,; 258 after construction of this type.; 259 */; 260class RLogScopedDiagCount {; 261 RLogDiagCount *fCounter = nullptr;; 262 /// The number of the RLogDiagCount's emitted warnings at construction time of *this.; 263 long long fInitialWarnings = 0;; 264 /// The number of the RLogDiagCount's emitted errors at construction time.; 265 long long fInitialErrors = 0;; 266 /// The number of the RLogDiagCount's emitted fatal errors at construction time.; 267 long long fInitialFatalErrors = 0;; 268 ; 269public:; 270 /// Construct the scoped count given a counter (e.g. a channel or RLogManager).; 271 /// The counter's lifetime must exceed the lifetime of this object!; 272 explicit RLogScopedDiagCount(RLogDiagCount &cnt); 273 : fCounter(&cnt), fInitialWarnings(cnt.GetNumWarnings()), fInitialErrors(cnt.GetNumErrors()),; 274 fInitialFatalErrors(cnt.GetNumFatalErrors()); 275 {; 276 }; 277 ; 278 /// Construct the scoped count for any diagnostic, whatever its channel.; 279 RLogScopedDiagCount() : RLogScopedDiagCount(RLogManager::Get()) {}; 280 ; 281 /// Get the number of warnings that the RLogDiagCount has emitted since construction of *this.; 282 long long GetAccumulatedWarnings() const { return fCounter->GetNumWarnings() - fInitialWarnings; }; 283 ; 284 /// Get the number of errors that the RLogDiagCount has emitted since construction of *this.; 285 long long GetAccumulatedErrors(",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:10346,Availability,error,errors,10346,"; 264 /// The number of the RLogDiagCount's emitted errors at construction time.; 265 long long fInitialErrors = 0;; 266 /// The number of the RLogDiagCount's emitted fatal errors at construction time.; 267 long long fInitialFatalErrors = 0;; 268 ; 269public:; 270 /// Construct the scoped count given a counter (e.g. a channel or RLogManager).; 271 /// The counter's lifetime must exceed the lifetime of this object!; 272 explicit RLogScopedDiagCount(RLogDiagCount &cnt); 273 : fCounter(&cnt), fInitialWarnings(cnt.GetNumWarnings()), fInitialErrors(cnt.GetNumErrors()),; 274 fInitialFatalErrors(cnt.GetNumFatalErrors()); 275 {; 276 }; 277 ; 278 /// Construct the scoped count for any diagnostic, whatever its channel.; 279 RLogScopedDiagCount() : RLogScopedDiagCount(RLogManager::Get()) {}; 280 ; 281 /// Get the number of warnings that the RLogDiagCount has emitted since construction of *this.; 282 long long GetAccumulatedWarnings() const { return fCounter->GetNumWarnings() - fInitialWarnings; }; 283 ; 284 /// Get the number of errors that the RLogDiagCount has emitted since construction of *this.; 285 long long GetAccumulatedErrors() const { return fCounter->GetNumErrors() - fInitialErrors; }; 286 ; 287 /// Get the number of errors that the RLogDiagCount has emitted since construction of *this.; 288 long long GetAccumulatedFatalErrors() const { return fCounter->GetNumFatalErrors() - fInitialFatalErrors; }; 289 ; 290 /// Whether the RLogDiagCount has emitted a warnings since construction time of *this.; 291 bool HasWarningOccurred() const { return GetAccumulatedWarnings(); }; 292 ; 293 /// Whether the RLogDiagCount has emitted an error (fatal or not) since construction time of *this.; 294 bool HasErrorOccurred() const { return GetAccumulatedErrors() + GetAccumulatedFatalErrors(); }; 295 ; 296 /// Whether the RLogDiagCount has emitted an error or a warning since construction time of *this.; 297 bool HasErrorOrWarningOccurred() const { return HasWarningOccurred() || HasErrorOcc",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:10548,Availability,error,errors,10548,"7 long long fInitialFatalErrors = 0;; 268 ; 269public:; 270 /// Construct the scoped count given a counter (e.g. a channel or RLogManager).; 271 /// The counter's lifetime must exceed the lifetime of this object!; 272 explicit RLogScopedDiagCount(RLogDiagCount &cnt); 273 : fCounter(&cnt), fInitialWarnings(cnt.GetNumWarnings()), fInitialErrors(cnt.GetNumErrors()),; 274 fInitialFatalErrors(cnt.GetNumFatalErrors()); 275 {; 276 }; 277 ; 278 /// Construct the scoped count for any diagnostic, whatever its channel.; 279 RLogScopedDiagCount() : RLogScopedDiagCount(RLogManager::Get()) {}; 280 ; 281 /// Get the number of warnings that the RLogDiagCount has emitted since construction of *this.; 282 long long GetAccumulatedWarnings() const { return fCounter->GetNumWarnings() - fInitialWarnings; }; 283 ; 284 /// Get the number of errors that the RLogDiagCount has emitted since construction of *this.; 285 long long GetAccumulatedErrors() const { return fCounter->GetNumErrors() - fInitialErrors; }; 286 ; 287 /// Get the number of errors that the RLogDiagCount has emitted since construction of *this.; 288 long long GetAccumulatedFatalErrors() const { return fCounter->GetNumFatalErrors() - fInitialFatalErrors; }; 289 ; 290 /// Whether the RLogDiagCount has emitted a warnings since construction time of *this.; 291 bool HasWarningOccurred() const { return GetAccumulatedWarnings(); }; 292 ; 293 /// Whether the RLogDiagCount has emitted an error (fatal or not) since construction time of *this.; 294 bool HasErrorOccurred() const { return GetAccumulatedErrors() + GetAccumulatedFatalErrors(); }; 295 ; 296 /// Whether the RLogDiagCount has emitted an error or a warning since construction time of *this.; 297 bool HasErrorOrWarningOccurred() const { return HasWarningOccurred() || HasErrorOccurred(); }; 298};; 299 ; 300namespace Internal {; 301 ; 302inline RLogChannel &GetChannelOrManager(); 303{; 304 return RLogManager::Get();; 305}; 306inline RLogChannel &GetChannelOrManager(RLogChannel &cha",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:10960,Availability,error,error,10960,"alErrors()); 275 {; 276 }; 277 ; 278 /// Construct the scoped count for any diagnostic, whatever its channel.; 279 RLogScopedDiagCount() : RLogScopedDiagCount(RLogManager::Get()) {}; 280 ; 281 /// Get the number of warnings that the RLogDiagCount has emitted since construction of *this.; 282 long long GetAccumulatedWarnings() const { return fCounter->GetNumWarnings() - fInitialWarnings; }; 283 ; 284 /// Get the number of errors that the RLogDiagCount has emitted since construction of *this.; 285 long long GetAccumulatedErrors() const { return fCounter->GetNumErrors() - fInitialErrors; }; 286 ; 287 /// Get the number of errors that the RLogDiagCount has emitted since construction of *this.; 288 long long GetAccumulatedFatalErrors() const { return fCounter->GetNumFatalErrors() - fInitialFatalErrors; }; 289 ; 290 /// Whether the RLogDiagCount has emitted a warnings since construction time of *this.; 291 bool HasWarningOccurred() const { return GetAccumulatedWarnings(); }; 292 ; 293 /// Whether the RLogDiagCount has emitted an error (fatal or not) since construction time of *this.; 294 bool HasErrorOccurred() const { return GetAccumulatedErrors() + GetAccumulatedFatalErrors(); }; 295 ; 296 /// Whether the RLogDiagCount has emitted an error or a warning since construction time of *this.; 297 bool HasErrorOrWarningOccurred() const { return HasWarningOccurred() || HasErrorOccurred(); }; 298};; 299 ; 300namespace Internal {; 301 ; 302inline RLogChannel &GetChannelOrManager(); 303{; 304 return RLogManager::Get();; 305}; 306inline RLogChannel &GetChannelOrManager(RLogChannel &channel); 307{; 308 return channel;; 309}; 310 ; 311} // namespace Internal; 312 ; 313inline ELogLevel RLogChannel::GetEffectiveVerbosity(const RLogManager &mgr) const; 314{; 315 if (fVerbosity == ELogLevel::kUnset); 316 return mgr.GetVerbosity();; 317 return fVerbosity;; 318}; 319 ; 320} // namespace Experimental; 321} // namespace ROOT; 322 ; 323#if defined(_MSC_VER); 324#define R__LOG_PRETTY_FUNCTION _",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:11171,Availability,error,error,11171,Get the number of warnings that the RLogDiagCount has emitted since construction of *this.; 282 long long GetAccumulatedWarnings() const { return fCounter->GetNumWarnings() - fInitialWarnings; }; 283 ; 284 /// Get the number of errors that the RLogDiagCount has emitted since construction of *this.; 285 long long GetAccumulatedErrors() const { return fCounter->GetNumErrors() - fInitialErrors; }; 286 ; 287 /// Get the number of errors that the RLogDiagCount has emitted since construction of *this.; 288 long long GetAccumulatedFatalErrors() const { return fCounter->GetNumFatalErrors() - fInitialFatalErrors; }; 289 ; 290 /// Whether the RLogDiagCount has emitted a warnings since construction time of *this.; 291 bool HasWarningOccurred() const { return GetAccumulatedWarnings(); }; 292 ; 293 /// Whether the RLogDiagCount has emitted an error (fatal or not) since construction time of *this.; 294 bool HasErrorOccurred() const { return GetAccumulatedErrors() + GetAccumulatedFatalErrors(); }; 295 ; 296 /// Whether the RLogDiagCount has emitted an error or a warning since construction time of *this.; 297 bool HasErrorOrWarningOccurred() const { return HasWarningOccurred() || HasErrorOccurred(); }; 298};; 299 ; 300namespace Internal {; 301 ; 302inline RLogChannel &GetChannelOrManager(); 303{; 304 return RLogManager::Get();; 305}; 306inline RLogChannel &GetChannelOrManager(RLogChannel &channel); 307{; 308 return channel;; 309}; 310 ; 311} // namespace Internal; 312 ; 313inline ELogLevel RLogChannel::GetEffectiveVerbosity(const RLogManager &mgr) const; 314{; 315 if (fVerbosity == ELogLevel::kUnset); 316 return mgr.GetVerbosity();; 317 return fVerbosity;; 318}; 319 ; 320} // namespace Experimental; 321} // namespace ROOT; 322 ; 323#if defined(_MSC_VER); 324#define R__LOG_PRETTY_FUNCTION __FUNCSIG__; 325#else; 326#define R__LOG_PRETTY_FUNCTION __PRETTY_FUNCTION__; 327#endif; 328 ; 329/*; 330 Some implementation details:; 331 ; 332 - The conditional `RLogBuilder` use prevents stream ,MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:12335,Availability,error,errors,12335,"); }; 298};; 299 ; 300namespace Internal {; 301 ; 302inline RLogChannel &GetChannelOrManager(); 303{; 304 return RLogManager::Get();; 305}; 306inline RLogChannel &GetChannelOrManager(RLogChannel &channel); 307{; 308 return channel;; 309}; 310 ; 311} // namespace Internal; 312 ; 313inline ELogLevel RLogChannel::GetEffectiveVerbosity(const RLogManager &mgr) const; 314{; 315 if (fVerbosity == ELogLevel::kUnset); 316 return mgr.GetVerbosity();; 317 return fVerbosity;; 318}; 319 ; 320} // namespace Experimental; 321} // namespace ROOT; 322 ; 323#if defined(_MSC_VER); 324#define R__LOG_PRETTY_FUNCTION __FUNCSIG__; 325#else; 326#define R__LOG_PRETTY_FUNCTION __PRETTY_FUNCTION__; 327#endif; 328 ; 329/*; 330 Some implementation details:; 331 ; 332 - The conditional `RLogBuilder` use prevents stream operators from being called if; 333 verbosity is too low, i.e.:; 334 ~~~; 335 RLogScopedVerbosity silence(RLogLevel::kFatal);; 336 R__LOG_DEBUG(7) << WillNotBeCalled();; 337 ~~~; 338 - To update counts of warnings / errors / fatal errors, those RLogEntries must; 339 always be created, even if in the end their emission will be silenced. This; 340 should be fine, performance-wise, as they should not happen frequently.; 341 - Use `(condition) && RLogBuilder(...)` instead of `if (condition) RLogBuilder(...)`; 342 to prevent ""ambiguous else"" in invocations such as `if (something) R__LOG_DEBUG()...`.; 343 */; 344#define R__LOG_TO_CHANNEL(SEVERITY, CHANNEL) \; 345 ((SEVERITY < ROOT::Experimental::ELogLevel::kInfo + 0) || \; 346 ROOT::Experimental::Internal::GetChannelOrManager(CHANNEL).GetEffectiveVerbosity( \; 347 ROOT::Experimental::RLogManager::Get()) >= SEVERITY) && \; 348 ROOT::Experimental::Detail::RLogBuilder(SEVERITY, ROOT::Experimental::Internal::GetChannelOrManager(CHANNEL), \; 349 __FILE__, __LINE__, R__LOG_PRETTY_FUNCTION); 350 ; 351/// \name LogMacros; 352/// Macros to log diagnostics.; 353/// ~~~ {.cpp}; 354/// R__LOG_INFO(ROOT::Experimental::HistLog()) << ""all we know is "" ",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:12350,Availability,error,errors,12350,"); }; 298};; 299 ; 300namespace Internal {; 301 ; 302inline RLogChannel &GetChannelOrManager(); 303{; 304 return RLogManager::Get();; 305}; 306inline RLogChannel &GetChannelOrManager(RLogChannel &channel); 307{; 308 return channel;; 309}; 310 ; 311} // namespace Internal; 312 ; 313inline ELogLevel RLogChannel::GetEffectiveVerbosity(const RLogManager &mgr) const; 314{; 315 if (fVerbosity == ELogLevel::kUnset); 316 return mgr.GetVerbosity();; 317 return fVerbosity;; 318}; 319 ; 320} // namespace Experimental; 321} // namespace ROOT; 322 ; 323#if defined(_MSC_VER); 324#define R__LOG_PRETTY_FUNCTION __FUNCSIG__; 325#else; 326#define R__LOG_PRETTY_FUNCTION __PRETTY_FUNCTION__; 327#endif; 328 ; 329/*; 330 Some implementation details:; 331 ; 332 - The conditional `RLogBuilder` use prevents stream operators from being called if; 333 verbosity is too low, i.e.:; 334 ~~~; 335 RLogScopedVerbosity silence(RLogLevel::kFatal);; 336 R__LOG_DEBUG(7) << WillNotBeCalled();; 337 ~~~; 338 - To update counts of warnings / errors / fatal errors, those RLogEntries must; 339 always be created, even if in the end their emission will be silenced. This; 340 should be fine, performance-wise, as they should not happen frequently.; 341 - Use `(condition) && RLogBuilder(...)` instead of `if (condition) RLogBuilder(...)`; 342 to prevent ""ambiguous else"" in invocations such as `if (something) R__LOG_DEBUG()...`.; 343 */; 344#define R__LOG_TO_CHANNEL(SEVERITY, CHANNEL) \; 345 ((SEVERITY < ROOT::Experimental::ELogLevel::kInfo + 0) || \; 346 ROOT::Experimental::Internal::GetChannelOrManager(CHANNEL).GetEffectiveVerbosity( \; 347 ROOT::Experimental::RLogManager::Get()) >= SEVERITY) && \; 348 ROOT::Experimental::Detail::RLogBuilder(SEVERITY, ROOT::Experimental::Internal::GetChannelOrManager(CHANNEL), \; 349 __FILE__, __LINE__, R__LOG_PRETTY_FUNCTION); 350 ; 351/// \name LogMacros; 352/// Macros to log diagnostics.; 353/// ~~~ {.cpp}; 354/// R__LOG_INFO(ROOT::Experimental::HistLog()) << ""all we know is "" ",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:17627,Availability,error,errors,17627,"gChannel::fVerbosityELogLevel fVerbosityVerbosity of this channel. By default, use the global verbosity.Definition RLogger.hxx:106; ROOT::Experimental::RLogChannel::RLogChannelRLogChannel()=defaultConstruct an anonymous channel.; ROOT::Experimental::RLogChannel::GetEffectiveVerbosityELogLevel GetEffectiveVerbosity(const RLogManager &mgr) constDefinition RLogger.hxx:313; ROOT::Experimental::RLogChannel::fNamestd::string fNameName as shown in diagnostics.Definition RLogger.hxx:103; ROOT::Experimental::RLogChannel::GetVerbosityELogLevel GetVerbosity() constDefinition RLogger.hxx:123; ROOT::Experimental::RLogChannel::SetVerbosityELogLevel SetVerbosity(ELogLevel verbosity)Definition RLogger.hxx:118; ROOT::Experimental::RLogChannel::GetNameconst std::string & GetName() constDefinition RLogger.hxx:126; ROOT::Experimental::RLogChannel::RLogChannelRLogChannel(ELogLevel verbosity)Construct an anonymous channel with a default verbosity.Definition RLogger.hxx:113; ROOT::Experimental::RLogDiagCountKeep track of emitted errors and warnings.Definition RLogger.hxx:53; ROOT::Experimental::RLogDiagCount::fNumFatalErrorsstd::atomic< long long > fNumFatalErrorsNumber of errors.Definition RLogger.hxx:57; ROOT::Experimental::RLogDiagCount::fNumWarningsstd::atomic< long long > fNumWarningsDefinition RLogger.hxx:55; ROOT::Experimental::RLogDiagCount::Incrementvoid Increment(ELogLevel severity)Increase warning or error count.Definition RLogger.hxx:70; ROOT::Experimental::RLogDiagCount::GetNumWarningslong long GetNumWarnings() constNumber of fatal errors.Definition RLogger.hxx:61; ROOT::Experimental::RLogDiagCount::fNumErrorsstd::atomic< long long > fNumErrorsNumber of warnings.Definition RLogger.hxx:56; ROOT::Experimental::RLogDiagCount::GetNumFatalErrorslong long GetNumFatalErrors() constReturns the current number of fatal errors.Definition RLogger.hxx:67; ROOT::Experimental::RLogDiagCount::GetNumErrorslong long GetNumErrors() constReturns the current number of errors.Definition RLogger.hx",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:17774,Availability,error,errors,17774,gger.hxx:106; ROOT::Experimental::RLogChannel::RLogChannelRLogChannel()=defaultConstruct an anonymous channel.; ROOT::Experimental::RLogChannel::GetEffectiveVerbosityELogLevel GetEffectiveVerbosity(const RLogManager &mgr) constDefinition RLogger.hxx:313; ROOT::Experimental::RLogChannel::fNamestd::string fNameName as shown in diagnostics.Definition RLogger.hxx:103; ROOT::Experimental::RLogChannel::GetVerbosityELogLevel GetVerbosity() constDefinition RLogger.hxx:123; ROOT::Experimental::RLogChannel::SetVerbosityELogLevel SetVerbosity(ELogLevel verbosity)Definition RLogger.hxx:118; ROOT::Experimental::RLogChannel::GetNameconst std::string & GetName() constDefinition RLogger.hxx:126; ROOT::Experimental::RLogChannel::RLogChannelRLogChannel(ELogLevel verbosity)Construct an anonymous channel with a default verbosity.Definition RLogger.hxx:113; ROOT::Experimental::RLogDiagCountKeep track of emitted errors and warnings.Definition RLogger.hxx:53; ROOT::Experimental::RLogDiagCount::fNumFatalErrorsstd::atomic< long long > fNumFatalErrorsNumber of errors.Definition RLogger.hxx:57; ROOT::Experimental::RLogDiagCount::fNumWarningsstd::atomic< long long > fNumWarningsDefinition RLogger.hxx:55; ROOT::Experimental::RLogDiagCount::Incrementvoid Increment(ELogLevel severity)Increase warning or error count.Definition RLogger.hxx:70; ROOT::Experimental::RLogDiagCount::GetNumWarningslong long GetNumWarnings() constNumber of fatal errors.Definition RLogger.hxx:61; ROOT::Experimental::RLogDiagCount::fNumErrorsstd::atomic< long long > fNumErrorsNumber of warnings.Definition RLogger.hxx:56; ROOT::Experimental::RLogDiagCount::GetNumFatalErrorslong long GetNumFatalErrors() constReturns the current number of fatal errors.Definition RLogger.hxx:67; ROOT::Experimental::RLogDiagCount::GetNumErrorslong long GetNumErrors() constReturns the current number of errors.Definition RLogger.hxx:64; ROOT::Experimental::RLogEntryA diagnostic that can be emitted by the RLogManager.Definition RLogger.hxx:178; ROOT,MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:18017,Availability,error,error,18017,"xx:313; ROOT::Experimental::RLogChannel::fNamestd::string fNameName as shown in diagnostics.Definition RLogger.hxx:103; ROOT::Experimental::RLogChannel::GetVerbosityELogLevel GetVerbosity() constDefinition RLogger.hxx:123; ROOT::Experimental::RLogChannel::SetVerbosityELogLevel SetVerbosity(ELogLevel verbosity)Definition RLogger.hxx:118; ROOT::Experimental::RLogChannel::GetNameconst std::string & GetName() constDefinition RLogger.hxx:126; ROOT::Experimental::RLogChannel::RLogChannelRLogChannel(ELogLevel verbosity)Construct an anonymous channel with a default verbosity.Definition RLogger.hxx:113; ROOT::Experimental::RLogDiagCountKeep track of emitted errors and warnings.Definition RLogger.hxx:53; ROOT::Experimental::RLogDiagCount::fNumFatalErrorsstd::atomic< long long > fNumFatalErrorsNumber of errors.Definition RLogger.hxx:57; ROOT::Experimental::RLogDiagCount::fNumWarningsstd::atomic< long long > fNumWarningsDefinition RLogger.hxx:55; ROOT::Experimental::RLogDiagCount::Incrementvoid Increment(ELogLevel severity)Increase warning or error count.Definition RLogger.hxx:70; ROOT::Experimental::RLogDiagCount::GetNumWarningslong long GetNumWarnings() constNumber of fatal errors.Definition RLogger.hxx:61; ROOT::Experimental::RLogDiagCount::fNumErrorsstd::atomic< long long > fNumErrorsNumber of warnings.Definition RLogger.hxx:56; ROOT::Experimental::RLogDiagCount::GetNumFatalErrorslong long GetNumFatalErrors() constReturns the current number of fatal errors.Definition RLogger.hxx:67; ROOT::Experimental::RLogDiagCount::GetNumErrorslong long GetNumErrors() constReturns the current number of errors.Definition RLogger.hxx:64; ROOT::Experimental::RLogEntryA diagnostic that can be emitted by the RLogManager.Definition RLogger.hxx:178; ROOT::Experimental::RLogEntry::fMessagestd::string fMessageDefinition RLogger.hxx:181; ROOT::Experimental::RLogEntry::IsDebugbool IsDebug() constDefinition RLogger.hxx:191; ROOT::Experimental::RLogEntry::RLogEntryRLogEntry(ELogLevel level, RLogChanne",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:18153,Availability,error,errors,18153,"ntal::RLogChannel::GetVerbosityELogLevel GetVerbosity() constDefinition RLogger.hxx:123; ROOT::Experimental::RLogChannel::SetVerbosityELogLevel SetVerbosity(ELogLevel verbosity)Definition RLogger.hxx:118; ROOT::Experimental::RLogChannel::GetNameconst std::string & GetName() constDefinition RLogger.hxx:126; ROOT::Experimental::RLogChannel::RLogChannelRLogChannel(ELogLevel verbosity)Construct an anonymous channel with a default verbosity.Definition RLogger.hxx:113; ROOT::Experimental::RLogDiagCountKeep track of emitted errors and warnings.Definition RLogger.hxx:53; ROOT::Experimental::RLogDiagCount::fNumFatalErrorsstd::atomic< long long > fNumFatalErrorsNumber of errors.Definition RLogger.hxx:57; ROOT::Experimental::RLogDiagCount::fNumWarningsstd::atomic< long long > fNumWarningsDefinition RLogger.hxx:55; ROOT::Experimental::RLogDiagCount::Incrementvoid Increment(ELogLevel severity)Increase warning or error count.Definition RLogger.hxx:70; ROOT::Experimental::RLogDiagCount::GetNumWarningslong long GetNumWarnings() constNumber of fatal errors.Definition RLogger.hxx:61; ROOT::Experimental::RLogDiagCount::fNumErrorsstd::atomic< long long > fNumErrorsNumber of warnings.Definition RLogger.hxx:56; ROOT::Experimental::RLogDiagCount::GetNumFatalErrorslong long GetNumFatalErrors() constReturns the current number of fatal errors.Definition RLogger.hxx:67; ROOT::Experimental::RLogDiagCount::GetNumErrorslong long GetNumErrors() constReturns the current number of errors.Definition RLogger.hxx:64; ROOT::Experimental::RLogEntryA diagnostic that can be emitted by the RLogManager.Definition RLogger.hxx:178; ROOT::Experimental::RLogEntry::fMessagestd::string fMessageDefinition RLogger.hxx:181; ROOT::Experimental::RLogEntry::IsDebugbool IsDebug() constDefinition RLogger.hxx:191; ROOT::Experimental::RLogEntry::RLogEntryRLogEntry(ELogLevel level, RLogChannel &channel, const RLogLocation &loc)Definition RLogger.hxx:186; ROOT::Experimental::RLogEntry::IsFatalbool IsFatal() constDefinition R",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:18436,Availability,error,errors,18436,"me() constDefinition RLogger.hxx:126; ROOT::Experimental::RLogChannel::RLogChannelRLogChannel(ELogLevel verbosity)Construct an anonymous channel with a default verbosity.Definition RLogger.hxx:113; ROOT::Experimental::RLogDiagCountKeep track of emitted errors and warnings.Definition RLogger.hxx:53; ROOT::Experimental::RLogDiagCount::fNumFatalErrorsstd::atomic< long long > fNumFatalErrorsNumber of errors.Definition RLogger.hxx:57; ROOT::Experimental::RLogDiagCount::fNumWarningsstd::atomic< long long > fNumWarningsDefinition RLogger.hxx:55; ROOT::Experimental::RLogDiagCount::Incrementvoid Increment(ELogLevel severity)Increase warning or error count.Definition RLogger.hxx:70; ROOT::Experimental::RLogDiagCount::GetNumWarningslong long GetNumWarnings() constNumber of fatal errors.Definition RLogger.hxx:61; ROOT::Experimental::RLogDiagCount::fNumErrorsstd::atomic< long long > fNumErrorsNumber of warnings.Definition RLogger.hxx:56; ROOT::Experimental::RLogDiagCount::GetNumFatalErrorslong long GetNumFatalErrors() constReturns the current number of fatal errors.Definition RLogger.hxx:67; ROOT::Experimental::RLogDiagCount::GetNumErrorslong long GetNumErrors() constReturns the current number of errors.Definition RLogger.hxx:64; ROOT::Experimental::RLogEntryA diagnostic that can be emitted by the RLogManager.Definition RLogger.hxx:178; ROOT::Experimental::RLogEntry::fMessagestd::string fMessageDefinition RLogger.hxx:181; ROOT::Experimental::RLogEntry::IsDebugbool IsDebug() constDefinition RLogger.hxx:191; ROOT::Experimental::RLogEntry::RLogEntryRLogEntry(ELogLevel level, RLogChannel &channel, const RLogLocation &loc)Definition RLogger.hxx:186; ROOT::Experimental::RLogEntry::IsFatalbool IsFatal() constDefinition RLogger.hxx:195; ROOT::Experimental::RLogEntry::IsErrorbool IsError() constDefinition RLogger.hxx:194; ROOT::Experimental::RLogEntry::RLogEntryRLogEntry(ELogLevel level, RLogChannel &channel)Definition RLogger.hxx:185; ROOT::Experimental::RLogEntry::IsInfobool IsInfo() c",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:18577,Availability,error,errors,18577," a default verbosity.Definition RLogger.hxx:113; ROOT::Experimental::RLogDiagCountKeep track of emitted errors and warnings.Definition RLogger.hxx:53; ROOT::Experimental::RLogDiagCount::fNumFatalErrorsstd::atomic< long long > fNumFatalErrorsNumber of errors.Definition RLogger.hxx:57; ROOT::Experimental::RLogDiagCount::fNumWarningsstd::atomic< long long > fNumWarningsDefinition RLogger.hxx:55; ROOT::Experimental::RLogDiagCount::Incrementvoid Increment(ELogLevel severity)Increase warning or error count.Definition RLogger.hxx:70; ROOT::Experimental::RLogDiagCount::GetNumWarningslong long GetNumWarnings() constNumber of fatal errors.Definition RLogger.hxx:61; ROOT::Experimental::RLogDiagCount::fNumErrorsstd::atomic< long long > fNumErrorsNumber of warnings.Definition RLogger.hxx:56; ROOT::Experimental::RLogDiagCount::GetNumFatalErrorslong long GetNumFatalErrors() constReturns the current number of fatal errors.Definition RLogger.hxx:67; ROOT::Experimental::RLogDiagCount::GetNumErrorslong long GetNumErrors() constReturns the current number of errors.Definition RLogger.hxx:64; ROOT::Experimental::RLogEntryA diagnostic that can be emitted by the RLogManager.Definition RLogger.hxx:178; ROOT::Experimental::RLogEntry::fMessagestd::string fMessageDefinition RLogger.hxx:181; ROOT::Experimental::RLogEntry::IsDebugbool IsDebug() constDefinition RLogger.hxx:191; ROOT::Experimental::RLogEntry::RLogEntryRLogEntry(ELogLevel level, RLogChannel &channel, const RLogLocation &loc)Definition RLogger.hxx:186; ROOT::Experimental::RLogEntry::IsFatalbool IsFatal() constDefinition RLogger.hxx:195; ROOT::Experimental::RLogEntry::IsErrorbool IsError() constDefinition RLogger.hxx:194; ROOT::Experimental::RLogEntry::RLogEntryRLogEntry(ELogLevel level, RLogChannel &channel)Definition RLogger.hxx:185; ROOT::Experimental::RLogEntry::IsInfobool IsInfo() constDefinition RLogger.hxx:192; ROOT::Experimental::RLogEntry::IsWarningbool IsWarning() constDefinition RLogger.hxx:193; ROOT::Experimental::RLogEnt",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:21420,Availability,error,errors,21420,"137; ROOT::Experimental::RLogManager::Removestd::unique_ptr< RLogHandler > Remove(RLogHandler *handler)Remove and return the given log handler. Returns nullptr if not found.Definition RLogger.cxx:68; ROOT::Experimental::RLogManager::Getstatic RLogManager & Get()Definition RLogger.cxx:62; ROOT::Experimental::RLogManager::RLogManagerRLogManager(std::unique_ptr< RLogHandler > lh)Initialize taking a RLogHandler.Definition RLogger.hxx:142; ROOT::Experimental::RLogManager::Emitbool Emit(const RLogEntry &entry) overrideEmit a log entry.Definition RLogger.cxx:82; ROOT::Experimental::RLogManager::PushFrontvoid PushFront(std::unique_ptr< RLogHandler > handler)Add a RLogHandler in the front - to be called before all others.Definition RLogger.hxx:150; ROOT::Experimental::RLogManager::PushBackvoid PushBack(std::unique_ptr< RLogHandler > handler)Add a RLogHandler in the back - to be called after all others.Definition RLogger.hxx:153; ROOT::Experimental::RLogScopedDiagCountObject to count the number of warnings and errors emitted by a section of code, after construction of...Definition RLogger.hxx:260; ROOT::Experimental::RLogScopedDiagCount::GetAccumulatedWarningslong long GetAccumulatedWarnings() constGet the number of warnings that the RLogDiagCount has emitted since construction of *this.Definition RLogger.hxx:282; ROOT::Experimental::RLogScopedDiagCount::HasWarningOccurredbool HasWarningOccurred() constWhether the RLogDiagCount has emitted a warnings since construction time of *this.Definition RLogger.hxx:291; ROOT::Experimental::RLogScopedDiagCount::HasErrorOrWarningOccurredbool HasErrorOrWarningOccurred() constWhether the RLogDiagCount has emitted an error or a warning since construction time of *this.Definition RLogger.hxx:297; ROOT::Experimental::RLogScopedDiagCount::HasErrorOccurredbool HasErrorOccurred() constWhether the RLogDiagCount has emitted an error (fatal or not) since construction time of *this.Definition RLogger.hxx:294; ROOT::Experimental::RLogScopedDiagCount:",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:22075,Availability,error,error,22075,"td::unique_ptr< RLogHandler > handler)Add a RLogHandler in the front - to be called before all others.Definition RLogger.hxx:150; ROOT::Experimental::RLogManager::PushBackvoid PushBack(std::unique_ptr< RLogHandler > handler)Add a RLogHandler in the back - to be called after all others.Definition RLogger.hxx:153; ROOT::Experimental::RLogScopedDiagCountObject to count the number of warnings and errors emitted by a section of code, after construction of...Definition RLogger.hxx:260; ROOT::Experimental::RLogScopedDiagCount::GetAccumulatedWarningslong long GetAccumulatedWarnings() constGet the number of warnings that the RLogDiagCount has emitted since construction of *this.Definition RLogger.hxx:282; ROOT::Experimental::RLogScopedDiagCount::HasWarningOccurredbool HasWarningOccurred() constWhether the RLogDiagCount has emitted a warnings since construction time of *this.Definition RLogger.hxx:291; ROOT::Experimental::RLogScopedDiagCount::HasErrorOrWarningOccurredbool HasErrorOrWarningOccurred() constWhether the RLogDiagCount has emitted an error or a warning since construction time of *this.Definition RLogger.hxx:297; ROOT::Experimental::RLogScopedDiagCount::HasErrorOccurredbool HasErrorOccurred() constWhether the RLogDiagCount has emitted an error (fatal or not) since construction time of *this.Definition RLogger.hxx:294; ROOT::Experimental::RLogScopedDiagCount::RLogScopedDiagCountRLogScopedDiagCount(RLogDiagCount &cnt)Construct the scoped count given a counter (e.g.Definition RLogger.hxx:272; ROOT::Experimental::RLogScopedDiagCount::fInitialErrorslong long fInitialErrorsThe number of the RLogDiagCount's emitted errors at construction time.Definition RLogger.hxx:265; ROOT::Experimental::RLogScopedDiagCount::fInitialWarningslong long fInitialWarningsThe number of the RLogDiagCount's emitted warnings at construction time of *this.Definition RLogger.hxx:263; ROOT::Experimental::RLogScopedDiagCount::fCounterRLogDiagCount * fCounterDefinition RLogger.hxx:261; ROOT::Experimen",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:22282,Availability,error,error,22282,"andler)Add a RLogHandler in the back - to be called after all others.Definition RLogger.hxx:153; ROOT::Experimental::RLogScopedDiagCountObject to count the number of warnings and errors emitted by a section of code, after construction of...Definition RLogger.hxx:260; ROOT::Experimental::RLogScopedDiagCount::GetAccumulatedWarningslong long GetAccumulatedWarnings() constGet the number of warnings that the RLogDiagCount has emitted since construction of *this.Definition RLogger.hxx:282; ROOT::Experimental::RLogScopedDiagCount::HasWarningOccurredbool HasWarningOccurred() constWhether the RLogDiagCount has emitted a warnings since construction time of *this.Definition RLogger.hxx:291; ROOT::Experimental::RLogScopedDiagCount::HasErrorOrWarningOccurredbool HasErrorOrWarningOccurred() constWhether the RLogDiagCount has emitted an error or a warning since construction time of *this.Definition RLogger.hxx:297; ROOT::Experimental::RLogScopedDiagCount::HasErrorOccurredbool HasErrorOccurred() constWhether the RLogDiagCount has emitted an error (fatal or not) since construction time of *this.Definition RLogger.hxx:294; ROOT::Experimental::RLogScopedDiagCount::RLogScopedDiagCountRLogScopedDiagCount(RLogDiagCount &cnt)Construct the scoped count given a counter (e.g.Definition RLogger.hxx:272; ROOT::Experimental::RLogScopedDiagCount::fInitialErrorslong long fInitialErrorsThe number of the RLogDiagCount's emitted errors at construction time.Definition RLogger.hxx:265; ROOT::Experimental::RLogScopedDiagCount::fInitialWarningslong long fInitialWarningsThe number of the RLogDiagCount's emitted warnings at construction time of *this.Definition RLogger.hxx:263; ROOT::Experimental::RLogScopedDiagCount::fCounterRLogDiagCount * fCounterDefinition RLogger.hxx:261; ROOT::Experimental::RLogScopedDiagCount::GetAccumulatedErrorslong long GetAccumulatedErrors() constGet the number of errors that the RLogDiagCount has emitted since construction of *this.Definition RLogger.hxx:285; ROOT::Experimenta",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:22660,Availability,error,errors,22660,"nstGet the number of warnings that the RLogDiagCount has emitted since construction of *this.Definition RLogger.hxx:282; ROOT::Experimental::RLogScopedDiagCount::HasWarningOccurredbool HasWarningOccurred() constWhether the RLogDiagCount has emitted a warnings since construction time of *this.Definition RLogger.hxx:291; ROOT::Experimental::RLogScopedDiagCount::HasErrorOrWarningOccurredbool HasErrorOrWarningOccurred() constWhether the RLogDiagCount has emitted an error or a warning since construction time of *this.Definition RLogger.hxx:297; ROOT::Experimental::RLogScopedDiagCount::HasErrorOccurredbool HasErrorOccurred() constWhether the RLogDiagCount has emitted an error (fatal or not) since construction time of *this.Definition RLogger.hxx:294; ROOT::Experimental::RLogScopedDiagCount::RLogScopedDiagCountRLogScopedDiagCount(RLogDiagCount &cnt)Construct the scoped count given a counter (e.g.Definition RLogger.hxx:272; ROOT::Experimental::RLogScopedDiagCount::fInitialErrorslong long fInitialErrorsThe number of the RLogDiagCount's emitted errors at construction time.Definition RLogger.hxx:265; ROOT::Experimental::RLogScopedDiagCount::fInitialWarningslong long fInitialWarningsThe number of the RLogDiagCount's emitted warnings at construction time of *this.Definition RLogger.hxx:263; ROOT::Experimental::RLogScopedDiagCount::fCounterRLogDiagCount * fCounterDefinition RLogger.hxx:261; ROOT::Experimental::RLogScopedDiagCount::GetAccumulatedErrorslong long GetAccumulatedErrors() constGet the number of errors that the RLogDiagCount has emitted since construction of *this.Definition RLogger.hxx:285; ROOT::Experimental::RLogScopedDiagCount::fInitialFatalErrorslong long fInitialFatalErrorsThe number of the RLogDiagCount's emitted fatal errors at construction time.Definition RLogger.hxx:267; ROOT::Experimental::RLogScopedDiagCount::RLogScopedDiagCountRLogScopedDiagCount()Construct the scoped count for any diagnostic, whatever its channel.Definition RLogger.hxx:279; ROOT::Experimen",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:23126,Availability,error,errors,23126,"e construction time of *this.Definition RLogger.hxx:297; ROOT::Experimental::RLogScopedDiagCount::HasErrorOccurredbool HasErrorOccurred() constWhether the RLogDiagCount has emitted an error (fatal or not) since construction time of *this.Definition RLogger.hxx:294; ROOT::Experimental::RLogScopedDiagCount::RLogScopedDiagCountRLogScopedDiagCount(RLogDiagCount &cnt)Construct the scoped count given a counter (e.g.Definition RLogger.hxx:272; ROOT::Experimental::RLogScopedDiagCount::fInitialErrorslong long fInitialErrorsThe number of the RLogDiagCount's emitted errors at construction time.Definition RLogger.hxx:265; ROOT::Experimental::RLogScopedDiagCount::fInitialWarningslong long fInitialWarningsThe number of the RLogDiagCount's emitted warnings at construction time of *this.Definition RLogger.hxx:263; ROOT::Experimental::RLogScopedDiagCount::fCounterRLogDiagCount * fCounterDefinition RLogger.hxx:261; ROOT::Experimental::RLogScopedDiagCount::GetAccumulatedErrorslong long GetAccumulatedErrors() constGet the number of errors that the RLogDiagCount has emitted since construction of *this.Definition RLogger.hxx:285; ROOT::Experimental::RLogScopedDiagCount::fInitialFatalErrorslong long fInitialFatalErrorsThe number of the RLogDiagCount's emitted fatal errors at construction time.Definition RLogger.hxx:267; ROOT::Experimental::RLogScopedDiagCount::RLogScopedDiagCountRLogScopedDiagCount()Construct the scoped count for any diagnostic, whatever its channel.Definition RLogger.hxx:279; ROOT::Experimental::RLogScopedDiagCount::GetAccumulatedFatalErrorslong long GetAccumulatedFatalErrors() constGet the number of errors that the RLogDiagCount has emitted since construction of *this.Definition RLogger.hxx:288; ROOT::Experimental::RLogScopedVerbosityChange the verbosity level (global or specific to the RLogChannel passed to the constructor) for the ...Definition RLogger.hxx:243; ROOT::Experimental::RLogScopedVerbosity::fChannelRLogChannel * fChannelDefinition RLogger.hxx:244; ROOT::Exp",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:23361,Availability,error,errors,23361," since construction time of *this.Definition RLogger.hxx:294; ROOT::Experimental::RLogScopedDiagCount::RLogScopedDiagCountRLogScopedDiagCount(RLogDiagCount &cnt)Construct the scoped count given a counter (e.g.Definition RLogger.hxx:272; ROOT::Experimental::RLogScopedDiagCount::fInitialErrorslong long fInitialErrorsThe number of the RLogDiagCount's emitted errors at construction time.Definition RLogger.hxx:265; ROOT::Experimental::RLogScopedDiagCount::fInitialWarningslong long fInitialWarningsThe number of the RLogDiagCount's emitted warnings at construction time of *this.Definition RLogger.hxx:263; ROOT::Experimental::RLogScopedDiagCount::fCounterRLogDiagCount * fCounterDefinition RLogger.hxx:261; ROOT::Experimental::RLogScopedDiagCount::GetAccumulatedErrorslong long GetAccumulatedErrors() constGet the number of errors that the RLogDiagCount has emitted since construction of *this.Definition RLogger.hxx:285; ROOT::Experimental::RLogScopedDiagCount::fInitialFatalErrorslong long fInitialFatalErrorsThe number of the RLogDiagCount's emitted fatal errors at construction time.Definition RLogger.hxx:267; ROOT::Experimental::RLogScopedDiagCount::RLogScopedDiagCountRLogScopedDiagCount()Construct the scoped count for any diagnostic, whatever its channel.Definition RLogger.hxx:279; ROOT::Experimental::RLogScopedDiagCount::GetAccumulatedFatalErrorslong long GetAccumulatedFatalErrors() constGet the number of errors that the RLogDiagCount has emitted since construction of *this.Definition RLogger.hxx:288; ROOT::Experimental::RLogScopedVerbosityChange the verbosity level (global or specific to the RLogChannel passed to the constructor) for the ...Definition RLogger.hxx:243; ROOT::Experimental::RLogScopedVerbosity::fChannelRLogChannel * fChannelDefinition RLogger.hxx:244; ROOT::Experimental::RLogScopedVerbosity::RLogScopedVerbosityRLogScopedVerbosity(RLogChannel &channel, ELogLevel verbosity)Definition RLogger.hxx:248; ROOT::Experimental::RLogScopedVerbosity::fPrevLevelELogLevel fP",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:23721,Availability,error,errors,23721,"Definition RLogger.hxx:265; ROOT::Experimental::RLogScopedDiagCount::fInitialWarningslong long fInitialWarningsThe number of the RLogDiagCount's emitted warnings at construction time of *this.Definition RLogger.hxx:263; ROOT::Experimental::RLogScopedDiagCount::fCounterRLogDiagCount * fCounterDefinition RLogger.hxx:261; ROOT::Experimental::RLogScopedDiagCount::GetAccumulatedErrorslong long GetAccumulatedErrors() constGet the number of errors that the RLogDiagCount has emitted since construction of *this.Definition RLogger.hxx:285; ROOT::Experimental::RLogScopedDiagCount::fInitialFatalErrorslong long fInitialFatalErrorsThe number of the RLogDiagCount's emitted fatal errors at construction time.Definition RLogger.hxx:267; ROOT::Experimental::RLogScopedDiagCount::RLogScopedDiagCountRLogScopedDiagCount()Construct the scoped count for any diagnostic, whatever its channel.Definition RLogger.hxx:279; ROOT::Experimental::RLogScopedDiagCount::GetAccumulatedFatalErrorslong long GetAccumulatedFatalErrors() constGet the number of errors that the RLogDiagCount has emitted since construction of *this.Definition RLogger.hxx:288; ROOT::Experimental::RLogScopedVerbosityChange the verbosity level (global or specific to the RLogChannel passed to the constructor) for the ...Definition RLogger.hxx:243; ROOT::Experimental::RLogScopedVerbosity::fChannelRLogChannel * fChannelDefinition RLogger.hxx:244; ROOT::Experimental::RLogScopedVerbosity::RLogScopedVerbosityRLogScopedVerbosity(RLogChannel &channel, ELogLevel verbosity)Definition RLogger.hxx:248; ROOT::Experimental::RLogScopedVerbosity::fPrevLevelELogLevel fPrevLevelDefinition RLogger.hxx:245; ROOT::Experimental::RLogScopedVerbosity::~RLogScopedVerbosity~RLogScopedVerbosity()Definition RLogger.hxx:253; ROOT::Experimental::RLogScopedVerbosity::RLogScopedVerbosityRLogScopedVerbosity(ELogLevel verbosity)Definition RLogger.hxx:252; lineTLine * lineDefinition entrylistblock_figure1.C:235; ROOT::Experimental::Internal::GetChannelOrManagerRLogC",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:25269,Availability,error,error,25269,"gScopedVerbosity::RLogScopedVerbosityRLogScopedVerbosity(RLogChannel &channel, ELogLevel verbosity)Definition RLogger.hxx:248; ROOT::Experimental::RLogScopedVerbosity::fPrevLevelELogLevel fPrevLevelDefinition RLogger.hxx:245; ROOT::Experimental::RLogScopedVerbosity::~RLogScopedVerbosity~RLogScopedVerbosity()Definition RLogger.hxx:253; ROOT::Experimental::RLogScopedVerbosity::RLogScopedVerbosityRLogScopedVerbosity(ELogLevel verbosity)Definition RLogger.hxx:252; lineTLine * lineDefinition entrylistblock_figure1.C:235; ROOT::Experimental::Internal::GetChannelOrManagerRLogChannel & GetChannelOrManager()Definition RLogger.hxx:302; ROOT::Experimental::operator+ELogLevel operator+(ELogLevel severity, int offset)Definition RLogger.hxx:45; ROOT::Experimental::ELogLevelELogLevelKinds of diagnostics.Definition RLogger.hxx:36; ROOT::Experimental::ELogLevel::kInfo@ kInfoInformational messages; used for instance for tracing.; ROOT::Experimental::ELogLevel::kDebug@ kDebugDebug information; only useful for developers; can have added verbosity up to 255-kDebug.; ROOT::Experimental::ELogLevel::kUnset@ kUnset; ROOT::Experimental::ELogLevel::kError@ kErrorAn error.; ROOT::Experimental::ELogLevel::kFatal@ kFatalAn error which causes further processing to be unreliable.; ROOT::Experimental::ELogLevel::kWarning@ kWarningWarnings about likely unexpected behavior.; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Experimental::RLogLocationA diagnostic location, part of an RLogEntry.Definition RLogger.hxx:166; ROOT::Experimental::RLogLocation::fFuncNamestd::string fFuncNameDefinition RLogger.hxx:168; ROOT::Experimental::RLogLocation::fFilestd::string fFileDefinition RLogger.hxx:167; ROOT::Experimental::RLogLocation::fLineint fLineDefinition RLogger.hxx:169. corefoundationincROOTRLogger.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:25325,Availability,error,error,25325,"gScopedVerbosity::RLogScopedVerbosityRLogScopedVerbosity(RLogChannel &channel, ELogLevel verbosity)Definition RLogger.hxx:248; ROOT::Experimental::RLogScopedVerbosity::fPrevLevelELogLevel fPrevLevelDefinition RLogger.hxx:245; ROOT::Experimental::RLogScopedVerbosity::~RLogScopedVerbosity~RLogScopedVerbosity()Definition RLogger.hxx:253; ROOT::Experimental::RLogScopedVerbosity::RLogScopedVerbosityRLogScopedVerbosity(ELogLevel verbosity)Definition RLogger.hxx:252; lineTLine * lineDefinition entrylistblock_figure1.C:235; ROOT::Experimental::Internal::GetChannelOrManagerRLogChannel & GetChannelOrManager()Definition RLogger.hxx:302; ROOT::Experimental::operator+ELogLevel operator+(ELogLevel severity, int offset)Definition RLogger.hxx:45; ROOT::Experimental::ELogLevelELogLevelKinds of diagnostics.Definition RLogger.hxx:36; ROOT::Experimental::ELogLevel::kInfo@ kInfoInformational messages; used for instance for tracing.; ROOT::Experimental::ELogLevel::kDebug@ kDebugDebug information; only useful for developers; can have added verbosity up to 255-kDebug.; ROOT::Experimental::ELogLevel::kUnset@ kUnset; ROOT::Experimental::ELogLevel::kError@ kErrorAn error.; ROOT::Experimental::ELogLevel::kFatal@ kFatalAn error which causes further processing to be unreliable.; ROOT::Experimental::ELogLevel::kWarning@ kWarningWarnings about likely unexpected behavior.; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Experimental::RLogLocationA diagnostic location, part of an RLogEntry.Definition RLogger.hxx:166; ROOT::Experimental::RLogLocation::fFuncNamestd::string fFuncNameDefinition RLogger.hxx:168; ROOT::Experimental::RLogLocation::fFilestd::string fFileDefinition RLogger.hxx:167; ROOT::Experimental::RLogLocation::fLineint fLineDefinition RLogger.hxx:169. corefoundationincROOTRLogger.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:3309,Deployability,configurat,configuration,3309," ; 66 /// Returns the current number of fatal errors.; 67 long long GetNumFatalErrors() const { return fNumFatalErrors; }; 68 ; 69 /// Increase warning or error count.; 70 void Increment(ELogLevel severity); 71 {; 72 switch (severity) {; 73 case ELogLevel::kFatal: ++fNumFatalErrors; break;; 74 case ELogLevel::kError: ++fNumErrors; break;; 75 case ELogLevel::kWarning: ++fNumWarnings; break;; 76 default:;; 77 }; 78 }; 79};; 80 ; 81/**; 82 Abstract RLogHandler base class. ROOT logs everything from info to error; 83 to entities of this class.; 84 */; 85class RLogHandler {; 86public:; 87 virtual ~RLogHandler();; 88 /// Emit a log entry.; 89 /// \param entry - the RLogEntry to be emitted.; 90 /// \returns false if further emission of this Log should be suppressed.; 91 ///; 92 /// \note This function is called concurrently; log emission must be locked; 93 /// if needed. (The default log handler using ROOT's DefaultErrorHandler is locked.); 94 virtual bool Emit(const RLogEntry &entry) = 0;; 95};; 96 ; 97/**; 98 A log configuration for a channel, e.g. ""RHist"".; 99 Each ROOT module has its own log, with potentially distinct verbosity.; 100 */; 101class RLogChannel : public RLogDiagCount {; 102 /// Name as shown in diagnostics; 103 std::string fName;; 104 ; 105 /// Verbosity of this channel. By default, use the global verbosity.; 106 ELogLevel fVerbosity = ELogLevel::kUnset;; 107 ; 108public:; 109 /// Construct an anonymous channel.; 110 RLogChannel() = default;; 111 ; 112 /// Construct an anonymous channel with a default verbosity.; 113 explicit RLogChannel(ELogLevel verbosity) : fVerbosity(verbosity) {}; 114 ; 115 /// Construct a log channel given its name, which is part of the diagnostics.; 116 RLogChannel(const std::string &name) : fName(name) {}; 117 ; 118 ELogLevel SetVerbosity(ELogLevel verbosity); 119 {; 120 std::swap(fVerbosity, verbosity);; 121 return verbosity;; 122 }; 123 ELogLevel GetVerbosity() const { return fVerbosity; }; 124 ELogLevel GetEffectiveVerbosity(con",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:12307,Deployability,update,update,12307,"); }; 298};; 299 ; 300namespace Internal {; 301 ; 302inline RLogChannel &GetChannelOrManager(); 303{; 304 return RLogManager::Get();; 305}; 306inline RLogChannel &GetChannelOrManager(RLogChannel &channel); 307{; 308 return channel;; 309}; 310 ; 311} // namespace Internal; 312 ; 313inline ELogLevel RLogChannel::GetEffectiveVerbosity(const RLogManager &mgr) const; 314{; 315 if (fVerbosity == ELogLevel::kUnset); 316 return mgr.GetVerbosity();; 317 return fVerbosity;; 318}; 319 ; 320} // namespace Experimental; 321} // namespace ROOT; 322 ; 323#if defined(_MSC_VER); 324#define R__LOG_PRETTY_FUNCTION __FUNCSIG__; 325#else; 326#define R__LOG_PRETTY_FUNCTION __PRETTY_FUNCTION__; 327#endif; 328 ; 329/*; 330 Some implementation details:; 331 ; 332 - The conditional `RLogBuilder` use prevents stream operators from being called if; 333 verbosity is too low, i.e.:; 334 ~~~; 335 RLogScopedVerbosity silence(RLogLevel::kFatal);; 336 R__LOG_DEBUG(7) << WillNotBeCalled();; 337 ~~~; 338 - To update counts of warnings / errors / fatal errors, those RLogEntries must; 339 always be created, even if in the end their emission will be silenced. This; 340 should be fine, performance-wise, as they should not happen frequently.; 341 - Use `(condition) && RLogBuilder(...)` instead of `if (condition) RLogBuilder(...)`; 342 to prevent ""ambiguous else"" in invocations such as `if (something) R__LOG_DEBUG()...`.; 343 */; 344#define R__LOG_TO_CHANNEL(SEVERITY, CHANNEL) \; 345 ((SEVERITY < ROOT::Experimental::ELogLevel::kInfo + 0) || \; 346 ROOT::Experimental::Internal::GetChannelOrManager(CHANNEL).GetEffectiveVerbosity( \; 347 ROOT::Experimental::RLogManager::Get()) >= SEVERITY) && \; 348 ROOT::Experimental::Detail::RLogBuilder(SEVERITY, ROOT::Experimental::Internal::GetChannelOrManager(CHANNEL), \; 349 __FILE__, __LINE__, R__LOG_PRETTY_FUNCTION); 350 ; 351/// \name LogMacros; 352/// Macros to log diagnostics.; 353/// ~~~ {.cpp}; 354/// R__LOG_INFO(ROOT::Experimental::HistLog()) << ""all we know is "" ",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:16340,Deployability,configurat,configuration,16340,"ar ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h offsetDefinition TGWin32VirtualXProxy.cxx:245; namechar name[80]Definition TGX11.cxx:110; ROOT::Experimental::Detail::RLogBuilderBuilds a diagnostic entry, emitted by the static RLogManager upon destruction of this builder,...Definition RLogger.hxx:213; ROOT::Experimental::Detail::RLogBuilder::RLogBuilderRLogBuilder(ELogLevel level, RLogChannel &channel)Definition RLogger.hxx:218; ROOT::Experimental::Detail::RLogBuilder::RLogBuilderRLogBuilder(ELogLevel level, RLogChannel &channel, const std::string &filename, int line, const std::string &funcname)Definition RLogger.hxx:219; ROOT::Experimental::Detail::RLogBuilder::fEntryRLogEntry fEntryThe log entry to be built.Definition RLogger.hxx:215; ROOT::Experimental::Detail::RLogBuilder::~RLogBuilder~RLogBuilder()Emit the log entry through the static log manager.Definition RLogger.hxx:226; ROOT::Experimental::RLogChannelA log configuration for a channel, e.g.Definition RLogger.hxx:101; ROOT::Experimental::RLogChannel::RLogChannelRLogChannel(const std::string &name)Construct a log channel given its name, which is part of the diagnostics.Definition RLogger.hxx:116; ROOT::Experimental::RLogChannel::fVerbosityELogLevel fVerbosityVerbosity of this channel. By default, use the global verbosity.Definition RLogger.hxx:106; ROOT::Experimental::RLogChannel::RLogChannelRLogChannel()=defaultConstruct an anonymous channel.; ROOT::Experimental::RLogChannel::GetEffectiveVerbosityELogLevel GetEffectiveVerbosity(const RLogManager &mgr) constDefinition RLogger.hxx:313; ROOT::Experimental::RLogChannel::fNamestd::string fNameName as shown in diagnostics.Definition RLogger.hxx:103; ROOT::Experimental::RLogChannel::GetVerbosityELogLevel GetVerbosity() constDefinition RLogger.hxx:123; ROOT::Experimental::RLogChannel::SetVerbosityELogLevel SetVerbosity(ELogLevel verbosity)Definition RLogger.hxx:118; ROOT::Experimental::RLog",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:1427,Integrability,message,messages,1427,"ange without notice. It might trigger earthquakes. Feedback; 6/// is welcome!; 7 ; 8/*************************************************************************; 9 * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; 10 * All rights reserved. *; 11 * *; 12 * For the licensing terms see $ROOTSYS/LICENSE. *; 13 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 14 *************************************************************************/; 15 ; 16#ifndef ROOT7_RLogger; 17#define ROOT7_RLogger; 18 ; 19#include <atomic>; 20#include <list>; 21#include <memory>; 22#include <mutex>; 23#include <sstream>; 24#include <string>; 25#include <utility>; 26 ; 27namespace ROOT {; 28namespace Experimental {; 29 ; 30class RLogEntry;; 31class RLogManager;; 32 ; 33/**; 34 Kinds of diagnostics.; 35 */; 36enum class ELogLevel : unsigned char {; 37 kUnset,; 38 kFatal, ///< An error which causes further processing to be unreliable; 39 kError, ///< An error; 40 kWarning, ///< Warnings about likely unexpected behavior; 41 kInfo, ///< Informational messages; used for instance for tracing; 42 kDebug ///< Debug information; only useful for developers; can have added verbosity up to 255-kDebug.; 43};; 44 ; 45inline ELogLevel operator+(ELogLevel severity, int offset); 46{; 47 return static_cast<ELogLevel>(static_cast<int>(severity) + offset);; 48}; 49 ; 50/**; 51 Keep track of emitted errors and warnings.; 52 */; 53class RLogDiagCount {; 54protected:; 55 std::atomic<long long> fNumWarnings{0ll}; /// Number of warnings.; 56 std::atomic<long long> fNumErrors{0ll}; /// Number of errors.; 57 std::atomic<long long> fNumFatalErrors{0ll}; /// Number of fatal errors.; 58 ; 59public:; 60 /// Returns the current number of warnings.; 61 long long GetNumWarnings() const { return fNumWarnings; }; 62 ; 63 /// Returns the current number of errors.; 64 long long GetNumErrors() const { return fNumErrors; }; 65 ; 66 /// Returns the current number of fatal errors.; 67 long long GetNumFatalErrors() c",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:6140,Integrability,message,message,6140,".; 150 void PushFront(std::unique_ptr<RLogHandler> handler) { fHandlers.emplace_front(std::move(handler)); }; 151 ; 152 /// Add a RLogHandler in the back - to be called after all others.; 153 void PushBack(std::unique_ptr<RLogHandler> handler) { fHandlers.emplace_back(std::move(handler)); }; 154 ; 155 /// Remove and return the given log handler. Returns `nullptr` if not found.; 156 std::unique_ptr<RLogHandler> Remove(RLogHandler *handler);; 157 ; 158 // Emit a `RLogEntry` to the RLogHandlers.; 159 // Returns false if further emission of this Log should be suppressed.; 160 bool Emit(const RLogEntry &entry) override;; 161};; 162 ; 163/**; 164 A diagnostic location, part of an RLogEntry.; 165 */; 166struct RLogLocation {; 167 std::string fFile;; 168 std::string fFuncName;; 169 int fLine; // C++11 forbids ""= 0"" for braced-init-list initialization.; 170};; 171 ; 172/**; 173 A diagnostic that can be emitted by the RLogManager.; 174 One can construct a RLogEntry through RLogBuilder, including streaming into; 175 the diagnostic message and automatic emission.; 176 */; 177 ; 178class RLogEntry {; 179public:; 180 RLogLocation fLocation;; 181 std::string fMessage;; 182 RLogChannel *fChannel = nullptr;; 183 ELogLevel fLevel = ELogLevel::kFatal;; 184 ; 185 RLogEntry(ELogLevel level, RLogChannel &channel) : fChannel(&channel), fLevel(level) {}; 186 RLogEntry(ELogLevel level, RLogChannel &channel, const RLogLocation &loc); 187 : fLocation(loc), fChannel(&channel), fLevel(level); 188 {; 189 }; 190 ; 191 bool IsDebug() const { return fLevel >= ELogLevel::kDebug; }; 192 bool IsInfo() const { return fLevel == ELogLevel::kInfo; }; 193 bool IsWarning() const { return fLevel == ELogLevel::kWarning; }; 194 bool IsError() const { return fLevel == ELogLevel::kError; }; 195 bool IsFatal() const { return fLevel == ELogLevel::kFatal; }; 196};; 197 ; 198namespace Detail {; 199/**; 200 Builds a diagnostic entry, emitted by the static RLogManager upon destruction of this builder,; 201 where - by d",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:24996,Integrability,message,messages,24996,"x:243; ROOT::Experimental::RLogScopedVerbosity::fChannelRLogChannel * fChannelDefinition RLogger.hxx:244; ROOT::Experimental::RLogScopedVerbosity::RLogScopedVerbosityRLogScopedVerbosity(RLogChannel &channel, ELogLevel verbosity)Definition RLogger.hxx:248; ROOT::Experimental::RLogScopedVerbosity::fPrevLevelELogLevel fPrevLevelDefinition RLogger.hxx:245; ROOT::Experimental::RLogScopedVerbosity::~RLogScopedVerbosity~RLogScopedVerbosity()Definition RLogger.hxx:253; ROOT::Experimental::RLogScopedVerbosity::RLogScopedVerbosityRLogScopedVerbosity(ELogLevel verbosity)Definition RLogger.hxx:252; lineTLine * lineDefinition entrylistblock_figure1.C:235; ROOT::Experimental::Internal::GetChannelOrManagerRLogChannel & GetChannelOrManager()Definition RLogger.hxx:302; ROOT::Experimental::operator+ELogLevel operator+(ELogLevel severity, int offset)Definition RLogger.hxx:45; ROOT::Experimental::ELogLevelELogLevelKinds of diagnostics.Definition RLogger.hxx:36; ROOT::Experimental::ELogLevel::kInfo@ kInfoInformational messages; used for instance for tracing.; ROOT::Experimental::ELogLevel::kDebug@ kDebugDebug information; only useful for developers; can have added verbosity up to 255-kDebug.; ROOT::Experimental::ELogLevel::kUnset@ kUnset; ROOT::Experimental::ELogLevel::kError@ kErrorAn error.; ROOT::Experimental::ELogLevel::kFatal@ kFatalAn error which causes further processing to be unreliable.; ROOT::Experimental::ELogLevel::kWarning@ kWarningWarnings about likely unexpected behavior.; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Experimental::RLogLocationA diagnostic location, part of an RLogEntry.Definition RLogger.hxx:166; ROOT::Experimental::RLogLocation::fFuncNamestd::string fFuncNameDefinition RLogger.hxx:168; ROOT::Experimental::RLogLocation::fFilestd::string fFileDefinition RLogger.hxx:167; ROOT::Experimental::RLogLocation::fLineint fLineDefinition RLogger.hxx:169. corefounda",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:3309,Modifiability,config,configuration,3309," ; 66 /// Returns the current number of fatal errors.; 67 long long GetNumFatalErrors() const { return fNumFatalErrors; }; 68 ; 69 /// Increase warning or error count.; 70 void Increment(ELogLevel severity); 71 {; 72 switch (severity) {; 73 case ELogLevel::kFatal: ++fNumFatalErrors; break;; 74 case ELogLevel::kError: ++fNumErrors; break;; 75 case ELogLevel::kWarning: ++fNumWarnings; break;; 76 default:;; 77 }; 78 }; 79};; 80 ; 81/**; 82 Abstract RLogHandler base class. ROOT logs everything from info to error; 83 to entities of this class.; 84 */; 85class RLogHandler {; 86public:; 87 virtual ~RLogHandler();; 88 /// Emit a log entry.; 89 /// \param entry - the RLogEntry to be emitted.; 90 /// \returns false if further emission of this Log should be suppressed.; 91 ///; 92 /// \note This function is called concurrently; log emission must be locked; 93 /// if needed. (The default log handler using ROOT's DefaultErrorHandler is locked.); 94 virtual bool Emit(const RLogEntry &entry) = 0;; 95};; 96 ; 97/**; 98 A log configuration for a channel, e.g. ""RHist"".; 99 Each ROOT module has its own log, with potentially distinct verbosity.; 100 */; 101class RLogChannel : public RLogDiagCount {; 102 /// Name as shown in diagnostics; 103 std::string fName;; 104 ; 105 /// Verbosity of this channel. By default, use the global verbosity.; 106 ELogLevel fVerbosity = ELogLevel::kUnset;; 107 ; 108public:; 109 /// Construct an anonymous channel.; 110 RLogChannel() = default;; 111 ; 112 /// Construct an anonymous channel with a default verbosity.; 113 explicit RLogChannel(ELogLevel verbosity) : fVerbosity(verbosity) {}; 114 ; 115 /// Construct a log channel given its name, which is part of the diagnostics.; 116 RLogChannel(const std::string &name) : fName(name) {}; 117 ; 118 ELogLevel SetVerbosity(ELogLevel verbosity); 119 {; 120 std::swap(fVerbosity, verbosity);; 121 return verbosity;; 122 }; 123 ELogLevel GetVerbosity() const { return fVerbosity; }; 124 ELogLevel GetEffectiveVerbosity(con",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:16340,Modifiability,config,configuration,16340,"ar ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h offsetDefinition TGWin32VirtualXProxy.cxx:245; namechar name[80]Definition TGX11.cxx:110; ROOT::Experimental::Detail::RLogBuilderBuilds a diagnostic entry, emitted by the static RLogManager upon destruction of this builder,...Definition RLogger.hxx:213; ROOT::Experimental::Detail::RLogBuilder::RLogBuilderRLogBuilder(ELogLevel level, RLogChannel &channel)Definition RLogger.hxx:218; ROOT::Experimental::Detail::RLogBuilder::RLogBuilderRLogBuilder(ELogLevel level, RLogChannel &channel, const std::string &filename, int line, const std::string &funcname)Definition RLogger.hxx:219; ROOT::Experimental::Detail::RLogBuilder::fEntryRLogEntry fEntryThe log entry to be built.Definition RLogger.hxx:215; ROOT::Experimental::Detail::RLogBuilder::~RLogBuilder~RLogBuilder()Emit the log entry through the static log manager.Definition RLogger.hxx:226; ROOT::Experimental::RLogChannelA log configuration for a channel, e.g.Definition RLogger.hxx:101; ROOT::Experimental::RLogChannel::RLogChannelRLogChannel(const std::string &name)Construct a log channel given its name, which is part of the diagnostics.Definition RLogger.hxx:116; ROOT::Experimental::RLogChannel::fVerbosityELogLevel fVerbosityVerbosity of this channel. By default, use the global verbosity.Definition RLogger.hxx:106; ROOT::Experimental::RLogChannel::RLogChannelRLogChannel()=defaultConstruct an anonymous channel.; ROOT::Experimental::RLogChannel::GetEffectiveVerbosityELogLevel GetEffectiveVerbosity(const RLogManager &mgr) constDefinition RLogger.hxx:313; ROOT::Experimental::RLogChannel::fNamestd::string fNameName as shown in diagnostics.Definition RLogger.hxx:103; ROOT::Experimental::RLogChannel::GetVerbosityELogLevel GetVerbosity() constDefinition RLogger.hxx:123; ROOT::Experimental::RLogChannel::SetVerbosityELogLevel SetVerbosity(ELogLevel verbosity)Definition RLogger.hxx:118; ROOT::Experimental::RLog",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:3099,Performance,concurren,concurrently,3099,"ngs.; 61 long long GetNumWarnings() const { return fNumWarnings; }; 62 ; 63 /// Returns the current number of errors.; 64 long long GetNumErrors() const { return fNumErrors; }; 65 ; 66 /// Returns the current number of fatal errors.; 67 long long GetNumFatalErrors() const { return fNumFatalErrors; }; 68 ; 69 /// Increase warning or error count.; 70 void Increment(ELogLevel severity); 71 {; 72 switch (severity) {; 73 case ELogLevel::kFatal: ++fNumFatalErrors; break;; 74 case ELogLevel::kError: ++fNumErrors; break;; 75 case ELogLevel::kWarning: ++fNumWarnings; break;; 76 default:;; 77 }; 78 }; 79};; 80 ; 81/**; 82 Abstract RLogHandler base class. ROOT logs everything from info to error; 83 to entities of this class.; 84 */; 85class RLogHandler {; 86public:; 87 virtual ~RLogHandler();; 88 /// Emit a log entry.; 89 /// \param entry - the RLogEntry to be emitted.; 90 /// \returns false if further emission of this Log should be suppressed.; 91 ///; 92 /// \note This function is called concurrently; log emission must be locked; 93 /// if needed. (The default log handler using ROOT's DefaultErrorHandler is locked.); 94 virtual bool Emit(const RLogEntry &entry) = 0;; 95};; 96 ; 97/**; 98 A log configuration for a channel, e.g. ""RHist"".; 99 Each ROOT module has its own log, with potentially distinct verbosity.; 100 */; 101class RLogChannel : public RLogDiagCount {; 102 /// Name as shown in diagnostics; 103 std::string fName;; 104 ; 105 /// Verbosity of this channel. By default, use the global verbosity.; 106 ELogLevel fVerbosity = ELogLevel::kUnset;; 107 ; 108public:; 109 /// Construct an anonymous channel.; 110 RLogChannel() = default;; 111 ; 112 /// Construct an anonymous channel with a default verbosity.; 113 explicit RLogChannel(ELogLevel verbosity) : fVerbosity(verbosity) {}; 114 ; 115 /// Construct a log channel given its name, which is part of the diagnostics.; 116 RLogChannel(const std::string &name) : fName(name) {}; 117 ; 118 ELogLevel SetVerbosity(ELogLevel verbosit",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:12483,Performance,perform,performance-wise,12483,"ger(RLogChannel &channel); 307{; 308 return channel;; 309}; 310 ; 311} // namespace Internal; 312 ; 313inline ELogLevel RLogChannel::GetEffectiveVerbosity(const RLogManager &mgr) const; 314{; 315 if (fVerbosity == ELogLevel::kUnset); 316 return mgr.GetVerbosity();; 317 return fVerbosity;; 318}; 319 ; 320} // namespace Experimental; 321} // namespace ROOT; 322 ; 323#if defined(_MSC_VER); 324#define R__LOG_PRETTY_FUNCTION __FUNCSIG__; 325#else; 326#define R__LOG_PRETTY_FUNCTION __PRETTY_FUNCTION__; 327#endif; 328 ; 329/*; 330 Some implementation details:; 331 ; 332 - The conditional `RLogBuilder` use prevents stream operators from being called if; 333 verbosity is too low, i.e.:; 334 ~~~; 335 RLogScopedVerbosity silence(RLogLevel::kFatal);; 336 R__LOG_DEBUG(7) << WillNotBeCalled();; 337 ~~~; 338 - To update counts of warnings / errors / fatal errors, those RLogEntries must; 339 always be created, even if in the end their emission will be silenced. This; 340 should be fine, performance-wise, as they should not happen frequently.; 341 - Use `(condition) && RLogBuilder(...)` instead of `if (condition) RLogBuilder(...)`; 342 to prevent ""ambiguous else"" in invocations such as `if (something) R__LOG_DEBUG()...`.; 343 */; 344#define R__LOG_TO_CHANNEL(SEVERITY, CHANNEL) \; 345 ((SEVERITY < ROOT::Experimental::ELogLevel::kInfo + 0) || \; 346 ROOT::Experimental::Internal::GetChannelOrManager(CHANNEL).GetEffectiveVerbosity( \; 347 ROOT::Experimental::RLogManager::Get()) >= SEVERITY) && \; 348 ROOT::Experimental::Detail::RLogBuilder(SEVERITY, ROOT::Experimental::Internal::GetChannelOrManager(CHANNEL), \; 349 __FILE__, __LINE__, R__LOG_PRETTY_FUNCTION); 350 ; 351/// \name LogMacros; 352/// Macros to log diagnostics.; 353/// ~~~ {.cpp}; 354/// R__LOG_INFO(ROOT::Experimental::HistLog()) << ""all we know is "" << 42;; 355///; 356/// RLogScopedVerbosity verbose(kDebug + 5);; 357/// const int decreasedInfoLevel = 5;; 358/// R__LOG_DEBUG(ROOT::WebGUILog(), decreasedInfoLevel) << ""nitty-gr",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:2763,Testability,log,logs,2763,"/; 53class RLogDiagCount {; 54protected:; 55 std::atomic<long long> fNumWarnings{0ll}; /// Number of warnings.; 56 std::atomic<long long> fNumErrors{0ll}; /// Number of errors.; 57 std::atomic<long long> fNumFatalErrors{0ll}; /// Number of fatal errors.; 58 ; 59public:; 60 /// Returns the current number of warnings.; 61 long long GetNumWarnings() const { return fNumWarnings; }; 62 ; 63 /// Returns the current number of errors.; 64 long long GetNumErrors() const { return fNumErrors; }; 65 ; 66 /// Returns the current number of fatal errors.; 67 long long GetNumFatalErrors() const { return fNumFatalErrors; }; 68 ; 69 /// Increase warning or error count.; 70 void Increment(ELogLevel severity); 71 {; 72 switch (severity) {; 73 case ELogLevel::kFatal: ++fNumFatalErrors; break;; 74 case ELogLevel::kError: ++fNumErrors; break;; 75 case ELogLevel::kWarning: ++fNumWarnings; break;; 76 default:;; 77 }; 78 }; 79};; 80 ; 81/**; 82 Abstract RLogHandler base class. ROOT logs everything from info to error; 83 to entities of this class.; 84 */; 85class RLogHandler {; 86public:; 87 virtual ~RLogHandler();; 88 /// Emit a log entry.; 89 /// \param entry - the RLogEntry to be emitted.; 90 /// \returns false if further emission of this Log should be suppressed.; 91 ///; 92 /// \note This function is called concurrently; log emission must be locked; 93 /// if needed. (The default log handler using ROOT's DefaultErrorHandler is locked.); 94 virtual bool Emit(const RLogEntry &entry) = 0;; 95};; 96 ; 97/**; 98 A log configuration for a channel, e.g. ""RHist"".; 99 Each ROOT module has its own log, with potentially distinct verbosity.; 100 */; 101class RLogChannel : public RLogDiagCount {; 102 /// Name as shown in diagnostics; 103 std::string fName;; 104 ; 105 /// Verbosity of this channel. By default, use the global verbosity.; 106 ELogLevel fVerbosity = ELogLevel::kUnset;; 107 ; 108public:; 109 /// Construct an anonymous channel.; 110 RLogChannel() = default;; 111 ; 112 /// Construct an anony",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:2913,Testability,log,log,2913,"l}; /// Number of warnings.; 56 std::atomic<long long> fNumErrors{0ll}; /// Number of errors.; 57 std::atomic<long long> fNumFatalErrors{0ll}; /// Number of fatal errors.; 58 ; 59public:; 60 /// Returns the current number of warnings.; 61 long long GetNumWarnings() const { return fNumWarnings; }; 62 ; 63 /// Returns the current number of errors.; 64 long long GetNumErrors() const { return fNumErrors; }; 65 ; 66 /// Returns the current number of fatal errors.; 67 long long GetNumFatalErrors() const { return fNumFatalErrors; }; 68 ; 69 /// Increase warning or error count.; 70 void Increment(ELogLevel severity); 71 {; 72 switch (severity) {; 73 case ELogLevel::kFatal: ++fNumFatalErrors; break;; 74 case ELogLevel::kError: ++fNumErrors; break;; 75 case ELogLevel::kWarning: ++fNumWarnings; break;; 76 default:;; 77 }; 78 }; 79};; 80 ; 81/**; 82 Abstract RLogHandler base class. ROOT logs everything from info to error; 83 to entities of this class.; 84 */; 85class RLogHandler {; 86public:; 87 virtual ~RLogHandler();; 88 /// Emit a log entry.; 89 /// \param entry - the RLogEntry to be emitted.; 90 /// \returns false if further emission of this Log should be suppressed.; 91 ///; 92 /// \note This function is called concurrently; log emission must be locked; 93 /// if needed. (The default log handler using ROOT's DefaultErrorHandler is locked.); 94 virtual bool Emit(const RLogEntry &entry) = 0;; 95};; 96 ; 97/**; 98 A log configuration for a channel, e.g. ""RHist"".; 99 Each ROOT module has its own log, with potentially distinct verbosity.; 100 */; 101class RLogChannel : public RLogDiagCount {; 102 /// Name as shown in diagnostics; 103 std::string fName;; 104 ; 105 /// Verbosity of this channel. By default, use the global verbosity.; 106 ELogLevel fVerbosity = ELogLevel::kUnset;; 107 ; 108public:; 109 /// Construct an anonymous channel.; 110 RLogChannel() = default;; 111 ; 112 /// Construct an anonymous channel with a default verbosity.; 113 explicit RLogChannel(ELogLevel verbosit",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:3113,Testability,log,log,3113,"ngs.; 61 long long GetNumWarnings() const { return fNumWarnings; }; 62 ; 63 /// Returns the current number of errors.; 64 long long GetNumErrors() const { return fNumErrors; }; 65 ; 66 /// Returns the current number of fatal errors.; 67 long long GetNumFatalErrors() const { return fNumFatalErrors; }; 68 ; 69 /// Increase warning or error count.; 70 void Increment(ELogLevel severity); 71 {; 72 switch (severity) {; 73 case ELogLevel::kFatal: ++fNumFatalErrors; break;; 74 case ELogLevel::kError: ++fNumErrors; break;; 75 case ELogLevel::kWarning: ++fNumWarnings; break;; 76 default:;; 77 }; 78 }; 79};; 80 ; 81/**; 82 Abstract RLogHandler base class. ROOT logs everything from info to error; 83 to entities of this class.; 84 */; 85class RLogHandler {; 86public:; 87 virtual ~RLogHandler();; 88 /// Emit a log entry.; 89 /// \param entry - the RLogEntry to be emitted.; 90 /// \returns false if further emission of this Log should be suppressed.; 91 ///; 92 /// \note This function is called concurrently; log emission must be locked; 93 /// if needed. (The default log handler using ROOT's DefaultErrorHandler is locked.); 94 virtual bool Emit(const RLogEntry &entry) = 0;; 95};; 96 ; 97/**; 98 A log configuration for a channel, e.g. ""RHist"".; 99 Each ROOT module has its own log, with potentially distinct verbosity.; 100 */; 101class RLogChannel : public RLogDiagCount {; 102 /// Name as shown in diagnostics; 103 std::string fName;; 104 ; 105 /// Verbosity of this channel. By default, use the global verbosity.; 106 ELogLevel fVerbosity = ELogLevel::kUnset;; 107 ; 108public:; 109 /// Construct an anonymous channel.; 110 RLogChannel() = default;; 111 ; 112 /// Construct an anonymous channel with a default verbosity.; 113 explicit RLogChannel(ELogLevel verbosity) : fVerbosity(verbosity) {}; 114 ; 115 /// Construct a log channel given its name, which is part of the diagnostics.; 116 RLogChannel(const std::string &name) : fName(name) {}; 117 ; 118 ELogLevel SetVerbosity(ELogLevel verbosit",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:3173,Testability,log,log,3173,"the current number of errors.; 64 long long GetNumErrors() const { return fNumErrors; }; 65 ; 66 /// Returns the current number of fatal errors.; 67 long long GetNumFatalErrors() const { return fNumFatalErrors; }; 68 ; 69 /// Increase warning or error count.; 70 void Increment(ELogLevel severity); 71 {; 72 switch (severity) {; 73 case ELogLevel::kFatal: ++fNumFatalErrors; break;; 74 case ELogLevel::kError: ++fNumErrors; break;; 75 case ELogLevel::kWarning: ++fNumWarnings; break;; 76 default:;; 77 }; 78 }; 79};; 80 ; 81/**; 82 Abstract RLogHandler base class. ROOT logs everything from info to error; 83 to entities of this class.; 84 */; 85class RLogHandler {; 86public:; 87 virtual ~RLogHandler();; 88 /// Emit a log entry.; 89 /// \param entry - the RLogEntry to be emitted.; 90 /// \returns false if further emission of this Log should be suppressed.; 91 ///; 92 /// \note This function is called concurrently; log emission must be locked; 93 /// if needed. (The default log handler using ROOT's DefaultErrorHandler is locked.); 94 virtual bool Emit(const RLogEntry &entry) = 0;; 95};; 96 ; 97/**; 98 A log configuration for a channel, e.g. ""RHist"".; 99 Each ROOT module has its own log, with potentially distinct verbosity.; 100 */; 101class RLogChannel : public RLogDiagCount {; 102 /// Name as shown in diagnostics; 103 std::string fName;; 104 ; 105 /// Verbosity of this channel. By default, use the global verbosity.; 106 ELogLevel fVerbosity = ELogLevel::kUnset;; 107 ; 108public:; 109 /// Construct an anonymous channel.; 110 RLogChannel() = default;; 111 ; 112 /// Construct an anonymous channel with a default verbosity.; 113 explicit RLogChannel(ELogLevel verbosity) : fVerbosity(verbosity) {}; 114 ; 115 /// Construct a log channel given its name, which is part of the diagnostics.; 116 RLogChannel(const std::string &name) : fName(name) {}; 117 ; 118 ELogLevel SetVerbosity(ELogLevel verbosity); 119 {; 120 std::swap(fVerbosity, verbosity);; 121 return verbosity;; 122 }; 123 ELog",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:3305,Testability,log,log,3305," ; 66 /// Returns the current number of fatal errors.; 67 long long GetNumFatalErrors() const { return fNumFatalErrors; }; 68 ; 69 /// Increase warning or error count.; 70 void Increment(ELogLevel severity); 71 {; 72 switch (severity) {; 73 case ELogLevel::kFatal: ++fNumFatalErrors; break;; 74 case ELogLevel::kError: ++fNumErrors; break;; 75 case ELogLevel::kWarning: ++fNumWarnings; break;; 76 default:;; 77 }; 78 }; 79};; 80 ; 81/**; 82 Abstract RLogHandler base class. ROOT logs everything from info to error; 83 to entities of this class.; 84 */; 85class RLogHandler {; 86public:; 87 virtual ~RLogHandler();; 88 /// Emit a log entry.; 89 /// \param entry - the RLogEntry to be emitted.; 90 /// \returns false if further emission of this Log should be suppressed.; 91 ///; 92 /// \note This function is called concurrently; log emission must be locked; 93 /// if needed. (The default log handler using ROOT's DefaultErrorHandler is locked.); 94 virtual bool Emit(const RLogEntry &entry) = 0;; 95};; 96 ; 97/**; 98 A log configuration for a channel, e.g. ""RHist"".; 99 Each ROOT module has its own log, with potentially distinct verbosity.; 100 */; 101class RLogChannel : public RLogDiagCount {; 102 /// Name as shown in diagnostics; 103 std::string fName;; 104 ; 105 /// Verbosity of this channel. By default, use the global verbosity.; 106 ELogLevel fVerbosity = ELogLevel::kUnset;; 107 ; 108public:; 109 /// Construct an anonymous channel.; 110 RLogChannel() = default;; 111 ; 112 /// Construct an anonymous channel with a default verbosity.; 113 explicit RLogChannel(ELogLevel verbosity) : fVerbosity(verbosity) {}; 114 ; 115 /// Construct a log channel given its name, which is part of the diagnostics.; 116 RLogChannel(const std::string &name) : fName(name) {}; 117 ; 118 ELogLevel SetVerbosity(ELogLevel verbosity); 119 {; 120 std::swap(fVerbosity, verbosity);; 121 return verbosity;; 122 }; 123 ELogLevel GetVerbosity() const { return fVerbosity; }; 124 ELogLevel GetEffectiveVerbosity(con",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:3385,Testability,log,log,3385,"NumFatalErrors; }; 68 ; 69 /// Increase warning or error count.; 70 void Increment(ELogLevel severity); 71 {; 72 switch (severity) {; 73 case ELogLevel::kFatal: ++fNumFatalErrors; break;; 74 case ELogLevel::kError: ++fNumErrors; break;; 75 case ELogLevel::kWarning: ++fNumWarnings; break;; 76 default:;; 77 }; 78 }; 79};; 80 ; 81/**; 82 Abstract RLogHandler base class. ROOT logs everything from info to error; 83 to entities of this class.; 84 */; 85class RLogHandler {; 86public:; 87 virtual ~RLogHandler();; 88 /// Emit a log entry.; 89 /// \param entry - the RLogEntry to be emitted.; 90 /// \returns false if further emission of this Log should be suppressed.; 91 ///; 92 /// \note This function is called concurrently; log emission must be locked; 93 /// if needed. (The default log handler using ROOT's DefaultErrorHandler is locked.); 94 virtual bool Emit(const RLogEntry &entry) = 0;; 95};; 96 ; 97/**; 98 A log configuration for a channel, e.g. ""RHist"".; 99 Each ROOT module has its own log, with potentially distinct verbosity.; 100 */; 101class RLogChannel : public RLogDiagCount {; 102 /// Name as shown in diagnostics; 103 std::string fName;; 104 ; 105 /// Verbosity of this channel. By default, use the global verbosity.; 106 ELogLevel fVerbosity = ELogLevel::kUnset;; 107 ; 108public:; 109 /// Construct an anonymous channel.; 110 RLogChannel() = default;; 111 ; 112 /// Construct an anonymous channel with a default verbosity.; 113 explicit RLogChannel(ELogLevel verbosity) : fVerbosity(verbosity) {}; 114 ; 115 /// Construct a log channel given its name, which is part of the diagnostics.; 116 RLogChannel(const std::string &name) : fName(name) {}; 117 ; 118 ELogLevel SetVerbosity(ELogLevel verbosity); 119 {; 120 std::swap(fVerbosity, verbosity);; 121 return verbosity;; 122 }; 123 ELogLevel GetVerbosity() const { return fVerbosity; }; 124 ELogLevel GetEffectiveVerbosity(const RLogManager &mgr) const;; 125 ; 126 const std::string &GetName() const { return fName; }; 127};; 128 ;",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:3933,Testability,log,log,3933," log entry.; 89 /// \param entry - the RLogEntry to be emitted.; 90 /// \returns false if further emission of this Log should be suppressed.; 91 ///; 92 /// \note This function is called concurrently; log emission must be locked; 93 /// if needed. (The default log handler using ROOT's DefaultErrorHandler is locked.); 94 virtual bool Emit(const RLogEntry &entry) = 0;; 95};; 96 ; 97/**; 98 A log configuration for a channel, e.g. ""RHist"".; 99 Each ROOT module has its own log, with potentially distinct verbosity.; 100 */; 101class RLogChannel : public RLogDiagCount {; 102 /// Name as shown in diagnostics; 103 std::string fName;; 104 ; 105 /// Verbosity of this channel. By default, use the global verbosity.; 106 ELogLevel fVerbosity = ELogLevel::kUnset;; 107 ; 108public:; 109 /// Construct an anonymous channel.; 110 RLogChannel() = default;; 111 ; 112 /// Construct an anonymous channel with a default verbosity.; 113 explicit RLogChannel(ELogLevel verbosity) : fVerbosity(verbosity) {}; 114 ; 115 /// Construct a log channel given its name, which is part of the diagnostics.; 116 RLogChannel(const std::string &name) : fName(name) {}; 117 ; 118 ELogLevel SetVerbosity(ELogLevel verbosity); 119 {; 120 std::swap(fVerbosity, verbosity);; 121 return verbosity;; 122 }; 123 ELogLevel GetVerbosity() const { return fVerbosity; }; 124 ELogLevel GetEffectiveVerbosity(const RLogManager &mgr) const;; 125 ; 126 const std::string &GetName() const { return fName; }; 127};; 128 ; 129/**; 130 A RLogHandler that multiplexes diagnostics to different client `RLogHandler`s; 131 and keeps track of the sum of `RLogDiagCount`s for all channels.; 132 ; 133 `RLogHandler::Get()` returns the process's (static) log manager.; 134 */; 135 ; 136class RLogManager : public RLogChannel, public RLogHandler {; 137 std::mutex fMutex;; 138 std::list<std::unique_ptr<RLogHandler>> fHandlers;; 139 ; 140public:; 141 /// Initialize taking a RLogHandler.; 142 RLogManager(std::unique_ptr<RLogHandler> lh) : RLogChannel(ELog",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:4613,Testability,log,log,4613,"y default, use the global verbosity.; 106 ELogLevel fVerbosity = ELogLevel::kUnset;; 107 ; 108public:; 109 /// Construct an anonymous channel.; 110 RLogChannel() = default;; 111 ; 112 /// Construct an anonymous channel with a default verbosity.; 113 explicit RLogChannel(ELogLevel verbosity) : fVerbosity(verbosity) {}; 114 ; 115 /// Construct a log channel given its name, which is part of the diagnostics.; 116 RLogChannel(const std::string &name) : fName(name) {}; 117 ; 118 ELogLevel SetVerbosity(ELogLevel verbosity); 119 {; 120 std::swap(fVerbosity, verbosity);; 121 return verbosity;; 122 }; 123 ELogLevel GetVerbosity() const { return fVerbosity; }; 124 ELogLevel GetEffectiveVerbosity(const RLogManager &mgr) const;; 125 ; 126 const std::string &GetName() const { return fName; }; 127};; 128 ; 129/**; 130 A RLogHandler that multiplexes diagnostics to different client `RLogHandler`s; 131 and keeps track of the sum of `RLogDiagCount`s for all channels.; 132 ; 133 `RLogHandler::Get()` returns the process's (static) log manager.; 134 */; 135 ; 136class RLogManager : public RLogChannel, public RLogHandler {; 137 std::mutex fMutex;; 138 std::list<std::unique_ptr<RLogHandler>> fHandlers;; 139 ; 140public:; 141 /// Initialize taking a RLogHandler.; 142 RLogManager(std::unique_ptr<RLogHandler> lh) : RLogChannel(ELogLevel::kWarning); 143 {; 144 fHandlers.emplace_back(std::move(lh));; 145 }; 146 ; 147 static RLogManager &Get();; 148 ; 149 /// Add a RLogHandler in the front - to be called before all others.; 150 void PushFront(std::unique_ptr<RLogHandler> handler) { fHandlers.emplace_front(std::move(handler)); }; 151 ; 152 /// Add a RLogHandler in the back - to be called after all others.; 153 void PushBack(std::unique_ptr<RLogHandler> handler) { fHandlers.emplace_back(std::move(handler)); }; 154 ; 155 /// Remove and return the given log handler. Returns `nullptr` if not found.; 156 std::unique_ptr<RLogHandler> Remove(RLogHandler *handler);; 157 ; 158 // Emit a `RLogEntry` to the",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:5439,Testability,log,log,5439,"LogHandler that multiplexes diagnostics to different client `RLogHandler`s; 131 and keeps track of the sum of `RLogDiagCount`s for all channels.; 132 ; 133 `RLogHandler::Get()` returns the process's (static) log manager.; 134 */; 135 ; 136class RLogManager : public RLogChannel, public RLogHandler {; 137 std::mutex fMutex;; 138 std::list<std::unique_ptr<RLogHandler>> fHandlers;; 139 ; 140public:; 141 /// Initialize taking a RLogHandler.; 142 RLogManager(std::unique_ptr<RLogHandler> lh) : RLogChannel(ELogLevel::kWarning); 143 {; 144 fHandlers.emplace_back(std::move(lh));; 145 }; 146 ; 147 static RLogManager &Get();; 148 ; 149 /// Add a RLogHandler in the front - to be called before all others.; 150 void PushFront(std::unique_ptr<RLogHandler> handler) { fHandlers.emplace_front(std::move(handler)); }; 151 ; 152 /// Add a RLogHandler in the back - to be called after all others.; 153 void PushBack(std::unique_ptr<RLogHandler> handler) { fHandlers.emplace_back(std::move(handler)); }; 154 ; 155 /// Remove and return the given log handler. Returns `nullptr` if not found.; 156 std::unique_ptr<RLogHandler> Remove(RLogHandler *handler);; 157 ; 158 // Emit a `RLogEntry` to the RLogHandlers.; 159 // Returns false if further emission of this Log should be suppressed.; 160 bool Emit(const RLogEntry &entry) override;; 161};; 162 ; 163/**; 164 A diagnostic location, part of an RLogEntry.; 165 */; 166struct RLogLocation {; 167 std::string fFile;; 168 std::string fFuncName;; 169 int fLine; // C++11 forbids ""= 0"" for braced-init-list initialization.; 170};; 171 ; 172/**; 173 A diagnostic that can be emitted by the RLogManager.; 174 One can construct a RLogEntry through RLogBuilder, including streaming into; 175 the diagnostic message and automatic emission.; 176 */; 177 ; 178class RLogEntry {; 179public:; 180 RLogLocation fLocation;; 181 std::string fMessage;; 182 RLogChannel *fChannel = nullptr;; 183 ELogLevel fLevel = ELogLevel::kFatal;; 184 ; 185 RLogEntry(ELogLevel level, RLogChannel",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:7685,Testability,log,log,7685," ELogLevel::kDebug; }; 192 bool IsInfo() const { return fLevel == ELogLevel::kInfo; }; 193 bool IsWarning() const { return fLevel == ELogLevel::kWarning; }; 194 bool IsError() const { return fLevel == ELogLevel::kError; }; 195 bool IsFatal() const { return fLevel == ELogLevel::kFatal; }; 196};; 197 ; 198namespace Detail {; 199/**; 200 Builds a diagnostic entry, emitted by the static RLogManager upon destruction of this builder,; 201 where - by definition - the RLogEntry has been completely built.; 202 ; 203 This builder can be used through the utility preprocessor macros R__LOG_ERROR,; 204 R__LOG_WARNING etc like this:; 205~~~ {.cpp}; 206 R__LOG_INFO(ROOT::Experimental::HistLog()) << ""all we know is "" << 42;; 207 const int decreasedInfoLevel = 5;; 208 R__LOG_XDEBUG(ROOT::WebGUILog(), decreasedInfoLevel) << ""nitty-gritty details"";; 209~~~; 210 This will automatically capture the current class and function name, the file and line number.; 211 */; 212 ; 213class RLogBuilder : public std::ostringstream {; 214 /// The log entry to be built.; 215 RLogEntry fEntry;; 216 ; 217public:; 218 RLogBuilder(ELogLevel level, RLogChannel &channel) : fEntry(level, channel) {}; 219 RLogBuilder(ELogLevel level, RLogChannel &channel, const std::string &filename, int line,; 220 const std::string &funcname); 221 : fEntry(level, channel, {filename, funcname, line}); 222 {; 223 }; 224 ; 225 /// Emit the log entry through the static log manager.; 226 ~RLogBuilder(); 227 {; 228 fEntry.fMessage = str();; 229 RLogManager::Get().Emit(fEntry);; 230 }; 231};; 232} // namespace Detail; 233 ; 234/**; 235 Change the verbosity level (global or specific to the RLogChannel passed to the; 236 constructor) for the lifetime of this object.; 237 Example:; 238~~~ {.cpp}; 239 RLogScopedVerbosity debugThis(gFooLog, ELogLevel::kDebug);; 240 Foo::SomethingToDebug();; 241~~~; 242 */; 243class RLogScopedVerbosity {; 244 RLogChannel *fChannel;; 245 ELogLevel fPrevLevel;; 246 ; 247public:; 248 RLogScopedVerbosity(RL",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:8058,Testability,log,log,8058," { return fLevel == ELogLevel::kFatal; }; 196};; 197 ; 198namespace Detail {; 199/**; 200 Builds a diagnostic entry, emitted by the static RLogManager upon destruction of this builder,; 201 where - by definition - the RLogEntry has been completely built.; 202 ; 203 This builder can be used through the utility preprocessor macros R__LOG_ERROR,; 204 R__LOG_WARNING etc like this:; 205~~~ {.cpp}; 206 R__LOG_INFO(ROOT::Experimental::HistLog()) << ""all we know is "" << 42;; 207 const int decreasedInfoLevel = 5;; 208 R__LOG_XDEBUG(ROOT::WebGUILog(), decreasedInfoLevel) << ""nitty-gritty details"";; 209~~~; 210 This will automatically capture the current class and function name, the file and line number.; 211 */; 212 ; 213class RLogBuilder : public std::ostringstream {; 214 /// The log entry to be built.; 215 RLogEntry fEntry;; 216 ; 217public:; 218 RLogBuilder(ELogLevel level, RLogChannel &channel) : fEntry(level, channel) {}; 219 RLogBuilder(ELogLevel level, RLogChannel &channel, const std::string &filename, int line,; 220 const std::string &funcname); 221 : fEntry(level, channel, {filename, funcname, line}); 222 {; 223 }; 224 ; 225 /// Emit the log entry through the static log manager.; 226 ~RLogBuilder(); 227 {; 228 fEntry.fMessage = str();; 229 RLogManager::Get().Emit(fEntry);; 230 }; 231};; 232} // namespace Detail; 233 ; 234/**; 235 Change the verbosity level (global or specific to the RLogChannel passed to the; 236 constructor) for the lifetime of this object.; 237 Example:; 238~~~ {.cpp}; 239 RLogScopedVerbosity debugThis(gFooLog, ELogLevel::kDebug);; 240 Foo::SomethingToDebug();; 241~~~; 242 */; 243class RLogScopedVerbosity {; 244 RLogChannel *fChannel;; 245 ELogLevel fPrevLevel;; 246 ; 247public:; 248 RLogScopedVerbosity(RLogChannel &channel, ELogLevel verbosity); 249 : fChannel(&channel), fPrevLevel(channel.SetVerbosity(verbosity)); 250 {; 251 }; 252 explicit RLogScopedVerbosity(ELogLevel verbosity) : RLogScopedVerbosity(RLogManager::Get(), verbosity) {}; 253 ~RLog",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:8087,Testability,log,log,8087," { return fLevel == ELogLevel::kFatal; }; 196};; 197 ; 198namespace Detail {; 199/**; 200 Builds a diagnostic entry, emitted by the static RLogManager upon destruction of this builder,; 201 where - by definition - the RLogEntry has been completely built.; 202 ; 203 This builder can be used through the utility preprocessor macros R__LOG_ERROR,; 204 R__LOG_WARNING etc like this:; 205~~~ {.cpp}; 206 R__LOG_INFO(ROOT::Experimental::HistLog()) << ""all we know is "" << 42;; 207 const int decreasedInfoLevel = 5;; 208 R__LOG_XDEBUG(ROOT::WebGUILog(), decreasedInfoLevel) << ""nitty-gritty details"";; 209~~~; 210 This will automatically capture the current class and function name, the file and line number.; 211 */; 212 ; 213class RLogBuilder : public std::ostringstream {; 214 /// The log entry to be built.; 215 RLogEntry fEntry;; 216 ; 217public:; 218 RLogBuilder(ELogLevel level, RLogChannel &channel) : fEntry(level, channel) {}; 219 RLogBuilder(ELogLevel level, RLogChannel &channel, const std::string &filename, int line,; 220 const std::string &funcname); 221 : fEntry(level, channel, {filename, funcname, line}); 222 {; 223 }; 224 ; 225 /// Emit the log entry through the static log manager.; 226 ~RLogBuilder(); 227 {; 228 fEntry.fMessage = str();; 229 RLogManager::Get().Emit(fEntry);; 230 }; 231};; 232} // namespace Detail; 233 ; 234/**; 235 Change the verbosity level (global or specific to the RLogChannel passed to the; 236 constructor) for the lifetime of this object.; 237 Example:; 238~~~ {.cpp}; 239 RLogScopedVerbosity debugThis(gFooLog, ELogLevel::kDebug);; 240 Foo::SomethingToDebug();; 241~~~; 242 */; 243class RLogScopedVerbosity {; 244 RLogChannel *fChannel;; 245 ELogLevel fPrevLevel;; 246 ; 247public:; 248 RLogScopedVerbosity(RLogChannel &channel, ELogLevel verbosity); 249 : fChannel(&channel), fPrevLevel(channel.SetVerbosity(verbosity)); 250 {; 251 }; 252 explicit RLogScopedVerbosity(ELogLevel verbosity) : RLogScopedVerbosity(RLogManager::Get(), verbosity) {}; 253 ~RLog",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:13211,Testability,log,log,13211," The conditional `RLogBuilder` use prevents stream operators from being called if; 333 verbosity is too low, i.e.:; 334 ~~~; 335 RLogScopedVerbosity silence(RLogLevel::kFatal);; 336 R__LOG_DEBUG(7) << WillNotBeCalled();; 337 ~~~; 338 - To update counts of warnings / errors / fatal errors, those RLogEntries must; 339 always be created, even if in the end their emission will be silenced. This; 340 should be fine, performance-wise, as they should not happen frequently.; 341 - Use `(condition) && RLogBuilder(...)` instead of `if (condition) RLogBuilder(...)`; 342 to prevent ""ambiguous else"" in invocations such as `if (something) R__LOG_DEBUG()...`.; 343 */; 344#define R__LOG_TO_CHANNEL(SEVERITY, CHANNEL) \; 345 ((SEVERITY < ROOT::Experimental::ELogLevel::kInfo + 0) || \; 346 ROOT::Experimental::Internal::GetChannelOrManager(CHANNEL).GetEffectiveVerbosity( \; 347 ROOT::Experimental::RLogManager::Get()) >= SEVERITY) && \; 348 ROOT::Experimental::Detail::RLogBuilder(SEVERITY, ROOT::Experimental::Internal::GetChannelOrManager(CHANNEL), \; 349 __FILE__, __LINE__, R__LOG_PRETTY_FUNCTION); 350 ; 351/// \name LogMacros; 352/// Macros to log diagnostics.; 353/// ~~~ {.cpp}; 354/// R__LOG_INFO(ROOT::Experimental::HistLog()) << ""all we know is "" << 42;; 355///; 356/// RLogScopedVerbosity verbose(kDebug + 5);; 357/// const int decreasedInfoLevel = 5;; 358/// R__LOG_DEBUG(ROOT::WebGUILog(), decreasedInfoLevel) << ""nitty-gritty details"";; 359/// ~~~; 360///\{; 361#define R__LOG_FATAL(...) R__LOG_TO_CHANNEL(ROOT::Experimental::ELogLevel::kFatal, __VA_ARGS__); 362#define R__LOG_ERROR(...) R__LOG_TO_CHANNEL(ROOT::Experimental::ELogLevel::kError, __VA_ARGS__); 363#define R__LOG_WARNING(...) R__LOG_TO_CHANNEL(ROOT::Experimental::ELogLevel::kWarning, __VA_ARGS__); 364#define R__LOG_INFO(...) R__LOG_TO_CHANNEL(ROOT::Experimental::ELogLevel::kInfo, __VA_ARGS__); 365#define R__LOG_DEBUG(DEBUGLEVEL, ...) R__LOG_TO_CHANNEL(ROOT::Experimental::ELogLevel::kDebug + DEBUGLEVEL, __VA_ARGS__); 366///",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:16108,Testability,log,log,16108,"ectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h offsetDefinition TGWin32VirtualXProxy.cxx:245; namechar name[80]Definition TGX11.cxx:110; ROOT::Experimental::Detail::RLogBuilderBuilds a diagnostic entry, emitted by the static RLogManager upon destruction of this builder,...Definition RLogger.hxx:213; ROOT::Experimental::Detail::RLogBuilder::RLogBuilderRLogBuilder(ELogLevel level, RLogChannel &channel)Definition RLogger.hxx:218; ROOT::Experimental::Detail::RLogBuilder::RLogBuilderRLogBuilder(ELogLevel level, RLogChannel &channel, const std::string &filename, int line, const std::string &funcname)Definition RLogger.hxx:219; ROOT::Experimental::Detail::RLogBuilder::fEntryRLogEntry fEntryThe log entry to be built.Definition RLogger.hxx:215; ROOT::Experimental::Detail::RLogBuilder::~RLogBuilder~RLogBuilder()Emit the log entry through the static log manager.Definition RLogger.hxx:226; ROOT::Experimental::RLogChannelA log configuration for a channel, e.g.Definition RLogger.hxx:101; ROOT::Experimental::RLogChannel::RLogChannelRLogChannel(const std::string &name)Construct a log channel given its name, which is part of the diagnostics.Definition RLogger.hxx:116; ROOT::Experimental::RLogChannel::fVerbosityELogLevel fVerbosityVerbosity of this channel. By default, use the global verbosity.Definition RLogger.hxx:106; ROOT::Experimental::RLogChannel::RLogChannelRLogChannel()=defaultConstruct an anonymous channel.; ROOT::Experimental::RLogChannel::GetEffectiveVerbosityELogLevel GetEffectiveVerbosity(const RLogManager &mgr) constDefinition RLogger.hxx:313; ROOT::Experimental::RLogChannel::fNamestd::string fNameName as shown in diagnostics.Definition RLogger.",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:16234,Testability,log,log,16234,"ysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h offsetDefinition TGWin32VirtualXProxy.cxx:245; namechar name[80]Definition TGX11.cxx:110; ROOT::Experimental::Detail::RLogBuilderBuilds a diagnostic entry, emitted by the static RLogManager upon destruction of this builder,...Definition RLogger.hxx:213; ROOT::Experimental::Detail::RLogBuilder::RLogBuilderRLogBuilder(ELogLevel level, RLogChannel &channel)Definition RLogger.hxx:218; ROOT::Experimental::Detail::RLogBuilder::RLogBuilderRLogBuilder(ELogLevel level, RLogChannel &channel, const std::string &filename, int line, const std::string &funcname)Definition RLogger.hxx:219; ROOT::Experimental::Detail::RLogBuilder::fEntryRLogEntry fEntryThe log entry to be built.Definition RLogger.hxx:215; ROOT::Experimental::Detail::RLogBuilder::~RLogBuilder~RLogBuilder()Emit the log entry through the static log manager.Definition RLogger.hxx:226; ROOT::Experimental::RLogChannelA log configuration for a channel, e.g.Definition RLogger.hxx:101; ROOT::Experimental::RLogChannel::RLogChannelRLogChannel(const std::string &name)Construct a log channel given its name, which is part of the diagnostics.Definition RLogger.hxx:116; ROOT::Experimental::RLogChannel::fVerbosityELogLevel fVerbosityVerbosity of this channel. By default, use the global verbosity.Definition RLogger.hxx:106; ROOT::Experimental::RLogChannel::RLogChannelRLogChannel()=defaultConstruct an anonymous channel.; ROOT::Experimental::RLogChannel::GetEffectiveVerbosityELogLevel GetEffectiveVerbosity(const RLogManager &mgr) constDefinition RLogger.hxx:313; ROOT::Experimental::RLogChannel::fNamestd::string fNameName as shown in diagnostics.Definition RLogger.hxx:103; ROOT::Experimental::RLogChannel::GetVerbosityELogLevel GetVerbosity() constDefinition RLogger.hxx:123; ROOT::Experimental:",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:16263,Testability,log,log,16263,"ysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h offsetDefinition TGWin32VirtualXProxy.cxx:245; namechar name[80]Definition TGX11.cxx:110; ROOT::Experimental::Detail::RLogBuilderBuilds a diagnostic entry, emitted by the static RLogManager upon destruction of this builder,...Definition RLogger.hxx:213; ROOT::Experimental::Detail::RLogBuilder::RLogBuilderRLogBuilder(ELogLevel level, RLogChannel &channel)Definition RLogger.hxx:218; ROOT::Experimental::Detail::RLogBuilder::RLogBuilderRLogBuilder(ELogLevel level, RLogChannel &channel, const std::string &filename, int line, const std::string &funcname)Definition RLogger.hxx:219; ROOT::Experimental::Detail::RLogBuilder::fEntryRLogEntry fEntryThe log entry to be built.Definition RLogger.hxx:215; ROOT::Experimental::Detail::RLogBuilder::~RLogBuilder~RLogBuilder()Emit the log entry through the static log manager.Definition RLogger.hxx:226; ROOT::Experimental::RLogChannelA log configuration for a channel, e.g.Definition RLogger.hxx:101; ROOT::Experimental::RLogChannel::RLogChannelRLogChannel(const std::string &name)Construct a log channel given its name, which is part of the diagnostics.Definition RLogger.hxx:116; ROOT::Experimental::RLogChannel::fVerbosityELogLevel fVerbosityVerbosity of this channel. By default, use the global verbosity.Definition RLogger.hxx:106; ROOT::Experimental::RLogChannel::RLogChannelRLogChannel()=defaultConstruct an anonymous channel.; ROOT::Experimental::RLogChannel::GetEffectiveVerbosityELogLevel GetEffectiveVerbosity(const RLogManager &mgr) constDefinition RLogger.hxx:313; ROOT::Experimental::RLogChannel::fNamestd::string fNameName as shown in diagnostics.Definition RLogger.hxx:103; ROOT::Experimental::RLogChannel::GetVerbosityELogLevel GetVerbosity() constDefinition RLogger.hxx:123; ROOT::Experimental:",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:16336,Testability,log,log,16336,"ar ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h offsetDefinition TGWin32VirtualXProxy.cxx:245; namechar name[80]Definition TGX11.cxx:110; ROOT::Experimental::Detail::RLogBuilderBuilds a diagnostic entry, emitted by the static RLogManager upon destruction of this builder,...Definition RLogger.hxx:213; ROOT::Experimental::Detail::RLogBuilder::RLogBuilderRLogBuilder(ELogLevel level, RLogChannel &channel)Definition RLogger.hxx:218; ROOT::Experimental::Detail::RLogBuilder::RLogBuilderRLogBuilder(ELogLevel level, RLogChannel &channel, const std::string &filename, int line, const std::string &funcname)Definition RLogger.hxx:219; ROOT::Experimental::Detail::RLogBuilder::fEntryRLogEntry fEntryThe log entry to be built.Definition RLogger.hxx:215; ROOT::Experimental::Detail::RLogBuilder::~RLogBuilder~RLogBuilder()Emit the log entry through the static log manager.Definition RLogger.hxx:226; ROOT::Experimental::RLogChannelA log configuration for a channel, e.g.Definition RLogger.hxx:101; ROOT::Experimental::RLogChannel::RLogChannelRLogChannel(const std::string &name)Construct a log channel given its name, which is part of the diagnostics.Definition RLogger.hxx:116; ROOT::Experimental::RLogChannel::fVerbosityELogLevel fVerbosityVerbosity of this channel. By default, use the global verbosity.Definition RLogger.hxx:106; ROOT::Experimental::RLogChannel::RLogChannelRLogChannel()=defaultConstruct an anonymous channel.; ROOT::Experimental::RLogChannel::GetEffectiveVerbosityELogLevel GetEffectiveVerbosity(const RLogManager &mgr) constDefinition RLogger.hxx:313; ROOT::Experimental::RLogChannel::fNamestd::string fNameName as shown in diagnostics.Definition RLogger.hxx:103; ROOT::Experimental::RLogChannel::GetVerbosityELogLevel GetVerbosity() constDefinition RLogger.hxx:123; ROOT::Experimental::RLogChannel::SetVerbosityELogLevel SetVerbosity(ELogLevel verbosity)Definition RLogger.hxx:118; ROOT::Experimental::RLog",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:16493,Testability,log,log,16493,"on TGWin32VirtualXProxy.cxx:245; namechar name[80]Definition TGX11.cxx:110; ROOT::Experimental::Detail::RLogBuilderBuilds a diagnostic entry, emitted by the static RLogManager upon destruction of this builder,...Definition RLogger.hxx:213; ROOT::Experimental::Detail::RLogBuilder::RLogBuilderRLogBuilder(ELogLevel level, RLogChannel &channel)Definition RLogger.hxx:218; ROOT::Experimental::Detail::RLogBuilder::RLogBuilderRLogBuilder(ELogLevel level, RLogChannel &channel, const std::string &filename, int line, const std::string &funcname)Definition RLogger.hxx:219; ROOT::Experimental::Detail::RLogBuilder::fEntryRLogEntry fEntryThe log entry to be built.Definition RLogger.hxx:215; ROOT::Experimental::Detail::RLogBuilder::~RLogBuilder~RLogBuilder()Emit the log entry through the static log manager.Definition RLogger.hxx:226; ROOT::Experimental::RLogChannelA log configuration for a channel, e.g.Definition RLogger.hxx:101; ROOT::Experimental::RLogChannel::RLogChannelRLogChannel(const std::string &name)Construct a log channel given its name, which is part of the diagnostics.Definition RLogger.hxx:116; ROOT::Experimental::RLogChannel::fVerbosityELogLevel fVerbosityVerbosity of this channel. By default, use the global verbosity.Definition RLogger.hxx:106; ROOT::Experimental::RLogChannel::RLogChannelRLogChannel()=defaultConstruct an anonymous channel.; ROOT::Experimental::RLogChannel::GetEffectiveVerbosityELogLevel GetEffectiveVerbosity(const RLogManager &mgr) constDefinition RLogger.hxx:313; ROOT::Experimental::RLogChannel::fNamestd::string fNameName as shown in diagnostics.Definition RLogger.hxx:103; ROOT::Experimental::RLogChannel::GetVerbosityELogLevel GetVerbosity() constDefinition RLogger.hxx:123; ROOT::Experimental::RLogChannel::SetVerbosityELogLevel SetVerbosity(ELogLevel verbosity)Definition RLogger.hxx:118; ROOT::Experimental::RLogChannel::GetNameconst std::string & GetName() constDefinition RLogger.hxx:126; ROOT::Experimental::RLogChannel::RLogChannelRLogChannel(ELogL",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:19933,Testability,log,log,19933,"1; ROOT::Experimental::RLogEntry::RLogEntryRLogEntry(ELogLevel level, RLogChannel &channel, const RLogLocation &loc)Definition RLogger.hxx:186; ROOT::Experimental::RLogEntry::IsFatalbool IsFatal() constDefinition RLogger.hxx:195; ROOT::Experimental::RLogEntry::IsErrorbool IsError() constDefinition RLogger.hxx:194; ROOT::Experimental::RLogEntry::RLogEntryRLogEntry(ELogLevel level, RLogChannel &channel)Definition RLogger.hxx:185; ROOT::Experimental::RLogEntry::IsInfobool IsInfo() constDefinition RLogger.hxx:192; ROOT::Experimental::RLogEntry::IsWarningbool IsWarning() constDefinition RLogger.hxx:193; ROOT::Experimental::RLogEntry::fLocationRLogLocation fLocationDefinition RLogger.hxx:180; ROOT::Experimental::RLogEntry::fLevelELogLevel fLevelDefinition RLogger.hxx:183; ROOT::Experimental::RLogEntry::fChannelRLogChannel * fChannelDefinition RLogger.hxx:182; ROOT::Experimental::RLogHandlerAbstract RLogHandler base class.Definition RLogger.hxx:85; ROOT::Experimental::RLogHandler::Emitvirtual bool Emit(const RLogEntry &entry)=0Emit a log entry.; ROOT::Experimental::RLogHandler::~RLogHandlervirtual ~RLogHandler()Definition RLogger.cxx:28; ROOT::Experimental::RLogManagerA RLogHandler that multiplexes diagnostics to different client RLogHandlers and keeps track of the su...Definition RLogger.hxx:136; ROOT::Experimental::RLogManager::fHandlersstd::list< std::unique_ptr< RLogHandler > > fHandlersDefinition RLogger.hxx:138; ROOT::Experimental::RLogManager::fMutexstd::mutex fMutexDefinition RLogger.hxx:137; ROOT::Experimental::RLogManager::Removestd::unique_ptr< RLogHandler > Remove(RLogHandler *handler)Remove and return the given log handler. Returns nullptr if not found.Definition RLogger.cxx:68; ROOT::Experimental::RLogManager::Getstatic RLogManager & Get()Definition RLogger.cxx:62; ROOT::Experimental::RLogManager::RLogManagerRLogManager(std::unique_ptr< RLogHandler > lh)Initialize taking a RLogHandler.Definition RLogger.hxx:142; ROOT::Experimental::RLogManager::Emitbool Emit(c",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:20535,Testability,log,log,20535,"ition RLogger.hxx:193; ROOT::Experimental::RLogEntry::fLocationRLogLocation fLocationDefinition RLogger.hxx:180; ROOT::Experimental::RLogEntry::fLevelELogLevel fLevelDefinition RLogger.hxx:183; ROOT::Experimental::RLogEntry::fChannelRLogChannel * fChannelDefinition RLogger.hxx:182; ROOT::Experimental::RLogHandlerAbstract RLogHandler base class.Definition RLogger.hxx:85; ROOT::Experimental::RLogHandler::Emitvirtual bool Emit(const RLogEntry &entry)=0Emit a log entry.; ROOT::Experimental::RLogHandler::~RLogHandlervirtual ~RLogHandler()Definition RLogger.cxx:28; ROOT::Experimental::RLogManagerA RLogHandler that multiplexes diagnostics to different client RLogHandlers and keeps track of the su...Definition RLogger.hxx:136; ROOT::Experimental::RLogManager::fHandlersstd::list< std::unique_ptr< RLogHandler > > fHandlersDefinition RLogger.hxx:138; ROOT::Experimental::RLogManager::fMutexstd::mutex fMutexDefinition RLogger.hxx:137; ROOT::Experimental::RLogManager::Removestd::unique_ptr< RLogHandler > Remove(RLogHandler *handler)Remove and return the given log handler. Returns nullptr if not found.Definition RLogger.cxx:68; ROOT::Experimental::RLogManager::Getstatic RLogManager & Get()Definition RLogger.cxx:62; ROOT::Experimental::RLogManager::RLogManagerRLogManager(std::unique_ptr< RLogHandler > lh)Initialize taking a RLogHandler.Definition RLogger.hxx:142; ROOT::Experimental::RLogManager::Emitbool Emit(const RLogEntry &entry) overrideEmit a log entry.Definition RLogger.cxx:82; ROOT::Experimental::RLogManager::PushFrontvoid PushFront(std::unique_ptr< RLogHandler > handler)Add a RLogHandler in the front - to be called before all others.Definition RLogger.hxx:150; ROOT::Experimental::RLogManager::PushBackvoid PushBack(std::unique_ptr< RLogHandler > handler)Add a RLogHandler in the back - to be called after all others.Definition RLogger.hxx:153; ROOT::Experimental::RLogScopedDiagCountObject to count the number of warnings and errors emitted by a section of code, after constructio",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RLogger_8hxx_source.html:20929,Testability,log,log,20929,"tual bool Emit(const RLogEntry &entry)=0Emit a log entry.; ROOT::Experimental::RLogHandler::~RLogHandlervirtual ~RLogHandler()Definition RLogger.cxx:28; ROOT::Experimental::RLogManagerA RLogHandler that multiplexes diagnostics to different client RLogHandlers and keeps track of the su...Definition RLogger.hxx:136; ROOT::Experimental::RLogManager::fHandlersstd::list< std::unique_ptr< RLogHandler > > fHandlersDefinition RLogger.hxx:138; ROOT::Experimental::RLogManager::fMutexstd::mutex fMutexDefinition RLogger.hxx:137; ROOT::Experimental::RLogManager::Removestd::unique_ptr< RLogHandler > Remove(RLogHandler *handler)Remove and return the given log handler. Returns nullptr if not found.Definition RLogger.cxx:68; ROOT::Experimental::RLogManager::Getstatic RLogManager & Get()Definition RLogger.cxx:62; ROOT::Experimental::RLogManager::RLogManagerRLogManager(std::unique_ptr< RLogHandler > lh)Initialize taking a RLogHandler.Definition RLogger.hxx:142; ROOT::Experimental::RLogManager::Emitbool Emit(const RLogEntry &entry) overrideEmit a log entry.Definition RLogger.cxx:82; ROOT::Experimental::RLogManager::PushFrontvoid PushFront(std::unique_ptr< RLogHandler > handler)Add a RLogHandler in the front - to be called before all others.Definition RLogger.hxx:150; ROOT::Experimental::RLogManager::PushBackvoid PushBack(std::unique_ptr< RLogHandler > handler)Add a RLogHandler in the back - to be called after all others.Definition RLogger.hxx:153; ROOT::Experimental::RLogScopedDiagCountObject to count the number of warnings and errors emitted by a section of code, after construction of...Definition RLogger.hxx:260; ROOT::Experimental::RLogScopedDiagCount::GetAccumulatedWarningslong long GetAccumulatedWarnings() constGet the number of warnings that the RLogDiagCount has emitted since construction of *this.Definition RLogger.hxx:282; ROOT::Experimental::RLogScopedDiagCount::HasWarningOccurredbool HasWarningOccurred() constWhether the RLogDiagCount has emitted a warnings since construction",MatchSource.WIKI,doc/master/RLogger_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html
https://root.cern/doc/master/RMinimizer_8cxx_source.html:2403,Availability,avail,available,2403,"*; 36 *""Nelder-Mead"", ""BFGS"", ""CG"", ""L-BFGS-B"", ""SANN"", ""Brent"" (Brent only for 1D minimization); 37 */; 38 RMinimizer::RMinimizer(Option_t *method){; 39 fMethod=method;; 40 if (fMethod.empty() || fMethod==""Migrad"") fMethod=""BFGS""; ; 41 }; 42 ; 43 ///returns number of function calls; 44 unsigned int RMinimizer::NCalls() const { return gNCalls; }; 45 ; 46 ///function for finding the minimum; 47 bool RMinimizer::Minimize() {; 48 ; 49 //Set the functions; 50 (gFunction)= ObjFunction();; 51 (gGradFunction) = GradObjFunction();; 52 ; 53 gNCalls = 0; ; 54 ; 55 //pass functions and variables to R; 56 ROOT::R::TRInterface &r=ROOT::R::TRInterface::Instance();; 57 ; 58 r[""minfunction""] = ROOT::R::TRFunctionExport(minfunction);; 59 r[""mingradfunction""] = ROOT::R::TRFunctionExport(mingradfunction);; 60 r[""method""] = fMethod.c_str();; 61 std::vector<double> stepSizes(StepSizes(), StepSizes()+NDim());; 62 std::vector<double> values(X(), X()+NDim());; 63 r[""ndim""] = NDim();; 64 int ndim = NDim();; 65 r[""stepsizes""] = stepSizes;; 66 r[""initialparams""] = values;; 67 ; 68 //check if optimx is available; 69 bool optimxloaded = FALSE;; 70 r[""optimxloaded""] = optimxloaded;; 71 r.Execute(""optimxloaded<-library(optimx,logical.return=TRUE)"");; 72 //int ibool = r.ParseEval(""optimxloaded"").ToScalar<Int_t>();; 73 int ibool = r.Eval(""optimxloaded"");; 74 if (ibool==1) optimxloaded=kTRUE;; 75 ; 76 //string for the command to be processed in R; 77 TString cmd;; 78 ; 79 //optimx is available and loaded; 80 if (optimxloaded==kTRUE) {; 81 if (!gGradFunction) { ; 82 // not using gradient function; 83 cmd = TString::Format(""result <- optimx( initialparams, minfunction,method='%s',control = list(ndeps=stepsizes,maxit=%d,trace=%d,abstol=%e),hessian=TRUE)"",fMethod.c_str(),MaxIterations(),PrintLevel(),Tolerance());; 84 }; 85 else { ; 86 // using user provided gradient ; 87 cmd = TString::Format(""result <- optimx( initialparams, minfunction,mingradfunction, method='%s', control = list(ndeps=stepsizes,maxit=",MatchSource.WIKI,doc/master/RMinimizer_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RMinimizer_8cxx_source.html
https://root.cern/doc/master/RMinimizer_8cxx_source.html:2786,Availability,avail,available,2786,"NCalls = 0; ; 54 ; 55 //pass functions and variables to R; 56 ROOT::R::TRInterface &r=ROOT::R::TRInterface::Instance();; 57 ; 58 r[""minfunction""] = ROOT::R::TRFunctionExport(minfunction);; 59 r[""mingradfunction""] = ROOT::R::TRFunctionExport(mingradfunction);; 60 r[""method""] = fMethod.c_str();; 61 std::vector<double> stepSizes(StepSizes(), StepSizes()+NDim());; 62 std::vector<double> values(X(), X()+NDim());; 63 r[""ndim""] = NDim();; 64 int ndim = NDim();; 65 r[""stepsizes""] = stepSizes;; 66 r[""initialparams""] = values;; 67 ; 68 //check if optimx is available; 69 bool optimxloaded = FALSE;; 70 r[""optimxloaded""] = optimxloaded;; 71 r.Execute(""optimxloaded<-library(optimx,logical.return=TRUE)"");; 72 //int ibool = r.ParseEval(""optimxloaded"").ToScalar<Int_t>();; 73 int ibool = r.Eval(""optimxloaded"");; 74 if (ibool==1) optimxloaded=kTRUE;; 75 ; 76 //string for the command to be processed in R; 77 TString cmd;; 78 ; 79 //optimx is available and loaded; 80 if (optimxloaded==kTRUE) {; 81 if (!gGradFunction) { ; 82 // not using gradient function; 83 cmd = TString::Format(""result <- optimx( initialparams, minfunction,method='%s',control = list(ndeps=stepsizes,maxit=%d,trace=%d,abstol=%e),hessian=TRUE)"",fMethod.c_str(),MaxIterations(),PrintLevel(),Tolerance());; 84 }; 85 else { ; 86 // using user provided gradient ; 87 cmd = TString::Format(""result <- optimx( initialparams, minfunction,mingradfunction, method='%s', control = list(ndeps=stepsizes,maxit=%d,trace=%d,abstol=%e),hessian=TRUE)"",fMethod.c_str(),MaxIterations(),PrintLevel(),Tolerance());; 88 ; 89 }; 90 } ; 91 ; 92 //optimx is not available; 93 else { ; 94 if (!gGradFunction) { ; 95 // not using gradient function; 96 cmd = TString::Format(""result <- optim( initialparams, minfunction,method='%s',control = list(ndeps=stepsizes,maxit=%d,trace=%d,abstol=%e),hessian=TRUE)"",fMethod.c_str(),MaxIterations(),PrintLevel(),Tolerance());; 97 }; 98 else { ; 99 // using user provided gradient ; 100 cmd = TString::Format(""result <- opti",MatchSource.WIKI,doc/master/RMinimizer_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RMinimizer_8cxx_source.html
https://root.cern/doc/master/RMinimizer_8cxx_source.html:3452,Availability,avail,available,3452,"cal.return=TRUE)"");; 72 //int ibool = r.ParseEval(""optimxloaded"").ToScalar<Int_t>();; 73 int ibool = r.Eval(""optimxloaded"");; 74 if (ibool==1) optimxloaded=kTRUE;; 75 ; 76 //string for the command to be processed in R; 77 TString cmd;; 78 ; 79 //optimx is available and loaded; 80 if (optimxloaded==kTRUE) {; 81 if (!gGradFunction) { ; 82 // not using gradient function; 83 cmd = TString::Format(""result <- optimx( initialparams, minfunction,method='%s',control = list(ndeps=stepsizes,maxit=%d,trace=%d,abstol=%e),hessian=TRUE)"",fMethod.c_str(),MaxIterations(),PrintLevel(),Tolerance());; 84 }; 85 else { ; 86 // using user provided gradient ; 87 cmd = TString::Format(""result <- optimx( initialparams, minfunction,mingradfunction, method='%s', control = list(ndeps=stepsizes,maxit=%d,trace=%d,abstol=%e),hessian=TRUE)"",fMethod.c_str(),MaxIterations(),PrintLevel(),Tolerance());; 88 ; 89 }; 90 } ; 91 ; 92 //optimx is not available; 93 else { ; 94 if (!gGradFunction) { ; 95 // not using gradient function; 96 cmd = TString::Format(""result <- optim( initialparams, minfunction,method='%s',control = list(ndeps=stepsizes,maxit=%d,trace=%d,abstol=%e),hessian=TRUE)"",fMethod.c_str(),MaxIterations(),PrintLevel(),Tolerance());; 97 }; 98 else { ; 99 // using user provided gradient ; 100 cmd = TString::Format(""result <- optim( initialparams, minfunction,mingradfunction, method='%s', control = list(ndeps=stepsizes,maxit=%d,trace=%d,abstol=%e),hessian=TRUE)"",fMethod.c_str(),MaxIterations(),PrintLevel(),Tolerance());; 101 }; 102 }; 103 //execute the minimization in R ; 104 std::cout << ""Calling R with command "" << cmd << std::endl; ; 105 r.Execute(cmd.Data());; 106 ; 107 //results with optimx; 108 if (optimxloaded){; 109 //get result from R; 110 r.Execute(""par<-coef(result)"");; 111 //get hessian matrix (in list form); 112 r.Execute(""hess<-attr(result,\""details\"")[,\""nhatend\""]"");; 113 //convert hess to a matrix; 114 r.Execute(""hess<-sapply(hess,function(x) x)"");; 115 //convert to square matrix;",MatchSource.WIKI,doc/master/RMinimizer_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RMinimizer_8cxx_source.html
https://root.cern/doc/master/RMinimizer_8cxx_source.html:4678,Availability,error,errors,4678,"ian=TRUE)"",fMethod.c_str(),MaxIterations(),PrintLevel(),Tolerance());; 97 }; 98 else { ; 99 // using user provided gradient ; 100 cmd = TString::Format(""result <- optim( initialparams, minfunction,mingradfunction, method='%s', control = list(ndeps=stepsizes,maxit=%d,trace=%d,abstol=%e),hessian=TRUE)"",fMethod.c_str(),MaxIterations(),PrintLevel(),Tolerance());; 101 }; 102 }; 103 //execute the minimization in R ; 104 std::cout << ""Calling R with command "" << cmd << std::endl; ; 105 r.Execute(cmd.Data());; 106 ; 107 //results with optimx; 108 if (optimxloaded){; 109 //get result from R; 110 r.Execute(""par<-coef(result)"");; 111 //get hessian matrix (in list form); 112 r.Execute(""hess<-attr(result,\""details\"")[,\""nhatend\""]"");; 113 //convert hess to a matrix; 114 r.Execute(""hess<-sapply(hess,function(x) x)"");; 115 //convert to square matrix; 116 r.Execute(""hess<-matrix(hess,c(ndim,ndim))"");; 117 //find covariant matrix from inverse of hess; 118 r.Execute(""cov<-solve(hess)"");; 119 //get errors from the sqrt of the diagonal of cov; 120 r.Execute(""errors<-sqrt(abs(diag(cov)))"");; 121 }; 122 ; 123 //results with optim; 124 else {; 125 r.Execute(""par<-result$par"");; 126 r.Execute(""hess<-result$hessian"");; 127 r.Execute(""cov<-solve(hess)"");; 128 r.Execute(""errors<-sqrt(abs(diag(cov)))"");; 129 }; 130 ; 131 //return the minimum to ROOT; 132 //TVectorD vector = gR->ParseEval(""par"").ToVector<Double_t>();; 133 std::vector<double> vectorPar = r[""par""];; 134 ; 135 //get errors and matrices from R; 136 // ROOT::R::TRObjectProxy p = gR->ParseEval(""cov""); ; 137 // TMatrixD cm = p.ToMatrix<Double_t>();; 138 TMatrixD cm = r[""cov""];; 139 // p = gR->ParseEval(""errors"");; 140 // TVectorD err = p.ToVector<Double_t>();; 141 std::vector<double> err = r[""errors""];; 142 // p = gR->ParseEval(""hess"");; 143 // TMatrixD hm = p.ToMatrix<Double_t>();; 144 TMatrixD hm = r[""hess""];; 145 ; 146 //set covariant and Hessian matrices and error vector; 147 fCovMatrix.ResizeTo(ndim,ndim);; 148 fHessMatrix.ResizeT",MatchSource.WIKI,doc/master/RMinimizer_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RMinimizer_8cxx_source.html
https://root.cern/doc/master/RMinimizer_8cxx_source.html:4738,Availability,error,errors,4738,"using user provided gradient ; 100 cmd = TString::Format(""result <- optim( initialparams, minfunction,mingradfunction, method='%s', control = list(ndeps=stepsizes,maxit=%d,trace=%d,abstol=%e),hessian=TRUE)"",fMethod.c_str(),MaxIterations(),PrintLevel(),Tolerance());; 101 }; 102 }; 103 //execute the minimization in R ; 104 std::cout << ""Calling R with command "" << cmd << std::endl; ; 105 r.Execute(cmd.Data());; 106 ; 107 //results with optimx; 108 if (optimxloaded){; 109 //get result from R; 110 r.Execute(""par<-coef(result)"");; 111 //get hessian matrix (in list form); 112 r.Execute(""hess<-attr(result,\""details\"")[,\""nhatend\""]"");; 113 //convert hess to a matrix; 114 r.Execute(""hess<-sapply(hess,function(x) x)"");; 115 //convert to square matrix; 116 r.Execute(""hess<-matrix(hess,c(ndim,ndim))"");; 117 //find covariant matrix from inverse of hess; 118 r.Execute(""cov<-solve(hess)"");; 119 //get errors from the sqrt of the diagonal of cov; 120 r.Execute(""errors<-sqrt(abs(diag(cov)))"");; 121 }; 122 ; 123 //results with optim; 124 else {; 125 r.Execute(""par<-result$par"");; 126 r.Execute(""hess<-result$hessian"");; 127 r.Execute(""cov<-solve(hess)"");; 128 r.Execute(""errors<-sqrt(abs(diag(cov)))"");; 129 }; 130 ; 131 //return the minimum to ROOT; 132 //TVectorD vector = gR->ParseEval(""par"").ToVector<Double_t>();; 133 std::vector<double> vectorPar = r[""par""];; 134 ; 135 //get errors and matrices from R; 136 // ROOT::R::TRObjectProxy p = gR->ParseEval(""cov""); ; 137 // TMatrixD cm = p.ToMatrix<Double_t>();; 138 TMatrixD cm = r[""cov""];; 139 // p = gR->ParseEval(""errors"");; 140 // TVectorD err = p.ToVector<Double_t>();; 141 std::vector<double> err = r[""errors""];; 142 // p = gR->ParseEval(""hess"");; 143 // TMatrixD hm = p.ToMatrix<Double_t>();; 144 TMatrixD hm = r[""hess""];; 145 ; 146 //set covariant and Hessian matrices and error vector; 147 fCovMatrix.ResizeTo(ndim,ndim);; 148 fHessMatrix.ResizeTo(ndim,ndim);; 149 //fErrors.ResizeTo(ndim);; 150 fCovMatrix = cm;; 151 fErrors = err;; 152 fHe",MatchSource.WIKI,doc/master/RMinimizer_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RMinimizer_8cxx_source.html
https://root.cern/doc/master/RMinimizer_8cxx_source.html:4948,Availability,error,errors,4948,"erations(),PrintLevel(),Tolerance());; 101 }; 102 }; 103 //execute the minimization in R ; 104 std::cout << ""Calling R with command "" << cmd << std::endl; ; 105 r.Execute(cmd.Data());; 106 ; 107 //results with optimx; 108 if (optimxloaded){; 109 //get result from R; 110 r.Execute(""par<-coef(result)"");; 111 //get hessian matrix (in list form); 112 r.Execute(""hess<-attr(result,\""details\"")[,\""nhatend\""]"");; 113 //convert hess to a matrix; 114 r.Execute(""hess<-sapply(hess,function(x) x)"");; 115 //convert to square matrix; 116 r.Execute(""hess<-matrix(hess,c(ndim,ndim))"");; 117 //find covariant matrix from inverse of hess; 118 r.Execute(""cov<-solve(hess)"");; 119 //get errors from the sqrt of the diagonal of cov; 120 r.Execute(""errors<-sqrt(abs(diag(cov)))"");; 121 }; 122 ; 123 //results with optim; 124 else {; 125 r.Execute(""par<-result$par"");; 126 r.Execute(""hess<-result$hessian"");; 127 r.Execute(""cov<-solve(hess)"");; 128 r.Execute(""errors<-sqrt(abs(diag(cov)))"");; 129 }; 130 ; 131 //return the minimum to ROOT; 132 //TVectorD vector = gR->ParseEval(""par"").ToVector<Double_t>();; 133 std::vector<double> vectorPar = r[""par""];; 134 ; 135 //get errors and matrices from R; 136 // ROOT::R::TRObjectProxy p = gR->ParseEval(""cov""); ; 137 // TMatrixD cm = p.ToMatrix<Double_t>();; 138 TMatrixD cm = r[""cov""];; 139 // p = gR->ParseEval(""errors"");; 140 // TVectorD err = p.ToVector<Double_t>();; 141 std::vector<double> err = r[""errors""];; 142 // p = gR->ParseEval(""hess"");; 143 // TMatrixD hm = p.ToMatrix<Double_t>();; 144 TMatrixD hm = r[""hess""];; 145 ; 146 //set covariant and Hessian matrices and error vector; 147 fCovMatrix.ResizeTo(ndim,ndim);; 148 fHessMatrix.ResizeTo(ndim,ndim);; 149 //fErrors.ResizeTo(ndim);; 150 fCovMatrix = cm;; 151 fErrors = err;; 152 fHessMatrix = hm;; 153 ; 154 //get values and show minimum; 155 const double *min=vectorPar.data();; 156 SetFinalValues(min);; 157 SetMinValue((*gFunction)(min));; 158 std::cout<<""Value at minimum =""<<MinValue()<<std::endl;; 159 ;",MatchSource.WIKI,doc/master/RMinimizer_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RMinimizer_8cxx_source.html
https://root.cern/doc/master/RMinimizer_8cxx_source.html:5159,Availability,error,errors,5159,"xecute(cmd.Data());; 106 ; 107 //results with optimx; 108 if (optimxloaded){; 109 //get result from R; 110 r.Execute(""par<-coef(result)"");; 111 //get hessian matrix (in list form); 112 r.Execute(""hess<-attr(result,\""details\"")[,\""nhatend\""]"");; 113 //convert hess to a matrix; 114 r.Execute(""hess<-sapply(hess,function(x) x)"");; 115 //convert to square matrix; 116 r.Execute(""hess<-matrix(hess,c(ndim,ndim))"");; 117 //find covariant matrix from inverse of hess; 118 r.Execute(""cov<-solve(hess)"");; 119 //get errors from the sqrt of the diagonal of cov; 120 r.Execute(""errors<-sqrt(abs(diag(cov)))"");; 121 }; 122 ; 123 //results with optim; 124 else {; 125 r.Execute(""par<-result$par"");; 126 r.Execute(""hess<-result$hessian"");; 127 r.Execute(""cov<-solve(hess)"");; 128 r.Execute(""errors<-sqrt(abs(diag(cov)))"");; 129 }; 130 ; 131 //return the minimum to ROOT; 132 //TVectorD vector = gR->ParseEval(""par"").ToVector<Double_t>();; 133 std::vector<double> vectorPar = r[""par""];; 134 ; 135 //get errors and matrices from R; 136 // ROOT::R::TRObjectProxy p = gR->ParseEval(""cov""); ; 137 // TMatrixD cm = p.ToMatrix<Double_t>();; 138 TMatrixD cm = r[""cov""];; 139 // p = gR->ParseEval(""errors"");; 140 // TVectorD err = p.ToVector<Double_t>();; 141 std::vector<double> err = r[""errors""];; 142 // p = gR->ParseEval(""hess"");; 143 // TMatrixD hm = p.ToMatrix<Double_t>();; 144 TMatrixD hm = r[""hess""];; 145 ; 146 //set covariant and Hessian matrices and error vector; 147 fCovMatrix.ResizeTo(ndim,ndim);; 148 fHessMatrix.ResizeTo(ndim,ndim);; 149 //fErrors.ResizeTo(ndim);; 150 fCovMatrix = cm;; 151 fErrors = err;; 152 fHessMatrix = hm;; 153 ; 154 //get values and show minimum; 155 const double *min=vectorPar.data();; 156 SetFinalValues(min);; 157 SetMinValue((*gFunction)(min));; 158 std::cout<<""Value at minimum =""<<MinValue()<<std::endl;; 159 ; 160 return kTRUE;; 161 }; 162#ifdef LATER ; 163 //Returns the ith jth component of the covarient matrix; 164 double RMinimizer::CovMatrix(unsigned int i, unsigned i",MatchSource.WIKI,doc/master/RMinimizer_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RMinimizer_8cxx_source.html
https://root.cern/doc/master/RMinimizer_8cxx_source.html:5346,Availability,error,errors,5346,"ian matrix (in list form); 112 r.Execute(""hess<-attr(result,\""details\"")[,\""nhatend\""]"");; 113 //convert hess to a matrix; 114 r.Execute(""hess<-sapply(hess,function(x) x)"");; 115 //convert to square matrix; 116 r.Execute(""hess<-matrix(hess,c(ndim,ndim))"");; 117 //find covariant matrix from inverse of hess; 118 r.Execute(""cov<-solve(hess)"");; 119 //get errors from the sqrt of the diagonal of cov; 120 r.Execute(""errors<-sqrt(abs(diag(cov)))"");; 121 }; 122 ; 123 //results with optim; 124 else {; 125 r.Execute(""par<-result$par"");; 126 r.Execute(""hess<-result$hessian"");; 127 r.Execute(""cov<-solve(hess)"");; 128 r.Execute(""errors<-sqrt(abs(diag(cov)))"");; 129 }; 130 ; 131 //return the minimum to ROOT; 132 //TVectorD vector = gR->ParseEval(""par"").ToVector<Double_t>();; 133 std::vector<double> vectorPar = r[""par""];; 134 ; 135 //get errors and matrices from R; 136 // ROOT::R::TRObjectProxy p = gR->ParseEval(""cov""); ; 137 // TMatrixD cm = p.ToMatrix<Double_t>();; 138 TMatrixD cm = r[""cov""];; 139 // p = gR->ParseEval(""errors"");; 140 // TVectorD err = p.ToVector<Double_t>();; 141 std::vector<double> err = r[""errors""];; 142 // p = gR->ParseEval(""hess"");; 143 // TMatrixD hm = p.ToMatrix<Double_t>();; 144 TMatrixD hm = r[""hess""];; 145 ; 146 //set covariant and Hessian matrices and error vector; 147 fCovMatrix.ResizeTo(ndim,ndim);; 148 fHessMatrix.ResizeTo(ndim,ndim);; 149 //fErrors.ResizeTo(ndim);; 150 fCovMatrix = cm;; 151 fErrors = err;; 152 fHessMatrix = hm;; 153 ; 154 //get values and show minimum; 155 const double *min=vectorPar.data();; 156 SetFinalValues(min);; 157 SetMinValue((*gFunction)(min));; 158 std::cout<<""Value at minimum =""<<MinValue()<<std::endl;; 159 ; 160 return kTRUE;; 161 }; 162#ifdef LATER ; 163 //Returns the ith jth component of the covarient matrix; 164 double RMinimizer::CovMatrix(unsigned int i, unsigned int j) const {; 165 unsigned int ndim = NDim();; 166 if (fCovMatrix==0) return 0;; 167 if (i > ndim || j > ndim) return 0;; 168 return fCovMatrix[i][j];; 1",MatchSource.WIKI,doc/master/RMinimizer_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RMinimizer_8cxx_source.html
https://root.cern/doc/master/RMinimizer_8cxx_source.html:5437,Availability,error,errors,5437,"ix; 114 r.Execute(""hess<-sapply(hess,function(x) x)"");; 115 //convert to square matrix; 116 r.Execute(""hess<-matrix(hess,c(ndim,ndim))"");; 117 //find covariant matrix from inverse of hess; 118 r.Execute(""cov<-solve(hess)"");; 119 //get errors from the sqrt of the diagonal of cov; 120 r.Execute(""errors<-sqrt(abs(diag(cov)))"");; 121 }; 122 ; 123 //results with optim; 124 else {; 125 r.Execute(""par<-result$par"");; 126 r.Execute(""hess<-result$hessian"");; 127 r.Execute(""cov<-solve(hess)"");; 128 r.Execute(""errors<-sqrt(abs(diag(cov)))"");; 129 }; 130 ; 131 //return the minimum to ROOT; 132 //TVectorD vector = gR->ParseEval(""par"").ToVector<Double_t>();; 133 std::vector<double> vectorPar = r[""par""];; 134 ; 135 //get errors and matrices from R; 136 // ROOT::R::TRObjectProxy p = gR->ParseEval(""cov""); ; 137 // TMatrixD cm = p.ToMatrix<Double_t>();; 138 TMatrixD cm = r[""cov""];; 139 // p = gR->ParseEval(""errors"");; 140 // TVectorD err = p.ToVector<Double_t>();; 141 std::vector<double> err = r[""errors""];; 142 // p = gR->ParseEval(""hess"");; 143 // TMatrixD hm = p.ToMatrix<Double_t>();; 144 TMatrixD hm = r[""hess""];; 145 ; 146 //set covariant and Hessian matrices and error vector; 147 fCovMatrix.ResizeTo(ndim,ndim);; 148 fHessMatrix.ResizeTo(ndim,ndim);; 149 //fErrors.ResizeTo(ndim);; 150 fCovMatrix = cm;; 151 fErrors = err;; 152 fHessMatrix = hm;; 153 ; 154 //get values and show minimum; 155 const double *min=vectorPar.data();; 156 SetFinalValues(min);; 157 SetMinValue((*gFunction)(min));; 158 std::cout<<""Value at minimum =""<<MinValue()<<std::endl;; 159 ; 160 return kTRUE;; 161 }; 162#ifdef LATER ; 163 //Returns the ith jth component of the covarient matrix; 164 double RMinimizer::CovMatrix(unsigned int i, unsigned int j) const {; 165 unsigned int ndim = NDim();; 166 if (fCovMatrix==0) return 0;; 167 if (i > ndim || j > ndim) return 0;; 168 return fCovMatrix[i][j];; 169 }; 170 // //Returns the full parameter error vector; 171 // TVectorD RMinimizer::RErrors() const {; 172 // return fE",MatchSource.WIKI,doc/master/RMinimizer_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RMinimizer_8cxx_source.html
https://root.cern/doc/master/RMinimizer_8cxx_source.html:5610,Availability,error,error,5610,"dim))"");; 117 //find covariant matrix from inverse of hess; 118 r.Execute(""cov<-solve(hess)"");; 119 //get errors from the sqrt of the diagonal of cov; 120 r.Execute(""errors<-sqrt(abs(diag(cov)))"");; 121 }; 122 ; 123 //results with optim; 124 else {; 125 r.Execute(""par<-result$par"");; 126 r.Execute(""hess<-result$hessian"");; 127 r.Execute(""cov<-solve(hess)"");; 128 r.Execute(""errors<-sqrt(abs(diag(cov)))"");; 129 }; 130 ; 131 //return the minimum to ROOT; 132 //TVectorD vector = gR->ParseEval(""par"").ToVector<Double_t>();; 133 std::vector<double> vectorPar = r[""par""];; 134 ; 135 //get errors and matrices from R; 136 // ROOT::R::TRObjectProxy p = gR->ParseEval(""cov""); ; 137 // TMatrixD cm = p.ToMatrix<Double_t>();; 138 TMatrixD cm = r[""cov""];; 139 // p = gR->ParseEval(""errors"");; 140 // TVectorD err = p.ToVector<Double_t>();; 141 std::vector<double> err = r[""errors""];; 142 // p = gR->ParseEval(""hess"");; 143 // TMatrixD hm = p.ToMatrix<Double_t>();; 144 TMatrixD hm = r[""hess""];; 145 ; 146 //set covariant and Hessian matrices and error vector; 147 fCovMatrix.ResizeTo(ndim,ndim);; 148 fHessMatrix.ResizeTo(ndim,ndim);; 149 //fErrors.ResizeTo(ndim);; 150 fCovMatrix = cm;; 151 fErrors = err;; 152 fHessMatrix = hm;; 153 ; 154 //get values and show minimum; 155 const double *min=vectorPar.data();; 156 SetFinalValues(min);; 157 SetMinValue((*gFunction)(min));; 158 std::cout<<""Value at minimum =""<<MinValue()<<std::endl;; 159 ; 160 return kTRUE;; 161 }; 162#ifdef LATER ; 163 //Returns the ith jth component of the covarient matrix; 164 double RMinimizer::CovMatrix(unsigned int i, unsigned int j) const {; 165 unsigned int ndim = NDim();; 166 if (fCovMatrix==0) return 0;; 167 if (i > ndim || j > ndim) return 0;; 168 return fCovMatrix[i][j];; 169 }; 170 // //Returns the full parameter error vector; 171 // TVectorD RMinimizer::RErrors() const {; 172 // return fErrors;; 173 // }; 174 //Returns the ith jth component of the Hessian matrix; 175 double RMinimizer::HessMatrix(unsigned int i, un",MatchSource.WIKI,doc/master/RMinimizer_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RMinimizer_8cxx_source.html
https://root.cern/doc/master/RMinimizer_8cxx_source.html:6367,Availability,error,error,6367,"rseEval(""errors"");; 140 // TVectorD err = p.ToVector<Double_t>();; 141 std::vector<double> err = r[""errors""];; 142 // p = gR->ParseEval(""hess"");; 143 // TMatrixD hm = p.ToMatrix<Double_t>();; 144 TMatrixD hm = r[""hess""];; 145 ; 146 //set covariant and Hessian matrices and error vector; 147 fCovMatrix.ResizeTo(ndim,ndim);; 148 fHessMatrix.ResizeTo(ndim,ndim);; 149 //fErrors.ResizeTo(ndim);; 150 fCovMatrix = cm;; 151 fErrors = err;; 152 fHessMatrix = hm;; 153 ; 154 //get values and show minimum; 155 const double *min=vectorPar.data();; 156 SetFinalValues(min);; 157 SetMinValue((*gFunction)(min));; 158 std::cout<<""Value at minimum =""<<MinValue()<<std::endl;; 159 ; 160 return kTRUE;; 161 }; 162#ifdef LATER ; 163 //Returns the ith jth component of the covarient matrix; 164 double RMinimizer::CovMatrix(unsigned int i, unsigned int j) const {; 165 unsigned int ndim = NDim();; 166 if (fCovMatrix==0) return 0;; 167 if (i > ndim || j > ndim) return 0;; 168 return fCovMatrix[i][j];; 169 }; 170 // //Returns the full parameter error vector; 171 // TVectorD RMinimizer::RErrors() const {; 172 // return fErrors;; 173 // }; 174 //Returns the ith jth component of the Hessian matrix; 175 double RMinimizer::HessMatrix(unsigned int i, unsigned int j) const {; 176 unsigned int ndim = NDim();; 177 if (fHessMatrix==0) return 0;; 178 if (i > ndim || j > ndim) return 0;; 179 return fHessMatrix[i][j];; 180 }; 181#endif ; 182 } // end namespace MATH ; 183}; BasicMinimizer.h; IFunction.h; RMinimizer.h; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; Option_tconst char Option_tDefinition RtypesCore.h:66; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TRInterface.h; TVectorD.h; ROOT::Math::BasicMinimizer::NDimunsi",MatchSource.WIKI,doc/master/RMinimizer_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RMinimizer_8cxx_source.html
https://root.cern/doc/master/RMinimizer_8cxx_source.html:9013,Availability,toler,toleranceDefinition,9013,"ultiGenFunction * ObjFunction() constreturn pointer to used objective functionDefinition BasicMinimizer.h:130; ROOT::Math::BasicMinimizer::GradObjFunctionconst ROOT::Math::IMultiGradFunction * GradObjFunction() constreturn pointer to used gradient object function (NULL if gradient is not supported)Definition BasicMinimizer.cxx:325; ROOT::Math::BasicMinimizer::Xconst double * X() const overridereturn pointer to X values at the minimumDefinition BasicMinimizer.h:118; ROOT::Math::IBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim.Definition IFunction.h:61; ROOT::Math::IGradientFunctionMultiDimTemplInterface (abstract class) for multi-dimensional functions providing a gradient calculation.Definition IFunction.h:168; ROOT::Math::IGradientFunctionMultiDimTempl::Gradientvirtual void Gradient(const T *x, T *grad) constEvaluate all the vector of function derivatives (gradient) at a point x.Definition IFunction.h:177; ROOT::Math::Minimizer::Tolerancedouble Tolerance() constabsolute toleranceDefinition Minimizer.h:300; ROOT::Math::Minimizer::MaxIterationsunsigned int MaxIterations() constmax iterationsDefinition Minimizer.h:297; ROOT::Math::Minimizer::PrintLevelint PrintLevel() constminimizer configuration parametersDefinition Minimizer.h:291; ROOT::Math::RMinimizer::HessMatrixdouble HessMatrix(unsigned int i, unsigned int j) constReturns the ith jth component of the Hessian matrix.; ROOT::Math::RMinimizer::fCovMatrixTMatrixD fCovMatrixcovariant matrixDefinition RMinimizer.h:39; ROOT::Math::RMinimizer::fErrorsstd::vector< double > fErrorsvector of parameter errorsDefinition RMinimizer.h:38; ROOT::Math::RMinimizer::Minimizebool Minimize() overrideFunction to find the minimum.Definition RMinimizer.cxx:47; ROOT::Math::RMinimizer::fMethodstd::string fMethodminimizer method to be used, must be of a type listed in R optim or optimx descriptionsDefinition RMinimizer.h:35; ROOT::Math::RMinimizer::NCallsunsigned int NCalls() const overrideReturns the n",MatchSource.WIKI,doc/master/RMinimizer_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RMinimizer_8cxx_source.html
https://root.cern/doc/master/RMinimizer_8cxx_source.html:9599,Availability,error,errorsDefinition,9599,"IFunction.h:61; ROOT::Math::IGradientFunctionMultiDimTemplInterface (abstract class) for multi-dimensional functions providing a gradient calculation.Definition IFunction.h:168; ROOT::Math::IGradientFunctionMultiDimTempl::Gradientvirtual void Gradient(const T *x, T *grad) constEvaluate all the vector of function derivatives (gradient) at a point x.Definition IFunction.h:177; ROOT::Math::Minimizer::Tolerancedouble Tolerance() constabsolute toleranceDefinition Minimizer.h:300; ROOT::Math::Minimizer::MaxIterationsunsigned int MaxIterations() constmax iterationsDefinition Minimizer.h:297; ROOT::Math::Minimizer::PrintLevelint PrintLevel() constminimizer configuration parametersDefinition Minimizer.h:291; ROOT::Math::RMinimizer::HessMatrixdouble HessMatrix(unsigned int i, unsigned int j) constReturns the ith jth component of the Hessian matrix.; ROOT::Math::RMinimizer::fCovMatrixTMatrixD fCovMatrixcovariant matrixDefinition RMinimizer.h:39; ROOT::Math::RMinimizer::fErrorsstd::vector< double > fErrorsvector of parameter errorsDefinition RMinimizer.h:38; ROOT::Math::RMinimizer::Minimizebool Minimize() overrideFunction to find the minimum.Definition RMinimizer.cxx:47; ROOT::Math::RMinimizer::fMethodstd::string fMethodminimizer method to be used, must be of a type listed in R optim or optimx descriptionsDefinition RMinimizer.h:35; ROOT::Math::RMinimizer::NCallsunsigned int NCalls() const overrideReturns the number of function calls.Definition RMinimizer.cxx:44; ROOT::Math::RMinimizer::CovMatrixdouble CovMatrix(unsigned int ivar, unsigned int jvar) const overridereturn covariance matrices element for variables ivar,jvar if the variable is fixed the return value ...Definition RMinimizer.h:68; ROOT::Math::RMinimizer::RMinimizerRMinimizer(Option_t *method)Default constructor.Definition RMinimizer.cxx:38; ROOT::Math::RMinimizer::fHessMatrixTMatrixD fHessMatrixHessian matrix.Definition RMinimizer.h:40; ROOT::R::TRFunctionExportThis is a class to pass functions from ROOT to R.Defini",MatchSource.WIKI,doc/master/RMinimizer_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RMinimizer_8cxx_source.html
https://root.cern/doc/master/RMinimizer_8cxx_source.html:9227,Deployability,configurat,configuration,9227,"n pointer to used gradient object function (NULL if gradient is not supported)Definition BasicMinimizer.cxx:325; ROOT::Math::BasicMinimizer::Xconst double * X() const overridereturn pointer to X values at the minimumDefinition BasicMinimizer.h:118; ROOT::Math::IBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim.Definition IFunction.h:61; ROOT::Math::IGradientFunctionMultiDimTemplInterface (abstract class) for multi-dimensional functions providing a gradient calculation.Definition IFunction.h:168; ROOT::Math::IGradientFunctionMultiDimTempl::Gradientvirtual void Gradient(const T *x, T *grad) constEvaluate all the vector of function derivatives (gradient) at a point x.Definition IFunction.h:177; ROOT::Math::Minimizer::Tolerancedouble Tolerance() constabsolute toleranceDefinition Minimizer.h:300; ROOT::Math::Minimizer::MaxIterationsunsigned int MaxIterations() constmax iterationsDefinition Minimizer.h:297; ROOT::Math::Minimizer::PrintLevelint PrintLevel() constminimizer configuration parametersDefinition Minimizer.h:291; ROOT::Math::RMinimizer::HessMatrixdouble HessMatrix(unsigned int i, unsigned int j) constReturns the ith jth component of the Hessian matrix.; ROOT::Math::RMinimizer::fCovMatrixTMatrixD fCovMatrixcovariant matrixDefinition RMinimizer.h:39; ROOT::Math::RMinimizer::fErrorsstd::vector< double > fErrorsvector of parameter errorsDefinition RMinimizer.h:38; ROOT::Math::RMinimizer::Minimizebool Minimize() overrideFunction to find the minimum.Definition RMinimizer.cxx:47; ROOT::Math::RMinimizer::fMethodstd::string fMethodminimizer method to be used, must be of a type listed in R optim or optimx descriptionsDefinition RMinimizer.h:35; ROOT::Math::RMinimizer::NCallsunsigned int NCalls() const overrideReturns the number of function calls.Definition RMinimizer.cxx:44; ROOT::Math::RMinimizer::CovMatrixdouble CovMatrix(unsigned int ivar, unsigned int jvar) const overridereturn covariance matrices element for variables ivar,jvar if the ",MatchSource.WIKI,doc/master/RMinimizer_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RMinimizer_8cxx_source.html
https://root.cern/doc/master/RMinimizer_8cxx_source.html:401,Integrability,wrap,wrapper,401,". ROOT: math/rtools/src/RMinimizer.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. RMinimizer.cxx. Go to the documentation of this file. 1 ; 2#include ""TRInterface.h""; 3#include ""Math/RMinimizer.h""; 4#include ""Math/IFunction.h""; 5#include <TVectorD.h>; 6#include ""Math/BasicMinimizer.h""; 7 ; 8namespace ROOT {; 9 namespace Math{; 10 ; 11 /// function wrapper for the function to be minimized; 12 const ROOT::Math::IMultiGenFunction *gFunction;; 13 /// function wrapper for the gradient of the function to be minimized; 14 const ROOT::Math::IMultiGradFunction *gGradFunction;; 15 /// integer for the number of function calls; 16 int gNCalls = 0; ; 17 ; 18 ///function to return the function values at point x; 19 double minfunction(const std::vector<double> & x){; 20 gNCalls++;; 21 //return (*gFunction)(x.GetMatrixArray());; 22 return (*gFunction)(x.data());; 23 }; 24 ///function to return the gradient values at point y; 25 TVectorD mingradfunction(TVectorD y){; 26 unsigned int size = y.GetNoElements();; 27 const double * yy = y.GetMatrixArray();; 28 double z[size];; 29 gGradFunction->Gradient(yy,z);; 30 TVectorD zz(size,z);; 31 return zz;; 32 }; 33 ; 34 /*Default constructor with option for the method of minimization, can be any of the following:; 35 *; 36 *""Nelder-Mead"", ""BFGS"", ""CG"", ""L-BFGS-B"", ""SANN"", ""Brent"" (Brent only for 1D minimization); 37 */; 38 RMinimizer::RMinimizer(Option_t *method){; 39 fMethod=method;; 40 if (fMethod.empty() || fMethod==""Migrad"") fMethod=""BFGS""; ; 41 }; 42 ; 43 ///returns number of function calls; 44 unsigned int RMinimizer::NCalls() const { return gNCalls; }; 45 ; 46 ///function for finding the minimum; 47 bool RMinimizer::Minimize() {; 48 ; 49 //Set the functions; 50 (gFunction)= ObjFunction();; 51 (gGradFunction) = GradObjFunction();; 52 ; 53 gNCalls = 0; ; 54 ; 55 //pass functions and variables to R; 56 ROOT::R::TRInterface &r=ROOT::R::TRInterface::Instance();; 57 ; 58 r[""minfunction""] = ROO",MatchSource.WIKI,doc/master/RMinimizer_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RMinimizer_8cxx_source.html
https://root.cern/doc/master/RMinimizer_8cxx_source.html:511,Integrability,wrap,wrapper,511,". ROOT: math/rtools/src/RMinimizer.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. RMinimizer.cxx. Go to the documentation of this file. 1 ; 2#include ""TRInterface.h""; 3#include ""Math/RMinimizer.h""; 4#include ""Math/IFunction.h""; 5#include <TVectorD.h>; 6#include ""Math/BasicMinimizer.h""; 7 ; 8namespace ROOT {; 9 namespace Math{; 10 ; 11 /// function wrapper for the function to be minimized; 12 const ROOT::Math::IMultiGenFunction *gFunction;; 13 /// function wrapper for the gradient of the function to be minimized; 14 const ROOT::Math::IMultiGradFunction *gGradFunction;; 15 /// integer for the number of function calls; 16 int gNCalls = 0; ; 17 ; 18 ///function to return the function values at point x; 19 double minfunction(const std::vector<double> & x){; 20 gNCalls++;; 21 //return (*gFunction)(x.GetMatrixArray());; 22 return (*gFunction)(x.data());; 23 }; 24 ///function to return the gradient values at point y; 25 TVectorD mingradfunction(TVectorD y){; 26 unsigned int size = y.GetNoElements();; 27 const double * yy = y.GetMatrixArray();; 28 double z[size];; 29 gGradFunction->Gradient(yy,z);; 30 TVectorD zz(size,z);; 31 return zz;; 32 }; 33 ; 34 /*Default constructor with option for the method of minimization, can be any of the following:; 35 *; 36 *""Nelder-Mead"", ""BFGS"", ""CG"", ""L-BFGS-B"", ""SANN"", ""Brent"" (Brent only for 1D minimization); 37 */; 38 RMinimizer::RMinimizer(Option_t *method){; 39 fMethod=method;; 40 if (fMethod.empty() || fMethod==""Migrad"") fMethod=""BFGS""; ; 41 }; 42 ; 43 ///returns number of function calls; 44 unsigned int RMinimizer::NCalls() const { return gNCalls; }; 45 ; 46 ///function for finding the minimum; 47 bool RMinimizer::Minimize() {; 48 ; 49 //Set the functions; 50 (gFunction)= ObjFunction();; 51 (gGradFunction) = GradObjFunction();; 52 ; 53 gNCalls = 0; ; 54 ; 55 //pass functions and variables to R; 56 ROOT::R::TRInterface &r=ROOT::R::TRInterface::Instance();; 57 ; 58 r[""minfunction""] = ROO",MatchSource.WIKI,doc/master/RMinimizer_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RMinimizer_8cxx_source.html
https://root.cern/doc/master/RMinimizer_8cxx_source.html:11775,Integrability,wrap,wrapper,11775,"cpp and RInsideDefinition TRInterface.h:136; ROOT::R::TRInterface::Instancestatic TRInterface & Instance()static method to get an TRInterface instance referenceDefinition TRInterface.cxx:187; TMatrixT< Double_t >; TMatrixT::ResizeToTMatrixTBase< Element > & ResizeTo(Int_t nrows, Int_t ncols, Int_t=-1) overrideSet size of the matrix to nrows x ncols New dynamic elements are created, the overlapping part of the...Definition TMatrixT.cxx:1203; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TVectorT< Double_t >; TVectorT::GetNoElementsInt_t GetNoElements() constDefinition TVectorT.h:74; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; FALSE#define FALSEDefinition mesh.c:45; MathNamespace for new Math classes and functions.; ROOT::Math::gFunctionconst ROOT::Math::IMultiGenFunction * gFunctionfunction wrapper for the function to be minimizedDefinition RMinimizer.cxx:12; ROOT::Math::minfunctiondouble minfunction(const std::vector< double > &x)function to return the function values at point xDefinition RMinimizer.cxx:19; ROOT::Math::mingradfunctionTVectorD mingradfunction(TVectorD y)function to return the gradient values at point yDefinition RMinimizer.cxx:25; ROOT::Math::gGradFunctionconst ROOT::Math::IMultiGradFunction * gGradFunctionfunction wrapper for the gradient of the function to be minimizedDefinition RMinimizer.cxx:14; ROOT::Math::gNCallsint gNCallsinteger for the number of function callsDefinition RMinimizer.cxx:16; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathrtoolssrcRMinimizer.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/RMinimizer_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RMinimizer_8cxx_source.html
https://root.cern/doc/master/RMinimizer_8cxx_source.html:12225,Integrability,wrap,wrapper,12225,"cpp and RInsideDefinition TRInterface.h:136; ROOT::R::TRInterface::Instancestatic TRInterface & Instance()static method to get an TRInterface instance referenceDefinition TRInterface.cxx:187; TMatrixT< Double_t >; TMatrixT::ResizeToTMatrixTBase< Element > & ResizeTo(Int_t nrows, Int_t ncols, Int_t=-1) overrideSet size of the matrix to nrows x ncols New dynamic elements are created, the overlapping part of the...Definition TMatrixT.cxx:1203; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TVectorT< Double_t >; TVectorT::GetNoElementsInt_t GetNoElements() constDefinition TVectorT.h:74; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; FALSE#define FALSEDefinition mesh.c:45; MathNamespace for new Math classes and functions.; ROOT::Math::gFunctionconst ROOT::Math::IMultiGenFunction * gFunctionfunction wrapper for the function to be minimizedDefinition RMinimizer.cxx:12; ROOT::Math::minfunctiondouble minfunction(const std::vector< double > &x)function to return the function values at point xDefinition RMinimizer.cxx:19; ROOT::Math::mingradfunctionTVectorD mingradfunction(TVectorD y)function to return the gradient values at point yDefinition RMinimizer.cxx:25; ROOT::Math::gGradFunctionconst ROOT::Math::IMultiGradFunction * gGradFunctionfunction wrapper for the gradient of the function to be minimizedDefinition RMinimizer.cxx:14; ROOT::Math::gNCallsint gNCallsinteger for the number of function callsDefinition RMinimizer.cxx:16; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathrtoolssrcRMinimizer.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/RMinimizer_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RMinimizer_8cxx_source.html
https://root.cern/doc/master/RMinimizer_8cxx_source.html:1893,Modifiability,variab,variables,1893," gNCalls++;; 21 //return (*gFunction)(x.GetMatrixArray());; 22 return (*gFunction)(x.data());; 23 }; 24 ///function to return the gradient values at point y; 25 TVectorD mingradfunction(TVectorD y){; 26 unsigned int size = y.GetNoElements();; 27 const double * yy = y.GetMatrixArray();; 28 double z[size];; 29 gGradFunction->Gradient(yy,z);; 30 TVectorD zz(size,z);; 31 return zz;; 32 }; 33 ; 34 /*Default constructor with option for the method of minimization, can be any of the following:; 35 *; 36 *""Nelder-Mead"", ""BFGS"", ""CG"", ""L-BFGS-B"", ""SANN"", ""Brent"" (Brent only for 1D minimization); 37 */; 38 RMinimizer::RMinimizer(Option_t *method){; 39 fMethod=method;; 40 if (fMethod.empty() || fMethod==""Migrad"") fMethod=""BFGS""; ; 41 }; 42 ; 43 ///returns number of function calls; 44 unsigned int RMinimizer::NCalls() const { return gNCalls; }; 45 ; 46 ///function for finding the minimum; 47 bool RMinimizer::Minimize() {; 48 ; 49 //Set the functions; 50 (gFunction)= ObjFunction();; 51 (gGradFunction) = GradObjFunction();; 52 ; 53 gNCalls = 0; ; 54 ; 55 //pass functions and variables to R; 56 ROOT::R::TRInterface &r=ROOT::R::TRInterface::Instance();; 57 ; 58 r[""minfunction""] = ROOT::R::TRFunctionExport(minfunction);; 59 r[""mingradfunction""] = ROOT::R::TRFunctionExport(mingradfunction);; 60 r[""method""] = fMethod.c_str();; 61 std::vector<double> stepSizes(StepSizes(), StepSizes()+NDim());; 62 std::vector<double> values(X(), X()+NDim());; 63 r[""ndim""] = NDim();; 64 int ndim = NDim();; 65 r[""stepsizes""] = stepSizes;; 66 r[""initialparams""] = values;; 67 ; 68 //check if optimx is available; 69 bool optimxloaded = FALSE;; 70 r[""optimxloaded""] = optimxloaded;; 71 r.Execute(""optimxloaded<-library(optimx,logical.return=TRUE)"");; 72 //int ibool = r.ParseEval(""optimxloaded"").ToScalar<Int_t>();; 73 int ibool = r.Eval(""optimxloaded"");; 74 if (ibool==1) optimxloaded=kTRUE;; 75 ; 76 //string for the command to be processed in R; 77 TString cmd;; 78 ; 79 //optimx is available and loaded; 80 if (o",MatchSource.WIKI,doc/master/RMinimizer_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RMinimizer_8cxx_source.html
https://root.cern/doc/master/RMinimizer_8cxx_source.html:9227,Modifiability,config,configuration,9227,"n pointer to used gradient object function (NULL if gradient is not supported)Definition BasicMinimizer.cxx:325; ROOT::Math::BasicMinimizer::Xconst double * X() const overridereturn pointer to X values at the minimumDefinition BasicMinimizer.h:118; ROOT::Math::IBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim.Definition IFunction.h:61; ROOT::Math::IGradientFunctionMultiDimTemplInterface (abstract class) for multi-dimensional functions providing a gradient calculation.Definition IFunction.h:168; ROOT::Math::IGradientFunctionMultiDimTempl::Gradientvirtual void Gradient(const T *x, T *grad) constEvaluate all the vector of function derivatives (gradient) at a point x.Definition IFunction.h:177; ROOT::Math::Minimizer::Tolerancedouble Tolerance() constabsolute toleranceDefinition Minimizer.h:300; ROOT::Math::Minimizer::MaxIterationsunsigned int MaxIterations() constmax iterationsDefinition Minimizer.h:297; ROOT::Math::Minimizer::PrintLevelint PrintLevel() constminimizer configuration parametersDefinition Minimizer.h:291; ROOT::Math::RMinimizer::HessMatrixdouble HessMatrix(unsigned int i, unsigned int j) constReturns the ith jth component of the Hessian matrix.; ROOT::Math::RMinimizer::fCovMatrixTMatrixD fCovMatrixcovariant matrixDefinition RMinimizer.h:39; ROOT::Math::RMinimizer::fErrorsstd::vector< double > fErrorsvector of parameter errorsDefinition RMinimizer.h:38; ROOT::Math::RMinimizer::Minimizebool Minimize() overrideFunction to find the minimum.Definition RMinimizer.cxx:47; ROOT::Math::RMinimizer::fMethodstd::string fMethodminimizer method to be used, must be of a type listed in R optim or optimx descriptionsDefinition RMinimizer.h:35; ROOT::Math::RMinimizer::NCallsunsigned int NCalls() const overrideReturns the number of function calls.Definition RMinimizer.cxx:44; ROOT::Math::RMinimizer::CovMatrixdouble CovMatrix(unsigned int ivar, unsigned int jvar) const overridereturn covariance matrices element for variables ivar,jvar if the ",MatchSource.WIKI,doc/master/RMinimizer_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RMinimizer_8cxx_source.html
https://root.cern/doc/master/RMinimizer_8cxx_source.html:10187,Modifiability,variab,variables,10187," Minimizer.h:297; ROOT::Math::Minimizer::PrintLevelint PrintLevel() constminimizer configuration parametersDefinition Minimizer.h:291; ROOT::Math::RMinimizer::HessMatrixdouble HessMatrix(unsigned int i, unsigned int j) constReturns the ith jth component of the Hessian matrix.; ROOT::Math::RMinimizer::fCovMatrixTMatrixD fCovMatrixcovariant matrixDefinition RMinimizer.h:39; ROOT::Math::RMinimizer::fErrorsstd::vector< double > fErrorsvector of parameter errorsDefinition RMinimizer.h:38; ROOT::Math::RMinimizer::Minimizebool Minimize() overrideFunction to find the minimum.Definition RMinimizer.cxx:47; ROOT::Math::RMinimizer::fMethodstd::string fMethodminimizer method to be used, must be of a type listed in R optim or optimx descriptionsDefinition RMinimizer.h:35; ROOT::Math::RMinimizer::NCallsunsigned int NCalls() const overrideReturns the number of function calls.Definition RMinimizer.cxx:44; ROOT::Math::RMinimizer::CovMatrixdouble CovMatrix(unsigned int ivar, unsigned int jvar) const overridereturn covariance matrices element for variables ivar,jvar if the variable is fixed the return value ...Definition RMinimizer.h:68; ROOT::Math::RMinimizer::RMinimizerRMinimizer(Option_t *method)Default constructor.Definition RMinimizer.cxx:38; ROOT::Math::RMinimizer::fHessMatrixTMatrixD fHessMatrixHessian matrix.Definition RMinimizer.h:40; ROOT::R::TRFunctionExportThis is a class to pass functions from ROOT to R.Definition TRFunctionExport.h:140; ROOT::R::TRInterfaceROOT R was implemented using the R Project library and the modules Rcpp and RInsideDefinition TRInterface.h:136; ROOT::R::TRInterface::Instancestatic TRInterface & Instance()static method to get an TRInterface instance referenceDefinition TRInterface.cxx:187; TMatrixT< Double_t >; TMatrixT::ResizeToTMatrixTBase< Element > & ResizeTo(Int_t nrows, Int_t ncols, Int_t=-1) overrideSet size of the matrix to nrows x ncols New dynamic elements are created, the overlapping part of the...Definition TMatrixT.cxx:1203; TStringBasic",MatchSource.WIKI,doc/master/RMinimizer_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RMinimizer_8cxx_source.html
https://root.cern/doc/master/RMinimizer_8cxx_source.html:10214,Modifiability,variab,variable,10214," Minimizer.h:297; ROOT::Math::Minimizer::PrintLevelint PrintLevel() constminimizer configuration parametersDefinition Minimizer.h:291; ROOT::Math::RMinimizer::HessMatrixdouble HessMatrix(unsigned int i, unsigned int j) constReturns the ith jth component of the Hessian matrix.; ROOT::Math::RMinimizer::fCovMatrixTMatrixD fCovMatrixcovariant matrixDefinition RMinimizer.h:39; ROOT::Math::RMinimizer::fErrorsstd::vector< double > fErrorsvector of parameter errorsDefinition RMinimizer.h:38; ROOT::Math::RMinimizer::Minimizebool Minimize() overrideFunction to find the minimum.Definition RMinimizer.cxx:47; ROOT::Math::RMinimizer::fMethodstd::string fMethodminimizer method to be used, must be of a type listed in R optim or optimx descriptionsDefinition RMinimizer.h:35; ROOT::Math::RMinimizer::NCallsunsigned int NCalls() const overrideReturns the number of function calls.Definition RMinimizer.cxx:44; ROOT::Math::RMinimizer::CovMatrixdouble CovMatrix(unsigned int ivar, unsigned int jvar) const overridereturn covariance matrices element for variables ivar,jvar if the variable is fixed the return value ...Definition RMinimizer.h:68; ROOT::Math::RMinimizer::RMinimizerRMinimizer(Option_t *method)Default constructor.Definition RMinimizer.cxx:38; ROOT::Math::RMinimizer::fHessMatrixTMatrixD fHessMatrixHessian matrix.Definition RMinimizer.h:40; ROOT::R::TRFunctionExportThis is a class to pass functions from ROOT to R.Definition TRFunctionExport.h:140; ROOT::R::TRInterfaceROOT R was implemented using the R Project library and the modules Rcpp and RInsideDefinition TRInterface.h:136; ROOT::R::TRInterface::Instancestatic TRInterface & Instance()static method to get an TRInterface instance referenceDefinition TRInterface.cxx:187; TMatrixT< Double_t >; TMatrixT::ResizeToTMatrixTBase< Element > & ResizeTo(Int_t nrows, Int_t ncols, Int_t=-1) overrideSet size of the matrix to nrows x ncols New dynamic elements are created, the overlapping part of the...Definition TMatrixT.cxx:1203; TStringBasic",MatchSource.WIKI,doc/master/RMinimizer_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RMinimizer_8cxx_source.html
https://root.cern/doc/master/RMinimizer_8cxx_source.html:2800,Performance,load,loaded,2800,"NCalls = 0; ; 54 ; 55 //pass functions and variables to R; 56 ROOT::R::TRInterface &r=ROOT::R::TRInterface::Instance();; 57 ; 58 r[""minfunction""] = ROOT::R::TRFunctionExport(minfunction);; 59 r[""mingradfunction""] = ROOT::R::TRFunctionExport(mingradfunction);; 60 r[""method""] = fMethod.c_str();; 61 std::vector<double> stepSizes(StepSizes(), StepSizes()+NDim());; 62 std::vector<double> values(X(), X()+NDim());; 63 r[""ndim""] = NDim();; 64 int ndim = NDim();; 65 r[""stepsizes""] = stepSizes;; 66 r[""initialparams""] = values;; 67 ; 68 //check if optimx is available; 69 bool optimxloaded = FALSE;; 70 r[""optimxloaded""] = optimxloaded;; 71 r.Execute(""optimxloaded<-library(optimx,logical.return=TRUE)"");; 72 //int ibool = r.ParseEval(""optimxloaded"").ToScalar<Int_t>();; 73 int ibool = r.Eval(""optimxloaded"");; 74 if (ibool==1) optimxloaded=kTRUE;; 75 ; 76 //string for the command to be processed in R; 77 TString cmd;; 78 ; 79 //optimx is available and loaded; 80 if (optimxloaded==kTRUE) {; 81 if (!gGradFunction) { ; 82 // not using gradient function; 83 cmd = TString::Format(""result <- optimx( initialparams, minfunction,method='%s',control = list(ndeps=stepsizes,maxit=%d,trace=%d,abstol=%e),hessian=TRUE)"",fMethod.c_str(),MaxIterations(),PrintLevel(),Tolerance());; 84 }; 85 else { ; 86 // using user provided gradient ; 87 cmd = TString::Format(""result <- optimx( initialparams, minfunction,mingradfunction, method='%s', control = list(ndeps=stepsizes,maxit=%d,trace=%d,abstol=%e),hessian=TRUE)"",fMethod.c_str(),MaxIterations(),PrintLevel(),Tolerance());; 88 ; 89 }; 90 } ; 91 ; 92 //optimx is not available; 93 else { ; 94 if (!gGradFunction) { ; 95 // not using gradient function; 96 cmd = TString::Format(""result <- optim( initialparams, minfunction,method='%s',control = list(ndeps=stepsizes,maxit=%d,trace=%d,abstol=%e),hessian=TRUE)"",fMethod.c_str(),MaxIterations(),PrintLevel(),Tolerance());; 97 }; 98 else { ; 99 // using user provided gradient ; 100 cmd = TString::Format(""result <- opti",MatchSource.WIKI,doc/master/RMinimizer_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RMinimizer_8cxx_source.html
https://root.cern/doc/master/RMinimizer_8cxx_source.html:2526,Testability,log,logical,2526,"thod==""Migrad"") fMethod=""BFGS""; ; 41 }; 42 ; 43 ///returns number of function calls; 44 unsigned int RMinimizer::NCalls() const { return gNCalls; }; 45 ; 46 ///function for finding the minimum; 47 bool RMinimizer::Minimize() {; 48 ; 49 //Set the functions; 50 (gFunction)= ObjFunction();; 51 (gGradFunction) = GradObjFunction();; 52 ; 53 gNCalls = 0; ; 54 ; 55 //pass functions and variables to R; 56 ROOT::R::TRInterface &r=ROOT::R::TRInterface::Instance();; 57 ; 58 r[""minfunction""] = ROOT::R::TRFunctionExport(minfunction);; 59 r[""mingradfunction""] = ROOT::R::TRFunctionExport(mingradfunction);; 60 r[""method""] = fMethod.c_str();; 61 std::vector<double> stepSizes(StepSizes(), StepSizes()+NDim());; 62 std::vector<double> values(X(), X()+NDim());; 63 r[""ndim""] = NDim();; 64 int ndim = NDim();; 65 r[""stepsizes""] = stepSizes;; 66 r[""initialparams""] = values;; 67 ; 68 //check if optimx is available; 69 bool optimxloaded = FALSE;; 70 r[""optimxloaded""] = optimxloaded;; 71 r.Execute(""optimxloaded<-library(optimx,logical.return=TRUE)"");; 72 //int ibool = r.ParseEval(""optimxloaded"").ToScalar<Int_t>();; 73 int ibool = r.Eval(""optimxloaded"");; 74 if (ibool==1) optimxloaded=kTRUE;; 75 ; 76 //string for the command to be processed in R; 77 TString cmd;; 78 ; 79 //optimx is available and loaded; 80 if (optimxloaded==kTRUE) {; 81 if (!gGradFunction) { ; 82 // not using gradient function; 83 cmd = TString::Format(""result <- optimx( initialparams, minfunction,method='%s',control = list(ndeps=stepsizes,maxit=%d,trace=%d,abstol=%e),hessian=TRUE)"",fMethod.c_str(),MaxIterations(),PrintLevel(),Tolerance());; 84 }; 85 else { ; 86 // using user provided gradient ; 87 cmd = TString::Format(""result <- optimx( initialparams, minfunction,mingradfunction, method='%s', control = list(ndeps=stepsizes,maxit=%d,trace=%d,abstol=%e),hessian=TRUE)"",fMethod.c_str(),MaxIterations(),PrintLevel(),Tolerance());; 88 ; 89 }; 90 } ; 91 ; 92 //optimx is not available; 93 else { ; 94 if (!gGradFunction) { ; 95 // not",MatchSource.WIKI,doc/master/RMinimizer_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RMinimizer_8cxx_source.html
https://root.cern/doc/master/RNTupleDS_8hxx.html:549,Integrability,depend,dependency,549,". ROOT: tree/dataframe/inc/ROOT/RNTupleDS.hxx File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Functions ; RNTupleDS.hxx File ReferenceNTuple-related classes | ROOT7 classes. #include <ROOT/RDataFrame.hxx>; #include <ROOT/RDataSource.hxx>; #include <ROOT/RNTupleUtil.hxx>; #include <string_view>; #include <condition_variable>; #include <cstdint>; #include <memory>; #include <mutex>; #include <string>; #include <thread>; #include <vector>; #include <unordered_map>. Include dependency graph for RNTupleDS.hxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; struct  ROOT::Experimental::RNTupleDS::REntryRangeDS;  The PrepareNextRanges() method populates the fNextRanges list with REntryRangeDS records. More...;  ; struct  ROOT::Experimental::RNTupleDS::RFieldInfo;  Holds useful information about fields added to the RNTupleDS. More...;  ; class  ROOT::Experimental::RNTupleDS;  The RDataSource implementation for RNTuple. More...;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Experimental;  ; namespace  ROOT::Experimental::Internal;  ; namespace  ROOT::RDF;  ; namespace  ROOT::RDF::Experimental;  . Functions; RDataFrame ROOT::RDF::Experimental::FromRNTuple (ROOT::RNTuple *ntuple);  ; RDataFrame ROOT::RDF::Experimental::FromRNTuple (std::string_view ntupleName, const std::vector< std::string > &fileNames);  ; RDataFrame ROOT::RDF::Experimental::FromRNTuple (std::string_view ntupleName, std::string_view fileName);  . Detailed Description; AuthorJakob Blomer jblom.nosp@m.er@c.nosp@m.ern.c.nosp@m.h . Enrico Guiraud enric.nosp@m.o.gu.nosp@m.iraud.",MatchSource.WIKI,doc/master/RNTupleDS_8hxx.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleDS_8hxx.html
https://root.cern/doc/master/RNTupleImporter_8cxx_source.html:4573,Availability,failure,failure,4573,"RException(R__FAIL(""cannot open source file "" + std::string(sourceFileName)));; 88 }; 89 ; 90 importer->fSourceTree = importer->fSourceFile->Get<TTree>(std::string(treeName).c_str());; 91 if (!importer->fSourceTree) {; 92 throw RException(R__FAIL(""cannot read TTree "" + std::string(treeName) + "" from "" + std::string(sourceFileName)));; 93 }; 94 ; 95 // If we have IMT enabled, its best use is for parallel page compression; 96 importer->fSourceTree->SetImplicitMT(false);; 97 auto result = importer->InitDestination(destFileName);; 98 ; 99 if (!result); 100 throw RException(R__FORWARD_ERROR(result));; 101 ; 102 return importer;; 103}; 104 ; 105std::unique_ptr<ROOT::Experimental::RNTupleImporter>; 106ROOT::Experimental::RNTupleImporter::Create(TTree *sourceTree, std::string_view destFileName); 107{; 108 auto importer = std::unique_ptr<RNTupleImporter>(new RNTupleImporter());; 109 ; 110 if (sourceTree->IsA() == TChain::Class() && std::strcmp(sourceTree->GetName(), """") == 0) {; 111 if (sourceTree->LoadTree(0) != 0); 112 throw RException(R__FAIL(""failure retrieving first tree from provided chain""));; 113 importer->fNTupleName = sourceTree->GetTree()->GetName();; 114 } else {; 115 importer->fNTupleName = sourceTree->GetName();; 116 }; 117 ; 118 importer->fSourceTree = sourceTree;; 119 ; 120 // If we have IMT enabled, its best use is for parallel page compression; 121 importer->fSourceTree->SetImplicitMT(false);; 122 auto result = importer->InitDestination(destFileName);; 123 ; 124 if (!result); 125 throw RException(R__FORWARD_ERROR(result));; 126 ; 127 return importer;; 128}; 129 ; 130ROOT::Experimental::RResult<void> ROOT::Experimental::RNTupleImporter::InitDestination(std::string_view destFileName); 131{; 132 fDestFileName = destFileName;; 133 fDestFile = std::unique_ptr<TFile>(TFile::Open(fDestFileName.c_str(), ""UPDATE""));; 134 if (!fDestFile || fDestFile->IsZombie()) {; 135 return R__FAIL(""cannot open dest file "" + std::string(fDestFileName));; 136 }; 137 ; 138 return RRes",MatchSource.WIKI,doc/master/RNTupleImporter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8cxx_source.html
https://root.cern/doc/master/RNTupleImporter_8cxx_source.html:18158,Availability,error,error,18158,"size_t l = 0; l < nLeafs; ++l) {; 408 const auto offset = c.fRecordField->GetOffsets()[l];; 409 const auto sizeOfLeaf = c.fRecordField->GetSubFields()[l]->GetValueSize();; 410 const auto idxImportBranch = c.fLeafBranchIndexes[l];; 411 for (Int_t j = 0; j < *c.fCountVal; ++j) {; 412 memcpy(c.fFieldBuffer.data() + j * sizeOfRecord + offset,; 413 fImportBranches[idxImportBranch].fBranchBuffer.get() + (j * sizeOfLeaf), sizeOfLeaf);; 414 }; 415 }; 416 }; 417 ; 418 for (auto &t : fImportTransformations) {; 419 auto result = t->Transform(fImportBranches[t->fImportBranchIdx], fImportFields[t->fImportFieldIdx]);; 420 if (!result); 421 throw RException(R__FORWARD_ERROR(result));; 422 }; 423 ; 424 ntplWriter->Fill(*fEntry);; 425 ; 426 if (fProgressCallback); 427 fProgressCallback->Call(ctrZippedBytes->GetValueAsInt(), i);; 428 }; 429 if (fProgressCallback); 430 fProgressCallback->Finish(ctrZippedBytes->GetValueAsInt(), nEntries);; 431}; RError.hxx; R__FORWARD_ERROR#define R__FORWARD_ERROR(res)Short-hand to return an RResult<T> in an error state (i.e. after checking)Definition RError.hxx:294; R__FAIL#define R__FAIL(msg)Short-hand to return an RResult<T> in an error state; the RError is implicitly converted into RResult...Definition RError.hxx:290; RField.hxx; RNTupleImporter.hxx; RNTupleUtil.hxx; RNTupleWriteOptions.hxx; RNTupleWriter.hxx; RPageSinkBuf.hxx; RPageStorageFile.hxx; RPageStorage.hxx; b#define b(i)Definition RSha256.hxx:100; f#define f(i)Definition RSha256.hxx:104; c#define c(i)Definition RSha256.hxx:101; TBranch.h; TChain.h; TClass.h; TDataType.h; kOther_t@ kOther_tDefinition TDataType.h:32; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; offsetOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Recta",MatchSource.WIKI,doc/master/RNTupleImporter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8cxx_source.html
https://root.cern/doc/master/RNTupleImporter_8cxx_source.html:18286,Availability,error,error,18286,"ValueSize();; 410 const auto idxImportBranch = c.fLeafBranchIndexes[l];; 411 for (Int_t j = 0; j < *c.fCountVal; ++j) {; 412 memcpy(c.fFieldBuffer.data() + j * sizeOfRecord + offset,; 413 fImportBranches[idxImportBranch].fBranchBuffer.get() + (j * sizeOfLeaf), sizeOfLeaf);; 414 }; 415 }; 416 }; 417 ; 418 for (auto &t : fImportTransformations) {; 419 auto result = t->Transform(fImportBranches[t->fImportBranchIdx], fImportFields[t->fImportFieldIdx]);; 420 if (!result); 421 throw RException(R__FORWARD_ERROR(result));; 422 }; 423 ; 424 ntplWriter->Fill(*fEntry);; 425 ; 426 if (fProgressCallback); 427 fProgressCallback->Call(ctrZippedBytes->GetValueAsInt(), i);; 428 }; 429 if (fProgressCallback); 430 fProgressCallback->Finish(ctrZippedBytes->GetValueAsInt(), nEntries);; 431}; RError.hxx; R__FORWARD_ERROR#define R__FORWARD_ERROR(res)Short-hand to return an RResult<T> in an error state (i.e. after checking)Definition RError.hxx:294; R__FAIL#define R__FAIL(msg)Short-hand to return an RResult<T> in an error state; the RError is implicitly converted into RResult...Definition RError.hxx:290; RField.hxx; RNTupleImporter.hxx; RNTupleUtil.hxx; RNTupleWriteOptions.hxx; RNTupleWriter.hxx; RPageSinkBuf.hxx; RPageStorageFile.hxx; RPageStorage.hxx; b#define b(i)Definition RSha256.hxx:100; f#define f(i)Definition RSha256.hxx:104; c#define c(i)Definition RSha256.hxx:101; TBranch.h; TChain.h; TClass.h; TDataType.h; kOther_t@ kOther_tDefinition TDataType.h:32; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; offsetOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner",MatchSource.WIKI,doc/master/RNTupleImporter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8cxx_source.html
https://root.cern/doc/master/RNTupleImporter_8cxx_source.html:18808,Availability,error,error,18808,"_ERROR(result));; 422 }; 423 ; 424 ntplWriter->Fill(*fEntry);; 425 ; 426 if (fProgressCallback); 427 fProgressCallback->Call(ctrZippedBytes->GetValueAsInt(), i);; 428 }; 429 if (fProgressCallback); 430 fProgressCallback->Finish(ctrZippedBytes->GetValueAsInt(), nEntries);; 431}; RError.hxx; R__FORWARD_ERROR#define R__FORWARD_ERROR(res)Short-hand to return an RResult<T> in an error state (i.e. after checking)Definition RError.hxx:294; R__FAIL#define R__FAIL(msg)Short-hand to return an RResult<T> in an error state; the RError is implicitly converted into RResult...Definition RError.hxx:290; RField.hxx; RNTupleImporter.hxx; RNTupleUtil.hxx; RNTupleWriteOptions.hxx; RNTupleWriter.hxx; RPageSinkBuf.hxx; RPageStorageFile.hxx; RPageStorage.hxx; b#define b(i)Definition RSha256.hxx:100; f#define f(i)Definition RSha256.hxx:104; c#define c(i)Definition RSha256.hxx:101; TBranch.h; TChain.h; TClass.h; TDataType.h; kOther_t@ kOther_tDefinition TDataType.h:32; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; offsetOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h offsetDefinition TGWin32VirtualXProxy.cxx:245; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineCol",MatchSource.WIKI,doc/master/RNTupleImporter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8cxx_source.html
https://root.cern/doc/master/RNTupleImporter_8cxx_source.html:2049,Deployability,update,update,2049," 17#include <ROOT/RField.hxx>; 18#include <ROOT/RNTupleImporter.hxx>; 19#include <ROOT/RNTupleUtil.hxx>; 20#include <ROOT/RNTupleWriteOptions.hxx>; 21#include <ROOT/RNTupleWriter.hxx>; 22#include <ROOT/RPageSinkBuf.hxx>; 23#include <ROOT/RPageStorage.hxx>; 24#include <ROOT/RPageStorageFile.hxx>; 25#include <string_view>; 26 ; 27#include <TBranch.h>; 28#include <TChain.h>; 29#include <TClass.h>; 30#include <TDataType.h>; 31#include <TLeaf.h>; 32#include <TLeafC.h>; 33#include <TLeafElement.h>; 34#include <TLeafObject.h>; 35 ; 36#include <cassert>; 37#include <cstdint>; 38#include <cstring>; 39#include <iostream>; 40#include <utility>; 41 ; 42namespace {; 43 ; 44class RDefaultProgressCallback : public ROOT::Experimental::RNTupleImporter::RProgressCallback {; 45private:; 46 static constexpr std::uint64_t gUpdateFrequencyBytes = 100 * 1000 * 1000; // report every 100 MB; 47 std::uint64_t fNbytesNext = gUpdateFrequencyBytes;; 48 ; 49public:; 50 ~RDefaultProgressCallback() override {}; 51 void Call(std::uint64_t nbytesWritten, std::uint64_t neventsWritten) final; 52 {; 53 // Report if more than 100 MB (compressed) where written since the last status update; 54 if (nbytesWritten < fNbytesNext); 55 return;; 56 std::cout << ""Wrote "" << nbytesWritten / 1000 / 1000 << ""MB, "" << neventsWritten << "" entries\n"";; 57 fNbytesNext += gUpdateFrequencyBytes;; 58 if (nbytesWritten > fNbytesNext) {; 59 // If we already passed the next threshold, increase by a sensible amount.; 60 fNbytesNext = nbytesWritten + gUpdateFrequencyBytes;; 61 }; 62 }; 63 ; 64 void Finish(std::uint64_t nbytesWritten, std::uint64_t neventsWritten) final; 65 {; 66 std::cout << ""Done, wrote "" << nbytesWritten / 1000 / 1000 << ""MB, "" << neventsWritten << "" entries\n"";; 67 }; 68};; 69 ; 70} // anonymous namespace; 71 ; 72ROOT::Experimental::RResult<void>; 73ROOT::Experimental::RNTupleImporter::RCStringTransformation::Transform(const RImportBranch &branch, RImportField &field); 74{; 75 *reinterpret_cast<std::string *>",MatchSource.WIKI,doc/master/RNTupleImporter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8cxx_source.html
https://root.cern/doc/master/RNTupleImporter_8cxx_source.html:22766,Deployability,update,update,22766,":RNTupleImporter::fDestFilestd::unique_ptr< TFile > fDestFileDefinition RNTupleImporter.hxx:209; ROOT::Experimental::RNTupleImporter::fWriteOptionsRNTupleWriteOptions fWriteOptionsDefinition RNTupleImporter.hxx:210; ROOT::Experimental::RNTupleImporter::fMaxEntriesstd::int64_t fMaxEntriesThe maximum number of entries to import. When this value is -1 (default), import all entries.Definition RNTupleImporter.hxx:217; ROOT::Experimental::RNTupleImporter::fLeafCountCollectionsstd::map< std::string, RImportLeafCountCollection > fLeafCountCollectionsMaps the count leaf to the information about the corresponding untyped collection.Definition RNTupleImporter.hxx:229; ROOT::Experimental::RNTupleImporter::RNTupleImporterRNTupleImporter()=default; ROOT::Experimental::RNTupleImporter::fImportBranchesstd::vector< RImportBranch > fImportBranchesDefinition RNTupleImporter.hxx:226; ROOT::Experimental::RNTupleImporter::Createstatic std::unique_ptr< RNTupleImporter > Create(std::string_view sourceFileName, std::string_view treeName, std::string_view destFileName)Opens the input file for reading and the output file for writing (update).Definition RNTupleImporter.cxx:80; ROOT::Experimental::RNTupleImporter::fProgressCallbackstd::unique_ptr< RProgressCallback > fProgressCallbackDefinition RNTupleImporter.hxx:221; ROOT::Experimental::RNTupleImporter::PrepareSchemaRResult< void > PrepareSchema()Sets up the connection from TTree branches to RNTuple fields, including initialization of the memory ...Definition RNTupleImporter.cxx:161; ROOT::Experimental::RNTupleImporter::InitDestinationROOT::Experimental::RResult< void > InitDestination(std::string_view destFileName)Definition RNTupleImporter.cxx:130; ROOT::Experimental::RNTupleImporter::fNTupleNamestd::string fNTupleNameDefinition RNTupleImporter.hxx:208; ROOT::Experimental::RNTupleImporter::Importvoid Import()Import works in two steps:Definition RNTupleImporter.cxx:371; ROOT::Experimental::RNTupleImporter::ResetSchemavoid ResetSchema()Definit",MatchSource.WIKI,doc/master/RNTupleImporter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8cxx_source.html
https://root.cern/doc/master/RNTupleImporter_8cxx_source.html:25162,Integrability,wrap,wraps,25162,"d::vector< RImportField > fImportFieldsDefinition RNTupleImporter.hxx:227; ROOT::Experimental::RNTupleImporter::fFieldModifierFieldModifier_t fFieldModifierDefinition RNTupleImporter.hxx:222; ROOT::Experimental::RNTupleImporter::ReportSchemavoid ReportSchema()Definition RNTupleImporter.cxx:141; ROOT::Experimental::RNTupleImporter::fModelstd::unique_ptr< RNTupleModel > fModelDefinition RNTupleImporter.hxx:224; ROOT::Experimental::RNTupleImporter::fImportTransformationsstd::vector< std::unique_ptr< RImportTransformation > > fImportTransformationsThe list of transformations to be performed for every entry.Definition RNTupleImporter.hxx:231; ROOT::Experimental::RNTupleModel::CreateBarestatic std::unique_ptr< RNTupleModel > CreateBare()A bare model has no default entry.Definition RNTupleModel.cxx:236; ROOT::Experimental::RNTupleWriteOptions::GetUseBufferedWritebool GetUseBufferedWrite() constDefinition RNTupleWriteOptions.hxx:127; ROOT::Experimental::RResultThe class is used as a return type for operations that can fail; wraps a value of type T or an RError...Definition RError.hxx:194; ROOT::Experimental::RVectorField::CreateUntypedstatic std::unique_ptr< RVectorField > CreateUntyped(std::string_view fieldName, std::unique_ptr< RFieldBase > itemField)Definition RField.cxx:2650; TChain::Classstatic TClass * Class(); TClass::GetClassstatic TClass * GetClass(const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE)Static method returning pointer to TClass of the specified class name.Definition TClass.cxx:3035; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TLeafC::Classstatic TClass * Class(); TLeafElement::Classstatic TClass * Class(); TLeafObject::Classstatic TClass * Class(); TLeafA TLeaf describes individual elements of a TBranch See TBranch structure in TTree.Definition TLeaf.h:57; TLine:",MatchSource.WIKI,doc/master/RNTupleImporter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8cxx_source.html
https://root.cern/doc/master/RNTupleImporter_8cxx_source.html:13543,Modifiability,variab,variable,13543,");; 291 if (isClass) {; 292 auto klass = TClass::GetClass(b->GetClassName());; 293 if (!klass) {; 294 return R__FAIL(""unable to load class "" + std::string(b->GetClassName()) + "" for branch "" +; 295 std::string(b->GetName()));; 296 }; 297 auto ptrBuf = reinterpret_cast<void **>(ib.fBranchBuffer.get());; 298 fSourceTree->SetBranchAddress(b->GetName(), ptrBuf, klass, EDataType::kOther_t, true /* isptr*/);; 299 } else {; 300 fSourceTree->SetBranchAddress(b->GetName(), reinterpret_cast<void *>(ib.fBranchBuffer.get()));; 301 }; 302 ; 303 // If the TTree branch type and the RNTuple field type match, use the branch read buffer as RNTuple write buffer; 304 if (!isLeafCountArray && !fImportFields.back().fFieldBuffer) {; 305 fImportFields.back().fFieldBuffer =; 306 isClass ? *reinterpret_cast<void **>(ib.fBranchBuffer.get()) : ib.fBranchBuffer.get();; 307 }; 308 ; 309 fImportBranches.emplace_back(std::move(ib));; 310 }; 311 ; 312 int iLeafCountCollection = 0;; 313 for (auto &p : fLeafCountCollections) {; 314 // We want to capture this variable, which is not possible with a; 315 // structured binding in C++17. Explicitly defining a variable works.; 316 auto countLeafName = p.first;; 317 auto &c = p.second;; 318 ; 319 c.fFieldName = ""_collection"" + std::to_string(iLeafCountCollection);; 320 auto recordField = std::make_unique<RRecordField>(""_0"", std::move(c.fLeafFields));; 321 c.fRecordField = recordField.get();; 322 auto collectionField = RVectorField::CreateUntyped(c.fFieldName, std::move(recordField));; 323 fModel->AddField(std::move(collectionField));; 324 ; 325 // Add projected fields for all leaf count arrays; 326 for (const auto leaf : c.fRecordField->GetSubFields()) {; 327 const auto name = leaf->GetFieldName();; 328 auto projectedField = RFieldBase::Create(name, ""ROOT::VecOps::RVec<"" + leaf->GetTypeName() + "">"").Unwrap();; 329 fModel->AddProjectedField(std::move(projectedField), [&name, &c](const std::string &fieldName) {; 330 if (fieldName == name); 331 return c.fFieldN",MatchSource.WIKI,doc/master/RNTupleImporter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8cxx_source.html
https://root.cern/doc/master/RNTupleImporter_8cxx_source.html:13641,Modifiability,variab,variable,13641,"lass "" + std::string(b->GetClassName()) + "" for branch "" +; 295 std::string(b->GetName()));; 296 }; 297 auto ptrBuf = reinterpret_cast<void **>(ib.fBranchBuffer.get());; 298 fSourceTree->SetBranchAddress(b->GetName(), ptrBuf, klass, EDataType::kOther_t, true /* isptr*/);; 299 } else {; 300 fSourceTree->SetBranchAddress(b->GetName(), reinterpret_cast<void *>(ib.fBranchBuffer.get()));; 301 }; 302 ; 303 // If the TTree branch type and the RNTuple field type match, use the branch read buffer as RNTuple write buffer; 304 if (!isLeafCountArray && !fImportFields.back().fFieldBuffer) {; 305 fImportFields.back().fFieldBuffer =; 306 isClass ? *reinterpret_cast<void **>(ib.fBranchBuffer.get()) : ib.fBranchBuffer.get();; 307 }; 308 ; 309 fImportBranches.emplace_back(std::move(ib));; 310 }; 311 ; 312 int iLeafCountCollection = 0;; 313 for (auto &p : fLeafCountCollections) {; 314 // We want to capture this variable, which is not possible with a; 315 // structured binding in C++17. Explicitly defining a variable works.; 316 auto countLeafName = p.first;; 317 auto &c = p.second;; 318 ; 319 c.fFieldName = ""_collection"" + std::to_string(iLeafCountCollection);; 320 auto recordField = std::make_unique<RRecordField>(""_0"", std::move(c.fLeafFields));; 321 c.fRecordField = recordField.get();; 322 auto collectionField = RVectorField::CreateUntyped(c.fFieldName, std::move(recordField));; 323 fModel->AddField(std::move(collectionField));; 324 ; 325 // Add projected fields for all leaf count arrays; 326 for (const auto leaf : c.fRecordField->GetSubFields()) {; 327 const auto name = leaf->GetFieldName();; 328 auto projectedField = RFieldBase::Create(name, ""ROOT::VecOps::RVec<"" + leaf->GetTypeName() + "">"").Unwrap();; 329 fModel->AddProjectedField(std::move(projectedField), [&name, &c](const std::string &fieldName) {; 330 if (fieldName == name); 331 return c.fFieldName;; 332 else; 333 return c.fFieldName + ""._0."" + name;; 334 });; 335 }; 336 ; 337 if (fConvertDotsInBranchNames) {; 338 // Replace ",MatchSource.WIKI,doc/master/RNTupleImporter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8cxx_source.html
https://root.cern/doc/master/RNTupleImporter_8cxx_source.html:12631,Performance,load,load,12631,");; 269 } else if (isLeafCountArray) {; 270 const std::string countleafName = countleaf->GetName();; 271 fLeafCountCollections[countleafName].fLeafFields.emplace_back(std::move(field));; 272 fLeafCountCollections[countleafName].fLeafBranchIndexes.emplace_back(fImportBranches.size());; 273 R__ASSERT(b->GetListOfLeaves()->GetEntries() == 1);; 274 break;; 275 } else {; 276 fModel->AddField(std::move(field));; 277 fImportFields.emplace_back(std::move(f));; 278 }; 279 }; 280 if (!recordItems.empty()) {; 281 auto recordField = std::make_unique<RRecordField>(b->GetName(), std::move(recordItems));; 282 RImportField f;; 283 f.fField = recordField.get();; 284 fImportFields.emplace_back(std::move(f));; 285 fModel->AddField(std::move(recordField));; 286 }; 287 ; 288 RImportBranch ib;; 289 ib.fBranchName = b->GetName();; 290 ib.fBranchBuffer = std::make_unique<unsigned char[]>(branchBufferSize);; 291 if (isClass) {; 292 auto klass = TClass::GetClass(b->GetClassName());; 293 if (!klass) {; 294 return R__FAIL(""unable to load class "" + std::string(b->GetClassName()) + "" for branch "" +; 295 std::string(b->GetName()));; 296 }; 297 auto ptrBuf = reinterpret_cast<void **>(ib.fBranchBuffer.get());; 298 fSourceTree->SetBranchAddress(b->GetName(), ptrBuf, klass, EDataType::kOther_t, true /* isptr*/);; 299 } else {; 300 fSourceTree->SetBranchAddress(b->GetName(), reinterpret_cast<void *>(ib.fBranchBuffer.get()));; 301 }; 302 ; 303 // If the TTree branch type and the RNTuple field type match, use the branch read buffer as RNTuple write buffer; 304 if (!isLeafCountArray && !fImportFields.back().fFieldBuffer) {; 305 fImportFields.back().fFieldBuffer =; 306 isClass ? *reinterpret_cast<void **>(ib.fBranchBuffer.get()) : ib.fBranchBuffer.get();; 307 }; 308 ; 309 fImportBranches.emplace_back(std::move(ib));; 310 }; 311 ; 312 int iLeafCountCollection = 0;; 313 for (auto &p : fLeafCountCollections) {; 314 // We want to capture this variable, which is not possible with a; 315 // structured binding in",MatchSource.WIKI,doc/master/RNTupleImporter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8cxx_source.html
https://root.cern/doc/master/RNTupleImporter_8cxx_source.html:24714,Performance,perform,performed,24714,"finition RNTupleImporter.cxx:151; ROOT::Experimental::RNTupleImporter::fEntrystd::unique_ptr< REntry > fEntryDefinition RNTupleImporter.hxx:225; ROOT::Experimental::RNTupleImporter::fDestFileNamestd::string fDestFileNameDefinition RNTupleImporter.hxx:207; ROOT::Experimental::RNTupleImporter::fIsQuietbool fIsQuietNo standard output, conversely if set to false, schema information and progress is printed.Definition RNTupleImporter.hxx:220; ROOT::Experimental::RNTupleImporter::fImportFieldsstd::vector< RImportField > fImportFieldsDefinition RNTupleImporter.hxx:227; ROOT::Experimental::RNTupleImporter::fFieldModifierFieldModifier_t fFieldModifierDefinition RNTupleImporter.hxx:222; ROOT::Experimental::RNTupleImporter::ReportSchemavoid ReportSchema()Definition RNTupleImporter.cxx:141; ROOT::Experimental::RNTupleImporter::fModelstd::unique_ptr< RNTupleModel > fModelDefinition RNTupleImporter.hxx:224; ROOT::Experimental::RNTupleImporter::fImportTransformationsstd::vector< std::unique_ptr< RImportTransformation > > fImportTransformationsThe list of transformations to be performed for every entry.Definition RNTupleImporter.hxx:231; ROOT::Experimental::RNTupleModel::CreateBarestatic std::unique_ptr< RNTupleModel > CreateBare()A bare model has no default entry.Definition RNTupleModel.cxx:236; ROOT::Experimental::RNTupleWriteOptions::GetUseBufferedWritebool GetUseBufferedWrite() constDefinition RNTupleWriteOptions.hxx:127; ROOT::Experimental::RResultThe class is used as a return type for operations that can fail; wraps a value of type T or an RError...Definition RError.hxx:194; ROOT::Experimental::RVectorField::CreateUntypedstatic std::unique_ptr< RVectorField > CreateUntyped(std::string_view fieldName, std::unique_ptr< RFieldBase > itemField)Definition RField.cxx:2650; TChain::Classstatic TClass * Class(); TClass::GetClassstatic TClass * GetClass(const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE)Static method returning pointer to TClass of the specified class name.Defini",MatchSource.WIKI,doc/master/RNTupleImporter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8cxx_source.html
https://root.cern/doc/master/RNTupleImporter_8cxx_source.html:25528,Performance,load,load,25528,"pleImporter.hxx:224; ROOT::Experimental::RNTupleImporter::fImportTransformationsstd::vector< std::unique_ptr< RImportTransformation > > fImportTransformationsThe list of transformations to be performed for every entry.Definition RNTupleImporter.hxx:231; ROOT::Experimental::RNTupleModel::CreateBarestatic std::unique_ptr< RNTupleModel > CreateBare()A bare model has no default entry.Definition RNTupleModel.cxx:236; ROOT::Experimental::RNTupleWriteOptions::GetUseBufferedWritebool GetUseBufferedWrite() constDefinition RNTupleWriteOptions.hxx:127; ROOT::Experimental::RResultThe class is used as a return type for operations that can fail; wraps a value of type T or an RError...Definition RError.hxx:194; ROOT::Experimental::RVectorField::CreateUntypedstatic std::unique_ptr< RVectorField > CreateUntyped(std::string_view fieldName, std::unique_ptr< RFieldBase > itemField)Definition RField.cxx:2650; TChain::Classstatic TClass * Class(); TClass::GetClassstatic TClass * GetClass(const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE)Static method returning pointer to TClass of the specified class name.Definition TClass.cxx:3035; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TLeafC::Classstatic TClass * Class(); TLeafElement::Classstatic TClass * Class(); TLeafObject::Classstatic TClass * Class(); TLeafA TLeaf describes individual elements of a TBranch See TBranch structure in TTree.Definition TLeaf.h:57; TLine::IsATClass * IsA() const overrideDefinition TLine.h:79; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TObject::GetNamevirtual const char * GetName() constReturns name of object.Definition TObject.cxx:444; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::GetEntryvirtual Int_t GetEntry(Long64_t entry, Int_t getall=0)",MatchSource.WIKI,doc/master/RNTupleImporter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8cxx_source.html
https://root.cern/doc/master/RNTupleImporter_8cxx_source.html:6832,Testability,assert,assert,6832,"ons.clear();; 156 fImportTransformations.clear();; 157 fModel = RNTupleModel::CreateBare();; 158 fEntry = nullptr;; 159}; 160 ; 161ROOT::Experimental::RResult<void> ROOT::Experimental::RNTupleImporter::PrepareSchema(); 162{; 163 ResetSchema();; 164 ; 165 // Browse through all branches and their leaves, create corresponding fields and prepare the memory buffers for; 166 // reading and writing. Usually, reading and writing share the same memory buffer, i.e. the object is read from TTree; 167 // and written as-is to the RNTuple. There are exceptions, e.g. for leaf count arrays and C strings.; 168 for (auto b : TRangeDynCast<TBranch>(*fSourceTree->GetListOfBranches())) {; 169 assert(b);; 170 const auto firstLeaf = static_cast<TLeaf *>(b->GetListOfLeaves()->First());; 171 assert(firstLeaf);; 172 ; 173 const bool isLeafList = b->GetNleaves() > 1;; 174 const bool isCountLeaf = firstLeaf->IsRange(); // A leaf storing the number of elements of a leaf count array; 175 const bool isClass = (firstLeaf->IsA() == TLeafElement::Class()); // STL or user-defined class; 176 if (isLeafList && isClass); 177 return R__FAIL(""unsupported: classes in leaf list, branch "" + std::string(b->GetName()));; 178 if (isLeafList && isCountLeaf); 179 return R__FAIL(""unsupported: count leaf arrays in leaf list, branch "" + std::string(b->GetName()));; 180 ; 181 // Only plain leafs with type identifies 'C' are C strings. Otherwise, they are char arrays.; 182 // We use GetLeafCounter instead of GetLeafCount and GetLenStatic because the latter don't distinguish between; 183 // char arrays and C strings.; 184 Int_t firstLeafCountval;; 185 const bool isCString = !isLeafList && (firstLeaf->IsA() == TLeafC::Class()) &&; 186 (!firstLeaf->GetLeafCounter(firstLeafCountval)) && (firstLeafCountval == 1);; 187 ; 188 if (isCountLeaf) {; 189 // This is a count leaf. We expect that this is not part of a leaf list. We also expect that the; 190 // leaf count comes before any array leaves that use it.; 191 // Count leaf b",MatchSource.WIKI,doc/master/RNTupleImporter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8cxx_source.html
https://root.cern/doc/master/RNTupleImporter_8cxx_source.html:6929,Testability,assert,assert,6929,"ons.clear();; 156 fImportTransformations.clear();; 157 fModel = RNTupleModel::CreateBare();; 158 fEntry = nullptr;; 159}; 160 ; 161ROOT::Experimental::RResult<void> ROOT::Experimental::RNTupleImporter::PrepareSchema(); 162{; 163 ResetSchema();; 164 ; 165 // Browse through all branches and their leaves, create corresponding fields and prepare the memory buffers for; 166 // reading and writing. Usually, reading and writing share the same memory buffer, i.e. the object is read from TTree; 167 // and written as-is to the RNTuple. There are exceptions, e.g. for leaf count arrays and C strings.; 168 for (auto b : TRangeDynCast<TBranch>(*fSourceTree->GetListOfBranches())) {; 169 assert(b);; 170 const auto firstLeaf = static_cast<TLeaf *>(b->GetListOfLeaves()->First());; 171 assert(firstLeaf);; 172 ; 173 const bool isLeafList = b->GetNleaves() > 1;; 174 const bool isCountLeaf = firstLeaf->IsRange(); // A leaf storing the number of elements of a leaf count array; 175 const bool isClass = (firstLeaf->IsA() == TLeafElement::Class()); // STL or user-defined class; 176 if (isLeafList && isClass); 177 return R__FAIL(""unsupported: classes in leaf list, branch "" + std::string(b->GetName()));; 178 if (isLeafList && isCountLeaf); 179 return R__FAIL(""unsupported: count leaf arrays in leaf list, branch "" + std::string(b->GetName()));; 180 ; 181 // Only plain leafs with type identifies 'C' are C strings. Otherwise, they are char arrays.; 182 // We use GetLeafCounter instead of GetLeafCount and GetLenStatic because the latter don't distinguish between; 183 // char arrays and C strings.; 184 Int_t firstLeafCountval;; 185 const bool isCString = !isLeafList && (firstLeaf->IsA() == TLeafC::Class()) &&; 186 (!firstLeaf->GetLeafCounter(firstLeafCountval)) && (firstLeafCountval == 1);; 187 ; 188 if (isCountLeaf) {; 189 // This is a count leaf. We expect that this is not part of a leaf list. We also expect that the; 190 // leaf count comes before any array leaves that use it.; 191 // Count leaf b",MatchSource.WIKI,doc/master/RNTupleImporter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8cxx_source.html
https://root.cern/doc/master/RNTupleImporter_8cxx_source.html:6091,Usability,clear,clear,6091," 128}; 129 ; 130ROOT::Experimental::RResult<void> ROOT::Experimental::RNTupleImporter::InitDestination(std::string_view destFileName); 131{; 132 fDestFileName = destFileName;; 133 fDestFile = std::unique_ptr<TFile>(TFile::Open(fDestFileName.c_str(), ""UPDATE""));; 134 if (!fDestFile || fDestFile->IsZombie()) {; 135 return R__FAIL(""cannot open dest file "" + std::string(fDestFileName));; 136 }; 137 ; 138 return RResult<void>::Success();; 139}; 140 ; 141void ROOT::Experimental::RNTupleImporter::ReportSchema(); 142{; 143 for (const auto &f : fImportFields) {; 144 std::cout << ""Importing '"" << f.fField->GetFieldName() << ""' ["" << f.fField->GetTypeName() << ""]\n"";; 145 }; 146 for (const auto &f : Internal::GetProjectedFieldsOfModel(*fModel).GetFieldZero().GetSubFields()) {; 147 std::cout << ""Importing (projected) '"" << f->GetFieldName() << ""' ["" << f->GetTypeName() << ""]\n"";; 148 }; 149}; 150 ; 151void ROOT::Experimental::RNTupleImporter::ResetSchema(); 152{; 153 fImportBranches.clear();; 154 fImportFields.clear();; 155 fLeafCountCollections.clear();; 156 fImportTransformations.clear();; 157 fModel = RNTupleModel::CreateBare();; 158 fEntry = nullptr;; 159}; 160 ; 161ROOT::Experimental::RResult<void> ROOT::Experimental::RNTupleImporter::PrepareSchema(); 162{; 163 ResetSchema();; 164 ; 165 // Browse through all branches and their leaves, create corresponding fields and prepare the memory buffers for; 166 // reading and writing. Usually, reading and writing share the same memory buffer, i.e. the object is read from TTree; 167 // and written as-is to the RNTuple. There are exceptions, e.g. for leaf count arrays and C strings.; 168 for (auto b : TRangeDynCast<TBranch>(*fSourceTree->GetListOfBranches())) {; 169 assert(b);; 170 const auto firstLeaf = static_cast<TLeaf *>(b->GetListOfLeaves()->First());; 171 assert(firstLeaf);; 172 ; 173 const bool isLeafList = b->GetNleaves() > 1;; 174 const bool isCountLeaf = firstLeaf->IsRange(); // A leaf storing the number of elements of a lea",MatchSource.WIKI,doc/master/RNTupleImporter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8cxx_source.html
https://root.cern/doc/master/RNTupleImporter_8cxx_source.html:6119,Usability,clear,clear,6119,"al::RResult<void> ROOT::Experimental::RNTupleImporter::InitDestination(std::string_view destFileName); 131{; 132 fDestFileName = destFileName;; 133 fDestFile = std::unique_ptr<TFile>(TFile::Open(fDestFileName.c_str(), ""UPDATE""));; 134 if (!fDestFile || fDestFile->IsZombie()) {; 135 return R__FAIL(""cannot open dest file "" + std::string(fDestFileName));; 136 }; 137 ; 138 return RResult<void>::Success();; 139}; 140 ; 141void ROOT::Experimental::RNTupleImporter::ReportSchema(); 142{; 143 for (const auto &f : fImportFields) {; 144 std::cout << ""Importing '"" << f.fField->GetFieldName() << ""' ["" << f.fField->GetTypeName() << ""]\n"";; 145 }; 146 for (const auto &f : Internal::GetProjectedFieldsOfModel(*fModel).GetFieldZero().GetSubFields()) {; 147 std::cout << ""Importing (projected) '"" << f->GetFieldName() << ""' ["" << f->GetTypeName() << ""]\n"";; 148 }; 149}; 150 ; 151void ROOT::Experimental::RNTupleImporter::ResetSchema(); 152{; 153 fImportBranches.clear();; 154 fImportFields.clear();; 155 fLeafCountCollections.clear();; 156 fImportTransformations.clear();; 157 fModel = RNTupleModel::CreateBare();; 158 fEntry = nullptr;; 159}; 160 ; 161ROOT::Experimental::RResult<void> ROOT::Experimental::RNTupleImporter::PrepareSchema(); 162{; 163 ResetSchema();; 164 ; 165 // Browse through all branches and their leaves, create corresponding fields and prepare the memory buffers for; 166 // reading and writing. Usually, reading and writing share the same memory buffer, i.e. the object is read from TTree; 167 // and written as-is to the RNTuple. There are exceptions, e.g. for leaf count arrays and C strings.; 168 for (auto b : TRangeDynCast<TBranch>(*fSourceTree->GetListOfBranches())) {; 169 assert(b);; 170 const auto firstLeaf = static_cast<TLeaf *>(b->GetListOfLeaves()->First());; 171 assert(firstLeaf);; 172 ; 173 const bool isLeafList = b->GetNleaves() > 1;; 174 const bool isCountLeaf = firstLeaf->IsRange(); // A leaf storing the number of elements of a leaf count array; 175 const bool is",MatchSource.WIKI,doc/master/RNTupleImporter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8cxx_source.html
https://root.cern/doc/master/RNTupleImporter_8cxx_source.html:6155,Usability,clear,clear,6155,"::RNTupleImporter::InitDestination(std::string_view destFileName); 131{; 132 fDestFileName = destFileName;; 133 fDestFile = std::unique_ptr<TFile>(TFile::Open(fDestFileName.c_str(), ""UPDATE""));; 134 if (!fDestFile || fDestFile->IsZombie()) {; 135 return R__FAIL(""cannot open dest file "" + std::string(fDestFileName));; 136 }; 137 ; 138 return RResult<void>::Success();; 139}; 140 ; 141void ROOT::Experimental::RNTupleImporter::ReportSchema(); 142{; 143 for (const auto &f : fImportFields) {; 144 std::cout << ""Importing '"" << f.fField->GetFieldName() << ""' ["" << f.fField->GetTypeName() << ""]\n"";; 145 }; 146 for (const auto &f : Internal::GetProjectedFieldsOfModel(*fModel).GetFieldZero().GetSubFields()) {; 147 std::cout << ""Importing (projected) '"" << f->GetFieldName() << ""' ["" << f->GetTypeName() << ""]\n"";; 148 }; 149}; 150 ; 151void ROOT::Experimental::RNTupleImporter::ResetSchema(); 152{; 153 fImportBranches.clear();; 154 fImportFields.clear();; 155 fLeafCountCollections.clear();; 156 fImportTransformations.clear();; 157 fModel = RNTupleModel::CreateBare();; 158 fEntry = nullptr;; 159}; 160 ; 161ROOT::Experimental::RResult<void> ROOT::Experimental::RNTupleImporter::PrepareSchema(); 162{; 163 ResetSchema();; 164 ; 165 // Browse through all branches and their leaves, create corresponding fields and prepare the memory buffers for; 166 // reading and writing. Usually, reading and writing share the same memory buffer, i.e. the object is read from TTree; 167 // and written as-is to the RNTuple. There are exceptions, e.g. for leaf count arrays and C strings.; 168 for (auto b : TRangeDynCast<TBranch>(*fSourceTree->GetListOfBranches())) {; 169 assert(b);; 170 const auto firstLeaf = static_cast<TLeaf *>(b->GetListOfLeaves()->First());; 171 assert(firstLeaf);; 172 ; 173 const bool isLeafList = b->GetNleaves() > 1;; 174 const bool isCountLeaf = firstLeaf->IsRange(); // A leaf storing the number of elements of a leaf count array; 175 const bool isClass = (firstLeaf->IsA() == TLeafEle",MatchSource.WIKI,doc/master/RNTupleImporter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8cxx_source.html
https://root.cern/doc/master/RNTupleImporter_8cxx_source.html:6192,Usability,clear,clear,6192,"34 if (!fDestFile || fDestFile->IsZombie()) {; 135 return R__FAIL(""cannot open dest file "" + std::string(fDestFileName));; 136 }; 137 ; 138 return RResult<void>::Success();; 139}; 140 ; 141void ROOT::Experimental::RNTupleImporter::ReportSchema(); 142{; 143 for (const auto &f : fImportFields) {; 144 std::cout << ""Importing '"" << f.fField->GetFieldName() << ""' ["" << f.fField->GetTypeName() << ""]\n"";; 145 }; 146 for (const auto &f : Internal::GetProjectedFieldsOfModel(*fModel).GetFieldZero().GetSubFields()) {; 147 std::cout << ""Importing (projected) '"" << f->GetFieldName() << ""' ["" << f->GetTypeName() << ""]\n"";; 148 }; 149}; 150 ; 151void ROOT::Experimental::RNTupleImporter::ResetSchema(); 152{; 153 fImportBranches.clear();; 154 fImportFields.clear();; 155 fLeafCountCollections.clear();; 156 fImportTransformations.clear();; 157 fModel = RNTupleModel::CreateBare();; 158 fEntry = nullptr;; 159}; 160 ; 161ROOT::Experimental::RResult<void> ROOT::Experimental::RNTupleImporter::PrepareSchema(); 162{; 163 ResetSchema();; 164 ; 165 // Browse through all branches and their leaves, create corresponding fields and prepare the memory buffers for; 166 // reading and writing. Usually, reading and writing share the same memory buffer, i.e. the object is read from TTree; 167 // and written as-is to the RNTuple. There are exceptions, e.g. for leaf count arrays and C strings.; 168 for (auto b : TRangeDynCast<TBranch>(*fSourceTree->GetListOfBranches())) {; 169 assert(b);; 170 const auto firstLeaf = static_cast<TLeaf *>(b->GetListOfLeaves()->First());; 171 assert(firstLeaf);; 172 ; 173 const bool isLeafList = b->GetNleaves() > 1;; 174 const bool isCountLeaf = firstLeaf->IsRange(); // A leaf storing the number of elements of a leaf count array; 175 const bool isClass = (firstLeaf->IsA() == TLeafElement::Class()); // STL or user-defined class; 176 if (isLeafList && isClass); 177 return R__FAIL(""unsupported: classes in leaf list, branch "" + std::string(b->GetName()));; 178 if (isLeafList && ",MatchSource.WIKI,doc/master/RNTupleImporter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8cxx_source.html
https://root.cern/doc/master/RNTupleImporter_8hxx.html:614,Integrability,depend,dependency,614,". ROOT: tree/ntupleutil/v7/inc/ROOT/RNTupleImporter.hxx File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces ; RNTupleImporter.hxx File ReferenceNTuple-related classes | ROOT7 classes. #include <ROOT/REntry.hxx>; #include <ROOT/RError.hxx>; #include <ROOT/RField.hxx>; #include <ROOT/RNTupleModel.hxx>; #include <ROOT/RNTupleWriteOptions.hxx>; #include <ROOT/RNTupleWriter.hxx>; #include <string_view>; #include <TFile.h>; #include <TTree.h>; #include <cstdlib>; #include <functional>; #include <map>; #include <memory>; #include <vector>. Include dependency graph for RNTupleImporter.hxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; struct  ROOT::Experimental::RNTupleImporter::RCStringTransformation;  Transform a NULL terminated C string branch into an std::string field. More...;  ; struct  ROOT::Experimental::RNTupleImporter::RImportBranch;  ; struct  ROOT::Experimental::RNTupleImporter::RImportField;  ; struct  ROOT::Experimental::RNTupleImporter::RImportGuard;  When the schema is set up and the import started, it needs to be reset before the next Import() call can start. More...;  ; struct  ROOT::Experimental::RNTupleImporter::RImportLeafCountCollection;  Leaf count arrays require special treatment. More...;  ; struct  ROOT::Experimental::RNTupleImporter::RImportTransformation;  Base class to perform data transformations from TTree branches to RNTuple fields if necessary. More...;  ; class  ROOT::Experimental::RNTupleImporter;  Converts a TTree into an RNTuple. More...;  ; class  ROOT::Experimental::RNTupleImporter::RProgressCallback;  Used to report every ~100 MB (compressed), and at the end about the status of the import. More...;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::i",MatchSource.WIKI,doc/master/RNTupleImporter_8hxx.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8hxx.html
https://root.cern/doc/master/RNTupleImporter_8hxx.html:1584,Performance,perform,perform,1584,"<memory>; #include <vector>. Include dependency graph for RNTupleImporter.hxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; struct  ROOT::Experimental::RNTupleImporter::RCStringTransformation;  Transform a NULL terminated C string branch into an std::string field. More...;  ; struct  ROOT::Experimental::RNTupleImporter::RImportBranch;  ; struct  ROOT::Experimental::RNTupleImporter::RImportField;  ; struct  ROOT::Experimental::RNTupleImporter::RImportGuard;  When the schema is set up and the import started, it needs to be reset before the next Import() call can start. More...;  ; struct  ROOT::Experimental::RNTupleImporter::RImportLeafCountCollection;  Leaf count arrays require special treatment. More...;  ; struct  ROOT::Experimental::RNTupleImporter::RImportTransformation;  Base class to perform data transformations from TTree branches to RNTuple fields if necessary. More...;  ; class  ROOT::Experimental::RNTupleImporter;  Converts a TTree into an RNTuple. More...;  ; class  ROOT::Experimental::RNTupleImporter::RProgressCallback;  Used to report every ~100 MB (compressed), and at the end about the status of the import. More...;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Experimental;  . Detailed Description; AuthorJakob Blomer jblom.nosp@m.er@c.nosp@m.ern.c.nosp@m.h ; Date2022-11-22 ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! ; Definition in file RNTupleImporter.hxx. treentupleutilv7incROOTRNTupleImporter.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:26 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/RNTupleImporter_8hxx.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8hxx.html
https://root.cern/doc/master/RNTupleImporter_8hxx_source.html:4011,Availability,avail,available,4011,"cords; 76 - Leaf count arrays are translated to anonymous collections with generic names (`_collection0`, `_collection1`, etc.).; 77 In order to keep field names and branch names aligned, RNTuple projects the members of these collections and; 78 its collection counter to the input branch names. For instance, the following input leafs:; 79~~~; 80Int_t njets; 81float jet_pt[njets]; 82float jet_eta[njets]; 83~~~; 84 will be converted to the following RNTuple schema:; 85~~~; 86 _collection0 (untyped collection); 87 |- float jet_pt; 88 |- float jet_eta; 89 std::size_t (RNTupleCardinality) njets (projected from _collection0 without subfields); 90 ROOT::RVec<float> jet_pt (projected from _collection0.jet_pt); 91 ROOT::RVec<float> jet_eta (projected from _collection0.jet_eta); 92~~~; 93 These projections are meta-data only operations and don't involve duplicating the data.; 94 ; 95Current limitations of the importer:; 96 - No support for trees containing TClonesArray collections; 97 - Due to RNTuple currently storing data fully split, ""don't split"" markers are ignored; 98 - Some types are not available in RNTuple. Please refer to the; 99 [RNTuple specification](https://github.com/root-project/root/blob/master/tree/ntuple/v7/doc/specifications.md) for; 100 an overview of all types currently supported.; 101*/; 102// clang-format on; 103class RNTupleImporter {; 104public:; 105 /// Used to make adjustments to the fields of the output model.; 106 using FieldModifier_t = std::function<void(RFieldBase &)>;; 107 ; 108 /// Used to report every ~100 MB (compressed), and at the end about the status of the import.; 109 class RProgressCallback {; 110 public:; 111 virtual ~RProgressCallback() = default;; 112 void operator()(std::uint64_t nbytesWritten, std::uint64_t neventsWritten); 113 {; 114 Call(nbytesWritten, neventsWritten);; 115 }; 116 virtual void Call(std::uint64_t nbytesWritten, std::uint64_t neventsWritten) = 0;; 117 virtual void Finish(std::uint64_t nbytesWritten, std::uint64_",MatchSource.WIKI,doc/master/RNTupleImporter_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8hxx_source.html
https://root.cern/doc/master/RNTupleImporter_8hxx_source.html:11597,Deployability,update,update,11597," std::unique_ptr<RNTupleModel> fModel;; 225 std::unique_ptr<REntry> fEntry;; 226 std::vector<RImportBranch> fImportBranches;; 227 std::vector<RImportField> fImportFields;; 228 /// Maps the count leaf to the information about the corresponding untyped collection; 229 std::map<std::string, RImportLeafCountCollection> fLeafCountCollections;; 230 /// The list of transformations to be performed for every entry; 231 std::vector<std::unique_ptr<RImportTransformation>> fImportTransformations;; 232 ; 233 ROOT::Experimental::RResult<void> InitDestination(std::string_view destFileName);; 234 ; 235 void ResetSchema();; 236 /// Sets up the connection from TTree branches to RNTuple fields, including initialization of the memory; 237 /// buffers used for reading and writing.; 238 RResult<void> PrepareSchema();; 239 void ReportSchema();; 240 ; 241public:; 242 RNTupleImporter(const RNTupleImporter &other) = delete;; 243 RNTupleImporter &operator=(const RNTupleImporter &other) = delete;; 244 RNTupleImporter(RNTupleImporter &&other) = delete;; 245 RNTupleImporter &operator=(RNTupleImporter &&other) = delete;; 246 ~RNTupleImporter() = default;; 247 ; 248 /// Opens the input file for reading and the output file for writing (update).; 249 static std::unique_ptr<RNTupleImporter>; 250 Create(std::string_view sourceFileName, std::string_view treeName, std::string_view destFileName);; 251 ; 252 /// Directly uses the provided tree and opens the output file for writing (update).; 253 static std::unique_ptr<RNTupleImporter> Create(TTree *sourceTree, std::string_view destFileName);; 254 ; 255 RNTupleWriteOptions GetWriteOptions() const { return fWriteOptions; }; 256 void SetWriteOptions(RNTupleWriteOptions options) { fWriteOptions = options; }; 257 void SetNTupleName(const std::string &name) { fNTupleName = name; }; 258 void SetMaxEntries(std::uint64_t maxEntries) { fMaxEntries = maxEntries; };; 259 ; 260 /// Whereas branch names may contain dots, RNTuple field names may not. By setting this opti",MatchSource.WIKI,doc/master/RNTupleImporter_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8hxx_source.html
https://root.cern/doc/master/RNTupleImporter_8hxx_source.html:11841,Deployability,update,update,11841,"list of transformations to be performed for every entry; 231 std::vector<std::unique_ptr<RImportTransformation>> fImportTransformations;; 232 ; 233 ROOT::Experimental::RResult<void> InitDestination(std::string_view destFileName);; 234 ; 235 void ResetSchema();; 236 /// Sets up the connection from TTree branches to RNTuple fields, including initialization of the memory; 237 /// buffers used for reading and writing.; 238 RResult<void> PrepareSchema();; 239 void ReportSchema();; 240 ; 241public:; 242 RNTupleImporter(const RNTupleImporter &other) = delete;; 243 RNTupleImporter &operator=(const RNTupleImporter &other) = delete;; 244 RNTupleImporter(RNTupleImporter &&other) = delete;; 245 RNTupleImporter &operator=(RNTupleImporter &&other) = delete;; 246 ~RNTupleImporter() = default;; 247 ; 248 /// Opens the input file for reading and the output file for writing (update).; 249 static std::unique_ptr<RNTupleImporter>; 250 Create(std::string_view sourceFileName, std::string_view treeName, std::string_view destFileName);; 251 ; 252 /// Directly uses the provided tree and opens the output file for writing (update).; 253 static std::unique_ptr<RNTupleImporter> Create(TTree *sourceTree, std::string_view destFileName);; 254 ; 255 RNTupleWriteOptions GetWriteOptions() const { return fWriteOptions; }; 256 void SetWriteOptions(RNTupleWriteOptions options) { fWriteOptions = options; }; 257 void SetNTupleName(const std::string &name) { fNTupleName = name; }; 258 void SetMaxEntries(std::uint64_t maxEntries) { fMaxEntries = maxEntries; };; 259 ; 260 /// Whereas branch names may contain dots, RNTuple field names may not. By setting this option, dot characters are; 261 /// automatically converted into underscores to prevent the importer from throwing an exception.; 262 void SetConvertDotsInBranchNames(bool value) { fConvertDotsInBranchNames = value; }; 263 ; 264 /// Whether or not information and progress is printed to stdout.; 265 void SetIsQuiet(bool value) { fIsQuiet = value; }; 266 ;",MatchSource.WIKI,doc/master/RNTupleImporter_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8hxx_source.html
https://root.cern/doc/master/RNTupleImporter_8hxx_source.html:17394,Deployability,update,update,17394,"ntyped collection.Definition RNTupleImporter.hxx:229; ROOT::Experimental::RNTupleImporter::RNTupleImporterRNTupleImporter()=default; ROOT::Experimental::RNTupleImporter::operator=RNTupleImporter & operator=(const RNTupleImporter &other)=delete; ROOT::Experimental::RNTupleImporter::fImportBranchesstd::vector< RImportBranch > fImportBranchesDefinition RNTupleImporter.hxx:226; ROOT::Experimental::RNTupleImporter::SetNTupleNamevoid SetNTupleName(const std::string &name)Definition RNTupleImporter.hxx:257; ROOT::Experimental::RNTupleImporter::RNTupleImporterRNTupleImporter(const RNTupleImporter &other)=delete; ROOT::Experimental::RNTupleImporter::SetConvertDotsInBranchNamesvoid SetConvertDotsInBranchNames(bool value)Whereas branch names may contain dots, RNTuple field names may not.Definition RNTupleImporter.hxx:262; ROOT::Experimental::RNTupleImporter::operator=RNTupleImporter & operator=(RNTupleImporter &&other)=delete; ROOT::Experimental::RNTupleImporter::Createstatic std::unique_ptr< RNTupleImporter > Create(std::string_view sourceFileName, std::string_view treeName, std::string_view destFileName)Opens the input file for reading and the output file for writing (update).Definition RNTupleImporter.cxx:80; ROOT::Experimental::RNTupleImporter::fProgressCallbackstd::unique_ptr< RProgressCallback > fProgressCallbackDefinition RNTupleImporter.hxx:221; ROOT::Experimental::RNTupleImporter::RNTupleImporterRNTupleImporter(RNTupleImporter &&other)=delete; ROOT::Experimental::RNTupleImporter::PrepareSchemaRResult< void > PrepareSchema()Sets up the connection from TTree branches to RNTuple fields, including initialization of the memory ...Definition RNTupleImporter.cxx:161; ROOT::Experimental::RNTupleImporter::FieldModifier_tstd::function< void(RFieldBase &)> FieldModifier_tUsed to make adjustments to the fields of the output model.Definition RNTupleImporter.hxx:106; ROOT::Experimental::RNTupleImporter::InitDestinationROOT::Experimental::RResult< void > InitDestination(std::string_",MatchSource.WIKI,doc/master/RNTupleImporter_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8hxx_source.html
https://root.cern/doc/master/RNTupleImporter_8hxx_source.html:20837,Integrability,wrap,wraps,20837,"ies(std::uint64_t maxEntries)Definition RNTupleImporter.hxx:258; ROOT::Experimental::RNTupleImporter::fFieldModifierFieldModifier_t fFieldModifierDefinition RNTupleImporter.hxx:222; ROOT::Experimental::RNTupleImporter::ReportSchemavoid ReportSchema()Definition RNTupleImporter.cxx:141; ROOT::Experimental::RNTupleImporter::fModelstd::unique_ptr< RNTupleModel > fModelDefinition RNTupleImporter.hxx:224; ROOT::Experimental::RNTupleImporter::~RNTupleImporter~RNTupleImporter()=default; ROOT::Experimental::RNTupleImporter::fImportTransformationsstd::vector< std::unique_ptr< RImportTransformation > > fImportTransformationsThe list of transformations to be performed for every entry.Definition RNTupleImporter.hxx:231; ROOT::Experimental::RNTupleWriteOptionsCommon user-tunable settings for storing ntuples.Definition RNTupleWriteOptions.hxx:48; ROOT::Experimental::RRecordFieldThe field for an untyped record.Definition RFieldRecord.hxx:41; ROOT::Experimental::RResultThe class is used as a return type for operations that can fail; wraps a value of type T or an RError...Definition RError.hxx:194; TLeafA TLeaf describes individual elements of a TBranch See TBranch structure in TTree.Definition TLeaf.h:57; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; int; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Experimental::RNTupleImporter::RCStringTransformationTransform a NULL terminated C string branch into an std::string field.Definition RNTupleImporter.hxx:196; ROOT::Experimental::RNTupleImporter::RCStringTransformation::RCStringTransformationRCStringTransformation(std::size_t b, std::size_t f)Definition RNTupleImporter.hxx:197; ROOT::Experimental::RNTupleImporter::RCStringTransformation::~RCStringTransformation~RCStringTransformation() override=default; ROOT::Experimental::RNTupleImporter::RCStringTransformation::TransformRResult< void > Transform(const RImportBranch",MatchSource.WIKI,doc/master/RNTupleImporter_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8hxx_source.html
https://root.cern/doc/master/RNTupleImporter_8hxx_source.html:6209,Performance,perform,perform,6209," 0;; 117 virtual void Finish(std::uint64_t nbytesWritten, std::uint64_t neventsWritten) = 0;; 118 };; 119 ; 120private:; 121 struct RImportBranch {; 122 RImportBranch() = default;; 123 RImportBranch(const RImportBranch &other) = delete;; 124 RImportBranch(RImportBranch &&other) = default;; 125 RImportBranch &operator=(const RImportBranch &other) = delete;; 126 RImportBranch &operator=(RImportBranch &&other) = default;; 127 std::string fBranchName; ///< Top-level branch name from the input TTree; 128 std::unique_ptr<unsigned char[]> fBranchBuffer; ///< The destination of SetBranchAddress() for `fBranchName`; 129 };; 130 ; 131 struct RImportField {; 132 RImportField() = default;; 133 ~RImportField() = default;; 134 RImportField(const RImportField &other) = delete;; 135 RImportField(RImportField &&other) = default;; 136 RImportField &operator=(const RImportField &other) = delete;; 137 RImportField &operator=(RImportField &&other) = default;; 138 ; 139 /// The field is kept during schema preparation and transferred to the fModel before the writing starts; 140 RFieldBase *fField = nullptr;; 141 std::unique_ptr<RFieldBase::RValue> fValue; ///< Set if a value is generated, only for transformed fields; 142 void *fFieldBuffer = nullptr; ///< Usually points to the corresponding RImportBranch::fBranchBuffer but not always; 143 };; 144 ; 145 /// Base class to perform data transformations from TTree branches to RNTuple fields if necessary; 146 struct RImportTransformation {; 147 std::size_t fImportBranchIdx = 0;; 148 std::size_t fImportFieldIdx = 0;; 149 ; 150 RImportTransformation(std::size_t branchIdx, std::size_t fieldIdx); 151 : fImportBranchIdx(branchIdx), fImportFieldIdx(fieldIdx); 152 {; 153 }; 154 virtual ~RImportTransformation() = default;; 155 virtual RResult<void> Transform(const RImportBranch &branch, RImportField &field) = 0;; 156 };; 157 ; 158 /// When the schema is set up and the import started, it needs to be reset before the next Import() call; 159 /// can start.",MatchSource.WIKI,doc/master/RNTupleImporter_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8hxx_source.html
https://root.cern/doc/master/RNTupleImporter_8hxx_source.html:10757,Performance,perform,performed,10757,";; 210 RNTupleWriteOptions fWriteOptions;; 211 ; 212 /// Whether or not dot characters in branch names should be converted to underscores. If this option is not set and a; 213 /// branch with a '.' is encountered, the importer will throw an exception.; 214 bool fConvertDotsInBranchNames = false;; 215 ; 216 /// The maximum number of entries to import. When this value is -1 (default), import all entries.; 217 std::int64_t fMaxEntries = -1;; 218 ; 219 /// No standard output, conversely if set to false, schema information and progress is printed.; 220 bool fIsQuiet = false;; 221 std::unique_ptr<RProgressCallback> fProgressCallback;; 222 FieldModifier_t fFieldModifier;; 223 ; 224 std::unique_ptr<RNTupleModel> fModel;; 225 std::unique_ptr<REntry> fEntry;; 226 std::vector<RImportBranch> fImportBranches;; 227 std::vector<RImportField> fImportFields;; 228 /// Maps the count leaf to the information about the corresponding untyped collection; 229 std::map<std::string, RImportLeafCountCollection> fLeafCountCollections;; 230 /// The list of transformations to be performed for every entry; 231 std::vector<std::unique_ptr<RImportTransformation>> fImportTransformations;; 232 ; 233 ROOT::Experimental::RResult<void> InitDestination(std::string_view destFileName);; 234 ; 235 void ResetSchema();; 236 /// Sets up the connection from TTree branches to RNTuple fields, including initialization of the memory; 237 /// buffers used for reading and writing.; 238 RResult<void> PrepareSchema();; 239 void ReportSchema();; 240 ; 241public:; 242 RNTupleImporter(const RNTupleImporter &other) = delete;; 243 RNTupleImporter &operator=(const RNTupleImporter &other) = delete;; 244 RNTupleImporter(RNTupleImporter &&other) = delete;; 245 RNTupleImporter &operator=(RNTupleImporter &&other) = delete;; 246 ~RNTupleImporter() = default;; 247 ; 248 /// Opens the input file for reading and the output file for writing (update).; 249 static std::unique_ptr<RNTupleImporter>; 250 Create(std::string_view sourceFileNa",MatchSource.WIKI,doc/master/RNTupleImporter_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8hxx_source.html
https://root.cern/doc/master/RNTupleImporter_8hxx_source.html:20460,Performance,perform,performed,20460,"ely if set to false, schema information and progress is printed.Definition RNTupleImporter.hxx:220; ROOT::Experimental::RNTupleImporter::fImportFieldsstd::vector< RImportField > fImportFieldsDefinition RNTupleImporter.hxx:227; ROOT::Experimental::RNTupleImporter::SetIsQuietvoid SetIsQuiet(bool value)Whether or not information and progress is printed to stdout.Definition RNTupleImporter.hxx:265; ROOT::Experimental::RNTupleImporter::SetMaxEntriesvoid SetMaxEntries(std::uint64_t maxEntries)Definition RNTupleImporter.hxx:258; ROOT::Experimental::RNTupleImporter::fFieldModifierFieldModifier_t fFieldModifierDefinition RNTupleImporter.hxx:222; ROOT::Experimental::RNTupleImporter::ReportSchemavoid ReportSchema()Definition RNTupleImporter.cxx:141; ROOT::Experimental::RNTupleImporter::fModelstd::unique_ptr< RNTupleModel > fModelDefinition RNTupleImporter.hxx:224; ROOT::Experimental::RNTupleImporter::~RNTupleImporter~RNTupleImporter()=default; ROOT::Experimental::RNTupleImporter::fImportTransformationsstd::vector< std::unique_ptr< RImportTransformation > > fImportTransformationsThe list of transformations to be performed for every entry.Definition RNTupleImporter.hxx:231; ROOT::Experimental::RNTupleWriteOptionsCommon user-tunable settings for storing ntuples.Definition RNTupleWriteOptions.hxx:48; ROOT::Experimental::RRecordFieldThe field for an untyped record.Definition RFieldRecord.hxx:41; ROOT::Experimental::RResultThe class is used as a return type for operations that can fail; wraps a value of type T or an RError...Definition RError.hxx:194; TLeafA TLeaf describes individual elements of a TBranch See TBranch structure in TTree.Definition TLeaf.h:57; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; int; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Experimental::RNTupleImporter::RCStringTransformationTransform a NULL terminated C string branch into an std::",MatchSource.WIKI,doc/master/RNTupleImporter_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8hxx_source.html
https://root.cern/doc/master/RNTupleImporter_8hxx_source.html:27672,Performance,perform,perform,27672,"he model.Definition RNTupleImporter.hxx:191; ROOT::Experimental::RNTupleImporter::RImportLeafCountCollection::RImportLeafCountCollectionRImportLeafCountCollection(const RImportLeafCountCollection &other)=delete; ROOT::Experimental::RNTupleImporter::RImportLeafCountCollection::RImportLeafCountCollectionRImportLeafCountCollection()=default; ROOT::Experimental::RNTupleImporter::RImportLeafCountCollection::operator=RImportLeafCountCollection & operator=(RImportLeafCountCollection &&other)=default; ROOT::Experimental::RNTupleImporter::RImportLeafCountCollection::fLeafBranchIndexesstd::vector< size_t > fLeafBranchIndexesPoints to the correspondings leaf branches in fImportBranches.Definition RNTupleImporter.hxx:190; ROOT::Experimental::RNTupleImporter::RImportLeafCountCollection::fCountValstd::unique_ptr< Int_t > fCountValThe number of elements for the collection for a particular event.Definition RNTupleImporter.hxx:185; ROOT::Experimental::RNTupleImporter::RImportTransformationBase class to perform data transformations from TTree branches to RNTuple fields if necessary.Definition RNTupleImporter.hxx:146; ROOT::Experimental::RNTupleImporter::RImportTransformation::fImportFieldIdxstd::size_t fImportFieldIdxDefinition RNTupleImporter.hxx:148; ROOT::Experimental::RNTupleImporter::RImportTransformation::~RImportTransformationvirtual ~RImportTransformation()=default; ROOT::Experimental::RNTupleImporter::RImportTransformation::fImportBranchIdxstd::size_t fImportBranchIdxDefinition RNTupleImporter.hxx:147; ROOT::Experimental::RNTupleImporter::RImportTransformation::Transformvirtual RResult< void > Transform(const RImportBranch &branch, RImportField &field)=0; ROOT::Experimental::RNTupleImporter::RImportTransformation::RImportTransformationRImportTransformation(std::size_t branchIdx, std::size_t fieldIdx)Definition RNTupleImporter.hxx:150. treentupleutilv7incROOTRNTupleImporter.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:04 (GVA Time) using Doxygen 1.9.8  ",MatchSource.WIKI,doc/master/RNTupleImporter_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8hxx_source.html
https://root.cern/doc/master/RNTupleModel_8cxx_source.html:3737,Availability,error,error,3737,") || fnHasArrayParent(*target)) {; 73 return R__FAIL(""unsupported field mapping across fixed-size arrays"");; 74 }; 75 ; 76 // We support projections only across records and collections. In the following, we check that the projected; 77 // field is on the same path of collection fields in the field tree than the source field.; 78 ; 79 // Finds the first non-record parent field of the input field; 80 auto fnBreakPoint = [](const RFieldBase *f) -> const RFieldBase * {; 81 auto parent = f->GetParent();; 82 while (parent) {; 83 if ((parent->GetStructure() != ENTupleStructure::kRecord) &&; 84 (parent->GetStructure() != ENTupleStructure::kLeaf)) {; 85 return parent;; 86 }; 87 parent = parent->GetParent();; 88 }; 89 // We reached the zero field; 90 return nullptr;; 91 };; 92 ; 93 // If source or target has a variant or reference as a parent, error out; 94 auto *sourceBreakPoint = fnBreakPoint(source);; 95 if (sourceBreakPoint && sourceBreakPoint->GetStructure() != ENTupleStructure::kCollection); 96 return R__FAIL(""unsupported field mapping (source structure)"");; 97 auto *targetBreakPoint = fnBreakPoint(target);; 98 if (targetBreakPoint && sourceBreakPoint->GetStructure() != ENTupleStructure::kCollection); 99 return R__FAIL(""unsupported field mapping (target structure)"");; 100 ; 101 if (!sourceBreakPoint && !targetBreakPoint) {; 102 // Source and target have no collections as parent; 103 return RResult<void>::Success();; 104 }; 105 if (sourceBreakPoint && targetBreakPoint) {; 106 if (sourceBreakPoint == targetBreakPoint) {; 107 // Source and target are children of the same collection; 108 return RResult<void>::Success();; 109 }; 110 if (auto it = fieldMap.find(targetBreakPoint); it != fieldMap.end() && it->second == sourceBreakPoint) {; 111 // The parent collection of parent is mapped to the parent collection of the source; 112 return RResult<void>::Success();; 113 }; 114 // Source and target are children of different collections; 115 return R__FAIL(""field mapping structure m",MatchSource.WIKI,doc/master/RNTupleModel_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleModel_8cxx_source.html
https://root.cern/doc/master/RNTupleModel_8cxx_source.html:21560,Availability,error,error,21560,"te(columnType)->GetSize();; 531 }; 532 }; 533 }; 534 bytes = std::min(options.GetPageBufferBudget(), nColumns * options.GetMaxUnzippedPageSize());; 535 ; 536 // If using buffered writing with RPageSinkBuf, we create a clone of the model and keep at least; 537 // the compressed pages in memory.; 538 if (options.GetUseBufferedWrite()) {; 539 bytes += minPageBufferSize;; 540 // Use the target cluster size as an estimate for all compressed pages combined.; 541 bytes += options.GetApproxZippedClusterSize();; 542 int compression = options.GetCompression();; 543 if (compression != 0 && options.GetUseImplicitMT() == RNTupleWriteOptions::EImplicitMT::kDefault) {; 544 // With IMT, compression happens asynchronously which means that the uncompressed pages also stay around. Use a; 545 // compression factor of 2x as a very rough estimate.; 546 bytes += 2 * options.GetApproxZippedClusterSize();; 547 }; 548 }; 549 ; 550 return bytes;; 551}; RError.hxx; R__FORWARD_ERROR#define R__FORWARD_ERROR(res)Short-hand to return an RResult<T> in an error state (i.e. after checking)Definition RError.hxx:294; R__FORWARD_RESULT#define R__FORWARD_RESULT(res)Short-hand to return an RResult<T> value from a subroutine to the calling stack frame.Definition RError.hxx:292; R__FAIL#define R__FAIL(msg)Short-hand to return an RResult<T> in an error state; the RError is implicitly converted into RResult...Definition RError.hxx:290; RField.hxx; RNTupleModel.hxx; RNTupleWriter.hxx; f#define f(i)Definition RSha256.hxx:104; StringUtils.hxx; targetOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const cha",MatchSource.WIKI,doc/master/RNTupleModel_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleModel_8cxx_source.html
https://root.cern/doc/master/RNTupleModel_8cxx_source.html:21848,Availability,error,error,21848,"BufferedWrite()) {; 539 bytes += minPageBufferSize;; 540 // Use the target cluster size as an estimate for all compressed pages combined.; 541 bytes += options.GetApproxZippedClusterSize();; 542 int compression = options.GetCompression();; 543 if (compression != 0 && options.GetUseImplicitMT() == RNTupleWriteOptions::EImplicitMT::kDefault) {; 544 // With IMT, compression happens asynchronously which means that the uncompressed pages also stay around. Use a; 545 // compression factor of 2x as a very rough estimate.; 546 bytes += 2 * options.GetApproxZippedClusterSize();; 547 }; 548 }; 549 ; 550 return bytes;; 551}; RError.hxx; R__FORWARD_ERROR#define R__FORWARD_ERROR(res)Short-hand to return an RResult<T> in an error state (i.e. after checking)Definition RError.hxx:294; R__FORWARD_RESULT#define R__FORWARD_RESULT(res)Short-hand to return an RResult<T> value from a subroutine to the calling stack frame.Definition RError.hxx:292; R__FAIL#define R__FAIL(msg)Short-hand to return an RResult<T> in an error state; the RError is implicitly converted into RResult...Definition RError.hxx:290; RField.hxx; RNTupleModel.hxx; RNTupleWriter.hxx; f#define f(i)Definition RSha256.hxx:104; StringUtils.hxx; targetOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t targetDefinition TGWin",MatchSource.WIKI,doc/master/RNTupleModel_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleModel_8cxx_source.html
https://root.cern/doc/master/RNTupleModel_8cxx_source.html:6339,Deployability,release,release,6339,"ROR(result);; 128 for (const auto &f : *field) {; 129 result = EnsureValidMapping(&f, fieldMap);; 130 if (!result); 131 return R__FORWARD_ERROR(result);; 132 }; 133 ; 134 fFieldMap.insert(fieldMap.begin(), fieldMap.end());; 135 fFieldZero->Attach(std::move(field));; 136 return RResult<void>::Success();; 137}; 138 ; 139const ROOT::Experimental::RFieldBase *; 140ROOT::Experimental::Internal::RProjectedFields::GetSourceField(const RFieldBase *target) const; 141{; 142 if (auto it = fFieldMap.find(target); it != fFieldMap.end()); 143 return it->second;; 144 return nullptr;; 145}; 146 ; 147std::unique_ptr<ROOT::Experimental::Internal::RProjectedFields>; 148ROOT::Experimental::Internal::RProjectedFields::Clone(const RNTupleModel &newModel) const; 149{; 150 auto cloneFieldZero = std::unique_ptr<RFieldZero>(static_cast<RFieldZero *>(fFieldZero->Clone("""").release()));; 151 auto clone = std::unique_ptr<RProjectedFields>(new RProjectedFields(std::move(cloneFieldZero)));; 152 clone->fModel = &newModel;; 153 // TODO(jblomer): improve quadratic search to re-wire the field mappings given the new model and the cloned; 154 // projected fields. Not too critical as we generally expect a limited number of projected fields; 155 for (const auto &[k, v] : fFieldMap) {; 156 for (const auto &f : clone->GetFieldZero()) {; 157 if (f.GetQualifiedFieldName() == k->GetQualifiedFieldName()) {; 158 clone->fFieldMap[&f] = &newModel.GetConstField(v->GetQualifiedFieldName());; 159 break;; 160 }; 161 }; 162 }; 163 return clone;; 164}; 165 ; 166ROOT::Experimental::RNTupleModel::RUpdater::RUpdater(RNTupleWriter &writer); 167 : fWriter(writer), fOpenChangeset(fWriter.GetUpdatableModel()); 168{; 169}; 170 ; 171void ROOT::Experimental::RNTupleModel::RUpdater::BeginUpdate(); 172{; 173 fOpenChangeset.fModel.Unfreeze();; 174 // We set the model ID to zero until CommitUpdate(). That prevents calls to RNTupleWriter::Fill() in the middle; 175 // of updates; 176 std::swap(fOpenChangeset.fModel.fModelId, fNewModelId",MatchSource.WIKI,doc/master/RNTupleModel_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleModel_8cxx_source.html
https://root.cern/doc/master/RNTupleModel_8cxx_source.html:7416,Deployability,update,updates,7416,"lds>(new RProjectedFields(std::move(cloneFieldZero)));; 152 clone->fModel = &newModel;; 153 // TODO(jblomer): improve quadratic search to re-wire the field mappings given the new model and the cloned; 154 // projected fields. Not too critical as we generally expect a limited number of projected fields; 155 for (const auto &[k, v] : fFieldMap) {; 156 for (const auto &f : clone->GetFieldZero()) {; 157 if (f.GetQualifiedFieldName() == k->GetQualifiedFieldName()) {; 158 clone->fFieldMap[&f] = &newModel.GetConstField(v->GetQualifiedFieldName());; 159 break;; 160 }; 161 }; 162 }; 163 return clone;; 164}; 165 ; 166ROOT::Experimental::RNTupleModel::RUpdater::RUpdater(RNTupleWriter &writer); 167 : fWriter(writer), fOpenChangeset(fWriter.GetUpdatableModel()); 168{; 169}; 170 ; 171void ROOT::Experimental::RNTupleModel::RUpdater::BeginUpdate(); 172{; 173 fOpenChangeset.fModel.Unfreeze();; 174 // We set the model ID to zero until CommitUpdate(). That prevents calls to RNTupleWriter::Fill() in the middle; 175 // of updates; 176 std::swap(fOpenChangeset.fModel.fModelId, fNewModelId);; 177}; 178 ; 179void ROOT::Experimental::RNTupleModel::RUpdater::CommitUpdate(); 180{; 181 fOpenChangeset.fModel.Freeze();; 182 std::swap(fOpenChangeset.fModel.fModelId, fNewModelId);; 183 if (fOpenChangeset.IsEmpty()); 184 return;; 185 Internal::RNTupleModelChangeset toCommit{fOpenChangeset.fModel};; 186 std::swap(fOpenChangeset.fAddedFields, toCommit.fAddedFields);; 187 std::swap(fOpenChangeset.fAddedProjectedFields, toCommit.fAddedProjectedFields);; 188 fWriter.GetSink().UpdateSchema(toCommit, fWriter.GetNEntries());; 189}; 190 ; 191void ROOT::Experimental::RNTupleModel::RUpdater::AddField(std::unique_ptr<RFieldBase> field); 192{; 193 auto fieldp = field.get();; 194 fOpenChangeset.fModel.AddField(std::move(field));; 195 fOpenChangeset.fAddedFields.emplace_back(fieldp);; 196}; 197 ; 198ROOT::Experimental::RResult<void>; 199ROOT::Experimental::RNTupleModel::RUpdater::AddProjectedField(std::unique_ptr<",MatchSource.WIKI,doc/master/RNTupleModel_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleModel_8cxx_source.html
https://root.cern/doc/master/RNTupleModel_8cxx_source.html:10985,Deployability,release,release,10985,"NTupleModel>(new RNTupleModel(std::move(fieldZero)));; 245 model->fProjectedFields = std::make_unique<Internal::RProjectedFields>(*model);; 246 return model;; 247}; 248 ; 249std::unique_ptr<ROOT::Experimental::RNTupleModel> ROOT::Experimental::RNTupleModel::Create(); 250{; 251 return Create(std::make_unique<RFieldZero>());; 252}; 253 ; 254std::unique_ptr<ROOT::Experimental::RNTupleModel>; 255ROOT::Experimental::RNTupleModel::Create(std::unique_ptr<RFieldZero> fieldZero); 256{; 257 auto model = CreateBare(std::move(fieldZero));; 258 model->fDefaultEntry = std::unique_ptr<REntry>(new REntry(model->fModelId, model->fSchemaId));; 259 return model;; 260}; 261 ; 262std::unique_ptr<ROOT::Experimental::RNTupleModel> ROOT::Experimental::RNTupleModel::Clone() const; 263{; 264 auto cloneModel = std::unique_ptr<RNTupleModel>(; 265 new RNTupleModel(std::unique_ptr<RFieldZero>(static_cast<RFieldZero *>(fFieldZero->Clone("""").release()))));; 266 cloneModel->fModelId = GetNewModelId();; 267 // For a frozen model, we can keep the schema id because adding new fields is forbidden. It is reset in Unfreeze(); 268 // if called by the user.; 269 if (fIsFrozen) {; 270 cloneModel->fSchemaId = fSchemaId;; 271 } else {; 272 cloneModel->fSchemaId = cloneModel->fModelId;; 273 }; 274 cloneModel->fIsFrozen = fIsFrozen;; 275 cloneModel->fFieldNames = fFieldNames;; 276 cloneModel->fDescription = fDescription;; 277 cloneModel->fProjectedFields = fProjectedFields->Clone(*cloneModel);; 278 cloneModel->fRegisteredSubfields = fRegisteredSubfields;; 279 if (fDefaultEntry) {; 280 cloneModel->fDefaultEntry = std::unique_ptr<REntry>(new REntry(cloneModel->fModelId, cloneModel->fSchemaId));; 281 for (const auto &f : cloneModel->fFieldZero->GetSubFields()) {; 282 cloneModel->fDefaultEntry->AddValue(f->CreateValue());; 283 }; 284 for (const auto &f : cloneModel->fRegisteredSubfields) {; 285 cloneModel->AddSubfield(f, *cloneModel->fDefaultEntry);; 286 }; 287 }; 288 return cloneModel;; 289}; 290 ; 291ROOT::Experim",MatchSource.WIKI,doc/master/RNTupleModel_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleModel_8cxx_source.html
https://root.cern/doc/master/RNTupleModel_8cxx_source.html:34974,Integrability,wrap,wraps,34974,"rSize() constDefinition RNTupleWriteOptions.hxx:112; ROOT::Experimental::RNTupleWriteOptions::GetInitialNElementsPerPagestd::size_t GetInitialNElementsPerPage() constDefinition RNTupleWriteOptions.hxx:118; ROOT::Experimental::RNTupleWriteOptions::GetUseBufferedWritebool GetUseBufferedWrite() constDefinition RNTupleWriteOptions.hxx:127; ROOT::Experimental::RNTupleWriteOptions::GetMaxUnzippedPageSizestd::size_t GetMaxUnzippedPageSize() constDefinition RNTupleWriteOptions.hxx:121; ROOT::Experimental::RNTupleWriteOptions::GetUseImplicitMTEImplicitMT GetUseImplicitMT() constDefinition RNTupleWriteOptions.hxx:136; ROOT::Experimental::RNTupleWriteOptions::EImplicitMT::kDefault@ kDefault; ROOT::Experimental::RNTupleWriterAn RNTuple that gets filled with entries (data) and writes them to storage.Definition RNTupleWriter.hxx:60; ROOT::Experimental::RResultBase::Throwvoid Throw()Throws an RException with fError.Definition RError.cxx:67; ROOT::Experimental::RResultThe class is used as a return type for operations that can fail; wraps a value of type T or an RError...Definition RError.hxx:194; ROOT::Experimental::Internal::GetProjectedFieldsOfModelRProjectedFields & GetProjectedFieldsOfModel(RNTupleModel &model)Definition RNTupleModel.cxx:42; ROOT::Experimental::Internal::GetFieldZeroOfModelRFieldZero & GetFieldZeroOfModel(RNTupleModel &model)Definition RNTupleModel.cxx:36; ROOT::Experimental::kLeaf@ kLeafDefinition RNTupleUtil.hxx:112; ROOT::Experimental::kRecord@ kRecordDefinition RNTupleUtil.hxx:112; ROOT::Experimental::kCollection@ kCollectionDefinition RNTupleUtil.hxx:112; ROOT::Experimental::kStreamer@ kStreamerDefinition RNTupleUtil.hxx:112; ROOT::Experimental::kVariant@ kVariantDefinition RNTupleUtil.hxx:112; ROOT::Splitstd::vector< std::string > Split(std::string_view str, std::string_view delims, bool skipEmpty=false)Splits a string at each character in delims.Definition StringUtils.cxx:23; writerDefinition writer.py:1; v@ vDefinition rootcling_impl.cxx:3699; ROOT::Expe",MatchSource.WIKI,doc/master/RNTupleModel_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleModel_8cxx_source.html
https://root.cern/doc/master/RNTupleModel_8cxx_source.html:30143,Security,access,access,30143,"ConstField(std::string_view fieldName) constDefinition RNTupleModel.cxx:417; ROOT::Experimental::RNTupleModel::fSchemaIdstd::uint64_t fSchemaIdModels have a separate schema ID to remember that the clone of a frozen model still has the same sche...Definition RNTupleModel.hxx:213; ROOT::Experimental::RNTupleModel::GetTokenREntry::RFieldToken GetToken(std::string_view fieldName) constCreates a token to be used in REntry methods to address a field present in the entry.Definition RNTupleModel.cxx:470; ROOT::Experimental::RNTupleModel::EnsureNotBarevoid EnsureNotBare() constThrows an RException if fDefaultEntry is nullptr.Definition RNTupleModel.cxx:226; ROOT::Experimental::RNTupleModel::Clonestd::unique_ptr< RNTupleModel > Clone() constDefinition RNTupleModel.cxx:262; ROOT::Experimental::RNTupleModel::EnsureNotFrozenvoid EnsureNotFrozen() constThrows an RException if fFrozen is true.Definition RNTupleModel.cxx:220; ROOT::Experimental::RNTupleModel::GetMutableFieldZeroRFieldZero & GetMutableFieldZero()Mutable access to the root field is used to make adjustments to the fields.Definition RNTupleModel.cxx:399; ROOT::Experimental::RNTupleModel::GetDefaultEntryREntry & GetDefaultEntry()Definition RNTupleModel.cxx:426; ROOT::Experimental::RNTupleModel::EstimateWriteMemoryUsagestd::size_t EstimateWriteMemoryUsage(const RNTupleWriteOptions &options=RNTupleWriteOptions()) constEstimate the memory usage for this model during writing.Definition RNTupleModel.cxx:518; ROOT::Experimental::RNTupleModel::CreateBareEntrystd::unique_ptr< REntry > CreateBareEntry() constIn a bare entry, all values point to nullptr.Definition RNTupleModel.cxx:455; ROOT::Experimental::RNTupleModel::CreateEntrystd::unique_ptr< REntry > CreateEntry() constDefinition RNTupleModel.cxx:440; ROOT::Experimental::RNTupleModel::CreateBulkRFieldBase::RBulk CreateBulk(std::string_view fieldName) constCalls the given field's CreateBulk() method. Throws an exception if no field with the given name exis...Definition RNTuple",MatchSource.WIKI,doc/master/RNTupleModel_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleModel_8cxx_source.html
https://root.cern/doc/master/RNTupleModel_8cxx_source.html:33088,Security,access,accessed,33088,a top-level field or a nested field. Returns nullptr if the field is not in the...Definition RNTupleModel.cxx:291; ROOT::Experimental::RNTupleModel::RNTupleModelRNTupleModel(std::unique_ptr< RFieldZero > fieldZero)Definition RNTupleModel.cxx:232; ROOT::Experimental::RNTupleModel::GetMutableFieldRFieldBase & GetMutableField(std::string_view fieldName)Definition RNTupleModel.cxx:406; ROOT::Experimental::RNTupleModel::Freezevoid Freeze()Definition RNTupleModel.cxx:507; ROOT::Experimental::RNTupleModel::CreateBarestatic std::unique_ptr< RNTupleModel > CreateBare()A bare model has no default entry.Definition RNTupleModel.cxx:236; ROOT::Experimental::RNTupleModel::IsFrozenbool IsFrozen() constDefinition RNTupleModel.hxx:363; ROOT::Experimental::RNTupleModel::AddFieldvoid AddField(std::unique_ptr< RFieldBase > field)Adds a field whose type is not known at compile time.Definition RNTupleModel.cxx:312; ROOT::Experimental::RNTupleModel::RegisterSubfieldvoid RegisterSubfield(std::string_view qualifiedFieldName)Register a subfield so it can be accessed directly from entries belonging to the model.Definition RNTupleModel.cxx:335; ROOT::Experimental::RNTupleModel::Unfreezevoid Unfreeze()Definition RNTupleModel.cxx:493; ROOT::Experimental::RNTupleModel::fFieldZerostd::unique_ptr< RFieldZero > fFieldZeroHierarchy of fields consisting of simple types and collections (sub trees)Definition RNTupleModel.hxx:198; ROOT::Experimental::RNTupleWriteOptionsCommon user-tunable settings for storing ntuples.Definition RNTupleWriteOptions.hxx:48; ROOT::Experimental::RNTupleWriteOptions::GetCompressionint GetCompression() constDefinition RNTupleWriteOptions.hxx:105; ROOT::Experimental::RNTupleWriteOptions::GetPageBufferBudgetstd::size_t GetPageBufferBudget() constDefinition RNTupleWriteOptions.cxx:77; ROOT::Experimental::RNTupleWriteOptions::GetApproxZippedClusterSizestd::size_t GetApproxZippedClusterSize() constDefinition RNTupleWriteOptions.hxx:112; ROOT::Experimental::RNTupleWriteOptions::GetI,MatchSource.WIKI,doc/master/RNTupleModel_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleModel_8cxx_source.html
https://root.cern/doc/master/RNTupleModel_8cxx_source.html:33383,Usability,simpl,simple,33383,tMutableField(std::string_view fieldName)Definition RNTupleModel.cxx:406; ROOT::Experimental::RNTupleModel::Freezevoid Freeze()Definition RNTupleModel.cxx:507; ROOT::Experimental::RNTupleModel::CreateBarestatic std::unique_ptr< RNTupleModel > CreateBare()A bare model has no default entry.Definition RNTupleModel.cxx:236; ROOT::Experimental::RNTupleModel::IsFrozenbool IsFrozen() constDefinition RNTupleModel.hxx:363; ROOT::Experimental::RNTupleModel::AddFieldvoid AddField(std::unique_ptr< RFieldBase > field)Adds a field whose type is not known at compile time.Definition RNTupleModel.cxx:312; ROOT::Experimental::RNTupleModel::RegisterSubfieldvoid RegisterSubfield(std::string_view qualifiedFieldName)Register a subfield so it can be accessed directly from entries belonging to the model.Definition RNTupleModel.cxx:335; ROOT::Experimental::RNTupleModel::Unfreezevoid Unfreeze()Definition RNTupleModel.cxx:493; ROOT::Experimental::RNTupleModel::fFieldZerostd::unique_ptr< RFieldZero > fFieldZeroHierarchy of fields consisting of simple types and collections (sub trees)Definition RNTupleModel.hxx:198; ROOT::Experimental::RNTupleWriteOptionsCommon user-tunable settings for storing ntuples.Definition RNTupleWriteOptions.hxx:48; ROOT::Experimental::RNTupleWriteOptions::GetCompressionint GetCompression() constDefinition RNTupleWriteOptions.hxx:105; ROOT::Experimental::RNTupleWriteOptions::GetPageBufferBudgetstd::size_t GetPageBufferBudget() constDefinition RNTupleWriteOptions.cxx:77; ROOT::Experimental::RNTupleWriteOptions::GetApproxZippedClusterSizestd::size_t GetApproxZippedClusterSize() constDefinition RNTupleWriteOptions.hxx:112; ROOT::Experimental::RNTupleWriteOptions::GetInitialNElementsPerPagestd::size_t GetInitialNElementsPerPage() constDefinition RNTupleWriteOptions.hxx:118; ROOT::Experimental::RNTupleWriteOptions::GetUseBufferedWritebool GetUseBufferedWrite() constDefinition RNTupleWriteOptions.hxx:127; ROOT::Experimental::RNTupleWriteOptions::GetMaxUnzippedPageSizestd::size,MatchSource.WIKI,doc/master/RNTupleModel_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleModel_8cxx_source.html
https://root.cern/doc/master/RNTupleModel_8hxx.html:556,Integrability,depend,dependency,556,". ROOT: tree/ntuple/v7/inc/ROOT/RNTupleModel.hxx File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Functions ; RNTupleModel.hxx File ReferenceNTuple-related classes | ROOT7 classes. #include <ROOT/REntry.hxx>; #include <ROOT/RError.hxx>; #include <ROOT/RField.hxx>; #include <ROOT/RNTupleUtil.hxx>; #include <string_view>; #include <cstdint>; #include <functional>; #include <memory>; #include <string>; #include <unordered_map>; #include <unordered_set>; #include <utility>. Include dependency graph for RNTupleModel.hxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; struct  ROOT::Experimental::RNTupleModel::NameWithDescription_t;  A wrapper over a field name and an optional description; used in AddField() and RUpdater::AddField() More...;  ; class  ROOT::Experimental::RNTupleModel;  The RNTupleModel encapulates the schema of an ntuple. More...;  ; class  ROOT::Experimental::Internal::RNTupleModelChangeset;  The incremental changes to a RNTupleModel More...;  ; class  ROOT::Experimental::Internal::RProjectedFields;  The projected fields of a RNTupleModel More...;  ; class  ROOT::Experimental::RNTupleModel::RUpdater;  A model is usually immutable after passing it to an RNTupleWriter. More...;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Experimental;  ; namespace  ROOT::Experimental::Internal;  . Functions; RFieldZero & ROOT::Experimental::Internal::GetFieldZeroOfModel (RNTupleModel &model);  ; RProjectedFields & ROOT::Experimental::Internal::GetProjectedFieldsOfModel (RNTupleModel &model);  . Detailed Description; AuthorJakob Blomer jb",MatchSource.WIKI,doc/master/RNTupleModel_8hxx.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleModel_8hxx.html
https://root.cern/doc/master/RNTupleModel_8hxx.html:915,Integrability,wrap,wrapper,915,". ROOT: tree/ntuple/v7/inc/ROOT/RNTupleModel.hxx File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Functions ; RNTupleModel.hxx File ReferenceNTuple-related classes | ROOT7 classes. #include <ROOT/REntry.hxx>; #include <ROOT/RError.hxx>; #include <ROOT/RField.hxx>; #include <ROOT/RNTupleUtil.hxx>; #include <string_view>; #include <cstdint>; #include <functional>; #include <memory>; #include <string>; #include <unordered_map>; #include <unordered_set>; #include <utility>. Include dependency graph for RNTupleModel.hxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; struct  ROOT::Experimental::RNTupleModel::NameWithDescription_t;  A wrapper over a field name and an optional description; used in AddField() and RUpdater::AddField() More...;  ; class  ROOT::Experimental::RNTupleModel;  The RNTupleModel encapulates the schema of an ntuple. More...;  ; class  ROOT::Experimental::Internal::RNTupleModelChangeset;  The incremental changes to a RNTupleModel More...;  ; class  ROOT::Experimental::Internal::RProjectedFields;  The projected fields of a RNTupleModel More...;  ; class  ROOT::Experimental::RNTupleModel::RUpdater;  A model is usually immutable after passing it to an RNTupleWriter. More...;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Experimental;  ; namespace  ROOT::Experimental::Internal;  . Functions; RFieldZero & ROOT::Experimental::Internal::GetFieldZeroOfModel (RNTupleModel &model);  ; RProjectedFields & ROOT::Experimental::Internal::GetProjectedFieldsOfModel (RNTupleModel &model);  . Detailed Description; AuthorJakob Blomer jb",MatchSource.WIKI,doc/master/RNTupleModel_8hxx.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleModel_8hxx.html
https://root.cern/doc/master/RNTupleModel_8hxx_source.html:19301,Availability,error,error,19301,ription() const { return fDescription; }; 387 void SetDescription(std::string_view description);; 388 ; 389 /// Get the (qualified) names of subfields that have been registered to be included in entries from this model.; 390 const std::unordered_set<std::string> &GetRegisteredSubfields() const { return fRegisteredSubfields; }; 391 ; 392 /// Estimate the memory usage for this model during writing; 393 ///; 394 /// This will return an estimate in bytes for the internal page and compression buffers. The value should be; 395 /// understood per sequential RNTupleWriter or per RNTupleFillContext created for a RNTupleParallelWriter; 396 /// constructed with this model.; 397 std::size_t EstimateWriteMemoryUsage(const RNTupleWriteOptions &options = RNTupleWriteOptions()) const;; 398};; 399 ; 400} // namespace Experimental; 401} // namespace ROOT; 402 ; 403#endif; REntry.hxx; RError.hxx; RField.hxx; RNTupleUtil.hxx; f#define f(i)Definition RSha256.hxx:104; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; targetOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t targetDefinition TGWin32VirtualXProxy.cxx:247; namechar name[80]Definition TGX11.cxx:110; ROOT::Experimental::Internal::RProjectedFieldsThe projected fiel,MatchSource.WIKI,doc/master/RNTupleModel_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleModel_8hxx_source.html
https://root.cern/doc/master/RNTupleModel_8hxx_source.html:4598,Deployability,update,updates,4598,"RProjectedFields &&) = default;; 84 ~RProjectedFields() = default;; 85 ; 86 /// The new model needs to be a clone of fModel; 87 std::unique_ptr<RProjectedFields> Clone(const RNTupleModel &newModel) const;; 88 ; 89 RFieldZero &GetFieldZero() { return *fFieldZero; }; 90 const RFieldBase *GetSourceField(const RFieldBase *target) const;; 91 /// Adds a new projected field. The field map needs to provide valid source fields of fModel for 'field'; 92 /// and each of its sub fields.; 93 RResult<void> Add(std::unique_ptr<RFieldBase> field, const FieldMap_t &fieldMap);; 94 bool IsEmpty() const { return fFieldZero->begin() == fFieldZero->end(); }; 95};; 96 ; 97// clang-format off; 98/**; 99\class ROOT::Experimental::Internal::RNTupleModelChangeset; 100\ingroup NTuple; 101\brief The incremental changes to a `RNTupleModel`; 102 ; 103Represents a set of alterations to a `RNTupleModel` that happened after the model is used to initialize a `RPageSink`; 104instance. This object can be used to communicate metadata updates to a `RPageSink`.; 105You will not normally use this directly; see `RNTupleModel::RUpdater` instead.; 106*/; 107// clang-format on; 108struct RNTupleModelChangeset {; 109 RNTupleModel &fModel;; 110 /// Points to the fields in fModel that were added as part of an updater transaction; 111 std::vector<RFieldBase *> fAddedFields;; 112 /// Points to the projected fields in fModel that were added as part of an updater transaction; 113 std::vector<RFieldBase *> fAddedProjectedFields;; 114 ; 115 RNTupleModelChangeset(RNTupleModel &model) : fModel(model) {}; 116 bool IsEmpty() const { return fAddedFields.empty() && fAddedProjectedFields.empty(); }; 117};; 118 ; 119} // namespace Internal; 120 ; 121// clang-format off; 122/**; 123\class ROOT::Experimental::RNTupleModel; 124\ingroup NTuple; 125\brief The RNTupleModel encapulates the schema of an ntuple.; 126 ; 127The ntuple model comprises a collection of hierarchically organized fields. From a model, ""entries""; 128can be extr",MatchSource.WIKI,doc/master/RNTupleModel_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleModel_8hxx_source.html
https://root.cern/doc/master/RNTupleModel_8hxx_source.html:4869,Deployability,update,updater,4869,"The field map needs to provide valid source fields of fModel for 'field'; 92 /// and each of its sub fields.; 93 RResult<void> Add(std::unique_ptr<RFieldBase> field, const FieldMap_t &fieldMap);; 94 bool IsEmpty() const { return fFieldZero->begin() == fFieldZero->end(); }; 95};; 96 ; 97// clang-format off; 98/**; 99\class ROOT::Experimental::Internal::RNTupleModelChangeset; 100\ingroup NTuple; 101\brief The incremental changes to a `RNTupleModel`; 102 ; 103Represents a set of alterations to a `RNTupleModel` that happened after the model is used to initialize a `RPageSink`; 104instance. This object can be used to communicate metadata updates to a `RPageSink`.; 105You will not normally use this directly; see `RNTupleModel::RUpdater` instead.; 106*/; 107// clang-format on; 108struct RNTupleModelChangeset {; 109 RNTupleModel &fModel;; 110 /// Points to the fields in fModel that were added as part of an updater transaction; 111 std::vector<RFieldBase *> fAddedFields;; 112 /// Points to the projected fields in fModel that were added as part of an updater transaction; 113 std::vector<RFieldBase *> fAddedProjectedFields;; 114 ; 115 RNTupleModelChangeset(RNTupleModel &model) : fModel(model) {}; 116 bool IsEmpty() const { return fAddedFields.empty() && fAddedProjectedFields.empty(); }; 117};; 118 ; 119} // namespace Internal; 120 ; 121// clang-format off; 122/**; 123\class ROOT::Experimental::RNTupleModel; 124\ingroup NTuple; 125\brief The RNTupleModel encapulates the schema of an ntuple.; 126 ; 127The ntuple model comprises a collection of hierarchically organized fields. From a model, ""entries""; 128can be extracted. For convenience, the model provides a default entry unless it is created as a ""bare model"".; 129Models have a unique model identifier that faciliates checking whether entries are compatible with it; 130(i.e.: have been extracted from that model).; 131 ; 132A model is subject to a state transition during its lifetime: it starts in a building state, in which fields",MatchSource.WIKI,doc/master/RNTupleModel_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleModel_8hxx_source.html
https://root.cern/doc/master/RNTupleModel_8hxx_source.html:5014,Deployability,update,updater,5014,"The field map needs to provide valid source fields of fModel for 'field'; 92 /// and each of its sub fields.; 93 RResult<void> Add(std::unique_ptr<RFieldBase> field, const FieldMap_t &fieldMap);; 94 bool IsEmpty() const { return fFieldZero->begin() == fFieldZero->end(); }; 95};; 96 ; 97// clang-format off; 98/**; 99\class ROOT::Experimental::Internal::RNTupleModelChangeset; 100\ingroup NTuple; 101\brief The incremental changes to a `RNTupleModel`; 102 ; 103Represents a set of alterations to a `RNTupleModel` that happened after the model is used to initialize a `RPageSink`; 104instance. This object can be used to communicate metadata updates to a `RPageSink`.; 105You will not normally use this directly; see `RNTupleModel::RUpdater` instead.; 106*/; 107// clang-format on; 108struct RNTupleModelChangeset {; 109 RNTupleModel &fModel;; 110 /// Points to the fields in fModel that were added as part of an updater transaction; 111 std::vector<RFieldBase *> fAddedFields;; 112 /// Points to the projected fields in fModel that were added as part of an updater transaction; 113 std::vector<RFieldBase *> fAddedProjectedFields;; 114 ; 115 RNTupleModelChangeset(RNTupleModel &model) : fModel(model) {}; 116 bool IsEmpty() const { return fAddedFields.empty() && fAddedProjectedFields.empty(); }; 117};; 118 ; 119} // namespace Internal; 120 ; 121// clang-format off; 122/**; 123\class ROOT::Experimental::RNTupleModel; 124\ingroup NTuple; 125\brief The RNTupleModel encapulates the schema of an ntuple.; 126 ; 127The ntuple model comprises a collection of hierarchically organized fields. From a model, ""entries""; 128can be extracted. For convenience, the model provides a default entry unless it is created as a ""bare model"".; 129Models have a unique model identifier that faciliates checking whether entries are compatible with it; 130(i.e.: have been extracted from that model).; 131 ; 132A model is subject to a state transition during its lifetime: it starts in a building state, in which fields",MatchSource.WIKI,doc/master/RNTupleModel_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleModel_8hxx_source.html
https://root.cern/doc/master/RNTupleModel_8hxx_source.html:7516,Deployability,update,updates,7516,"ly qualified field names. The mapping function is called with the qualified field names of the provided; 143 /// field and the subfields. It should return the qualified field names used as a mapping source.; 144 using FieldMappingFunc_t = std::function<std::string(const std::string &)>;; 145 ; 146 /// A wrapper over a field name and an optional description; used in `AddField()` and `RUpdater::AddField()`; 147 struct NameWithDescription_t {; 148 NameWithDescription_t(const char *name) : fName(name) {}; 149 NameWithDescription_t(const std::string &name) : fName(name) {}; 150 NameWithDescription_t(std::string_view name) : fName(name) {}; 151 NameWithDescription_t(std::string_view name, std::string_view descr) : fName(name), fDescription(descr) {}; 152 ; 153 std::string_view fName;; 154 std::string_view fDescription = """";; 155 };; 156 ; 157 /// A model is usually immutable after passing it to an `RNTupleWriter`. However, for the rare; 158 /// cases that require changing the model after the fact, `RUpdater` provides limited support for; 159 /// incremental updates, e.g. addition of new fields.; 160 ///; 161 /// See `RNTupleWriter::CreateModelUpdater()` for an example.; 162 class RUpdater {; 163 private:; 164 RNTupleWriter &fWriter;; 165 Internal::RNTupleModelChangeset fOpenChangeset;; 166 std::uint64_t fNewModelId = 0; ///< The model ID after committing; 167 ; 168 public:; 169 explicit RUpdater(RNTupleWriter &writer);; 170 ~RUpdater() { CommitUpdate(); }; 171 /// Begin a new set of alterations to the underlying model. As a side effect, all `REntry` instances related to; 172 /// the model are invalidated.; 173 void BeginUpdate();; 174 /// Commit changes since the last call to `BeginUpdate()`. All the invalidated `REntry`s remain invalid.; 175 /// `CreateEntry()` or `CreateBareEntry()` can be used to create an `REntry` that matching the new model.; 176 /// Upon completion, `BeginUpdate()` can be called again to begin a new set of changes.; 177 void CommitUpdate();; 178 ; 1",MatchSource.WIKI,doc/master/RNTupleModel_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleModel_8hxx_source.html
https://root.cern/doc/master/RNTupleModel_8hxx_source.html:33862,Deployability,update,updater,33862,"that gets filled with entries (data) and writes them to storage.Definition RNTupleWriter.hxx:60; ROOT::Experimental::RResultThe class is used as a return type for operations that can fail; wraps a value of type T or an RError...Definition RError.hxx:194; ROOT::Experimental::Internal::GetProjectedFieldsOfModelRProjectedFields & GetProjectedFieldsOfModel(RNTupleModel &model)Definition RNTupleModel.cxx:42; ROOT::Experimental::Internal::GetFieldZeroOfModelRFieldZero & GetFieldZeroOfModel(RNTupleModel &model)Definition RNTupleModel.cxx:36; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; writerDefinition writer.py:1; ROOT::Experimental::Internal::RNTupleModelChangesetThe incremental changes to a RNTupleModelDefinition RNTupleModel.hxx:108; ROOT::Experimental::Internal::RNTupleModelChangeset::fAddedProjectedFieldsstd::vector< RFieldBase * > fAddedProjectedFieldsPoints to the projected fields in fModel that were added as part of an updater transaction.Definition RNTupleModel.hxx:113; ROOT::Experimental::Internal::RNTupleModelChangeset::fAddedFieldsstd::vector< RFieldBase * > fAddedFieldsPoints to the fields in fModel that were added as part of an updater transaction.Definition RNTupleModel.hxx:111; ROOT::Experimental::Internal::RNTupleModelChangeset::fModelRNTupleModel & fModelDefinition RNTupleModel.hxx:109; ROOT::Experimental::Internal::RNTupleModelChangeset::RNTupleModelChangesetRNTupleModelChangeset(RNTupleModel &model)Definition RNTupleModel.hxx:115; ROOT::Experimental::Internal::RNTupleModelChangeset::IsEmptybool IsEmpty() constDefinition RNTupleModel.hxx:116; ROOT::Experimental::RNTupleModel::NameWithDescription_tA wrapper over a field name and an optional description; used in AddField() and RUpdater::AddField()Definition RNTupleModel.hxx:147; ROOT::Experimental::RNTupleModel::NameWithDescription_t::NameWithDescripti",MatchSource.WIKI,doc/master/RNTupleModel_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleModel_8hxx_source.html
https://root.cern/doc/master/RNTupleModel_8hxx_source.html:34081,Deployability,update,updater,34081,"ition RError.hxx:194; ROOT::Experimental::Internal::GetProjectedFieldsOfModelRProjectedFields & GetProjectedFieldsOfModel(RNTupleModel &model)Definition RNTupleModel.cxx:42; ROOT::Experimental::Internal::GetFieldZeroOfModelRFieldZero & GetFieldZeroOfModel(RNTupleModel &model)Definition RNTupleModel.cxx:36; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; writerDefinition writer.py:1; ROOT::Experimental::Internal::RNTupleModelChangesetThe incremental changes to a RNTupleModelDefinition RNTupleModel.hxx:108; ROOT::Experimental::Internal::RNTupleModelChangeset::fAddedProjectedFieldsstd::vector< RFieldBase * > fAddedProjectedFieldsPoints to the projected fields in fModel that were added as part of an updater transaction.Definition RNTupleModel.hxx:113; ROOT::Experimental::Internal::RNTupleModelChangeset::fAddedFieldsstd::vector< RFieldBase * > fAddedFieldsPoints to the fields in fModel that were added as part of an updater transaction.Definition RNTupleModel.hxx:111; ROOT::Experimental::Internal::RNTupleModelChangeset::fModelRNTupleModel & fModelDefinition RNTupleModel.hxx:109; ROOT::Experimental::Internal::RNTupleModelChangeset::RNTupleModelChangesetRNTupleModelChangeset(RNTupleModel &model)Definition RNTupleModel.hxx:115; ROOT::Experimental::Internal::RNTupleModelChangeset::IsEmptybool IsEmpty() constDefinition RNTupleModel.hxx:116; ROOT::Experimental::RNTupleModel::NameWithDescription_tA wrapper over a field name and an optional description; used in AddField() and RUpdater::AddField()Definition RNTupleModel.hxx:147; ROOT::Experimental::RNTupleModel::NameWithDescription_t::NameWithDescription_tNameWithDescription_t(const std::string &name)Definition RNTupleModel.hxx:149; ROOT::Experimental::RNTupleModel::NameWithDescription_t::NameWithDescription_tNameWithDescription_t(std::string_view name)Definition RNTupleModel.hxx:",MatchSource.WIKI,doc/master/RNTupleModel_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleModel_8hxx_source.html
https://root.cern/doc/master/RNTupleModel_8hxx_source.html:6753,Integrability,wrap,wrapper,6753,"nalized, the model gets frozen. Only frozen models can create entries.; 134*/; 135// clang-format on; 136class RNTupleModel {; 137 friend RFieldZero &Internal::GetFieldZeroOfModel(RNTupleModel &);; 138 friend Internal::RProjectedFields &Internal::GetProjectedFieldsOfModel(RNTupleModel &);; 139 ; 140public:; 141 /// User provided function that describes the mapping of existing source fields to projected fields in terms; 142 /// of fully qualified field names. The mapping function is called with the qualified field names of the provided; 143 /// field and the subfields. It should return the qualified field names used as a mapping source.; 144 using FieldMappingFunc_t = std::function<std::string(const std::string &)>;; 145 ; 146 /// A wrapper over a field name and an optional description; used in `AddField()` and `RUpdater::AddField()`; 147 struct NameWithDescription_t {; 148 NameWithDescription_t(const char *name) : fName(name) {}; 149 NameWithDescription_t(const std::string &name) : fName(name) {}; 150 NameWithDescription_t(std::string_view name) : fName(name) {}; 151 NameWithDescription_t(std::string_view name, std::string_view descr) : fName(name), fDescription(descr) {}; 152 ; 153 std::string_view fName;; 154 std::string_view fDescription = """";; 155 };; 156 ; 157 /// A model is usually immutable after passing it to an `RNTupleWriter`. However, for the rare; 158 /// cases that require changing the model after the fact, `RUpdater` provides limited support for; 159 /// incremental updates, e.g. addition of new fields.; 160 ///; 161 /// See `RNTupleWriter::CreateModelUpdater()` for an example.; 162 class RUpdater {; 163 private:; 164 RNTupleWriter &fWriter;; 165 Internal::RNTupleModelChangeset fOpenChangeset;; 166 std::uint64_t fNewModelId = 0; ///< The model ID after committing; 167 ; 168 public:; 169 explicit RUpdater(RNTupleWriter &writer);; 170 ~RUpdater() { CommitUpdate(); }; 171 /// Begin a new set of alterations to the underlying model. As a side effect, all `RE",MatchSource.WIKI,doc/master/RNTupleModel_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleModel_8hxx_source.html
https://root.cern/doc/master/RNTupleModel_8hxx_source.html:32959,Integrability,wrap,wraps,32959,"directly from entries belonging to the model.Definition RNTupleModel.cxx:335; ROOT::Experimental::RNTupleModel::operator=RNTupleModel & operator=(const RNTupleModel &)=delete; ROOT::Experimental::RNTupleModel::~RNTupleModel~RNTupleModel()=default; ROOT::Experimental::RNTupleModel::fIsFrozenbool fIsFrozenChanged by Freeze() / Unfreeze() and by the RUpdater.Definition RNTupleModel.hxx:215; ROOT::Experimental::RNTupleModel::Unfreezevoid Unfreeze()Definition RNTupleModel.cxx:493; ROOT::Experimental::RNTupleModel::fFieldZerostd::unique_ptr< RFieldZero > fFieldZeroHierarchy of fields consisting of simple types and collections (sub trees)Definition RNTupleModel.hxx:198; ROOT::Experimental::RNTupleWriteOptionsCommon user-tunable settings for storing ntuples.Definition RNTupleWriteOptions.hxx:48; ROOT::Experimental::RNTupleWriterAn RNTuple that gets filled with entries (data) and writes them to storage.Definition RNTupleWriter.hxx:60; ROOT::Experimental::RResultThe class is used as a return type for operations that can fail; wraps a value of type T or an RError...Definition RError.hxx:194; ROOT::Experimental::Internal::GetProjectedFieldsOfModelRProjectedFields & GetProjectedFieldsOfModel(RNTupleModel &model)Definition RNTupleModel.cxx:42; ROOT::Experimental::Internal::GetFieldZeroOfModelRFieldZero & GetFieldZeroOfModel(RNTupleModel &model)Definition RNTupleModel.cxx:36; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; writerDefinition writer.py:1; ROOT::Experimental::Internal::RNTupleModelChangesetThe incremental changes to a RNTupleModelDefinition RNTupleModel.hxx:108; ROOT::Experimental::Internal::RNTupleModelChangeset::fAddedProjectedFieldsstd::vector< RFieldBase * > fAddedProjectedFieldsPoints to the projected fields in fModel that were added as part of an updater transaction.Definition RNTupleModel.hxx:113; ROOT::Experim",MatchSource.WIKI,doc/master/RNTupleModel_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleModel_8hxx_source.html
https://root.cern/doc/master/RNTupleModel_8hxx_source.html:34566,Integrability,wrap,wrapper,34566,"The incremental changes to a RNTupleModelDefinition RNTupleModel.hxx:108; ROOT::Experimental::Internal::RNTupleModelChangeset::fAddedProjectedFieldsstd::vector< RFieldBase * > fAddedProjectedFieldsPoints to the projected fields in fModel that were added as part of an updater transaction.Definition RNTupleModel.hxx:113; ROOT::Experimental::Internal::RNTupleModelChangeset::fAddedFieldsstd::vector< RFieldBase * > fAddedFieldsPoints to the fields in fModel that were added as part of an updater transaction.Definition RNTupleModel.hxx:111; ROOT::Experimental::Internal::RNTupleModelChangeset::fModelRNTupleModel & fModelDefinition RNTupleModel.hxx:109; ROOT::Experimental::Internal::RNTupleModelChangeset::RNTupleModelChangesetRNTupleModelChangeset(RNTupleModel &model)Definition RNTupleModel.hxx:115; ROOT::Experimental::Internal::RNTupleModelChangeset::IsEmptybool IsEmpty() constDefinition RNTupleModel.hxx:116; ROOT::Experimental::RNTupleModel::NameWithDescription_tA wrapper over a field name and an optional description; used in AddField() and RUpdater::AddField()Definition RNTupleModel.hxx:147; ROOT::Experimental::RNTupleModel::NameWithDescription_t::NameWithDescription_tNameWithDescription_t(const std::string &name)Definition RNTupleModel.hxx:149; ROOT::Experimental::RNTupleModel::NameWithDescription_t::NameWithDescription_tNameWithDescription_t(std::string_view name)Definition RNTupleModel.hxx:150; ROOT::Experimental::RNTupleModel::NameWithDescription_t::NameWithDescription_tNameWithDescription_t(std::string_view name, std::string_view descr)Definition RNTupleModel.hxx:151; ROOT::Experimental::RNTupleModel::NameWithDescription_t::NameWithDescription_tNameWithDescription_t(const char *name)Definition RNTupleModel.hxx:148; ROOT::Experimental::RNTupleModel::NameWithDescription_t::fNamestd::string_view fNameDefinition RNTupleModel.hxx:153; ROOT::Experimental::RNTupleModel::NameWithDescription_t::fDescriptionstd::string_view fDescriptionDefinition RNTupleModel.hxx:154. treentup",MatchSource.WIKI,doc/master/RNTupleModel_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleModel_8hxx_source.html
https://root.cern/doc/master/RNTupleModel_8hxx_source.html:14445,Security,access,accessed,14445,"del::Create();; 290 /// auto hadronFlavour = model->MakeField<float>({; 291 /// ""hadronFlavour"", ""flavour from hadron ghost clustering""; 292 /// });; 293 /// ~~~; 294 template <typename T, typename... ArgsT>; 295 std::shared_ptr<T> MakeField(const NameWithDescription_t &fieldNameDesc, ArgsT &&...args); 296 {; 297 EnsureNotFrozen();; 298 EnsureValidFieldName(fieldNameDesc.fName);; 299 auto field = std::make_unique<RField<T>>(fieldNameDesc.fName);; 300 field->SetDescription(fieldNameDesc.fDescription);; 301 std::shared_ptr<T> ptr;; 302 if (fDefaultEntry); 303 ptr = fDefaultEntry->AddValue<T>(*field, std::forward<ArgsT>(args)...);; 304 fFieldNames.insert(field->GetFieldName());; 305 fFieldZero->Attach(std::move(field));; 306 return ptr;; 307 }; 308 ; 309 /// Adds a field whose type is not known at compile time. Thus there is no shared pointer returned.; 310 ///; 311 /// Throws an exception if the field is null.; 312 void AddField(std::unique_ptr<RFieldBase> field);; 313 ; 314 /// Register a subfield so it can be accessed directly from entries belonging to the model. Because registering a; 315 /// subfield does not fundamentally change the model, previously created entries will not be invalidated, nor; 316 /// modified in any way; a registered subfield is merely an accessor added to the default entry (if present) and any; 317 /// entries created afterwards.; 318 ///; 319 /// Using models with registered subfields for writing is not allowed. Attempting to do so will result in an; 320 /// exception.; 321 ///; 322 /// Throws an exception if the provided subfield could not be found in the model.; 323 void RegisterSubfield(std::string_view qualifiedFieldName);; 324 ; 325 /// Adds a top-level field based on existing fields.; 326 ///; 327 /// The mapping function takes one argument, which is a string containing the name of the projected field. The return; 328 /// value of the mapping function should be the name of the (existing) field onto which the projection is made.; 329 //",MatchSource.WIKI,doc/master/RNTupleModel_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleModel_8hxx_source.html
https://root.cern/doc/master/RNTupleModel_8hxx_source.html:14702,Security,access,accessor,14702,"r<T> MakeField(const NameWithDescription_t &fieldNameDesc, ArgsT &&...args); 296 {; 297 EnsureNotFrozen();; 298 EnsureValidFieldName(fieldNameDesc.fName);; 299 auto field = std::make_unique<RField<T>>(fieldNameDesc.fName);; 300 field->SetDescription(fieldNameDesc.fDescription);; 301 std::shared_ptr<T> ptr;; 302 if (fDefaultEntry); 303 ptr = fDefaultEntry->AddValue<T>(*field, std::forward<ArgsT>(args)...);; 304 fFieldNames.insert(field->GetFieldName());; 305 fFieldZero->Attach(std::move(field));; 306 return ptr;; 307 }; 308 ; 309 /// Adds a field whose type is not known at compile time. Thus there is no shared pointer returned.; 310 ///; 311 /// Throws an exception if the field is null.; 312 void AddField(std::unique_ptr<RFieldBase> field);; 313 ; 314 /// Register a subfield so it can be accessed directly from entries belonging to the model. Because registering a; 315 /// subfield does not fundamentally change the model, previously created entries will not be invalidated, nor; 316 /// modified in any way; a registered subfield is merely an accessor added to the default entry (if present) and any; 317 /// entries created afterwards.; 318 ///; 319 /// Using models with registered subfields for writing is not allowed. Attempting to do so will result in an; 320 /// exception.; 321 ///; 322 /// Throws an exception if the provided subfield could not be found in the model.; 323 void RegisterSubfield(std::string_view qualifiedFieldName);; 324 ; 325 /// Adds a top-level field based on existing fields.; 326 ///; 327 /// The mapping function takes one argument, which is a string containing the name of the projected field. The return; 328 /// value of the mapping function should be the name of the (existing) field onto which the projection is made.; 329 /// **Example**; 330 /// ~~~ {.cpp}; 331 /// auto model = RNTupleModel::Create();; 332 /// model->MakeField<float>(""met"");; 333 /// auto metProjection = RFieldBase::Create(""missingE"", ""float"").Unwrap();; 334 /// model->AddProject",MatchSource.WIKI,doc/master/RNTupleModel_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleModel_8hxx_source.html
https://root.cern/doc/master/RNTupleModel_8hxx_source.html:17920,Security,access,access,17920,"que_ptr<RFieldBase> field, FieldMappingFunc_t mapping);; 360 ; 361 void Freeze();; 362 void Unfreeze();; 363 bool IsFrozen() const { return fIsFrozen; }; 364 bool IsBare() const { return !fDefaultEntry; }; 365 std::uint64_t GetModelId() const { return fModelId; }; 366 std::uint64_t GetSchemaId() const { return fSchemaId; }; 367 ; 368 std::unique_ptr<REntry> CreateEntry() const;; 369 /// In a bare entry, all values point to nullptr. The resulting entry shall use BindValue() in order; 370 /// set memory addresses to be serialized / deserialized; 371 std::unique_ptr<REntry> CreateBareEntry() const;; 372 /// Creates a token to be used in REntry methods to address a field present in the entry; 373 REntry::RFieldToken GetToken(std::string_view fieldName) const;; 374 /// Calls the given field's CreateBulk() method. Throws an exception if no field with the given name exists.; 375 RFieldBase::RBulk CreateBulk(std::string_view fieldName) const;; 376 ; 377 REntry &GetDefaultEntry();; 378 const REntry &GetDefaultEntry() const;; 379 ; 380 /// Mutable access to the root field is used to make adjustments to the fields.; 381 RFieldZero &GetMutableFieldZero();; 382 const RFieldZero &GetConstFieldZero() const { return *fFieldZero; }; 383 RFieldBase &GetMutableField(std::string_view fieldName);; 384 const RFieldBase &GetConstField(std::string_view fieldName) const;; 385 ; 386 const std::string &GetDescription() const { return fDescription; }; 387 void SetDescription(std::string_view description);; 388 ; 389 /// Get the (qualified) names of subfields that have been registered to be included in entries from this model.; 390 const std::unordered_set<std::string> &GetRegisteredSubfields() const { return fRegisteredSubfields; }; 391 ; 392 /// Estimate the memory usage for this model during writing; 393 ///; 394 /// This will return an estimate in bytes for the internal page and compression buffers. The value should be; 395 /// understood per sequential RNTupleWriter or per RNTupleFillConte",MatchSource.WIKI,doc/master/RNTupleModel_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleModel_8hxx_source.html
https://root.cern/doc/master/RNTupleModel_8hxx_source.html:28115,Security,access,access,28115,"mental::RNTupleModel::RNTupleModelRNTupleModel(const RNTupleModel &)=delete; ROOT::Experimental::RNTupleModel::fSchemaIdstd::uint64_t fSchemaIdModels have a separate schema ID to remember that the clone of a frozen model still has the same sche...Definition RNTupleModel.hxx:213; ROOT::Experimental::RNTupleModel::GetTokenREntry::RFieldToken GetToken(std::string_view fieldName) constCreates a token to be used in REntry methods to address a field present in the entry.Definition RNTupleModel.cxx:470; ROOT::Experimental::RNTupleModel::EnsureNotBarevoid EnsureNotBare() constThrows an RException if fDefaultEntry is nullptr.Definition RNTupleModel.cxx:226; ROOT::Experimental::RNTupleModel::Clonestd::unique_ptr< RNTupleModel > Clone() constDefinition RNTupleModel.cxx:262; ROOT::Experimental::RNTupleModel::EnsureNotFrozenvoid EnsureNotFrozen() constThrows an RException if fFrozen is true.Definition RNTupleModel.cxx:220; ROOT::Experimental::RNTupleModel::GetMutableFieldZeroRFieldZero & GetMutableFieldZero()Mutable access to the root field is used to make adjustments to the fields.Definition RNTupleModel.cxx:399; ROOT::Experimental::RNTupleModel::GetDefaultEntryREntry & GetDefaultEntry()Definition RNTupleModel.cxx:426; ROOT::Experimental::RNTupleModel::EstimateWriteMemoryUsagestd::size_t EstimateWriteMemoryUsage(const RNTupleWriteOptions &options=RNTupleWriteOptions()) constEstimate the memory usage for this model during writing.Definition RNTupleModel.cxx:518; ROOT::Experimental::RNTupleModel::MakeFieldstd::shared_ptr< T > MakeField(const NameWithDescription_t &fieldNameDesc, ArgsT &&...args)Creates a new field given a name or {name, description} pair and a corresponding value that is manage...Definition RNTupleModel.hxx:295; ROOT::Experimental::RNTupleModel::GetRegisteredSubfieldsconst std::unordered_set< std::string > & GetRegisteredSubfields() constGet the (qualified) names of subfields that have been registered to be included in entries from this ...Definition RNTupleModel.",MatchSource.WIKI,doc/master/RNTupleModel_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleModel_8hxx_source.html
https://root.cern/doc/master/RNTupleModel_8hxx_source.html:31918,Security,access,accessed,31918,e can be a top-level field or a nested field. Returns nullptr if the field is not in the...Definition RNTupleModel.cxx:291; ROOT::Experimental::RNTupleModel::GetMutableFieldRFieldBase & GetMutableField(std::string_view fieldName)Definition RNTupleModel.cxx:406; ROOT::Experimental::RNTupleModel::Freezevoid Freeze()Definition RNTupleModel.cxx:507; ROOT::Experimental::RNTupleModel::CreateBarestatic std::unique_ptr< RNTupleModel > CreateBare()A bare model has no default entry.Definition RNTupleModel.cxx:236; ROOT::Experimental::RNTupleModel::IsFrozenbool IsFrozen() constDefinition RNTupleModel.hxx:363; ROOT::Experimental::RNTupleModel::GetDescriptionconst std::string & GetDescription() constDefinition RNTupleModel.hxx:386; ROOT::Experimental::RNTupleModel::AddFieldvoid AddField(std::unique_ptr< RFieldBase > field)Adds a field whose type is not known at compile time.Definition RNTupleModel.cxx:312; ROOT::Experimental::RNTupleModel::RegisterSubfieldvoid RegisterSubfield(std::string_view qualifiedFieldName)Register a subfield so it can be accessed directly from entries belonging to the model.Definition RNTupleModel.cxx:335; ROOT::Experimental::RNTupleModel::operator=RNTupleModel & operator=(const RNTupleModel &)=delete; ROOT::Experimental::RNTupleModel::~RNTupleModel~RNTupleModel()=default; ROOT::Experimental::RNTupleModel::fIsFrozenbool fIsFrozenChanged by Freeze() / Unfreeze() and by the RUpdater.Definition RNTupleModel.hxx:215; ROOT::Experimental::RNTupleModel::Unfreezevoid Unfreeze()Definition RNTupleModel.cxx:493; ROOT::Experimental::RNTupleModel::fFieldZerostd::unique_ptr< RFieldZero > fFieldZeroHierarchy of fields consisting of simple types and collections (sub trees)Definition RNTupleModel.hxx:198; ROOT::Experimental::RNTupleWriteOptionsCommon user-tunable settings for storing ntuples.Definition RNTupleWriteOptions.hxx:48; ROOT::Experimental::RNTupleWriterAn RNTuple that gets filled with entries (data) and writes them to storage.Definition RNTupleWriter.hxx:60; ROO,MatchSource.WIKI,doc/master/RNTupleModel_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleModel_8hxx_source.html
https://root.cern/doc/master/RNTupleModel_8hxx_source.html:9260,Usability,simpl,simple,9260," an `REntry` that matching the new model.; 176 /// Upon completion, `BeginUpdate()` can be called again to begin a new set of changes.; 177 void CommitUpdate();; 178 ; 179 template <typename T, typename... ArgsT>; 180 std::shared_ptr<T> MakeField(const NameWithDescription_t &fieldNameDesc, ArgsT &&...args); 181 {; 182 auto objPtr = fOpenChangeset.fModel.MakeField<T>(fieldNameDesc, std::forward<ArgsT>(args)...);; 183 auto fieldZero = fOpenChangeset.fModel.fFieldZero.get();; 184 auto it = std::find_if(fieldZero->begin(), fieldZero->end(),; 185 [&](const auto &f) { return f.GetFieldName() == fieldNameDesc.fName; });; 186 R__ASSERT(it != fieldZero->end());; 187 fOpenChangeset.fAddedFields.emplace_back(&(*it));; 188 return objPtr;; 189 }; 190 ; 191 void AddField(std::unique_ptr<RFieldBase> field);; 192 ; 193 RResult<void> AddProjectedField(std::unique_ptr<RFieldBase> field, FieldMappingFunc_t mapping);; 194 };; 195 ; 196private:; 197 /// Hierarchy of fields consisting of simple types and collections (sub trees); 198 std::unique_ptr<RFieldZero> fFieldZero;; 199 /// Contains field values corresponding to the created top-level fields, as well as registered subfields; 200 std::unique_ptr<REntry> fDefaultEntry;; 201 /// Keeps track of which field names are taken, including projected field names.; 202 std::unordered_set<std::string> fFieldNames;; 203 /// Free text set by the user; 204 std::string fDescription;; 205 /// The set of projected top-level fields; 206 std::unique_ptr<Internal::RProjectedFields> fProjectedFields;; 207 /// Keeps track of which subfields have been registered to be included in entries belonging to this model.; 208 std::unordered_set<std::string> fRegisteredSubfields;; 209 /// Every model has a unique ID to distinguish it from other models. Entries are linked to models via the ID.; 210 /// Cloned models get a new model ID.; 211 std::uint64_t fModelId = 0;; 212 /// Models have a separate schema ID to remember that the clone of a frozen model still has the ",MatchSource.WIKI,doc/master/RNTupleModel_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleModel_8hxx_source.html
https://root.cern/doc/master/RNTupleModel_8hxx_source.html:32526,Usability,simpl,simple,32526,"::RNTupleModel::GetDescriptionconst std::string & GetDescription() constDefinition RNTupleModel.hxx:386; ROOT::Experimental::RNTupleModel::AddFieldvoid AddField(std::unique_ptr< RFieldBase > field)Adds a field whose type is not known at compile time.Definition RNTupleModel.cxx:312; ROOT::Experimental::RNTupleModel::RegisterSubfieldvoid RegisterSubfield(std::string_view qualifiedFieldName)Register a subfield so it can be accessed directly from entries belonging to the model.Definition RNTupleModel.cxx:335; ROOT::Experimental::RNTupleModel::operator=RNTupleModel & operator=(const RNTupleModel &)=delete; ROOT::Experimental::RNTupleModel::~RNTupleModel~RNTupleModel()=default; ROOT::Experimental::RNTupleModel::fIsFrozenbool fIsFrozenChanged by Freeze() / Unfreeze() and by the RUpdater.Definition RNTupleModel.hxx:215; ROOT::Experimental::RNTupleModel::Unfreezevoid Unfreeze()Definition RNTupleModel.cxx:493; ROOT::Experimental::RNTupleModel::fFieldZerostd::unique_ptr< RFieldZero > fFieldZeroHierarchy of fields consisting of simple types and collections (sub trees)Definition RNTupleModel.hxx:198; ROOT::Experimental::RNTupleWriteOptionsCommon user-tunable settings for storing ntuples.Definition RNTupleWriteOptions.hxx:48; ROOT::Experimental::RNTupleWriterAn RNTuple that gets filled with entries (data) and writes them to storage.Definition RNTupleWriter.hxx:60; ROOT::Experimental::RResultThe class is used as a return type for operations that can fail; wraps a value of type T or an RError...Definition RError.hxx:194; ROOT::Experimental::Internal::GetProjectedFieldsOfModelRProjectedFields & GetProjectedFieldsOfModel(RNTupleModel &model)Definition RNTupleModel.cxx:42; ROOT::Experimental::Internal::GetFieldZeroOfModelRFieldZero & GetFieldZeroOfModel(RNTupleModel &model)Definition RNTupleModel.cxx:36; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecu",MatchSource.WIKI,doc/master/RNTupleModel_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleModel_8hxx_source.html
https://root.cern/doc/master/RNTupleReader_8cxx_source.html:8470,Availability,error,error,8470,"printing.; 174 RPrintSchemaVisitor printVisitor(output);; 175 ; 176 // Note that we do not need to connect the model, we are only looking at its tree of fields; 177 fullModel->GetConstFieldZero().AcceptVisitor(prepVisitor);; 178 ; 179 printVisitor.SetFrameSymbol(frameSymbol);; 180 printVisitor.SetWidth(width);; 181 printVisitor.SetDeepestLevel(prepVisitor.GetDeepestLevel());; 182 printVisitor.SetNumFields(prepVisitor.GetNumFields());; 183 ; 184 for (int i = 0; i < width; ++i); 185 output << frameSymbol;; 186 output << ""\n"";; 187 fullModel->GetConstFieldZero().AcceptVisitor(printVisitor);; 188 for (int i = 0; i < width; ++i); 189 output << frameSymbol;; 190 output << std::endl;; 191 break;; 192 }; 193 case ENTupleInfo::kStorageDetails: fSource->GetSharedDescriptorGuard()->PrintInfo(output); break;; 194 case ENTupleInfo::kMetrics: fMetrics.Print(output); break;; 195 default:; 196 // Unhandled case, internal error; 197 R__ASSERT(false);; 198 }; 199}; 200 ; 201ROOT::Experimental::RNTupleReader *ROOT::Experimental::RNTupleReader::GetDisplayReader(); 202{; 203 if (!fDisplayReader); 204 fDisplayReader = Clone();; 205 return fDisplayReader.get();; 206}; 207 ; 208void ROOT::Experimental::RNTupleReader::Show(NTupleSize_t index, std::ostream &output); 209{; 210 auto reader = GetDisplayReader();; 211 const auto &entry = reader->GetModel().GetDefaultEntry();; 212 ; 213 reader->LoadEntry(index);; 214 output << ""{"";; 215 for (auto iValue = entry.begin(); iValue != entry.end();) {; 216 output << std::endl;; 217 RPrintValueVisitor visitor(*iValue, output, 1 /* level */);; 218 iValue->GetField().AcceptVisitor(visitor);; 219 ; 220 if (++iValue == entry.end()) {; 221 output << std::endl;; 222 break;; 223 } else {; 224 output << "","";; 225 }; 226 }; 227 output << ""}"" << std::endl;; 228}; 229 ; 230const ROOT::Experimental::RNTupleDescriptor &ROOT::Experimental::RNTupleReader::GetDescriptor(); 231{; 232 auto descriptorGuard = fSource->GetSharedDescriptorGuard();; 233 if (!fCachedDescriptor",MatchSource.WIKI,doc/master/RNTupleReader_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleReader_8cxx_source.html
https://root.cern/doc/master/RNTupleReader_8cxx_source.html:10236,Availability,error,error,10236,"eReader::Show(NTupleSize_t index, std::ostream &output); 209{; 210 auto reader = GetDisplayReader();; 211 const auto &entry = reader->GetModel().GetDefaultEntry();; 212 ; 213 reader->LoadEntry(index);; 214 output << ""{"";; 215 for (auto iValue = entry.begin(); iValue != entry.end();) {; 216 output << std::endl;; 217 RPrintValueVisitor visitor(*iValue, output, 1 /* level */);; 218 iValue->GetField().AcceptVisitor(visitor);; 219 ; 220 if (++iValue == entry.end()) {; 221 output << std::endl;; 222 break;; 223 } else {; 224 output << "","";; 225 }; 226 }; 227 output << ""}"" << std::endl;; 228}; 229 ; 230const ROOT::Experimental::RNTupleDescriptor &ROOT::Experimental::RNTupleReader::GetDescriptor(); 231{; 232 auto descriptorGuard = fSource->GetSharedDescriptorGuard();; 233 if (!fCachedDescriptor || fCachedDescriptor->GetGeneration() != descriptorGuard->GetGeneration()); 234 fCachedDescriptor = descriptorGuard->Clone();; 235 return *fCachedDescriptor;; 236}; 237 ; 238ROOT::Experimental::DescriptorId_t ROOT::Experimental::RNTupleReader::RetrieveFieldId(std::string_view fieldName) const; 239{; 240 auto fieldId = fSource->GetSharedDescriptorGuard()->FindFieldId(fieldName);; 241 if (fieldId == kInvalidDescriptorId) {; 242 throw RException(R__FAIL(""no field named '"" + std::string(fieldName) + ""' in RNTuple '"" +; 243 fSource->GetSharedDescriptorGuard()->GetName() + ""'""));; 244 }; 245 return fieldId;; 246}; R__FAIL#define R__FAIL(msg)Short-hand to return an RResult<T> in an error state; the RError is implicitly converted into RResult...Definition RError.hxx:290; RFieldVisitor.hxx; RField.hxx; RNTupleImtTaskScheduler.hxx; RNTupleModel.hxx; RNTupleReader.hxx; RNTuple.hxx; RPageSourceFriends.hxx; RPageStorageFile.hxx; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; indexOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize voi",MatchSource.WIKI,doc/master/RNTupleReader_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleReader_8cxx_source.html
https://root.cern/doc/master/RNTupleReader_8cxx_source.html:10550,Availability,error,error,10550,"; 233 if (!fCachedDescriptor || fCachedDescriptor->GetGeneration() != descriptorGuard->GetGeneration()); 234 fCachedDescriptor = descriptorGuard->Clone();; 235 return *fCachedDescriptor;; 236}; 237 ; 238ROOT::Experimental::DescriptorId_t ROOT::Experimental::RNTupleReader::RetrieveFieldId(std::string_view fieldName) const; 239{; 240 auto fieldId = fSource->GetSharedDescriptorGuard()->FindFieldId(fieldName);; 241 if (fieldId == kInvalidDescriptorId) {; 242 throw RException(R__FAIL(""no field named '"" + std::string(fieldName) + ""' in RNTuple '"" +; 243 fSource->GetSharedDescriptorGuard()->GetName() + ""'""));; 244 }; 245 return fieldId;; 246}; R__FAIL#define R__FAIL(msg)Short-hand to return an RResult<T> in an error state; the RError is implicitly converted into RResult...Definition RError.hxx:290; RFieldVisitor.hxx; RField.hxx; RNTupleImtTaskScheduler.hxx; RNTupleModel.hxx; RNTupleReader.hxx; RNTuple.hxx; RPageSourceFriends.hxx; RPageStorageFile.hxx; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; indexOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t indexDefinition TGWin32VirtualXProxy.cxx:168; widthOption_t Option_t widthDefinition TGWin32VirtualXProxy.cxx:56; namechar name[80]Definition TGX11.cxx:110; TROOT.h; ROOT::Experimental::Internal::RPageSourceFile::CreateFromAnchorstatic std::unique_ptr< RPageSourceFile > CreateFromAnchor(const RNTuple &anchor, const RNTupleReadOptions &options=RNTupleReadOptions())Used from the RNTuple class to build a datasource if the anchor is already available.Definition RPageStorageFile.cxx:283; ROOT::Experimental::Internal::RPageSource::Createstatic std::unique_ptr< RPageSource > Create(std::string_view ntupleName, std::string_view location, const RNTupleReadOptions &options=RNTupleReadOptions())Guess the concrete derived pag",MatchSource.WIKI,doc/master/RNTupleReader_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleReader_8cxx_source.html
https://root.cern/doc/master/RNTupleReader_8cxx_source.html:11242,Availability,avail,available,11242,"rd()->GetName() + ""'""));; 244 }; 245 return fieldId;; 246}; R__FAIL#define R__FAIL(msg)Short-hand to return an RResult<T> in an error state; the RError is implicitly converted into RResult...Definition RError.hxx:290; RFieldVisitor.hxx; RField.hxx; RNTupleImtTaskScheduler.hxx; RNTupleModel.hxx; RNTupleReader.hxx; RNTuple.hxx; RPageSourceFriends.hxx; RPageStorageFile.hxx; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; indexOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t indexDefinition TGWin32VirtualXProxy.cxx:168; widthOption_t Option_t widthDefinition TGWin32VirtualXProxy.cxx:56; namechar name[80]Definition TGX11.cxx:110; TROOT.h; ROOT::Experimental::Internal::RPageSourceFile::CreateFromAnchorstatic std::unique_ptr< RPageSourceFile > CreateFromAnchor(const RNTuple &anchor, const RNTupleReadOptions &options=RNTupleReadOptions())Used from the RNTuple class to build a datasource if the anchor is already available.Definition RPageStorageFile.cxx:283; ROOT::Experimental::Internal::RPageSource::Createstatic std::unique_ptr< RPageSource > Create(std::string_view ntupleName, std::string_view location, const RNTupleReadOptions &options=RNTupleReadOptions())Guess the concrete derived page source from the file name (location)Definition RPageStorage.cxx:145; ROOT::Experimental::RExceptionBase class for all ROOT issued exceptions.Definition RError.hxx:78; ROOT::Experimental::RNTupleDescriptorThe on-storage meta-data of an ntuple.Definition RNTupleDescriptor.hxx:528; ROOT::Experimental::RNTupleDescriptor::Clonestd::unique_ptr< RNTupleDescriptor > Clone() constDefinition RNTupleDescriptor.cxx:538; ROOT::Experimental::RNTupleFormatter::FitStringstatic std::string FitString(const std::string &str, int availableSpace)Definition RFieldVisitor.cxx:418; ROOT::Experimenta",MatchSource.WIKI,doc/master/RNTupleReader_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleReader_8cxx_source.html
https://root.cern/doc/master/RNTupleReader_8cxx_source.html:12042,Availability,avail,availableSpace,12042,"rceFile::CreateFromAnchorstatic std::unique_ptr< RPageSourceFile > CreateFromAnchor(const RNTuple &anchor, const RNTupleReadOptions &options=RNTupleReadOptions())Used from the RNTuple class to build a datasource if the anchor is already available.Definition RPageStorageFile.cxx:283; ROOT::Experimental::Internal::RPageSource::Createstatic std::unique_ptr< RPageSource > Create(std::string_view ntupleName, std::string_view location, const RNTupleReadOptions &options=RNTupleReadOptions())Guess the concrete derived page source from the file name (location)Definition RPageStorage.cxx:145; ROOT::Experimental::RExceptionBase class for all ROOT issued exceptions.Definition RError.hxx:78; ROOT::Experimental::RNTupleDescriptorThe on-storage meta-data of an ntuple.Definition RNTupleDescriptor.hxx:528; ROOT::Experimental::RNTupleDescriptor::Clonestd::unique_ptr< RNTupleDescriptor > Clone() constDefinition RNTupleDescriptor.cxx:538; ROOT::Experimental::RNTupleFormatter::FitStringstatic std::string FitString(const std::string &str, int availableSpace)Definition RFieldVisitor.cxx:418; ROOT::Experimental::RNTupleModelThe RNTupleModel encapulates the schema of an ntuple.Definition RNTupleModel.hxx:136; ROOT::Experimental::RNTupleReadOptionsCommon user-tunable settings for reading ntuples.Definition RNTupleReadOptions.hxx:31; ROOT::Experimental::RNTupleReadOptions::EImplicitMT::kDefault@ kDefault; ROOT::Experimental::RNTupleReadOptions::HasMetricsEnabledbool HasMetricsEnabled() constDefinition RNTupleReadOptions.hxx:61; ROOT::Experimental::RNTupleReaderAn RNTuple that is used to read data from storage.Definition RNTupleReader.hxx:71; ROOT::Experimental::RNTupleReader::GetDisplayReaderRNTupleReader * GetDisplayReader()Definition RNTupleReader.cxx:201; ROOT::Experimental::RNTupleReader::RetrieveFieldIdDescriptorId_t RetrieveFieldId(std::string_view fieldName) constDefinition RNTupleReader.cxx:238; ROOT::Experimental::RNTupleReader::Showvoid Show(NTupleSize_t index, std::ostream &output=s",MatchSource.WIKI,doc/master/RNTupleReader_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleReader_8cxx_source.html
https://root.cern/doc/master/RNTupleReader_8cxx_source.html:6193,Modifiability,variab,variables,6193,"l, const ROOT::RNTuple &ntuple,; 110 const RNTupleReadOptions &options); 111{; 112 return std::unique_ptr<RNTupleReader>(; 113 new RNTupleReader(std::move(model), Internal::RPageSourceFile::CreateFromAnchor(ntuple, options), options));; 114}; 115 ; 116std::unique_ptr<ROOT::Experimental::RNTupleReader>; 117ROOT::Experimental::RNTupleReader::OpenFriends(std::span<RNTupleOpenSpec> ntuples, const RNTupleReadOptions &options); 118{; 119 std::vector<std::unique_ptr<Internal::RPageSource>> sources;; 120 sources.reserve(ntuples.size());; 121 for (const auto &n : ntuples) {; 122 sources.emplace_back(Internal::RPageSource::Create(n.fNTupleName, n.fStorage, n.fOptions));; 123 }; 124 return std::unique_ptr<RNTupleReader>(; 125 new RNTupleReader(std::make_unique<Internal::RPageSourceFriends>(""_friends"", sources), options));; 126}; 127 ; 128const ROOT::Experimental::RNTupleModel &ROOT::Experimental::RNTupleReader::GetModel(); 129{; 130 if (!fModel) {; 131 fModel = fSource->GetSharedDescriptorGuard()->CreateModel();; 132 ConnectModel(*fModel);; 133 }; 134 return *fModel;; 135}; 136 ; 137void ROOT::Experimental::RNTupleReader::PrintInfo(const ENTupleInfo what, std::ostream &output) const; 138{; 139 // TODO(lesimon): In a later version, these variables may be defined by the user or the ideal width may be read out; 140 // from the terminal.; 141 char frameSymbol = '*';; 142 int width = 80;; 143 /*; 144 if (width < 30) {; 145 output << ""The width is too small! Should be at least 30."" << std::endl;; 146 return;; 147 }; 148 */; 149 switch (what) {; 150 case ENTupleInfo::kSummary: {; 151 std::string name;; 152 std::unique_ptr<RNTupleModel> fullModel;; 153 {; 154 auto descriptorGuard = fSource->GetSharedDescriptorGuard();; 155 name = descriptorGuard->GetName();; 156 fullModel = descriptorGuard->CreateModel();; 157 }; 158 ; 159 for (int i = 0; i < (width / 2 + width % 2 - 4); ++i); 160 output << frameSymbol;; 161 output << "" NTUPLE "";; 162 for (int i = 0; i < (width / 2 - 4); ++i); 163 outp",MatchSource.WIKI,doc/master/RNTupleReader_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleReader_8cxx_source.html
https://root.cern/doc/master/RNTupleReader_8cxx_source.html:13508,Performance,cache,cached,13508,"ons::HasMetricsEnabledbool HasMetricsEnabled() constDefinition RNTupleReadOptions.hxx:61; ROOT::Experimental::RNTupleReaderAn RNTuple that is used to read data from storage.Definition RNTupleReader.hxx:71; ROOT::Experimental::RNTupleReader::GetDisplayReaderRNTupleReader * GetDisplayReader()Definition RNTupleReader.cxx:201; ROOT::Experimental::RNTupleReader::RetrieveFieldIdDescriptorId_t RetrieveFieldId(std::string_view fieldName) constDefinition RNTupleReader.cxx:238; ROOT::Experimental::RNTupleReader::Showvoid Show(NTupleSize_t index, std::ostream &output=std::cout)Shows the values of the i-th entry/row, starting with 0 for the first entry.Definition RNTupleReader.cxx:208; ROOT::Experimental::RNTupleReader::RNTupleReaderRNTupleReader(std::unique_ptr< RNTupleModel > model, std::unique_ptr< Internal::RPageSource > source, const RNTupleReadOptions &options)Definition RNTupleReader.cxx:61; ROOT::Experimental::RNTupleReader::~RNTupleReader~RNTupleReader(); ROOT::Experimental::RNTupleReader::GetDescriptorconst RNTupleDescriptor & GetDescriptor()Returns a cached copy of the page source descriptor.Definition RNTupleReader.cxx:230; ROOT::Experimental::RNTupleReader::OpenFriendsstatic std::unique_ptr< RNTupleReader > OpenFriends(std::span< RNTupleOpenSpec > ntuples, const RNTupleReadOptions &options=RNTupleReadOptions())Open RNTuples as one virtual, horizontally combined ntuple.Definition RNTupleReader.cxx:117; ROOT::Experimental::RNTupleReader::fSourcestd::unique_ptr< Internal::RPageSource > fSourceDefinition RNTupleReader.hxx:77; ROOT::Experimental::RNTupleReader::GetModelconst RNTupleModel & GetModel()Definition RNTupleReader.cxx:128; ROOT::Experimental::RNTupleReader::Openstatic std::unique_ptr< RNTupleReader > Open(std::string_view ntupleName, std::string_view storage, const RNTupleReadOptions &options=RNTupleReadOptions())Open an RNTuple for reading.Definition RNTupleReader.cxx:94; ROOT::Experimental::RNTupleReader::InitPageSourcevoid InitPageSource(bool enableMetrics)",MatchSource.WIKI,doc/master/RNTupleReader_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleReader_8cxx_source.html
https://root.cern/doc/master/RNTupleReader_8cxx_source.html:17534,Performance,multi-thread,multi-threading,17534,"Fields(int n)Definition RFieldVisitor.cxx:59; ROOT::Experimental::RPrintSchemaVisitor::SetFrameSymbolvoid SetFrameSymbol(char s)Definition RFieldVisitor.hxx:142; ROOT::Experimental::RPrintValueVisitorRenders a JSON value corresponding to the field.Definition RFieldVisitor.hxx:176; ROOT::RNTupleRepresentation of an RNTuple data set in a ROOT file.Definition RNTuple.hxx:69; nconst Int_t nDefinition legend1.C:16; ROOT::Experimental::Internal::GetProjectedFieldsOfModelRProjectedFields & GetProjectedFieldsOfModel(RNTupleModel &model)Definition RNTupleModel.cxx:42; ROOT::Experimental::Internal::CallConnectPageSourceOnFieldvoid CallConnectPageSourceOnField(RFieldBase &, RPageSource &)Definition RField.cxx:411; ROOT::Experimental::Internal::GetFieldZeroOfModelRFieldZero & GetFieldZeroOfModel(RNTupleModel &model)Definition RNTupleModel.cxx:36; ROOT::Experimental::ENTupleInfoENTupleInfoListing of the different options that can be printed by RNTupleReader::GetInfo()Definition RNTupleReader.hxx:43; ROOT::Experimental::ENTupleInfo::kSummary@ kSummary; ROOT::Experimental::ENTupleInfo::kMetrics@ kMetrics; ROOT::Experimental::ENTupleInfo::kStorageDetails@ kStorageDetails; ROOT::Experimental::NTupleSize_tstd::uint64_t NTupleSize_tInteger type long enough to hold the maximum number of entries in a column.Definition RNTupleUtil.hxx:115; ROOT::Experimental::DescriptorId_tstd::uint64_t DescriptorId_tDistriniguishes elements of the same type within a descriptor, e.g. different fields.Definition RNTupleUtil.hxx:166; ROOT::Experimental::kInvalidDescriptorIdconstexpr DescriptorId_t kInvalidDescriptorIdDefinition RNTupleUtil.hxx:167; ROOT::IsImplicitMTEnabledBool_t IsImplicitMTEnabled()Returns true if the implicit multi-threading in ROOT is enabled.Definition TROOT.cxx:570; whatstatic const char * whatDefinition stlLoader.cc:5; outputstatic void output(). treentuplev7srcRNTupleReader.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:03 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/RNTupleReader_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleReader_8cxx_source.html
https://root.cern/doc/master/RNTupleReader_8hxx.html:704,Integrability,depend,dependency,704,". ROOT: tree/ntuple/v7/inc/ROOT/RNTupleReader.hxx File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Enumerations ; RNTupleReader.hxx File ReferenceNTuple-related classes | ROOT7 classes. #include <ROOT/RConfig.hxx>; #include <ROOT/RError.hxx>; #include <ROOT/RNTupleDescriptor.hxx>; #include <ROOT/RNTupleMetrics.hxx>; #include <ROOT/RNTupleModel.hxx>; #include <ROOT/RNTupleReadOptions.hxx>; #include <ROOT/RNTupleUtil.hxx>; #include <ROOT/RNTupleView.hxx>; #include <ROOT/RPageStorage.hxx>; #include <ROOT/RSpan.hxx>; #include <iostream>; #include <iterator>; #include <memory>; #include <string>; #include <string_view>. Include dependency graph for RNTupleReader.hxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  ROOT::Experimental::RNTupleReader::RIterator;  ; class  ROOT::Experimental::RNTupleReader;  An RNTuple that is used to read data from storage. More...;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Experimental;  . Enumerations; enum class  ROOT::Experimental::ENTupleInfo { ROOT::Experimental::kSummary; , ROOT::Experimental::kStorageDetails; , ROOT::Experimental::kMetrics; };  Listing of the different options that can be printed by RNTupleReader::GetInfo() More...;  . Detailed Description; AuthorJakob Blomer jblom.nosp@m.er@c.nosp@m.ern.c.nosp@m.h ; Date2024-02-20 ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! ; Definition in file RNTupleReader.hxx. treentuplev7incROOTRNTupleReader.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2",MatchSource.WIKI,doc/master/RNTupleReader_8hxx.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleReader_8hxx.html
https://root.cern/doc/master/RNTupleReader_8hxx_source.html:9590,Availability,error,errors,9590," data to stderr**; 198 /// ~~~ {.cpp}; 199 /// #include <ROOT/RNTupleReader.hxx>; 200 /// using ROOT::Experimental::ENTupleInfo;; 201 /// using ROOT::Experimental::RNTupleReader;; 202 ///; 203 /// #include <iostream>; 204 ///; 205 /// auto ntuple = RNTupleReader::Open(""myNTuple"", ""some/file.root"");; 206 /// ntuple->PrintInfo(ENTupleInfo::kStorageDetails, std::cerr);; 207 /// ~~~; 208 ///; 209 /// For use of ENTupleInfo::kMetrics, see #EnableMetrics.; 210 void PrintInfo(const ENTupleInfo what = ENTupleInfo::kSummary, std::ostream &output = std::cout) const;; 211 ; 212 /// Shows the values of the i-th entry/row, starting with 0 for the first entry. By default,; 213 /// prints the output in JSON format.; 214 /// Uses the visitor pattern to traverse through each field of the given entry.; 215 void Show(NTupleSize_t index, std::ostream &output = std::cout);; 216 ; 217 /// Analogous to Fill(), fills the default entry of the model. Returns false at the end of the ntuple.; 218 /// On I/O errors, raises an exception.; 219 void LoadEntry(NTupleSize_t index); 220 {; 221 // TODO(jblomer): can be templated depending on the factory method / constructor; 222 if (R__unlikely(!fModel)) {; 223 fModel = fSource->GetSharedDescriptorGuard()->CreateModel();; 224 ConnectModel(*fModel);; 225 }; 226 LoadEntry(index, fModel->GetDefaultEntry());; 227 }; 228 /// Fills a user provided entry after checking that the entry has been instantiated from the ntuple model; 229 void LoadEntry(NTupleSize_t index, REntry &entry) { entry.Read(index); }; 230 ; 231 /// Returns an iterator over the entry indices of the RNTuple.; 232 ///; 233 /// **Example: iterate over all entries and print each entry in JSON format**; 234 /// ~~~ {.cpp}; 235 /// #include <ROOT/RNTupleReader.hxx>; 236 /// using ROOT::Experimental::ENTupleShowFormat;; 237 /// using ROOT::Experimental::RNTupleReader;; 238 ///; 239 /// #include <iostream>; 240 ///; 241 /// auto ntuple = RNTupleReader::Open(""myNTuple"", ""some/file.root"");; 242 /// f",MatchSource.WIKI,doc/master/RNTupleReader_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleReader_8hxx_source.html
https://root.cern/doc/master/RNTupleReader_8hxx_source.html:15522,Availability,error,error,15522,"ample: inspect the reader metrics after loading every entry**; 348 /// ~~~ {.cpp}; 349 /// #include <ROOT/RNTupleReader.hxx>; 350 /// using ROOT::Experimental::ENTupleInfo;; 351 /// using ROOT::Experimental::RNTupleReader;; 352 ///; 353 /// #include <iostream>; 354 ///; 355 /// auto ntuple = RNTupleReader::Open(""myNTuple"", ""some/file.root"");; 356 /// // metrics must be turned on beforehand; 357 /// ntuple->EnableMetrics();; 358 ///; 359 /// for (auto i : ntuple->GetEntryRange()) {; 360 /// ntuple->LoadEntry(i);; 361 /// }; 362 /// ntuple->PrintInfo(ENTupleInfo::kMetrics);; 363 /// ~~~; 364 void EnableMetrics() { fMetrics.Enable(); }; 365 const Detail::RNTupleMetrics &GetMetrics() const { return fMetrics; }; 366}; // class RNTupleReader; 367 ; 368} // namespace Experimental; 369} // namespace ROOT; 370 ; 371#endif // ROOT7_RNTupleReader; RConfig.hxx; R__unlikely#define R__unlikely(expr)Definition RConfig.hxx:586; RError.hxx; R__FAIL#define R__FAIL(msg)Short-hand to return an RResult<T> in an error state; the RError is implicitly converted into RResult...Definition RError.hxx:290; RNTupleDescriptor.hxx; RNTupleMetrics.hxx; RNTupleModel.hxx; RNTupleReadOptions.hxx; RNTupleUtil.hxx; RNTupleView.hxx; RPageStorage.hxx; RSpan.hxx; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; indexOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t indexDefinition TGWin32VirtualXProxy.cxx:168; ROOT::Experimental::Detail::RNTupleMetricsA collection of Counter objects with a name, a unit, and a description.Definition RNTupleMetrics.hxx:285; ROOT::Experimental::Detail::RNTupleMetrics::IsEnabledbool IsEnabled() constDefinition RNTupleMetrics.hxx",MatchSource.WIKI,doc/master/RNTupleReader_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleReader_8hxx_source.html
https://root.cern/doc/master/RNTupleReader_8hxx_source.html:2821,Energy Efficiency,schedul,scheduler,2821,"r; 52\ingroup NTuple; 53\brief An RNTuple that is used to read data from storage; 54 ; 55An input ntuple provides data from storage as C++ objects. The ntuple model can be created from the data on storage; 56or it can be imposed by the user. The latter case allows users to read into a specialized ntuple model that covers; 57only a subset of the fields in the ntuple. The ntuple model is used when reading complete entries.; 58Individual fields can be read as well by instantiating a tree view.; 59 ; 60~~~ {.cpp}; 61#include <ROOT/RNTupleReader.hxx>; 62using ROOT::Experimental::RNTupleReader;; 63 ; 64#include <iostream>; 65 ; 66auto ntuple = RNTupleReader::Open(""myNTuple"", ""some/file.root"");; 67std::cout << ""myNTuple has "" << ntuple->GetNEntries() << "" entries\n"";; 68~~~; 69*/; 70// clang-format on; 71class RNTupleReader {; 72private:; 73 /// Set as the page source's scheduler for parallel page decompression if IMT is on; 74 /// Needs to be destructed after the pages source is destructed (an thus be declared before); 75 std::unique_ptr<Internal::RPageStorage::RTaskScheduler> fUnzipTasks;; 76 ; 77 std::unique_ptr<Internal::RPageSource> fSource;; 78 /// Needs to be destructed before fSource; 79 std::unique_ptr<RNTupleModel> fModel;; 80 /// We use a dedicated on-demand reader for Show() and Scan(). Printing data uses all the fields; 81 /// from the full model even if the analysis code uses only a subset of fields. The display reader; 82 /// is a clone of the original reader.; 83 std::unique_ptr<RNTupleReader> fDisplayReader;; 84 /// The ntuple descriptor in the page source is protected by a read-write lock. We don't expose that to the; 85 /// users of RNTupleReader::GetDescriptor(). Instead, if descriptor information is needed, we clone the; 86 /// descriptor. Using the descriptor's generation number, we know if the cached descriptor is stale.; 87 /// Retrieving descriptor data from an RNTupleReader is supposed to be for testing and information purposes,; 88 /// not on a ho",MatchSource.WIKI,doc/master/RNTupleReader_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleReader_8hxx_source.html
https://root.cern/doc/master/RNTupleReader_8hxx_source.html:24461,Energy Efficiency,schedul,scheduler,24461,"rce > fSourceDefinition RNTupleReader.hxx:77; ROOT::Experimental::RNTupleReader::GetDirectAccessViewRNTupleDirectAccessView< T > GetDirectAccessView(std::string_view fieldName)Definition RNTupleReader.hxx:311; ROOT::Experimental::RNTupleReader::GetCollectionViewRNTupleCollectionView GetCollectionView(DescriptorId_t fieldId)Definition RNTupleReader.hxx:337; ROOT::Experimental::RNTupleReader::GetModelconst RNTupleModel & GetModel()Definition RNTupleReader.cxx:128; ROOT::Experimental::RNTupleReader::Openstatic std::unique_ptr< RNTupleReader > Open(std::string_view ntupleName, std::string_view storage, const RNTupleReadOptions &options=RNTupleReadOptions())Open an RNTuple for reading.Definition RNTupleReader.cxx:94; ROOT::Experimental::RNTupleReader::GetEntryRangeRNTupleGlobalRange GetEntryRange()Returns an iterator over the entry indices of the RNTuple.Definition RNTupleReader.hxx:246; ROOT::Experimental::RNTupleReader::fUnzipTasksstd::unique_ptr< Internal::RPageStorage::RTaskScheduler > fUnzipTasksSet as the page source's scheduler for parallel page decompression if IMT is on Needs to be destructe...Definition RNTupleReader.hxx:75; ROOT::Experimental::RNTupleReader::InitPageSourcevoid InitPageSource(bool enableMetrics)Definition RNTupleReader.cxx:46; ROOT::Experimental::RNTupleReader::GetViewRNTupleView< T > GetView(DescriptorId_t fieldId)Definition RNTupleReader.hxx:287; ROOT::Experimental::RNTupleReader::PrintInfovoid PrintInfo(const ENTupleInfo what=ENTupleInfo::kSummary, std::ostream &output=std::cout) constPrints a detailed summary of the ntuple, including a list of fields.Definition RNTupleReader.cxx:137; ROOT::Experimental::RNTupleReader::LoadEntryvoid LoadEntry(NTupleSize_t index)Analogous to Fill(), fills the default entry of the model.Definition RNTupleReader.hxx:219; ROOT::Experimental::RNTupleReader::fModelstd::unique_ptr< RNTupleModel > fModelNeeds to be destructed before fSource.Definition RNTupleReader.hxx:79; ROOT::Experimental::RNTupleReader::LoadEntr",MatchSource.WIKI,doc/master/RNTupleReader_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleReader_8hxx_source.html
https://root.cern/doc/master/RNTupleReader_8hxx_source.html:9706,Integrability,depend,depending,9706,"NTuple"", ""some/file.root"");; 206 /// ntuple->PrintInfo(ENTupleInfo::kStorageDetails, std::cerr);; 207 /// ~~~; 208 ///; 209 /// For use of ENTupleInfo::kMetrics, see #EnableMetrics.; 210 void PrintInfo(const ENTupleInfo what = ENTupleInfo::kSummary, std::ostream &output = std::cout) const;; 211 ; 212 /// Shows the values of the i-th entry/row, starting with 0 for the first entry. By default,; 213 /// prints the output in JSON format.; 214 /// Uses the visitor pattern to traverse through each field of the given entry.; 215 void Show(NTupleSize_t index, std::ostream &output = std::cout);; 216 ; 217 /// Analogous to Fill(), fills the default entry of the model. Returns false at the end of the ntuple.; 218 /// On I/O errors, raises an exception.; 219 void LoadEntry(NTupleSize_t index); 220 {; 221 // TODO(jblomer): can be templated depending on the factory method / constructor; 222 if (R__unlikely(!fModel)) {; 223 fModel = fSource->GetSharedDescriptorGuard()->CreateModel();; 224 ConnectModel(*fModel);; 225 }; 226 LoadEntry(index, fModel->GetDefaultEntry());; 227 }; 228 /// Fills a user provided entry after checking that the entry has been instantiated from the ntuple model; 229 void LoadEntry(NTupleSize_t index, REntry &entry) { entry.Read(index); }; 230 ; 231 /// Returns an iterator over the entry indices of the RNTuple.; 232 ///; 233 /// **Example: iterate over all entries and print each entry in JSON format**; 234 /// ~~~ {.cpp}; 235 /// #include <ROOT/RNTupleReader.hxx>; 236 /// using ROOT::Experimental::ENTupleShowFormat;; 237 /// using ROOT::Experimental::RNTupleReader;; 238 ///; 239 /// #include <iostream>; 240 ///; 241 /// auto ntuple = RNTupleReader::Open(""myNTuple"", ""some/file.root"");; 242 /// for (auto i : ntuple->GetEntryRange()) {; 243 /// ntuple->Show(i);; 244 /// }; 245 /// ~~~; 246 RNTupleGlobalRange GetEntryRange() { return RNTupleGlobalRange(0, GetNEntries()); }; 247 ; 248 /// Provides access to an individual field that can contain either a scalar value ",MatchSource.WIKI,doc/master/RNTupleReader_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleReader_8hxx_source.html
https://root.cern/doc/master/RNTupleReader_8hxx_source.html:1799,Performance,perform,performance,1799,"lude <ROOT/RConfig.hxx> // for R__unlikely; 20#include <ROOT/RError.hxx>; 21#include <ROOT/RNTupleDescriptor.hxx>; 22#include <ROOT/RNTupleMetrics.hxx>; 23#include <ROOT/RNTupleModel.hxx>; 24#include <ROOT/RNTupleReadOptions.hxx>; 25#include <ROOT/RNTupleUtil.hxx>; 26#include <ROOT/RNTupleView.hxx>; 27#include <ROOT/RPageStorage.hxx>; 28#include <ROOT/RSpan.hxx>; 29 ; 30#include <iostream>; 31#include <iterator>; 32#include <memory>; 33#include <string>; 34#include <string_view>; 35 ; 36namespace ROOT {; 37class RNTuple;; 38 ; 39namespace Experimental {; 40class REntry;; 41 ; 42/// Listing of the different options that can be printed by RNTupleReader::GetInfo(); 43enum class ENTupleInfo {; 44 kSummary, // The ntuple name, description, number of entries; 45 kStorageDetails, // size on storage, page sizes, compression factor, etc.; 46 kMetrics, // internals performance counters, requires that EnableMetrics() was called; 47};; 48 ; 49// clang-format off; 50/**; 51\class ROOT::Experimental::RNTupleReader; 52\ingroup NTuple; 53\brief An RNTuple that is used to read data from storage; 54 ; 55An input ntuple provides data from storage as C++ objects. The ntuple model can be created from the data on storage; 56or it can be imposed by the user. The latter case allows users to read into a specialized ntuple model that covers; 57only a subset of the fields in the ntuple. The ntuple model is used when reading complete entries.; 58Individual fields can be read as well by instantiating a tree view.; 59 ; 60~~~ {.cpp}; 61#include <ROOT/RNTupleReader.hxx>; 62using ROOT::Experimental::RNTupleReader;; 63 ; 64#include <iostream>; 65 ; 66auto ntuple = RNTupleReader::Open(""myNTuple"", ""some/file.root"");; 67std::cout << ""myNTuple has "" << ntuple->GetNEntries() << "" entries\n"";; 68~~~; 69*/; 70// clang-format on; 71class RNTupleReader {; 72private:; 73 /// Set as the page source's scheduler for parallel page decompression if IMT is on; 74 /// Needs to be destructed after the pages source is",MatchSource.WIKI,doc/master/RNTupleReader_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleReader_8hxx_source.html
https://root.cern/doc/master/RNTupleReader_8hxx_source.html:3786,Performance,cache,cached,3786,"der {; 72private:; 73 /// Set as the page source's scheduler for parallel page decompression if IMT is on; 74 /// Needs to be destructed after the pages source is destructed (an thus be declared before); 75 std::unique_ptr<Internal::RPageStorage::RTaskScheduler> fUnzipTasks;; 76 ; 77 std::unique_ptr<Internal::RPageSource> fSource;; 78 /// Needs to be destructed before fSource; 79 std::unique_ptr<RNTupleModel> fModel;; 80 /// We use a dedicated on-demand reader for Show() and Scan(). Printing data uses all the fields; 81 /// from the full model even if the analysis code uses only a subset of fields. The display reader; 82 /// is a clone of the original reader.; 83 std::unique_ptr<RNTupleReader> fDisplayReader;; 84 /// The ntuple descriptor in the page source is protected by a read-write lock. We don't expose that to the; 85 /// users of RNTupleReader::GetDescriptor(). Instead, if descriptor information is needed, we clone the; 86 /// descriptor. Using the descriptor's generation number, we know if the cached descriptor is stale.; 87 /// Retrieving descriptor data from an RNTupleReader is supposed to be for testing and information purposes,; 88 /// not on a hot code path.; 89 std::unique_ptr<RNTupleDescriptor> fCachedDescriptor;; 90 Detail::RNTupleMetrics fMetrics;; 91 ; 92 RNTupleReader(std::unique_ptr<RNTupleModel> model, std::unique_ptr<Internal::RPageSource> source,; 93 const RNTupleReadOptions &options);; 94 /// The model is generated from the ntuple metadata on storage.; 95 explicit RNTupleReader(std::unique_ptr<Internal::RPageSource> source, const RNTupleReadOptions &options);; 96 ; 97 void ConnectModel(RNTupleModel &model);; 98 RNTupleReader *GetDisplayReader();; 99 void InitPageSource(bool enableMetrics);; 100 ; 101 DescriptorId_t RetrieveFieldId(std::string_view fieldName) const;; 102 ; 103public:; 104 // Browse through the entries; 105 class RIterator {; 106 private:; 107 NTupleSize_t fIndex = kInvalidNTupleIndex;; 108 ; 109 public:; 110 using iterator = RIt",MatchSource.WIKI,doc/master/RNTupleReader_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleReader_8hxx_source.html
https://root.cern/doc/master/RNTupleReader_8hxx_source.html:7762,Performance,cache,cached,7762,"d::string_view storage,; 159 const RNTupleReadOptions &options = RNTupleReadOptions());; 160 static std::unique_ptr<RNTupleReader> Open(std::unique_ptr<RNTupleModel> model, const RNTuple &ntuple,; 161 const RNTupleReadOptions &options = RNTupleReadOptions());; 162 /// Open RNTuples as one virtual, horizontally combined ntuple. The underlying RNTuples must; 163 /// have an identical number of entries. Fields in the combined RNTuple are named with the ntuple name; 164 /// as a prefix, e.g. myNTuple1.px and myNTuple2.pt (see tutorial ntpl006_friends); 165 static std::unique_ptr<RNTupleReader>; 166 OpenFriends(std::span<RNTupleOpenSpec> ntuples, const RNTupleReadOptions &options = RNTupleReadOptions());; 167 std::unique_ptr<RNTupleReader> Clone(); 168 {; 169 auto options = RNTupleReadOptions{};; 170 options.SetMetricsEnabled(fMetrics.IsEnabled());; 171 return std::unique_ptr<RNTupleReader>(new RNTupleReader(fSource->Clone(), options));; 172 }; 173 ~RNTupleReader();; 174 ; 175 NTupleSize_t GetNEntries() const { return fSource->GetNEntries(); }; 176 const RNTupleModel &GetModel();; 177 ; 178 /// Returns a cached copy of the page source descriptor. The returned pointer remains valid until the next call; 179 /// to LoadEntry or to any of the views returned from the reader.; 180 const RNTupleDescriptor &GetDescriptor();; 181 ; 182 /// Prints a detailed summary of the ntuple, including a list of fields.; 183 ///; 184 /// **Example: print summary information to stdout**; 185 /// ~~~ {.cpp}; 186 /// #include <ROOT/RNTupleReader.hxx>; 187 /// using ROOT::Experimental::ENTupleInfo;; 188 /// using ROOT::Experimental::RNTupleReader;; 189 ///; 190 /// #include <iostream>; 191 ///; 192 /// auto ntuple = RNTupleReader::Open(""myNTuple"", ""some/file.root"");; 193 /// ntuple->PrintInfo();; 194 /// // or, equivalently:; 195 /// ntuple->PrintInfo(ENTupleInfo::kSummary, std::cout);; 196 /// ~~~; 197 /// **Example: print detailed column storage data to stderr**; 198 /// ~~~ {.cpp}; 199 /// #inc",MatchSource.WIKI,doc/master/RNTupleReader_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleReader_8hxx_source.html
https://root.cern/doc/master/RNTupleReader_8hxx_source.html:14417,Performance,perform,performance,14417,"ield = RNTupleDirectAccessView<T>::CreateField(fieldId, *fSource);; 320 auto range = Internal::GetFieldRange(field, *fSource);; 321 return RNTupleDirectAccessView<T>(std::move(field), range);; 322 }; 323 ; 324 /// Raises an exception if:; 325 /// * there is no field with the given name or,; 326 /// * the field is not a collection; 327 RNTupleCollectionView GetCollectionView(std::string_view fieldName); 328 {; 329 auto fieldId = fSource->GetSharedDescriptorGuard()->FindFieldId(fieldName);; 330 if (fieldId == kInvalidDescriptorId) {; 331 throw RException(R__FAIL(""no field named '"" + std::string(fieldName) + ""' in RNTuple '"" +; 332 fSource->GetSharedDescriptorGuard()->GetName() + ""'""));; 333 }; 334 return GetCollectionView(fieldId);; 335 }; 336 ; 337 RNTupleCollectionView GetCollectionView(DescriptorId_t fieldId); 338 {; 339 return RNTupleCollectionView::Create(fieldId, fSource.get());; 340 }; 341 ; 342 RIterator begin() { return RIterator(0); }; 343 RIterator end() { return RIterator(GetNEntries()); }; 344 ; 345 /// Enable performance measurements (decompression time, bytes read from storage, etc.); 346 ///; 347 /// **Example: inspect the reader metrics after loading every entry**; 348 /// ~~~ {.cpp}; 349 /// #include <ROOT/RNTupleReader.hxx>; 350 /// using ROOT::Experimental::ENTupleInfo;; 351 /// using ROOT::Experimental::RNTupleReader;; 352 ///; 353 /// #include <iostream>; 354 ///; 355 /// auto ntuple = RNTupleReader::Open(""myNTuple"", ""some/file.root"");; 356 /// // metrics must be turned on beforehand; 357 /// ntuple->EnableMetrics();; 358 ///; 359 /// for (auto i : ntuple->GetEntryRange()) {; 360 /// ntuple->LoadEntry(i);; 361 /// }; 362 /// ntuple->PrintInfo(ENTupleInfo::kMetrics);; 363 /// ~~~; 364 void EnableMetrics() { fMetrics.Enable(); }; 365 const Detail::RNTupleMetrics &GetMetrics() const { return fMetrics; }; 366}; // class RNTupleReader; 367 ; 368} // namespace Experimental; 369} // namespace ROOT; 370 ; 371#endif // ROOT7_RNTupleReader; RConfig.hxx; R_",MatchSource.WIKI,doc/master/RNTupleReader_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleReader_8hxx_source.html
https://root.cern/doc/master/RNTupleReader_8hxx_source.html:14556,Performance,load,loading,14556,"<T>(std::move(field), range);; 322 }; 323 ; 324 /// Raises an exception if:; 325 /// * there is no field with the given name or,; 326 /// * the field is not a collection; 327 RNTupleCollectionView GetCollectionView(std::string_view fieldName); 328 {; 329 auto fieldId = fSource->GetSharedDescriptorGuard()->FindFieldId(fieldName);; 330 if (fieldId == kInvalidDescriptorId) {; 331 throw RException(R__FAIL(""no field named '"" + std::string(fieldName) + ""' in RNTuple '"" +; 332 fSource->GetSharedDescriptorGuard()->GetName() + ""'""));; 333 }; 334 return GetCollectionView(fieldId);; 335 }; 336 ; 337 RNTupleCollectionView GetCollectionView(DescriptorId_t fieldId); 338 {; 339 return RNTupleCollectionView::Create(fieldId, fSource.get());; 340 }; 341 ; 342 RIterator begin() { return RIterator(0); }; 343 RIterator end() { return RIterator(GetNEntries()); }; 344 ; 345 /// Enable performance measurements (decompression time, bytes read from storage, etc.); 346 ///; 347 /// **Example: inspect the reader metrics after loading every entry**; 348 /// ~~~ {.cpp}; 349 /// #include <ROOT/RNTupleReader.hxx>; 350 /// using ROOT::Experimental::ENTupleInfo;; 351 /// using ROOT::Experimental::RNTupleReader;; 352 ///; 353 /// #include <iostream>; 354 ///; 355 /// auto ntuple = RNTupleReader::Open(""myNTuple"", ""some/file.root"");; 356 /// // metrics must be turned on beforehand; 357 /// ntuple->EnableMetrics();; 358 ///; 359 /// for (auto i : ntuple->GetEntryRange()) {; 360 /// ntuple->LoadEntry(i);; 361 /// }; 362 /// ntuple->PrintInfo(ENTupleInfo::kMetrics);; 363 /// ~~~; 364 void EnableMetrics() { fMetrics.Enable(); }; 365 const Detail::RNTupleMetrics &GetMetrics() const { return fMetrics; }; 366}; // class RNTupleReader; 367 ; 368} // namespace Experimental; 369} // namespace ROOT; 370 ; 371#endif // ROOT7_RNTupleReader; RConfig.hxx; R__unlikely#define R__unlikely(expr)Definition RConfig.hxx:586; RError.hxx; R__FAIL#define R__FAIL(msg)Short-hand to return an RResult<T> in an error state; the RErr",MatchSource.WIKI,doc/master/RNTupleReader_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleReader_8hxx_source.html
https://root.cern/doc/master/RNTupleReader_8hxx_source.html:21367,Performance,perform,performance,21367,"1; ROOT::Experimental::RNTupleReader::RetrieveFieldIdDescriptorId_t RetrieveFieldId(std::string_view fieldName) constDefinition RNTupleReader.cxx:238; ROOT::Experimental::RNTupleReader::Showvoid Show(NTupleSize_t index, std::ostream &output=std::cout)Shows the values of the i-th entry/row, starting with 0 for the first entry.Definition RNTupleReader.cxx:208; ROOT::Experimental::RNTupleReader::GetDirectAccessViewRNTupleDirectAccessView< T > GetDirectAccessView(DescriptorId_t fieldId)Definition RNTupleReader.hxx:317; ROOT::Experimental::RNTupleReader::Clonestd::unique_ptr< RNTupleReader > Clone()Definition RNTupleReader.hxx:167; ROOT::Experimental::RNTupleReader::fMetricsDetail::RNTupleMetrics fMetricsDefinition RNTupleReader.hxx:90; ROOT::Experimental::RNTupleReader::fDisplayReaderstd::unique_ptr< RNTupleReader > fDisplayReaderWe use a dedicated on-demand reader for Show() and Scan().Definition RNTupleReader.hxx:83; ROOT::Experimental::RNTupleReader::EnableMetricsvoid EnableMetrics()Enable performance measurements (decompression time, bytes read from storage, etc....Definition RNTupleReader.hxx:364; ROOT::Experimental::RNTupleReader::GetMetricsconst Detail::RNTupleMetrics & GetMetrics() constDefinition RNTupleReader.hxx:365; ROOT::Experimental::RNTupleReader::beginRIterator begin()Definition RNTupleReader.hxx:342; ROOT::Experimental::RNTupleReader::~RNTupleReader~RNTupleReader(); ROOT::Experimental::RNTupleReader::GetViewRNTupleView< T > GetView(DescriptorId_t fieldId, std::shared_ptr< T > objPtr)Definition RNTupleReader.hxx:295; ROOT::Experimental::RNTupleReader::GetViewRNTupleView< T > GetView(std::string_view fieldName)Provides access to an individual field that can contain either a scalar value or a collection,...Definition RNTupleReader.hxx:269; ROOT::Experimental::RNTupleReader::GetViewRNTupleView< T > GetView(std::string_view fieldName, std::shared_ptr< T > objPtr)Definition RNTupleReader.hxx:275; ROOT::Experimental::RNTupleReader::GetDescriptorconst RNTupleDe",MatchSource.WIKI,doc/master/RNTupleReader_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleReader_8hxx_source.html
https://root.cern/doc/master/RNTupleReader_8hxx_source.html:22399,Performance,cache,cached,22399," performance measurements (decompression time, bytes read from storage, etc....Definition RNTupleReader.hxx:364; ROOT::Experimental::RNTupleReader::GetMetricsconst Detail::RNTupleMetrics & GetMetrics() constDefinition RNTupleReader.hxx:365; ROOT::Experimental::RNTupleReader::beginRIterator begin()Definition RNTupleReader.hxx:342; ROOT::Experimental::RNTupleReader::~RNTupleReader~RNTupleReader(); ROOT::Experimental::RNTupleReader::GetViewRNTupleView< T > GetView(DescriptorId_t fieldId, std::shared_ptr< T > objPtr)Definition RNTupleReader.hxx:295; ROOT::Experimental::RNTupleReader::GetViewRNTupleView< T > GetView(std::string_view fieldName)Provides access to an individual field that can contain either a scalar value or a collection,...Definition RNTupleReader.hxx:269; ROOT::Experimental::RNTupleReader::GetViewRNTupleView< T > GetView(std::string_view fieldName, std::shared_ptr< T > objPtr)Definition RNTupleReader.hxx:275; ROOT::Experimental::RNTupleReader::GetDescriptorconst RNTupleDescriptor & GetDescriptor()Returns a cached copy of the page source descriptor.Definition RNTupleReader.cxx:230; ROOT::Experimental::RNTupleReader::GetNEntriesNTupleSize_t GetNEntries() constDefinition RNTupleReader.hxx:175; ROOT::Experimental::RNTupleReader::fCachedDescriptorstd::unique_ptr< RNTupleDescriptor > fCachedDescriptorThe ntuple descriptor in the page source is protected by a read-write lock.Definition RNTupleReader.hxx:89; ROOT::Experimental::RNTupleReader::OpenFriendsstatic std::unique_ptr< RNTupleReader > OpenFriends(std::span< RNTupleOpenSpec > ntuples, const RNTupleReadOptions &options=RNTupleReadOptions())Open RNTuples as one virtual, horizontally combined ntuple.Definition RNTupleReader.cxx:117; ROOT::Experimental::RNTupleReader::GetCollectionViewRNTupleCollectionView GetCollectionView(std::string_view fieldName)Raises an exception if:Definition RNTupleReader.hxx:327; ROOT::Experimental::RNTupleReader::endRIterator end()Definition RNTupleReader.hxx:343; ROOT::Experimental",MatchSource.WIKI,doc/master/RNTupleReader_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleReader_8hxx_source.html
https://root.cern/doc/master/RNTupleReader_8hxx_source.html:3582,Security,expose,expose,3582,"(""myNTuple"", ""some/file.root"");; 67std::cout << ""myNTuple has "" << ntuple->GetNEntries() << "" entries\n"";; 68~~~; 69*/; 70// clang-format on; 71class RNTupleReader {; 72private:; 73 /// Set as the page source's scheduler for parallel page decompression if IMT is on; 74 /// Needs to be destructed after the pages source is destructed (an thus be declared before); 75 std::unique_ptr<Internal::RPageStorage::RTaskScheduler> fUnzipTasks;; 76 ; 77 std::unique_ptr<Internal::RPageSource> fSource;; 78 /// Needs to be destructed before fSource; 79 std::unique_ptr<RNTupleModel> fModel;; 80 /// We use a dedicated on-demand reader for Show() and Scan(). Printing data uses all the fields; 81 /// from the full model even if the analysis code uses only a subset of fields. The display reader; 82 /// is a clone of the original reader.; 83 std::unique_ptr<RNTupleReader> fDisplayReader;; 84 /// The ntuple descriptor in the page source is protected by a read-write lock. We don't expose that to the; 85 /// users of RNTupleReader::GetDescriptor(). Instead, if descriptor information is needed, we clone the; 86 /// descriptor. Using the descriptor's generation number, we know if the cached descriptor is stale.; 87 /// Retrieving descriptor data from an RNTupleReader is supposed to be for testing and information purposes,; 88 /// not on a hot code path.; 89 std::unique_ptr<RNTupleDescriptor> fCachedDescriptor;; 90 Detail::RNTupleMetrics fMetrics;; 91 ; 92 RNTupleReader(std::unique_ptr<RNTupleModel> model, std::unique_ptr<Internal::RPageSource> source,; 93 const RNTupleReadOptions &options);; 94 /// The model is generated from the ntuple metadata on storage.; 95 explicit RNTupleReader(std::unique_ptr<Internal::RPageSource> source, const RNTupleReadOptions &options);; 96 ; 97 void ConnectModel(RNTupleModel &model);; 98 RNTupleReader *GetDisplayReader();; 99 void InitPageSource(bool enableMetrics);; 100 ; 101 DescriptorId_t RetrieveFieldId(std::string_view fieldName) const;; 102 ; 103public:; 104",MatchSource.WIKI,doc/master/RNTupleReader_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleReader_8hxx_source.html
https://root.cern/doc/master/RNTupleReader_8hxx_source.html:10799,Security,access,access,10799,"ethod / constructor; 222 if (R__unlikely(!fModel)) {; 223 fModel = fSource->GetSharedDescriptorGuard()->CreateModel();; 224 ConnectModel(*fModel);; 225 }; 226 LoadEntry(index, fModel->GetDefaultEntry());; 227 }; 228 /// Fills a user provided entry after checking that the entry has been instantiated from the ntuple model; 229 void LoadEntry(NTupleSize_t index, REntry &entry) { entry.Read(index); }; 230 ; 231 /// Returns an iterator over the entry indices of the RNTuple.; 232 ///; 233 /// **Example: iterate over all entries and print each entry in JSON format**; 234 /// ~~~ {.cpp}; 235 /// #include <ROOT/RNTupleReader.hxx>; 236 /// using ROOT::Experimental::ENTupleShowFormat;; 237 /// using ROOT::Experimental::RNTupleReader;; 238 ///; 239 /// #include <iostream>; 240 ///; 241 /// auto ntuple = RNTupleReader::Open(""myNTuple"", ""some/file.root"");; 242 /// for (auto i : ntuple->GetEntryRange()) {; 243 /// ntuple->Show(i);; 244 /// }; 245 /// ~~~; 246 RNTupleGlobalRange GetEntryRange() { return RNTupleGlobalRange(0, GetNEntries()); }; 247 ; 248 /// Provides access to an individual field that can contain either a scalar value or a collection, e.g.; 249 /// GetView<double>(""particles.pt"") or GetView<std::vector<double>>(""particle""). It can as well be the index; 250 /// field of a collection itself, like GetView<NTupleSize_t>(""particle"").; 251 ///; 252 /// Raises an exception if there is no field with the given name.; 253 ///; 254 /// **Example: iterate over a field named ""pt"" of type `float`**; 255 /// ~~~ {.cpp}; 256 /// #include <ROOT/RNTupleReader.hxx>; 257 /// using ROOT::Experimental::RNTupleReader;; 258 ///; 259 /// #include <iostream>; 260 ///; 261 /// auto ntuple = RNTupleReader::Open(""myNTuple"", ""some/file.root"");; 262 /// auto pt = ntuple->GetView<float>(""pt"");; 263 ///; 264 /// for (auto i : ntuple->GetEntryRange()) {; 265 /// std::cout << i << "": "" << pt(i) << ""\n"";; 266 /// }; 267 /// ~~~; 268 template <typename T>; 269 RNTupleView<T> GetView(std::string_view fie",MatchSource.WIKI,doc/master/RNTupleReader_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleReader_8hxx_source.html
https://root.cern/doc/master/RNTupleReader_8hxx_source.html:17480,Security,access,access,17480,"trics::IsEnabledbool IsEnabled() constDefinition RNTupleMetrics.hxx:326; ROOT::Experimental::Detail::RNTupleMetrics::Enablevoid Enable()Definition RNTupleMetrics.cxx:81; ROOT::Experimental::REntryThe REntry is a collection of values in an ntuple corresponding to a complete row in the data set.Definition REntry.hxx:51; ROOT::Experimental::REntry::Readvoid Read(NTupleSize_t index)Definition REntry.hxx:109; ROOT::Experimental::RExceptionBase class for all ROOT issued exceptions.Definition RError.hxx:78; ROOT::Experimental::RNTupleCollectionViewA view for a collection, that can itself generate new ntuple views for its nested fields.Definition RNTupleView.hxx:338; ROOT::Experimental::RNTupleCollectionView::Createstatic RNTupleCollectionView Create(DescriptorId_t fieldId, Internal::RPageSource *source)Definition RNTupleView.hxx:353; ROOT::Experimental::RNTupleDescriptorThe on-storage meta-data of an ntuple.Definition RNTupleDescriptor.hxx:528; ROOT::Experimental::RNTupleDirectAccessViewA view variant that provides direct access to the I/O buffers.Definition RNTupleView.hxx:293; ROOT::Experimental::RNTupleDirectAccessView::CreateFieldstatic RField< T > CreateField(DescriptorId_t fieldId, Internal::RPageSource &pageSource)Definition RNTupleView.hxx:301; ROOT::Experimental::RNTupleGlobalRangeUsed to loop over indexes (entries or collections) between start and end.Definition RNTupleView.hxx:40; ROOT::Experimental::RNTupleModelThe RNTupleModel encapulates the schema of an ntuple.Definition RNTupleModel.hxx:136; ROOT::Experimental::RNTupleReadOptionsCommon user-tunable settings for reading ntuples.Definition RNTupleReadOptions.hxx:31; ROOT::Experimental::RNTupleReadOptions::SetMetricsEnabledvoid SetMetricsEnabled(bool enable)Definition RNTupleReadOptions.hxx:62; ROOT::Experimental::RNTupleReader::RIteratorDefinition RNTupleReader.hxx:105; ROOT::Experimental::RNTupleReader::RIterator::difference_typeNTupleSize_t difference_typeDefinition RNTupleReader.hxx:113; ROOT::Experimental",MatchSource.WIKI,doc/master/RNTupleReader_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleReader_8hxx_source.html
https://root.cern/doc/master/RNTupleReader_8hxx_source.html:22021,Security,access,access,22021,"rimental::RNTupleReader::fMetricsDetail::RNTupleMetrics fMetricsDefinition RNTupleReader.hxx:90; ROOT::Experimental::RNTupleReader::fDisplayReaderstd::unique_ptr< RNTupleReader > fDisplayReaderWe use a dedicated on-demand reader for Show() and Scan().Definition RNTupleReader.hxx:83; ROOT::Experimental::RNTupleReader::EnableMetricsvoid EnableMetrics()Enable performance measurements (decompression time, bytes read from storage, etc....Definition RNTupleReader.hxx:364; ROOT::Experimental::RNTupleReader::GetMetricsconst Detail::RNTupleMetrics & GetMetrics() constDefinition RNTupleReader.hxx:365; ROOT::Experimental::RNTupleReader::beginRIterator begin()Definition RNTupleReader.hxx:342; ROOT::Experimental::RNTupleReader::~RNTupleReader~RNTupleReader(); ROOT::Experimental::RNTupleReader::GetViewRNTupleView< T > GetView(DescriptorId_t fieldId, std::shared_ptr< T > objPtr)Definition RNTupleReader.hxx:295; ROOT::Experimental::RNTupleReader::GetViewRNTupleView< T > GetView(std::string_view fieldName)Provides access to an individual field that can contain either a scalar value or a collection,...Definition RNTupleReader.hxx:269; ROOT::Experimental::RNTupleReader::GetViewRNTupleView< T > GetView(std::string_view fieldName, std::shared_ptr< T > objPtr)Definition RNTupleReader.hxx:275; ROOT::Experimental::RNTupleReader::GetDescriptorconst RNTupleDescriptor & GetDescriptor()Returns a cached copy of the page source descriptor.Definition RNTupleReader.cxx:230; ROOT::Experimental::RNTupleReader::GetNEntriesNTupleSize_t GetNEntries() constDefinition RNTupleReader.hxx:175; ROOT::Experimental::RNTupleReader::fCachedDescriptorstd::unique_ptr< RNTupleDescriptor > fCachedDescriptorThe ntuple descriptor in the page source is protected by a read-write lock.Definition RNTupleReader.hxx:89; ROOT::Experimental::RNTupleReader::OpenFriendsstatic std::unique_ptr< RNTupleReader > OpenFriends(std::span< RNTupleOpenSpec > ntuples, const RNTupleReadOptions &options=RNTupleReadOptions())Open RNTuples as",MatchSource.WIKI,doc/master/RNTupleReader_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleReader_8hxx_source.html
https://root.cern/doc/master/RNTupleReader_8hxx_source.html:3893,Testability,test,testing,3893,"eeds to be destructed after the pages source is destructed (an thus be declared before); 75 std::unique_ptr<Internal::RPageStorage::RTaskScheduler> fUnzipTasks;; 76 ; 77 std::unique_ptr<Internal::RPageSource> fSource;; 78 /// Needs to be destructed before fSource; 79 std::unique_ptr<RNTupleModel> fModel;; 80 /// We use a dedicated on-demand reader for Show() and Scan(). Printing data uses all the fields; 81 /// from the full model even if the analysis code uses only a subset of fields. The display reader; 82 /// is a clone of the original reader.; 83 std::unique_ptr<RNTupleReader> fDisplayReader;; 84 /// The ntuple descriptor in the page source is protected by a read-write lock. We don't expose that to the; 85 /// users of RNTupleReader::GetDescriptor(). Instead, if descriptor information is needed, we clone the; 86 /// descriptor. Using the descriptor's generation number, we know if the cached descriptor is stale.; 87 /// Retrieving descriptor data from an RNTupleReader is supposed to be for testing and information purposes,; 88 /// not on a hot code path.; 89 std::unique_ptr<RNTupleDescriptor> fCachedDescriptor;; 90 Detail::RNTupleMetrics fMetrics;; 91 ; 92 RNTupleReader(std::unique_ptr<RNTupleModel> model, std::unique_ptr<Internal::RPageSource> source,; 93 const RNTupleReadOptions &options);; 94 /// The model is generated from the ntuple metadata on storage.; 95 explicit RNTupleReader(std::unique_ptr<Internal::RPageSource> source, const RNTupleReadOptions &options);; 96 ; 97 void ConnectModel(RNTupleModel &model);; 98 RNTupleReader *GetDisplayReader();; 99 void InitPageSource(bool enableMetrics);; 100 ; 101 DescriptorId_t RetrieveFieldId(std::string_view fieldName) const;; 102 ; 103public:; 104 // Browse through the entries; 105 class RIterator {; 106 private:; 107 NTupleSize_t fIndex = kInvalidNTupleIndex;; 108 ; 109 public:; 110 using iterator = RIterator;; 111 using iterator_category = std::forward_iterator_tag;; 112 using value_type = NTupleSize_t;; 113 using ",MatchSource.WIKI,doc/master/RNTupleReader_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleReader_8hxx_source.html
https://root.cern/doc/master/RNTupleUtil_8hxx_source.html:2075,Availability,avail,available,2075,"{; 28 ; 29/// Helper types to present an offset column as array of collection sizes.; 30/// See RField<RNTupleCardinality<SizeT>> for details.; 31template <typename SizeT>; 32struct RNTupleCardinality {; 33 static_assert(std::is_same_v<SizeT, std::uint32_t> || std::is_same_v<SizeT, std::uint64_t>,; 34 ""RNTupleCardinality is only supported with std::uint32_t or std::uint64_t template parameters"");; 35 ; 36 using ValueType = SizeT;; 37 ; 38 RNTupleCardinality() : fValue(0) {}; 39 explicit constexpr RNTupleCardinality(ValueType value) : fValue(value) {}; 40 RNTupleCardinality &operator=(const ValueType value); 41 {; 42 fValue = value;; 43 return *this;; 44 }; 45 operator ValueType() const { return fValue; }; 46 ; 47 ValueType fValue;; 48};; 49 ; 50namespace Experimental {; 51 ; 52class RLogChannel;; 53/// Log channel for RNTuple diagnostics.; 54RLogChannel &NTupleLog();; 55 ; 56// clang-format off; 57/**; 58\class ROOT::Experimental::EColumnType; 59\ingroup NTuple; 60\brief The available trivial, native content types of a column; 61 ; 62More complex types, such as classes, get translated into columns of such simple types by the RField.; 63When changed, remember to update; 64 - RColumnElement::Generate(); 65 - RColumnElement::GetTypeName(); 66 - RColumnElement::GetValidBitRange(); 67 - RColumnElement template specializations / packing & unpacking; 68 - If necessary, endianess handling for the packing + unit test in ntuple_endian; 69 - RNTupleSerializer::[Des|S]erializeColumnType; 70*/; 71// clang-format on; 72enum class EColumnType {; 73 kUnknown = 0,; 74 // type for root columns of (nested) collections; offsets are relative to the current cluster; 75 kIndex64,; 76 kIndex32,; 77 // 96 bit column that is a pair of a kIndex64 and a 32bit dispatch tag to a column ID;; 78 // used to serialize std::variant.; 79 kSwitch,; 80 kByte,; 81 kChar,; 82 kBit,; 83 kReal64,; 84 kReal32,; 85 kReal16,; 86 kInt64,; 87 kUInt64,; 88 kInt32,; 89 kUInt32,; 90 kInt16,; 91 kUInt16,; 92 kInt8,;",MatchSource.WIKI,doc/master/RNTupleUtil_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleUtil_8hxx_source.html
https://root.cern/doc/master/RNTupleUtil_8hxx_source.html:2265,Deployability,update,update,2265,"it constexpr RNTupleCardinality(ValueType value) : fValue(value) {}; 40 RNTupleCardinality &operator=(const ValueType value); 41 {; 42 fValue = value;; 43 return *this;; 44 }; 45 operator ValueType() const { return fValue; }; 46 ; 47 ValueType fValue;; 48};; 49 ; 50namespace Experimental {; 51 ; 52class RLogChannel;; 53/// Log channel for RNTuple diagnostics.; 54RLogChannel &NTupleLog();; 55 ; 56// clang-format off; 57/**; 58\class ROOT::Experimental::EColumnType; 59\ingroup NTuple; 60\brief The available trivial, native content types of a column; 61 ; 62More complex types, such as classes, get translated into columns of such simple types by the RField.; 63When changed, remember to update; 64 - RColumnElement::Generate(); 65 - RColumnElement::GetTypeName(); 66 - RColumnElement::GetValidBitRange(); 67 - RColumnElement template specializations / packing & unpacking; 68 - If necessary, endianess handling for the packing + unit test in ntuple_endian; 69 - RNTupleSerializer::[Des|S]erializeColumnType; 70*/; 71// clang-format on; 72enum class EColumnType {; 73 kUnknown = 0,; 74 // type for root columns of (nested) collections; offsets are relative to the current cluster; 75 kIndex64,; 76 kIndex32,; 77 // 96 bit column that is a pair of a kIndex64 and a 32bit dispatch tag to a column ID;; 78 // used to serialize std::variant.; 79 kSwitch,; 80 kByte,; 81 kChar,; 82 kBit,; 83 kReal64,; 84 kReal32,; 85 kReal16,; 86 kInt64,; 87 kUInt64,; 88 kInt32,; 89 kUInt32,; 90 kInt16,; 91 kUInt16,; 92 kInt8,; 93 kUInt8,; 94 kSplitIndex64,; 95 kSplitIndex32,; 96 kSplitReal64,; 97 kSplitReal32,; 98 kSplitInt64,; 99 kSplitUInt64,; 100 kSplitInt32,; 101 kSplitUInt32,; 102 kSplitInt16,; 103 kSplitUInt16,; 104 kReal32Trunc,; 105 kReal32Quant,; 106 kMax,; 107};; 108 ; 109/// The fields in the ntuple model tree can carry different structural information about the type system.; 110/// Leaf fields contain just data, collection fields resolve to offset columns, record fields have no; 111/// materiali",MatchSource.WIKI,doc/master/RNTupleUtil_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleUtil_8hxx_source.html
https://root.cern/doc/master/RNTupleUtil_8hxx_source.html:7539,Integrability,depend,depend,7539,"; 191 }; 192 RClusterIndex &operator++() /* prefix */; 193 {; 194 ++fIndex;; 195 return *this;; 196 }; 197 bool operator==(RClusterIndex other) const { return fClusterId == other.fClusterId && fIndex == other.fIndex; }; 198 bool operator!=(RClusterIndex other) const { return !(*this == other); }; 199 ; 200 DescriptorId_t GetClusterId() const { return fClusterId; }; 201 ClusterSize_t::ValueType GetIndex() const { return fIndex; }; 202};; 203 ; 204/// RNTupleLocator payload that is common for object stores using 64bit location information.; 205/// This might not contain the full location of the content. In particular, for page locators this information may be; 206/// used in conjunction with the cluster and column ID.; 207struct RNTupleLocatorObject64 {; 208 std::uint64_t fLocation = 0;; 209 bool operator==(const RNTupleLocatorObject64 &other) const { return fLocation == other.fLocation; }; 210};; 211 ; 212/// Generic information about the physical location of data. Values depend on the concrete storage type. E.g.,; 213/// for a local file `fPosition` might be a 64bit file offset. Referenced objects on storage can be compressed; 214/// and therefore we need to store their actual size.; 215/// TODO(jblomer): consider moving this to `RNTupleDescriptor`; 216struct RNTupleLocator {; 217 /// Values for the _Type_ field in non-disk locators. Serializable types must have the MSb == 0; see; 218 /// `doc/BinaryFormatSpecification.md` for details; 219 enum ELocatorType : std::uint8_t {; 220 // The kTypeFile locator may translate to an on-disk standard locator (type 0x00) or a large locator (type 0x01),; 221 // if the size of the referenced data block is >2GB; 222 kTypeFile = 0x00,; 223 kTypeDAOS = 0x02,; 224 ; 225 kLastSerializableType = 0x7f,; 226 kTypePageZero = kLastSerializableType + 1,; 227 kTypeUnknown,; 228 };; 229 ; 230 std::uint64_t fBytesOnStorage = 0;; 231 /// Simple on-disk locators consisting of a 64-bit offset use variant type `uint64_t`; extended locators have; 2",MatchSource.WIKI,doc/master/RNTupleUtil_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleUtil_8hxx_source.html
https://root.cern/doc/master/RNTupleUtil_8hxx_source.html:8528,Modifiability,extend,extended,8528,"struct RNTupleLocatorObject64 {; 208 std::uint64_t fLocation = 0;; 209 bool operator==(const RNTupleLocatorObject64 &other) const { return fLocation == other.fLocation; }; 210};; 211 ; 212/// Generic information about the physical location of data. Values depend on the concrete storage type. E.g.,; 213/// for a local file `fPosition` might be a 64bit file offset. Referenced objects on storage can be compressed; 214/// and therefore we need to store their actual size.; 215/// TODO(jblomer): consider moving this to `RNTupleDescriptor`; 216struct RNTupleLocator {; 217 /// Values for the _Type_ field in non-disk locators. Serializable types must have the MSb == 0; see; 218 /// `doc/BinaryFormatSpecification.md` for details; 219 enum ELocatorType : std::uint8_t {; 220 // The kTypeFile locator may translate to an on-disk standard locator (type 0x00) or a large locator (type 0x01),; 221 // if the size of the referenced data block is >2GB; 222 kTypeFile = 0x00,; 223 kTypeDAOS = 0x02,; 224 ; 225 kLastSerializableType = 0x7f,; 226 kTypePageZero = kLastSerializableType + 1,; 227 kTypeUnknown,; 228 };; 229 ; 230 std::uint64_t fBytesOnStorage = 0;; 231 /// Simple on-disk locators consisting of a 64-bit offset use variant type `uint64_t`; extended locators have; 232 /// `fPosition.index()` > 0; 233 std::variant<std::uint64_t, RNTupleLocatorObject64> fPosition{};; 234 /// For non-disk locators, the value for the _Type_ field. This makes it possible to have different type values even; 235 /// if the payload structure is identical.; 236 ELocatorType fType = kTypeFile;; 237 /// Reserved for use by concrete storage backends; 238 std::uint8_t fReserved = 0;; 239 ; 240 bool operator==(const RNTupleLocator &other) const; 241 {; 242 return fPosition == other.fPosition && fBytesOnStorage == other.fBytesOnStorage && fType == other.fType;; 243 }; 244 template <typename T>; 245 const T &GetPosition() const; 246 {; 247 return std::get<T>(fPosition);; 248 }; 249};; 250 ; 251/// Used to specify t",MatchSource.WIKI,doc/master/RNTupleUtil_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleUtil_8hxx_source.html
https://root.cern/doc/master/RNTupleUtil_8hxx_source.html:20907,Modifiability,extend,extended,20907,":219; ROOT::Experimental::RNTupleLocator::kTypeUnknown@ kTypeUnknownDefinition RNTupleUtil.hxx:227; ROOT::Experimental::RNTupleLocator::kLastSerializableType@ kLastSerializableTypeDefinition RNTupleUtil.hxx:225; ROOT::Experimental::RNTupleLocator::kTypeDAOS@ kTypeDAOSDefinition RNTupleUtil.hxx:223; ROOT::Experimental::RNTupleLocator::kTypeFile@ kTypeFileDefinition RNTupleUtil.hxx:222; ROOT::Experimental::RNTupleLocator::kTypePageZero@ kTypePageZeroDefinition RNTupleUtil.hxx:226; ROOT::Experimental::RNTupleLocator::fReservedstd::uint8_t fReservedReserved for use by concrete storage backends.Definition RNTupleUtil.hxx:238; ROOT::Experimental::RNTupleLocator::fTypeELocatorType fTypeFor non-disk locators, the value for the Type field.Definition RNTupleUtil.hxx:236; ROOT::Experimental::RNTupleLocator::operator==bool operator==(const RNTupleLocator &other) constDefinition RNTupleUtil.hxx:240; ROOT::Experimental::RNTupleLocator::fPositionstd::variant< std::uint64_t, RNTupleLocatorObject64 > fPositionSimple on-disk locators consisting of a 64-bit offset use variant type uint64_t; extended locators ha...Definition RNTupleUtil.hxx:233; ROOT::Experimental::RNTupleLocator::GetPositionconst T & GetPosition() constDefinition RNTupleUtil.hxx:245; ROOT::Experimental::RNTupleOpenSpecUsed to specify the underlying RNTuples in RNTupleProcessor and RNTupleReader::OpenFriends()Definition RNTupleUtil.hxx:252; ROOT::Experimental::RNTupleOpenSpec::fStoragestd::string fStorageDefinition RNTupleUtil.hxx:254; ROOT::Experimental::RNTupleOpenSpec::fOptionsRNTupleReadOptions fOptionsDefinition RNTupleUtil.hxx:255; ROOT::Experimental::RNTupleOpenSpec::fNTupleNamestd::string fNTupleNameDefinition RNTupleUtil.hxx:253; ROOT::Experimental::RNTupleOpenSpec::RNTupleOpenSpecRNTupleOpenSpec(std::string_view n, std::string_view s)Definition RNTupleUtil.hxx:257; ROOT::RNTupleCardinalityHelper types to present an offset column as array of collection sizes.Definition RNTupleUtil.hxx:32; ROOT::RNTupleCardinali",MatchSource.WIKI,doc/master/RNTupleUtil_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleUtil_8hxx_source.html
https://root.cern/doc/master/RNTupleUtil_8hxx_source.html:3975,Safety,avoid,avoid,3975,"rd fields have no; 111/// materialization on the primitive column layer.; 112enum ENTupleStructure : std::uint16_t { kInvalid, kLeaf, kCollection, kRecord, kVariant, kStreamer, kUnknown };; 113 ; 114/// Integer type long enough to hold the maximum number of entries in a column; 115using NTupleSize_t = std::uint64_t;; 116constexpr NTupleSize_t kInvalidNTupleIndex = std::uint64_t(-1);; 117/// Wrap the integer in a struct in order to avoid template specialization clash with std::uint64_t; 118struct RClusterSize {; 119 using ValueType = std::uint64_t;; 120 ; 121 RClusterSize() : fValue(0) {}; 122 explicit constexpr RClusterSize(ValueType value) : fValue(value) {}; 123 RClusterSize &operator=(const ValueType value); 124 {; 125 fValue = value;; 126 return *this;; 127 }; 128 RClusterSize &operator+=(const ValueType value); 129 {; 130 fValue += value;; 131 return *this;; 132 }; 133 RClusterSize operator++(int); 134 {; 135 auto result = *this;; 136 fValue++;; 137 return result;; 138 }; 139 operator ValueType() const { return fValue; }; 140 ; 141 ValueType fValue;; 142};; 143using ClusterSize_t = RClusterSize;; 144constexpr ClusterSize_t kInvalidClusterIndex(std::uint64_t(-1));; 145 ; 146constexpr int kUnknownCompressionSettings = -1;; 147 ; 148/// Holds the index and the tag of a kSwitch column; 149class RColumnSwitch {; 150private:; 151 ClusterSize_t fIndex;; 152 std::uint32_t fTag = 0;; 153 ; 154public:; 155 RColumnSwitch() = default;; 156 RColumnSwitch(ClusterSize_t index, std::uint32_t tag) : fIndex(index), fTag(tag) {}; 157 ClusterSize_t GetIndex() const { return fIndex; }; 158 std::uint32_t GetTag() const { return fTag; }; 159};; 160 ; 161/// Uniquely identifies a physical column within the scope of the current process, used to tag pages; 162using ColumnId_t = std::int64_t;; 163constexpr ColumnId_t kInvalidColumnId = -1;; 164 ; 165/// Distriniguishes elements of the same type within a descriptor, e.g. different fields; 166using DescriptorId_t = std::uint64_t;; 167conste",MatchSource.WIKI,doc/master/RNTupleUtil_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleUtil_8hxx_source.html
https://root.cern/doc/master/RNTupleUtil_8hxx_source.html:18204,Safety,avoid,avoid,18204,"1)); ROOT::Experimental::ENTupleStructureENTupleStructureThe fields in the ntuple model tree can carry different structural information about the type system.Definition RNTupleUtil.hxx:112; ROOT::Experimental::kLeaf@ kLeafDefinition RNTupleUtil.hxx:112; ROOT::Experimental::kRecord@ kRecordDefinition RNTupleUtil.hxx:112; ROOT::Experimental::kUnknown@ kUnknownDefinition RNTupleUtil.hxx:112; ROOT::Experimental::kCollection@ kCollectionDefinition RNTupleUtil.hxx:112; ROOT::Experimental::kInvalid@ kInvalidDefinition RNTupleUtil.hxx:112; ROOT::Experimental::kStreamer@ kStreamerDefinition RNTupleUtil.hxx:112; ROOT::Experimental::kVariant@ kVariantDefinition RNTupleUtil.hxx:112; ROOT::Experimental::kInvalidDescriptorIdconstexpr DescriptorId_t kInvalidDescriptorIdDefinition RNTupleUtil.hxx:167; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Experimental::RClusterSizeWrap the integer in a struct in order to avoid template specialization clash with std::uint64_t.Definition RNTupleUtil.hxx:118; ROOT::Experimental::RClusterSize::fValueValueType fValueDefinition RNTupleUtil.hxx:141; ROOT::Experimental::RClusterSize::operator++RClusterSize operator++(int)Definition RNTupleUtil.hxx:133; ROOT::Experimental::RClusterSize::operator=RClusterSize & operator=(const ValueType value)Definition RNTupleUtil.hxx:123; ROOT::Experimental::RClusterSize::RClusterSizeconstexpr RClusterSize(ValueType value)Definition RNTupleUtil.hxx:122; ROOT::Experimental::RClusterSize::ValueTypestd::uint64_t ValueTypeDefinition RNTupleUtil.hxx:119; ROOT::Experimental::RClusterSize::RClusterSizeRClusterSize()Definition RNTupleUtil.hxx:121; ROOT::Experimental::RClusterSize::operator+=RClusterSize & operator+=(const ValueType value)Definition RNTupleUtil.hxx:128; ROOT::Experimental::RNTupleLocatorObject64RNTupleLocator payload that is common for object stores using 64bit location information.Definition RNTupleUtil.hx",MatchSource.WIKI,doc/master/RNTupleUtil_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleUtil_8hxx_source.html
https://root.cern/doc/master/RNTupleUtil_8hxx_source.html:2512,Testability,test,test,2512,"it constexpr RNTupleCardinality(ValueType value) : fValue(value) {}; 40 RNTupleCardinality &operator=(const ValueType value); 41 {; 42 fValue = value;; 43 return *this;; 44 }; 45 operator ValueType() const { return fValue; }; 46 ; 47 ValueType fValue;; 48};; 49 ; 50namespace Experimental {; 51 ; 52class RLogChannel;; 53/// Log channel for RNTuple diagnostics.; 54RLogChannel &NTupleLog();; 55 ; 56// clang-format off; 57/**; 58\class ROOT::Experimental::EColumnType; 59\ingroup NTuple; 60\brief The available trivial, native content types of a column; 61 ; 62More complex types, such as classes, get translated into columns of such simple types by the RField.; 63When changed, remember to update; 64 - RColumnElement::Generate(); 65 - RColumnElement::GetTypeName(); 66 - RColumnElement::GetValidBitRange(); 67 - RColumnElement template specializations / packing & unpacking; 68 - If necessary, endianess handling for the packing + unit test in ntuple_endian; 69 - RNTupleSerializer::[Des|S]erializeColumnType; 70*/; 71// clang-format on; 72enum class EColumnType {; 73 kUnknown = 0,; 74 // type for root columns of (nested) collections; offsets are relative to the current cluster; 75 kIndex64,; 76 kIndex32,; 77 // 96 bit column that is a pair of a kIndex64 and a 32bit dispatch tag to a column ID;; 78 // used to serialize std::variant.; 79 kSwitch,; 80 kByte,; 81 kChar,; 82 kBit,; 83 kReal64,; 84 kReal32,; 85 kReal16,; 86 kInt64,; 87 kUInt64,; 88 kInt32,; 89 kUInt32,; 90 kInt16,; 91 kUInt16,; 92 kInt8,; 93 kUInt8,; 94 kSplitIndex64,; 95 kSplitIndex32,; 96 kSplitReal64,; 97 kSplitReal32,; 98 kSplitInt64,; 99 kSplitUInt64,; 100 kSplitInt32,; 101 kSplitUInt32,; 102 kSplitInt16,; 103 kSplitUInt16,; 104 kReal32Trunc,; 105 kReal32Quant,; 106 kMax,; 107};; 108 ; 109/// The fields in the ntuple model tree can carry different structural information about the type system.; 110/// Leaf fields contain just data, collection fields resolve to offset columns, record fields have no; 111/// materiali",MatchSource.WIKI,doc/master/RNTupleUtil_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleUtil_8hxx_source.html
https://root.cern/doc/master/RNTupleUtil_8hxx_source.html:2208,Usability,simpl,simple,2208,"{; 28 ; 29/// Helper types to present an offset column as array of collection sizes.; 30/// See RField<RNTupleCardinality<SizeT>> for details.; 31template <typename SizeT>; 32struct RNTupleCardinality {; 33 static_assert(std::is_same_v<SizeT, std::uint32_t> || std::is_same_v<SizeT, std::uint64_t>,; 34 ""RNTupleCardinality is only supported with std::uint32_t or std::uint64_t template parameters"");; 35 ; 36 using ValueType = SizeT;; 37 ; 38 RNTupleCardinality() : fValue(0) {}; 39 explicit constexpr RNTupleCardinality(ValueType value) : fValue(value) {}; 40 RNTupleCardinality &operator=(const ValueType value); 41 {; 42 fValue = value;; 43 return *this;; 44 }; 45 operator ValueType() const { return fValue; }; 46 ; 47 ValueType fValue;; 48};; 49 ; 50namespace Experimental {; 51 ; 52class RLogChannel;; 53/// Log channel for RNTuple diagnostics.; 54RLogChannel &NTupleLog();; 55 ; 56// clang-format off; 57/**; 58\class ROOT::Experimental::EColumnType; 59\ingroup NTuple; 60\brief The available trivial, native content types of a column; 61 ; 62More complex types, such as classes, get translated into columns of such simple types by the RField.; 63When changed, remember to update; 64 - RColumnElement::Generate(); 65 - RColumnElement::GetTypeName(); 66 - RColumnElement::GetValidBitRange(); 67 - RColumnElement template specializations / packing & unpacking; 68 - If necessary, endianess handling for the packing + unit test in ntuple_endian; 69 - RNTupleSerializer::[Des|S]erializeColumnType; 70*/; 71// clang-format on; 72enum class EColumnType {; 73 kUnknown = 0,; 74 // type for root columns of (nested) collections; offsets are relative to the current cluster; 75 kIndex64,; 76 kIndex32,; 77 // 96 bit column that is a pair of a kIndex64 and a 32bit dispatch tag to a column ID;; 78 // used to serialize std::variant.; 79 kSwitch,; 80 kByte,; 81 kChar,; 82 kBit,; 83 kReal64,; 84 kReal32,; 85 kReal16,; 86 kInt64,; 87 kUInt64,; 88 kInt32,; 89 kUInt32,; 90 kInt16,; 91 kUInt16,; 92 kInt8,;",MatchSource.WIKI,doc/master/RNTupleUtil_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleUtil_8hxx_source.html
https://root.cern/doc/master/RNTupleWriter_8cxx_source.html:2271,Availability,failure,failure,2271," ; 28#include <TROOT.h>; 29 ; 30#include <utility>; 31 ; 32ROOT::Experimental::RNTupleWriter::RNTupleWriter(std::unique_ptr<ROOT::Experimental::RNTupleModel> model,; 33 std::unique_ptr<ROOT::Experimental::Internal::RPageSink> sink); 34 : fFillContext(std::move(model), std::move(sink)), fMetrics(""RNTupleWriter""); 35{; 36#ifdef R__USE_IMT; 37 if (IsImplicitMTEnabled() &&; 38 fFillContext.fSink->GetWriteOptions().GetUseImplicitMT() == RNTupleWriteOptions::EImplicitMT::kDefault) {; 39 fZipTasks = std::make_unique<Internal::RNTupleImtTaskScheduler>();; 40 fFillContext.fSink->SetTaskScheduler(fZipTasks.get());; 41 }; 42#endif; 43 // Observe directly the sink's metrics to avoid an additional prefix from the fill context.; 44 fMetrics.ObserveMetrics(fFillContext.fSink->GetMetrics());; 45}; 46 ; 47ROOT::Experimental::RNTupleWriter::~RNTupleWriter(); 48{; 49 try {; 50 CommitCluster(true /* commitClusterGroup */);; 51 fFillContext.fSink->CommitDataset();; 52 } catch (const RException &err) {; 53 R__LOG_ERROR(NTupleLog()) << ""failure committing ntuple: "" << err.GetError().GetReport();; 54 }; 55}; 56 ; 57std::unique_ptr<ROOT::Experimental::RNTupleWriter>; 58ROOT::Experimental::RNTupleWriter::Create(std::unique_ptr<RNTupleModel> model,; 59 std::unique_ptr<Internal::RPageSink> sink, const RNTupleWriteOptions &options); 60{; 61 if (model->GetRegisteredSubfields().size() > 0) {; 62 throw RException(R__FAIL(""cannot create an RNTupleWriter from a model with registered subfields""));; 63 }; 64 if (options.GetUseBufferedWrite()) {; 65 sink = std::make_unique<Internal::RPageSinkBuf>(std::move(sink));; 66 }; 67 return std::unique_ptr<RNTupleWriter>(new RNTupleWriter(std::move(model), std::move(sink)));; 68}; 69 ; 70std::unique_ptr<ROOT::Experimental::RNTupleWriter>; 71ROOT::Experimental::RNTupleWriter::Recreate(std::unique_ptr<RNTupleModel> model, std::string_view ntupleName,; 72 std::string_view storage, const RNTupleWriteOptions &options); 73{; 74 auto sink = Internal::RPagePersistentSin",MatchSource.WIKI,doc/master/RNTupleWriter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8cxx_source.html
https://root.cern/doc/master/RNTupleWriter_8cxx_source.html:5157,Availability,error,error,5157,"ieldBase::Create(fieldName, typeName);; 89 model->AddField(field.Unwrap());; 90 }; 91 return Create(std::move(model), std::move(sink), options);; 92}; 93 ; 94std::unique_ptr<ROOT::Experimental::RNTupleWriter>; 95ROOT::Experimental::RNTupleWriter::Append(std::unique_ptr<RNTupleModel> model, std::string_view ntupleName, TFile &file,; 96 const RNTupleWriteOptions &options); 97{; 98 auto sink = std::make_unique<Internal::RPageSinkFile>(ntupleName, file, options);; 99 return Create(std::move(model), std::move(sink), options);; 100}; 101 ; 102void ROOT::Experimental::RNTupleWriter::CommitClusterGroup(); 103{; 104 if (GetNEntries() == fLastCommittedClusterGroup); 105 return;; 106 fFillContext.fSink->CommitClusterGroup();; 107 fLastCommittedClusterGroup = GetNEntries();; 108}; 109 ; 110std::unique_ptr<ROOT::Experimental::RNTupleWriter>; 111ROOT::Experimental::Internal::CreateRNTupleWriter(std::unique_ptr<ROOT::Experimental::RNTupleModel> model,; 112 std::unique_ptr<ROOT::Experimental::Internal::RPageSink> sink); 113{; 114 return std::unique_ptr<ROOT::Experimental::RNTupleWriter>(; 115 new ROOT::Experimental::RNTupleWriter(std::move(model), std::move(sink)));; 116}; R__FAIL#define R__FAIL(msg)Short-hand to return an RResult<T> in an error state; the RError is implicitly converted into RResult...Definition RError.hxx:290; RLogger.hxx; R__LOG_ERROR#define R__LOG_ERROR(...)Definition RLogger.hxx:362; RNTupleFillContext.hxx; RNTupleImtTaskScheduler.hxx; RNTupleMetrics.hxx; RNTupleModel.hxx; RNTupleWriteOptions.hxx; RNTupleWriter.hxx; RPageSinkBuf.hxx; RPageStorageFile.hxx; RPageStorage.hxx; TROOT.h; ROOT::Experimental::Detail::RNTupleMetrics::ObserveMetricsvoid ObserveMetrics(RNTupleMetrics &observee)Definition RNTupleMetrics.cxx:90; ROOT::Experimental::Internal::RPagePersistentSink::Createstatic std::unique_ptr< RPageSink > Create(std::string_view ntupleName, std::string_view location, const RNTupleWriteOptions &options=RNTupleWriteOptions())Guess the concrete derived page sour",MatchSource.WIKI,doc/master/RNTupleWriter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8cxx_source.html
https://root.cern/doc/master/RNTupleWriter_8cxx_source.html:7682,Energy Efficiency,schedul,scheduler,7682," RField.cxx:611; ROOT::Experimental::RNTupleFillContext::fSinkstd::unique_ptr< Internal::RPageSink > fSinkDefinition RNTupleFillContext.hxx:56; ROOT::Experimental::RNTupleModel::Createstatic std::unique_ptr< RNTupleModel > Create()Definition RNTupleModel.cxx:249; ROOT::Experimental::RNTupleWriteOptionsCommon user-tunable settings for storing ntuples.Definition RNTupleWriteOptions.hxx:48; ROOT::Experimental::RNTupleWriteOptions::GetUseBufferedWritebool GetUseBufferedWrite() constDefinition RNTupleWriteOptions.hxx:127; ROOT::Experimental::RNTupleWriteOptions::EImplicitMT::kDefault@ kDefault; ROOT::Experimental::RNTupleWriterAn RNTuple that gets filled with entries (data) and writes them to storage.Definition RNTupleWriter.hxx:60; ROOT::Experimental::RNTupleWriter::RNTupleWriterRNTupleWriter(std::unique_ptr< RNTupleModel > model, std::unique_ptr< Internal::RPageSink > sink)Definition RNTupleWriter.cxx:32; ROOT::Experimental::RNTupleWriter::fZipTasksstd::unique_ptr< Internal::RPageStorage::RTaskScheduler > fZipTasksThe page sink's parallel page compression scheduler if IMT is on.Definition RNTupleWriter.hxx:68; ROOT::Experimental::RNTupleWriter::Createstatic std::unique_ptr< RNTupleWriter > Create(std::unique_ptr< RNTupleModel > model, std::unique_ptr< Internal::RPageSink > sink, const RNTupleWriteOptions &options)Create a writer, potentially wrapping the sink in a RPageSinkBuf.Definition RNTupleWriter.cxx:58; ROOT::Experimental::RNTupleWriter::CommitClusterGroupvoid CommitClusterGroup()Definition RNTupleWriter.cxx:102; ROOT::Experimental::RNTupleWriter::fMetricsDetail::RNTupleMetrics fMetricsDefinition RNTupleWriter.hxx:70; ROOT::Experimental::RNTupleWriter::~RNTupleWriter~RNTupleWriter()Definition RNTupleWriter.cxx:47; ROOT::Experimental::RNTupleWriter::Recreatestatic std::unique_ptr< RNTupleWriter > Recreate(std::unique_ptr< RNTupleModel > model, std::string_view ntupleName, std::string_view storage, const RNTupleWriteOptions &options=RNTupleWriteOptions())Throws an ",MatchSource.WIKI,doc/master/RNTupleWriter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8cxx_source.html
https://root.cern/doc/master/RNTupleWriter_8cxx_source.html:6083,Integrability,message,message,6083,"));; 116}; R__FAIL#define R__FAIL(msg)Short-hand to return an RResult<T> in an error state; the RError is implicitly converted into RResult...Definition RError.hxx:290; RLogger.hxx; R__LOG_ERROR#define R__LOG_ERROR(...)Definition RLogger.hxx:362; RNTupleFillContext.hxx; RNTupleImtTaskScheduler.hxx; RNTupleMetrics.hxx; RNTupleModel.hxx; RNTupleWriteOptions.hxx; RNTupleWriter.hxx; RPageSinkBuf.hxx; RPageStorageFile.hxx; RPageStorage.hxx; TROOT.h; ROOT::Experimental::Detail::RNTupleMetrics::ObserveMetricsvoid ObserveMetrics(RNTupleMetrics &observee)Definition RNTupleMetrics.cxx:90; ROOT::Experimental::Internal::RPagePersistentSink::Createstatic std::unique_ptr< RPageSink > Create(std::string_view ntupleName, std::string_view location, const RNTupleWriteOptions &options=RNTupleWriteOptions())Guess the concrete derived page source from the location.Definition RPageStorage.cxx:694; ROOT::Experimental::RError::GetReportstd::string GetReport() constFormat a dignostics report, e.g. for an exception message.Definition RError.cxx:25; ROOT::Experimental::RExceptionBase class for all ROOT issued exceptions.Definition RError.hxx:78; ROOT::Experimental::RException::GetErrorconst RError & GetError() constDefinition RError.hxx:82; ROOT::Experimental::RFieldBase::Createstatic RResult< std::unique_ptr< RFieldBase > > Create(const std::string &fieldName, const std::string &canonicalType, const std::string &typeAlias, bool continueOnError=false)Factory method to resurrect a field from the stored on-disk type information.Definition RField.cxx:611; ROOT::Experimental::RNTupleFillContext::fSinkstd::unique_ptr< Internal::RPageSink > fSinkDefinition RNTupleFillContext.hxx:56; ROOT::Experimental::RNTupleModel::Createstatic std::unique_ptr< RNTupleModel > Create()Definition RNTupleModel.cxx:249; ROOT::Experimental::RNTupleWriteOptionsCommon user-tunable settings for storing ntuples.Definition RNTupleWriteOptions.hxx:48; ROOT::Experimental::RNTupleWriteOptions::GetUseBufferedWritebool GetUseBuf",MatchSource.WIKI,doc/master/RNTupleWriter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8cxx_source.html
https://root.cern/doc/master/RNTupleWriter_8cxx_source.html:7974,Integrability,wrap,wrapping,7974,"x:249; ROOT::Experimental::RNTupleWriteOptionsCommon user-tunable settings for storing ntuples.Definition RNTupleWriteOptions.hxx:48; ROOT::Experimental::RNTupleWriteOptions::GetUseBufferedWritebool GetUseBufferedWrite() constDefinition RNTupleWriteOptions.hxx:127; ROOT::Experimental::RNTupleWriteOptions::EImplicitMT::kDefault@ kDefault; ROOT::Experimental::RNTupleWriterAn RNTuple that gets filled with entries (data) and writes them to storage.Definition RNTupleWriter.hxx:60; ROOT::Experimental::RNTupleWriter::RNTupleWriterRNTupleWriter(std::unique_ptr< RNTupleModel > model, std::unique_ptr< Internal::RPageSink > sink)Definition RNTupleWriter.cxx:32; ROOT::Experimental::RNTupleWriter::fZipTasksstd::unique_ptr< Internal::RPageStorage::RTaskScheduler > fZipTasksThe page sink's parallel page compression scheduler if IMT is on.Definition RNTupleWriter.hxx:68; ROOT::Experimental::RNTupleWriter::Createstatic std::unique_ptr< RNTupleWriter > Create(std::unique_ptr< RNTupleModel > model, std::unique_ptr< Internal::RPageSink > sink, const RNTupleWriteOptions &options)Create a writer, potentially wrapping the sink in a RPageSinkBuf.Definition RNTupleWriter.cxx:58; ROOT::Experimental::RNTupleWriter::CommitClusterGroupvoid CommitClusterGroup()Definition RNTupleWriter.cxx:102; ROOT::Experimental::RNTupleWriter::fMetricsDetail::RNTupleMetrics fMetricsDefinition RNTupleWriter.hxx:70; ROOT::Experimental::RNTupleWriter::~RNTupleWriter~RNTupleWriter()Definition RNTupleWriter.cxx:47; ROOT::Experimental::RNTupleWriter::Recreatestatic std::unique_ptr< RNTupleWriter > Recreate(std::unique_ptr< RNTupleModel > model, std::string_view ntupleName, std::string_view storage, const RNTupleWriteOptions &options=RNTupleWriteOptions())Throws an exception if the model is null.Definition RNTupleWriter.cxx:71; ROOT::Experimental::RNTupleWriter::fFillContextRNTupleFillContext fFillContextDefinition RNTupleWriter.hxx:69; ROOT::Experimental::RNTupleWriter::Appendstatic std::unique_ptr< RNTupleWriter > A",MatchSource.WIKI,doc/master/RNTupleWriter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8cxx_source.html
https://root.cern/doc/master/RNTupleWriter_8cxx_source.html:9642,Performance,multi-thread,multi-threading,9642,"< RNTupleModel > model, std::unique_ptr< Internal::RPageSink > sink, const RNTupleWriteOptions &options)Create a writer, potentially wrapping the sink in a RPageSinkBuf.Definition RNTupleWriter.cxx:58; ROOT::Experimental::RNTupleWriter::CommitClusterGroupvoid CommitClusterGroup()Definition RNTupleWriter.cxx:102; ROOT::Experimental::RNTupleWriter::fMetricsDetail::RNTupleMetrics fMetricsDefinition RNTupleWriter.hxx:70; ROOT::Experimental::RNTupleWriter::~RNTupleWriter~RNTupleWriter()Definition RNTupleWriter.cxx:47; ROOT::Experimental::RNTupleWriter::Recreatestatic std::unique_ptr< RNTupleWriter > Recreate(std::unique_ptr< RNTupleModel > model, std::string_view ntupleName, std::string_view storage, const RNTupleWriteOptions &options=RNTupleWriteOptions())Throws an exception if the model is null.Definition RNTupleWriter.cxx:71; ROOT::Experimental::RNTupleWriter::fFillContextRNTupleFillContext fFillContextDefinition RNTupleWriter.hxx:69; ROOT::Experimental::RNTupleWriter::Appendstatic std::unique_ptr< RNTupleWriter > Append(std::unique_ptr< RNTupleModel > model, std::string_view ntupleName, TFile &file, const RNTupleWriteOptions &options=RNTupleWriteOptions())Throws an exception if the model is null.Definition RNTupleWriter.cxx:95; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; ROOT::Experimental::Internal::CreateRNTupleWriterstd::unique_ptr< RNTupleWriter > CreateRNTupleWriter(std::unique_ptr< RNTupleModel > model, std::unique_ptr< Internal::RPageSink > sink)Definition RNTupleWriter.cxx:111; ROOT::Experimental::NTupleLogRLogChannel & NTupleLog()Log channel for RNTuple diagnostics.Definition RNTupleUtil.cxx:24; ROOT::IsImplicitMTEnabledBool_t IsImplicitMTEnabled()Returns true if the implicit multi-threading in ROOT is enabled.Definition TROOT.cxx:570. treentuplev7srcRNTupleWriter.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:03 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/RNTupleWriter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8cxx_source.html
https://root.cern/doc/master/RNTupleWriter_8cxx_source.html:1915,Safety,avoid,avoid,1915,"OT/RLogger.hxx>; 19#include <ROOT/RNTupleImtTaskScheduler.hxx>; 20#include <ROOT/RNTupleFillContext.hxx>; 21#include <ROOT/RNTupleMetrics.hxx>; 22#include <ROOT/RNTupleModel.hxx>; 23#include <ROOT/RNTupleWriteOptions.hxx>; 24#include <ROOT/RPageSinkBuf.hxx>; 25#include <ROOT/RPageStorage.hxx>; 26#include <ROOT/RPageStorageFile.hxx>; 27 ; 28#include <TROOT.h>; 29 ; 30#include <utility>; 31 ; 32ROOT::Experimental::RNTupleWriter::RNTupleWriter(std::unique_ptr<ROOT::Experimental::RNTupleModel> model,; 33 std::unique_ptr<ROOT::Experimental::Internal::RPageSink> sink); 34 : fFillContext(std::move(model), std::move(sink)), fMetrics(""RNTupleWriter""); 35{; 36#ifdef R__USE_IMT; 37 if (IsImplicitMTEnabled() &&; 38 fFillContext.fSink->GetWriteOptions().GetUseImplicitMT() == RNTupleWriteOptions::EImplicitMT::kDefault) {; 39 fZipTasks = std::make_unique<Internal::RNTupleImtTaskScheduler>();; 40 fFillContext.fSink->SetTaskScheduler(fZipTasks.get());; 41 }; 42#endif; 43 // Observe directly the sink's metrics to avoid an additional prefix from the fill context.; 44 fMetrics.ObserveMetrics(fFillContext.fSink->GetMetrics());; 45}; 46 ; 47ROOT::Experimental::RNTupleWriter::~RNTupleWriter(); 48{; 49 try {; 50 CommitCluster(true /* commitClusterGroup */);; 51 fFillContext.fSink->CommitDataset();; 52 } catch (const RException &err) {; 53 R__LOG_ERROR(NTupleLog()) << ""failure committing ntuple: "" << err.GetError().GetReport();; 54 }; 55}; 56 ; 57std::unique_ptr<ROOT::Experimental::RNTupleWriter>; 58ROOT::Experimental::RNTupleWriter::Create(std::unique_ptr<RNTupleModel> model,; 59 std::unique_ptr<Internal::RPageSink> sink, const RNTupleWriteOptions &options); 60{; 61 if (model->GetRegisteredSubfields().size() > 0) {; 62 throw RException(R__FAIL(""cannot create an RNTupleWriter from a model with registered subfields""));; 63 }; 64 if (options.GetUseBufferedWrite()) {; 65 sink = std::make_unique<Internal::RPageSinkBuf>(std::move(sink));; 66 }; 67 return std::unique_ptr<RNTupleWriter>(new RNTuple",MatchSource.WIKI,doc/master/RNTupleWriter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8cxx_source.html
https://root.cern/doc/master/RNTupleWriter_8hxx.html:668,Integrability,depend,dependency,668,". ROOT: tree/ntuple/v7/inc/ROOT/RNTupleWriter.hxx File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Functions ; RNTupleWriter.hxx File ReferenceNTuple-related classes | ROOT7 classes. #include <ROOT/RConfig.hxx>; #include <ROOT/REntry.hxx>; #include <ROOT/RError.hxx>; #include <ROOT/RNTupleFillContext.hxx>; #include <ROOT/RNTupleFillStatus.hxx>; #include <ROOT/RNTupleMetrics.hxx>; #include <ROOT/RNTupleModel.hxx>; #include <ROOT/RNTupleUtil.hxx>; #include <ROOT/RPageStorage.hxx>; #include <cstddef>; #include <cstdint>; #include <memory>; #include <string_view>; #include <utility>. Include dependency graph for RNTupleWriter.hxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  ROOT::Experimental::RNTupleWriter;  An RNTuple that gets filled with entries (data) and writes them to storage. More...;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Experimental;  ; namespace  ROOT::Experimental::Internal;  . Functions; std::unique_ptr< RNTupleWriter > ROOT::Experimental::Internal::CreateRNTupleWriter (std::unique_ptr< RNTupleModel > model, std::unique_ptr< Internal::RPageSink > sink);  . Detailed Description; AuthorJakob Blomer jblom.nosp@m.er@c.nosp@m.ern.c.nosp@m.h ; Date2024-02-20 ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! ; Definition in file RNTupleWriter.hxx. treentuplev7incROOTRNTupleWriter.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:26 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/RNTupleWriter_8hxx.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8hxx.html
https://root.cern/doc/master/RNTupleWriter_8hxx_source.html:2393,Availability,error,errors,2393," ; 37namespace ROOT {; 38namespace Experimental {; 39 ; 40class RNTupleWriteOptions;; 41 ; 42namespace Internal {; 43// Non-public factory method for an RNTuple writer that uses an already constructed page sink; 44std::unique_ptr<RNTupleWriter>; 45CreateRNTupleWriter(std::unique_ptr<RNTupleModel> model, std::unique_ptr<Internal::RPageSink> sink);; 46} // namespace Internal; 47 ; 48// clang-format off; 49/**; 50\class ROOT::Experimental::RNTupleWriter; 51\ingroup NTuple; 52\brief An RNTuple that gets filled with entries (data) and writes them to storage; 53 ; 54An output ntuple can be filled with entries. The caller has to make sure that the data that gets filled into an ntuple; 55is not modified for the time of the Fill() call. The fill call serializes the C++ object into the column format and; 56writes data into the corresponding column page buffers. Writing of the buffers to storage is deferred and can be; 57triggered by FlushCluster() or by destructing the writer. On I/O errors, an exception is thrown.; 58*/; 59// clang-format on; 60class RNTupleWriter {; 61 friend RNTupleModel::RUpdater;; 62 friend std::unique_ptr<RNTupleWriter>; 63 Internal::CreateRNTupleWriter(std::unique_ptr<RNTupleModel>, std::unique_ptr<Internal::RPageSink>);; 64 ; 65private:; 66 /// The page sink's parallel page compression scheduler if IMT is on.; 67 /// Needs to be destructed after the page sink (in the fill context) is destructed and so declared before.; 68 std::unique_ptr<Internal::RPageStorage::RTaskScheduler> fZipTasks;; 69 RNTupleFillContext fFillContext;; 70 Detail::RNTupleMetrics fMetrics;; 71 ; 72 NTupleSize_t fLastCommittedClusterGroup = 0;; 73 ; 74 RNTupleWriter(std::unique_ptr<RNTupleModel> model, std::unique_ptr<Internal::RPageSink> sink);; 75 ; 76 RNTupleModel &GetUpdatableModel() { return *fFillContext.fModel; }; 77 Internal::RPageSink &GetSink() { return *fFillContext.fSink; }; 78 ; 79 // Helper function that is called from CommitCluster() when necessary; 80 void CommitClus",MatchSource.WIKI,doc/master/RNTupleWriter_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8hxx_source.html
https://root.cern/doc/master/RNTupleWriter_8hxx_source.html:7067,Deployability,update,updates,7067,"ClusterGroup();; 124 }; 125 ; 126 std::unique_ptr<REntry> CreateEntry() { return fFillContext.CreateEntry(); }; 127 ; 128 /// Return the entry number that was last flushed in a cluster.; 129 NTupleSize_t GetLastFlushed() const { return fFillContext.GetLastFlushed(); }; 130 /// Return the entry number that was last committed in a cluster.; 131 NTupleSize_t GetLastCommitted() const { return fFillContext.GetLastFlushed(); }; 132 /// Return the entry number that was last committed in a cluster group.; 133 NTupleSize_t GetLastCommittedClusterGroup() const { return fLastCommittedClusterGroup; }; 134 /// Return the number of entries filled so far.; 135 NTupleSize_t GetNEntries() const { return fFillContext.GetNEntries(); }; 136 ; 137 void EnableMetrics() { fMetrics.Enable(); }; 138 const Detail::RNTupleMetrics &GetMetrics() const { return fMetrics; }; 139 ; 140 const RNTupleModel &GetModel() const { return *fFillContext.fModel; }; 141 ; 142 /// Get a `RNTupleModel::RUpdater` that provides limited support for incremental updates to the underlying; 143 /// model, e.g. addition of new fields.; 144 ///; 145 /// **Example: add a new field after the model has been used to construct a `RNTupleWriter` object**; 146 /// ~~~ {.cpp}; 147 /// #include <ROOT/RNTuple.hxx>; 148 /// using ROOT::Experimental::RNTupleModel;; 149 /// using ROOT::Experimental::RNTupleWriter;; 150 ///; 151 /// auto model = RNTupleModel::Create();; 152 /// auto fldFloat = model->MakeField<float>(""fldFloat"");; 153 /// auto writer = RNTupleWriter::Recreate(std::move(model), ""myNTuple"", ""some/file.root"");; 154 /// auto updater = writer->CreateModelUpdater();; 155 /// updater->BeginUpdate();; 156 /// updater->AddField(std::make_unique<RField<float>>(""pt""));; 157 /// updater->CommitUpdate();; 158 ///; 159 /// // ...; 160 /// ~~~; 161 std::unique_ptr<RNTupleModel::RUpdater> CreateModelUpdater(); 162 {; 163 return std::make_unique<RNTupleModel::RUpdater>(*this);; 164 }; 165}; // class RNTupleWriter; 166 ; 167} // name",MatchSource.WIKI,doc/master/RNTupleWriter_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8hxx_source.html
https://root.cern/doc/master/RNTupleWriter_8hxx_source.html:7636,Deployability,update,updater,7636,"t { return fFillContext.GetNEntries(); }; 136 ; 137 void EnableMetrics() { fMetrics.Enable(); }; 138 const Detail::RNTupleMetrics &GetMetrics() const { return fMetrics; }; 139 ; 140 const RNTupleModel &GetModel() const { return *fFillContext.fModel; }; 141 ; 142 /// Get a `RNTupleModel::RUpdater` that provides limited support for incremental updates to the underlying; 143 /// model, e.g. addition of new fields.; 144 ///; 145 /// **Example: add a new field after the model has been used to construct a `RNTupleWriter` object**; 146 /// ~~~ {.cpp}; 147 /// #include <ROOT/RNTuple.hxx>; 148 /// using ROOT::Experimental::RNTupleModel;; 149 /// using ROOT::Experimental::RNTupleWriter;; 150 ///; 151 /// auto model = RNTupleModel::Create();; 152 /// auto fldFloat = model->MakeField<float>(""fldFloat"");; 153 /// auto writer = RNTupleWriter::Recreate(std::move(model), ""myNTuple"", ""some/file.root"");; 154 /// auto updater = writer->CreateModelUpdater();; 155 /// updater->BeginUpdate();; 156 /// updater->AddField(std::make_unique<RField<float>>(""pt""));; 157 /// updater->CommitUpdate();; 158 ///; 159 /// // ...; 160 /// ~~~; 161 std::unique_ptr<RNTupleModel::RUpdater> CreateModelUpdater(); 162 {; 163 return std::make_unique<RNTupleModel::RUpdater>(*this);; 164 }; 165}; // class RNTupleWriter; 166 ; 167} // namespace Experimental; 168} // namespace ROOT; 169 ; 170#endif // ROOT7_RNTupleWriter; RConfig.hxx; REntry.hxx; RError.hxx; RNTupleFillContext.hxx; RNTupleFillStatus.hxx; RNTupleMetrics.hxx; RNTupleModel.hxx; RNTupleUtil.hxx; RPageStorage.hxx; ROOT::Experimental::Detail::RNTupleMetricsA collection of Counter objects with a name, a unit, and a description.Definition RNTupleMetrics.hxx:285; ROOT::Experimental::Detail::RNTupleMetrics::Enablevoid Enable()Definition RNTupleMetrics.cxx:81; ROOT::Experimental::Internal::RPageSinkAbstract interface to write data into an ntuple.Definition RPageStorage.hxx:256; ROOT::Experimental::REntryThe REntry is a collection of values in an ntuple cor",MatchSource.WIKI,doc/master/RNTupleWriter_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8hxx_source.html
https://root.cern/doc/master/RNTupleWriter_8hxx_source.html:7685,Deployability,update,updater,7685,"t { return fFillContext.GetNEntries(); }; 136 ; 137 void EnableMetrics() { fMetrics.Enable(); }; 138 const Detail::RNTupleMetrics &GetMetrics() const { return fMetrics; }; 139 ; 140 const RNTupleModel &GetModel() const { return *fFillContext.fModel; }; 141 ; 142 /// Get a `RNTupleModel::RUpdater` that provides limited support for incremental updates to the underlying; 143 /// model, e.g. addition of new fields.; 144 ///; 145 /// **Example: add a new field after the model has been used to construct a `RNTupleWriter` object**; 146 /// ~~~ {.cpp}; 147 /// #include <ROOT/RNTuple.hxx>; 148 /// using ROOT::Experimental::RNTupleModel;; 149 /// using ROOT::Experimental::RNTupleWriter;; 150 ///; 151 /// auto model = RNTupleModel::Create();; 152 /// auto fldFloat = model->MakeField<float>(""fldFloat"");; 153 /// auto writer = RNTupleWriter::Recreate(std::move(model), ""myNTuple"", ""some/file.root"");; 154 /// auto updater = writer->CreateModelUpdater();; 155 /// updater->BeginUpdate();; 156 /// updater->AddField(std::make_unique<RField<float>>(""pt""));; 157 /// updater->CommitUpdate();; 158 ///; 159 /// // ...; 160 /// ~~~; 161 std::unique_ptr<RNTupleModel::RUpdater> CreateModelUpdater(); 162 {; 163 return std::make_unique<RNTupleModel::RUpdater>(*this);; 164 }; 165}; // class RNTupleWriter; 166 ; 167} // namespace Experimental; 168} // namespace ROOT; 169 ; 170#endif // ROOT7_RNTupleWriter; RConfig.hxx; REntry.hxx; RError.hxx; RNTupleFillContext.hxx; RNTupleFillStatus.hxx; RNTupleMetrics.hxx; RNTupleModel.hxx; RNTupleUtil.hxx; RPageStorage.hxx; ROOT::Experimental::Detail::RNTupleMetricsA collection of Counter objects with a name, a unit, and a description.Definition RNTupleMetrics.hxx:285; ROOT::Experimental::Detail::RNTupleMetrics::Enablevoid Enable()Definition RNTupleMetrics.cxx:81; ROOT::Experimental::Internal::RPageSinkAbstract interface to write data into an ntuple.Definition RPageStorage.hxx:256; ROOT::Experimental::REntryThe REntry is a collection of values in an ntuple cor",MatchSource.WIKI,doc/master/RNTupleWriter_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8hxx_source.html
https://root.cern/doc/master/RNTupleWriter_8hxx_source.html:7718,Deployability,update,updater,7718,"t { return fFillContext.GetNEntries(); }; 136 ; 137 void EnableMetrics() { fMetrics.Enable(); }; 138 const Detail::RNTupleMetrics &GetMetrics() const { return fMetrics; }; 139 ; 140 const RNTupleModel &GetModel() const { return *fFillContext.fModel; }; 141 ; 142 /// Get a `RNTupleModel::RUpdater` that provides limited support for incremental updates to the underlying; 143 /// model, e.g. addition of new fields.; 144 ///; 145 /// **Example: add a new field after the model has been used to construct a `RNTupleWriter` object**; 146 /// ~~~ {.cpp}; 147 /// #include <ROOT/RNTuple.hxx>; 148 /// using ROOT::Experimental::RNTupleModel;; 149 /// using ROOT::Experimental::RNTupleWriter;; 150 ///; 151 /// auto model = RNTupleModel::Create();; 152 /// auto fldFloat = model->MakeField<float>(""fldFloat"");; 153 /// auto writer = RNTupleWriter::Recreate(std::move(model), ""myNTuple"", ""some/file.root"");; 154 /// auto updater = writer->CreateModelUpdater();; 155 /// updater->BeginUpdate();; 156 /// updater->AddField(std::make_unique<RField<float>>(""pt""));; 157 /// updater->CommitUpdate();; 158 ///; 159 /// // ...; 160 /// ~~~; 161 std::unique_ptr<RNTupleModel::RUpdater> CreateModelUpdater(); 162 {; 163 return std::make_unique<RNTupleModel::RUpdater>(*this);; 164 }; 165}; // class RNTupleWriter; 166 ; 167} // namespace Experimental; 168} // namespace ROOT; 169 ; 170#endif // ROOT7_RNTupleWriter; RConfig.hxx; REntry.hxx; RError.hxx; RNTupleFillContext.hxx; RNTupleFillStatus.hxx; RNTupleMetrics.hxx; RNTupleModel.hxx; RNTupleUtil.hxx; RPageStorage.hxx; ROOT::Experimental::Detail::RNTupleMetricsA collection of Counter objects with a name, a unit, and a description.Definition RNTupleMetrics.hxx:285; ROOT::Experimental::Detail::RNTupleMetrics::Enablevoid Enable()Definition RNTupleMetrics.cxx:81; ROOT::Experimental::Internal::RPageSinkAbstract interface to write data into an ntuple.Definition RPageStorage.hxx:256; ROOT::Experimental::REntryThe REntry is a collection of values in an ntuple cor",MatchSource.WIKI,doc/master/RNTupleWriter_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8hxx_source.html
https://root.cern/doc/master/RNTupleWriter_8hxx_source.html:7785,Deployability,update,updater,7785,"t { return fFillContext.GetNEntries(); }; 136 ; 137 void EnableMetrics() { fMetrics.Enable(); }; 138 const Detail::RNTupleMetrics &GetMetrics() const { return fMetrics; }; 139 ; 140 const RNTupleModel &GetModel() const { return *fFillContext.fModel; }; 141 ; 142 /// Get a `RNTupleModel::RUpdater` that provides limited support for incremental updates to the underlying; 143 /// model, e.g. addition of new fields.; 144 ///; 145 /// **Example: add a new field after the model has been used to construct a `RNTupleWriter` object**; 146 /// ~~~ {.cpp}; 147 /// #include <ROOT/RNTuple.hxx>; 148 /// using ROOT::Experimental::RNTupleModel;; 149 /// using ROOT::Experimental::RNTupleWriter;; 150 ///; 151 /// auto model = RNTupleModel::Create();; 152 /// auto fldFloat = model->MakeField<float>(""fldFloat"");; 153 /// auto writer = RNTupleWriter::Recreate(std::move(model), ""myNTuple"", ""some/file.root"");; 154 /// auto updater = writer->CreateModelUpdater();; 155 /// updater->BeginUpdate();; 156 /// updater->AddField(std::make_unique<RField<float>>(""pt""));; 157 /// updater->CommitUpdate();; 158 ///; 159 /// // ...; 160 /// ~~~; 161 std::unique_ptr<RNTupleModel::RUpdater> CreateModelUpdater(); 162 {; 163 return std::make_unique<RNTupleModel::RUpdater>(*this);; 164 }; 165}; // class RNTupleWriter; 166 ; 167} // namespace Experimental; 168} // namespace ROOT; 169 ; 170#endif // ROOT7_RNTupleWriter; RConfig.hxx; REntry.hxx; RError.hxx; RNTupleFillContext.hxx; RNTupleFillStatus.hxx; RNTupleMetrics.hxx; RNTupleModel.hxx; RNTupleUtil.hxx; RPageStorage.hxx; ROOT::Experimental::Detail::RNTupleMetricsA collection of Counter objects with a name, a unit, and a description.Definition RNTupleMetrics.hxx:285; ROOT::Experimental::Detail::RNTupleMetrics::Enablevoid Enable()Definition RNTupleMetrics.cxx:81; ROOT::Experimental::Internal::RPageSinkAbstract interface to write data into an ntuple.Definition RPageStorage.hxx:256; ROOT::Experimental::REntryThe REntry is a collection of values in an ntuple cor",MatchSource.WIKI,doc/master/RNTupleWriter_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8hxx_source.html
https://root.cern/doc/master/RNTupleWriter_8hxx_source.html:11355,Deployability,update,updates,11355,"rimental::RNTupleFillContext::fSinkstd::unique_ptr< Internal::RPageSink > fSinkDefinition RNTupleFillContext.hxx:56; ROOT::Experimental::RNTupleFillStatusA status object after filling an entry.Definition RNTupleFillStatus.hxx:36; ROOT::Experimental::RNTupleModel::RUpdaterA model is usually immutable after passing it to an RNTupleWriter.Definition RNTupleModel.hxx:162; ROOT::Experimental::RNTupleModelThe RNTupleModel encapulates the schema of an ntuple.Definition RNTupleModel.hxx:136; ROOT::Experimental::RNTupleWriteOptionsCommon user-tunable settings for storing ntuples.Definition RNTupleWriteOptions.hxx:48; ROOT::Experimental::RNTupleWriterAn RNTuple that gets filled with entries (data) and writes them to storage.Definition RNTupleWriter.hxx:60; ROOT::Experimental::RNTupleWriter::FlushClustervoid FlushCluster()Flush so far filled entries to storage.Definition RNTupleWriter.hxx:117; ROOT::Experimental::RNTupleWriter::CreateModelUpdaterstd::unique_ptr< RNTupleModel::RUpdater > CreateModelUpdater()Get a RNTupleModel::RUpdater that provides limited support for incremental updates to the underlying ...Definition RNTupleWriter.hxx:161; ROOT::Experimental::RNTupleWriter::GetSinkInternal::RPageSink & GetSink()Definition RNTupleWriter.hxx:77; ROOT::Experimental::RNTupleWriter::GetMetricsconst Detail::RNTupleMetrics & GetMetrics() constDefinition RNTupleWriter.hxx:138; ROOT::Experimental::RNTupleWriter::GetLastCommittedClusterGroupNTupleSize_t GetLastCommittedClusterGroup() constReturn the entry number that was last committed in a cluster group.Definition RNTupleWriter.hxx:133; ROOT::Experimental::RNTupleWriter::fZipTasksstd::unique_ptr< Internal::RPageStorage::RTaskScheduler > fZipTasksThe page sink's parallel page compression scheduler if IMT is on.Definition RNTupleWriter.hxx:68; ROOT::Experimental::RNTupleWriter::FillNoFlushvoid FillNoFlush(REntry &entry, RNTupleFillStatus &status)Fill an entry into this ntuple, but don't commit the cluster.Definition RNTupleWriter.hxx:1",MatchSource.WIKI,doc/master/RNTupleWriter_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8hxx_source.html
https://root.cern/doc/master/RNTupleWriter_8hxx_source.html:2726,Energy Efficiency,schedul,scheduler,2726,"lready constructed page sink; 44std::unique_ptr<RNTupleWriter>; 45CreateRNTupleWriter(std::unique_ptr<RNTupleModel> model, std::unique_ptr<Internal::RPageSink> sink);; 46} // namespace Internal; 47 ; 48// clang-format off; 49/**; 50\class ROOT::Experimental::RNTupleWriter; 51\ingroup NTuple; 52\brief An RNTuple that gets filled with entries (data) and writes them to storage; 53 ; 54An output ntuple can be filled with entries. The caller has to make sure that the data that gets filled into an ntuple; 55is not modified for the time of the Fill() call. The fill call serializes the C++ object into the column format and; 56writes data into the corresponding column page buffers. Writing of the buffers to storage is deferred and can be; 57triggered by FlushCluster() or by destructing the writer. On I/O errors, an exception is thrown.; 58*/; 59// clang-format on; 60class RNTupleWriter {; 61 friend RNTupleModel::RUpdater;; 62 friend std::unique_ptr<RNTupleWriter>; 63 Internal::CreateRNTupleWriter(std::unique_ptr<RNTupleModel>, std::unique_ptr<Internal::RPageSink>);; 64 ; 65private:; 66 /// The page sink's parallel page compression scheduler if IMT is on.; 67 /// Needs to be destructed after the page sink (in the fill context) is destructed and so declared before.; 68 std::unique_ptr<Internal::RPageStorage::RTaskScheduler> fZipTasks;; 69 RNTupleFillContext fFillContext;; 70 Detail::RNTupleMetrics fMetrics;; 71 ; 72 NTupleSize_t fLastCommittedClusterGroup = 0;; 73 ; 74 RNTupleWriter(std::unique_ptr<RNTupleModel> model, std::unique_ptr<Internal::RPageSink> sink);; 75 ; 76 RNTupleModel &GetUpdatableModel() { return *fFillContext.fModel; }; 77 Internal::RPageSink &GetSink() { return *fFillContext.fSink; }; 78 ; 79 // Helper function that is called from CommitCluster() when necessary; 80 void CommitClusterGroup();; 81 ; 82 /// Create a writer, potentially wrapping the sink in a RPageSinkBuf.; 83 static std::unique_ptr<RNTupleWriter> Create(std::unique_ptr<RNTupleModel> model,; 84 s",MatchSource.WIKI,doc/master/RNTupleWriter_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8hxx_source.html
https://root.cern/doc/master/RNTupleWriter_8hxx_source.html:5501,Energy Efficiency,reduce,reduce,5501,"const RNTupleWriter &) = delete;; 100 RNTupleWriter &operator=(const RNTupleWriter &) = delete;; 101 ~RNTupleWriter();; 102 ; 103 /// The simplest user interface if the default entry that comes with the ntuple model is used.; 104 /// \return The number of uncompressed bytes written.; 105 std::size_t Fill() { return fFillContext.Fill(fFillContext.fModel->GetDefaultEntry()); }; 106 /// Multiple entries can have been instantiated from the ntuple model. This method will perform; 107 /// a light check whether the entry comes from the ntuple's own model.; 108 /// \return The number of uncompressed bytes written.; 109 std::size_t Fill(REntry &entry) { return fFillContext.Fill(entry); }; 110 /// Fill an entry into this ntuple, but don't commit the cluster. The calling code must pass an RNTupleFillStatus; 111 /// and check RNTupleFillStatus::ShouldFlushCluster.; 112 void FillNoFlush(REntry &entry, RNTupleFillStatus &status) { fFillContext.FillNoFlush(entry, status); }; 113 /// Flush column data, preparing for CommitCluster or to reduce memory usage. This will trigger compression of pages,; 114 /// but not actually write to storage (unless buffered writing is turned off).; 115 void FlushColumns() { fFillContext.FlushColumns(); }; 116 /// Flush so far filled entries to storage; 117 void FlushCluster() { fFillContext.FlushCluster(); }; 118 /// Ensure that the data from the so far seen Fill calls has been written to storage; 119 void CommitCluster(bool commitClusterGroup = false); 120 {; 121 fFillContext.FlushCluster();; 122 if (commitClusterGroup); 123 CommitClusterGroup();; 124 }; 125 ; 126 std::unique_ptr<REntry> CreateEntry() { return fFillContext.CreateEntry(); }; 127 ; 128 /// Return the entry number that was last flushed in a cluster.; 129 NTupleSize_t GetLastFlushed() const { return fFillContext.GetLastFlushed(); }; 130 /// Return the entry number that was last committed in a cluster.; 131 NTupleSize_t GetLastCommitted() const { return fFillContext.GetLastFlushed(); }; 1",MatchSource.WIKI,doc/master/RNTupleWriter_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8hxx_source.html
https://root.cern/doc/master/RNTupleWriter_8hxx_source.html:10201,Energy Efficiency,reduce,reduce,10201,"oFlush(REntry &entry, RNTupleFillStatus &status)Fill an entry into this context, but don't commit the cluster.Definition RNTupleFillContext.hxx:93; ROOT::Experimental::RNTupleFillContext::Fillstd::size_t Fill(REntry &entry)Fill an entry into this context.Definition RNTupleFillContext.hxx:111; ROOT::Experimental::RNTupleFillContext::fModelstd::unique_ptr< RNTupleModel > fModelNeeds to be destructed before fSink.Definition RNTupleFillContext.hxx:58; ROOT::Experimental::RNTupleFillContext::GetNEntriesNTupleSize_t GetNEntries() constReturn the number of entries filled so far.Definition RNTupleFillContext.hxx:133; ROOT::Experimental::RNTupleFillContext::CreateEntrystd::unique_ptr< REntry > CreateEntry()Definition RNTupleFillContext.hxx:128; ROOT::Experimental::RNTupleFillContext::GetLastFlushedNTupleSize_t GetLastFlushed() constReturn the entry number that was last flushed in a cluster.Definition RNTupleFillContext.hxx:131; ROOT::Experimental::RNTupleFillContext::FlushColumnsvoid FlushColumns()Flush column data, preparing for CommitCluster or to reduce memory usage.Definition RNTupleFillContext.cxx:58; ROOT::Experimental::RNTupleFillContext::fSinkstd::unique_ptr< Internal::RPageSink > fSinkDefinition RNTupleFillContext.hxx:56; ROOT::Experimental::RNTupleFillStatusA status object after filling an entry.Definition RNTupleFillStatus.hxx:36; ROOT::Experimental::RNTupleModel::RUpdaterA model is usually immutable after passing it to an RNTupleWriter.Definition RNTupleModel.hxx:162; ROOT::Experimental::RNTupleModelThe RNTupleModel encapulates the schema of an ntuple.Definition RNTupleModel.hxx:136; ROOT::Experimental::RNTupleWriteOptionsCommon user-tunable settings for storing ntuples.Definition RNTupleWriteOptions.hxx:48; ROOT::Experimental::RNTupleWriterAn RNTuple that gets filled with entries (data) and writes them to storage.Definition RNTupleWriter.hxx:60; ROOT::Experimental::RNTupleWriter::FlushClustervoid FlushCluster()Flush so far filled entries to storage.Definition RNT",MatchSource.WIKI,doc/master/RNTupleWriter_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8hxx_source.html
https://root.cern/doc/master/RNTupleWriter_8hxx_source.html:12018,Energy Efficiency,schedul,scheduler,12018,"th entries (data) and writes them to storage.Definition RNTupleWriter.hxx:60; ROOT::Experimental::RNTupleWriter::FlushClustervoid FlushCluster()Flush so far filled entries to storage.Definition RNTupleWriter.hxx:117; ROOT::Experimental::RNTupleWriter::CreateModelUpdaterstd::unique_ptr< RNTupleModel::RUpdater > CreateModelUpdater()Get a RNTupleModel::RUpdater that provides limited support for incremental updates to the underlying ...Definition RNTupleWriter.hxx:161; ROOT::Experimental::RNTupleWriter::GetSinkInternal::RPageSink & GetSink()Definition RNTupleWriter.hxx:77; ROOT::Experimental::RNTupleWriter::GetMetricsconst Detail::RNTupleMetrics & GetMetrics() constDefinition RNTupleWriter.hxx:138; ROOT::Experimental::RNTupleWriter::GetLastCommittedClusterGroupNTupleSize_t GetLastCommittedClusterGroup() constReturn the entry number that was last committed in a cluster group.Definition RNTupleWriter.hxx:133; ROOT::Experimental::RNTupleWriter::fZipTasksstd::unique_ptr< Internal::RPageStorage::RTaskScheduler > fZipTasksThe page sink's parallel page compression scheduler if IMT is on.Definition RNTupleWriter.hxx:68; ROOT::Experimental::RNTupleWriter::FillNoFlushvoid FillNoFlush(REntry &entry, RNTupleFillStatus &status)Fill an entry into this ntuple, but don't commit the cluster.Definition RNTupleWriter.hxx:112; ROOT::Experimental::RNTupleWriter::GetModelconst RNTupleModel & GetModel() constDefinition RNTupleWriter.hxx:140; ROOT::Experimental::RNTupleWriter::FlushColumnsvoid FlushColumns()Flush column data, preparing for CommitCluster or to reduce memory usage.Definition RNTupleWriter.hxx:115; ROOT::Experimental::RNTupleWriter::Fillstd::size_t Fill()The simplest user interface if the default entry that comes with the ntuple model is used.Definition RNTupleWriter.hxx:105; ROOT::Experimental::RNTupleWriter::GetLastFlushedNTupleSize_t GetLastFlushed() constReturn the entry number that was last flushed in a cluster.Definition RNTupleWriter.hxx:129; ROOT::Experimental::RNTupleWrit",MatchSource.WIKI,doc/master/RNTupleWriter_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8hxx_source.html
https://root.cern/doc/master/RNTupleWriter_8hxx_source.html:12506,Energy Efficiency,reduce,reduce,12506,":GetSinkInternal::RPageSink & GetSink()Definition RNTupleWriter.hxx:77; ROOT::Experimental::RNTupleWriter::GetMetricsconst Detail::RNTupleMetrics & GetMetrics() constDefinition RNTupleWriter.hxx:138; ROOT::Experimental::RNTupleWriter::GetLastCommittedClusterGroupNTupleSize_t GetLastCommittedClusterGroup() constReturn the entry number that was last committed in a cluster group.Definition RNTupleWriter.hxx:133; ROOT::Experimental::RNTupleWriter::fZipTasksstd::unique_ptr< Internal::RPageStorage::RTaskScheduler > fZipTasksThe page sink's parallel page compression scheduler if IMT is on.Definition RNTupleWriter.hxx:68; ROOT::Experimental::RNTupleWriter::FillNoFlushvoid FillNoFlush(REntry &entry, RNTupleFillStatus &status)Fill an entry into this ntuple, but don't commit the cluster.Definition RNTupleWriter.hxx:112; ROOT::Experimental::RNTupleWriter::GetModelconst RNTupleModel & GetModel() constDefinition RNTupleWriter.hxx:140; ROOT::Experimental::RNTupleWriter::FlushColumnsvoid FlushColumns()Flush column data, preparing for CommitCluster or to reduce memory usage.Definition RNTupleWriter.hxx:115; ROOT::Experimental::RNTupleWriter::Fillstd::size_t Fill()The simplest user interface if the default entry that comes with the ntuple model is used.Definition RNTupleWriter.hxx:105; ROOT::Experimental::RNTupleWriter::GetLastFlushedNTupleSize_t GetLastFlushed() constReturn the entry number that was last flushed in a cluster.Definition RNTupleWriter.hxx:129; ROOT::Experimental::RNTupleWriter::CreateEntrystd::unique_ptr< REntry > CreateEntry()Definition RNTupleWriter.hxx:126; ROOT::Experimental::RNTupleWriter::Createstatic std::unique_ptr< RNTupleWriter > Create(std::unique_ptr< RNTupleModel > model, std::unique_ptr< Internal::RPageSink > sink, const RNTupleWriteOptions &options)Create a writer, potentially wrapping the sink in a RPageSinkBuf.Definition RNTupleWriter.cxx:58; ROOT::Experimental::RNTupleWriter::GetUpdatableModelRNTupleModel & GetUpdatableModel()Definition RNTupleWriter",MatchSource.WIKI,doc/master/RNTupleWriter_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8hxx_source.html
https://root.cern/doc/master/RNTupleWriter_8hxx_source.html:3459,Integrability,wrap,wrapping,3459,"ors, an exception is thrown.; 58*/; 59// clang-format on; 60class RNTupleWriter {; 61 friend RNTupleModel::RUpdater;; 62 friend std::unique_ptr<RNTupleWriter>; 63 Internal::CreateRNTupleWriter(std::unique_ptr<RNTupleModel>, std::unique_ptr<Internal::RPageSink>);; 64 ; 65private:; 66 /// The page sink's parallel page compression scheduler if IMT is on.; 67 /// Needs to be destructed after the page sink (in the fill context) is destructed and so declared before.; 68 std::unique_ptr<Internal::RPageStorage::RTaskScheduler> fZipTasks;; 69 RNTupleFillContext fFillContext;; 70 Detail::RNTupleMetrics fMetrics;; 71 ; 72 NTupleSize_t fLastCommittedClusterGroup = 0;; 73 ; 74 RNTupleWriter(std::unique_ptr<RNTupleModel> model, std::unique_ptr<Internal::RPageSink> sink);; 75 ; 76 RNTupleModel &GetUpdatableModel() { return *fFillContext.fModel; }; 77 Internal::RPageSink &GetSink() { return *fFillContext.fSink; }; 78 ; 79 // Helper function that is called from CommitCluster() when necessary; 80 void CommitClusterGroup();; 81 ; 82 /// Create a writer, potentially wrapping the sink in a RPageSinkBuf.; 83 static std::unique_ptr<RNTupleWriter> Create(std::unique_ptr<RNTupleModel> model,; 84 std::unique_ptr<Internal::RPageSink> sink,; 85 const RNTupleWriteOptions &options);; 86 ; 87public:; 88 /// Throws an exception if the model is null.; 89 static std::unique_ptr<RNTupleWriter> Recreate(std::unique_ptr<RNTupleModel> model, std::string_view ntupleName,; 90 std::string_view storage,; 91 const RNTupleWriteOptions &options = RNTupleWriteOptions());; 92 static std::unique_ptr<RNTupleWriter>; 93 Recreate(std::initializer_list<std::pair<std::string_view, std::string_view>> fields, std::string_view ntupleName,; 94 std::string_view storage, const RNTupleWriteOptions &options = RNTupleWriteOptions());; 95 /// Throws an exception if the model is null.; 96 static std::unique_ptr<RNTupleWriter> Append(std::unique_ptr<RNTupleModel> model, std::string_view ntupleName,; 97 TFile &file,; 98 const RNTup",MatchSource.WIKI,doc/master/RNTupleWriter_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8hxx_source.html
https://root.cern/doc/master/RNTupleWriter_8hxx_source.html:4617,Integrability,interface,interface,4617,"he sink in a RPageSinkBuf.; 83 static std::unique_ptr<RNTupleWriter> Create(std::unique_ptr<RNTupleModel> model,; 84 std::unique_ptr<Internal::RPageSink> sink,; 85 const RNTupleWriteOptions &options);; 86 ; 87public:; 88 /// Throws an exception if the model is null.; 89 static std::unique_ptr<RNTupleWriter> Recreate(std::unique_ptr<RNTupleModel> model, std::string_view ntupleName,; 90 std::string_view storage,; 91 const RNTupleWriteOptions &options = RNTupleWriteOptions());; 92 static std::unique_ptr<RNTupleWriter>; 93 Recreate(std::initializer_list<std::pair<std::string_view, std::string_view>> fields, std::string_view ntupleName,; 94 std::string_view storage, const RNTupleWriteOptions &options = RNTupleWriteOptions());; 95 /// Throws an exception if the model is null.; 96 static std::unique_ptr<RNTupleWriter> Append(std::unique_ptr<RNTupleModel> model, std::string_view ntupleName,; 97 TFile &file,; 98 const RNTupleWriteOptions &options = RNTupleWriteOptions());; 99 RNTupleWriter(const RNTupleWriter &) = delete;; 100 RNTupleWriter &operator=(const RNTupleWriter &) = delete;; 101 ~RNTupleWriter();; 102 ; 103 /// The simplest user interface if the default entry that comes with the ntuple model is used.; 104 /// \return The number of uncompressed bytes written.; 105 std::size_t Fill() { return fFillContext.Fill(fFillContext.fModel->GetDefaultEntry()); }; 106 /// Multiple entries can have been instantiated from the ntuple model. This method will perform; 107 /// a light check whether the entry comes from the ntuple's own model.; 108 /// \return The number of uncompressed bytes written.; 109 std::size_t Fill(REntry &entry) { return fFillContext.Fill(entry); }; 110 /// Fill an entry into this ntuple, but don't commit the cluster. The calling code must pass an RNTupleFillStatus; 111 /// and check RNTupleFillStatus::ShouldFlushCluster.; 112 void FillNoFlush(REntry &entry, RNTupleFillStatus &status) { fFillContext.FillNoFlush(entry, status); }; 113 /// Flush column data, pr",MatchSource.WIKI,doc/master/RNTupleWriter_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8hxx_source.html
https://root.cern/doc/master/RNTupleWriter_8hxx_source.html:8572,Integrability,interface,interface,8572,":Recreate(std::move(model), ""myNTuple"", ""some/file.root"");; 154 /// auto updater = writer->CreateModelUpdater();; 155 /// updater->BeginUpdate();; 156 /// updater->AddField(std::make_unique<RField<float>>(""pt""));; 157 /// updater->CommitUpdate();; 158 ///; 159 /// // ...; 160 /// ~~~; 161 std::unique_ptr<RNTupleModel::RUpdater> CreateModelUpdater(); 162 {; 163 return std::make_unique<RNTupleModel::RUpdater>(*this);; 164 }; 165}; // class RNTupleWriter; 166 ; 167} // namespace Experimental; 168} // namespace ROOT; 169 ; 170#endif // ROOT7_RNTupleWriter; RConfig.hxx; REntry.hxx; RError.hxx; RNTupleFillContext.hxx; RNTupleFillStatus.hxx; RNTupleMetrics.hxx; RNTupleModel.hxx; RNTupleUtil.hxx; RPageStorage.hxx; ROOT::Experimental::Detail::RNTupleMetricsA collection of Counter objects with a name, a unit, and a description.Definition RNTupleMetrics.hxx:285; ROOT::Experimental::Detail::RNTupleMetrics::Enablevoid Enable()Definition RNTupleMetrics.cxx:81; ROOT::Experimental::Internal::RPageSinkAbstract interface to write data into an ntuple.Definition RPageStorage.hxx:256; ROOT::Experimental::REntryThe REntry is a collection of values in an ntuple corresponding to a complete row in the data set.Definition REntry.hxx:51; ROOT::Experimental::RNTupleFillContextA context for filling entries (data) into clusters of an RNTuple.Definition RNTupleFillContext.hxx:51; ROOT::Experimental::RNTupleFillContext::FlushClustervoid FlushCluster()Flush so far filled entries to storage.Definition RNTupleFillContext.cxx:65; ROOT::Experimental::RNTupleFillContext::FillNoFlushvoid FillNoFlush(REntry &entry, RNTupleFillStatus &status)Fill an entry into this context, but don't commit the cluster.Definition RNTupleFillContext.hxx:93; ROOT::Experimental::RNTupleFillContext::Fillstd::size_t Fill(REntry &entry)Fill an entry into this context.Definition RNTupleFillContext.hxx:111; ROOT::Experimental::RNTupleFillContext::fModelstd::unique_ptr< RNTupleModel > fModelNeeds to be destructed before fSink.Defini",MatchSource.WIKI,doc/master/RNTupleWriter_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8hxx_source.html
https://root.cern/doc/master/RNTupleWriter_8hxx_source.html:12635,Integrability,interface,interface,12635,"RNTupleWriter.hxx:138; ROOT::Experimental::RNTupleWriter::GetLastCommittedClusterGroupNTupleSize_t GetLastCommittedClusterGroup() constReturn the entry number that was last committed in a cluster group.Definition RNTupleWriter.hxx:133; ROOT::Experimental::RNTupleWriter::fZipTasksstd::unique_ptr< Internal::RPageStorage::RTaskScheduler > fZipTasksThe page sink's parallel page compression scheduler if IMT is on.Definition RNTupleWriter.hxx:68; ROOT::Experimental::RNTupleWriter::FillNoFlushvoid FillNoFlush(REntry &entry, RNTupleFillStatus &status)Fill an entry into this ntuple, but don't commit the cluster.Definition RNTupleWriter.hxx:112; ROOT::Experimental::RNTupleWriter::GetModelconst RNTupleModel & GetModel() constDefinition RNTupleWriter.hxx:140; ROOT::Experimental::RNTupleWriter::FlushColumnsvoid FlushColumns()Flush column data, preparing for CommitCluster or to reduce memory usage.Definition RNTupleWriter.hxx:115; ROOT::Experimental::RNTupleWriter::Fillstd::size_t Fill()The simplest user interface if the default entry that comes with the ntuple model is used.Definition RNTupleWriter.hxx:105; ROOT::Experimental::RNTupleWriter::GetLastFlushedNTupleSize_t GetLastFlushed() constReturn the entry number that was last flushed in a cluster.Definition RNTupleWriter.hxx:129; ROOT::Experimental::RNTupleWriter::CreateEntrystd::unique_ptr< REntry > CreateEntry()Definition RNTupleWriter.hxx:126; ROOT::Experimental::RNTupleWriter::Createstatic std::unique_ptr< RNTupleWriter > Create(std::unique_ptr< RNTupleModel > model, std::unique_ptr< Internal::RPageSink > sink, const RNTupleWriteOptions &options)Create a writer, potentially wrapping the sink in a RPageSinkBuf.Definition RNTupleWriter.cxx:58; ROOT::Experimental::RNTupleWriter::GetUpdatableModelRNTupleModel & GetUpdatableModel()Definition RNTupleWriter.hxx:76; ROOT::Experimental::RNTupleWriter::GetLastCommittedNTupleSize_t GetLastCommitted() constReturn the entry number that was last committed in a cluster.Definition RNTupleW",MatchSource.WIKI,doc/master/RNTupleWriter_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8hxx_source.html
https://root.cern/doc/master/RNTupleWriter_8hxx_source.html:13273,Integrability,wrap,wrapping,13273,"s &status)Fill an entry into this ntuple, but don't commit the cluster.Definition RNTupleWriter.hxx:112; ROOT::Experimental::RNTupleWriter::GetModelconst RNTupleModel & GetModel() constDefinition RNTupleWriter.hxx:140; ROOT::Experimental::RNTupleWriter::FlushColumnsvoid FlushColumns()Flush column data, preparing for CommitCluster or to reduce memory usage.Definition RNTupleWriter.hxx:115; ROOT::Experimental::RNTupleWriter::Fillstd::size_t Fill()The simplest user interface if the default entry that comes with the ntuple model is used.Definition RNTupleWriter.hxx:105; ROOT::Experimental::RNTupleWriter::GetLastFlushedNTupleSize_t GetLastFlushed() constReturn the entry number that was last flushed in a cluster.Definition RNTupleWriter.hxx:129; ROOT::Experimental::RNTupleWriter::CreateEntrystd::unique_ptr< REntry > CreateEntry()Definition RNTupleWriter.hxx:126; ROOT::Experimental::RNTupleWriter::Createstatic std::unique_ptr< RNTupleWriter > Create(std::unique_ptr< RNTupleModel > model, std::unique_ptr< Internal::RPageSink > sink, const RNTupleWriteOptions &options)Create a writer, potentially wrapping the sink in a RPageSinkBuf.Definition RNTupleWriter.cxx:58; ROOT::Experimental::RNTupleWriter::GetUpdatableModelRNTupleModel & GetUpdatableModel()Definition RNTupleWriter.hxx:76; ROOT::Experimental::RNTupleWriter::GetLastCommittedNTupleSize_t GetLastCommitted() constReturn the entry number that was last committed in a cluster.Definition RNTupleWriter.hxx:131; ROOT::Experimental::RNTupleWriter::CommitClustervoid CommitCluster(bool commitClusterGroup=false)Ensure that the data from the so far seen Fill calls has been written to storage.Definition RNTupleWriter.hxx:119; ROOT::Experimental::RNTupleWriter::RNTupleWriterRNTupleWriter(const RNTupleWriter &)=delete; ROOT::Experimental::RNTupleWriter::EnableMetricsvoid EnableMetrics()Definition RNTupleWriter.hxx:137; ROOT::Experimental::RNTupleWriter::CommitClusterGroupvoid CommitClusterGroup()Definition RNTupleWriter.cxx:102; ROOT::",MatchSource.WIKI,doc/master/RNTupleWriter_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8hxx_source.html
https://root.cern/doc/master/RNTupleWriter_8hxx_source.html:4936,Performance,perform,perform,4936,"ue_ptr<RNTupleWriter>; 93 Recreate(std::initializer_list<std::pair<std::string_view, std::string_view>> fields, std::string_view ntupleName,; 94 std::string_view storage, const RNTupleWriteOptions &options = RNTupleWriteOptions());; 95 /// Throws an exception if the model is null.; 96 static std::unique_ptr<RNTupleWriter> Append(std::unique_ptr<RNTupleModel> model, std::string_view ntupleName,; 97 TFile &file,; 98 const RNTupleWriteOptions &options = RNTupleWriteOptions());; 99 RNTupleWriter(const RNTupleWriter &) = delete;; 100 RNTupleWriter &operator=(const RNTupleWriter &) = delete;; 101 ~RNTupleWriter();; 102 ; 103 /// The simplest user interface if the default entry that comes with the ntuple model is used.; 104 /// \return The number of uncompressed bytes written.; 105 std::size_t Fill() { return fFillContext.Fill(fFillContext.fModel->GetDefaultEntry()); }; 106 /// Multiple entries can have been instantiated from the ntuple model. This method will perform; 107 /// a light check whether the entry comes from the ntuple's own model.; 108 /// \return The number of uncompressed bytes written.; 109 std::size_t Fill(REntry &entry) { return fFillContext.Fill(entry); }; 110 /// Fill an entry into this ntuple, but don't commit the cluster. The calling code must pass an RNTupleFillStatus; 111 /// and check RNTupleFillStatus::ShouldFlushCluster.; 112 void FillNoFlush(REntry &entry, RNTupleFillStatus &status) { fFillContext.FillNoFlush(entry, status); }; 113 /// Flush column data, preparing for CommitCluster or to reduce memory usage. This will trigger compression of pages,; 114 /// but not actually write to storage (unless buffered writing is turned off).; 115 void FlushColumns() { fFillContext.FlushColumns(); }; 116 /// Flush so far filled entries to storage; 117 void FlushCluster() { fFillContext.FlushCluster(); }; 118 /// Ensure that the data from the so far seen Fill calls has been written to storage; 119 void CommitCluster(bool commitClusterGroup = false); 120 {; 121 ",MatchSource.WIKI,doc/master/RNTupleWriter_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8hxx_source.html
https://root.cern/doc/master/RNTupleWriter_8hxx_source.html:4603,Usability,simpl,simplest,4603,"he sink in a RPageSinkBuf.; 83 static std::unique_ptr<RNTupleWriter> Create(std::unique_ptr<RNTupleModel> model,; 84 std::unique_ptr<Internal::RPageSink> sink,; 85 const RNTupleWriteOptions &options);; 86 ; 87public:; 88 /// Throws an exception if the model is null.; 89 static std::unique_ptr<RNTupleWriter> Recreate(std::unique_ptr<RNTupleModel> model, std::string_view ntupleName,; 90 std::string_view storage,; 91 const RNTupleWriteOptions &options = RNTupleWriteOptions());; 92 static std::unique_ptr<RNTupleWriter>; 93 Recreate(std::initializer_list<std::pair<std::string_view, std::string_view>> fields, std::string_view ntupleName,; 94 std::string_view storage, const RNTupleWriteOptions &options = RNTupleWriteOptions());; 95 /// Throws an exception if the model is null.; 96 static std::unique_ptr<RNTupleWriter> Append(std::unique_ptr<RNTupleModel> model, std::string_view ntupleName,; 97 TFile &file,; 98 const RNTupleWriteOptions &options = RNTupleWriteOptions());; 99 RNTupleWriter(const RNTupleWriter &) = delete;; 100 RNTupleWriter &operator=(const RNTupleWriter &) = delete;; 101 ~RNTupleWriter();; 102 ; 103 /// The simplest user interface if the default entry that comes with the ntuple model is used.; 104 /// \return The number of uncompressed bytes written.; 105 std::size_t Fill() { return fFillContext.Fill(fFillContext.fModel->GetDefaultEntry()); }; 106 /// Multiple entries can have been instantiated from the ntuple model. This method will perform; 107 /// a light check whether the entry comes from the ntuple's own model.; 108 /// \return The number of uncompressed bytes written.; 109 std::size_t Fill(REntry &entry) { return fFillContext.Fill(entry); }; 110 /// Fill an entry into this ntuple, but don't commit the cluster. The calling code must pass an RNTupleFillStatus; 111 /// and check RNTupleFillStatus::ShouldFlushCluster.; 112 void FillNoFlush(REntry &entry, RNTupleFillStatus &status) { fFillContext.FillNoFlush(entry, status); }; 113 /// Flush column data, pr",MatchSource.WIKI,doc/master/RNTupleWriter_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8hxx_source.html
https://root.cern/doc/master/RNTupleWriter_8hxx_source.html:12621,Usability,simpl,simplest,12621,"RNTupleWriter.hxx:138; ROOT::Experimental::RNTupleWriter::GetLastCommittedClusterGroupNTupleSize_t GetLastCommittedClusterGroup() constReturn the entry number that was last committed in a cluster group.Definition RNTupleWriter.hxx:133; ROOT::Experimental::RNTupleWriter::fZipTasksstd::unique_ptr< Internal::RPageStorage::RTaskScheduler > fZipTasksThe page sink's parallel page compression scheduler if IMT is on.Definition RNTupleWriter.hxx:68; ROOT::Experimental::RNTupleWriter::FillNoFlushvoid FillNoFlush(REntry &entry, RNTupleFillStatus &status)Fill an entry into this ntuple, but don't commit the cluster.Definition RNTupleWriter.hxx:112; ROOT::Experimental::RNTupleWriter::GetModelconst RNTupleModel & GetModel() constDefinition RNTupleWriter.hxx:140; ROOT::Experimental::RNTupleWriter::FlushColumnsvoid FlushColumns()Flush column data, preparing for CommitCluster or to reduce memory usage.Definition RNTupleWriter.hxx:115; ROOT::Experimental::RNTupleWriter::Fillstd::size_t Fill()The simplest user interface if the default entry that comes with the ntuple model is used.Definition RNTupleWriter.hxx:105; ROOT::Experimental::RNTupleWriter::GetLastFlushedNTupleSize_t GetLastFlushed() constReturn the entry number that was last flushed in a cluster.Definition RNTupleWriter.hxx:129; ROOT::Experimental::RNTupleWriter::CreateEntrystd::unique_ptr< REntry > CreateEntry()Definition RNTupleWriter.hxx:126; ROOT::Experimental::RNTupleWriter::Createstatic std::unique_ptr< RNTupleWriter > Create(std::unique_ptr< RNTupleModel > model, std::unique_ptr< Internal::RPageSink > sink, const RNTupleWriteOptions &options)Create a writer, potentially wrapping the sink in a RPageSinkBuf.Definition RNTupleWriter.cxx:58; ROOT::Experimental::RNTupleWriter::GetUpdatableModelRNTupleModel & GetUpdatableModel()Definition RNTupleWriter.hxx:76; ROOT::Experimental::RNTupleWriter::GetLastCommittedNTupleSize_t GetLastCommitted() constReturn the entry number that was last committed in a cluster.Definition RNTupleW",MatchSource.WIKI,doc/master/RNTupleWriter_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8hxx_source.html
https://root.cern/doc/master/RNTuple_8hxx.html:293,Integrability,depend,dependency,293,". ROOT: tree/ntuple/v7/inc/ROOT/RNTuple.hxx File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Functions ; RNTuple.hxx File ReferenceNTuple-related classes | ROOT7 classes. #include <Rtypes.h>; #include <cstdint>. Include dependency graph for RNTuple.hxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  ROOT::RNTuple;  Representation of an RNTuple data set in a ROOT file. More...;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Experimental;  ; namespace  ROOT::Experimental::Internal;  . Functions; RNTuple ROOT::Experimental::Internal::CreateAnchor (std::uint16_t versionEpoch, std::uint16_t versionMajor, std::uint16_t versionMinor, std::uint16_t versionPatch, std::uint64_t seekHeader, std::uint64_t nbytesHeader, std::uint64_t lenHeader, std::uint64_t seekFooter, std::uint64_t nbytesFooter, std::uint64_t lenFooter, std::uint64_t maxKeySize);  . Detailed Description; AuthorJakob Blomer jblom.nosp@m.er@c.nosp@m.ern.c.nosp@m.h ; Date2023-09-19 ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! ; Definition in file RNTuple.hxx. treentuplev7incROOTRNTuple.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:26 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/RNTuple_8hxx.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTuple_8hxx.html
https://root.cern/doc/master/RNTuple_8hxx_source.html:3884,Deployability,release,release,3884,"tic constexpr std::uint16_t kVersionMinor = 0;; 82 static constexpr std::uint16_t kVersionPatch = 0;; 83 ; 84private:; 85 /// Version of the RNTuple binary format that the writer supports (see specification).; 86 /// Changing the epoch indicates backward-incompatible changes; 87 std::uint16_t fVersionEpoch = kVersionEpoch;; 88 /// Changing the major version indicates forward incompatible changes; such changes should correspond to a new; 89 /// bit in the feature flag of the RNTuple header.; 90 /// For the pre-release epoch 0, indicates the release candidate number; 91 std::uint16_t fVersionMajor = kVersionMajor;; 92 /// Changing the minor version indicates new optional fields added to the RNTuple meta-data; 93 std::uint16_t fVersionMinor = kVersionMinor;; 94 /// Changing the patch version indicates new backported features from newer binary format versions; 95 std::uint16_t fVersionPatch = kVersionPatch;; 96 /// The file offset of the header excluding the TKey part; 97 std::uint64_t fSeekHeader = 0;; 98 /// The size of the compressed ntuple header; 99 std::uint64_t fNBytesHeader = 0;; 100 /// The size of the uncompressed ntuple header; 101 std::uint64_t fLenHeader = 0;; 102 /// The file offset of the footer excluding the TKey part; 103 std::uint64_t fSeekFooter = 0;; 104 /// The size of the compressed ntuple footer; 105 std::uint64_t fNBytesFooter = 0;; 106 /// The size of the uncompressed ntuple footer; 107 std::uint64_t fLenFooter = 0;; 108 /// The maximum size for a TKey payload. Payloads bigger than this size will be written as multiple blobs.; 109 std::uint64_t fMaxKeySize = 0;; 110 ; 111 TFile *fFile = nullptr; ///<! The file from which the ntuple was streamed, registered in the custom streamer; 112 ; 113public:; 114 RNTuple() = default;; 115 ~RNTuple() = default;; 116 ; 117 std::uint16_t GetVersionEpoch() const { return fVersionEpoch; }; 118 std::uint16_t GetVersionMajor() const { return fVersionMajor; }; 119 std::uint16_t GetVersionMinor() const { return fVer",MatchSource.WIKI,doc/master/RNTuple_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTuple_8hxx_source.html
https://root.cern/doc/master/RNTuple_8hxx_source.html:3915,Deployability,release,release,3915,"tic constexpr std::uint16_t kVersionMinor = 0;; 82 static constexpr std::uint16_t kVersionPatch = 0;; 83 ; 84private:; 85 /// Version of the RNTuple binary format that the writer supports (see specification).; 86 /// Changing the epoch indicates backward-incompatible changes; 87 std::uint16_t fVersionEpoch = kVersionEpoch;; 88 /// Changing the major version indicates forward incompatible changes; such changes should correspond to a new; 89 /// bit in the feature flag of the RNTuple header.; 90 /// For the pre-release epoch 0, indicates the release candidate number; 91 std::uint16_t fVersionMajor = kVersionMajor;; 92 /// Changing the minor version indicates new optional fields added to the RNTuple meta-data; 93 std::uint16_t fVersionMinor = kVersionMinor;; 94 /// Changing the patch version indicates new backported features from newer binary format versions; 95 std::uint16_t fVersionPatch = kVersionPatch;; 96 /// The file offset of the header excluding the TKey part; 97 std::uint64_t fSeekHeader = 0;; 98 /// The size of the compressed ntuple header; 99 std::uint64_t fNBytesHeader = 0;; 100 /// The size of the uncompressed ntuple header; 101 std::uint64_t fLenHeader = 0;; 102 /// The file offset of the footer excluding the TKey part; 103 std::uint64_t fSeekFooter = 0;; 104 /// The size of the compressed ntuple footer; 105 std::uint64_t fNBytesFooter = 0;; 106 /// The size of the uncompressed ntuple footer; 107 std::uint64_t fLenFooter = 0;; 108 /// The maximum size for a TKey payload. Payloads bigger than this size will be written as multiple blobs.; 109 std::uint64_t fMaxKeySize = 0;; 110 ; 111 TFile *fFile = nullptr; ///<! The file from which the ntuple was streamed, registered in the custom streamer; 112 ; 113public:; 114 RNTuple() = default;; 115 ~RNTuple() = default;; 116 ; 117 std::uint16_t GetVersionEpoch() const { return fVersionEpoch; }; 118 std::uint16_t GetVersionMajor() const { return fVersionMajor; }; 119 std::uint16_t GetVersionMinor() const { return fVer",MatchSource.WIKI,doc/master/RNTuple_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTuple_8hxx_source.html
https://root.cern/doc/master/RNTuple_8hxx_source.html:4155,Deployability,patch,patch,4155,"tic constexpr std::uint16_t kVersionMinor = 0;; 82 static constexpr std::uint16_t kVersionPatch = 0;; 83 ; 84private:; 85 /// Version of the RNTuple binary format that the writer supports (see specification).; 86 /// Changing the epoch indicates backward-incompatible changes; 87 std::uint16_t fVersionEpoch = kVersionEpoch;; 88 /// Changing the major version indicates forward incompatible changes; such changes should correspond to a new; 89 /// bit in the feature flag of the RNTuple header.; 90 /// For the pre-release epoch 0, indicates the release candidate number; 91 std::uint16_t fVersionMajor = kVersionMajor;; 92 /// Changing the minor version indicates new optional fields added to the RNTuple meta-data; 93 std::uint16_t fVersionMinor = kVersionMinor;; 94 /// Changing the patch version indicates new backported features from newer binary format versions; 95 std::uint16_t fVersionPatch = kVersionPatch;; 96 /// The file offset of the header excluding the TKey part; 97 std::uint64_t fSeekHeader = 0;; 98 /// The size of the compressed ntuple header; 99 std::uint64_t fNBytesHeader = 0;; 100 /// The size of the uncompressed ntuple header; 101 std::uint64_t fLenHeader = 0;; 102 /// The file offset of the footer excluding the TKey part; 103 std::uint64_t fSeekFooter = 0;; 104 /// The size of the compressed ntuple footer; 105 std::uint64_t fNBytesFooter = 0;; 106 /// The size of the uncompressed ntuple footer; 107 std::uint64_t fLenFooter = 0;; 108 /// The maximum size for a TKey payload. Payloads bigger than this size will be written as multiple blobs.; 109 std::uint64_t fMaxKeySize = 0;; 110 ; 111 TFile *fFile = nullptr; ///<! The file from which the ntuple was streamed, registered in the custom streamer; 112 ; 113public:; 114 RNTuple() = default;; 115 ~RNTuple() = default;; 116 ; 117 std::uint16_t GetVersionEpoch() const { return fVersionEpoch; }; 118 std::uint16_t GetVersionMajor() const { return fVersionMajor; }; 119 std::uint16_t GetVersionMinor() const { return fVer",MatchSource.WIKI,doc/master/RNTuple_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTuple_8hxx_source.html
https://root.cern/doc/master/RNTuple_8hxx_source.html:6173,Deployability,update,update,6173,"t of the footer excluding the TKey part; 103 std::uint64_t fSeekFooter = 0;; 104 /// The size of the compressed ntuple footer; 105 std::uint64_t fNBytesFooter = 0;; 106 /// The size of the uncompressed ntuple footer; 107 std::uint64_t fLenFooter = 0;; 108 /// The maximum size for a TKey payload. Payloads bigger than this size will be written as multiple blobs.; 109 std::uint64_t fMaxKeySize = 0;; 110 ; 111 TFile *fFile = nullptr; ///<! The file from which the ntuple was streamed, registered in the custom streamer; 112 ; 113public:; 114 RNTuple() = default;; 115 ~RNTuple() = default;; 116 ; 117 std::uint16_t GetVersionEpoch() const { return fVersionEpoch; }; 118 std::uint16_t GetVersionMajor() const { return fVersionMajor; }; 119 std::uint16_t GetVersionMinor() const { return fVersionMinor; }; 120 std::uint16_t GetVersionPatch() const { return fVersionPatch; }; 121 ; 122 std::uint64_t GetSeekHeader() const { return fSeekHeader; }; 123 std::uint64_t GetNBytesHeader() const { return fNBytesHeader; }; 124 std::uint64_t GetLenHeader() const { return fLenHeader; }; 125 ; 126 std::uint64_t GetSeekFooter() const { return fSeekFooter; }; 127 std::uint64_t GetNBytesFooter() const { return fNBytesFooter; }; 128 std::uint64_t GetLenFooter() const { return fLenFooter; }; 129 std::uint64_t GetMaxKeySize() const { return fMaxKeySize; }; 130 ; 131 /// RNTuple implements the hadd MergeFile interface; 132 /// Merge this NTuple with the input list entries; 133 Long64_t Merge(TCollection *input, TFileMergeInfo *mergeInfo);; 134 ; 135 /// NOTE: if you change this version you also need to update RTFNTuple::fClassVersion in RMiniFile.cxx; 136 ClassDefNV(RNTuple, 2);; 137}; // class RNTuple; 138 ; 139} // namespace ROOT; 140 ; 141#endif; Long64_tlong long Long64_tDefinition RtypesCore.h:69; Rtypes.h; ClassDefNV#define ClassDefNV(name, id)Definition Rtypes.h:350; inputOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlig",MatchSource.WIKI,doc/master/RNTuple_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTuple_8hxx_source.html
https://root.cern/doc/master/RNTuple_8hxx_source.html:9622,Deployability,patch,patch,9622,"::uint64_t fMaxKeySizeThe maximum size for a TKey payload. Payloads bigger than this size will be written as multiple blobs...Definition RNTuple.hxx:109; ROOT::RNTuple::~RNTuple~RNTuple()=default; ROOT::RNTuple::GetVersionMinorstd::uint16_t GetVersionMinor() constDefinition RNTuple.hxx:119; ROOT::RNTuple::fNBytesHeaderstd::uint64_t fNBytesHeaderThe size of the compressed ntuple header.Definition RNTuple.hxx:99; ROOT::RNTuple::fLenHeaderstd::uint64_t fLenHeaderThe size of the uncompressed ntuple header.Definition RNTuple.hxx:101; ROOT::RNTuple::GetVersionPatchstd::uint16_t GetVersionPatch() constDefinition RNTuple.hxx:120; ROOT::RNTuple::fLenFooterstd::uint64_t fLenFooterThe size of the uncompressed ntuple footer.Definition RNTuple.hxx:107; ROOT::RNTuple::GetMaxKeySizestd::uint64_t GetMaxKeySize() constDefinition RNTuple.hxx:129; ROOT::RNTuple::GetLenHeaderstd::uint64_t GetLenHeader() constDefinition RNTuple.hxx:124; ROOT::RNTuple::fVersionPatchstd::uint16_t fVersionPatchChanging the patch version indicates new backported features from newer binary format versions.Definition RNTuple.hxx:95; ROOT::RNTuple::fFileTFile * fFile! The file from which the ntuple was streamed, registered in the custom streamerDefinition RNTuple.hxx:111; ROOT::RNTuple::fVersionMajorstd::uint16_t fVersionMajorChanging the major version indicates forward incompatible changes; such changes should correspond to ...Definition RNTuple.hxx:91; ROOT::RNTuple::GetSeekFooterstd::uint64_t GetSeekFooter() constDefinition RNTuple.hxx:126; ROOT::RNTuple::kVersionMinorstatic constexpr std::uint16_t kVersionMinorDefinition RNTuple.hxx:81; ROOT::RNTuple::fVersionEpochstd::uint16_t fVersionEpochVersion of the RNTuple binary format that the writer supports (see specification).Definition RNTuple.hxx:87; ROOT::RNTuple::GetVersionEpochstd::uint16_t GetVersionEpoch() constDefinition RNTuple.hxx:117; TCollectionCollection abstract base class.Definition TCollection.h:65; TFileMergeInfoDefinition TFileMergeInfo.h:42; T",MatchSource.WIKI,doc/master/RNTuple_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTuple_8hxx_source.html
https://root.cern/doc/master/RNTuple_8hxx_source.html:5975,Integrability,interface,interface,5975,"t of the footer excluding the TKey part; 103 std::uint64_t fSeekFooter = 0;; 104 /// The size of the compressed ntuple footer; 105 std::uint64_t fNBytesFooter = 0;; 106 /// The size of the uncompressed ntuple footer; 107 std::uint64_t fLenFooter = 0;; 108 /// The maximum size for a TKey payload. Payloads bigger than this size will be written as multiple blobs.; 109 std::uint64_t fMaxKeySize = 0;; 110 ; 111 TFile *fFile = nullptr; ///<! The file from which the ntuple was streamed, registered in the custom streamer; 112 ; 113public:; 114 RNTuple() = default;; 115 ~RNTuple() = default;; 116 ; 117 std::uint16_t GetVersionEpoch() const { return fVersionEpoch; }; 118 std::uint16_t GetVersionMajor() const { return fVersionMajor; }; 119 std::uint16_t GetVersionMinor() const { return fVersionMinor; }; 120 std::uint16_t GetVersionPatch() const { return fVersionPatch; }; 121 ; 122 std::uint64_t GetSeekHeader() const { return fSeekHeader; }; 123 std::uint64_t GetNBytesHeader() const { return fNBytesHeader; }; 124 std::uint64_t GetLenHeader() const { return fLenHeader; }; 125 ; 126 std::uint64_t GetSeekFooter() const { return fSeekFooter; }; 127 std::uint64_t GetNBytesFooter() const { return fNBytesFooter; }; 128 std::uint64_t GetLenFooter() const { return fLenFooter; }; 129 std::uint64_t GetMaxKeySize() const { return fMaxKeySize; }; 130 ; 131 /// RNTuple implements the hadd MergeFile interface; 132 /// Merge this NTuple with the input list entries; 133 Long64_t Merge(TCollection *input, TFileMergeInfo *mergeInfo);; 134 ; 135 /// NOTE: if you change this version you also need to update RTFNTuple::fClassVersion in RMiniFile.cxx; 136 ClassDefNV(RNTuple, 2);; 137}; // class RNTuple; 138 ; 139} // namespace ROOT; 140 ; 141#endif; Long64_tlong long Long64_tDefinition RtypesCore.h:69; Rtypes.h; ClassDefNV#define ClassDefNV(name, id)Definition Rtypes.h:350; inputOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlig",MatchSource.WIKI,doc/master/RNTuple_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTuple_8hxx_source.html
https://root.cern/doc/master/RNTuple_8hxx_source.html:7144,Integrability,interface,interface,7144," 134 ; 135 /// NOTE: if you change this version you also need to update RTFNTuple::fClassVersion in RMiniFile.cxx; 136 ClassDefNV(RNTuple, 2);; 137}; // class RNTuple; 138 ; 139} // namespace ROOT; 140 ; 141#endif; Long64_tlong long Long64_tDefinition RtypesCore.h:69; Rtypes.h; ClassDefNV#define ClassDefNV(name, id)Definition Rtypes.h:350; inputOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void inputDefinition TGWin32VirtualXProxy.cxx:142; ROOT::Experimental::Internal::RNTupleFileWriterWrite RNTuple data blocks in a TFile or a bare file container.Definition RMiniFile.hxx:103; ROOT::Experimental::Internal::RPageSourceFileStorage provider that reads ntuple pages from a file.Definition RPageStorageFile.hxx:117; ROOT::RNTupleRepresentation of an RNTuple data set in a ROOT file.Definition RNTuple.hxx:69; ROOT::RNTuple::MergeLong64_t Merge(TCollection *input, TFileMergeInfo *mergeInfo)RNTuple implements the hadd MergeFile interface Merge this NTuple with the input list entries.Definition RNTupleMerger.cxx:45; ROOT::RNTuple::fSeekFooterstd::uint64_t fSeekFooterThe file offset of the footer excluding the TKey part.Definition RNTuple.hxx:103; ROOT::RNTuple::fNBytesFooterstd::uint64_t fNBytesFooterThe size of the compressed ntuple footer.Definition RNTuple.hxx:105; ROOT::RNTuple::GetLenFooterstd::uint64_t GetLenFooter() constDefinition RNTuple.hxx:128; ROOT::RNTuple::kVersionPatchstatic constexpr std::uint16_t kVersionPatchDefinition RNTuple.hxx:82; ROOT::RNTuple::GetSeekHeaderstd::uint64_t GetSeekHeader() constDefinition RNTuple.hxx:122; ROOT::RNTuple::fVersionMinorstd::uint16_t fVersionMinorChanging the minor version indicates new optional fields added to the RNTuple meta-data.Definition RNTuple.hxx:93; ROOT::RNTuple::kVersionMajorstatic constexpr std::uint16_t kVersionMajorDefinition RNTuple.hxx:80; ROOT::RNTuple::RNTupleRNTuple()=default; ROOT::RNTuple::GetVersionMajor",MatchSource.WIKI,doc/master/RNTuple_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RNTuple_8hxx_source.html
https://root.cern/doc/master/RooAbsArg_8h.html:723,Integrability,depend,dependency,723,". ROOT: roofit/roofitcore/inc/RooAbsArg.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Typedefs |; Functions ; RooAbsArg.h File Reference. #include <RooAbsCache.h>; #include <RooFit/Config.h>; #include <RooFit/Detail/NormalizationHelpers.h>; #include <RooLinkedListIter.h>; #include <RooNameReg.h>; #include <RooPrintable.h>; #include <RooSTLRefCountList.h>; #include <RooStringView.h>; #include <TNamed.h>; #include <TObjArray.h>; #include <TRefArray.h>; #include <ROOT/RConfig.hxx>; #include <deque>; #include <iostream>; #include <map>; #include <memory>; #include <set>; #include <stack>; #include <string>; #include <unordered_map>. Include dependency graph for RooAbsArg.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; struct  RooAbsArg::ProxyListCache;  ; class  RooAbsArg;  Common abstract base class for objects that represent a value and a ""shape"" in RooFit. More...;  ; class  RooRefArray;  . Namespaces; namespace  RooFit;  The namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or other types of arguments). ;  ; namespace  RooFit::Detail;  . Typedefs; using RooListProxy = RooCollectionProxy< RooArgList >;  ; using RooSetProxy = RooCollectionProxy< RooArgSet >;  . Functions; std::ostream & operator<< (std::ostream &os, const RooAbsArg &arg);  Ostream operator. ;  ; std::istream & operator>> (std::istream &is, RooAbsArg &arg);  Istream operator. ;  . Typedef Documentation. ◆ RooListProxy. using RooListProxy = RooCollectionProxy<RooArgList>. Definition at line 55 of file RooAbsArg.h. ◆ RooSetProxy. using RooSetProxy = RooCollectionProxy<RooArgSet>. Definition at line 54 of file RooAbsArg.h. Function Documentation. ◆ operator<<(). std::ostream & operator<<",MatchSource.WIKI,doc/master/RooAbsArg_8h.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsArg_8h.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:1347,Availability,error,error,1347,"root/roofitcore:$Id$; 5 * Authors: *; 6 * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; 7 * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; 8 * *; 9 * Copyright (c) 2000-2005, Regents of the University of California *; 10 * and Stanford University. All rights reserved. *; 11 * *; 12 * Redistribution and use in source and binary forms, *; 13 * with or without modification, are permitted according to the terms *; 14 * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; 15 *****************************************************************************/; 16 ; 17//////////////////////////////////////////////////////////////////////////////; 18/** \class RooAbsPdf; 19 \ingroup Roofitcore; 20 \brief Abstract interface for all probability density functions.; 21 ; 22## RooAbsPdf, the base class of all PDFs; 23 ; 24RooAbsPdf is the base class for all probability density; 25functions (PDFs). The class provides hybrid analytical/numerical; 26normalization for its implementations, error tracing, and a Monte Carlo; 27generator interface.; 28 ; 29### A Minimal PDF Implementation; 30 ; 31A minimal implementation of a PDF class derived from RooAbsPdf; 32should override the `evaluate()` function. This function should; 33return the PDF's value (which does not need to be normalised).; 34 ; 35 ; 36#### Normalization/Integration; 37 ; 38Although the normalization of a PDF is an integral part of a; 39probability density function, normalization is treated separately; 40in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; 41PDF: it can be a building block for a more complex composite PDF; 42if any of its variables are functions instead of variables. In; 43such cases, the normalization of the composite PDF may not simply be; 44integral over the dependents of the top-level PDF: these are; 45functions with potentially non-trivial Jacobian terms themselves.; 46\note Therefore, no explicit attempt should be made to normalize the; 47function output",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:10762,Availability,toler,tolerated,10762,"orCounters() ;; 252 setTraceCounter(0) ;; 253}; 254 ; 255 ; 256 ; 257////////////////////////////////////////////////////////////////////////////////; 258/// Copy constructor; 259 ; 260RooAbsPdf::RooAbsPdf(const RooAbsPdf& other, const char* name) :; 261 RooAbsReal(other,name),; 262 _normMgr(other._normMgr,this), _selectComp(other._selectComp), _normRange(other._normRange); 263{; 264 resetErrorCounters() ;; 265 setTraceCounter(other._traceCount) ;; 266 ; 267 if (other._specGeneratorConfig) {; 268 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*other._specGeneratorConfig);; 269 }; 270}; 271 ; 272 ; 273 ; 274////////////////////////////////////////////////////////////////////////////////; 275/// Destructor; 276 ; 277RooAbsPdf::~RooAbsPdf(); 278{; 279}; 280 ; 281 ; 282double RooAbsPdf::normalizeWithNaNPacking(double rawVal, double normVal) const {; 283 ; 284 if (normVal < 0. || (normVal == 0. && rawVal != 0)) {; 285 //Unreasonable normalisations. A zero integral can be tolerated if the function vanishes, though.; 286 const std::string msg = ""p.d.f normalization integral is zero or negative: "" + std::to_string(normVal);; 287 logEvalError(msg.c_str());; 288 clearValueAndShapeDirty();; 289 return RooNaNPacker::packFloatIntoNaN(-normVal + (rawVal < 0. ? -rawVal : 0.));; 290 }; 291 ; 292 if (rawVal < 0.) {; 293 logEvalError(Form(""p.d.f value is less than zero (%f), trying to recover"", rawVal));; 294 clearValueAndShapeDirty();; 295 return RooNaNPacker::packFloatIntoNaN(-rawVal);; 296 }; 297 ; 298 if (TMath::IsNaN(rawVal)) {; 299 logEvalError(""p.d.f value is Not-a-Number"");; 300 clearValueAndShapeDirty();; 301 return rawVal;; 302 }; 303 ; 304 return (rawVal == 0. && normVal == 0.) ? 0. : rawVal / normVal;; 305}; 306 ; 307 ; 308////////////////////////////////////////////////////////////////////////////////; 309/// Return current value, normalized by integrating over; 310/// the observables in `nset`. If `nset` is 0, the unnormalized value; 311/// is returned. All ele",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:11171,Availability,recover,recover,11171," (other._specGeneratorConfig) {; 268 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*other._specGeneratorConfig);; 269 }; 270}; 271 ; 272 ; 273 ; 274////////////////////////////////////////////////////////////////////////////////; 275/// Destructor; 276 ; 277RooAbsPdf::~RooAbsPdf(); 278{; 279}; 280 ; 281 ; 282double RooAbsPdf::normalizeWithNaNPacking(double rawVal, double normVal) const {; 283 ; 284 if (normVal < 0. || (normVal == 0. && rawVal != 0)) {; 285 //Unreasonable normalisations. A zero integral can be tolerated if the function vanishes, though.; 286 const std::string msg = ""p.d.f normalization integral is zero or negative: "" + std::to_string(normVal);; 287 logEvalError(msg.c_str());; 288 clearValueAndShapeDirty();; 289 return RooNaNPacker::packFloatIntoNaN(-normVal + (rawVal < 0. ? -rawVal : 0.));; 290 }; 291 ; 292 if (rawVal < 0.) {; 293 logEvalError(Form(""p.d.f value is less than zero (%f), trying to recover"", rawVal));; 294 clearValueAndShapeDirty();; 295 return RooNaNPacker::packFloatIntoNaN(-rawVal);; 296 }; 297 ; 298 if (TMath::IsNaN(rawVal)) {; 299 logEvalError(""p.d.f value is Not-a-Number"");; 300 clearValueAndShapeDirty();; 301 return rawVal;; 302 }; 303 ; 304 return (rawVal == 0. && normVal == 0.) ? 0. : rawVal / normVal;; 305}; 306 ; 307 ; 308////////////////////////////////////////////////////////////////////////////////; 309/// Return current value, normalized by integrating over; 310/// the observables in `nset`. If `nset` is 0, the unnormalized value; 311/// is returned. All elements of `nset` must be lvalues.; 312///; 313/// Unnormalized values are not cached.; 314/// Doing so would be complicated as `_norm->getVal()` could; 315/// spoil the cache and interfere with returning the cached; 316/// return value. Since unnormalized calls are typically; 317/// done in integration calls, there is no performance hit.; 318 ; 319double RooAbsPdf::getValV(const RooArgSet* nset) const; 320{; 321 ; 322 // Special handling of case without normali",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:14262,Availability,error,error,14262,"al::analyticalIntegralWN() for further information).; 359///; 360/// This function applies the normalization specified by `normSet` to the integral returned; 361/// by RooAbsReal::analyticalIntegral(). The passthrough scenario (code=0) is also changed; 362/// to return a normalized answer.; 363 ; 364double RooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName) const; 365{; 366 cxcoutD(Eval) << ""RooAbsPdf::analyticalIntegralWN("" << GetName() << "") code = "" << code << "" normset = "" << (normSet?*normSet:RooArgSet()) << endl ;; 367 ; 368 ; 369 if (code==0) return getVal(normSet) ;; 370 if (normSet) {; 371 return analyticalIntegral(code,rangeName) / getNorm(normSet) ;; 372 } else {; 373 return analyticalIntegral(code,rangeName) ;; 374 }; 375}; 376 ; 377 ; 378 ; 379////////////////////////////////////////////////////////////////////////////////; 380/// Check that passed value is positive and not 'not-a-number'. If; 381/// not, print an error, until the error counter reaches its set; 382/// maximum.; 383 ; 384bool RooAbsPdf::traceEvalPdf(double value) const; 385{; 386 // check for a math error or negative value; 387 bool error(false) ;; 388 if (TMath::IsNaN(value)) {; 389 logEvalError(Form(""p.d.f value is Not-a-Number (%f), forcing value to zero"",value)) ;; 390 error=true ;; 391 }; 392 if (value<0) {; 393 logEvalError(Form(""p.d.f value is less than zero (%f), forcing value to zero"",value)) ;; 394 error=true ;; 395 }; 396 ; 397 // do nothing if we are no longer tracing evaluations and there was no error; 398 if(!error) return error ;; 399 ; 400 // otherwise, print out this evaluations input values and result; 401 if(++_errorCount <= 10) {; 402 cxcoutD(Tracing) << ""*** Evaluation Error "" << _errorCount << "" "";; 403 if(_errorCount == 10) cxcoutD(Tracing) << ""(no more will be printed) "";; 404 }; 405 else {; 406 return error ;; 407 }; 408 ; 409 Print() ;; 410 return error ;; 411}; 412 ; 413 ; 414//////////////////////////////////////////////",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:14279,Availability,error,error,14279,"al::analyticalIntegralWN() for further information).; 359///; 360/// This function applies the normalization specified by `normSet` to the integral returned; 361/// by RooAbsReal::analyticalIntegral(). The passthrough scenario (code=0) is also changed; 362/// to return a normalized answer.; 363 ; 364double RooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName) const; 365{; 366 cxcoutD(Eval) << ""RooAbsPdf::analyticalIntegralWN("" << GetName() << "") code = "" << code << "" normset = "" << (normSet?*normSet:RooArgSet()) << endl ;; 367 ; 368 ; 369 if (code==0) return getVal(normSet) ;; 370 if (normSet) {; 371 return analyticalIntegral(code,rangeName) / getNorm(normSet) ;; 372 } else {; 373 return analyticalIntegral(code,rangeName) ;; 374 }; 375}; 376 ; 377 ; 378 ; 379////////////////////////////////////////////////////////////////////////////////; 380/// Check that passed value is positive and not 'not-a-number'. If; 381/// not, print an error, until the error counter reaches its set; 382/// maximum.; 383 ; 384bool RooAbsPdf::traceEvalPdf(double value) const; 385{; 386 // check for a math error or negative value; 387 bool error(false) ;; 388 if (TMath::IsNaN(value)) {; 389 logEvalError(Form(""p.d.f value is Not-a-Number (%f), forcing value to zero"",value)) ;; 390 error=true ;; 391 }; 392 if (value<0) {; 393 logEvalError(Form(""p.d.f value is less than zero (%f), forcing value to zero"",value)) ;; 394 error=true ;; 395 }; 396 ; 397 // do nothing if we are no longer tracing evaluations and there was no error; 398 if(!error) return error ;; 399 ; 400 // otherwise, print out this evaluations input values and result; 401 if(++_errorCount <= 10) {; 402 cxcoutD(Tracing) << ""*** Evaluation Error "" << _errorCount << "" "";; 403 if(_errorCount == 10) cxcoutD(Tracing) << ""(no more will be printed) "";; 404 }; 405 else {; 406 return error ;; 407 }; 408 ; 409 Print() ;; 410 return error ;; 411}; 412 ; 413 ; 414//////////////////////////////////////////////",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:14416,Availability,error,error,14416,"ral returned; 361/// by RooAbsReal::analyticalIntegral(). The passthrough scenario (code=0) is also changed; 362/// to return a normalized answer.; 363 ; 364double RooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName) const; 365{; 366 cxcoutD(Eval) << ""RooAbsPdf::analyticalIntegralWN("" << GetName() << "") code = "" << code << "" normset = "" << (normSet?*normSet:RooArgSet()) << endl ;; 367 ; 368 ; 369 if (code==0) return getVal(normSet) ;; 370 if (normSet) {; 371 return analyticalIntegral(code,rangeName) / getNorm(normSet) ;; 372 } else {; 373 return analyticalIntegral(code,rangeName) ;; 374 }; 375}; 376 ; 377 ; 378 ; 379////////////////////////////////////////////////////////////////////////////////; 380/// Check that passed value is positive and not 'not-a-number'. If; 381/// not, print an error, until the error counter reaches its set; 382/// maximum.; 383 ; 384bool RooAbsPdf::traceEvalPdf(double value) const; 385{; 386 // check for a math error or negative value; 387 bool error(false) ;; 388 if (TMath::IsNaN(value)) {; 389 logEvalError(Form(""p.d.f value is Not-a-Number (%f), forcing value to zero"",value)) ;; 390 error=true ;; 391 }; 392 if (value<0) {; 393 logEvalError(Form(""p.d.f value is less than zero (%f), forcing value to zero"",value)) ;; 394 error=true ;; 395 }; 396 ; 397 // do nothing if we are no longer tracing evaluations and there was no error; 398 if(!error) return error ;; 399 ; 400 // otherwise, print out this evaluations input values and result; 401 if(++_errorCount <= 10) {; 402 cxcoutD(Tracing) << ""*** Evaluation Error "" << _errorCount << "" "";; 403 if(_errorCount == 10) cxcoutD(Tracing) << ""(no more will be printed) "";; 404 }; 405 else {; 406 return error ;; 407 }; 408 ; 409 Print() ;; 410 return error ;; 411}; 412 ; 413 ; 414////////////////////////////////////////////////////////////////////////////////; 415/// Get normalisation term needed to normalise the raw values returned by; 416/// getVal(). Note that `g",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:14450,Availability,error,error,14450,"ral returned; 361/// by RooAbsReal::analyticalIntegral(). The passthrough scenario (code=0) is also changed; 362/// to return a normalized answer.; 363 ; 364double RooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName) const; 365{; 366 cxcoutD(Eval) << ""RooAbsPdf::analyticalIntegralWN("" << GetName() << "") code = "" << code << "" normset = "" << (normSet?*normSet:RooArgSet()) << endl ;; 367 ; 368 ; 369 if (code==0) return getVal(normSet) ;; 370 if (normSet) {; 371 return analyticalIntegral(code,rangeName) / getNorm(normSet) ;; 372 } else {; 373 return analyticalIntegral(code,rangeName) ;; 374 }; 375}; 376 ; 377 ; 378 ; 379////////////////////////////////////////////////////////////////////////////////; 380/// Check that passed value is positive and not 'not-a-number'. If; 381/// not, print an error, until the error counter reaches its set; 382/// maximum.; 383 ; 384bool RooAbsPdf::traceEvalPdf(double value) const; 385{; 386 // check for a math error or negative value; 387 bool error(false) ;; 388 if (TMath::IsNaN(value)) {; 389 logEvalError(Form(""p.d.f value is Not-a-Number (%f), forcing value to zero"",value)) ;; 390 error=true ;; 391 }; 392 if (value<0) {; 393 logEvalError(Form(""p.d.f value is less than zero (%f), forcing value to zero"",value)) ;; 394 error=true ;; 395 }; 396 ; 397 // do nothing if we are no longer tracing evaluations and there was no error; 398 if(!error) return error ;; 399 ; 400 // otherwise, print out this evaluations input values and result; 401 if(++_errorCount <= 10) {; 402 cxcoutD(Tracing) << ""*** Evaluation Error "" << _errorCount << "" "";; 403 if(_errorCount == 10) cxcoutD(Tracing) << ""(no more will be printed) "";; 404 }; 405 else {; 406 return error ;; 407 }; 408 ; 409 Print() ;; 410 return error ;; 411}; 412 ; 413 ; 414////////////////////////////////////////////////////////////////////////////////; 415/// Get normalisation term needed to normalise the raw values returned by; 416/// getVal(). Note that `g",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:14593,Availability,error,error,14593,"bsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName) const; 365{; 366 cxcoutD(Eval) << ""RooAbsPdf::analyticalIntegralWN("" << GetName() << "") code = "" << code << "" normset = "" << (normSet?*normSet:RooArgSet()) << endl ;; 367 ; 368 ; 369 if (code==0) return getVal(normSet) ;; 370 if (normSet) {; 371 return analyticalIntegral(code,rangeName) / getNorm(normSet) ;; 372 } else {; 373 return analyticalIntegral(code,rangeName) ;; 374 }; 375}; 376 ; 377 ; 378 ; 379////////////////////////////////////////////////////////////////////////////////; 380/// Check that passed value is positive and not 'not-a-number'. If; 381/// not, print an error, until the error counter reaches its set; 382/// maximum.; 383 ; 384bool RooAbsPdf::traceEvalPdf(double value) const; 385{; 386 // check for a math error or negative value; 387 bool error(false) ;; 388 if (TMath::IsNaN(value)) {; 389 logEvalError(Form(""p.d.f value is Not-a-Number (%f), forcing value to zero"",value)) ;; 390 error=true ;; 391 }; 392 if (value<0) {; 393 logEvalError(Form(""p.d.f value is less than zero (%f), forcing value to zero"",value)) ;; 394 error=true ;; 395 }; 396 ; 397 // do nothing if we are no longer tracing evaluations and there was no error; 398 if(!error) return error ;; 399 ; 400 // otherwise, print out this evaluations input values and result; 401 if(++_errorCount <= 10) {; 402 cxcoutD(Tracing) << ""*** Evaluation Error "" << _errorCount << "" "";; 403 if(_errorCount == 10) cxcoutD(Tracing) << ""(no more will be printed) "";; 404 }; 405 else {; 406 return error ;; 407 }; 408 ; 409 Print() ;; 410 return error ;; 411}; 412 ; 413 ; 414////////////////////////////////////////////////////////////////////////////////; 415/// Get normalisation term needed to normalise the raw values returned by; 416/// getVal(). Note that `getVal(normalisationVariables)` will automatically; 417/// apply the normalisation term returned here.; 418/// \param nset Set of variables to normalise over.; 419double",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:14731,Availability,error,error,14731,"ode,rangeName) ;; 374 }; 375}; 376 ; 377 ; 378 ; 379////////////////////////////////////////////////////////////////////////////////; 380/// Check that passed value is positive and not 'not-a-number'. If; 381/// not, print an error, until the error counter reaches its set; 382/// maximum.; 383 ; 384bool RooAbsPdf::traceEvalPdf(double value) const; 385{; 386 // check for a math error or negative value; 387 bool error(false) ;; 388 if (TMath::IsNaN(value)) {; 389 logEvalError(Form(""p.d.f value is Not-a-Number (%f), forcing value to zero"",value)) ;; 390 error=true ;; 391 }; 392 if (value<0) {; 393 logEvalError(Form(""p.d.f value is less than zero (%f), forcing value to zero"",value)) ;; 394 error=true ;; 395 }; 396 ; 397 // do nothing if we are no longer tracing evaluations and there was no error; 398 if(!error) return error ;; 399 ; 400 // otherwise, print out this evaluations input values and result; 401 if(++_errorCount <= 10) {; 402 cxcoutD(Tracing) << ""*** Evaluation Error "" << _errorCount << "" "";; 403 if(_errorCount == 10) cxcoutD(Tracing) << ""(no more will be printed) "";; 404 }; 405 else {; 406 return error ;; 407 }; 408 ; 409 Print() ;; 410 return error ;; 411}; 412 ; 413 ; 414////////////////////////////////////////////////////////////////////////////////; 415/// Get normalisation term needed to normalise the raw values returned by; 416/// getVal(). Note that `getVal(normalisationVariables)` will automatically; 417/// apply the normalisation term returned here.; 418/// \param nset Set of variables to normalise over.; 419double RooAbsPdf::getNorm(const RooArgSet* nset) const; 420{; 421 if (!nset) return 1 ;; 422 ; 423 syncNormalization(nset,true) ;; 424 if (_verboseEval>1) cxcoutD(Tracing) << ClassName() << ""::getNorm("" << GetName() << ""): norm("" << _norm << "") = "" << _norm->getVal() << endl ;; 425 ; 426 double ret = _norm->getVal() ;; 427 if (ret==0.) {; 428 if(++_errorCount <= 10) {; 429 coutW(Eval) << ""RooAbsPdf::getNorm("" << GetName() << "":: WARNING normaliza",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:14833,Availability,error,error,14833,"ode,rangeName) ;; 374 }; 375}; 376 ; 377 ; 378 ; 379////////////////////////////////////////////////////////////////////////////////; 380/// Check that passed value is positive and not 'not-a-number'. If; 381/// not, print an error, until the error counter reaches its set; 382/// maximum.; 383 ; 384bool RooAbsPdf::traceEvalPdf(double value) const; 385{; 386 // check for a math error or negative value; 387 bool error(false) ;; 388 if (TMath::IsNaN(value)) {; 389 logEvalError(Form(""p.d.f value is Not-a-Number (%f), forcing value to zero"",value)) ;; 390 error=true ;; 391 }; 392 if (value<0) {; 393 logEvalError(Form(""p.d.f value is less than zero (%f), forcing value to zero"",value)) ;; 394 error=true ;; 395 }; 396 ; 397 // do nothing if we are no longer tracing evaluations and there was no error; 398 if(!error) return error ;; 399 ; 400 // otherwise, print out this evaluations input values and result; 401 if(++_errorCount <= 10) {; 402 cxcoutD(Tracing) << ""*** Evaluation Error "" << _errorCount << "" "";; 403 if(_errorCount == 10) cxcoutD(Tracing) << ""(no more will be printed) "";; 404 }; 405 else {; 406 return error ;; 407 }; 408 ; 409 Print() ;; 410 return error ;; 411}; 412 ; 413 ; 414////////////////////////////////////////////////////////////////////////////////; 415/// Get normalisation term needed to normalise the raw values returned by; 416/// getVal(). Note that `getVal(normalisationVariables)` will automatically; 417/// apply the normalisation term returned here.; 418/// \param nset Set of variables to normalise over.; 419double RooAbsPdf::getNorm(const RooArgSet* nset) const; 420{; 421 if (!nset) return 1 ;; 422 ; 423 syncNormalization(nset,true) ;; 424 if (_verboseEval>1) cxcoutD(Tracing) << ClassName() << ""::getNorm("" << GetName() << ""): norm("" << _norm << "") = "" << _norm->getVal() << endl ;; 425 ; 426 double ret = _norm->getVal() ;; 427 if (ret==0.) {; 428 if(++_errorCount <= 10) {; 429 coutW(Eval) << ""RooAbsPdf::getNorm("" << GetName() << "":: WARNING normaliza",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:14848,Availability,error,error,14848,"ode,rangeName) ;; 374 }; 375}; 376 ; 377 ; 378 ; 379////////////////////////////////////////////////////////////////////////////////; 380/// Check that passed value is positive and not 'not-a-number'. If; 381/// not, print an error, until the error counter reaches its set; 382/// maximum.; 383 ; 384bool RooAbsPdf::traceEvalPdf(double value) const; 385{; 386 // check for a math error or negative value; 387 bool error(false) ;; 388 if (TMath::IsNaN(value)) {; 389 logEvalError(Form(""p.d.f value is Not-a-Number (%f), forcing value to zero"",value)) ;; 390 error=true ;; 391 }; 392 if (value<0) {; 393 logEvalError(Form(""p.d.f value is less than zero (%f), forcing value to zero"",value)) ;; 394 error=true ;; 395 }; 396 ; 397 // do nothing if we are no longer tracing evaluations and there was no error; 398 if(!error) return error ;; 399 ; 400 // otherwise, print out this evaluations input values and result; 401 if(++_errorCount <= 10) {; 402 cxcoutD(Tracing) << ""*** Evaluation Error "" << _errorCount << "" "";; 403 if(_errorCount == 10) cxcoutD(Tracing) << ""(no more will be printed) "";; 404 }; 405 else {; 406 return error ;; 407 }; 408 ; 409 Print() ;; 410 return error ;; 411}; 412 ; 413 ; 414////////////////////////////////////////////////////////////////////////////////; 415/// Get normalisation term needed to normalise the raw values returned by; 416/// getVal(). Note that `getVal(normalisationVariables)` will automatically; 417/// apply the normalisation term returned here.; 418/// \param nset Set of variables to normalise over.; 419double RooAbsPdf::getNorm(const RooArgSet* nset) const; 420{; 421 if (!nset) return 1 ;; 422 ; 423 syncNormalization(nset,true) ;; 424 if (_verboseEval>1) cxcoutD(Tracing) << ClassName() << ""::getNorm("" << GetName() << ""): norm("" << _norm << "") = "" << _norm->getVal() << endl ;; 425 ; 426 double ret = _norm->getVal() ;; 427 if (ret==0.) {; 428 if(++_errorCount <= 10) {; 429 coutW(Eval) << ""RooAbsPdf::getNorm("" << GetName() << "":: WARNING normaliza",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:14862,Availability,error,error,14862,"ode,rangeName) ;; 374 }; 375}; 376 ; 377 ; 378 ; 379////////////////////////////////////////////////////////////////////////////////; 380/// Check that passed value is positive and not 'not-a-number'. If; 381/// not, print an error, until the error counter reaches its set; 382/// maximum.; 383 ; 384bool RooAbsPdf::traceEvalPdf(double value) const; 385{; 386 // check for a math error or negative value; 387 bool error(false) ;; 388 if (TMath::IsNaN(value)) {; 389 logEvalError(Form(""p.d.f value is Not-a-Number (%f), forcing value to zero"",value)) ;; 390 error=true ;; 391 }; 392 if (value<0) {; 393 logEvalError(Form(""p.d.f value is less than zero (%f), forcing value to zero"",value)) ;; 394 error=true ;; 395 }; 396 ; 397 // do nothing if we are no longer tracing evaluations and there was no error; 398 if(!error) return error ;; 399 ; 400 // otherwise, print out this evaluations input values and result; 401 if(++_errorCount <= 10) {; 402 cxcoutD(Tracing) << ""*** Evaluation Error "" << _errorCount << "" "";; 403 if(_errorCount == 10) cxcoutD(Tracing) << ""(no more will be printed) "";; 404 }; 405 else {; 406 return error ;; 407 }; 408 ; 409 Print() ;; 410 return error ;; 411}; 412 ; 413 ; 414////////////////////////////////////////////////////////////////////////////////; 415/// Get normalisation term needed to normalise the raw values returned by; 416/// getVal(). Note that `getVal(normalisationVariables)` will automatically; 417/// apply the normalisation term returned here.; 418/// \param nset Set of variables to normalise over.; 419double RooAbsPdf::getNorm(const RooArgSet* nset) const; 420{; 421 if (!nset) return 1 ;; 422 ; 423 syncNormalization(nset,true) ;; 424 if (_verboseEval>1) cxcoutD(Tracing) << ClassName() << ""::getNorm("" << GetName() << ""): norm("" << _norm << "") = "" << _norm->getVal() << endl ;; 425 ; 426 double ret = _norm->getVal() ;; 427 if (ret==0.) {; 428 if(++_errorCount <= 10) {; 429 coutW(Eval) << ""RooAbsPdf::getNorm("" << GetName() << "":: WARNING normaliza",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:15157,Availability,error,error,15157,"ode,rangeName) ;; 374 }; 375}; 376 ; 377 ; 378 ; 379////////////////////////////////////////////////////////////////////////////////; 380/// Check that passed value is positive and not 'not-a-number'. If; 381/// not, print an error, until the error counter reaches its set; 382/// maximum.; 383 ; 384bool RooAbsPdf::traceEvalPdf(double value) const; 385{; 386 // check for a math error or negative value; 387 bool error(false) ;; 388 if (TMath::IsNaN(value)) {; 389 logEvalError(Form(""p.d.f value is Not-a-Number (%f), forcing value to zero"",value)) ;; 390 error=true ;; 391 }; 392 if (value<0) {; 393 logEvalError(Form(""p.d.f value is less than zero (%f), forcing value to zero"",value)) ;; 394 error=true ;; 395 }; 396 ; 397 // do nothing if we are no longer tracing evaluations and there was no error; 398 if(!error) return error ;; 399 ; 400 // otherwise, print out this evaluations input values and result; 401 if(++_errorCount <= 10) {; 402 cxcoutD(Tracing) << ""*** Evaluation Error "" << _errorCount << "" "";; 403 if(_errorCount == 10) cxcoutD(Tracing) << ""(no more will be printed) "";; 404 }; 405 else {; 406 return error ;; 407 }; 408 ; 409 Print() ;; 410 return error ;; 411}; 412 ; 413 ; 414////////////////////////////////////////////////////////////////////////////////; 415/// Get normalisation term needed to normalise the raw values returned by; 416/// getVal(). Note that `getVal(normalisationVariables)` will automatically; 417/// apply the normalisation term returned here.; 418/// \param nset Set of variables to normalise over.; 419double RooAbsPdf::getNorm(const RooArgSet* nset) const; 420{; 421 if (!nset) return 1 ;; 422 ; 423 syncNormalization(nset,true) ;; 424 if (_verboseEval>1) cxcoutD(Tracing) << ClassName() << ""::getNorm("" << GetName() << ""): norm("" << _norm << "") = "" << _norm->getVal() << endl ;; 425 ; 426 double ret = _norm->getVal() ;; 427 if (ret==0.) {; 428 if(++_errorCount <= 10) {; 429 coutW(Eval) << ""RooAbsPdf::getNorm("" << GetName() << "":: WARNING normaliza",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:15205,Availability,error,error,15205,"ode,rangeName) ;; 374 }; 375}; 376 ; 377 ; 378 ; 379////////////////////////////////////////////////////////////////////////////////; 380/// Check that passed value is positive and not 'not-a-number'. If; 381/// not, print an error, until the error counter reaches its set; 382/// maximum.; 383 ; 384bool RooAbsPdf::traceEvalPdf(double value) const; 385{; 386 // check for a math error or negative value; 387 bool error(false) ;; 388 if (TMath::IsNaN(value)) {; 389 logEvalError(Form(""p.d.f value is Not-a-Number (%f), forcing value to zero"",value)) ;; 390 error=true ;; 391 }; 392 if (value<0) {; 393 logEvalError(Form(""p.d.f value is less than zero (%f), forcing value to zero"",value)) ;; 394 error=true ;; 395 }; 396 ; 397 // do nothing if we are no longer tracing evaluations and there was no error; 398 if(!error) return error ;; 399 ; 400 // otherwise, print out this evaluations input values and result; 401 if(++_errorCount <= 10) {; 402 cxcoutD(Tracing) << ""*** Evaluation Error "" << _errorCount << "" "";; 403 if(_errorCount == 10) cxcoutD(Tracing) << ""(no more will be printed) "";; 404 }; 405 else {; 406 return error ;; 407 }; 408 ; 409 Print() ;; 410 return error ;; 411}; 412 ; 413 ; 414////////////////////////////////////////////////////////////////////////////////; 415/// Get normalisation term needed to normalise the raw values returned by; 416/// getVal(). Note that `getVal(normalisationVariables)` will automatically; 417/// apply the normalisation term returned here.; 418/// \param nset Set of variables to normalise over.; 419double RooAbsPdf::getNorm(const RooArgSet* nset) const; 420{; 421 if (!nset) return 1 ;; 422 ; 423 syncNormalization(nset,true) ;; 424 if (_verboseEval>1) cxcoutD(Tracing) << ClassName() << ""::getNorm("" << GetName() << ""): norm("" << _norm << "") = "" << _norm->getVal() << endl ;; 425 ; 426 double ret = _norm->getVal() ;; 427 if (ret==0.) {; 428 if(++_errorCount <= 10) {; 429 coutW(Eval) << ""RooAbsPdf::getNorm("" << GetName() << "":: WARNING normaliza",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:22511,Availability,error,error,22511,"cachedIntegral->setCacheSource(true) ;; 561 if (normInt->operMode()==ADirty) {; 562 cachedIntegral->setOperMode(ADirty) ;; 563 }; 564 normInt= cachedIntegral ;; 565 }; 566 ; 567 }; 568 _norm = normInt ;; 569 }; 570 ; 571 // Register new normalization with manager (takes ownership); 572 cache = new CacheElem(*_norm) ;; 573 _normMgr.setObj(nset,cache) ;; 574 ; 575// cout << ""making new object "" << _norm->GetName() << endl ;; 576 ; 577 return true ;; 578}; 579 ; 580 ; 581 ; 582////////////////////////////////////////////////////////////////////////////////; 583/// Reset error counter to given value, limiting the number; 584/// of future error messages for this pdf to 'resetValue'; 585 ; 586void RooAbsPdf::resetErrorCounters(Int_t resetValue); 587{; 588 _errorCount = resetValue ;; 589 _negCount = resetValue ;; 590}; 591 ; 592 ; 593 ; 594////////////////////////////////////////////////////////////////////////////////; 595/// Reset trace counter to given value, limiting the; 596/// number of future trace messages for this pdf to 'value'; 597 ; 598void RooAbsPdf::setTraceCounter(Int_t value, bool allNodes); 599{; 600 if (!allNodes) {; 601 _traceCount = value ;; 602 return ;; 603 } else {; 604 RooArgList branchList ;; 605 branchNodeServerList(&branchList) ;; 606 for(auto * pdf : dynamic_range_cast<RooAbsPdf*>(branchList)) {; 607 if (pdf) pdf->setTraceCounter(value,false) ;; 608 }; 609 }; 610 ; 611}; 612 ; 613 ; 614 ; 615 ; 616////////////////////////////////////////////////////////////////////////////////; 617/// Return the log of the current value with given normalization; 618/// An error message is printed if the argument of the log is negative.; 619 ; 620double RooAbsPdf::getLogVal(const RooArgSet* nset) const; 621{; 622 return getLog(getVal(nset), this);; 623}; 624 ; 625 ; 626////////////////////////////////////////////////////////////////////////////////; 627/// Check for infinity or NaN.; 628/// \param[in] inputs Array to check; 629/// \return True if either infinity ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:22579,Availability,error,error,22579,"cachedIntegral->setCacheSource(true) ;; 561 if (normInt->operMode()==ADirty) {; 562 cachedIntegral->setOperMode(ADirty) ;; 563 }; 564 normInt= cachedIntegral ;; 565 }; 566 ; 567 }; 568 _norm = normInt ;; 569 }; 570 ; 571 // Register new normalization with manager (takes ownership); 572 cache = new CacheElem(*_norm) ;; 573 _normMgr.setObj(nset,cache) ;; 574 ; 575// cout << ""making new object "" << _norm->GetName() << endl ;; 576 ; 577 return true ;; 578}; 579 ; 580 ; 581 ; 582////////////////////////////////////////////////////////////////////////////////; 583/// Reset error counter to given value, limiting the number; 584/// of future error messages for this pdf to 'resetValue'; 585 ; 586void RooAbsPdf::resetErrorCounters(Int_t resetValue); 587{; 588 _errorCount = resetValue ;; 589 _negCount = resetValue ;; 590}; 591 ; 592 ; 593 ; 594////////////////////////////////////////////////////////////////////////////////; 595/// Reset trace counter to given value, limiting the; 596/// number of future trace messages for this pdf to 'value'; 597 ; 598void RooAbsPdf::setTraceCounter(Int_t value, bool allNodes); 599{; 600 if (!allNodes) {; 601 _traceCount = value ;; 602 return ;; 603 } else {; 604 RooArgList branchList ;; 605 branchNodeServerList(&branchList) ;; 606 for(auto * pdf : dynamic_range_cast<RooAbsPdf*>(branchList)) {; 607 if (pdf) pdf->setTraceCounter(value,false) ;; 608 }; 609 }; 610 ; 611}; 612 ; 613 ; 614 ; 615 ; 616////////////////////////////////////////////////////////////////////////////////; 617/// Return the log of the current value with given normalization; 618/// An error message is printed if the argument of the log is negative.; 619 ; 620double RooAbsPdf::getLogVal(const RooArgSet* nset) const; 621{; 622 return getLog(getVal(nset), this);; 623}; 624 ; 625 ; 626////////////////////////////////////////////////////////////////////////////////; 627/// Check for infinity or NaN.; 628/// \param[in] inputs Array to check; 629/// \return True if either infinity ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:23540,Availability,error,error,23540,"cachedIntegral->setCacheSource(true) ;; 561 if (normInt->operMode()==ADirty) {; 562 cachedIntegral->setOperMode(ADirty) ;; 563 }; 564 normInt= cachedIntegral ;; 565 }; 566 ; 567 }; 568 _norm = normInt ;; 569 }; 570 ; 571 // Register new normalization with manager (takes ownership); 572 cache = new CacheElem(*_norm) ;; 573 _normMgr.setObj(nset,cache) ;; 574 ; 575// cout << ""making new object "" << _norm->GetName() << endl ;; 576 ; 577 return true ;; 578}; 579 ; 580 ; 581 ; 582////////////////////////////////////////////////////////////////////////////////; 583/// Reset error counter to given value, limiting the number; 584/// of future error messages for this pdf to 'resetValue'; 585 ; 586void RooAbsPdf::resetErrorCounters(Int_t resetValue); 587{; 588 _errorCount = resetValue ;; 589 _negCount = resetValue ;; 590}; 591 ; 592 ; 593 ; 594////////////////////////////////////////////////////////////////////////////////; 595/// Reset trace counter to given value, limiting the; 596/// number of future trace messages for this pdf to 'value'; 597 ; 598void RooAbsPdf::setTraceCounter(Int_t value, bool allNodes); 599{; 600 if (!allNodes) {; 601 _traceCount = value ;; 602 return ;; 603 } else {; 604 RooArgList branchList ;; 605 branchNodeServerList(&branchList) ;; 606 for(auto * pdf : dynamic_range_cast<RooAbsPdf*>(branchList)) {; 607 if (pdf) pdf->setTraceCounter(value,false) ;; 608 }; 609 }; 610 ; 611}; 612 ; 613 ; 614 ; 615 ; 616////////////////////////////////////////////////////////////////////////////////; 617/// Return the log of the current value with given normalization; 618/// An error message is printed if the argument of the log is negative.; 619 ; 620double RooAbsPdf::getLogVal(const RooArgSet* nset) const; 621{; 622 return getLog(getVal(nset), this);; 623}; 624 ; 625 ; 626////////////////////////////////////////////////////////////////////////////////; 627/// Check for infinity or NaN.; 628/// \param[in] inputs Array to check; 629/// \return True if either infinity ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:24062,Availability,error,error,24062,"sPdf*>(branchList)) {; 607 if (pdf) pdf->setTraceCounter(value,false) ;; 608 }; 609 }; 610 ; 611}; 612 ; 613 ; 614 ; 615 ; 616////////////////////////////////////////////////////////////////////////////////; 617/// Return the log of the current value with given normalization; 618/// An error message is printed if the argument of the log is negative.; 619 ; 620double RooAbsPdf::getLogVal(const RooArgSet* nset) const; 621{; 622 return getLog(getVal(nset), this);; 623}; 624 ; 625 ; 626////////////////////////////////////////////////////////////////////////////////; 627/// Check for infinity or NaN.; 628/// \param[in] inputs Array to check; 629/// \return True if either infinity or NaN were found.; 630namespace {; 631template<class T>; 632bool checkInfNaNNeg(const T& inputs) {; 633 // check for a math error or negative value; 634 bool inf = false;; 635 bool nan = false;; 636 bool neg = false;; 637 ; 638 for (double val : inputs) { //CHECK_VECTORISE; 639 inf |= !std::isfinite(val);; 640 nan |= TMath::IsNaN(val); // Works also during fast math; 641 neg |= val < 0;; 642 }; 643 ; 644 return inf || nan || neg;; 645}; 646}; 647 ; 648 ; 649////////////////////////////////////////////////////////////////////////////////; 650/// Scan through outputs and fix+log all nans and negative values.; 651/// \param[in,out] outputs Array to be scanned & fixed.; 652/// \param[in] begin Begin of event range. Only needed to print the correct event number; 653/// where the error occurred.; 654void RooAbsPdf::logBatchComputationErrors(std::span<const double>& outputs, std::size_t begin) const {; 655 for (unsigned int i=0; i<outputs.size(); ++i) {; 656 const double value = outputs[i];; 657 if (TMath::IsNaN(outputs[i])) {; 658 logEvalError(Form(""p.d.f value of (%s) is Not-a-Number (%f) for entry %zu"",; 659 GetName(), value, begin+i));; 660 } else if (!std::isfinite(outputs[i])){; 661 logEvalError(Form(""p.d.f value of (%s) is (%f) for entry %zu"",; 662 GetName(), value, begin+i));; 663 } else if (o",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:24723,Availability,error,error,24723,"etVal(nset), this);; 623}; 624 ; 625 ; 626////////////////////////////////////////////////////////////////////////////////; 627/// Check for infinity or NaN.; 628/// \param[in] inputs Array to check; 629/// \return True if either infinity or NaN were found.; 630namespace {; 631template<class T>; 632bool checkInfNaNNeg(const T& inputs) {; 633 // check for a math error or negative value; 634 bool inf = false;; 635 bool nan = false;; 636 bool neg = false;; 637 ; 638 for (double val : inputs) { //CHECK_VECTORISE; 639 inf |= !std::isfinite(val);; 640 nan |= TMath::IsNaN(val); // Works also during fast math; 641 neg |= val < 0;; 642 }; 643 ; 644 return inf || nan || neg;; 645}; 646}; 647 ; 648 ; 649////////////////////////////////////////////////////////////////////////////////; 650/// Scan through outputs and fix+log all nans and negative values.; 651/// \param[in,out] outputs Array to be scanned & fixed.; 652/// \param[in] begin Begin of event range. Only needed to print the correct event number; 653/// where the error occurred.; 654void RooAbsPdf::logBatchComputationErrors(std::span<const double>& outputs, std::size_t begin) const {; 655 for (unsigned int i=0; i<outputs.size(); ++i) {; 656 const double value = outputs[i];; 657 if (TMath::IsNaN(outputs[i])) {; 658 logEvalError(Form(""p.d.f value of (%s) is Not-a-Number (%f) for entry %zu"",; 659 GetName(), value, begin+i));; 660 } else if (!std::isfinite(outputs[i])){; 661 logEvalError(Form(""p.d.f value of (%s) is (%f) for entry %zu"",; 662 GetName(), value, begin+i));; 663 } else if (outputs[i] < 0.) {; 664 logEvalError(Form(""p.d.f value of (%s) is less than zero (%f) for entry %zu"",; 665 GetName(), value, begin+i));; 666 }; 667 }; 668}; 669 ; 670 ; 671void RooAbsPdf::getLogProbabilities(std::span<const double> pdfValues, double * output) const {; 672 for (std::size_t i = 0; i < pdfValues.size(); ++i) {; 673 output[i] = getLog(pdfValues[i], this);; 674 }; 675}; 676 ; 677////////////////////////////////////////////////////",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:26432,Availability,error,error,26432,"ogProbabilities(std::span<const double> pdfValues, double * output) const {; 672 for (std::size_t i = 0; i < pdfValues.size(); ++i) {; 673 output[i] = getLog(pdfValues[i], this);; 674 }; 675}; 676 ; 677////////////////////////////////////////////////////////////////////////////////; 678/// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); 679/// of this PDF for the given number of observed events.; 680///; 681/// For successful operation, the PDF implementation must indicate that; 682/// it is extendable by overloading `canBeExtended()`, and must; 683/// implement the `expectedEvents()` function.; 684///; 685/// \param[in] sumEntries The number of observed events.; 686/// \param[in] nset The normalization set when asking the pdf for the expected; 687/// number of events.; 688/// \param[in] observedSumW2 The number of observed events when weighting with; 689/// squared weights. If non-zero, the weight-squared error; 690/// correction is applied to the extended term.; 691/// \param[in] doOffset Offset the extended term by a counterterm where the; 692/// expected number of events equals the observed number of events.; 693/// This constant shift results in a term closer to zero that is; 694/// approximately chi-square distributed. It is useful to do this; 695/// also when summing multiple NLL terms to avoid numeric precision; 696/// loss that happens if you sum multiple terms of different orders; 697/// of magnitude.; 698///; 699/// The weight-squared error correction works as follows:; 700/// adjust poisson such that; 701/// estimate of \f$N_\mathrm{expect}\f$ stays at the same value, but has a different variance, rescale; 702/// both the observed and expected count of the Poisson with a factor \f$ \sum w_{i} / \sum w_{i}^2 \f$; 703/// (the effective weight of the Poisson term),; 704/// i.e., change \f$\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\f$; 705/// to \f$ \mathrm{Poiss",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:26982,Availability,error,error,26982,"[in] sumEntries The number of observed events.; 686/// \param[in] nset The normalization set when asking the pdf for the expected; 687/// number of events.; 688/// \param[in] observedSumW2 The number of observed events when weighting with; 689/// squared weights. If non-zero, the weight-squared error; 690/// correction is applied to the extended term.; 691/// \param[in] doOffset Offset the extended term by a counterterm where the; 692/// expected number of events equals the observed number of events.; 693/// This constant shift results in a term closer to zero that is; 694/// approximately chi-square distributed. It is useful to do this; 695/// also when summing multiple NLL terms to avoid numeric precision; 696/// loss that happens if you sum multiple terms of different orders; 697/// of magnitude.; 698///; 699/// The weight-squared error correction works as follows:; 700/// adjust poisson such that; 701/// estimate of \f$N_\mathrm{expect}\f$ stays at the same value, but has a different variance, rescale; 702/// both the observed and expected count of the Poisson with a factor \f$ \sum w_{i} / \sum w_{i}^2 \f$; 703/// (the effective weight of the Poisson term),; 704/// i.e., change \f$\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\f$; 705/// to \f$ \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \f$,; 706/// weighted by the effective weight \f$ \sum w_{i}^2 / \sum w_{i} \f$ in the likelihood.; 707/// Since here we compute the likelihood with the weight square, we need to multiply by the; 708/// square of the effective weight:; 709/// - \f$ W_\mathrm{expect} = N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 \f$ : effective expected entries; 710/// - \f$ W_\mathrm{observed} = \sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 \f$ : effective observed entries; 711///; 712/// The extended term for the likelihood weighted by the square of the weight will be then:; 713///; 714/// \f$ \lef",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:29899,Availability,error,errors,29899,"ents(nset), sumEntriesW2, doOffset);; 728}; 729 ; 730double RooAbsPdf::extendedTerm(double sumEntries, double expected, double sumEntriesW2, bool doOffset) const; 731{; 732 // check if this PDF supports extended maximum likelihood fits; 733 if(!canBeExtended()) {; 734 coutE(InputArguments) << GetName() << "": this PDF does not support extended maximum likelihood""; 735 << std::endl;; 736 return 0.0;; 737 }; 738 ; 739 if(expected < 0.0) {; 740 coutE(InputArguments) << GetName() << "": calculated negative expected events: "" << expected; 741 << std::endl;; 742 logEvalError(""extendedTerm #expected events is <0 return a NaN"");; 743 return TMath::QuietNaN();; 744 }; 745 ; 746 ; 747 // Explicitly handle case Nobs=Nexp=0; 748 if (std::abs(expected)<1e-10 && std::abs(sumEntries)<1e-10) {; 749 return 0.0;; 750 }; 751 ; 752 // Check for errors in Nexpected; 753 if (TMath::IsNaN(expected)) {; 754 logEvalError(""extendedTerm #expected events is a NaN"") ;; 755 return TMath::QuietNaN() ;; 756 }; 757 ; 758 double extra = doOffset; 759 ? (expected - sumEntries) - sumEntries * (std::log(expected) - std::log(sumEntries)); 760 : expected - sumEntries * std::log(expected);; 761 ; 762 if(sumEntriesW2 != 0.0) {; 763 extra *= sumEntriesW2 / sumEntries;; 764 }; 765 ; 766 return extra;; 767}; 768 ; 769////////////////////////////////////////////////////////////////////////////////; 770/// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); 771/// of this PDF for the given number of observed events.; 772///; 773/// This function is a wrapper around; 774/// RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const,; 775/// where the number of observed events and observables to be used as the; 776/// normalization set for the pdf is extracted from a RooAbsData.; 777///; 778/// For successful operation, the PDF implementation must indicate that; 779/// it is extendable by overloading `canBeExtended()`, and must; 780/// impl",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:39556,Availability,avail,available,39556,"his:; 881 * ```; 882 * myVariable.setRange(""range_pi0"", 135, 210);; 883 * myVariable.setRange(""range_gamma"", 50, 210);; 884 * ```; 885 * <tr><td> `Constrain(const RooArgSet&pars)` <td> For p.d.f.s that contain internal parameter constraint terms (that is usually product PDFs, where one; 886 * term of the product depends on parameters but not on the observable(s),), only apply constraints to the given subset of parameters.; 887 * <tr><td> `ExternalConstraints(const RooArgSet& )` <td> Include given external constraints to likelihood by multiplying them with the original likelihood.; 888 * <tr><td> `GlobalObservables(const RooArgSet&)` <td> Define the set of normalization observables to be used for the constraint terms.; 889 * If none are specified the constrained parameters are used.; 890 * <tr><td> `GlobalObservablesSource(const char* sourceName)` <td> Which source to prioritize for global observable values.; 891 * Can be either:; 892 * - `data`: to take the values from the dataset,; 893 * falling back to the pdf value if a given global observable is not available.; 894 * If no `GlobalObservables` or `GlobalObservablesTag` command argument is given, the set; 895 * of global observables will be automatically defined to be the set stored in the data.; 896 * - `model`: to take all values from the pdf and completely ignore the set of global observables stored in the data; 897 * (not even using it to automatically define the set of global observables; 898 * if the `GlobalObservables` or `GlobalObservablesTag` command arguments are not given).; 899 * The default option is `data`.; 900 * <tr><td> `GlobalObservablesTag(const char* tagName)` <td> Define the set of normalization observables to be used for the constraint terms by; 901 * a string attribute associated with pdf observables that match the given tagName.; 902 * <tr><td> `Verbose(bool flag)` <td> Controls RooFit informational messages in likelihood construction; 903 * <tr><td> `CloneData(bool flag)` <td> Use clone of",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:47295,Availability,error,errors,47295,"flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; 993 * <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 to 2, default is 1); 994 * <tr><td> `MaxCalls(int n)` <td> Change maximum number of likelihood function calls from MINUIT (if `n <= 0`, the default of 500 * #%parameters is used); 995 * <tr><td> `EvalErrorWall(bool flag=true)` <td> When parameters are in disallowed regions (e.g. PDF is negative), return very high value to fitter; 996 * to force it out of that region. This can, however, mean that the fitter gets lost in this region. If; 997 * this happens, try switching it off.; 998 * <tr><td> `RecoverFromUndefinedRegions(double strength)` <td> When PDF is invalid (e.g. parameter in undefined region), try to direct minimiser away from that region.; 999 * `strength` controls the magnitude of the penalty term. Leaving out this argument defaults to 10. Switch off with `strength = 0.`.; 1000 *; 1001 * <tr><td> `SumW2Error(bool flag)` <td> Apply correction to errors and covariance matrix.; 1002 * This uses two covariance matrices, one with the weights, the other with squared weights,; 1003 * to obtain the correct errors for weighted likelihood fits. If this option is activated, the; 1004 * corrected covariance matrix is calculated as \f$ V_\mathrm{corr} = V C^{-1} V \f$, where \f$ V \f$ is the original; 1005 * covariance matrix and \f$ C \f$ is the inverse of the covariance matrix calculated using the; 1006 * squared weights. This allows to switch between two interpretations of errors:; 1007 * <table>; 1008 * <tr><th> SumW2Error <th> Interpretation; 1009 * <tr><td> true <td> The errors reflect the uncertainty of the Monte Carlo simulation.; 1010 * Use this if you want to know how much accuracy you can get from the available Monte Carlo statistics.; 1011 *; 1012 * **Example**: Simulation with 1000 events, the average weight is 0.1.; 1013 * The errors are as big as if one fitted to 1000 events.; 1014 * <tr><td> false <t",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:47452,Availability,error,errors,47452,"Set Minuit strategy (0 to 2, default is 1); 994 * <tr><td> `MaxCalls(int n)` <td> Change maximum number of likelihood function calls from MINUIT (if `n <= 0`, the default of 500 * #%parameters is used); 995 * <tr><td> `EvalErrorWall(bool flag=true)` <td> When parameters are in disallowed regions (e.g. PDF is negative), return very high value to fitter; 996 * to force it out of that region. This can, however, mean that the fitter gets lost in this region. If; 997 * this happens, try switching it off.; 998 * <tr><td> `RecoverFromUndefinedRegions(double strength)` <td> When PDF is invalid (e.g. parameter in undefined region), try to direct minimiser away from that region.; 999 * `strength` controls the magnitude of the penalty term. Leaving out this argument defaults to 10. Switch off with `strength = 0.`.; 1000 *; 1001 * <tr><td> `SumW2Error(bool flag)` <td> Apply correction to errors and covariance matrix.; 1002 * This uses two covariance matrices, one with the weights, the other with squared weights,; 1003 * to obtain the correct errors for weighted likelihood fits. If this option is activated, the; 1004 * corrected covariance matrix is calculated as \f$ V_\mathrm{corr} = V C^{-1} V \f$, where \f$ V \f$ is the original; 1005 * covariance matrix and \f$ C \f$ is the inverse of the covariance matrix calculated using the; 1006 * squared weights. This allows to switch between two interpretations of errors:; 1007 * <table>; 1008 * <tr><th> SumW2Error <th> Interpretation; 1009 * <tr><td> true <td> The errors reflect the uncertainty of the Monte Carlo simulation.; 1010 * Use this if you want to know how much accuracy you can get from the available Monte Carlo statistics.; 1011 *; 1012 * **Example**: Simulation with 1000 events, the average weight is 0.1.; 1013 * The errors are as big as if one fitted to 1000 events.; 1014 * <tr><td> false <td> The errors reflect the errors of a dataset, which is as big as the sum of weights.; 1015 * Use this if you want to know what statis",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:47824,Availability,error,errors,47824," happens, try switching it off.; 998 * <tr><td> `RecoverFromUndefinedRegions(double strength)` <td> When PDF is invalid (e.g. parameter in undefined region), try to direct minimiser away from that region.; 999 * `strength` controls the magnitude of the penalty term. Leaving out this argument defaults to 10. Switch off with `strength = 0.`.; 1000 *; 1001 * <tr><td> `SumW2Error(bool flag)` <td> Apply correction to errors and covariance matrix.; 1002 * This uses two covariance matrices, one with the weights, the other with squared weights,; 1003 * to obtain the correct errors for weighted likelihood fits. If this option is activated, the; 1004 * corrected covariance matrix is calculated as \f$ V_\mathrm{corr} = V C^{-1} V \f$, where \f$ V \f$ is the original; 1005 * covariance matrix and \f$ C \f$ is the inverse of the covariance matrix calculated using the; 1006 * squared weights. This allows to switch between two interpretations of errors:; 1007 * <table>; 1008 * <tr><th> SumW2Error <th> Interpretation; 1009 * <tr><td> true <td> The errors reflect the uncertainty of the Monte Carlo simulation.; 1010 * Use this if you want to know how much accuracy you can get from the available Monte Carlo statistics.; 1011 *; 1012 * **Example**: Simulation with 1000 events, the average weight is 0.1.; 1013 * The errors are as big as if one fitted to 1000 events.; 1014 * <tr><td> false <td> The errors reflect the errors of a dataset, which is as big as the sum of weights.; 1015 * Use this if you want to know what statistical errors you would get if you had a dataset with as many; 1016 * events as the (weighted) Monte Carlo simulation represents.; 1017 *; 1018 * **Example** (Data as above):; 1019 * The errors are as big as if one fitted to 100 events.; 1020 * </table>; 1021 * \note If the `SumW2Error` correction is enabled, the covariance matrix quality stored in the RooFitResult; 1022 * object will be the minimum of the original covariance matrix quality and the quality of the covari",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:47927,Availability,error,errors,47927," happens, try switching it off.; 998 * <tr><td> `RecoverFromUndefinedRegions(double strength)` <td> When PDF is invalid (e.g. parameter in undefined region), try to direct minimiser away from that region.; 999 * `strength` controls the magnitude of the penalty term. Leaving out this argument defaults to 10. Switch off with `strength = 0.`.; 1000 *; 1001 * <tr><td> `SumW2Error(bool flag)` <td> Apply correction to errors and covariance matrix.; 1002 * This uses two covariance matrices, one with the weights, the other with squared weights,; 1003 * to obtain the correct errors for weighted likelihood fits. If this option is activated, the; 1004 * corrected covariance matrix is calculated as \f$ V_\mathrm{corr} = V C^{-1} V \f$, where \f$ V \f$ is the original; 1005 * covariance matrix and \f$ C \f$ is the inverse of the covariance matrix calculated using the; 1006 * squared weights. This allows to switch between two interpretations of errors:; 1007 * <table>; 1008 * <tr><th> SumW2Error <th> Interpretation; 1009 * <tr><td> true <td> The errors reflect the uncertainty of the Monte Carlo simulation.; 1010 * Use this if you want to know how much accuracy you can get from the available Monte Carlo statistics.; 1011 *; 1012 * **Example**: Simulation with 1000 events, the average weight is 0.1.; 1013 * The errors are as big as if one fitted to 1000 events.; 1014 * <tr><td> false <td> The errors reflect the errors of a dataset, which is as big as the sum of weights.; 1015 * Use this if you want to know what statistical errors you would get if you had a dataset with as many; 1016 * events as the (weighted) Monte Carlo simulation represents.; 1017 *; 1018 * **Example** (Data as above):; 1019 * The errors are as big as if one fitted to 100 events.; 1020 * </table>; 1021 * \note If the `SumW2Error` correction is enabled, the covariance matrix quality stored in the RooFitResult; 1022 * object will be the minimum of the original covariance matrix quality and the quality of the covari",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:48065,Availability,avail,available,48065," direct minimiser away from that region.; 999 * `strength` controls the magnitude of the penalty term. Leaving out this argument defaults to 10. Switch off with `strength = 0.`.; 1000 *; 1001 * <tr><td> `SumW2Error(bool flag)` <td> Apply correction to errors and covariance matrix.; 1002 * This uses two covariance matrices, one with the weights, the other with squared weights,; 1003 * to obtain the correct errors for weighted likelihood fits. If this option is activated, the; 1004 * corrected covariance matrix is calculated as \f$ V_\mathrm{corr} = V C^{-1} V \f$, where \f$ V \f$ is the original; 1005 * covariance matrix and \f$ C \f$ is the inverse of the covariance matrix calculated using the; 1006 * squared weights. This allows to switch between two interpretations of errors:; 1007 * <table>; 1008 * <tr><th> SumW2Error <th> Interpretation; 1009 * <tr><td> true <td> The errors reflect the uncertainty of the Monte Carlo simulation.; 1010 * Use this if you want to know how much accuracy you can get from the available Monte Carlo statistics.; 1011 *; 1012 * **Example**: Simulation with 1000 events, the average weight is 0.1.; 1013 * The errors are as big as if one fitted to 1000 events.; 1014 * <tr><td> false <td> The errors reflect the errors of a dataset, which is as big as the sum of weights.; 1015 * Use this if you want to know what statistical errors you would get if you had a dataset with as many; 1016 * events as the (weighted) Monte Carlo simulation represents.; 1017 *; 1018 * **Example** (Data as above):; 1019 * The errors are as big as if one fitted to 100 events.; 1020 * </table>; 1021 * \note If the `SumW2Error` correction is enabled, the covariance matrix quality stored in the RooFitResult; 1022 * object will be the minimum of the original covariance matrix quality and the quality of the covariance; 1023 * matrix calculated with the squared weights.; 1024 * <tr><td> `AsymptoticError()` <td> Use the asymptotically correct approach to estimate errors in the",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:48196,Availability,error,errors,48196,"= 0.`.; 1000 *; 1001 * <tr><td> `SumW2Error(bool flag)` <td> Apply correction to errors and covariance matrix.; 1002 * This uses two covariance matrices, one with the weights, the other with squared weights,; 1003 * to obtain the correct errors for weighted likelihood fits. If this option is activated, the; 1004 * corrected covariance matrix is calculated as \f$ V_\mathrm{corr} = V C^{-1} V \f$, where \f$ V \f$ is the original; 1005 * covariance matrix and \f$ C \f$ is the inverse of the covariance matrix calculated using the; 1006 * squared weights. This allows to switch between two interpretations of errors:; 1007 * <table>; 1008 * <tr><th> SumW2Error <th> Interpretation; 1009 * <tr><td> true <td> The errors reflect the uncertainty of the Monte Carlo simulation.; 1010 * Use this if you want to know how much accuracy you can get from the available Monte Carlo statistics.; 1011 *; 1012 * **Example**: Simulation with 1000 events, the average weight is 0.1.; 1013 * The errors are as big as if one fitted to 1000 events.; 1014 * <tr><td> false <td> The errors reflect the errors of a dataset, which is as big as the sum of weights.; 1015 * Use this if you want to know what statistical errors you would get if you had a dataset with as many; 1016 * events as the (weighted) Monte Carlo simulation represents.; 1017 *; 1018 * **Example** (Data as above):; 1019 * The errors are as big as if one fitted to 100 events.; 1020 * </table>; 1021 * \note If the `SumW2Error` correction is enabled, the covariance matrix quality stored in the RooFitResult; 1022 * object will be the minimum of the original covariance matrix quality and the quality of the covariance; 1023 * matrix calculated with the squared weights.; 1024 * <tr><td> `AsymptoticError()` <td> Use the asymptotically correct approach to estimate errors in the presence of weights.; 1025 * This is slower but more accurate than `SumW2Error`. See also https://arxiv.org/abs/1911.01303).; 1026 This option even correctly implements th",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:48279,Availability,error,errors,48279," and covariance matrix.; 1002 * This uses two covariance matrices, one with the weights, the other with squared weights,; 1003 * to obtain the correct errors for weighted likelihood fits. If this option is activated, the; 1004 * corrected covariance matrix is calculated as \f$ V_\mathrm{corr} = V C^{-1} V \f$, where \f$ V \f$ is the original; 1005 * covariance matrix and \f$ C \f$ is the inverse of the covariance matrix calculated using the; 1006 * squared weights. This allows to switch between two interpretations of errors:; 1007 * <table>; 1008 * <tr><th> SumW2Error <th> Interpretation; 1009 * <tr><td> true <td> The errors reflect the uncertainty of the Monte Carlo simulation.; 1010 * Use this if you want to know how much accuracy you can get from the available Monte Carlo statistics.; 1011 *; 1012 * **Example**: Simulation with 1000 events, the average weight is 0.1.; 1013 * The errors are as big as if one fitted to 1000 events.; 1014 * <tr><td> false <td> The errors reflect the errors of a dataset, which is as big as the sum of weights.; 1015 * Use this if you want to know what statistical errors you would get if you had a dataset with as many; 1016 * events as the (weighted) Monte Carlo simulation represents.; 1017 *; 1018 * **Example** (Data as above):; 1019 * The errors are as big as if one fitted to 100 events.; 1020 * </table>; 1021 * \note If the `SumW2Error` correction is enabled, the covariance matrix quality stored in the RooFitResult; 1022 * object will be the minimum of the original covariance matrix quality and the quality of the covariance; 1023 * matrix calculated with the squared weights.; 1024 * <tr><td> `AsymptoticError()` <td> Use the asymptotically correct approach to estimate errors in the presence of weights.; 1025 * This is slower but more accurate than `SumW2Error`. See also https://arxiv.org/abs/1911.01303).; 1026 This option even correctly implements the case of extended likelihood fits; 1027 (see this [writeup on extended weighted fits](",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:48298,Availability,error,errors,48298," and covariance matrix.; 1002 * This uses two covariance matrices, one with the weights, the other with squared weights,; 1003 * to obtain the correct errors for weighted likelihood fits. If this option is activated, the; 1004 * corrected covariance matrix is calculated as \f$ V_\mathrm{corr} = V C^{-1} V \f$, where \f$ V \f$ is the original; 1005 * covariance matrix and \f$ C \f$ is the inverse of the covariance matrix calculated using the; 1006 * squared weights. This allows to switch between two interpretations of errors:; 1007 * <table>; 1008 * <tr><th> SumW2Error <th> Interpretation; 1009 * <tr><td> true <td> The errors reflect the uncertainty of the Monte Carlo simulation.; 1010 * Use this if you want to know how much accuracy you can get from the available Monte Carlo statistics.; 1011 *; 1012 * **Example**: Simulation with 1000 events, the average weight is 0.1.; 1013 * The errors are as big as if one fitted to 1000 events.; 1014 * <tr><td> false <td> The errors reflect the errors of a dataset, which is as big as the sum of weights.; 1015 * Use this if you want to know what statistical errors you would get if you had a dataset with as many; 1016 * events as the (weighted) Monte Carlo simulation represents.; 1017 *; 1018 * **Example** (Data as above):; 1019 * The errors are as big as if one fitted to 100 events.; 1020 * </table>; 1021 * \note If the `SumW2Error` correction is enabled, the covariance matrix quality stored in the RooFitResult; 1022 * object will be the minimum of the original covariance matrix quality and the quality of the covariance; 1023 * matrix calculated with the squared weights.; 1024 * <tr><td> `AsymptoticError()` <td> Use the asymptotically correct approach to estimate errors in the presence of weights.; 1025 * This is slower but more accurate than `SumW2Error`. See also https://arxiv.org/abs/1911.01303).; 1026 This option even correctly implements the case of extended likelihood fits; 1027 (see this [writeup on extended weighted fits](",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:48412,Availability,error,errors,48412,"orrect errors for weighted likelihood fits. If this option is activated, the; 1004 * corrected covariance matrix is calculated as \f$ V_\mathrm{corr} = V C^{-1} V \f$, where \f$ V \f$ is the original; 1005 * covariance matrix and \f$ C \f$ is the inverse of the covariance matrix calculated using the; 1006 * squared weights. This allows to switch between two interpretations of errors:; 1007 * <table>; 1008 * <tr><th> SumW2Error <th> Interpretation; 1009 * <tr><td> true <td> The errors reflect the uncertainty of the Monte Carlo simulation.; 1010 * Use this if you want to know how much accuracy you can get from the available Monte Carlo statistics.; 1011 *; 1012 * **Example**: Simulation with 1000 events, the average weight is 0.1.; 1013 * The errors are as big as if one fitted to 1000 events.; 1014 * <tr><td> false <td> The errors reflect the errors of a dataset, which is as big as the sum of weights.; 1015 * Use this if you want to know what statistical errors you would get if you had a dataset with as many; 1016 * events as the (weighted) Monte Carlo simulation represents.; 1017 *; 1018 * **Example** (Data as above):; 1019 * The errors are as big as if one fitted to 100 events.; 1020 * </table>; 1021 * \note If the `SumW2Error` correction is enabled, the covariance matrix quality stored in the RooFitResult; 1022 * object will be the minimum of the original covariance matrix quality and the quality of the covariance; 1023 * matrix calculated with the squared weights.; 1024 * <tr><td> `AsymptoticError()` <td> Use the asymptotically correct approach to estimate errors in the presence of weights.; 1025 * This is slower but more accurate than `SumW2Error`. See also https://arxiv.org/abs/1911.01303).; 1026 This option even correctly implements the case of extended likelihood fits; 1027 (see this [writeup on extended weighted fits](https://root.cern/files/extended_weighted_fits.pdf) that complements the paper linked before).; 1028 * <tr><td> `PrefitDataFraction(double fract",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:48592,Availability,error,errors,48592,"m{corr} = V C^{-1} V \f$, where \f$ V \f$ is the original; 1005 * covariance matrix and \f$ C \f$ is the inverse of the covariance matrix calculated using the; 1006 * squared weights. This allows to switch between two interpretations of errors:; 1007 * <table>; 1008 * <tr><th> SumW2Error <th> Interpretation; 1009 * <tr><td> true <td> The errors reflect the uncertainty of the Monte Carlo simulation.; 1010 * Use this if you want to know how much accuracy you can get from the available Monte Carlo statistics.; 1011 *; 1012 * **Example**: Simulation with 1000 events, the average weight is 0.1.; 1013 * The errors are as big as if one fitted to 1000 events.; 1014 * <tr><td> false <td> The errors reflect the errors of a dataset, which is as big as the sum of weights.; 1015 * Use this if you want to know what statistical errors you would get if you had a dataset with as many; 1016 * events as the (weighted) Monte Carlo simulation represents.; 1017 *; 1018 * **Example** (Data as above):; 1019 * The errors are as big as if one fitted to 100 events.; 1020 * </table>; 1021 * \note If the `SumW2Error` correction is enabled, the covariance matrix quality stored in the RooFitResult; 1022 * object will be the minimum of the original covariance matrix quality and the quality of the covariance; 1023 * matrix calculated with the squared weights.; 1024 * <tr><td> `AsymptoticError()` <td> Use the asymptotically correct approach to estimate errors in the presence of weights.; 1025 * This is slower but more accurate than `SumW2Error`. See also https://arxiv.org/abs/1911.01303).; 1026 This option even correctly implements the case of extended likelihood fits; 1027 (see this [writeup on extended weighted fits](https://root.cern/files/extended_weighted_fits.pdf) that complements the paper linked before).; 1028 * <tr><td> `PrefitDataFraction(double fraction)`; 1029 * <td> Runs a prefit on a small dataset of size fraction*(actual data size). This can speed up fits; 1030 * by finding good starti",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:49030,Availability,error,errors,49030,"e this if you want to know how much accuracy you can get from the available Monte Carlo statistics.; 1011 *; 1012 * **Example**: Simulation with 1000 events, the average weight is 0.1.; 1013 * The errors are as big as if one fitted to 1000 events.; 1014 * <tr><td> false <td> The errors reflect the errors of a dataset, which is as big as the sum of weights.; 1015 * Use this if you want to know what statistical errors you would get if you had a dataset with as many; 1016 * events as the (weighted) Monte Carlo simulation represents.; 1017 *; 1018 * **Example** (Data as above):; 1019 * The errors are as big as if one fitted to 100 events.; 1020 * </table>; 1021 * \note If the `SumW2Error` correction is enabled, the covariance matrix quality stored in the RooFitResult; 1022 * object will be the minimum of the original covariance matrix quality and the quality of the covariance; 1023 * matrix calculated with the squared weights.; 1024 * <tr><td> `AsymptoticError()` <td> Use the asymptotically correct approach to estimate errors in the presence of weights.; 1025 * This is slower but more accurate than `SumW2Error`. See also https://arxiv.org/abs/1911.01303).; 1026 This option even correctly implements the case of extended likelihood fits; 1027 (see this [writeup on extended weighted fits](https://root.cern/files/extended_weighted_fits.pdf) that complements the paper linked before).; 1028 * <tr><td> `PrefitDataFraction(double fraction)`; 1029 * <td> Runs a prefit on a small dataset of size fraction*(actual data size). This can speed up fits; 1030 * by finding good starting values for the parameters for the actual fit.; 1031 * \warning Prefitting may give bad results when used in binned analysis.; 1032 *; 1033 * <tr><th><th> Options to control informational output; 1034 * <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit).; 1035 * <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, o",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:50431,Availability,error,errors,50431,"tion)`; 1029 * <td> Runs a prefit on a small dataset of size fraction*(actual data size). This can speed up fits; 1030 * by finding good starting values for the parameters for the actual fit.; 1031 * \warning Prefitting may give bad results when used in binned analysis.; 1032 *; 1033 * <tr><th><th> Options to control informational output; 1034 * <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit).; 1035 * <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default.; 1036 * <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 to 3, default is 1). At -1 all RooFit informational messages are suppressed as well.; 1037 * See RooMinimizer::PrintLevel for the meaning of the levels.; 1038 * <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); 1039 * <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per likelihood evaluation.; 1040 * A negative value suppresses output completely, a zero value will only print the error count per p.d.f component,; 1041 * a positive value will print details of each error up to `numErr` messages per p.d.f component.; 1042 * <tr><td> `Parallelize(Int_t nWorkers)` <td> Control global parallelization settings. Arguments 1 and above enable the use of RooFit's parallel minimization; 1043 * backend and uses the number given as the number of workers to use in the parallelization. -1 also enables; 1044 * RooFit's parallel minimization backend, and sets the number of workers to the number of available processes.; 1045 * 0 disables this feature.; 1046 * In case parallelization is requested, this option implies `ModularL(true)` in the internal call to the NLL creation method.; 1047 * <tr><td> `ParallelGradientOptions(bool enable=true, int orderStrategy=0, int chainFactor=1)` <td> **Experimental** - Control gradient parallelization settings. The first argument; ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:50561,Availability,error,error,50561,"ta size). This can speed up fits; 1030 * by finding good starting values for the parameters for the actual fit.; 1031 * \warning Prefitting may give bad results when used in binned analysis.; 1032 *; 1033 * <tr><th><th> Options to control informational output; 1034 * <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit).; 1035 * <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default.; 1036 * <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 to 3, default is 1). At -1 all RooFit informational messages are suppressed as well.; 1037 * See RooMinimizer::PrintLevel for the meaning of the levels.; 1038 * <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); 1039 * <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per likelihood evaluation.; 1040 * A negative value suppresses output completely, a zero value will only print the error count per p.d.f component,; 1041 * a positive value will print details of each error up to `numErr` messages per p.d.f component.; 1042 * <tr><td> `Parallelize(Int_t nWorkers)` <td> Control global parallelization settings. Arguments 1 and above enable the use of RooFit's parallel minimization; 1043 * backend and uses the number given as the number of workers to use in the parallelization. -1 also enables; 1044 * RooFit's parallel minimization backend, and sets the number of workers to the number of available processes.; 1045 * 0 disables this feature.; 1046 * In case parallelization is requested, this option implies `ModularL(true)` in the internal call to the NLL creation method.; 1047 * <tr><td> `ParallelGradientOptions(bool enable=true, int orderStrategy=0, int chainFactor=1)` <td> **Experimental** - Control gradient parallelization settings. The first argument; 1048 * only disables or enables gradient parallelization, this is on by default.;",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:50646,Availability,error,error,50646," fit.; 1031 * \warning Prefitting may give bad results when used in binned analysis.; 1032 *; 1033 * <tr><th><th> Options to control informational output; 1034 * <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit).; 1035 * <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default.; 1036 * <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 to 3, default is 1). At -1 all RooFit informational messages are suppressed as well.; 1037 * See RooMinimizer::PrintLevel for the meaning of the levels.; 1038 * <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); 1039 * <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per likelihood evaluation.; 1040 * A negative value suppresses output completely, a zero value will only print the error count per p.d.f component,; 1041 * a positive value will print details of each error up to `numErr` messages per p.d.f component.; 1042 * <tr><td> `Parallelize(Int_t nWorkers)` <td> Control global parallelization settings. Arguments 1 and above enable the use of RooFit's parallel minimization; 1043 * backend and uses the number given as the number of workers to use in the parallelization. -1 also enables; 1044 * RooFit's parallel minimization backend, and sets the number of workers to the number of available processes.; 1045 * 0 disables this feature.; 1046 * In case parallelization is requested, this option implies `ModularL(true)` in the internal call to the NLL creation method.; 1047 * <tr><td> `ParallelGradientOptions(bool enable=true, int orderStrategy=0, int chainFactor=1)` <td> **Experimental** - Control gradient parallelization settings. The first argument; 1048 * only disables or enables gradient parallelization, this is on by default.; 1049 * The second argument determines the internal partial derivative calculation; 1050 * ordering strate",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:51071,Availability,avail,available,51071,"tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 to 3, default is 1). At -1 all RooFit informational messages are suppressed as well.; 1037 * See RooMinimizer::PrintLevel for the meaning of the levels.; 1038 * <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); 1039 * <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per likelihood evaluation.; 1040 * A negative value suppresses output completely, a zero value will only print the error count per p.d.f component,; 1041 * a positive value will print details of each error up to `numErr` messages per p.d.f component.; 1042 * <tr><td> `Parallelize(Int_t nWorkers)` <td> Control global parallelization settings. Arguments 1 and above enable the use of RooFit's parallel minimization; 1043 * backend and uses the number given as the number of workers to use in the parallelization. -1 also enables; 1044 * RooFit's parallel minimization backend, and sets the number of workers to the number of available processes.; 1045 * 0 disables this feature.; 1046 * In case parallelization is requested, this option implies `ModularL(true)` in the internal call to the NLL creation method.; 1047 * <tr><td> `ParallelGradientOptions(bool enable=true, int orderStrategy=0, int chainFactor=1)` <td> **Experimental** - Control gradient parallelization settings. The first argument; 1048 * only disables or enables gradient parallelization, this is on by default.; 1049 * The second argument determines the internal partial derivative calculation; 1050 * ordering strategy. The third argument determines the number of partial; 1051 * derivatives that are executed per task package on each worker.; 1052 * <tr><td> `ParallelDescentOptions(bool enable=false, int splitStrategy=0, int numSplits=4)` <td> **Experimental** - Control settings related to the parallelization of likelihoods; 1053 * outside of the gradient calculation but in the minimization, most promin",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:57002,Availability,error,error,57002,"Attribute(binnedTag)||string(binnedTag)==""*""))) {; 1145 context = binnedGenContext(vars,verbose) ;; 1146 } else {; 1147 context= genContext(vars,nullptr,nullptr,verbose);; 1148 }; 1149 return context ;; 1150}; 1151 ; 1152 ; 1153 ; 1154////////////////////////////////////////////////////////////////////////////////; 1155/// Generate a new dataset containing the specified variables with events sampled from our distribution.; 1156/// Generate the specified number of events or expectedEvents() if not specified.; 1157/// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; 1158/// constant and not be used for event generation.; 1159/// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg() to change behaviour of generate().; 1160/// \return RooDataSet *, owned by caller.; 1161///; 1162/// Any variables of this PDF that are not in whatVars will use their; 1163/// current values and be treated as fixed parameters. Returns zero; 1164/// in case of an error.; 1165///; 1166/// <table>; 1167/// <tr><th> Type of CmdArg <th> Effect on generate; 1168/// <tr><td> `Name(const char* name)` <td> Name of the output dataset; 1169/// <tr><td> `Verbose(bool flag)` <td> Print informational messages during event generation; 1170/// <tr><td> `NumEvents(int nevt)` <td> Generate specified number of events; 1171/// <tr><td> `Extended()` <td> If no number of events to be generated is given,; 1172/// use expected number of events from extended likelihood term.; 1173/// This evidently only works for extended PDFs.; 1174/// <tr><td> `GenBinned(const char* tag)` <td> Use binned generation for all component pdfs that have 'setAttribute(tag)' set; 1175/// <tr><td> `AutoBinned(bool flag)` <td> Automatically deploy binned generation for binned distributions (e.g. RooHistPdf, sums and products of; 1176/// RooHistPdfs etc); 1177/// \note Datasets that are generated in binned mode are returned as weighted unbinned datasets. This means that; 1178///",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:68277,Availability,error,error,68277," new dataset containing the specified variables with; 1368/// events sampled from our distribution.; 1369///; 1370/// \param[in] whatVars Generate a dataset with the variables (and categories) in this set.; 1371/// Any variables of this PDF that are not in `whatVars` will use their; 1372/// current values and be treated as fixed parameters.; 1373/// \param[in] nEvents Generate the specified number of events or else try to use; 1374/// expectedEvents() if nEvents <= 0 (default).; 1375/// \param[in] verbose Show which generator strategies are being used.; 1376/// \param[in] autoBinned If original distribution is binned, return bin centers and randomise weights; 1377/// instead of generating single events.; 1378/// \param[in] binnedTag; 1379/// \param[in] expectedData Call setExpectedData on the genContext.; 1380/// \param[in] extended Randomise number of events generated according to Poisson(nEvents). Only useful; 1381/// if PDF is extended.; 1382/// \return New dataset. Returns zero in case of an error. The caller takes ownership of the returned; 1383/// dataset.; 1384 ; 1385RooFit::OwningPtr<RooDataSet> RooAbsPdf::generate(const RooArgSet &whatVars, double nEvents, bool verbose, bool autoBinned, const char* binnedTag, bool expectedData, bool extended) const; 1386{; 1387 if (nEvents==0 && extendMode()==CanNotBeExtended) {; 1388 return RooFit::makeOwningPtr(std::make_unique<RooDataSet>(""emptyData"",""emptyData"",whatVars));; 1389 }; 1390 ; 1391 // Request for binned generation; 1392 std::unique_ptr<RooAbsGenContext> context{autoGenContext(whatVars,nullptr,nullptr,verbose,autoBinned,binnedTag)};; 1393 if (expectedData) {; 1394 context->setExpectedData(true) ;; 1395 }; 1396 ; 1397 std::unique_ptr<RooDataSet> generated;; 1398 if(nullptr != context && context->isValid()) {; 1399 generated = std::unique_ptr<RooDataSet>{context->generate(nEvents, false, extended)};; 1400 }; 1401 else {; 1402 coutE(Generation) << ""RooAbsPdf::generate("" << GetName() << "") cannot create a valid c",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:72229,Availability,error,error,72229,"ype: the new dataset will contain the same number of; 1454/// events as the prototype (by default), and any prototype variables not in; 1455/// whatVars will be copied into the new dataset for each generated; 1456/// event and also used to set our PDF parameters. The user can specify a; 1457/// number of events to generate that will override the default. The result is a; 1458/// copy of the prototype dataset with only variables in whatVars; 1459/// randomized. Variables in whatVars that are not in the prototype; 1460/// will be added as new columns to the generated dataset.; 1461/// \param[in] nEvents Number of events to generate. Defaults to 0, which means number; 1462/// of event in prototype dataset.; 1463/// \param[in] verbose Show which generator strategies are being used.; 1464/// \param[in] randProtoOrder Randomise order of retrieval of events from proto dataset.; 1465/// \param[in] resampleProto Resample from the proto dataset.; 1466/// \return The new dataset. Returns zero in case of an error. The caller takes ownership of the; 1467/// returned dataset.; 1468 ; 1469RooFit::OwningPtr<RooDataSet> RooAbsPdf::generate(const RooArgSet &whatVars, const RooDataSet& prototype,; 1470 Int_t nEvents, bool verbose, bool randProtoOrder, bool resampleProto) const; 1471{; 1472 std::unique_ptr<RooAbsGenContext> context{genContext(whatVars,&prototype,nullptr,verbose)};; 1473 if (context) {; 1474 return RooFit::makeOwningPtr(generate(*context,whatVars,&prototype,nEvents,verbose,randProtoOrder,resampleProto));; 1475 }; 1476 coutE(Generation) << ""RooAbsPdf::generate("" << GetName() << "") ERROR creating generator context"" << endl ;; 1477 return nullptr;; 1478}; 1479 ; 1480 ; 1481 ; 1482////////////////////////////////////////////////////////////////////////////////; 1483/// Return lookup table with randomized order for nProto prototype events.; 1484 ; 1485Int_t* RooAbsPdf::randomizeProtoOrder(Int_t nProto, Int_t, bool resampleProto) const; 1486{; 1487 // Make output list; 1488 I",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:77506,Availability,error,error,77506,"y routes; 1563 for (const auto server : _serverList) {; 1564 if(server == &arg) continue;; 1565 if(server->dependsOn(arg)) {; 1566 return false ;; 1567 }; 1568 }; 1569 ; 1570 return true ;; 1571}; 1572 ; 1573 ; 1574////////////////////////////////////////////////////////////////////////////////; 1575/// Generate a new dataset containing the specified variables with events sampled from our distribution.; 1576/// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; 1577/// constant and not be used for event generation; 1578/// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg to change behaviour of generateBinned(); 1579/// \return RooDataHist *, to be managed by caller.; 1580///; 1581/// Generate the specified number of events or expectedEvents() if not specified.; 1582///; 1583/// Any variables of this PDF that are not in whatVars will use their; 1584/// current values and be treated as fixed parameters. Returns zero; 1585/// in case of an error. The caller takes ownership of the returned; 1586/// dataset.; 1587///; 1588/// The following named arguments are supported; 1589/// | Type of CmdArg | Effect on generation; 1590/// |---------------------------|-----------------------; 1591/// | `Name(const char* name)` | Name of the output dataset; 1592/// | `Verbose(bool flag)` | Print informational messages during event generation; 1593/// | `NumEvents(int nevt)` | Generate specified number of events; 1594/// | `Extended()` | The actual number of events generated will be sampled from a Poisson distribution with mu=nevt. This can be *much* faster for peaked PDFs, but the number of events is not exactly what was requested.; 1595/// | `ExpectedData()` | Return a binned dataset _without_ statistical fluctuations (also aliased as Asimov()); 1596///; 1597 ; 1598RooFit::OwningPtr<RooDataHist> RooAbsPdf::generateBinned(const RooArgSet& whatVars, const RooCmdArg& arg1,const RooCmdArg& arg2,; 1599 const RooCmdArg& arg3,co",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:82113,Availability,error,error,82113,"sample, i.e. no statistical fluctuations are present.; 1663/// \param[in] extended For each bin, generate Poisson(x, mu) events, where `mu` is chosen such that *on average*,; 1664/// one would obtain `nEvents` events. This means that the true number of events will fluctuate around the desired value,; 1665/// but the generation happens a lot faster.; 1666/// Especially if the PDF is sharply peaked, the multinomial event generation necessary to generate *exactly* `nEvents` events can; 1667/// be very slow.; 1668///; 1669/// The binning used for generation of events is the currently set binning for the variables.; 1670/// It can e.g. be changed using; 1671/// ```; 1672/// x.setBins(15);; 1673/// x.setRange(-5., 5.);; 1674/// pdf.generateBinned(RooArgSet(x), 1000);; 1675/// ```; 1676///; 1677/// Any variables of this PDF that are not in `whatVars` will use their; 1678/// current values and be treated as fixed parameters.; 1679/// \return RooDataHist* owned by the caller. Returns `nullptr` in case of an error.; 1680RooFit::OwningPtr<RooDataHist> RooAbsPdf::generateBinned(const RooArgSet &whatVars, double nEvents, bool expectedData, bool extended) const; 1681{; 1682 // Create empty RooDataHist; 1683 auto hist = std::make_unique<RooDataHist>(""genData"",""genData"",whatVars);; 1684 ; 1685 // Scale to number of events and introduce Poisson fluctuations; 1686 if (nEvents<=0) {; 1687 if (!canBeExtended()) {; 1688 coutE(InputArguments) << ""RooAbsPdf::generateBinned("" << GetName() << "") ERROR: No event count provided and p.d.f does not provide expected number of events"" << endl ;; 1689 return nullptr;; 1690 } else {; 1691 ; 1692 // Don't round in expectedData or extended mode; 1693 if (expectedData || extended) {; 1694 nEvents = expectedEvents(&whatVars) ;; 1695 } else {; 1696 nEvents = std::round(expectedEvents(&whatVars));; 1697 }; 1698 }; 1699 }; 1700 ; 1701 // Sample p.d.f. distribution; 1702 fillDataHist(hist.get(),&whatVars,1,true) ;; 1703 ; 1704 vector<int> histOut(hist->numE",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:93689,Availability,down,downward,93689,"onst char* rn)` <td> When projecting the PDF onto the plot axis, it is usually integrated; 1903/// over the full range of the invisible variables. The ProjectionRange overrides this.; 1904/// This is useful if the PDF was fitted in a limited range in y, but it is now projected onto x. If; 1905/// `ProjectionRange(""<name of fit range>"")` is passed, the projection is normalised correctly.; 1906///; 1907/// <tr><th> Type of argument <th> Plotting control; 1908/// <tr><td> `LineStyle(Int_t style)` <td> Select line style by ROOT line style code, default is solid; 1909/// <tr><td> `LineColor(Int_t color)` <td> Select line color by ROOT color code, default is blue; 1910/// <tr><td> `LineWidth(Int_t width)` <td> Select line with in pixels, default is 3; 1911/// <tr><td> `FillStyle(Int_t style)` <td> Select fill style, default is not filled. If a filled style is selected,; 1912/// also use VLines() to add vertical downward lines at end of curve to ensure proper closure; 1913/// <tr><td> `FillColor(Int_t color)` <td> Select fill color by ROOT color code; 1914/// <tr><td> `Range(const char* name)` <td> Only draw curve in range defined by given name. Multiple comma-separated ranges can be given.; 1915/// An empty string """" or `nullptr` means to use the default range of the variable.; 1916/// <tr><td> `Range(double lo, double hi)` <td> Only draw curve in specified range; 1917/// <tr><td> `VLines()` <td> Add vertical lines to y=0 at end points of curve; 1918/// <tr><td> `Precision(double eps)` <td> Control precision of drawn curve w.r.t to scale of plot, default is 1e-3. A higher precision will; 1919/// result in more and more densely spaced curve points. A negative precision value will disable; 1920/// adaptive point spacing and restrict sampling to the grid point of points defined by the binning; 1921/// of the plotted observable (recommended for expensive functions such as profile likelihoods); 1922/// <tr><td> `Invisible(bool flag)` <td> Add curve to frame, but do not display",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:110290,Availability,error,error,110290,"->getFitRangeBinW() ;; 2251 }; 2252 frame->updateNormVars(*frame->getPlotVar()) ;; 2253 ; 2254 return RooAbsReal::plotOn(frame,o) ;; 2255}; 2256 ; 2257 ; 2258 ; 2259 ; 2260////////////////////////////////////////////////////////////////////////////////; 2261/// The following named arguments are supported; 2262/// <table>; 2263/// <tr><th> Type of CmdArg <th> Effect on parameter box; 2264/// <tr><td> `Parameters(const RooArgSet& param)` <td> Only the specified subset of parameters will be shown. By default all non-constant parameters are shown.; 2265/// <tr><td> `ShowConstants(bool flag)` <td> Also display constant parameters; 2266/// <tr><td> `Format(const char* what,...)` <td> Parameter formatting options.; 2267/// | Parameter | Format; 2268/// | ---------------------- | --------------------------; 2269/// | `const char* what` | Controls what is shown. ""N"" adds name (alternatively, ""T"" adds the title), ""E"" adds error, ""A"" shows asymmetric error, ""U"" shows unit, ""H"" hides the value; 2270/// | `FixedPrecision(int n)`| Controls precision, set fixed number of digits; 2271/// | `AutoPrecision(int n)` | Controls precision. Number of shown digits is calculated from error + n specified additional digits (1 is sensible default); 2272/// <tr><td> `Label(const chat* label)` <td> Add label to parameter box. Use `\n` for multi-line labels.; 2273/// <tr><td> `Layout(double xmin, double xmax, double ymax)` <td> Specify relative position of left/right side of box and top of box.; 2274/// Coordinates are given as position on the pad between 0 and 1.; 2275/// The lower end of the box is calculated automatically from the number of lines in the box.; 2276/// </table>; 2277///; 2278///; 2279/// Example use:; 2280/// ```; 2281/// pdf.paramOn(frame, Label(""fit result""), Format(""NEU"",AutoPrecision(1)) ) ;; 2282/// ```; 2283///; 2284 ; 2285RooPlot* RooAbsPdf::paramOn(RooPlot* frame, const RooCmdArg& arg1, const RooCmdArg& arg2,; 2286 const RooCmdArg& arg3, const RooCmdArg& arg4, const RooC",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:110318,Availability,error,error,110318,"->getFitRangeBinW() ;; 2251 }; 2252 frame->updateNormVars(*frame->getPlotVar()) ;; 2253 ; 2254 return RooAbsReal::plotOn(frame,o) ;; 2255}; 2256 ; 2257 ; 2258 ; 2259 ; 2260////////////////////////////////////////////////////////////////////////////////; 2261/// The following named arguments are supported; 2262/// <table>; 2263/// <tr><th> Type of CmdArg <th> Effect on parameter box; 2264/// <tr><td> `Parameters(const RooArgSet& param)` <td> Only the specified subset of parameters will be shown. By default all non-constant parameters are shown.; 2265/// <tr><td> `ShowConstants(bool flag)` <td> Also display constant parameters; 2266/// <tr><td> `Format(const char* what,...)` <td> Parameter formatting options.; 2267/// | Parameter | Format; 2268/// | ---------------------- | --------------------------; 2269/// | `const char* what` | Controls what is shown. ""N"" adds name (alternatively, ""T"" adds the title), ""E"" adds error, ""A"" shows asymmetric error, ""U"" shows unit, ""H"" hides the value; 2270/// | `FixedPrecision(int n)`| Controls precision, set fixed number of digits; 2271/// | `AutoPrecision(int n)` | Controls precision. Number of shown digits is calculated from error + n specified additional digits (1 is sensible default); 2272/// <tr><td> `Label(const chat* label)` <td> Add label to parameter box. Use `\n` for multi-line labels.; 2273/// <tr><td> `Layout(double xmin, double xmax, double ymax)` <td> Specify relative position of left/right side of box and top of box.; 2274/// Coordinates are given as position on the pad between 0 and 1.; 2275/// The lower end of the box is calculated automatically from the number of lines in the box.; 2276/// </table>; 2277///; 2278///; 2279/// Example use:; 2280/// ```; 2281/// pdf.paramOn(frame, Label(""fit result""), Format(""NEU"",AutoPrecision(1)) ) ;; 2282/// ```; 2283///; 2284 ; 2285RooPlot* RooAbsPdf::paramOn(RooPlot* frame, const RooCmdArg& arg1, const RooCmdArg& arg2,; 2286 const RooCmdArg& arg3, const RooCmdArg& arg4, const RooC",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:110542,Availability,error,error,110542,"//////////////////////////; 2261/// The following named arguments are supported; 2262/// <table>; 2263/// <tr><th> Type of CmdArg <th> Effect on parameter box; 2264/// <tr><td> `Parameters(const RooArgSet& param)` <td> Only the specified subset of parameters will be shown. By default all non-constant parameters are shown.; 2265/// <tr><td> `ShowConstants(bool flag)` <td> Also display constant parameters; 2266/// <tr><td> `Format(const char* what,...)` <td> Parameter formatting options.; 2267/// | Parameter | Format; 2268/// | ---------------------- | --------------------------; 2269/// | `const char* what` | Controls what is shown. ""N"" adds name (alternatively, ""T"" adds the title), ""E"" adds error, ""A"" shows asymmetric error, ""U"" shows unit, ""H"" hides the value; 2270/// | `FixedPrecision(int n)`| Controls precision, set fixed number of digits; 2271/// | `AutoPrecision(int n)` | Controls precision. Number of shown digits is calculated from error + n specified additional digits (1 is sensible default); 2272/// <tr><td> `Label(const chat* label)` <td> Add label to parameter box. Use `\n` for multi-line labels.; 2273/// <tr><td> `Layout(double xmin, double xmax, double ymax)` <td> Specify relative position of left/right side of box and top of box.; 2274/// Coordinates are given as position on the pad between 0 and 1.; 2275/// The lower end of the box is calculated automatically from the number of lines in the box.; 2276/// </table>; 2277///; 2278///; 2279/// Example use:; 2280/// ```; 2281/// pdf.paramOn(frame, Label(""fit result""), Format(""NEU"",AutoPrecision(1)) ) ;; 2282/// ```; 2283///; 2284 ; 2285RooPlot* RooAbsPdf::paramOn(RooPlot* frame, const RooCmdArg& arg1, const RooCmdArg& arg2,; 2286 const RooCmdArg& arg3, const RooCmdArg& arg4, const RooCmdArg& arg5,; 2287 const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdArg& arg8); 2288{; 2289 // Stuff all arguments in a list; 2290 RooLinkedList cmdList;; 2291 cmdList.Add(const_cast<RooCmdArg*>(&arg1)) ; cmdList.Add(",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:113387,Availability,error,errors,113387,"Layout"",0,Int_t(0.9*10000)) ;; 2302 pc.defineInt(""showc"",""ShowConstants"",0,0) ;; 2303 pc.defineSet(""params"",""Parameters"",0,nullptr) ;; 2304 pc.defineInt(""dummy"",""FormatArgs"",0,0) ;; 2305 ; 2306 // Process and check varargs; 2307 pc.process(cmdList) ;; 2308 if (!pc.ok(true)) {; 2309 return frame ;; 2310 }; 2311 ; 2312 auto formatCmd = static_cast<RooCmdArg const*>(cmdList.FindObject(""FormatArgs"")) ;; 2313 ; 2314 const char* label = pc.getString(""label"") ;; 2315 double xmin = pc.getDouble(""xmin"") ;; 2316 double xmax = pc.getDouble(""xmax"") ;; 2317 double ymax = pc.getInt(""ymaxi"") / 10000. ;; 2318 int showc = pc.getInt(""showc"") ;; 2319 ; 2320 // Decode command line arguments; 2321 std::unique_ptr<RooArgSet> params{getParameters(frame->getNormVars())} ;; 2322 if(RooArgSet* requestedParams = pc.getSet(""params"")) {; 2323 params = std::unique_ptr<RooArgSet>{params->selectCommon(*requestedParams)};; 2324 }; 2325 paramOn(frame,*params,showc,label,xmin,xmax,ymax,formatCmd);; 2326 ; 2327 return frame ;; 2328}; 2329 ; 2330 ; 2331////////////////////////////////////////////////////////////////////////////////; 2332/// Add a text box with the current parameter values and their errors to the frame.; 2333/// Observables of this PDF appearing in the 'data' dataset will be omitted.; 2334///; 2335/// An optional label will be inserted if passed. Multi-line labels can be generated; 2336/// by adding `\n` to the label string. Use 'sigDigits'; 2337/// to modify the default number of significant digits printed. The 'xmin,xmax,ymax'; 2338/// values specify the initial relative position of the text box in the plot frame.; 2339 ; 2340RooPlot* RooAbsPdf::paramOn(RooPlot* frame, const RooArgSet& params, bool showConstants, const char *label,; 2341 double xmin, double xmax ,double ymax, const RooCmdArg* formatCmd); 2342{; 2343 ; 2344 // parse the options; 2345 bool showLabel= (label != nullptr && strlen(label) > 0);; 2346 ; 2347 // calculate the box's size, adjusting for constant parameters; 2348",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:144858,Availability,error,error,144858,"alVdouble getValV(const RooArgSet *set=nullptr) const overrideReturn current value, normalized by integrating over the observables in nset.Definition RooAbsPdf.cxx:319; RooAbsPdf::fitToImplvirtual std::unique_ptr< RooFitResult > fitToImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the likelihood fitting routine.Definition RooAbsPdf.cxx:1072; RooAbsPdf::generateEventvirtual void generateEvent(Int_t code)Interface for generation of an event using the algorithm corresponding to the specified code.Definition RooAbsPdf.cxx:1544; RooAbsPdf::createScanCdfRooFit::OwningPtr< RooAbsReal > createScanCdf(const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder)Definition RooAbsPdf.cxx:2545; RooAbsPdf::setGeneratorConfigvoid setGeneratorConfig()Remove the specialized numeric MC generator configuration associated with this object.Definition RooAbsPdf.cxx:2675; RooAbsPdf::resetErrorCountersvirtual void resetErrorCounters(Int_t resetValue=10)Reset error counter to given value, limiting the number of future error messages for this pdf to 'res...Definition RooAbsPdf.cxx:586; RooAbsPdf::verboseEvalstatic int verboseEval()Return global level of verbosity for p.d.f. evaluations.Definition RooAbsPdf.cxx:2418; RooAbsPdf::createCdfRooFit::OwningPtr< RooAbsReal > createCdf(const RooArgSet &iset, const RooArgSet &nset=RooArgSet())Create a cumulative distribution function of this p.d.f in terms of the observables listed in iset.Definition RooAbsPdf.cxx:2468; RooAbsPdf::isActiveNormSetbool isActiveNormSet(RooArgSet const *normSet) constChecks if normSet is the currently active normalization set of this PDF, meaning is exactly the same ...Definition RooAbsPdf.h:299; RooAbsPdf::expectedEventsvirtual double expectedEvents(const RooArgSet *nset) constReturn expected number of events to be used in calculation of extended likelihood.Definition RooAbsPdf.cxx:2398; RooAbsPdf::binnedGenContextvirtual RooAbsGenContext * binnedGenContext(const RooArgS",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:144918,Availability,error,error,144918,"alVdouble getValV(const RooArgSet *set=nullptr) const overrideReturn current value, normalized by integrating over the observables in nset.Definition RooAbsPdf.cxx:319; RooAbsPdf::fitToImplvirtual std::unique_ptr< RooFitResult > fitToImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the likelihood fitting routine.Definition RooAbsPdf.cxx:1072; RooAbsPdf::generateEventvirtual void generateEvent(Int_t code)Interface for generation of an event using the algorithm corresponding to the specified code.Definition RooAbsPdf.cxx:1544; RooAbsPdf::createScanCdfRooFit::OwningPtr< RooAbsReal > createScanCdf(const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder)Definition RooAbsPdf.cxx:2545; RooAbsPdf::setGeneratorConfigvoid setGeneratorConfig()Remove the specialized numeric MC generator configuration associated with this object.Definition RooAbsPdf.cxx:2675; RooAbsPdf::resetErrorCountersvirtual void resetErrorCounters(Int_t resetValue=10)Reset error counter to given value, limiting the number of future error messages for this pdf to 'res...Definition RooAbsPdf.cxx:586; RooAbsPdf::verboseEvalstatic int verboseEval()Return global level of verbosity for p.d.f. evaluations.Definition RooAbsPdf.cxx:2418; RooAbsPdf::createCdfRooFit::OwningPtr< RooAbsReal > createCdf(const RooArgSet &iset, const RooArgSet &nset=RooArgSet())Create a cumulative distribution function of this p.d.f in terms of the observables listed in iset.Definition RooAbsPdf.cxx:2468; RooAbsPdf::isActiveNormSetbool isActiveNormSet(RooArgSet const *normSet) constChecks if normSet is the currently active normalization set of this PDF, meaning is exactly the same ...Definition RooAbsPdf.h:299; RooAbsPdf::expectedEventsvirtual double expectedEvents(const RooArgSet *nset) constReturn expected number of events to be used in calculation of extended likelihood.Definition RooAbsPdf.cxx:2398; RooAbsPdf::binnedGenContextvirtual RooAbsGenContext * binnedGenContext(const RooArgS",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:148684,Availability,error,errors,148684,"rridePrint multi line detailed information of this RooAbsPdf.Definition RooAbsPdf.cxx:1100; RooAbsPdf::_traceCountInt_t _traceCountNumber of traces remaining to print.Definition RooAbsPdf.h:335; RooAbsPdf::canBeExtendedbool canBeExtended() constIf true, PDF can provide extended likelihood term.Definition RooAbsPdf.h:218; RooAbsPdf::_normRooAbsReal * _normDefinition RooAbsPdf.h:319; RooAbsPdf::setTraceCountervoid setTraceCounter(Int_t value, bool allNodes=false)Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'val...Definition RooAbsPdf.cxx:598; RooAbsPdf::prepareMultiGenGenSpec * prepareMultiGen(const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={})Prepare GenSpec configuration object for efficient generation of multiple datasets from identical spe...Definition RooAbsPdf.cxx:1299; RooAbsPdf::_errorCountInt_t _errorCountNumber of errors remaining to print.Definition RooAbsPdf.h:334; RooAbsPdf::CanNotBeExtended@ CanNotBeExtendedDefinition RooAbsPdf.h:212; RooAbsPdf::createExpectedEventsFuncvirtual std::unique_ptr< RooAbsReal > createExpectedEventsFunc(const RooArgSet *nset) constReturns an object that represents the expected number of events for a given normalization set,...Definition RooAbsPdf.cxx:2812; RooAbsPdf::paramOnvirtual RooPlot * paramOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={})Add a box with parameter values (and errors) to the specified frame.Definition RooAbsPdf.cxx:2285; RooAbsPdf::_negCountInt_t _negCountNumber of negative probabilities remaining to print.Definition RooAbsPdf.h:336; RooAbsPdf::generateRooFit::OwningPtr< RooDataSet > generate(const RooArgSet &whatVars, Int_t nEvents, const RooCmdArg &arg",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:149369,Availability,error,errors,149369,"o 'val...Definition RooAbsPdf.cxx:598; RooAbsPdf::prepareMultiGenGenSpec * prepareMultiGen(const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={})Prepare GenSpec configuration object for efficient generation of multiple datasets from identical spe...Definition RooAbsPdf.cxx:1299; RooAbsPdf::_errorCountInt_t _errorCountNumber of errors remaining to print.Definition RooAbsPdf.h:334; RooAbsPdf::CanNotBeExtended@ CanNotBeExtendedDefinition RooAbsPdf.h:212; RooAbsPdf::createExpectedEventsFuncvirtual std::unique_ptr< RooAbsReal > createExpectedEventsFunc(const RooArgSet *nset) constReturns an object that represents the expected number of events for a given normalization set,...Definition RooAbsPdf.cxx:2812; RooAbsPdf::paramOnvirtual RooPlot * paramOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={})Add a box with parameter values (and errors) to the specified frame.Definition RooAbsPdf.cxx:2285; RooAbsPdf::_negCountInt_t _negCountNumber of negative probabilities remaining to print.Definition RooAbsPdf.h:336; RooAbsPdf::generateRooFit::OwningPtr< RooDataSet > generate(const RooArgSet &whatVars, Int_t nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={})See RooAbsPdf::generate(const RooArgSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,...Definition RooAbsPdf.h:57; RooAbsPdf::getNormObjvirtual const RooAbsReal * getNormObj(const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) constReturn pointer to RooAbsReal object that implements calculation of integral over observables iset in ...Definition RooAbsPdf.cxx:443; RooAbsPdf::setActiveNormSetvoid setActiveNormSet(RooArgS",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:155129,Availability,error,error,155129,"oid getLogProbabilities(std::span< const double > pdfValues, double *output) constDefinition RooAbsPdf.cxx:671; RooAbsPdf::_normRangeOverridestatic TString _normRangeOverrideDefinition RooAbsPdf.h:343; RooAbsPdf::_verboseEvalstatic Int_t _verboseEvalDefinition RooAbsPdf.h:314; RooAbsPdf::extendedTermdouble extendedTerm(double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) constDefinition RooAbsPdf.cxx:730; RooAbsPdf::getGeneratorvirtual Int_t getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) constLoad generatedVars with the subset of directVars that we can generate events for, and return a code t...Definition RooAbsPdf.cxx:1522; RooAbsPdf::createProjectionvirtual RooAbsPdf * createProjection(const RooArgSet &iset)Return a p.d.f that represent a projection of this p.d.f integrated over given observables.Definition RooAbsPdf.cxx:2446; RooAbsPdf::getLogValvirtual double getLogVal(const RooArgSet *set=nullptr) constReturn the log of the current value with given normalization An error message is printed if the argum...Definition RooAbsPdf.cxx:620; RooAbsRealLValue::hasRangebool hasRange(const char *name) const overrideCheck if variable has a binning with given name.Definition RooAbsRealLValue.h:97; RooAbsRealLValue::getRangestd::pair< double, double > getRange(const char *name=nullptr) constGet low and high bound of the variable.Definition RooAbsRealLValue.h:88; RooAbsRealAbstract base class for objects that represent a real value and implements functionality common to al...Definition RooAbsReal.h:59; RooAbsReal::fillDataHistRooDataHist * fillDataHist(RooDataHist *hist, const RooArgSet *nset, double scaleFactor, bool correctForBinVolume=false, bool showProgress=false) constFill a RooDataHist with values sampled from this function at the bin centers.Definition RooAbsReal.cxx:1124; RooAbsReal::plotOnCompSelectvoid plotOnCompSelect(RooArgSet *selNodes) constHelper function for plotting of composite p.d.fs.",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:158498,Availability,error,error,158498,"ServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) overrideFunction that is called at the end of redirectServers().Definition RooAbsReal.cxx:4474; RooAbsReal::_valuedouble _valueCache for current value of object.Definition RooAbsReal.h:536; RooAbsReal::analyticalIntegralvirtual double analyticalIntegral(Int_t code, const char *rangeName=nullptr) constImplements the actual analytical integral(s) advertised by getAnalyticalIntegral.Definition RooAbsReal.cxx:394; RooAbsReal::integralNameSuffixTString integralNameSuffix(const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) constConstruct string with unique suffix name to give to integral object that encodes integrated observabl...Definition RooAbsReal.cxx:755; RooAbsReal::evaluatevirtual double evaluate() const =0Evaluate this PDF / function / constant. Needs to be overridden by all derived classes.; RooAbsReal::logEvalErrorvoid logEvalError(const char *message, const char *serverValueString=nullptr) constLog evaluation error message.Definition RooAbsReal.cxx:3464; RooAbsReal::getIntegratorConfigconst RooNumIntConfig * getIntegratorConfig() constReturn the numeric integration configuration used for this object.Definition RooAbsReal.cxx:3309; RooAbsReal::isBinnedDistributionvirtual bool isBinnedDistribution(const RooArgSet &) constTests if the distribution is binned. Unless overridden by derived classes, this always returns false.Definition RooAbsReal.h:346; RooAbsReal::createIntRIRooFit::OwningPtr< RooAbsReal > createIntRI(const RooArgSet &iset, const RooArgSet &nset={})Utility function for createRunningIntegral.Definition RooAbsReal.cxx:3827; RooAbsReal::plotOnvirtual RooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:163966,Availability,error,error,163966,", int setNum, const TObject *obj=nullptr, bool isArray=false)Define TObject property name 'name' mapped to object in slot 'setNum' in RooCmdArg with name argName ...Definition RooCmdConfig.cxx:214; RooCmdConfig::getStringconst char * getString(const char *name, const char *defaultValue="""", bool convEmptyToNull=false) constReturn string property registered with name 'name'.Definition RooCmdConfig.cxx:506; RooCmdConfig::defineStringbool defineString(const char *name, const char *argName, int stringNum, const char *defValue="""", bool appendMode=false)Define double property name 'name' mapped to double in slot 'stringNum' in RooCmdArg with name argNam...Definition RooCmdConfig.cxx:189; RooCmdConfig::defineIntbool defineInt(const char *name, const char *argName, int intNum, int defValue=0)Define integer property name 'name' mapped to integer in slot 'intNum' in RooCmdArg with name argName...Definition RooCmdConfig.cxx:143; RooCmdConfig::allowUndefinedvoid allowUndefined(bool flag=true)If flag is true the processing of unrecognized RooCmdArgs is not considered an error.Definition RooCmdConfig.h:44; RooCmdConfig::getIntint getInt(const char *name, int defaultValue=0) constReturn integer property registered with name 'name'.Definition RooCmdConfig.cxx:481; RooCmdConfig::getObjectTObject * getObject(const char *name, TObject *obj=nullptr) constReturn TObject property registered with name 'name'.Definition RooCmdConfig.cxx:519; RooDataSetContainer class to hold unbinned data.Definition RooDataSet.h:33; RooFit::Detail::CompileContextDefinition NormalizationHelpers.h:29; RooFit::Detail::CompileContext::markAsCompiledvoid markAsCompiled(RooAbsArg &arg) constDefinition NormalizationHelpers.cxx:74; RooFit::Detail::CompileContext::compileServersvoid compileServers(RooAbsArg &arg, RooArgSet const &normSet)Definition NormalizationHelpers.cxx:39; RooGenContextImplements a universal generator context for all RooAbsPdf classes that do not have or need a special...Definition RooGenContext.",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:165003,Availability,alive,alive,165003," considered an error.Definition RooCmdConfig.h:44; RooCmdConfig::getIntint getInt(const char *name, int defaultValue=0) constReturn integer property registered with name 'name'.Definition RooCmdConfig.cxx:481; RooCmdConfig::getObjectTObject * getObject(const char *name, TObject *obj=nullptr) constReturn TObject property registered with name 'name'.Definition RooCmdConfig.cxx:519; RooDataSetContainer class to hold unbinned data.Definition RooDataSet.h:33; RooFit::Detail::CompileContextDefinition NormalizationHelpers.h:29; RooFit::Detail::CompileContext::markAsCompiledvoid markAsCompiled(RooAbsArg &arg) constDefinition NormalizationHelpers.cxx:74; RooFit::Detail::CompileContext::compileServersvoid compileServers(RooAbsArg &arg, RooArgSet const &normSet)Definition NormalizationHelpers.cxx:39; RooGenContextImplements a universal generator context for all RooAbsPdf classes that do not have or need a special...Definition RooGenContext.h:29; RooHelpers::LocalChangeMsgLevelSwitches the message service to a different level while the instance is alive.Definition RooHelpers.h:37; RooLinkedListCollection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list...Definition RooLinkedList.h:44; RooLinkedList::Addvirtual void Add(TObject *arg)Definition RooLinkedList.h:73; RooLinkedList::FindObjectTObject * FindObject(const char *name) const overrideReturn pointer to object with given name.Definition RooLinkedList.cxx:534; RooNameReg::strstatic const char * str(const TNamed *ptr)Return C++ string corresponding to given TNamed pointer.Definition RooNameReg.h:39; RooNumGenConfigHolds the configuration parameters of the various numeric integrators used by RooRealIntegral.Definition RooNumGenConfig.h:25; RooNumGenConfig::defaultConfigstatic RooNumGenConfig & defaultConfig()Return reference to instance of default numeric integrator configuration object.Definition RooNumGenConfig.cxx:44; RooObjCacheManagerImplementation of a RooCacheManager<RooAbsCacheEl",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:2470,Deployability,integrat,integration,2470,"al implementation of a PDF class derived from RooAbsPdf; 32should override the `evaluate()` function. This function should; 33return the PDF's value (which does not need to be normalised).; 34 ; 35 ; 36#### Normalization/Integration; 37 ; 38Although the normalization of a PDF is an integral part of a; 39probability density function, normalization is treated separately; 40in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; 41PDF: it can be a building block for a more complex composite PDF; 42if any of its variables are functions instead of variables. In; 43such cases, the normalization of the composite PDF may not simply be; 44integral over the dependents of the top-level PDF: these are; 45functions with potentially non-trivial Jacobian terms themselves.; 46\note Therefore, no explicit attempt should be made to normalize the; 47function output in evaluate(). In particular, normalisation constants; 48can be omitted to speed up the function evaluations, and included later; 49in the integration of the PDF (see below), which is rarely called in; 50comparison to the `evaluate()` function.; 51 ; 52In addition, RooAbsPdf objects do not have a static concept of what; 53variables are parameters, and what variables are dependents (which; 54need to be integrated over for a correct PDF normalization).; 55Instead, the choice of normalization is always specified each time a; 56normalized value is requested from the PDF via the getVal(); 57method.; 58 ; 59RooAbsPdf manages the entire normalization logic of each PDF with; 60the help of a RooRealIntegral object, which coordinates the integration; 61of a given choice of normalization. By default, RooRealIntegral will; 62perform an entirely numeric integration of all dependents. However,; 63PDFs can advertise one or more (partial) analytical integrals of; 64their function, and these will be used by RooRealIntegral, if it; 65determines that this is safe (i.e., no hidden Jacobian terms,; 66multiplication with other PDFs t",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:2736,Deployability,integrat,integrated,2736,"/Integration; 37 ; 38Although the normalization of a PDF is an integral part of a; 39probability density function, normalization is treated separately; 40in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; 41PDF: it can be a building block for a more complex composite PDF; 42if any of its variables are functions instead of variables. In; 43such cases, the normalization of the composite PDF may not simply be; 44integral over the dependents of the top-level PDF: these are; 45functions with potentially non-trivial Jacobian terms themselves.; 46\note Therefore, no explicit attempt should be made to normalize the; 47function output in evaluate(). In particular, normalisation constants; 48can be omitted to speed up the function evaluations, and included later; 49in the integration of the PDF (see below), which is rarely called in; 50comparison to the `evaluate()` function.; 51 ; 52In addition, RooAbsPdf objects do not have a static concept of what; 53variables are parameters, and what variables are dependents (which; 54need to be integrated over for a correct PDF normalization).; 55Instead, the choice of normalization is always specified each time a; 56normalized value is requested from the PDF via the getVal(); 57method.; 58 ; 59RooAbsPdf manages the entire normalization logic of each PDF with; 60the help of a RooRealIntegral object, which coordinates the integration; 61of a given choice of normalization. By default, RooRealIntegral will; 62perform an entirely numeric integration of all dependents. However,; 63PDFs can advertise one or more (partial) analytical integrals of; 64their function, and these will be used by RooRealIntegral, if it; 65determines that this is safe (i.e., no hidden Jacobian terms,; 66multiplication with other PDFs that have one or more dependents in; 67common, etc).; 68 ; 69#### Implementing analytical integrals; 70To implement analytical integrals, two functions must be implemented. First,; 71 ; 72```; 73Int_t getAnalyticalIntegra",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:3069,Deployability,integrat,integration,3069,"ables. In; 43such cases, the normalization of the composite PDF may not simply be; 44integral over the dependents of the top-level PDF: these are; 45functions with potentially non-trivial Jacobian terms themselves.; 46\note Therefore, no explicit attempt should be made to normalize the; 47function output in evaluate(). In particular, normalisation constants; 48can be omitted to speed up the function evaluations, and included later; 49in the integration of the PDF (see below), which is rarely called in; 50comparison to the `evaluate()` function.; 51 ; 52In addition, RooAbsPdf objects do not have a static concept of what; 53variables are parameters, and what variables are dependents (which; 54need to be integrated over for a correct PDF normalization).; 55Instead, the choice of normalization is always specified each time a; 56normalized value is requested from the PDF via the getVal(); 57method.; 58 ; 59RooAbsPdf manages the entire normalization logic of each PDF with; 60the help of a RooRealIntegral object, which coordinates the integration; 61of a given choice of normalization. By default, RooRealIntegral will; 62perform an entirely numeric integration of all dependents. However,; 63PDFs can advertise one or more (partial) analytical integrals of; 64their function, and these will be used by RooRealIntegral, if it; 65determines that this is safe (i.e., no hidden Jacobian terms,; 66multiplication with other PDFs that have one or more dependents in; 67common, etc).; 68 ; 69#### Implementing analytical integrals; 70To implement analytical integrals, two functions must be implemented. First,; 71 ; 72```; 73Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); 74```; 75should return the analytical integrals that are supported. `integSet`; 76is the set of dependents for which integration is requested. The; 77function should copy the subset of dependents it can analytically; 78integrate to `anaIntSet`, and return a unique identification code for; 79t",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:3184,Deployability,integrat,integration,3184," are; 45functions with potentially non-trivial Jacobian terms themselves.; 46\note Therefore, no explicit attempt should be made to normalize the; 47function output in evaluate(). In particular, normalisation constants; 48can be omitted to speed up the function evaluations, and included later; 49in the integration of the PDF (see below), which is rarely called in; 50comparison to the `evaluate()` function.; 51 ; 52In addition, RooAbsPdf objects do not have a static concept of what; 53variables are parameters, and what variables are dependents (which; 54need to be integrated over for a correct PDF normalization).; 55Instead, the choice of normalization is always specified each time a; 56normalized value is requested from the PDF via the getVal(); 57method.; 58 ; 59RooAbsPdf manages the entire normalization logic of each PDF with; 60the help of a RooRealIntegral object, which coordinates the integration; 61of a given choice of normalization. By default, RooRealIntegral will; 62perform an entirely numeric integration of all dependents. However,; 63PDFs can advertise one or more (partial) analytical integrals of; 64their function, and these will be used by RooRealIntegral, if it; 65determines that this is safe (i.e., no hidden Jacobian terms,; 66multiplication with other PDFs that have one or more dependents in; 67common, etc).; 68 ; 69#### Implementing analytical integrals; 70To implement analytical integrals, two functions must be implemented. First,; 71 ; 72```; 73Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); 74```; 75should return the analytical integrals that are supported. `integSet`; 76is the set of dependents for which integration is requested. The; 77function should copy the subset of dependents it can analytically; 78integrate to `anaIntSet`, and return a unique identification code for; 79this integration configuration. If no integration can be; 80performed, zero should be returned. Second,; 81 ; 82```; 83double analyticalIntegra",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:3849,Deployability,integrat,integration,3849,"specified each time a; 56normalized value is requested from the PDF via the getVal(); 57method.; 58 ; 59RooAbsPdf manages the entire normalization logic of each PDF with; 60the help of a RooRealIntegral object, which coordinates the integration; 61of a given choice of normalization. By default, RooRealIntegral will; 62perform an entirely numeric integration of all dependents. However,; 63PDFs can advertise one or more (partial) analytical integrals of; 64their function, and these will be used by RooRealIntegral, if it; 65determines that this is safe (i.e., no hidden Jacobian terms,; 66multiplication with other PDFs that have one or more dependents in; 67common, etc).; 68 ; 69#### Implementing analytical integrals; 70To implement analytical integrals, two functions must be implemented. First,; 71 ; 72```; 73Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); 74```; 75should return the analytical integrals that are supported. `integSet`; 76is the set of dependents for which integration is requested. The; 77function should copy the subset of dependents it can analytically; 78integrate to `anaIntSet`, and return a unique identification code for; 79this integration configuration. If no integration can be; 80performed, zero should be returned. Second,; 81 ; 82```; 83double analyticalIntegral(Int_t code); 84```; 85 ; 86implements the actual analytical integral(s) advertised by; 87`getAnalyticalIntegral()`. This function will only be called with; 88codes returned by `getAnalyticalIntegral()`, except code zero.; 89 ; 90The integration range for each dependent to be integrated can; 91be obtained from the dependent's proxy functions `min()` and; 92`max()`. Never call these proxy functions for any proxy not known to; 93be a dependent via the integration code. Doing so may be; 94ill-defined, e.g., in case the proxy holds a function, and will; 95trigger an assert. Integrated category dependents should always be; 96summed over all of their states.; 97 ; 98",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:4029,Deployability,integrat,integration,4029,"tire normalization logic of each PDF with; 60the help of a RooRealIntegral object, which coordinates the integration; 61of a given choice of normalization. By default, RooRealIntegral will; 62perform an entirely numeric integration of all dependents. However,; 63PDFs can advertise one or more (partial) analytical integrals of; 64their function, and these will be used by RooRealIntegral, if it; 65determines that this is safe (i.e., no hidden Jacobian terms,; 66multiplication with other PDFs that have one or more dependents in; 67common, etc).; 68 ; 69#### Implementing analytical integrals; 70To implement analytical integrals, two functions must be implemented. First,; 71 ; 72```; 73Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); 74```; 75should return the analytical integrals that are supported. `integSet`; 76is the set of dependents for which integration is requested. The; 77function should copy the subset of dependents it can analytically; 78integrate to `anaIntSet`, and return a unique identification code for; 79this integration configuration. If no integration can be; 80performed, zero should be returned. Second,; 81 ; 82```; 83double analyticalIntegral(Int_t code); 84```; 85 ; 86implements the actual analytical integral(s) advertised by; 87`getAnalyticalIntegral()`. This function will only be called with; 88codes returned by `getAnalyticalIntegral()`, except code zero.; 89 ; 90The integration range for each dependent to be integrated can; 91be obtained from the dependent's proxy functions `min()` and; 92`max()`. Never call these proxy functions for any proxy not known to; 93be a dependent via the integration code. Doing so may be; 94ill-defined, e.g., in case the proxy holds a function, and will; 95trigger an assert. Integrated category dependents should always be; 96summed over all of their states.; 97 ; 98 ; 99 ; 100### Direct generation of observables; 101 ; 102Distributions for any PDF can be generated with the accept/reject meth",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:4041,Deployability,configurat,configuration,4041,"tire normalization logic of each PDF with; 60the help of a RooRealIntegral object, which coordinates the integration; 61of a given choice of normalization. By default, RooRealIntegral will; 62perform an entirely numeric integration of all dependents. However,; 63PDFs can advertise one or more (partial) analytical integrals of; 64their function, and these will be used by RooRealIntegral, if it; 65determines that this is safe (i.e., no hidden Jacobian terms,; 66multiplication with other PDFs that have one or more dependents in; 67common, etc).; 68 ; 69#### Implementing analytical integrals; 70To implement analytical integrals, two functions must be implemented. First,; 71 ; 72```; 73Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); 74```; 75should return the analytical integrals that are supported. `integSet`; 76is the set of dependents for which integration is requested. The; 77function should copy the subset of dependents it can analytically; 78integrate to `anaIntSet`, and return a unique identification code for; 79this integration configuration. If no integration can be; 80performed, zero should be returned. Second,; 81 ; 82```; 83double analyticalIntegral(Int_t code); 84```; 85 ; 86implements the actual analytical integral(s) advertised by; 87`getAnalyticalIntegral()`. This function will only be called with; 88codes returned by `getAnalyticalIntegral()`, except code zero.; 89 ; 90The integration range for each dependent to be integrated can; 91be obtained from the dependent's proxy functions `min()` and; 92`max()`. Never call these proxy functions for any proxy not known to; 93be a dependent via the integration code. Doing so may be; 94ill-defined, e.g., in case the proxy holds a function, and will; 95trigger an assert. Integrated category dependents should always be; 96summed over all of their states.; 97 ; 98 ; 99 ; 100### Direct generation of observables; 101 ; 102Distributions for any PDF can be generated with the accept/reject meth",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:4062,Deployability,integrat,integration,4062,"a given choice of normalization. By default, RooRealIntegral will; 62perform an entirely numeric integration of all dependents. However,; 63PDFs can advertise one or more (partial) analytical integrals of; 64their function, and these will be used by RooRealIntegral, if it; 65determines that this is safe (i.e., no hidden Jacobian terms,; 66multiplication with other PDFs that have one or more dependents in; 67common, etc).; 68 ; 69#### Implementing analytical integrals; 70To implement analytical integrals, two functions must be implemented. First,; 71 ; 72```; 73Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); 74```; 75should return the analytical integrals that are supported. `integSet`; 76is the set of dependents for which integration is requested. The; 77function should copy the subset of dependents it can analytically; 78integrate to `anaIntSet`, and return a unique identification code for; 79this integration configuration. If no integration can be; 80performed, zero should be returned. Second,; 81 ; 82```; 83double analyticalIntegral(Int_t code); 84```; 85 ; 86implements the actual analytical integral(s) advertised by; 87`getAnalyticalIntegral()`. This function will only be called with; 88codes returned by `getAnalyticalIntegral()`, except code zero.; 89 ; 90The integration range for each dependent to be integrated can; 91be obtained from the dependent's proxy functions `min()` and; 92`max()`. Never call these proxy functions for any proxy not known to; 93be a dependent via the integration code. Doing so may be; 94ill-defined, e.g., in case the proxy holds a function, and will; 95trigger an assert. Integrated category dependents should always be; 96summed over all of their states.; 97 ; 98 ; 99 ; 100### Direct generation of observables; 101 ; 102Distributions for any PDF can be generated with the accept/reject method,; 103but for certain PDFs, more efficient methods may be implemented. To; 104implement direct generation of one or more",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:4402,Deployability,integrat,integration,4402,"t have one or more dependents in; 67common, etc).; 68 ; 69#### Implementing analytical integrals; 70To implement analytical integrals, two functions must be implemented. First,; 71 ; 72```; 73Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); 74```; 75should return the analytical integrals that are supported. `integSet`; 76is the set of dependents for which integration is requested. The; 77function should copy the subset of dependents it can analytically; 78integrate to `anaIntSet`, and return a unique identification code for; 79this integration configuration. If no integration can be; 80performed, zero should be returned. Second,; 81 ; 82```; 83double analyticalIntegral(Int_t code); 84```; 85 ; 86implements the actual analytical integral(s) advertised by; 87`getAnalyticalIntegral()`. This function will only be called with; 88codes returned by `getAnalyticalIntegral()`, except code zero.; 89 ; 90The integration range for each dependent to be integrated can; 91be obtained from the dependent's proxy functions `min()` and; 92`max()`. Never call these proxy functions for any proxy not known to; 93be a dependent via the integration code. Doing so may be; 94ill-defined, e.g., in case the proxy holds a function, and will; 95trigger an assert. Integrated category dependents should always be; 96summed over all of their states.; 97 ; 98 ; 99 ; 100### Direct generation of observables; 101 ; 102Distributions for any PDF can be generated with the accept/reject method,; 103but for certain PDFs, more efficient methods may be implemented. To; 104implement direct generation of one or more observables, two; 105functions need to be implemented, similar to those for analytical; 106integrals:; 107 ; 108```; 109Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); 110```; 111and; 112```; 113void generateEvent(Int_t code); 114```; 115 ; 116The first function advertises observables, for which distributions can be generated,; 117similar to the ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:4445,Deployability,integrat,integrated,4445,"t have one or more dependents in; 67common, etc).; 68 ; 69#### Implementing analytical integrals; 70To implement analytical integrals, two functions must be implemented. First,; 71 ; 72```; 73Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); 74```; 75should return the analytical integrals that are supported. `integSet`; 76is the set of dependents for which integration is requested. The; 77function should copy the subset of dependents it can analytically; 78integrate to `anaIntSet`, and return a unique identification code for; 79this integration configuration. If no integration can be; 80performed, zero should be returned. Second,; 81 ; 82```; 83double analyticalIntegral(Int_t code); 84```; 85 ; 86implements the actual analytical integral(s) advertised by; 87`getAnalyticalIntegral()`. This function will only be called with; 88codes returned by `getAnalyticalIntegral()`, except code zero.; 89 ; 90The integration range for each dependent to be integrated can; 91be obtained from the dependent's proxy functions `min()` and; 92`max()`. Never call these proxy functions for any proxy not known to; 93be a dependent via the integration code. Doing so may be; 94ill-defined, e.g., in case the proxy holds a function, and will; 95trigger an assert. Integrated category dependents should always be; 96summed over all of their states.; 97 ; 98 ; 99 ; 100### Direct generation of observables; 101 ; 102Distributions for any PDF can be generated with the accept/reject method,; 103but for certain PDFs, more efficient methods may be implemented. To; 104implement direct generation of one or more observables, two; 105functions need to be implemented, similar to those for analytical; 106integrals:; 107 ; 108```; 109Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); 110```; 111and; 112```; 113void generateEvent(Int_t code); 114```; 115 ; 116The first function advertises observables, for which distributions can be generated,; 117similar to the ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:4622,Deployability,integrat,integration,4622,"ntegrals, two functions must be implemented. First,; 71 ; 72```; 73Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); 74```; 75should return the analytical integrals that are supported. `integSet`; 76is the set of dependents for which integration is requested. The; 77function should copy the subset of dependents it can analytically; 78integrate to `anaIntSet`, and return a unique identification code for; 79this integration configuration. If no integration can be; 80performed, zero should be returned. Second,; 81 ; 82```; 83double analyticalIntegral(Int_t code); 84```; 85 ; 86implements the actual analytical integral(s) advertised by; 87`getAnalyticalIntegral()`. This function will only be called with; 88codes returned by `getAnalyticalIntegral()`, except code zero.; 89 ; 90The integration range for each dependent to be integrated can; 91be obtained from the dependent's proxy functions `min()` and; 92`max()`. Never call these proxy functions for any proxy not known to; 93be a dependent via the integration code. Doing so may be; 94ill-defined, e.g., in case the proxy holds a function, and will; 95trigger an assert. Integrated category dependents should always be; 96summed over all of their states.; 97 ; 98 ; 99 ; 100### Direct generation of observables; 101 ; 102Distributions for any PDF can be generated with the accept/reject method,; 103but for certain PDFs, more efficient methods may be implemented. To; 104implement direct generation of one or more observables, two; 105functions need to be implemented, similar to those for analytical; 106integrals:; 107 ; 108```; 109Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); 110```; 111and; 112```; 113void generateEvent(Int_t code); 114```; 115 ; 116The first function advertises observables, for which distributions can be generated,; 117similar to the way analytical integrals are advertised. The second; 118function implements the actual generator for the advertised observabl",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:11653,Deployability,integrat,integrating,11653,"king(double rawVal, double normVal) const {; 283 ; 284 if (normVal < 0. || (normVal == 0. && rawVal != 0)) {; 285 //Unreasonable normalisations. A zero integral can be tolerated if the function vanishes, though.; 286 const std::string msg = ""p.d.f normalization integral is zero or negative: "" + std::to_string(normVal);; 287 logEvalError(msg.c_str());; 288 clearValueAndShapeDirty();; 289 return RooNaNPacker::packFloatIntoNaN(-normVal + (rawVal < 0. ? -rawVal : 0.));; 290 }; 291 ; 292 if (rawVal < 0.) {; 293 logEvalError(Form(""p.d.f value is less than zero (%f), trying to recover"", rawVal));; 294 clearValueAndShapeDirty();; 295 return RooNaNPacker::packFloatIntoNaN(-rawVal);; 296 }; 297 ; 298 if (TMath::IsNaN(rawVal)) {; 299 logEvalError(""p.d.f value is Not-a-Number"");; 300 clearValueAndShapeDirty();; 301 return rawVal;; 302 }; 303 ; 304 return (rawVal == 0. && normVal == 0.) ? 0. : rawVal / normVal;; 305}; 306 ; 307 ; 308////////////////////////////////////////////////////////////////////////////////; 309/// Return current value, normalized by integrating over; 310/// the observables in `nset`. If `nset` is 0, the unnormalized value; 311/// is returned. All elements of `nset` must be lvalues.; 312///; 313/// Unnormalized values are not cached.; 314/// Doing so would be complicated as `_norm->getVal()` could; 315/// spoil the cache and interfere with returning the cached; 316/// return value. Since unnormalized calls are typically; 317/// done in integration calls, there is no performance hit.; 318 ; 319double RooAbsPdf::getValV(const RooArgSet* nset) const; 320{; 321 ; 322 // Special handling of case without normalization set (used in numeric integration of pdfs); 323 if (!nset) {; 324 RooArgSet const* tmp = _normSet ;; 325 _normSet = nullptr ;; 326 double val = evaluate() ;; 327 _normSet = tmp ;; 328 ; 329 return TMath::IsNaN(val) ? 0. : val;; 330 }; 331 ; 332 ; 333 // Process change in last data set used; 334 bool nintChanged(false) ;; 335 if (!isActiveNormSet(nset)",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:12063,Deployability,integrat,integration,12063,"0.));; 290 }; 291 ; 292 if (rawVal < 0.) {; 293 logEvalError(Form(""p.d.f value is less than zero (%f), trying to recover"", rawVal));; 294 clearValueAndShapeDirty();; 295 return RooNaNPacker::packFloatIntoNaN(-rawVal);; 296 }; 297 ; 298 if (TMath::IsNaN(rawVal)) {; 299 logEvalError(""p.d.f value is Not-a-Number"");; 300 clearValueAndShapeDirty();; 301 return rawVal;; 302 }; 303 ; 304 return (rawVal == 0. && normVal == 0.) ? 0. : rawVal / normVal;; 305}; 306 ; 307 ; 308////////////////////////////////////////////////////////////////////////////////; 309/// Return current value, normalized by integrating over; 310/// the observables in `nset`. If `nset` is 0, the unnormalized value; 311/// is returned. All elements of `nset` must be lvalues.; 312///; 313/// Unnormalized values are not cached.; 314/// Doing so would be complicated as `_norm->getVal()` could; 315/// spoil the cache and interfere with returning the cached; 316/// return value. Since unnormalized calls are typically; 317/// done in integration calls, there is no performance hit.; 318 ; 319double RooAbsPdf::getValV(const RooArgSet* nset) const; 320{; 321 ; 322 // Special handling of case without normalization set (used in numeric integration of pdfs); 323 if (!nset) {; 324 RooArgSet const* tmp = _normSet ;; 325 _normSet = nullptr ;; 326 double val = evaluate() ;; 327 _normSet = tmp ;; 328 ; 329 return TMath::IsNaN(val) ? 0. : val;; 330 }; 331 ; 332 ; 333 // Process change in last data set used; 334 bool nintChanged(false) ;; 335 if (!isActiveNormSet(nset) || _norm==nullptr) {; 336 nintChanged = syncNormalization(nset) ;; 337 }; 338 ; 339 // Return value of object. Calculated if dirty, otherwise cached value is returned.; 340 if (isValueDirty() || nintChanged || _norm->isValueDirty()) {; 341 ; 342 // Evaluate numerator; 343 const double rawVal = evaluate();; 344 ; 345 // Evaluate denominator; 346 const double normVal = _norm->getVal();; 347 ; 348 _value = normalizeWithNaNPacking(rawVal, normVal);; 349 ; 350 cle",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:12264,Deployability,integrat,integration,12264,"97 ; 298 if (TMath::IsNaN(rawVal)) {; 299 logEvalError(""p.d.f value is Not-a-Number"");; 300 clearValueAndShapeDirty();; 301 return rawVal;; 302 }; 303 ; 304 return (rawVal == 0. && normVal == 0.) ? 0. : rawVal / normVal;; 305}; 306 ; 307 ; 308////////////////////////////////////////////////////////////////////////////////; 309/// Return current value, normalized by integrating over; 310/// the observables in `nset`. If `nset` is 0, the unnormalized value; 311/// is returned. All elements of `nset` must be lvalues.; 312///; 313/// Unnormalized values are not cached.; 314/// Doing so would be complicated as `_norm->getVal()` could; 315/// spoil the cache and interfere with returning the cached; 316/// return value. Since unnormalized calls are typically; 317/// done in integration calls, there is no performance hit.; 318 ; 319double RooAbsPdf::getValV(const RooArgSet* nset) const; 320{; 321 ; 322 // Special handling of case without normalization set (used in numeric integration of pdfs); 323 if (!nset) {; 324 RooArgSet const* tmp = _normSet ;; 325 _normSet = nullptr ;; 326 double val = evaluate() ;; 327 _normSet = tmp ;; 328 ; 329 return TMath::IsNaN(val) ? 0. : val;; 330 }; 331 ; 332 ; 333 // Process change in last data set used; 334 bool nintChanged(false) ;; 335 if (!isActiveNormSet(nset) || _norm==nullptr) {; 336 nintChanged = syncNormalization(nset) ;; 337 }; 338 ; 339 // Return value of object. Calculated if dirty, otherwise cached value is returned.; 340 if (isValueDirty() || nintChanged || _norm->isValueDirty()) {; 341 ; 342 // Evaluate numerator; 343 const double rawVal = evaluate();; 344 ; 345 // Evaluate denominator; 346 const double normVal = _norm->getVal();; 347 ; 348 _value = normalizeWithNaNPacking(rawVal, normVal);; 349 ; 350 clearValueAndShapeDirty();; 351 }; 352 ; 353 return _value ;; 354}; 355 ; 356 ; 357////////////////////////////////////////////////////////////////////////////////; 358/// Analytical integral with normalization (see RooAbsReal::an",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:17390,Deployability,release,release,17390," calculation of integral over observables iset in range; 441/// rangeName, optionally taking the integrand normalized over observables nset; 442 ; 443const RooAbsReal* RooAbsPdf::getNormObj(const RooArgSet* nset, const RooArgSet* iset, const TNamed* rangeName) const; 444{; 445 // Check normalization is already stored; 446 CacheElem* cache = static_cast<CacheElem*>(_normMgr.getObj(nset,iset,nullptr,rangeName)) ;; 447 if (cache) {; 448 return cache->_norm.get();; 449 }; 450 ; 451 // If not create it now; 452 RooArgSet depList;; 453 getObservables(iset, depList);; 454 ; 455 // Normalization is always over all pdf components. Overriding the global; 456 // component selection temporarily makes all RooRealIntegrals created during; 457 // that time always include all components.; 458 GlobalSelectComponentRAII globalSelComp(true);; 459 RooAbsReal* norm = std::unique_ptr<RooAbsReal>{createIntegral(depList,*nset, *getIntegratorConfig(), RooNameReg::str(rangeName))}.release();; 460 ; 461 // Store it in the cache; 462 _normMgr.setObj(nset,iset,new CacheElem(*norm),rangeName) ;; 463 ; 464 // And return the newly created integral; 465 return norm ;; 466}; 467 ; 468 ; 469 ; 470////////////////////////////////////////////////////////////////////////////////; 471/// Verify that the normalization integral cached with this PDF; 472/// is valid for given set of normalization observables.; 473///; 474/// If not, the cached normalization integral (if any) is deleted; 475/// and a new integral is constructed for use with 'nset'.; 476/// Elements in 'nset' can be discrete and real, but must be lvalues.; 477///; 478/// For functions that declare to be self-normalized by overloading the; 479/// selfNormalized() function, a unit normalization is always constructed.; 480 ; 481bool RooAbsPdf::syncNormalization(const RooArgSet* nset, bool adjustProxies) const; 482{; 483 setActiveNormSet(nset);; 484 ; 485 // Check if data sets are identical; 486 CacheElem* cache = static_cast<CacheElem*>(_normMgr.",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:20837,Deployability,release,release,20837,";; 529 _norm = new RooRealVar(nname.c_str(),ntitle.c_str(),1) ;; 530 } else {; 531 const char* nr = (_normRangeOverride.Length()>0 ? _normRangeOverride.Data() : (_normRange.Length()>0 ? _normRange.Data() : nullptr)) ;; 532 ; 533// cout << ""RooAbsPdf::syncNormalization("" << GetName() << "") rangeName for normalization is "" << (nr?nr:""<null>"") << endl ;; 534 RooAbsReal* normInt;; 535 {; 536 // Normalization is always over all pdf components. Overriding the global; 537 // component selection temporarily makes all RooRealIntegrals created during; 538 // that time always include all components.; 539 GlobalSelectComponentRAII selCompRAII(true);; 540 normInt = std::unique_ptr<RooAbsReal>{createIntegral(depList,*getIntegratorConfig(),nr)}.release();; 541 }; 542 static_cast<RooRealIntegral*>(normInt)->setAllowComponentSelection(false);; 543 normInt->getVal() ;; 544// cout << ""resulting normInt = "" << normInt->GetName() << endl ;; 545 ; 546 const char* cacheParamsStr = getStringAttribute(""CACHEPARAMINT"") ;; 547 if (cacheParamsStr && strlen(cacheParamsStr)) {; 548 ; 549 std::unique_ptr<RooArgSet> intParams{normInt->getVariables()} ;; 550 ; 551 RooArgSet cacheParams = RooHelpers::selectFromArgSet(*intParams, cacheParamsStr);; 552 ; 553 if (!cacheParams.empty()) {; 554 cxcoutD(Caching) << ""RooAbsReal::createIntObj("" << GetName() << "") INFO: constructing "" << cacheParams.size(); 555 << ""-dim value cache for integral over "" << depList << "" as a function of "" << cacheParams << "" in range "" << (nr?nr:""<default>"") << endl ;; 556 string name = Form(""%s_CACHE_[%s]"",normInt->GetName(),cacheParams.contentsString().c_str()) ;; 557 RooCachedReal* cachedIntegral = new RooCachedReal(name.c_str(),name.c_str(),*normInt,cacheParams) ;; 558 cachedIntegral->setInterpolationOrder(2) ;; 559 cachedIntegral->addOwnedComponents(*normInt) ;; 560 cachedIntegral->setCacheSource(true) ;; 561 if (normInt->operMode()==ADirty) {; 562 cachedIntegral->setOperMode(ADirty) ;; 563 }; 564 normInt= cachedIntegral ;;",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:36406,Deployability,release,releases,36406,"ponents, except those with less than; 851 * 30 dataset entries, for which strategy 2 is followed.; 852 * </table>; 853 * <tr><td> `EvalBackend(std::string const&)` <td> Choose a likelihood evaluation backend:; 854 * <table>; 855 * <tr><th> Backend <th> Description; 856 * <tr><td> **cpu** - *default* <td> New vectorized evaluation mode, using faster math functions and auto-vectorisation.; 857 * Since ROOT 6.23, this is the default if `EvalBackend()` is not passed, succeeding the **legacy** backend.; 858 * If all RooAbsArg objects in the model support vectorized evaluation,; 859 * likelihood computations are 2 to 10 times faster than with the **legacy** backend; 860 * - unless your dataset is so small that the vectorization is not worth it.; 861 * The relative difference of the single log-likelihoods with respect to the legacy mode is usually better than \f$10^{-12}\f$,; 862 * and for fit parameters it's usually better than \f$10^{-6}\f$. In past ROOT releases, this backend could be activated with the now deprecated `BatchMode()` option.; 863 * <tr><td> **cuda** <td> Evaluate the likelihood on a GPU that supports CUDA.; 864 * This backend re-uses code from the **cpu** backend, but compiled in CUDA kernels.; 865 * Hence, the results are expected to be identical, modulo some numerical differences that can arise from the different order in which the GPU is summing the log probabilities.; 866 * This backend can drastically speed up the fit if all RooAbsArg object in the model support it.; 867 * <tr><td> **legacy** <td> The original likelihood evaluation method.; 868 * Evaluates the PDF for each single data entry at a time before summing the negative log probabilities.; 869 * <tr><td> **codegen** <td> **Experimental** - Generates and compiles minimal C++ code for the NLL on-the-fly and wraps it in the returned RooAbsReal.; 870 * Also generates and compiles the code for the gradient using Automatic Differentiation (AD) with [Clad](https://github.com/vgvassilev/clad).; 871 * ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:41620,Deployability,integrat,integrate,41620,"n method if the data is cloned or not.; 905 * <tr><td> `Offset(std::string const& mode)` <td> Likelihood offsetting mode. Can be either:; 906 * <table>; 907 * <tr><th> Mode <th> Description; 908 * <tr><td> **none** - *default* <td> No offsetting.; 909 * <tr><td> **initial** <td> Offset likelihood by initial value (so that starting value of FCN in minuit is zero).; 910 * This can improve numeric stability in simultaneous fits with components with large likelihood values.; 911 * <tr><td> **bin** <td> Offset likelihood bin-by-bin with a template histogram model based on the obersved data.; 912 * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; 913 * which can drastically improve numeric stability.; 914 * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; 915 * </table>; 916 * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; 917 * This can reduce the bias observed when fitting functions with high curvature to binned data.; 918 * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; 919 * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; 920 * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; 921 * has to be manipulated directly.; 922 * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; 923 * - precision < 0: Deactivate.; 924 * \see RooBinSamplingPdf; 925 * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; 926 * This does not change any user-facing code, but only enables a diff",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:41849,Deployability,integrat,integration,41849,"fault* <td> No offsetting.; 909 * <tr><td> **initial** <td> Offset likelihood by initial value (so that starting value of FCN in minuit is zero).; 910 * This can improve numeric stability in simultaneous fits with components with large likelihood values.; 911 * <tr><td> **bin** <td> Offset likelihood bin-by-bin with a template histogram model based on the obersved data.; 912 * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; 913 * which can drastically improve numeric stability.; 914 * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; 915 * </table>; 916 * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; 917 * This can reduce the bias observed when fitting functions with high curvature to binned data.; 918 * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; 919 * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; 920 * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; 921 * has to be manipulated directly.; 922 * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; 923 * - precision < 0: Deactivate.; 924 * \see RooBinSamplingPdf; 925 * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; 926 * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this; 927 * should be set to true for parallel minimization of likelihoods!; 928 * Note that it is currently not recommended to use Modular likelihoods without any parall",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:42029,Deployability,integrat,integrator,42029,"multaneous fits with components with large likelihood values.; 911 * <tr><td> **bin** <td> Offset likelihood bin-by-bin with a template histogram model based on the obersved data.; 912 * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; 913 * which can drastically improve numeric stability.; 914 * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; 915 * </table>; 916 * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; 917 * This can reduce the bias observed when fitting functions with high curvature to binned data.; 918 * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; 919 * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; 920 * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; 921 * has to be manipulated directly.; 922 * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; 923 * - precision < 0: Deactivate.; 924 * \see RooBinSamplingPdf; 925 * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; 926 * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this; 927 * should be set to true for parallel minimization of likelihoods!; 928 * Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, since; 929 * some features such as offsetting might not yet work in this case.; 930 * </table>; 931 */; 932 ; 933 ; 934/** @brief Protected implementatio",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:42086,Deployability,integrat,integration,42086,"ikelihood values.; 911 * <tr><td> **bin** <td> Offset likelihood bin-by-bin with a template histogram model based on the obersved data.; 912 * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; 913 * which can drastically improve numeric stability.; 914 * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; 915 * </table>; 916 * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; 917 * This can reduce the bias observed when fitting functions with high curvature to binned data.; 918 * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; 919 * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; 920 * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; 921 * has to be manipulated directly.; 922 * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; 923 * - precision < 0: Deactivate.; 924 * \see RooBinSamplingPdf; 925 * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; 926 * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this; 927 * should be set to true for parallel minimization of likelihoods!; 928 * Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, since; 929 * some features such as offsetting might not yet work in this case.; 930 * </table>; 931 */; 932 ; 933 ; 934/** @brief Protected implementation of the NLL creation routine.; 935 *; 936 * ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:42204,Deployability,integrat,integrator,42204,"m model based on the obersved data.; 912 * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; 913 * which can drastically improve numeric stability.; 914 * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; 915 * </table>; 916 * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; 917 * This can reduce the bias observed when fitting functions with high curvature to binned data.; 918 * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; 919 * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; 920 * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; 921 * has to be manipulated directly.; 922 * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; 923 * - precision < 0: Deactivate.; 924 * \see RooBinSamplingPdf; 925 * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; 926 * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this; 927 * should be set to true for parallel minimization of likelihoods!; 928 * Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, since; 929 * some features such as offsetting might not yet work in this case.; 930 * </table>; 931 */; 932 ; 933 ; 934/** @brief Protected implementation of the NLL creation routine.; 935 *; 936 * This virtual function can be overridden in case you want to change the NLL creation logic for custo",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:42291,Deployability,integrat,integration,42291,"h reduces precision loss in the sum,; 913 * which can drastically improve numeric stability.; 914 * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; 915 * </table>; 916 * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; 917 * This can reduce the bias observed when fitting functions with high curvature to binned data.; 918 * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; 919 * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; 920 * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; 921 * has to be manipulated directly.; 922 * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; 923 * - precision < 0: Deactivate.; 924 * \see RooBinSamplingPdf; 925 * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; 926 * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this; 927 * should be set to true for parallel minimization of likelihoods!; 928 * Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, since; 929 * some features such as offsetting might not yet work in this case.; 930 * </table>; 931 */; 932 ; 933 ; 934/** @brief Protected implementation of the NLL creation routine.; 935 *; 936 * This virtual function can be overridden in case you want to change the NLL creation logic for custom PDFs.; 937 *; 938 * \note Never call this function directly. Instead, call RooAbsPdf::createNLL().; 939 */; 940 ; 941std:",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:42312,Deployability,continuous,continuous,42312,"h reduces precision loss in the sum,; 913 * which can drastically improve numeric stability.; 914 * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; 915 * </table>; 916 * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; 917 * This can reduce the bias observed when fitting functions with high curvature to binned data.; 918 * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; 919 * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; 920 * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; 921 * has to be manipulated directly.; 922 * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; 923 * - precision < 0: Deactivate.; 924 * \see RooBinSamplingPdf; 925 * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; 926 * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this; 927 * should be set to true for parallel minimization of likelihoods!; 928 * Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, since; 929 * some features such as offsetting might not yet work in this case.; 930 * </table>; 931 */; 932 ; 933 ; 934/** @brief Protected implementation of the NLL creation routine.; 935 *; 936 * This virtual function can be overridden in case you want to change the NLL creation logic for custom PDFs.; 937 *; 938 * \note Never call this function directly. Instead, call RooAbsPdf::createNLL().; 939 */; 940 ; 941std:",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:42540,Deployability,release,release,42540,"mately chi-square distributed, allowing for goodness-of-fit tests.; 915 * </table>; 916 * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; 917 * This can reduce the bias observed when fitting functions with high curvature to binned data.; 918 * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; 919 * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; 920 * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; 921 * has to be manipulated directly.; 922 * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; 923 * - precision < 0: Deactivate.; 924 * \see RooBinSamplingPdf; 925 * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; 926 * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this; 927 * should be set to true for parallel minimization of likelihoods!; 928 * Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, since; 929 * some features such as offsetting might not yet work in this case.; 930 * </table>; 931 */; 932 ; 933 ; 934/** @brief Protected implementation of the NLL creation routine.; 935 *; 936 * This virtual function can be overridden in case you want to change the NLL creation logic for custom PDFs.; 937 *; 938 * \note Never call this function directly. Instead, call RooAbsPdf::createNLL().; 939 */; 940 ; 941std::unique_ptr<RooAbsReal> RooAbsPdf::createNLLImpl(RooAbsData &data, const RooLinkedList &cmdList); 942{; 943 return RooFit::FitHelpers::createNLL(*this, data, cmdList)",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:57746,Deployability,deploy,deploy,57746," \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg() to change behaviour of generate().; 1160/// \return RooDataSet *, owned by caller.; 1161///; 1162/// Any variables of this PDF that are not in whatVars will use their; 1163/// current values and be treated as fixed parameters. Returns zero; 1164/// in case of an error.; 1165///; 1166/// <table>; 1167/// <tr><th> Type of CmdArg <th> Effect on generate; 1168/// <tr><td> `Name(const char* name)` <td> Name of the output dataset; 1169/// <tr><td> `Verbose(bool flag)` <td> Print informational messages during event generation; 1170/// <tr><td> `NumEvents(int nevt)` <td> Generate specified number of events; 1171/// <tr><td> `Extended()` <td> If no number of events to be generated is given,; 1172/// use expected number of events from extended likelihood term.; 1173/// This evidently only works for extended PDFs.; 1174/// <tr><td> `GenBinned(const char* tag)` <td> Use binned generation for all component pdfs that have 'setAttribute(tag)' set; 1175/// <tr><td> `AutoBinned(bool flag)` <td> Automatically deploy binned generation for binned distributions (e.g. RooHistPdf, sums and products of; 1176/// RooHistPdfs etc); 1177/// \note Datasets that are generated in binned mode are returned as weighted unbinned datasets. This means that; 1178/// for each bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content.; 1179///; 1180///; 1181/// <tr><td> `AllBinned()` <td> As above, but for all components.; 1182/// \note The notion of components is only meaningful for simultaneous PDFs; 1183/// as binned generation is always executed at the top-level node for a regular; 1184/// PDF, so for those it only mattes that the top-level node is tagged.; 1185///; 1186/// <tr><td> ProtoData(const RooDataSet& data, bool randOrder); 1187/// <td> Use specified dataset as prototype dataset. If randOrder in ProtoData() is set to true,; 1188/// the order of the events in the dataset will b",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:87878,Deployability,integrat,integrated,87878,">first;; 1815 const double endR = innerIt->second;; 1816 ; 1817 if (startL <= startR && startR <= endL) {; 1818 //Overlapping ranges, extend left one; 1819 endL = std::max(endL, endR);; 1820 *innerIt = make_pair(0., 0.);; 1821 }; 1822 }; 1823 }; 1824 ; 1825 auto newEnd = std::remove_if(ranges.begin(), ranges.end(),; 1826 [](const std::pair<double,double>& input){; 1827 return input.first == input.second;; 1828 });; 1829 ranges.erase(newEnd, ranges.end());; 1830}; 1831}; 1832 ; 1833 ; 1834////////////////////////////////////////////////////////////////////////////////; 1835/// Plot (project) PDF on specified frame.; 1836/// - If a PDF is plotted in an empty frame, it; 1837/// will show a unit-normalized curve in the frame variable. When projecting a multi-; 1838/// dimensional PDF onto the frame axis, hidden parameters are taken are taken at; 1839/// their current value.; 1840/// - If a PDF is plotted in a frame in which a dataset has already been plotted, it will; 1841/// show a projection integrated over all variables that were present in the shown; 1842/// dataset (except for the one on the x-axis). The normalization of the curve will; 1843/// be adjusted to the event count of the plotted dataset. An informational message; 1844/// will be printed for each projection step that is performed.; 1845/// - If a PDF is plotted in a frame showing a dataset *after* a fit, the above happens,; 1846/// but the PDF will be drawn and normalised only in the fit range. If this is not desired,; 1847/// plotting and normalisation range can be overridden using Range() and NormRange() as; 1848/// documented in the table below.; 1849///; 1850/// This function takes the following named arguments (for more arguments, see also; 1851/// RooAbsReal::plotOn(RooPlot*,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,; 1852/// const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,; 1853/// const RooCmdArg&) const ); 1854///; 1855///; 1856/// <t",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:91267,Deployability,integrat,integrating,91267,".; 1875/// <tr><td> `ShiftToZero(bool flag)` <td> Shift entire curve such that lowest visible point is at exactly zero.; 1876/// Mostly useful when plotting -log(L) or \f$ \chi^2 \f$ distributions; 1877/// <tr><td> `AddTo(const char* name, double_t wgtSelf, double_t wgtOther)` <td> Create a projection of this PDF onto the x-axis, but; 1878/// instead of plotting it directly, add it to an existing curve with given name (and relative weight factors).; 1879/// <tr><td> `Components(const char* names)` <td> When plotting sums of PDFs, plot only the named components (*e.g.* only; 1880/// the signal of a signal+background model).; 1881/// <tr><td> `Components(const RooArgSet& compSet)` <td> As above, but pass a RooArgSet of the components themselves.; 1882///; 1883/// <tr><th> Type of argument <th> Projection control; 1884/// <tr><td> `Slice(const RooArgSet& set)` <td> Override default projection behaviour by omitting observables listed; 1885/// in set from the projection, i.e. by not integrating over these.; 1886/// Slicing is usually only sensible in discrete observables, by e.g. creating a slice; 1887/// of the PDF at the current value of the category observable.; 1888/// <tr><td> `Slice(RooCategory& cat, const char* label)` <td> Override default projection behaviour by omitting the specified category; 1889/// observable from the projection, i.e., by not integrating over all states of this category.; 1890/// The slice is positioned at the given label value. Multiple Slice() commands can be given to specify slices; 1891/// in multiple observables, e.g.; 1892/// ```{.cpp}; 1893/// pdf.plotOn(frame, Slice(tagCategory, ""2tag""), Slice(jetCategory, ""3jet""));; 1894/// ```; 1895/// <tr><td> `Project(const RooArgSet& set)` <td> Override default projection behaviour by projecting; 1896/// over observables given in set, completely ignoring the default projection behavior. Advanced use only.; 1897/// <tr><td> `ProjWData(const RooAbsData& d)` <td> Override default projection _techniq",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:91647,Deployability,integrat,integrating,91647,"existing curve with given name (and relative weight factors).; 1879/// <tr><td> `Components(const char* names)` <td> When plotting sums of PDFs, plot only the named components (*e.g.* only; 1880/// the signal of a signal+background model).; 1881/// <tr><td> `Components(const RooArgSet& compSet)` <td> As above, but pass a RooArgSet of the components themselves.; 1882///; 1883/// <tr><th> Type of argument <th> Projection control; 1884/// <tr><td> `Slice(const RooArgSet& set)` <td> Override default projection behaviour by omitting observables listed; 1885/// in set from the projection, i.e. by not integrating over these.; 1886/// Slicing is usually only sensible in discrete observables, by e.g. creating a slice; 1887/// of the PDF at the current value of the category observable.; 1888/// <tr><td> `Slice(RooCategory& cat, const char* label)` <td> Override default projection behaviour by omitting the specified category; 1889/// observable from the projection, i.e., by not integrating over all states of this category.; 1890/// The slice is positioned at the given label value. Multiple Slice() commands can be given to specify slices; 1891/// in multiple observables, e.g.; 1892/// ```{.cpp}; 1893/// pdf.plotOn(frame, Slice(tagCategory, ""2tag""), Slice(jetCategory, ""3jet""));; 1894/// ```; 1895/// <tr><td> `Project(const RooArgSet& set)` <td> Override default projection behaviour by projecting; 1896/// over observables given in set, completely ignoring the default projection behavior. Advanced use only.; 1897/// <tr><td> `ProjWData(const RooAbsData& d)` <td> Override default projection _technique_ (integration). For observables; 1898/// present in given dataset projection of PDF is achieved by constructing an average over all observable; 1899/// values in given set. Consult RooFit plotting tutorial for further explanation of meaning & use of this technique; 1900/// <tr><td> `ProjWData(const RooArgSet& s, const RooAbsData& d)` <td> As above but only consider subset 's' of; 1901",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:92280,Deployability,integrat,integration,92280,"m the projection, i.e. by not integrating over these.; 1886/// Slicing is usually only sensible in discrete observables, by e.g. creating a slice; 1887/// of the PDF at the current value of the category observable.; 1888/// <tr><td> `Slice(RooCategory& cat, const char* label)` <td> Override default projection behaviour by omitting the specified category; 1889/// observable from the projection, i.e., by not integrating over all states of this category.; 1890/// The slice is positioned at the given label value. Multiple Slice() commands can be given to specify slices; 1891/// in multiple observables, e.g.; 1892/// ```{.cpp}; 1893/// pdf.plotOn(frame, Slice(tagCategory, ""2tag""), Slice(jetCategory, ""3jet""));; 1894/// ```; 1895/// <tr><td> `Project(const RooArgSet& set)` <td> Override default projection behaviour by projecting; 1896/// over observables given in set, completely ignoring the default projection behavior. Advanced use only.; 1897/// <tr><td> `ProjWData(const RooAbsData& d)` <td> Override default projection _technique_ (integration). For observables; 1898/// present in given dataset projection of PDF is achieved by constructing an average over all observable; 1899/// values in given set. Consult RooFit plotting tutorial for further explanation of meaning & use of this technique; 1900/// <tr><td> `ProjWData(const RooArgSet& s, const RooAbsData& d)` <td> As above but only consider subset 's' of; 1901/// observables in dataset 'd' for projection through data averaging; 1902/// <tr><td> `ProjectionRange(const char* rn)` <td> When projecting the PDF onto the plot axis, it is usually integrated; 1903/// over the full range of the invisible variables. The ProjectionRange overrides this.; 1904/// This is useful if the PDF was fitted in a limited range in y, but it is now projected onto x. If; 1905/// `ProjectionRange(""<name of fit range>"")` is passed, the projection is normalised correctly.; 1906///; 1907/// <tr><th> Type of argument <th> Plotting control; 1908/// <tr",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:92849,Deployability,integrat,integrated,92849,"category.; 1890/// The slice is positioned at the given label value. Multiple Slice() commands can be given to specify slices; 1891/// in multiple observables, e.g.; 1892/// ```{.cpp}; 1893/// pdf.plotOn(frame, Slice(tagCategory, ""2tag""), Slice(jetCategory, ""3jet""));; 1894/// ```; 1895/// <tr><td> `Project(const RooArgSet& set)` <td> Override default projection behaviour by projecting; 1896/// over observables given in set, completely ignoring the default projection behavior. Advanced use only.; 1897/// <tr><td> `ProjWData(const RooAbsData& d)` <td> Override default projection _technique_ (integration). For observables; 1898/// present in given dataset projection of PDF is achieved by constructing an average over all observable; 1899/// values in given set. Consult RooFit plotting tutorial for further explanation of meaning & use of this technique; 1900/// <tr><td> `ProjWData(const RooArgSet& s, const RooAbsData& d)` <td> As above but only consider subset 's' of; 1901/// observables in dataset 'd' for projection through data averaging; 1902/// <tr><td> `ProjectionRange(const char* rn)` <td> When projecting the PDF onto the plot axis, it is usually integrated; 1903/// over the full range of the invisible variables. The ProjectionRange overrides this.; 1904/// This is useful if the PDF was fitted in a limited range in y, but it is now projected onto x. If; 1905/// `ProjectionRange(""<name of fit range>"")` is passed, the projection is normalised correctly.; 1906///; 1907/// <tr><th> Type of argument <th> Plotting control; 1908/// <tr><td> `LineStyle(Int_t style)` <td> Select line style by ROOT line style code, default is solid; 1909/// <tr><td> `LineColor(Int_t color)` <td> Select line color by ROOT color code, default is blue; 1910/// <tr><td> `LineWidth(Int_t width)` <td> Select line with in pixels, default is 3; 1911/// <tr><td> `FillStyle(Int_t style)` <td> Select fill style, default is not filled. If a filled style is selected,; 1912/// also use VLines() to add ver",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:100105,Deployability,update,updateNormVars,100105,"td::string nameSuffix ;; 2001 if (compSpec && strlen(compSpec)>0) {; 2002 nameSuffix.append(""_Comp["") ;; 2003 nameSuffix.append(compSpec) ;; 2004 nameSuffix.append(""]"") ;; 2005 } else if (compSet) {; 2006 nameSuffix += ""_Comp["" + compSet->contentsString() + ""]"";; 2007 }; 2008 ; 2009 // Remove PDF-only commands from command list; 2010 RooCmdConfig::stripCmdList(cmdList,""SelectCompSet,SelectCompSpec"") ;; 2011 ; 2012 // Adjust normalization, if so requested; 2013 if (asymCat) {; 2014 RooCmdArg cnsuffix(""CurveNameSuffix"",0,0,0,0,nameSuffix.c_str(),nullptr,nullptr,nullptr) ;; 2015 cmdList.Add(&cnsuffix);; 2016 return RooAbsReal::plotOn(frame,cmdList) ;; 2017 }; 2018 ; 2019 // More sanity checks; 2020 double nExpected(1) ;; 2021 if (stype==RelativeExpected) {; 2022 if (!canBeExtended()) {; 2023 coutE(Plotting) << ""RooAbsPdf::plotOn("" << GetName(); 2024 << ""): ERROR the 'Expected' scale option can only be used on extendable PDFs"" << endl ;; 2025 return frame ;; 2026 }; 2027 frame->updateNormVars(*frame->getPlotVar()) ;; 2028 nExpected = expectedEvents(frame->getNormVars()) ;; 2029 }; 2030 ; 2031 if (stype != Raw) {; 2032 ; 2033 if (frame->getFitRangeNEvt() && stype==Relative) {; 2034 ; 2035 bool hasCustomRange(false);; 2036 bool adjustNorm(false);; 2037 ; 2038 std::vector<pair<double,double> > rangeLim;; 2039 ; 2040 // Retrieve plot range to be able to adjust normalization to data; 2041 if (pc.hasProcessed(""Range"")) {; 2042 ; 2043 double rangeLo = pc.getDouble(""rangeLo"") ;; 2044 double rangeHi = pc.getDouble(""rangeHi"") ;; 2045 rangeLim.push_back(make_pair(rangeLo,rangeHi)) ;; 2046 adjustNorm = pc.getInt(""rangeAdjustNorm"") ;; 2047 hasCustomRange = true ;; 2048 ; 2049 coutI(Plotting) << ""RooAbsPdf::plotOn("" << GetName() << "") only plotting range [""; 2050 << rangeLo << "","" << rangeHi << ""]"" ;; 2051 if (!pc.hasProcessed(""NormRange"")) {; 2052 ccoutI(Plotting) << "", curve is normalized to data in "" << (adjustNorm?""given"":""full"") << "" range"" << endl ;; 2053 } else {; 2054 ccoutI(P",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:103956,Deployability,integrat,integration,103956,"continue;; 2091 }; 2092 rangeLim.push_back(frame->getPlotVar()->getRange(thisRangeName));; 2093 }; 2094 adjustNorm = true ;; 2095 hasCustomRange = true ;; 2096 coutI(Plotting) << ""RooAbsPdf::plotOn("" << GetName() << "") p.d.f. curve is normalized using explicit choice of ranges '"" << pc.getString(""normRangeName"", """", false) << ""'"" << endl ;; 2097 ; 2098 nameSuffix.append(""_NormRange["" + std::string(pc.getString(""rangeName"")) + ""]"");; 2099 ; 2100 }; 2101 ; 2102 if (hasCustomRange && adjustNorm) {; 2103 // If overlapping ranges were given, remove them now; 2104 const std::size_t oldSize = rangeLim.size();; 2105 removeRangeOverlap(rangeLim);; 2106 ; 2107 if (oldSize != rangeLim.size() && !pc.hasProcessed(""NormRange"")) {; 2108 // User gave overlapping ranges. This leads to double-counting events and integrals, and must; 2109 // therefore be avoided. If a NormRange has been given, the overlap is already gone.; 2110 // It's safe to plot even with overlap now.; 2111 coutE(Plotting) << ""Requested plot/integration ranges overlap. For correct plotting, new ranges ""; 2112 ""will be defined."" << std::endl;; 2113 auto plotVar = dynamic_cast<RooRealVar*>(frame->getPlotVar());; 2114 assert(plotVar);; 2115 std::string rangesNoOverlap;; 2116 for (auto it = rangeLim.begin(); it != rangeLim.end(); ++it) {; 2117 std::stringstream rangeName;; 2118 rangeName << ""Remove_overlap_range_"" << it - rangeLim.begin();; 2119 plotVar->setRange(rangeName.str().c_str(), it->first, it->second);; 2120 if (!rangesNoOverlap.empty()); 2121 rangesNoOverlap += "","";; 2122 rangesNoOverlap += rangeName.str();; 2123 }; 2124 ; 2125 auto rangeArg = static_cast<RooCmdArg*>(cmdList.FindObject(""RangeWithName""));; 2126 if (rangeArg) {; 2127 rangeArg->setString(0, rangesNoOverlap.c_str());; 2128 } else {; 2129 plotRange = std::make_unique<RooCmdArg>(RooFit::Range(rangesNoOverlap.c_str()));; 2130 cmdList.Add(plotRange.get());; 2131 }; 2132 }; 2133 ; 2134 double rangeNevt(0) ;; 2135 for (const auto& riter : rangeLim) {; 2",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:105412,Deployability,update,updateNormVars,105412,"Remove_overlap_range_"" << it - rangeLim.begin();; 2119 plotVar->setRange(rangeName.str().c_str(), it->first, it->second);; 2120 if (!rangesNoOverlap.empty()); 2121 rangesNoOverlap += "","";; 2122 rangesNoOverlap += rangeName.str();; 2123 }; 2124 ; 2125 auto rangeArg = static_cast<RooCmdArg*>(cmdList.FindObject(""RangeWithName""));; 2126 if (rangeArg) {; 2127 rangeArg->setString(0, rangesNoOverlap.c_str());; 2128 } else {; 2129 plotRange = std::make_unique<RooCmdArg>(RooFit::Range(rangesNoOverlap.c_str()));; 2130 cmdList.Add(plotRange.get());; 2131 }; 2132 }; 2133 ; 2134 double rangeNevt(0) ;; 2135 for (const auto& riter : rangeLim) {; 2136 double nevt= frame->getFitRangeNEvt(riter.first, riter.second);; 2137 rangeNevt += nevt ;; 2138 }; 2139 ; 2140 scaleFactor *= rangeNevt/nExpected ;; 2141 ; 2142 } else {; 2143 scaleFactor *= frame->getFitRangeNEvt()/nExpected ;; 2144 }; 2145 } else if (stype==RelativeExpected) {; 2146 scaleFactor *= nExpected ;; 2147 } else if (stype==NumEvent) {; 2148 scaleFactor /= nExpected ;; 2149 }; 2150 scaleFactor *= frame->getFitRangeBinW() ;; 2151 }; 2152 frame->updateNormVars(*frame->getPlotVar()) ;; 2153 ; 2154 // Append overriding scale factor command at end of original command list; 2155 RooCmdArg tmp = RooFit::Normalization(scaleFactor,Raw) ;; 2156 tmp.setInt(1,1) ; // Flag this normalization command as created for internal use (so that VisualizeError can strip it); 2157 cmdList.Add(&tmp) ;; 2158 ; 2159 // Was a component selected requested; 2160 if (haveCompSel) {; 2161 ; 2162 // Get complete set of tree branch nodes; 2163 RooArgSet branchNodeSet ;; 2164 branchNodeServerList(&branchNodeSet) ;; 2165 ; 2166 // Discard any non-RooAbsReal nodes; 2167 for (const auto arg : branchNodeSet) {; 2168 if (!dynamic_cast<RooAbsReal*>(arg)) {; 2169 branchNodeSet.remove(*arg) ;; 2170 }; 2171 }; 2172 ; 2173 // Obtain direct selection; 2174 std::unique_ptr<RooArgSet> dirSelNodes;; 2175 if (compSet) {; 2176 dirSelNodes = std::unique_ptr<RooArgSet>{branchN",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:108772,Deployability,update,updateNormVars,108772,"n three different ways. The interpretation; 2211/// is controlled by ScaleType; 2212/// ```; 2213/// Relative - Scale factor is applied on top of PDF normalization scale factor; 2214/// NumEvent - Scale factor is interpreted as a number of events. The surface area; 2215/// under the PDF curve will match that of a histogram containing the specified; 2216/// number of event; 2217/// Raw - Scale factor is applied to the raw (projected) probability density.; 2218/// Not too useful, option provided for completeness.; 2219/// ```; 2220// coverity[PASS_BY_VALUE]; 2221RooPlot* RooAbsPdf::plotOn(RooPlot *frame, PlotOpt o) const; 2222{; 2223 ; 2224 // Sanity checks; 2225 if (plotSanityChecks(frame)) return frame ;; 2226 ; 2227 // More sanity checks; 2228 double nExpected(1) ;; 2229 if (o.stype==RelativeExpected) {; 2230 if (!canBeExtended()) {; 2231 coutE(Plotting) << ""RooAbsPdf::plotOn("" << GetName(); 2232 << ""): ERROR the 'Expected' scale option can only be used on extendable PDFs"" << endl ;; 2233 return frame ;; 2234 }; 2235 frame->updateNormVars(*frame->getPlotVar()) ;; 2236 nExpected = expectedEvents(frame->getNormVars()) ;; 2237 }; 2238 ; 2239 // Adjust normalization, if so requested; 2240 if (o.stype != Raw) {; 2241 ; 2242 if (frame->getFitRangeNEvt() && o.stype==Relative) {; 2243 // If non-default plotting range is specified, adjust number of events in fit range; 2244 o.scaleFactor *= frame->getFitRangeNEvt()/nExpected ;; 2245 } else if (o.stype==RelativeExpected) {; 2246 o.scaleFactor *= nExpected ;; 2247 } else if (o.stype==NumEvent) {; 2248 o.scaleFactor /= nExpected ;; 2249 }; 2250 o.scaleFactor *= frame->getFitRangeBinW() ;; 2251 }; 2252 frame->updateNormVars(*frame->getPlotVar()) ;; 2253 ; 2254 return RooAbsReal::plotOn(frame,o) ;; 2255}; 2256 ; 2257 ; 2258 ; 2259 ; 2260////////////////////////////////////////////////////////////////////////////////; 2261/// The following named arguments are supported; 2262/// <table>; 2263/// <tr><th> Type of CmdArg <th> Effect",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:109407,Deployability,update,updateNormVars,109407,"RooAbsPdf::plotOn("" << GetName(); 2232 << ""): ERROR the 'Expected' scale option can only be used on extendable PDFs"" << endl ;; 2233 return frame ;; 2234 }; 2235 frame->updateNormVars(*frame->getPlotVar()) ;; 2236 nExpected = expectedEvents(frame->getNormVars()) ;; 2237 }; 2238 ; 2239 // Adjust normalization, if so requested; 2240 if (o.stype != Raw) {; 2241 ; 2242 if (frame->getFitRangeNEvt() && o.stype==Relative) {; 2243 // If non-default plotting range is specified, adjust number of events in fit range; 2244 o.scaleFactor *= frame->getFitRangeNEvt()/nExpected ;; 2245 } else if (o.stype==RelativeExpected) {; 2246 o.scaleFactor *= nExpected ;; 2247 } else if (o.stype==NumEvent) {; 2248 o.scaleFactor /= nExpected ;; 2249 }; 2250 o.scaleFactor *= frame->getFitRangeBinW() ;; 2251 }; 2252 frame->updateNormVars(*frame->getPlotVar()) ;; 2253 ; 2254 return RooAbsReal::plotOn(frame,o) ;; 2255}; 2256 ; 2257 ; 2258 ; 2259 ; 2260////////////////////////////////////////////////////////////////////////////////; 2261/// The following named arguments are supported; 2262/// <table>; 2263/// <tr><th> Type of CmdArg <th> Effect on parameter box; 2264/// <tr><td> `Parameters(const RooArgSet& param)` <td> Only the specified subset of parameters will be shown. By default all non-constant parameters are shown.; 2265/// <tr><td> `ShowConstants(bool flag)` <td> Also display constant parameters; 2266/// <tr><td> `Format(const char* what,...)` <td> Parameter formatting options.; 2267/// | Parameter | Format; 2268/// | ---------------------- | --------------------------; 2269/// | `const char* what` | Controls what is shown. ""N"" adds name (alternatively, ""T"" adds the title), ""E"" adds error, ""A"" shows asymmetric error, ""U"" shows unit, ""H"" hides the value; 2270/// | `FixedPrecision(int n)`| Controls precision, set fixed number of digits; 2271/// | `AutoPrecision(int n)` | Controls precision. Number of shown digits is calculated from error + n specified additional digits (1 is sensible default);",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:117253,Deployability,integrat,integrated,117253,"{; 2420 return _verboseEval ;; 2421}; 2422 ; 2423 ; 2424 ; 2425////////////////////////////////////////////////////////////////////////////////; 2426/// Destructor of normalization cache element. If this element; 2427/// provides the 'current' normalization stored in RooAbsPdf::_norm; 2428/// zero _norm pointer here before object pointed to is deleted here; 2429 ; 2430RooAbsPdf::CacheElem::~CacheElem(); 2431{; 2432 // Zero _norm pointer in RooAbsPdf if it is points to our cache payload; 2433 if (_owner) {; 2434 RooAbsPdf* pdfOwner = static_cast<RooAbsPdf*>(_owner) ;; 2435 if (pdfOwner->_norm == _norm.get()) {; 2436 pdfOwner->_norm = nullptr ;; 2437 }; 2438 }; 2439}; 2440 ; 2441 ; 2442 ; 2443////////////////////////////////////////////////////////////////////////////////; 2444/// Return a p.d.f that represent a projection of this p.d.f integrated over given observables; 2445 ; 2446RooAbsPdf* RooAbsPdf::createProjection(const RooArgSet& iset); 2447{; 2448 // Construct name for new object; 2449 std::string name = std::string{GetName()} + ""_Proj["" + RooHelpers::getColonSeparatedNameString(iset, ',') + ""]"";; 2450 ; 2451 // Return projected p.d.f.; 2452 return new RooProjectedPdf(name.c_str(),name.c_str(),*this,iset) ;; 2453}; 2454 ; 2455 ; 2456 ; 2457////////////////////////////////////////////////////////////////////////////////; 2458/// Create a cumulative distribution function of this p.d.f in terms; 2459/// of the observables listed in iset. If no nset argument is given; 2460/// the c.d.f normalization is constructed over the integrated; 2461/// observables, so that its maximum value is precisely 1. It is also; 2462/// possible to choose a different normalization for; 2463/// multi-dimensional p.d.f.s: eg. for a pdf f(x,y,z) one can; 2464/// construct a partial cdf c(x,y) that only when integrated itself; 2465/// over z results in a maximum value of 1. To construct such a cdf pass; 2466/// z as argument to the optional nset argument; 2467 ; 2468RooFit::OwningPtr<RooA",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:117957,Deployability,integrat,integrated,117957,"r) ;; 2435 if (pdfOwner->_norm == _norm.get()) {; 2436 pdfOwner->_norm = nullptr ;; 2437 }; 2438 }; 2439}; 2440 ; 2441 ; 2442 ; 2443////////////////////////////////////////////////////////////////////////////////; 2444/// Return a p.d.f that represent a projection of this p.d.f integrated over given observables; 2445 ; 2446RooAbsPdf* RooAbsPdf::createProjection(const RooArgSet& iset); 2447{; 2448 // Construct name for new object; 2449 std::string name = std::string{GetName()} + ""_Proj["" + RooHelpers::getColonSeparatedNameString(iset, ',') + ""]"";; 2450 ; 2451 // Return projected p.d.f.; 2452 return new RooProjectedPdf(name.c_str(),name.c_str(),*this,iset) ;; 2453}; 2454 ; 2455 ; 2456 ; 2457////////////////////////////////////////////////////////////////////////////////; 2458/// Create a cumulative distribution function of this p.d.f in terms; 2459/// of the observables listed in iset. If no nset argument is given; 2460/// the c.d.f normalization is constructed over the integrated; 2461/// observables, so that its maximum value is precisely 1. It is also; 2462/// possible to choose a different normalization for; 2463/// multi-dimensional p.d.f.s: eg. for a pdf f(x,y,z) one can; 2464/// construct a partial cdf c(x,y) that only when integrated itself; 2465/// over z results in a maximum value of 1. To construct such a cdf pass; 2466/// z as argument to the optional nset argument; 2467 ; 2468RooFit::OwningPtr<RooAbsReal> RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset); 2469{; 2470 return createCdf(iset,RooFit::SupNormSet(nset)) ;; 2471}; 2472 ; 2473 ; 2474 ; 2475////////////////////////////////////////////////////////////////////////////////; 2476/// Create an object that represents the integral of the function over one or more observables listed in `iset`.; 2477/// The actual integration calculation is only performed when the return object is evaluated. The name; 2478/// of the integral object is automatically constructed from the name of the input fu",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:118223,Deployability,integrat,integrated,118223,"t represent a projection of this p.d.f integrated over given observables; 2445 ; 2446RooAbsPdf* RooAbsPdf::createProjection(const RooArgSet& iset); 2447{; 2448 // Construct name for new object; 2449 std::string name = std::string{GetName()} + ""_Proj["" + RooHelpers::getColonSeparatedNameString(iset, ',') + ""]"";; 2450 ; 2451 // Return projected p.d.f.; 2452 return new RooProjectedPdf(name.c_str(),name.c_str(),*this,iset) ;; 2453}; 2454 ; 2455 ; 2456 ; 2457////////////////////////////////////////////////////////////////////////////////; 2458/// Create a cumulative distribution function of this p.d.f in terms; 2459/// of the observables listed in iset. If no nset argument is given; 2460/// the c.d.f normalization is constructed over the integrated; 2461/// observables, so that its maximum value is precisely 1. It is also; 2462/// possible to choose a different normalization for; 2463/// multi-dimensional p.d.f.s: eg. for a pdf f(x,y,z) one can; 2464/// construct a partial cdf c(x,y) that only when integrated itself; 2465/// over z results in a maximum value of 1. To construct such a cdf pass; 2466/// z as argument to the optional nset argument; 2467 ; 2468RooFit::OwningPtr<RooAbsReal> RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset); 2469{; 2470 return createCdf(iset,RooFit::SupNormSet(nset)) ;; 2471}; 2472 ; 2473 ; 2474 ; 2475////////////////////////////////////////////////////////////////////////////////; 2476/// Create an object that represents the integral of the function over one or more observables listed in `iset`.; 2477/// The actual integration calculation is only performed when the return object is evaluated. The name; 2478/// of the integral object is automatically constructed from the name of the input function, the variables; 2479/// it integrates and the range integrates over; 2480///; 2481/// The following named arguments are accepted; 2482/// | Type of CmdArg | Effect on CDF; 2483/// | ---------------------|-------------------; 2484/// |",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:118796,Deployability,integrat,integration,118796,"ms; 2459/// of the observables listed in iset. If no nset argument is given; 2460/// the c.d.f normalization is constructed over the integrated; 2461/// observables, so that its maximum value is precisely 1. It is also; 2462/// possible to choose a different normalization for; 2463/// multi-dimensional p.d.f.s: eg. for a pdf f(x,y,z) one can; 2464/// construct a partial cdf c(x,y) that only when integrated itself; 2465/// over z results in a maximum value of 1. To construct such a cdf pass; 2466/// z as argument to the optional nset argument; 2467 ; 2468RooFit::OwningPtr<RooAbsReal> RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset); 2469{; 2470 return createCdf(iset,RooFit::SupNormSet(nset)) ;; 2471}; 2472 ; 2473 ; 2474 ; 2475////////////////////////////////////////////////////////////////////////////////; 2476/// Create an object that represents the integral of the function over one or more observables listed in `iset`.; 2477/// The actual integration calculation is only performed when the return object is evaluated. The name; 2478/// of the integral object is automatically constructed from the name of the input function, the variables; 2479/// it integrates and the range integrates over; 2480///; 2481/// The following named arguments are accepted; 2482/// | Type of CmdArg | Effect on CDF; 2483/// | ---------------------|-------------------; 2484/// | SupNormSet(const RooArgSet&) | Observables over which should be normalized _in addition_ to the integration observables; 2485/// | ScanNumCdf() | Apply scanning technique if cdf integral involves numeric integration [ default ]; 2486/// | ScanAllCdf() | Always apply scanning technique; 2487/// | ScanNoCdf() | Never apply scanning technique; 2488/// | ScanParameters(Int_t nbins, Int_t intOrder) | Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf; 2489 ; 2490RooFit::OwningPtr<RooAbsReal> RooAbsPdf::createCdf(const RooArgSet& iset, co",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:119008,Deployability,integrat,integrates,119008,"ooFit::SupNormSet(nset)) ;; 2471}; 2472 ; 2473 ; 2474 ; 2475////////////////////////////////////////////////////////////////////////////////; 2476/// Create an object that represents the integral of the function over one or more observables listed in `iset`.; 2477/// The actual integration calculation is only performed when the return object is evaluated. The name; 2478/// of the integral object is automatically constructed from the name of the input function, the variables; 2479/// it integrates and the range integrates over; 2480///; 2481/// The following named arguments are accepted; 2482/// | Type of CmdArg | Effect on CDF; 2483/// | ---------------------|-------------------; 2484/// | SupNormSet(const RooArgSet&) | Observables over which should be normalized _in addition_ to the integration observables; 2485/// | ScanNumCdf() | Apply scanning technique if cdf integral involves numeric integration [ default ]; 2486/// | ScanAllCdf() | Always apply scanning technique; 2487/// | ScanNoCdf() | Never apply scanning technique; 2488/// | ScanParameters(Int_t nbins, Int_t intOrder) | Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf; 2489 ; 2490RooFit::OwningPtr<RooAbsReal> RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2,; 2491 const RooCmdArg& arg3, const RooCmdArg& arg4, const RooCmdArg& arg5,; 2492 const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdArg& arg8); 2493{; 2494 // Define configuration for this method; 2495 RooCmdConfig pc(""RooAbsReal::createCdf("" + std::string(GetName()) + "")"");; 2496 pc.defineSet(""supNormSet"",""SupNormSet"",0,nullptr) ;; 2497 pc.defineInt(""numScanBins"",""ScanParameters"",0,1000) ;; 2498 pc.defineInt(""intOrder"",""ScanParameters"",1,2) ;; 2499 pc.defineInt(""doScanNum"",""ScanNumCdf"",0,1) ;; 2500 pc.defineInt(""doScanAll"",""ScanAllCdf"",0,0) ;; 2501 pc.defineInt(""doScanNon"",""ScanNoCdf"",0,0) ;; 2502 pc.defineMutex(""ScanNumCdf"",""ScanAll",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:119033,Deployability,integrat,integrates,119033,"ooFit::SupNormSet(nset)) ;; 2471}; 2472 ; 2473 ; 2474 ; 2475////////////////////////////////////////////////////////////////////////////////; 2476/// Create an object that represents the integral of the function over one or more observables listed in `iset`.; 2477/// The actual integration calculation is only performed when the return object is evaluated. The name; 2478/// of the integral object is automatically constructed from the name of the input function, the variables; 2479/// it integrates and the range integrates over; 2480///; 2481/// The following named arguments are accepted; 2482/// | Type of CmdArg | Effect on CDF; 2483/// | ---------------------|-------------------; 2484/// | SupNormSet(const RooArgSet&) | Observables over which should be normalized _in addition_ to the integration observables; 2485/// | ScanNumCdf() | Apply scanning technique if cdf integral involves numeric integration [ default ]; 2486/// | ScanAllCdf() | Always apply scanning technique; 2487/// | ScanNoCdf() | Never apply scanning technique; 2488/// | ScanParameters(Int_t nbins, Int_t intOrder) | Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf; 2489 ; 2490RooFit::OwningPtr<RooAbsReal> RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2,; 2491 const RooCmdArg& arg3, const RooCmdArg& arg4, const RooCmdArg& arg5,; 2492 const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdArg& arg8); 2493{; 2494 // Define configuration for this method; 2495 RooCmdConfig pc(""RooAbsReal::createCdf("" + std::string(GetName()) + "")"");; 2496 pc.defineSet(""supNormSet"",""SupNormSet"",0,nullptr) ;; 2497 pc.defineInt(""numScanBins"",""ScanParameters"",0,1000) ;; 2498 pc.defineInt(""intOrder"",""ScanParameters"",1,2) ;; 2499 pc.defineInt(""doScanNum"",""ScanNumCdf"",0,1) ;; 2500 pc.defineInt(""doScanAll"",""ScanAllCdf"",0,0) ;; 2501 pc.defineInt(""doScanNon"",""ScanNoCdf"",0,0) ;; 2502 pc.defineMutex(""ScanNumCdf"",""ScanAll",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:119312,Deployability,integrat,integration,119312,"ooFit::SupNormSet(nset)) ;; 2471}; 2472 ; 2473 ; 2474 ; 2475////////////////////////////////////////////////////////////////////////////////; 2476/// Create an object that represents the integral of the function over one or more observables listed in `iset`.; 2477/// The actual integration calculation is only performed when the return object is evaluated. The name; 2478/// of the integral object is automatically constructed from the name of the input function, the variables; 2479/// it integrates and the range integrates over; 2480///; 2481/// The following named arguments are accepted; 2482/// | Type of CmdArg | Effect on CDF; 2483/// | ---------------------|-------------------; 2484/// | SupNormSet(const RooArgSet&) | Observables over which should be normalized _in addition_ to the integration observables; 2485/// | ScanNumCdf() | Apply scanning technique if cdf integral involves numeric integration [ default ]; 2486/// | ScanAllCdf() | Always apply scanning technique; 2487/// | ScanNoCdf() | Never apply scanning technique; 2488/// | ScanParameters(Int_t nbins, Int_t intOrder) | Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf; 2489 ; 2490RooFit::OwningPtr<RooAbsReal> RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2,; 2491 const RooCmdArg& arg3, const RooCmdArg& arg4, const RooCmdArg& arg5,; 2492 const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdArg& arg8); 2493{; 2494 // Define configuration for this method; 2495 RooCmdConfig pc(""RooAbsReal::createCdf("" + std::string(GetName()) + "")"");; 2496 pc.defineSet(""supNormSet"",""SupNormSet"",0,nullptr) ;; 2497 pc.defineInt(""numScanBins"",""ScanParameters"",0,1000) ;; 2498 pc.defineInt(""intOrder"",""ScanParameters"",1,2) ;; 2499 pc.defineInt(""doScanNum"",""ScanNumCdf"",0,1) ;; 2500 pc.defineInt(""doScanAll"",""ScanAllCdf"",0,0) ;; 2501 pc.defineInt(""doScanNon"",""ScanNoCdf"",0,0) ;; 2502 pc.defineMutex(""ScanNumCdf"",""ScanAll",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:119420,Deployability,integrat,integration,119420,"ooFit::SupNormSet(nset)) ;; 2471}; 2472 ; 2473 ; 2474 ; 2475////////////////////////////////////////////////////////////////////////////////; 2476/// Create an object that represents the integral of the function over one or more observables listed in `iset`.; 2477/// The actual integration calculation is only performed when the return object is evaluated. The name; 2478/// of the integral object is automatically constructed from the name of the input function, the variables; 2479/// it integrates and the range integrates over; 2480///; 2481/// The following named arguments are accepted; 2482/// | Type of CmdArg | Effect on CDF; 2483/// | ---------------------|-------------------; 2484/// | SupNormSet(const RooArgSet&) | Observables over which should be normalized _in addition_ to the integration observables; 2485/// | ScanNumCdf() | Apply scanning technique if cdf integral involves numeric integration [ default ]; 2486/// | ScanAllCdf() | Always apply scanning technique; 2487/// | ScanNoCdf() | Never apply scanning technique; 2488/// | ScanParameters(Int_t nbins, Int_t intOrder) | Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf; 2489 ; 2490RooFit::OwningPtr<RooAbsReal> RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2,; 2491 const RooCmdArg& arg3, const RooCmdArg& arg4, const RooCmdArg& arg5,; 2492 const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdArg& arg8); 2493{; 2494 // Define configuration for this method; 2495 RooCmdConfig pc(""RooAbsReal::createCdf("" + std::string(GetName()) + "")"");; 2496 pc.defineSet(""supNormSet"",""SupNormSet"",0,nullptr) ;; 2497 pc.defineInt(""numScanBins"",""ScanParameters"",0,1000) ;; 2498 pc.defineInt(""intOrder"",""ScanParameters"",1,2) ;; 2499 pc.defineInt(""doScanNum"",""ScanNumCdf"",0,1) ;; 2500 pc.defineInt(""doScanAll"",""ScanAllCdf"",0,0) ;; 2501 pc.defineInt(""doScanNon"",""ScanNoCdf"",0,0) ;; 2502 pc.defineMutex(""ScanNumCdf"",""ScanAll",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:120042,Deployability,configurat,configuration,120042,"ooFit::SupNormSet(nset)) ;; 2471}; 2472 ; 2473 ; 2474 ; 2475////////////////////////////////////////////////////////////////////////////////; 2476/// Create an object that represents the integral of the function over one or more observables listed in `iset`.; 2477/// The actual integration calculation is only performed when the return object is evaluated. The name; 2478/// of the integral object is automatically constructed from the name of the input function, the variables; 2479/// it integrates and the range integrates over; 2480///; 2481/// The following named arguments are accepted; 2482/// | Type of CmdArg | Effect on CDF; 2483/// | ---------------------|-------------------; 2484/// | SupNormSet(const RooArgSet&) | Observables over which should be normalized _in addition_ to the integration observables; 2485/// | ScanNumCdf() | Apply scanning technique if cdf integral involves numeric integration [ default ]; 2486/// | ScanAllCdf() | Always apply scanning technique; 2487/// | ScanNoCdf() | Never apply scanning technique; 2488/// | ScanParameters(Int_t nbins, Int_t intOrder) | Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf; 2489 ; 2490RooFit::OwningPtr<RooAbsReal> RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2,; 2491 const RooCmdArg& arg3, const RooCmdArg& arg4, const RooCmdArg& arg5,; 2492 const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdArg& arg8); 2493{; 2494 // Define configuration for this method; 2495 RooCmdConfig pc(""RooAbsReal::createCdf("" + std::string(GetName()) + "")"");; 2496 pc.defineSet(""supNormSet"",""SupNormSet"",0,nullptr) ;; 2497 pc.defineInt(""numScanBins"",""ScanParameters"",0,1000) ;; 2498 pc.defineInt(""intOrder"",""ScanParameters"",1,2) ;; 2499 pc.defineInt(""doScanNum"",""ScanNumCdf"",0,1) ;; 2500 pc.defineInt(""doScanAll"",""ScanAllCdf"",0,0) ;; 2501 pc.defineInt(""doScanNon"",""ScanNoCdf"",0,0) ;; 2502 pc.defineMutex(""ScanNumCdf"",""ScanAll",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:121651,Deployability,integrat,integration,121651," named arguments; 2511 const RooArgSet* snset = pc.getSet(""supNormSet"",nullptr);; 2512 RooArgSet nset ;; 2513 if (snset) {; 2514 nset.add(*snset) ;; 2515 }; 2516 Int_t numScanBins = pc.getInt(""numScanBins"") ;; 2517 Int_t intOrder = pc.getInt(""intOrder"") ;; 2518 Int_t doScanNum = pc.getInt(""doScanNum"") ;; 2519 Int_t doScanAll = pc.getInt(""doScanAll"") ;; 2520 Int_t doScanNon = pc.getInt(""doScanNon"") ;; 2521 ; 2522 // If scanning technique is not requested make integral-based cdf and return; 2523 if (doScanNon) {; 2524 return createIntRI(iset,nset) ;; 2525 }; 2526 if (doScanAll) {; 2527 return createScanCdf(iset,nset,numScanBins,intOrder) ;; 2528 }; 2529 if (doScanNum) {; 2530 std::unique_ptr<RooAbsReal> tmp{createIntegral(iset)} ;; 2531 Int_t isNum= !static_cast<RooRealIntegral&>(*tmp).numIntRealVars().empty();; 2532 ; 2533 if (isNum) {; 2534 coutI(NumIntegration) << ""RooAbsPdf::createCdf("" << GetName() << "") integration over observable(s) "" << iset << "" involves numeric integration,"" << endl; 2535 << "" constructing cdf though numeric integration of sampled pdf in "" << numScanBins << "" bins and applying order ""; 2536 << intOrder << "" interpolation on integrated histogram."" << endl; 2537 << "" To override this choice of technique use argument ScanNone(), to change scan parameters use ScanParameters(nbins,order) argument"" << endl ;; 2538 }; 2539 ; 2540 return isNum ? createScanCdf(iset,nset,numScanBins,intOrder) : createIntRI(iset,nset) ;; 2541 }; 2542 return nullptr ;; 2543}; 2544 ; 2545RooFit::OwningPtr<RooAbsReal> RooAbsPdf::createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); 2546{; 2547 string name = string(GetName()) + ""_NUMCDF_"" + integralNameSuffix(iset,&nset).Data() ;; 2548 RooRealVar* ivar = static_cast<RooRealVar*>(iset.first()) ;; 2549 ivar->setBins(numScanBins,""numcdf"") ;; 2550 auto ret = std::make_unique<RooNumCdf>(name.c_str(),name.c_str(),*this,*ivar,""numcdf"");; 2551 ret->setInterpolationOrder(intOrder) ;; 2552 r",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:121714,Deployability,integrat,integration,121714," named arguments; 2511 const RooArgSet* snset = pc.getSet(""supNormSet"",nullptr);; 2512 RooArgSet nset ;; 2513 if (snset) {; 2514 nset.add(*snset) ;; 2515 }; 2516 Int_t numScanBins = pc.getInt(""numScanBins"") ;; 2517 Int_t intOrder = pc.getInt(""intOrder"") ;; 2518 Int_t doScanNum = pc.getInt(""doScanNum"") ;; 2519 Int_t doScanAll = pc.getInt(""doScanAll"") ;; 2520 Int_t doScanNon = pc.getInt(""doScanNon"") ;; 2521 ; 2522 // If scanning technique is not requested make integral-based cdf and return; 2523 if (doScanNon) {; 2524 return createIntRI(iset,nset) ;; 2525 }; 2526 if (doScanAll) {; 2527 return createScanCdf(iset,nset,numScanBins,intOrder) ;; 2528 }; 2529 if (doScanNum) {; 2530 std::unique_ptr<RooAbsReal> tmp{createIntegral(iset)} ;; 2531 Int_t isNum= !static_cast<RooRealIntegral&>(*tmp).numIntRealVars().empty();; 2532 ; 2533 if (isNum) {; 2534 coutI(NumIntegration) << ""RooAbsPdf::createCdf("" << GetName() << "") integration over observable(s) "" << iset << "" involves numeric integration,"" << endl; 2535 << "" constructing cdf though numeric integration of sampled pdf in "" << numScanBins << "" bins and applying order ""; 2536 << intOrder << "" interpolation on integrated histogram."" << endl; 2537 << "" To override this choice of technique use argument ScanNone(), to change scan parameters use ScanParameters(nbins,order) argument"" << endl ;; 2538 }; 2539 ; 2540 return isNum ? createScanCdf(iset,nset,numScanBins,intOrder) : createIntRI(iset,nset) ;; 2541 }; 2542 return nullptr ;; 2543}; 2544 ; 2545RooFit::OwningPtr<RooAbsReal> RooAbsPdf::createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); 2546{; 2547 string name = string(GetName()) + ""_NUMCDF_"" + integralNameSuffix(iset,&nset).Data() ;; 2548 RooRealVar* ivar = static_cast<RooRealVar*>(iset.first()) ;; 2549 ivar->setBins(numScanBins,""numcdf"") ;; 2550 auto ret = std::make_unique<RooNumCdf>(name.c_str(),name.c_str(),*this,*ivar,""numcdf"");; 2551 ret->setInterpolationOrder(intOrder) ;; 2552 r",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:121779,Deployability,integrat,integration,121779," named arguments; 2511 const RooArgSet* snset = pc.getSet(""supNormSet"",nullptr);; 2512 RooArgSet nset ;; 2513 if (snset) {; 2514 nset.add(*snset) ;; 2515 }; 2516 Int_t numScanBins = pc.getInt(""numScanBins"") ;; 2517 Int_t intOrder = pc.getInt(""intOrder"") ;; 2518 Int_t doScanNum = pc.getInt(""doScanNum"") ;; 2519 Int_t doScanAll = pc.getInt(""doScanAll"") ;; 2520 Int_t doScanNon = pc.getInt(""doScanNon"") ;; 2521 ; 2522 // If scanning technique is not requested make integral-based cdf and return; 2523 if (doScanNon) {; 2524 return createIntRI(iset,nset) ;; 2525 }; 2526 if (doScanAll) {; 2527 return createScanCdf(iset,nset,numScanBins,intOrder) ;; 2528 }; 2529 if (doScanNum) {; 2530 std::unique_ptr<RooAbsReal> tmp{createIntegral(iset)} ;; 2531 Int_t isNum= !static_cast<RooRealIntegral&>(*tmp).numIntRealVars().empty();; 2532 ; 2533 if (isNum) {; 2534 coutI(NumIntegration) << ""RooAbsPdf::createCdf("" << GetName() << "") integration over observable(s) "" << iset << "" involves numeric integration,"" << endl; 2535 << "" constructing cdf though numeric integration of sampled pdf in "" << numScanBins << "" bins and applying order ""; 2536 << intOrder << "" interpolation on integrated histogram."" << endl; 2537 << "" To override this choice of technique use argument ScanNone(), to change scan parameters use ScanParameters(nbins,order) argument"" << endl ;; 2538 }; 2539 ; 2540 return isNum ? createScanCdf(iset,nset,numScanBins,intOrder) : createIntRI(iset,nset) ;; 2541 }; 2542 return nullptr ;; 2543}; 2544 ; 2545RooFit::OwningPtr<RooAbsReal> RooAbsPdf::createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); 2546{; 2547 string name = string(GetName()) + ""_NUMCDF_"" + integralNameSuffix(iset,&nset).Data() ;; 2548 RooRealVar* ivar = static_cast<RooRealVar*>(iset.first()) ;; 2549 ivar->setBins(numScanBins,""numcdf"") ;; 2550 auto ret = std::make_unique<RooNumCdf>(name.c_str(),name.c_str(),*this,*ivar,""numcdf"");; 2551 ret->setInterpolationOrder(intOrder) ;; 2552 r",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:121897,Deployability,integrat,integrated,121897," named arguments; 2511 const RooArgSet* snset = pc.getSet(""supNormSet"",nullptr);; 2512 RooArgSet nset ;; 2513 if (snset) {; 2514 nset.add(*snset) ;; 2515 }; 2516 Int_t numScanBins = pc.getInt(""numScanBins"") ;; 2517 Int_t intOrder = pc.getInt(""intOrder"") ;; 2518 Int_t doScanNum = pc.getInt(""doScanNum"") ;; 2519 Int_t doScanAll = pc.getInt(""doScanAll"") ;; 2520 Int_t doScanNon = pc.getInt(""doScanNon"") ;; 2521 ; 2522 // If scanning technique is not requested make integral-based cdf and return; 2523 if (doScanNon) {; 2524 return createIntRI(iset,nset) ;; 2525 }; 2526 if (doScanAll) {; 2527 return createScanCdf(iset,nset,numScanBins,intOrder) ;; 2528 }; 2529 if (doScanNum) {; 2530 std::unique_ptr<RooAbsReal> tmp{createIntegral(iset)} ;; 2531 Int_t isNum= !static_cast<RooRealIntegral&>(*tmp).numIntRealVars().empty();; 2532 ; 2533 if (isNum) {; 2534 coutI(NumIntegration) << ""RooAbsPdf::createCdf("" << GetName() << "") integration over observable(s) "" << iset << "" involves numeric integration,"" << endl; 2535 << "" constructing cdf though numeric integration of sampled pdf in "" << numScanBins << "" bins and applying order ""; 2536 << intOrder << "" interpolation on integrated histogram."" << endl; 2537 << "" To override this choice of technique use argument ScanNone(), to change scan parameters use ScanParameters(nbins,order) argument"" << endl ;; 2538 }; 2539 ; 2540 return isNum ? createScanCdf(iset,nset,numScanBins,intOrder) : createIntRI(iset,nset) ;; 2541 }; 2542 return nullptr ;; 2543}; 2544 ; 2545RooFit::OwningPtr<RooAbsReal> RooAbsPdf::createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); 2546{; 2547 string name = string(GetName()) + ""_NUMCDF_"" + integralNameSuffix(iset,&nset).Data() ;; 2548 RooRealVar* ivar = static_cast<RooRealVar*>(iset.first()) ;; 2549 ivar->setBins(numScanBins,""numcdf"") ;; 2550 auto ret = std::make_unique<RooNumCdf>(name.c_str(),name.c_str(),*this,*ivar,""numcdf"");; 2551 ret->setInterpolationOrder(intOrder) ;; 2552 r",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:125024,Deployability,configurat,configuration,125024,"(pdfParams) || !stripDisconnected) {; 2591 finalConstraints->add(*pdf) ;; 2592 } else {; 2593 coutI(Minimization) << ""RooAbsPdf::getAllConstraints("" << GetName() << "") omitting term "" << pdf->GetName(); 2594 << "" as constraint term as it does not share any parameters with the other pdfs in product. ""; 2595 << ""To force inclusion in likelihood, add an explicit Constrain() argument for the target parameter"" << endl ;; 2596 }; 2597 }; 2598 ; 2599 // Now remove from constrainedParams all parameters that occur exclusively in constraint term and not in regular pdf term; 2600 ; 2601 RooArgSet cexl;; 2602 conParams.selectCommon(constrainedParams, cexl);; 2603 cexl.remove(pdfParams,true,true) ;; 2604 constrainedParams.remove(cexl,true,true) ;; 2605 ; 2606 return finalConstraints ;; 2607}; 2608 ; 2609 ; 2610////////////////////////////////////////////////////////////////////////////////; 2611/// Returns the default numeric MC generator configuration for all RooAbsReals; 2612 ; 2613RooNumGenConfig* RooAbsPdf::defaultGeneratorConfig(); 2614{; 2615 return &RooNumGenConfig::defaultConfig() ;; 2616}; 2617 ; 2618 ; 2619////////////////////////////////////////////////////////////////////////////////; 2620/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2621/// If this object has no specialized configuration, a null pointer is returned; 2622 ; 2623RooNumGenConfig* RooAbsPdf::specialGeneratorConfig() const; 2624{; 2625 return _specGeneratorConfig.get();; 2626}; 2627 ; 2628 ; 2629 ; 2630////////////////////////////////////////////////////////////////////////////////; 2631/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2632/// If this object has no specialized configuration, a null pointer is returned,; 2633/// unless createOnTheFly is true in which case a clone of the default integrator; 2634/// configuration is created, installed as specialized configuration, and returned; 2635 ; 2636RooNumGenConfig* RooAbsPdf::specialGeneratorCo",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:125319,Deployability,integrat,integrator,125319,"(pdfParams) || !stripDisconnected) {; 2591 finalConstraints->add(*pdf) ;; 2592 } else {; 2593 coutI(Minimization) << ""RooAbsPdf::getAllConstraints("" << GetName() << "") omitting term "" << pdf->GetName(); 2594 << "" as constraint term as it does not share any parameters with the other pdfs in product. ""; 2595 << ""To force inclusion in likelihood, add an explicit Constrain() argument for the target parameter"" << endl ;; 2596 }; 2597 }; 2598 ; 2599 // Now remove from constrainedParams all parameters that occur exclusively in constraint term and not in regular pdf term; 2600 ; 2601 RooArgSet cexl;; 2602 conParams.selectCommon(constrainedParams, cexl);; 2603 cexl.remove(pdfParams,true,true) ;; 2604 constrainedParams.remove(cexl,true,true) ;; 2605 ; 2606 return finalConstraints ;; 2607}; 2608 ; 2609 ; 2610////////////////////////////////////////////////////////////////////////////////; 2611/// Returns the default numeric MC generator configuration for all RooAbsReals; 2612 ; 2613RooNumGenConfig* RooAbsPdf::defaultGeneratorConfig(); 2614{; 2615 return &RooNumGenConfig::defaultConfig() ;; 2616}; 2617 ; 2618 ; 2619////////////////////////////////////////////////////////////////////////////////; 2620/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2621/// If this object has no specialized configuration, a null pointer is returned; 2622 ; 2623RooNumGenConfig* RooAbsPdf::specialGeneratorConfig() const; 2624{; 2625 return _specGeneratorConfig.get();; 2626}; 2627 ; 2628 ; 2629 ; 2630////////////////////////////////////////////////////////////////////////////////; 2631/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2632/// If this object has no specialized configuration, a null pointer is returned,; 2633/// unless createOnTheFly is true in which case a clone of the default integrator; 2634/// configuration is created, installed as specialized configuration, and returned; 2635 ; 2636RooNumGenConfig* RooAbsPdf::specialGeneratorCo",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:125330,Deployability,configurat,configuration,125330,"(pdfParams) || !stripDisconnected) {; 2591 finalConstraints->add(*pdf) ;; 2592 } else {; 2593 coutI(Minimization) << ""RooAbsPdf::getAllConstraints("" << GetName() << "") omitting term "" << pdf->GetName(); 2594 << "" as constraint term as it does not share any parameters with the other pdfs in product. ""; 2595 << ""To force inclusion in likelihood, add an explicit Constrain() argument for the target parameter"" << endl ;; 2596 }; 2597 }; 2598 ; 2599 // Now remove from constrainedParams all parameters that occur exclusively in constraint term and not in regular pdf term; 2600 ; 2601 RooArgSet cexl;; 2602 conParams.selectCommon(constrainedParams, cexl);; 2603 cexl.remove(pdfParams,true,true) ;; 2604 constrainedParams.remove(cexl,true,true) ;; 2605 ; 2606 return finalConstraints ;; 2607}; 2608 ; 2609 ; 2610////////////////////////////////////////////////////////////////////////////////; 2611/// Returns the default numeric MC generator configuration for all RooAbsReals; 2612 ; 2613RooNumGenConfig* RooAbsPdf::defaultGeneratorConfig(); 2614{; 2615 return &RooNumGenConfig::defaultConfig() ;; 2616}; 2617 ; 2618 ; 2619////////////////////////////////////////////////////////////////////////////////; 2620/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2621/// If this object has no specialized configuration, a null pointer is returned; 2622 ; 2623RooNumGenConfig* RooAbsPdf::specialGeneratorConfig() const; 2624{; 2625 return _specGeneratorConfig.get();; 2626}; 2627 ; 2628 ; 2629 ; 2630////////////////////////////////////////////////////////////////////////////////; 2631/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2632/// If this object has no specialized configuration, a null pointer is returned,; 2633/// unless createOnTheFly is true in which case a clone of the default integrator; 2634/// configuration is created, installed as specialized configuration, and returned; 2635 ; 2636RooNumGenConfig* RooAbsPdf::specialGeneratorCo",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:125410,Deployability,configurat,configuration,125410,"t for the target parameter"" << endl ;; 2596 }; 2597 }; 2598 ; 2599 // Now remove from constrainedParams all parameters that occur exclusively in constraint term and not in regular pdf term; 2600 ; 2601 RooArgSet cexl;; 2602 conParams.selectCommon(constrainedParams, cexl);; 2603 cexl.remove(pdfParams,true,true) ;; 2604 constrainedParams.remove(cexl,true,true) ;; 2605 ; 2606 return finalConstraints ;; 2607}; 2608 ; 2609 ; 2610////////////////////////////////////////////////////////////////////////////////; 2611/// Returns the default numeric MC generator configuration for all RooAbsReals; 2612 ; 2613RooNumGenConfig* RooAbsPdf::defaultGeneratorConfig(); 2614{; 2615 return &RooNumGenConfig::defaultConfig() ;; 2616}; 2617 ; 2618 ; 2619////////////////////////////////////////////////////////////////////////////////; 2620/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2621/// If this object has no specialized configuration, a null pointer is returned; 2622 ; 2623RooNumGenConfig* RooAbsPdf::specialGeneratorConfig() const; 2624{; 2625 return _specGeneratorConfig.get();; 2626}; 2627 ; 2628 ; 2629 ; 2630////////////////////////////////////////////////////////////////////////////////; 2631/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2632/// If this object has no specialized configuration, a null pointer is returned,; 2633/// unless createOnTheFly is true in which case a clone of the default integrator; 2634/// configuration is created, installed as specialized configuration, and returned; 2635 ; 2636RooNumGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generato",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:125718,Deployability,integrat,integrator,125718,"01 RooArgSet cexl;; 2602 conParams.selectCommon(constrainedParams, cexl);; 2603 cexl.remove(pdfParams,true,true) ;; 2604 constrainedParams.remove(cexl,true,true) ;; 2605 ; 2606 return finalConstraints ;; 2607}; 2608 ; 2609 ; 2610////////////////////////////////////////////////////////////////////////////////; 2611/// Returns the default numeric MC generator configuration for all RooAbsReals; 2612 ; 2613RooNumGenConfig* RooAbsPdf::defaultGeneratorConfig(); 2614{; 2615 return &RooNumGenConfig::defaultConfig() ;; 2616}; 2617 ; 2618 ; 2619////////////////////////////////////////////////////////////////////////////////; 2620/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2621/// If this object has no specialized configuration, a null pointer is returned; 2622 ; 2623RooNumGenConfig* RooAbsPdf::specialGeneratorConfig() const; 2624{; 2625 return _specGeneratorConfig.get();; 2626}; 2627 ; 2628 ; 2629 ; 2630////////////////////////////////////////////////////////////////////////////////; 2631/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2632/// If this object has no specialized configuration, a null pointer is returned,; 2633/// unless createOnTheFly is true in which case a clone of the default integrator; 2634/// configuration is created, installed as specialized configuration, and returned; 2635 ; 2636RooNumGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooA",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:125729,Deployability,configurat,configuration,125729,"01 RooArgSet cexl;; 2602 conParams.selectCommon(constrainedParams, cexl);; 2603 cexl.remove(pdfParams,true,true) ;; 2604 constrainedParams.remove(cexl,true,true) ;; 2605 ; 2606 return finalConstraints ;; 2607}; 2608 ; 2609 ; 2610////////////////////////////////////////////////////////////////////////////////; 2611/// Returns the default numeric MC generator configuration for all RooAbsReals; 2612 ; 2613RooNumGenConfig* RooAbsPdf::defaultGeneratorConfig(); 2614{; 2615 return &RooNumGenConfig::defaultConfig() ;; 2616}; 2617 ; 2618 ; 2619////////////////////////////////////////////////////////////////////////////////; 2620/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2621/// If this object has no specialized configuration, a null pointer is returned; 2622 ; 2623RooNumGenConfig* RooAbsPdf::specialGeneratorConfig() const; 2624{; 2625 return _specGeneratorConfig.get();; 2626}; 2627 ; 2628 ; 2629 ; 2630////////////////////////////////////////////////////////////////////////////////; 2631/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2632/// If this object has no specialized configuration, a null pointer is returned,; 2633/// unless createOnTheFly is true in which case a clone of the default integrator; 2634/// configuration is created, installed as specialized configuration, and returned; 2635 ; 2636RooNumGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooA",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:125809,Deployability,configurat,configuration,125809,"on for all RooAbsReals; 2612 ; 2613RooNumGenConfig* RooAbsPdf::defaultGeneratorConfig(); 2614{; 2615 return &RooNumGenConfig::defaultConfig() ;; 2616}; 2617 ; 2618 ; 2619////////////////////////////////////////////////////////////////////////////////; 2620/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2621/// If this object has no specialized configuration, a null pointer is returned; 2622 ; 2623RooNumGenConfig* RooAbsPdf::specialGeneratorConfig() const; 2624{; 2625 return _specGeneratorConfig.get();; 2626}; 2627 ; 2628 ; 2629 ; 2630////////////////////////////////////////////////////////////////////////////////; 2631/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2632/// If this object has no specialized configuration, a null pointer is returned,; 2633/// unless createOnTheFly is true in which case a clone of the default integrator; 2634/// configuration is created, installed as specialized configuration, and returned; 2635 ; 2636RooNumGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooAbsReals is returned; 2650 ; 2651const RooNumGenConfig* RooAbsPdf::getGeneratorConfig() const; 2652{; 2653 const RooNumGenConfig* config = specialGeneratorConfig() ;; 2654 if (config) return config ;; 2655 return defaultGeneratorConfig() ;; 2656}; 2657 ; 2658 ; 2659 ; 2660////////////////////////////////////////////////////////////////////////////////; 2661/// Set the ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:125928,Deployability,integrat,integrator,125928,"on for all RooAbsReals; 2612 ; 2613RooNumGenConfig* RooAbsPdf::defaultGeneratorConfig(); 2614{; 2615 return &RooNumGenConfig::defaultConfig() ;; 2616}; 2617 ; 2618 ; 2619////////////////////////////////////////////////////////////////////////////////; 2620/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2621/// If this object has no specialized configuration, a null pointer is returned; 2622 ; 2623RooNumGenConfig* RooAbsPdf::specialGeneratorConfig() const; 2624{; 2625 return _specGeneratorConfig.get();; 2626}; 2627 ; 2628 ; 2629 ; 2630////////////////////////////////////////////////////////////////////////////////; 2631/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2632/// If this object has no specialized configuration, a null pointer is returned,; 2633/// unless createOnTheFly is true in which case a clone of the default integrator; 2634/// configuration is created, installed as specialized configuration, and returned; 2635 ; 2636RooNumGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooAbsReals is returned; 2650 ; 2651const RooNumGenConfig* RooAbsPdf::getGeneratorConfig() const; 2652{; 2653 const RooNumGenConfig* config = specialGeneratorConfig() ;; 2654 if (config) return config ;; 2655 return defaultGeneratorConfig() ;; 2656}; 2657 ; 2658 ; 2659 ; 2660////////////////////////////////////////////////////////////////////////////////; 2661/// Set the ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:125948,Deployability,configurat,configuration,125948,"on for all RooAbsReals; 2612 ; 2613RooNumGenConfig* RooAbsPdf::defaultGeneratorConfig(); 2614{; 2615 return &RooNumGenConfig::defaultConfig() ;; 2616}; 2617 ; 2618 ; 2619////////////////////////////////////////////////////////////////////////////////; 2620/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2621/// If this object has no specialized configuration, a null pointer is returned; 2622 ; 2623RooNumGenConfig* RooAbsPdf::specialGeneratorConfig() const; 2624{; 2625 return _specGeneratorConfig.get();; 2626}; 2627 ; 2628 ; 2629 ; 2630////////////////////////////////////////////////////////////////////////////////; 2631/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2632/// If this object has no specialized configuration, a null pointer is returned,; 2633/// unless createOnTheFly is true in which case a clone of the default integrator; 2634/// configuration is created, installed as specialized configuration, and returned; 2635 ; 2636RooNumGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooAbsReals is returned; 2650 ; 2651const RooNumGenConfig* RooAbsPdf::getGeneratorConfig() const; 2652{; 2653 const RooNumGenConfig* config = specialGeneratorConfig() ;; 2654 if (config) return config ;; 2655 return defaultGeneratorConfig() ;; 2656}; 2657 ; 2658 ; 2659 ; 2660////////////////////////////////////////////////////////////////////////////////; 2661/// Set the ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:125974,Deployability,install,installed,125974,"on for all RooAbsReals; 2612 ; 2613RooNumGenConfig* RooAbsPdf::defaultGeneratorConfig(); 2614{; 2615 return &RooNumGenConfig::defaultConfig() ;; 2616}; 2617 ; 2618 ; 2619////////////////////////////////////////////////////////////////////////////////; 2620/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2621/// If this object has no specialized configuration, a null pointer is returned; 2622 ; 2623RooNumGenConfig* RooAbsPdf::specialGeneratorConfig() const; 2624{; 2625 return _specGeneratorConfig.get();; 2626}; 2627 ; 2628 ; 2629 ; 2630////////////////////////////////////////////////////////////////////////////////; 2631/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2632/// If this object has no specialized configuration, a null pointer is returned,; 2633/// unless createOnTheFly is true in which case a clone of the default integrator; 2634/// configuration is created, installed as specialized configuration, and returned; 2635 ; 2636RooNumGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooAbsReals is returned; 2650 ; 2651const RooNumGenConfig* RooAbsPdf::getGeneratorConfig() const; 2652{; 2653 const RooNumGenConfig* config = specialGeneratorConfig() ;; 2654 if (config) return config ;; 2655 return defaultGeneratorConfig() ;; 2656}; 2657 ; 2658 ; 2659 ; 2660////////////////////////////////////////////////////////////////////////////////; 2661/// Set the ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:125999,Deployability,configurat,configuration,125999,"on for all RooAbsReals; 2612 ; 2613RooNumGenConfig* RooAbsPdf::defaultGeneratorConfig(); 2614{; 2615 return &RooNumGenConfig::defaultConfig() ;; 2616}; 2617 ; 2618 ; 2619////////////////////////////////////////////////////////////////////////////////; 2620/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2621/// If this object has no specialized configuration, a null pointer is returned; 2622 ; 2623RooNumGenConfig* RooAbsPdf::specialGeneratorConfig() const; 2624{; 2625 return _specGeneratorConfig.get();; 2626}; 2627 ; 2628 ; 2629 ; 2630////////////////////////////////////////////////////////////////////////////////; 2631/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2632/// If this object has no specialized configuration, a null pointer is returned,; 2633/// unless createOnTheFly is true in which case a clone of the default integrator; 2634/// configuration is created, installed as specialized configuration, and returned; 2635 ; 2636RooNumGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooAbsReals is returned; 2650 ; 2651const RooNumGenConfig* RooAbsPdf::getGeneratorConfig() const; 2652{; 2653 const RooNumGenConfig* config = specialGeneratorConfig() ;; 2654 if (config) return config ;; 2655 return defaultGeneratorConfig() ;; 2656}; 2657 ; 2658 ; 2659 ; 2660////////////////////////////////////////////////////////////////////////////////; 2661/// Set the ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:126467,Deployability,configurat,configuration,126467,"alized configuration, a null pointer is returned; 2622 ; 2623RooNumGenConfig* RooAbsPdf::specialGeneratorConfig() const; 2624{; 2625 return _specGeneratorConfig.get();; 2626}; 2627 ; 2628 ; 2629 ; 2630////////////////////////////////////////////////////////////////////////////////; 2631/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2632/// If this object has no specialized configuration, a null pointer is returned,; 2633/// unless createOnTheFly is true in which case a clone of the default integrator; 2634/// configuration is created, installed as specialized configuration, and returned; 2635 ; 2636RooNumGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooAbsReals is returned; 2650 ; 2651const RooNumGenConfig* RooAbsPdf::getGeneratorConfig() const; 2652{; 2653 const RooNumGenConfig* config = specialGeneratorConfig() ;; 2654 if (config) return config ;; 2655 return defaultGeneratorConfig() ;; 2656}; 2657 ; 2658 ; 2659 ; 2660////////////////////////////////////////////////////////////////////////////////; 2661/// Set the given configuration as default numeric MC generator; 2662/// configuration for this object; 2663 ; 2664void RooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); 2665{; 2666 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(config);; 2667}; 2668 ; 2669 ; 2670 ; 2671////////////////////////////////////////////////////////////////////////////////; 2672//",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:126529,Deployability,configurat,configuration,126529,"umGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooAbsReals is returned; 2650 ; 2651const RooNumGenConfig* RooAbsPdf::getGeneratorConfig() const; 2652{; 2653 const RooNumGenConfig* config = specialGeneratorConfig() ;; 2654 if (config) return config ;; 2655 return defaultGeneratorConfig() ;; 2656}; 2657 ; 2658 ; 2659 ; 2660////////////////////////////////////////////////////////////////////////////////; 2661/// Set the given configuration as default numeric MC generator; 2662/// configuration for this object; 2663 ; 2664void RooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); 2665{; 2666 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(config);; 2667}; 2668 ; 2669 ; 2670 ; 2671////////////////////////////////////////////////////////////////////////////////; 2672/// Remove the specialized numeric MC generator configuration associated; 2673/// with this object; 2674 ; 2675void RooAbsPdf::setGeneratorConfig(); 2676{; 2677 _specGeneratorConfig.reset();; 2678}; 2679 ; 2680RooAbsPdf::GenSpec::~GenSpec() = default;; 2681 ; 2682 ; 2683////////////////////////////////////////////////////////////////////////////////; 2684 ; 2685RooAbsPdf::GenSpec::GenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen,; 2686 bool extended, bool randProto, bool resampleProto, TString dsetName, bool init) :; 2687 _genContext(context), _whatVars(whatVars), _protoData(protoData), ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:126581,Deployability,configurat,configuration,126581,"umGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooAbsReals is returned; 2650 ; 2651const RooNumGenConfig* RooAbsPdf::getGeneratorConfig() const; 2652{; 2653 const RooNumGenConfig* config = specialGeneratorConfig() ;; 2654 if (config) return config ;; 2655 return defaultGeneratorConfig() ;; 2656}; 2657 ; 2658 ; 2659 ; 2660////////////////////////////////////////////////////////////////////////////////; 2661/// Set the given configuration as default numeric MC generator; 2662/// configuration for this object; 2663 ; 2664void RooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); 2665{; 2666 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(config);; 2667}; 2668 ; 2669 ; 2670 ; 2671////////////////////////////////////////////////////////////////////////////////; 2672/// Remove the specialized numeric MC generator configuration associated; 2673/// with this object; 2674 ; 2675void RooAbsPdf::setGeneratorConfig(); 2676{; 2677 _specGeneratorConfig.reset();; 2678}; 2679 ; 2680RooAbsPdf::GenSpec::~GenSpec() = default;; 2681 ; 2682 ; 2683////////////////////////////////////////////////////////////////////////////////; 2684 ; 2685RooAbsPdf::GenSpec::GenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen,; 2686 bool extended, bool randProto, bool resampleProto, TString dsetName, bool init) :; 2687 _genContext(context), _whatVars(whatVars), _protoData(protoData), ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:126639,Deployability,configurat,configuration,126639,"umGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooAbsReals is returned; 2650 ; 2651const RooNumGenConfig* RooAbsPdf::getGeneratorConfig() const; 2652{; 2653 const RooNumGenConfig* config = specialGeneratorConfig() ;; 2654 if (config) return config ;; 2655 return defaultGeneratorConfig() ;; 2656}; 2657 ; 2658 ; 2659 ; 2660////////////////////////////////////////////////////////////////////////////////; 2661/// Set the given configuration as default numeric MC generator; 2662/// configuration for this object; 2663 ; 2664void RooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); 2665{; 2666 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(config);; 2667}; 2668 ; 2669 ; 2670 ; 2671////////////////////////////////////////////////////////////////////////////////; 2672/// Remove the specialized numeric MC generator configuration associated; 2673/// with this object; 2674 ; 2675void RooAbsPdf::setGeneratorConfig(); 2676{; 2677 _specGeneratorConfig.reset();; 2678}; 2679 ; 2680RooAbsPdf::GenSpec::~GenSpec() = default;; 2681 ; 2682 ; 2683////////////////////////////////////////////////////////////////////////////////; 2684 ; 2685RooAbsPdf::GenSpec::GenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen,; 2686 bool extended, bool randProto, bool resampleProto, TString dsetName, bool init) :; 2687 _genContext(context), _whatVars(whatVars), _protoData(protoData), ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:127041,Deployability,configurat,configuration,127041,"umGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooAbsReals is returned; 2650 ; 2651const RooNumGenConfig* RooAbsPdf::getGeneratorConfig() const; 2652{; 2653 const RooNumGenConfig* config = specialGeneratorConfig() ;; 2654 if (config) return config ;; 2655 return defaultGeneratorConfig() ;; 2656}; 2657 ; 2658 ; 2659 ; 2660////////////////////////////////////////////////////////////////////////////////; 2661/// Set the given configuration as default numeric MC generator; 2662/// configuration for this object; 2663 ; 2664void RooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); 2665{; 2666 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(config);; 2667}; 2668 ; 2669 ; 2670 ; 2671////////////////////////////////////////////////////////////////////////////////; 2672/// Remove the specialized numeric MC generator configuration associated; 2673/// with this object; 2674 ; 2675void RooAbsPdf::setGeneratorConfig(); 2676{; 2677 _specGeneratorConfig.reset();; 2678}; 2679 ; 2680RooAbsPdf::GenSpec::~GenSpec() = default;; 2681 ; 2682 ; 2683////////////////////////////////////////////////////////////////////////////////; 2684 ; 2685RooAbsPdf::GenSpec::GenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen,; 2686 bool extended, bool randProto, bool resampleProto, TString dsetName, bool init) :; 2687 _genContext(context), _whatVars(whatVars), _protoData(protoData), ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:127096,Deployability,configurat,configuration,127096,"umGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooAbsReals is returned; 2650 ; 2651const RooNumGenConfig* RooAbsPdf::getGeneratorConfig() const; 2652{; 2653 const RooNumGenConfig* config = specialGeneratorConfig() ;; 2654 if (config) return config ;; 2655 return defaultGeneratorConfig() ;; 2656}; 2657 ; 2658 ; 2659 ; 2660////////////////////////////////////////////////////////////////////////////////; 2661/// Set the given configuration as default numeric MC generator; 2662/// configuration for this object; 2663 ; 2664void RooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); 2665{; 2666 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(config);; 2667}; 2668 ; 2669 ; 2670 ; 2671////////////////////////////////////////////////////////////////////////////////; 2672/// Remove the specialized numeric MC generator configuration associated; 2673/// with this object; 2674 ; 2675void RooAbsPdf::setGeneratorConfig(); 2676{; 2677 _specGeneratorConfig.reset();; 2678}; 2679 ; 2680RooAbsPdf::GenSpec::~GenSpec() = default;; 2681 ; 2682 ; 2683////////////////////////////////////////////////////////////////////////////////; 2684 ; 2685RooAbsPdf::GenSpec::GenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen,; 2686 bool extended, bool randProto, bool resampleProto, TString dsetName, bool init) :; 2687 _genContext(context), _whatVars(whatVars), _protoData(protoData), ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:127450,Deployability,configurat,configuration,127450,"umGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooAbsReals is returned; 2650 ; 2651const RooNumGenConfig* RooAbsPdf::getGeneratorConfig() const; 2652{; 2653 const RooNumGenConfig* config = specialGeneratorConfig() ;; 2654 if (config) return config ;; 2655 return defaultGeneratorConfig() ;; 2656}; 2657 ; 2658 ; 2659 ; 2660////////////////////////////////////////////////////////////////////////////////; 2661/// Set the given configuration as default numeric MC generator; 2662/// configuration for this object; 2663 ; 2664void RooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); 2665{; 2666 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(config);; 2667}; 2668 ; 2669 ; 2670 ; 2671////////////////////////////////////////////////////////////////////////////////; 2672/// Remove the specialized numeric MC generator configuration associated; 2673/// with this object; 2674 ; 2675void RooAbsPdf::setGeneratorConfig(); 2676{; 2677 _specGeneratorConfig.reset();; 2678}; 2679 ; 2680RooAbsPdf::GenSpec::~GenSpec() = default;; 2681 ; 2682 ; 2683////////////////////////////////////////////////////////////////////////////////; 2684 ; 2685RooAbsPdf::GenSpec::GenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen,; 2686 bool extended, bool randProto, bool resampleProto, TString dsetName, bool init) :; 2687 _genContext(context), _whatVars(whatVars), _protoData(protoData), ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:143776,Deployability,configurat,configuration,143776,"RooAbsPdf::GenSpec::_resampleProtobool _resampleProtoDefinition RooAbsPdf.h:89; RooAbsPdf::GenSpec::_protoDataRooDataSet * _protoDataDefinition RooAbsPdf.h:85; RooAbsPdfAbstract interface for all probability density functions.Definition RooAbsPdf.h:40; RooAbsPdf::syncNormalizationvirtual bool syncNormalization(const RooArgSet *dset, bool adjustProxies=true) constVerify that the normalization integral cached with this PDF is valid for given set of normalization o...Definition RooAbsPdf.cxx:481; RooAbsPdf::getNormdouble getNorm(const RooArgSet &nset) constGet normalisation term needed to normalise the raw values returned by getVal().Definition RooAbsPdf.h:195; RooAbsPdf::compileForNormSetstd::unique_ptr< RooAbsArg > compileForNormSet(RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const overrideDefinition RooAbsPdf.cxx:2788; RooAbsPdf::_normMgrRooObjCacheManager _normMgrDefinition RooAbsPdf.h:329; RooAbsPdf::_specGeneratorConfigstd::unique_ptr< RooNumGenConfig > _specGeneratorConfig! MC generator configuration specific for this objectDefinition RooAbsPdf.h:340; RooAbsPdf::getValVdouble getValV(const RooArgSet *set=nullptr) const overrideReturn current value, normalized by integrating over the observables in nset.Definition RooAbsPdf.cxx:319; RooAbsPdf::fitToImplvirtual std::unique_ptr< RooFitResult > fitToImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the likelihood fitting routine.Definition RooAbsPdf.cxx:1072; RooAbsPdf::generateEventvirtual void generateEvent(Int_t code)Interface for generation of an event using the algorithm corresponding to the specified code.Definition RooAbsPdf.cxx:1544; RooAbsPdf::createScanCdfRooFit::OwningPtr< RooAbsReal > createScanCdf(const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder)Definition RooAbsPdf.cxx:2545; RooAbsPdf::setGeneratorConfigvoid setGeneratorConfig()Remove the specialized numeric MC generator configuration associated with this object.Definition R",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:143955,Deployability,integrat,integrating,143955,"bsPdfAbstract interface for all probability density functions.Definition RooAbsPdf.h:40; RooAbsPdf::syncNormalizationvirtual bool syncNormalization(const RooArgSet *dset, bool adjustProxies=true) constVerify that the normalization integral cached with this PDF is valid for given set of normalization o...Definition RooAbsPdf.cxx:481; RooAbsPdf::getNormdouble getNorm(const RooArgSet &nset) constGet normalisation term needed to normalise the raw values returned by getVal().Definition RooAbsPdf.h:195; RooAbsPdf::compileForNormSetstd::unique_ptr< RooAbsArg > compileForNormSet(RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const overrideDefinition RooAbsPdf.cxx:2788; RooAbsPdf::_normMgrRooObjCacheManager _normMgrDefinition RooAbsPdf.h:329; RooAbsPdf::_specGeneratorConfigstd::unique_ptr< RooNumGenConfig > _specGeneratorConfig! MC generator configuration specific for this objectDefinition RooAbsPdf.h:340; RooAbsPdf::getValVdouble getValV(const RooArgSet *set=nullptr) const overrideReturn current value, normalized by integrating over the observables in nset.Definition RooAbsPdf.cxx:319; RooAbsPdf::fitToImplvirtual std::unique_ptr< RooFitResult > fitToImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the likelihood fitting routine.Definition RooAbsPdf.cxx:1072; RooAbsPdf::generateEventvirtual void generateEvent(Int_t code)Interface for generation of an event using the algorithm corresponding to the specified code.Definition RooAbsPdf.cxx:1544; RooAbsPdf::createScanCdfRooFit::OwningPtr< RooAbsReal > createScanCdf(const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder)Definition RooAbsPdf.cxx:2545; RooAbsPdf::setGeneratorConfigvoid setGeneratorConfig()Remove the specialized numeric MC generator configuration associated with this object.Definition RooAbsPdf.cxx:2675; RooAbsPdf::resetErrorCountersvirtual void resetErrorCounters(Int_t resetValue=10)Reset error counter to given value, limiting the number of futur",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:144698,Deployability,configurat,configuration,144698,"df.h:329; RooAbsPdf::_specGeneratorConfigstd::unique_ptr< RooNumGenConfig > _specGeneratorConfig! MC generator configuration specific for this objectDefinition RooAbsPdf.h:340; RooAbsPdf::getValVdouble getValV(const RooArgSet *set=nullptr) const overrideReturn current value, normalized by integrating over the observables in nset.Definition RooAbsPdf.cxx:319; RooAbsPdf::fitToImplvirtual std::unique_ptr< RooFitResult > fitToImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the likelihood fitting routine.Definition RooAbsPdf.cxx:1072; RooAbsPdf::generateEventvirtual void generateEvent(Int_t code)Interface for generation of an event using the algorithm corresponding to the specified code.Definition RooAbsPdf.cxx:1544; RooAbsPdf::createScanCdfRooFit::OwningPtr< RooAbsReal > createScanCdf(const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder)Definition RooAbsPdf.cxx:2545; RooAbsPdf::setGeneratorConfigvoid setGeneratorConfig()Remove the specialized numeric MC generator configuration associated with this object.Definition RooAbsPdf.cxx:2675; RooAbsPdf::resetErrorCountersvirtual void resetErrorCounters(Int_t resetValue=10)Reset error counter to given value, limiting the number of future error messages for this pdf to 'res...Definition RooAbsPdf.cxx:586; RooAbsPdf::verboseEvalstatic int verboseEval()Return global level of verbosity for p.d.f. evaluations.Definition RooAbsPdf.cxx:2418; RooAbsPdf::createCdfRooFit::OwningPtr< RooAbsReal > createCdf(const RooArgSet &iset, const RooArgSet &nset=RooArgSet())Create a cumulative distribution function of this p.d.f in terms of the observables listed in iset.Definition RooAbsPdf.cxx:2468; RooAbsPdf::isActiveNormSetbool isActiveNormSet(RooArgSet const *normSet) constChecks if normSet is the currently active normalization set of this PDF, meaning is exactly the same ...Definition RooAbsPdf.h:299; RooAbsPdf::expectedEventsvirtual double expectedEvents(const RooArgSet *nset) constRetu",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:147277,Deployability,integrat,integrator,147277,"ooAbsPdf.cxx:1557; RooAbsPdf::randomizeProtoOrderInt_t * randomizeProtoOrder(Int_t nProto, Int_t nGen, bool resample=false) constReturn lookup table with randomized order for nProto prototype events.Definition RooAbsPdf.cxx:1485; RooAbsPdf::setNormRangevoid setNormRange(const char *rangeName)Definition RooAbsPdf.cxx:2726; RooAbsPdf::~RooAbsPdf~RooAbsPdf() overrideDestructor.Definition RooAbsPdf.cxx:277; RooAbsPdf::_normSetRooArgSet const * _normSetNormalization integral (owned by _normMgr)Definition RooAbsPdf.h:320; RooAbsPdf::plotOnRooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const overrideHelper calling plotOn(RooPlot*, RooLinkedList&) const.Definition RooAbsPdf.h:124; RooAbsPdf::specialGeneratorConfigRooNumGenConfig * specialGeneratorConfig() constReturns the specialized integrator configuration for this RooAbsReal.Definition RooAbsPdf.cxx:2623; RooAbsPdf::selfNormalizedvirtual bool selfNormalized() constShows if a PDF is self-normalized, which means that no attempt is made to add a normalization term.Definition RooAbsPdf.h:207; RooAbsPdf::printMultilinevoid printMultiline(std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const overridePrint multi line detailed information of this RooAbsPdf.Definition RooAbsPdf.cxx:1100; RooAbsPdf::_traceCountInt_t _traceCountNumber of traces remaining to print.Definition RooAbsPdf.h:335; RooAbsPdf::canBeExtendedbool canBeExtended() constIf true, PDF can provide extended likelihood term.Definition RooAbsPdf.h:218; RooAbsPdf::_normRooAbsReal * _normDefinition RooAbsPdf.h:319; RooAbsPdf::setTraceCountervoid setTraceCounter(Int_t value, bool allNodes=false)Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'val...Definiti",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:147288,Deployability,configurat,configuration,147288,"ooAbsPdf.cxx:1557; RooAbsPdf::randomizeProtoOrderInt_t * randomizeProtoOrder(Int_t nProto, Int_t nGen, bool resample=false) constReturn lookup table with randomized order for nProto prototype events.Definition RooAbsPdf.cxx:1485; RooAbsPdf::setNormRangevoid setNormRange(const char *rangeName)Definition RooAbsPdf.cxx:2726; RooAbsPdf::~RooAbsPdf~RooAbsPdf() overrideDestructor.Definition RooAbsPdf.cxx:277; RooAbsPdf::_normSetRooArgSet const * _normSetNormalization integral (owned by _normMgr)Definition RooAbsPdf.h:320; RooAbsPdf::plotOnRooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const overrideHelper calling plotOn(RooPlot*, RooLinkedList&) const.Definition RooAbsPdf.h:124; RooAbsPdf::specialGeneratorConfigRooNumGenConfig * specialGeneratorConfig() constReturns the specialized integrator configuration for this RooAbsReal.Definition RooAbsPdf.cxx:2623; RooAbsPdf::selfNormalizedvirtual bool selfNormalized() constShows if a PDF is self-normalized, which means that no attempt is made to add a normalization term.Definition RooAbsPdf.h:207; RooAbsPdf::printMultilinevoid printMultiline(std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const overridePrint multi line detailed information of this RooAbsPdf.Definition RooAbsPdf.cxx:1100; RooAbsPdf::_traceCountInt_t _traceCountNumber of traces remaining to print.Definition RooAbsPdf.h:335; RooAbsPdf::canBeExtendedbool canBeExtended() constIf true, PDF can provide extended likelihood term.Definition RooAbsPdf.h:218; RooAbsPdf::_normRooAbsReal * _normDefinition RooAbsPdf.h:319; RooAbsPdf::setTraceCountervoid setTraceCounter(Int_t value, bool allNodes=false)Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'val...Definiti",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:148516,Deployability,configurat,configuration,148516,"s self-normalized, which means that no attempt is made to add a normalization term.Definition RooAbsPdf.h:207; RooAbsPdf::printMultilinevoid printMultiline(std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const overridePrint multi line detailed information of this RooAbsPdf.Definition RooAbsPdf.cxx:1100; RooAbsPdf::_traceCountInt_t _traceCountNumber of traces remaining to print.Definition RooAbsPdf.h:335; RooAbsPdf::canBeExtendedbool canBeExtended() constIf true, PDF can provide extended likelihood term.Definition RooAbsPdf.h:218; RooAbsPdf::_normRooAbsReal * _normDefinition RooAbsPdf.h:319; RooAbsPdf::setTraceCountervoid setTraceCounter(Int_t value, bool allNodes=false)Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'val...Definition RooAbsPdf.cxx:598; RooAbsPdf::prepareMultiGenGenSpec * prepareMultiGen(const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={})Prepare GenSpec configuration object for efficient generation of multiple datasets from identical spe...Definition RooAbsPdf.cxx:1299; RooAbsPdf::_errorCountInt_t _errorCountNumber of errors remaining to print.Definition RooAbsPdf.h:334; RooAbsPdf::CanNotBeExtended@ CanNotBeExtendedDefinition RooAbsPdf.h:212; RooAbsPdf::createExpectedEventsFuncvirtual std::unique_ptr< RooAbsReal > createExpectedEventsFunc(const RooArgSet *nset) constReturns an object that represents the expected number of events for a given normalization set,...Definition RooAbsPdf.cxx:2812; RooAbsPdf::paramOnvirtual RooPlot * paramOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={})Add a box with parameter values (and errors) to the specified frame.Definition RooAbsPdf.cxx:2285;",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:151756,Deployability,configurat,configuration,151756,"RooAbsPdf.cxx:2746; RooAbsPdf::generateSimGlobalvirtual RooFit::OwningPtr< RooDataSet > generateSimGlobal(const RooArgSet &whatVars, Int_t nEvents)Special generator interface for generation of 'global observables' – for RooStats tools.Definition RooAbsPdf.cxx:1799; RooAbsPdf::normalizeWithNaNPackingdouble normalizeWithNaNPacking(double rawVal, double normVal) constDefinition RooAbsPdf.cxx:282; RooAbsPdf::autoGenContextvirtual RooAbsGenContext * autoGenContext(const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") constDefinition RooAbsPdf.cxx:1136; RooAbsPdf::getAllConstraintsRooArgSet * getAllConstraints(const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) constThis helper function finds and collects all constraints terms of all component p.d....Definition RooAbsPdf.cxx:2562; RooAbsPdf::getGeneratorConfigconst RooNumGenConfig * getGeneratorConfig() constReturn the numeric MC generator configuration used for this object.Definition RooAbsPdf.cxx:2651; RooAbsPdf::initGeneratorvirtual void initGenerator(Int_t code)Interface for one-time initialization to setup the generator for the specified code.Definition RooAbsPdf.cxx:1532; RooAbsPdf::extendModevirtual ExtendMode extendMode() constReturns ability of PDF to provide extended likelihood terms.Definition RooAbsPdf.h:216; RooAbsPdf::RooAbsPdfRooAbsPdf()Default constructor.Definition RooAbsPdf.cxx:230; RooAbsPdf::generateBinnedvirtual RooFit::OwningPtr< RooDataHist > generateBinned(const RooArgSet &whatVars, double nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}) constAs RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,...Definition RooAbsPdf.h:110; RooAbsPdf::traceEvalPdfbool traceEvalPdf(double value) constCheck that passed value is positive and n",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:152884,Deployability,configurat,configuration,152884,"itGeneratorvirtual void initGenerator(Int_t code)Interface for one-time initialization to setup the generator for the specified code.Definition RooAbsPdf.cxx:1532; RooAbsPdf::extendModevirtual ExtendMode extendMode() constReturns ability of PDF to provide extended likelihood terms.Definition RooAbsPdf.h:216; RooAbsPdf::RooAbsPdfRooAbsPdf()Default constructor.Definition RooAbsPdf.cxx:230; RooAbsPdf::generateBinnedvirtual RooFit::OwningPtr< RooDataHist > generateBinned(const RooArgSet &whatVars, double nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}) constAs RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,...Definition RooAbsPdf.h:110; RooAbsPdf::traceEvalPdfbool traceEvalPdf(double value) constCheck that passed value is positive and not 'not-a-number'.Definition RooAbsPdf.cxx:384; RooAbsPdf::defaultGeneratorConfigstatic RooNumGenConfig * defaultGeneratorConfig()Returns the default numeric MC generator configuration for all RooAbsReals.Definition RooAbsPdf.cxx:2613; RooAbsPdf::redirectServersHookbool redirectServersHook(const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) overrideThe cache manager.Definition RooAbsPdf.cxx:2768; RooAbsPdf::printValuevoid printValue(std::ostream &os) const overridePrint value of p.d.f, also print normalization integral that was last used, if any.Definition RooAbsPdf.cxx:1081; RooAbsPdf::createNLLImplvirtual std::unique_ptr< RooAbsReal > createNLLImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the NLL creation routine.Definition RooAbsPdf.cxx:941; RooAbsPdf::logBatchComputationErrorsvoid logBatchComputationErrors(std::span< const double > &outputs, std::size_t begin) constScan through outputs and fix+log all nans and negative values.Definition RooAbsPdf.cxx:654; RooAbsPdf::genContextvirtual RooAbsGenContext * genContext(const Ro",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:154920,Deployability,integrat,integrated,154920,"alse) constInterface function to create a generator context from a p.d.f.Definition RooAbsPdf.cxx:1127; RooAbsPdf::getLogProbabilitiesvoid getLogProbabilities(std::span< const double > pdfValues, double *output) constDefinition RooAbsPdf.cxx:671; RooAbsPdf::_normRangeOverridestatic TString _normRangeOverrideDefinition RooAbsPdf.h:343; RooAbsPdf::_verboseEvalstatic Int_t _verboseEvalDefinition RooAbsPdf.h:314; RooAbsPdf::extendedTermdouble extendedTerm(double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) constDefinition RooAbsPdf.cxx:730; RooAbsPdf::getGeneratorvirtual Int_t getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) constLoad generatedVars with the subset of directVars that we can generate events for, and return a code t...Definition RooAbsPdf.cxx:1522; RooAbsPdf::createProjectionvirtual RooAbsPdf * createProjection(const RooArgSet &iset)Return a p.d.f that represent a projection of this p.d.f integrated over given observables.Definition RooAbsPdf.cxx:2446; RooAbsPdf::getLogValvirtual double getLogVal(const RooArgSet *set=nullptr) constReturn the log of the current value with given normalization An error message is printed if the argum...Definition RooAbsPdf.cxx:620; RooAbsRealLValue::hasRangebool hasRange(const char *name) const overrideCheck if variable has a binning with given name.Definition RooAbsRealLValue.h:97; RooAbsRealLValue::getRangestd::pair< double, double > getRange(const char *name=nullptr) constGet low and high bound of the variable.Definition RooAbsRealLValue.h:88; RooAbsRealAbstract base class for objects that represent a real value and implements functionality common to al...Definition RooAbsReal.h:59; RooAbsReal::fillDataHistRooDataHist * fillDataHist(RooDataHist *hist, const RooArgSet *nset, double scaleFactor, bool correctForBinVolume=false, bool showProgress=false) constFill a RooDataHist with values sampled from this function at the bin centers.Definition RooAbsReal.",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:158179,Deployability,integrat,integrated,158179,"r plotOn(), perform general sanity check on frame to ensure safe plotting operatio...Definition RooAbsReal.cxx:2860; RooAbsReal::printMultilinevoid printMultiline(std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const overrideStructure printing.Definition RooAbsReal.cxx:455; RooAbsReal::redirectServersHookbool redirectServersHook(const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) overrideFunction that is called at the end of redirectServers().Definition RooAbsReal.cxx:4474; RooAbsReal::_valuedouble _valueCache for current value of object.Definition RooAbsReal.h:536; RooAbsReal::analyticalIntegralvirtual double analyticalIntegral(Int_t code, const char *rangeName=nullptr) constImplements the actual analytical integral(s) advertised by getAnalyticalIntegral.Definition RooAbsReal.cxx:394; RooAbsReal::integralNameSuffixTString integralNameSuffix(const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) constConstruct string with unique suffix name to give to integral object that encodes integrated observabl...Definition RooAbsReal.cxx:755; RooAbsReal::evaluatevirtual double evaluate() const =0Evaluate this PDF / function / constant. Needs to be overridden by all derived classes.; RooAbsReal::logEvalErrorvoid logEvalError(const char *message, const char *serverValueString=nullptr) constLog evaluation error message.Definition RooAbsReal.cxx:3464; RooAbsReal::getIntegratorConfigconst RooNumIntConfig * getIntegratorConfig() constReturn the numeric integration configuration used for this object.Definition RooAbsReal.cxx:3309; RooAbsReal::isBinnedDistributionvirtual bool isBinnedDistribution(const RooArgSet &) constTests if the distribution is binned. Unless overridden by derived classes, this always returns false.Definition RooAbsReal.h:346; RooAbsReal::createIntRIRooFit::OwningPtr< RooAbsReal > createIntRI(const RooArgSet &iset, const RooArgSet &nset={})U",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:158645,Deployability,integrat,integration,158645,"oAbsReal::_valuedouble _valueCache for current value of object.Definition RooAbsReal.h:536; RooAbsReal::analyticalIntegralvirtual double analyticalIntegral(Int_t code, const char *rangeName=nullptr) constImplements the actual analytical integral(s) advertised by getAnalyticalIntegral.Definition RooAbsReal.cxx:394; RooAbsReal::integralNameSuffixTString integralNameSuffix(const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) constConstruct string with unique suffix name to give to integral object that encodes integrated observabl...Definition RooAbsReal.cxx:755; RooAbsReal::evaluatevirtual double evaluate() const =0Evaluate this PDF / function / constant. Needs to be overridden by all derived classes.; RooAbsReal::logEvalErrorvoid logEvalError(const char *message, const char *serverValueString=nullptr) constLog evaluation error message.Definition RooAbsReal.cxx:3464; RooAbsReal::getIntegratorConfigconst RooNumIntConfig * getIntegratorConfig() constReturn the numeric integration configuration used for this object.Definition RooAbsReal.cxx:3309; RooAbsReal::isBinnedDistributionvirtual bool isBinnedDistribution(const RooArgSet &) constTests if the distribution is binned. Unless overridden by derived classes, this always returns false.Definition RooAbsReal.h:346; RooAbsReal::createIntRIRooFit::OwningPtr< RooAbsReal > createIntRI(const RooArgSet &iset, const RooArgSet &nset={})Utility function for createRunningIntegral.Definition RooAbsReal.cxx:3827; RooAbsReal::plotOnvirtual RooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) constPlot (project) PDF on specified frame.Definition RooAbsReal.cxx:1611; RooArgListRooArgList is a container object that can hold multiple RooAbsArg objects.",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:158657,Deployability,configurat,configuration,158657,"oAbsReal::_valuedouble _valueCache for current value of object.Definition RooAbsReal.h:536; RooAbsReal::analyticalIntegralvirtual double analyticalIntegral(Int_t code, const char *rangeName=nullptr) constImplements the actual analytical integral(s) advertised by getAnalyticalIntegral.Definition RooAbsReal.cxx:394; RooAbsReal::integralNameSuffixTString integralNameSuffix(const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) constConstruct string with unique suffix name to give to integral object that encodes integrated observabl...Definition RooAbsReal.cxx:755; RooAbsReal::evaluatevirtual double evaluate() const =0Evaluate this PDF / function / constant. Needs to be overridden by all derived classes.; RooAbsReal::logEvalErrorvoid logEvalError(const char *message, const char *serverValueString=nullptr) constLog evaluation error message.Definition RooAbsReal.cxx:3464; RooAbsReal::getIntegratorConfigconst RooNumIntConfig * getIntegratorConfig() constReturn the numeric integration configuration used for this object.Definition RooAbsReal.cxx:3309; RooAbsReal::isBinnedDistributionvirtual bool isBinnedDistribution(const RooArgSet &) constTests if the distribution is binned. Unless overridden by derived classes, this always returns false.Definition RooAbsReal.h:346; RooAbsReal::createIntRIRooFit::OwningPtr< RooAbsReal > createIntRI(const RooArgSet &iset, const RooArgSet &nset={})Utility function for createRunningIntegral.Definition RooAbsReal.cxx:3827; RooAbsReal::plotOnvirtual RooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) constPlot (project) PDF on specified frame.Definition RooAbsReal.cxx:1611; RooArgListRooArgList is a container object that can hold multiple RooAbsArg objects.",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:160368,Deployability,integrat,integration,160368,"Arg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) constPlot (project) PDF on specified frame.Definition RooAbsReal.cxx:1611; RooArgListRooArgList is a container object that can hold multiple RooAbsArg objects.Definition RooArgList.h:22; RooArgSetRooArgSet is a container object that can hold multiple RooAbsArg objects.Definition RooArgSet.h:24; RooArgSet::selectByNameRooArgSet * selectByName(const char *nameList, bool verbose=false) constUse RooAbsCollection::selectByName(), but return as RooArgSet.Definition RooArgSet.h:144; RooArgSet::selectCommonRooArgSet * selectCommon(const RooAbsCollection &refColl) constUse RooAbsCollection::selecCommon(), but return as RooArgSet.Definition RooArgSet.h:149; RooBinnedGenContextEfficient implementation of the generator context specific for binned pdfs.Definition RooBinnedGenContext.h:26; RooCacheManager::setObjInt_t setObj(const RooArgSet *nset, T *obj, const TNamed *isetRangeName=nullptr)Setter function without integration set.Definition RooCacheManager.h:50; RooCacheManager::getObjT * getObj(const RooArgSet *nset, Int_t *sterileIndex=nullptr, const TNamed *isetRangeName=nullptr)Getter function without integration set.Definition RooCacheManager.h:45; RooCachedRealImplementation of RooAbsCachedReal that can cache any external RooAbsReal input function provided in ...Definition RooCachedReal.h:20; RooCachedReal::setCacheSourcevoid setCacheSource(bool flag)Definition RooCachedReal.h:43; RooCmdArgNamed container for two doubles, two integers two object points and three string pointers that can be...Definition RooCmdArg.h:26; RooCmdArg::setStringvoid setString(Int_t idx, const char *value)Definition RooCmdArg.h:78; RooCmdConfigConfigurable parser for RooCmdArg named arguments.Definition RooCmdConfig.h:32; RooCmdConfig::defineMutexvoid defineMutex(const char *head, Args_t &&... tail)Define arguments where any pair is mutually exclusive.Defin",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:160563,Deployability,integrat,integration,160563,"e.Definition RooAbsReal.cxx:1611; RooArgListRooArgList is a container object that can hold multiple RooAbsArg objects.Definition RooArgList.h:22; RooArgSetRooArgSet is a container object that can hold multiple RooAbsArg objects.Definition RooArgSet.h:24; RooArgSet::selectByNameRooArgSet * selectByName(const char *nameList, bool verbose=false) constUse RooAbsCollection::selectByName(), but return as RooArgSet.Definition RooArgSet.h:144; RooArgSet::selectCommonRooArgSet * selectCommon(const RooAbsCollection &refColl) constUse RooAbsCollection::selecCommon(), but return as RooArgSet.Definition RooArgSet.h:149; RooBinnedGenContextEfficient implementation of the generator context specific for binned pdfs.Definition RooBinnedGenContext.h:26; RooCacheManager::setObjInt_t setObj(const RooArgSet *nset, T *obj, const TNamed *isetRangeName=nullptr)Setter function without integration set.Definition RooCacheManager.h:50; RooCacheManager::getObjT * getObj(const RooArgSet *nset, Int_t *sterileIndex=nullptr, const TNamed *isetRangeName=nullptr)Getter function without integration set.Definition RooCacheManager.h:45; RooCachedRealImplementation of RooAbsCachedReal that can cache any external RooAbsReal input function provided in ...Definition RooCachedReal.h:20; RooCachedReal::setCacheSourcevoid setCacheSource(bool flag)Definition RooCachedReal.h:43; RooCmdArgNamed container for two doubles, two integers two object points and three string pointers that can be...Definition RooCmdArg.h:26; RooCmdArg::setStringvoid setString(Int_t idx, const char *value)Definition RooCmdArg.h:78; RooCmdConfigConfigurable parser for RooCmdArg named arguments.Definition RooCmdConfig.h:32; RooCmdConfig::defineMutexvoid defineMutex(const char *head, Args_t &&... tail)Define arguments where any pair is mutually exclusive.Definition RooCmdConfig.h:153; RooCmdConfig::processbool process(const RooCmdArg &arg)Process given RooCmdArg.Definition RooCmdConfig.cxx:311; RooCmdConfig::hasProcessedbool hasProcessed(con",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:165583,Deployability,configurat,configuration,165583,"it::Detail::CompileContext::compileServersvoid compileServers(RooAbsArg &arg, RooArgSet const &normSet)Definition NormalizationHelpers.cxx:39; RooGenContextImplements a universal generator context for all RooAbsPdf classes that do not have or need a special...Definition RooGenContext.h:29; RooHelpers::LocalChangeMsgLevelSwitches the message service to a different level while the instance is alive.Definition RooHelpers.h:37; RooLinkedListCollection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list...Definition RooLinkedList.h:44; RooLinkedList::Addvirtual void Add(TObject *arg)Definition RooLinkedList.h:73; RooLinkedList::FindObjectTObject * FindObject(const char *name) const overrideReturn pointer to object with given name.Definition RooLinkedList.cxx:534; RooNameReg::strstatic const char * str(const TNamed *ptr)Return C++ string corresponding to given TNamed pointer.Definition RooNameReg.h:39; RooNumGenConfigHolds the configuration parameters of the various numeric integrators used by RooRealIntegral.Definition RooNumGenConfig.h:25; RooNumGenConfig::defaultConfigstatic RooNumGenConfig & defaultConfig()Return reference to instance of default numeric integrator configuration object.Definition RooNumGenConfig.cxx:44; RooObjCacheManagerImplementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elem...Definition RooObjCacheManager.h:29; RooObjCacheManager::sterilizevoid sterilize() overrideClear the cache payload but retain slot mapping w.r.t to normalization and integration sets.Definition RooObjCacheManager.cxx:152; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::addObjectvoid addObject(TObject *obj, Option_t *drawOptions="""", bool invisible=false)Add a generic object to this plot.Definition RooPlot.cxx:366; RooPlot::getFitRangeNEvtdouble getFitRangeNEvt() constReturn the number of events in the fit range.Definition RooPlot.h:145; Roo",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:165631,Deployability,integrat,integrators,165631,"it::Detail::CompileContext::compileServersvoid compileServers(RooAbsArg &arg, RooArgSet const &normSet)Definition NormalizationHelpers.cxx:39; RooGenContextImplements a universal generator context for all RooAbsPdf classes that do not have or need a special...Definition RooGenContext.h:29; RooHelpers::LocalChangeMsgLevelSwitches the message service to a different level while the instance is alive.Definition RooHelpers.h:37; RooLinkedListCollection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list...Definition RooLinkedList.h:44; RooLinkedList::Addvirtual void Add(TObject *arg)Definition RooLinkedList.h:73; RooLinkedList::FindObjectTObject * FindObject(const char *name) const overrideReturn pointer to object with given name.Definition RooLinkedList.cxx:534; RooNameReg::strstatic const char * str(const TNamed *ptr)Return C++ string corresponding to given TNamed pointer.Definition RooNameReg.h:39; RooNumGenConfigHolds the configuration parameters of the various numeric integrators used by RooRealIntegral.Definition RooNumGenConfig.h:25; RooNumGenConfig::defaultConfigstatic RooNumGenConfig & defaultConfig()Return reference to instance of default numeric integrator configuration object.Definition RooNumGenConfig.cxx:44; RooObjCacheManagerImplementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elem...Definition RooObjCacheManager.h:29; RooObjCacheManager::sterilizevoid sterilize() overrideClear the cache payload but retain slot mapping w.r.t to normalization and integration sets.Definition RooObjCacheManager.cxx:152; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::addObjectvoid addObject(TObject *obj, Option_t *drawOptions="""", bool invisible=false)Add a generic object to this plot.Definition RooPlot.cxx:366; RooPlot::getFitRangeNEvtdouble getFitRangeNEvt() constReturn the number of events in the fit range.Definition RooPlot.h:145; Roo",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:165818,Deployability,integrat,integrator,165818,"nts a universal generator context for all RooAbsPdf classes that do not have or need a special...Definition RooGenContext.h:29; RooHelpers::LocalChangeMsgLevelSwitches the message service to a different level while the instance is alive.Definition RooHelpers.h:37; RooLinkedListCollection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list...Definition RooLinkedList.h:44; RooLinkedList::Addvirtual void Add(TObject *arg)Definition RooLinkedList.h:73; RooLinkedList::FindObjectTObject * FindObject(const char *name) const overrideReturn pointer to object with given name.Definition RooLinkedList.cxx:534; RooNameReg::strstatic const char * str(const TNamed *ptr)Return C++ string corresponding to given TNamed pointer.Definition RooNameReg.h:39; RooNumGenConfigHolds the configuration parameters of the various numeric integrators used by RooRealIntegral.Definition RooNumGenConfig.h:25; RooNumGenConfig::defaultConfigstatic RooNumGenConfig & defaultConfig()Return reference to instance of default numeric integrator configuration object.Definition RooNumGenConfig.cxx:44; RooObjCacheManagerImplementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elem...Definition RooObjCacheManager.h:29; RooObjCacheManager::sterilizevoid sterilize() overrideClear the cache payload but retain slot mapping w.r.t to normalization and integration sets.Definition RooObjCacheManager.cxx:152; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::addObjectvoid addObject(TObject *obj, Option_t *drawOptions="""", bool invisible=false)Add a generic object to this plot.Definition RooPlot.cxx:366; RooPlot::getFitRangeNEvtdouble getFitRangeNEvt() constReturn the number of events in the fit range.Definition RooPlot.h:145; RooPlot::getNormVarsconst RooArgSet * getNormVars() constDefinition RooPlot.h:152; RooPlot::getPlotVarRooAbsRealLValue * getPlotVar() constDefinition RooPlot.h:143; ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:165829,Deployability,configurat,configuration,165829,"nts a universal generator context for all RooAbsPdf classes that do not have or need a special...Definition RooGenContext.h:29; RooHelpers::LocalChangeMsgLevelSwitches the message service to a different level while the instance is alive.Definition RooHelpers.h:37; RooLinkedListCollection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list...Definition RooLinkedList.h:44; RooLinkedList::Addvirtual void Add(TObject *arg)Definition RooLinkedList.h:73; RooLinkedList::FindObjectTObject * FindObject(const char *name) const overrideReturn pointer to object with given name.Definition RooLinkedList.cxx:534; RooNameReg::strstatic const char * str(const TNamed *ptr)Return C++ string corresponding to given TNamed pointer.Definition RooNameReg.h:39; RooNumGenConfigHolds the configuration parameters of the various numeric integrators used by RooRealIntegral.Definition RooNumGenConfig.h:25; RooNumGenConfig::defaultConfigstatic RooNumGenConfig & defaultConfig()Return reference to instance of default numeric integrator configuration object.Definition RooNumGenConfig.cxx:44; RooObjCacheManagerImplementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elem...Definition RooObjCacheManager.h:29; RooObjCacheManager::sterilizevoid sterilize() overrideClear the cache payload but retain slot mapping w.r.t to normalization and integration sets.Definition RooObjCacheManager.cxx:152; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::addObjectvoid addObject(TObject *obj, Option_t *drawOptions="""", bool invisible=false)Add a generic object to this plot.Definition RooPlot.cxx:366; RooPlot::getFitRangeNEvtdouble getFitRangeNEvt() constReturn the number of events in the fit range.Definition RooPlot.h:145; RooPlot::getNormVarsconst RooArgSet * getNormVars() constDefinition RooPlot.h:152; RooPlot::getPlotVarRooAbsRealLValue * getPlotVar() constDefinition RooPlot.h:143; ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:166172,Deployability,integrat,integration,166172,"inkedList.h:44; RooLinkedList::Addvirtual void Add(TObject *arg)Definition RooLinkedList.h:73; RooLinkedList::FindObjectTObject * FindObject(const char *name) const overrideReturn pointer to object with given name.Definition RooLinkedList.cxx:534; RooNameReg::strstatic const char * str(const TNamed *ptr)Return C++ string corresponding to given TNamed pointer.Definition RooNameReg.h:39; RooNumGenConfigHolds the configuration parameters of the various numeric integrators used by RooRealIntegral.Definition RooNumGenConfig.h:25; RooNumGenConfig::defaultConfigstatic RooNumGenConfig & defaultConfig()Return reference to instance of default numeric integrator configuration object.Definition RooNumGenConfig.cxx:44; RooObjCacheManagerImplementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elem...Definition RooObjCacheManager.h:29; RooObjCacheManager::sterilizevoid sterilize() overrideClear the cache payload but retain slot mapping w.r.t to normalization and integration sets.Definition RooObjCacheManager.cxx:152; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::addObjectvoid addObject(TObject *obj, Option_t *drawOptions="""", bool invisible=false)Add a generic object to this plot.Definition RooPlot.cxx:366; RooPlot::getFitRangeNEvtdouble getFitRangeNEvt() constReturn the number of events in the fit range.Definition RooPlot.h:145; RooPlot::getNormVarsconst RooArgSet * getNormVars() constDefinition RooPlot.h:152; RooPlot::getPlotVarRooAbsRealLValue * getPlotVar() constDefinition RooPlot.h:143; RooPlot::updateNormVarsvoid updateNormVars(const RooArgSet &vars)Install the given set of observables are reference normalization variables for this frame.Definition RooPlot.cxx:351; RooPlot::getFitRangeBinWdouble getFitRangeBinW() constReturn the bin width that is being used to normalise the PDF.Definition RooPlot.h:148; RooPrintable::kSingleLine@ kSingleLineDefinition RooPrintable.h:34; RooPr",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:166781,Deployability,update,updateNormVarsvoid,166781,"ect.Definition RooNumGenConfig.cxx:44; RooObjCacheManagerImplementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elem...Definition RooObjCacheManager.h:29; RooObjCacheManager::sterilizevoid sterilize() overrideClear the cache payload but retain slot mapping w.r.t to normalization and integration sets.Definition RooObjCacheManager.cxx:152; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::addObjectvoid addObject(TObject *obj, Option_t *drawOptions="""", bool invisible=false)Add a generic object to this plot.Definition RooPlot.cxx:366; RooPlot::getFitRangeNEvtdouble getFitRangeNEvt() constReturn the number of events in the fit range.Definition RooPlot.h:145; RooPlot::getNormVarsconst RooArgSet * getNormVars() constDefinition RooPlot.h:152; RooPlot::getPlotVarRooAbsRealLValue * getPlotVar() constDefinition RooPlot.h:143; RooPlot::updateNormVarsvoid updateNormVars(const RooArgSet &vars)Install the given set of observables are reference normalization variables for this frame.Definition RooPlot.cxx:351; RooPlot::getFitRangeBinWdouble getFitRangeBinW() constReturn the bin width that is being used to normalise the PDF.Definition RooPlot.h:148; RooPrintable::kSingleLine@ kSingleLineDefinition RooPrintable.h:34; RooPrintable::kName@ kNameDefinition RooPrintable.h:33; RooPrintable::kAddress@ kAddressDefinition RooPrintable.h:33; RooPrintable::kValue@ kValueDefinition RooPrintable.h:33; RooPrintable::kArgs@ kArgsDefinition RooPrintable.h:33; RooPrintable::kTitle@ kTitleDefinition RooPrintable.h:33; RooPrintable::printStreamvirtual void printStream(std::ostream &os, Int_t contents, StyleOption style, TString indent="""") constPrint description of object on ostream, printing contents set by contents integer,...Definition RooPrintable.cxx:72; RooProjectedPdfA RooAbsPdf implementation that represent a projection of a given input p.d.f and the object returned...Definition RooProjectedPdf.h:",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:166800,Deployability,update,updateNormVars,166800,"ect.Definition RooNumGenConfig.cxx:44; RooObjCacheManagerImplementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elem...Definition RooObjCacheManager.h:29; RooObjCacheManager::sterilizevoid sterilize() overrideClear the cache payload but retain slot mapping w.r.t to normalization and integration sets.Definition RooObjCacheManager.cxx:152; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::addObjectvoid addObject(TObject *obj, Option_t *drawOptions="""", bool invisible=false)Add a generic object to this plot.Definition RooPlot.cxx:366; RooPlot::getFitRangeNEvtdouble getFitRangeNEvt() constReturn the number of events in the fit range.Definition RooPlot.h:145; RooPlot::getNormVarsconst RooArgSet * getNormVars() constDefinition RooPlot.h:152; RooPlot::getPlotVarRooAbsRealLValue * getPlotVar() constDefinition RooPlot.h:143; RooPlot::updateNormVarsvoid updateNormVars(const RooArgSet &vars)Install the given set of observables are reference normalization variables for this frame.Definition RooPlot.cxx:351; RooPlot::getFitRangeBinWdouble getFitRangeBinW() constReturn the bin width that is being used to normalise the PDF.Definition RooPlot.h:148; RooPrintable::kSingleLine@ kSingleLineDefinition RooPrintable.h:34; RooPrintable::kName@ kNameDefinition RooPrintable.h:33; RooPrintable::kAddress@ kAddressDefinition RooPrintable.h:33; RooPrintable::kValue@ kValueDefinition RooPrintable.h:33; RooPrintable::kArgs@ kArgsDefinition RooPrintable.h:33; RooPrintable::kTitle@ kTitleDefinition RooPrintable.h:33; RooPrintable::printStreamvirtual void printStream(std::ostream &os, Int_t contents, StyleOption style, TString indent="""") constPrint description of object on ostream, printing contents set by contents integer,...Definition RooPrintable.cxx:72; RooProjectedPdfA RooAbsPdf implementation that represent a projection of a given input p.d.f and the object returned...Definition RooProjectedPdf.h:",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:5000,Energy Efficiency,efficient,efficient,5000,"an analytically; 78integrate to `anaIntSet`, and return a unique identification code for; 79this integration configuration. If no integration can be; 80performed, zero should be returned. Second,; 81 ; 82```; 83double analyticalIntegral(Int_t code); 84```; 85 ; 86implements the actual analytical integral(s) advertised by; 87`getAnalyticalIntegral()`. This function will only be called with; 88codes returned by `getAnalyticalIntegral()`, except code zero.; 89 ; 90The integration range for each dependent to be integrated can; 91be obtained from the dependent's proxy functions `min()` and; 92`max()`. Never call these proxy functions for any proxy not known to; 93be a dependent via the integration code. Doing so may be; 94ill-defined, e.g., in case the proxy holds a function, and will; 95trigger an assert. Integrated category dependents should always be; 96summed over all of their states.; 97 ; 98 ; 99 ; 100### Direct generation of observables; 101 ; 102Distributions for any PDF can be generated with the accept/reject method,; 103but for certain PDFs, more efficient methods may be implemented. To; 104implement direct generation of one or more observables, two; 105functions need to be implemented, similar to those for analytical; 106integrals:; 107 ; 108```; 109Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); 110```; 111and; 112```; 113void generateEvent(Int_t code); 114```; 115 ; 116The first function advertises observables, for which distributions can be generated,; 117similar to the way analytical integrals are advertised. The second; 118function implements the actual generator for the advertised observables.; 119 ; 120The generated dependent values should be stored in the proxy; 121objects. For this, the assignment operator can be used (i.e. `xProxy; 122= 3.0` ). Never call assign to any proxy not known to be a dependent; 123via the generation code. Doing so may be ill-defined, e.g. in case; 124the proxy holds a function, and will trigger an as",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:41303,Energy Efficiency,reduce,reduces,41303,"the given tagName.; 902 * <tr><td> `Verbose(bool flag)` <td> Controls RooFit informational messages in likelihood construction; 903 * <tr><td> `CloneData(bool flag)` <td> Use clone of dataset in NLL (default is true).; 904 * \warning Deprecated option that is ignored. It is up to the implementation of the NLL creation method if the data is cloned or not.; 905 * <tr><td> `Offset(std::string const& mode)` <td> Likelihood offsetting mode. Can be either:; 906 * <table>; 907 * <tr><th> Mode <th> Description; 908 * <tr><td> **none** - *default* <td> No offsetting.; 909 * <tr><td> **initial** <td> Offset likelihood by initial value (so that starting value of FCN in minuit is zero).; 910 * This can improve numeric stability in simultaneous fits with components with large likelihood values.; 911 * <tr><td> **bin** <td> Offset likelihood bin-by-bin with a template histogram model based on the obersved data.; 912 * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; 913 * which can drastically improve numeric stability.; 914 * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; 915 * </table>; 916 * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; 917 * This can reduce the bias observed when fitting functions with high curvature to binned data.; 918 * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; 919 * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; 920 * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; 921 * has to be manipulated directly.; 922 * - precision = 0: Activate bin integration ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:41728,Energy Efficiency,reduce,reduce,41728,"6 * <table>; 907 * <tr><th> Mode <th> Description; 908 * <tr><td> **none** - *default* <td> No offsetting.; 909 * <tr><td> **initial** <td> Offset likelihood by initial value (so that starting value of FCN in minuit is zero).; 910 * This can improve numeric stability in simultaneous fits with components with large likelihood values.; 911 * <tr><td> **bin** <td> Offset likelihood bin-by-bin with a template histogram model based on the obersved data.; 912 * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; 913 * which can drastically improve numeric stability.; 914 * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; 915 * </table>; 916 * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; 917 * This can reduce the bias observed when fitting functions with high curvature to binned data.; 918 * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; 919 * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; 920 * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; 921 * has to be manipulated directly.; 922 * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; 923 * - precision < 0: Deactivate.; 924 * \see RooBinSamplingPdf; 925 * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; 926 * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this; 927 * should be set to true for parallel minimization of likelihoods!; 928 * Note t",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:49973,Energy Efficiency,consumption,consumption,49973,"oticError()` <td> Use the asymptotically correct approach to estimate errors in the presence of weights.; 1025 * This is slower but more accurate than `SumW2Error`. See also https://arxiv.org/abs/1911.01303).; 1026 This option even correctly implements the case of extended likelihood fits; 1027 (see this [writeup on extended weighted fits](https://root.cern/files/extended_weighted_fits.pdf) that complements the paper linked before).; 1028 * <tr><td> `PrefitDataFraction(double fraction)`; 1029 * <td> Runs a prefit on a small dataset of size fraction*(actual data size). This can speed up fits; 1030 * by finding good starting values for the parameters for the actual fit.; 1031 * \warning Prefitting may give bad results when used in binned analysis.; 1032 *; 1033 * <tr><th><th> Options to control informational output; 1034 * <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit).; 1035 * <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default.; 1036 * <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 to 3, default is 1). At -1 all RooFit informational messages are suppressed as well.; 1037 * See RooMinimizer::PrintLevel for the meaning of the levels.; 1038 * <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); 1039 * <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per likelihood evaluation.; 1040 * A negative value suppresses output completely, a zero value will only print the error count per p.d.f component,; 1041 * a positive value will print details of each error up to `numErr` messages per p.d.f component.; 1042 * <tr><td> `Parallelize(Int_t nWorkers)` <td> Control global parallelization settings. Arguments 1 and above enable the use of RooFit's parallel minimization; 1043 * backend and uses the number given as the number of workers to use in the parallelization. -1",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:66107,Energy Efficiency,efficient,efficient,66107,"uments; 1326 RooDataSet* protoData = static_cast<RooDataSet*>(pc.getObject(""proto"",nullptr)) ;; 1327 const char* dsetName = pc.getString(""dsetName"") ;; 1328 Int_t nEvents = pc.getInt(""nEvents"") ;; 1329 bool verbose = pc.getInt(""verbose"") ;; 1330 bool randProto = pc.getInt(""randProto"") ;; 1331 bool resampleProto = pc.getInt(""resampleProto"") ;; 1332 bool extended = pc.getInt(""extended"") ;; 1333 bool autoBinned = pc.getInt(""autoBinned"") ;; 1334 const char* binnedTag = pc.getString(""binnedTag"") ;; 1335 ; 1336 RooAbsGenContext* cx = autoGenContext(whatVars,protoData,nullptr,verbose,autoBinned,binnedTag) ;; 1337 ; 1338 return new GenSpec(cx,whatVars,protoData,nEvents,extended,randProto,resampleProto,dsetName) ;; 1339}; 1340 ; 1341 ; 1342////////////////////////////////////////////////////////////////////////////////; 1343/// If many identical generation requests; 1344/// are needed, e.g. in toy MC studies, it is more efficient to use the prepareMultiGen()/generate(); 1345/// combination than calling the standard generate() multiple times as; 1346/// initialization overhead is only incurred once.; 1347 ; 1348RooFit::OwningPtr<RooDataSet> RooAbsPdf::generate(RooAbsPdf::GenSpec& spec) const; 1349{; 1350 //Int_t nEvt = spec._extended ? RooRandom::randomGenerator()->Poisson(spec._nGen) : spec._nGen ;; 1351 //Int_t nEvt = spec._extended ? RooRandom::randomGenerator()->Poisson(spec._nGen==0?expectedEvents(spec._whatVars):spec._nGen) : spec._nGen ;; 1352 //Int_t nEvt = spec._nGen == 0 ? RooRandom::randomGenerator()->Poisson(expectedEvents(spec._whatVars)) : spec._nGen;; 1353 ; 1354 double nEvt = spec._nGen == 0 ? expectedEvents(spec._whatVars) : spec._nGen;; 1355 ; 1356 std::unique_ptr<RooDataSet> ret{generate(*spec._genContext,spec._whatVars,spec._protoData, nEvt,false,spec._randProto,spec._resampleProto,; 1357 spec._init,spec._extended)};; 1358 spec._init = true ;; 1359 return RooFit::makeOwningPtr(std::move(ret));; 1360}; 1361 ; 1362 ; 1363 ; 1364 ; 1365 ; 1366////////////////",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:94489,Energy Efficiency,adapt,adaptive,94489,"t filled. If a filled style is selected,; 1912/// also use VLines() to add vertical downward lines at end of curve to ensure proper closure; 1913/// <tr><td> `FillColor(Int_t color)` <td> Select fill color by ROOT color code; 1914/// <tr><td> `Range(const char* name)` <td> Only draw curve in range defined by given name. Multiple comma-separated ranges can be given.; 1915/// An empty string """" or `nullptr` means to use the default range of the variable.; 1916/// <tr><td> `Range(double lo, double hi)` <td> Only draw curve in specified range; 1917/// <tr><td> `VLines()` <td> Add vertical lines to y=0 at end points of curve; 1918/// <tr><td> `Precision(double eps)` <td> Control precision of drawn curve w.r.t to scale of plot, default is 1e-3. A higher precision will; 1919/// result in more and more densely spaced curve points. A negative precision value will disable; 1920/// adaptive point spacing and restrict sampling to the grid point of points defined by the binning; 1921/// of the plotted observable (recommended for expensive functions such as profile likelihoods); 1922/// <tr><td> `Invisible(bool flag)` <td> Add curve to frame, but do not display. Useful in combination AddTo(); 1923/// <tr><td> `VisualizeError(const RooFitResult& fitres, double Z=1, bool linearMethod=true)`; 1924/// <td> Visualize the uncertainty on the parameters, as given in fitres, at 'Z' sigma.; 1925/// The linear method is fast but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made.; 1926/// Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much) longer to calculate; 1927/// \note To include the uncertainty from the expected number of events,; 1928/// the Normalization() argument with `ScaleType` `RooAbsReal::RelativeExpected` has to be passed, e.g.; 1929/// ```{.cpp}; 1930/// pdf.plotOn(frame, VisualizeError(fitResult), Normalization(1.0, R",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:148541,Energy Efficiency,efficient,efficient,148541,"s self-normalized, which means that no attempt is made to add a normalization term.Definition RooAbsPdf.h:207; RooAbsPdf::printMultilinevoid printMultiline(std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const overridePrint multi line detailed information of this RooAbsPdf.Definition RooAbsPdf.cxx:1100; RooAbsPdf::_traceCountInt_t _traceCountNumber of traces remaining to print.Definition RooAbsPdf.h:335; RooAbsPdf::canBeExtendedbool canBeExtended() constIf true, PDF can provide extended likelihood term.Definition RooAbsPdf.h:218; RooAbsPdf::_normRooAbsReal * _normDefinition RooAbsPdf.h:319; RooAbsPdf::setTraceCountervoid setTraceCounter(Int_t value, bool allNodes=false)Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'val...Definition RooAbsPdf.cxx:598; RooAbsPdf::prepareMultiGenGenSpec * prepareMultiGen(const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={})Prepare GenSpec configuration object for efficient generation of multiple datasets from identical spe...Definition RooAbsPdf.cxx:1299; RooAbsPdf::_errorCountInt_t _errorCountNumber of errors remaining to print.Definition RooAbsPdf.h:334; RooAbsPdf::CanNotBeExtended@ CanNotBeExtendedDefinition RooAbsPdf.h:212; RooAbsPdf::createExpectedEventsFuncvirtual std::unique_ptr< RooAbsReal > createExpectedEventsFunc(const RooArgSet *nset) constReturns an object that represents the expected number of events for a given normalization set,...Definition RooAbsPdf.cxx:2812; RooAbsPdf::paramOnvirtual RooPlot * paramOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={})Add a box with parameter values (and errors) to the specified frame.Definition RooAbsPdf.cxx:2285;",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:1075,Integrability,interface,interface,1075,". ROOT: roofit/roofitcore/src/RooAbsPdf.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. RooAbsPdf.cxx. Go to the documentation of this file. 1/*****************************************************************************; 2 * Project: RooFit *; 3 * Package: RooFitCore *; 4 * @(#)root/roofitcore:$Id$; 5 * Authors: *; 6 * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; 7 * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; 8 * *; 9 * Copyright (c) 2000-2005, Regents of the University of California *; 10 * and Stanford University. All rights reserved. *; 11 * *; 12 * Redistribution and use in source and binary forms, *; 13 * with or without modification, are permitted according to the terms *; 14 * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; 15 *****************************************************************************/; 16 ; 17//////////////////////////////////////////////////////////////////////////////; 18/** \class RooAbsPdf; 19 \ingroup Roofitcore; 20 \brief Abstract interface for all probability density functions.; 21 ; 22## RooAbsPdf, the base class of all PDFs; 23 ; 24RooAbsPdf is the base class for all probability density; 25functions (PDFs). The class provides hybrid analytical/numerical; 26normalization for its implementations, error tracing, and a Monte Carlo; 27generator interface.; 28 ; 29### A Minimal PDF Implementation; 30 ; 31A minimal implementation of a PDF class derived from RooAbsPdf; 32should override the `evaluate()` function. This function should; 33return the PDF's value (which does not need to be normalised).; 34 ; 35 ; 36#### Normalization/Integration; 37 ; 38Although the normalization of a PDF is an integral part of a; 39probability density function, normalization is treated separately; 40in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; 41PDF: it can be a building block for a more complex composite PDF; 42if any of its variables are f",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:1393,Integrability,interface,interface,1393,"root/roofitcore:$Id$; 5 * Authors: *; 6 * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; 7 * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; 8 * *; 9 * Copyright (c) 2000-2005, Regents of the University of California *; 10 * and Stanford University. All rights reserved. *; 11 * *; 12 * Redistribution and use in source and binary forms, *; 13 * with or without modification, are permitted according to the terms *; 14 * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; 15 *****************************************************************************/; 16 ; 17//////////////////////////////////////////////////////////////////////////////; 18/** \class RooAbsPdf; 19 \ingroup Roofitcore; 20 \brief Abstract interface for all probability density functions.; 21 ; 22## RooAbsPdf, the base class of all PDFs; 23 ; 24RooAbsPdf is the base class for all probability density; 25functions (PDFs). The class provides hybrid analytical/numerical; 26normalization for its implementations, error tracing, and a Monte Carlo; 27generator interface.; 28 ; 29### A Minimal PDF Implementation; 30 ; 31A minimal implementation of a PDF class derived from RooAbsPdf; 32should override the `evaluate()` function. This function should; 33return the PDF's value (which does not need to be normalised).; 34 ; 35 ; 36#### Normalization/Integration; 37 ; 38Although the normalization of a PDF is an integral part of a; 39probability density function, normalization is treated separately; 40in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; 41PDF: it can be a building block for a more complex composite PDF; 42if any of its variables are functions instead of variables. In; 43such cases, the normalization of the composite PDF may not simply be; 44integral over the dependents of the top-level PDF: these are; 45functions with potentially non-trivial Jacobian terms themselves.; 46\note Therefore, no explicit attempt should be made to normalize the; 47function output",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:2128,Integrability,depend,dependents,2128,"RooAbsPdf, the base class of all PDFs; 23 ; 24RooAbsPdf is the base class for all probability density; 25functions (PDFs). The class provides hybrid analytical/numerical; 26normalization for its implementations, error tracing, and a Monte Carlo; 27generator interface.; 28 ; 29### A Minimal PDF Implementation; 30 ; 31A minimal implementation of a PDF class derived from RooAbsPdf; 32should override the `evaluate()` function. This function should; 33return the PDF's value (which does not need to be normalised).; 34 ; 35 ; 36#### Normalization/Integration; 37 ; 38Although the normalization of a PDF is an integral part of a; 39probability density function, normalization is treated separately; 40in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; 41PDF: it can be a building block for a more complex composite PDF; 42if any of its variables are functions instead of variables. In; 43such cases, the normalization of the composite PDF may not simply be; 44integral over the dependents of the top-level PDF: these are; 45functions with potentially non-trivial Jacobian terms themselves.; 46\note Therefore, no explicit attempt should be made to normalize the; 47function output in evaluate(). In particular, normalisation constants; 48can be omitted to speed up the function evaluations, and included later; 49in the integration of the PDF (see below), which is rarely called in; 50comparison to the `evaluate()` function.; 51 ; 52In addition, RooAbsPdf objects do not have a static concept of what; 53variables are parameters, and what variables are dependents (which; 54need to be integrated over for a correct PDF normalization).; 55Instead, the choice of normalization is always specified each time a; 56normalized value is requested from the PDF via the getVal(); 57method.; 58 ; 59RooAbsPdf manages the entire normalization logic of each PDF with; 60the help of a RooRealIntegral object, which coordinates the integration; 61of a given choice of normalization. By default, Roo",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:2470,Integrability,integrat,integration,2470,"al implementation of a PDF class derived from RooAbsPdf; 32should override the `evaluate()` function. This function should; 33return the PDF's value (which does not need to be normalised).; 34 ; 35 ; 36#### Normalization/Integration; 37 ; 38Although the normalization of a PDF is an integral part of a; 39probability density function, normalization is treated separately; 40in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; 41PDF: it can be a building block for a more complex composite PDF; 42if any of its variables are functions instead of variables. In; 43such cases, the normalization of the composite PDF may not simply be; 44integral over the dependents of the top-level PDF: these are; 45functions with potentially non-trivial Jacobian terms themselves.; 46\note Therefore, no explicit attempt should be made to normalize the; 47function output in evaluate(). In particular, normalisation constants; 48can be omitted to speed up the function evaluations, and included later; 49in the integration of the PDF (see below), which is rarely called in; 50comparison to the `evaluate()` function.; 51 ; 52In addition, RooAbsPdf objects do not have a static concept of what; 53variables are parameters, and what variables are dependents (which; 54need to be integrated over for a correct PDF normalization).; 55Instead, the choice of normalization is always specified each time a; 56normalized value is requested from the PDF via the getVal(); 57method.; 58 ; 59RooAbsPdf manages the entire normalization logic of each PDF with; 60the help of a RooRealIntegral object, which coordinates the integration; 61of a given choice of normalization. By default, RooRealIntegral will; 62perform an entirely numeric integration of all dependents. However,; 63PDFs can advertise one or more (partial) analytical integrals of; 64their function, and these will be used by RooRealIntegral, if it; 65determines that this is safe (i.e., no hidden Jacobian terms,; 66multiplication with other PDFs t",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:2704,Integrability,depend,dependents,2704,"/Integration; 37 ; 38Although the normalization of a PDF is an integral part of a; 39probability density function, normalization is treated separately; 40in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; 41PDF: it can be a building block for a more complex composite PDF; 42if any of its variables are functions instead of variables. In; 43such cases, the normalization of the composite PDF may not simply be; 44integral over the dependents of the top-level PDF: these are; 45functions with potentially non-trivial Jacobian terms themselves.; 46\note Therefore, no explicit attempt should be made to normalize the; 47function output in evaluate(). In particular, normalisation constants; 48can be omitted to speed up the function evaluations, and included later; 49in the integration of the PDF (see below), which is rarely called in; 50comparison to the `evaluate()` function.; 51 ; 52In addition, RooAbsPdf objects do not have a static concept of what; 53variables are parameters, and what variables are dependents (which; 54need to be integrated over for a correct PDF normalization).; 55Instead, the choice of normalization is always specified each time a; 56normalized value is requested from the PDF via the getVal(); 57method.; 58 ; 59RooAbsPdf manages the entire normalization logic of each PDF with; 60the help of a RooRealIntegral object, which coordinates the integration; 61of a given choice of normalization. By default, RooRealIntegral will; 62perform an entirely numeric integration of all dependents. However,; 63PDFs can advertise one or more (partial) analytical integrals of; 64their function, and these will be used by RooRealIntegral, if it; 65determines that this is safe (i.e., no hidden Jacobian terms,; 66multiplication with other PDFs that have one or more dependents in; 67common, etc).; 68 ; 69#### Implementing analytical integrals; 70To implement analytical integrals, two functions must be implemented. First,; 71 ; 72```; 73Int_t getAnalyticalIntegra",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:2736,Integrability,integrat,integrated,2736,"/Integration; 37 ; 38Although the normalization of a PDF is an integral part of a; 39probability density function, normalization is treated separately; 40in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; 41PDF: it can be a building block for a more complex composite PDF; 42if any of its variables are functions instead of variables. In; 43such cases, the normalization of the composite PDF may not simply be; 44integral over the dependents of the top-level PDF: these are; 45functions with potentially non-trivial Jacobian terms themselves.; 46\note Therefore, no explicit attempt should be made to normalize the; 47function output in evaluate(). In particular, normalisation constants; 48can be omitted to speed up the function evaluations, and included later; 49in the integration of the PDF (see below), which is rarely called in; 50comparison to the `evaluate()` function.; 51 ; 52In addition, RooAbsPdf objects do not have a static concept of what; 53variables are parameters, and what variables are dependents (which; 54need to be integrated over for a correct PDF normalization).; 55Instead, the choice of normalization is always specified each time a; 56normalized value is requested from the PDF via the getVal(); 57method.; 58 ; 59RooAbsPdf manages the entire normalization logic of each PDF with; 60the help of a RooRealIntegral object, which coordinates the integration; 61of a given choice of normalization. By default, RooRealIntegral will; 62perform an entirely numeric integration of all dependents. However,; 63PDFs can advertise one or more (partial) analytical integrals of; 64their function, and these will be used by RooRealIntegral, if it; 65determines that this is safe (i.e., no hidden Jacobian terms,; 66multiplication with other PDFs that have one or more dependents in; 67common, etc).; 68 ; 69#### Implementing analytical integrals; 70To implement analytical integrals, two functions must be implemented. First,; 71 ; 72```; 73Int_t getAnalyticalIntegra",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:3069,Integrability,integrat,integration,3069,"ables. In; 43such cases, the normalization of the composite PDF may not simply be; 44integral over the dependents of the top-level PDF: these are; 45functions with potentially non-trivial Jacobian terms themselves.; 46\note Therefore, no explicit attempt should be made to normalize the; 47function output in evaluate(). In particular, normalisation constants; 48can be omitted to speed up the function evaluations, and included later; 49in the integration of the PDF (see below), which is rarely called in; 50comparison to the `evaluate()` function.; 51 ; 52In addition, RooAbsPdf objects do not have a static concept of what; 53variables are parameters, and what variables are dependents (which; 54need to be integrated over for a correct PDF normalization).; 55Instead, the choice of normalization is always specified each time a; 56normalized value is requested from the PDF via the getVal(); 57method.; 58 ; 59RooAbsPdf manages the entire normalization logic of each PDF with; 60the help of a RooRealIntegral object, which coordinates the integration; 61of a given choice of normalization. By default, RooRealIntegral will; 62perform an entirely numeric integration of all dependents. However,; 63PDFs can advertise one or more (partial) analytical integrals of; 64their function, and these will be used by RooRealIntegral, if it; 65determines that this is safe (i.e., no hidden Jacobian terms,; 66multiplication with other PDFs that have one or more dependents in; 67common, etc).; 68 ; 69#### Implementing analytical integrals; 70To implement analytical integrals, two functions must be implemented. First,; 71 ; 72```; 73Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); 74```; 75should return the analytical integrals that are supported. `integSet`; 76is the set of dependents for which integration is requested. The; 77function should copy the subset of dependents it can analytically; 78integrate to `anaIntSet`, and return a unique identification code for; 79t",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:3184,Integrability,integrat,integration,3184," are; 45functions with potentially non-trivial Jacobian terms themselves.; 46\note Therefore, no explicit attempt should be made to normalize the; 47function output in evaluate(). In particular, normalisation constants; 48can be omitted to speed up the function evaluations, and included later; 49in the integration of the PDF (see below), which is rarely called in; 50comparison to the `evaluate()` function.; 51 ; 52In addition, RooAbsPdf objects do not have a static concept of what; 53variables are parameters, and what variables are dependents (which; 54need to be integrated over for a correct PDF normalization).; 55Instead, the choice of normalization is always specified each time a; 56normalized value is requested from the PDF via the getVal(); 57method.; 58 ; 59RooAbsPdf manages the entire normalization logic of each PDF with; 60the help of a RooRealIntegral object, which coordinates the integration; 61of a given choice of normalization. By default, RooRealIntegral will; 62perform an entirely numeric integration of all dependents. However,; 63PDFs can advertise one or more (partial) analytical integrals of; 64their function, and these will be used by RooRealIntegral, if it; 65determines that this is safe (i.e., no hidden Jacobian terms,; 66multiplication with other PDFs that have one or more dependents in; 67common, etc).; 68 ; 69#### Implementing analytical integrals; 70To implement analytical integrals, two functions must be implemented. First,; 71 ; 72```; 73Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); 74```; 75should return the analytical integrals that are supported. `integSet`; 76is the set of dependents for which integration is requested. The; 77function should copy the subset of dependents it can analytically; 78integrate to `anaIntSet`, and return a unique identification code for; 79this integration configuration. If no integration can be; 80performed, zero should be returned. Second,; 81 ; 82```; 83double analyticalIntegra",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:3203,Integrability,depend,dependents,3203," are; 45functions with potentially non-trivial Jacobian terms themselves.; 46\note Therefore, no explicit attempt should be made to normalize the; 47function output in evaluate(). In particular, normalisation constants; 48can be omitted to speed up the function evaluations, and included later; 49in the integration of the PDF (see below), which is rarely called in; 50comparison to the `evaluate()` function.; 51 ; 52In addition, RooAbsPdf objects do not have a static concept of what; 53variables are parameters, and what variables are dependents (which; 54need to be integrated over for a correct PDF normalization).; 55Instead, the choice of normalization is always specified each time a; 56normalized value is requested from the PDF via the getVal(); 57method.; 58 ; 59RooAbsPdf manages the entire normalization logic of each PDF with; 60the help of a RooRealIntegral object, which coordinates the integration; 61of a given choice of normalization. By default, RooRealIntegral will; 62perform an entirely numeric integration of all dependents. However,; 63PDFs can advertise one or more (partial) analytical integrals of; 64their function, and these will be used by RooRealIntegral, if it; 65determines that this is safe (i.e., no hidden Jacobian terms,; 66multiplication with other PDFs that have one or more dependents in; 67common, etc).; 68 ; 69#### Implementing analytical integrals; 70To implement analytical integrals, two functions must be implemented. First,; 71 ; 72```; 73Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); 74```; 75should return the analytical integrals that are supported. `integSet`; 76is the set of dependents for which integration is requested. The; 77function should copy the subset of dependents it can analytically; 78integrate to `anaIntSet`, and return a unique identification code for; 79this integration configuration. If no integration can be; 80performed, zero should be returned. Second,; 81 ; 82```; 83double analyticalIntegra",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:3481,Integrability,depend,dependents,3481,"later; 49in the integration of the PDF (see below), which is rarely called in; 50comparison to the `evaluate()` function.; 51 ; 52In addition, RooAbsPdf objects do not have a static concept of what; 53variables are parameters, and what variables are dependents (which; 54need to be integrated over for a correct PDF normalization).; 55Instead, the choice of normalization is always specified each time a; 56normalized value is requested from the PDF via the getVal(); 57method.; 58 ; 59RooAbsPdf manages the entire normalization logic of each PDF with; 60the help of a RooRealIntegral object, which coordinates the integration; 61of a given choice of normalization. By default, RooRealIntegral will; 62perform an entirely numeric integration of all dependents. However,; 63PDFs can advertise one or more (partial) analytical integrals of; 64their function, and these will be used by RooRealIntegral, if it; 65determines that this is safe (i.e., no hidden Jacobian terms,; 66multiplication with other PDFs that have one or more dependents in; 67common, etc).; 68 ; 69#### Implementing analytical integrals; 70To implement analytical integrals, two functions must be implemented. First,; 71 ; 72```; 73Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); 74```; 75should return the analytical integrals that are supported. `integSet`; 76is the set of dependents for which integration is requested. The; 77function should copy the subset of dependents it can analytically; 78integrate to `anaIntSet`, and return a unique identification code for; 79this integration configuration. If no integration can be; 80performed, zero should be returned. Second,; 81 ; 82```; 83double analyticalIntegral(Int_t code); 84```; 85 ; 86implements the actual analytical integral(s) advertised by; 87`getAnalyticalIntegral()`. This function will only be called with; 88codes returned by `getAnalyticalIntegral()`, except code zero.; 89 ; 90The integration range for each dependent to be integrate",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:3828,Integrability,depend,dependents,3828,"specified each time a; 56normalized value is requested from the PDF via the getVal(); 57method.; 58 ; 59RooAbsPdf manages the entire normalization logic of each PDF with; 60the help of a RooRealIntegral object, which coordinates the integration; 61of a given choice of normalization. By default, RooRealIntegral will; 62perform an entirely numeric integration of all dependents. However,; 63PDFs can advertise one or more (partial) analytical integrals of; 64their function, and these will be used by RooRealIntegral, if it; 65determines that this is safe (i.e., no hidden Jacobian terms,; 66multiplication with other PDFs that have one or more dependents in; 67common, etc).; 68 ; 69#### Implementing analytical integrals; 70To implement analytical integrals, two functions must be implemented. First,; 71 ; 72```; 73Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); 74```; 75should return the analytical integrals that are supported. `integSet`; 76is the set of dependents for which integration is requested. The; 77function should copy the subset of dependents it can analytically; 78integrate to `anaIntSet`, and return a unique identification code for; 79this integration configuration. If no integration can be; 80performed, zero should be returned. Second,; 81 ; 82```; 83double analyticalIntegral(Int_t code); 84```; 85 ; 86implements the actual analytical integral(s) advertised by; 87`getAnalyticalIntegral()`. This function will only be called with; 88codes returned by `getAnalyticalIntegral()`, except code zero.; 89 ; 90The integration range for each dependent to be integrated can; 91be obtained from the dependent's proxy functions `min()` and; 92`max()`. Never call these proxy functions for any proxy not known to; 93be a dependent via the integration code. Doing so may be; 94ill-defined, e.g., in case the proxy holds a function, and will; 95trigger an assert. Integrated category dependents should always be; 96summed over all of their states.; 97 ; 98",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:3849,Integrability,integrat,integration,3849,"specified each time a; 56normalized value is requested from the PDF via the getVal(); 57method.; 58 ; 59RooAbsPdf manages the entire normalization logic of each PDF with; 60the help of a RooRealIntegral object, which coordinates the integration; 61of a given choice of normalization. By default, RooRealIntegral will; 62perform an entirely numeric integration of all dependents. However,; 63PDFs can advertise one or more (partial) analytical integrals of; 64their function, and these will be used by RooRealIntegral, if it; 65determines that this is safe (i.e., no hidden Jacobian terms,; 66multiplication with other PDFs that have one or more dependents in; 67common, etc).; 68 ; 69#### Implementing analytical integrals; 70To implement analytical integrals, two functions must be implemented. First,; 71 ; 72```; 73Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); 74```; 75should return the analytical integrals that are supported. `integSet`; 76is the set of dependents for which integration is requested. The; 77function should copy the subset of dependents it can analytically; 78integrate to `anaIntSet`, and return a unique identification code for; 79this integration configuration. If no integration can be; 80performed, zero should be returned. Second,; 81 ; 82```; 83double analyticalIntegral(Int_t code); 84```; 85 ; 86implements the actual analytical integral(s) advertised by; 87`getAnalyticalIntegral()`. This function will only be called with; 88codes returned by `getAnalyticalIntegral()`, except code zero.; 89 ; 90The integration range for each dependent to be integrated can; 91be obtained from the dependent's proxy functions `min()` and; 92`max()`. Never call these proxy functions for any proxy not known to; 93be a dependent via the integration code. Doing so may be; 94ill-defined, e.g., in case the proxy holds a function, and will; 95trigger an assert. Integrated category dependents should always be; 96summed over all of their states.; 97 ; 98",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:3917,Integrability,depend,dependents,3917,"tire normalization logic of each PDF with; 60the help of a RooRealIntegral object, which coordinates the integration; 61of a given choice of normalization. By default, RooRealIntegral will; 62perform an entirely numeric integration of all dependents. However,; 63PDFs can advertise one or more (partial) analytical integrals of; 64their function, and these will be used by RooRealIntegral, if it; 65determines that this is safe (i.e., no hidden Jacobian terms,; 66multiplication with other PDFs that have one or more dependents in; 67common, etc).; 68 ; 69#### Implementing analytical integrals; 70To implement analytical integrals, two functions must be implemented. First,; 71 ; 72```; 73Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); 74```; 75should return the analytical integrals that are supported. `integSet`; 76is the set of dependents for which integration is requested. The; 77function should copy the subset of dependents it can analytically; 78integrate to `anaIntSet`, and return a unique identification code for; 79this integration configuration. If no integration can be; 80performed, zero should be returned. Second,; 81 ; 82```; 83double analyticalIntegral(Int_t code); 84```; 85 ; 86implements the actual analytical integral(s) advertised by; 87`getAnalyticalIntegral()`. This function will only be called with; 88codes returned by `getAnalyticalIntegral()`, except code zero.; 89 ; 90The integration range for each dependent to be integrated can; 91be obtained from the dependent's proxy functions `min()` and; 92`max()`. Never call these proxy functions for any proxy not known to; 93be a dependent via the integration code. Doing so may be; 94ill-defined, e.g., in case the proxy holds a function, and will; 95trigger an assert. Integrated category dependents should always be; 96summed over all of their states.; 97 ; 98 ; 99 ; 100### Direct generation of observables; 101 ; 102Distributions for any PDF can be generated with the accept/reject meth",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:4029,Integrability,integrat,integration,4029,"tire normalization logic of each PDF with; 60the help of a RooRealIntegral object, which coordinates the integration; 61of a given choice of normalization. By default, RooRealIntegral will; 62perform an entirely numeric integration of all dependents. However,; 63PDFs can advertise one or more (partial) analytical integrals of; 64their function, and these will be used by RooRealIntegral, if it; 65determines that this is safe (i.e., no hidden Jacobian terms,; 66multiplication with other PDFs that have one or more dependents in; 67common, etc).; 68 ; 69#### Implementing analytical integrals; 70To implement analytical integrals, two functions must be implemented. First,; 71 ; 72```; 73Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); 74```; 75should return the analytical integrals that are supported. `integSet`; 76is the set of dependents for which integration is requested. The; 77function should copy the subset of dependents it can analytically; 78integrate to `anaIntSet`, and return a unique identification code for; 79this integration configuration. If no integration can be; 80performed, zero should be returned. Second,; 81 ; 82```; 83double analyticalIntegral(Int_t code); 84```; 85 ; 86implements the actual analytical integral(s) advertised by; 87`getAnalyticalIntegral()`. This function will only be called with; 88codes returned by `getAnalyticalIntegral()`, except code zero.; 89 ; 90The integration range for each dependent to be integrated can; 91be obtained from the dependent's proxy functions `min()` and; 92`max()`. Never call these proxy functions for any proxy not known to; 93be a dependent via the integration code. Doing so may be; 94ill-defined, e.g., in case the proxy holds a function, and will; 95trigger an assert. Integrated category dependents should always be; 96summed over all of their states.; 97 ; 98 ; 99 ; 100### Direct generation of observables; 101 ; 102Distributions for any PDF can be generated with the accept/reject meth",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:4062,Integrability,integrat,integration,4062,"a given choice of normalization. By default, RooRealIntegral will; 62perform an entirely numeric integration of all dependents. However,; 63PDFs can advertise one or more (partial) analytical integrals of; 64their function, and these will be used by RooRealIntegral, if it; 65determines that this is safe (i.e., no hidden Jacobian terms,; 66multiplication with other PDFs that have one or more dependents in; 67common, etc).; 68 ; 69#### Implementing analytical integrals; 70To implement analytical integrals, two functions must be implemented. First,; 71 ; 72```; 73Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); 74```; 75should return the analytical integrals that are supported. `integSet`; 76is the set of dependents for which integration is requested. The; 77function should copy the subset of dependents it can analytically; 78integrate to `anaIntSet`, and return a unique identification code for; 79this integration configuration. If no integration can be; 80performed, zero should be returned. Second,; 81 ; 82```; 83double analyticalIntegral(Int_t code); 84```; 85 ; 86implements the actual analytical integral(s) advertised by; 87`getAnalyticalIntegral()`. This function will only be called with; 88codes returned by `getAnalyticalIntegral()`, except code zero.; 89 ; 90The integration range for each dependent to be integrated can; 91be obtained from the dependent's proxy functions `min()` and; 92`max()`. Never call these proxy functions for any proxy not known to; 93be a dependent via the integration code. Doing so may be; 94ill-defined, e.g., in case the proxy holds a function, and will; 95trigger an assert. Integrated category dependents should always be; 96summed over all of their states.; 97 ; 98 ; 99 ; 100### Direct generation of observables; 101 ; 102Distributions for any PDF can be generated with the accept/reject method,; 103but for certain PDFs, more efficient methods may be implemented. To; 104implement direct generation of one or more",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:4402,Integrability,integrat,integration,4402,"t have one or more dependents in; 67common, etc).; 68 ; 69#### Implementing analytical integrals; 70To implement analytical integrals, two functions must be implemented. First,; 71 ; 72```; 73Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); 74```; 75should return the analytical integrals that are supported. `integSet`; 76is the set of dependents for which integration is requested. The; 77function should copy the subset of dependents it can analytically; 78integrate to `anaIntSet`, and return a unique identification code for; 79this integration configuration. If no integration can be; 80performed, zero should be returned. Second,; 81 ; 82```; 83double analyticalIntegral(Int_t code); 84```; 85 ; 86implements the actual analytical integral(s) advertised by; 87`getAnalyticalIntegral()`. This function will only be called with; 88codes returned by `getAnalyticalIntegral()`, except code zero.; 89 ; 90The integration range for each dependent to be integrated can; 91be obtained from the dependent's proxy functions `min()` and; 92`max()`. Never call these proxy functions for any proxy not known to; 93be a dependent via the integration code. Doing so may be; 94ill-defined, e.g., in case the proxy holds a function, and will; 95trigger an assert. Integrated category dependents should always be; 96summed over all of their states.; 97 ; 98 ; 99 ; 100### Direct generation of observables; 101 ; 102Distributions for any PDF can be generated with the accept/reject method,; 103but for certain PDFs, more efficient methods may be implemented. To; 104implement direct generation of one or more observables, two; 105functions need to be implemented, similar to those for analytical; 106integrals:; 107 ; 108```; 109Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); 110```; 111and; 112```; 113void generateEvent(Int_t code); 114```; 115 ; 116The first function advertises observables, for which distributions can be generated,; 117similar to the ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:4429,Integrability,depend,dependent,4429,"t have one or more dependents in; 67common, etc).; 68 ; 69#### Implementing analytical integrals; 70To implement analytical integrals, two functions must be implemented. First,; 71 ; 72```; 73Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); 74```; 75should return the analytical integrals that are supported. `integSet`; 76is the set of dependents for which integration is requested. The; 77function should copy the subset of dependents it can analytically; 78integrate to `anaIntSet`, and return a unique identification code for; 79this integration configuration. If no integration can be; 80performed, zero should be returned. Second,; 81 ; 82```; 83double analyticalIntegral(Int_t code); 84```; 85 ; 86implements the actual analytical integral(s) advertised by; 87`getAnalyticalIntegral()`. This function will only be called with; 88codes returned by `getAnalyticalIntegral()`, except code zero.; 89 ; 90The integration range for each dependent to be integrated can; 91be obtained from the dependent's proxy functions `min()` and; 92`max()`. Never call these proxy functions for any proxy not known to; 93be a dependent via the integration code. Doing so may be; 94ill-defined, e.g., in case the proxy holds a function, and will; 95trigger an assert. Integrated category dependents should always be; 96summed over all of their states.; 97 ; 98 ; 99 ; 100### Direct generation of observables; 101 ; 102Distributions for any PDF can be generated with the accept/reject method,; 103but for certain PDFs, more efficient methods may be implemented. To; 104implement direct generation of one or more observables, two; 105functions need to be implemented, similar to those for analytical; 106integrals:; 107 ; 108```; 109Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); 110```; 111and; 112```; 113void generateEvent(Int_t code); 114```; 115 ; 116The first function advertises observables, for which distributions can be generated,; 117similar to the ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:4445,Integrability,integrat,integrated,4445,"t have one or more dependents in; 67common, etc).; 68 ; 69#### Implementing analytical integrals; 70To implement analytical integrals, two functions must be implemented. First,; 71 ; 72```; 73Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); 74```; 75should return the analytical integrals that are supported. `integSet`; 76is the set of dependents for which integration is requested. The; 77function should copy the subset of dependents it can analytically; 78integrate to `anaIntSet`, and return a unique identification code for; 79this integration configuration. If no integration can be; 80performed, zero should be returned. Second,; 81 ; 82```; 83double analyticalIntegral(Int_t code); 84```; 85 ; 86implements the actual analytical integral(s) advertised by; 87`getAnalyticalIntegral()`. This function will only be called with; 88codes returned by `getAnalyticalIntegral()`, except code zero.; 89 ; 90The integration range for each dependent to be integrated can; 91be obtained from the dependent's proxy functions `min()` and; 92`max()`. Never call these proxy functions for any proxy not known to; 93be a dependent via the integration code. Doing so may be; 94ill-defined, e.g., in case the proxy holds a function, and will; 95trigger an assert. Integrated category dependents should always be; 96summed over all of their states.; 97 ; 98 ; 99 ; 100### Direct generation of observables; 101 ; 102Distributions for any PDF can be generated with the accept/reject method,; 103but for certain PDFs, more efficient methods may be implemented. To; 104implement direct generation of one or more observables, two; 105functions need to be implemented, similar to those for analytical; 106integrals:; 107 ; 108```; 109Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); 110```; 111and; 112```; 113void generateEvent(Int_t code); 114```; 115 ; 116The first function advertises observables, for which distributions can be generated,; 117similar to the ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:4484,Integrability,depend,dependent,4484,"t have one or more dependents in; 67common, etc).; 68 ; 69#### Implementing analytical integrals; 70To implement analytical integrals, two functions must be implemented. First,; 71 ; 72```; 73Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); 74```; 75should return the analytical integrals that are supported. `integSet`; 76is the set of dependents for which integration is requested. The; 77function should copy the subset of dependents it can analytically; 78integrate to `anaIntSet`, and return a unique identification code for; 79this integration configuration. If no integration can be; 80performed, zero should be returned. Second,; 81 ; 82```; 83double analyticalIntegral(Int_t code); 84```; 85 ; 86implements the actual analytical integral(s) advertised by; 87`getAnalyticalIntegral()`. This function will only be called with; 88codes returned by `getAnalyticalIntegral()`, except code zero.; 89 ; 90The integration range for each dependent to be integrated can; 91be obtained from the dependent's proxy functions `min()` and; 92`max()`. Never call these proxy functions for any proxy not known to; 93be a dependent via the integration code. Doing so may be; 94ill-defined, e.g., in case the proxy holds a function, and will; 95trigger an assert. Integrated category dependents should always be; 96summed over all of their states.; 97 ; 98 ; 99 ; 100### Direct generation of observables; 101 ; 102Distributions for any PDF can be generated with the accept/reject method,; 103but for certain PDFs, more efficient methods may be implemented. To; 104implement direct generation of one or more observables, two; 105functions need to be implemented, similar to those for analytical; 106integrals:; 107 ; 108```; 109Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); 110```; 111and; 112```; 113void generateEvent(Int_t code); 114```; 115 ; 116The first function advertises observables, for which distributions can be generated,; 117similar to the ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:4604,Integrability,depend,dependent,4604,"ntegrals, two functions must be implemented. First,; 71 ; 72```; 73Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); 74```; 75should return the analytical integrals that are supported. `integSet`; 76is the set of dependents for which integration is requested. The; 77function should copy the subset of dependents it can analytically; 78integrate to `anaIntSet`, and return a unique identification code for; 79this integration configuration. If no integration can be; 80performed, zero should be returned. Second,; 81 ; 82```; 83double analyticalIntegral(Int_t code); 84```; 85 ; 86implements the actual analytical integral(s) advertised by; 87`getAnalyticalIntegral()`. This function will only be called with; 88codes returned by `getAnalyticalIntegral()`, except code zero.; 89 ; 90The integration range for each dependent to be integrated can; 91be obtained from the dependent's proxy functions `min()` and; 92`max()`. Never call these proxy functions for any proxy not known to; 93be a dependent via the integration code. Doing so may be; 94ill-defined, e.g., in case the proxy holds a function, and will; 95trigger an assert. Integrated category dependents should always be; 96summed over all of their states.; 97 ; 98 ; 99 ; 100### Direct generation of observables; 101 ; 102Distributions for any PDF can be generated with the accept/reject method,; 103but for certain PDFs, more efficient methods may be implemented. To; 104implement direct generation of one or more observables, two; 105functions need to be implemented, similar to those for analytical; 106integrals:; 107 ; 108```; 109Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); 110```; 111and; 112```; 113void generateEvent(Int_t code); 114```; 115 ; 116The first function advertises observables, for which distributions can be generated,; 117similar to the way analytical integrals are advertised. The second; 118function implements the actual generator for the advertised observabl",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:4622,Integrability,integrat,integration,4622,"ntegrals, two functions must be implemented. First,; 71 ; 72```; 73Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); 74```; 75should return the analytical integrals that are supported. `integSet`; 76is the set of dependents for which integration is requested. The; 77function should copy the subset of dependents it can analytically; 78integrate to `anaIntSet`, and return a unique identification code for; 79this integration configuration. If no integration can be; 80performed, zero should be returned. Second,; 81 ; 82```; 83double analyticalIntegral(Int_t code); 84```; 85 ; 86implements the actual analytical integral(s) advertised by; 87`getAnalyticalIntegral()`. This function will only be called with; 88codes returned by `getAnalyticalIntegral()`, except code zero.; 89 ; 90The integration range for each dependent to be integrated can; 91be obtained from the dependent's proxy functions `min()` and; 92`max()`. Never call these proxy functions for any proxy not known to; 93be a dependent via the integration code. Doing so may be; 94ill-defined, e.g., in case the proxy holds a function, and will; 95trigger an assert. Integrated category dependents should always be; 96summed over all of their states.; 97 ; 98 ; 99 ; 100### Direct generation of observables; 101 ; 102Distributions for any PDF can be generated with the accept/reject method,; 103but for certain PDFs, more efficient methods may be implemented. To; 104implement direct generation of one or more observables, two; 105functions need to be implemented, similar to those for analytical; 106integrals:; 107 ; 108```; 109Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); 110```; 111and; 112```; 113void generateEvent(Int_t code); 114```; 115 ; 116The first function advertises observables, for which distributions can be generated,; 117similar to the way analytical integrals are advertised. The second; 118function implements the actual generator for the advertised observabl",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:4765,Integrability,depend,dependents,4765,"re supported. `integSet`; 76is the set of dependents for which integration is requested. The; 77function should copy the subset of dependents it can analytically; 78integrate to `anaIntSet`, and return a unique identification code for; 79this integration configuration. If no integration can be; 80performed, zero should be returned. Second,; 81 ; 82```; 83double analyticalIntegral(Int_t code); 84```; 85 ; 86implements the actual analytical integral(s) advertised by; 87`getAnalyticalIntegral()`. This function will only be called with; 88codes returned by `getAnalyticalIntegral()`, except code zero.; 89 ; 90The integration range for each dependent to be integrated can; 91be obtained from the dependent's proxy functions `min()` and; 92`max()`. Never call these proxy functions for any proxy not known to; 93be a dependent via the integration code. Doing so may be; 94ill-defined, e.g., in case the proxy holds a function, and will; 95trigger an assert. Integrated category dependents should always be; 96summed over all of their states.; 97 ; 98 ; 99 ; 100### Direct generation of observables; 101 ; 102Distributions for any PDF can be generated with the accept/reject method,; 103but for certain PDFs, more efficient methods may be implemented. To; 104implement direct generation of one or more observables, two; 105functions need to be implemented, similar to those for analytical; 106integrals:; 107 ; 108```; 109Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); 110```; 111and; 112```; 113void generateEvent(Int_t code); 114```; 115 ; 116The first function advertises observables, for which distributions can be generated,; 117similar to the way analytical integrals are advertised. The second; 118function implements the actual generator for the advertised observables.; 119 ; 120The generated dependent values should be stored in the proxy; 121objects. For this, the assignment operator can be used (i.e. `xProxy; 122= 3.0` ). Never call assign to any proxy not kn",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:5615,Integrability,depend,dependent,5615,"n code. Doing so may be; 94ill-defined, e.g., in case the proxy holds a function, and will; 95trigger an assert. Integrated category dependents should always be; 96summed over all of their states.; 97 ; 98 ; 99 ; 100### Direct generation of observables; 101 ; 102Distributions for any PDF can be generated with the accept/reject method,; 103but for certain PDFs, more efficient methods may be implemented. To; 104implement direct generation of one or more observables, two; 105functions need to be implemented, similar to those for analytical; 106integrals:; 107 ; 108```; 109Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); 110```; 111and; 112```; 113void generateEvent(Int_t code); 114```; 115 ; 116The first function advertises observables, for which distributions can be generated,; 117similar to the way analytical integrals are advertised. The second; 118function implements the actual generator for the advertised observables.; 119 ; 120The generated dependent values should be stored in the proxy; 121objects. For this, the assignment operator can be used (i.e. `xProxy; 122= 3.0` ). Never call assign to any proxy not known to be a dependent; 123via the generation code. Doing so may be ill-defined, e.g. in case; 124the proxy holds a function, and will trigger an assert.; 125 ; 126 ; 127### Batched function evaluations (Advanced usage); 128 ; 129To speed up computations with large numbers of data events in unbinned fits,; 130it is beneficial to override `doEval()`. Like this, large spans of; 131computations can be done, without having to call `evaluate()` for each single data event.; 132`doEval()` should execute the same computation as `evaluate()`, but it; 133may choose an implementation that is capable of SIMD computations.; 134If doEval is not implemented, the classic and slower `evaluate()` will be; 135called for each data event.; 136*/; 137 ; 138#include ""RooAbsPdf.h""; 139 ; 140#include ""FitHelpers.h""; 141#include ""RooNormalizedPdf.h""; 142#includ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:5798,Integrability,depend,dependent,5798,"; 96summed over all of their states.; 97 ; 98 ; 99 ; 100### Direct generation of observables; 101 ; 102Distributions for any PDF can be generated with the accept/reject method,; 103but for certain PDFs, more efficient methods may be implemented. To; 104implement direct generation of one or more observables, two; 105functions need to be implemented, similar to those for analytical; 106integrals:; 107 ; 108```; 109Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); 110```; 111and; 112```; 113void generateEvent(Int_t code); 114```; 115 ; 116The first function advertises observables, for which distributions can be generated,; 117similar to the way analytical integrals are advertised. The second; 118function implements the actual generator for the advertised observables.; 119 ; 120The generated dependent values should be stored in the proxy; 121objects. For this, the assignment operator can be used (i.e. `xProxy; 122= 3.0` ). Never call assign to any proxy not known to be a dependent; 123via the generation code. Doing so may be ill-defined, e.g. in case; 124the proxy holds a function, and will trigger an assert.; 125 ; 126 ; 127### Batched function evaluations (Advanced usage); 128 ; 129To speed up computations with large numbers of data events in unbinned fits,; 130it is beneficial to override `doEval()`. Like this, large spans of; 131computations can be done, without having to call `evaluate()` for each single data event.; 132`doEval()` should execute the same computation as `evaluate()`, but it; 133may choose an implementation that is capable of SIMD computations.; 134If doEval is not implemented, the classic and slower `evaluate()` will be; 135called for each data event.; 136*/; 137 ; 138#include ""RooAbsPdf.h""; 139 ; 140#include ""FitHelpers.h""; 141#include ""RooNormalizedPdf.h""; 142#include ""RooMsgService.h""; 143#include ""RooArgSet.h""; 144#include ""RooArgProxy.h""; 145#include ""RooRealProxy.h""; 146#include ""RooRealVar.h""; 147#include ""RooGenContex",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:11653,Integrability,integrat,integrating,11653,"king(double rawVal, double normVal) const {; 283 ; 284 if (normVal < 0. || (normVal == 0. && rawVal != 0)) {; 285 //Unreasonable normalisations. A zero integral can be tolerated if the function vanishes, though.; 286 const std::string msg = ""p.d.f normalization integral is zero or negative: "" + std::to_string(normVal);; 287 logEvalError(msg.c_str());; 288 clearValueAndShapeDirty();; 289 return RooNaNPacker::packFloatIntoNaN(-normVal + (rawVal < 0. ? -rawVal : 0.));; 290 }; 291 ; 292 if (rawVal < 0.) {; 293 logEvalError(Form(""p.d.f value is less than zero (%f), trying to recover"", rawVal));; 294 clearValueAndShapeDirty();; 295 return RooNaNPacker::packFloatIntoNaN(-rawVal);; 296 }; 297 ; 298 if (TMath::IsNaN(rawVal)) {; 299 logEvalError(""p.d.f value is Not-a-Number"");; 300 clearValueAndShapeDirty();; 301 return rawVal;; 302 }; 303 ; 304 return (rawVal == 0. && normVal == 0.) ? 0. : rawVal / normVal;; 305}; 306 ; 307 ; 308////////////////////////////////////////////////////////////////////////////////; 309/// Return current value, normalized by integrating over; 310/// the observables in `nset`. If `nset` is 0, the unnormalized value; 311/// is returned. All elements of `nset` must be lvalues.; 312///; 313/// Unnormalized values are not cached.; 314/// Doing so would be complicated as `_norm->getVal()` could; 315/// spoil the cache and interfere with returning the cached; 316/// return value. Since unnormalized calls are typically; 317/// done in integration calls, there is no performance hit.; 318 ; 319double RooAbsPdf::getValV(const RooArgSet* nset) const; 320{; 321 ; 322 // Special handling of case without normalization set (used in numeric integration of pdfs); 323 if (!nset) {; 324 RooArgSet const* tmp = _normSet ;; 325 _normSet = nullptr ;; 326 double val = evaluate() ;; 327 _normSet = tmp ;; 328 ; 329 return TMath::IsNaN(val) ? 0. : val;; 330 }; 331 ; 332 ; 333 // Process change in last data set used; 334 bool nintChanged(false) ;; 335 if (!isActiveNormSet(nset)",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:12063,Integrability,integrat,integration,12063,"0.));; 290 }; 291 ; 292 if (rawVal < 0.) {; 293 logEvalError(Form(""p.d.f value is less than zero (%f), trying to recover"", rawVal));; 294 clearValueAndShapeDirty();; 295 return RooNaNPacker::packFloatIntoNaN(-rawVal);; 296 }; 297 ; 298 if (TMath::IsNaN(rawVal)) {; 299 logEvalError(""p.d.f value is Not-a-Number"");; 300 clearValueAndShapeDirty();; 301 return rawVal;; 302 }; 303 ; 304 return (rawVal == 0. && normVal == 0.) ? 0. : rawVal / normVal;; 305}; 306 ; 307 ; 308////////////////////////////////////////////////////////////////////////////////; 309/// Return current value, normalized by integrating over; 310/// the observables in `nset`. If `nset` is 0, the unnormalized value; 311/// is returned. All elements of `nset` must be lvalues.; 312///; 313/// Unnormalized values are not cached.; 314/// Doing so would be complicated as `_norm->getVal()` could; 315/// spoil the cache and interfere with returning the cached; 316/// return value. Since unnormalized calls are typically; 317/// done in integration calls, there is no performance hit.; 318 ; 319double RooAbsPdf::getValV(const RooArgSet* nset) const; 320{; 321 ; 322 // Special handling of case without normalization set (used in numeric integration of pdfs); 323 if (!nset) {; 324 RooArgSet const* tmp = _normSet ;; 325 _normSet = nullptr ;; 326 double val = evaluate() ;; 327 _normSet = tmp ;; 328 ; 329 return TMath::IsNaN(val) ? 0. : val;; 330 }; 331 ; 332 ; 333 // Process change in last data set used; 334 bool nintChanged(false) ;; 335 if (!isActiveNormSet(nset) || _norm==nullptr) {; 336 nintChanged = syncNormalization(nset) ;; 337 }; 338 ; 339 // Return value of object. Calculated if dirty, otherwise cached value is returned.; 340 if (isValueDirty() || nintChanged || _norm->isValueDirty()) {; 341 ; 342 // Evaluate numerator; 343 const double rawVal = evaluate();; 344 ; 345 // Evaluate denominator; 346 const double normVal = _norm->getVal();; 347 ; 348 _value = normalizeWithNaNPacking(rawVal, normVal);; 349 ; 350 cle",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:12264,Integrability,integrat,integration,12264,"97 ; 298 if (TMath::IsNaN(rawVal)) {; 299 logEvalError(""p.d.f value is Not-a-Number"");; 300 clearValueAndShapeDirty();; 301 return rawVal;; 302 }; 303 ; 304 return (rawVal == 0. && normVal == 0.) ? 0. : rawVal / normVal;; 305}; 306 ; 307 ; 308////////////////////////////////////////////////////////////////////////////////; 309/// Return current value, normalized by integrating over; 310/// the observables in `nset`. If `nset` is 0, the unnormalized value; 311/// is returned. All elements of `nset` must be lvalues.; 312///; 313/// Unnormalized values are not cached.; 314/// Doing so would be complicated as `_norm->getVal()` could; 315/// spoil the cache and interfere with returning the cached; 316/// return value. Since unnormalized calls are typically; 317/// done in integration calls, there is no performance hit.; 318 ; 319double RooAbsPdf::getValV(const RooArgSet* nset) const; 320{; 321 ; 322 // Special handling of case without normalization set (used in numeric integration of pdfs); 323 if (!nset) {; 324 RooArgSet const* tmp = _normSet ;; 325 _normSet = nullptr ;; 326 double val = evaluate() ;; 327 _normSet = tmp ;; 328 ; 329 return TMath::IsNaN(val) ? 0. : val;; 330 }; 331 ; 332 ; 333 // Process change in last data set used; 334 bool nintChanged(false) ;; 335 if (!isActiveNormSet(nset) || _norm==nullptr) {; 336 nintChanged = syncNormalization(nset) ;; 337 }; 338 ; 339 // Return value of object. Calculated if dirty, otherwise cached value is returned.; 340 if (isValueDirty() || nintChanged || _norm->isValueDirty()) {; 341 ; 342 // Evaluate numerator; 343 const double rawVal = evaluate();; 344 ; 345 // Evaluate denominator; 346 const double normVal = _norm->getVal();; 347 ; 348 _value = normalizeWithNaNPacking(rawVal, normVal);; 349 ; 350 clearValueAndShapeDirty();; 351 }; 352 ; 353 return _value ;; 354}; 355 ; 356 ; 357////////////////////////////////////////////////////////////////////////////////; 358/// Analytical integral with normalization (see RooAbsReal::an",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:16177,Integrability,message,messages,16177,"rmalise the raw values returned by; 416/// getVal(). Note that `getVal(normalisationVariables)` will automatically; 417/// apply the normalisation term returned here.; 418/// \param nset Set of variables to normalise over.; 419double RooAbsPdf::getNorm(const RooArgSet* nset) const; 420{; 421 if (!nset) return 1 ;; 422 ; 423 syncNormalization(nset,true) ;; 424 if (_verboseEval>1) cxcoutD(Tracing) << ClassName() << ""::getNorm("" << GetName() << ""): norm("" << _norm << "") = "" << _norm->getVal() << endl ;; 425 ; 426 double ret = _norm->getVal() ;; 427 if (ret==0.) {; 428 if(++_errorCount <= 10) {; 429 coutW(Eval) << ""RooAbsPdf::getNorm("" << GetName() << "":: WARNING normalization is zero, nset = "" ; nset->Print(""1"") ;; 430 if(_errorCount == 10) coutW(Eval) << ""RooAbsPdf::getNorm("" << GetName() << "") INFO: no more messages will be printed "" << endl ;; 431 }; 432 }; 433 ; 434 return ret ;; 435}; 436 ; 437 ; 438 ; 439////////////////////////////////////////////////////////////////////////////////; 440/// Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range; 441/// rangeName, optionally taking the integrand normalized over observables nset; 442 ; 443const RooAbsReal* RooAbsPdf::getNormObj(const RooArgSet* nset, const RooArgSet* iset, const TNamed* rangeName) const; 444{; 445 // Check normalization is already stored; 446 CacheElem* cache = static_cast<CacheElem*>(_normMgr.getObj(nset,iset,nullptr,rangeName)) ;; 447 if (cache) {; 448 return cache->_norm.get();; 449 }; 450 ; 451 // If not create it now; 452 RooArgSet depList;; 453 getObservables(iset, depList);; 454 ; 455 // Normalization is always over all pdf components. Overriding the global; 456 // component selection temporarily makes all RooRealIntegrals created during; 457 // that time always include all components.; 458 GlobalSelectComponentRAII globalSelComp(true);; 459 RooAbsReal* norm = std::unique_ptr<RooAbsReal>{createIntegral(depList,*nset, *getIntegratorConfig()",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:19953,Integrability,depend,dependsOn,19953,"be wrong to not adjust the proxies. They always have to be; 497 // adjusted when the nset changed, which is always the case when; 498 // `syncNormalization()` is called.; 499 if (adjustProxies) {; 500 // Update dataset pointers of proxies; 501 const_cast<RooAbsPdf*>(this)->setProxyNormSet(nset) ;; 502 }; 503 ; 504 return nintChanged ;; 505 }; 506 ; 507 // Update dataset pointers of proxies; 508 if (adjustProxies) {; 509 const_cast<RooAbsPdf*>(this)->setProxyNormSet(nset) ;; 510 }; 511 ; 512 RooArgSet depList;; 513 getObservables(nset, depList);; 514 ; 515 if (_verboseEval>0) {; 516 if (!selfNormalized()) {; 517 cxcoutD(Tracing) << ClassName() << ""::syncNormalization("" << GetName(); 518 << "") recreating normalization integral "" << endl ;; 519 depList.printStream(ccoutD(Tracing),kName|kValue|kArgs,kSingleLine) ;; 520 } else {; 521 cxcoutD(Tracing) << ClassName() << ""::syncNormalization("" << GetName() << "") selfNormalized, creating unit norm"" << endl;; 522 }; 523 }; 524 ; 525 // Destroy old normalization & create new; 526 if (selfNormalized() || !dependsOn(depList)) {; 527 auto ntitle = std::string(GetTitle()) + "" Unit Normalization"";; 528 auto nname = std::string(GetName()) + ""_UnitNorm"";; 529 _norm = new RooRealVar(nname.c_str(),ntitle.c_str(),1) ;; 530 } else {; 531 const char* nr = (_normRangeOverride.Length()>0 ? _normRangeOverride.Data() : (_normRange.Length()>0 ? _normRange.Data() : nullptr)) ;; 532 ; 533// cout << ""RooAbsPdf::syncNormalization("" << GetName() << "") rangeName for normalization is "" << (nr?nr:""<null>"") << endl ;; 534 RooAbsReal* normInt;; 535 {; 536 // Normalization is always over all pdf components. Overriding the global; 537 // component selection temporarily makes all RooRealIntegrals created during; 538 // that time always include all components.; 539 GlobalSelectComponentRAII selCompRAII(true);; 540 normInt = std::unique_ptr<RooAbsReal>{createIntegral(depList,*getIntegratorConfig(),nr)}.release();; 541 }; 542 static_cast<RooRealIntegral*>(nor",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:22585,Integrability,message,messages,22585,"cachedIntegral->setCacheSource(true) ;; 561 if (normInt->operMode()==ADirty) {; 562 cachedIntegral->setOperMode(ADirty) ;; 563 }; 564 normInt= cachedIntegral ;; 565 }; 566 ; 567 }; 568 _norm = normInt ;; 569 }; 570 ; 571 // Register new normalization with manager (takes ownership); 572 cache = new CacheElem(*_norm) ;; 573 _normMgr.setObj(nset,cache) ;; 574 ; 575// cout << ""making new object "" << _norm->GetName() << endl ;; 576 ; 577 return true ;; 578}; 579 ; 580 ; 581 ; 582////////////////////////////////////////////////////////////////////////////////; 583/// Reset error counter to given value, limiting the number; 584/// of future error messages for this pdf to 'resetValue'; 585 ; 586void RooAbsPdf::resetErrorCounters(Int_t resetValue); 587{; 588 _errorCount = resetValue ;; 589 _negCount = resetValue ;; 590}; 591 ; 592 ; 593 ; 594////////////////////////////////////////////////////////////////////////////////; 595/// Reset trace counter to given value, limiting the; 596/// number of future trace messages for this pdf to 'value'; 597 ; 598void RooAbsPdf::setTraceCounter(Int_t value, bool allNodes); 599{; 600 if (!allNodes) {; 601 _traceCount = value ;; 602 return ;; 603 } else {; 604 RooArgList branchList ;; 605 branchNodeServerList(&branchList) ;; 606 for(auto * pdf : dynamic_range_cast<RooAbsPdf*>(branchList)) {; 607 if (pdf) pdf->setTraceCounter(value,false) ;; 608 }; 609 }; 610 ; 611}; 612 ; 613 ; 614 ; 615 ; 616////////////////////////////////////////////////////////////////////////////////; 617/// Return the log of the current value with given normalization; 618/// An error message is printed if the argument of the log is negative.; 619 ; 620double RooAbsPdf::getLogVal(const RooArgSet* nset) const; 621{; 622 return getLog(getVal(nset), this);; 623}; 624 ; 625 ; 626////////////////////////////////////////////////////////////////////////////////; 627/// Check for infinity or NaN.; 628/// \param[in] inputs Array to check; 629/// \return True if either infinity ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:22951,Integrability,message,messages,22951,"cachedIntegral->setCacheSource(true) ;; 561 if (normInt->operMode()==ADirty) {; 562 cachedIntegral->setOperMode(ADirty) ;; 563 }; 564 normInt= cachedIntegral ;; 565 }; 566 ; 567 }; 568 _norm = normInt ;; 569 }; 570 ; 571 // Register new normalization with manager (takes ownership); 572 cache = new CacheElem(*_norm) ;; 573 _normMgr.setObj(nset,cache) ;; 574 ; 575// cout << ""making new object "" << _norm->GetName() << endl ;; 576 ; 577 return true ;; 578}; 579 ; 580 ; 581 ; 582////////////////////////////////////////////////////////////////////////////////; 583/// Reset error counter to given value, limiting the number; 584/// of future error messages for this pdf to 'resetValue'; 585 ; 586void RooAbsPdf::resetErrorCounters(Int_t resetValue); 587{; 588 _errorCount = resetValue ;; 589 _negCount = resetValue ;; 590}; 591 ; 592 ; 593 ; 594////////////////////////////////////////////////////////////////////////////////; 595/// Reset trace counter to given value, limiting the; 596/// number of future trace messages for this pdf to 'value'; 597 ; 598void RooAbsPdf::setTraceCounter(Int_t value, bool allNodes); 599{; 600 if (!allNodes) {; 601 _traceCount = value ;; 602 return ;; 603 } else {; 604 RooArgList branchList ;; 605 branchNodeServerList(&branchList) ;; 606 for(auto * pdf : dynamic_range_cast<RooAbsPdf*>(branchList)) {; 607 if (pdf) pdf->setTraceCounter(value,false) ;; 608 }; 609 }; 610 ; 611}; 612 ; 613 ; 614 ; 615 ; 616////////////////////////////////////////////////////////////////////////////////; 617/// Return the log of the current value with given normalization; 618/// An error message is printed if the argument of the log is negative.; 619 ; 620double RooAbsPdf::getLogVal(const RooArgSet* nset) const; 621{; 622 return getLog(getVal(nset), this);; 623}; 624 ; 625 ; 626////////////////////////////////////////////////////////////////////////////////; 627/// Check for infinity or NaN.; 628/// \param[in] inputs Array to check; 629/// \return True if either infinity ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:23546,Integrability,message,message,23546,"cachedIntegral->setCacheSource(true) ;; 561 if (normInt->operMode()==ADirty) {; 562 cachedIntegral->setOperMode(ADirty) ;; 563 }; 564 normInt= cachedIntegral ;; 565 }; 566 ; 567 }; 568 _norm = normInt ;; 569 }; 570 ; 571 // Register new normalization with manager (takes ownership); 572 cache = new CacheElem(*_norm) ;; 573 _normMgr.setObj(nset,cache) ;; 574 ; 575// cout << ""making new object "" << _norm->GetName() << endl ;; 576 ; 577 return true ;; 578}; 579 ; 580 ; 581 ; 582////////////////////////////////////////////////////////////////////////////////; 583/// Reset error counter to given value, limiting the number; 584/// of future error messages for this pdf to 'resetValue'; 585 ; 586void RooAbsPdf::resetErrorCounters(Int_t resetValue); 587{; 588 _errorCount = resetValue ;; 589 _negCount = resetValue ;; 590}; 591 ; 592 ; 593 ; 594////////////////////////////////////////////////////////////////////////////////; 595/// Reset trace counter to given value, limiting the; 596/// number of future trace messages for this pdf to 'value'; 597 ; 598void RooAbsPdf::setTraceCounter(Int_t value, bool allNodes); 599{; 600 if (!allNodes) {; 601 _traceCount = value ;; 602 return ;; 603 } else {; 604 RooArgList branchList ;; 605 branchNodeServerList(&branchList) ;; 606 for(auto * pdf : dynamic_range_cast<RooAbsPdf*>(branchList)) {; 607 if (pdf) pdf->setTraceCounter(value,false) ;; 608 }; 609 }; 610 ; 611}; 612 ; 613 ; 614 ; 615 ; 616////////////////////////////////////////////////////////////////////////////////; 617/// Return the log of the current value with given normalization; 618/// An error message is printed if the argument of the log is negative.; 619 ; 620double RooAbsPdf::getLogVal(const RooArgSet* nset) const; 621{; 622 return getLog(getVal(nset), this);; 623}; 624 ; 625 ; 626////////////////////////////////////////////////////////////////////////////////; 627/// Check for infinity or NaN.; 628/// \param[in] inputs Array to check; 629/// \return True if either infinity ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:30657,Integrability,wrap,wrapper,30657,"handle case Nobs=Nexp=0; 748 if (std::abs(expected)<1e-10 && std::abs(sumEntries)<1e-10) {; 749 return 0.0;; 750 }; 751 ; 752 // Check for errors in Nexpected; 753 if (TMath::IsNaN(expected)) {; 754 logEvalError(""extendedTerm #expected events is a NaN"") ;; 755 return TMath::QuietNaN() ;; 756 }; 757 ; 758 double extra = doOffset; 759 ? (expected - sumEntries) - sumEntries * (std::log(expected) - std::log(sumEntries)); 760 : expected - sumEntries * std::log(expected);; 761 ; 762 if(sumEntriesW2 != 0.0) {; 763 extra *= sumEntriesW2 / sumEntries;; 764 }; 765 ; 766 return extra;; 767}; 768 ; 769////////////////////////////////////////////////////////////////////////////////; 770/// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); 771/// of this PDF for the given number of observed events.; 772///; 773/// This function is a wrapper around; 774/// RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const,; 775/// where the number of observed events and observables to be used as the; 776/// normalization set for the pdf is extracted from a RooAbsData.; 777///; 778/// For successful operation, the PDF implementation must indicate that; 779/// it is extendable by overloading `canBeExtended()`, and must; 780/// implement the `expectedEvents()` function.; 781///; 782/// \param[in] data The RooAbsData to retrieve the set of observables and; 783/// number of expected events.; 784/// \param[in] weightSquared If set to `true`, the extended term will be scaled by; 785/// the ratio of squared event weights over event weights:; 786/// \f$ \sum w_{i}^2 / \sum w_{i} \f$.; 787/// Intended to be used by fits with the `SumW2Error()` option that; 788/// can be passed to RooAbsPdf::fitTo(); 789/// (see the documentation of said function to learn more about the; 790/// interpretation of fits with squared weights).; 791/// \param[in] doOffset See RooAbsPdf::extendedTerm(double, RooArgSet const*, double, bool) const",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:33036,Integrability,rout,routine,33036,"Offset);; 800}; 801 ; 802 ; 803/** @fn RooAbsPdf::createNLL(); 804 *; 805 * @brief Construct representation of -log(L) of PDF with given dataset.; 806 *; 807 * If dataset is unbinned, an unbinned likelihood is constructed.; 808 * If the dataset is binned, a binned likelihood is constructed.; 809 *; 810 * @param data Reference to a RooAbsData object representing the dataset.; 811 * @param cmdArgs Variadic template arguments representing optional command arguments.; 812 * You can pass either an arbitrary number of RooCmdArg instances; 813 * or a single RooLinkedList that points to the RooCmdArg objects.; 814 * @return An owning pointer to the created RooAbsReal NLL object.; 815 *; 816 * @tparam CmdArgs_t Template types for optional command arguments.; 817 * Can either be an arbitrary number of RooCmdArg or a single RooLinkedList.; 818 *; 819 * \note This front-end function should not be re-implemented in derived PDF types.; 820 * If you mean to customize the NLL creation routine,; 821 * you need to override the virtual RooAbsPdf::createNLLImpl() method.; 822 *; 823 * The following named arguments are supported:; 824 *; 825 * <table>; 826 * <tr><th> Type of CmdArg <th> Effect on NLL; 827 * <tr><td> `ConditionalObservables(Args_t &&... argsOrArgSet)` <td> Do not normalize PDF over listed observables.; 828 * Arguments can either be multiple RooRealVar or a single RooArgSet containing them.; 829 * <tr><td> `Extended(bool flag)` <td> Add extended likelihood term, off by default.; 830 * <tr><td> `Range(const char* name)` <td> Fit only data inside range with given name. Multiple comma-separated range names can be specified.; 831 * In this case, the unnormalized PDF \f$f(x)\f$ is normalized by the integral over all ranges \f$r_i\f$:; 832 * \f[; 833 * p(x) = \frac{f(x)}{\sum_i \int_{r_i} f(x) dx}.; 834 * \f]; 835 * <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; 836 * <tr><td> `SumCoefR",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:37252,Integrability,wrap,wraps,37252," difference of the single log-likelihoods with respect to the legacy mode is usually better than \f$10^{-12}\f$,; 862 * and for fit parameters it's usually better than \f$10^{-6}\f$. In past ROOT releases, this backend could be activated with the now deprecated `BatchMode()` option.; 863 * <tr><td> **cuda** <td> Evaluate the likelihood on a GPU that supports CUDA.; 864 * This backend re-uses code from the **cpu** backend, but compiled in CUDA kernels.; 865 * Hence, the results are expected to be identical, modulo some numerical differences that can arise from the different order in which the GPU is summing the log probabilities.; 866 * This backend can drastically speed up the fit if all RooAbsArg object in the model support it.; 867 * <tr><td> **legacy** <td> The original likelihood evaluation method.; 868 * Evaluates the PDF for each single data entry at a time before summing the negative log probabilities.; 869 * <tr><td> **codegen** <td> **Experimental** - Generates and compiles minimal C++ code for the NLL on-the-fly and wraps it in the returned RooAbsReal.; 870 * Also generates and compiles the code for the gradient using Automatic Differentiation (AD) with [Clad](https://github.com/vgvassilev/clad).; 871 * This analytic gradient is passed to the minimizer, which can result in significant speedups for many-parameter fits,; 872 * even compared to the **cpu** backend. However, if one of the RooAbsArg objects in the model does not support the code generation,; 873 * this backend can't be used.; 874 * <tr><td> **codegen_no_grad** <td> **Experimental** - Same as **codegen**, but doesn't generate and compile the gradient code and use the regular numerical differentiation instead.; 875 * This is expected to be slower, but useful for debugging problems with the analytic gradient.; 876 * </table>; 877 * <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); 878 * <tr><td> `SplitRange(bool flag)` <td> Use separate fit ranges in a simult",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:38800,Integrability,depend,depends,38800," as **codegen**, but doesn't generate and compile the gradient code and use the regular numerical differentiation instead.; 875 * This is expected to be slower, but useful for debugging problems with the analytic gradient.; 876 * </table>; 877 * <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); 878 * <tr><td> `SplitRange(bool flag)` <td> Use separate fit ranges in a simultaneous fit. Actual range name for each subsample is assumed to; 879 * be `rangeName_indexState`, where `indexState` is the state of the master index category of the simultaneous fit.; 880 * Using `Range(""range""), SplitRange()` as switches, different ranges could be set like this:; 881 * ```; 882 * myVariable.setRange(""range_pi0"", 135, 210);; 883 * myVariable.setRange(""range_gamma"", 50, 210);; 884 * ```; 885 * <tr><td> `Constrain(const RooArgSet&pars)` <td> For p.d.f.s that contain internal parameter constraint terms (that is usually product PDFs, where one; 886 * term of the product depends on parameters but not on the observable(s),), only apply constraints to the given subset of parameters.; 887 * <tr><td> `ExternalConstraints(const RooArgSet& )` <td> Include given external constraints to likelihood by multiplying them with the original likelihood.; 888 * <tr><td> `GlobalObservables(const RooArgSet&)` <td> Define the set of normalization observables to be used for the constraint terms.; 889 * If none are specified the constrained parameters are used.; 890 * <tr><td> `GlobalObservablesSource(const char* sourceName)` <td> Which source to prioritize for global observable values.; 891 * Can be either:; 892 * - `data`: to take the values from the dataset,; 893 * falling back to the pdf value if a given global observable is not available.; 894 * If no `GlobalObservables` or `GlobalObservablesTag` command argument is given, the set; 895 * of global observables will be automatically defined to be the set stored in the data.; 896 * - `model`: to take all values from ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:40394,Integrability,message,messages,40394," either:; 892 * - `data`: to take the values from the dataset,; 893 * falling back to the pdf value if a given global observable is not available.; 894 * If no `GlobalObservables` or `GlobalObservablesTag` command argument is given, the set; 895 * of global observables will be automatically defined to be the set stored in the data.; 896 * - `model`: to take all values from the pdf and completely ignore the set of global observables stored in the data; 897 * (not even using it to automatically define the set of global observables; 898 * if the `GlobalObservables` or `GlobalObservablesTag` command arguments are not given).; 899 * The default option is `data`.; 900 * <tr><td> `GlobalObservablesTag(const char* tagName)` <td> Define the set of normalization observables to be used for the constraint terms by; 901 * a string attribute associated with pdf observables that match the given tagName.; 902 * <tr><td> `Verbose(bool flag)` <td> Controls RooFit informational messages in likelihood construction; 903 * <tr><td> `CloneData(bool flag)` <td> Use clone of dataset in NLL (default is true).; 904 * \warning Deprecated option that is ignored. It is up to the implementation of the NLL creation method if the data is cloned or not.; 905 * <tr><td> `Offset(std::string const& mode)` <td> Likelihood offsetting mode. Can be either:; 906 * <table>; 907 * <tr><th> Mode <th> Description; 908 * <tr><td> **none** - *default* <td> No offsetting.; 909 * <tr><td> **initial** <td> Offset likelihood by initial value (so that starting value of FCN in minuit is zero).; 910 * This can improve numeric stability in simultaneous fits with components with large likelihood values.; 911 * <tr><td> **bin** <td> Offset likelihood bin-by-bin with a template histogram model based on the obersved data.; 912 * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; 913 * which can drastically improve numeric stability.; 914 * Furthermore, \f$2\cd",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:41620,Integrability,integrat,integrate,41620,"n method if the data is cloned or not.; 905 * <tr><td> `Offset(std::string const& mode)` <td> Likelihood offsetting mode. Can be either:; 906 * <table>; 907 * <tr><th> Mode <th> Description; 908 * <tr><td> **none** - *default* <td> No offsetting.; 909 * <tr><td> **initial** <td> Offset likelihood by initial value (so that starting value of FCN in minuit is zero).; 910 * This can improve numeric stability in simultaneous fits with components with large likelihood values.; 911 * <tr><td> **bin** <td> Offset likelihood bin-by-bin with a template histogram model based on the obersved data.; 912 * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; 913 * which can drastically improve numeric stability.; 914 * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; 915 * </table>; 916 * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; 917 * This can reduce the bias observed when fitting functions with high curvature to binned data.; 918 * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; 919 * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; 920 * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; 921 * has to be manipulated directly.; 922 * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; 923 * - precision < 0: Deactivate.; 924 * \see RooBinSamplingPdf; 925 * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; 926 * This does not change any user-facing code, but only enables a diff",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:41849,Integrability,integrat,integration,41849,"fault* <td> No offsetting.; 909 * <tr><td> **initial** <td> Offset likelihood by initial value (so that starting value of FCN in minuit is zero).; 910 * This can improve numeric stability in simultaneous fits with components with large likelihood values.; 911 * <tr><td> **bin** <td> Offset likelihood bin-by-bin with a template histogram model based on the obersved data.; 912 * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; 913 * which can drastically improve numeric stability.; 914 * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; 915 * </table>; 916 * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; 917 * This can reduce the bias observed when fitting functions with high curvature to binned data.; 918 * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; 919 * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; 920 * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; 921 * has to be manipulated directly.; 922 * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; 923 * - precision < 0: Deactivate.; 924 * \see RooBinSamplingPdf; 925 * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; 926 * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this; 927 * should be set to true for parallel minimization of likelihoods!; 928 * Note that it is currently not recommended to use Modular likelihoods without any parall",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:41911,Integrability,depend,depending,41911,"by initial value (so that starting value of FCN in minuit is zero).; 910 * This can improve numeric stability in simultaneous fits with components with large likelihood values.; 911 * <tr><td> **bin** <td> Offset likelihood bin-by-bin with a template histogram model based on the obersved data.; 912 * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; 913 * which can drastically improve numeric stability.; 914 * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; 915 * </table>; 916 * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; 917 * This can reduce the bias observed when fitting functions with high curvature to binned data.; 918 * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; 919 * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; 920 * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; 921 * has to be manipulated directly.; 922 * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; 923 * - precision < 0: Deactivate.; 924 * \see RooBinSamplingPdf; 925 * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; 926 * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this; 927 * should be set to true for parallel minimization of likelihoods!; 928 * Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, since; 929 * some features such as off",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:42029,Integrability,integrat,integrator,42029,"multaneous fits with components with large likelihood values.; 911 * <tr><td> **bin** <td> Offset likelihood bin-by-bin with a template histogram model based on the obersved data.; 912 * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; 913 * which can drastically improve numeric stability.; 914 * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; 915 * </table>; 916 * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; 917 * This can reduce the bias observed when fitting functions with high curvature to binned data.; 918 * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; 919 * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; 920 * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; 921 * has to be manipulated directly.; 922 * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; 923 * - precision < 0: Deactivate.; 924 * \see RooBinSamplingPdf; 925 * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; 926 * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this; 927 * should be set to true for parallel minimization of likelihoods!; 928 * Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, since; 929 * some features such as offsetting might not yet work in this case.; 930 * </table>; 931 */; 932 ; 933 ; 934/** @brief Protected implementatio",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:42086,Integrability,integrat,integration,42086,"ikelihood values.; 911 * <tr><td> **bin** <td> Offset likelihood bin-by-bin with a template histogram model based on the obersved data.; 912 * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; 913 * which can drastically improve numeric stability.; 914 * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; 915 * </table>; 916 * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; 917 * This can reduce the bias observed when fitting functions with high curvature to binned data.; 918 * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; 919 * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; 920 * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; 921 * has to be manipulated directly.; 922 * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; 923 * - precision < 0: Deactivate.; 924 * \see RooBinSamplingPdf; 925 * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; 926 * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this; 927 * should be set to true for parallel minimization of likelihoods!; 928 * Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, since; 929 * some features such as offsetting might not yet work in this case.; 930 * </table>; 931 */; 932 ; 933 ; 934/** @brief Protected implementation of the NLL creation routine.; 935 *; 936 * ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:42204,Integrability,integrat,integrator,42204,"m model based on the obersved data.; 912 * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; 913 * which can drastically improve numeric stability.; 914 * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; 915 * </table>; 916 * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; 917 * This can reduce the bias observed when fitting functions with high curvature to binned data.; 918 * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; 919 * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; 920 * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; 921 * has to be manipulated directly.; 922 * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; 923 * - precision < 0: Deactivate.; 924 * \see RooBinSamplingPdf; 925 * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; 926 * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this; 927 * should be set to true for parallel minimization of likelihoods!; 928 * Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, since; 929 * some features such as offsetting might not yet work in this case.; 930 * </table>; 931 */; 932 ; 933 ; 934/** @brief Protected implementation of the NLL creation routine.; 935 *; 936 * This virtual function can be overridden in case you want to change the NLL creation logic for custo",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:42291,Integrability,integrat,integration,42291,"h reduces precision loss in the sum,; 913 * which can drastically improve numeric stability.; 914 * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; 915 * </table>; 916 * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; 917 * This can reduce the bias observed when fitting functions with high curvature to binned data.; 918 * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; 919 * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; 920 * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; 921 * has to be manipulated directly.; 922 * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; 923 * - precision < 0: Deactivate.; 924 * \see RooBinSamplingPdf; 925 * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; 926 * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this; 927 * should be set to true for parallel minimization of likelihoods!; 928 * Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, since; 929 * some features such as offsetting might not yet work in this case.; 930 * </table>; 931 */; 932 ; 933 ; 934/** @brief Protected implementation of the NLL creation routine.; 935 *; 936 * This virtual function can be overridden in case you want to change the NLL creation logic for custom PDFs.; 937 *; 938 * \note Never call this function directly. Instead, call RooAbsPdf::createNLL().; 939 */; 940 ; 941std:",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:43056,Integrability,rout,routine,43056," 1.E-4, since the integrator might reach 1.E-4 already in its first; 920 * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; 921 * has to be manipulated directly.; 922 * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; 923 * - precision < 0: Deactivate.; 924 * \see RooBinSamplingPdf; 925 * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; 926 * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this; 927 * should be set to true for parallel minimization of likelihoods!; 928 * Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, since; 929 * some features such as offsetting might not yet work in this case.; 930 * </table>; 931 */; 932 ; 933 ; 934/** @brief Protected implementation of the NLL creation routine.; 935 *; 936 * This virtual function can be overridden in case you want to change the NLL creation logic for custom PDFs.; 937 *; 938 * \note Never call this function directly. Instead, call RooAbsPdf::createNLL().; 939 */; 940 ; 941std::unique_ptr<RooAbsReal> RooAbsPdf::createNLLImpl(RooAbsData &data, const RooLinkedList &cmdList); 942{; 943 return RooFit::FitHelpers::createNLL(*this, data, cmdList);; 944}; 945 ; 946 ; 947/** @fn RooAbsPdf::fitTo(); 948 *; 949 * @brief Fit PDF to given dataset.; 950 *; 951 * If dataset is unbinned, an unbinned maximum likelihood is performed.; 952 * If the dataset is binned, a binned maximum likelihood is performed.; 953 * By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession.; 954 *; 955 * @param data Reference to a RooAbsData object representing the dataset.; 956 * @param cmdArgs Variadic template arguments representing optional command arguments.; 957 * You can pas",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:44666,Integrability,rout,routine,44666,"ed, a binned maximum likelihood is performed.; 953 * By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession.; 954 *; 955 * @param data Reference to a RooAbsData object representing the dataset.; 956 * @param cmdArgs Variadic template arguments representing optional command arguments.; 957 * You can pass either an arbitrary number of RooCmdArg instances; 958 * or a single RooLinkedList that points to the RooCmdArg objects.; 959 * @return An owning pointer to the created RooAbsReal NLL object.; 960 * @return RooFitResult with fit status and parameters if option Save() is used, `nullptr` otherwise. The user takes ownership of the fit result.; 961 *; 962 * @tparam CmdArgs_t Template types for optional command arguments.; 963 * Can either be an arbitrary number of RooCmdArg or a single RooLinkedList.; 964 *; 965 * \note This front-end function should not be re-implemented in derived PDF types.; 966 * If you mean to customize the likelihood fitting routine,; 967 * you need to override the virtual RooAbsPdf::fitToImpl() method.; 968 *; 969 * The following named arguments are supported:; 970 *; 971 * <table>; 972 * <tr><th> Type of CmdArg <th> Options to control construction of -log(L); 973 * <tr><td> <td> All command arguments that can also be passed to the NLL creation method.; 974 * \see RooAbsPdf::createNLL(); 975 *; 976 * <tr><th><th> Options to control flow of fit procedure; 977 * <tr><td> `Minimizer(""<type>"", ""<algo>"")` <td> Choose minimization package and optionally the algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer interface,; 978 * but others can be specified (through RooMinimizer interface).; 979 * <table>; 980 * <tr><th> Type <th> Algorithm; 981 * <tr><td> Minuit <td> migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve); 982 * <tr><td> Minuit2 <td> migrad, simplex, minimize, scan; 983 * <tr><td> GSLMultiMin <td> conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent; 984 * <tr><td> GSLS",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:45272,Integrability,interface,interface,45272,"sed, `nullptr` otherwise. The user takes ownership of the fit result.; 961 *; 962 * @tparam CmdArgs_t Template types for optional command arguments.; 963 * Can either be an arbitrary number of RooCmdArg or a single RooLinkedList.; 964 *; 965 * \note This front-end function should not be re-implemented in derived PDF types.; 966 * If you mean to customize the likelihood fitting routine,; 967 * you need to override the virtual RooAbsPdf::fitToImpl() method.; 968 *; 969 * The following named arguments are supported:; 970 *; 971 * <table>; 972 * <tr><th> Type of CmdArg <th> Options to control construction of -log(L); 973 * <tr><td> <td> All command arguments that can also be passed to the NLL creation method.; 974 * \see RooAbsPdf::createNLL(); 975 *; 976 * <tr><th><th> Options to control flow of fit procedure; 977 * <tr><td> `Minimizer(""<type>"", ""<algo>"")` <td> Choose minimization package and optionally the algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer interface,; 978 * but others can be specified (through RooMinimizer interface).; 979 * <table>; 980 * <tr><th> Type <th> Algorithm; 981 * <tr><td> Minuit <td> migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve); 982 * <tr><td> Minuit2 <td> migrad, simplex, minimize, scan; 983 * <tr><td> GSLMultiMin <td> conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent; 984 * <tr><td> GSLSimAn <td> -; 985 * </table>; 986 *; 987 * <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; 988 * <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization of test statistic during minimization (on by default); 989 * <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; 990 * <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, off by default; 991 * <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; 992 * <tr><td> `Save(bool flag)` <td> Fl",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:45340,Integrability,interface,interface,45340,"sed, `nullptr` otherwise. The user takes ownership of the fit result.; 961 *; 962 * @tparam CmdArgs_t Template types for optional command arguments.; 963 * Can either be an arbitrary number of RooCmdArg or a single RooLinkedList.; 964 *; 965 * \note This front-end function should not be re-implemented in derived PDF types.; 966 * If you mean to customize the likelihood fitting routine,; 967 * you need to override the virtual RooAbsPdf::fitToImpl() method.; 968 *; 969 * The following named arguments are supported:; 970 *; 971 * <table>; 972 * <tr><th> Type of CmdArg <th> Options to control construction of -log(L); 973 * <tr><td> <td> All command arguments that can also be passed to the NLL creation method.; 974 * \see RooAbsPdf::createNLL(); 975 *; 976 * <tr><th><th> Options to control flow of fit procedure; 977 * <tr><td> `Minimizer(""<type>"", ""<algo>"")` <td> Choose minimization package and optionally the algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer interface,; 978 * but others can be specified (through RooMinimizer interface).; 979 * <table>; 980 * <tr><th> Type <th> Algorithm; 981 * <tr><td> Minuit <td> migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve); 982 * <tr><td> Minuit2 <td> migrad, simplex, minimize, scan; 983 * <tr><td> GSLMultiMin <td> conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent; 984 * <tr><td> GSLSimAn <td> -; 985 * </table>; 986 *; 987 * <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; 988 * <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization of test statistic during minimization (on by default); 989 * <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; 990 * <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, off by default; 991 * <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; 992 * <tr><td> `Save(bool flag)` <td> Fl",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:50142,Integrability,message,messages,50142,"arxiv.org/abs/1911.01303).; 1026 This option even correctly implements the case of extended likelihood fits; 1027 (see this [writeup on extended weighted fits](https://root.cern/files/extended_weighted_fits.pdf) that complements the paper linked before).; 1028 * <tr><td> `PrefitDataFraction(double fraction)`; 1029 * <td> Runs a prefit on a small dataset of size fraction*(actual data size). This can speed up fits; 1030 * by finding good starting values for the parameters for the actual fit.; 1031 * \warning Prefitting may give bad results when used in binned analysis.; 1032 *; 1033 * <tr><th><th> Options to control informational output; 1034 * <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit).; 1035 * <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default.; 1036 * <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 to 3, default is 1). At -1 all RooFit informational messages are suppressed as well.; 1037 * See RooMinimizer::PrintLevel for the meaning of the levels.; 1038 * <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); 1039 * <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per likelihood evaluation.; 1040 * A negative value suppresses output completely, a zero value will only print the error count per p.d.f component,; 1041 * a positive value will print details of each error up to `numErr` messages per p.d.f component.; 1042 * <tr><td> `Parallelize(Int_t nWorkers)` <td> Control global parallelization settings. Arguments 1 and above enable the use of RooFit's parallel minimization; 1043 * backend and uses the number given as the number of workers to use in the parallelization. -1 also enables; 1044 * RooFit's parallel minimization backend, and sets the number of workers to the number of available processes.; 1045 * 0 disables this feature.; 1046 * In case p",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:50667,Integrability,message,messages,50667," fit.; 1031 * \warning Prefitting may give bad results when used in binned analysis.; 1032 *; 1033 * <tr><th><th> Options to control informational output; 1034 * <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit).; 1035 * <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default.; 1036 * <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 to 3, default is 1). At -1 all RooFit informational messages are suppressed as well.; 1037 * See RooMinimizer::PrintLevel for the meaning of the levels.; 1038 * <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); 1039 * <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per likelihood evaluation.; 1040 * A negative value suppresses output completely, a zero value will only print the error count per p.d.f component,; 1041 * a positive value will print details of each error up to `numErr` messages per p.d.f component.; 1042 * <tr><td> `Parallelize(Int_t nWorkers)` <td> Control global parallelization settings. Arguments 1 and above enable the use of RooFit's parallel minimization; 1043 * backend and uses the number given as the number of workers to use in the parallelization. -1 also enables; 1044 * RooFit's parallel minimization backend, and sets the number of workers to the number of available processes.; 1045 * 0 disables this feature.; 1046 * In case parallelization is requested, this option implies `ModularL(true)` in the internal call to the NLL creation method.; 1047 * <tr><td> `ParallelGradientOptions(bool enable=true, int orderStrategy=0, int chainFactor=1)` <td> **Experimental** - Control gradient parallelization settings. The first argument; 1048 * only disables or enables gradient parallelization, this is on by default.; 1049 * The second argument determines the internal partial derivative calculation; 1050 * ordering strate",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:52826,Integrability,rout,routine,52826,"`ParallelDescentOptions(bool enable=false, int splitStrategy=0, int numSplits=4)` <td> **Experimental** - Control settings related to the parallelization of likelihoods; 1053 * outside of the gradient calculation but in the minimization, most prominently; 1054 * in the linesearch step. The first argument this disables or enables likelihood; 1055 * parallelization. The second argument determines whether to split the task batches; 1056 * per event or per likelihood component. And the third argument how many events or; 1057 * respectively components to include in each batch.; 1058 * <tr><td> `TimingAnalysis(bool flag)` <td> **Experimental** - Log timings. This feature logs timings with NewStyle likelihoods on multiple processes simultaneously; 1059 * and outputs the timings at the end of a run to json log files, which can be analyzed with the; 1060 * `RooFit::MultiProcess::HeatmapAnalyzer`. Only works with simultaneous likelihoods.; 1061 * </table>; 1062 */; 1063 ; 1064 ; 1065/** @brief Protected implementation of the likelihood fitting routine.; 1066 *; 1067 * This virtual function can be overridden in case you want to change the likelihood fitting logic for custom PDFs.; 1068 *; 1069 * \note Never call this function directly. Instead, call RooAbsPdf::fitTo().; 1070 */; 1071 ; 1072std::unique_ptr<RooFitResult> RooAbsPdf::fitToImpl(RooAbsData& data, const RooLinkedList& cmdList); 1073{; 1074 return RooFit::FitHelpers::fitTo(*this, data, cmdList, false);; 1075}; 1076 ; 1077 ; 1078////////////////////////////////////////////////////////////////////////////////; 1079/// Print value of p.d.f, also print normalization integral that was last used, if any; 1080 ; 1081void RooAbsPdf::printValue(ostream& os) const; 1082{; 1083 // silent warning messages coming when evaluating a RooAddPdf without a normalization set; 1084 RooHelpers::LocalChangeMsgLevel locmsg(RooFit::WARNING, 0u, RooFit::Eval, false);; 1085 ; 1086 getVal() ;; 1087 ; 1088 if (_norm) {; 1089 os << getVal() << ""/""",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:53539,Integrability,message,messages,53539,"o change the likelihood fitting logic for custom PDFs.; 1068 *; 1069 * \note Never call this function directly. Instead, call RooAbsPdf::fitTo().; 1070 */; 1071 ; 1072std::unique_ptr<RooFitResult> RooAbsPdf::fitToImpl(RooAbsData& data, const RooLinkedList& cmdList); 1073{; 1074 return RooFit::FitHelpers::fitTo(*this, data, cmdList, false);; 1075}; 1076 ; 1077 ; 1078////////////////////////////////////////////////////////////////////////////////; 1079/// Print value of p.d.f, also print normalization integral that was last used, if any; 1080 ; 1081void RooAbsPdf::printValue(ostream& os) const; 1082{; 1083 // silent warning messages coming when evaluating a RooAddPdf without a normalization set; 1084 RooHelpers::LocalChangeMsgLevel locmsg(RooFit::WARNING, 0u, RooFit::Eval, false);; 1085 ; 1086 getVal() ;; 1087 ; 1088 if (_norm) {; 1089 os << getVal() << ""/"" << _norm->getVal() ;; 1090 } else {; 1091 os << getVal();; 1092 }; 1093}; 1094 ; 1095 ; 1096 ; 1097////////////////////////////////////////////////////////////////////////////////; 1098/// Print multi line detailed information of this RooAbsPdf; 1099 ; 1100void RooAbsPdf::printMultiline(ostream& os, Int_t contents, bool verbose, TString indent) const; 1101{; 1102 RooAbsReal::printMultiline(os,contents,verbose,indent);; 1103 os << indent << ""--- RooAbsPdf ---"" << endl;; 1104 os << indent << ""Cached value = "" << _value << endl ;; 1105 if (_norm) {; 1106 os << indent << "" Normalization integral: "" << endl ;; 1107 auto moreIndent = std::string(indent.Data()) + "" "" ;; 1108 _norm->printStream(os,kName|kAddress|kTitle|kValue|kArgs,kSingleLine,moreIndent.c_str()) ;; 1109 }; 1110}; 1111 ; 1112 ; 1113 ; 1114////////////////////////////////////////////////////////////////////////////////; 1115/// Return a binned generator context; 1116 ; 1117RooAbsGenContext* RooAbsPdf::binnedGenContext(const RooArgSet &vars, bool verbose) const; 1118{; 1119 return new RooBinnedGenContext(*this,vars,nullptr,nullptr,verbose) ;; 1120}; 1121 ; 1",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:57231,Integrability,message,messages,57231,"////////////////////////////////////////////////; 1155/// Generate a new dataset containing the specified variables with events sampled from our distribution.; 1156/// Generate the specified number of events or expectedEvents() if not specified.; 1157/// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; 1158/// constant and not be used for event generation.; 1159/// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg() to change behaviour of generate().; 1160/// \return RooDataSet *, owned by caller.; 1161///; 1162/// Any variables of this PDF that are not in whatVars will use their; 1163/// current values and be treated as fixed parameters. Returns zero; 1164/// in case of an error.; 1165///; 1166/// <table>; 1167/// <tr><th> Type of CmdArg <th> Effect on generate; 1168/// <tr><td> `Name(const char* name)` <td> Name of the output dataset; 1169/// <tr><td> `Verbose(bool flag)` <td> Print informational messages during event generation; 1170/// <tr><td> `NumEvents(int nevt)` <td> Generate specified number of events; 1171/// <tr><td> `Extended()` <td> If no number of events to be generated is given,; 1172/// use expected number of events from extended likelihood term.; 1173/// This evidently only works for extended PDFs.; 1174/// <tr><td> `GenBinned(const char* tag)` <td> Use binned generation for all component pdfs that have 'setAttribute(tag)' set; 1175/// <tr><td> `AutoBinned(bool flag)` <td> Automatically deploy binned generation for binned distributions (e.g. RooHistPdf, sums and products of; 1176/// RooHistPdfs etc); 1177/// \note Datasets that are generated in binned mode are returned as weighted unbinned datasets. This means that; 1178/// for each bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content.; 1179///; 1180///; 1181/// <tr><td> `AllBinned()` <td> As above, but for all components.; 1182/// \note The notion of components is only meanin",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:76103,Integrability,depend,depends,76103,"1530/// Interface for one-time initialization to setup the generator for the specified code.; 1531 ; 1532void RooAbsPdf::initGenerator(Int_t /*code*/); 1533{; 1534}; 1535 ; 1536 ; 1537 ; 1538////////////////////////////////////////////////////////////////////////////////; 1539/// Interface for generation of an event using the algorithm; 1540/// corresponding to the specified code. The meaning of each code is; 1541/// defined by the getGenerator() implementation. The default; 1542/// implementation does nothing.; 1543 ; 1544void RooAbsPdf::generateEvent(Int_t /*code*/); 1545{; 1546}; 1547 ; 1548 ; 1549 ; 1550////////////////////////////////////////////////////////////////////////////////; 1551/// Check if given observable can be safely generated using the; 1552/// pdfs internal generator mechanism (if that existsP). Observables; 1553/// on which a PDF depends via more than route are not safe; 1554/// for use with internal generators because they introduce; 1555/// correlations not known to the internal generator; 1556 ; 1557bool RooAbsPdf::isDirectGenSafe(const RooAbsArg& arg) const; 1558{; 1559 // Arg must be direct server of self; 1560 if (!findServer(arg.GetName())) return false ;; 1561 ; 1562 // There must be no other dependency routes; 1563 for (const auto server : _serverList) {; 1564 if(server == &arg) continue;; 1565 if(server->dependsOn(arg)) {; 1566 return false ;; 1567 }; 1568 }; 1569 ; 1570 return true ;; 1571}; 1572 ; 1573 ; 1574////////////////////////////////////////////////////////////////////////////////; 1575/// Generate a new dataset containing the specified variables with events sampled from our distribution.; 1576/// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; 1577/// constant and not be used for event generation; 1578/// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg to change behaviour of generateBinned(); 1579/// \return RooDataHist *, to be managed by caller.; 1580///; 1",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:76125,Integrability,rout,route,76125,"1530/// Interface for one-time initialization to setup the generator for the specified code.; 1531 ; 1532void RooAbsPdf::initGenerator(Int_t /*code*/); 1533{; 1534}; 1535 ; 1536 ; 1537 ; 1538////////////////////////////////////////////////////////////////////////////////; 1539/// Interface for generation of an event using the algorithm; 1540/// corresponding to the specified code. The meaning of each code is; 1541/// defined by the getGenerator() implementation. The default; 1542/// implementation does nothing.; 1543 ; 1544void RooAbsPdf::generateEvent(Int_t /*code*/); 1545{; 1546}; 1547 ; 1548 ; 1549 ; 1550////////////////////////////////////////////////////////////////////////////////; 1551/// Check if given observable can be safely generated using the; 1552/// pdfs internal generator mechanism (if that existsP). Observables; 1553/// on which a PDF depends via more than route are not safe; 1554/// for use with internal generators because they introduce; 1555/// correlations not known to the internal generator; 1556 ; 1557bool RooAbsPdf::isDirectGenSafe(const RooAbsArg& arg) const; 1558{; 1559 // Arg must be direct server of self; 1560 if (!findServer(arg.GetName())) return false ;; 1561 ; 1562 // There must be no other dependency routes; 1563 for (const auto server : _serverList) {; 1564 if(server == &arg) continue;; 1565 if(server->dependsOn(arg)) {; 1566 return false ;; 1567 }; 1568 }; 1569 ; 1570 return true ;; 1571}; 1572 ; 1573 ; 1574////////////////////////////////////////////////////////////////////////////////; 1575/// Generate a new dataset containing the specified variables with events sampled from our distribution.; 1576/// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; 1577/// constant and not be used for event generation; 1578/// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg to change behaviour of generateBinned(); 1579/// \return RooDataHist *, to be managed by caller.; 1580///; 1",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:76481,Integrability,depend,dependency,76481,"41/// defined by the getGenerator() implementation. The default; 1542/// implementation does nothing.; 1543 ; 1544void RooAbsPdf::generateEvent(Int_t /*code*/); 1545{; 1546}; 1547 ; 1548 ; 1549 ; 1550////////////////////////////////////////////////////////////////////////////////; 1551/// Check if given observable can be safely generated using the; 1552/// pdfs internal generator mechanism (if that existsP). Observables; 1553/// on which a PDF depends via more than route are not safe; 1554/// for use with internal generators because they introduce; 1555/// correlations not known to the internal generator; 1556 ; 1557bool RooAbsPdf::isDirectGenSafe(const RooAbsArg& arg) const; 1558{; 1559 // Arg must be direct server of self; 1560 if (!findServer(arg.GetName())) return false ;; 1561 ; 1562 // There must be no other dependency routes; 1563 for (const auto server : _serverList) {; 1564 if(server == &arg) continue;; 1565 if(server->dependsOn(arg)) {; 1566 return false ;; 1567 }; 1568 }; 1569 ; 1570 return true ;; 1571}; 1572 ; 1573 ; 1574////////////////////////////////////////////////////////////////////////////////; 1575/// Generate a new dataset containing the specified variables with events sampled from our distribution.; 1576/// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; 1577/// constant and not be used for event generation; 1578/// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg to change behaviour of generateBinned(); 1579/// \return RooDataHist *, to be managed by caller.; 1580///; 1581/// Generate the specified number of events or expectedEvents() if not specified.; 1582///; 1583/// Any variables of this PDF that are not in whatVars will use their; 1584/// current values and be treated as fixed parameters. Returns zero; 1585/// in case of an error. The caller takes ownership of the returned; 1586/// dataset.; 1587///; 1588/// The following named arguments are supported; 1589/// | Type of ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:76492,Integrability,rout,routes,76492,"41/// defined by the getGenerator() implementation. The default; 1542/// implementation does nothing.; 1543 ; 1544void RooAbsPdf::generateEvent(Int_t /*code*/); 1545{; 1546}; 1547 ; 1548 ; 1549 ; 1550////////////////////////////////////////////////////////////////////////////////; 1551/// Check if given observable can be safely generated using the; 1552/// pdfs internal generator mechanism (if that existsP). Observables; 1553/// on which a PDF depends via more than route are not safe; 1554/// for use with internal generators because they introduce; 1555/// correlations not known to the internal generator; 1556 ; 1557bool RooAbsPdf::isDirectGenSafe(const RooAbsArg& arg) const; 1558{; 1559 // Arg must be direct server of self; 1560 if (!findServer(arg.GetName())) return false ;; 1561 ; 1562 // There must be no other dependency routes; 1563 for (const auto server : _serverList) {; 1564 if(server == &arg) continue;; 1565 if(server->dependsOn(arg)) {; 1566 return false ;; 1567 }; 1568 }; 1569 ; 1570 return true ;; 1571}; 1572 ; 1573 ; 1574////////////////////////////////////////////////////////////////////////////////; 1575/// Generate a new dataset containing the specified variables with events sampled from our distribution.; 1576/// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; 1577/// constant and not be used for event generation; 1578/// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg to change behaviour of generateBinned(); 1579/// \return RooDataHist *, to be managed by caller.; 1580///; 1581/// Generate the specified number of events or expectedEvents() if not specified.; 1582///; 1583/// Any variables of this PDF that are not in whatVars will use their; 1584/// current values and be treated as fixed parameters. Returns zero; 1585/// in case of an error. The caller takes ownership of the returned; 1586/// dataset.; 1587///; 1588/// The following named arguments are supported; 1589/// | Type of ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:76597,Integrability,depend,dependsOn,76597,"41/// defined by the getGenerator() implementation. The default; 1542/// implementation does nothing.; 1543 ; 1544void RooAbsPdf::generateEvent(Int_t /*code*/); 1545{; 1546}; 1547 ; 1548 ; 1549 ; 1550////////////////////////////////////////////////////////////////////////////////; 1551/// Check if given observable can be safely generated using the; 1552/// pdfs internal generator mechanism (if that existsP). Observables; 1553/// on which a PDF depends via more than route are not safe; 1554/// for use with internal generators because they introduce; 1555/// correlations not known to the internal generator; 1556 ; 1557bool RooAbsPdf::isDirectGenSafe(const RooAbsArg& arg) const; 1558{; 1559 // Arg must be direct server of self; 1560 if (!findServer(arg.GetName())) return false ;; 1561 ; 1562 // There must be no other dependency routes; 1563 for (const auto server : _serverList) {; 1564 if(server == &arg) continue;; 1565 if(server->dependsOn(arg)) {; 1566 return false ;; 1567 }; 1568 }; 1569 ; 1570 return true ;; 1571}; 1572 ; 1573 ; 1574////////////////////////////////////////////////////////////////////////////////; 1575/// Generate a new dataset containing the specified variables with events sampled from our distribution.; 1576/// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; 1577/// constant and not be used for event generation; 1578/// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg to change behaviour of generateBinned(); 1579/// \return RooDataHist *, to be managed by caller.; 1580///; 1581/// Generate the specified number of events or expectedEvents() if not specified.; 1582///; 1583/// Any variables of this PDF that are not in whatVars will use their; 1584/// current values and be treated as fixed parameters. Returns zero; 1585/// in case of an error. The caller takes ownership of the returned; 1586/// dataset.; 1587///; 1588/// The following named arguments are supported; 1589/// | Type of ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:77866,Integrability,message,messages,77866," specified variables with events sampled from our distribution.; 1576/// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; 1577/// constant and not be used for event generation; 1578/// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg to change behaviour of generateBinned(); 1579/// \return RooDataHist *, to be managed by caller.; 1580///; 1581/// Generate the specified number of events or expectedEvents() if not specified.; 1582///; 1583/// Any variables of this PDF that are not in whatVars will use their; 1584/// current values and be treated as fixed parameters. Returns zero; 1585/// in case of an error. The caller takes ownership of the returned; 1586/// dataset.; 1587///; 1588/// The following named arguments are supported; 1589/// | Type of CmdArg | Effect on generation; 1590/// |---------------------------|-----------------------; 1591/// | `Name(const char* name)` | Name of the output dataset; 1592/// | `Verbose(bool flag)` | Print informational messages during event generation; 1593/// | `NumEvents(int nevt)` | Generate specified number of events; 1594/// | `Extended()` | The actual number of events generated will be sampled from a Poisson distribution with mu=nevt. This can be *much* faster for peaked PDFs, but the number of events is not exactly what was requested.; 1595/// | `ExpectedData()` | Return a binned dataset _without_ statistical fluctuations (also aliased as Asimov()); 1596///; 1597 ; 1598RooFit::OwningPtr<RooDataHist> RooAbsPdf::generateBinned(const RooArgSet& whatVars, const RooCmdArg& arg1,const RooCmdArg& arg2,; 1599 const RooCmdArg& arg3,const RooCmdArg& arg4, const RooCmdArg& arg5,const RooCmdArg& arg6) const; 1600{; 1601 ; 1602 // Select the pdf-specific commands; 1603 RooCmdConfig pc(""RooAbsPdf::generate("" + std::string(GetName()) + "")"");; 1604 pc.defineString(""dsetName"",""Name"",0,"""") ;; 1605 pc.defineInt(""verbose"",""Verbose"",0,0) ;; 1606 pc.defineInt(""extended"",""Extended"",",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:86199,Integrability,interface,interface,86199,"> 1.E7) && !havePrintedInfo) {; 1766 havePrintedInfo = true;; 1767 coutP(Generation) << ""RooAbsPdf::generateBinned("" << GetName() << "") Performing costly accept/reject sampling. If this takes too long, use ""; 1768 << ""extended mode to speed up the process."" << std::endl;; 1769 }; 1770 }; 1771 ; 1772 // Transfer working array to histogram; 1773 for (int i=0 ; i<hist->numEntries() ; i++) {; 1774 hist->get(i) ;; 1775 hist->set(histOut[i],sqrt(1.0*histOut[i])) ;; 1776 }; 1777 ; 1778 } else if (expectedData) {; 1779 ; 1780 // Second pass for expectedData mode -- Normalize to exact number of requested events; 1781 // Minor difference may be present in first round due to difference between; 1782 // bin average and bin integral in sampling bins; 1783 double corr = nEvents/hist->sumEntries() ;; 1784 for (int i=0 ; i<hist->numEntries() ; i++) {; 1785 hist->get(i) ;; 1786 hist->set(hist->weight()*corr,sqrt(hist->weight()*corr)) ;; 1787 }; 1788 ; 1789 }; 1790 ; 1791 return RooFit::makeOwningPtr(std::move(hist));; 1792}; 1793 ; 1794 ; 1795 ; 1796////////////////////////////////////////////////////////////////////////////////; 1797/// Special generator interface for generation of 'global observables' -- for RooStats tools; 1798 ; 1799RooFit::OwningPtr<RooDataSet> RooAbsPdf::generateSimGlobal(const RooArgSet& whatVars, Int_t nEvents); 1800{; 1801 return generate(whatVars,nEvents) ;; 1802}; 1803 ; 1804namespace {; 1805void removeRangeOverlap(std::vector<std::pair<double, double>>& ranges) {; 1806 //Sort from left to right; 1807 std::sort(ranges.begin(), ranges.end());; 1808 ; 1809 for (auto it = ranges.begin(); it != ranges.end(); ++it) {; 1810 double& startL = it->first;; 1811 double& endL = it->second;; 1812 ; 1813 for (auto innerIt = it+1; innerIt != ranges.end(); ++innerIt) {; 1814 const double startR = innerIt->first;; 1815 const double endR = innerIt->second;; 1816 ; 1817 if (startL <= startR && startR <= endL) {; 1818 //Overlapping ranges, extend left one; 1819 endL = std::ma",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:87878,Integrability,integrat,integrated,87878,">first;; 1815 const double endR = innerIt->second;; 1816 ; 1817 if (startL <= startR && startR <= endL) {; 1818 //Overlapping ranges, extend left one; 1819 endL = std::max(endL, endR);; 1820 *innerIt = make_pair(0., 0.);; 1821 }; 1822 }; 1823 }; 1824 ; 1825 auto newEnd = std::remove_if(ranges.begin(), ranges.end(),; 1826 [](const std::pair<double,double>& input){; 1827 return input.first == input.second;; 1828 });; 1829 ranges.erase(newEnd, ranges.end());; 1830}; 1831}; 1832 ; 1833 ; 1834////////////////////////////////////////////////////////////////////////////////; 1835/// Plot (project) PDF on specified frame.; 1836/// - If a PDF is plotted in an empty frame, it; 1837/// will show a unit-normalized curve in the frame variable. When projecting a multi-; 1838/// dimensional PDF onto the frame axis, hidden parameters are taken are taken at; 1839/// their current value.; 1840/// - If a PDF is plotted in a frame in which a dataset has already been plotted, it will; 1841/// show a projection integrated over all variables that were present in the shown; 1842/// dataset (except for the one on the x-axis). The normalization of the curve will; 1843/// be adjusted to the event count of the plotted dataset. An informational message; 1844/// will be printed for each projection step that is performed.; 1845/// - If a PDF is plotted in a frame showing a dataset *after* a fit, the above happens,; 1846/// but the PDF will be drawn and normalised only in the fit range. If this is not desired,; 1847/// plotting and normalisation range can be overridden using Range() and NormRange() as; 1848/// documented in the table below.; 1849///; 1850/// This function takes the following named arguments (for more arguments, see also; 1851/// RooAbsReal::plotOn(RooPlot*,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,; 1852/// const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,; 1853/// const RooCmdArg&) const ); 1854///; 1855///; 1856/// <t",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:88109,Integrability,message,message,88109,"wEnd = std::remove_if(ranges.begin(), ranges.end(),; 1826 [](const std::pair<double,double>& input){; 1827 return input.first == input.second;; 1828 });; 1829 ranges.erase(newEnd, ranges.end());; 1830}; 1831}; 1832 ; 1833 ; 1834////////////////////////////////////////////////////////////////////////////////; 1835/// Plot (project) PDF on specified frame.; 1836/// - If a PDF is plotted in an empty frame, it; 1837/// will show a unit-normalized curve in the frame variable. When projecting a multi-; 1838/// dimensional PDF onto the frame axis, hidden parameters are taken are taken at; 1839/// their current value.; 1840/// - If a PDF is plotted in a frame in which a dataset has already been plotted, it will; 1841/// show a projection integrated over all variables that were present in the shown; 1842/// dataset (except for the one on the x-axis). The normalization of the curve will; 1843/// be adjusted to the event count of the plotted dataset. An informational message; 1844/// will be printed for each projection step that is performed.; 1845/// - If a PDF is plotted in a frame showing a dataset *after* a fit, the above happens,; 1846/// but the PDF will be drawn and normalised only in the fit range. If this is not desired,; 1847/// plotting and normalisation range can be overridden using Range() and NormRange() as; 1848/// documented in the table below.; 1849///; 1850/// This function takes the following named arguments (for more arguments, see also; 1851/// RooAbsReal::plotOn(RooPlot*,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,; 1852/// const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,; 1853/// const RooCmdArg&) const ); 1854///; 1855///; 1856/// <table>; 1857/// <tr><th> Type of argument <th> Controlling normalisation; 1858/// <tr><td> `NormRange(const char* name)` <td> Calculate curve normalization w.r.t. specified range[s].; 1859/// See the tutorial rf212_plottingInRanges_blinding.C; 1860/// \note Setting ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:89643,Integrability,depend,depends,89643,"st RooCmdArg&,; 1852/// const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,; 1853/// const RooCmdArg&) const ); 1854///; 1855///; 1856/// <table>; 1857/// <tr><th> Type of argument <th> Controlling normalisation; 1858/// <tr><td> `NormRange(const char* name)` <td> Calculate curve normalization w.r.t. specified range[s].; 1859/// See the tutorial rf212_plottingInRanges_blinding.C; 1860/// \note Setting a Range() by default also sets a NormRange() on the same range, meaning that the; 1861/// PDF is plotted and normalised in the same range. Overriding this can be useful if the PDF was fit; 1862/// in limited range[s] such as side bands, `NormRange(""sidebandLeft,sidebandRight"")`, but the PDF; 1863/// should be drawn in the full range, `Range("""")`.; 1864///; 1865/// <tr><td> `Normalization(double scale, ScaleType code)` <td> Adjust normalization by given scale factor.; 1866/// Interpretation of number depends on code:; 1867/// `RooAbsReal::Relative`: relative adjustment factor; 1868/// `RooAbsReal::NumEvent`: scale to match given number of events.; 1869///; 1870/// <tr><th> Type of argument <th> Misc control; 1871/// <tr><td> `Name(const chat* name)` <td> Give curve specified name in frame. Useful if curve is to be referenced later; 1872/// <tr><td> `Asymmetry(const RooCategory& c)` <td> Show the asymmetry of the PDF in given two-state category; 1873/// \f$ \frac{F(+)-F(-)}{F(+)+F(-)} \f$ rather than the PDF projection. Category must have two; 1874/// states with indices -1 and +1 or three states with indices -1,0 and +1.; 1875/// <tr><td> `ShiftToZero(bool flag)` <td> Shift entire curve such that lowest visible point is at exactly zero.; 1876/// Mostly useful when plotting -log(L) or \f$ \chi^2 \f$ distributions; 1877/// <tr><td> `AddTo(const char* name, double_t wgtSelf, double_t wgtOther)` <td> Create a projection of this PDF onto the x-axis, but; 1878/// instead of plotting it directly, add it to an existing curve with given name (and",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:91267,Integrability,integrat,integrating,91267,".; 1875/// <tr><td> `ShiftToZero(bool flag)` <td> Shift entire curve such that lowest visible point is at exactly zero.; 1876/// Mostly useful when plotting -log(L) or \f$ \chi^2 \f$ distributions; 1877/// <tr><td> `AddTo(const char* name, double_t wgtSelf, double_t wgtOther)` <td> Create a projection of this PDF onto the x-axis, but; 1878/// instead of plotting it directly, add it to an existing curve with given name (and relative weight factors).; 1879/// <tr><td> `Components(const char* names)` <td> When plotting sums of PDFs, plot only the named components (*e.g.* only; 1880/// the signal of a signal+background model).; 1881/// <tr><td> `Components(const RooArgSet& compSet)` <td> As above, but pass a RooArgSet of the components themselves.; 1882///; 1883/// <tr><th> Type of argument <th> Projection control; 1884/// <tr><td> `Slice(const RooArgSet& set)` <td> Override default projection behaviour by omitting observables listed; 1885/// in set from the projection, i.e. by not integrating over these.; 1886/// Slicing is usually only sensible in discrete observables, by e.g. creating a slice; 1887/// of the PDF at the current value of the category observable.; 1888/// <tr><td> `Slice(RooCategory& cat, const char* label)` <td> Override default projection behaviour by omitting the specified category; 1889/// observable from the projection, i.e., by not integrating over all states of this category.; 1890/// The slice is positioned at the given label value. Multiple Slice() commands can be given to specify slices; 1891/// in multiple observables, e.g.; 1892/// ```{.cpp}; 1893/// pdf.plotOn(frame, Slice(tagCategory, ""2tag""), Slice(jetCategory, ""3jet""));; 1894/// ```; 1895/// <tr><td> `Project(const RooArgSet& set)` <td> Override default projection behaviour by projecting; 1896/// over observables given in set, completely ignoring the default projection behavior. Advanced use only.; 1897/// <tr><td> `ProjWData(const RooAbsData& d)` <td> Override default projection _techniq",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:91647,Integrability,integrat,integrating,91647,"existing curve with given name (and relative weight factors).; 1879/// <tr><td> `Components(const char* names)` <td> When plotting sums of PDFs, plot only the named components (*e.g.* only; 1880/// the signal of a signal+background model).; 1881/// <tr><td> `Components(const RooArgSet& compSet)` <td> As above, but pass a RooArgSet of the components themselves.; 1882///; 1883/// <tr><th> Type of argument <th> Projection control; 1884/// <tr><td> `Slice(const RooArgSet& set)` <td> Override default projection behaviour by omitting observables listed; 1885/// in set from the projection, i.e. by not integrating over these.; 1886/// Slicing is usually only sensible in discrete observables, by e.g. creating a slice; 1887/// of the PDF at the current value of the category observable.; 1888/// <tr><td> `Slice(RooCategory& cat, const char* label)` <td> Override default projection behaviour by omitting the specified category; 1889/// observable from the projection, i.e., by not integrating over all states of this category.; 1890/// The slice is positioned at the given label value. Multiple Slice() commands can be given to specify slices; 1891/// in multiple observables, e.g.; 1892/// ```{.cpp}; 1893/// pdf.plotOn(frame, Slice(tagCategory, ""2tag""), Slice(jetCategory, ""3jet""));; 1894/// ```; 1895/// <tr><td> `Project(const RooArgSet& set)` <td> Override default projection behaviour by projecting; 1896/// over observables given in set, completely ignoring the default projection behavior. Advanced use only.; 1897/// <tr><td> `ProjWData(const RooAbsData& d)` <td> Override default projection _technique_ (integration). For observables; 1898/// present in given dataset projection of PDF is achieved by constructing an average over all observable; 1899/// values in given set. Consult RooFit plotting tutorial for further explanation of meaning & use of this technique; 1900/// <tr><td> `ProjWData(const RooArgSet& s, const RooAbsData& d)` <td> As above but only consider subset 's' of; 1901",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:92280,Integrability,integrat,integration,92280,"m the projection, i.e. by not integrating over these.; 1886/// Slicing is usually only sensible in discrete observables, by e.g. creating a slice; 1887/// of the PDF at the current value of the category observable.; 1888/// <tr><td> `Slice(RooCategory& cat, const char* label)` <td> Override default projection behaviour by omitting the specified category; 1889/// observable from the projection, i.e., by not integrating over all states of this category.; 1890/// The slice is positioned at the given label value. Multiple Slice() commands can be given to specify slices; 1891/// in multiple observables, e.g.; 1892/// ```{.cpp}; 1893/// pdf.plotOn(frame, Slice(tagCategory, ""2tag""), Slice(jetCategory, ""3jet""));; 1894/// ```; 1895/// <tr><td> `Project(const RooArgSet& set)` <td> Override default projection behaviour by projecting; 1896/// over observables given in set, completely ignoring the default projection behavior. Advanced use only.; 1897/// <tr><td> `ProjWData(const RooAbsData& d)` <td> Override default projection _technique_ (integration). For observables; 1898/// present in given dataset projection of PDF is achieved by constructing an average over all observable; 1899/// values in given set. Consult RooFit plotting tutorial for further explanation of meaning & use of this technique; 1900/// <tr><td> `ProjWData(const RooArgSet& s, const RooAbsData& d)` <td> As above but only consider subset 's' of; 1901/// observables in dataset 'd' for projection through data averaging; 1902/// <tr><td> `ProjectionRange(const char* rn)` <td> When projecting the PDF onto the plot axis, it is usually integrated; 1903/// over the full range of the invisible variables. The ProjectionRange overrides this.; 1904/// This is useful if the PDF was fitted in a limited range in y, but it is now projected onto x. If; 1905/// `ProjectionRange(""<name of fit range>"")` is passed, the projection is normalised correctly.; 1906///; 1907/// <tr><th> Type of argument <th> Plotting control; 1908/// <tr",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:92849,Integrability,integrat,integrated,92849,"category.; 1890/// The slice is positioned at the given label value. Multiple Slice() commands can be given to specify slices; 1891/// in multiple observables, e.g.; 1892/// ```{.cpp}; 1893/// pdf.plotOn(frame, Slice(tagCategory, ""2tag""), Slice(jetCategory, ""3jet""));; 1894/// ```; 1895/// <tr><td> `Project(const RooArgSet& set)` <td> Override default projection behaviour by projecting; 1896/// over observables given in set, completely ignoring the default projection behavior. Advanced use only.; 1897/// <tr><td> `ProjWData(const RooAbsData& d)` <td> Override default projection _technique_ (integration). For observables; 1898/// present in given dataset projection of PDF is achieved by constructing an average over all observable; 1899/// values in given set. Consult RooFit plotting tutorial for further explanation of meaning & use of this technique; 1900/// <tr><td> `ProjWData(const RooArgSet& s, const RooAbsData& d)` <td> As above but only consider subset 's' of; 1901/// observables in dataset 'd' for projection through data averaging; 1902/// <tr><td> `ProjectionRange(const char* rn)` <td> When projecting the PDF onto the plot axis, it is usually integrated; 1903/// over the full range of the invisible variables. The ProjectionRange overrides this.; 1904/// This is useful if the PDF was fitted in a limited range in y, but it is now projected onto x. If; 1905/// `ProjectionRange(""<name of fit range>"")` is passed, the projection is normalised correctly.; 1906///; 1907/// <tr><th> Type of argument <th> Plotting control; 1908/// <tr><td> `LineStyle(Int_t style)` <td> Select line style by ROOT line style code, default is solid; 1909/// <tr><td> `LineColor(Int_t color)` <td> Select line color by ROOT color code, default is blue; 1910/// <tr><td> `LineWidth(Int_t width)` <td> Select line with in pixels, default is 3; 1911/// <tr><td> `FillStyle(Int_t style)` <td> Select fill style, default is not filled. If a filled style is selected,; 1912/// also use VLines() to add ver",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:103956,Integrability,integrat,integration,103956,"continue;; 2091 }; 2092 rangeLim.push_back(frame->getPlotVar()->getRange(thisRangeName));; 2093 }; 2094 adjustNorm = true ;; 2095 hasCustomRange = true ;; 2096 coutI(Plotting) << ""RooAbsPdf::plotOn("" << GetName() << "") p.d.f. curve is normalized using explicit choice of ranges '"" << pc.getString(""normRangeName"", """", false) << ""'"" << endl ;; 2097 ; 2098 nameSuffix.append(""_NormRange["" + std::string(pc.getString(""rangeName"")) + ""]"");; 2099 ; 2100 }; 2101 ; 2102 if (hasCustomRange && adjustNorm) {; 2103 // If overlapping ranges were given, remove them now; 2104 const std::size_t oldSize = rangeLim.size();; 2105 removeRangeOverlap(rangeLim);; 2106 ; 2107 if (oldSize != rangeLim.size() && !pc.hasProcessed(""NormRange"")) {; 2108 // User gave overlapping ranges. This leads to double-counting events and integrals, and must; 2109 // therefore be avoided. If a NormRange has been given, the overlap is already gone.; 2110 // It's safe to plot even with overlap now.; 2111 coutE(Plotting) << ""Requested plot/integration ranges overlap. For correct plotting, new ranges ""; 2112 ""will be defined."" << std::endl;; 2113 auto plotVar = dynamic_cast<RooRealVar*>(frame->getPlotVar());; 2114 assert(plotVar);; 2115 std::string rangesNoOverlap;; 2116 for (auto it = rangeLim.begin(); it != rangeLim.end(); ++it) {; 2117 std::stringstream rangeName;; 2118 rangeName << ""Remove_overlap_range_"" << it - rangeLim.begin();; 2119 plotVar->setRange(rangeName.str().c_str(), it->first, it->second);; 2120 if (!rangesNoOverlap.empty()); 2121 rangesNoOverlap += "","";; 2122 rangesNoOverlap += rangeName.str();; 2123 }; 2124 ; 2125 auto rangeArg = static_cast<RooCmdArg*>(cmdList.FindObject(""RangeWithName""));; 2126 if (rangeArg) {; 2127 rangeArg->setString(0, rangesNoOverlap.c_str());; 2128 } else {; 2129 plotRange = std::make_unique<RooCmdArg>(RooFit::Range(rangesNoOverlap.c_str()));; 2130 cmdList.Add(plotRange.get());; 2131 }; 2132 }; 2133 ; 2134 double rangeNevt(0) ;; 2135 for (const auto& riter : rangeLim) {; 2",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:117253,Integrability,integrat,integrated,117253,"{; 2420 return _verboseEval ;; 2421}; 2422 ; 2423 ; 2424 ; 2425////////////////////////////////////////////////////////////////////////////////; 2426/// Destructor of normalization cache element. If this element; 2427/// provides the 'current' normalization stored in RooAbsPdf::_norm; 2428/// zero _norm pointer here before object pointed to is deleted here; 2429 ; 2430RooAbsPdf::CacheElem::~CacheElem(); 2431{; 2432 // Zero _norm pointer in RooAbsPdf if it is points to our cache payload; 2433 if (_owner) {; 2434 RooAbsPdf* pdfOwner = static_cast<RooAbsPdf*>(_owner) ;; 2435 if (pdfOwner->_norm == _norm.get()) {; 2436 pdfOwner->_norm = nullptr ;; 2437 }; 2438 }; 2439}; 2440 ; 2441 ; 2442 ; 2443////////////////////////////////////////////////////////////////////////////////; 2444/// Return a p.d.f that represent a projection of this p.d.f integrated over given observables; 2445 ; 2446RooAbsPdf* RooAbsPdf::createProjection(const RooArgSet& iset); 2447{; 2448 // Construct name for new object; 2449 std::string name = std::string{GetName()} + ""_Proj["" + RooHelpers::getColonSeparatedNameString(iset, ',') + ""]"";; 2450 ; 2451 // Return projected p.d.f.; 2452 return new RooProjectedPdf(name.c_str(),name.c_str(),*this,iset) ;; 2453}; 2454 ; 2455 ; 2456 ; 2457////////////////////////////////////////////////////////////////////////////////; 2458/// Create a cumulative distribution function of this p.d.f in terms; 2459/// of the observables listed in iset. If no nset argument is given; 2460/// the c.d.f normalization is constructed over the integrated; 2461/// observables, so that its maximum value is precisely 1. It is also; 2462/// possible to choose a different normalization for; 2463/// multi-dimensional p.d.f.s: eg. for a pdf f(x,y,z) one can; 2464/// construct a partial cdf c(x,y) that only when integrated itself; 2465/// over z results in a maximum value of 1. To construct such a cdf pass; 2466/// z as argument to the optional nset argument; 2467 ; 2468RooFit::OwningPtr<RooA",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:117957,Integrability,integrat,integrated,117957,"r) ;; 2435 if (pdfOwner->_norm == _norm.get()) {; 2436 pdfOwner->_norm = nullptr ;; 2437 }; 2438 }; 2439}; 2440 ; 2441 ; 2442 ; 2443////////////////////////////////////////////////////////////////////////////////; 2444/// Return a p.d.f that represent a projection of this p.d.f integrated over given observables; 2445 ; 2446RooAbsPdf* RooAbsPdf::createProjection(const RooArgSet& iset); 2447{; 2448 // Construct name for new object; 2449 std::string name = std::string{GetName()} + ""_Proj["" + RooHelpers::getColonSeparatedNameString(iset, ',') + ""]"";; 2450 ; 2451 // Return projected p.d.f.; 2452 return new RooProjectedPdf(name.c_str(),name.c_str(),*this,iset) ;; 2453}; 2454 ; 2455 ; 2456 ; 2457////////////////////////////////////////////////////////////////////////////////; 2458/// Create a cumulative distribution function of this p.d.f in terms; 2459/// of the observables listed in iset. If no nset argument is given; 2460/// the c.d.f normalization is constructed over the integrated; 2461/// observables, so that its maximum value is precisely 1. It is also; 2462/// possible to choose a different normalization for; 2463/// multi-dimensional p.d.f.s: eg. for a pdf f(x,y,z) one can; 2464/// construct a partial cdf c(x,y) that only when integrated itself; 2465/// over z results in a maximum value of 1. To construct such a cdf pass; 2466/// z as argument to the optional nset argument; 2467 ; 2468RooFit::OwningPtr<RooAbsReal> RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset); 2469{; 2470 return createCdf(iset,RooFit::SupNormSet(nset)) ;; 2471}; 2472 ; 2473 ; 2474 ; 2475////////////////////////////////////////////////////////////////////////////////; 2476/// Create an object that represents the integral of the function over one or more observables listed in `iset`.; 2477/// The actual integration calculation is only performed when the return object is evaluated. The name; 2478/// of the integral object is automatically constructed from the name of the input fu",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:118223,Integrability,integrat,integrated,118223,"t represent a projection of this p.d.f integrated over given observables; 2445 ; 2446RooAbsPdf* RooAbsPdf::createProjection(const RooArgSet& iset); 2447{; 2448 // Construct name for new object; 2449 std::string name = std::string{GetName()} + ""_Proj["" + RooHelpers::getColonSeparatedNameString(iset, ',') + ""]"";; 2450 ; 2451 // Return projected p.d.f.; 2452 return new RooProjectedPdf(name.c_str(),name.c_str(),*this,iset) ;; 2453}; 2454 ; 2455 ; 2456 ; 2457////////////////////////////////////////////////////////////////////////////////; 2458/// Create a cumulative distribution function of this p.d.f in terms; 2459/// of the observables listed in iset. If no nset argument is given; 2460/// the c.d.f normalization is constructed over the integrated; 2461/// observables, so that its maximum value is precisely 1. It is also; 2462/// possible to choose a different normalization for; 2463/// multi-dimensional p.d.f.s: eg. for a pdf f(x,y,z) one can; 2464/// construct a partial cdf c(x,y) that only when integrated itself; 2465/// over z results in a maximum value of 1. To construct such a cdf pass; 2466/// z as argument to the optional nset argument; 2467 ; 2468RooFit::OwningPtr<RooAbsReal> RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset); 2469{; 2470 return createCdf(iset,RooFit::SupNormSet(nset)) ;; 2471}; 2472 ; 2473 ; 2474 ; 2475////////////////////////////////////////////////////////////////////////////////; 2476/// Create an object that represents the integral of the function over one or more observables listed in `iset`.; 2477/// The actual integration calculation is only performed when the return object is evaluated. The name; 2478/// of the integral object is automatically constructed from the name of the input function, the variables; 2479/// it integrates and the range integrates over; 2480///; 2481/// The following named arguments are accepted; 2482/// | Type of CmdArg | Effect on CDF; 2483/// | ---------------------|-------------------; 2484/// |",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:118796,Integrability,integrat,integration,118796,"ms; 2459/// of the observables listed in iset. If no nset argument is given; 2460/// the c.d.f normalization is constructed over the integrated; 2461/// observables, so that its maximum value is precisely 1. It is also; 2462/// possible to choose a different normalization for; 2463/// multi-dimensional p.d.f.s: eg. for a pdf f(x,y,z) one can; 2464/// construct a partial cdf c(x,y) that only when integrated itself; 2465/// over z results in a maximum value of 1. To construct such a cdf pass; 2466/// z as argument to the optional nset argument; 2467 ; 2468RooFit::OwningPtr<RooAbsReal> RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset); 2469{; 2470 return createCdf(iset,RooFit::SupNormSet(nset)) ;; 2471}; 2472 ; 2473 ; 2474 ; 2475////////////////////////////////////////////////////////////////////////////////; 2476/// Create an object that represents the integral of the function over one or more observables listed in `iset`.; 2477/// The actual integration calculation is only performed when the return object is evaluated. The name; 2478/// of the integral object is automatically constructed from the name of the input function, the variables; 2479/// it integrates and the range integrates over; 2480///; 2481/// The following named arguments are accepted; 2482/// | Type of CmdArg | Effect on CDF; 2483/// | ---------------------|-------------------; 2484/// | SupNormSet(const RooArgSet&) | Observables over which should be normalized _in addition_ to the integration observables; 2485/// | ScanNumCdf() | Apply scanning technique if cdf integral involves numeric integration [ default ]; 2486/// | ScanAllCdf() | Always apply scanning technique; 2487/// | ScanNoCdf() | Never apply scanning technique; 2488/// | ScanParameters(Int_t nbins, Int_t intOrder) | Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf; 2489 ; 2490RooFit::OwningPtr<RooAbsReal> RooAbsPdf::createCdf(const RooArgSet& iset, co",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:119008,Integrability,integrat,integrates,119008,"ooFit::SupNormSet(nset)) ;; 2471}; 2472 ; 2473 ; 2474 ; 2475////////////////////////////////////////////////////////////////////////////////; 2476/// Create an object that represents the integral of the function over one or more observables listed in `iset`.; 2477/// The actual integration calculation is only performed when the return object is evaluated. The name; 2478/// of the integral object is automatically constructed from the name of the input function, the variables; 2479/// it integrates and the range integrates over; 2480///; 2481/// The following named arguments are accepted; 2482/// | Type of CmdArg | Effect on CDF; 2483/// | ---------------------|-------------------; 2484/// | SupNormSet(const RooArgSet&) | Observables over which should be normalized _in addition_ to the integration observables; 2485/// | ScanNumCdf() | Apply scanning technique if cdf integral involves numeric integration [ default ]; 2486/// | ScanAllCdf() | Always apply scanning technique; 2487/// | ScanNoCdf() | Never apply scanning technique; 2488/// | ScanParameters(Int_t nbins, Int_t intOrder) | Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf; 2489 ; 2490RooFit::OwningPtr<RooAbsReal> RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2,; 2491 const RooCmdArg& arg3, const RooCmdArg& arg4, const RooCmdArg& arg5,; 2492 const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdArg& arg8); 2493{; 2494 // Define configuration for this method; 2495 RooCmdConfig pc(""RooAbsReal::createCdf("" + std::string(GetName()) + "")"");; 2496 pc.defineSet(""supNormSet"",""SupNormSet"",0,nullptr) ;; 2497 pc.defineInt(""numScanBins"",""ScanParameters"",0,1000) ;; 2498 pc.defineInt(""intOrder"",""ScanParameters"",1,2) ;; 2499 pc.defineInt(""doScanNum"",""ScanNumCdf"",0,1) ;; 2500 pc.defineInt(""doScanAll"",""ScanAllCdf"",0,0) ;; 2501 pc.defineInt(""doScanNon"",""ScanNoCdf"",0,0) ;; 2502 pc.defineMutex(""ScanNumCdf"",""ScanAll",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:119033,Integrability,integrat,integrates,119033,"ooFit::SupNormSet(nset)) ;; 2471}; 2472 ; 2473 ; 2474 ; 2475////////////////////////////////////////////////////////////////////////////////; 2476/// Create an object that represents the integral of the function over one or more observables listed in `iset`.; 2477/// The actual integration calculation is only performed when the return object is evaluated. The name; 2478/// of the integral object is automatically constructed from the name of the input function, the variables; 2479/// it integrates and the range integrates over; 2480///; 2481/// The following named arguments are accepted; 2482/// | Type of CmdArg | Effect on CDF; 2483/// | ---------------------|-------------------; 2484/// | SupNormSet(const RooArgSet&) | Observables over which should be normalized _in addition_ to the integration observables; 2485/// | ScanNumCdf() | Apply scanning technique if cdf integral involves numeric integration [ default ]; 2486/// | ScanAllCdf() | Always apply scanning technique; 2487/// | ScanNoCdf() | Never apply scanning technique; 2488/// | ScanParameters(Int_t nbins, Int_t intOrder) | Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf; 2489 ; 2490RooFit::OwningPtr<RooAbsReal> RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2,; 2491 const RooCmdArg& arg3, const RooCmdArg& arg4, const RooCmdArg& arg5,; 2492 const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdArg& arg8); 2493{; 2494 // Define configuration for this method; 2495 RooCmdConfig pc(""RooAbsReal::createCdf("" + std::string(GetName()) + "")"");; 2496 pc.defineSet(""supNormSet"",""SupNormSet"",0,nullptr) ;; 2497 pc.defineInt(""numScanBins"",""ScanParameters"",0,1000) ;; 2498 pc.defineInt(""intOrder"",""ScanParameters"",1,2) ;; 2499 pc.defineInt(""doScanNum"",""ScanNumCdf"",0,1) ;; 2500 pc.defineInt(""doScanAll"",""ScanAllCdf"",0,0) ;; 2501 pc.defineInt(""doScanNon"",""ScanNoCdf"",0,0) ;; 2502 pc.defineMutex(""ScanNumCdf"",""ScanAll",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:119312,Integrability,integrat,integration,119312,"ooFit::SupNormSet(nset)) ;; 2471}; 2472 ; 2473 ; 2474 ; 2475////////////////////////////////////////////////////////////////////////////////; 2476/// Create an object that represents the integral of the function over one or more observables listed in `iset`.; 2477/// The actual integration calculation is only performed when the return object is evaluated. The name; 2478/// of the integral object is automatically constructed from the name of the input function, the variables; 2479/// it integrates and the range integrates over; 2480///; 2481/// The following named arguments are accepted; 2482/// | Type of CmdArg | Effect on CDF; 2483/// | ---------------------|-------------------; 2484/// | SupNormSet(const RooArgSet&) | Observables over which should be normalized _in addition_ to the integration observables; 2485/// | ScanNumCdf() | Apply scanning technique if cdf integral involves numeric integration [ default ]; 2486/// | ScanAllCdf() | Always apply scanning technique; 2487/// | ScanNoCdf() | Never apply scanning technique; 2488/// | ScanParameters(Int_t nbins, Int_t intOrder) | Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf; 2489 ; 2490RooFit::OwningPtr<RooAbsReal> RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2,; 2491 const RooCmdArg& arg3, const RooCmdArg& arg4, const RooCmdArg& arg5,; 2492 const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdArg& arg8); 2493{; 2494 // Define configuration for this method; 2495 RooCmdConfig pc(""RooAbsReal::createCdf("" + std::string(GetName()) + "")"");; 2496 pc.defineSet(""supNormSet"",""SupNormSet"",0,nullptr) ;; 2497 pc.defineInt(""numScanBins"",""ScanParameters"",0,1000) ;; 2498 pc.defineInt(""intOrder"",""ScanParameters"",1,2) ;; 2499 pc.defineInt(""doScanNum"",""ScanNumCdf"",0,1) ;; 2500 pc.defineInt(""doScanAll"",""ScanAllCdf"",0,0) ;; 2501 pc.defineInt(""doScanNon"",""ScanNoCdf"",0,0) ;; 2502 pc.defineMutex(""ScanNumCdf"",""ScanAll",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:119420,Integrability,integrat,integration,119420,"ooFit::SupNormSet(nset)) ;; 2471}; 2472 ; 2473 ; 2474 ; 2475////////////////////////////////////////////////////////////////////////////////; 2476/// Create an object that represents the integral of the function over one or more observables listed in `iset`.; 2477/// The actual integration calculation is only performed when the return object is evaluated. The name; 2478/// of the integral object is automatically constructed from the name of the input function, the variables; 2479/// it integrates and the range integrates over; 2480///; 2481/// The following named arguments are accepted; 2482/// | Type of CmdArg | Effect on CDF; 2483/// | ---------------------|-------------------; 2484/// | SupNormSet(const RooArgSet&) | Observables over which should be normalized _in addition_ to the integration observables; 2485/// | ScanNumCdf() | Apply scanning technique if cdf integral involves numeric integration [ default ]; 2486/// | ScanAllCdf() | Always apply scanning technique; 2487/// | ScanNoCdf() | Never apply scanning technique; 2488/// | ScanParameters(Int_t nbins, Int_t intOrder) | Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf; 2489 ; 2490RooFit::OwningPtr<RooAbsReal> RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2,; 2491 const RooCmdArg& arg3, const RooCmdArg& arg4, const RooCmdArg& arg5,; 2492 const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdArg& arg8); 2493{; 2494 // Define configuration for this method; 2495 RooCmdConfig pc(""RooAbsReal::createCdf("" + std::string(GetName()) + "")"");; 2496 pc.defineSet(""supNormSet"",""SupNormSet"",0,nullptr) ;; 2497 pc.defineInt(""numScanBins"",""ScanParameters"",0,1000) ;; 2498 pc.defineInt(""intOrder"",""ScanParameters"",1,2) ;; 2499 pc.defineInt(""doScanNum"",""ScanNumCdf"",0,1) ;; 2500 pc.defineInt(""doScanAll"",""ScanAllCdf"",0,0) ;; 2501 pc.defineInt(""doScanNon"",""ScanNoCdf"",0,0) ;; 2502 pc.defineMutex(""ScanNumCdf"",""ScanAll",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:121651,Integrability,integrat,integration,121651," named arguments; 2511 const RooArgSet* snset = pc.getSet(""supNormSet"",nullptr);; 2512 RooArgSet nset ;; 2513 if (snset) {; 2514 nset.add(*snset) ;; 2515 }; 2516 Int_t numScanBins = pc.getInt(""numScanBins"") ;; 2517 Int_t intOrder = pc.getInt(""intOrder"") ;; 2518 Int_t doScanNum = pc.getInt(""doScanNum"") ;; 2519 Int_t doScanAll = pc.getInt(""doScanAll"") ;; 2520 Int_t doScanNon = pc.getInt(""doScanNon"") ;; 2521 ; 2522 // If scanning technique is not requested make integral-based cdf and return; 2523 if (doScanNon) {; 2524 return createIntRI(iset,nset) ;; 2525 }; 2526 if (doScanAll) {; 2527 return createScanCdf(iset,nset,numScanBins,intOrder) ;; 2528 }; 2529 if (doScanNum) {; 2530 std::unique_ptr<RooAbsReal> tmp{createIntegral(iset)} ;; 2531 Int_t isNum= !static_cast<RooRealIntegral&>(*tmp).numIntRealVars().empty();; 2532 ; 2533 if (isNum) {; 2534 coutI(NumIntegration) << ""RooAbsPdf::createCdf("" << GetName() << "") integration over observable(s) "" << iset << "" involves numeric integration,"" << endl; 2535 << "" constructing cdf though numeric integration of sampled pdf in "" << numScanBins << "" bins and applying order ""; 2536 << intOrder << "" interpolation on integrated histogram."" << endl; 2537 << "" To override this choice of technique use argument ScanNone(), to change scan parameters use ScanParameters(nbins,order) argument"" << endl ;; 2538 }; 2539 ; 2540 return isNum ? createScanCdf(iset,nset,numScanBins,intOrder) : createIntRI(iset,nset) ;; 2541 }; 2542 return nullptr ;; 2543}; 2544 ; 2545RooFit::OwningPtr<RooAbsReal> RooAbsPdf::createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); 2546{; 2547 string name = string(GetName()) + ""_NUMCDF_"" + integralNameSuffix(iset,&nset).Data() ;; 2548 RooRealVar* ivar = static_cast<RooRealVar*>(iset.first()) ;; 2549 ivar->setBins(numScanBins,""numcdf"") ;; 2550 auto ret = std::make_unique<RooNumCdf>(name.c_str(),name.c_str(),*this,*ivar,""numcdf"");; 2551 ret->setInterpolationOrder(intOrder) ;; 2552 r",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:121714,Integrability,integrat,integration,121714," named arguments; 2511 const RooArgSet* snset = pc.getSet(""supNormSet"",nullptr);; 2512 RooArgSet nset ;; 2513 if (snset) {; 2514 nset.add(*snset) ;; 2515 }; 2516 Int_t numScanBins = pc.getInt(""numScanBins"") ;; 2517 Int_t intOrder = pc.getInt(""intOrder"") ;; 2518 Int_t doScanNum = pc.getInt(""doScanNum"") ;; 2519 Int_t doScanAll = pc.getInt(""doScanAll"") ;; 2520 Int_t doScanNon = pc.getInt(""doScanNon"") ;; 2521 ; 2522 // If scanning technique is not requested make integral-based cdf and return; 2523 if (doScanNon) {; 2524 return createIntRI(iset,nset) ;; 2525 }; 2526 if (doScanAll) {; 2527 return createScanCdf(iset,nset,numScanBins,intOrder) ;; 2528 }; 2529 if (doScanNum) {; 2530 std::unique_ptr<RooAbsReal> tmp{createIntegral(iset)} ;; 2531 Int_t isNum= !static_cast<RooRealIntegral&>(*tmp).numIntRealVars().empty();; 2532 ; 2533 if (isNum) {; 2534 coutI(NumIntegration) << ""RooAbsPdf::createCdf("" << GetName() << "") integration over observable(s) "" << iset << "" involves numeric integration,"" << endl; 2535 << "" constructing cdf though numeric integration of sampled pdf in "" << numScanBins << "" bins and applying order ""; 2536 << intOrder << "" interpolation on integrated histogram."" << endl; 2537 << "" To override this choice of technique use argument ScanNone(), to change scan parameters use ScanParameters(nbins,order) argument"" << endl ;; 2538 }; 2539 ; 2540 return isNum ? createScanCdf(iset,nset,numScanBins,intOrder) : createIntRI(iset,nset) ;; 2541 }; 2542 return nullptr ;; 2543}; 2544 ; 2545RooFit::OwningPtr<RooAbsReal> RooAbsPdf::createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); 2546{; 2547 string name = string(GetName()) + ""_NUMCDF_"" + integralNameSuffix(iset,&nset).Data() ;; 2548 RooRealVar* ivar = static_cast<RooRealVar*>(iset.first()) ;; 2549 ivar->setBins(numScanBins,""numcdf"") ;; 2550 auto ret = std::make_unique<RooNumCdf>(name.c_str(),name.c_str(),*this,*ivar,""numcdf"");; 2551 ret->setInterpolationOrder(intOrder) ;; 2552 r",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:121779,Integrability,integrat,integration,121779," named arguments; 2511 const RooArgSet* snset = pc.getSet(""supNormSet"",nullptr);; 2512 RooArgSet nset ;; 2513 if (snset) {; 2514 nset.add(*snset) ;; 2515 }; 2516 Int_t numScanBins = pc.getInt(""numScanBins"") ;; 2517 Int_t intOrder = pc.getInt(""intOrder"") ;; 2518 Int_t doScanNum = pc.getInt(""doScanNum"") ;; 2519 Int_t doScanAll = pc.getInt(""doScanAll"") ;; 2520 Int_t doScanNon = pc.getInt(""doScanNon"") ;; 2521 ; 2522 // If scanning technique is not requested make integral-based cdf and return; 2523 if (doScanNon) {; 2524 return createIntRI(iset,nset) ;; 2525 }; 2526 if (doScanAll) {; 2527 return createScanCdf(iset,nset,numScanBins,intOrder) ;; 2528 }; 2529 if (doScanNum) {; 2530 std::unique_ptr<RooAbsReal> tmp{createIntegral(iset)} ;; 2531 Int_t isNum= !static_cast<RooRealIntegral&>(*tmp).numIntRealVars().empty();; 2532 ; 2533 if (isNum) {; 2534 coutI(NumIntegration) << ""RooAbsPdf::createCdf("" << GetName() << "") integration over observable(s) "" << iset << "" involves numeric integration,"" << endl; 2535 << "" constructing cdf though numeric integration of sampled pdf in "" << numScanBins << "" bins and applying order ""; 2536 << intOrder << "" interpolation on integrated histogram."" << endl; 2537 << "" To override this choice of technique use argument ScanNone(), to change scan parameters use ScanParameters(nbins,order) argument"" << endl ;; 2538 }; 2539 ; 2540 return isNum ? createScanCdf(iset,nset,numScanBins,intOrder) : createIntRI(iset,nset) ;; 2541 }; 2542 return nullptr ;; 2543}; 2544 ; 2545RooFit::OwningPtr<RooAbsReal> RooAbsPdf::createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); 2546{; 2547 string name = string(GetName()) + ""_NUMCDF_"" + integralNameSuffix(iset,&nset).Data() ;; 2548 RooRealVar* ivar = static_cast<RooRealVar*>(iset.first()) ;; 2549 ivar->setBins(numScanBins,""numcdf"") ;; 2550 auto ret = std::make_unique<RooNumCdf>(name.c_str(),name.c_str(),*this,*ivar,""numcdf"");; 2551 ret->setInterpolationOrder(intOrder) ;; 2552 r",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:121897,Integrability,integrat,integrated,121897," named arguments; 2511 const RooArgSet* snset = pc.getSet(""supNormSet"",nullptr);; 2512 RooArgSet nset ;; 2513 if (snset) {; 2514 nset.add(*snset) ;; 2515 }; 2516 Int_t numScanBins = pc.getInt(""numScanBins"") ;; 2517 Int_t intOrder = pc.getInt(""intOrder"") ;; 2518 Int_t doScanNum = pc.getInt(""doScanNum"") ;; 2519 Int_t doScanAll = pc.getInt(""doScanAll"") ;; 2520 Int_t doScanNon = pc.getInt(""doScanNon"") ;; 2521 ; 2522 // If scanning technique is not requested make integral-based cdf and return; 2523 if (doScanNon) {; 2524 return createIntRI(iset,nset) ;; 2525 }; 2526 if (doScanAll) {; 2527 return createScanCdf(iset,nset,numScanBins,intOrder) ;; 2528 }; 2529 if (doScanNum) {; 2530 std::unique_ptr<RooAbsReal> tmp{createIntegral(iset)} ;; 2531 Int_t isNum= !static_cast<RooRealIntegral&>(*tmp).numIntRealVars().empty();; 2532 ; 2533 if (isNum) {; 2534 coutI(NumIntegration) << ""RooAbsPdf::createCdf("" << GetName() << "") integration over observable(s) "" << iset << "" involves numeric integration,"" << endl; 2535 << "" constructing cdf though numeric integration of sampled pdf in "" << numScanBins << "" bins and applying order ""; 2536 << intOrder << "" interpolation on integrated histogram."" << endl; 2537 << "" To override this choice of technique use argument ScanNone(), to change scan parameters use ScanParameters(nbins,order) argument"" << endl ;; 2538 }; 2539 ; 2540 return isNum ? createScanCdf(iset,nset,numScanBins,intOrder) : createIntRI(iset,nset) ;; 2541 }; 2542 return nullptr ;; 2543}; 2544 ; 2545RooFit::OwningPtr<RooAbsReal> RooAbsPdf::createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); 2546{; 2547 string name = string(GetName()) + ""_NUMCDF_"" + integralNameSuffix(iset,&nset).Data() ;; 2548 RooRealVar* ivar = static_cast<RooRealVar*>(iset.first()) ;; 2549 ivar->setBins(numScanBins,""numcdf"") ;; 2550 auto ret = std::make_unique<RooNumCdf>(name.c_str(),name.c_str(),*this,*ivar,""numcdf"");; 2551 ret->setInterpolationOrder(intOrder) ;; 2552 r",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:124070,Integrability,depend,dependsOnValue,124070," 2564{; 2565 RooArgSet constraints;; 2566 RooArgSet pdfParams;; 2567 ; 2568 std::unique_ptr<RooArgSet> comps(getComponents());; 2569 for (const auto arg : *comps) {; 2570 auto pdf = dynamic_cast<const RooAbsPdf*>(arg) ;; 2571 if (pdf && !constraints.find(pdf->GetName())) {; 2572 std::unique_ptr<RooArgSet> compRet(; 2573 pdf->getConstraints(observables,constrainedParams, pdfParams));; 2574 if (compRet) {; 2575 constraints.add(*compRet,false) ;; 2576 }; 2577 }; 2578 }; 2579 ; 2580 RooArgSet conParams;; 2581 ; 2582 // Strip any constraints that are completely decoupled from the other product terms; 2583 RooArgSet* finalConstraints = new RooArgSet(""AllConstraints"") ;; 2584 for(auto * pdf : static_range_cast<RooAbsPdf*>(constraints)) {; 2585 ; 2586 RooArgSet tmp;; 2587 pdf->getParameters(nullptr, tmp);; 2588 conParams.add(tmp,true) ;; 2589 ; 2590 if (pdf->dependsOnValue(pdfParams) || !stripDisconnected) {; 2591 finalConstraints->add(*pdf) ;; 2592 } else {; 2593 coutI(Minimization) << ""RooAbsPdf::getAllConstraints("" << GetName() << "") omitting term "" << pdf->GetName(); 2594 << "" as constraint term as it does not share any parameters with the other pdfs in product. ""; 2595 << ""To force inclusion in likelihood, add an explicit Constrain() argument for the target parameter"" << endl ;; 2596 }; 2597 }; 2598 ; 2599 // Now remove from constrainedParams all parameters that occur exclusively in constraint term and not in regular pdf term; 2600 ; 2601 RooArgSet cexl;; 2602 conParams.selectCommon(constrainedParams, cexl);; 2603 cexl.remove(pdfParams,true,true) ;; 2604 constrainedParams.remove(cexl,true,true) ;; 2605 ; 2606 return finalConstraints ;; 2607}; 2608 ; 2609 ; 2610////////////////////////////////////////////////////////////////////////////////; 2611/// Returns the default numeric MC generator configuration for all RooAbsReals; 2612 ; 2613RooNumGenConfig* RooAbsPdf::defaultGeneratorConfig(); 2614{; 2615 return &RooNumGenConfig::defaultConfig() ;; 2616}; 2617 ; 2618 ; 2619///",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:125319,Integrability,integrat,integrator,125319,"(pdfParams) || !stripDisconnected) {; 2591 finalConstraints->add(*pdf) ;; 2592 } else {; 2593 coutI(Minimization) << ""RooAbsPdf::getAllConstraints("" << GetName() << "") omitting term "" << pdf->GetName(); 2594 << "" as constraint term as it does not share any parameters with the other pdfs in product. ""; 2595 << ""To force inclusion in likelihood, add an explicit Constrain() argument for the target parameter"" << endl ;; 2596 }; 2597 }; 2598 ; 2599 // Now remove from constrainedParams all parameters that occur exclusively in constraint term and not in regular pdf term; 2600 ; 2601 RooArgSet cexl;; 2602 conParams.selectCommon(constrainedParams, cexl);; 2603 cexl.remove(pdfParams,true,true) ;; 2604 constrainedParams.remove(cexl,true,true) ;; 2605 ; 2606 return finalConstraints ;; 2607}; 2608 ; 2609 ; 2610////////////////////////////////////////////////////////////////////////////////; 2611/// Returns the default numeric MC generator configuration for all RooAbsReals; 2612 ; 2613RooNumGenConfig* RooAbsPdf::defaultGeneratorConfig(); 2614{; 2615 return &RooNumGenConfig::defaultConfig() ;; 2616}; 2617 ; 2618 ; 2619////////////////////////////////////////////////////////////////////////////////; 2620/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2621/// If this object has no specialized configuration, a null pointer is returned; 2622 ; 2623RooNumGenConfig* RooAbsPdf::specialGeneratorConfig() const; 2624{; 2625 return _specGeneratorConfig.get();; 2626}; 2627 ; 2628 ; 2629 ; 2630////////////////////////////////////////////////////////////////////////////////; 2631/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2632/// If this object has no specialized configuration, a null pointer is returned,; 2633/// unless createOnTheFly is true in which case a clone of the default integrator; 2634/// configuration is created, installed as specialized configuration, and returned; 2635 ; 2636RooNumGenConfig* RooAbsPdf::specialGeneratorCo",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:125718,Integrability,integrat,integrator,125718,"01 RooArgSet cexl;; 2602 conParams.selectCommon(constrainedParams, cexl);; 2603 cexl.remove(pdfParams,true,true) ;; 2604 constrainedParams.remove(cexl,true,true) ;; 2605 ; 2606 return finalConstraints ;; 2607}; 2608 ; 2609 ; 2610////////////////////////////////////////////////////////////////////////////////; 2611/// Returns the default numeric MC generator configuration for all RooAbsReals; 2612 ; 2613RooNumGenConfig* RooAbsPdf::defaultGeneratorConfig(); 2614{; 2615 return &RooNumGenConfig::defaultConfig() ;; 2616}; 2617 ; 2618 ; 2619////////////////////////////////////////////////////////////////////////////////; 2620/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2621/// If this object has no specialized configuration, a null pointer is returned; 2622 ; 2623RooNumGenConfig* RooAbsPdf::specialGeneratorConfig() const; 2624{; 2625 return _specGeneratorConfig.get();; 2626}; 2627 ; 2628 ; 2629 ; 2630////////////////////////////////////////////////////////////////////////////////; 2631/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2632/// If this object has no specialized configuration, a null pointer is returned,; 2633/// unless createOnTheFly is true in which case a clone of the default integrator; 2634/// configuration is created, installed as specialized configuration, and returned; 2635 ; 2636RooNumGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooA",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:125928,Integrability,integrat,integrator,125928,"on for all RooAbsReals; 2612 ; 2613RooNumGenConfig* RooAbsPdf::defaultGeneratorConfig(); 2614{; 2615 return &RooNumGenConfig::defaultConfig() ;; 2616}; 2617 ; 2618 ; 2619////////////////////////////////////////////////////////////////////////////////; 2620/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2621/// If this object has no specialized configuration, a null pointer is returned; 2622 ; 2623RooNumGenConfig* RooAbsPdf::specialGeneratorConfig() const; 2624{; 2625 return _specGeneratorConfig.get();; 2626}; 2627 ; 2628 ; 2629 ; 2630////////////////////////////////////////////////////////////////////////////////; 2631/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2632/// If this object has no specialized configuration, a null pointer is returned,; 2633/// unless createOnTheFly is true in which case a clone of the default integrator; 2634/// configuration is created, installed as specialized configuration, and returned; 2635 ; 2636RooNumGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooAbsReals is returned; 2650 ; 2651const RooNumGenConfig* RooAbsPdf::getGeneratorConfig() const; 2652{; 2653 const RooNumGenConfig* config = specialGeneratorConfig() ;; 2654 if (config) return config ;; 2655 return defaultGeneratorConfig() ;; 2656}; 2657 ; 2658 ; 2659 ; 2660////////////////////////////////////////////////////////////////////////////////; 2661/// Set the ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:129672,Integrability,depend,depend,129672,"; 2705 }; 2706 }; 2707 ; 2708 // It can happen that the objects cached by the client are also clients of; 2709 // the arg itself! In that case, the position of the client in the client; 2710 // list might have changed, and we need to find the new index.; 2711 if(clients.size() != oldClientsSize) {; 2712 auto clientIter = std::find(clients.begin(), clients.end(), client);; 2713 if(clientIter == clients.end()) {; 2714 throw std::runtime_error(""After a clients caches were cleared, the client was gone! This should not happen."");; 2715 }; 2716 iClient = std::distance(clients.begin(), clientIter);; 2717 }; 2718 }; 2719}; 2720 ; 2721} // namespace; 2722 ; 2723 ; 2724////////////////////////////////////////////////////////////////////////////////; 2725 ; 2726void RooAbsPdf::setNormRange(const char* rangeName); 2727{; 2728 if (rangeName) {; 2729 _normRange = rangeName ;; 2730 } else {; 2731 _normRange.Clear() ;; 2732 }; 2733 ; 2734 // the stuff that the clients have cached may depend on the normalization range; 2735 sterilizeClientCaches(*this);; 2736 ; 2737 if (_norm) {; 2738 _normMgr.sterilize() ;; 2739 _norm = nullptr ;; 2740 }; 2741}; 2742 ; 2743 ; 2744////////////////////////////////////////////////////////////////////////////////; 2745 ; 2746void RooAbsPdf::setNormRangeOverride(const char* rangeName); 2747{; 2748 if (rangeName) {; 2749 _normRangeOverride = rangeName ;; 2750 } else {; 2751 _normRangeOverride.Clear() ;; 2752 }; 2753 ; 2754 // the stuff that the clients have cached may depend on the normalization range; 2755 sterilizeClientCaches(*this);; 2756 ; 2757 if (_norm) {; 2758 _normMgr.sterilize() ;; 2759 _norm = nullptr ;; 2760 }; 2761}; 2762 ; 2763 ; 2764////////////////////////////////////////////////////////////////////////////////; 2765/// Hook function intercepting redirectServer calls. Discard current; 2766/// normalization object if any server is redirected; 2767 ; 2768bool RooAbsPdf::redirectServersHook(const RooAbsCollection & newServerList, bool mustRe",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:130194,Integrability,depend,depend,130194,"ppen."");; 2715 }; 2716 iClient = std::distance(clients.begin(), clientIter);; 2717 }; 2718 }; 2719}; 2720 ; 2721} // namespace; 2722 ; 2723 ; 2724////////////////////////////////////////////////////////////////////////////////; 2725 ; 2726void RooAbsPdf::setNormRange(const char* rangeName); 2727{; 2728 if (rangeName) {; 2729 _normRange = rangeName ;; 2730 } else {; 2731 _normRange.Clear() ;; 2732 }; 2733 ; 2734 // the stuff that the clients have cached may depend on the normalization range; 2735 sterilizeClientCaches(*this);; 2736 ; 2737 if (_norm) {; 2738 _normMgr.sterilize() ;; 2739 _norm = nullptr ;; 2740 }; 2741}; 2742 ; 2743 ; 2744////////////////////////////////////////////////////////////////////////////////; 2745 ; 2746void RooAbsPdf::setNormRangeOverride(const char* rangeName); 2747{; 2748 if (rangeName) {; 2749 _normRangeOverride = rangeName ;; 2750 } else {; 2751 _normRangeOverride.Clear() ;; 2752 }; 2753 ; 2754 // the stuff that the clients have cached may depend on the normalization range; 2755 sterilizeClientCaches(*this);; 2756 ; 2757 if (_norm) {; 2758 _normMgr.sterilize() ;; 2759 _norm = nullptr ;; 2760 }; 2761}; 2762 ; 2763 ; 2764////////////////////////////////////////////////////////////////////////////////; 2765/// Hook function intercepting redirectServer calls. Discard current; 2766/// normalization object if any server is redirected; 2767 ; 2768bool RooAbsPdf::redirectServersHook(const RooAbsCollection & newServerList, bool mustReplaceAll,; 2769 bool nameChange, bool isRecursiveStep); 2770{; 2771 // If servers are redirected, the cached normalization integrals and; 2772 // normalization sets are most likely invalid.; 2773 _normMgr.sterilize();; 2774 ; 2775 // Object is own by _normCacheManager that will delete object as soon as cache; 2776 // is sterilized by server redirect; 2777 _norm = nullptr ;; 2778 ; 2779 // Similar to the situation with the normalization integral above: if a; 2780 // server is redirected, the cached normalization set m",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:135586,Integrability,depend,dependsOnbool,135586,"gnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; namechar name[80]Definition TGX11.cxx:110; xminfloat xminDefinition THbookFile.cxx:95; yminfloat yminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; ymaxfloat ymaxDefinition THbookFile.cxx:95; TMath.h; TMatrixDSym.h; TMatrixD.h; TPaveText.h; Formchar * Form(const char *fmt,...)Formats a string in a circular formatting buffer.Definition TString.cxx:2489; RooAbsArgCommon abstract base class for objects that represent a value and a ""shape"" in RooFit.Definition RooAbsArg.h:79; RooAbsArg::clearValueAndShapeDirtyvoid clearValueAndShapeDirty() constDefinition RooAbsArg.h:571; RooAbsArg::Printvoid Print(Option_t *options=nullptr) const overridePrint the object to the defaultPrintStream().Definition RooAbsArg.h:294; RooAbsArg::dependsOnbool dependsOn(const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) constTest whether we depend on (ie, are served by) any object in the specified collection.Definition RooAbsArg.cxx:850; RooAbsArg::constR__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg constDefinition RooAbsArg.h:145; RooAbsArg::setOperModevoid setOperMode(OperMode mode, bool recurseADirty=true)Set the operation mode of this node.Definition RooAbsArg.cxx:1963; RooAbsArg::getParametersRooFit::OwningPtr< RooArgSet > getParameters(const RooAbsData *data, bool stripDisconnected=true) constCreate a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of...Definition RooAbsArg.cxx:541; RooAbsArg::getObservablesRooFit::OwningPtr< RooArgSet > getObservables(const RooArgSet &set, bool valueOnly=true) constGiven a set of possible observables, return the observables that this PDF depends on.Definition Roo",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:135600,Integrability,depend,dependsOn,135600,"gnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; namechar name[80]Definition TGX11.cxx:110; xminfloat xminDefinition THbookFile.cxx:95; yminfloat yminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; ymaxfloat ymaxDefinition THbookFile.cxx:95; TMath.h; TMatrixDSym.h; TMatrixD.h; TPaveText.h; Formchar * Form(const char *fmt,...)Formats a string in a circular formatting buffer.Definition TString.cxx:2489; RooAbsArgCommon abstract base class for objects that represent a value and a ""shape"" in RooFit.Definition RooAbsArg.h:79; RooAbsArg::clearValueAndShapeDirtyvoid clearValueAndShapeDirty() constDefinition RooAbsArg.h:571; RooAbsArg::Printvoid Print(Option_t *options=nullptr) const overridePrint the object to the defaultPrintStream().Definition RooAbsArg.h:294; RooAbsArg::dependsOnbool dependsOn(const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) constTest whether we depend on (ie, are served by) any object in the specified collection.Definition RooAbsArg.cxx:850; RooAbsArg::constR__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg constDefinition RooAbsArg.h:145; RooAbsArg::setOperModevoid setOperMode(OperMode mode, bool recurseADirty=true)Set the operation mode of this node.Definition RooAbsArg.cxx:1963; RooAbsArg::getParametersRooFit::OwningPtr< RooArgSet > getParameters(const RooAbsData *data, bool stripDisconnected=true) constCreate a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of...Definition RooAbsArg.cxx:541; RooAbsArg::getObservablesRooFit::OwningPtr< RooArgSet > getObservables(const RooArgSet &set, bool valueOnly=true) constGiven a set of possible observables, return the observables that this PDF depends on.Definition Roo",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:135725,Integrability,depend,depend,135725,"gnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; namechar name[80]Definition TGX11.cxx:110; xminfloat xminDefinition THbookFile.cxx:95; yminfloat yminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; ymaxfloat ymaxDefinition THbookFile.cxx:95; TMath.h; TMatrixDSym.h; TMatrixD.h; TPaveText.h; Formchar * Form(const char *fmt,...)Formats a string in a circular formatting buffer.Definition TString.cxx:2489; RooAbsArgCommon abstract base class for objects that represent a value and a ""shape"" in RooFit.Definition RooAbsArg.h:79; RooAbsArg::clearValueAndShapeDirtyvoid clearValueAndShapeDirty() constDefinition RooAbsArg.h:571; RooAbsArg::Printvoid Print(Option_t *options=nullptr) const overridePrint the object to the defaultPrintStream().Definition RooAbsArg.h:294; RooAbsArg::dependsOnbool dependsOn(const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) constTest whether we depend on (ie, are served by) any object in the specified collection.Definition RooAbsArg.cxx:850; RooAbsArg::constR__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg constDefinition RooAbsArg.h:145; RooAbsArg::setOperModevoid setOperMode(OperMode mode, bool recurseADirty=true)Set the operation mode of this node.Definition RooAbsArg.cxx:1963; RooAbsArg::getParametersRooFit::OwningPtr< RooArgSet > getParameters(const RooAbsData *data, bool stripDisconnected=true) constCreate a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of...Definition RooAbsArg.cxx:541; RooAbsArg::getObservablesRooFit::OwningPtr< RooArgSet > getObservables(const RooArgSet &set, bool valueOnly=true) constGiven a set of possible observables, return the observables that this PDF depends on.Definition Roo",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:136656,Integrability,depend,depends,136656,"oAbsArg.h:294; RooAbsArg::dependsOnbool dependsOn(const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) constTest whether we depend on (ie, are served by) any object in the specified collection.Definition RooAbsArg.cxx:850; RooAbsArg::constR__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg constDefinition RooAbsArg.h:145; RooAbsArg::setOperModevoid setOperMode(OperMode mode, bool recurseADirty=true)Set the operation mode of this node.Definition RooAbsArg.cxx:1963; RooAbsArg::getParametersRooFit::OwningPtr< RooArgSet > getParameters(const RooAbsData *data, bool stripDisconnected=true) constCreate a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of...Definition RooAbsArg.cxx:541; RooAbsArg::getObservablesRooFit::OwningPtr< RooArgSet > getObservables(const RooArgSet &set, bool valueOnly=true) constGiven a set of possible observables, return the observables that this PDF depends on.Definition RooAbsArg.cxx:698; RooAbsArg::addOwnedComponentsbool addOwnedComponents(const RooAbsCollection &comps)Take ownership of the contents of 'comps'.Definition RooAbsArg.cxx:2258; RooAbsArg::ADirty@ ADirtyDefinition RooAbsArg.h:362; RooAbsArg::getStringAttributeconst Text_t * getStringAttribute(const Text_t *key) constGet string attribute mapped under key 'key'.Definition RooAbsArg.cxx:275; RooAbsArg::compileForNormSetvirtual std::unique_ptr< RooAbsArg > compileForNormSet(RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) constDefinition RooAbsArg.cxx:2528; RooAbsArg::getComponentsRooFit::OwningPtr< RooArgSet > getComponents() constCreate a RooArgSet with all components (branch nodes) of the expression tree headed by this object.Definition RooAbsArg.cxx:802; RooAbsArg::getAttributebool getAttribute(const Text_t *name) constCheck if a named attribute is set. By def",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:142929,Integrability,interface,interface,142929,".h:322; RooAbsPdf::CacheElem::_normstd::unique_ptr< RooAbsReal > _normDefinition RooAbsPdf.h:327; RooAbsPdf::CacheElem::~CacheElem~CacheElem() overrideDestructor of normalization cache element.Definition RooAbsPdf.cxx:2430; RooAbsPdf::GenSpecDefinition RooAbsPdf.h:72; RooAbsPdf::GenSpec::_genContextstd::unique_ptr< RooAbsGenContext > _genContextDefinition RooAbsPdf.h:83; RooAbsPdf::GenSpec::~GenSpecvirtual ~GenSpec(); RooAbsPdf::GenSpec::_whatVarsRooArgSet _whatVarsDefinition RooAbsPdf.h:84; RooAbsPdf::GenSpec::_initbool _initDefinition RooAbsPdf.h:91; RooAbsPdf::GenSpec::_extendedbool _extendedDefinition RooAbsPdf.h:87; RooAbsPdf::GenSpec::_nGenInt_t _nGenDefinition RooAbsPdf.h:86; RooAbsPdf::GenSpec::GenSpecGenSpec()=default; RooAbsPdf::GenSpec::_randProtobool _randProtoDefinition RooAbsPdf.h:88; RooAbsPdf::GenSpec::_resampleProtobool _resampleProtoDefinition RooAbsPdf.h:89; RooAbsPdf::GenSpec::_protoDataRooDataSet * _protoDataDefinition RooAbsPdf.h:85; RooAbsPdfAbstract interface for all probability density functions.Definition RooAbsPdf.h:40; RooAbsPdf::syncNormalizationvirtual bool syncNormalization(const RooArgSet *dset, bool adjustProxies=true) constVerify that the normalization integral cached with this PDF is valid for given set of normalization o...Definition RooAbsPdf.cxx:481; RooAbsPdf::getNormdouble getNorm(const RooArgSet &nset) constGet normalisation term needed to normalise the raw values returned by getVal().Definition RooAbsPdf.h:195; RooAbsPdf::compileForNormSetstd::unique_ptr< RooAbsArg > compileForNormSet(RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const overrideDefinition RooAbsPdf.cxx:2788; RooAbsPdf::_normMgrRooObjCacheManager _normMgrDefinition RooAbsPdf.h:329; RooAbsPdf::_specGeneratorConfigstd::unique_ptr< RooNumGenConfig > _specGeneratorConfig! MC generator configuration specific for this objectDefinition RooAbsPdf.h:340; RooAbsPdf::getValVdouble getValV(const RooArgSet *set=nullptr) const overrideReturn current value, ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:143955,Integrability,integrat,integrating,143955,"bsPdfAbstract interface for all probability density functions.Definition RooAbsPdf.h:40; RooAbsPdf::syncNormalizationvirtual bool syncNormalization(const RooArgSet *dset, bool adjustProxies=true) constVerify that the normalization integral cached with this PDF is valid for given set of normalization o...Definition RooAbsPdf.cxx:481; RooAbsPdf::getNormdouble getNorm(const RooArgSet &nset) constGet normalisation term needed to normalise the raw values returned by getVal().Definition RooAbsPdf.h:195; RooAbsPdf::compileForNormSetstd::unique_ptr< RooAbsArg > compileForNormSet(RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const overrideDefinition RooAbsPdf.cxx:2788; RooAbsPdf::_normMgrRooObjCacheManager _normMgrDefinition RooAbsPdf.h:329; RooAbsPdf::_specGeneratorConfigstd::unique_ptr< RooNumGenConfig > _specGeneratorConfig! MC generator configuration specific for this objectDefinition RooAbsPdf.h:340; RooAbsPdf::getValVdouble getValV(const RooArgSet *set=nullptr) const overrideReturn current value, normalized by integrating over the observables in nset.Definition RooAbsPdf.cxx:319; RooAbsPdf::fitToImplvirtual std::unique_ptr< RooFitResult > fitToImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the likelihood fitting routine.Definition RooAbsPdf.cxx:1072; RooAbsPdf::generateEventvirtual void generateEvent(Int_t code)Interface for generation of an event using the algorithm corresponding to the specified code.Definition RooAbsPdf.cxx:1544; RooAbsPdf::createScanCdfRooFit::OwningPtr< RooAbsReal > createScanCdf(const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder)Definition RooAbsPdf.cxx:2545; RooAbsPdf::setGeneratorConfigvoid setGeneratorConfig()Remove the specialized numeric MC generator configuration associated with this object.Definition RooAbsPdf.cxx:2675; RooAbsPdf::resetErrorCountersvirtual void resetErrorCounters(Int_t resetValue=10)Reset error counter to given value, limiting the number of futur",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:144194,Integrability,rout,routine,144194,") constVerify that the normalization integral cached with this PDF is valid for given set of normalization o...Definition RooAbsPdf.cxx:481; RooAbsPdf::getNormdouble getNorm(const RooArgSet &nset) constGet normalisation term needed to normalise the raw values returned by getVal().Definition RooAbsPdf.h:195; RooAbsPdf::compileForNormSetstd::unique_ptr< RooAbsArg > compileForNormSet(RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const overrideDefinition RooAbsPdf.cxx:2788; RooAbsPdf::_normMgrRooObjCacheManager _normMgrDefinition RooAbsPdf.h:329; RooAbsPdf::_specGeneratorConfigstd::unique_ptr< RooNumGenConfig > _specGeneratorConfig! MC generator configuration specific for this objectDefinition RooAbsPdf.h:340; RooAbsPdf::getValVdouble getValV(const RooArgSet *set=nullptr) const overrideReturn current value, normalized by integrating over the observables in nset.Definition RooAbsPdf.cxx:319; RooAbsPdf::fitToImplvirtual std::unique_ptr< RooFitResult > fitToImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the likelihood fitting routine.Definition RooAbsPdf.cxx:1072; RooAbsPdf::generateEventvirtual void generateEvent(Int_t code)Interface for generation of an event using the algorithm corresponding to the specified code.Definition RooAbsPdf.cxx:1544; RooAbsPdf::createScanCdfRooFit::OwningPtr< RooAbsReal > createScanCdf(const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder)Definition RooAbsPdf.cxx:2545; RooAbsPdf::setGeneratorConfigvoid setGeneratorConfig()Remove the specialized numeric MC generator configuration associated with this object.Definition RooAbsPdf.cxx:2675; RooAbsPdf::resetErrorCountersvirtual void resetErrorCounters(Int_t resetValue=10)Reset error counter to given value, limiting the number of future error messages for this pdf to 'res...Definition RooAbsPdf.cxx:586; RooAbsPdf::verboseEvalstatic int verboseEval()Return global level of verbosity for p.d.f. evaluations.Definition RooAbsPdf.c",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:144924,Integrability,message,messages,144924,"alVdouble getValV(const RooArgSet *set=nullptr) const overrideReturn current value, normalized by integrating over the observables in nset.Definition RooAbsPdf.cxx:319; RooAbsPdf::fitToImplvirtual std::unique_ptr< RooFitResult > fitToImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the likelihood fitting routine.Definition RooAbsPdf.cxx:1072; RooAbsPdf::generateEventvirtual void generateEvent(Int_t code)Interface for generation of an event using the algorithm corresponding to the specified code.Definition RooAbsPdf.cxx:1544; RooAbsPdf::createScanCdfRooFit::OwningPtr< RooAbsReal > createScanCdf(const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder)Definition RooAbsPdf.cxx:2545; RooAbsPdf::setGeneratorConfigvoid setGeneratorConfig()Remove the specialized numeric MC generator configuration associated with this object.Definition RooAbsPdf.cxx:2675; RooAbsPdf::resetErrorCountersvirtual void resetErrorCounters(Int_t resetValue=10)Reset error counter to given value, limiting the number of future error messages for this pdf to 'res...Definition RooAbsPdf.cxx:586; RooAbsPdf::verboseEvalstatic int verboseEval()Return global level of verbosity for p.d.f. evaluations.Definition RooAbsPdf.cxx:2418; RooAbsPdf::createCdfRooFit::OwningPtr< RooAbsReal > createCdf(const RooArgSet &iset, const RooArgSet &nset=RooArgSet())Create a cumulative distribution function of this p.d.f in terms of the observables listed in iset.Definition RooAbsPdf.cxx:2468; RooAbsPdf::isActiveNormSetbool isActiveNormSet(RooArgSet const *normSet) constChecks if normSet is the currently active normalization set of this PDF, meaning is exactly the same ...Definition RooAbsPdf.h:299; RooAbsPdf::expectedEventsvirtual double expectedEvents(const RooArgSet *nset) constReturn expected number of events to be used in calculation of extended likelihood.Definition RooAbsPdf.cxx:2398; RooAbsPdf::binnedGenContextvirtual RooAbsGenContext * binnedGenContext(const RooArgS",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:147277,Integrability,integrat,integrator,147277,"ooAbsPdf.cxx:1557; RooAbsPdf::randomizeProtoOrderInt_t * randomizeProtoOrder(Int_t nProto, Int_t nGen, bool resample=false) constReturn lookup table with randomized order for nProto prototype events.Definition RooAbsPdf.cxx:1485; RooAbsPdf::setNormRangevoid setNormRange(const char *rangeName)Definition RooAbsPdf.cxx:2726; RooAbsPdf::~RooAbsPdf~RooAbsPdf() overrideDestructor.Definition RooAbsPdf.cxx:277; RooAbsPdf::_normSetRooArgSet const * _normSetNormalization integral (owned by _normMgr)Definition RooAbsPdf.h:320; RooAbsPdf::plotOnRooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const overrideHelper calling plotOn(RooPlot*, RooLinkedList&) const.Definition RooAbsPdf.h:124; RooAbsPdf::specialGeneratorConfigRooNumGenConfig * specialGeneratorConfig() constReturns the specialized integrator configuration for this RooAbsReal.Definition RooAbsPdf.cxx:2623; RooAbsPdf::selfNormalizedvirtual bool selfNormalized() constShows if a PDF is self-normalized, which means that no attempt is made to add a normalization term.Definition RooAbsPdf.h:207; RooAbsPdf::printMultilinevoid printMultiline(std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const overridePrint multi line detailed information of this RooAbsPdf.Definition RooAbsPdf.cxx:1100; RooAbsPdf::_traceCountInt_t _traceCountNumber of traces remaining to print.Definition RooAbsPdf.h:335; RooAbsPdf::canBeExtendedbool canBeExtended() constIf true, PDF can provide extended likelihood term.Definition RooAbsPdf.h:218; RooAbsPdf::_normRooAbsReal * _normDefinition RooAbsPdf.h:319; RooAbsPdf::setTraceCountervoid setTraceCounter(Int_t value, bool allNodes=false)Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'val...Definiti",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:148204,Integrability,message,messages,148204,"onst.Definition RooAbsPdf.h:124; RooAbsPdf::specialGeneratorConfigRooNumGenConfig * specialGeneratorConfig() constReturns the specialized integrator configuration for this RooAbsReal.Definition RooAbsPdf.cxx:2623; RooAbsPdf::selfNormalizedvirtual bool selfNormalized() constShows if a PDF is self-normalized, which means that no attempt is made to add a normalization term.Definition RooAbsPdf.h:207; RooAbsPdf::printMultilinevoid printMultiline(std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const overridePrint multi line detailed information of this RooAbsPdf.Definition RooAbsPdf.cxx:1100; RooAbsPdf::_traceCountInt_t _traceCountNumber of traces remaining to print.Definition RooAbsPdf.h:335; RooAbsPdf::canBeExtendedbool canBeExtended() constIf true, PDF can provide extended likelihood term.Definition RooAbsPdf.h:218; RooAbsPdf::_normRooAbsReal * _normDefinition RooAbsPdf.h:319; RooAbsPdf::setTraceCountervoid setTraceCounter(Int_t value, bool allNodes=false)Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'val...Definition RooAbsPdf.cxx:598; RooAbsPdf::prepareMultiGenGenSpec * prepareMultiGen(const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={})Prepare GenSpec configuration object for efficient generation of multiple datasets from identical spe...Definition RooAbsPdf.cxx:1299; RooAbsPdf::_errorCountInt_t _errorCountNumber of errors remaining to print.Definition RooAbsPdf.h:334; RooAbsPdf::CanNotBeExtended@ CanNotBeExtendedDefinition RooAbsPdf.h:212; RooAbsPdf::createExpectedEventsFuncvirtual std::unique_ptr< RooAbsReal > createExpectedEventsFunc(const RooArgSet *nset) constReturns an object that represents the expected number of events for a given normalization set,...Definition RooAbsPdf.cxx:2812; RooAbsPdf::paramOnvirtual RooPlot * paramOn(RooPlot *frame, const RooCmdArg",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:150878,Integrability,interface,interface,150878,"st RooCmdArg&,const RooCmdArg&,...Definition RooAbsPdf.h:57; RooAbsPdf::getNormObjvirtual const RooAbsReal * getNormObj(const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) constReturn pointer to RooAbsReal object that implements calculation of integral over observables iset in ...Definition RooAbsPdf.cxx:443; RooAbsPdf::setActiveNormSetvoid setActiveNormSet(RooArgSet const *normSet) constSetter for the _normSet member, which should never be set directly.Definition RooAbsPdf.h:284; RooAbsPdf::analyticalIntegralWNdouble analyticalIntegralWN(Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const overrideAnalytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further informatio...Definition RooAbsPdf.cxx:364; RooAbsPdf::setNormRangeOverridevoid setNormRangeOverride(const char *rangeName)Definition RooAbsPdf.cxx:2746; RooAbsPdf::generateSimGlobalvirtual RooFit::OwningPtr< RooDataSet > generateSimGlobal(const RooArgSet &whatVars, Int_t nEvents)Special generator interface for generation of 'global observables' – for RooStats tools.Definition RooAbsPdf.cxx:1799; RooAbsPdf::normalizeWithNaNPackingdouble normalizeWithNaNPacking(double rawVal, double normVal) constDefinition RooAbsPdf.cxx:282; RooAbsPdf::autoGenContextvirtual RooAbsGenContext * autoGenContext(const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") constDefinition RooAbsPdf.cxx:1136; RooAbsPdf::getAllConstraintsRooArgSet * getAllConstraints(const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) constThis helper function finds and collects all constraints terms of all component p.d....Definition RooAbsPdf.cxx:2562; RooAbsPdf::getGeneratorConfigconst RooNumGenConfig * getGeneratorConfig() constReturn the numeric MC generator configuration used for this object.Definition RooAbsPdf.cxx:2651; RooAbsPdf::ini",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:153511,Integrability,rout,routine,153511,"onst RooCmdArg &arg4={}, const RooCmdArg &arg5={}) constAs RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,...Definition RooAbsPdf.h:110; RooAbsPdf::traceEvalPdfbool traceEvalPdf(double value) constCheck that passed value is positive and not 'not-a-number'.Definition RooAbsPdf.cxx:384; RooAbsPdf::defaultGeneratorConfigstatic RooNumGenConfig * defaultGeneratorConfig()Returns the default numeric MC generator configuration for all RooAbsReals.Definition RooAbsPdf.cxx:2613; RooAbsPdf::redirectServersHookbool redirectServersHook(const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) overrideThe cache manager.Definition RooAbsPdf.cxx:2768; RooAbsPdf::printValuevoid printValue(std::ostream &os) const overridePrint value of p.d.f, also print normalization integral that was last used, if any.Definition RooAbsPdf.cxx:1081; RooAbsPdf::createNLLImplvirtual std::unique_ptr< RooAbsReal > createNLLImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the NLL creation routine.Definition RooAbsPdf.cxx:941; RooAbsPdf::logBatchComputationErrorsvoid logBatchComputationErrors(std::span< const double > &outputs, std::size_t begin) constScan through outputs and fix+log all nans and negative values.Definition RooAbsPdf.cxx:654; RooAbsPdf::genContextvirtual RooAbsGenContext * genContext(const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) constInterface function to create a generator context from a p.d.f.Definition RooAbsPdf.cxx:1127; RooAbsPdf::getLogProbabilitiesvoid getLogProbabilities(std::span< const double > pdfValues, double *output) constDefinition RooAbsPdf.cxx:671; RooAbsPdf::_normRangeOverridestatic TString _normRangeOverrideDefinition RooAbsPdf.h:343; RooAbsPdf::_verboseEvalstatic Int_t _verboseEvalDefinition RooAbsPdf.h:314; RooAbsPdf::extendedTermdouble extendedTerm(double sumEntries, double expected",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:154920,Integrability,integrat,integrated,154920,"alse) constInterface function to create a generator context from a p.d.f.Definition RooAbsPdf.cxx:1127; RooAbsPdf::getLogProbabilitiesvoid getLogProbabilities(std::span< const double > pdfValues, double *output) constDefinition RooAbsPdf.cxx:671; RooAbsPdf::_normRangeOverridestatic TString _normRangeOverrideDefinition RooAbsPdf.h:343; RooAbsPdf::_verboseEvalstatic Int_t _verboseEvalDefinition RooAbsPdf.h:314; RooAbsPdf::extendedTermdouble extendedTerm(double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) constDefinition RooAbsPdf.cxx:730; RooAbsPdf::getGeneratorvirtual Int_t getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) constLoad generatedVars with the subset of directVars that we can generate events for, and return a code t...Definition RooAbsPdf.cxx:1522; RooAbsPdf::createProjectionvirtual RooAbsPdf * createProjection(const RooArgSet &iset)Return a p.d.f that represent a projection of this p.d.f integrated over given observables.Definition RooAbsPdf.cxx:2446; RooAbsPdf::getLogValvirtual double getLogVal(const RooArgSet *set=nullptr) constReturn the log of the current value with given normalization An error message is printed if the argum...Definition RooAbsPdf.cxx:620; RooAbsRealLValue::hasRangebool hasRange(const char *name) const overrideCheck if variable has a binning with given name.Definition RooAbsRealLValue.h:97; RooAbsRealLValue::getRangestd::pair< double, double > getRange(const char *name=nullptr) constGet low and high bound of the variable.Definition RooAbsRealLValue.h:88; RooAbsRealAbstract base class for objects that represent a real value and implements functionality common to al...Definition RooAbsReal.h:59; RooAbsReal::fillDataHistRooDataHist * fillDataHist(RooDataHist *hist, const RooArgSet *nset, double scaleFactor, bool correctForBinVolume=false, bool showProgress=false) constFill a RooDataHist with values sampled from this function at the bin centers.Definition RooAbsReal.",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:155135,Integrability,message,message,155135,"oid getLogProbabilities(std::span< const double > pdfValues, double *output) constDefinition RooAbsPdf.cxx:671; RooAbsPdf::_normRangeOverridestatic TString _normRangeOverrideDefinition RooAbsPdf.h:343; RooAbsPdf::_verboseEvalstatic Int_t _verboseEvalDefinition RooAbsPdf.h:314; RooAbsPdf::extendedTermdouble extendedTerm(double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) constDefinition RooAbsPdf.cxx:730; RooAbsPdf::getGeneratorvirtual Int_t getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) constLoad generatedVars with the subset of directVars that we can generate events for, and return a code t...Definition RooAbsPdf.cxx:1522; RooAbsPdf::createProjectionvirtual RooAbsPdf * createProjection(const RooArgSet &iset)Return a p.d.f that represent a projection of this p.d.f integrated over given observables.Definition RooAbsPdf.cxx:2446; RooAbsPdf::getLogValvirtual double getLogVal(const RooArgSet *set=nullptr) constReturn the log of the current value with given normalization An error message is printed if the argum...Definition RooAbsPdf.cxx:620; RooAbsRealLValue::hasRangebool hasRange(const char *name) const overrideCheck if variable has a binning with given name.Definition RooAbsRealLValue.h:97; RooAbsRealLValue::getRangestd::pair< double, double > getRange(const char *name=nullptr) constGet low and high bound of the variable.Definition RooAbsRealLValue.h:88; RooAbsRealAbstract base class for objects that represent a real value and implements functionality common to al...Definition RooAbsReal.h:59; RooAbsReal::fillDataHistRooDataHist * fillDataHist(RooDataHist *hist, const RooArgSet *nset, double scaleFactor, bool correctForBinVolume=false, bool showProgress=false) constFill a RooDataHist with values sampled from this function at the bin centers.Definition RooAbsReal.cxx:1124; RooAbsReal::plotOnCompSelectvoid plotOnCompSelect(RooArgSet *selNodes) constHelper function for plotting of composite p.d.fs.",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:158179,Integrability,integrat,integrated,158179,"r plotOn(), perform general sanity check on frame to ensure safe plotting operatio...Definition RooAbsReal.cxx:2860; RooAbsReal::printMultilinevoid printMultiline(std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const overrideStructure printing.Definition RooAbsReal.cxx:455; RooAbsReal::redirectServersHookbool redirectServersHook(const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) overrideFunction that is called at the end of redirectServers().Definition RooAbsReal.cxx:4474; RooAbsReal::_valuedouble _valueCache for current value of object.Definition RooAbsReal.h:536; RooAbsReal::analyticalIntegralvirtual double analyticalIntegral(Int_t code, const char *rangeName=nullptr) constImplements the actual analytical integral(s) advertised by getAnalyticalIntegral.Definition RooAbsReal.cxx:394; RooAbsReal::integralNameSuffixTString integralNameSuffix(const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) constConstruct string with unique suffix name to give to integral object that encodes integrated observabl...Definition RooAbsReal.cxx:755; RooAbsReal::evaluatevirtual double evaluate() const =0Evaluate this PDF / function / constant. Needs to be overridden by all derived classes.; RooAbsReal::logEvalErrorvoid logEvalError(const char *message, const char *serverValueString=nullptr) constLog evaluation error message.Definition RooAbsReal.cxx:3464; RooAbsReal::getIntegratorConfigconst RooNumIntConfig * getIntegratorConfig() constReturn the numeric integration configuration used for this object.Definition RooAbsReal.cxx:3309; RooAbsReal::isBinnedDistributionvirtual bool isBinnedDistribution(const RooArgSet &) constTests if the distribution is binned. Unless overridden by derived classes, this always returns false.Definition RooAbsReal.h:346; RooAbsReal::createIntRIRooFit::OwningPtr< RooAbsReal > createIntRI(const RooArgSet &iset, const RooArgSet &nset={})U",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:158430,Integrability,message,message,158430,"ServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) overrideFunction that is called at the end of redirectServers().Definition RooAbsReal.cxx:4474; RooAbsReal::_valuedouble _valueCache for current value of object.Definition RooAbsReal.h:536; RooAbsReal::analyticalIntegralvirtual double analyticalIntegral(Int_t code, const char *rangeName=nullptr) constImplements the actual analytical integral(s) advertised by getAnalyticalIntegral.Definition RooAbsReal.cxx:394; RooAbsReal::integralNameSuffixTString integralNameSuffix(const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) constConstruct string with unique suffix name to give to integral object that encodes integrated observabl...Definition RooAbsReal.cxx:755; RooAbsReal::evaluatevirtual double evaluate() const =0Evaluate this PDF / function / constant. Needs to be overridden by all derived classes.; RooAbsReal::logEvalErrorvoid logEvalError(const char *message, const char *serverValueString=nullptr) constLog evaluation error message.Definition RooAbsReal.cxx:3464; RooAbsReal::getIntegratorConfigconst RooNumIntConfig * getIntegratorConfig() constReturn the numeric integration configuration used for this object.Definition RooAbsReal.cxx:3309; RooAbsReal::isBinnedDistributionvirtual bool isBinnedDistribution(const RooArgSet &) constTests if the distribution is binned. Unless overridden by derived classes, this always returns false.Definition RooAbsReal.h:346; RooAbsReal::createIntRIRooFit::OwningPtr< RooAbsReal > createIntRI(const RooArgSet &iset, const RooArgSet &nset={})Utility function for createRunningIntegral.Definition RooAbsReal.cxx:3827; RooAbsReal::plotOnvirtual RooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:158504,Integrability,message,message,158504,"ServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) overrideFunction that is called at the end of redirectServers().Definition RooAbsReal.cxx:4474; RooAbsReal::_valuedouble _valueCache for current value of object.Definition RooAbsReal.h:536; RooAbsReal::analyticalIntegralvirtual double analyticalIntegral(Int_t code, const char *rangeName=nullptr) constImplements the actual analytical integral(s) advertised by getAnalyticalIntegral.Definition RooAbsReal.cxx:394; RooAbsReal::integralNameSuffixTString integralNameSuffix(const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) constConstruct string with unique suffix name to give to integral object that encodes integrated observabl...Definition RooAbsReal.cxx:755; RooAbsReal::evaluatevirtual double evaluate() const =0Evaluate this PDF / function / constant. Needs to be overridden by all derived classes.; RooAbsReal::logEvalErrorvoid logEvalError(const char *message, const char *serverValueString=nullptr) constLog evaluation error message.Definition RooAbsReal.cxx:3464; RooAbsReal::getIntegratorConfigconst RooNumIntConfig * getIntegratorConfig() constReturn the numeric integration configuration used for this object.Definition RooAbsReal.cxx:3309; RooAbsReal::isBinnedDistributionvirtual bool isBinnedDistribution(const RooArgSet &) constTests if the distribution is binned. Unless overridden by derived classes, this always returns false.Definition RooAbsReal.h:346; RooAbsReal::createIntRIRooFit::OwningPtr< RooAbsReal > createIntRI(const RooArgSet &iset, const RooArgSet &nset={})Utility function for createRunningIntegral.Definition RooAbsReal.cxx:3827; RooAbsReal::plotOnvirtual RooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:158645,Integrability,integrat,integration,158645,"oAbsReal::_valuedouble _valueCache for current value of object.Definition RooAbsReal.h:536; RooAbsReal::analyticalIntegralvirtual double analyticalIntegral(Int_t code, const char *rangeName=nullptr) constImplements the actual analytical integral(s) advertised by getAnalyticalIntegral.Definition RooAbsReal.cxx:394; RooAbsReal::integralNameSuffixTString integralNameSuffix(const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) constConstruct string with unique suffix name to give to integral object that encodes integrated observabl...Definition RooAbsReal.cxx:755; RooAbsReal::evaluatevirtual double evaluate() const =0Evaluate this PDF / function / constant. Needs to be overridden by all derived classes.; RooAbsReal::logEvalErrorvoid logEvalError(const char *message, const char *serverValueString=nullptr) constLog evaluation error message.Definition RooAbsReal.cxx:3464; RooAbsReal::getIntegratorConfigconst RooNumIntConfig * getIntegratorConfig() constReturn the numeric integration configuration used for this object.Definition RooAbsReal.cxx:3309; RooAbsReal::isBinnedDistributionvirtual bool isBinnedDistribution(const RooArgSet &) constTests if the distribution is binned. Unless overridden by derived classes, this always returns false.Definition RooAbsReal.h:346; RooAbsReal::createIntRIRooFit::OwningPtr< RooAbsReal > createIntRI(const RooArgSet &iset, const RooArgSet &nset={})Utility function for createRunningIntegral.Definition RooAbsReal.cxx:3827; RooAbsReal::plotOnvirtual RooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) constPlot (project) PDF on specified frame.Definition RooAbsReal.cxx:1611; RooArgListRooArgList is a container object that can hold multiple RooAbsArg objects.",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:160368,Integrability,integrat,integration,160368,"Arg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) constPlot (project) PDF on specified frame.Definition RooAbsReal.cxx:1611; RooArgListRooArgList is a container object that can hold multiple RooAbsArg objects.Definition RooArgList.h:22; RooArgSetRooArgSet is a container object that can hold multiple RooAbsArg objects.Definition RooArgSet.h:24; RooArgSet::selectByNameRooArgSet * selectByName(const char *nameList, bool verbose=false) constUse RooAbsCollection::selectByName(), but return as RooArgSet.Definition RooArgSet.h:144; RooArgSet::selectCommonRooArgSet * selectCommon(const RooAbsCollection &refColl) constUse RooAbsCollection::selecCommon(), but return as RooArgSet.Definition RooArgSet.h:149; RooBinnedGenContextEfficient implementation of the generator context specific for binned pdfs.Definition RooBinnedGenContext.h:26; RooCacheManager::setObjInt_t setObj(const RooArgSet *nset, T *obj, const TNamed *isetRangeName=nullptr)Setter function without integration set.Definition RooCacheManager.h:50; RooCacheManager::getObjT * getObj(const RooArgSet *nset, Int_t *sterileIndex=nullptr, const TNamed *isetRangeName=nullptr)Getter function without integration set.Definition RooCacheManager.h:45; RooCachedRealImplementation of RooAbsCachedReal that can cache any external RooAbsReal input function provided in ...Definition RooCachedReal.h:20; RooCachedReal::setCacheSourcevoid setCacheSource(bool flag)Definition RooCachedReal.h:43; RooCmdArgNamed container for two doubles, two integers two object points and three string pointers that can be...Definition RooCmdArg.h:26; RooCmdArg::setStringvoid setString(Int_t idx, const char *value)Definition RooCmdArg.h:78; RooCmdConfigConfigurable parser for RooCmdArg named arguments.Definition RooCmdConfig.h:32; RooCmdConfig::defineMutexvoid defineMutex(const char *head, Args_t &&... tail)Define arguments where any pair is mutually exclusive.Defin",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:160563,Integrability,integrat,integration,160563,"e.Definition RooAbsReal.cxx:1611; RooArgListRooArgList is a container object that can hold multiple RooAbsArg objects.Definition RooArgList.h:22; RooArgSetRooArgSet is a container object that can hold multiple RooAbsArg objects.Definition RooArgSet.h:24; RooArgSet::selectByNameRooArgSet * selectByName(const char *nameList, bool verbose=false) constUse RooAbsCollection::selectByName(), but return as RooArgSet.Definition RooArgSet.h:144; RooArgSet::selectCommonRooArgSet * selectCommon(const RooAbsCollection &refColl) constUse RooAbsCollection::selecCommon(), but return as RooArgSet.Definition RooArgSet.h:149; RooBinnedGenContextEfficient implementation of the generator context specific for binned pdfs.Definition RooBinnedGenContext.h:26; RooCacheManager::setObjInt_t setObj(const RooArgSet *nset, T *obj, const TNamed *isetRangeName=nullptr)Setter function without integration set.Definition RooCacheManager.h:50; RooCacheManager::getObjT * getObj(const RooArgSet *nset, Int_t *sterileIndex=nullptr, const TNamed *isetRangeName=nullptr)Getter function without integration set.Definition RooCacheManager.h:45; RooCachedRealImplementation of RooAbsCachedReal that can cache any external RooAbsReal input function provided in ...Definition RooCachedReal.h:20; RooCachedReal::setCacheSourcevoid setCacheSource(bool flag)Definition RooCachedReal.h:43; RooCmdArgNamed container for two doubles, two integers two object points and three string pointers that can be...Definition RooCmdArg.h:26; RooCmdArg::setStringvoid setString(Int_t idx, const char *value)Definition RooCmdArg.h:78; RooCmdConfigConfigurable parser for RooCmdArg named arguments.Definition RooCmdConfig.h:32; RooCmdConfig::defineMutexvoid defineMutex(const char *head, Args_t &&... tail)Define arguments where any pair is mutually exclusive.Definition RooCmdConfig.h:153; RooCmdConfig::processbool process(const RooCmdArg &arg)Process given RooCmdArg.Definition RooCmdConfig.cxx:311; RooCmdConfig::hasProcessedbool hasProcessed(con",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:164944,Integrability,message,message,164944," considered an error.Definition RooCmdConfig.h:44; RooCmdConfig::getIntint getInt(const char *name, int defaultValue=0) constReturn integer property registered with name 'name'.Definition RooCmdConfig.cxx:481; RooCmdConfig::getObjectTObject * getObject(const char *name, TObject *obj=nullptr) constReturn TObject property registered with name 'name'.Definition RooCmdConfig.cxx:519; RooDataSetContainer class to hold unbinned data.Definition RooDataSet.h:33; RooFit::Detail::CompileContextDefinition NormalizationHelpers.h:29; RooFit::Detail::CompileContext::markAsCompiledvoid markAsCompiled(RooAbsArg &arg) constDefinition NormalizationHelpers.cxx:74; RooFit::Detail::CompileContext::compileServersvoid compileServers(RooAbsArg &arg, RooArgSet const &normSet)Definition NormalizationHelpers.cxx:39; RooGenContextImplements a universal generator context for all RooAbsPdf classes that do not have or need a special...Definition RooGenContext.h:29; RooHelpers::LocalChangeMsgLevelSwitches the message service to a different level while the instance is alive.Definition RooHelpers.h:37; RooLinkedListCollection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list...Definition RooLinkedList.h:44; RooLinkedList::Addvirtual void Add(TObject *arg)Definition RooLinkedList.h:73; RooLinkedList::FindObjectTObject * FindObject(const char *name) const overrideReturn pointer to object with given name.Definition RooLinkedList.cxx:534; RooNameReg::strstatic const char * str(const TNamed *ptr)Return C++ string corresponding to given TNamed pointer.Definition RooNameReg.h:39; RooNumGenConfigHolds the configuration parameters of the various numeric integrators used by RooRealIntegral.Definition RooNumGenConfig.h:25; RooNumGenConfig::defaultConfigstatic RooNumGenConfig & defaultConfig()Return reference to instance of default numeric integrator configuration object.Definition RooNumGenConfig.cxx:44; RooObjCacheManagerImplementation of a RooCacheManager<RooAbsCacheEl",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:165631,Integrability,integrat,integrators,165631,"it::Detail::CompileContext::compileServersvoid compileServers(RooAbsArg &arg, RooArgSet const &normSet)Definition NormalizationHelpers.cxx:39; RooGenContextImplements a universal generator context for all RooAbsPdf classes that do not have or need a special...Definition RooGenContext.h:29; RooHelpers::LocalChangeMsgLevelSwitches the message service to a different level while the instance is alive.Definition RooHelpers.h:37; RooLinkedListCollection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list...Definition RooLinkedList.h:44; RooLinkedList::Addvirtual void Add(TObject *arg)Definition RooLinkedList.h:73; RooLinkedList::FindObjectTObject * FindObject(const char *name) const overrideReturn pointer to object with given name.Definition RooLinkedList.cxx:534; RooNameReg::strstatic const char * str(const TNamed *ptr)Return C++ string corresponding to given TNamed pointer.Definition RooNameReg.h:39; RooNumGenConfigHolds the configuration parameters of the various numeric integrators used by RooRealIntegral.Definition RooNumGenConfig.h:25; RooNumGenConfig::defaultConfigstatic RooNumGenConfig & defaultConfig()Return reference to instance of default numeric integrator configuration object.Definition RooNumGenConfig.cxx:44; RooObjCacheManagerImplementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elem...Definition RooObjCacheManager.h:29; RooObjCacheManager::sterilizevoid sterilize() overrideClear the cache payload but retain slot mapping w.r.t to normalization and integration sets.Definition RooObjCacheManager.cxx:152; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::addObjectvoid addObject(TObject *obj, Option_t *drawOptions="""", bool invisible=false)Add a generic object to this plot.Definition RooPlot.cxx:366; RooPlot::getFitRangeNEvtdouble getFitRangeNEvt() constReturn the number of events in the fit range.Definition RooPlot.h:145; Roo",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:165818,Integrability,integrat,integrator,165818,"nts a universal generator context for all RooAbsPdf classes that do not have or need a special...Definition RooGenContext.h:29; RooHelpers::LocalChangeMsgLevelSwitches the message service to a different level while the instance is alive.Definition RooHelpers.h:37; RooLinkedListCollection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list...Definition RooLinkedList.h:44; RooLinkedList::Addvirtual void Add(TObject *arg)Definition RooLinkedList.h:73; RooLinkedList::FindObjectTObject * FindObject(const char *name) const overrideReturn pointer to object with given name.Definition RooLinkedList.cxx:534; RooNameReg::strstatic const char * str(const TNamed *ptr)Return C++ string corresponding to given TNamed pointer.Definition RooNameReg.h:39; RooNumGenConfigHolds the configuration parameters of the various numeric integrators used by RooRealIntegral.Definition RooNumGenConfig.h:25; RooNumGenConfig::defaultConfigstatic RooNumGenConfig & defaultConfig()Return reference to instance of default numeric integrator configuration object.Definition RooNumGenConfig.cxx:44; RooObjCacheManagerImplementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elem...Definition RooObjCacheManager.h:29; RooObjCacheManager::sterilizevoid sterilize() overrideClear the cache payload but retain slot mapping w.r.t to normalization and integration sets.Definition RooObjCacheManager.cxx:152; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::addObjectvoid addObject(TObject *obj, Option_t *drawOptions="""", bool invisible=false)Add a generic object to this plot.Definition RooPlot.cxx:366; RooPlot::getFitRangeNEvtdouble getFitRangeNEvt() constReturn the number of events in the fit range.Definition RooPlot.h:145; RooPlot::getNormVarsconst RooArgSet * getNormVars() constDefinition RooPlot.h:152; RooPlot::getPlotVarRooAbsRealLValue * getPlotVar() constDefinition RooPlot.h:143; ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:166172,Integrability,integrat,integration,166172,"inkedList.h:44; RooLinkedList::Addvirtual void Add(TObject *arg)Definition RooLinkedList.h:73; RooLinkedList::FindObjectTObject * FindObject(const char *name) const overrideReturn pointer to object with given name.Definition RooLinkedList.cxx:534; RooNameReg::strstatic const char * str(const TNamed *ptr)Return C++ string corresponding to given TNamed pointer.Definition RooNameReg.h:39; RooNumGenConfigHolds the configuration parameters of the various numeric integrators used by RooRealIntegral.Definition RooNumGenConfig.h:25; RooNumGenConfig::defaultConfigstatic RooNumGenConfig & defaultConfig()Return reference to instance of default numeric integrator configuration object.Definition RooNumGenConfig.cxx:44; RooObjCacheManagerImplementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elem...Definition RooObjCacheManager.h:29; RooObjCacheManager::sterilizevoid sterilize() overrideClear the cache payload but retain slot mapping w.r.t to normalization and integration sets.Definition RooObjCacheManager.cxx:152; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::addObjectvoid addObject(TObject *obj, Option_t *drawOptions="""", bool invisible=false)Add a generic object to this plot.Definition RooPlot.cxx:366; RooPlot::getFitRangeNEvtdouble getFitRangeNEvt() constReturn the number of events in the fit range.Definition RooPlot.h:145; RooPlot::getNormVarsconst RooArgSet * getNormVars() constDefinition RooPlot.h:152; RooPlot::getPlotVarRooAbsRealLValue * getPlotVar() constDefinition RooPlot.h:143; RooPlot::updateNormVarsvoid updateNormVars(const RooArgSet &vars)Install the given set of observables are reference normalization variables for this frame.Definition RooPlot.cxx:351; RooPlot::getFitRangeBinWdouble getFitRangeBinW() constReturn the bin width that is being used to normalise the PDF.Definition RooPlot.h:148; RooPrintable::kSingleLine@ kSingleLineDefinition RooPrintable.h:34; RooPr",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:1986,Modifiability,variab,variables,1986,"///////////////////////////////////////////////////////////////////; 18/** \class RooAbsPdf; 19 \ingroup Roofitcore; 20 \brief Abstract interface for all probability density functions.; 21 ; 22## RooAbsPdf, the base class of all PDFs; 23 ; 24RooAbsPdf is the base class for all probability density; 25functions (PDFs). The class provides hybrid analytical/numerical; 26normalization for its implementations, error tracing, and a Monte Carlo; 27generator interface.; 28 ; 29### A Minimal PDF Implementation; 30 ; 31A minimal implementation of a PDF class derived from RooAbsPdf; 32should override the `evaluate()` function. This function should; 33return the PDF's value (which does not need to be normalised).; 34 ; 35 ; 36#### Normalization/Integration; 37 ; 38Although the normalization of a PDF is an integral part of a; 39probability density function, normalization is treated separately; 40in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; 41PDF: it can be a building block for a more complex composite PDF; 42if any of its variables are functions instead of variables. In; 43such cases, the normalization of the composite PDF may not simply be; 44integral over the dependents of the top-level PDF: these are; 45functions with potentially non-trivial Jacobian terms themselves.; 46\note Therefore, no explicit attempt should be made to normalize the; 47function output in evaluate(). In particular, normalisation constants; 48can be omitted to speed up the function evaluations, and included later; 49in the integration of the PDF (see below), which is rarely called in; 50comparison to the `evaluate()` function.; 51 ; 52In addition, RooAbsPdf objects do not have a static concept of what; 53variables are parameters, and what variables are dependents (which; 54need to be integrated over for a correct PDF normalization).; 55Instead, the choice of normalization is always specified each time a; 56normalized value is requested from the PDF via the getVal(); 57method.; 58 ; 5",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:2021,Modifiability,variab,variables,2021,"///////////////////////////////////////////////////////////////////; 18/** \class RooAbsPdf; 19 \ingroup Roofitcore; 20 \brief Abstract interface for all probability density functions.; 21 ; 22## RooAbsPdf, the base class of all PDFs; 23 ; 24RooAbsPdf is the base class for all probability density; 25functions (PDFs). The class provides hybrid analytical/numerical; 26normalization for its implementations, error tracing, and a Monte Carlo; 27generator interface.; 28 ; 29### A Minimal PDF Implementation; 30 ; 31A minimal implementation of a PDF class derived from RooAbsPdf; 32should override the `evaluate()` function. This function should; 33return the PDF's value (which does not need to be normalised).; 34 ; 35 ; 36#### Normalization/Integration; 37 ; 38Although the normalization of a PDF is an integral part of a; 39probability density function, normalization is treated separately; 40in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; 41PDF: it can be a building block for a more complex composite PDF; 42if any of its variables are functions instead of variables. In; 43such cases, the normalization of the composite PDF may not simply be; 44integral over the dependents of the top-level PDF: these are; 45functions with potentially non-trivial Jacobian terms themselves.; 46\note Therefore, no explicit attempt should be made to normalize the; 47function output in evaluate(). In particular, normalisation constants; 48can be omitted to speed up the function evaluations, and included later; 49in the integration of the PDF (see below), which is rarely called in; 50comparison to the `evaluate()` function.; 51 ; 52In addition, RooAbsPdf objects do not have a static concept of what; 53variables are parameters, and what variables are dependents (which; 54need to be integrated over for a correct PDF normalization).; 55Instead, the choice of normalization is always specified each time a; 56normalized value is requested from the PDF via the getVal(); 57method.; 58 ; 5",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:2690,Modifiability,variab,variables,2690,"/Integration; 37 ; 38Although the normalization of a PDF is an integral part of a; 39probability density function, normalization is treated separately; 40in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; 41PDF: it can be a building block for a more complex composite PDF; 42if any of its variables are functions instead of variables. In; 43such cases, the normalization of the composite PDF may not simply be; 44integral over the dependents of the top-level PDF: these are; 45functions with potentially non-trivial Jacobian terms themselves.; 46\note Therefore, no explicit attempt should be made to normalize the; 47function output in evaluate(). In particular, normalisation constants; 48can be omitted to speed up the function evaluations, and included later; 49in the integration of the PDF (see below), which is rarely called in; 50comparison to the `evaluate()` function.; 51 ; 52In addition, RooAbsPdf objects do not have a static concept of what; 53variables are parameters, and what variables are dependents (which; 54need to be integrated over for a correct PDF normalization).; 55Instead, the choice of normalization is always specified each time a; 56normalized value is requested from the PDF via the getVal(); 57method.; 58 ; 59RooAbsPdf manages the entire normalization logic of each PDF with; 60the help of a RooRealIntegral object, which coordinates the integration; 61of a given choice of normalization. By default, RooRealIntegral will; 62perform an entirely numeric integration of all dependents. However,; 63PDFs can advertise one or more (partial) analytical integrals of; 64their function, and these will be used by RooRealIntegral, if it; 65determines that this is safe (i.e., no hidden Jacobian terms,; 66multiplication with other PDFs that have one or more dependents in; 67common, etc).; 68 ; 69#### Implementing analytical integrals; 70To implement analytical integrals, two functions must be implemented. First,; 71 ; 72```; 73Int_t getAnalyticalIntegra",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:4041,Modifiability,config,configuration,4041,"tire normalization logic of each PDF with; 60the help of a RooRealIntegral object, which coordinates the integration; 61of a given choice of normalization. By default, RooRealIntegral will; 62perform an entirely numeric integration of all dependents. However,; 63PDFs can advertise one or more (partial) analytical integrals of; 64their function, and these will be used by RooRealIntegral, if it; 65determines that this is safe (i.e., no hidden Jacobian terms,; 66multiplication with other PDFs that have one or more dependents in; 67common, etc).; 68 ; 69#### Implementing analytical integrals; 70To implement analytical integrals, two functions must be implemented. First,; 71 ; 72```; 73Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); 74```; 75should return the analytical integrals that are supported. `integSet`; 76is the set of dependents for which integration is requested. The; 77function should copy the subset of dependents it can analytically; 78integrate to `anaIntSet`, and return a unique identification code for; 79this integration configuration. If no integration can be; 80performed, zero should be returned. Second,; 81 ; 82```; 83double analyticalIntegral(Int_t code); 84```; 85 ; 86implements the actual analytical integral(s) advertised by; 87`getAnalyticalIntegral()`. This function will only be called with; 88codes returned by `getAnalyticalIntegral()`, except code zero.; 89 ; 90The integration range for each dependent to be integrated can; 91be obtained from the dependent's proxy functions `min()` and; 92`max()`. Never call these proxy functions for any proxy not known to; 93be a dependent via the integration code. Doing so may be; 94ill-defined, e.g., in case the proxy holds a function, and will; 95trigger an assert. Integrated category dependents should always be; 96summed over all of their states.; 97 ; 98 ; 99 ; 100### Direct generation of observables; 101 ; 102Distributions for any PDF can be generated with the accept/reject meth",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:15553,Modifiability,variab,variables,15553,", forcing value to zero"",value)) ;; 390 error=true ;; 391 }; 392 if (value<0) {; 393 logEvalError(Form(""p.d.f value is less than zero (%f), forcing value to zero"",value)) ;; 394 error=true ;; 395 }; 396 ; 397 // do nothing if we are no longer tracing evaluations and there was no error; 398 if(!error) return error ;; 399 ; 400 // otherwise, print out this evaluations input values and result; 401 if(++_errorCount <= 10) {; 402 cxcoutD(Tracing) << ""*** Evaluation Error "" << _errorCount << "" "";; 403 if(_errorCount == 10) cxcoutD(Tracing) << ""(no more will be printed) "";; 404 }; 405 else {; 406 return error ;; 407 }; 408 ; 409 Print() ;; 410 return error ;; 411}; 412 ; 413 ; 414////////////////////////////////////////////////////////////////////////////////; 415/// Get normalisation term needed to normalise the raw values returned by; 416/// getVal(). Note that `getVal(normalisationVariables)` will automatically; 417/// apply the normalisation term returned here.; 418/// \param nset Set of variables to normalise over.; 419double RooAbsPdf::getNorm(const RooArgSet* nset) const; 420{; 421 if (!nset) return 1 ;; 422 ; 423 syncNormalization(nset,true) ;; 424 if (_verboseEval>1) cxcoutD(Tracing) << ClassName() << ""::getNorm("" << GetName() << ""): norm("" << _norm << "") = "" << _norm->getVal() << endl ;; 425 ; 426 double ret = _norm->getVal() ;; 427 if (ret==0.) {; 428 if(++_errorCount <= 10) {; 429 coutW(Eval) << ""RooAbsPdf::getNorm("" << GetName() << "":: WARNING normalization is zero, nset = "" ; nset->Print(""1"") ;; 430 if(_errorCount == 10) coutW(Eval) << ""RooAbsPdf::getNorm("" << GetName() << "") INFO: no more messages will be printed "" << endl ;; 431 }; 432 }; 433 ; 434 return ret ;; 435}; 436 ; 437 ; 438 ; 439////////////////////////////////////////////////////////////////////////////////; 440/// Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range; 441/// rangeName, optionally taking the integrand normalized over observable",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:25746,Modifiability,extend,extended,25746,"d.; 654void RooAbsPdf::logBatchComputationErrors(std::span<const double>& outputs, std::size_t begin) const {; 655 for (unsigned int i=0; i<outputs.size(); ++i) {; 656 const double value = outputs[i];; 657 if (TMath::IsNaN(outputs[i])) {; 658 logEvalError(Form(""p.d.f value of (%s) is Not-a-Number (%f) for entry %zu"",; 659 GetName(), value, begin+i));; 660 } else if (!std::isfinite(outputs[i])){; 661 logEvalError(Form(""p.d.f value of (%s) is (%f) for entry %zu"",; 662 GetName(), value, begin+i));; 663 } else if (outputs[i] < 0.) {; 664 logEvalError(Form(""p.d.f value of (%s) is less than zero (%f) for entry %zu"",; 665 GetName(), value, begin+i));; 666 }; 667 }; 668}; 669 ; 670 ; 671void RooAbsPdf::getLogProbabilities(std::span<const double> pdfValues, double * output) const {; 672 for (std::size_t i = 0; i < pdfValues.size(); ++i) {; 673 output[i] = getLog(pdfValues[i], this);; 674 }; 675}; 676 ; 677////////////////////////////////////////////////////////////////////////////////; 678/// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); 679/// of this PDF for the given number of observed events.; 680///; 681/// For successful operation, the PDF implementation must indicate that; 682/// it is extendable by overloading `canBeExtended()`, and must; 683/// implement the `expectedEvents()` function.; 684///; 685/// \param[in] sumEntries The number of observed events.; 686/// \param[in] nset The normalization set when asking the pdf for the expected; 687/// number of events.; 688/// \param[in] observedSumW2 The number of observed events when weighting with; 689/// squared weights. If non-zero, the weight-squared error; 690/// correction is applied to the extended term.; 691/// \param[in] doOffset Offset the extended term by a counterterm where the; 692/// expected number of events equals the observed number of events.; 693/// This constant shift results in a term closer to zero that is; 694/// approximately chi-",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:26009,Modifiability,extend,extendable,26009,"f (%s) is Not-a-Number (%f) for entry %zu"",; 659 GetName(), value, begin+i));; 660 } else if (!std::isfinite(outputs[i])){; 661 logEvalError(Form(""p.d.f value of (%s) is (%f) for entry %zu"",; 662 GetName(), value, begin+i));; 663 } else if (outputs[i] < 0.) {; 664 logEvalError(Form(""p.d.f value of (%s) is less than zero (%f) for entry %zu"",; 665 GetName(), value, begin+i));; 666 }; 667 }; 668}; 669 ; 670 ; 671void RooAbsPdf::getLogProbabilities(std::span<const double> pdfValues, double * output) const {; 672 for (std::size_t i = 0; i < pdfValues.size(); ++i) {; 673 output[i] = getLog(pdfValues[i], this);; 674 }; 675}; 676 ; 677////////////////////////////////////////////////////////////////////////////////; 678/// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); 679/// of this PDF for the given number of observed events.; 680///; 681/// For successful operation, the PDF implementation must indicate that; 682/// it is extendable by overloading `canBeExtended()`, and must; 683/// implement the `expectedEvents()` function.; 684///; 685/// \param[in] sumEntries The number of observed events.; 686/// \param[in] nset The normalization set when asking the pdf for the expected; 687/// number of events.; 688/// \param[in] observedSumW2 The number of observed events when weighting with; 689/// squared weights. If non-zero, the weight-squared error; 690/// correction is applied to the extended term.; 691/// \param[in] doOffset Offset the extended term by a counterterm where the; 692/// expected number of events equals the observed number of events.; 693/// This constant shift results in a term closer to zero that is; 694/// approximately chi-square distributed. It is useful to do this; 695/// also when summing multiple NLL terms to avoid numeric precision; 696/// loss that happens if you sum multiple terms of different orders; 697/// of magnitude.; 698///; 699/// The weight-squared error correction works as foll",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:26475,Modifiability,extend,extended,26475,"ogProbabilities(std::span<const double> pdfValues, double * output) const {; 672 for (std::size_t i = 0; i < pdfValues.size(); ++i) {; 673 output[i] = getLog(pdfValues[i], this);; 674 }; 675}; 676 ; 677////////////////////////////////////////////////////////////////////////////////; 678/// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); 679/// of this PDF for the given number of observed events.; 680///; 681/// For successful operation, the PDF implementation must indicate that; 682/// it is extendable by overloading `canBeExtended()`, and must; 683/// implement the `expectedEvents()` function.; 684///; 685/// \param[in] sumEntries The number of observed events.; 686/// \param[in] nset The normalization set when asking the pdf for the expected; 687/// number of events.; 688/// \param[in] observedSumW2 The number of observed events when weighting with; 689/// squared weights. If non-zero, the weight-squared error; 690/// correction is applied to the extended term.; 691/// \param[in] doOffset Offset the extended term by a counterterm where the; 692/// expected number of events equals the observed number of events.; 693/// This constant shift results in a term closer to zero that is; 694/// approximately chi-square distributed. It is useful to do this; 695/// also when summing multiple NLL terms to avoid numeric precision; 696/// loss that happens if you sum multiple terms of different orders; 697/// of magnitude.; 698///; 699/// The weight-squared error correction works as follows:; 700/// adjust poisson such that; 701/// estimate of \f$N_\mathrm{expect}\f$ stays at the same value, but has a different variance, rescale; 702/// both the observed and expected count of the Poisson with a factor \f$ \sum w_{i} / \sum w_{i}^2 \f$; 703/// (the effective weight of the Poisson term),; 704/// i.e., change \f$\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\f$; 705/// to \f$ \mathrm{Poiss",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:26529,Modifiability,extend,extended,26529,"ze(); ++i) {; 673 output[i] = getLog(pdfValues[i], this);; 674 }; 675}; 676 ; 677////////////////////////////////////////////////////////////////////////////////; 678/// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); 679/// of this PDF for the given number of observed events.; 680///; 681/// For successful operation, the PDF implementation must indicate that; 682/// it is extendable by overloading `canBeExtended()`, and must; 683/// implement the `expectedEvents()` function.; 684///; 685/// \param[in] sumEntries The number of observed events.; 686/// \param[in] nset The normalization set when asking the pdf for the expected; 687/// number of events.; 688/// \param[in] observedSumW2 The number of observed events when weighting with; 689/// squared weights. If non-zero, the weight-squared error; 690/// correction is applied to the extended term.; 691/// \param[in] doOffset Offset the extended term by a counterterm where the; 692/// expected number of events equals the observed number of events.; 693/// This constant shift results in a term closer to zero that is; 694/// approximately chi-square distributed. It is useful to do this; 695/// also when summing multiple NLL terms to avoid numeric precision; 696/// loss that happens if you sum multiple terms of different orders; 697/// of magnitude.; 698///; 699/// The weight-squared error correction works as follows:; 700/// adjust poisson such that; 701/// estimate of \f$N_\mathrm{expect}\f$ stays at the same value, but has a different variance, rescale; 702/// both the observed and expected count of the Poisson with a factor \f$ \sum w_{i} / \sum w_{i}^2 \f$; 703/// (the effective weight of the Poisson term),; 704/// i.e., change \f$\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\f$; 705/// to \f$ \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \f$,; 706/// weighte",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:28029,Modifiability,extend,extended,28029,"/// both the observed and expected count of the Poisson with a factor \f$ \sum w_{i} / \sum w_{i}^2 \f$; 703/// (the effective weight of the Poisson term),; 704/// i.e., change \f$\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\f$; 705/// to \f$ \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \f$,; 706/// weighted by the effective weight \f$ \sum w_{i}^2 / \sum w_{i} \f$ in the likelihood.; 707/// Since here we compute the likelihood with the weight square, we need to multiply by the; 708/// square of the effective weight:; 709/// - \f$ W_\mathrm{expect} = N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 \f$ : effective expected entries; 710/// - \f$ W_\mathrm{observed} = \sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 \f$ : effective observed entries; 711///; 712/// The extended term for the likelihood weighted by the square of the weight will be then:; 713///; 714/// \f$ \left(\sum w_{i}^2 / \sum w_{i}\right)^2 \cdot W_\mathrm{expect} - (\sum w_{i}^2 / \sum w_{i})^2 \cdot W_\mathrm{observed} \cdot \log{W_\mathrm{expect}} \f$; 715///; 716/// aund this is using the previous expressions for \f$ W_\mathrm{expect} \f$ and \f$ W_\mathrm{observed} \f$:; 717///; 718/// \f$ \sum w_{i}^2 / \sum w_{i} \cdot N_\mathrm{expect} - \sum w_{i}^2 \cdot \log{W_\mathrm{expect}} \f$; 719///; 720/// Since the weights are constants in the likelihood we can use \f$\log{N_\mathrm{expect}}\f$ instead of \f$\log{W_\mathrm{expect}}\f$.; 721///; 722/// See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset),; 723/// which takes a dataset to extract \f$N_\mathrm{observed}\f$ and the; 724/// normalization set.; 725double RooAbsPdf::extendedTerm(double sumEntries, RooArgSet const* nset, double sumEntriesW2, bool doOffset) const; 726{; 727 return extendedTerm(sumEntries, expectedEvents(nset), sumEntriesW2, doOffset);; 728}; 729 ; 730double RooAbsPdf::extendedTerm(double sumEntr",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:28717,Modifiability,extend,extendedTerm,28717,"// - \f$ W_\mathrm{expect} = N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 \f$ : effective expected entries; 710/// - \f$ W_\mathrm{observed} = \sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 \f$ : effective observed entries; 711///; 712/// The extended term for the likelihood weighted by the square of the weight will be then:; 713///; 714/// \f$ \left(\sum w_{i}^2 / \sum w_{i}\right)^2 \cdot W_\mathrm{expect} - (\sum w_{i}^2 / \sum w_{i})^2 \cdot W_\mathrm{observed} \cdot \log{W_\mathrm{expect}} \f$; 715///; 716/// aund this is using the previous expressions for \f$ W_\mathrm{expect} \f$ and \f$ W_\mathrm{observed} \f$:; 717///; 718/// \f$ \sum w_{i}^2 / \sum w_{i} \cdot N_\mathrm{expect} - \sum w_{i}^2 \cdot \log{W_\mathrm{expect}} \f$; 719///; 720/// Since the weights are constants in the likelihood we can use \f$\log{N_\mathrm{expect}}\f$ instead of \f$\log{W_\mathrm{expect}}\f$.; 721///; 722/// See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset),; 723/// which takes a dataset to extract \f$N_\mathrm{observed}\f$ and the; 724/// normalization set.; 725double RooAbsPdf::extendedTerm(double sumEntries, RooArgSet const* nset, double sumEntriesW2, bool doOffset) const; 726{; 727 return extendedTerm(sumEntries, expectedEvents(nset), sumEntriesW2, doOffset);; 728}; 729 ; 730double RooAbsPdf::extendedTerm(double sumEntries, double expected, double sumEntriesW2, bool doOffset) const; 731{; 732 // check if this PDF supports extended maximum likelihood fits; 733 if(!canBeExtended()) {; 734 coutE(InputArguments) << GetName() << "": this PDF does not support extended maximum likelihood""; 735 << std::endl;; 736 return 0.0;; 737 }; 738 ; 739 if(expected < 0.0) {; 740 coutE(InputArguments) << GetName() << "": calculated negative expected events: "" << expected; 741 << std::endl;; 742 logEvalError(""extendedTerm #expected events is <0 return a NaN"");; 743 return TMath::QuietNaN();; 744 }; 745 ; 746 ; 747 // Explicitly handle case Nobs=Nexp=0; 7",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:28914,Modifiability,extend,extendedTerm,28914,"dot W_\mathrm{expect} - (\sum w_{i}^2 / \sum w_{i})^2 \cdot W_\mathrm{observed} \cdot \log{W_\mathrm{expect}} \f$; 715///; 716/// aund this is using the previous expressions for \f$ W_\mathrm{expect} \f$ and \f$ W_\mathrm{observed} \f$:; 717///; 718/// \f$ \sum w_{i}^2 / \sum w_{i} \cdot N_\mathrm{expect} - \sum w_{i}^2 \cdot \log{W_\mathrm{expect}} \f$; 719///; 720/// Since the weights are constants in the likelihood we can use \f$\log{N_\mathrm{expect}}\f$ instead of \f$\log{W_\mathrm{expect}}\f$.; 721///; 722/// See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset),; 723/// which takes a dataset to extract \f$N_\mathrm{observed}\f$ and the; 724/// normalization set.; 725double RooAbsPdf::extendedTerm(double sumEntries, RooArgSet const* nset, double sumEntriesW2, bool doOffset) const; 726{; 727 return extendedTerm(sumEntries, expectedEvents(nset), sumEntriesW2, doOffset);; 728}; 729 ; 730double RooAbsPdf::extendedTerm(double sumEntries, double expected, double sumEntriesW2, bool doOffset) const; 731{; 732 // check if this PDF supports extended maximum likelihood fits; 733 if(!canBeExtended()) {; 734 coutE(InputArguments) << GetName() << "": this PDF does not support extended maximum likelihood""; 735 << std::endl;; 736 return 0.0;; 737 }; 738 ; 739 if(expected < 0.0) {; 740 coutE(InputArguments) << GetName() << "": calculated negative expected events: "" << expected; 741 << std::endl;; 742 logEvalError(""extendedTerm #expected events is <0 return a NaN"");; 743 return TMath::QuietNaN();; 744 }; 745 ; 746 ; 747 // Explicitly handle case Nobs=Nexp=0; 748 if (std::abs(expected)<1e-10 && std::abs(sumEntries)<1e-10) {; 749 return 0.0;; 750 }; 751 ; 752 // Check for errors in Nexpected; 753 if (TMath::IsNaN(expected)) {; 754 logEvalError(""extendedTerm #expected events is a NaN"") ;; 755 return TMath::QuietNaN() ;; 756 }; 757 ; 758 double extra = doOffset; 759 ? (expected - sumEntries) - sumEntries * (std::log(expected) - std::log(sumEntries",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:29029,Modifiability,extend,extendedTerm,29029,"dot W_\mathrm{expect} - (\sum w_{i}^2 / \sum w_{i})^2 \cdot W_\mathrm{observed} \cdot \log{W_\mathrm{expect}} \f$; 715///; 716/// aund this is using the previous expressions for \f$ W_\mathrm{expect} \f$ and \f$ W_\mathrm{observed} \f$:; 717///; 718/// \f$ \sum w_{i}^2 / \sum w_{i} \cdot N_\mathrm{expect} - \sum w_{i}^2 \cdot \log{W_\mathrm{expect}} \f$; 719///; 720/// Since the weights are constants in the likelihood we can use \f$\log{N_\mathrm{expect}}\f$ instead of \f$\log{W_\mathrm{expect}}\f$.; 721///; 722/// See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset),; 723/// which takes a dataset to extract \f$N_\mathrm{observed}\f$ and the; 724/// normalization set.; 725double RooAbsPdf::extendedTerm(double sumEntries, RooArgSet const* nset, double sumEntriesW2, bool doOffset) const; 726{; 727 return extendedTerm(sumEntries, expectedEvents(nset), sumEntriesW2, doOffset);; 728}; 729 ; 730double RooAbsPdf::extendedTerm(double sumEntries, double expected, double sumEntriesW2, bool doOffset) const; 731{; 732 // check if this PDF supports extended maximum likelihood fits; 733 if(!canBeExtended()) {; 734 coutE(InputArguments) << GetName() << "": this PDF does not support extended maximum likelihood""; 735 << std::endl;; 736 return 0.0;; 737 }; 738 ; 739 if(expected < 0.0) {; 740 coutE(InputArguments) << GetName() << "": calculated negative expected events: "" << expected; 741 << std::endl;; 742 logEvalError(""extendedTerm #expected events is <0 return a NaN"");; 743 return TMath::QuietNaN();; 744 }; 745 ; 746 ; 747 // Explicitly handle case Nobs=Nexp=0; 748 if (std::abs(expected)<1e-10 && std::abs(sumEntries)<1e-10) {; 749 return 0.0;; 750 }; 751 ; 752 // Check for errors in Nexpected; 753 if (TMath::IsNaN(expected)) {; 754 logEvalError(""extendedTerm #expected events is a NaN"") ;; 755 return TMath::QuietNaN() ;; 756 }; 757 ; 758 double extra = doOffset; 759 ? (expected - sumEntries) - sumEntries * (std::log(expected) - std::log(sumEntries",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:29135,Modifiability,extend,extendedTerm,29135,"dot W_\mathrm{expect} - (\sum w_{i}^2 / \sum w_{i})^2 \cdot W_\mathrm{observed} \cdot \log{W_\mathrm{expect}} \f$; 715///; 716/// aund this is using the previous expressions for \f$ W_\mathrm{expect} \f$ and \f$ W_\mathrm{observed} \f$:; 717///; 718/// \f$ \sum w_{i}^2 / \sum w_{i} \cdot N_\mathrm{expect} - \sum w_{i}^2 \cdot \log{W_\mathrm{expect}} \f$; 719///; 720/// Since the weights are constants in the likelihood we can use \f$\log{N_\mathrm{expect}}\f$ instead of \f$\log{W_\mathrm{expect}}\f$.; 721///; 722/// See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset),; 723/// which takes a dataset to extract \f$N_\mathrm{observed}\f$ and the; 724/// normalization set.; 725double RooAbsPdf::extendedTerm(double sumEntries, RooArgSet const* nset, double sumEntriesW2, bool doOffset) const; 726{; 727 return extendedTerm(sumEntries, expectedEvents(nset), sumEntriesW2, doOffset);; 728}; 729 ; 730double RooAbsPdf::extendedTerm(double sumEntries, double expected, double sumEntriesW2, bool doOffset) const; 731{; 732 // check if this PDF supports extended maximum likelihood fits; 733 if(!canBeExtended()) {; 734 coutE(InputArguments) << GetName() << "": this PDF does not support extended maximum likelihood""; 735 << std::endl;; 736 return 0.0;; 737 }; 738 ; 739 if(expected < 0.0) {; 740 coutE(InputArguments) << GetName() << "": calculated negative expected events: "" << expected; 741 << std::endl;; 742 logEvalError(""extendedTerm #expected events is <0 return a NaN"");; 743 return TMath::QuietNaN();; 744 }; 745 ; 746 ; 747 // Explicitly handle case Nobs=Nexp=0; 748 if (std::abs(expected)<1e-10 && std::abs(sumEntries)<1e-10) {; 749 return 0.0;; 750 }; 751 ; 752 // Check for errors in Nexpected; 753 if (TMath::IsNaN(expected)) {; 754 logEvalError(""extendedTerm #expected events is a NaN"") ;; 755 return TMath::QuietNaN() ;; 756 }; 757 ; 758 double extra = doOffset; 759 ? (expected - sumEntries) - sumEntries * (std::log(expected) - std::log(sumEntries",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:29267,Modifiability,extend,extended,29267,"dot W_\mathrm{expect} - (\sum w_{i}^2 / \sum w_{i})^2 \cdot W_\mathrm{observed} \cdot \log{W_\mathrm{expect}} \f$; 715///; 716/// aund this is using the previous expressions for \f$ W_\mathrm{expect} \f$ and \f$ W_\mathrm{observed} \f$:; 717///; 718/// \f$ \sum w_{i}^2 / \sum w_{i} \cdot N_\mathrm{expect} - \sum w_{i}^2 \cdot \log{W_\mathrm{expect}} \f$; 719///; 720/// Since the weights are constants in the likelihood we can use \f$\log{N_\mathrm{expect}}\f$ instead of \f$\log{W_\mathrm{expect}}\f$.; 721///; 722/// See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset),; 723/// which takes a dataset to extract \f$N_\mathrm{observed}\f$ and the; 724/// normalization set.; 725double RooAbsPdf::extendedTerm(double sumEntries, RooArgSet const* nset, double sumEntriesW2, bool doOffset) const; 726{; 727 return extendedTerm(sumEntries, expectedEvents(nset), sumEntriesW2, doOffset);; 728}; 729 ; 730double RooAbsPdf::extendedTerm(double sumEntries, double expected, double sumEntriesW2, bool doOffset) const; 731{; 732 // check if this PDF supports extended maximum likelihood fits; 733 if(!canBeExtended()) {; 734 coutE(InputArguments) << GetName() << "": this PDF does not support extended maximum likelihood""; 735 << std::endl;; 736 return 0.0;; 737 }; 738 ; 739 if(expected < 0.0) {; 740 coutE(InputArguments) << GetName() << "": calculated negative expected events: "" << expected; 741 << std::endl;; 742 logEvalError(""extendedTerm #expected events is <0 return a NaN"");; 743 return TMath::QuietNaN();; 744 }; 745 ; 746 ; 747 // Explicitly handle case Nobs=Nexp=0; 748 if (std::abs(expected)<1e-10 && std::abs(sumEntries)<1e-10) {; 749 return 0.0;; 750 }; 751 ; 752 // Check for errors in Nexpected; 753 if (TMath::IsNaN(expected)) {; 754 logEvalError(""extendedTerm #expected events is a NaN"") ;; 755 return TMath::QuietNaN() ;; 756 }; 757 ; 758 double extra = doOffset; 759 ? (expected - sumEntries) - sumEntries * (std::log(expected) - std::log(sumEntries",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:29400,Modifiability,extend,extended,29400,"dot W_\mathrm{expect} - (\sum w_{i}^2 / \sum w_{i})^2 \cdot W_\mathrm{observed} \cdot \log{W_\mathrm{expect}} \f$; 715///; 716/// aund this is using the previous expressions for \f$ W_\mathrm{expect} \f$ and \f$ W_\mathrm{observed} \f$:; 717///; 718/// \f$ \sum w_{i}^2 / \sum w_{i} \cdot N_\mathrm{expect} - \sum w_{i}^2 \cdot \log{W_\mathrm{expect}} \f$; 719///; 720/// Since the weights are constants in the likelihood we can use \f$\log{N_\mathrm{expect}}\f$ instead of \f$\log{W_\mathrm{expect}}\f$.; 721///; 722/// See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset),; 723/// which takes a dataset to extract \f$N_\mathrm{observed}\f$ and the; 724/// normalization set.; 725double RooAbsPdf::extendedTerm(double sumEntries, RooArgSet const* nset, double sumEntriesW2, bool doOffset) const; 726{; 727 return extendedTerm(sumEntries, expectedEvents(nset), sumEntriesW2, doOffset);; 728}; 729 ; 730double RooAbsPdf::extendedTerm(double sumEntries, double expected, double sumEntriesW2, bool doOffset) const; 731{; 732 // check if this PDF supports extended maximum likelihood fits; 733 if(!canBeExtended()) {; 734 coutE(InputArguments) << GetName() << "": this PDF does not support extended maximum likelihood""; 735 << std::endl;; 736 return 0.0;; 737 }; 738 ; 739 if(expected < 0.0) {; 740 coutE(InputArguments) << GetName() << "": calculated negative expected events: "" << expected; 741 << std::endl;; 742 logEvalError(""extendedTerm #expected events is <0 return a NaN"");; 743 return TMath::QuietNaN();; 744 }; 745 ; 746 ; 747 // Explicitly handle case Nobs=Nexp=0; 748 if (std::abs(expected)<1e-10 && std::abs(sumEntries)<1e-10) {; 749 return 0.0;; 750 }; 751 ; 752 // Check for errors in Nexpected; 753 if (TMath::IsNaN(expected)) {; 754 logEvalError(""extendedTerm #expected events is a NaN"") ;; 755 return TMath::QuietNaN() ;; 756 }; 757 ; 758 double extra = doOffset; 759 ? (expected - sumEntries) - sumEntries * (std::log(expected) - std::log(sumEntries",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:29639,Modifiability,extend,extendedTerm,29639,"721///; 722/// See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset),; 723/// which takes a dataset to extract \f$N_\mathrm{observed}\f$ and the; 724/// normalization set.; 725double RooAbsPdf::extendedTerm(double sumEntries, RooArgSet const* nset, double sumEntriesW2, bool doOffset) const; 726{; 727 return extendedTerm(sumEntries, expectedEvents(nset), sumEntriesW2, doOffset);; 728}; 729 ; 730double RooAbsPdf::extendedTerm(double sumEntries, double expected, double sumEntriesW2, bool doOffset) const; 731{; 732 // check if this PDF supports extended maximum likelihood fits; 733 if(!canBeExtended()) {; 734 coutE(InputArguments) << GetName() << "": this PDF does not support extended maximum likelihood""; 735 << std::endl;; 736 return 0.0;; 737 }; 738 ; 739 if(expected < 0.0) {; 740 coutE(InputArguments) << GetName() << "": calculated negative expected events: "" << expected; 741 << std::endl;; 742 logEvalError(""extendedTerm #expected events is <0 return a NaN"");; 743 return TMath::QuietNaN();; 744 }; 745 ; 746 ; 747 // Explicitly handle case Nobs=Nexp=0; 748 if (std::abs(expected)<1e-10 && std::abs(sumEntries)<1e-10) {; 749 return 0.0;; 750 }; 751 ; 752 // Check for errors in Nexpected; 753 if (TMath::IsNaN(expected)) {; 754 logEvalError(""extendedTerm #expected events is a NaN"") ;; 755 return TMath::QuietNaN() ;; 756 }; 757 ; 758 double extra = doOffset; 759 ? (expected - sumEntries) - sumEntries * (std::log(expected) - std::log(sumEntries)); 760 : expected - sumEntries * std::log(expected);; 761 ; 762 if(sumEntriesW2 != 0.0) {; 763 extra *= sumEntriesW2 / sumEntries;; 764 }; 765 ; 766 return extra;; 767}; 768 ; 769////////////////////////////////////////////////////////////////////////////////; 770/// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); 771/// of this PDF for the given number of observed events.; 772///; 773/// This function is a wrapper around; 774/// Ro",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:29973,Modifiability,extend,extendedTerm,29973,"ents(nset), sumEntriesW2, doOffset);; 728}; 729 ; 730double RooAbsPdf::extendedTerm(double sumEntries, double expected, double sumEntriesW2, bool doOffset) const; 731{; 732 // check if this PDF supports extended maximum likelihood fits; 733 if(!canBeExtended()) {; 734 coutE(InputArguments) << GetName() << "": this PDF does not support extended maximum likelihood""; 735 << std::endl;; 736 return 0.0;; 737 }; 738 ; 739 if(expected < 0.0) {; 740 coutE(InputArguments) << GetName() << "": calculated negative expected events: "" << expected; 741 << std::endl;; 742 logEvalError(""extendedTerm #expected events is <0 return a NaN"");; 743 return TMath::QuietNaN();; 744 }; 745 ; 746 ; 747 // Explicitly handle case Nobs=Nexp=0; 748 if (std::abs(expected)<1e-10 && std::abs(sumEntries)<1e-10) {; 749 return 0.0;; 750 }; 751 ; 752 // Check for errors in Nexpected; 753 if (TMath::IsNaN(expected)) {; 754 logEvalError(""extendedTerm #expected events is a NaN"") ;; 755 return TMath::QuietNaN() ;; 756 }; 757 ; 758 double extra = doOffset; 759 ? (expected - sumEntries) - sumEntries * (std::log(expected) - std::log(sumEntries)); 760 : expected - sumEntries * std::log(expected);; 761 ; 762 if(sumEntriesW2 != 0.0) {; 763 extra *= sumEntriesW2 / sumEntries;; 764 }; 765 ; 766 return extra;; 767}; 768 ; 769////////////////////////////////////////////////////////////////////////////////; 770/// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); 771/// of this PDF for the given number of observed events.; 772///; 773/// This function is a wrapper around; 774/// RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const,; 775/// where the number of observed events and observables to be used as the; 776/// normalization set for the pdf is extracted from a RooAbsData.; 777///; 778/// For successful operation, the PDF implementation must indicate that; 779/// it is extendable by overloading `canBeExtended()`, and must; 780/// impl",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:30457,Modifiability,extend,extended,30457,"endl;; 736 return 0.0;; 737 }; 738 ; 739 if(expected < 0.0) {; 740 coutE(InputArguments) << GetName() << "": calculated negative expected events: "" << expected; 741 << std::endl;; 742 logEvalError(""extendedTerm #expected events is <0 return a NaN"");; 743 return TMath::QuietNaN();; 744 }; 745 ; 746 ; 747 // Explicitly handle case Nobs=Nexp=0; 748 if (std::abs(expected)<1e-10 && std::abs(sumEntries)<1e-10) {; 749 return 0.0;; 750 }; 751 ; 752 // Check for errors in Nexpected; 753 if (TMath::IsNaN(expected)) {; 754 logEvalError(""extendedTerm #expected events is a NaN"") ;; 755 return TMath::QuietNaN() ;; 756 }; 757 ; 758 double extra = doOffset; 759 ? (expected - sumEntries) - sumEntries * (std::log(expected) - std::log(sumEntries)); 760 : expected - sumEntries * std::log(expected);; 761 ; 762 if(sumEntriesW2 != 0.0) {; 763 extra *= sumEntriesW2 / sumEntries;; 764 }; 765 ; 766 return extra;; 767}; 768 ; 769////////////////////////////////////////////////////////////////////////////////; 770/// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); 771/// of this PDF for the given number of observed events.; 772///; 773/// This function is a wrapper around; 774/// RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const,; 775/// where the number of observed events and observables to be used as the; 776/// normalization set for the pdf is extracted from a RooAbsData.; 777///; 778/// For successful operation, the PDF implementation must indicate that; 779/// it is extendable by overloading `canBeExtended()`, and must; 780/// implement the `expectedEvents()` function.; 781///; 782/// \param[in] data The RooAbsData to retrieve the set of observables and; 783/// number of expected events.; 784/// \param[in] weightSquared If set to `true`, the extended term will be scaled by; 785/// the ratio of squared event weights over event weights:; 786/// \f$ \sum w_{i}^2 / \sum w_{i} \f$.; 787/// Intended to be us",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:30691,Modifiability,extend,extendedTerm,30691,"handle case Nobs=Nexp=0; 748 if (std::abs(expected)<1e-10 && std::abs(sumEntries)<1e-10) {; 749 return 0.0;; 750 }; 751 ; 752 // Check for errors in Nexpected; 753 if (TMath::IsNaN(expected)) {; 754 logEvalError(""extendedTerm #expected events is a NaN"") ;; 755 return TMath::QuietNaN() ;; 756 }; 757 ; 758 double extra = doOffset; 759 ? (expected - sumEntries) - sumEntries * (std::log(expected) - std::log(sumEntries)); 760 : expected - sumEntries * std::log(expected);; 761 ; 762 if(sumEntriesW2 != 0.0) {; 763 extra *= sumEntriesW2 / sumEntries;; 764 }; 765 ; 766 return extra;; 767}; 768 ; 769////////////////////////////////////////////////////////////////////////////////; 770/// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); 771/// of this PDF for the given number of observed events.; 772///; 773/// This function is a wrapper around; 774/// RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const,; 775/// where the number of observed events and observables to be used as the; 776/// normalization set for the pdf is extracted from a RooAbsData.; 777///; 778/// For successful operation, the PDF implementation must indicate that; 779/// it is extendable by overloading `canBeExtended()`, and must; 780/// implement the `expectedEvents()` function.; 781///; 782/// \param[in] data The RooAbsData to retrieve the set of observables and; 783/// number of expected events.; 784/// \param[in] weightSquared If set to `true`, the extended term will be scaled by; 785/// the ratio of squared event weights over event weights:; 786/// \f$ \sum w_{i}^2 / \sum w_{i} \f$.; 787/// Intended to be used by fits with the `SumW2Error()` option that; 788/// can be passed to RooAbsPdf::fitTo(); 789/// (see the documentation of said function to learn more about the; 790/// interpretation of fits with squared weights).; 791/// \param[in] doOffset See RooAbsPdf::extendedTerm(double, RooArgSet const*, double, bool) const",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:30998,Modifiability,extend,extendable,30998,"ts is a NaN"") ;; 755 return TMath::QuietNaN() ;; 756 }; 757 ; 758 double extra = doOffset; 759 ? (expected - sumEntries) - sumEntries * (std::log(expected) - std::log(sumEntries)); 760 : expected - sumEntries * std::log(expected);; 761 ; 762 if(sumEntriesW2 != 0.0) {; 763 extra *= sumEntriesW2 / sumEntries;; 764 }; 765 ; 766 return extra;; 767}; 768 ; 769////////////////////////////////////////////////////////////////////////////////; 770/// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); 771/// of this PDF for the given number of observed events.; 772///; 773/// This function is a wrapper around; 774/// RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const,; 775/// where the number of observed events and observables to be used as the; 776/// normalization set for the pdf is extracted from a RooAbsData.; 777///; 778/// For successful operation, the PDF implementation must indicate that; 779/// it is extendable by overloading `canBeExtended()`, and must; 780/// implement the `expectedEvents()` function.; 781///; 782/// \param[in] data The RooAbsData to retrieve the set of observables and; 783/// number of expected events.; 784/// \param[in] weightSquared If set to `true`, the extended term will be scaled by; 785/// the ratio of squared event weights over event weights:; 786/// \f$ \sum w_{i}^2 / \sum w_{i} \f$.; 787/// Intended to be used by fits with the `SumW2Error()` option that; 788/// can be passed to RooAbsPdf::fitTo(); 789/// (see the documentation of said function to learn more about the; 790/// interpretation of fits with squared weights).; 791/// \param[in] doOffset See RooAbsPdf::extendedTerm(double, RooArgSet const*, double, bool) const.; 792 ; 793double RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset) const {; 794 double sumW = data.sumEntries();; 795 double sumW2 = 0.0;; 796 if (weightSquared) {; 797 sumW2 = data.sumEntriesW2();; 798 }; ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:31279,Modifiability,extend,extended,31279,"5 ; 766 return extra;; 767}; 768 ; 769////////////////////////////////////////////////////////////////////////////////; 770/// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); 771/// of this PDF for the given number of observed events.; 772///; 773/// This function is a wrapper around; 774/// RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const,; 775/// where the number of observed events and observables to be used as the; 776/// normalization set for the pdf is extracted from a RooAbsData.; 777///; 778/// For successful operation, the PDF implementation must indicate that; 779/// it is extendable by overloading `canBeExtended()`, and must; 780/// implement the `expectedEvents()` function.; 781///; 782/// \param[in] data The RooAbsData to retrieve the set of observables and; 783/// number of expected events.; 784/// \param[in] weightSquared If set to `true`, the extended term will be scaled by; 785/// the ratio of squared event weights over event weights:; 786/// \f$ \sum w_{i}^2 / \sum w_{i} \f$.; 787/// Intended to be used by fits with the `SumW2Error()` option that; 788/// can be passed to RooAbsPdf::fitTo(); 789/// (see the documentation of said function to learn more about the; 790/// interpretation of fits with squared weights).; 791/// \param[in] doOffset See RooAbsPdf::extendedTerm(double, RooArgSet const*, double, bool) const.; 792 ; 793double RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset) const {; 794 double sumW = data.sumEntries();; 795 double sumW2 = 0.0;; 796 if (weightSquared) {; 797 sumW2 = data.sumEntriesW2();; 798 }; 799 return extendedTerm(sumW, data.get(), sumW2, doOffset);; 800}; 801 ; 802 ; 803/** @fn RooAbsPdf::createNLL(); 804 *; 805 * @brief Construct representation of -log(L) of PDF with given dataset.; 806 *; 807 * If dataset is unbinned, an unbinned likelihood is constructed.; 808 * If the dataset is binned, a binned lik",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:31702,Modifiability,extend,extendedTerm,31702,"e, RooArgSet const *, double, bool) const,; 775/// where the number of observed events and observables to be used as the; 776/// normalization set for the pdf is extracted from a RooAbsData.; 777///; 778/// For successful operation, the PDF implementation must indicate that; 779/// it is extendable by overloading `canBeExtended()`, and must; 780/// implement the `expectedEvents()` function.; 781///; 782/// \param[in] data The RooAbsData to retrieve the set of observables and; 783/// number of expected events.; 784/// \param[in] weightSquared If set to `true`, the extended term will be scaled by; 785/// the ratio of squared event weights over event weights:; 786/// \f$ \sum w_{i}^2 / \sum w_{i} \f$.; 787/// Intended to be used by fits with the `SumW2Error()` option that; 788/// can be passed to RooAbsPdf::fitTo(); 789/// (see the documentation of said function to learn more about the; 790/// interpretation of fits with squared weights).; 791/// \param[in] doOffset See RooAbsPdf::extendedTerm(double, RooArgSet const*, double, bool) const.; 792 ; 793double RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset) const {; 794 double sumW = data.sumEntries();; 795 double sumW2 = 0.0;; 796 if (weightSquared) {; 797 sumW2 = data.sumEntriesW2();; 798 }; 799 return extendedTerm(sumW, data.get(), sumW2, doOffset);; 800}; 801 ; 802 ; 803/** @fn RooAbsPdf::createNLL(); 804 *; 805 * @brief Construct representation of -log(L) of PDF with given dataset.; 806 *; 807 * If dataset is unbinned, an unbinned likelihood is constructed.; 808 * If the dataset is binned, a binned likelihood is constructed.; 809 *; 810 * @param data Reference to a RooAbsData object representing the dataset.; 811 * @param cmdArgs Variadic template arguments representing optional command arguments.; 812 * You can pass either an arbitrary number of RooCmdArg instances; 813 * or a single RooLinkedList that points to the RooCmdArg objects.; 814 * @return An owning pointer to the created R",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:31790,Modifiability,extend,extendedTerm,31790,"he; 776/// normalization set for the pdf is extracted from a RooAbsData.; 777///; 778/// For successful operation, the PDF implementation must indicate that; 779/// it is extendable by overloading `canBeExtended()`, and must; 780/// implement the `expectedEvents()` function.; 781///; 782/// \param[in] data The RooAbsData to retrieve the set of observables and; 783/// number of expected events.; 784/// \param[in] weightSquared If set to `true`, the extended term will be scaled by; 785/// the ratio of squared event weights over event weights:; 786/// \f$ \sum w_{i}^2 / \sum w_{i} \f$.; 787/// Intended to be used by fits with the `SumW2Error()` option that; 788/// can be passed to RooAbsPdf::fitTo(); 789/// (see the documentation of said function to learn more about the; 790/// interpretation of fits with squared weights).; 791/// \param[in] doOffset See RooAbsPdf::extendedTerm(double, RooArgSet const*, double, bool) const.; 792 ; 793double RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset) const {; 794 double sumW = data.sumEntries();; 795 double sumW2 = 0.0;; 796 if (weightSquared) {; 797 sumW2 = data.sumEntriesW2();; 798 }; 799 return extendedTerm(sumW, data.get(), sumW2, doOffset);; 800}; 801 ; 802 ; 803/** @fn RooAbsPdf::createNLL(); 804 *; 805 * @brief Construct representation of -log(L) of PDF with given dataset.; 806 *; 807 * If dataset is unbinned, an unbinned likelihood is constructed.; 808 * If the dataset is binned, a binned likelihood is constructed.; 809 *; 810 * @param data Reference to a RooAbsData object representing the dataset.; 811 * @param cmdArgs Variadic template arguments representing optional command arguments.; 812 * You can pass either an arbitrary number of RooCmdArg instances; 813 * or a single RooLinkedList that points to the RooCmdArg objects.; 814 * @return An owning pointer to the created RooAbsReal NLL object.; 815 *; 816 * @tparam CmdArgs_t Template types for optional command arguments.; 817 * Can either",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:32012,Modifiability,extend,extendedTerm,32012,"le by overloading `canBeExtended()`, and must; 780/// implement the `expectedEvents()` function.; 781///; 782/// \param[in] data The RooAbsData to retrieve the set of observables and; 783/// number of expected events.; 784/// \param[in] weightSquared If set to `true`, the extended term will be scaled by; 785/// the ratio of squared event weights over event weights:; 786/// \f$ \sum w_{i}^2 / \sum w_{i} \f$.; 787/// Intended to be used by fits with the `SumW2Error()` option that; 788/// can be passed to RooAbsPdf::fitTo(); 789/// (see the documentation of said function to learn more about the; 790/// interpretation of fits with squared weights).; 791/// \param[in] doOffset See RooAbsPdf::extendedTerm(double, RooArgSet const*, double, bool) const.; 792 ; 793double RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset) const {; 794 double sumW = data.sumEntries();; 795 double sumW2 = 0.0;; 796 if (weightSquared) {; 797 sumW2 = data.sumEntriesW2();; 798 }; 799 return extendedTerm(sumW, data.get(), sumW2, doOffset);; 800}; 801 ; 802 ; 803/** @fn RooAbsPdf::createNLL(); 804 *; 805 * @brief Construct representation of -log(L) of PDF with given dataset.; 806 *; 807 * If dataset is unbinned, an unbinned likelihood is constructed.; 808 * If the dataset is binned, a binned likelihood is constructed.; 809 *; 810 * @param data Reference to a RooAbsData object representing the dataset.; 811 * @param cmdArgs Variadic template arguments representing optional command arguments.; 812 * You can pass either an arbitrary number of RooCmdArg instances; 813 * or a single RooLinkedList that points to the RooCmdArg objects.; 814 * @return An owning pointer to the created RooAbsReal NLL object.; 815 *; 816 * @tparam CmdArgs_t Template types for optional command arguments.; 817 * Can either be an arbitrary number of RooCmdArg or a single RooLinkedList.; 818 *; 819 * \note This front-end function should not be re-implemented in derived PDF types.; 820 * If you mean t",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:33507,Modifiability,extend,extended,33507,"mmand arguments.; 812 * You can pass either an arbitrary number of RooCmdArg instances; 813 * or a single RooLinkedList that points to the RooCmdArg objects.; 814 * @return An owning pointer to the created RooAbsReal NLL object.; 815 *; 816 * @tparam CmdArgs_t Template types for optional command arguments.; 817 * Can either be an arbitrary number of RooCmdArg or a single RooLinkedList.; 818 *; 819 * \note This front-end function should not be re-implemented in derived PDF types.; 820 * If you mean to customize the NLL creation routine,; 821 * you need to override the virtual RooAbsPdf::createNLLImpl() method.; 822 *; 823 * The following named arguments are supported:; 824 *; 825 * <table>; 826 * <tr><th> Type of CmdArg <th> Effect on NLL; 827 * <tr><td> `ConditionalObservables(Args_t &&... argsOrArgSet)` <td> Do not normalize PDF over listed observables.; 828 * Arguments can either be multiple RooRealVar or a single RooArgSet containing them.; 829 * <tr><td> `Extended(bool flag)` <td> Add extended likelihood term, off by default.; 830 * <tr><td> `Range(const char* name)` <td> Fit only data inside range with given name. Multiple comma-separated range names can be specified.; 831 * In this case, the unnormalized PDF \f$f(x)\f$ is normalized by the integral over all ranges \f$r_i\f$:; 832 * \f[; 833 * p(x) = \frac{f(x)}{\sum_i \int_{r_i} f(x) dx}.; 834 * \f]; 835 * <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; 836 * <tr><td> `SumCoefRange(const char* name)` <td> Set the range in which to interpret the coefficients of RooAddPdf components; 837 * <tr><td> `NumCPU(int num, int istrat)` <td> Parallelize NLL calculation on num CPUs; 838 * <table>; 839 * <tr><th> Strategy <th> Effect; 840 * <tr><td> 0 = RooFit::BulkPartition - *default* <td> Divide events in N equal chunks; 841 * <tr><td> 1 = RooFit::Interleave <td> Process event i%N in process N. Recommended for binned data with; 8",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:49225,Modifiability,extend,extended,49225,"ents.; 1014 * <tr><td> false <td> The errors reflect the errors of a dataset, which is as big as the sum of weights.; 1015 * Use this if you want to know what statistical errors you would get if you had a dataset with as many; 1016 * events as the (weighted) Monte Carlo simulation represents.; 1017 *; 1018 * **Example** (Data as above):; 1019 * The errors are as big as if one fitted to 100 events.; 1020 * </table>; 1021 * \note If the `SumW2Error` correction is enabled, the covariance matrix quality stored in the RooFitResult; 1022 * object will be the minimum of the original covariance matrix quality and the quality of the covariance; 1023 * matrix calculated with the squared weights.; 1024 * <tr><td> `AsymptoticError()` <td> Use the asymptotically correct approach to estimate errors in the presence of weights.; 1025 * This is slower but more accurate than `SumW2Error`. See also https://arxiv.org/abs/1911.01303).; 1026 This option even correctly implements the case of extended likelihood fits; 1027 (see this [writeup on extended weighted fits](https://root.cern/files/extended_weighted_fits.pdf) that complements the paper linked before).; 1028 * <tr><td> `PrefitDataFraction(double fraction)`; 1029 * <td> Runs a prefit on a small dataset of size fraction*(actual data size). This can speed up fits; 1030 * by finding good starting values for the parameters for the actual fit.; 1031 * \warning Prefitting may give bad results when used in binned analysis.; 1032 *; 1033 * <tr><th><th> Options to control informational output; 1034 * <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit).; 1035 * <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default.; 1036 * <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 to 3, default is 1). At -1 all RooFit informational messages are suppressed as well.; 1037 * See RooMinimizer::PrintLevel for the meaning of the levels.",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:49278,Modifiability,extend,extended,49278,"ents.; 1014 * <tr><td> false <td> The errors reflect the errors of a dataset, which is as big as the sum of weights.; 1015 * Use this if you want to know what statistical errors you would get if you had a dataset with as many; 1016 * events as the (weighted) Monte Carlo simulation represents.; 1017 *; 1018 * **Example** (Data as above):; 1019 * The errors are as big as if one fitted to 100 events.; 1020 * </table>; 1021 * \note If the `SumW2Error` correction is enabled, the covariance matrix quality stored in the RooFitResult; 1022 * object will be the minimum of the original covariance matrix quality and the quality of the covariance; 1023 * matrix calculated with the squared weights.; 1024 * <tr><td> `AsymptoticError()` <td> Use the asymptotically correct approach to estimate errors in the presence of weights.; 1025 * This is slower but more accurate than `SumW2Error`. See also https://arxiv.org/abs/1911.01303).; 1026 This option even correctly implements the case of extended likelihood fits; 1027 (see this [writeup on extended weighted fits](https://root.cern/files/extended_weighted_fits.pdf) that complements the paper linked before).; 1028 * <tr><td> `PrefitDataFraction(double fraction)`; 1029 * <td> Runs a prefit on a small dataset of size fraction*(actual data size). This can speed up fits; 1030 * by finding good starting values for the parameters for the actual fit.; 1031 * \warning Prefitting may give bad results when used in binned analysis.; 1032 *; 1033 * <tr><th><th> Options to control informational output; 1034 * <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit).; 1035 * <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default.; 1036 * <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 to 3, default is 1). At -1 all RooFit informational messages are suppressed as well.; 1037 * See RooMinimizer::PrintLevel for the meaning of the levels.",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:56359,Modifiability,variab,variables,56359,"ars, bool verbose) const; 1118{; 1119 return new RooBinnedGenContext(*this,vars,nullptr,nullptr,verbose) ;; 1120}; 1121 ; 1122 ; 1123////////////////////////////////////////////////////////////////////////////////; 1124/// Interface function to create a generator context from a p.d.f. This default; 1125/// implementation returns a 'standard' context that works for any p.d.f; 1126 ; 1127RooAbsGenContext* RooAbsPdf::genContext(const RooArgSet &vars, const RooDataSet *prototype,; 1128 const RooArgSet* auxProto, bool verbose) const; 1129{; 1130 return new RooGenContext(*this,vars,prototype,auxProto,verbose) ;; 1131}; 1132 ; 1133 ; 1134////////////////////////////////////////////////////////////////////////////////; 1135 ; 1136RooAbsGenContext* RooAbsPdf::autoGenContext(const RooArgSet &vars, const RooDataSet* prototype, const RooArgSet* auxProto,; 1137 bool verbose, bool autoBinned, const char* binnedTag) const; 1138{; 1139 if (prototype || (auxProto && !auxProto->empty())) {; 1140 return genContext(vars,prototype,auxProto,verbose);; 1141 }; 1142 ; 1143 RooAbsGenContext *context(nullptr) ;; 1144 if ( (autoBinned && isBinnedDistribution(vars)) || ( binnedTag && strlen(binnedTag) && (getAttribute(binnedTag)||string(binnedTag)==""*""))) {; 1145 context = binnedGenContext(vars,verbose) ;; 1146 } else {; 1147 context= genContext(vars,nullptr,nullptr,verbose);; 1148 }; 1149 return context ;; 1150}; 1151 ; 1152 ; 1153 ; 1154////////////////////////////////////////////////////////////////////////////////; 1155/// Generate a new dataset containing the specified variables with events sampled from our distribution.; 1156/// Generate the specified number of events or expectedEvents() if not specified.; 1157/// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; 1158/// constant and not be used for event generation.; 1159/// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg() to change behaviour of generate().; 1160/// \re",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:56535,Modifiability,variab,variables,56535," RooAbsPdf::autoGenContext(const RooArgSet &vars, const RooDataSet* prototype, const RooArgSet* auxProto,; 1137 bool verbose, bool autoBinned, const char* binnedTag) const; 1138{; 1139 if (prototype || (auxProto && !auxProto->empty())) {; 1140 return genContext(vars,prototype,auxProto,verbose);; 1141 }; 1142 ; 1143 RooAbsGenContext *context(nullptr) ;; 1144 if ( (autoBinned && isBinnedDistribution(vars)) || ( binnedTag && strlen(binnedTag) && (getAttribute(binnedTag)||string(binnedTag)==""*""))) {; 1145 context = binnedGenContext(vars,verbose) ;; 1146 } else {; 1147 context= genContext(vars,nullptr,nullptr,verbose);; 1148 }; 1149 return context ;; 1150}; 1151 ; 1152 ; 1153 ; 1154////////////////////////////////////////////////////////////////////////////////; 1155/// Generate a new dataset containing the specified variables with events sampled from our distribution.; 1156/// Generate the specified number of events or expectedEvents() if not specified.; 1157/// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; 1158/// constant and not be used for event generation.; 1159/// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg() to change behaviour of generate().; 1160/// \return RooDataSet *, owned by caller.; 1161///; 1162/// Any variables of this PDF that are not in whatVars will use their; 1163/// current values and be treated as fixed parameters. Returns zero; 1164/// in case of an error.; 1165///; 1166/// <table>; 1167/// <tr><th> Type of CmdArg <th> Effect on generate; 1168/// <tr><td> `Name(const char* name)` <td> Name of the output dataset; 1169/// <tr><td> `Verbose(bool flag)` <td> Print informational messages during event generation; 1170/// <tr><td> `NumEvents(int nevt)` <td> Generate specified number of events; 1171/// <tr><td> `Extended()` <td> If no number of events to be generated is given,; 1172/// use expected number of events from extended likelihood term.; 1173/// This evidently only works f",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:56844,Modifiability,variab,variables,56844,"4 if ( (autoBinned && isBinnedDistribution(vars)) || ( binnedTag && strlen(binnedTag) && (getAttribute(binnedTag)||string(binnedTag)==""*""))) {; 1145 context = binnedGenContext(vars,verbose) ;; 1146 } else {; 1147 context= genContext(vars,nullptr,nullptr,verbose);; 1148 }; 1149 return context ;; 1150}; 1151 ; 1152 ; 1153 ; 1154////////////////////////////////////////////////////////////////////////////////; 1155/// Generate a new dataset containing the specified variables with events sampled from our distribution.; 1156/// Generate the specified number of events or expectedEvents() if not specified.; 1157/// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; 1158/// constant and not be used for event generation.; 1159/// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg() to change behaviour of generate().; 1160/// \return RooDataSet *, owned by caller.; 1161///; 1162/// Any variables of this PDF that are not in whatVars will use their; 1163/// current values and be treated as fixed parameters. Returns zero; 1164/// in case of an error.; 1165///; 1166/// <table>; 1167/// <tr><th> Type of CmdArg <th> Effect on generate; 1168/// <tr><td> `Name(const char* name)` <td> Name of the output dataset; 1169/// <tr><td> `Verbose(bool flag)` <td> Print informational messages during event generation; 1170/// <tr><td> `NumEvents(int nevt)` <td> Generate specified number of events; 1171/// <tr><td> `Extended()` <td> If no number of events to be generated is given,; 1172/// use expected number of events from extended likelihood term.; 1173/// This evidently only works for extended PDFs.; 1174/// <tr><td> `GenBinned(const char* tag)` <td> Use binned generation for all component pdfs that have 'setAttribute(tag)' set; 1175/// <tr><td> `AutoBinned(bool flag)` <td> Automatically deploy binned generation for binned distributions (e.g. RooHistPdf, sums and products of; 1176/// RooHistPdfs etc); 1177/// \note Datasets that are",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:57474,Modifiability,extend,extended,57474,"////////////////////////////////////////////////; 1155/// Generate a new dataset containing the specified variables with events sampled from our distribution.; 1156/// Generate the specified number of events or expectedEvents() if not specified.; 1157/// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; 1158/// constant and not be used for event generation.; 1159/// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg() to change behaviour of generate().; 1160/// \return RooDataSet *, owned by caller.; 1161///; 1162/// Any variables of this PDF that are not in whatVars will use their; 1163/// current values and be treated as fixed parameters. Returns zero; 1164/// in case of an error.; 1165///; 1166/// <table>; 1167/// <tr><th> Type of CmdArg <th> Effect on generate; 1168/// <tr><td> `Name(const char* name)` <td> Name of the output dataset; 1169/// <tr><td> `Verbose(bool flag)` <td> Print informational messages during event generation; 1170/// <tr><td> `NumEvents(int nevt)` <td> Generate specified number of events; 1171/// <tr><td> `Extended()` <td> If no number of events to be generated is given,; 1172/// use expected number of events from extended likelihood term.; 1173/// This evidently only works for extended PDFs.; 1174/// <tr><td> `GenBinned(const char* tag)` <td> Use binned generation for all component pdfs that have 'setAttribute(tag)' set; 1175/// <tr><td> `AutoBinned(bool flag)` <td> Automatically deploy binned generation for binned distributions (e.g. RooHistPdf, sums and products of; 1176/// RooHistPdfs etc); 1177/// \note Datasets that are generated in binned mode are returned as weighted unbinned datasets. This means that; 1178/// for each bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content.; 1179///; 1180///; 1181/// <tr><td> `AllBinned()` <td> As above, but for all components.; 1182/// \note The notion of components is only meanin",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:57539,Modifiability,extend,extended,57539,"s Choose variables in which to generate events. Variables not listed here will remain; 1158/// constant and not be used for event generation.; 1159/// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg() to change behaviour of generate().; 1160/// \return RooDataSet *, owned by caller.; 1161///; 1162/// Any variables of this PDF that are not in whatVars will use their; 1163/// current values and be treated as fixed parameters. Returns zero; 1164/// in case of an error.; 1165///; 1166/// <table>; 1167/// <tr><th> Type of CmdArg <th> Effect on generate; 1168/// <tr><td> `Name(const char* name)` <td> Name of the output dataset; 1169/// <tr><td> `Verbose(bool flag)` <td> Print informational messages during event generation; 1170/// <tr><td> `NumEvents(int nevt)` <td> Generate specified number of events; 1171/// <tr><td> `Extended()` <td> If no number of events to be generated is given,; 1172/// use expected number of events from extended likelihood term.; 1173/// This evidently only works for extended PDFs.; 1174/// <tr><td> `GenBinned(const char* tag)` <td> Use binned generation for all component pdfs that have 'setAttribute(tag)' set; 1175/// <tr><td> `AutoBinned(bool flag)` <td> Automatically deploy binned generation for binned distributions (e.g. RooHistPdf, sums and products of; 1176/// RooHistPdfs etc); 1177/// \note Datasets that are generated in binned mode are returned as weighted unbinned datasets. This means that; 1178/// for each bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content.; 1179///; 1180///; 1181/// <tr><td> `AllBinned()` <td> As above, but for all components.; 1182/// \note The notion of components is only meaningful for simultaneous PDFs; 1183/// as binned generation is always executed at the top-level node for a regular; 1184/// PDF, so for those it only mattes that the top-level node is tagged.; 1185///; 1186/// <tr><td> ProtoData(const RooDataSet& data, bool randOrder); 1187/",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:59037,Modifiability,variab,variables,59037,"bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content.; 1179///; 1180///; 1181/// <tr><td> `AllBinned()` <td> As above, but for all components.; 1182/// \note The notion of components is only meaningful for simultaneous PDFs; 1183/// as binned generation is always executed at the top-level node for a regular; 1184/// PDF, so for those it only mattes that the top-level node is tagged.; 1185///; 1186/// <tr><td> ProtoData(const RooDataSet& data, bool randOrder); 1187/// <td> Use specified dataset as prototype dataset. If randOrder in ProtoData() is set to true,; 1188/// the order of the events in the dataset will be read in a random order if the requested; 1189/// number of events to be generated does not match the number of events in the prototype dataset.; 1190/// \note If ProtoData() is used, the specified existing dataset as a prototype: the new dataset will contain; 1191/// the same number of events as the prototype (unless otherwise specified), and any prototype variables not in; 1192/// whatVars will be copied into the new dataset for each generated event and also used to set our PDF parameters.; 1193/// The user can specify a number of events to generate that will override the default. The result is a; 1194/// copy of the prototype dataset with only variables in whatVars randomized. Variables in whatVars that; 1195/// are not in the prototype will be added as new columns to the generated dataset.; 1196///; 1197/// </table>; 1198///; 1199/// #### Accessing the underlying event generator; 1200/// Depending on the fit model (if it is difficult to sample), it may be necessary to change generator settings.; 1201/// For the default generator (RooFoamGenerator), the number of samples or cells could be increased by e.g. using; 1202/// myPdf->specialGeneratorConfig()->getConfigSection(""RooFoamGenerator"").setRealValue(""nSample"",1e4);; 1203///; 1204/// The foam generator e.g. has the following config options:; 12",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:59332,Modifiability,variab,variables,59332,"lways executed at the top-level node for a regular; 1184/// PDF, so for those it only mattes that the top-level node is tagged.; 1185///; 1186/// <tr><td> ProtoData(const RooDataSet& data, bool randOrder); 1187/// <td> Use specified dataset as prototype dataset. If randOrder in ProtoData() is set to true,; 1188/// the order of the events in the dataset will be read in a random order if the requested; 1189/// number of events to be generated does not match the number of events in the prototype dataset.; 1190/// \note If ProtoData() is used, the specified existing dataset as a prototype: the new dataset will contain; 1191/// the same number of events as the prototype (unless otherwise specified), and any prototype variables not in; 1192/// whatVars will be copied into the new dataset for each generated event and also used to set our PDF parameters.; 1193/// The user can specify a number of events to generate that will override the default. The result is a; 1194/// copy of the prototype dataset with only variables in whatVars randomized. Variables in whatVars that; 1195/// are not in the prototype will be added as new columns to the generated dataset.; 1196///; 1197/// </table>; 1198///; 1199/// #### Accessing the underlying event generator; 1200/// Depending on the fit model (if it is difficult to sample), it may be necessary to change generator settings.; 1201/// For the default generator (RooFoamGenerator), the number of samples or cells could be increased by e.g. using; 1202/// myPdf->specialGeneratorConfig()->getConfigSection(""RooFoamGenerator"").setRealValue(""nSample"",1e4);; 1203///; 1204/// The foam generator e.g. has the following config options:; 1205/// - nCell[123N]D; 1206/// - nSample; 1207/// - chatLevel; 1208/// \see rf902_numgenconfig.C; 1209 ; 1210RooFit::OwningPtr<RooDataSet> RooAbsPdf::generate(const RooArgSet& whatVars, const RooCmdArg& arg1,const RooCmdArg& arg2,; 1211 const RooCmdArg& arg3,const RooCmdArg& arg4, const RooCmdArg& arg5,const RooCmdArg&",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:59978,Modifiability,config,config,59978,"y prototype variables not in; 1192/// whatVars will be copied into the new dataset for each generated event and also used to set our PDF parameters.; 1193/// The user can specify a number of events to generate that will override the default. The result is a; 1194/// copy of the prototype dataset with only variables in whatVars randomized. Variables in whatVars that; 1195/// are not in the prototype will be added as new columns to the generated dataset.; 1196///; 1197/// </table>; 1198///; 1199/// #### Accessing the underlying event generator; 1200/// Depending on the fit model (if it is difficult to sample), it may be necessary to change generator settings.; 1201/// For the default generator (RooFoamGenerator), the number of samples or cells could be increased by e.g. using; 1202/// myPdf->specialGeneratorConfig()->getConfigSection(""RooFoamGenerator"").setRealValue(""nSample"",1e4);; 1203///; 1204/// The foam generator e.g. has the following config options:; 1205/// - nCell[123N]D; 1206/// - nSample; 1207/// - chatLevel; 1208/// \see rf902_numgenconfig.C; 1209 ; 1210RooFit::OwningPtr<RooDataSet> RooAbsPdf::generate(const RooArgSet& whatVars, const RooCmdArg& arg1,const RooCmdArg& arg2,; 1211 const RooCmdArg& arg3,const RooCmdArg& arg4, const RooCmdArg& arg5,const RooCmdArg& arg6); 1212{; 1213 // Select the pdf-specific commands; 1214 RooCmdConfig pc(""RooAbsPdf::generate("" + std::string(GetName()) + "")"");; 1215 pc.defineObject(""proto"",""PrototypeData"",0,nullptr) ;; 1216 pc.defineString(""dsetName"",""Name"",0,"""") ;; 1217 pc.defineInt(""randProto"",""PrototypeData"",0,0) ;; 1218 pc.defineInt(""resampleProto"",""PrototypeData"",1,0) ;; 1219 pc.defineInt(""verbose"",""Verbose"",0,0) ;; 1220 pc.defineInt(""extended"",""Extended"",0,0) ;; 1221 pc.defineInt(""nEvents"",""NumEvents"",0,0) ;; 1222 pc.defineInt(""autoBinned"",""AutoBinned"",0,1) ;; 1223 pc.defineInt(""expectedData"",""ExpectedData"",0,0) ;; 1224 pc.defineDouble(""nEventsD"",""NumEventsD"",0,-1.) ;; 1225 pc.defineString(""binnedTag"",""GenBinned"",0,"""")",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:60735,Modifiability,extend,extended,60735,"e number of samples or cells could be increased by e.g. using; 1202/// myPdf->specialGeneratorConfig()->getConfigSection(""RooFoamGenerator"").setRealValue(""nSample"",1e4);; 1203///; 1204/// The foam generator e.g. has the following config options:; 1205/// - nCell[123N]D; 1206/// - nSample; 1207/// - chatLevel; 1208/// \see rf902_numgenconfig.C; 1209 ; 1210RooFit::OwningPtr<RooDataSet> RooAbsPdf::generate(const RooArgSet& whatVars, const RooCmdArg& arg1,const RooCmdArg& arg2,; 1211 const RooCmdArg& arg3,const RooCmdArg& arg4, const RooCmdArg& arg5,const RooCmdArg& arg6); 1212{; 1213 // Select the pdf-specific commands; 1214 RooCmdConfig pc(""RooAbsPdf::generate("" + std::string(GetName()) + "")"");; 1215 pc.defineObject(""proto"",""PrototypeData"",0,nullptr) ;; 1216 pc.defineString(""dsetName"",""Name"",0,"""") ;; 1217 pc.defineInt(""randProto"",""PrototypeData"",0,0) ;; 1218 pc.defineInt(""resampleProto"",""PrototypeData"",1,0) ;; 1219 pc.defineInt(""verbose"",""Verbose"",0,0) ;; 1220 pc.defineInt(""extended"",""Extended"",0,0) ;; 1221 pc.defineInt(""nEvents"",""NumEvents"",0,0) ;; 1222 pc.defineInt(""autoBinned"",""AutoBinned"",0,1) ;; 1223 pc.defineInt(""expectedData"",""ExpectedData"",0,0) ;; 1224 pc.defineDouble(""nEventsD"",""NumEventsD"",0,-1.) ;; 1225 pc.defineString(""binnedTag"",""GenBinned"",0,"""") ;; 1226 pc.defineMutex(""GenBinned"",""ProtoData"") ;; 1227 pc.defineMutex(""Extended"", ""NumEvents"");; 1228 ; 1229 // Process and check varargs; 1230 pc.process(arg1,arg2,arg3,arg4,arg5,arg6) ;; 1231 if (!pc.ok(true)) {; 1232 return nullptr;; 1233 }; 1234 ; 1235 // Decode command line arguments; 1236 RooDataSet* protoData = static_cast<RooDataSet*>(pc.getObject(""proto"",nullptr)) ;; 1237 const char* dsetName = pc.getString(""dsetName"") ;; 1238 bool verbose = pc.getInt(""verbose"") ;; 1239 bool randProto = pc.getInt(""randProto"") ;; 1240 bool resampleProto = pc.getInt(""resampleProto"") ;; 1241 bool extended = pc.getInt(""extended"") ;; 1242 bool autoBinned = pc.getInt(""autoBinned"") ;; 1243 const char* binnedTag = pc.getString(",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:61620,Modifiability,extend,extended,61620," ;; 1218 pc.defineInt(""resampleProto"",""PrototypeData"",1,0) ;; 1219 pc.defineInt(""verbose"",""Verbose"",0,0) ;; 1220 pc.defineInt(""extended"",""Extended"",0,0) ;; 1221 pc.defineInt(""nEvents"",""NumEvents"",0,0) ;; 1222 pc.defineInt(""autoBinned"",""AutoBinned"",0,1) ;; 1223 pc.defineInt(""expectedData"",""ExpectedData"",0,0) ;; 1224 pc.defineDouble(""nEventsD"",""NumEventsD"",0,-1.) ;; 1225 pc.defineString(""binnedTag"",""GenBinned"",0,"""") ;; 1226 pc.defineMutex(""GenBinned"",""ProtoData"") ;; 1227 pc.defineMutex(""Extended"", ""NumEvents"");; 1228 ; 1229 // Process and check varargs; 1230 pc.process(arg1,arg2,arg3,arg4,arg5,arg6) ;; 1231 if (!pc.ok(true)) {; 1232 return nullptr;; 1233 }; 1234 ; 1235 // Decode command line arguments; 1236 RooDataSet* protoData = static_cast<RooDataSet*>(pc.getObject(""proto"",nullptr)) ;; 1237 const char* dsetName = pc.getString(""dsetName"") ;; 1238 bool verbose = pc.getInt(""verbose"") ;; 1239 bool randProto = pc.getInt(""randProto"") ;; 1240 bool resampleProto = pc.getInt(""resampleProto"") ;; 1241 bool extended = pc.getInt(""extended"") ;; 1242 bool autoBinned = pc.getInt(""autoBinned"") ;; 1243 const char* binnedTag = pc.getString(""binnedTag"") ;; 1244 Int_t nEventsI = pc.getInt(""nEvents"") ;; 1245 double nEventsD = pc.getInt(""nEventsD"") ;; 1246 //bool verbose = pc.getInt(""verbose"") ;; 1247 bool expectedData = pc.getInt(""expectedData"") ;; 1248 ; 1249 double nEvents = (nEventsD>0) ? nEventsD : double(nEventsI);; 1250 ; 1251 // Force binned mode for expected data mode; 1252 if (expectedData) {; 1253 binnedTag=""*"" ;; 1254 }; 1255 ; 1256 if (extended) {; 1257 if (nEvents == 0) nEvents = expectedEvents(&whatVars);; 1258 } else if (nEvents==0) {; 1259 cxcoutI(Generation) << ""No number of events specified , number of events generated is ""; 1260 << GetName() << ""::expectedEvents() = "" << expectedEvents(&whatVars)<< endl ;; 1261 }; 1262 ; 1263 if (extended && protoData && !randProto) {; 1264 cxcoutI(Generation) << ""WARNING Using generator option Extended() (Poisson distribution of #even",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:61642,Modifiability,extend,extended,61642,"ta"",1,0) ;; 1219 pc.defineInt(""verbose"",""Verbose"",0,0) ;; 1220 pc.defineInt(""extended"",""Extended"",0,0) ;; 1221 pc.defineInt(""nEvents"",""NumEvents"",0,0) ;; 1222 pc.defineInt(""autoBinned"",""AutoBinned"",0,1) ;; 1223 pc.defineInt(""expectedData"",""ExpectedData"",0,0) ;; 1224 pc.defineDouble(""nEventsD"",""NumEventsD"",0,-1.) ;; 1225 pc.defineString(""binnedTag"",""GenBinned"",0,"""") ;; 1226 pc.defineMutex(""GenBinned"",""ProtoData"") ;; 1227 pc.defineMutex(""Extended"", ""NumEvents"");; 1228 ; 1229 // Process and check varargs; 1230 pc.process(arg1,arg2,arg3,arg4,arg5,arg6) ;; 1231 if (!pc.ok(true)) {; 1232 return nullptr;; 1233 }; 1234 ; 1235 // Decode command line arguments; 1236 RooDataSet* protoData = static_cast<RooDataSet*>(pc.getObject(""proto"",nullptr)) ;; 1237 const char* dsetName = pc.getString(""dsetName"") ;; 1238 bool verbose = pc.getInt(""verbose"") ;; 1239 bool randProto = pc.getInt(""randProto"") ;; 1240 bool resampleProto = pc.getInt(""resampleProto"") ;; 1241 bool extended = pc.getInt(""extended"") ;; 1242 bool autoBinned = pc.getInt(""autoBinned"") ;; 1243 const char* binnedTag = pc.getString(""binnedTag"") ;; 1244 Int_t nEventsI = pc.getInt(""nEvents"") ;; 1245 double nEventsD = pc.getInt(""nEventsD"") ;; 1246 //bool verbose = pc.getInt(""verbose"") ;; 1247 bool expectedData = pc.getInt(""expectedData"") ;; 1248 ; 1249 double nEvents = (nEventsD>0) ? nEventsD : double(nEventsI);; 1250 ; 1251 // Force binned mode for expected data mode; 1252 if (expectedData) {; 1253 binnedTag=""*"" ;; 1254 }; 1255 ; 1256 if (extended) {; 1257 if (nEvents == 0) nEvents = expectedEvents(&whatVars);; 1258 } else if (nEvents==0) {; 1259 cxcoutI(Generation) << ""No number of events specified , number of events generated is ""; 1260 << GetName() << ""::expectedEvents() = "" << expectedEvents(&whatVars)<< endl ;; 1261 }; 1262 ; 1263 if (extended && protoData && !randProto) {; 1264 cxcoutI(Generation) << ""WARNING Using generator option Extended() (Poisson distribution of #events) together ""; 1265 << ""with a prototype dataset",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:62161,Modifiability,extend,extended,62161,"ooDataSet* protoData = static_cast<RooDataSet*>(pc.getObject(""proto"",nullptr)) ;; 1237 const char* dsetName = pc.getString(""dsetName"") ;; 1238 bool verbose = pc.getInt(""verbose"") ;; 1239 bool randProto = pc.getInt(""randProto"") ;; 1240 bool resampleProto = pc.getInt(""resampleProto"") ;; 1241 bool extended = pc.getInt(""extended"") ;; 1242 bool autoBinned = pc.getInt(""autoBinned"") ;; 1243 const char* binnedTag = pc.getString(""binnedTag"") ;; 1244 Int_t nEventsI = pc.getInt(""nEvents"") ;; 1245 double nEventsD = pc.getInt(""nEventsD"") ;; 1246 //bool verbose = pc.getInt(""verbose"") ;; 1247 bool expectedData = pc.getInt(""expectedData"") ;; 1248 ; 1249 double nEvents = (nEventsD>0) ? nEventsD : double(nEventsI);; 1250 ; 1251 // Force binned mode for expected data mode; 1252 if (expectedData) {; 1253 binnedTag=""*"" ;; 1254 }; 1255 ; 1256 if (extended) {; 1257 if (nEvents == 0) nEvents = expectedEvents(&whatVars);; 1258 } else if (nEvents==0) {; 1259 cxcoutI(Generation) << ""No number of events specified , number of events generated is ""; 1260 << GetName() << ""::expectedEvents() = "" << expectedEvents(&whatVars)<< endl ;; 1261 }; 1262 ; 1263 if (extended && protoData && !randProto) {; 1264 cxcoutI(Generation) << ""WARNING Using generator option Extended() (Poisson distribution of #events) together ""; 1265 << ""with a prototype dataset implies incomplete sampling or oversampling of proto data. ""; 1266 << ""Set randomize flag in ProtoData() option to randomize prototype dataset order and thus ""; 1267 << ""to randomize the set of over/undersampled prototype events for each generation cycle."" << endl ;; 1268 }; 1269 ; 1270 ; 1271 // Forward to appropriate implementation; 1272 std::unique_ptr<RooDataSet> data;; 1273 if (protoData) {; 1274 data = std::unique_ptr<RooDataSet>{generate(whatVars,*protoData,Int_t(nEvents),verbose,randProto,resampleProto)};; 1275 } else {; 1276 data = std::unique_ptr<RooDataSet>{generate(whatVars,nEvents,verbose,autoBinned,binnedTag,expectedData, extended)};; 1277 }; 1",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:62468,Modifiability,extend,extended,62468,"ooDataSet* protoData = static_cast<RooDataSet*>(pc.getObject(""proto"",nullptr)) ;; 1237 const char* dsetName = pc.getString(""dsetName"") ;; 1238 bool verbose = pc.getInt(""verbose"") ;; 1239 bool randProto = pc.getInt(""randProto"") ;; 1240 bool resampleProto = pc.getInt(""resampleProto"") ;; 1241 bool extended = pc.getInt(""extended"") ;; 1242 bool autoBinned = pc.getInt(""autoBinned"") ;; 1243 const char* binnedTag = pc.getString(""binnedTag"") ;; 1244 Int_t nEventsI = pc.getInt(""nEvents"") ;; 1245 double nEventsD = pc.getInt(""nEventsD"") ;; 1246 //bool verbose = pc.getInt(""verbose"") ;; 1247 bool expectedData = pc.getInt(""expectedData"") ;; 1248 ; 1249 double nEvents = (nEventsD>0) ? nEventsD : double(nEventsI);; 1250 ; 1251 // Force binned mode for expected data mode; 1252 if (expectedData) {; 1253 binnedTag=""*"" ;; 1254 }; 1255 ; 1256 if (extended) {; 1257 if (nEvents == 0) nEvents = expectedEvents(&whatVars);; 1258 } else if (nEvents==0) {; 1259 cxcoutI(Generation) << ""No number of events specified , number of events generated is ""; 1260 << GetName() << ""::expectedEvents() = "" << expectedEvents(&whatVars)<< endl ;; 1261 }; 1262 ; 1263 if (extended && protoData && !randProto) {; 1264 cxcoutI(Generation) << ""WARNING Using generator option Extended() (Poisson distribution of #events) together ""; 1265 << ""with a prototype dataset implies incomplete sampling or oversampling of proto data. ""; 1266 << ""Set randomize flag in ProtoData() option to randomize prototype dataset order and thus ""; 1267 << ""to randomize the set of over/undersampled prototype events for each generation cycle."" << endl ;; 1268 }; 1269 ; 1270 ; 1271 // Forward to appropriate implementation; 1272 std::unique_ptr<RooDataSet> data;; 1273 if (protoData) {; 1274 data = std::unique_ptr<RooDataSet>{generate(whatVars,*protoData,Int_t(nEvents),verbose,randProto,resampleProto)};; 1275 } else {; 1276 data = std::unique_ptr<RooDataSet>{generate(whatVars,nEvents,verbose,autoBinned,binnedTag,expectedData, extended)};; 1277 }; 1",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:63303,Modifiability,extend,extended,63303,"pecified , number of events generated is ""; 1260 << GetName() << ""::expectedEvents() = "" << expectedEvents(&whatVars)<< endl ;; 1261 }; 1262 ; 1263 if (extended && protoData && !randProto) {; 1264 cxcoutI(Generation) << ""WARNING Using generator option Extended() (Poisson distribution of #events) together ""; 1265 << ""with a prototype dataset implies incomplete sampling or oversampling of proto data. ""; 1266 << ""Set randomize flag in ProtoData() option to randomize prototype dataset order and thus ""; 1267 << ""to randomize the set of over/undersampled prototype events for each generation cycle."" << endl ;; 1268 }; 1269 ; 1270 ; 1271 // Forward to appropriate implementation; 1272 std::unique_ptr<RooDataSet> data;; 1273 if (protoData) {; 1274 data = std::unique_ptr<RooDataSet>{generate(whatVars,*protoData,Int_t(nEvents),verbose,randProto,resampleProto)};; 1275 } else {; 1276 data = std::unique_ptr<RooDataSet>{generate(whatVars,nEvents,verbose,autoBinned,binnedTag,expectedData, extended)};; 1277 }; 1278 ; 1279 // Rename dataset to given name if supplied; 1280 if (dsetName && strlen(dsetName)>0) {; 1281 data->SetName(dsetName) ;; 1282 }; 1283 ; 1284 return RooFit::makeOwningPtr(std::move(data));; 1285}; 1286 ; 1287 ; 1288 ; 1289 ; 1290 ; 1291 ; 1292////////////////////////////////////////////////////////////////////////////////; 1293/// \note This method does not perform any generation. To generate according to generations specification call RooAbsPdf::generate(RooAbsPdf::GenSpec&) const; 1294///; 1295/// Details copied from RooAbsPdf::generate():; 1296/// --------------------------------------------; 1297/// \copydetails RooAbsPdf::generate(const RooArgSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&); 1298 ; 1299RooAbsPdf::GenSpec* RooAbsPdf::prepareMultiGen(const RooArgSet &whatVars,; 1300 const RooCmdArg& arg1,const RooCmdArg& arg2,; 1301 const RooCmdArg& arg3,const RooCmdArg& arg4,; 1302 const RooCmdArg& arg5,c",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:64757,Modifiability,extend,extended,64757,"call RooAbsPdf::generate(RooAbsPdf::GenSpec&) const; 1294///; 1295/// Details copied from RooAbsPdf::generate():; 1296/// --------------------------------------------; 1297/// \copydetails RooAbsPdf::generate(const RooArgSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&); 1298 ; 1299RooAbsPdf::GenSpec* RooAbsPdf::prepareMultiGen(const RooArgSet &whatVars,; 1300 const RooCmdArg& arg1,const RooCmdArg& arg2,; 1301 const RooCmdArg& arg3,const RooCmdArg& arg4,; 1302 const RooCmdArg& arg5,const RooCmdArg& arg6); 1303{; 1304 ; 1305 // Select the pdf-specific commands; 1306 RooCmdConfig pc(""RooAbsPdf::generate("" + std::string(GetName()) + "")"");; 1307 pc.defineObject(""proto"",""PrototypeData"",0,nullptr) ;; 1308 pc.defineString(""dsetName"",""Name"",0,"""") ;; 1309 pc.defineInt(""randProto"",""PrototypeData"",0,0) ;; 1310 pc.defineInt(""resampleProto"",""PrototypeData"",1,0) ;; 1311 pc.defineInt(""verbose"",""Verbose"",0,0) ;; 1312 pc.defineInt(""extended"",""Extended"",0,0) ;; 1313 pc.defineInt(""nEvents"",""NumEvents"",0,0) ;; 1314 pc.defineInt(""autoBinned"",""AutoBinned"",0,1) ;; 1315 pc.defineString(""binnedTag"",""GenBinned"",0,"""") ;; 1316 pc.defineMutex(""GenBinned"",""ProtoData"") ;; 1317 ; 1318 ; 1319 // Process and check varargs; 1320 pc.process(arg1,arg2,arg3,arg4,arg5,arg6) ;; 1321 if (!pc.ok(true)) {; 1322 return nullptr ;; 1323 }; 1324 ; 1325 // Decode command line arguments; 1326 RooDataSet* protoData = static_cast<RooDataSet*>(pc.getObject(""proto"",nullptr)) ;; 1327 const char* dsetName = pc.getString(""dsetName"") ;; 1328 Int_t nEvents = pc.getInt(""nEvents"") ;; 1329 bool verbose = pc.getInt(""verbose"") ;; 1330 bool randProto = pc.getInt(""randProto"") ;; 1331 bool resampleProto = pc.getInt(""resampleProto"") ;; 1332 bool extended = pc.getInt(""extended"") ;; 1333 bool autoBinned = pc.getInt(""autoBinned"") ;; 1334 const char* binnedTag = pc.getString(""binnedTag"") ;; 1335 ; 1336 RooAbsGenContext* cx = autoGenContext(whatVars,protoData,nullptr,verbose,auto",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:65537,Modifiability,extend,extended,65537,"tr) ;; 1308 pc.defineString(""dsetName"",""Name"",0,"""") ;; 1309 pc.defineInt(""randProto"",""PrototypeData"",0,0) ;; 1310 pc.defineInt(""resampleProto"",""PrototypeData"",1,0) ;; 1311 pc.defineInt(""verbose"",""Verbose"",0,0) ;; 1312 pc.defineInt(""extended"",""Extended"",0,0) ;; 1313 pc.defineInt(""nEvents"",""NumEvents"",0,0) ;; 1314 pc.defineInt(""autoBinned"",""AutoBinned"",0,1) ;; 1315 pc.defineString(""binnedTag"",""GenBinned"",0,"""") ;; 1316 pc.defineMutex(""GenBinned"",""ProtoData"") ;; 1317 ; 1318 ; 1319 // Process and check varargs; 1320 pc.process(arg1,arg2,arg3,arg4,arg5,arg6) ;; 1321 if (!pc.ok(true)) {; 1322 return nullptr ;; 1323 }; 1324 ; 1325 // Decode command line arguments; 1326 RooDataSet* protoData = static_cast<RooDataSet*>(pc.getObject(""proto"",nullptr)) ;; 1327 const char* dsetName = pc.getString(""dsetName"") ;; 1328 Int_t nEvents = pc.getInt(""nEvents"") ;; 1329 bool verbose = pc.getInt(""verbose"") ;; 1330 bool randProto = pc.getInt(""randProto"") ;; 1331 bool resampleProto = pc.getInt(""resampleProto"") ;; 1332 bool extended = pc.getInt(""extended"") ;; 1333 bool autoBinned = pc.getInt(""autoBinned"") ;; 1334 const char* binnedTag = pc.getString(""binnedTag"") ;; 1335 ; 1336 RooAbsGenContext* cx = autoGenContext(whatVars,protoData,nullptr,verbose,autoBinned,binnedTag) ;; 1337 ; 1338 return new GenSpec(cx,whatVars,protoData,nEvents,extended,randProto,resampleProto,dsetName) ;; 1339}; 1340 ; 1341 ; 1342////////////////////////////////////////////////////////////////////////////////; 1343/// If many identical generation requests; 1344/// are needed, e.g. in toy MC studies, it is more efficient to use the prepareMultiGen()/generate(); 1345/// combination than calling the standard generate() multiple times as; 1346/// initialization overhead is only incurred once.; 1347 ; 1348RooFit::OwningPtr<RooDataSet> RooAbsPdf::generate(RooAbsPdf::GenSpec& spec) const; 1349{; 1350 //Int_t nEvt = spec._extended ? RooRandom::randomGenerator()->Poisson(spec._nGen) : spec._nGen ;; 1351 //Int_t nEvt = spec._extend",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:65559,Modifiability,extend,extended,65559,") ;; 1309 pc.defineInt(""randProto"",""PrototypeData"",0,0) ;; 1310 pc.defineInt(""resampleProto"",""PrototypeData"",1,0) ;; 1311 pc.defineInt(""verbose"",""Verbose"",0,0) ;; 1312 pc.defineInt(""extended"",""Extended"",0,0) ;; 1313 pc.defineInt(""nEvents"",""NumEvents"",0,0) ;; 1314 pc.defineInt(""autoBinned"",""AutoBinned"",0,1) ;; 1315 pc.defineString(""binnedTag"",""GenBinned"",0,"""") ;; 1316 pc.defineMutex(""GenBinned"",""ProtoData"") ;; 1317 ; 1318 ; 1319 // Process and check varargs; 1320 pc.process(arg1,arg2,arg3,arg4,arg5,arg6) ;; 1321 if (!pc.ok(true)) {; 1322 return nullptr ;; 1323 }; 1324 ; 1325 // Decode command line arguments; 1326 RooDataSet* protoData = static_cast<RooDataSet*>(pc.getObject(""proto"",nullptr)) ;; 1327 const char* dsetName = pc.getString(""dsetName"") ;; 1328 Int_t nEvents = pc.getInt(""nEvents"") ;; 1329 bool verbose = pc.getInt(""verbose"") ;; 1330 bool randProto = pc.getInt(""randProto"") ;; 1331 bool resampleProto = pc.getInt(""resampleProto"") ;; 1332 bool extended = pc.getInt(""extended"") ;; 1333 bool autoBinned = pc.getInt(""autoBinned"") ;; 1334 const char* binnedTag = pc.getString(""binnedTag"") ;; 1335 ; 1336 RooAbsGenContext* cx = autoGenContext(whatVars,protoData,nullptr,verbose,autoBinned,binnedTag) ;; 1337 ; 1338 return new GenSpec(cx,whatVars,protoData,nEvents,extended,randProto,resampleProto,dsetName) ;; 1339}; 1340 ; 1341 ; 1342////////////////////////////////////////////////////////////////////////////////; 1343/// If many identical generation requests; 1344/// are needed, e.g. in toy MC studies, it is more efficient to use the prepareMultiGen()/generate(); 1345/// combination than calling the standard generate() multiple times as; 1346/// initialization overhead is only incurred once.; 1347 ; 1348RooFit::OwningPtr<RooDataSet> RooAbsPdf::generate(RooAbsPdf::GenSpec& spec) const; 1349{; 1350 //Int_t nEvt = spec._extended ? RooRandom::randomGenerator()->Poisson(spec._nGen) : spec._nGen ;; 1351 //Int_t nEvt = spec._extended ? RooRandom::randomGenerator()->Poisson(spec._",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:65852,Modifiability,extend,extended,65852,",""AutoBinned"",0,1) ;; 1315 pc.defineString(""binnedTag"",""GenBinned"",0,"""") ;; 1316 pc.defineMutex(""GenBinned"",""ProtoData"") ;; 1317 ; 1318 ; 1319 // Process and check varargs; 1320 pc.process(arg1,arg2,arg3,arg4,arg5,arg6) ;; 1321 if (!pc.ok(true)) {; 1322 return nullptr ;; 1323 }; 1324 ; 1325 // Decode command line arguments; 1326 RooDataSet* protoData = static_cast<RooDataSet*>(pc.getObject(""proto"",nullptr)) ;; 1327 const char* dsetName = pc.getString(""dsetName"") ;; 1328 Int_t nEvents = pc.getInt(""nEvents"") ;; 1329 bool verbose = pc.getInt(""verbose"") ;; 1330 bool randProto = pc.getInt(""randProto"") ;; 1331 bool resampleProto = pc.getInt(""resampleProto"") ;; 1332 bool extended = pc.getInt(""extended"") ;; 1333 bool autoBinned = pc.getInt(""autoBinned"") ;; 1334 const char* binnedTag = pc.getString(""binnedTag"") ;; 1335 ; 1336 RooAbsGenContext* cx = autoGenContext(whatVars,protoData,nullptr,verbose,autoBinned,binnedTag) ;; 1337 ; 1338 return new GenSpec(cx,whatVars,protoData,nEvents,extended,randProto,resampleProto,dsetName) ;; 1339}; 1340 ; 1341 ; 1342////////////////////////////////////////////////////////////////////////////////; 1343/// If many identical generation requests; 1344/// are needed, e.g. in toy MC studies, it is more efficient to use the prepareMultiGen()/generate(); 1345/// combination than calling the standard generate() multiple times as; 1346/// initialization overhead is only incurred once.; 1347 ; 1348RooFit::OwningPtr<RooDataSet> RooAbsPdf::generate(RooAbsPdf::GenSpec& spec) const; 1349{; 1350 //Int_t nEvt = spec._extended ? RooRandom::randomGenerator()->Poisson(spec._nGen) : spec._nGen ;; 1351 //Int_t nEvt = spec._extended ? RooRandom::randomGenerator()->Poisson(spec._nGen==0?expectedEvents(spec._whatVars):spec._nGen) : spec._nGen ;; 1352 //Int_t nEvt = spec._nGen == 0 ? RooRandom::randomGenerator()->Poisson(expectedEvents(spec._whatVars)) : spec._nGen;; 1353 ; 1354 double nEvt = spec._nGen == 0 ? expectedEvents(spec._whatVars) : spec._nGen;; 1355 ; 135",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:67304,Modifiability,variab,variables,67304,"rate() multiple times as; 1346/// initialization overhead is only incurred once.; 1347 ; 1348RooFit::OwningPtr<RooDataSet> RooAbsPdf::generate(RooAbsPdf::GenSpec& spec) const; 1349{; 1350 //Int_t nEvt = spec._extended ? RooRandom::randomGenerator()->Poisson(spec._nGen) : spec._nGen ;; 1351 //Int_t nEvt = spec._extended ? RooRandom::randomGenerator()->Poisson(spec._nGen==0?expectedEvents(spec._whatVars):spec._nGen) : spec._nGen ;; 1352 //Int_t nEvt = spec._nGen == 0 ? RooRandom::randomGenerator()->Poisson(expectedEvents(spec._whatVars)) : spec._nGen;; 1353 ; 1354 double nEvt = spec._nGen == 0 ? expectedEvents(spec._whatVars) : spec._nGen;; 1355 ; 1356 std::unique_ptr<RooDataSet> ret{generate(*spec._genContext,spec._whatVars,spec._protoData, nEvt,false,spec._randProto,spec._resampleProto,; 1357 spec._init,spec._extended)};; 1358 spec._init = true ;; 1359 return RooFit::makeOwningPtr(std::move(ret));; 1360}; 1361 ; 1362 ; 1363 ; 1364 ; 1365 ; 1366////////////////////////////////////////////////////////////////////////////////; 1367/// Generate a new dataset containing the specified variables with; 1368/// events sampled from our distribution.; 1369///; 1370/// \param[in] whatVars Generate a dataset with the variables (and categories) in this set.; 1371/// Any variables of this PDF that are not in `whatVars` will use their; 1372/// current values and be treated as fixed parameters.; 1373/// \param[in] nEvents Generate the specified number of events or else try to use; 1374/// expectedEvents() if nEvents <= 0 (default).; 1375/// \param[in] verbose Show which generator strategies are being used.; 1376/// \param[in] autoBinned If original distribution is binned, return bin centers and randomise weights; 1377/// instead of generating single events.; 1378/// \param[in] binnedTag; 1379/// \param[in] expectedData Call setExpectedData on the genContext.; 1380/// \param[in] extended Randomise number of events generated according to Poisson(nEvents). Only useful; 1381/// if PDF is",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:67432,Modifiability,variab,variables,67432,"xtended ? RooRandom::randomGenerator()->Poisson(spec._nGen) : spec._nGen ;; 1351 //Int_t nEvt = spec._extended ? RooRandom::randomGenerator()->Poisson(spec._nGen==0?expectedEvents(spec._whatVars):spec._nGen) : spec._nGen ;; 1352 //Int_t nEvt = spec._nGen == 0 ? RooRandom::randomGenerator()->Poisson(expectedEvents(spec._whatVars)) : spec._nGen;; 1353 ; 1354 double nEvt = spec._nGen == 0 ? expectedEvents(spec._whatVars) : spec._nGen;; 1355 ; 1356 std::unique_ptr<RooDataSet> ret{generate(*spec._genContext,spec._whatVars,spec._protoData, nEvt,false,spec._randProto,spec._resampleProto,; 1357 spec._init,spec._extended)};; 1358 spec._init = true ;; 1359 return RooFit::makeOwningPtr(std::move(ret));; 1360}; 1361 ; 1362 ; 1363 ; 1364 ; 1365 ; 1366////////////////////////////////////////////////////////////////////////////////; 1367/// Generate a new dataset containing the specified variables with; 1368/// events sampled from our distribution.; 1369///; 1370/// \param[in] whatVars Generate a dataset with the variables (and categories) in this set.; 1371/// Any variables of this PDF that are not in `whatVars` will use their; 1372/// current values and be treated as fixed parameters.; 1373/// \param[in] nEvents Generate the specified number of events or else try to use; 1374/// expectedEvents() if nEvents <= 0 (default).; 1375/// \param[in] verbose Show which generator strategies are being used.; 1376/// \param[in] autoBinned If original distribution is binned, return bin centers and randomise weights; 1377/// instead of generating single events.; 1378/// \param[in] binnedTag; 1379/// \param[in] expectedData Call setExpectedData on the genContext.; 1380/// \param[in] extended Randomise number of events generated according to Poisson(nEvents). Only useful; 1381/// if PDF is extended.; 1382/// \return New dataset. Returns zero in case of an error. The caller takes ownership of the returned; 1383/// dataset.; 1384 ; 1385RooFit::OwningPtr<RooDataSet> RooAbsPdf::generate(const RooAr",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:67485,Modifiability,variab,variables,67485,"m::randomGenerator()->Poisson(spec._nGen==0?expectedEvents(spec._whatVars):spec._nGen) : spec._nGen ;; 1352 //Int_t nEvt = spec._nGen == 0 ? RooRandom::randomGenerator()->Poisson(expectedEvents(spec._whatVars)) : spec._nGen;; 1353 ; 1354 double nEvt = spec._nGen == 0 ? expectedEvents(spec._whatVars) : spec._nGen;; 1355 ; 1356 std::unique_ptr<RooDataSet> ret{generate(*spec._genContext,spec._whatVars,spec._protoData, nEvt,false,spec._randProto,spec._resampleProto,; 1357 spec._init,spec._extended)};; 1358 spec._init = true ;; 1359 return RooFit::makeOwningPtr(std::move(ret));; 1360}; 1361 ; 1362 ; 1363 ; 1364 ; 1365 ; 1366////////////////////////////////////////////////////////////////////////////////; 1367/// Generate a new dataset containing the specified variables with; 1368/// events sampled from our distribution.; 1369///; 1370/// \param[in] whatVars Generate a dataset with the variables (and categories) in this set.; 1371/// Any variables of this PDF that are not in `whatVars` will use their; 1372/// current values and be treated as fixed parameters.; 1373/// \param[in] nEvents Generate the specified number of events or else try to use; 1374/// expectedEvents() if nEvents <= 0 (default).; 1375/// \param[in] verbose Show which generator strategies are being used.; 1376/// \param[in] autoBinned If original distribution is binned, return bin centers and randomise weights; 1377/// instead of generating single events.; 1378/// \param[in] binnedTag; 1379/// \param[in] expectedData Call setExpectedData on the genContext.; 1380/// \param[in] extended Randomise number of events generated according to Poisson(nEvents). Only useful; 1381/// if PDF is extended.; 1382/// \return New dataset. Returns zero in case of an error. The caller takes ownership of the returned; 1383/// dataset.; 1384 ; 1385RooFit::OwningPtr<RooDataSet> RooAbsPdf::generate(const RooArgSet &whatVars, double nEvents, bool verbose, bool autoBinned, const char* binnedTag, bool expectedData, bool extended) co",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:68102,Modifiability,extend,extended,68102,"61 ; 1362 ; 1363 ; 1364 ; 1365 ; 1366////////////////////////////////////////////////////////////////////////////////; 1367/// Generate a new dataset containing the specified variables with; 1368/// events sampled from our distribution.; 1369///; 1370/// \param[in] whatVars Generate a dataset with the variables (and categories) in this set.; 1371/// Any variables of this PDF that are not in `whatVars` will use their; 1372/// current values and be treated as fixed parameters.; 1373/// \param[in] nEvents Generate the specified number of events or else try to use; 1374/// expectedEvents() if nEvents <= 0 (default).; 1375/// \param[in] verbose Show which generator strategies are being used.; 1376/// \param[in] autoBinned If original distribution is binned, return bin centers and randomise weights; 1377/// instead of generating single events.; 1378/// \param[in] binnedTag; 1379/// \param[in] expectedData Call setExpectedData on the genContext.; 1380/// \param[in] extended Randomise number of events generated according to Poisson(nEvents). Only useful; 1381/// if PDF is extended.; 1382/// \return New dataset. Returns zero in case of an error. The caller takes ownership of the returned; 1383/// dataset.; 1384 ; 1385RooFit::OwningPtr<RooDataSet> RooAbsPdf::generate(const RooArgSet &whatVars, double nEvents, bool verbose, bool autoBinned, const char* binnedTag, bool expectedData, bool extended) const; 1386{; 1387 if (nEvents==0 && extendMode()==CanNotBeExtended) {; 1388 return RooFit::makeOwningPtr(std::make_unique<RooDataSet>(""emptyData"",""emptyData"",whatVars));; 1389 }; 1390 ; 1391 // Request for binned generation; 1392 std::unique_ptr<RooAbsGenContext> context{autoGenContext(whatVars,nullptr,nullptr,verbose,autoBinned,binnedTag)};; 1393 if (expectedData) {; 1394 context->setExpectedData(true) ;; 1395 }; 1396 ; 1397 std::unique_ptr<RooDataSet> generated;; 1398 if(nullptr != context && context->isValid()) {; 1399 generated = std::unique_ptr<RooDataSet>{context->generate(nEven",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:68210,Modifiability,extend,extended,68210,"////////////////////////////////////////////////; 1367/// Generate a new dataset containing the specified variables with; 1368/// events sampled from our distribution.; 1369///; 1370/// \param[in] whatVars Generate a dataset with the variables (and categories) in this set.; 1371/// Any variables of this PDF that are not in `whatVars` will use their; 1372/// current values and be treated as fixed parameters.; 1373/// \param[in] nEvents Generate the specified number of events or else try to use; 1374/// expectedEvents() if nEvents <= 0 (default).; 1375/// \param[in] verbose Show which generator strategies are being used.; 1376/// \param[in] autoBinned If original distribution is binned, return bin centers and randomise weights; 1377/// instead of generating single events.; 1378/// \param[in] binnedTag; 1379/// \param[in] expectedData Call setExpectedData on the genContext.; 1380/// \param[in] extended Randomise number of events generated according to Poisson(nEvents). Only useful; 1381/// if PDF is extended.; 1382/// \return New dataset. Returns zero in case of an error. The caller takes ownership of the returned; 1383/// dataset.; 1384 ; 1385RooFit::OwningPtr<RooDataSet> RooAbsPdf::generate(const RooArgSet &whatVars, double nEvents, bool verbose, bool autoBinned, const char* binnedTag, bool expectedData, bool extended) const; 1386{; 1387 if (nEvents==0 && extendMode()==CanNotBeExtended) {; 1388 return RooFit::makeOwningPtr(std::make_unique<RooDataSet>(""emptyData"",""emptyData"",whatVars));; 1389 }; 1390 ; 1391 // Request for binned generation; 1392 std::unique_ptr<RooAbsGenContext> context{autoGenContext(whatVars,nullptr,nullptr,verbose,autoBinned,binnedTag)};; 1393 if (expectedData) {; 1394 context->setExpectedData(true) ;; 1395 }; 1396 ; 1397 std::unique_ptr<RooDataSet> generated;; 1398 if(nullptr != context && context->isValid()) {; 1399 generated = std::unique_ptr<RooDataSet>{context->generate(nEvents, false, extended)};; 1400 }; 1401 else {; 1402 coutE(Generation) <",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:68528,Modifiability,extend,extended,68528,,MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:68575,Modifiability,extend,extendMode,68575,,MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:69141,Modifiability,extend,extended,69141,,MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:69745,Modifiability,extend,extended,69745,"nts, bool verbose, bool autoBinned, const char* binnedTag, bool expectedData, bool extended) const; 1386{; 1387 if (nEvents==0 && extendMode()==CanNotBeExtended) {; 1388 return RooFit::makeOwningPtr(std::make_unique<RooDataSet>(""emptyData"",""emptyData"",whatVars));; 1389 }; 1390 ; 1391 // Request for binned generation; 1392 std::unique_ptr<RooAbsGenContext> context{autoGenContext(whatVars,nullptr,nullptr,verbose,autoBinned,binnedTag)};; 1393 if (expectedData) {; 1394 context->setExpectedData(true) ;; 1395 }; 1396 ; 1397 std::unique_ptr<RooDataSet> generated;; 1398 if(nullptr != context && context->isValid()) {; 1399 generated = std::unique_ptr<RooDataSet>{context->generate(nEvents, false, extended)};; 1400 }; 1401 else {; 1402 coutE(Generation) << ""RooAbsPdf::generate("" << GetName() << "") cannot create a valid context"" << endl;; 1403 }; 1404 return RooFit::makeOwningPtr(std::move(generated));; 1405}; 1406 ; 1407 ; 1408 ; 1409 ; 1410////////////////////////////////////////////////////////////////////////////////; 1411/// Internal method; 1412 ; 1413std::unique_ptr<RooDataSet> RooAbsPdf::generate(RooAbsGenContext& context, const RooArgSet &whatVars, const RooDataSet *prototype,; 1414 double nEvents, bool /*verbose*/, bool randProtoOrder, bool resampleProto,; 1415 bool skipInit, bool extended) const; 1416{; 1417 if (nEvents==0 && (prototype==nullptr || prototype->numEntries()==0)) {; 1418 return std::make_unique<RooDataSet>(""emptyData"",""emptyData"",whatVars);; 1419 }; 1420 ; 1421 std::unique_ptr<RooDataSet> generated;; 1422 ; 1423 // Resampling implies reshuffling in the implementation; 1424 if (resampleProto) {; 1425 randProtoOrder=true ;; 1426 }; 1427 ; 1428 if (randProtoOrder && prototype && prototype->numEntries()!=nEvents) {; 1429 coutI(Generation) << ""RooAbsPdf::generate (Re)randomizing event order in prototype dataset (Nevt="" << nEvents << "")"" << endl ;; 1430 Int_t* newOrder = randomizeProtoOrder(prototype->numEntries(),Int_t(nEvents),resampleProto) ;; 1431 context.",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:70627,Modifiability,extend,extended,70627,")) {; 1418 return std::make_unique<RooDataSet>(""emptyData"",""emptyData"",whatVars);; 1419 }; 1420 ; 1421 std::unique_ptr<RooDataSet> generated;; 1422 ; 1423 // Resampling implies reshuffling in the implementation; 1424 if (resampleProto) {; 1425 randProtoOrder=true ;; 1426 }; 1427 ; 1428 if (randProtoOrder && prototype && prototype->numEntries()!=nEvents) {; 1429 coutI(Generation) << ""RooAbsPdf::generate (Re)randomizing event order in prototype dataset (Nevt="" << nEvents << "")"" << endl ;; 1430 Int_t* newOrder = randomizeProtoOrder(prototype->numEntries(),Int_t(nEvents),resampleProto) ;; 1431 context.setProtoDataOrder(newOrder) ;; 1432 delete[] newOrder ;; 1433 }; 1434 ; 1435 if(context.isValid()) {; 1436 generated = std::unique_ptr<RooDataSet>{context.generate(nEvents,skipInit,extended)};; 1437 }; 1438 else {; 1439 coutE(Generation) << ""RooAbsPdf::generate("" << GetName() << "") do not have a valid generator context"" << endl;; 1440 }; 1441 return generated;; 1442}; 1443 ; 1444 ; 1445 ; 1446 ; 1447////////////////////////////////////////////////////////////////////////////////; 1448/// Generate a new dataset using a prototype dataset as a model,; 1449/// with values of the variables in `whatVars` sampled from our distribution.; 1450///; 1451/// \param[in] whatVars Generate for these variables.; 1452/// \param[in] prototype Use this dataset; 1453/// as a prototype: the new dataset will contain the same number of; 1454/// events as the prototype (by default), and any prototype variables not in; 1455/// whatVars will be copied into the new dataset for each generated; 1456/// event and also used to set our PDF parameters. The user can specify a; 1457/// number of events to generate that will override the default. The result is a; 1458/// copy of the prototype dataset with only variables in whatVars; 1459/// randomized. Variables in whatVars that are not in the prototype; 1460/// will be added as new columns to the generated dataset.; 1461/// \param[in] nEvents Number of event",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:71028,Modifiability,variab,variables,71028,")) {; 1418 return std::make_unique<RooDataSet>(""emptyData"",""emptyData"",whatVars);; 1419 }; 1420 ; 1421 std::unique_ptr<RooDataSet> generated;; 1422 ; 1423 // Resampling implies reshuffling in the implementation; 1424 if (resampleProto) {; 1425 randProtoOrder=true ;; 1426 }; 1427 ; 1428 if (randProtoOrder && prototype && prototype->numEntries()!=nEvents) {; 1429 coutI(Generation) << ""RooAbsPdf::generate (Re)randomizing event order in prototype dataset (Nevt="" << nEvents << "")"" << endl ;; 1430 Int_t* newOrder = randomizeProtoOrder(prototype->numEntries(),Int_t(nEvents),resampleProto) ;; 1431 context.setProtoDataOrder(newOrder) ;; 1432 delete[] newOrder ;; 1433 }; 1434 ; 1435 if(context.isValid()) {; 1436 generated = std::unique_ptr<RooDataSet>{context.generate(nEvents,skipInit,extended)};; 1437 }; 1438 else {; 1439 coutE(Generation) << ""RooAbsPdf::generate("" << GetName() << "") do not have a valid generator context"" << endl;; 1440 }; 1441 return generated;; 1442}; 1443 ; 1444 ; 1445 ; 1446 ; 1447////////////////////////////////////////////////////////////////////////////////; 1448/// Generate a new dataset using a prototype dataset as a model,; 1449/// with values of the variables in `whatVars` sampled from our distribution.; 1450///; 1451/// \param[in] whatVars Generate for these variables.; 1452/// \param[in] prototype Use this dataset; 1453/// as a prototype: the new dataset will contain the same number of; 1454/// events as the prototype (by default), and any prototype variables not in; 1455/// whatVars will be copied into the new dataset for each generated; 1456/// event and also used to set our PDF parameters. The user can specify a; 1457/// number of events to generate that will override the default. The result is a; 1458/// copy of the prototype dataset with only variables in whatVars; 1459/// randomized. Variables in whatVars that are not in the prototype; 1460/// will be added as new columns to the generated dataset.; 1461/// \param[in] nEvents Number of event",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:71140,Modifiability,variab,variables,71140,"1427 ; 1428 if (randProtoOrder && prototype && prototype->numEntries()!=nEvents) {; 1429 coutI(Generation) << ""RooAbsPdf::generate (Re)randomizing event order in prototype dataset (Nevt="" << nEvents << "")"" << endl ;; 1430 Int_t* newOrder = randomizeProtoOrder(prototype->numEntries(),Int_t(nEvents),resampleProto) ;; 1431 context.setProtoDataOrder(newOrder) ;; 1432 delete[] newOrder ;; 1433 }; 1434 ; 1435 if(context.isValid()) {; 1436 generated = std::unique_ptr<RooDataSet>{context.generate(nEvents,skipInit,extended)};; 1437 }; 1438 else {; 1439 coutE(Generation) << ""RooAbsPdf::generate("" << GetName() << "") do not have a valid generator context"" << endl;; 1440 }; 1441 return generated;; 1442}; 1443 ; 1444 ; 1445 ; 1446 ; 1447////////////////////////////////////////////////////////////////////////////////; 1448/// Generate a new dataset using a prototype dataset as a model,; 1449/// with values of the variables in `whatVars` sampled from our distribution.; 1450///; 1451/// \param[in] whatVars Generate for these variables.; 1452/// \param[in] prototype Use this dataset; 1453/// as a prototype: the new dataset will contain the same number of; 1454/// events as the prototype (by default), and any prototype variables not in; 1455/// whatVars will be copied into the new dataset for each generated; 1456/// event and also used to set our PDF parameters. The user can specify a; 1457/// number of events to generate that will override the default. The result is a; 1458/// copy of the prototype dataset with only variables in whatVars; 1459/// randomized. Variables in whatVars that are not in the prototype; 1460/// will be added as new columns to the generated dataset.; 1461/// \param[in] nEvents Number of events to generate. Defaults to 0, which means number; 1462/// of event in prototype dataset.; 1463/// \param[in] verbose Show which generator strategies are being used.; 1464/// \param[in] randProtoOrder Randomise order of retrieval of events from proto dataset.; 1465/// \param",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:71336,Modifiability,variab,variables,71336,"<< "")"" << endl ;; 1430 Int_t* newOrder = randomizeProtoOrder(prototype->numEntries(),Int_t(nEvents),resampleProto) ;; 1431 context.setProtoDataOrder(newOrder) ;; 1432 delete[] newOrder ;; 1433 }; 1434 ; 1435 if(context.isValid()) {; 1436 generated = std::unique_ptr<RooDataSet>{context.generate(nEvents,skipInit,extended)};; 1437 }; 1438 else {; 1439 coutE(Generation) << ""RooAbsPdf::generate("" << GetName() << "") do not have a valid generator context"" << endl;; 1440 }; 1441 return generated;; 1442}; 1443 ; 1444 ; 1445 ; 1446 ; 1447////////////////////////////////////////////////////////////////////////////////; 1448/// Generate a new dataset using a prototype dataset as a model,; 1449/// with values of the variables in `whatVars` sampled from our distribution.; 1450///; 1451/// \param[in] whatVars Generate for these variables.; 1452/// \param[in] prototype Use this dataset; 1453/// as a prototype: the new dataset will contain the same number of; 1454/// events as the prototype (by default), and any prototype variables not in; 1455/// whatVars will be copied into the new dataset for each generated; 1456/// event and also used to set our PDF parameters. The user can specify a; 1457/// number of events to generate that will override the default. The result is a; 1458/// copy of the prototype dataset with only variables in whatVars; 1459/// randomized. Variables in whatVars that are not in the prototype; 1460/// will be added as new columns to the generated dataset.; 1461/// \param[in] nEvents Number of events to generate. Defaults to 0, which means number; 1462/// of event in prototype dataset.; 1463/// \param[in] verbose Show which generator strategies are being used.; 1464/// \param[in] randProtoOrder Randomise order of retrieval of events from proto dataset.; 1465/// \param[in] resampleProto Resample from the proto dataset.; 1466/// \return The new dataset. Returns zero in case of an error. The caller takes ownership of the; 1467/// returned dataset.; 1468 ; 1469RooFit:",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:71640,Modifiability,variab,variables,71640,"xtended)};; 1437 }; 1438 else {; 1439 coutE(Generation) << ""RooAbsPdf::generate("" << GetName() << "") do not have a valid generator context"" << endl;; 1440 }; 1441 return generated;; 1442}; 1443 ; 1444 ; 1445 ; 1446 ; 1447////////////////////////////////////////////////////////////////////////////////; 1448/// Generate a new dataset using a prototype dataset as a model,; 1449/// with values of the variables in `whatVars` sampled from our distribution.; 1450///; 1451/// \param[in] whatVars Generate for these variables.; 1452/// \param[in] prototype Use this dataset; 1453/// as a prototype: the new dataset will contain the same number of; 1454/// events as the prototype (by default), and any prototype variables not in; 1455/// whatVars will be copied into the new dataset for each generated; 1456/// event and also used to set our PDF parameters. The user can specify a; 1457/// number of events to generate that will override the default. The result is a; 1458/// copy of the prototype dataset with only variables in whatVars; 1459/// randomized. Variables in whatVars that are not in the prototype; 1460/// will be added as new columns to the generated dataset.; 1461/// \param[in] nEvents Number of events to generate. Defaults to 0, which means number; 1462/// of event in prototype dataset.; 1463/// \param[in] verbose Show which generator strategies are being used.; 1464/// \param[in] randProtoOrder Randomise order of retrieval of events from proto dataset.; 1465/// \param[in] resampleProto Resample from the proto dataset.; 1466/// \return The new dataset. Returns zero in case of an error. The caller takes ownership of the; 1467/// returned dataset.; 1468 ; 1469RooFit::OwningPtr<RooDataSet> RooAbsPdf::generate(const RooArgSet &whatVars, const RooDataSet& prototype,; 1470 Int_t nEvents, bool verbose, bool randProtoOrder, bool resampleProto) const; 1471{; 1472 std::unique_ptr<RooAbsGenContext> context{genContext(whatVars,&prototype,nullptr,verbose)};; 1473 if (context) {; 1474",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:76843,Modifiability,variab,variables,76843,"41/// defined by the getGenerator() implementation. The default; 1542/// implementation does nothing.; 1543 ; 1544void RooAbsPdf::generateEvent(Int_t /*code*/); 1545{; 1546}; 1547 ; 1548 ; 1549 ; 1550////////////////////////////////////////////////////////////////////////////////; 1551/// Check if given observable can be safely generated using the; 1552/// pdfs internal generator mechanism (if that existsP). Observables; 1553/// on which a PDF depends via more than route are not safe; 1554/// for use with internal generators because they introduce; 1555/// correlations not known to the internal generator; 1556 ; 1557bool RooAbsPdf::isDirectGenSafe(const RooAbsArg& arg) const; 1558{; 1559 // Arg must be direct server of self; 1560 if (!findServer(arg.GetName())) return false ;; 1561 ; 1562 // There must be no other dependency routes; 1563 for (const auto server : _serverList) {; 1564 if(server == &arg) continue;; 1565 if(server->dependsOn(arg)) {; 1566 return false ;; 1567 }; 1568 }; 1569 ; 1570 return true ;; 1571}; 1572 ; 1573 ; 1574////////////////////////////////////////////////////////////////////////////////; 1575/// Generate a new dataset containing the specified variables with events sampled from our distribution.; 1576/// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; 1577/// constant and not be used for event generation; 1578/// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg to change behaviour of generateBinned(); 1579/// \return RooDataHist *, to be managed by caller.; 1580///; 1581/// Generate the specified number of events or expectedEvents() if not specified.; 1582///; 1583/// Any variables of this PDF that are not in whatVars will use their; 1584/// current values and be treated as fixed parameters. Returns zero; 1585/// in case of an error. The caller takes ownership of the returned; 1586/// dataset.; 1587///; 1588/// The following named arguments are supported; 1589/// | Type of ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:76932,Modifiability,variab,variables,76932,"///; 1551/// Check if given observable can be safely generated using the; 1552/// pdfs internal generator mechanism (if that existsP). Observables; 1553/// on which a PDF depends via more than route are not safe; 1554/// for use with internal generators because they introduce; 1555/// correlations not known to the internal generator; 1556 ; 1557bool RooAbsPdf::isDirectGenSafe(const RooAbsArg& arg) const; 1558{; 1559 // Arg must be direct server of self; 1560 if (!findServer(arg.GetName())) return false ;; 1561 ; 1562 // There must be no other dependency routes; 1563 for (const auto server : _serverList) {; 1564 if(server == &arg) continue;; 1565 if(server->dependsOn(arg)) {; 1566 return false ;; 1567 }; 1568 }; 1569 ; 1570 return true ;; 1571}; 1572 ; 1573 ; 1574////////////////////////////////////////////////////////////////////////////////; 1575/// Generate a new dataset containing the specified variables with events sampled from our distribution.; 1576/// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; 1577/// constant and not be used for event generation; 1578/// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg to change behaviour of generateBinned(); 1579/// \return RooDataHist *, to be managed by caller.; 1580///; 1581/// Generate the specified number of events or expectedEvents() if not specified.; 1582///; 1583/// Any variables of this PDF that are not in whatVars will use their; 1584/// current values and be treated as fixed parameters. Returns zero; 1585/// in case of an error. The caller takes ownership of the returned; 1586/// dataset.; 1587///; 1588/// The following named arguments are supported; 1589/// | Type of CmdArg | Effect on generation; 1590/// |---------------------------|-----------------------; 1591/// | `Name(const char* name)` | Name of the output dataset; 1592/// | `Verbose(bool flag)` | Print informational messages during event generation; 1593/// | `NumEvents(int nevt)` |",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:77348,Modifiability,variab,variables,77348," (!findServer(arg.GetName())) return false ;; 1561 ; 1562 // There must be no other dependency routes; 1563 for (const auto server : _serverList) {; 1564 if(server == &arg) continue;; 1565 if(server->dependsOn(arg)) {; 1566 return false ;; 1567 }; 1568 }; 1569 ; 1570 return true ;; 1571}; 1572 ; 1573 ; 1574////////////////////////////////////////////////////////////////////////////////; 1575/// Generate a new dataset containing the specified variables with events sampled from our distribution.; 1576/// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; 1577/// constant and not be used for event generation; 1578/// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg to change behaviour of generateBinned(); 1579/// \return RooDataHist *, to be managed by caller.; 1580///; 1581/// Generate the specified number of events or expectedEvents() if not specified.; 1582///; 1583/// Any variables of this PDF that are not in whatVars will use their; 1584/// current values and be treated as fixed parameters. Returns zero; 1585/// in case of an error. The caller takes ownership of the returned; 1586/// dataset.; 1587///; 1588/// The following named arguments are supported; 1589/// | Type of CmdArg | Effect on generation; 1590/// |---------------------------|-----------------------; 1591/// | `Name(const char* name)` | Name of the output dataset; 1592/// | `Verbose(bool flag)` | Print informational messages during event generation; 1593/// | `NumEvents(int nevt)` | Generate specified number of events; 1594/// | `Extended()` | The actual number of events generated will be sampled from a Poisson distribution with mu=nevt. This can be *much* faster for peaked PDFs, but the number of events is not exactly what was requested.; 1595/// | `ExpectedData()` | Return a binned dataset _without_ statistical fluctuations (also aliased as Asimov()); 1596///; 1597 ; 1598RooFit::OwningPtr<RooDataHist> RooAbsPdf::generateBinned(const Ro",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:78811,Modifiability,extend,extended,78811,"Verbose(bool flag)` | Print informational messages during event generation; 1593/// | `NumEvents(int nevt)` | Generate specified number of events; 1594/// | `Extended()` | The actual number of events generated will be sampled from a Poisson distribution with mu=nevt. This can be *much* faster for peaked PDFs, but the number of events is not exactly what was requested.; 1595/// | `ExpectedData()` | Return a binned dataset _without_ statistical fluctuations (also aliased as Asimov()); 1596///; 1597 ; 1598RooFit::OwningPtr<RooDataHist> RooAbsPdf::generateBinned(const RooArgSet& whatVars, const RooCmdArg& arg1,const RooCmdArg& arg2,; 1599 const RooCmdArg& arg3,const RooCmdArg& arg4, const RooCmdArg& arg5,const RooCmdArg& arg6) const; 1600{; 1601 ; 1602 // Select the pdf-specific commands; 1603 RooCmdConfig pc(""RooAbsPdf::generate("" + std::string(GetName()) + "")"");; 1604 pc.defineString(""dsetName"",""Name"",0,"""") ;; 1605 pc.defineInt(""verbose"",""Verbose"",0,0) ;; 1606 pc.defineInt(""extended"",""Extended"",0,0) ;; 1607 pc.defineInt(""nEvents"",""NumEvents"",0,0) ;; 1608 pc.defineDouble(""nEventsD"",""NumEventsD"",0,-1.) ;; 1609 pc.defineInt(""expectedData"",""ExpectedData"",0,0) ;; 1610 ; 1611 // Process and check varargs; 1612 pc.process(arg1,arg2,arg3,arg4,arg5,arg6) ;; 1613 if (!pc.ok(true)) {; 1614 return nullptr;; 1615 }; 1616 ; 1617 // Decode command line arguments; 1618 double nEvents = pc.getDouble(""nEventsD"") ;; 1619 if (nEvents<0) {; 1620 nEvents = pc.getInt(""nEvents"") ;; 1621 }; 1622 //bool verbose = pc.getInt(""verbose"") ;; 1623 bool extended = pc.getInt(""extended"") ;; 1624 bool expectedData = pc.getInt(""expectedData"") ;; 1625 const char* dsetName = pc.getString(""dsetName"") ;; 1626 ; 1627 if (extended) {; 1628 //nEvents = (nEvents==0?Int_t(expectedEvents(&whatVars)+0.5):nEvents) ;; 1629 nEvents = (nEvents==0 ? expectedEvents(&whatVars) :nEvents) ;; 1630 cxcoutI(Generation) << "" Extended mode active, number of events generated ("" << nEvents << "") is Poisson fluctuation on ""; 1631 <",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:79369,Modifiability,extend,extended,79369,"t> RooAbsPdf::generateBinned(const RooArgSet& whatVars, const RooCmdArg& arg1,const RooCmdArg& arg2,; 1599 const RooCmdArg& arg3,const RooCmdArg& arg4, const RooCmdArg& arg5,const RooCmdArg& arg6) const; 1600{; 1601 ; 1602 // Select the pdf-specific commands; 1603 RooCmdConfig pc(""RooAbsPdf::generate("" + std::string(GetName()) + "")"");; 1604 pc.defineString(""dsetName"",""Name"",0,"""") ;; 1605 pc.defineInt(""verbose"",""Verbose"",0,0) ;; 1606 pc.defineInt(""extended"",""Extended"",0,0) ;; 1607 pc.defineInt(""nEvents"",""NumEvents"",0,0) ;; 1608 pc.defineDouble(""nEventsD"",""NumEventsD"",0,-1.) ;; 1609 pc.defineInt(""expectedData"",""ExpectedData"",0,0) ;; 1610 ; 1611 // Process and check varargs; 1612 pc.process(arg1,arg2,arg3,arg4,arg5,arg6) ;; 1613 if (!pc.ok(true)) {; 1614 return nullptr;; 1615 }; 1616 ; 1617 // Decode command line arguments; 1618 double nEvents = pc.getDouble(""nEventsD"") ;; 1619 if (nEvents<0) {; 1620 nEvents = pc.getInt(""nEvents"") ;; 1621 }; 1622 //bool verbose = pc.getInt(""verbose"") ;; 1623 bool extended = pc.getInt(""extended"") ;; 1624 bool expectedData = pc.getInt(""expectedData"") ;; 1625 const char* dsetName = pc.getString(""dsetName"") ;; 1626 ; 1627 if (extended) {; 1628 //nEvents = (nEvents==0?Int_t(expectedEvents(&whatVars)+0.5):nEvents) ;; 1629 nEvents = (nEvents==0 ? expectedEvents(&whatVars) :nEvents) ;; 1630 cxcoutI(Generation) << "" Extended mode active, number of events generated ("" << nEvents << "") is Poisson fluctuation on ""; 1631 << GetName() << ""::expectedEvents() = "" << nEvents << endl ;; 1632 // If Poisson fluctuation results in zero events, stop here; 1633 if (nEvents==0) {; 1634 return nullptr ;; 1635 }; 1636 } else if (nEvents==0) {; 1637 cxcoutI(Generation) << ""No number of events specified , number of events generated is ""; 1638 << GetName() << ""::expectedEvents() = "" << expectedEvents(&whatVars)<< endl ;; 1639 }; 1640 ; 1641 // Forward to appropriate implementation; 1642 auto data = generateBinned(whatVars,nEvents,expectedData,extended);; 1643 ; 164",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:79391,Modifiability,extend,extended,79391,"atVars, const RooCmdArg& arg1,const RooCmdArg& arg2,; 1599 const RooCmdArg& arg3,const RooCmdArg& arg4, const RooCmdArg& arg5,const RooCmdArg& arg6) const; 1600{; 1601 ; 1602 // Select the pdf-specific commands; 1603 RooCmdConfig pc(""RooAbsPdf::generate("" + std::string(GetName()) + "")"");; 1604 pc.defineString(""dsetName"",""Name"",0,"""") ;; 1605 pc.defineInt(""verbose"",""Verbose"",0,0) ;; 1606 pc.defineInt(""extended"",""Extended"",0,0) ;; 1607 pc.defineInt(""nEvents"",""NumEvents"",0,0) ;; 1608 pc.defineDouble(""nEventsD"",""NumEventsD"",0,-1.) ;; 1609 pc.defineInt(""expectedData"",""ExpectedData"",0,0) ;; 1610 ; 1611 // Process and check varargs; 1612 pc.process(arg1,arg2,arg3,arg4,arg5,arg6) ;; 1613 if (!pc.ok(true)) {; 1614 return nullptr;; 1615 }; 1616 ; 1617 // Decode command line arguments; 1618 double nEvents = pc.getDouble(""nEventsD"") ;; 1619 if (nEvents<0) {; 1620 nEvents = pc.getInt(""nEvents"") ;; 1621 }; 1622 //bool verbose = pc.getInt(""verbose"") ;; 1623 bool extended = pc.getInt(""extended"") ;; 1624 bool expectedData = pc.getInt(""expectedData"") ;; 1625 const char* dsetName = pc.getString(""dsetName"") ;; 1626 ; 1627 if (extended) {; 1628 //nEvents = (nEvents==0?Int_t(expectedEvents(&whatVars)+0.5):nEvents) ;; 1629 nEvents = (nEvents==0 ? expectedEvents(&whatVars) :nEvents) ;; 1630 cxcoutI(Generation) << "" Extended mode active, number of events generated ("" << nEvents << "") is Poisson fluctuation on ""; 1631 << GetName() << ""::expectedEvents() = "" << nEvents << endl ;; 1632 // If Poisson fluctuation results in zero events, stop here; 1633 if (nEvents==0) {; 1634 return nullptr ;; 1635 }; 1636 } else if (nEvents==0) {; 1637 cxcoutI(Generation) << ""No number of events specified , number of events generated is ""; 1638 << GetName() << ""::expectedEvents() = "" << expectedEvents(&whatVars)<< endl ;; 1639 }; 1640 ; 1641 // Forward to appropriate implementation; 1642 auto data = generateBinned(whatVars,nEvents,expectedData,extended);; 1643 ; 1644 // Rename dataset to given name if supplied; ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:79531,Modifiability,extend,extended,79531,"g& arg6) const; 1600{; 1601 ; 1602 // Select the pdf-specific commands; 1603 RooCmdConfig pc(""RooAbsPdf::generate("" + std::string(GetName()) + "")"");; 1604 pc.defineString(""dsetName"",""Name"",0,"""") ;; 1605 pc.defineInt(""verbose"",""Verbose"",0,0) ;; 1606 pc.defineInt(""extended"",""Extended"",0,0) ;; 1607 pc.defineInt(""nEvents"",""NumEvents"",0,0) ;; 1608 pc.defineDouble(""nEventsD"",""NumEventsD"",0,-1.) ;; 1609 pc.defineInt(""expectedData"",""ExpectedData"",0,0) ;; 1610 ; 1611 // Process and check varargs; 1612 pc.process(arg1,arg2,arg3,arg4,arg5,arg6) ;; 1613 if (!pc.ok(true)) {; 1614 return nullptr;; 1615 }; 1616 ; 1617 // Decode command line arguments; 1618 double nEvents = pc.getDouble(""nEventsD"") ;; 1619 if (nEvents<0) {; 1620 nEvents = pc.getInt(""nEvents"") ;; 1621 }; 1622 //bool verbose = pc.getInt(""verbose"") ;; 1623 bool extended = pc.getInt(""extended"") ;; 1624 bool expectedData = pc.getInt(""expectedData"") ;; 1625 const char* dsetName = pc.getString(""dsetName"") ;; 1626 ; 1627 if (extended) {; 1628 //nEvents = (nEvents==0?Int_t(expectedEvents(&whatVars)+0.5):nEvents) ;; 1629 nEvents = (nEvents==0 ? expectedEvents(&whatVars) :nEvents) ;; 1630 cxcoutI(Generation) << "" Extended mode active, number of events generated ("" << nEvents << "") is Poisson fluctuation on ""; 1631 << GetName() << ""::expectedEvents() = "" << nEvents << endl ;; 1632 // If Poisson fluctuation results in zero events, stop here; 1633 if (nEvents==0) {; 1634 return nullptr ;; 1635 }; 1636 } else if (nEvents==0) {; 1637 cxcoutI(Generation) << ""No number of events specified , number of events generated is ""; 1638 << GetName() << ""::expectedEvents() = "" << expectedEvents(&whatVars)<< endl ;; 1639 }; 1640 ; 1641 // Forward to appropriate implementation; 1642 auto data = generateBinned(whatVars,nEvents,expectedData,extended);; 1643 ; 1644 // Rename dataset to given name if supplied; 1645 if (dsetName && strlen(dsetName)>0) {; 1646 data->SetName(dsetName) ;; 1647 }; 1648 ; 1649 return data;; 1650}; 1651 ; 1652 ; 1653 ; 165",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:80339,Modifiability,extend,extended,80339," arguments; 1618 double nEvents = pc.getDouble(""nEventsD"") ;; 1619 if (nEvents<0) {; 1620 nEvents = pc.getInt(""nEvents"") ;; 1621 }; 1622 //bool verbose = pc.getInt(""verbose"") ;; 1623 bool extended = pc.getInt(""extended"") ;; 1624 bool expectedData = pc.getInt(""expectedData"") ;; 1625 const char* dsetName = pc.getString(""dsetName"") ;; 1626 ; 1627 if (extended) {; 1628 //nEvents = (nEvents==0?Int_t(expectedEvents(&whatVars)+0.5):nEvents) ;; 1629 nEvents = (nEvents==0 ? expectedEvents(&whatVars) :nEvents) ;; 1630 cxcoutI(Generation) << "" Extended mode active, number of events generated ("" << nEvents << "") is Poisson fluctuation on ""; 1631 << GetName() << ""::expectedEvents() = "" << nEvents << endl ;; 1632 // If Poisson fluctuation results in zero events, stop here; 1633 if (nEvents==0) {; 1634 return nullptr ;; 1635 }; 1636 } else if (nEvents==0) {; 1637 cxcoutI(Generation) << ""No number of events specified , number of events generated is ""; 1638 << GetName() << ""::expectedEvents() = "" << expectedEvents(&whatVars)<< endl ;; 1639 }; 1640 ; 1641 // Forward to appropriate implementation; 1642 auto data = generateBinned(whatVars,nEvents,expectedData,extended);; 1643 ; 1644 // Rename dataset to given name if supplied; 1645 if (dsetName && strlen(dsetName)>0) {; 1646 data->SetName(dsetName) ;; 1647 }; 1648 ; 1649 return data;; 1650}; 1651 ; 1652 ; 1653 ; 1654 ; 1655////////////////////////////////////////////////////////////////////////////////; 1656/// Generate a new dataset containing the specified variables with; 1657/// events sampled from our distribution.; 1658///; 1659/// \param[in] whatVars Variables that values should be generated for.; 1660/// \param[in] nEvents How many events to generate. If `nEvents <=0`, use the value returned by expectedEvents() as target.; 1661/// \param[in] expectedData If set to true (false by default), the returned histogram returns the 'expected'; 1662/// data sample, i.e. no statistical fluctuations are present.; 1663/// \param[in] extended ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:80695,Modifiability,variab,variables,80695," arguments; 1618 double nEvents = pc.getDouble(""nEventsD"") ;; 1619 if (nEvents<0) {; 1620 nEvents = pc.getInt(""nEvents"") ;; 1621 }; 1622 //bool verbose = pc.getInt(""verbose"") ;; 1623 bool extended = pc.getInt(""extended"") ;; 1624 bool expectedData = pc.getInt(""expectedData"") ;; 1625 const char* dsetName = pc.getString(""dsetName"") ;; 1626 ; 1627 if (extended) {; 1628 //nEvents = (nEvents==0?Int_t(expectedEvents(&whatVars)+0.5):nEvents) ;; 1629 nEvents = (nEvents==0 ? expectedEvents(&whatVars) :nEvents) ;; 1630 cxcoutI(Generation) << "" Extended mode active, number of events generated ("" << nEvents << "") is Poisson fluctuation on ""; 1631 << GetName() << ""::expectedEvents() = "" << nEvents << endl ;; 1632 // If Poisson fluctuation results in zero events, stop here; 1633 if (nEvents==0) {; 1634 return nullptr ;; 1635 }; 1636 } else if (nEvents==0) {; 1637 cxcoutI(Generation) << ""No number of events specified , number of events generated is ""; 1638 << GetName() << ""::expectedEvents() = "" << expectedEvents(&whatVars)<< endl ;; 1639 }; 1640 ; 1641 // Forward to appropriate implementation; 1642 auto data = generateBinned(whatVars,nEvents,expectedData,extended);; 1643 ; 1644 // Rename dataset to given name if supplied; 1645 if (dsetName && strlen(dsetName)>0) {; 1646 data->SetName(dsetName) ;; 1647 }; 1648 ; 1649 return data;; 1650}; 1651 ; 1652 ; 1653 ; 1654 ; 1655////////////////////////////////////////////////////////////////////////////////; 1656/// Generate a new dataset containing the specified variables with; 1657/// events sampled from our distribution.; 1658///; 1659/// \param[in] whatVars Variables that values should be generated for.; 1660/// \param[in] nEvents How many events to generate. If `nEvents <=0`, use the value returned by expectedEvents() as target.; 1661/// \param[in] expectedData If set to true (false by default), the returned histogram returns the 'expected'; 1662/// data sample, i.e. no statistical fluctuations are present.; 1663/// \param[in] extended ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:81173,Modifiability,extend,extended,81173," // Forward to appropriate implementation; 1642 auto data = generateBinned(whatVars,nEvents,expectedData,extended);; 1643 ; 1644 // Rename dataset to given name if supplied; 1645 if (dsetName && strlen(dsetName)>0) {; 1646 data->SetName(dsetName) ;; 1647 }; 1648 ; 1649 return data;; 1650}; 1651 ; 1652 ; 1653 ; 1654 ; 1655////////////////////////////////////////////////////////////////////////////////; 1656/// Generate a new dataset containing the specified variables with; 1657/// events sampled from our distribution.; 1658///; 1659/// \param[in] whatVars Variables that values should be generated for.; 1660/// \param[in] nEvents How many events to generate. If `nEvents <=0`, use the value returned by expectedEvents() as target.; 1661/// \param[in] expectedData If set to true (false by default), the returned histogram returns the 'expected'; 1662/// data sample, i.e. no statistical fluctuations are present.; 1663/// \param[in] extended For each bin, generate Poisson(x, mu) events, where `mu` is chosen such that *on average*,; 1664/// one would obtain `nEvents` events. This means that the true number of events will fluctuate around the desired value,; 1665/// but the generation happens a lot faster.; 1666/// Especially if the PDF is sharply peaked, the multinomial event generation necessary to generate *exactly* `nEvents` events can; 1667/// be very slow.; 1668///; 1669/// The binning used for generation of events is the currently set binning for the variables.; 1670/// It can e.g. be changed using; 1671/// ```; 1672/// x.setBins(15);; 1673/// x.setRange(-5., 5.);; 1674/// pdf.generateBinned(RooArgSet(x), 1000);; 1675/// ```; 1676///; 1677/// Any variables of this PDF that are not in `whatVars` will use their; 1678/// current values and be treated as fixed parameters.; 1679/// \return RooDataHist* owned by the caller. Returns `nullptr` in case of an error.; 1680RooFit::OwningPtr<RooDataHist> RooAbsPdf::generateBinned(const RooArgSet &whatVars, double nEvents, bool expe",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:81706,Modifiability,variab,variables,81706,"dataset containing the specified variables with; 1657/// events sampled from our distribution.; 1658///; 1659/// \param[in] whatVars Variables that values should be generated for.; 1660/// \param[in] nEvents How many events to generate. If `nEvents <=0`, use the value returned by expectedEvents() as target.; 1661/// \param[in] expectedData If set to true (false by default), the returned histogram returns the 'expected'; 1662/// data sample, i.e. no statistical fluctuations are present.; 1663/// \param[in] extended For each bin, generate Poisson(x, mu) events, where `mu` is chosen such that *on average*,; 1664/// one would obtain `nEvents` events. This means that the true number of events will fluctuate around the desired value,; 1665/// but the generation happens a lot faster.; 1666/// Especially if the PDF is sharply peaked, the multinomial event generation necessary to generate *exactly* `nEvents` events can; 1667/// be very slow.; 1668///; 1669/// The binning used for generation of events is the currently set binning for the variables.; 1670/// It can e.g. be changed using; 1671/// ```; 1672/// x.setBins(15);; 1673/// x.setRange(-5., 5.);; 1674/// pdf.generateBinned(RooArgSet(x), 1000);; 1675/// ```; 1676///; 1677/// Any variables of this PDF that are not in `whatVars` will use their; 1678/// current values and be treated as fixed parameters.; 1679/// \return RooDataHist* owned by the caller. Returns `nullptr` in case of an error.; 1680RooFit::OwningPtr<RooDataHist> RooAbsPdf::generateBinned(const RooArgSet &whatVars, double nEvents, bool expectedData, bool extended) const; 1681{; 1682 // Create empty RooDataHist; 1683 auto hist = std::make_unique<RooDataHist>(""genData"",""genData"",whatVars);; 1684 ; 1685 // Scale to number of events and introduce Poisson fluctuations; 1686 if (nEvents<=0) {; 1687 if (!canBeExtended()) {; 1688 coutE(InputArguments) << ""RooAbsPdf::generateBinned("" << GetName() << "") ERROR: No event count provided and p.d.f does not provide expected ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:81906,Modifiability,variab,variables,81906,"eturned by expectedEvents() as target.; 1661/// \param[in] expectedData If set to true (false by default), the returned histogram returns the 'expected'; 1662/// data sample, i.e. no statistical fluctuations are present.; 1663/// \param[in] extended For each bin, generate Poisson(x, mu) events, where `mu` is chosen such that *on average*,; 1664/// one would obtain `nEvents` events. This means that the true number of events will fluctuate around the desired value,; 1665/// but the generation happens a lot faster.; 1666/// Especially if the PDF is sharply peaked, the multinomial event generation necessary to generate *exactly* `nEvents` events can; 1667/// be very slow.; 1668///; 1669/// The binning used for generation of events is the currently set binning for the variables.; 1670/// It can e.g. be changed using; 1671/// ```; 1672/// x.setBins(15);; 1673/// x.setRange(-5., 5.);; 1674/// pdf.generateBinned(RooArgSet(x), 1000);; 1675/// ```; 1676///; 1677/// Any variables of this PDF that are not in `whatVars` will use their; 1678/// current values and be treated as fixed parameters.; 1679/// \return RooDataHist* owned by the caller. Returns `nullptr` in case of an error.; 1680RooFit::OwningPtr<RooDataHist> RooAbsPdf::generateBinned(const RooArgSet &whatVars, double nEvents, bool expectedData, bool extended) const; 1681{; 1682 // Create empty RooDataHist; 1683 auto hist = std::make_unique<RooDataHist>(""genData"",""genData"",whatVars);; 1684 ; 1685 // Scale to number of events and introduce Poisson fluctuations; 1686 if (nEvents<=0) {; 1687 if (!canBeExtended()) {; 1688 coutE(InputArguments) << ""RooAbsPdf::generateBinned("" << GetName() << "") ERROR: No event count provided and p.d.f does not provide expected number of events"" << endl ;; 1689 return nullptr;; 1690 } else {; 1691 ; 1692 // Don't round in expectedData or extended mode; 1693 if (expectedData || extended) {; 1694 nEvents = expectedEvents(&whatVars) ;; 1695 } else {; 1696 nEvents = std::round(expectedEvents(&what",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:82249,Modifiability,extend,extended,82249,"round the desired value,; 1665/// but the generation happens a lot faster.; 1666/// Especially if the PDF is sharply peaked, the multinomial event generation necessary to generate *exactly* `nEvents` events can; 1667/// be very slow.; 1668///; 1669/// The binning used for generation of events is the currently set binning for the variables.; 1670/// It can e.g. be changed using; 1671/// ```; 1672/// x.setBins(15);; 1673/// x.setRange(-5., 5.);; 1674/// pdf.generateBinned(RooArgSet(x), 1000);; 1675/// ```; 1676///; 1677/// Any variables of this PDF that are not in `whatVars` will use their; 1678/// current values and be treated as fixed parameters.; 1679/// \return RooDataHist* owned by the caller. Returns `nullptr` in case of an error.; 1680RooFit::OwningPtr<RooDataHist> RooAbsPdf::generateBinned(const RooArgSet &whatVars, double nEvents, bool expectedData, bool extended) const; 1681{; 1682 // Create empty RooDataHist; 1683 auto hist = std::make_unique<RooDataHist>(""genData"",""genData"",whatVars);; 1684 ; 1685 // Scale to number of events and introduce Poisson fluctuations; 1686 if (nEvents<=0) {; 1687 if (!canBeExtended()) {; 1688 coutE(InputArguments) << ""RooAbsPdf::generateBinned("" << GetName() << "") ERROR: No event count provided and p.d.f does not provide expected number of events"" << endl ;; 1689 return nullptr;; 1690 } else {; 1691 ; 1692 // Don't round in expectedData or extended mode; 1693 if (expectedData || extended) {; 1694 nEvents = expectedEvents(&whatVars) ;; 1695 } else {; 1696 nEvents = std::round(expectedEvents(&whatVars));; 1697 }; 1698 }; 1699 }; 1700 ; 1701 // Sample p.d.f. distribution; 1702 fillDataHist(hist.get(),&whatVars,1,true) ;; 1703 ; 1704 vector<int> histOut(hist->numEntries()) ;; 1705 double histMax(-1) ;; 1706 Int_t histOutSum(0) ;; 1707 for (int i=0 ; i<hist->numEntries() ; i++) {; 1708 hist->get(i) ;; 1709 if (expectedData) {; 1710 ; 1711 // Expected data, multiply p.d.f by nEvents; 1712 double w=hist->weight()*nEvents ;; 1713 hist->se",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:82774,Modifiability,extend,extended,82774,"(-5., 5.);; 1674/// pdf.generateBinned(RooArgSet(x), 1000);; 1675/// ```; 1676///; 1677/// Any variables of this PDF that are not in `whatVars` will use their; 1678/// current values and be treated as fixed parameters.; 1679/// \return RooDataHist* owned by the caller. Returns `nullptr` in case of an error.; 1680RooFit::OwningPtr<RooDataHist> RooAbsPdf::generateBinned(const RooArgSet &whatVars, double nEvents, bool expectedData, bool extended) const; 1681{; 1682 // Create empty RooDataHist; 1683 auto hist = std::make_unique<RooDataHist>(""genData"",""genData"",whatVars);; 1684 ; 1685 // Scale to number of events and introduce Poisson fluctuations; 1686 if (nEvents<=0) {; 1687 if (!canBeExtended()) {; 1688 coutE(InputArguments) << ""RooAbsPdf::generateBinned("" << GetName() << "") ERROR: No event count provided and p.d.f does not provide expected number of events"" << endl ;; 1689 return nullptr;; 1690 } else {; 1691 ; 1692 // Don't round in expectedData or extended mode; 1693 if (expectedData || extended) {; 1694 nEvents = expectedEvents(&whatVars) ;; 1695 } else {; 1696 nEvents = std::round(expectedEvents(&whatVars));; 1697 }; 1698 }; 1699 }; 1700 ; 1701 // Sample p.d.f. distribution; 1702 fillDataHist(hist.get(),&whatVars,1,true) ;; 1703 ; 1704 vector<int> histOut(hist->numEntries()) ;; 1705 double histMax(-1) ;; 1706 Int_t histOutSum(0) ;; 1707 for (int i=0 ; i<hist->numEntries() ; i++) {; 1708 hist->get(i) ;; 1709 if (expectedData) {; 1710 ; 1711 // Expected data, multiply p.d.f by nEvents; 1712 double w=hist->weight()*nEvents ;; 1713 hist->set(i, w, sqrt(w));; 1714 ; 1715 } else if (extended) {; 1716 ; 1717 // Extended mode, set contents to Poisson(pdf*nEvents); 1718 double w = RooRandom::randomGenerator()->Poisson(hist->weight()*nEvents) ;; 1719 hist->set(w,sqrt(w)) ;; 1720 ; 1721 } else {; 1722 ; 1723 // Regular mode, fill array of weights with Poisson(pdf*nEvents), but to not fill; 1724 // histogram yet.; 1725 if (hist->weight()>histMax) {; 1726 histMax = hist->weigh",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:82814,Modifiability,extend,extended,82814,"(-5., 5.);; 1674/// pdf.generateBinned(RooArgSet(x), 1000);; 1675/// ```; 1676///; 1677/// Any variables of this PDF that are not in `whatVars` will use their; 1678/// current values and be treated as fixed parameters.; 1679/// \return RooDataHist* owned by the caller. Returns `nullptr` in case of an error.; 1680RooFit::OwningPtr<RooDataHist> RooAbsPdf::generateBinned(const RooArgSet &whatVars, double nEvents, bool expectedData, bool extended) const; 1681{; 1682 // Create empty RooDataHist; 1683 auto hist = std::make_unique<RooDataHist>(""genData"",""genData"",whatVars);; 1684 ; 1685 // Scale to number of events and introduce Poisson fluctuations; 1686 if (nEvents<=0) {; 1687 if (!canBeExtended()) {; 1688 coutE(InputArguments) << ""RooAbsPdf::generateBinned("" << GetName() << "") ERROR: No event count provided and p.d.f does not provide expected number of events"" << endl ;; 1689 return nullptr;; 1690 } else {; 1691 ; 1692 // Don't round in expectedData or extended mode; 1693 if (expectedData || extended) {; 1694 nEvents = expectedEvents(&whatVars) ;; 1695 } else {; 1696 nEvents = std::round(expectedEvents(&whatVars));; 1697 }; 1698 }; 1699 }; 1700 ; 1701 // Sample p.d.f. distribution; 1702 fillDataHist(hist.get(),&whatVars,1,true) ;; 1703 ; 1704 vector<int> histOut(hist->numEntries()) ;; 1705 double histMax(-1) ;; 1706 Int_t histOutSum(0) ;; 1707 for (int i=0 ; i<hist->numEntries() ; i++) {; 1708 hist->get(i) ;; 1709 if (expectedData) {; 1710 ; 1711 // Expected data, multiply p.d.f by nEvents; 1712 double w=hist->weight()*nEvents ;; 1713 hist->set(i, w, sqrt(w));; 1714 ; 1715 } else if (extended) {; 1716 ; 1717 // Extended mode, set contents to Poisson(pdf*nEvents); 1718 double w = RooRandom::randomGenerator()->Poisson(hist->weight()*nEvents) ;; 1719 hist->set(w,sqrt(w)) ;; 1720 ; 1721 } else {; 1722 ; 1723 // Regular mode, fill array of weights with Poisson(pdf*nEvents), but to not fill; 1724 // histogram yet.; 1725 if (hist->weight()>histMax) {; 1726 histMax = hist->weigh",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:83418,Modifiability,extend,extended,83418,"InputArguments) << ""RooAbsPdf::generateBinned("" << GetName() << "") ERROR: No event count provided and p.d.f does not provide expected number of events"" << endl ;; 1689 return nullptr;; 1690 } else {; 1691 ; 1692 // Don't round in expectedData or extended mode; 1693 if (expectedData || extended) {; 1694 nEvents = expectedEvents(&whatVars) ;; 1695 } else {; 1696 nEvents = std::round(expectedEvents(&whatVars));; 1697 }; 1698 }; 1699 }; 1700 ; 1701 // Sample p.d.f. distribution; 1702 fillDataHist(hist.get(),&whatVars,1,true) ;; 1703 ; 1704 vector<int> histOut(hist->numEntries()) ;; 1705 double histMax(-1) ;; 1706 Int_t histOutSum(0) ;; 1707 for (int i=0 ; i<hist->numEntries() ; i++) {; 1708 hist->get(i) ;; 1709 if (expectedData) {; 1710 ; 1711 // Expected data, multiply p.d.f by nEvents; 1712 double w=hist->weight()*nEvents ;; 1713 hist->set(i, w, sqrt(w));; 1714 ; 1715 } else if (extended) {; 1716 ; 1717 // Extended mode, set contents to Poisson(pdf*nEvents); 1718 double w = RooRandom::randomGenerator()->Poisson(hist->weight()*nEvents) ;; 1719 hist->set(w,sqrt(w)) ;; 1720 ; 1721 } else {; 1722 ; 1723 // Regular mode, fill array of weights with Poisson(pdf*nEvents), but to not fill; 1724 // histogram yet.; 1725 if (hist->weight()>histMax) {; 1726 histMax = hist->weight() ;; 1727 }; 1728 histOut[i] = RooRandom::randomGenerator()->Poisson(hist->weight()*nEvents) ;; 1729 histOutSum += histOut[i] ;; 1730 }; 1731 }; 1732 ; 1733 ; 1734 if (!expectedData && !extended) {; 1735 ; 1736 // Second pass for regular mode - Trim/Extend dataset to exact number of entries; 1737 ; 1738 // Calculate difference between what is generated so far and what is requested; 1739 Int_t nEvtExtra = std::abs(Int_t(nEvents)-histOutSum) ;; 1740 Int_t wgt = (histOutSum>nEvents) ? -1 : 1 ;; 1741 ; 1742 // Perform simple binned accept/reject procedure to get to exact event count; 1743 std::size_t counter = 0;; 1744 bool havePrintedInfo = false;; 1745 while(nEvtExtra>0) {; 1746 ; 1747 Int_t ibinRand = RooRa",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:84000,Modifiability,extend,extended,84000,"14 ; 1715 } else if (extended) {; 1716 ; 1717 // Extended mode, set contents to Poisson(pdf*nEvents); 1718 double w = RooRandom::randomGenerator()->Poisson(hist->weight()*nEvents) ;; 1719 hist->set(w,sqrt(w)) ;; 1720 ; 1721 } else {; 1722 ; 1723 // Regular mode, fill array of weights with Poisson(pdf*nEvents), but to not fill; 1724 // histogram yet.; 1725 if (hist->weight()>histMax) {; 1726 histMax = hist->weight() ;; 1727 }; 1728 histOut[i] = RooRandom::randomGenerator()->Poisson(hist->weight()*nEvents) ;; 1729 histOutSum += histOut[i] ;; 1730 }; 1731 }; 1732 ; 1733 ; 1734 if (!expectedData && !extended) {; 1735 ; 1736 // Second pass for regular mode - Trim/Extend dataset to exact number of entries; 1737 ; 1738 // Calculate difference between what is generated so far and what is requested; 1739 Int_t nEvtExtra = std::abs(Int_t(nEvents)-histOutSum) ;; 1740 Int_t wgt = (histOutSum>nEvents) ? -1 : 1 ;; 1741 ; 1742 // Perform simple binned accept/reject procedure to get to exact event count; 1743 std::size_t counter = 0;; 1744 bool havePrintedInfo = false;; 1745 while(nEvtExtra>0) {; 1746 ; 1747 Int_t ibinRand = RooRandom::randomGenerator()->Integer(hist->numEntries()) ;; 1748 hist->get(ibinRand) ;; 1749 double ranY = RooRandom::randomGenerator()->Uniform(histMax) ;; 1750 ; 1751 if (ranY<hist->weight()) {; 1752 if (wgt==1) {; 1753 histOut[ibinRand]++ ;; 1754 } else {; 1755 // If weight is negative, prior bin content must be at least 1; 1756 if (histOut[ibinRand]>0) {; 1757 histOut[ibinRand]-- ;; 1758 } else {; 1759 continue ;; 1760 }; 1761 }; 1762 nEvtExtra-- ;; 1763 }; 1764 ; 1765 if ((counter++ > 10*nEvents || nEvents > 1.E7) && !havePrintedInfo) {; 1766 havePrintedInfo = true;; 1767 coutP(Generation) << ""RooAbsPdf::generateBinned("" << GetName() << "") Performing costly accept/reject sampling. If this takes too long, use ""; 1768 << ""extended mode to speed up the process."" << std::endl;; 1769 }; 1770 }; 1771 ; 1772 // Transfer working array to histogram; 1773 for (int ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:85260,Modifiability,extend,extended,85260,";; 1740 Int_t wgt = (histOutSum>nEvents) ? -1 : 1 ;; 1741 ; 1742 // Perform simple binned accept/reject procedure to get to exact event count; 1743 std::size_t counter = 0;; 1744 bool havePrintedInfo = false;; 1745 while(nEvtExtra>0) {; 1746 ; 1747 Int_t ibinRand = RooRandom::randomGenerator()->Integer(hist->numEntries()) ;; 1748 hist->get(ibinRand) ;; 1749 double ranY = RooRandom::randomGenerator()->Uniform(histMax) ;; 1750 ; 1751 if (ranY<hist->weight()) {; 1752 if (wgt==1) {; 1753 histOut[ibinRand]++ ;; 1754 } else {; 1755 // If weight is negative, prior bin content must be at least 1; 1756 if (histOut[ibinRand]>0) {; 1757 histOut[ibinRand]-- ;; 1758 } else {; 1759 continue ;; 1760 }; 1761 }; 1762 nEvtExtra-- ;; 1763 }; 1764 ; 1765 if ((counter++ > 10*nEvents || nEvents > 1.E7) && !havePrintedInfo) {; 1766 havePrintedInfo = true;; 1767 coutP(Generation) << ""RooAbsPdf::generateBinned("" << GetName() << "") Performing costly accept/reject sampling. If this takes too long, use ""; 1768 << ""extended mode to speed up the process."" << std::endl;; 1769 }; 1770 }; 1771 ; 1772 // Transfer working array to histogram; 1773 for (int i=0 ; i<hist->numEntries() ; i++) {; 1774 hist->get(i) ;; 1775 hist->set(histOut[i],sqrt(1.0*histOut[i])) ;; 1776 }; 1777 ; 1778 } else if (expectedData) {; 1779 ; 1780 // Second pass for expectedData mode -- Normalize to exact number of requested events; 1781 // Minor difference may be present in first round due to difference between; 1782 // bin average and bin integral in sampling bins; 1783 double corr = nEvents/hist->sumEntries() ;; 1784 for (int i=0 ; i<hist->numEntries() ; i++) {; 1785 hist->get(i) ;; 1786 hist->set(hist->weight()*corr,sqrt(hist->weight()*corr)) ;; 1787 }; 1788 ; 1789 }; 1790 ; 1791 return RooFit::makeOwningPtr(std::move(hist));; 1792}; 1793 ; 1794 ; 1795 ; 1796////////////////////////////////////////////////////////////////////////////////; 1797/// Special generator interface for generation of 'global observables' -- for RooS",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:87007,Modifiability,extend,extend,87007,"ist->weight()*corr)) ;; 1787 }; 1788 ; 1789 }; 1790 ; 1791 return RooFit::makeOwningPtr(std::move(hist));; 1792}; 1793 ; 1794 ; 1795 ; 1796////////////////////////////////////////////////////////////////////////////////; 1797/// Special generator interface for generation of 'global observables' -- for RooStats tools; 1798 ; 1799RooFit::OwningPtr<RooDataSet> RooAbsPdf::generateSimGlobal(const RooArgSet& whatVars, Int_t nEvents); 1800{; 1801 return generate(whatVars,nEvents) ;; 1802}; 1803 ; 1804namespace {; 1805void removeRangeOverlap(std::vector<std::pair<double, double>>& ranges) {; 1806 //Sort from left to right; 1807 std::sort(ranges.begin(), ranges.end());; 1808 ; 1809 for (auto it = ranges.begin(); it != ranges.end(); ++it) {; 1810 double& startL = it->first;; 1811 double& endL = it->second;; 1812 ; 1813 for (auto innerIt = it+1; innerIt != ranges.end(); ++innerIt) {; 1814 const double startR = innerIt->first;; 1815 const double endR = innerIt->second;; 1816 ; 1817 if (startL <= startR && startR <= endL) {; 1818 //Overlapping ranges, extend left one; 1819 endL = std::max(endL, endR);; 1820 *innerIt = make_pair(0., 0.);; 1821 }; 1822 }; 1823 }; 1824 ; 1825 auto newEnd = std::remove_if(ranges.begin(), ranges.end(),; 1826 [](const std::pair<double,double>& input){; 1827 return input.first == input.second;; 1828 });; 1829 ranges.erase(newEnd, ranges.end());; 1830}; 1831}; 1832 ; 1833 ; 1834////////////////////////////////////////////////////////////////////////////////; 1835/// Plot (project) PDF on specified frame.; 1836/// - If a PDF is plotted in an empty frame, it; 1837/// will show a unit-normalized curve in the frame variable. When projecting a multi-; 1838/// dimensional PDF onto the frame axis, hidden parameters are taken are taken at; 1839/// their current value.; 1840/// - If a PDF is plotted in a frame in which a dataset has already been plotted, it will; 1841/// show a projection integrated over all variables that were present in the shown; 1842/// data",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:87604,Modifiability,variab,variable,87604,"t from left to right; 1807 std::sort(ranges.begin(), ranges.end());; 1808 ; 1809 for (auto it = ranges.begin(); it != ranges.end(); ++it) {; 1810 double& startL = it->first;; 1811 double& endL = it->second;; 1812 ; 1813 for (auto innerIt = it+1; innerIt != ranges.end(); ++innerIt) {; 1814 const double startR = innerIt->first;; 1815 const double endR = innerIt->second;; 1816 ; 1817 if (startL <= startR && startR <= endL) {; 1818 //Overlapping ranges, extend left one; 1819 endL = std::max(endL, endR);; 1820 *innerIt = make_pair(0., 0.);; 1821 }; 1822 }; 1823 }; 1824 ; 1825 auto newEnd = std::remove_if(ranges.begin(), ranges.end(),; 1826 [](const std::pair<double,double>& input){; 1827 return input.first == input.second;; 1828 });; 1829 ranges.erase(newEnd, ranges.end());; 1830}; 1831}; 1832 ; 1833 ; 1834////////////////////////////////////////////////////////////////////////////////; 1835/// Plot (project) PDF on specified frame.; 1836/// - If a PDF is plotted in an empty frame, it; 1837/// will show a unit-normalized curve in the frame variable. When projecting a multi-; 1838/// dimensional PDF onto the frame axis, hidden parameters are taken are taken at; 1839/// their current value.; 1840/// - If a PDF is plotted in a frame in which a dataset has already been plotted, it will; 1841/// show a projection integrated over all variables that were present in the shown; 1842/// dataset (except for the one on the x-axis). The normalization of the curve will; 1843/// be adjusted to the event count of the plotted dataset. An informational message; 1844/// will be printed for each projection step that is performed.; 1845/// - If a PDF is plotted in a frame showing a dataset *after* a fit, the above happens,; 1846/// but the PDF will be drawn and normalised only in the fit range. If this is not desired,; 1847/// plotting and normalisation range can be overridden using Range() and NormRange() as; 1848/// documented in the table below.; 1849///; 1850/// This function takes the fo",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:87898,Modifiability,variab,variables,87898,">first;; 1815 const double endR = innerIt->second;; 1816 ; 1817 if (startL <= startR && startR <= endL) {; 1818 //Overlapping ranges, extend left one; 1819 endL = std::max(endL, endR);; 1820 *innerIt = make_pair(0., 0.);; 1821 }; 1822 }; 1823 }; 1824 ; 1825 auto newEnd = std::remove_if(ranges.begin(), ranges.end(),; 1826 [](const std::pair<double,double>& input){; 1827 return input.first == input.second;; 1828 });; 1829 ranges.erase(newEnd, ranges.end());; 1830}; 1831}; 1832 ; 1833 ; 1834////////////////////////////////////////////////////////////////////////////////; 1835/// Plot (project) PDF on specified frame.; 1836/// - If a PDF is plotted in an empty frame, it; 1837/// will show a unit-normalized curve in the frame variable. When projecting a multi-; 1838/// dimensional PDF onto the frame axis, hidden parameters are taken are taken at; 1839/// their current value.; 1840/// - If a PDF is plotted in a frame in which a dataset has already been plotted, it will; 1841/// show a projection integrated over all variables that were present in the shown; 1842/// dataset (except for the one on the x-axis). The normalization of the curve will; 1843/// be adjusted to the event count of the plotted dataset. An informational message; 1844/// will be printed for each projection step that is performed.; 1845/// - If a PDF is plotted in a frame showing a dataset *after* a fit, the above happens,; 1846/// but the PDF will be drawn and normalised only in the fit range. If this is not desired,; 1847/// plotting and normalisation range can be overridden using Range() and NormRange() as; 1848/// documented in the table below.; 1849///; 1850/// This function takes the following named arguments (for more arguments, see also; 1851/// RooAbsReal::plotOn(RooPlot*,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,; 1852/// const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,; 1853/// const RooCmdArg&) const ); 1854///; 1855///; 1856/// <t",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:92906,Modifiability,variab,variables,92906,"category.; 1890/// The slice is positioned at the given label value. Multiple Slice() commands can be given to specify slices; 1891/// in multiple observables, e.g.; 1892/// ```{.cpp}; 1893/// pdf.plotOn(frame, Slice(tagCategory, ""2tag""), Slice(jetCategory, ""3jet""));; 1894/// ```; 1895/// <tr><td> `Project(const RooArgSet& set)` <td> Override default projection behaviour by projecting; 1896/// over observables given in set, completely ignoring the default projection behavior. Advanced use only.; 1897/// <tr><td> `ProjWData(const RooAbsData& d)` <td> Override default projection _technique_ (integration). For observables; 1898/// present in given dataset projection of PDF is achieved by constructing an average over all observable; 1899/// values in given set. Consult RooFit plotting tutorial for further explanation of meaning & use of this technique; 1900/// <tr><td> `ProjWData(const RooArgSet& s, const RooAbsData& d)` <td> As above but only consider subset 's' of; 1901/// observables in dataset 'd' for projection through data averaging; 1902/// <tr><td> `ProjectionRange(const char* rn)` <td> When projecting the PDF onto the plot axis, it is usually integrated; 1903/// over the full range of the invisible variables. The ProjectionRange overrides this.; 1904/// This is useful if the PDF was fitted in a limited range in y, but it is now projected onto x. If; 1905/// `ProjectionRange(""<name of fit range>"")` is passed, the projection is normalised correctly.; 1906///; 1907/// <tr><th> Type of argument <th> Plotting control; 1908/// <tr><td> `LineStyle(Int_t style)` <td> Select line style by ROOT line style code, default is solid; 1909/// <tr><td> `LineColor(Int_t color)` <td> Select line color by ROOT color code, default is blue; 1910/// <tr><td> `LineWidth(Int_t width)` <td> Select line with in pixels, default is 3; 1911/// <tr><td> `FillStyle(Int_t style)` <td> Select fill style, default is not filled. If a filled style is selected,; 1912/// also use VLines() to add ver",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:94052,Modifiability,variab,variable,94052,"e in y, but it is now projected onto x. If; 1905/// `ProjectionRange(""<name of fit range>"")` is passed, the projection is normalised correctly.; 1906///; 1907/// <tr><th> Type of argument <th> Plotting control; 1908/// <tr><td> `LineStyle(Int_t style)` <td> Select line style by ROOT line style code, default is solid; 1909/// <tr><td> `LineColor(Int_t color)` <td> Select line color by ROOT color code, default is blue; 1910/// <tr><td> `LineWidth(Int_t width)` <td> Select line with in pixels, default is 3; 1911/// <tr><td> `FillStyle(Int_t style)` <td> Select fill style, default is not filled. If a filled style is selected,; 1912/// also use VLines() to add vertical downward lines at end of curve to ensure proper closure; 1913/// <tr><td> `FillColor(Int_t color)` <td> Select fill color by ROOT color code; 1914/// <tr><td> `Range(const char* name)` <td> Only draw curve in range defined by given name. Multiple comma-separated ranges can be given.; 1915/// An empty string """" or `nullptr` means to use the default range of the variable.; 1916/// <tr><td> `Range(double lo, double hi)` <td> Only draw curve in specified range; 1917/// <tr><td> `VLines()` <td> Add vertical lines to y=0 at end points of curve; 1918/// <tr><td> `Precision(double eps)` <td> Control precision of drawn curve w.r.t to scale of plot, default is 1e-3. A higher precision will; 1919/// result in more and more densely spaced curve points. A negative precision value will disable; 1920/// adaptive point spacing and restrict sampling to the grid point of points defined by the binning; 1921/// of the plotted observable (recommended for expensive functions such as profile likelihoods); 1922/// <tr><td> `Invisible(bool flag)` <td> Add curve to frame, but do not display. Useful in combination AddTo(); 1923/// <tr><td> `VisualizeError(const RooFitResult& fitres, double Z=1, bool linearMethod=true)`; 1924/// <td> Visualize the uncertainty on the parameters, as given in fitres, at 'Z' sigma.; 1925/// The linear met",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:94489,Modifiability,adapt,adaptive,94489,"t filled. If a filled style is selected,; 1912/// also use VLines() to add vertical downward lines at end of curve to ensure proper closure; 1913/// <tr><td> `FillColor(Int_t color)` <td> Select fill color by ROOT color code; 1914/// <tr><td> `Range(const char* name)` <td> Only draw curve in range defined by given name. Multiple comma-separated ranges can be given.; 1915/// An empty string """" or `nullptr` means to use the default range of the variable.; 1916/// <tr><td> `Range(double lo, double hi)` <td> Only draw curve in specified range; 1917/// <tr><td> `VLines()` <td> Add vertical lines to y=0 at end points of curve; 1918/// <tr><td> `Precision(double eps)` <td> Control precision of drawn curve w.r.t to scale of plot, default is 1e-3. A higher precision will; 1919/// result in more and more densely spaced curve points. A negative precision value will disable; 1920/// adaptive point spacing and restrict sampling to the grid point of points defined by the binning; 1921/// of the plotted observable (recommended for expensive functions such as profile likelihoods); 1922/// <tr><td> `Invisible(bool flag)` <td> Add curve to frame, but do not display. Useful in combination AddTo(); 1923/// <tr><td> `VisualizeError(const RooFitResult& fitres, double Z=1, bool linearMethod=true)`; 1924/// <td> Visualize the uncertainty on the parameters, as given in fitres, at 'Z' sigma.; 1925/// The linear method is fast but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made.; 1926/// Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much) longer to calculate; 1927/// \note To include the uncertainty from the expected number of events,; 1928/// the Normalization() argument with `ScaleType` `RooAbsReal::RelativeExpected` has to be passed, e.g.; 1929/// ```{.cpp}; 1930/// pdf.plotOn(frame, VisualizeError(fitResult), Normalization(1.0, R",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:100036,Modifiability,extend,extendable,100036,"td::string nameSuffix ;; 2001 if (compSpec && strlen(compSpec)>0) {; 2002 nameSuffix.append(""_Comp["") ;; 2003 nameSuffix.append(compSpec) ;; 2004 nameSuffix.append(""]"") ;; 2005 } else if (compSet) {; 2006 nameSuffix += ""_Comp["" + compSet->contentsString() + ""]"";; 2007 }; 2008 ; 2009 // Remove PDF-only commands from command list; 2010 RooCmdConfig::stripCmdList(cmdList,""SelectCompSet,SelectCompSpec"") ;; 2011 ; 2012 // Adjust normalization, if so requested; 2013 if (asymCat) {; 2014 RooCmdArg cnsuffix(""CurveNameSuffix"",0,0,0,0,nameSuffix.c_str(),nullptr,nullptr,nullptr) ;; 2015 cmdList.Add(&cnsuffix);; 2016 return RooAbsReal::plotOn(frame,cmdList) ;; 2017 }; 2018 ; 2019 // More sanity checks; 2020 double nExpected(1) ;; 2021 if (stype==RelativeExpected) {; 2022 if (!canBeExtended()) {; 2023 coutE(Plotting) << ""RooAbsPdf::plotOn("" << GetName(); 2024 << ""): ERROR the 'Expected' scale option can only be used on extendable PDFs"" << endl ;; 2025 return frame ;; 2026 }; 2027 frame->updateNormVars(*frame->getPlotVar()) ;; 2028 nExpected = expectedEvents(frame->getNormVars()) ;; 2029 }; 2030 ; 2031 if (stype != Raw) {; 2032 ; 2033 if (frame->getFitRangeNEvt() && stype==Relative) {; 2034 ; 2035 bool hasCustomRange(false);; 2036 bool adjustNorm(false);; 2037 ; 2038 std::vector<pair<double,double> > rangeLim;; 2039 ; 2040 // Retrieve plot range to be able to adjust normalization to data; 2041 if (pc.hasProcessed(""Range"")) {; 2042 ; 2043 double rangeLo = pc.getDouble(""rangeLo"") ;; 2044 double rangeHi = pc.getDouble(""rangeHi"") ;; 2045 rangeLim.push_back(make_pair(rangeLo,rangeHi)) ;; 2046 adjustNorm = pc.getInt(""rangeAdjustNorm"") ;; 2047 hasCustomRange = true ;; 2048 ; 2049 coutI(Plotting) << ""RooAbsPdf::plotOn("" << GetName() << "") only plotting range [""; 2050 << rangeLo << "","" << rangeHi << ""]"" ;; 2051 if (!pc.hasProcessed(""NormRange"")) {; 2052 ccoutI(Plotting) << "", curve is normalized to data in "" << (adjustNorm?""given"":""full"") << "" range"" << endl ;; 2053 } else {; 2054 ccoutI(P",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:101632,Modifiability,variab,variable,101632,"pc.getDouble(""rangeLo"") ;; 2044 double rangeHi = pc.getDouble(""rangeHi"") ;; 2045 rangeLim.push_back(make_pair(rangeLo,rangeHi)) ;; 2046 adjustNorm = pc.getInt(""rangeAdjustNorm"") ;; 2047 hasCustomRange = true ;; 2048 ; 2049 coutI(Plotting) << ""RooAbsPdf::plotOn("" << GetName() << "") only plotting range [""; 2050 << rangeLo << "","" << rangeHi << ""]"" ;; 2051 if (!pc.hasProcessed(""NormRange"")) {; 2052 ccoutI(Plotting) << "", curve is normalized to data in "" << (adjustNorm?""given"":""full"") << "" range"" << endl ;; 2053 } else {; 2054 ccoutI(Plotting) << endl ;; 2055 }; 2056 ; 2057 nameSuffix.append(Form(""_Range[%f_%f]"",rangeLo,rangeHi)) ;; 2058 ; 2059 } else if (pc.hasProcessed(""RangeWithName"")) {; 2060 ; 2061 for (const std::string& rangeNameToken : ROOT::Split(pc.getString(""rangeName"", """", false), "","")) {; 2062 const char* thisRangeName = rangeNameToken.empty() ? nullptr : rangeNameToken.c_str();; 2063 if (thisRangeName && !frame->getPlotVar()->hasRange(thisRangeName)) {; 2064 coutE(Plotting) << ""Range '"" << rangeNameToken << ""' not defined for variable '""; 2065 << frame->getPlotVar()->GetName() << ""'. Ignoring ..."" << std::endl;; 2066 continue;; 2067 }; 2068 rangeLim.push_back(frame->getPlotVar()->getRange(thisRangeName));; 2069 }; 2070 adjustNorm = pc.getInt(""rangeWNAdjustNorm"") ;; 2071 hasCustomRange = true ;; 2072 ; 2073 coutI(Plotting) << ""RooAbsPdf::plotOn("" << GetName() << "") only plotting range '"" << pc.getString(""rangeName"", """", false) << ""'"" ;; 2074 if (!pc.hasProcessed(""NormRange"")) {; 2075 ccoutI(Plotting) << "", curve is normalized to data in "" << (adjustNorm?""given"":""full"") << "" range"" << endl ;; 2076 } else {; 2077 ccoutI(Plotting) << endl ;; 2078 }; 2079 ; 2080 nameSuffix.append(""_Range["" + std::string(pc.getString(""rangeName"")) + ""]"");; 2081 }; 2082 // Specification of a normalization range override those in a regular range; 2083 if (pc.hasProcessed(""NormRange"")) {; 2084 rangeLim.clear();; 2085 for (const auto& rangeNameToken : ROOT::Split(pc.getString(""normRa",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:102855,Modifiability,variab,variable,102855,"ngeName));; 2069 }; 2070 adjustNorm = pc.getInt(""rangeWNAdjustNorm"") ;; 2071 hasCustomRange = true ;; 2072 ; 2073 coutI(Plotting) << ""RooAbsPdf::plotOn("" << GetName() << "") only plotting range '"" << pc.getString(""rangeName"", """", false) << ""'"" ;; 2074 if (!pc.hasProcessed(""NormRange"")) {; 2075 ccoutI(Plotting) << "", curve is normalized to data in "" << (adjustNorm?""given"":""full"") << "" range"" << endl ;; 2076 } else {; 2077 ccoutI(Plotting) << endl ;; 2078 }; 2079 ; 2080 nameSuffix.append(""_Range["" + std::string(pc.getString(""rangeName"")) + ""]"");; 2081 }; 2082 // Specification of a normalization range override those in a regular range; 2083 if (pc.hasProcessed(""NormRange"")) {; 2084 rangeLim.clear();; 2085 for (const auto& rangeNameToken : ROOT::Split(pc.getString(""normRangeName"", """", false), "","")) {; 2086 const char* thisRangeName = rangeNameToken.empty() ? nullptr : rangeNameToken.c_str();; 2087 if (thisRangeName && !frame->getPlotVar()->hasRange(thisRangeName)) {; 2088 coutE(Plotting) << ""Range '"" << rangeNameToken << ""' not defined for variable '""; 2089 << frame->getPlotVar()->GetName() << ""'. Ignoring ..."" << std::endl;; 2090 continue;; 2091 }; 2092 rangeLim.push_back(frame->getPlotVar()->getRange(thisRangeName));; 2093 }; 2094 adjustNorm = true ;; 2095 hasCustomRange = true ;; 2096 coutI(Plotting) << ""RooAbsPdf::plotOn("" << GetName() << "") p.d.f. curve is normalized using explicit choice of ranges '"" << pc.getString(""normRangeName"", """", false) << ""'"" << endl ;; 2097 ; 2098 nameSuffix.append(""_NormRange["" + std::string(pc.getString(""rangeName"")) + ""]"");; 2099 ; 2100 }; 2101 ; 2102 if (hasCustomRange && adjustNorm) {; 2103 // If overlapping ranges were given, remove them now; 2104 const std::size_t oldSize = rangeLim.size();; 2105 removeRangeOverlap(rangeLim);; 2106 ; 2107 if (oldSize != rangeLim.size() && !pc.hasProcessed(""NormRange"")) {; 2108 // User gave overlapping ranges. This leads to double-counting events and integrals, and must; 2109 // therefore be avoided.",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:108703,Modifiability,extend,extendable,108703,"n three different ways. The interpretation; 2211/// is controlled by ScaleType; 2212/// ```; 2213/// Relative - Scale factor is applied on top of PDF normalization scale factor; 2214/// NumEvent - Scale factor is interpreted as a number of events. The surface area; 2215/// under the PDF curve will match that of a histogram containing the specified; 2216/// number of event; 2217/// Raw - Scale factor is applied to the raw (projected) probability density.; 2218/// Not too useful, option provided for completeness.; 2219/// ```; 2220// coverity[PASS_BY_VALUE]; 2221RooPlot* RooAbsPdf::plotOn(RooPlot *frame, PlotOpt o) const; 2222{; 2223 ; 2224 // Sanity checks; 2225 if (plotSanityChecks(frame)) return frame ;; 2226 ; 2227 // More sanity checks; 2228 double nExpected(1) ;; 2229 if (o.stype==RelativeExpected) {; 2230 if (!canBeExtended()) {; 2231 coutE(Plotting) << ""RooAbsPdf::plotOn("" << GetName(); 2232 << ""): ERROR the 'Expected' scale option can only be used on extendable PDFs"" << endl ;; 2233 return frame ;; 2234 }; 2235 frame->updateNormVars(*frame->getPlotVar()) ;; 2236 nExpected = expectedEvents(frame->getNormVars()) ;; 2237 }; 2238 ; 2239 // Adjust normalization, if so requested; 2240 if (o.stype != Raw) {; 2241 ; 2242 if (frame->getFitRangeNEvt() && o.stype==Relative) {; 2243 // If non-default plotting range is specified, adjust number of events in fit range; 2244 o.scaleFactor *= frame->getFitRangeNEvt()/nExpected ;; 2245 } else if (o.stype==RelativeExpected) {; 2246 o.scaleFactor *= nExpected ;; 2247 } else if (o.stype==NumEvent) {; 2248 o.scaleFactor /= nExpected ;; 2249 }; 2250 o.scaleFactor *= frame->getFitRangeBinW() ;; 2251 }; 2252 frame->updateNormVars(*frame->getPlotVar()) ;; 2253 ; 2254 return RooAbsReal::plotOn(frame,o) ;; 2255}; 2256 ; 2257 ; 2258 ; 2259 ; 2260////////////////////////////////////////////////////////////////////////////////; 2261/// The following named arguments are supported; 2262/// <table>; 2263/// <tr><th> Type of CmdArg <th> Effect",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:115736,Modifiability,extend,extended,115736,"x->SetName((std::string(GetName()) + ""_paramBox"").c_str());; 2364 box->SetFillColor(0);; 2365 box->SetBorderSize(0);; 2366 box->SetTextAlign(12);; 2367 box->SetTextSize(0.04F);; 2368 box->SetFillStyle(0);; 2369 ; 2370 for (const auto param : params) {; 2371 auto var = static_cast<const RooRealVar*>(param);; 2372 if(var->isConstant() && !showConstants) continue;; 2373 ; 2374 std::unique_ptr<TString> formatted{formatCmd ? var->format(*formatCmd) : var->format(2, ""NELU"")};; 2375 box->AddText(formatted->Data());; 2376 }; 2377 ; 2378 // add the optional label if specified; 2379 if (showLabel) {; 2380 for (const auto& line : ROOT::Split(label, ""\n"")) {; 2381 box->AddText(line.c_str());; 2382 }; 2383 }; 2384 ; 2385 // Add box to frame; 2386 frame->addObject(box) ;; 2387 ; 2388 return frame ;; 2389}; 2390 ; 2391 ; 2392 ; 2393 ; 2394////////////////////////////////////////////////////////////////////////////////; 2395/// Return expected number of events from this p.d.f for use in extended; 2396/// likelihood calculations. This default implementation returns zero; 2397 ; 2398double RooAbsPdf::expectedEvents(const RooArgSet*) const; 2399{; 2400 return 0 ;; 2401}; 2402 ; 2403 ; 2404 ; 2405////////////////////////////////////////////////////////////////////////////////; 2406/// Change global level of verbosity for p.d.f. evaluations; 2407 ; 2408void RooAbsPdf::verboseEval(Int_t stat); 2409{; 2410 _verboseEval = stat ;; 2411}; 2412 ; 2413 ; 2414 ; 2415////////////////////////////////////////////////////////////////////////////////; 2416/// Return global level of verbosity for p.d.f. evaluations; 2417 ; 2418Int_t RooAbsPdf::verboseEval(); 2419{; 2420 return _verboseEval ;; 2421}; 2422 ; 2423 ; 2424 ; 2425////////////////////////////////////////////////////////////////////////////////; 2426/// Destructor of normalization cache element. If this element; 2427/// provides the 'current' normalization stored in RooAbsPdf::_norm; 2428/// zero _norm pointer here before object pointed to is",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:118986,Modifiability,variab,variables,118986,"ooFit::SupNormSet(nset)) ;; 2471}; 2472 ; 2473 ; 2474 ; 2475////////////////////////////////////////////////////////////////////////////////; 2476/// Create an object that represents the integral of the function over one or more observables listed in `iset`.; 2477/// The actual integration calculation is only performed when the return object is evaluated. The name; 2478/// of the integral object is automatically constructed from the name of the input function, the variables; 2479/// it integrates and the range integrates over; 2480///; 2481/// The following named arguments are accepted; 2482/// | Type of CmdArg | Effect on CDF; 2483/// | ---------------------|-------------------; 2484/// | SupNormSet(const RooArgSet&) | Observables over which should be normalized _in addition_ to the integration observables; 2485/// | ScanNumCdf() | Apply scanning technique if cdf integral involves numeric integration [ default ]; 2486/// | ScanAllCdf() | Always apply scanning technique; 2487/// | ScanNoCdf() | Never apply scanning technique; 2488/// | ScanParameters(Int_t nbins, Int_t intOrder) | Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf; 2489 ; 2490RooFit::OwningPtr<RooAbsReal> RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2,; 2491 const RooCmdArg& arg3, const RooCmdArg& arg4, const RooCmdArg& arg5,; 2492 const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdArg& arg8); 2493{; 2494 // Define configuration for this method; 2495 RooCmdConfig pc(""RooAbsReal::createCdf("" + std::string(GetName()) + "")"");; 2496 pc.defineSet(""supNormSet"",""SupNormSet"",0,nullptr) ;; 2497 pc.defineInt(""numScanBins"",""ScanParameters"",0,1000) ;; 2498 pc.defineInt(""intOrder"",""ScanParameters"",1,2) ;; 2499 pc.defineInt(""doScanNum"",""ScanNumCdf"",0,1) ;; 2500 pc.defineInt(""doScanAll"",""ScanAllCdf"",0,0) ;; 2501 pc.defineInt(""doScanNon"",""ScanNoCdf"",0,0) ;; 2502 pc.defineMutex(""ScanNumCdf"",""ScanAll",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:120042,Modifiability,config,configuration,120042,"ooFit::SupNormSet(nset)) ;; 2471}; 2472 ; 2473 ; 2474 ; 2475////////////////////////////////////////////////////////////////////////////////; 2476/// Create an object that represents the integral of the function over one or more observables listed in `iset`.; 2477/// The actual integration calculation is only performed when the return object is evaluated. The name; 2478/// of the integral object is automatically constructed from the name of the input function, the variables; 2479/// it integrates and the range integrates over; 2480///; 2481/// The following named arguments are accepted; 2482/// | Type of CmdArg | Effect on CDF; 2483/// | ---------------------|-------------------; 2484/// | SupNormSet(const RooArgSet&) | Observables over which should be normalized _in addition_ to the integration observables; 2485/// | ScanNumCdf() | Apply scanning technique if cdf integral involves numeric integration [ default ]; 2486/// | ScanAllCdf() | Always apply scanning technique; 2487/// | ScanNoCdf() | Never apply scanning technique; 2488/// | ScanParameters(Int_t nbins, Int_t intOrder) | Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf; 2489 ; 2490RooFit::OwningPtr<RooAbsReal> RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2,; 2491 const RooCmdArg& arg3, const RooCmdArg& arg4, const RooCmdArg& arg5,; 2492 const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdArg& arg8); 2493{; 2494 // Define configuration for this method; 2495 RooCmdConfig pc(""RooAbsReal::createCdf("" + std::string(GetName()) + "")"");; 2496 pc.defineSet(""supNormSet"",""SupNormSet"",0,nullptr) ;; 2497 pc.defineInt(""numScanBins"",""ScanParameters"",0,1000) ;; 2498 pc.defineInt(""intOrder"",""ScanParameters"",1,2) ;; 2499 pc.defineInt(""doScanNum"",""ScanNumCdf"",0,1) ;; 2500 pc.defineInt(""doScanAll"",""ScanAllCdf"",0,0) ;; 2501 pc.defineInt(""doScanNon"",""ScanNoCdf"",0,0) ;; 2502 pc.defineMutex(""ScanNumCdf"",""ScanAll",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:125024,Modifiability,config,configuration,125024,"(pdfParams) || !stripDisconnected) {; 2591 finalConstraints->add(*pdf) ;; 2592 } else {; 2593 coutI(Minimization) << ""RooAbsPdf::getAllConstraints("" << GetName() << "") omitting term "" << pdf->GetName(); 2594 << "" as constraint term as it does not share any parameters with the other pdfs in product. ""; 2595 << ""To force inclusion in likelihood, add an explicit Constrain() argument for the target parameter"" << endl ;; 2596 }; 2597 }; 2598 ; 2599 // Now remove from constrainedParams all parameters that occur exclusively in constraint term and not in regular pdf term; 2600 ; 2601 RooArgSet cexl;; 2602 conParams.selectCommon(constrainedParams, cexl);; 2603 cexl.remove(pdfParams,true,true) ;; 2604 constrainedParams.remove(cexl,true,true) ;; 2605 ; 2606 return finalConstraints ;; 2607}; 2608 ; 2609 ; 2610////////////////////////////////////////////////////////////////////////////////; 2611/// Returns the default numeric MC generator configuration for all RooAbsReals; 2612 ; 2613RooNumGenConfig* RooAbsPdf::defaultGeneratorConfig(); 2614{; 2615 return &RooNumGenConfig::defaultConfig() ;; 2616}; 2617 ; 2618 ; 2619////////////////////////////////////////////////////////////////////////////////; 2620/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2621/// If this object has no specialized configuration, a null pointer is returned; 2622 ; 2623RooNumGenConfig* RooAbsPdf::specialGeneratorConfig() const; 2624{; 2625 return _specGeneratorConfig.get();; 2626}; 2627 ; 2628 ; 2629 ; 2630////////////////////////////////////////////////////////////////////////////////; 2631/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2632/// If this object has no specialized configuration, a null pointer is returned,; 2633/// unless createOnTheFly is true in which case a clone of the default integrator; 2634/// configuration is created, installed as specialized configuration, and returned; 2635 ; 2636RooNumGenConfig* RooAbsPdf::specialGeneratorCo",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:125330,Modifiability,config,configuration,125330,"(pdfParams) || !stripDisconnected) {; 2591 finalConstraints->add(*pdf) ;; 2592 } else {; 2593 coutI(Minimization) << ""RooAbsPdf::getAllConstraints("" << GetName() << "") omitting term "" << pdf->GetName(); 2594 << "" as constraint term as it does not share any parameters with the other pdfs in product. ""; 2595 << ""To force inclusion in likelihood, add an explicit Constrain() argument for the target parameter"" << endl ;; 2596 }; 2597 }; 2598 ; 2599 // Now remove from constrainedParams all parameters that occur exclusively in constraint term and not in regular pdf term; 2600 ; 2601 RooArgSet cexl;; 2602 conParams.selectCommon(constrainedParams, cexl);; 2603 cexl.remove(pdfParams,true,true) ;; 2604 constrainedParams.remove(cexl,true,true) ;; 2605 ; 2606 return finalConstraints ;; 2607}; 2608 ; 2609 ; 2610////////////////////////////////////////////////////////////////////////////////; 2611/// Returns the default numeric MC generator configuration for all RooAbsReals; 2612 ; 2613RooNumGenConfig* RooAbsPdf::defaultGeneratorConfig(); 2614{; 2615 return &RooNumGenConfig::defaultConfig() ;; 2616}; 2617 ; 2618 ; 2619////////////////////////////////////////////////////////////////////////////////; 2620/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2621/// If this object has no specialized configuration, a null pointer is returned; 2622 ; 2623RooNumGenConfig* RooAbsPdf::specialGeneratorConfig() const; 2624{; 2625 return _specGeneratorConfig.get();; 2626}; 2627 ; 2628 ; 2629 ; 2630////////////////////////////////////////////////////////////////////////////////; 2631/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2632/// If this object has no specialized configuration, a null pointer is returned,; 2633/// unless createOnTheFly is true in which case a clone of the default integrator; 2634/// configuration is created, installed as specialized configuration, and returned; 2635 ; 2636RooNumGenConfig* RooAbsPdf::specialGeneratorCo",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:125410,Modifiability,config,configuration,125410,"t for the target parameter"" << endl ;; 2596 }; 2597 }; 2598 ; 2599 // Now remove from constrainedParams all parameters that occur exclusively in constraint term and not in regular pdf term; 2600 ; 2601 RooArgSet cexl;; 2602 conParams.selectCommon(constrainedParams, cexl);; 2603 cexl.remove(pdfParams,true,true) ;; 2604 constrainedParams.remove(cexl,true,true) ;; 2605 ; 2606 return finalConstraints ;; 2607}; 2608 ; 2609 ; 2610////////////////////////////////////////////////////////////////////////////////; 2611/// Returns the default numeric MC generator configuration for all RooAbsReals; 2612 ; 2613RooNumGenConfig* RooAbsPdf::defaultGeneratorConfig(); 2614{; 2615 return &RooNumGenConfig::defaultConfig() ;; 2616}; 2617 ; 2618 ; 2619////////////////////////////////////////////////////////////////////////////////; 2620/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2621/// If this object has no specialized configuration, a null pointer is returned; 2622 ; 2623RooNumGenConfig* RooAbsPdf::specialGeneratorConfig() const; 2624{; 2625 return _specGeneratorConfig.get();; 2626}; 2627 ; 2628 ; 2629 ; 2630////////////////////////////////////////////////////////////////////////////////; 2631/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2632/// If this object has no specialized configuration, a null pointer is returned,; 2633/// unless createOnTheFly is true in which case a clone of the default integrator; 2634/// configuration is created, installed as specialized configuration, and returned; 2635 ; 2636RooNumGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generato",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:125729,Modifiability,config,configuration,125729,"01 RooArgSet cexl;; 2602 conParams.selectCommon(constrainedParams, cexl);; 2603 cexl.remove(pdfParams,true,true) ;; 2604 constrainedParams.remove(cexl,true,true) ;; 2605 ; 2606 return finalConstraints ;; 2607}; 2608 ; 2609 ; 2610////////////////////////////////////////////////////////////////////////////////; 2611/// Returns the default numeric MC generator configuration for all RooAbsReals; 2612 ; 2613RooNumGenConfig* RooAbsPdf::defaultGeneratorConfig(); 2614{; 2615 return &RooNumGenConfig::defaultConfig() ;; 2616}; 2617 ; 2618 ; 2619////////////////////////////////////////////////////////////////////////////////; 2620/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2621/// If this object has no specialized configuration, a null pointer is returned; 2622 ; 2623RooNumGenConfig* RooAbsPdf::specialGeneratorConfig() const; 2624{; 2625 return _specGeneratorConfig.get();; 2626}; 2627 ; 2628 ; 2629 ; 2630////////////////////////////////////////////////////////////////////////////////; 2631/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2632/// If this object has no specialized configuration, a null pointer is returned,; 2633/// unless createOnTheFly is true in which case a clone of the default integrator; 2634/// configuration is created, installed as specialized configuration, and returned; 2635 ; 2636RooNumGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooA",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:125809,Modifiability,config,configuration,125809,"on for all RooAbsReals; 2612 ; 2613RooNumGenConfig* RooAbsPdf::defaultGeneratorConfig(); 2614{; 2615 return &RooNumGenConfig::defaultConfig() ;; 2616}; 2617 ; 2618 ; 2619////////////////////////////////////////////////////////////////////////////////; 2620/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2621/// If this object has no specialized configuration, a null pointer is returned; 2622 ; 2623RooNumGenConfig* RooAbsPdf::specialGeneratorConfig() const; 2624{; 2625 return _specGeneratorConfig.get();; 2626}; 2627 ; 2628 ; 2629 ; 2630////////////////////////////////////////////////////////////////////////////////; 2631/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2632/// If this object has no specialized configuration, a null pointer is returned,; 2633/// unless createOnTheFly is true in which case a clone of the default integrator; 2634/// configuration is created, installed as specialized configuration, and returned; 2635 ; 2636RooNumGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooAbsReals is returned; 2650 ; 2651const RooNumGenConfig* RooAbsPdf::getGeneratorConfig() const; 2652{; 2653 const RooNumGenConfig* config = specialGeneratorConfig() ;; 2654 if (config) return config ;; 2655 return defaultGeneratorConfig() ;; 2656}; 2657 ; 2658 ; 2659 ; 2660////////////////////////////////////////////////////////////////////////////////; 2661/// Set the ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:125948,Modifiability,config,configuration,125948,"on for all RooAbsReals; 2612 ; 2613RooNumGenConfig* RooAbsPdf::defaultGeneratorConfig(); 2614{; 2615 return &RooNumGenConfig::defaultConfig() ;; 2616}; 2617 ; 2618 ; 2619////////////////////////////////////////////////////////////////////////////////; 2620/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2621/// If this object has no specialized configuration, a null pointer is returned; 2622 ; 2623RooNumGenConfig* RooAbsPdf::specialGeneratorConfig() const; 2624{; 2625 return _specGeneratorConfig.get();; 2626}; 2627 ; 2628 ; 2629 ; 2630////////////////////////////////////////////////////////////////////////////////; 2631/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2632/// If this object has no specialized configuration, a null pointer is returned,; 2633/// unless createOnTheFly is true in which case a clone of the default integrator; 2634/// configuration is created, installed as specialized configuration, and returned; 2635 ; 2636RooNumGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooAbsReals is returned; 2650 ; 2651const RooNumGenConfig* RooAbsPdf::getGeneratorConfig() const; 2652{; 2653 const RooNumGenConfig* config = specialGeneratorConfig() ;; 2654 if (config) return config ;; 2655 return defaultGeneratorConfig() ;; 2656}; 2657 ; 2658 ; 2659 ; 2660////////////////////////////////////////////////////////////////////////////////; 2661/// Set the ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:125999,Modifiability,config,configuration,125999,"on for all RooAbsReals; 2612 ; 2613RooNumGenConfig* RooAbsPdf::defaultGeneratorConfig(); 2614{; 2615 return &RooNumGenConfig::defaultConfig() ;; 2616}; 2617 ; 2618 ; 2619////////////////////////////////////////////////////////////////////////////////; 2620/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2621/// If this object has no specialized configuration, a null pointer is returned; 2622 ; 2623RooNumGenConfig* RooAbsPdf::specialGeneratorConfig() const; 2624{; 2625 return _specGeneratorConfig.get();; 2626}; 2627 ; 2628 ; 2629 ; 2630////////////////////////////////////////////////////////////////////////////////; 2631/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2632/// If this object has no specialized configuration, a null pointer is returned,; 2633/// unless createOnTheFly is true in which case a clone of the default integrator; 2634/// configuration is created, installed as specialized configuration, and returned; 2635 ; 2636RooNumGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooAbsReals is returned; 2650 ; 2651const RooNumGenConfig* RooAbsPdf::getGeneratorConfig() const; 2652{; 2653 const RooNumGenConfig* config = specialGeneratorConfig() ;; 2654 if (config) return config ;; 2655 return defaultGeneratorConfig() ;; 2656}; 2657 ; 2658 ; 2659 ; 2660////////////////////////////////////////////////////////////////////////////////; 2661/// Set the ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:126467,Modifiability,config,configuration,126467,"alized configuration, a null pointer is returned; 2622 ; 2623RooNumGenConfig* RooAbsPdf::specialGeneratorConfig() const; 2624{; 2625 return _specGeneratorConfig.get();; 2626}; 2627 ; 2628 ; 2629 ; 2630////////////////////////////////////////////////////////////////////////////////; 2631/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2632/// If this object has no specialized configuration, a null pointer is returned,; 2633/// unless createOnTheFly is true in which case a clone of the default integrator; 2634/// configuration is created, installed as specialized configuration, and returned; 2635 ; 2636RooNumGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooAbsReals is returned; 2650 ; 2651const RooNumGenConfig* RooAbsPdf::getGeneratorConfig() const; 2652{; 2653 const RooNumGenConfig* config = specialGeneratorConfig() ;; 2654 if (config) return config ;; 2655 return defaultGeneratorConfig() ;; 2656}; 2657 ; 2658 ; 2659 ; 2660////////////////////////////////////////////////////////////////////////////////; 2661/// Set the given configuration as default numeric MC generator; 2662/// configuration for this object; 2663 ; 2664void RooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); 2665{; 2666 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(config);; 2667}; 2668 ; 2669 ; 2670 ; 2671////////////////////////////////////////////////////////////////////////////////; 2672//",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:126529,Modifiability,config,configuration,126529,"umGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooAbsReals is returned; 2650 ; 2651const RooNumGenConfig* RooAbsPdf::getGeneratorConfig() const; 2652{; 2653 const RooNumGenConfig* config = specialGeneratorConfig() ;; 2654 if (config) return config ;; 2655 return defaultGeneratorConfig() ;; 2656}; 2657 ; 2658 ; 2659 ; 2660////////////////////////////////////////////////////////////////////////////////; 2661/// Set the given configuration as default numeric MC generator; 2662/// configuration for this object; 2663 ; 2664void RooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); 2665{; 2666 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(config);; 2667}; 2668 ; 2669 ; 2670 ; 2671////////////////////////////////////////////////////////////////////////////////; 2672/// Remove the specialized numeric MC generator configuration associated; 2673/// with this object; 2674 ; 2675void RooAbsPdf::setGeneratorConfig(); 2676{; 2677 _specGeneratorConfig.reset();; 2678}; 2679 ; 2680RooAbsPdf::GenSpec::~GenSpec() = default;; 2681 ; 2682 ; 2683////////////////////////////////////////////////////////////////////////////////; 2684 ; 2685RooAbsPdf::GenSpec::GenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen,; 2686 bool extended, bool randProto, bool resampleProto, TString dsetName, bool init) :; 2687 _genContext(context), _whatVars(whatVars), _protoData(protoData), ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:126581,Modifiability,config,configuration,126581,"umGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooAbsReals is returned; 2650 ; 2651const RooNumGenConfig* RooAbsPdf::getGeneratorConfig() const; 2652{; 2653 const RooNumGenConfig* config = specialGeneratorConfig() ;; 2654 if (config) return config ;; 2655 return defaultGeneratorConfig() ;; 2656}; 2657 ; 2658 ; 2659 ; 2660////////////////////////////////////////////////////////////////////////////////; 2661/// Set the given configuration as default numeric MC generator; 2662/// configuration for this object; 2663 ; 2664void RooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); 2665{; 2666 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(config);; 2667}; 2668 ; 2669 ; 2670 ; 2671////////////////////////////////////////////////////////////////////////////////; 2672/// Remove the specialized numeric MC generator configuration associated; 2673/// with this object; 2674 ; 2675void RooAbsPdf::setGeneratorConfig(); 2676{; 2677 _specGeneratorConfig.reset();; 2678}; 2679 ; 2680RooAbsPdf::GenSpec::~GenSpec() = default;; 2681 ; 2682 ; 2683////////////////////////////////////////////////////////////////////////////////; 2684 ; 2685RooAbsPdf::GenSpec::GenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen,; 2686 bool extended, bool randProto, bool resampleProto, TString dsetName, bool init) :; 2687 _genContext(context), _whatVars(whatVars), _protoData(protoData), ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:126639,Modifiability,config,configuration,126639,"umGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooAbsReals is returned; 2650 ; 2651const RooNumGenConfig* RooAbsPdf::getGeneratorConfig() const; 2652{; 2653 const RooNumGenConfig* config = specialGeneratorConfig() ;; 2654 if (config) return config ;; 2655 return defaultGeneratorConfig() ;; 2656}; 2657 ; 2658 ; 2659 ; 2660////////////////////////////////////////////////////////////////////////////////; 2661/// Set the given configuration as default numeric MC generator; 2662/// configuration for this object; 2663 ; 2664void RooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); 2665{; 2666 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(config);; 2667}; 2668 ; 2669 ; 2670 ; 2671////////////////////////////////////////////////////////////////////////////////; 2672/// Remove the specialized numeric MC generator configuration associated; 2673/// with this object; 2674 ; 2675void RooAbsPdf::setGeneratorConfig(); 2676{; 2677 _specGeneratorConfig.reset();; 2678}; 2679 ; 2680RooAbsPdf::GenSpec::~GenSpec() = default;; 2681 ; 2682 ; 2683////////////////////////////////////////////////////////////////////////////////; 2684 ; 2685RooAbsPdf::GenSpec::GenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen,; 2686 bool extended, bool randProto, bool resampleProto, TString dsetName, bool init) :; 2687 _genContext(context), _whatVars(whatVars), _protoData(protoData), ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:126794,Modifiability,config,config,126794,"umGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooAbsReals is returned; 2650 ; 2651const RooNumGenConfig* RooAbsPdf::getGeneratorConfig() const; 2652{; 2653 const RooNumGenConfig* config = specialGeneratorConfig() ;; 2654 if (config) return config ;; 2655 return defaultGeneratorConfig() ;; 2656}; 2657 ; 2658 ; 2659 ; 2660////////////////////////////////////////////////////////////////////////////////; 2661/// Set the given configuration as default numeric MC generator; 2662/// configuration for this object; 2663 ; 2664void RooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); 2665{; 2666 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(config);; 2667}; 2668 ; 2669 ; 2670 ; 2671////////////////////////////////////////////////////////////////////////////////; 2672/// Remove the specialized numeric MC generator configuration associated; 2673/// with this object; 2674 ; 2675void RooAbsPdf::setGeneratorConfig(); 2676{; 2677 _specGeneratorConfig.reset();; 2678}; 2679 ; 2680RooAbsPdf::GenSpec::~GenSpec() = default;; 2681 ; 2682 ; 2683////////////////////////////////////////////////////////////////////////////////; 2684 ; 2685RooAbsPdf::GenSpec::GenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen,; 2686 bool extended, bool randProto, bool resampleProto, TString dsetName, bool init) :; 2687 _genContext(context), _whatVars(whatVars), _protoData(protoData), ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:126840,Modifiability,config,config,126840,"umGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooAbsReals is returned; 2650 ; 2651const RooNumGenConfig* RooAbsPdf::getGeneratorConfig() const; 2652{; 2653 const RooNumGenConfig* config = specialGeneratorConfig() ;; 2654 if (config) return config ;; 2655 return defaultGeneratorConfig() ;; 2656}; 2657 ; 2658 ; 2659 ; 2660////////////////////////////////////////////////////////////////////////////////; 2661/// Set the given configuration as default numeric MC generator; 2662/// configuration for this object; 2663 ; 2664void RooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); 2665{; 2666 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(config);; 2667}; 2668 ; 2669 ; 2670 ; 2671////////////////////////////////////////////////////////////////////////////////; 2672/// Remove the specialized numeric MC generator configuration associated; 2673/// with this object; 2674 ; 2675void RooAbsPdf::setGeneratorConfig(); 2676{; 2677 _specGeneratorConfig.reset();; 2678}; 2679 ; 2680RooAbsPdf::GenSpec::~GenSpec() = default;; 2681 ; 2682 ; 2683////////////////////////////////////////////////////////////////////////////////; 2684 ; 2685RooAbsPdf::GenSpec::GenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen,; 2686 bool extended, bool randProto, bool resampleProto, TString dsetName, bool init) :; 2687 _genContext(context), _whatVars(whatVars), _protoData(protoData), ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:126855,Modifiability,config,config,126855,"umGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooAbsReals is returned; 2650 ; 2651const RooNumGenConfig* RooAbsPdf::getGeneratorConfig() const; 2652{; 2653 const RooNumGenConfig* config = specialGeneratorConfig() ;; 2654 if (config) return config ;; 2655 return defaultGeneratorConfig() ;; 2656}; 2657 ; 2658 ; 2659 ; 2660////////////////////////////////////////////////////////////////////////////////; 2661/// Set the given configuration as default numeric MC generator; 2662/// configuration for this object; 2663 ; 2664void RooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); 2665{; 2666 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(config);; 2667}; 2668 ; 2669 ; 2670 ; 2671////////////////////////////////////////////////////////////////////////////////; 2672/// Remove the specialized numeric MC generator configuration associated; 2673/// with this object; 2674 ; 2675void RooAbsPdf::setGeneratorConfig(); 2676{; 2677 _specGeneratorConfig.reset();; 2678}; 2679 ; 2680RooAbsPdf::GenSpec::~GenSpec() = default;; 2681 ; 2682 ; 2683////////////////////////////////////////////////////////////////////////////////; 2684 ; 2685RooAbsPdf::GenSpec::GenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen,; 2686 bool extended, bool randProto, bool resampleProto, TString dsetName, bool init) :; 2687 _genContext(context), _whatVars(whatVars), _protoData(protoData), ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:127041,Modifiability,config,configuration,127041,"umGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooAbsReals is returned; 2650 ; 2651const RooNumGenConfig* RooAbsPdf::getGeneratorConfig() const; 2652{; 2653 const RooNumGenConfig* config = specialGeneratorConfig() ;; 2654 if (config) return config ;; 2655 return defaultGeneratorConfig() ;; 2656}; 2657 ; 2658 ; 2659 ; 2660////////////////////////////////////////////////////////////////////////////////; 2661/// Set the given configuration as default numeric MC generator; 2662/// configuration for this object; 2663 ; 2664void RooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); 2665{; 2666 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(config);; 2667}; 2668 ; 2669 ; 2670 ; 2671////////////////////////////////////////////////////////////////////////////////; 2672/// Remove the specialized numeric MC generator configuration associated; 2673/// with this object; 2674 ; 2675void RooAbsPdf::setGeneratorConfig(); 2676{; 2677 _specGeneratorConfig.reset();; 2678}; 2679 ; 2680RooAbsPdf::GenSpec::~GenSpec() = default;; 2681 ; 2682 ; 2683////////////////////////////////////////////////////////////////////////////////; 2684 ; 2685RooAbsPdf::GenSpec::GenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen,; 2686 bool extended, bool randProto, bool resampleProto, TString dsetName, bool init) :; 2687 _genContext(context), _whatVars(whatVars), _protoData(protoData), ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:127096,Modifiability,config,configuration,127096,"umGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooAbsReals is returned; 2650 ; 2651const RooNumGenConfig* RooAbsPdf::getGeneratorConfig() const; 2652{; 2653 const RooNumGenConfig* config = specialGeneratorConfig() ;; 2654 if (config) return config ;; 2655 return defaultGeneratorConfig() ;; 2656}; 2657 ; 2658 ; 2659 ; 2660////////////////////////////////////////////////////////////////////////////////; 2661/// Set the given configuration as default numeric MC generator; 2662/// configuration for this object; 2663 ; 2664void RooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); 2665{; 2666 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(config);; 2667}; 2668 ; 2669 ; 2670 ; 2671////////////////////////////////////////////////////////////////////////////////; 2672/// Remove the specialized numeric MC generator configuration associated; 2673/// with this object; 2674 ; 2675void RooAbsPdf::setGeneratorConfig(); 2676{; 2677 _specGeneratorConfig.reset();; 2678}; 2679 ; 2680RooAbsPdf::GenSpec::~GenSpec() = default;; 2681 ; 2682 ; 2683////////////////////////////////////////////////////////////////////////////////; 2684 ; 2685RooAbsPdf::GenSpec::GenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen,; 2686 bool extended, bool randProto, bool resampleProto, TString dsetName, bool init) :; 2687 _genContext(context), _whatVars(whatVars), _protoData(protoData), ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:127196,Modifiability,config,config,127196,"umGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooAbsReals is returned; 2650 ; 2651const RooNumGenConfig* RooAbsPdf::getGeneratorConfig() const; 2652{; 2653 const RooNumGenConfig* config = specialGeneratorConfig() ;; 2654 if (config) return config ;; 2655 return defaultGeneratorConfig() ;; 2656}; 2657 ; 2658 ; 2659 ; 2660////////////////////////////////////////////////////////////////////////////////; 2661/// Set the given configuration as default numeric MC generator; 2662/// configuration for this object; 2663 ; 2664void RooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); 2665{; 2666 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(config);; 2667}; 2668 ; 2669 ; 2670 ; 2671////////////////////////////////////////////////////////////////////////////////; 2672/// Remove the specialized numeric MC generator configuration associated; 2673/// with this object; 2674 ; 2675void RooAbsPdf::setGeneratorConfig(); 2676{; 2677 _specGeneratorConfig.reset();; 2678}; 2679 ; 2680RooAbsPdf::GenSpec::~GenSpec() = default;; 2681 ; 2682 ; 2683////////////////////////////////////////////////////////////////////////////////; 2684 ; 2685RooAbsPdf::GenSpec::GenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen,; 2686 bool extended, bool randProto, bool resampleProto, TString dsetName, bool init) :; 2687 _genContext(context), _whatVars(whatVars), _protoData(protoData), ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:127274,Modifiability,config,config,127274,"umGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooAbsReals is returned; 2650 ; 2651const RooNumGenConfig* RooAbsPdf::getGeneratorConfig() const; 2652{; 2653 const RooNumGenConfig* config = specialGeneratorConfig() ;; 2654 if (config) return config ;; 2655 return defaultGeneratorConfig() ;; 2656}; 2657 ; 2658 ; 2659 ; 2660////////////////////////////////////////////////////////////////////////////////; 2661/// Set the given configuration as default numeric MC generator; 2662/// configuration for this object; 2663 ; 2664void RooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); 2665{; 2666 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(config);; 2667}; 2668 ; 2669 ; 2670 ; 2671////////////////////////////////////////////////////////////////////////////////; 2672/// Remove the specialized numeric MC generator configuration associated; 2673/// with this object; 2674 ; 2675void RooAbsPdf::setGeneratorConfig(); 2676{; 2677 _specGeneratorConfig.reset();; 2678}; 2679 ; 2680RooAbsPdf::GenSpec::~GenSpec() = default;; 2681 ; 2682 ; 2683////////////////////////////////////////////////////////////////////////////////; 2684 ; 2685RooAbsPdf::GenSpec::GenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen,; 2686 bool extended, bool randProto, bool resampleProto, TString dsetName, bool init) :; 2687 _genContext(context), _whatVars(whatVars), _protoData(protoData), ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:127450,Modifiability,config,configuration,127450,"umGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooAbsReals is returned; 2650 ; 2651const RooNumGenConfig* RooAbsPdf::getGeneratorConfig() const; 2652{; 2653 const RooNumGenConfig* config = specialGeneratorConfig() ;; 2654 if (config) return config ;; 2655 return defaultGeneratorConfig() ;; 2656}; 2657 ; 2658 ; 2659 ; 2660////////////////////////////////////////////////////////////////////////////////; 2661/// Set the given configuration as default numeric MC generator; 2662/// configuration for this object; 2663 ; 2664void RooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); 2665{; 2666 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(config);; 2667}; 2668 ; 2669 ; 2670 ; 2671////////////////////////////////////////////////////////////////////////////////; 2672/// Remove the specialized numeric MC generator configuration associated; 2673/// with this object; 2674 ; 2675void RooAbsPdf::setGeneratorConfig(); 2676{; 2677 _specGeneratorConfig.reset();; 2678}; 2679 ; 2680RooAbsPdf::GenSpec::~GenSpec() = default;; 2681 ; 2682 ; 2683////////////////////////////////////////////////////////////////////////////////; 2684 ; 2685RooAbsPdf::GenSpec::GenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen,; 2686 bool extended, bool randProto, bool resampleProto, TString dsetName, bool init) :; 2687 _genContext(context), _whatVars(whatVars), _protoData(protoData), ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:127894,Modifiability,extend,extended,127894,"/////////////////////////////////////////////////////////////////////////; 2661/// Set the given configuration as default numeric MC generator; 2662/// configuration for this object; 2663 ; 2664void RooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); 2665{; 2666 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(config);; 2667}; 2668 ; 2669 ; 2670 ; 2671////////////////////////////////////////////////////////////////////////////////; 2672/// Remove the specialized numeric MC generator configuration associated; 2673/// with this object; 2674 ; 2675void RooAbsPdf::setGeneratorConfig(); 2676{; 2677 _specGeneratorConfig.reset();; 2678}; 2679 ; 2680RooAbsPdf::GenSpec::~GenSpec() = default;; 2681 ; 2682 ; 2683////////////////////////////////////////////////////////////////////////////////; 2684 ; 2685RooAbsPdf::GenSpec::GenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen,; 2686 bool extended, bool randProto, bool resampleProto, TString dsetName, bool init) :; 2687 _genContext(context), _whatVars(whatVars), _protoData(protoData), _nGen(nGen), _extended(extended),; 2688 _randProto(randProto), _resampleProto(resampleProto), _dsetName(dsetName), _init(init); 2689{; 2690}; 2691 ; 2692 ; 2693namespace {; 2694 ; 2695void sterilizeClientCaches(RooAbsArg & arg) {; 2696 auto const& clients = arg.clients();; 2697 for(std::size_t iClient = 0; iClient < clients.size(); ++iClient) {; 2698 ; 2699 const std::size_t oldClientsSize = clients.size();; 2700 RooAbsArg* client = clients[iClient];; 2701 ; 2702 for(int iCache = 0; iCache < client->numCaches(); ++iCache) {; 2703 if(auto cacheMgr = dynamic_cast<RooObjCacheManager*>(client->getCache(iCache))) {; 2704 cacheMgr->sterilize();; 2705 }; 2706 }; 2707 ; 2708 // It can happen that the objects cached by the client are also clients of; 2709 // the arg itself! In that case, the position of the client in the client; 2710 // list might have changed, and we need to find the new index.; 2",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:128066,Modifiability,extend,extended,128066,"/////////////////////////////////////////////////////////////////////////; 2661/// Set the given configuration as default numeric MC generator; 2662/// configuration for this object; 2663 ; 2664void RooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); 2665{; 2666 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(config);; 2667}; 2668 ; 2669 ; 2670 ; 2671////////////////////////////////////////////////////////////////////////////////; 2672/// Remove the specialized numeric MC generator configuration associated; 2673/// with this object; 2674 ; 2675void RooAbsPdf::setGeneratorConfig(); 2676{; 2677 _specGeneratorConfig.reset();; 2678}; 2679 ; 2680RooAbsPdf::GenSpec::~GenSpec() = default;; 2681 ; 2682 ; 2683////////////////////////////////////////////////////////////////////////////////; 2684 ; 2685RooAbsPdf::GenSpec::GenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen,; 2686 bool extended, bool randProto, bool resampleProto, TString dsetName, bool init) :; 2687 _genContext(context), _whatVars(whatVars), _protoData(protoData), _nGen(nGen), _extended(extended),; 2688 _randProto(randProto), _resampleProto(resampleProto), _dsetName(dsetName), _init(init); 2689{; 2690}; 2691 ; 2692 ; 2693namespace {; 2694 ; 2695void sterilizeClientCaches(RooAbsArg & arg) {; 2696 auto const& clients = arg.clients();; 2697 for(std::size_t iClient = 0; iClient < clients.size(); ++iClient) {; 2698 ; 2699 const std::size_t oldClientsSize = clients.size();; 2700 RooAbsArg* client = clients[iClient];; 2701 ; 2702 for(int iCache = 0; iCache < client->numCaches(); ++iCache) {; 2703 if(auto cacheMgr = dynamic_cast<RooObjCacheManager*>(client->getCache(iCache))) {; 2704 cacheMgr->sterilize();; 2705 }; 2706 }; 2707 ; 2708 // It can happen that the objects cached by the client are also clients of; 2709 // the arg itself! In that case, the position of the client in the client; 2710 // list might have changed, and we need to find the new index.; 2",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:137749,Modifiability,variab,variables,137749,"edComponentsbool addOwnedComponents(const RooAbsCollection &comps)Take ownership of the contents of 'comps'.Definition RooAbsArg.cxx:2258; RooAbsArg::ADirty@ ADirtyDefinition RooAbsArg.h:362; RooAbsArg::getStringAttributeconst Text_t * getStringAttribute(const Text_t *key) constGet string attribute mapped under key 'key'.Definition RooAbsArg.cxx:275; RooAbsArg::compileForNormSetvirtual std::unique_ptr< RooAbsArg > compileForNormSet(RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) constDefinition RooAbsArg.cxx:2528; RooAbsArg::getComponentsRooFit::OwningPtr< RooArgSet > getComponents() constCreate a RooArgSet with all components (branch nodes) of the expression tree headed by this object.Definition RooAbsArg.cxx:802; RooAbsArg::getAttributebool getAttribute(const Text_t *name) constCheck if a named attribute is set. By default, all attributes are unset.Definition RooAbsArg.cxx:245; RooAbsArg::getVariablesRooFit::OwningPtr< RooArgSet > getVariables(bool stripDisconnected=true) constReturn RooArgSet with all variables (tree leaf nodes of expression tree)Definition RooAbsArg.cxx:2154; RooAbsArg::getCacheRooAbsCache * getCache(Int_t index) constReturn registered cache object by index.Definition RooAbsArg.cxx:2145; RooAbsArg::clientsconst RefCountList_t & clients() constList of all clients of this object.Definition RooAbsArg.h:166; RooAbsArg::isValueDirtybool isValueDirty() constDefinition RooAbsArg.h:393; RooAbsArg::setProxyNormSetvoid setProxyNormSet(const RooArgSet *nset)Forward a change in the cached normalization argset to all the registered proxies.Definition RooAbsArg.cxx:1468; RooAbsArg::branchNodeServerListvoid branchNodeServerList(RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) constFill supplied list with all branch nodes of the arg tree starting with ourself as top node.Definition RooAbsArg.cxx:483; RooAbsArg::CloneTObject * Clone(const char *newname=nullptr) const overrideMake a clone of an object using the Str",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:141416,Modifiability,extend,extendedMode,141416,"ntsString() constReturn comma separated list of contained object names as STL string.Definition RooAbsCollection.cxx:1148; RooAbsCollection::findRooAbsArg * find(const char *name) constFind object with given name in list.Definition RooAbsCollection.cxx:922; RooAbsCollection::Printvoid Print(Option_t *options=nullptr) const overrideThis method must be overridden when a class wants to print itself.Definition RooAbsCollection.h:315; RooAbsDataAbstract base class for binned and unbinned datasets.Definition RooAbsData.h:57; RooAbsData::numEntriesvirtual Int_t numEntries() constReturn number of entries in dataset, i.e., count unweighted entries.Definition RooAbsData.cxx:323; RooAbsGenContextAbstract base class for generator contexts of RooAbsPdf objects.Definition RooAbsGenContext.h:26; RooAbsGenContext::setExpectedDatavirtual void setExpectedData(bool)Definition RooAbsGenContext.h:65; RooAbsGenContext::generatevirtual RooDataSet * generate(double nEvents=0, bool skipInit=false, bool extendedMode=false)Generate the specified number of events with nEvents>0 and and return a dataset containing the genera...Definition RooAbsGenContext.cxx:130; RooAbsGenContext::isValidbool isValid() constDefinition RooAbsGenContext.h:33; RooAbsGenContext::setProtoDataOrdervirtual void setProtoDataOrder(Int_t *lut)Set the traversal order of prototype data to that in the lookup tables passed as argument.Definition RooAbsGenContext.cxx:319; RooAbsPdf::CacheElemNormalization set with for above integral.Definition RooAbsPdf.h:322; RooAbsPdf::CacheElem::_normstd::unique_ptr< RooAbsReal > _normDefinition RooAbsPdf.h:327; RooAbsPdf::CacheElem::~CacheElem~CacheElem() overrideDestructor of normalization cache element.Definition RooAbsPdf.cxx:2430; RooAbsPdf::GenSpecDefinition RooAbsPdf.h:72; RooAbsPdf::GenSpec::_genContextstd::unique_ptr< RooAbsGenContext > _genContextDefinition RooAbsPdf.h:83; RooAbsPdf::GenSpec::~GenSpecvirtual ~GenSpec(); RooAbsPdf::GenSpec::_whatVarsRooArgSet _whatVarsDefinition Ro",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:143776,Modifiability,config,configuration,143776,"RooAbsPdf::GenSpec::_resampleProtobool _resampleProtoDefinition RooAbsPdf.h:89; RooAbsPdf::GenSpec::_protoDataRooDataSet * _protoDataDefinition RooAbsPdf.h:85; RooAbsPdfAbstract interface for all probability density functions.Definition RooAbsPdf.h:40; RooAbsPdf::syncNormalizationvirtual bool syncNormalization(const RooArgSet *dset, bool adjustProxies=true) constVerify that the normalization integral cached with this PDF is valid for given set of normalization o...Definition RooAbsPdf.cxx:481; RooAbsPdf::getNormdouble getNorm(const RooArgSet &nset) constGet normalisation term needed to normalise the raw values returned by getVal().Definition RooAbsPdf.h:195; RooAbsPdf::compileForNormSetstd::unique_ptr< RooAbsArg > compileForNormSet(RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const overrideDefinition RooAbsPdf.cxx:2788; RooAbsPdf::_normMgrRooObjCacheManager _normMgrDefinition RooAbsPdf.h:329; RooAbsPdf::_specGeneratorConfigstd::unique_ptr< RooNumGenConfig > _specGeneratorConfig! MC generator configuration specific for this objectDefinition RooAbsPdf.h:340; RooAbsPdf::getValVdouble getValV(const RooArgSet *set=nullptr) const overrideReturn current value, normalized by integrating over the observables in nset.Definition RooAbsPdf.cxx:319; RooAbsPdf::fitToImplvirtual std::unique_ptr< RooFitResult > fitToImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the likelihood fitting routine.Definition RooAbsPdf.cxx:1072; RooAbsPdf::generateEventvirtual void generateEvent(Int_t code)Interface for generation of an event using the algorithm corresponding to the specified code.Definition RooAbsPdf.cxx:1544; RooAbsPdf::createScanCdfRooFit::OwningPtr< RooAbsReal > createScanCdf(const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder)Definition RooAbsPdf.cxx:2545; RooAbsPdf::setGeneratorConfigvoid setGeneratorConfig()Remove the specialized numeric MC generator configuration associated with this object.Definition R",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:144698,Modifiability,config,configuration,144698,"df.h:329; RooAbsPdf::_specGeneratorConfigstd::unique_ptr< RooNumGenConfig > _specGeneratorConfig! MC generator configuration specific for this objectDefinition RooAbsPdf.h:340; RooAbsPdf::getValVdouble getValV(const RooArgSet *set=nullptr) const overrideReturn current value, normalized by integrating over the observables in nset.Definition RooAbsPdf.cxx:319; RooAbsPdf::fitToImplvirtual std::unique_ptr< RooFitResult > fitToImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the likelihood fitting routine.Definition RooAbsPdf.cxx:1072; RooAbsPdf::generateEventvirtual void generateEvent(Int_t code)Interface for generation of an event using the algorithm corresponding to the specified code.Definition RooAbsPdf.cxx:1544; RooAbsPdf::createScanCdfRooFit::OwningPtr< RooAbsReal > createScanCdf(const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder)Definition RooAbsPdf.cxx:2545; RooAbsPdf::setGeneratorConfigvoid setGeneratorConfig()Remove the specialized numeric MC generator configuration associated with this object.Definition RooAbsPdf.cxx:2675; RooAbsPdf::resetErrorCountersvirtual void resetErrorCounters(Int_t resetValue=10)Reset error counter to given value, limiting the number of future error messages for this pdf to 'res...Definition RooAbsPdf.cxx:586; RooAbsPdf::verboseEvalstatic int verboseEval()Return global level of verbosity for p.d.f. evaluations.Definition RooAbsPdf.cxx:2418; RooAbsPdf::createCdfRooFit::OwningPtr< RooAbsReal > createCdf(const RooArgSet &iset, const RooArgSet &nset=RooArgSet())Create a cumulative distribution function of this p.d.f in terms of the observables listed in iset.Definition RooAbsPdf.cxx:2468; RooAbsPdf::isActiveNormSetbool isActiveNormSet(RooArgSet const *normSet) constChecks if normSet is the currently active normalization set of this PDF, meaning is exactly the same ...Definition RooAbsPdf.h:299; RooAbsPdf::expectedEventsvirtual double expectedEvents(const RooArgSet *nset) constRetu",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:145723,Modifiability,extend,extended,145723,"ove the specialized numeric MC generator configuration associated with this object.Definition RooAbsPdf.cxx:2675; RooAbsPdf::resetErrorCountersvirtual void resetErrorCounters(Int_t resetValue=10)Reset error counter to given value, limiting the number of future error messages for this pdf to 'res...Definition RooAbsPdf.cxx:586; RooAbsPdf::verboseEvalstatic int verboseEval()Return global level of verbosity for p.d.f. evaluations.Definition RooAbsPdf.cxx:2418; RooAbsPdf::createCdfRooFit::OwningPtr< RooAbsReal > createCdf(const RooArgSet &iset, const RooArgSet &nset=RooArgSet())Create a cumulative distribution function of this p.d.f in terms of the observables listed in iset.Definition RooAbsPdf.cxx:2468; RooAbsPdf::isActiveNormSetbool isActiveNormSet(RooArgSet const *normSet) constChecks if normSet is the currently active normalization set of this PDF, meaning is exactly the same ...Definition RooAbsPdf.h:299; RooAbsPdf::expectedEventsvirtual double expectedEvents(const RooArgSet *nset) constReturn expected number of events to be used in calculation of extended likelihood.Definition RooAbsPdf.cxx:2398; RooAbsPdf::binnedGenContextvirtual RooAbsGenContext * binnedGenContext(const RooArgSet &vars, bool verbose=false) constReturn a binned generator context.Definition RooAbsPdf.cxx:1117; RooAbsPdf::_normRangeTString _normRangeNormalization range.Definition RooAbsPdf.h:342; RooAbsPdf::isDirectGenSafevirtual bool isDirectGenSafe(const RooAbsArg &arg) constCheck if given observable can be safely generated using the pdfs internal generator mechanism (if tha...Definition RooAbsPdf.cxx:1557; RooAbsPdf::randomizeProtoOrderInt_t * randomizeProtoOrder(Int_t nProto, Int_t nGen, bool resample=false) constReturn lookup table with randomized order for nProto prototype events.Definition RooAbsPdf.cxx:1485; RooAbsPdf::setNormRangevoid setNormRange(const char *rangeName)Definition RooAbsPdf.cxx:2726; RooAbsPdf::~RooAbsPdf~RooAbsPdf() overrideDestructor.Definition RooAbsPdf.cxx:277; RooAbsP",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:147288,Modifiability,config,configuration,147288,"ooAbsPdf.cxx:1557; RooAbsPdf::randomizeProtoOrderInt_t * randomizeProtoOrder(Int_t nProto, Int_t nGen, bool resample=false) constReturn lookup table with randomized order for nProto prototype events.Definition RooAbsPdf.cxx:1485; RooAbsPdf::setNormRangevoid setNormRange(const char *rangeName)Definition RooAbsPdf.cxx:2726; RooAbsPdf::~RooAbsPdf~RooAbsPdf() overrideDestructor.Definition RooAbsPdf.cxx:277; RooAbsPdf::_normSetRooArgSet const * _normSetNormalization integral (owned by _normMgr)Definition RooAbsPdf.h:320; RooAbsPdf::plotOnRooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const overrideHelper calling plotOn(RooPlot*, RooLinkedList&) const.Definition RooAbsPdf.h:124; RooAbsPdf::specialGeneratorConfigRooNumGenConfig * specialGeneratorConfig() constReturns the specialized integrator configuration for this RooAbsReal.Definition RooAbsPdf.cxx:2623; RooAbsPdf::selfNormalizedvirtual bool selfNormalized() constShows if a PDF is self-normalized, which means that no attempt is made to add a normalization term.Definition RooAbsPdf.h:207; RooAbsPdf::printMultilinevoid printMultiline(std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const overridePrint multi line detailed information of this RooAbsPdf.Definition RooAbsPdf.cxx:1100; RooAbsPdf::_traceCountInt_t _traceCountNumber of traces remaining to print.Definition RooAbsPdf.h:335; RooAbsPdf::canBeExtendedbool canBeExtended() constIf true, PDF can provide extended likelihood term.Definition RooAbsPdf.h:218; RooAbsPdf::_normRooAbsReal * _normDefinition RooAbsPdf.h:319; RooAbsPdf::setTraceCountervoid setTraceCounter(Int_t value, bool allNodes=false)Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'val...Definiti",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:147937,Modifiability,extend,extended,147937," &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const overrideHelper calling plotOn(RooPlot*, RooLinkedList&) const.Definition RooAbsPdf.h:124; RooAbsPdf::specialGeneratorConfigRooNumGenConfig * specialGeneratorConfig() constReturns the specialized integrator configuration for this RooAbsReal.Definition RooAbsPdf.cxx:2623; RooAbsPdf::selfNormalizedvirtual bool selfNormalized() constShows if a PDF is self-normalized, which means that no attempt is made to add a normalization term.Definition RooAbsPdf.h:207; RooAbsPdf::printMultilinevoid printMultiline(std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const overridePrint multi line detailed information of this RooAbsPdf.Definition RooAbsPdf.cxx:1100; RooAbsPdf::_traceCountInt_t _traceCountNumber of traces remaining to print.Definition RooAbsPdf.h:335; RooAbsPdf::canBeExtendedbool canBeExtended() constIf true, PDF can provide extended likelihood term.Definition RooAbsPdf.h:218; RooAbsPdf::_normRooAbsReal * _normDefinition RooAbsPdf.h:319; RooAbsPdf::setTraceCountervoid setTraceCounter(Int_t value, bool allNodes=false)Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'val...Definition RooAbsPdf.cxx:598; RooAbsPdf::prepareMultiGenGenSpec * prepareMultiGen(const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={})Prepare GenSpec configuration object for efficient generation of multiple datasets from identical spe...Definition RooAbsPdf.cxx:1299; RooAbsPdf::_errorCountInt_t _errorCountNumber of errors remaining to print.Definition RooAbsPdf.h:334; RooAbsPdf::CanNotBeExtended@ CanNotBeExtendedDefinition RooAbsPdf.h:212; RooAbsPdf::createExpectedEventsFuncvirtual std::unique_ptr< RooAbsReal > createExpectedEventsFunc(",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:148516,Modifiability,config,configuration,148516,"s self-normalized, which means that no attempt is made to add a normalization term.Definition RooAbsPdf.h:207; RooAbsPdf::printMultilinevoid printMultiline(std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const overridePrint multi line detailed information of this RooAbsPdf.Definition RooAbsPdf.cxx:1100; RooAbsPdf::_traceCountInt_t _traceCountNumber of traces remaining to print.Definition RooAbsPdf.h:335; RooAbsPdf::canBeExtendedbool canBeExtended() constIf true, PDF can provide extended likelihood term.Definition RooAbsPdf.h:218; RooAbsPdf::_normRooAbsReal * _normDefinition RooAbsPdf.h:319; RooAbsPdf::setTraceCountervoid setTraceCounter(Int_t value, bool allNodes=false)Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'val...Definition RooAbsPdf.cxx:598; RooAbsPdf::prepareMultiGenGenSpec * prepareMultiGen(const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={})Prepare GenSpec configuration object for efficient generation of multiple datasets from identical spe...Definition RooAbsPdf.cxx:1299; RooAbsPdf::_errorCountInt_t _errorCountNumber of errors remaining to print.Definition RooAbsPdf.h:334; RooAbsPdf::CanNotBeExtended@ CanNotBeExtendedDefinition RooAbsPdf.h:212; RooAbsPdf::createExpectedEventsFuncvirtual std::unique_ptr< RooAbsReal > createExpectedEventsFunc(const RooArgSet *nset) constReturns an object that represents the expected number of events for a given normalization set,...Definition RooAbsPdf.cxx:2812; RooAbsPdf::paramOnvirtual RooPlot * paramOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={})Add a box with parameter values (and errors) to the specified frame.Definition RooAbsPdf.cxx:2285;",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:151756,Modifiability,config,configuration,151756,"RooAbsPdf.cxx:2746; RooAbsPdf::generateSimGlobalvirtual RooFit::OwningPtr< RooDataSet > generateSimGlobal(const RooArgSet &whatVars, Int_t nEvents)Special generator interface for generation of 'global observables' – for RooStats tools.Definition RooAbsPdf.cxx:1799; RooAbsPdf::normalizeWithNaNPackingdouble normalizeWithNaNPacking(double rawVal, double normVal) constDefinition RooAbsPdf.cxx:282; RooAbsPdf::autoGenContextvirtual RooAbsGenContext * autoGenContext(const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") constDefinition RooAbsPdf.cxx:1136; RooAbsPdf::getAllConstraintsRooArgSet * getAllConstraints(const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) constThis helper function finds and collects all constraints terms of all component p.d....Definition RooAbsPdf.cxx:2562; RooAbsPdf::getGeneratorConfigconst RooNumGenConfig * getGeneratorConfig() constReturn the numeric MC generator configuration used for this object.Definition RooAbsPdf.cxx:2651; RooAbsPdf::initGeneratorvirtual void initGenerator(Int_t code)Interface for one-time initialization to setup the generator for the specified code.Definition RooAbsPdf.cxx:1532; RooAbsPdf::extendModevirtual ExtendMode extendMode() constReturns ability of PDF to provide extended likelihood terms.Definition RooAbsPdf.h:216; RooAbsPdf::RooAbsPdfRooAbsPdf()Default constructor.Definition RooAbsPdf.cxx:230; RooAbsPdf::generateBinnedvirtual RooFit::OwningPtr< RooDataHist > generateBinned(const RooArgSet &whatVars, double nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}) constAs RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,...Definition RooAbsPdf.h:110; RooAbsPdf::traceEvalPdfbool traceEvalPdf(double value) constCheck that passed value is positive and n",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:152010,Modifiability,extend,extendModevirtual,152010,"wVal, double normVal) constDefinition RooAbsPdf.cxx:282; RooAbsPdf::autoGenContextvirtual RooAbsGenContext * autoGenContext(const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") constDefinition RooAbsPdf.cxx:1136; RooAbsPdf::getAllConstraintsRooArgSet * getAllConstraints(const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) constThis helper function finds and collects all constraints terms of all component p.d....Definition RooAbsPdf.cxx:2562; RooAbsPdf::getGeneratorConfigconst RooNumGenConfig * getGeneratorConfig() constReturn the numeric MC generator configuration used for this object.Definition RooAbsPdf.cxx:2651; RooAbsPdf::initGeneratorvirtual void initGenerator(Int_t code)Interface for one-time initialization to setup the generator for the specified code.Definition RooAbsPdf.cxx:1532; RooAbsPdf::extendModevirtual ExtendMode extendMode() constReturns ability of PDF to provide extended likelihood terms.Definition RooAbsPdf.h:216; RooAbsPdf::RooAbsPdfRooAbsPdf()Default constructor.Definition RooAbsPdf.cxx:230; RooAbsPdf::generateBinnedvirtual RooFit::OwningPtr< RooDataHist > generateBinned(const RooArgSet &whatVars, double nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}) constAs RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,...Definition RooAbsPdf.h:110; RooAbsPdf::traceEvalPdfbool traceEvalPdf(double value) constCheck that passed value is positive and not 'not-a-number'.Definition RooAbsPdf.cxx:384; RooAbsPdf::defaultGeneratorConfigstatic RooNumGenConfig * defaultGeneratorConfig()Returns the default numeric MC generator configuration for all RooAbsReals.Definition RooAbsPdf.cxx:2613; RooAbsPdf::redirectServersHookbool redirectServersHook(const RooAbsCollection &newServerList, bool mustR",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:152039,Modifiability,extend,extendMode,152039,"wVal, double normVal) constDefinition RooAbsPdf.cxx:282; RooAbsPdf::autoGenContextvirtual RooAbsGenContext * autoGenContext(const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") constDefinition RooAbsPdf.cxx:1136; RooAbsPdf::getAllConstraintsRooArgSet * getAllConstraints(const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) constThis helper function finds and collects all constraints terms of all component p.d....Definition RooAbsPdf.cxx:2562; RooAbsPdf::getGeneratorConfigconst RooNumGenConfig * getGeneratorConfig() constReturn the numeric MC generator configuration used for this object.Definition RooAbsPdf.cxx:2651; RooAbsPdf::initGeneratorvirtual void initGenerator(Int_t code)Interface for one-time initialization to setup the generator for the specified code.Definition RooAbsPdf.cxx:1532; RooAbsPdf::extendModevirtual ExtendMode extendMode() constReturns ability of PDF to provide extended likelihood terms.Definition RooAbsPdf.h:216; RooAbsPdf::RooAbsPdfRooAbsPdf()Default constructor.Definition RooAbsPdf.cxx:230; RooAbsPdf::generateBinnedvirtual RooFit::OwningPtr< RooDataHist > generateBinned(const RooArgSet &whatVars, double nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}) constAs RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,...Definition RooAbsPdf.h:110; RooAbsPdf::traceEvalPdfbool traceEvalPdf(double value) constCheck that passed value is positive and not 'not-a-number'.Definition RooAbsPdf.cxx:384; RooAbsPdf::defaultGeneratorConfigstatic RooNumGenConfig * defaultGeneratorConfig()Returns the default numeric MC generator configuration for all RooAbsReals.Definition RooAbsPdf.cxx:2613; RooAbsPdf::redirectServersHookbool redirectServersHook(const RooAbsCollection &newServerList, bool mustR",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:152091,Modifiability,extend,extended,152091,"wVal, double normVal) constDefinition RooAbsPdf.cxx:282; RooAbsPdf::autoGenContextvirtual RooAbsGenContext * autoGenContext(const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") constDefinition RooAbsPdf.cxx:1136; RooAbsPdf::getAllConstraintsRooArgSet * getAllConstraints(const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) constThis helper function finds and collects all constraints terms of all component p.d....Definition RooAbsPdf.cxx:2562; RooAbsPdf::getGeneratorConfigconst RooNumGenConfig * getGeneratorConfig() constReturn the numeric MC generator configuration used for this object.Definition RooAbsPdf.cxx:2651; RooAbsPdf::initGeneratorvirtual void initGenerator(Int_t code)Interface for one-time initialization to setup the generator for the specified code.Definition RooAbsPdf.cxx:1532; RooAbsPdf::extendModevirtual ExtendMode extendMode() constReturns ability of PDF to provide extended likelihood terms.Definition RooAbsPdf.h:216; RooAbsPdf::RooAbsPdfRooAbsPdf()Default constructor.Definition RooAbsPdf.cxx:230; RooAbsPdf::generateBinnedvirtual RooFit::OwningPtr< RooDataHist > generateBinned(const RooArgSet &whatVars, double nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}) constAs RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,...Definition RooAbsPdf.h:110; RooAbsPdf::traceEvalPdfbool traceEvalPdf(double value) constCheck that passed value is positive and not 'not-a-number'.Definition RooAbsPdf.cxx:384; RooAbsPdf::defaultGeneratorConfigstatic RooNumGenConfig * defaultGeneratorConfig()Returns the default numeric MC generator configuration for all RooAbsReals.Definition RooAbsPdf.cxx:2613; RooAbsPdf::redirectServersHookbool redirectServersHook(const RooAbsCollection &newServerList, bool mustR",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:152884,Modifiability,config,configuration,152884,"itGeneratorvirtual void initGenerator(Int_t code)Interface for one-time initialization to setup the generator for the specified code.Definition RooAbsPdf.cxx:1532; RooAbsPdf::extendModevirtual ExtendMode extendMode() constReturns ability of PDF to provide extended likelihood terms.Definition RooAbsPdf.h:216; RooAbsPdf::RooAbsPdfRooAbsPdf()Default constructor.Definition RooAbsPdf.cxx:230; RooAbsPdf::generateBinnedvirtual RooFit::OwningPtr< RooDataHist > generateBinned(const RooArgSet &whatVars, double nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}) constAs RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,...Definition RooAbsPdf.h:110; RooAbsPdf::traceEvalPdfbool traceEvalPdf(double value) constCheck that passed value is positive and not 'not-a-number'.Definition RooAbsPdf.cxx:384; RooAbsPdf::defaultGeneratorConfigstatic RooNumGenConfig * defaultGeneratorConfig()Returns the default numeric MC generator configuration for all RooAbsReals.Definition RooAbsPdf.cxx:2613; RooAbsPdf::redirectServersHookbool redirectServersHook(const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) overrideThe cache manager.Definition RooAbsPdf.cxx:2768; RooAbsPdf::printValuevoid printValue(std::ostream &os) const overridePrint value of p.d.f, also print normalization integral that was last used, if any.Definition RooAbsPdf.cxx:1081; RooAbsPdf::createNLLImplvirtual std::unique_ptr< RooAbsReal > createNLLImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the NLL creation routine.Definition RooAbsPdf.cxx:941; RooAbsPdf::logBatchComputationErrorsvoid logBatchComputationErrors(std::span< const double > &outputs, std::size_t begin) constScan through outputs and fix+log all nans and negative values.Definition RooAbsPdf.cxx:654; RooAbsPdf::genContextvirtual RooAbsGenContext * genContext(const Ro",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:154360,Modifiability,extend,extendedTermdouble,154360,"bsReal > createNLLImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the NLL creation routine.Definition RooAbsPdf.cxx:941; RooAbsPdf::logBatchComputationErrorsvoid logBatchComputationErrors(std::span< const double > &outputs, std::size_t begin) constScan through outputs and fix+log all nans and negative values.Definition RooAbsPdf.cxx:654; RooAbsPdf::genContextvirtual RooAbsGenContext * genContext(const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) constInterface function to create a generator context from a p.d.f.Definition RooAbsPdf.cxx:1127; RooAbsPdf::getLogProbabilitiesvoid getLogProbabilities(std::span< const double > pdfValues, double *output) constDefinition RooAbsPdf.cxx:671; RooAbsPdf::_normRangeOverridestatic TString _normRangeOverrideDefinition RooAbsPdf.h:343; RooAbsPdf::_verboseEvalstatic Int_t _verboseEvalDefinition RooAbsPdf.h:314; RooAbsPdf::extendedTermdouble extendedTerm(double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) constDefinition RooAbsPdf.cxx:730; RooAbsPdf::getGeneratorvirtual Int_t getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) constLoad generatedVars with the subset of directVars that we can generate events for, and return a code t...Definition RooAbsPdf.cxx:1522; RooAbsPdf::createProjectionvirtual RooAbsPdf * createProjection(const RooArgSet &iset)Return a p.d.f that represent a projection of this p.d.f integrated over given observables.Definition RooAbsPdf.cxx:2446; RooAbsPdf::getLogValvirtual double getLogVal(const RooArgSet *set=nullptr) constReturn the log of the current value with given normalization An error message is printed if the argum...Definition RooAbsPdf.cxx:620; RooAbsRealLValue::hasRangebool hasRange(const char *name) const overrideCheck if variable has a binning with given name.Definition RooAbsRealLValue.h:97; RooAbsRealLValue::getRangestd::pair< double",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:154379,Modifiability,extend,extendedTerm,154379,"bsReal > createNLLImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the NLL creation routine.Definition RooAbsPdf.cxx:941; RooAbsPdf::logBatchComputationErrorsvoid logBatchComputationErrors(std::span< const double > &outputs, std::size_t begin) constScan through outputs and fix+log all nans and negative values.Definition RooAbsPdf.cxx:654; RooAbsPdf::genContextvirtual RooAbsGenContext * genContext(const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) constInterface function to create a generator context from a p.d.f.Definition RooAbsPdf.cxx:1127; RooAbsPdf::getLogProbabilitiesvoid getLogProbabilities(std::span< const double > pdfValues, double *output) constDefinition RooAbsPdf.cxx:671; RooAbsPdf::_normRangeOverridestatic TString _normRangeOverrideDefinition RooAbsPdf.h:343; RooAbsPdf::_verboseEvalstatic Int_t _verboseEvalDefinition RooAbsPdf.h:314; RooAbsPdf::extendedTermdouble extendedTerm(double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) constDefinition RooAbsPdf.cxx:730; RooAbsPdf::getGeneratorvirtual Int_t getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) constLoad generatedVars with the subset of directVars that we can generate events for, and return a code t...Definition RooAbsPdf.cxx:1522; RooAbsPdf::createProjectionvirtual RooAbsPdf * createProjection(const RooArgSet &iset)Return a p.d.f that represent a projection of this p.d.f integrated over given observables.Definition RooAbsPdf.cxx:2446; RooAbsPdf::getLogValvirtual double getLogVal(const RooArgSet *set=nullptr) constReturn the log of the current value with given normalization An error message is printed if the argum...Definition RooAbsPdf.cxx:620; RooAbsRealLValue::hasRangebool hasRange(const char *name) const overrideCheck if variable has a binning with given name.Definition RooAbsRealLValue.h:97; RooAbsRealLValue::getRangestd::pair< double",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:155280,Modifiability,variab,variable,155280,"n RooAbsPdf.h:343; RooAbsPdf::_verboseEvalstatic Int_t _verboseEvalDefinition RooAbsPdf.h:314; RooAbsPdf::extendedTermdouble extendedTerm(double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) constDefinition RooAbsPdf.cxx:730; RooAbsPdf::getGeneratorvirtual Int_t getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) constLoad generatedVars with the subset of directVars that we can generate events for, and return a code t...Definition RooAbsPdf.cxx:1522; RooAbsPdf::createProjectionvirtual RooAbsPdf * createProjection(const RooArgSet &iset)Return a p.d.f that represent a projection of this p.d.f integrated over given observables.Definition RooAbsPdf.cxx:2446; RooAbsPdf::getLogValvirtual double getLogVal(const RooArgSet *set=nullptr) constReturn the log of the current value with given normalization An error message is printed if the argum...Definition RooAbsPdf.cxx:620; RooAbsRealLValue::hasRangebool hasRange(const char *name) const overrideCheck if variable has a binning with given name.Definition RooAbsRealLValue.h:97; RooAbsRealLValue::getRangestd::pair< double, double > getRange(const char *name=nullptr) constGet low and high bound of the variable.Definition RooAbsRealLValue.h:88; RooAbsRealAbstract base class for objects that represent a real value and implements functionality common to al...Definition RooAbsReal.h:59; RooAbsReal::fillDataHistRooDataHist * fillDataHist(RooDataHist *hist, const RooArgSet *nset, double scaleFactor, bool correctForBinVolume=false, bool showProgress=false) constFill a RooDataHist with values sampled from this function at the bin centers.Definition RooAbsReal.cxx:1124; RooAbsReal::plotOnCompSelectvoid plotOnCompSelect(RooArgSet *selNodes) constHelper function for plotting of composite p.d.fs.Definition RooAbsReal.cxx:1438; RooAbsReal::createIntegralRooFit::OwningPtr< RooAbsReal > createIntegral(const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const R",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:155477,Modifiability,variab,variable,155477,"e expected, double sumEntriesW2=0.0, bool doOffset=false) constDefinition RooAbsPdf.cxx:730; RooAbsPdf::getGeneratorvirtual Int_t getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) constLoad generatedVars with the subset of directVars that we can generate events for, and return a code t...Definition RooAbsPdf.cxx:1522; RooAbsPdf::createProjectionvirtual RooAbsPdf * createProjection(const RooArgSet &iset)Return a p.d.f that represent a projection of this p.d.f integrated over given observables.Definition RooAbsPdf.cxx:2446; RooAbsPdf::getLogValvirtual double getLogVal(const RooArgSet *set=nullptr) constReturn the log of the current value with given normalization An error message is printed if the argum...Definition RooAbsPdf.cxx:620; RooAbsRealLValue::hasRangebool hasRange(const char *name) const overrideCheck if variable has a binning with given name.Definition RooAbsRealLValue.h:97; RooAbsRealLValue::getRangestd::pair< double, double > getRange(const char *name=nullptr) constGet low and high bound of the variable.Definition RooAbsRealLValue.h:88; RooAbsRealAbstract base class for objects that represent a real value and implements functionality common to al...Definition RooAbsReal.h:59; RooAbsReal::fillDataHistRooDataHist * fillDataHist(RooDataHist *hist, const RooArgSet *nset, double scaleFactor, bool correctForBinVolume=false, bool showProgress=false) constFill a RooDataHist with values sampled from this function at the bin centers.Definition RooAbsReal.cxx:1124; RooAbsReal::plotOnCompSelectvoid plotOnCompSelect(RooArgSet *selNodes) constHelper function for plotting of composite p.d.fs.Definition RooAbsReal.cxx:1438; RooAbsReal::createIntegralRooFit::OwningPtr< RooAbsReal > createIntegral(const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) constCreate a",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:158657,Modifiability,config,configuration,158657,"oAbsReal::_valuedouble _valueCache for current value of object.Definition RooAbsReal.h:536; RooAbsReal::analyticalIntegralvirtual double analyticalIntegral(Int_t code, const char *rangeName=nullptr) constImplements the actual analytical integral(s) advertised by getAnalyticalIntegral.Definition RooAbsReal.cxx:394; RooAbsReal::integralNameSuffixTString integralNameSuffix(const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) constConstruct string with unique suffix name to give to integral object that encodes integrated observabl...Definition RooAbsReal.cxx:755; RooAbsReal::evaluatevirtual double evaluate() const =0Evaluate this PDF / function / constant. Needs to be overridden by all derived classes.; RooAbsReal::logEvalErrorvoid logEvalError(const char *message, const char *serverValueString=nullptr) constLog evaluation error message.Definition RooAbsReal.cxx:3464; RooAbsReal::getIntegratorConfigconst RooNumIntConfig * getIntegratorConfig() constReturn the numeric integration configuration used for this object.Definition RooAbsReal.cxx:3309; RooAbsReal::isBinnedDistributionvirtual bool isBinnedDistribution(const RooArgSet &) constTests if the distribution is binned. Unless overridden by derived classes, this always returns false.Definition RooAbsReal.h:346; RooAbsReal::createIntRIRooFit::OwningPtr< RooAbsReal > createIntRI(const RooArgSet &iset, const RooArgSet &nset={})Utility function for createRunningIntegral.Definition RooAbsReal.cxx:3827; RooAbsReal::plotOnvirtual RooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) constPlot (project) PDF on specified frame.Definition RooAbsReal.cxx:1611; RooArgListRooArgList is a container object that can hold multiple RooAbsArg objects.",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:165583,Modifiability,config,configuration,165583,"it::Detail::CompileContext::compileServersvoid compileServers(RooAbsArg &arg, RooArgSet const &normSet)Definition NormalizationHelpers.cxx:39; RooGenContextImplements a universal generator context for all RooAbsPdf classes that do not have or need a special...Definition RooGenContext.h:29; RooHelpers::LocalChangeMsgLevelSwitches the message service to a different level while the instance is alive.Definition RooHelpers.h:37; RooLinkedListCollection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list...Definition RooLinkedList.h:44; RooLinkedList::Addvirtual void Add(TObject *arg)Definition RooLinkedList.h:73; RooLinkedList::FindObjectTObject * FindObject(const char *name) const overrideReturn pointer to object with given name.Definition RooLinkedList.cxx:534; RooNameReg::strstatic const char * str(const TNamed *ptr)Return C++ string corresponding to given TNamed pointer.Definition RooNameReg.h:39; RooNumGenConfigHolds the configuration parameters of the various numeric integrators used by RooRealIntegral.Definition RooNumGenConfig.h:25; RooNumGenConfig::defaultConfigstatic RooNumGenConfig & defaultConfig()Return reference to instance of default numeric integrator configuration object.Definition RooNumGenConfig.cxx:44; RooObjCacheManagerImplementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elem...Definition RooObjCacheManager.h:29; RooObjCacheManager::sterilizevoid sterilize() overrideClear the cache payload but retain slot mapping w.r.t to normalization and integration sets.Definition RooObjCacheManager.cxx:152; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::addObjectvoid addObject(TObject *obj, Option_t *drawOptions="""", bool invisible=false)Add a generic object to this plot.Definition RooPlot.cxx:366; RooPlot::getFitRangeNEvtdouble getFitRangeNEvt() constReturn the number of events in the fit range.Definition RooPlot.h:145; Roo",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:165829,Modifiability,config,configuration,165829,"nts a universal generator context for all RooAbsPdf classes that do not have or need a special...Definition RooGenContext.h:29; RooHelpers::LocalChangeMsgLevelSwitches the message service to a different level while the instance is alive.Definition RooHelpers.h:37; RooLinkedListCollection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list...Definition RooLinkedList.h:44; RooLinkedList::Addvirtual void Add(TObject *arg)Definition RooLinkedList.h:73; RooLinkedList::FindObjectTObject * FindObject(const char *name) const overrideReturn pointer to object with given name.Definition RooLinkedList.cxx:534; RooNameReg::strstatic const char * str(const TNamed *ptr)Return C++ string corresponding to given TNamed pointer.Definition RooNameReg.h:39; RooNumGenConfigHolds the configuration parameters of the various numeric integrators used by RooRealIntegral.Definition RooNumGenConfig.h:25; RooNumGenConfig::defaultConfigstatic RooNumGenConfig & defaultConfig()Return reference to instance of default numeric integrator configuration object.Definition RooNumGenConfig.cxx:44; RooObjCacheManagerImplementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elem...Definition RooObjCacheManager.h:29; RooObjCacheManager::sterilizevoid sterilize() overrideClear the cache payload but retain slot mapping w.r.t to normalization and integration sets.Definition RooObjCacheManager.cxx:152; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::addObjectvoid addObject(TObject *obj, Option_t *drawOptions="""", bool invisible=false)Add a generic object to this plot.Definition RooPlot.cxx:366; RooPlot::getFitRangeNEvtdouble getFitRangeNEvt() constReturn the number of events in the fit range.Definition RooPlot.h:145; RooPlot::getNormVarsconst RooArgSet * getNormVars() constDefinition RooPlot.h:152; RooPlot::getPlotVarRooAbsRealLValue * getPlotVar() constDefinition RooPlot.h:143; ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:166902,Modifiability,variab,variables,166902,"ect.Definition RooNumGenConfig.cxx:44; RooObjCacheManagerImplementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elem...Definition RooObjCacheManager.h:29; RooObjCacheManager::sterilizevoid sterilize() overrideClear the cache payload but retain slot mapping w.r.t to normalization and integration sets.Definition RooObjCacheManager.cxx:152; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::addObjectvoid addObject(TObject *obj, Option_t *drawOptions="""", bool invisible=false)Add a generic object to this plot.Definition RooPlot.cxx:366; RooPlot::getFitRangeNEvtdouble getFitRangeNEvt() constReturn the number of events in the fit range.Definition RooPlot.h:145; RooPlot::getNormVarsconst RooArgSet * getNormVars() constDefinition RooPlot.h:152; RooPlot::getPlotVarRooAbsRealLValue * getPlotVar() constDefinition RooPlot.h:143; RooPlot::updateNormVarsvoid updateNormVars(const RooArgSet &vars)Install the given set of observables are reference normalization variables for this frame.Definition RooPlot.cxx:351; RooPlot::getFitRangeBinWdouble getFitRangeBinW() constReturn the bin width that is being used to normalise the PDF.Definition RooPlot.h:148; RooPrintable::kSingleLine@ kSingleLineDefinition RooPrintable.h:34; RooPrintable::kName@ kNameDefinition RooPrintable.h:33; RooPrintable::kAddress@ kAddressDefinition RooPrintable.h:33; RooPrintable::kValue@ kValueDefinition RooPrintable.h:33; RooPrintable::kArgs@ kArgsDefinition RooPrintable.h:33; RooPrintable::kTitle@ kTitleDefinition RooPrintable.h:33; RooPrintable::printStreamvirtual void printStream(std::ostream &os, Int_t contents, StyleOption style, TString indent="""") constPrint description of object on ostream, printing contents set by contents integer,...Definition RooPrintable.cxx:72; RooProjectedPdfA RooAbsPdf implementation that represent a projection of a given input p.d.f and the object returned...Definition RooProjectedPdf.h:",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:168608,Modifiability,variab,variable,168608,"n style, TString indent="""") constPrint description of object on ostream, printing contents set by contents integer,...Definition RooPrintable.cxx:72; RooProjectedPdfA RooAbsPdf implementation that represent a projection of a given input p.d.f and the object returned...Definition RooProjectedPdf.h:21; RooRandom::integerstatic UInt_t integer(UInt_t max, TRandom *generator=randomGenerator())Return an integer uniformly distributed from [0,n-1].Definition RooRandom.cxx:96; RooRandom::randomGeneratorstatic TRandom * randomGenerator()Return a pointer to a singleton random-number generator implementation.Definition RooRandom.cxx:48; RooRealIntegralPerforms hybrid numerical/analytical integrals of RooAbsReal objects.Definition RooRealIntegral.h:29; RooRealIntegral::numIntRealVarsconst RooArgSet & numIntRealVars() constDefinition RooRealIntegral.h:48; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; RooRealVar::setBinsvoid setBins(Int_t nBins, const char *name=nullptr)Create a uniform binning under name 'name' for this variable.Definition RooRealVar.cxx:396; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TObject::ClassNamevirtual const char * ClassName() constReturns name of class to which the object belongs.Definition TObject.cxx:213; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TRandom::Poissonvirtual ULong64_t Poisson(Double_t mean)Generates a random integer N according to a Poisson law.Definition TRandom.cxx:404; TRandom::Uniformvirtual Double_t Uniform(Double_t x1=1)Returns a uniform deviate on the interval (0, x1).Definition TRandom.cxx:682; TRandom::Integervirtual UInt_t Integer(UInt_t imax)Returns a random integer uniformly distributed on the inte",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:11849,Performance,cache,cached,11849,"sg = ""p.d.f normalization integral is zero or negative: "" + std::to_string(normVal);; 287 logEvalError(msg.c_str());; 288 clearValueAndShapeDirty();; 289 return RooNaNPacker::packFloatIntoNaN(-normVal + (rawVal < 0. ? -rawVal : 0.));; 290 }; 291 ; 292 if (rawVal < 0.) {; 293 logEvalError(Form(""p.d.f value is less than zero (%f), trying to recover"", rawVal));; 294 clearValueAndShapeDirty();; 295 return RooNaNPacker::packFloatIntoNaN(-rawVal);; 296 }; 297 ; 298 if (TMath::IsNaN(rawVal)) {; 299 logEvalError(""p.d.f value is Not-a-Number"");; 300 clearValueAndShapeDirty();; 301 return rawVal;; 302 }; 303 ; 304 return (rawVal == 0. && normVal == 0.) ? 0. : rawVal / normVal;; 305}; 306 ; 307 ; 308////////////////////////////////////////////////////////////////////////////////; 309/// Return current value, normalized by integrating over; 310/// the observables in `nset`. If `nset` is 0, the unnormalized value; 311/// is returned. All elements of `nset` must be lvalues.; 312///; 313/// Unnormalized values are not cached.; 314/// Doing so would be complicated as `_norm->getVal()` could; 315/// spoil the cache and interfere with returning the cached; 316/// return value. Since unnormalized calls are typically; 317/// done in integration calls, there is no performance hit.; 318 ; 319double RooAbsPdf::getValV(const RooArgSet* nset) const; 320{; 321 ; 322 // Special handling of case without normalization set (used in numeric integration of pdfs); 323 if (!nset) {; 324 RooArgSet const* tmp = _normSet ;; 325 _normSet = nullptr ;; 326 double val = evaluate() ;; 327 _normSet = tmp ;; 328 ; 329 return TMath::IsNaN(val) ? 0. : val;; 330 }; 331 ; 332 ; 333 // Process change in last data set used; 334 bool nintChanged(false) ;; 335 if (!isActiveNormSet(nset) || _norm==nullptr) {; 336 nintChanged = syncNormalization(nset) ;; 337 }; 338 ; 339 // Return value of object. Calculated if dirty, otherwise cached value is returned.; 340 if (isValueDirty() || nintChanged || _norm->isValueDirty()) {",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:11940,Performance,cache,cache,11940,"r(msg.c_str());; 288 clearValueAndShapeDirty();; 289 return RooNaNPacker::packFloatIntoNaN(-normVal + (rawVal < 0. ? -rawVal : 0.));; 290 }; 291 ; 292 if (rawVal < 0.) {; 293 logEvalError(Form(""p.d.f value is less than zero (%f), trying to recover"", rawVal));; 294 clearValueAndShapeDirty();; 295 return RooNaNPacker::packFloatIntoNaN(-rawVal);; 296 }; 297 ; 298 if (TMath::IsNaN(rawVal)) {; 299 logEvalError(""p.d.f value is Not-a-Number"");; 300 clearValueAndShapeDirty();; 301 return rawVal;; 302 }; 303 ; 304 return (rawVal == 0. && normVal == 0.) ? 0. : rawVal / normVal;; 305}; 306 ; 307 ; 308////////////////////////////////////////////////////////////////////////////////; 309/// Return current value, normalized by integrating over; 310/// the observables in `nset`. If `nset` is 0, the unnormalized value; 311/// is returned. All elements of `nset` must be lvalues.; 312///; 313/// Unnormalized values are not cached.; 314/// Doing so would be complicated as `_norm->getVal()` could; 315/// spoil the cache and interfere with returning the cached; 316/// return value. Since unnormalized calls are typically; 317/// done in integration calls, there is no performance hit.; 318 ; 319double RooAbsPdf::getValV(const RooArgSet* nset) const; 320{; 321 ; 322 // Special handling of case without normalization set (used in numeric integration of pdfs); 323 if (!nset) {; 324 RooArgSet const* tmp = _normSet ;; 325 _normSet = nullptr ;; 326 double val = evaluate() ;; 327 _normSet = tmp ;; 328 ; 329 return TMath::IsNaN(val) ? 0. : val;; 330 }; 331 ; 332 ; 333 // Process change in last data set used; 334 bool nintChanged(false) ;; 335 if (!isActiveNormSet(nset) || _norm==nullptr) {; 336 nintChanged = syncNormalization(nset) ;; 337 }; 338 ; 339 // Return value of object. Calculated if dirty, otherwise cached value is returned.; 340 if (isValueDirty() || nintChanged || _norm->isValueDirty()) {; 341 ; 342 // Evaluate numerator; 343 const double rawVal = evaluate();; 344 ; 345 // Evaluate denomi",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:11979,Performance,cache,cached,11979,"r(msg.c_str());; 288 clearValueAndShapeDirty();; 289 return RooNaNPacker::packFloatIntoNaN(-normVal + (rawVal < 0. ? -rawVal : 0.));; 290 }; 291 ; 292 if (rawVal < 0.) {; 293 logEvalError(Form(""p.d.f value is less than zero (%f), trying to recover"", rawVal));; 294 clearValueAndShapeDirty();; 295 return RooNaNPacker::packFloatIntoNaN(-rawVal);; 296 }; 297 ; 298 if (TMath::IsNaN(rawVal)) {; 299 logEvalError(""p.d.f value is Not-a-Number"");; 300 clearValueAndShapeDirty();; 301 return rawVal;; 302 }; 303 ; 304 return (rawVal == 0. && normVal == 0.) ? 0. : rawVal / normVal;; 305}; 306 ; 307 ; 308////////////////////////////////////////////////////////////////////////////////; 309/// Return current value, normalized by integrating over; 310/// the observables in `nset`. If `nset` is 0, the unnormalized value; 311/// is returned. All elements of `nset` must be lvalues.; 312///; 313/// Unnormalized values are not cached.; 314/// Doing so would be complicated as `_norm->getVal()` could; 315/// spoil the cache and interfere with returning the cached; 316/// return value. Since unnormalized calls are typically; 317/// done in integration calls, there is no performance hit.; 318 ; 319double RooAbsPdf::getValV(const RooArgSet* nset) const; 320{; 321 ; 322 // Special handling of case without normalization set (used in numeric integration of pdfs); 323 if (!nset) {; 324 RooArgSet const* tmp = _normSet ;; 325 _normSet = nullptr ;; 326 double val = evaluate() ;; 327 _normSet = tmp ;; 328 ; 329 return TMath::IsNaN(val) ? 0. : val;; 330 }; 331 ; 332 ; 333 // Process change in last data set used; 334 bool nintChanged(false) ;; 335 if (!isActiveNormSet(nset) || _norm==nullptr) {; 336 nintChanged = syncNormalization(nset) ;; 337 }; 338 ; 339 // Return value of object. Calculated if dirty, otherwise cached value is returned.; 340 if (isValueDirty() || nintChanged || _norm->isValueDirty()) {; 341 ; 342 // Evaluate numerator; 343 const double rawVal = evaluate();; 344 ; 345 // Evaluate denomi",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:12094,Performance,perform,performance,12094,"0.));; 290 }; 291 ; 292 if (rawVal < 0.) {; 293 logEvalError(Form(""p.d.f value is less than zero (%f), trying to recover"", rawVal));; 294 clearValueAndShapeDirty();; 295 return RooNaNPacker::packFloatIntoNaN(-rawVal);; 296 }; 297 ; 298 if (TMath::IsNaN(rawVal)) {; 299 logEvalError(""p.d.f value is Not-a-Number"");; 300 clearValueAndShapeDirty();; 301 return rawVal;; 302 }; 303 ; 304 return (rawVal == 0. && normVal == 0.) ? 0. : rawVal / normVal;; 305}; 306 ; 307 ; 308////////////////////////////////////////////////////////////////////////////////; 309/// Return current value, normalized by integrating over; 310/// the observables in `nset`. If `nset` is 0, the unnormalized value; 311/// is returned. All elements of `nset` must be lvalues.; 312///; 313/// Unnormalized values are not cached.; 314/// Doing so would be complicated as `_norm->getVal()` could; 315/// spoil the cache and interfere with returning the cached; 316/// return value. Since unnormalized calls are typically; 317/// done in integration calls, there is no performance hit.; 318 ; 319double RooAbsPdf::getValV(const RooArgSet* nset) const; 320{; 321 ; 322 // Special handling of case without normalization set (used in numeric integration of pdfs); 323 if (!nset) {; 324 RooArgSet const* tmp = _normSet ;; 325 _normSet = nullptr ;; 326 double val = evaluate() ;; 327 _normSet = tmp ;; 328 ; 329 return TMath::IsNaN(val) ? 0. : val;; 330 }; 331 ; 332 ; 333 // Process change in last data set used; 334 bool nintChanged(false) ;; 335 if (!isActiveNormSet(nset) || _norm==nullptr) {; 336 nintChanged = syncNormalization(nset) ;; 337 }; 338 ; 339 // Return value of object. Calculated if dirty, otherwise cached value is returned.; 340 if (isValueDirty() || nintChanged || _norm->isValueDirty()) {; 341 ; 342 // Evaluate numerator; 343 const double rawVal = evaluate();; 344 ; 345 // Evaluate denominator; 346 const double normVal = _norm->getVal();; 347 ; 348 _value = normalizeWithNaNPacking(rawVal, normVal);; 349 ; 350 cle",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:12738,Performance,cache,cached,12738,"zed value; 311/// is returned. All elements of `nset` must be lvalues.; 312///; 313/// Unnormalized values are not cached.; 314/// Doing so would be complicated as `_norm->getVal()` could; 315/// spoil the cache and interfere with returning the cached; 316/// return value. Since unnormalized calls are typically; 317/// done in integration calls, there is no performance hit.; 318 ; 319double RooAbsPdf::getValV(const RooArgSet* nset) const; 320{; 321 ; 322 // Special handling of case without normalization set (used in numeric integration of pdfs); 323 if (!nset) {; 324 RooArgSet const* tmp = _normSet ;; 325 _normSet = nullptr ;; 326 double val = evaluate() ;; 327 _normSet = tmp ;; 328 ; 329 return TMath::IsNaN(val) ? 0. : val;; 330 }; 331 ; 332 ; 333 // Process change in last data set used; 334 bool nintChanged(false) ;; 335 if (!isActiveNormSet(nset) || _norm==nullptr) {; 336 nintChanged = syncNormalization(nset) ;; 337 }; 338 ; 339 // Return value of object. Calculated if dirty, otherwise cached value is returned.; 340 if (isValueDirty() || nintChanged || _norm->isValueDirty()) {; 341 ; 342 // Evaluate numerator; 343 const double rawVal = evaluate();; 344 ; 345 // Evaluate denominator; 346 const double normVal = _norm->getVal();; 347 ; 348 _value = normalizeWithNaNPacking(rawVal, normVal);; 349 ; 350 clearValueAndShapeDirty();; 351 }; 352 ; 353 return _value ;; 354}; 355 ; 356 ; 357////////////////////////////////////////////////////////////////////////////////; 358/// Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information).; 359///; 360/// This function applies the normalization specified by `normSet` to the integral returned; 361/// by RooAbsReal::analyticalIntegral(). The passthrough scenario (code=0) is also changed; 362/// to return a normalized answer.; 363 ; 364double RooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName) const; 365{; 366 cxcoutD(Eval) << ""RooAbsPdf::analytic",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:16755,Performance,cache,cache,16755,"rmalise the raw values returned by; 416/// getVal(). Note that `getVal(normalisationVariables)` will automatically; 417/// apply the normalisation term returned here.; 418/// \param nset Set of variables to normalise over.; 419double RooAbsPdf::getNorm(const RooArgSet* nset) const; 420{; 421 if (!nset) return 1 ;; 422 ; 423 syncNormalization(nset,true) ;; 424 if (_verboseEval>1) cxcoutD(Tracing) << ClassName() << ""::getNorm("" << GetName() << ""): norm("" << _norm << "") = "" << _norm->getVal() << endl ;; 425 ; 426 double ret = _norm->getVal() ;; 427 if (ret==0.) {; 428 if(++_errorCount <= 10) {; 429 coutW(Eval) << ""RooAbsPdf::getNorm("" << GetName() << "":: WARNING normalization is zero, nset = "" ; nset->Print(""1"") ;; 430 if(_errorCount == 10) coutW(Eval) << ""RooAbsPdf::getNorm("" << GetName() << "") INFO: no more messages will be printed "" << endl ;; 431 }; 432 }; 433 ; 434 return ret ;; 435}; 436 ; 437 ; 438 ; 439////////////////////////////////////////////////////////////////////////////////; 440/// Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range; 441/// rangeName, optionally taking the integrand normalized over observables nset; 442 ; 443const RooAbsReal* RooAbsPdf::getNormObj(const RooArgSet* nset, const RooArgSet* iset, const TNamed* rangeName) const; 444{; 445 // Check normalization is already stored; 446 CacheElem* cache = static_cast<CacheElem*>(_normMgr.getObj(nset,iset,nullptr,rangeName)) ;; 447 if (cache) {; 448 return cache->_norm.get();; 449 }; 450 ; 451 // If not create it now; 452 RooArgSet depList;; 453 getObservables(iset, depList);; 454 ; 455 // Normalization is always over all pdf components. Overriding the global; 456 // component selection temporarily makes all RooRealIntegrals created during; 457 // that time always include all components.; 458 GlobalSelectComponentRAII globalSelComp(true);; 459 RooAbsReal* norm = std::unique_ptr<RooAbsReal>{createIntegral(depList,*nset, *getIntegratorConfig()",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:16844,Performance,cache,cache,16844," _norm->getVal() << endl ;; 425 ; 426 double ret = _norm->getVal() ;; 427 if (ret==0.) {; 428 if(++_errorCount <= 10) {; 429 coutW(Eval) << ""RooAbsPdf::getNorm("" << GetName() << "":: WARNING normalization is zero, nset = "" ; nset->Print(""1"") ;; 430 if(_errorCount == 10) coutW(Eval) << ""RooAbsPdf::getNorm("" << GetName() << "") INFO: no more messages will be printed "" << endl ;; 431 }; 432 }; 433 ; 434 return ret ;; 435}; 436 ; 437 ; 438 ; 439////////////////////////////////////////////////////////////////////////////////; 440/// Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range; 441/// rangeName, optionally taking the integrand normalized over observables nset; 442 ; 443const RooAbsReal* RooAbsPdf::getNormObj(const RooArgSet* nset, const RooArgSet* iset, const TNamed* rangeName) const; 444{; 445 // Check normalization is already stored; 446 CacheElem* cache = static_cast<CacheElem*>(_normMgr.getObj(nset,iset,nullptr,rangeName)) ;; 447 if (cache) {; 448 return cache->_norm.get();; 449 }; 450 ; 451 // If not create it now; 452 RooArgSet depList;; 453 getObservables(iset, depList);; 454 ; 455 // Normalization is always over all pdf components. Overriding the global; 456 // component selection temporarily makes all RooRealIntegrals created during; 457 // that time always include all components.; 458 GlobalSelectComponentRAII globalSelComp(true);; 459 RooAbsReal* norm = std::unique_ptr<RooAbsReal>{createIntegral(depList,*nset, *getIntegratorConfig(), RooNameReg::str(rangeName))}.release();; 460 ; 461 // Store it in the cache; 462 _normMgr.setObj(nset,iset,new CacheElem(*norm),rangeName) ;; 463 ; 464 // And return the newly created integral; 465 return norm ;; 466}; 467 ; 468 ; 469 ; 470////////////////////////////////////////////////////////////////////////////////; 471/// Verify that the normalization integral cached with this PDF; 472/// is valid for given set of normalization observables.; 473///; 474/// If not, th",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:16865,Performance,cache,cache,16865," _norm->getVal() << endl ;; 425 ; 426 double ret = _norm->getVal() ;; 427 if (ret==0.) {; 428 if(++_errorCount <= 10) {; 429 coutW(Eval) << ""RooAbsPdf::getNorm("" << GetName() << "":: WARNING normalization is zero, nset = "" ; nset->Print(""1"") ;; 430 if(_errorCount == 10) coutW(Eval) << ""RooAbsPdf::getNorm("" << GetName() << "") INFO: no more messages will be printed "" << endl ;; 431 }; 432 }; 433 ; 434 return ret ;; 435}; 436 ; 437 ; 438 ; 439////////////////////////////////////////////////////////////////////////////////; 440/// Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range; 441/// rangeName, optionally taking the integrand normalized over observables nset; 442 ; 443const RooAbsReal* RooAbsPdf::getNormObj(const RooArgSet* nset, const RooArgSet* iset, const TNamed* rangeName) const; 444{; 445 // Check normalization is already stored; 446 CacheElem* cache = static_cast<CacheElem*>(_normMgr.getObj(nset,iset,nullptr,rangeName)) ;; 447 if (cache) {; 448 return cache->_norm.get();; 449 }; 450 ; 451 // If not create it now; 452 RooArgSet depList;; 453 getObservables(iset, depList);; 454 ; 455 // Normalization is always over all pdf components. Overriding the global; 456 // component selection temporarily makes all RooRealIntegrals created during; 457 // that time always include all components.; 458 GlobalSelectComponentRAII globalSelComp(true);; 459 RooAbsReal* norm = std::unique_ptr<RooAbsReal>{createIntegral(depList,*nset, *getIntegratorConfig(), RooNameReg::str(rangeName))}.release();; 460 ; 461 // Store it in the cache; 462 _normMgr.setObj(nset,iset,new CacheElem(*norm),rangeName) ;; 463 ; 464 // And return the newly created integral; 465 return norm ;; 466}; 467 ; 468 ; 469 ; 470////////////////////////////////////////////////////////////////////////////////; 471/// Verify that the normalization integral cached with this PDF; 472/// is valid for given set of normalization observables.; 473///; 474/// If not, th",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:17431,Performance,cache,cache,17431," calculation of integral over observables iset in range; 441/// rangeName, optionally taking the integrand normalized over observables nset; 442 ; 443const RooAbsReal* RooAbsPdf::getNormObj(const RooArgSet* nset, const RooArgSet* iset, const TNamed* rangeName) const; 444{; 445 // Check normalization is already stored; 446 CacheElem* cache = static_cast<CacheElem*>(_normMgr.getObj(nset,iset,nullptr,rangeName)) ;; 447 if (cache) {; 448 return cache->_norm.get();; 449 }; 450 ; 451 // If not create it now; 452 RooArgSet depList;; 453 getObservables(iset, depList);; 454 ; 455 // Normalization is always over all pdf components. Overriding the global; 456 // component selection temporarily makes all RooRealIntegrals created during; 457 // that time always include all components.; 458 GlobalSelectComponentRAII globalSelComp(true);; 459 RooAbsReal* norm = std::unique_ptr<RooAbsReal>{createIntegral(depList,*nset, *getIntegratorConfig(), RooNameReg::str(rangeName))}.release();; 460 ; 461 // Store it in the cache; 462 _normMgr.setObj(nset,iset,new CacheElem(*norm),rangeName) ;; 463 ; 464 // And return the newly created integral; 465 return norm ;; 466}; 467 ; 468 ; 469 ; 470////////////////////////////////////////////////////////////////////////////////; 471/// Verify that the normalization integral cached with this PDF; 472/// is valid for given set of normalization observables.; 473///; 474/// If not, the cached normalization integral (if any) is deleted; 475/// and a new integral is constructed for use with 'nset'.; 476/// Elements in 'nset' can be discrete and real, but must be lvalues.; 477///; 478/// For functions that declare to be self-normalized by overloading the; 479/// selfNormalized() function, a unit normalization is always constructed.; 480 ; 481bool RooAbsPdf::syncNormalization(const RooArgSet* nset, bool adjustProxies) const; 482{; 483 setActiveNormSet(nset);; 484 ; 485 // Check if data sets are identical; 486 CacheElem* cache = static_cast<CacheElem*>(_normMgr.",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:17729,Performance,cache,cached,17729,"t, const RooArgSet* iset, const TNamed* rangeName) const; 444{; 445 // Check normalization is already stored; 446 CacheElem* cache = static_cast<CacheElem*>(_normMgr.getObj(nset,iset,nullptr,rangeName)) ;; 447 if (cache) {; 448 return cache->_norm.get();; 449 }; 450 ; 451 // If not create it now; 452 RooArgSet depList;; 453 getObservables(iset, depList);; 454 ; 455 // Normalization is always over all pdf components. Overriding the global; 456 // component selection temporarily makes all RooRealIntegrals created during; 457 // that time always include all components.; 458 GlobalSelectComponentRAII globalSelComp(true);; 459 RooAbsReal* norm = std::unique_ptr<RooAbsReal>{createIntegral(depList,*nset, *getIntegratorConfig(), RooNameReg::str(rangeName))}.release();; 460 ; 461 // Store it in the cache; 462 _normMgr.setObj(nset,iset,new CacheElem(*norm),rangeName) ;; 463 ; 464 // And return the newly created integral; 465 return norm ;; 466}; 467 ; 468 ; 469 ; 470////////////////////////////////////////////////////////////////////////////////; 471/// Verify that the normalization integral cached with this PDF; 472/// is valid for given set of normalization observables.; 473///; 474/// If not, the cached normalization integral (if any) is deleted; 475/// and a new integral is constructed for use with 'nset'.; 476/// Elements in 'nset' can be discrete and real, but must be lvalues.; 477///; 478/// For functions that declare to be self-normalized by overloading the; 479/// selfNormalized() function, a unit normalization is always constructed.; 480 ; 481bool RooAbsPdf::syncNormalization(const RooArgSet* nset, bool adjustProxies) const; 482{; 483 setActiveNormSet(nset);; 484 ; 485 // Check if data sets are identical; 486 CacheElem* cache = static_cast<CacheElem*>(_normMgr.getObj(nset)) ;; 487 if (cache) {; 488 ; 489 bool nintChanged = (_norm!=cache->_norm.get()) ;; 490 _norm = cache->_norm.get();; 491 ; 492 // In the past, this condition read `if (nintChanged && adjustProxies)`.",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:17839,Performance,cache,cached,17839,"t();; 449 }; 450 ; 451 // If not create it now; 452 RooArgSet depList;; 453 getObservables(iset, depList);; 454 ; 455 // Normalization is always over all pdf components. Overriding the global; 456 // component selection temporarily makes all RooRealIntegrals created during; 457 // that time always include all components.; 458 GlobalSelectComponentRAII globalSelComp(true);; 459 RooAbsReal* norm = std::unique_ptr<RooAbsReal>{createIntegral(depList,*nset, *getIntegratorConfig(), RooNameReg::str(rangeName))}.release();; 460 ; 461 // Store it in the cache; 462 _normMgr.setObj(nset,iset,new CacheElem(*norm),rangeName) ;; 463 ; 464 // And return the newly created integral; 465 return norm ;; 466}; 467 ; 468 ; 469 ; 470////////////////////////////////////////////////////////////////////////////////; 471/// Verify that the normalization integral cached with this PDF; 472/// is valid for given set of normalization observables.; 473///; 474/// If not, the cached normalization integral (if any) is deleted; 475/// and a new integral is constructed for use with 'nset'.; 476/// Elements in 'nset' can be discrete and real, but must be lvalues.; 477///; 478/// For functions that declare to be self-normalized by overloading the; 479/// selfNormalized() function, a unit normalization is always constructed.; 480 ; 481bool RooAbsPdf::syncNormalization(const RooArgSet* nset, bool adjustProxies) const; 482{; 483 setActiveNormSet(nset);; 484 ; 485 // Check if data sets are identical; 486 CacheElem* cache = static_cast<CacheElem*>(_normMgr.getObj(nset)) ;; 487 if (cache) {; 488 ; 489 bool nintChanged = (_norm!=cache->_norm.get()) ;; 490 _norm = cache->_norm.get();; 491 ; 492 // In the past, this condition read `if (nintChanged && adjustProxies)`.; 493 // However, the cache checks if the nset was already cached **by content**,; 494 // and not by RooArgSet instance! So it can happen that the normalization; 495 // set object is different, but the integral object is the same, in which; 496 // ca",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:18380,Performance,cache,cache,18380,"l>{createIntegral(depList,*nset, *getIntegratorConfig(), RooNameReg::str(rangeName))}.release();; 460 ; 461 // Store it in the cache; 462 _normMgr.setObj(nset,iset,new CacheElem(*norm),rangeName) ;; 463 ; 464 // And return the newly created integral; 465 return norm ;; 466}; 467 ; 468 ; 469 ; 470////////////////////////////////////////////////////////////////////////////////; 471/// Verify that the normalization integral cached with this PDF; 472/// is valid for given set of normalization observables.; 473///; 474/// If not, the cached normalization integral (if any) is deleted; 475/// and a new integral is constructed for use with 'nset'.; 476/// Elements in 'nset' can be discrete and real, but must be lvalues.; 477///; 478/// For functions that declare to be self-normalized by overloading the; 479/// selfNormalized() function, a unit normalization is always constructed.; 480 ; 481bool RooAbsPdf::syncNormalization(const RooArgSet* nset, bool adjustProxies) const; 482{; 483 setActiveNormSet(nset);; 484 ; 485 // Check if data sets are identical; 486 CacheElem* cache = static_cast<CacheElem*>(_normMgr.getObj(nset)) ;; 487 if (cache) {; 488 ; 489 bool nintChanged = (_norm!=cache->_norm.get()) ;; 490 _norm = cache->_norm.get();; 491 ; 492 // In the past, this condition read `if (nintChanged && adjustProxies)`.; 493 // However, the cache checks if the nset was already cached **by content**,; 494 // and not by RooArgSet instance! So it can happen that the normalization; 495 // set object is different, but the integral object is the same, in which; 496 // case it would be wrong to not adjust the proxies. They always have to be; 497 // adjusted when the nset changed, which is always the case when; 498 // `syncNormalization()` is called.; 499 if (adjustProxies) {; 500 // Update dataset pointers of proxies; 501 const_cast<RooAbsPdf*>(this)->setProxyNormSet(nset) ;; 502 }; 503 ; 504 return nintChanged ;; 505 }; 506 ; 507 // Update dataset pointers of proxies; 508 if (adjustProx",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:18446,Performance,cache,cache,18446,"iset,new CacheElem(*norm),rangeName) ;; 463 ; 464 // And return the newly created integral; 465 return norm ;; 466}; 467 ; 468 ; 469 ; 470////////////////////////////////////////////////////////////////////////////////; 471/// Verify that the normalization integral cached with this PDF; 472/// is valid for given set of normalization observables.; 473///; 474/// If not, the cached normalization integral (if any) is deleted; 475/// and a new integral is constructed for use with 'nset'.; 476/// Elements in 'nset' can be discrete and real, but must be lvalues.; 477///; 478/// For functions that declare to be self-normalized by overloading the; 479/// selfNormalized() function, a unit normalization is always constructed.; 480 ; 481bool RooAbsPdf::syncNormalization(const RooArgSet* nset, bool adjustProxies) const; 482{; 483 setActiveNormSet(nset);; 484 ; 485 // Check if data sets are identical; 486 CacheElem* cache = static_cast<CacheElem*>(_normMgr.getObj(nset)) ;; 487 if (cache) {; 488 ; 489 bool nintChanged = (_norm!=cache->_norm.get()) ;; 490 _norm = cache->_norm.get();; 491 ; 492 // In the past, this condition read `if (nintChanged && adjustProxies)`.; 493 // However, the cache checks if the nset was already cached **by content**,; 494 // and not by RooArgSet instance! So it can happen that the normalization; 495 // set object is different, but the integral object is the same, in which; 496 // case it would be wrong to not adjust the proxies. They always have to be; 497 // adjusted when the nset changed, which is always the case when; 498 // `syncNormalization()` is called.; 499 if (adjustProxies) {; 500 // Update dataset pointers of proxies; 501 const_cast<RooAbsPdf*>(this)->setProxyNormSet(nset) ;; 502 }; 503 ; 504 return nintChanged ;; 505 }; 506 ; 507 // Update dataset pointers of proxies; 508 if (adjustProxies) {; 509 const_cast<RooAbsPdf*>(this)->setProxyNormSet(nset) ;; 510 }; 511 ; 512 RooArgSet depList;; 513 getObservables(nset, depList);; 514 ; 515 if (_verb",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:18493,Performance,cache,cache,18493,"iset,new CacheElem(*norm),rangeName) ;; 463 ; 464 // And return the newly created integral; 465 return norm ;; 466}; 467 ; 468 ; 469 ; 470////////////////////////////////////////////////////////////////////////////////; 471/// Verify that the normalization integral cached with this PDF; 472/// is valid for given set of normalization observables.; 473///; 474/// If not, the cached normalization integral (if any) is deleted; 475/// and a new integral is constructed for use with 'nset'.; 476/// Elements in 'nset' can be discrete and real, but must be lvalues.; 477///; 478/// For functions that declare to be self-normalized by overloading the; 479/// selfNormalized() function, a unit normalization is always constructed.; 480 ; 481bool RooAbsPdf::syncNormalization(const RooArgSet* nset, bool adjustProxies) const; 482{; 483 setActiveNormSet(nset);; 484 ; 485 // Check if data sets are identical; 486 CacheElem* cache = static_cast<CacheElem*>(_normMgr.getObj(nset)) ;; 487 if (cache) {; 488 ; 489 bool nintChanged = (_norm!=cache->_norm.get()) ;; 490 _norm = cache->_norm.get();; 491 ; 492 // In the past, this condition read `if (nintChanged && adjustProxies)`.; 493 // However, the cache checks if the nset was already cached **by content**,; 494 // and not by RooArgSet instance! So it can happen that the normalization; 495 // set object is different, but the integral object is the same, in which; 496 // case it would be wrong to not adjust the proxies. They always have to be; 497 // adjusted when the nset changed, which is always the case when; 498 // `syncNormalization()` is called.; 499 if (adjustProxies) {; 500 // Update dataset pointers of proxies; 501 const_cast<RooAbsPdf*>(this)->setProxyNormSet(nset) ;; 502 }; 503 ; 504 return nintChanged ;; 505 }; 506 ; 507 // Update dataset pointers of proxies; 508 if (adjustProxies) {; 509 const_cast<RooAbsPdf*>(this)->setProxyNormSet(nset) ;; 510 }; 511 ; 512 RooArgSet depList;; 513 getObservables(nset, depList);; 514 ; 515 if (_verb",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:18528,Performance,cache,cache,18528,"urn the newly created integral; 465 return norm ;; 466}; 467 ; 468 ; 469 ; 470////////////////////////////////////////////////////////////////////////////////; 471/// Verify that the normalization integral cached with this PDF; 472/// is valid for given set of normalization observables.; 473///; 474/// If not, the cached normalization integral (if any) is deleted; 475/// and a new integral is constructed for use with 'nset'.; 476/// Elements in 'nset' can be discrete and real, but must be lvalues.; 477///; 478/// For functions that declare to be self-normalized by overloading the; 479/// selfNormalized() function, a unit normalization is always constructed.; 480 ; 481bool RooAbsPdf::syncNormalization(const RooArgSet* nset, bool adjustProxies) const; 482{; 483 setActiveNormSet(nset);; 484 ; 485 // Check if data sets are identical; 486 CacheElem* cache = static_cast<CacheElem*>(_normMgr.getObj(nset)) ;; 487 if (cache) {; 488 ; 489 bool nintChanged = (_norm!=cache->_norm.get()) ;; 490 _norm = cache->_norm.get();; 491 ; 492 // In the past, this condition read `if (nintChanged && adjustProxies)`.; 493 // However, the cache checks if the nset was already cached **by content**,; 494 // and not by RooArgSet instance! So it can happen that the normalization; 495 // set object is different, but the integral object is the same, in which; 496 // case it would be wrong to not adjust the proxies. They always have to be; 497 // adjusted when the nset changed, which is always the case when; 498 // `syncNormalization()` is called.; 499 if (adjustProxies) {; 500 // Update dataset pointers of proxies; 501 const_cast<RooAbsPdf*>(this)->setProxyNormSet(nset) ;; 502 }; 503 ; 504 return nintChanged ;; 505 }; 506 ; 507 // Update dataset pointers of proxies; 508 if (adjustProxies) {; 509 const_cast<RooAbsPdf*>(this)->setProxyNormSet(nset) ;; 510 }; 511 ; 512 RooArgSet depList;; 513 getObservables(nset, depList);; 514 ; 515 if (_verboseEval>0) {; 516 if (!selfNormalized()) {; 517 cxcoutD(Trac",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:18653,Performance,cache,cache,18653,"t of normalization observables.; 473///; 474/// If not, the cached normalization integral (if any) is deleted; 475/// and a new integral is constructed for use with 'nset'.; 476/// Elements in 'nset' can be discrete and real, but must be lvalues.; 477///; 478/// For functions that declare to be self-normalized by overloading the; 479/// selfNormalized() function, a unit normalization is always constructed.; 480 ; 481bool RooAbsPdf::syncNormalization(const RooArgSet* nset, bool adjustProxies) const; 482{; 483 setActiveNormSet(nset);; 484 ; 485 // Check if data sets are identical; 486 CacheElem* cache = static_cast<CacheElem*>(_normMgr.getObj(nset)) ;; 487 if (cache) {; 488 ; 489 bool nintChanged = (_norm!=cache->_norm.get()) ;; 490 _norm = cache->_norm.get();; 491 ; 492 // In the past, this condition read `if (nintChanged && adjustProxies)`.; 493 // However, the cache checks if the nset was already cached **by content**,; 494 // and not by RooArgSet instance! So it can happen that the normalization; 495 // set object is different, but the integral object is the same, in which; 496 // case it would be wrong to not adjust the proxies. They always have to be; 497 // adjusted when the nset changed, which is always the case when; 498 // `syncNormalization()` is called.; 499 if (adjustProxies) {; 500 // Update dataset pointers of proxies; 501 const_cast<RooAbsPdf*>(this)->setProxyNormSet(nset) ;; 502 }; 503 ; 504 return nintChanged ;; 505 }; 506 ; 507 // Update dataset pointers of proxies; 508 if (adjustProxies) {; 509 const_cast<RooAbsPdf*>(this)->setProxyNormSet(nset) ;; 510 }; 511 ; 512 RooArgSet depList;; 513 getObservables(nset, depList);; 514 ; 515 if (_verboseEval>0) {; 516 if (!selfNormalized()) {; 517 cxcoutD(Tracing) << ClassName() << ""::syncNormalization("" << GetName(); 518 << "") recreating normalization integral "" << endl ;; 519 depList.printStream(ccoutD(Tracing),kName|kValue|kArgs,kSingleLine) ;; 520 } else {; 521 cxcoutD(Tracing) << ClassName() << ""::syncNorm",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:18690,Performance,cache,cached,18690,"t of normalization observables.; 473///; 474/// If not, the cached normalization integral (if any) is deleted; 475/// and a new integral is constructed for use with 'nset'.; 476/// Elements in 'nset' can be discrete and real, but must be lvalues.; 477///; 478/// For functions that declare to be self-normalized by overloading the; 479/// selfNormalized() function, a unit normalization is always constructed.; 480 ; 481bool RooAbsPdf::syncNormalization(const RooArgSet* nset, bool adjustProxies) const; 482{; 483 setActiveNormSet(nset);; 484 ; 485 // Check if data sets are identical; 486 CacheElem* cache = static_cast<CacheElem*>(_normMgr.getObj(nset)) ;; 487 if (cache) {; 488 ; 489 bool nintChanged = (_norm!=cache->_norm.get()) ;; 490 _norm = cache->_norm.get();; 491 ; 492 // In the past, this condition read `if (nintChanged && adjustProxies)`.; 493 // However, the cache checks if the nset was already cached **by content**,; 494 // and not by RooArgSet instance! So it can happen that the normalization; 495 // set object is different, but the integral object is the same, in which; 496 // case it would be wrong to not adjust the proxies. They always have to be; 497 // adjusted when the nset changed, which is always the case when; 498 // `syncNormalization()` is called.; 499 if (adjustProxies) {; 500 // Update dataset pointers of proxies; 501 const_cast<RooAbsPdf*>(this)->setProxyNormSet(nset) ;; 502 }; 503 ; 504 return nintChanged ;; 505 }; 506 ; 507 // Update dataset pointers of proxies; 508 if (adjustProxies) {; 509 const_cast<RooAbsPdf*>(this)->setProxyNormSet(nset) ;; 510 }; 511 ; 512 RooArgSet depList;; 513 getObservables(nset, depList);; 514 ; 515 if (_verboseEval>0) {; 516 if (!selfNormalized()) {; 517 cxcoutD(Tracing) << ClassName() << ""::syncNormalization("" << GetName(); 518 << "") recreating normalization integral "" << endl ;; 519 depList.printStream(ccoutD(Tracing),kName|kValue|kArgs,kSingleLine) ;; 520 } else {; 521 cxcoutD(Tracing) << ClassName() << ""::syncNorm",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:21053,Performance,cache,cacheParamsStr,21053,";; 529 _norm = new RooRealVar(nname.c_str(),ntitle.c_str(),1) ;; 530 } else {; 531 const char* nr = (_normRangeOverride.Length()>0 ? _normRangeOverride.Data() : (_normRange.Length()>0 ? _normRange.Data() : nullptr)) ;; 532 ; 533// cout << ""RooAbsPdf::syncNormalization("" << GetName() << "") rangeName for normalization is "" << (nr?nr:""<null>"") << endl ;; 534 RooAbsReal* normInt;; 535 {; 536 // Normalization is always over all pdf components. Overriding the global; 537 // component selection temporarily makes all RooRealIntegrals created during; 538 // that time always include all components.; 539 GlobalSelectComponentRAII selCompRAII(true);; 540 normInt = std::unique_ptr<RooAbsReal>{createIntegral(depList,*getIntegratorConfig(),nr)}.release();; 541 }; 542 static_cast<RooRealIntegral*>(normInt)->setAllowComponentSelection(false);; 543 normInt->getVal() ;; 544// cout << ""resulting normInt = "" << normInt->GetName() << endl ;; 545 ; 546 const char* cacheParamsStr = getStringAttribute(""CACHEPARAMINT"") ;; 547 if (cacheParamsStr && strlen(cacheParamsStr)) {; 548 ; 549 std::unique_ptr<RooArgSet> intParams{normInt->getVariables()} ;; 550 ; 551 RooArgSet cacheParams = RooHelpers::selectFromArgSet(*intParams, cacheParamsStr);; 552 ; 553 if (!cacheParams.empty()) {; 554 cxcoutD(Caching) << ""RooAbsReal::createIntObj("" << GetName() << "") INFO: constructing "" << cacheParams.size(); 555 << ""-dim value cache for integral over "" << depList << "" as a function of "" << cacheParams << "" in range "" << (nr?nr:""<default>"") << endl ;; 556 string name = Form(""%s_CACHE_[%s]"",normInt->GetName(),cacheParams.contentsString().c_str()) ;; 557 RooCachedReal* cachedIntegral = new RooCachedReal(name.c_str(),name.c_str(),*normInt,cacheParams) ;; 558 cachedIntegral->setInterpolationOrder(2) ;; 559 cachedIntegral->addOwnedComponents(*normInt) ;; 560 cachedIntegral->setCacheSource(true) ;; 561 if (normInt->operMode()==ADirty) {; 562 cachedIntegral->setOperMode(ADirty) ;; 563 }; 564 normInt= cachedIntegral ;;",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:21117,Performance,cache,cacheParamsStr,21117,";; 529 _norm = new RooRealVar(nname.c_str(),ntitle.c_str(),1) ;; 530 } else {; 531 const char* nr = (_normRangeOverride.Length()>0 ? _normRangeOverride.Data() : (_normRange.Length()>0 ? _normRange.Data() : nullptr)) ;; 532 ; 533// cout << ""RooAbsPdf::syncNormalization("" << GetName() << "") rangeName for normalization is "" << (nr?nr:""<null>"") << endl ;; 534 RooAbsReal* normInt;; 535 {; 536 // Normalization is always over all pdf components. Overriding the global; 537 // component selection temporarily makes all RooRealIntegrals created during; 538 // that time always include all components.; 539 GlobalSelectComponentRAII selCompRAII(true);; 540 normInt = std::unique_ptr<RooAbsReal>{createIntegral(depList,*getIntegratorConfig(),nr)}.release();; 541 }; 542 static_cast<RooRealIntegral*>(normInt)->setAllowComponentSelection(false);; 543 normInt->getVal() ;; 544// cout << ""resulting normInt = "" << normInt->GetName() << endl ;; 545 ; 546 const char* cacheParamsStr = getStringAttribute(""CACHEPARAMINT"") ;; 547 if (cacheParamsStr && strlen(cacheParamsStr)) {; 548 ; 549 std::unique_ptr<RooArgSet> intParams{normInt->getVariables()} ;; 550 ; 551 RooArgSet cacheParams = RooHelpers::selectFromArgSet(*intParams, cacheParamsStr);; 552 ; 553 if (!cacheParams.empty()) {; 554 cxcoutD(Caching) << ""RooAbsReal::createIntObj("" << GetName() << "") INFO: constructing "" << cacheParams.size(); 555 << ""-dim value cache for integral over "" << depList << "" as a function of "" << cacheParams << "" in range "" << (nr?nr:""<default>"") << endl ;; 556 string name = Form(""%s_CACHE_[%s]"",normInt->GetName(),cacheParams.contentsString().c_str()) ;; 557 RooCachedReal* cachedIntegral = new RooCachedReal(name.c_str(),name.c_str(),*normInt,cacheParams) ;; 558 cachedIntegral->setInterpolationOrder(2) ;; 559 cachedIntegral->addOwnedComponents(*normInt) ;; 560 cachedIntegral->setCacheSource(true) ;; 561 if (normInt->operMode()==ADirty) {; 562 cachedIntegral->setOperMode(ADirty) ;; 563 }; 564 normInt= cachedIntegral ;;",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:21142,Performance,cache,cacheParamsStr,21142,";; 529 _norm = new RooRealVar(nname.c_str(),ntitle.c_str(),1) ;; 530 } else {; 531 const char* nr = (_normRangeOverride.Length()>0 ? _normRangeOverride.Data() : (_normRange.Length()>0 ? _normRange.Data() : nullptr)) ;; 532 ; 533// cout << ""RooAbsPdf::syncNormalization("" << GetName() << "") rangeName for normalization is "" << (nr?nr:""<null>"") << endl ;; 534 RooAbsReal* normInt;; 535 {; 536 // Normalization is always over all pdf components. Overriding the global; 537 // component selection temporarily makes all RooRealIntegrals created during; 538 // that time always include all components.; 539 GlobalSelectComponentRAII selCompRAII(true);; 540 normInt = std::unique_ptr<RooAbsReal>{createIntegral(depList,*getIntegratorConfig(),nr)}.release();; 541 }; 542 static_cast<RooRealIntegral*>(normInt)->setAllowComponentSelection(false);; 543 normInt->getVal() ;; 544// cout << ""resulting normInt = "" << normInt->GetName() << endl ;; 545 ; 546 const char* cacheParamsStr = getStringAttribute(""CACHEPARAMINT"") ;; 547 if (cacheParamsStr && strlen(cacheParamsStr)) {; 548 ; 549 std::unique_ptr<RooArgSet> intParams{normInt->getVariables()} ;; 550 ; 551 RooArgSet cacheParams = RooHelpers::selectFromArgSet(*intParams, cacheParamsStr);; 552 ; 553 if (!cacheParams.empty()) {; 554 cxcoutD(Caching) << ""RooAbsReal::createIntObj("" << GetName() << "") INFO: constructing "" << cacheParams.size(); 555 << ""-dim value cache for integral over "" << depList << "" as a function of "" << cacheParams << "" in range "" << (nr?nr:""<default>"") << endl ;; 556 string name = Form(""%s_CACHE_[%s]"",normInt->GetName(),cacheParams.contentsString().c_str()) ;; 557 RooCachedReal* cachedIntegral = new RooCachedReal(name.c_str(),name.c_str(),*normInt,cacheParams) ;; 558 cachedIntegral->setInterpolationOrder(2) ;; 559 cachedIntegral->addOwnedComponents(*normInt) ;; 560 cachedIntegral->setCacheSource(true) ;; 561 if (normInt->operMode()==ADirty) {; 562 cachedIntegral->setOperMode(ADirty) ;; 563 }; 564 normInt= cachedIntegral ;;",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:21257,Performance,cache,cacheParams,21257,";; 529 _norm = new RooRealVar(nname.c_str(),ntitle.c_str(),1) ;; 530 } else {; 531 const char* nr = (_normRangeOverride.Length()>0 ? _normRangeOverride.Data() : (_normRange.Length()>0 ? _normRange.Data() : nullptr)) ;; 532 ; 533// cout << ""RooAbsPdf::syncNormalization("" << GetName() << "") rangeName for normalization is "" << (nr?nr:""<null>"") << endl ;; 534 RooAbsReal* normInt;; 535 {; 536 // Normalization is always over all pdf components. Overriding the global; 537 // component selection temporarily makes all RooRealIntegrals created during; 538 // that time always include all components.; 539 GlobalSelectComponentRAII selCompRAII(true);; 540 normInt = std::unique_ptr<RooAbsReal>{createIntegral(depList,*getIntegratorConfig(),nr)}.release();; 541 }; 542 static_cast<RooRealIntegral*>(normInt)->setAllowComponentSelection(false);; 543 normInt->getVal() ;; 544// cout << ""resulting normInt = "" << normInt->GetName() << endl ;; 545 ; 546 const char* cacheParamsStr = getStringAttribute(""CACHEPARAMINT"") ;; 547 if (cacheParamsStr && strlen(cacheParamsStr)) {; 548 ; 549 std::unique_ptr<RooArgSet> intParams{normInt->getVariables()} ;; 550 ; 551 RooArgSet cacheParams = RooHelpers::selectFromArgSet(*intParams, cacheParamsStr);; 552 ; 553 if (!cacheParams.empty()) {; 554 cxcoutD(Caching) << ""RooAbsReal::createIntObj("" << GetName() << "") INFO: constructing "" << cacheParams.size(); 555 << ""-dim value cache for integral over "" << depList << "" as a function of "" << cacheParams << "" in range "" << (nr?nr:""<default>"") << endl ;; 556 string name = Form(""%s_CACHE_[%s]"",normInt->GetName(),cacheParams.contentsString().c_str()) ;; 557 RooCachedReal* cachedIntegral = new RooCachedReal(name.c_str(),name.c_str(),*normInt,cacheParams) ;; 558 cachedIntegral->setInterpolationOrder(2) ;; 559 cachedIntegral->addOwnedComponents(*normInt) ;; 560 cachedIntegral->setCacheSource(true) ;; 561 if (normInt->operMode()==ADirty) {; 562 cachedIntegral->setOperMode(ADirty) ;; 563 }; 564 normInt= cachedIntegral ;;",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:21312,Performance,cache,cacheParamsStr,21312,";; 529 _norm = new RooRealVar(nname.c_str(),ntitle.c_str(),1) ;; 530 } else {; 531 const char* nr = (_normRangeOverride.Length()>0 ? _normRangeOverride.Data() : (_normRange.Length()>0 ? _normRange.Data() : nullptr)) ;; 532 ; 533// cout << ""RooAbsPdf::syncNormalization("" << GetName() << "") rangeName for normalization is "" << (nr?nr:""<null>"") << endl ;; 534 RooAbsReal* normInt;; 535 {; 536 // Normalization is always over all pdf components. Overriding the global; 537 // component selection temporarily makes all RooRealIntegrals created during; 538 // that time always include all components.; 539 GlobalSelectComponentRAII selCompRAII(true);; 540 normInt = std::unique_ptr<RooAbsReal>{createIntegral(depList,*getIntegratorConfig(),nr)}.release();; 541 }; 542 static_cast<RooRealIntegral*>(normInt)->setAllowComponentSelection(false);; 543 normInt->getVal() ;; 544// cout << ""resulting normInt = "" << normInt->GetName() << endl ;; 545 ; 546 const char* cacheParamsStr = getStringAttribute(""CACHEPARAMINT"") ;; 547 if (cacheParamsStr && strlen(cacheParamsStr)) {; 548 ; 549 std::unique_ptr<RooArgSet> intParams{normInt->getVariables()} ;; 550 ; 551 RooArgSet cacheParams = RooHelpers::selectFromArgSet(*intParams, cacheParamsStr);; 552 ; 553 if (!cacheParams.empty()) {; 554 cxcoutD(Caching) << ""RooAbsReal::createIntObj("" << GetName() << "") INFO: constructing "" << cacheParams.size(); 555 << ""-dim value cache for integral over "" << depList << "" as a function of "" << cacheParams << "" in range "" << (nr?nr:""<default>"") << endl ;; 556 string name = Form(""%s_CACHE_[%s]"",normInt->GetName(),cacheParams.contentsString().c_str()) ;; 557 RooCachedReal* cachedIntegral = new RooCachedReal(name.c_str(),name.c_str(),*normInt,cacheParams) ;; 558 cachedIntegral->setInterpolationOrder(2) ;; 559 cachedIntegral->addOwnedComponents(*normInt) ;; 560 cachedIntegral->setCacheSource(true) ;; 561 if (normInt->operMode()==ADirty) {; 562 cachedIntegral->setOperMode(ADirty) ;; 563 }; 564 normInt= cachedIntegral ;;",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:21345,Performance,cache,cacheParams,21345,";; 529 _norm = new RooRealVar(nname.c_str(),ntitle.c_str(),1) ;; 530 } else {; 531 const char* nr = (_normRangeOverride.Length()>0 ? _normRangeOverride.Data() : (_normRange.Length()>0 ? _normRange.Data() : nullptr)) ;; 532 ; 533// cout << ""RooAbsPdf::syncNormalization("" << GetName() << "") rangeName for normalization is "" << (nr?nr:""<null>"") << endl ;; 534 RooAbsReal* normInt;; 535 {; 536 // Normalization is always over all pdf components. Overriding the global; 537 // component selection temporarily makes all RooRealIntegrals created during; 538 // that time always include all components.; 539 GlobalSelectComponentRAII selCompRAII(true);; 540 normInt = std::unique_ptr<RooAbsReal>{createIntegral(depList,*getIntegratorConfig(),nr)}.release();; 541 }; 542 static_cast<RooRealIntegral*>(normInt)->setAllowComponentSelection(false);; 543 normInt->getVal() ;; 544// cout << ""resulting normInt = "" << normInt->GetName() << endl ;; 545 ; 546 const char* cacheParamsStr = getStringAttribute(""CACHEPARAMINT"") ;; 547 if (cacheParamsStr && strlen(cacheParamsStr)) {; 548 ; 549 std::unique_ptr<RooArgSet> intParams{normInt->getVariables()} ;; 550 ; 551 RooArgSet cacheParams = RooHelpers::selectFromArgSet(*intParams, cacheParamsStr);; 552 ; 553 if (!cacheParams.empty()) {; 554 cxcoutD(Caching) << ""RooAbsReal::createIntObj("" << GetName() << "") INFO: constructing "" << cacheParams.size(); 555 << ""-dim value cache for integral over "" << depList << "" as a function of "" << cacheParams << "" in range "" << (nr?nr:""<default>"") << endl ;; 556 string name = Form(""%s_CACHE_[%s]"",normInt->GetName(),cacheParams.contentsString().c_str()) ;; 557 RooCachedReal* cachedIntegral = new RooCachedReal(name.c_str(),name.c_str(),*normInt,cacheParams) ;; 558 cachedIntegral->setInterpolationOrder(2) ;; 559 cachedIntegral->addOwnedComponents(*normInt) ;; 560 cachedIntegral->setCacheSource(true) ;; 561 if (normInt->operMode()==ADirty) {; 562 cachedIntegral->setOperMode(ADirty) ;; 563 }; 564 normInt= cachedIntegral ;;",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:21464,Performance,cache,cacheParams,21464,"s "" << (nr?nr:""<null>"") << endl ;; 534 RooAbsReal* normInt;; 535 {; 536 // Normalization is always over all pdf components. Overriding the global; 537 // component selection temporarily makes all RooRealIntegrals created during; 538 // that time always include all components.; 539 GlobalSelectComponentRAII selCompRAII(true);; 540 normInt = std::unique_ptr<RooAbsReal>{createIntegral(depList,*getIntegratorConfig(),nr)}.release();; 541 }; 542 static_cast<RooRealIntegral*>(normInt)->setAllowComponentSelection(false);; 543 normInt->getVal() ;; 544// cout << ""resulting normInt = "" << normInt->GetName() << endl ;; 545 ; 546 const char* cacheParamsStr = getStringAttribute(""CACHEPARAMINT"") ;; 547 if (cacheParamsStr && strlen(cacheParamsStr)) {; 548 ; 549 std::unique_ptr<RooArgSet> intParams{normInt->getVariables()} ;; 550 ; 551 RooArgSet cacheParams = RooHelpers::selectFromArgSet(*intParams, cacheParamsStr);; 552 ; 553 if (!cacheParams.empty()) {; 554 cxcoutD(Caching) << ""RooAbsReal::createIntObj("" << GetName() << "") INFO: constructing "" << cacheParams.size(); 555 << ""-dim value cache for integral over "" << depList << "" as a function of "" << cacheParams << "" in range "" << (nr?nr:""<default>"") << endl ;; 556 string name = Form(""%s_CACHE_[%s]"",normInt->GetName(),cacheParams.contentsString().c_str()) ;; 557 RooCachedReal* cachedIntegral = new RooCachedReal(name.c_str(),name.c_str(),*normInt,cacheParams) ;; 558 cachedIntegral->setInterpolationOrder(2) ;; 559 cachedIntegral->addOwnedComponents(*normInt) ;; 560 cachedIntegral->setCacheSource(true) ;; 561 if (normInt->operMode()==ADirty) {; 562 cachedIntegral->setOperMode(ADirty) ;; 563 }; 564 normInt= cachedIntegral ;; 565 }; 566 ; 567 }; 568 _norm = normInt ;; 569 }; 570 ; 571 // Register new normalization with manager (takes ownership); 572 cache = new CacheElem(*_norm) ;; 573 _normMgr.setObj(nset,cache) ;; 574 ; 575// cout << ""making new object "" << _norm->GetName() << endl ;; 576 ; 577 return true ;; 578}; 579 ; 580 ; 581 ; 582/",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:21503,Performance,cache,cache,21503,"on temporarily makes all RooRealIntegrals created during; 538 // that time always include all components.; 539 GlobalSelectComponentRAII selCompRAII(true);; 540 normInt = std::unique_ptr<RooAbsReal>{createIntegral(depList,*getIntegratorConfig(),nr)}.release();; 541 }; 542 static_cast<RooRealIntegral*>(normInt)->setAllowComponentSelection(false);; 543 normInt->getVal() ;; 544// cout << ""resulting normInt = "" << normInt->GetName() << endl ;; 545 ; 546 const char* cacheParamsStr = getStringAttribute(""CACHEPARAMINT"") ;; 547 if (cacheParamsStr && strlen(cacheParamsStr)) {; 548 ; 549 std::unique_ptr<RooArgSet> intParams{normInt->getVariables()} ;; 550 ; 551 RooArgSet cacheParams = RooHelpers::selectFromArgSet(*intParams, cacheParamsStr);; 552 ; 553 if (!cacheParams.empty()) {; 554 cxcoutD(Caching) << ""RooAbsReal::createIntObj("" << GetName() << "") INFO: constructing "" << cacheParams.size(); 555 << ""-dim value cache for integral over "" << depList << "" as a function of "" << cacheParams << "" in range "" << (nr?nr:""<default>"") << endl ;; 556 string name = Form(""%s_CACHE_[%s]"",normInt->GetName(),cacheParams.contentsString().c_str()) ;; 557 RooCachedReal* cachedIntegral = new RooCachedReal(name.c_str(),name.c_str(),*normInt,cacheParams) ;; 558 cachedIntegral->setInterpolationOrder(2) ;; 559 cachedIntegral->addOwnedComponents(*normInt) ;; 560 cachedIntegral->setCacheSource(true) ;; 561 if (normInt->operMode()==ADirty) {; 562 cachedIntegral->setOperMode(ADirty) ;; 563 }; 564 normInt= cachedIntegral ;; 565 }; 566 ; 567 }; 568 _norm = normInt ;; 569 }; 570 ; 571 // Register new normalization with manager (takes ownership); 572 cache = new CacheElem(*_norm) ;; 573 _normMgr.setObj(nset,cache) ;; 574 ; 575// cout << ""making new object "" << _norm->GetName() << endl ;; 576 ; 577 return true ;; 578}; 579 ; 580 ; 581 ; 582////////////////////////////////////////////////////////////////////////////////; 583/// Reset error counter to given value, limiting the number; 584/// of future error mes",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:21567,Performance,cache,cacheParams,21567,"on temporarily makes all RooRealIntegrals created during; 538 // that time always include all components.; 539 GlobalSelectComponentRAII selCompRAII(true);; 540 normInt = std::unique_ptr<RooAbsReal>{createIntegral(depList,*getIntegratorConfig(),nr)}.release();; 541 }; 542 static_cast<RooRealIntegral*>(normInt)->setAllowComponentSelection(false);; 543 normInt->getVal() ;; 544// cout << ""resulting normInt = "" << normInt->GetName() << endl ;; 545 ; 546 const char* cacheParamsStr = getStringAttribute(""CACHEPARAMINT"") ;; 547 if (cacheParamsStr && strlen(cacheParamsStr)) {; 548 ; 549 std::unique_ptr<RooArgSet> intParams{normInt->getVariables()} ;; 550 ; 551 RooArgSet cacheParams = RooHelpers::selectFromArgSet(*intParams, cacheParamsStr);; 552 ; 553 if (!cacheParams.empty()) {; 554 cxcoutD(Caching) << ""RooAbsReal::createIntObj("" << GetName() << "") INFO: constructing "" << cacheParams.size(); 555 << ""-dim value cache for integral over "" << depList << "" as a function of "" << cacheParams << "" in range "" << (nr?nr:""<default>"") << endl ;; 556 string name = Form(""%s_CACHE_[%s]"",normInt->GetName(),cacheParams.contentsString().c_str()) ;; 557 RooCachedReal* cachedIntegral = new RooCachedReal(name.c_str(),name.c_str(),*normInt,cacheParams) ;; 558 cachedIntegral->setInterpolationOrder(2) ;; 559 cachedIntegral->addOwnedComponents(*normInt) ;; 560 cachedIntegral->setCacheSource(true) ;; 561 if (normInt->operMode()==ADirty) {; 562 cachedIntegral->setOperMode(ADirty) ;; 563 }; 564 normInt= cachedIntegral ;; 565 }; 566 ; 567 }; 568 _norm = normInt ;; 569 }; 570 ; 571 // Register new normalization with manager (takes ownership); 572 cache = new CacheElem(*_norm) ;; 573 _normMgr.setObj(nset,cache) ;; 574 ; 575// cout << ""making new object "" << _norm->GetName() << endl ;; 576 ; 577 return true ;; 578}; 579 ; 580 ; 581 ; 582////////////////////////////////////////////////////////////////////////////////; 583/// Reset error counter to given value, limiting the number; 584/// of future error mes",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:21687,Performance,cache,cacheParams,21687,"on temporarily makes all RooRealIntegrals created during; 538 // that time always include all components.; 539 GlobalSelectComponentRAII selCompRAII(true);; 540 normInt = std::unique_ptr<RooAbsReal>{createIntegral(depList,*getIntegratorConfig(),nr)}.release();; 541 }; 542 static_cast<RooRealIntegral*>(normInt)->setAllowComponentSelection(false);; 543 normInt->getVal() ;; 544// cout << ""resulting normInt = "" << normInt->GetName() << endl ;; 545 ; 546 const char* cacheParamsStr = getStringAttribute(""CACHEPARAMINT"") ;; 547 if (cacheParamsStr && strlen(cacheParamsStr)) {; 548 ; 549 std::unique_ptr<RooArgSet> intParams{normInt->getVariables()} ;; 550 ; 551 RooArgSet cacheParams = RooHelpers::selectFromArgSet(*intParams, cacheParamsStr);; 552 ; 553 if (!cacheParams.empty()) {; 554 cxcoutD(Caching) << ""RooAbsReal::createIntObj("" << GetName() << "") INFO: constructing "" << cacheParams.size(); 555 << ""-dim value cache for integral over "" << depList << "" as a function of "" << cacheParams << "" in range "" << (nr?nr:""<default>"") << endl ;; 556 string name = Form(""%s_CACHE_[%s]"",normInt->GetName(),cacheParams.contentsString().c_str()) ;; 557 RooCachedReal* cachedIntegral = new RooCachedReal(name.c_str(),name.c_str(),*normInt,cacheParams) ;; 558 cachedIntegral->setInterpolationOrder(2) ;; 559 cachedIntegral->addOwnedComponents(*normInt) ;; 560 cachedIntegral->setCacheSource(true) ;; 561 if (normInt->operMode()==ADirty) {; 562 cachedIntegral->setOperMode(ADirty) ;; 563 }; 564 normInt= cachedIntegral ;; 565 }; 566 ; 567 }; 568 _norm = normInt ;; 569 }; 570 ; 571 // Register new normalization with manager (takes ownership); 572 cache = new CacheElem(*_norm) ;; 573 _normMgr.setObj(nset,cache) ;; 574 ; 575// cout << ""making new object "" << _norm->GetName() << endl ;; 576 ; 577 return true ;; 578}; 579 ; 580 ; 581 ; 582////////////////////////////////////////////////////////////////////////////////; 583/// Reset error counter to given value, limiting the number; 584/// of future error mes",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:21747,Performance,cache,cachedIntegral,21747,"mInt = std::unique_ptr<RooAbsReal>{createIntegral(depList,*getIntegratorConfig(),nr)}.release();; 541 }; 542 static_cast<RooRealIntegral*>(normInt)->setAllowComponentSelection(false);; 543 normInt->getVal() ;; 544// cout << ""resulting normInt = "" << normInt->GetName() << endl ;; 545 ; 546 const char* cacheParamsStr = getStringAttribute(""CACHEPARAMINT"") ;; 547 if (cacheParamsStr && strlen(cacheParamsStr)) {; 548 ; 549 std::unique_ptr<RooArgSet> intParams{normInt->getVariables()} ;; 550 ; 551 RooArgSet cacheParams = RooHelpers::selectFromArgSet(*intParams, cacheParamsStr);; 552 ; 553 if (!cacheParams.empty()) {; 554 cxcoutD(Caching) << ""RooAbsReal::createIntObj("" << GetName() << "") INFO: constructing "" << cacheParams.size(); 555 << ""-dim value cache for integral over "" << depList << "" as a function of "" << cacheParams << "" in range "" << (nr?nr:""<default>"") << endl ;; 556 string name = Form(""%s_CACHE_[%s]"",normInt->GetName(),cacheParams.contentsString().c_str()) ;; 557 RooCachedReal* cachedIntegral = new RooCachedReal(name.c_str(),name.c_str(),*normInt,cacheParams) ;; 558 cachedIntegral->setInterpolationOrder(2) ;; 559 cachedIntegral->addOwnedComponents(*normInt) ;; 560 cachedIntegral->setCacheSource(true) ;; 561 if (normInt->operMode()==ADirty) {; 562 cachedIntegral->setOperMode(ADirty) ;; 563 }; 564 normInt= cachedIntegral ;; 565 }; 566 ; 567 }; 568 _norm = normInt ;; 569 }; 570 ; 571 // Register new normalization with manager (takes ownership); 572 cache = new CacheElem(*_norm) ;; 573 _normMgr.setObj(nset,cache) ;; 574 ; 575// cout << ""making new object "" << _norm->GetName() << endl ;; 576 ; 577 return true ;; 578}; 579 ; 580 ; 581 ; 582////////////////////////////////////////////////////////////////////////////////; 583/// Reset error counter to given value, limiting the number; 584/// of future error messages for this pdf to 'resetValue'; 585 ; 586void RooAbsPdf::resetErrorCounters(Int_t resetValue); 587{; 588 _errorCount = resetValue ;; 589 _negCount = resetValue ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:21817,Performance,cache,cacheParams,21817,"; 546 const char* cacheParamsStr = getStringAttribute(""CACHEPARAMINT"") ;; 547 if (cacheParamsStr && strlen(cacheParamsStr)) {; 548 ; 549 std::unique_ptr<RooArgSet> intParams{normInt->getVariables()} ;; 550 ; 551 RooArgSet cacheParams = RooHelpers::selectFromArgSet(*intParams, cacheParamsStr);; 552 ; 553 if (!cacheParams.empty()) {; 554 cxcoutD(Caching) << ""RooAbsReal::createIntObj("" << GetName() << "") INFO: constructing "" << cacheParams.size(); 555 << ""-dim value cache for integral over "" << depList << "" as a function of "" << cacheParams << "" in range "" << (nr?nr:""<default>"") << endl ;; 556 string name = Form(""%s_CACHE_[%s]"",normInt->GetName(),cacheParams.contentsString().c_str()) ;; 557 RooCachedReal* cachedIntegral = new RooCachedReal(name.c_str(),name.c_str(),*normInt,cacheParams) ;; 558 cachedIntegral->setInterpolationOrder(2) ;; 559 cachedIntegral->addOwnedComponents(*normInt) ;; 560 cachedIntegral->setCacheSource(true) ;; 561 if (normInt->operMode()==ADirty) {; 562 cachedIntegral->setOperMode(ADirty) ;; 563 }; 564 normInt= cachedIntegral ;; 565 }; 566 ; 567 }; 568 _norm = normInt ;; 569 }; 570 ; 571 // Register new normalization with manager (takes ownership); 572 cache = new CacheElem(*_norm) ;; 573 _normMgr.setObj(nset,cache) ;; 574 ; 575// cout << ""making new object "" << _norm->GetName() << endl ;; 576 ; 577 return true ;; 578}; 579 ; 580 ; 581 ; 582////////////////////////////////////////////////////////////////////////////////; 583/// Reset error counter to given value, limiting the number; 584/// of future error messages for this pdf to 'resetValue'; 585 ; 586void RooAbsPdf::resetErrorCounters(Int_t resetValue); 587{; 588 _errorCount = resetValue ;; 589 _negCount = resetValue ;; 590}; 591 ; 592 ; 593 ; 594////////////////////////////////////////////////////////////////////////////////; 595/// Reset trace counter to given value, limiting the; 596/// number of future trace messages for this pdf to 'value'; 597 ; 598void RooAbsPdf::setTraceCounter(Int_t val",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:21837,Performance,cache,cachedIntegral,21837,"; 546 const char* cacheParamsStr = getStringAttribute(""CACHEPARAMINT"") ;; 547 if (cacheParamsStr && strlen(cacheParamsStr)) {; 548 ; 549 std::unique_ptr<RooArgSet> intParams{normInt->getVariables()} ;; 550 ; 551 RooArgSet cacheParams = RooHelpers::selectFromArgSet(*intParams, cacheParamsStr);; 552 ; 553 if (!cacheParams.empty()) {; 554 cxcoutD(Caching) << ""RooAbsReal::createIntObj("" << GetName() << "") INFO: constructing "" << cacheParams.size(); 555 << ""-dim value cache for integral over "" << depList << "" as a function of "" << cacheParams << "" in range "" << (nr?nr:""<default>"") << endl ;; 556 string name = Form(""%s_CACHE_[%s]"",normInt->GetName(),cacheParams.contentsString().c_str()) ;; 557 RooCachedReal* cachedIntegral = new RooCachedReal(name.c_str(),name.c_str(),*normInt,cacheParams) ;; 558 cachedIntegral->setInterpolationOrder(2) ;; 559 cachedIntegral->addOwnedComponents(*normInt) ;; 560 cachedIntegral->setCacheSource(true) ;; 561 if (normInt->operMode()==ADirty) {; 562 cachedIntegral->setOperMode(ADirty) ;; 563 }; 564 normInt= cachedIntegral ;; 565 }; 566 ; 567 }; 568 _norm = normInt ;; 569 }; 570 ; 571 // Register new normalization with manager (takes ownership); 572 cache = new CacheElem(*_norm) ;; 573 _normMgr.setObj(nset,cache) ;; 574 ; 575// cout << ""making new object "" << _norm->GetName() << endl ;; 576 ; 577 return true ;; 578}; 579 ; 580 ; 581 ; 582////////////////////////////////////////////////////////////////////////////////; 583/// Reset error counter to given value, limiting the number; 584/// of future error messages for this pdf to 'resetValue'; 585 ; 586void RooAbsPdf::resetErrorCounters(Int_t resetValue); 587{; 588 _errorCount = resetValue ;; 589 _negCount = resetValue ;; 590}; 591 ; 592 ; 593 ; 594////////////////////////////////////////////////////////////////////////////////; 595/// Reset trace counter to given value, limiting the; 596/// number of future trace messages for this pdf to 'value'; 597 ; 598void RooAbsPdf::setTraceCounter(Int_t val",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:21885,Performance,cache,cachedIntegral,21885,"; 546 const char* cacheParamsStr = getStringAttribute(""CACHEPARAMINT"") ;; 547 if (cacheParamsStr && strlen(cacheParamsStr)) {; 548 ; 549 std::unique_ptr<RooArgSet> intParams{normInt->getVariables()} ;; 550 ; 551 RooArgSet cacheParams = RooHelpers::selectFromArgSet(*intParams, cacheParamsStr);; 552 ; 553 if (!cacheParams.empty()) {; 554 cxcoutD(Caching) << ""RooAbsReal::createIntObj("" << GetName() << "") INFO: constructing "" << cacheParams.size(); 555 << ""-dim value cache for integral over "" << depList << "" as a function of "" << cacheParams << "" in range "" << (nr?nr:""<default>"") << endl ;; 556 string name = Form(""%s_CACHE_[%s]"",normInt->GetName(),cacheParams.contentsString().c_str()) ;; 557 RooCachedReal* cachedIntegral = new RooCachedReal(name.c_str(),name.c_str(),*normInt,cacheParams) ;; 558 cachedIntegral->setInterpolationOrder(2) ;; 559 cachedIntegral->addOwnedComponents(*normInt) ;; 560 cachedIntegral->setCacheSource(true) ;; 561 if (normInt->operMode()==ADirty) {; 562 cachedIntegral->setOperMode(ADirty) ;; 563 }; 564 normInt= cachedIntegral ;; 565 }; 566 ; 567 }; 568 _norm = normInt ;; 569 }; 570 ; 571 // Register new normalization with manager (takes ownership); 572 cache = new CacheElem(*_norm) ;; 573 _normMgr.setObj(nset,cache) ;; 574 ; 575// cout << ""making new object "" << _norm->GetName() << endl ;; 576 ; 577 return true ;; 578}; 579 ; 580 ; 581 ; 582////////////////////////////////////////////////////////////////////////////////; 583/// Reset error counter to given value, limiting the number; 584/// of future error messages for this pdf to 'resetValue'; 585 ; 586void RooAbsPdf::resetErrorCounters(Int_t resetValue); 587{; 588 _errorCount = resetValue ;; 589 _negCount = resetValue ;; 590}; 591 ; 592 ; 593 ; 594////////////////////////////////////////////////////////////////////////////////; 595/// Reset trace counter to given value, limiting the; 596/// number of future trace messages for this pdf to 'value'; 597 ; 598void RooAbsPdf::setTraceCounter(Int_t val",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:21937,Performance,cache,cachedIntegral,21937,"; 546 const char* cacheParamsStr = getStringAttribute(""CACHEPARAMINT"") ;; 547 if (cacheParamsStr && strlen(cacheParamsStr)) {; 548 ; 549 std::unique_ptr<RooArgSet> intParams{normInt->getVariables()} ;; 550 ; 551 RooArgSet cacheParams = RooHelpers::selectFromArgSet(*intParams, cacheParamsStr);; 552 ; 553 if (!cacheParams.empty()) {; 554 cxcoutD(Caching) << ""RooAbsReal::createIntObj("" << GetName() << "") INFO: constructing "" << cacheParams.size(); 555 << ""-dim value cache for integral over "" << depList << "" as a function of "" << cacheParams << "" in range "" << (nr?nr:""<default>"") << endl ;; 556 string name = Form(""%s_CACHE_[%s]"",normInt->GetName(),cacheParams.contentsString().c_str()) ;; 557 RooCachedReal* cachedIntegral = new RooCachedReal(name.c_str(),name.c_str(),*normInt,cacheParams) ;; 558 cachedIntegral->setInterpolationOrder(2) ;; 559 cachedIntegral->addOwnedComponents(*normInt) ;; 560 cachedIntegral->setCacheSource(true) ;; 561 if (normInt->operMode()==ADirty) {; 562 cachedIntegral->setOperMode(ADirty) ;; 563 }; 564 normInt= cachedIntegral ;; 565 }; 566 ; 567 }; 568 _norm = normInt ;; 569 }; 570 ; 571 // Register new normalization with manager (takes ownership); 572 cache = new CacheElem(*_norm) ;; 573 _normMgr.setObj(nset,cache) ;; 574 ; 575// cout << ""making new object "" << _norm->GetName() << endl ;; 576 ; 577 return true ;; 578}; 579 ; 580 ; 581 ; 582////////////////////////////////////////////////////////////////////////////////; 583/// Reset error counter to given value, limiting the number; 584/// of future error messages for this pdf to 'resetValue'; 585 ; 586void RooAbsPdf::resetErrorCounters(Int_t resetValue); 587{; 588 _errorCount = resetValue ;; 589 _negCount = resetValue ;; 590}; 591 ; 592 ; 593 ; 594////////////////////////////////////////////////////////////////////////////////; 595/// Reset trace counter to given value, limiting the; 596/// number of future trace messages for this pdf to 'value'; 597 ; 598void RooAbsPdf::setTraceCounter(Int_t val",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:22021,Performance,cache,cachedIntegral,22021,"; 546 const char* cacheParamsStr = getStringAttribute(""CACHEPARAMINT"") ;; 547 if (cacheParamsStr && strlen(cacheParamsStr)) {; 548 ; 549 std::unique_ptr<RooArgSet> intParams{normInt->getVariables()} ;; 550 ; 551 RooArgSet cacheParams = RooHelpers::selectFromArgSet(*intParams, cacheParamsStr);; 552 ; 553 if (!cacheParams.empty()) {; 554 cxcoutD(Caching) << ""RooAbsReal::createIntObj("" << GetName() << "") INFO: constructing "" << cacheParams.size(); 555 << ""-dim value cache for integral over "" << depList << "" as a function of "" << cacheParams << "" in range "" << (nr?nr:""<default>"") << endl ;; 556 string name = Form(""%s_CACHE_[%s]"",normInt->GetName(),cacheParams.contentsString().c_str()) ;; 557 RooCachedReal* cachedIntegral = new RooCachedReal(name.c_str(),name.c_str(),*normInt,cacheParams) ;; 558 cachedIntegral->setInterpolationOrder(2) ;; 559 cachedIntegral->addOwnedComponents(*normInt) ;; 560 cachedIntegral->setCacheSource(true) ;; 561 if (normInt->operMode()==ADirty) {; 562 cachedIntegral->setOperMode(ADirty) ;; 563 }; 564 normInt= cachedIntegral ;; 565 }; 566 ; 567 }; 568 _norm = normInt ;; 569 }; 570 ; 571 // Register new normalization with manager (takes ownership); 572 cache = new CacheElem(*_norm) ;; 573 _normMgr.setObj(nset,cache) ;; 574 ; 575// cout << ""making new object "" << _norm->GetName() << endl ;; 576 ; 577 return true ;; 578}; 579 ; 580 ; 581 ; 582////////////////////////////////////////////////////////////////////////////////; 583/// Reset error counter to given value, limiting the number; 584/// of future error messages for this pdf to 'resetValue'; 585 ; 586void RooAbsPdf::resetErrorCounters(Int_t resetValue); 587{; 588 _errorCount = resetValue ;; 589 _negCount = resetValue ;; 590}; 591 ; 592 ; 593 ; 594////////////////////////////////////////////////////////////////////////////////; 595/// Reset trace counter to given value, limiting the; 596/// number of future trace messages for this pdf to 'value'; 597 ; 598void RooAbsPdf::setTraceCounter(Int_t val",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:22080,Performance,cache,cachedIntegral,22080,"; 546 const char* cacheParamsStr = getStringAttribute(""CACHEPARAMINT"") ;; 547 if (cacheParamsStr && strlen(cacheParamsStr)) {; 548 ; 549 std::unique_ptr<RooArgSet> intParams{normInt->getVariables()} ;; 550 ; 551 RooArgSet cacheParams = RooHelpers::selectFromArgSet(*intParams, cacheParamsStr);; 552 ; 553 if (!cacheParams.empty()) {; 554 cxcoutD(Caching) << ""RooAbsReal::createIntObj("" << GetName() << "") INFO: constructing "" << cacheParams.size(); 555 << ""-dim value cache for integral over "" << depList << "" as a function of "" << cacheParams << "" in range "" << (nr?nr:""<default>"") << endl ;; 556 string name = Form(""%s_CACHE_[%s]"",normInt->GetName(),cacheParams.contentsString().c_str()) ;; 557 RooCachedReal* cachedIntegral = new RooCachedReal(name.c_str(),name.c_str(),*normInt,cacheParams) ;; 558 cachedIntegral->setInterpolationOrder(2) ;; 559 cachedIntegral->addOwnedComponents(*normInt) ;; 560 cachedIntegral->setCacheSource(true) ;; 561 if (normInt->operMode()==ADirty) {; 562 cachedIntegral->setOperMode(ADirty) ;; 563 }; 564 normInt= cachedIntegral ;; 565 }; 566 ; 567 }; 568 _norm = normInt ;; 569 }; 570 ; 571 // Register new normalization with manager (takes ownership); 572 cache = new CacheElem(*_norm) ;; 573 _normMgr.setObj(nset,cache) ;; 574 ; 575// cout << ""making new object "" << _norm->GetName() << endl ;; 576 ; 577 return true ;; 578}; 579 ; 580 ; 581 ; 582////////////////////////////////////////////////////////////////////////////////; 583/// Reset error counter to given value, limiting the number; 584/// of future error messages for this pdf to 'resetValue'; 585 ; 586void RooAbsPdf::resetErrorCounters(Int_t resetValue); 587{; 588 _errorCount = resetValue ;; 589 _negCount = resetValue ;; 590}; 591 ; 592 ; 593 ; 594////////////////////////////////////////////////////////////////////////////////; 595/// Reset trace counter to given value, limiting the; 596/// number of future trace messages for this pdf to 'value'; 597 ; 598void RooAbsPdf::setTraceCounter(Int_t val",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:22224,Performance,cache,cache,22224,"; 546 const char* cacheParamsStr = getStringAttribute(""CACHEPARAMINT"") ;; 547 if (cacheParamsStr && strlen(cacheParamsStr)) {; 548 ; 549 std::unique_ptr<RooArgSet> intParams{normInt->getVariables()} ;; 550 ; 551 RooArgSet cacheParams = RooHelpers::selectFromArgSet(*intParams, cacheParamsStr);; 552 ; 553 if (!cacheParams.empty()) {; 554 cxcoutD(Caching) << ""RooAbsReal::createIntObj("" << GetName() << "") INFO: constructing "" << cacheParams.size(); 555 << ""-dim value cache for integral over "" << depList << "" as a function of "" << cacheParams << "" in range "" << (nr?nr:""<default>"") << endl ;; 556 string name = Form(""%s_CACHE_[%s]"",normInt->GetName(),cacheParams.contentsString().c_str()) ;; 557 RooCachedReal* cachedIntegral = new RooCachedReal(name.c_str(),name.c_str(),*normInt,cacheParams) ;; 558 cachedIntegral->setInterpolationOrder(2) ;; 559 cachedIntegral->addOwnedComponents(*normInt) ;; 560 cachedIntegral->setCacheSource(true) ;; 561 if (normInt->operMode()==ADirty) {; 562 cachedIntegral->setOperMode(ADirty) ;; 563 }; 564 normInt= cachedIntegral ;; 565 }; 566 ; 567 }; 568 _norm = normInt ;; 569 }; 570 ; 571 // Register new normalization with manager (takes ownership); 572 cache = new CacheElem(*_norm) ;; 573 _normMgr.setObj(nset,cache) ;; 574 ; 575// cout << ""making new object "" << _norm->GetName() << endl ;; 576 ; 577 return true ;; 578}; 579 ; 580 ; 581 ; 582////////////////////////////////////////////////////////////////////////////////; 583/// Reset error counter to given value, limiting the number; 584/// of future error messages for this pdf to 'resetValue'; 585 ; 586void RooAbsPdf::resetErrorCounters(Int_t resetValue); 587{; 588 _errorCount = resetValue ;; 589 _negCount = resetValue ;; 590}; 591 ; 592 ; 593 ; 594////////////////////////////////////////////////////////////////////////////////; 595/// Reset trace counter to given value, limiting the; 596/// number of future trace messages for this pdf to 'value'; 597 ; 598void RooAbsPdf::setTraceCounter(Int_t val",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:22282,Performance,cache,cache,22282,"cachedIntegral->setCacheSource(true) ;; 561 if (normInt->operMode()==ADirty) {; 562 cachedIntegral->setOperMode(ADirty) ;; 563 }; 564 normInt= cachedIntegral ;; 565 }; 566 ; 567 }; 568 _norm = normInt ;; 569 }; 570 ; 571 // Register new normalization with manager (takes ownership); 572 cache = new CacheElem(*_norm) ;; 573 _normMgr.setObj(nset,cache) ;; 574 ; 575// cout << ""making new object "" << _norm->GetName() << endl ;; 576 ; 577 return true ;; 578}; 579 ; 580 ; 581 ; 582////////////////////////////////////////////////////////////////////////////////; 583/// Reset error counter to given value, limiting the number; 584/// of future error messages for this pdf to 'resetValue'; 585 ; 586void RooAbsPdf::resetErrorCounters(Int_t resetValue); 587{; 588 _errorCount = resetValue ;; 589 _negCount = resetValue ;; 590}; 591 ; 592 ; 593 ; 594////////////////////////////////////////////////////////////////////////////////; 595/// Reset trace counter to given value, limiting the; 596/// number of future trace messages for this pdf to 'value'; 597 ; 598void RooAbsPdf::setTraceCounter(Int_t value, bool allNodes); 599{; 600 if (!allNodes) {; 601 _traceCount = value ;; 602 return ;; 603 } else {; 604 RooArgList branchList ;; 605 branchNodeServerList(&branchList) ;; 606 for(auto * pdf : dynamic_range_cast<RooAbsPdf*>(branchList)) {; 607 if (pdf) pdf->setTraceCounter(value,false) ;; 608 }; 609 }; 610 ; 611}; 612 ; 613 ; 614 ; 615 ; 616////////////////////////////////////////////////////////////////////////////////; 617/// Return the log of the current value with given normalization; 618/// An error message is printed if the argument of the log is negative.; 619 ; 620double RooAbsPdf::getLogVal(const RooArgSet* nset) const; 621{; 622 return getLog(getVal(nset), this);; 623}; 624 ; 625 ; 626////////////////////////////////////////////////////////////////////////////////; 627/// Check for infinity or NaN.; 628/// \param[in] inputs Array to check; 629/// \return True if either infinity ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:34966,Performance,perform,performed,34966,"le lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; 836 * <tr><td> `SumCoefRange(const char* name)` <td> Set the range in which to interpret the coefficients of RooAddPdf components; 837 * <tr><td> `NumCPU(int num, int istrat)` <td> Parallelize NLL calculation on num CPUs; 838 * <table>; 839 * <tr><th> Strategy <th> Effect; 840 * <tr><td> 0 = RooFit::BulkPartition - *default* <td> Divide events in N equal chunks; 841 * <tr><td> 1 = RooFit::Interleave <td> Process event i%N in process N. Recommended for binned data with; 842 * a substantial number of zero-bins, which will be distributed across processes more equitably in this strategy; 843 * <tr><td> 2 = RooFit::SimComponents <td> Process each component likelihood of a RooSimultaneous fully in a single process; 844 * and distribute components over processes. This approach can be beneficial if normalization calculation time; 845 * dominates the total computation time of a component (since the normalization calculation must be performed; 846 * in each process in strategies 0 and 1. However beware that if the RooSimultaneous components do not share many; 847 * parameters this strategy is inefficient: as most minuit-induced likelihood calculations involve changing; 848 * a single parameter, only 1 of the N processes will be active most of the time if RooSimultaneous components; 849 * do not share many parameters; 850 * <tr><td> 3 = RooFit::Hybrid <td> Follow strategy 0 for all RooSimultaneous components, except those with less than; 851 * 30 dataset entries, for which strategy 2 is followed.; 852 * </table>; 853 * <tr><td> `EvalBackend(std::string const&)` <td> Choose a likelihood evaluation backend:; 854 * <table>; 855 * <tr><th> Backend <th> Description; 856 * <tr><td> **cpu** - *default* <td> New vectorized evaluation mode, using faster math functions and auto-vectorisation.; 857 * Since ROOT 6.23, this is the default if `EvalBackend()` is not passed",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:38101,Performance,optimiz,optimization,38101,"robabilities.; 869 * <tr><td> **codegen** <td> **Experimental** - Generates and compiles minimal C++ code for the NLL on-the-fly and wraps it in the returned RooAbsReal.; 870 * Also generates and compiles the code for the gradient using Automatic Differentiation (AD) with [Clad](https://github.com/vgvassilev/clad).; 871 * This analytic gradient is passed to the minimizer, which can result in significant speedups for many-parameter fits,; 872 * even compared to the **cpu** backend. However, if one of the RooAbsArg objects in the model does not support the code generation,; 873 * this backend can't be used.; 874 * <tr><td> **codegen_no_grad** <td> **Experimental** - Same as **codegen**, but doesn't generate and compile the gradient code and use the regular numerical differentiation instead.; 875 * This is expected to be slower, but useful for debugging problems with the analytic gradient.; 876 * </table>; 877 * <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); 878 * <tr><td> `SplitRange(bool flag)` <td> Use separate fit ranges in a simultaneous fit. Actual range name for each subsample is assumed to; 879 * be `rangeName_indexState`, where `indexState` is the state of the master index category of the simultaneous fit.; 880 * Using `Range(""range""), SplitRange()` as switches, different ranges could be set like this:; 881 * ```; 882 * myVariable.setRange(""range_pi0"", 135, 210);; 883 * myVariable.setRange(""range_gamma"", 50, 210);; 884 * ```; 885 * <tr><td> `Constrain(const RooArgSet&pars)` <td> For p.d.f.s that contain internal parameter constraint terms (that is usually product PDFs, where one; 886 * term of the product depends on parameters but not on the observable(s),), only apply constraints to the given subset of parameters.; 887 * <tr><td> `ExternalConstraints(const RooArgSet& )` <td> Include given external constraints to likelihood by multiplying them with the original likelihood.; 888 * <tr><td> `GlobalObservables(const RooArg",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:43637,Performance,perform,performed,43637,"ly enables a different likelihood class in the back-end. Note that this; 927 * should be set to true for parallel minimization of likelihoods!; 928 * Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, since; 929 * some features such as offsetting might not yet work in this case.; 930 * </table>; 931 */; 932 ; 933 ; 934/** @brief Protected implementation of the NLL creation routine.; 935 *; 936 * This virtual function can be overridden in case you want to change the NLL creation logic for custom PDFs.; 937 *; 938 * \note Never call this function directly. Instead, call RooAbsPdf::createNLL().; 939 */; 940 ; 941std::unique_ptr<RooAbsReal> RooAbsPdf::createNLLImpl(RooAbsData &data, const RooLinkedList &cmdList); 942{; 943 return RooFit::FitHelpers::createNLL(*this, data, cmdList);; 944}; 945 ; 946 ; 947/** @fn RooAbsPdf::fitTo(); 948 *; 949 * @brief Fit PDF to given dataset.; 950 *; 951 * If dataset is unbinned, an unbinned maximum likelihood is performed.; 952 * If the dataset is binned, a binned maximum likelihood is performed.; 953 * By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession.; 954 *; 955 * @param data Reference to a RooAbsData object representing the dataset.; 956 * @param cmdArgs Variadic template arguments representing optional command arguments.; 957 * You can pass either an arbitrary number of RooCmdArg instances; 958 * or a single RooLinkedList that points to the RooCmdArg objects.; 959 * @return An owning pointer to the created RooAbsReal NLL object.; 960 * @return RooFitResult with fit status and parameters if option Save() is used, `nullptr` otherwise. The user takes ownership of the fit result.; 961 *; 962 * @tparam CmdArgs_t Template types for optional command arguments.; 963 * Can either be an arbitrary number of RooCmdArg or a single RooLinkedList.; 964 *; 965 * \note This front-end function should not be re-implemented in derived PDF ty",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:43712,Performance,perform,performed,43712,"should be set to true for parallel minimization of likelihoods!; 928 * Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, since; 929 * some features such as offsetting might not yet work in this case.; 930 * </table>; 931 */; 932 ; 933 ; 934/** @brief Protected implementation of the NLL creation routine.; 935 *; 936 * This virtual function can be overridden in case you want to change the NLL creation logic for custom PDFs.; 937 *; 938 * \note Never call this function directly. Instead, call RooAbsPdf::createNLL().; 939 */; 940 ; 941std::unique_ptr<RooAbsReal> RooAbsPdf::createNLLImpl(RooAbsData &data, const RooLinkedList &cmdList); 942{; 943 return RooFit::FitHelpers::createNLL(*this, data, cmdList);; 944}; 945 ; 946 ; 947/** @fn RooAbsPdf::fitTo(); 948 *; 949 * @brief Fit PDF to given dataset.; 950 *; 951 * If dataset is unbinned, an unbinned maximum likelihood is performed.; 952 * If the dataset is binned, a binned maximum likelihood is performed.; 953 * By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession.; 954 *; 955 * @param data Reference to a RooAbsData object representing the dataset.; 956 * @param cmdArgs Variadic template arguments representing optional command arguments.; 957 * You can pass either an arbitrary number of RooCmdArg instances; 958 * or a single RooLinkedList that points to the RooCmdArg objects.; 959 * @return An owning pointer to the created RooAbsReal NLL object.; 960 * @return RooFitResult with fit status and parameters if option Save() is used, `nullptr` otherwise. The user takes ownership of the fit result.; 961 *; 962 * @tparam CmdArgs_t Template types for optional command arguments.; 963 * Can either be an arbitrary number of RooCmdArg or a single RooLinkedList.; 964 *; 965 * \note This front-end function should not be re-implemented in derived PDF types.; 966 * If you mean to customize the likelihood fitting routine,; 967 * you",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:45887,Performance,optimiz,optimization,45887,"teNLL(); 975 *; 976 * <tr><th><th> Options to control flow of fit procedure; 977 * <tr><td> `Minimizer(""<type>"", ""<algo>"")` <td> Choose minimization package and optionally the algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer interface,; 978 * but others can be specified (through RooMinimizer interface).; 979 * <table>; 980 * <tr><th> Type <th> Algorithm; 981 * <tr><td> Minuit <td> migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve); 982 * <tr><td> Minuit2 <td> migrad, simplex, minimize, scan; 983 * <tr><td> GSLMultiMin <td> conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent; 984 * <tr><td> GSLSimAn <td> -; 985 * </table>; 986 *; 987 * <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; 988 * <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization of test statistic during minimization (on by default); 989 * <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; 990 * <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, off by default; 991 * <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; 992 * <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; 993 * <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 to 2, default is 1); 994 * <tr><td> `MaxCalls(int n)` <td> Change maximum number of likelihood function calls from MINUIT (if `n <= 0`, the default of 500 * #%parameters is used); 995 * <tr><td> `EvalErrorWall(bool flag=true)` <td> When parameters are in disallowed regions (e.g. PDF is negative), return very high value to fitter; 996 * to force it out of that region. This can, however, mean that the fitter gets lost in this region. If; 997 * this happens, try switching it off.; 998 * <tr><td> `RecoverFromUndefinedRegions(double strength)` <td> When PDF is invalid (e.g. parameter in undefined r",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:63695,Performance,perform,perform,63695,"pecified , number of events generated is ""; 1260 << GetName() << ""::expectedEvents() = "" << expectedEvents(&whatVars)<< endl ;; 1261 }; 1262 ; 1263 if (extended && protoData && !randProto) {; 1264 cxcoutI(Generation) << ""WARNING Using generator option Extended() (Poisson distribution of #events) together ""; 1265 << ""with a prototype dataset implies incomplete sampling or oversampling of proto data. ""; 1266 << ""Set randomize flag in ProtoData() option to randomize prototype dataset order and thus ""; 1267 << ""to randomize the set of over/undersampled prototype events for each generation cycle."" << endl ;; 1268 }; 1269 ; 1270 ; 1271 // Forward to appropriate implementation; 1272 std::unique_ptr<RooDataSet> data;; 1273 if (protoData) {; 1274 data = std::unique_ptr<RooDataSet>{generate(whatVars,*protoData,Int_t(nEvents),verbose,randProto,resampleProto)};; 1275 } else {; 1276 data = std::unique_ptr<RooDataSet>{generate(whatVars,nEvents,verbose,autoBinned,binnedTag,expectedData, extended)};; 1277 }; 1278 ; 1279 // Rename dataset to given name if supplied; 1280 if (dsetName && strlen(dsetName)>0) {; 1281 data->SetName(dsetName) ;; 1282 }; 1283 ; 1284 return RooFit::makeOwningPtr(std::move(data));; 1285}; 1286 ; 1287 ; 1288 ; 1289 ; 1290 ; 1291 ; 1292////////////////////////////////////////////////////////////////////////////////; 1293/// \note This method does not perform any generation. To generate according to generations specification call RooAbsPdf::generate(RooAbsPdf::GenSpec&) const; 1294///; 1295/// Details copied from RooAbsPdf::generate():; 1296/// --------------------------------------------; 1297/// \copydetails RooAbsPdf::generate(const RooArgSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&); 1298 ; 1299RooAbsPdf::GenSpec* RooAbsPdf::prepareMultiGen(const RooArgSet &whatVars,; 1300 const RooCmdArg& arg1,const RooCmdArg& arg2,; 1301 const RooCmdArg& arg3,const RooCmdArg& arg4,; 1302 const RooCmdArg& arg5,c",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:88175,Performance,perform,performed,88175,"wEnd = std::remove_if(ranges.begin(), ranges.end(),; 1826 [](const std::pair<double,double>& input){; 1827 return input.first == input.second;; 1828 });; 1829 ranges.erase(newEnd, ranges.end());; 1830}; 1831}; 1832 ; 1833 ; 1834////////////////////////////////////////////////////////////////////////////////; 1835/// Plot (project) PDF on specified frame.; 1836/// - If a PDF is plotted in an empty frame, it; 1837/// will show a unit-normalized curve in the frame variable. When projecting a multi-; 1838/// dimensional PDF onto the frame axis, hidden parameters are taken are taken at; 1839/// their current value.; 1840/// - If a PDF is plotted in a frame in which a dataset has already been plotted, it will; 1841/// show a projection integrated over all variables that were present in the shown; 1842/// dataset (except for the one on the x-axis). The normalization of the curve will; 1843/// be adjusted to the event count of the plotted dataset. An informational message; 1844/// will be printed for each projection step that is performed.; 1845/// - If a PDF is plotted in a frame showing a dataset *after* a fit, the above happens,; 1846/// but the PDF will be drawn and normalised only in the fit range. If this is not desired,; 1847/// plotting and normalisation range can be overridden using Range() and NormRange() as; 1848/// documented in the table below.; 1849///; 1850/// This function takes the following named arguments (for more arguments, see also; 1851/// RooAbsReal::plotOn(RooPlot*,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,; 1852/// const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,; 1853/// const RooCmdArg&) const ); 1854///; 1855///; 1856/// <table>; 1857/// <tr><th> Type of argument <th> Controlling normalisation; 1858/// <tr><td> `NormRange(const char* name)` <td> Calculate curve normalization w.r.t. specified range[s].; 1859/// See the tutorial rf212_plottingInRanges_blinding.C; 1860/// \note Setting ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:95230,Performance,perform,perform,95230,"ot, default is 1e-3. A higher precision will; 1919/// result in more and more densely spaced curve points. A negative precision value will disable; 1920/// adaptive point spacing and restrict sampling to the grid point of points defined by the binning; 1921/// of the plotted observable (recommended for expensive functions such as profile likelihoods); 1922/// <tr><td> `Invisible(bool flag)` <td> Add curve to frame, but do not display. Useful in combination AddTo(); 1923/// <tr><td> `VisualizeError(const RooFitResult& fitres, double Z=1, bool linearMethod=true)`; 1924/// <td> Visualize the uncertainty on the parameters, as given in fitres, at 'Z' sigma.; 1925/// The linear method is fast but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made.; 1926/// Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much) longer to calculate; 1927/// \note To include the uncertainty from the expected number of events,; 1928/// the Normalization() argument with `ScaleType` `RooAbsReal::RelativeExpected` has to be passed, e.g.; 1929/// ```{.cpp}; 1930/// pdf.plotOn(frame, VisualizeError(fitResult), Normalization(1.0, RooAbsReal::RelativeExpected));; 1931/// ```; 1932///; 1933/// <tr><td> `VisualizeError(const RooFitResult& fitres, const RooArgSet& param, double Z=1, bool linearMethod=true)`; 1934/// <td> Visualize the uncertainty on the subset of parameters 'param', as given in fitres, at 'Z' sigma; 1935/// </table>; 1936 ; 1937RooPlot* RooAbsPdf::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; 1938{; 1939 ; 1940 // Pre-processing if p.d.f. contains a fit range and there is no command specifying one,; 1941 // add a fit range as default range; 1942 std::unique_ptr<RooCmdArg> plotRange;; 1943 std::unique_ptr<RooCmdArg> normRange2;; 1944 if (getStringAttribute(""fitrange"") && !cmdList.FindObject(""Range"") &&; 1945 !cmdList.FindObjec",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:116587,Performance,cache,cache,116587,"d box to frame; 2386 frame->addObject(box) ;; 2387 ; 2388 return frame ;; 2389}; 2390 ; 2391 ; 2392 ; 2393 ; 2394////////////////////////////////////////////////////////////////////////////////; 2395/// Return expected number of events from this p.d.f for use in extended; 2396/// likelihood calculations. This default implementation returns zero; 2397 ; 2398double RooAbsPdf::expectedEvents(const RooArgSet*) const; 2399{; 2400 return 0 ;; 2401}; 2402 ; 2403 ; 2404 ; 2405////////////////////////////////////////////////////////////////////////////////; 2406/// Change global level of verbosity for p.d.f. evaluations; 2407 ; 2408void RooAbsPdf::verboseEval(Int_t stat); 2409{; 2410 _verboseEval = stat ;; 2411}; 2412 ; 2413 ; 2414 ; 2415////////////////////////////////////////////////////////////////////////////////; 2416/// Return global level of verbosity for p.d.f. evaluations; 2417 ; 2418Int_t RooAbsPdf::verboseEval(); 2419{; 2420 return _verboseEval ;; 2421}; 2422 ; 2423 ; 2424 ; 2425////////////////////////////////////////////////////////////////////////////////; 2426/// Destructor of normalization cache element. If this element; 2427/// provides the 'current' normalization stored in RooAbsPdf::_norm; 2428/// zero _norm pointer here before object pointed to is deleted here; 2429 ; 2430RooAbsPdf::CacheElem::~CacheElem(); 2431{; 2432 // Zero _norm pointer in RooAbsPdf if it is points to our cache payload; 2433 if (_owner) {; 2434 RooAbsPdf* pdfOwner = static_cast<RooAbsPdf*>(_owner) ;; 2435 if (pdfOwner->_norm == _norm.get()) {; 2436 pdfOwner->_norm = nullptr ;; 2437 }; 2438 }; 2439}; 2440 ; 2441 ; 2442 ; 2443////////////////////////////////////////////////////////////////////////////////; 2444/// Return a p.d.f that represent a projection of this p.d.f integrated over given observables; 2445 ; 2446RooAbsPdf* RooAbsPdf::createProjection(const RooArgSet& iset); 2447{; 2448 // Construct name for new object; 2449 std::string name = std::string{GetName()} + ""_Proj["" + RooHe",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:116883,Performance,cache,cache,116883,"returns zero; 2397 ; 2398double RooAbsPdf::expectedEvents(const RooArgSet*) const; 2399{; 2400 return 0 ;; 2401}; 2402 ; 2403 ; 2404 ; 2405////////////////////////////////////////////////////////////////////////////////; 2406/// Change global level of verbosity for p.d.f. evaluations; 2407 ; 2408void RooAbsPdf::verboseEval(Int_t stat); 2409{; 2410 _verboseEval = stat ;; 2411}; 2412 ; 2413 ; 2414 ; 2415////////////////////////////////////////////////////////////////////////////////; 2416/// Return global level of verbosity for p.d.f. evaluations; 2417 ; 2418Int_t RooAbsPdf::verboseEval(); 2419{; 2420 return _verboseEval ;; 2421}; 2422 ; 2423 ; 2424 ; 2425////////////////////////////////////////////////////////////////////////////////; 2426/// Destructor of normalization cache element. If this element; 2427/// provides the 'current' normalization stored in RooAbsPdf::_norm; 2428/// zero _norm pointer here before object pointed to is deleted here; 2429 ; 2430RooAbsPdf::CacheElem::~CacheElem(); 2431{; 2432 // Zero _norm pointer in RooAbsPdf if it is points to our cache payload; 2433 if (_owner) {; 2434 RooAbsPdf* pdfOwner = static_cast<RooAbsPdf*>(_owner) ;; 2435 if (pdfOwner->_norm == _norm.get()) {; 2436 pdfOwner->_norm = nullptr ;; 2437 }; 2438 }; 2439}; 2440 ; 2441 ; 2442 ; 2443////////////////////////////////////////////////////////////////////////////////; 2444/// Return a p.d.f that represent a projection of this p.d.f integrated over given observables; 2445 ; 2446RooAbsPdf* RooAbsPdf::createProjection(const RooArgSet& iset); 2447{; 2448 // Construct name for new object; 2449 std::string name = std::string{GetName()} + ""_Proj["" + RooHelpers::getColonSeparatedNameString(iset, ',') + ""]"";; 2450 ; 2451 // Return projected p.d.f.; 2452 return new RooProjectedPdf(name.c_str(),name.c_str(),*this,iset) ;; 2453}; 2454 ; 2455 ; 2456 ; 2457////////////////////////////////////////////////////////////////////////////////; 2458/// Create a cumulative distribution function of t",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:118828,Performance,perform,performed,118828,"ms; 2459/// of the observables listed in iset. If no nset argument is given; 2460/// the c.d.f normalization is constructed over the integrated; 2461/// observables, so that its maximum value is precisely 1. It is also; 2462/// possible to choose a different normalization for; 2463/// multi-dimensional p.d.f.s: eg. for a pdf f(x,y,z) one can; 2464/// construct a partial cdf c(x,y) that only when integrated itself; 2465/// over z results in a maximum value of 1. To construct such a cdf pass; 2466/// z as argument to the optional nset argument; 2467 ; 2468RooFit::OwningPtr<RooAbsReal> RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset); 2469{; 2470 return createCdf(iset,RooFit::SupNormSet(nset)) ;; 2471}; 2472 ; 2473 ; 2474 ; 2475////////////////////////////////////////////////////////////////////////////////; 2476/// Create an object that represents the integral of the function over one or more observables listed in `iset`.; 2477/// The actual integration calculation is only performed when the return object is evaluated. The name; 2478/// of the integral object is automatically constructed from the name of the input function, the variables; 2479/// it integrates and the range integrates over; 2480///; 2481/// The following named arguments are accepted; 2482/// | Type of CmdArg | Effect on CDF; 2483/// | ---------------------|-------------------; 2484/// | SupNormSet(const RooArgSet&) | Observables over which should be normalized _in addition_ to the integration observables; 2485/// | ScanNumCdf() | Apply scanning technique if cdf integral involves numeric integration [ default ]; 2486/// | ScanAllCdf() | Always apply scanning technique; 2487/// | ScanNoCdf() | Never apply scanning technique; 2488/// | ScanParameters(Int_t nbins, Int_t intOrder) | Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf; 2489 ; 2490RooFit::OwningPtr<RooAbsReal> RooAbsPdf::createCdf(const RooArgSet& iset, co",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:128587,Performance,cache,cacheMgr,128587,"///////////////////////////////////////////////////////////; 2684 ; 2685RooAbsPdf::GenSpec::GenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen,; 2686 bool extended, bool randProto, bool resampleProto, TString dsetName, bool init) :; 2687 _genContext(context), _whatVars(whatVars), _protoData(protoData), _nGen(nGen), _extended(extended),; 2688 _randProto(randProto), _resampleProto(resampleProto), _dsetName(dsetName), _init(init); 2689{; 2690}; 2691 ; 2692 ; 2693namespace {; 2694 ; 2695void sterilizeClientCaches(RooAbsArg & arg) {; 2696 auto const& clients = arg.clients();; 2697 for(std::size_t iClient = 0; iClient < clients.size(); ++iClient) {; 2698 ; 2699 const std::size_t oldClientsSize = clients.size();; 2700 RooAbsArg* client = clients[iClient];; 2701 ; 2702 for(int iCache = 0; iCache < client->numCaches(); ++iCache) {; 2703 if(auto cacheMgr = dynamic_cast<RooObjCacheManager*>(client->getCache(iCache))) {; 2704 cacheMgr->sterilize();; 2705 }; 2706 }; 2707 ; 2708 // It can happen that the objects cached by the client are also clients of; 2709 // the arg itself! In that case, the position of the client in the client; 2710 // list might have changed, and we need to find the new index.; 2711 if(clients.size() != oldClientsSize) {; 2712 auto clientIter = std::find(clients.begin(), clients.end(), client);; 2713 if(clientIter == clients.end()) {; 2714 throw std::runtime_error(""After a clients caches were cleared, the client was gone! This should not happen."");; 2715 }; 2716 iClient = std::distance(clients.begin(), clientIter);; 2717 }; 2718 }; 2719}; 2720 ; 2721} // namespace; 2722 ; 2723 ; 2724////////////////////////////////////////////////////////////////////////////////; 2725 ; 2726void RooAbsPdf::setNormRange(const char* rangeName); 2727{; 2728 if (rangeName) {; 2729 _normRange = rangeName ;; 2730 } else {; 2731 _normRange.Clear() ;; 2732 }; 2733 ; 2734 // the stuff that the clients have cached may depend on the normaliz",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:128667,Performance,cache,cacheMgr,128667,"///////////////////////////////////////////////////////////; 2684 ; 2685RooAbsPdf::GenSpec::GenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen,; 2686 bool extended, bool randProto, bool resampleProto, TString dsetName, bool init) :; 2687 _genContext(context), _whatVars(whatVars), _protoData(protoData), _nGen(nGen), _extended(extended),; 2688 _randProto(randProto), _resampleProto(resampleProto), _dsetName(dsetName), _init(init); 2689{; 2690}; 2691 ; 2692 ; 2693namespace {; 2694 ; 2695void sterilizeClientCaches(RooAbsArg & arg) {; 2696 auto const& clients = arg.clients();; 2697 for(std::size_t iClient = 0; iClient < clients.size(); ++iClient) {; 2698 ; 2699 const std::size_t oldClientsSize = clients.size();; 2700 RooAbsArg* client = clients[iClient];; 2701 ; 2702 for(int iCache = 0; iCache < client->numCaches(); ++iCache) {; 2703 if(auto cacheMgr = dynamic_cast<RooObjCacheManager*>(client->getCache(iCache))) {; 2704 cacheMgr->sterilize();; 2705 }; 2706 }; 2707 ; 2708 // It can happen that the objects cached by the client are also clients of; 2709 // the arg itself! In that case, the position of the client in the client; 2710 // list might have changed, and we need to find the new index.; 2711 if(clients.size() != oldClientsSize) {; 2712 auto clientIter = std::find(clients.begin(), clients.end(), client);; 2713 if(clientIter == clients.end()) {; 2714 throw std::runtime_error(""After a clients caches were cleared, the client was gone! This should not happen."");; 2715 }; 2716 iClient = std::distance(clients.begin(), clientIter);; 2717 }; 2718 }; 2719}; 2720 ; 2721} // namespace; 2722 ; 2723 ; 2724////////////////////////////////////////////////////////////////////////////////; 2725 ; 2726void RooAbsPdf::setNormRange(const char* rangeName); 2727{; 2728 if (rangeName) {; 2729 _normRange = rangeName ;; 2730 } else {; 2731 _normRange.Clear() ;; 2732 }; 2733 ; 2734 // the stuff that the clients have cached may depend on the normaliz",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:128753,Performance,cache,cached,128753,"///////////////////////////////////////////////////////////; 2684 ; 2685RooAbsPdf::GenSpec::GenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen,; 2686 bool extended, bool randProto, bool resampleProto, TString dsetName, bool init) :; 2687 _genContext(context), _whatVars(whatVars), _protoData(protoData), _nGen(nGen), _extended(extended),; 2688 _randProto(randProto), _resampleProto(resampleProto), _dsetName(dsetName), _init(init); 2689{; 2690}; 2691 ; 2692 ; 2693namespace {; 2694 ; 2695void sterilizeClientCaches(RooAbsArg & arg) {; 2696 auto const& clients = arg.clients();; 2697 for(std::size_t iClient = 0; iClient < clients.size(); ++iClient) {; 2698 ; 2699 const std::size_t oldClientsSize = clients.size();; 2700 RooAbsArg* client = clients[iClient];; 2701 ; 2702 for(int iCache = 0; iCache < client->numCaches(); ++iCache) {; 2703 if(auto cacheMgr = dynamic_cast<RooObjCacheManager*>(client->getCache(iCache))) {; 2704 cacheMgr->sterilize();; 2705 }; 2706 }; 2707 ; 2708 // It can happen that the objects cached by the client are also clients of; 2709 // the arg itself! In that case, the position of the client in the client; 2710 // list might have changed, and we need to find the new index.; 2711 if(clients.size() != oldClientsSize) {; 2712 auto clientIter = std::find(clients.begin(), clients.end(), client);; 2713 if(clientIter == clients.end()) {; 2714 throw std::runtime_error(""After a clients caches were cleared, the client was gone! This should not happen."");; 2715 }; 2716 iClient = std::distance(clients.begin(), clientIter);; 2717 }; 2718 }; 2719}; 2720 ; 2721} // namespace; 2722 ; 2723 ; 2724////////////////////////////////////////////////////////////////////////////////; 2725 ; 2726void RooAbsPdf::setNormRange(const char* rangeName); 2727{; 2728 if (rangeName) {; 2729 _normRange = rangeName ;; 2730 } else {; 2731 _normRange.Clear() ;; 2732 }; 2733 ; 2734 // the stuff that the clients have cached may depend on the normaliz",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:129151,Performance,cache,caches,129151,"), _init(init); 2689{; 2690}; 2691 ; 2692 ; 2693namespace {; 2694 ; 2695void sterilizeClientCaches(RooAbsArg & arg) {; 2696 auto const& clients = arg.clients();; 2697 for(std::size_t iClient = 0; iClient < clients.size(); ++iClient) {; 2698 ; 2699 const std::size_t oldClientsSize = clients.size();; 2700 RooAbsArg* client = clients[iClient];; 2701 ; 2702 for(int iCache = 0; iCache < client->numCaches(); ++iCache) {; 2703 if(auto cacheMgr = dynamic_cast<RooObjCacheManager*>(client->getCache(iCache))) {; 2704 cacheMgr->sterilize();; 2705 }; 2706 }; 2707 ; 2708 // It can happen that the objects cached by the client are also clients of; 2709 // the arg itself! In that case, the position of the client in the client; 2710 // list might have changed, and we need to find the new index.; 2711 if(clients.size() != oldClientsSize) {; 2712 auto clientIter = std::find(clients.begin(), clients.end(), client);; 2713 if(clientIter == clients.end()) {; 2714 throw std::runtime_error(""After a clients caches were cleared, the client was gone! This should not happen."");; 2715 }; 2716 iClient = std::distance(clients.begin(), clientIter);; 2717 }; 2718 }; 2719}; 2720 ; 2721} // namespace; 2722 ; 2723 ; 2724////////////////////////////////////////////////////////////////////////////////; 2725 ; 2726void RooAbsPdf::setNormRange(const char* rangeName); 2727{; 2728 if (rangeName) {; 2729 _normRange = rangeName ;; 2730 } else {; 2731 _normRange.Clear() ;; 2732 }; 2733 ; 2734 // the stuff that the clients have cached may depend on the normalization range; 2735 sterilizeClientCaches(*this);; 2736 ; 2737 if (_norm) {; 2738 _normMgr.sterilize() ;; 2739 _norm = nullptr ;; 2740 }; 2741}; 2742 ; 2743 ; 2744////////////////////////////////////////////////////////////////////////////////; 2745 ; 2746void RooAbsPdf::setNormRangeOverride(const char* rangeName); 2747{; 2748 if (rangeName) {; 2749 _normRangeOverride = rangeName ;; 2750 } else {; 2751 _normRangeOverride.Clear() ;; 2752 }; 2753 ; 2754 // the ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:129661,Performance,cache,cached,129661,"; 2705 }; 2706 }; 2707 ; 2708 // It can happen that the objects cached by the client are also clients of; 2709 // the arg itself! In that case, the position of the client in the client; 2710 // list might have changed, and we need to find the new index.; 2711 if(clients.size() != oldClientsSize) {; 2712 auto clientIter = std::find(clients.begin(), clients.end(), client);; 2713 if(clientIter == clients.end()) {; 2714 throw std::runtime_error(""After a clients caches were cleared, the client was gone! This should not happen."");; 2715 }; 2716 iClient = std::distance(clients.begin(), clientIter);; 2717 }; 2718 }; 2719}; 2720 ; 2721} // namespace; 2722 ; 2723 ; 2724////////////////////////////////////////////////////////////////////////////////; 2725 ; 2726void RooAbsPdf::setNormRange(const char* rangeName); 2727{; 2728 if (rangeName) {; 2729 _normRange = rangeName ;; 2730 } else {; 2731 _normRange.Clear() ;; 2732 }; 2733 ; 2734 // the stuff that the clients have cached may depend on the normalization range; 2735 sterilizeClientCaches(*this);; 2736 ; 2737 if (_norm) {; 2738 _normMgr.sterilize() ;; 2739 _norm = nullptr ;; 2740 }; 2741}; 2742 ; 2743 ; 2744////////////////////////////////////////////////////////////////////////////////; 2745 ; 2746void RooAbsPdf::setNormRangeOverride(const char* rangeName); 2747{; 2748 if (rangeName) {; 2749 _normRangeOverride = rangeName ;; 2750 } else {; 2751 _normRangeOverride.Clear() ;; 2752 }; 2753 ; 2754 // the stuff that the clients have cached may depend on the normalization range; 2755 sterilizeClientCaches(*this);; 2756 ; 2757 if (_norm) {; 2758 _normMgr.sterilize() ;; 2759 _norm = nullptr ;; 2760 }; 2761}; 2762 ; 2763 ; 2764////////////////////////////////////////////////////////////////////////////////; 2765/// Hook function intercepting redirectServer calls. Discard current; 2766/// normalization object if any server is redirected; 2767 ; 2768bool RooAbsPdf::redirectServersHook(const RooAbsCollection & newServerList, bool mustRe",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:130183,Performance,cache,cached,130183,"ppen."");; 2715 }; 2716 iClient = std::distance(clients.begin(), clientIter);; 2717 }; 2718 }; 2719}; 2720 ; 2721} // namespace; 2722 ; 2723 ; 2724////////////////////////////////////////////////////////////////////////////////; 2725 ; 2726void RooAbsPdf::setNormRange(const char* rangeName); 2727{; 2728 if (rangeName) {; 2729 _normRange = rangeName ;; 2730 } else {; 2731 _normRange.Clear() ;; 2732 }; 2733 ; 2734 // the stuff that the clients have cached may depend on the normalization range; 2735 sterilizeClientCaches(*this);; 2736 ; 2737 if (_norm) {; 2738 _normMgr.sterilize() ;; 2739 _norm = nullptr ;; 2740 }; 2741}; 2742 ; 2743 ; 2744////////////////////////////////////////////////////////////////////////////////; 2745 ; 2746void RooAbsPdf::setNormRangeOverride(const char* rangeName); 2747{; 2748 if (rangeName) {; 2749 _normRangeOverride = rangeName ;; 2750 } else {; 2751 _normRangeOverride.Clear() ;; 2752 }; 2753 ; 2754 // the stuff that the clients have cached may depend on the normalization range; 2755 sterilizeClientCaches(*this);; 2756 ; 2757 if (_norm) {; 2758 _normMgr.sterilize() ;; 2759 _norm = nullptr ;; 2760 }; 2761}; 2762 ; 2763 ; 2764////////////////////////////////////////////////////////////////////////////////; 2765/// Hook function intercepting redirectServer calls. Discard current; 2766/// normalization object if any server is redirected; 2767 ; 2768bool RooAbsPdf::redirectServersHook(const RooAbsCollection & newServerList, bool mustReplaceAll,; 2769 bool nameChange, bool isRecursiveStep); 2770{; 2771 // If servers are redirected, the cached normalization integrals and; 2772 // normalization sets are most likely invalid.; 2773 _normMgr.sterilize();; 2774 ; 2775 // Object is own by _normCacheManager that will delete object as soon as cache; 2776 // is sterilized by server redirect; 2777 _norm = nullptr ;; 2778 ; 2779 // Similar to the situation with the normalization integral above: if a; 2780 // server is redirected, the cached normalization set m",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:130791,Performance,cache,cached,130791,"ion range; 2735 sterilizeClientCaches(*this);; 2736 ; 2737 if (_norm) {; 2738 _normMgr.sterilize() ;; 2739 _norm = nullptr ;; 2740 }; 2741}; 2742 ; 2743 ; 2744////////////////////////////////////////////////////////////////////////////////; 2745 ; 2746void RooAbsPdf::setNormRangeOverride(const char* rangeName); 2747{; 2748 if (rangeName) {; 2749 _normRangeOverride = rangeName ;; 2750 } else {; 2751 _normRangeOverride.Clear() ;; 2752 }; 2753 ; 2754 // the stuff that the clients have cached may depend on the normalization range; 2755 sterilizeClientCaches(*this);; 2756 ; 2757 if (_norm) {; 2758 _normMgr.sterilize() ;; 2759 _norm = nullptr ;; 2760 }; 2761}; 2762 ; 2763 ; 2764////////////////////////////////////////////////////////////////////////////////; 2765/// Hook function intercepting redirectServer calls. Discard current; 2766/// normalization object if any server is redirected; 2767 ; 2768bool RooAbsPdf::redirectServersHook(const RooAbsCollection & newServerList, bool mustReplaceAll,; 2769 bool nameChange, bool isRecursiveStep); 2770{; 2771 // If servers are redirected, the cached normalization integrals and; 2772 // normalization sets are most likely invalid.; 2773 _normMgr.sterilize();; 2774 ; 2775 // Object is own by _normCacheManager that will delete object as soon as cache; 2776 // is sterilized by server redirect; 2777 _norm = nullptr ;; 2778 ; 2779 // Similar to the situation with the normalization integral above: if a; 2780 // server is redirected, the cached normalization set might not point to; 2781 // the right observables anymore. We need to reset it.; 2782 setActiveNormSet(nullptr);; 2783 return RooAbsReal::redirectServersHook(newServerList, mustReplaceAll, nameChange, isRecursiveStep);; 2784}; 2785 ; 2786 ; 2787std::unique_ptr<RooAbsArg>; 2788RooAbsPdf::compileForNormSet(RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const; 2789{; 2790 if (normSet.empty() || selfNormalized()) {; 2791 return RooAbsReal::compileForNormSet(normSet, ctx)",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:130993,Performance,cache,cache,130993,"0 } else {; 2751 _normRangeOverride.Clear() ;; 2752 }; 2753 ; 2754 // the stuff that the clients have cached may depend on the normalization range; 2755 sterilizeClientCaches(*this);; 2756 ; 2757 if (_norm) {; 2758 _normMgr.sterilize() ;; 2759 _norm = nullptr ;; 2760 }; 2761}; 2762 ; 2763 ; 2764////////////////////////////////////////////////////////////////////////////////; 2765/// Hook function intercepting redirectServer calls. Discard current; 2766/// normalization object if any server is redirected; 2767 ; 2768bool RooAbsPdf::redirectServersHook(const RooAbsCollection & newServerList, bool mustReplaceAll,; 2769 bool nameChange, bool isRecursiveStep); 2770{; 2771 // If servers are redirected, the cached normalization integrals and; 2772 // normalization sets are most likely invalid.; 2773 _normMgr.sterilize();; 2774 ; 2775 // Object is own by _normCacheManager that will delete object as soon as cache; 2776 // is sterilized by server redirect; 2777 _norm = nullptr ;; 2778 ; 2779 // Similar to the situation with the normalization integral above: if a; 2780 // server is redirected, the cached normalization set might not point to; 2781 // the right observables anymore. We need to reset it.; 2782 setActiveNormSet(nullptr);; 2783 return RooAbsReal::redirectServersHook(newServerList, mustReplaceAll, nameChange, isRecursiveStep);; 2784}; 2785 ; 2786 ; 2787std::unique_ptr<RooAbsArg>; 2788RooAbsPdf::compileForNormSet(RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const; 2789{; 2790 if (normSet.empty() || selfNormalized()) {; 2791 return RooAbsReal::compileForNormSet(normSet, ctx);; 2792 }; 2793 std::unique_ptr<RooAbsPdf> pdfClone(static_cast<RooAbsPdf *>(this->Clone()));; 2794 ctx.compileServers(*pdfClone, normSet);; 2795 ; 2796 auto newArg = std::make_unique<RooNormalizedPdf>(*pdfClone, normSet);; 2797 ; 2798 // The direct servers are this pdf and the normalization integral, which; 2799 // don't need to be compiled further.; 2800 for (RooAbsArg *server : ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:131185,Performance,cache,cached,131185,"0 } else {; 2751 _normRangeOverride.Clear() ;; 2752 }; 2753 ; 2754 // the stuff that the clients have cached may depend on the normalization range; 2755 sterilizeClientCaches(*this);; 2756 ; 2757 if (_norm) {; 2758 _normMgr.sterilize() ;; 2759 _norm = nullptr ;; 2760 }; 2761}; 2762 ; 2763 ; 2764////////////////////////////////////////////////////////////////////////////////; 2765/// Hook function intercepting redirectServer calls. Discard current; 2766/// normalization object if any server is redirected; 2767 ; 2768bool RooAbsPdf::redirectServersHook(const RooAbsCollection & newServerList, bool mustReplaceAll,; 2769 bool nameChange, bool isRecursiveStep); 2770{; 2771 // If servers are redirected, the cached normalization integrals and; 2772 // normalization sets are most likely invalid.; 2773 _normMgr.sterilize();; 2774 ; 2775 // Object is own by _normCacheManager that will delete object as soon as cache; 2776 // is sterilized by server redirect; 2777 _norm = nullptr ;; 2778 ; 2779 // Similar to the situation with the normalization integral above: if a; 2780 // server is redirected, the cached normalization set might not point to; 2781 // the right observables anymore. We need to reset it.; 2782 setActiveNormSet(nullptr);; 2783 return RooAbsReal::redirectServersHook(newServerList, mustReplaceAll, nameChange, isRecursiveStep);; 2784}; 2785 ; 2786 ; 2787std::unique_ptr<RooAbsArg>; 2788RooAbsPdf::compileForNormSet(RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const; 2789{; 2790 if (normSet.empty() || selfNormalized()) {; 2791 return RooAbsReal::compileForNormSet(normSet, ctx);; 2792 }; 2793 std::unique_ptr<RooAbsPdf> pdfClone(static_cast<RooAbsPdf *>(this->Clone()));; 2794 ctx.compileServers(*pdfClone, normSet);; 2795 ; 2796 auto newArg = std::make_unique<RooNormalizedPdf>(*pdfClone, normSet);; 2797 ; 2798 // The direct servers are this pdf and the normalization integral, which; 2799 // don't need to be compiled further.; 2800 for (RooAbsArg *server : ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:137904,Performance,cache,cache,137904," ADirtyDefinition RooAbsArg.h:362; RooAbsArg::getStringAttributeconst Text_t * getStringAttribute(const Text_t *key) constGet string attribute mapped under key 'key'.Definition RooAbsArg.cxx:275; RooAbsArg::compileForNormSetvirtual std::unique_ptr< RooAbsArg > compileForNormSet(RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) constDefinition RooAbsArg.cxx:2528; RooAbsArg::getComponentsRooFit::OwningPtr< RooArgSet > getComponents() constCreate a RooArgSet with all components (branch nodes) of the expression tree headed by this object.Definition RooAbsArg.cxx:802; RooAbsArg::getAttributebool getAttribute(const Text_t *name) constCheck if a named attribute is set. By default, all attributes are unset.Definition RooAbsArg.cxx:245; RooAbsArg::getVariablesRooFit::OwningPtr< RooArgSet > getVariables(bool stripDisconnected=true) constReturn RooArgSet with all variables (tree leaf nodes of expression tree)Definition RooAbsArg.cxx:2154; RooAbsArg::getCacheRooAbsCache * getCache(Int_t index) constReturn registered cache object by index.Definition RooAbsArg.cxx:2145; RooAbsArg::clientsconst RefCountList_t & clients() constList of all clients of this object.Definition RooAbsArg.h:166; RooAbsArg::isValueDirtybool isValueDirty() constDefinition RooAbsArg.h:393; RooAbsArg::setProxyNormSetvoid setProxyNormSet(const RooArgSet *nset)Forward a change in the cached normalization argset to all the registered proxies.Definition RooAbsArg.cxx:1468; RooAbsArg::branchNodeServerListvoid branchNodeServerList(RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) constFill supplied list with all branch nodes of the arg tree starting with ourself as top node.Definition RooAbsArg.cxx:483; RooAbsArg::CloneTObject * Clone(const char *newname=nullptr) const overrideMake a clone of an object using the Streamer facility.Definition RooAbsArg.h:91; RooAbsArg::_serverListRefCountList_t _serverListDefinition RooAbsArg.h:606; RooAbsArg::numCachesInt_t numCaches() ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:138245,Performance,cache,cached,138245,"tion RooAbsArg.cxx:2528; RooAbsArg::getComponentsRooFit::OwningPtr< RooArgSet > getComponents() constCreate a RooArgSet with all components (branch nodes) of the expression tree headed by this object.Definition RooAbsArg.cxx:802; RooAbsArg::getAttributebool getAttribute(const Text_t *name) constCheck if a named attribute is set. By default, all attributes are unset.Definition RooAbsArg.cxx:245; RooAbsArg::getVariablesRooFit::OwningPtr< RooArgSet > getVariables(bool stripDisconnected=true) constReturn RooArgSet with all variables (tree leaf nodes of expression tree)Definition RooAbsArg.cxx:2154; RooAbsArg::getCacheRooAbsCache * getCache(Int_t index) constReturn registered cache object by index.Definition RooAbsArg.cxx:2145; RooAbsArg::clientsconst RefCountList_t & clients() constList of all clients of this object.Definition RooAbsArg.h:166; RooAbsArg::isValueDirtybool isValueDirty() constDefinition RooAbsArg.h:393; RooAbsArg::setProxyNormSetvoid setProxyNormSet(const RooArgSet *nset)Forward a change in the cached normalization argset to all the registered proxies.Definition RooAbsArg.cxx:1468; RooAbsArg::branchNodeServerListvoid branchNodeServerList(RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) constFill supplied list with all branch nodes of the arg tree starting with ourself as top node.Definition RooAbsArg.cxx:483; RooAbsArg::CloneTObject * Clone(const char *newname=nullptr) const overrideMake a clone of an object using the Streamer facility.Definition RooAbsArg.h:91; RooAbsArg::_serverListRefCountList_t _serverListDefinition RooAbsArg.h:606; RooAbsArg::numCachesInt_t numCaches() constReturn number of registered caches.Definition RooAbsArg.cxx:2136; RooAbsArg::findServerRooAbsArg * findServer(const char *name) constReturn server of this with name name. Returns nullptr if not found.Definition RooAbsArg.h:184; RooAbsArg::operModeOperMode operMode() constQuery the operation mode of this node.Definition RooAbsArg.h:456; RooAbsCach",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:138904,Performance,cache,caches,138904,"Int_t index) constReturn registered cache object by index.Definition RooAbsArg.cxx:2145; RooAbsArg::clientsconst RefCountList_t & clients() constList of all clients of this object.Definition RooAbsArg.h:166; RooAbsArg::isValueDirtybool isValueDirty() constDefinition RooAbsArg.h:393; RooAbsArg::setProxyNormSetvoid setProxyNormSet(const RooArgSet *nset)Forward a change in the cached normalization argset to all the registered proxies.Definition RooAbsArg.cxx:1468; RooAbsArg::branchNodeServerListvoid branchNodeServerList(RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) constFill supplied list with all branch nodes of the arg tree starting with ourself as top node.Definition RooAbsArg.cxx:483; RooAbsArg::CloneTObject * Clone(const char *newname=nullptr) const overrideMake a clone of an object using the Streamer facility.Definition RooAbsArg.h:91; RooAbsArg::_serverListRefCountList_t _serverListDefinition RooAbsArg.h:606; RooAbsArg::numCachesInt_t numCaches() constReturn number of registered caches.Definition RooAbsArg.cxx:2136; RooAbsArg::findServerRooAbsArg * findServer(const char *name) constReturn server of this with name name. Returns nullptr if not found.Definition RooAbsArg.h:184; RooAbsArg::operModeOperMode operMode() constQuery the operation mode of this node.Definition RooAbsArg.h:456; RooAbsCacheElement::_ownerRooAbsArg * _owner! Pointer to owning RooAbsArgDefinition RooAbsCacheElement.h:53; RooAbsCachedReal::setInterpolationOrdervoid setInterpolationOrder(Int_t order)Set interpolation order of RooHistFunct representing cache histogram.Definition RooAbsCachedReal.cxx:254; RooAbsCategoryLValueAbstract base class for objects that represent a discrete value that can be set from the outside,...Definition RooAbsCategoryLValue.h:26; RooAbsCollectionAbstract container object that can hold multiple RooAbsArg objects.Definition RooAbsCollection.h:65; RooAbsCollection::removevirtual bool remove(const RooAbsArg &var, bool silent=false, bo",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:139454,Performance,cache,cache,139454,"oAbsCollection *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) constFill supplied list with all branch nodes of the arg tree starting with ourself as top node.Definition RooAbsArg.cxx:483; RooAbsArg::CloneTObject * Clone(const char *newname=nullptr) const overrideMake a clone of an object using the Streamer facility.Definition RooAbsArg.h:91; RooAbsArg::_serverListRefCountList_t _serverListDefinition RooAbsArg.h:606; RooAbsArg::numCachesInt_t numCaches() constReturn number of registered caches.Definition RooAbsArg.cxx:2136; RooAbsArg::findServerRooAbsArg * findServer(const char *name) constReturn server of this with name name. Returns nullptr if not found.Definition RooAbsArg.h:184; RooAbsArg::operModeOperMode operMode() constQuery the operation mode of this node.Definition RooAbsArg.h:456; RooAbsCacheElement::_ownerRooAbsArg * _owner! Pointer to owning RooAbsArgDefinition RooAbsCacheElement.h:53; RooAbsCachedReal::setInterpolationOrdervoid setInterpolationOrder(Int_t order)Set interpolation order of RooHistFunct representing cache histogram.Definition RooAbsCachedReal.cxx:254; RooAbsCategoryLValueAbstract base class for objects that represent a discrete value that can be set from the outside,...Definition RooAbsCategoryLValue.h:26; RooAbsCollectionAbstract container object that can hold multiple RooAbsArg objects.Definition RooAbsCollection.h:65; RooAbsCollection::removevirtual bool remove(const RooAbsArg &var, bool silent=false, bool matchByNameOnly=false)Remove the specified argument from our list.Definition RooAbsCollection.cxx:656; RooAbsCollection::emptybool empty() constDefinition RooAbsCollection.h:273; RooAbsCollection::addvirtual bool add(const RooAbsArg &var, bool silent=false)Add the specified argument to list.Definition RooAbsCollection.cxx:443; RooAbsCollection::sizeStorage_t::size_type size() constDefinition RooAbsCollection.h:269; RooAbsCollection::firstRooAbsArg * first() constDefinition RooAbsCollection.h:291; RooAbsCollection::co",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:142120,Performance,cache,cache,142120,"oAbsData.cxx:323; RooAbsGenContextAbstract base class for generator contexts of RooAbsPdf objects.Definition RooAbsGenContext.h:26; RooAbsGenContext::setExpectedDatavirtual void setExpectedData(bool)Definition RooAbsGenContext.h:65; RooAbsGenContext::generatevirtual RooDataSet * generate(double nEvents=0, bool skipInit=false, bool extendedMode=false)Generate the specified number of events with nEvents>0 and and return a dataset containing the genera...Definition RooAbsGenContext.cxx:130; RooAbsGenContext::isValidbool isValid() constDefinition RooAbsGenContext.h:33; RooAbsGenContext::setProtoDataOrdervirtual void setProtoDataOrder(Int_t *lut)Set the traversal order of prototype data to that in the lookup tables passed as argument.Definition RooAbsGenContext.cxx:319; RooAbsPdf::CacheElemNormalization set with for above integral.Definition RooAbsPdf.h:322; RooAbsPdf::CacheElem::_normstd::unique_ptr< RooAbsReal > _normDefinition RooAbsPdf.h:327; RooAbsPdf::CacheElem::~CacheElem~CacheElem() overrideDestructor of normalization cache element.Definition RooAbsPdf.cxx:2430; RooAbsPdf::GenSpecDefinition RooAbsPdf.h:72; RooAbsPdf::GenSpec::_genContextstd::unique_ptr< RooAbsGenContext > _genContextDefinition RooAbsPdf.h:83; RooAbsPdf::GenSpec::~GenSpecvirtual ~GenSpec(); RooAbsPdf::GenSpec::_whatVarsRooArgSet _whatVarsDefinition RooAbsPdf.h:84; RooAbsPdf::GenSpec::_initbool _initDefinition RooAbsPdf.h:91; RooAbsPdf::GenSpec::_extendedbool _extendedDefinition RooAbsPdf.h:87; RooAbsPdf::GenSpec::_nGenInt_t _nGenDefinition RooAbsPdf.h:86; RooAbsPdf::GenSpec::GenSpecGenSpec()=default; RooAbsPdf::GenSpec::_randProtobool _randProtoDefinition RooAbsPdf.h:88; RooAbsPdf::GenSpec::_resampleProtobool _resampleProtoDefinition RooAbsPdf.h:89; RooAbsPdf::GenSpec::_protoDataRooDataSet * _protoDataDefinition RooAbsPdf.h:85; RooAbsPdfAbstract interface for all probability density functions.Definition RooAbsPdf.h:40; RooAbsPdf::syncNormalizationvirtual bool syncNormalization(const RooArgSet *dse",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:143155,Performance,cache,cached,143155,"rmalization cache element.Definition RooAbsPdf.cxx:2430; RooAbsPdf::GenSpecDefinition RooAbsPdf.h:72; RooAbsPdf::GenSpec::_genContextstd::unique_ptr< RooAbsGenContext > _genContextDefinition RooAbsPdf.h:83; RooAbsPdf::GenSpec::~GenSpecvirtual ~GenSpec(); RooAbsPdf::GenSpec::_whatVarsRooArgSet _whatVarsDefinition RooAbsPdf.h:84; RooAbsPdf::GenSpec::_initbool _initDefinition RooAbsPdf.h:91; RooAbsPdf::GenSpec::_extendedbool _extendedDefinition RooAbsPdf.h:87; RooAbsPdf::GenSpec::_nGenInt_t _nGenDefinition RooAbsPdf.h:86; RooAbsPdf::GenSpec::GenSpecGenSpec()=default; RooAbsPdf::GenSpec::_randProtobool _randProtoDefinition RooAbsPdf.h:88; RooAbsPdf::GenSpec::_resampleProtobool _resampleProtoDefinition RooAbsPdf.h:89; RooAbsPdf::GenSpec::_protoDataRooDataSet * _protoDataDefinition RooAbsPdf.h:85; RooAbsPdfAbstract interface for all probability density functions.Definition RooAbsPdf.h:40; RooAbsPdf::syncNormalizationvirtual bool syncNormalization(const RooArgSet *dset, bool adjustProxies=true) constVerify that the normalization integral cached with this PDF is valid for given set of normalization o...Definition RooAbsPdf.cxx:481; RooAbsPdf::getNormdouble getNorm(const RooArgSet &nset) constGet normalisation term needed to normalise the raw values returned by getVal().Definition RooAbsPdf.h:195; RooAbsPdf::compileForNormSetstd::unique_ptr< RooAbsArg > compileForNormSet(RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const overrideDefinition RooAbsPdf.cxx:2788; RooAbsPdf::_normMgrRooObjCacheManager _normMgrDefinition RooAbsPdf.h:329; RooAbsPdf::_specGeneratorConfigstd::unique_ptr< RooNumGenConfig > _specGeneratorConfig! MC generator configuration specific for this objectDefinition RooAbsPdf.h:340; RooAbsPdf::getValVdouble getValV(const RooArgSet *set=nullptr) const overrideReturn current value, normalized by integrating over the observables in nset.Definition RooAbsPdf.cxx:319; RooAbsPdf::fitToImplvirtual std::unique_ptr< RooFitResult > fitToImpl(RooAbsData &",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:153115,Performance,cache,cache,153115,"Mode extendMode() constReturns ability of PDF to provide extended likelihood terms.Definition RooAbsPdf.h:216; RooAbsPdf::RooAbsPdfRooAbsPdf()Default constructor.Definition RooAbsPdf.cxx:230; RooAbsPdf::generateBinnedvirtual RooFit::OwningPtr< RooDataHist > generateBinned(const RooArgSet &whatVars, double nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}) constAs RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,...Definition RooAbsPdf.h:110; RooAbsPdf::traceEvalPdfbool traceEvalPdf(double value) constCheck that passed value is positive and not 'not-a-number'.Definition RooAbsPdf.cxx:384; RooAbsPdf::defaultGeneratorConfigstatic RooNumGenConfig * defaultGeneratorConfig()Returns the default numeric MC generator configuration for all RooAbsReals.Definition RooAbsPdf.cxx:2613; RooAbsPdf::redirectServersHookbool redirectServersHook(const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) overrideThe cache manager.Definition RooAbsPdf.cxx:2768; RooAbsPdf::printValuevoid printValue(std::ostream &os) const overridePrint value of p.d.f, also print normalization integral that was last used, if any.Definition RooAbsPdf.cxx:1081; RooAbsPdf::createNLLImplvirtual std::unique_ptr< RooAbsReal > createNLLImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the NLL creation routine.Definition RooAbsPdf.cxx:941; RooAbsPdf::logBatchComputationErrorsvoid logBatchComputationErrors(std::span< const double > &outputs, std::size_t begin) constScan through outputs and fix+log all nans and negative values.Definition RooAbsPdf.cxx:654; RooAbsPdf::genContextvirtual RooAbsGenContext * genContext(const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) constInterface function to create a generator context from a p.d.f.Definition RooAbsPdf.cxx:",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:157072,Performance,perform,perform,157072," composite p.d.fs.Definition RooAbsReal.cxx:1438; RooAbsReal::createIntegralRooFit::OwningPtr< RooAbsReal > createIntegral(const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) constCreate an object that represents the integral of the function over one or more observables listed in ...Definition RooAbsReal.cxx:514; RooAbsReal::ScaleTypeScaleTypeDefinition RooAbsReal.h:276; RooAbsReal::NumEvent@ NumEventDefinition RooAbsReal.h:276; RooAbsReal::Relative@ RelativeDefinition RooAbsReal.h:276; RooAbsReal::Raw@ RawDefinition RooAbsReal.h:276; RooAbsReal::RelativeExpected@ RelativeExpectedDefinition RooAbsReal.h:276; RooAbsReal::getValdouble getVal(const RooArgSet *normalisationSet=nullptr) constEvaluate object.Definition RooAbsReal.h:103; RooAbsReal::plotSanityChecksbool plotSanityChecks(RooPlot *frame) constUtility function for plotOn(), perform general sanity check on frame to ensure safe plotting operatio...Definition RooAbsReal.cxx:2860; RooAbsReal::printMultilinevoid printMultiline(std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const overrideStructure printing.Definition RooAbsReal.cxx:455; RooAbsReal::redirectServersHookbool redirectServersHook(const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) overrideFunction that is called at the end of redirectServers().Definition RooAbsReal.cxx:4474; RooAbsReal::_valuedouble _valueCache for current value of object.Definition RooAbsReal.h:536; RooAbsReal::analyticalIntegralvirtual double analyticalIntegral(Int_t code, const char *rangeName=nullptr) constImplements the actual analytical integral(s) advertised by getAnalyticalIntegral.Definition RooAbsReal.cxx:394; RooAbsReal::integralNameSuffixTString integralNameSuffix(const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *r",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:160669,Performance,cache,cache,160669,"ontainer object that can hold multiple RooAbsArg objects.Definition RooArgSet.h:24; RooArgSet::selectByNameRooArgSet * selectByName(const char *nameList, bool verbose=false) constUse RooAbsCollection::selectByName(), but return as RooArgSet.Definition RooArgSet.h:144; RooArgSet::selectCommonRooArgSet * selectCommon(const RooAbsCollection &refColl) constUse RooAbsCollection::selecCommon(), but return as RooArgSet.Definition RooArgSet.h:149; RooBinnedGenContextEfficient implementation of the generator context specific for binned pdfs.Definition RooBinnedGenContext.h:26; RooCacheManager::setObjInt_t setObj(const RooArgSet *nset, T *obj, const TNamed *isetRangeName=nullptr)Setter function without integration set.Definition RooCacheManager.h:50; RooCacheManager::getObjT * getObj(const RooArgSet *nset, Int_t *sterileIndex=nullptr, const TNamed *isetRangeName=nullptr)Getter function without integration set.Definition RooCacheManager.h:45; RooCachedRealImplementation of RooAbsCachedReal that can cache any external RooAbsReal input function provided in ...Definition RooCachedReal.h:20; RooCachedReal::setCacheSourcevoid setCacheSource(bool flag)Definition RooCachedReal.h:43; RooCmdArgNamed container for two doubles, two integers two object points and three string pointers that can be...Definition RooCmdArg.h:26; RooCmdArg::setStringvoid setString(Int_t idx, const char *value)Definition RooCmdArg.h:78; RooCmdConfigConfigurable parser for RooCmdArg named arguments.Definition RooCmdConfig.h:32; RooCmdConfig::defineMutexvoid defineMutex(const char *head, Args_t &&... tail)Define arguments where any pair is mutually exclusive.Definition RooCmdConfig.h:153; RooCmdConfig::processbool process(const RooCmdArg &arg)Process given RooCmdArg.Definition RooCmdConfig.cxx:311; RooCmdConfig::hasProcessedbool hasProcessed(const char *cmdName) constReturn true if RooCmdArg with name 'cmdName' has been processed.Definition RooCmdConfig.cxx:470; RooCmdConfig::getDoubledouble getDouble(const char *",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:165994,Performance,cache,cache,165994,"he message service to a different level while the instance is alive.Definition RooHelpers.h:37; RooLinkedListCollection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list...Definition RooLinkedList.h:44; RooLinkedList::Addvirtual void Add(TObject *arg)Definition RooLinkedList.h:73; RooLinkedList::FindObjectTObject * FindObject(const char *name) const overrideReturn pointer to object with given name.Definition RooLinkedList.cxx:534; RooNameReg::strstatic const char * str(const TNamed *ptr)Return C++ string corresponding to given TNamed pointer.Definition RooNameReg.h:39; RooNumGenConfigHolds the configuration parameters of the various numeric integrators used by RooRealIntegral.Definition RooNumGenConfig.h:25; RooNumGenConfig::defaultConfigstatic RooNumGenConfig & defaultConfig()Return reference to instance of default numeric integrator configuration object.Definition RooNumGenConfig.cxx:44; RooObjCacheManagerImplementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elem...Definition RooObjCacheManager.h:29; RooObjCacheManager::sterilizevoid sterilize() overrideClear the cache payload but retain slot mapping w.r.t to normalization and integration sets.Definition RooObjCacheManager.cxx:152; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::addObjectvoid addObject(TObject *obj, Option_t *drawOptions="""", bool invisible=false)Add a generic object to this plot.Definition RooPlot.cxx:366; RooPlot::getFitRangeNEvtdouble getFitRangeNEvt() constReturn the number of events in the fit range.Definition RooPlot.h:145; RooPlot::getNormVarsconst RooArgSet * getNormVars() constDefinition RooPlot.h:152; RooPlot::getPlotVarRooAbsRealLValue * getPlotVar() constDefinition RooPlot.h:143; RooPlot::updateNormVarsvoid updateNormVars(const RooArgSet &vars)Install the given set of observables are reference normalization variables for this frame.Definition Roo",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:166107,Performance,cache,cache,166107," a collection of RooAbsArg pointers in a doubly linked list...Definition RooLinkedList.h:44; RooLinkedList::Addvirtual void Add(TObject *arg)Definition RooLinkedList.h:73; RooLinkedList::FindObjectTObject * FindObject(const char *name) const overrideReturn pointer to object with given name.Definition RooLinkedList.cxx:534; RooNameReg::strstatic const char * str(const TNamed *ptr)Return C++ string corresponding to given TNamed pointer.Definition RooNameReg.h:39; RooNumGenConfigHolds the configuration parameters of the various numeric integrators used by RooRealIntegral.Definition RooNumGenConfig.h:25; RooNumGenConfig::defaultConfigstatic RooNumGenConfig & defaultConfig()Return reference to instance of default numeric integrator configuration object.Definition RooNumGenConfig.cxx:44; RooObjCacheManagerImplementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elem...Definition RooObjCacheManager.h:29; RooObjCacheManager::sterilizevoid sterilize() overrideClear the cache payload but retain slot mapping w.r.t to normalization and integration sets.Definition RooObjCacheManager.cxx:152; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::addObjectvoid addObject(TObject *obj, Option_t *drawOptions="""", bool invisible=false)Add a generic object to this plot.Definition RooPlot.cxx:366; RooPlot::getFitRangeNEvtdouble getFitRangeNEvt() constReturn the number of events in the fit range.Definition RooPlot.h:145; RooPlot::getNormVarsconst RooArgSet * getNormVars() constDefinition RooPlot.h:152; RooPlot::getPlotVarRooAbsRealLValue * getPlotVar() constDefinition RooPlot.h:143; RooPlot::updateNormVarsvoid updateNormVars(const RooArgSet &vars)Install the given set of observables are reference normalization variables for this frame.Definition RooPlot.cxx:351; RooPlot::getFitRangeBinWdouble getFitRangeBinW() constReturn the bin width that is being used to normalise the PDF.Definition RooPlot.h:1",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:3387,Safety,safe,safe,3387,"ize the; 47function output in evaluate(). In particular, normalisation constants; 48can be omitted to speed up the function evaluations, and included later; 49in the integration of the PDF (see below), which is rarely called in; 50comparison to the `evaluate()` function.; 51 ; 52In addition, RooAbsPdf objects do not have a static concept of what; 53variables are parameters, and what variables are dependents (which; 54need to be integrated over for a correct PDF normalization).; 55Instead, the choice of normalization is always specified each time a; 56normalized value is requested from the PDF via the getVal(); 57method.; 58 ; 59RooAbsPdf manages the entire normalization logic of each PDF with; 60the help of a RooRealIntegral object, which coordinates the integration; 61of a given choice of normalization. By default, RooRealIntegral will; 62perform an entirely numeric integration of all dependents. However,; 63PDFs can advertise one or more (partial) analytical integrals of; 64their function, and these will be used by RooRealIntegral, if it; 65determines that this is safe (i.e., no hidden Jacobian terms,; 66multiplication with other PDFs that have one or more dependents in; 67common, etc).; 68 ; 69#### Implementing analytical integrals; 70To implement analytical integrals, two functions must be implemented. First,; 71 ; 72```; 73Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); 74```; 75should return the analytical integrals that are supported. `integSet`; 76is the set of dependents for which integration is requested. The; 77function should copy the subset of dependents it can analytically; 78integrate to `anaIntSet`, and return a unique identification code for; 79this integration configuration. If no integration can be; 80performed, zero should be returned. Second,; 81 ; 82```; 83double analyticalIntegral(Int_t code); 84```; 85 ; 86implements the actual analytical integral(s) advertised by; 87`getAnalyticalIntegral()`. This function will o",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:11171,Safety,recover,recover,11171," (other._specGeneratorConfig) {; 268 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*other._specGeneratorConfig);; 269 }; 270}; 271 ; 272 ; 273 ; 274////////////////////////////////////////////////////////////////////////////////; 275/// Destructor; 276 ; 277RooAbsPdf::~RooAbsPdf(); 278{; 279}; 280 ; 281 ; 282double RooAbsPdf::normalizeWithNaNPacking(double rawVal, double normVal) const {; 283 ; 284 if (normVal < 0. || (normVal == 0. && rawVal != 0)) {; 285 //Unreasonable normalisations. A zero integral can be tolerated if the function vanishes, though.; 286 const std::string msg = ""p.d.f normalization integral is zero or negative: "" + std::to_string(normVal);; 287 logEvalError(msg.c_str());; 288 clearValueAndShapeDirty();; 289 return RooNaNPacker::packFloatIntoNaN(-normVal + (rawVal < 0. ? -rawVal : 0.));; 290 }; 291 ; 292 if (rawVal < 0.) {; 293 logEvalError(Form(""p.d.f value is less than zero (%f), trying to recover"", rawVal));; 294 clearValueAndShapeDirty();; 295 return RooNaNPacker::packFloatIntoNaN(-rawVal);; 296 }; 297 ; 298 if (TMath::IsNaN(rawVal)) {; 299 logEvalError(""p.d.f value is Not-a-Number"");; 300 clearValueAndShapeDirty();; 301 return rawVal;; 302 }; 303 ; 304 return (rawVal == 0. && normVal == 0.) ? 0. : rawVal / normVal;; 305}; 306 ; 307 ; 308////////////////////////////////////////////////////////////////////////////////; 309/// Return current value, normalized by integrating over; 310/// the observables in `nset`. If `nset` is 0, the unnormalized value; 311/// is returned. All elements of `nset` must be lvalues.; 312///; 313/// Unnormalized values are not cached.; 314/// Doing so would be complicated as `_norm->getVal()` could; 315/// spoil the cache and interfere with returning the cached; 316/// return value. Since unnormalized calls are typically; 317/// done in integration calls, there is no performance hit.; 318 ; 319double RooAbsPdf::getValV(const RooArgSet* nset) const; 320{; 321 ; 322 // Special handling of case without normali",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:26829,Safety,avoid,avoid,26829,"679/// of this PDF for the given number of observed events.; 680///; 681/// For successful operation, the PDF implementation must indicate that; 682/// it is extendable by overloading `canBeExtended()`, and must; 683/// implement the `expectedEvents()` function.; 684///; 685/// \param[in] sumEntries The number of observed events.; 686/// \param[in] nset The normalization set when asking the pdf for the expected; 687/// number of events.; 688/// \param[in] observedSumW2 The number of observed events when weighting with; 689/// squared weights. If non-zero, the weight-squared error; 690/// correction is applied to the extended term.; 691/// \param[in] doOffset Offset the extended term by a counterterm where the; 692/// expected number of events equals the observed number of events.; 693/// This constant shift results in a term closer to zero that is; 694/// approximately chi-square distributed. It is useful to do this; 695/// also when summing multiple NLL terms to avoid numeric precision; 696/// loss that happens if you sum multiple terms of different orders; 697/// of magnitude.; 698///; 699/// The weight-squared error correction works as follows:; 700/// adjust poisson such that; 701/// estimate of \f$N_\mathrm{expect}\f$ stays at the same value, but has a different variance, rescale; 702/// both the observed and expected count of the Poisson with a factor \f$ \sum w_{i} / \sum w_{i}^2 \f$; 703/// (the effective weight of the Poisson term),; 704/// i.e., change \f$\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\f$; 705/// to \f$ \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \f$,; 706/// weighted by the effective weight \f$ \sum w_{i}^2 / \sum w_{i} \f$ in the likelihood.; 707/// Since here we compute the likelihood with the weight square, we need to multiply by the; 708/// square of the effective weight:; 709/// - \f$ W_\mathrm{expect} = N_\mathrm{expect} \cdot \sum w_{i} / ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:75978,Safety,safe,safely,75978,"rgs() methods to advertise the algorithms they provide.; 1521 ; 1522Int_t RooAbsPdf::getGenerator(const RooArgSet &/*directVars*/, RooArgSet &/*generatedVars*/, bool /*staticInitOK*/) const; 1523{; 1524 return 0 ;; 1525}; 1526 ; 1527 ; 1528 ; 1529////////////////////////////////////////////////////////////////////////////////; 1530/// Interface for one-time initialization to setup the generator for the specified code.; 1531 ; 1532void RooAbsPdf::initGenerator(Int_t /*code*/); 1533{; 1534}; 1535 ; 1536 ; 1537 ; 1538////////////////////////////////////////////////////////////////////////////////; 1539/// Interface for generation of an event using the algorithm; 1540/// corresponding to the specified code. The meaning of each code is; 1541/// defined by the getGenerator() implementation. The default; 1542/// implementation does nothing.; 1543 ; 1544void RooAbsPdf::generateEvent(Int_t /*code*/); 1545{; 1546}; 1547 ; 1548 ; 1549 ; 1550////////////////////////////////////////////////////////////////////////////////; 1551/// Check if given observable can be safely generated using the; 1552/// pdfs internal generator mechanism (if that existsP). Observables; 1553/// on which a PDF depends via more than route are not safe; 1554/// for use with internal generators because they introduce; 1555/// correlations not known to the internal generator; 1556 ; 1557bool RooAbsPdf::isDirectGenSafe(const RooAbsArg& arg) const; 1558{; 1559 // Arg must be direct server of self; 1560 if (!findServer(arg.GetName())) return false ;; 1561 ; 1562 // There must be no other dependency routes; 1563 for (const auto server : _serverList) {; 1564 if(server == &arg) continue;; 1565 if(server->dependsOn(arg)) {; 1566 return false ;; 1567 }; 1568 }; 1569 ; 1570 return true ;; 1571}; 1572 ; 1573 ; 1574////////////////////////////////////////////////////////////////////////////////; 1575/// Generate a new dataset containing the specified variables with events sampled from our distribution.; 1576/// \param",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:76139,Safety,safe,safe,76139,"1530/// Interface for one-time initialization to setup the generator for the specified code.; 1531 ; 1532void RooAbsPdf::initGenerator(Int_t /*code*/); 1533{; 1534}; 1535 ; 1536 ; 1537 ; 1538////////////////////////////////////////////////////////////////////////////////; 1539/// Interface for generation of an event using the algorithm; 1540/// corresponding to the specified code. The meaning of each code is; 1541/// defined by the getGenerator() implementation. The default; 1542/// implementation does nothing.; 1543 ; 1544void RooAbsPdf::generateEvent(Int_t /*code*/); 1545{; 1546}; 1547 ; 1548 ; 1549 ; 1550////////////////////////////////////////////////////////////////////////////////; 1551/// Check if given observable can be safely generated using the; 1552/// pdfs internal generator mechanism (if that existsP). Observables; 1553/// on which a PDF depends via more than route are not safe; 1554/// for use with internal generators because they introduce; 1555/// correlations not known to the internal generator; 1556 ; 1557bool RooAbsPdf::isDirectGenSafe(const RooAbsArg& arg) const; 1558{; 1559 // Arg must be direct server of self; 1560 if (!findServer(arg.GetName())) return false ;; 1561 ; 1562 // There must be no other dependency routes; 1563 for (const auto server : _serverList) {; 1564 if(server == &arg) continue;; 1565 if(server->dependsOn(arg)) {; 1566 return false ;; 1567 }; 1568 }; 1569 ; 1570 return true ;; 1571}; 1572 ; 1573 ; 1574////////////////////////////////////////////////////////////////////////////////; 1575/// Generate a new dataset containing the specified variables with events sampled from our distribution.; 1576/// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; 1577/// constant and not be used for event generation; 1578/// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg to change behaviour of generateBinned(); 1579/// \return RooDataHist *, to be managed by caller.; 1580///; 1",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:99801,Safety,sanity check,sanity checks,99801,"td::string nameSuffix ;; 2001 if (compSpec && strlen(compSpec)>0) {; 2002 nameSuffix.append(""_Comp["") ;; 2003 nameSuffix.append(compSpec) ;; 2004 nameSuffix.append(""]"") ;; 2005 } else if (compSet) {; 2006 nameSuffix += ""_Comp["" + compSet->contentsString() + ""]"";; 2007 }; 2008 ; 2009 // Remove PDF-only commands from command list; 2010 RooCmdConfig::stripCmdList(cmdList,""SelectCompSet,SelectCompSpec"") ;; 2011 ; 2012 // Adjust normalization, if so requested; 2013 if (asymCat) {; 2014 RooCmdArg cnsuffix(""CurveNameSuffix"",0,0,0,0,nameSuffix.c_str(),nullptr,nullptr,nullptr) ;; 2015 cmdList.Add(&cnsuffix);; 2016 return RooAbsReal::plotOn(frame,cmdList) ;; 2017 }; 2018 ; 2019 // More sanity checks; 2020 double nExpected(1) ;; 2021 if (stype==RelativeExpected) {; 2022 if (!canBeExtended()) {; 2023 coutE(Plotting) << ""RooAbsPdf::plotOn("" << GetName(); 2024 << ""): ERROR the 'Expected' scale option can only be used on extendable PDFs"" << endl ;; 2025 return frame ;; 2026 }; 2027 frame->updateNormVars(*frame->getPlotVar()) ;; 2028 nExpected = expectedEvents(frame->getNormVars()) ;; 2029 }; 2030 ; 2031 if (stype != Raw) {; 2032 ; 2033 if (frame->getFitRangeNEvt() && stype==Relative) {; 2034 ; 2035 bool hasCustomRange(false);; 2036 bool adjustNorm(false);; 2037 ; 2038 std::vector<pair<double,double> > rangeLim;; 2039 ; 2040 // Retrieve plot range to be able to adjust normalization to data; 2041 if (pc.hasProcessed(""Range"")) {; 2042 ; 2043 double rangeLo = pc.getDouble(""rangeLo"") ;; 2044 double rangeHi = pc.getDouble(""rangeHi"") ;; 2045 rangeLim.push_back(make_pair(rangeLo,rangeHi)) ;; 2046 adjustNorm = pc.getInt(""rangeAdjustNorm"") ;; 2047 hasCustomRange = true ;; 2048 ; 2049 coutI(Plotting) << ""RooAbsPdf::plotOn("" << GetName() << "") only plotting range [""; 2050 << rangeLo << "","" << rangeHi << ""]"" ;; 2051 if (!pc.hasProcessed(""NormRange"")) {; 2052 ccoutI(Plotting) << "", curve is normalized to data in "" << (adjustNorm?""given"":""full"") << "" range"" << endl ;; 2053 } else {; 2054 ccoutI(P",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:103796,Safety,avoid,avoided,103796,"nge(thisRangeName)) {; 2088 coutE(Plotting) << ""Range '"" << rangeNameToken << ""' not defined for variable '""; 2089 << frame->getPlotVar()->GetName() << ""'. Ignoring ..."" << std::endl;; 2090 continue;; 2091 }; 2092 rangeLim.push_back(frame->getPlotVar()->getRange(thisRangeName));; 2093 }; 2094 adjustNorm = true ;; 2095 hasCustomRange = true ;; 2096 coutI(Plotting) << ""RooAbsPdf::plotOn("" << GetName() << "") p.d.f. curve is normalized using explicit choice of ranges '"" << pc.getString(""normRangeName"", """", false) << ""'"" << endl ;; 2097 ; 2098 nameSuffix.append(""_NormRange["" + std::string(pc.getString(""rangeName"")) + ""]"");; 2099 ; 2100 }; 2101 ; 2102 if (hasCustomRange && adjustNorm) {; 2103 // If overlapping ranges were given, remove them now; 2104 const std::size_t oldSize = rangeLim.size();; 2105 removeRangeOverlap(rangeLim);; 2106 ; 2107 if (oldSize != rangeLim.size() && !pc.hasProcessed(""NormRange"")) {; 2108 // User gave overlapping ranges. This leads to double-counting events and integrals, and must; 2109 // therefore be avoided. If a NormRange has been given, the overlap is already gone.; 2110 // It's safe to plot even with overlap now.; 2111 coutE(Plotting) << ""Requested plot/integration ranges overlap. For correct plotting, new ranges ""; 2112 ""will be defined."" << std::endl;; 2113 auto plotVar = dynamic_cast<RooRealVar*>(frame->getPlotVar());; 2114 assert(plotVar);; 2115 std::string rangesNoOverlap;; 2116 for (auto it = rangeLim.begin(); it != rangeLim.end(); ++it) {; 2117 std::stringstream rangeName;; 2118 rangeName << ""Remove_overlap_range_"" << it - rangeLim.begin();; 2119 plotVar->setRange(rangeName.str().c_str(), it->first, it->second);; 2120 if (!rangesNoOverlap.empty()); 2121 rangesNoOverlap += "","";; 2122 rangesNoOverlap += rangeName.str();; 2123 }; 2124 ; 2125 auto rangeArg = static_cast<RooCmdArg*>(cmdList.FindObject(""RangeWithName""));; 2126 if (rangeArg) {; 2127 rangeArg->setString(0, rangesNoOverlap.c_str());; 2128 } else {; 2129 plotRange = std::make_",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:103879,Safety,safe,safe,103879,"tVar()->GetName() << ""'. Ignoring ..."" << std::endl;; 2090 continue;; 2091 }; 2092 rangeLim.push_back(frame->getPlotVar()->getRange(thisRangeName));; 2093 }; 2094 adjustNorm = true ;; 2095 hasCustomRange = true ;; 2096 coutI(Plotting) << ""RooAbsPdf::plotOn("" << GetName() << "") p.d.f. curve is normalized using explicit choice of ranges '"" << pc.getString(""normRangeName"", """", false) << ""'"" << endl ;; 2097 ; 2098 nameSuffix.append(""_NormRange["" + std::string(pc.getString(""rangeName"")) + ""]"");; 2099 ; 2100 }; 2101 ; 2102 if (hasCustomRange && adjustNorm) {; 2103 // If overlapping ranges were given, remove them now; 2104 const std::size_t oldSize = rangeLim.size();; 2105 removeRangeOverlap(rangeLim);; 2106 ; 2107 if (oldSize != rangeLim.size() && !pc.hasProcessed(""NormRange"")) {; 2108 // User gave overlapping ranges. This leads to double-counting events and integrals, and must; 2109 // therefore be avoided. If a NormRange has been given, the overlap is already gone.; 2110 // It's safe to plot even with overlap now.; 2111 coutE(Plotting) << ""Requested plot/integration ranges overlap. For correct plotting, new ranges ""; 2112 ""will be defined."" << std::endl;; 2113 auto plotVar = dynamic_cast<RooRealVar*>(frame->getPlotVar());; 2114 assert(plotVar);; 2115 std::string rangesNoOverlap;; 2116 for (auto it = rangeLim.begin(); it != rangeLim.end(); ++it) {; 2117 std::stringstream rangeName;; 2118 rangeName << ""Remove_overlap_range_"" << it - rangeLim.begin();; 2119 plotVar->setRange(rangeName.str().c_str(), it->first, it->second);; 2120 if (!rangesNoOverlap.empty()); 2121 rangesNoOverlap += "","";; 2122 rangesNoOverlap += rangeName.str();; 2123 }; 2124 ; 2125 auto rangeArg = static_cast<RooCmdArg*>(cmdList.FindObject(""RangeWithName""));; 2126 if (rangeArg) {; 2127 rangeArg->setString(0, rangesNoOverlap.c_str());; 2128 } else {; 2129 plotRange = std::make_unique<RooCmdArg>(RooFit::Range(rangesNoOverlap.c_str()));; 2130 cmdList.Add(plotRange.get());; 2131 }; 2132 }; 2133 ; 2134 double ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:108466,Safety,sanity check,sanity checks,108466,"lection status ;; 2202 if (haveCompSel) plotOnCompSelect(nullptr) ;; 2203 ; 2204 return ret ;; 2205}; 2206 ; 2207 ; 2208//_____________________________________________________________________________; 2209/// Plot oneself on 'frame'. In addition to features detailed in RooAbsReal::plotOn(),; 2210/// the scale factor for a PDF can be interpreted in three different ways. The interpretation; 2211/// is controlled by ScaleType; 2212/// ```; 2213/// Relative - Scale factor is applied on top of PDF normalization scale factor; 2214/// NumEvent - Scale factor is interpreted as a number of events. The surface area; 2215/// under the PDF curve will match that of a histogram containing the specified; 2216/// number of event; 2217/// Raw - Scale factor is applied to the raw (projected) probability density.; 2218/// Not too useful, option provided for completeness.; 2219/// ```; 2220// coverity[PASS_BY_VALUE]; 2221RooPlot* RooAbsPdf::plotOn(RooPlot *frame, PlotOpt o) const; 2222{; 2223 ; 2224 // Sanity checks; 2225 if (plotSanityChecks(frame)) return frame ;; 2226 ; 2227 // More sanity checks; 2228 double nExpected(1) ;; 2229 if (o.stype==RelativeExpected) {; 2230 if (!canBeExtended()) {; 2231 coutE(Plotting) << ""RooAbsPdf::plotOn("" << GetName(); 2232 << ""): ERROR the 'Expected' scale option can only be used on extendable PDFs"" << endl ;; 2233 return frame ;; 2234 }; 2235 frame->updateNormVars(*frame->getPlotVar()) ;; 2236 nExpected = expectedEvents(frame->getNormVars()) ;; 2237 }; 2238 ; 2239 // Adjust normalization, if so requested; 2240 if (o.stype != Raw) {; 2241 ; 2242 if (frame->getFitRangeNEvt() && o.stype==Relative) {; 2243 // If non-default plotting range is specified, adjust number of events in fit range; 2244 o.scaleFactor *= frame->getFitRangeNEvt()/nExpected ;; 2245 } else if (o.stype==RelativeExpected) {; 2246 o.scaleFactor *= nExpected ;; 2247 } else if (o.stype==NumEvent) {; 2248 o.scaleFactor /= nExpected ;; 2249 }; 2250 o.scaleFactor *= frame->getFitRangeBinW() ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:146160,Safety,safe,safely,146160,"ateCdfRooFit::OwningPtr< RooAbsReal > createCdf(const RooArgSet &iset, const RooArgSet &nset=RooArgSet())Create a cumulative distribution function of this p.d.f in terms of the observables listed in iset.Definition RooAbsPdf.cxx:2468; RooAbsPdf::isActiveNormSetbool isActiveNormSet(RooArgSet const *normSet) constChecks if normSet is the currently active normalization set of this PDF, meaning is exactly the same ...Definition RooAbsPdf.h:299; RooAbsPdf::expectedEventsvirtual double expectedEvents(const RooArgSet *nset) constReturn expected number of events to be used in calculation of extended likelihood.Definition RooAbsPdf.cxx:2398; RooAbsPdf::binnedGenContextvirtual RooAbsGenContext * binnedGenContext(const RooArgSet &vars, bool verbose=false) constReturn a binned generator context.Definition RooAbsPdf.cxx:1117; RooAbsPdf::_normRangeTString _normRangeNormalization range.Definition RooAbsPdf.h:342; RooAbsPdf::isDirectGenSafevirtual bool isDirectGenSafe(const RooAbsArg &arg) constCheck if given observable can be safely generated using the pdfs internal generator mechanism (if tha...Definition RooAbsPdf.cxx:1557; RooAbsPdf::randomizeProtoOrderInt_t * randomizeProtoOrder(Int_t nProto, Int_t nGen, bool resample=false) constReturn lookup table with randomized order for nProto prototype events.Definition RooAbsPdf.cxx:1485; RooAbsPdf::setNormRangevoid setNormRange(const char *rangeName)Definition RooAbsPdf.cxx:2726; RooAbsPdf::~RooAbsPdf~RooAbsPdf() overrideDestructor.Definition RooAbsPdf.cxx:277; RooAbsPdf::_normSetRooArgSet const * _normSetNormalization integral (owned by _normMgr)Definition RooAbsPdf.h:320; RooAbsPdf::plotOnRooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const overrideHelper calling plotOn(RooPlot*, RooLinkedLis",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:157088,Safety,sanity check,sanity check,157088," composite p.d.fs.Definition RooAbsReal.cxx:1438; RooAbsReal::createIntegralRooFit::OwningPtr< RooAbsReal > createIntegral(const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) constCreate an object that represents the integral of the function over one or more observables listed in ...Definition RooAbsReal.cxx:514; RooAbsReal::ScaleTypeScaleTypeDefinition RooAbsReal.h:276; RooAbsReal::NumEvent@ NumEventDefinition RooAbsReal.h:276; RooAbsReal::Relative@ RelativeDefinition RooAbsReal.h:276; RooAbsReal::Raw@ RawDefinition RooAbsReal.h:276; RooAbsReal::RelativeExpected@ RelativeExpectedDefinition RooAbsReal.h:276; RooAbsReal::getValdouble getVal(const RooArgSet *normalisationSet=nullptr) constEvaluate object.Definition RooAbsReal.h:103; RooAbsReal::plotSanityChecksbool plotSanityChecks(RooPlot *frame) constUtility function for plotOn(), perform general sanity check on frame to ensure safe plotting operatio...Definition RooAbsReal.cxx:2860; RooAbsReal::printMultilinevoid printMultiline(std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const overrideStructure printing.Definition RooAbsReal.cxx:455; RooAbsReal::redirectServersHookbool redirectServersHook(const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) overrideFunction that is called at the end of redirectServers().Definition RooAbsReal.cxx:4474; RooAbsReal::_valuedouble _valueCache for current value of object.Definition RooAbsReal.h:536; RooAbsReal::analyticalIntegralvirtual double analyticalIntegral(Int_t code, const char *rangeName=nullptr) constImplements the actual analytical integral(s) advertised by getAnalyticalIntegral.Definition RooAbsReal.cxx:394; RooAbsReal::integralNameSuffixTString integralNameSuffix(const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *r",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:157120,Safety,safe,safe,157120," composite p.d.fs.Definition RooAbsReal.cxx:1438; RooAbsReal::createIntegralRooFit::OwningPtr< RooAbsReal > createIntegral(const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) constCreate an object that represents the integral of the function over one or more observables listed in ...Definition RooAbsReal.cxx:514; RooAbsReal::ScaleTypeScaleTypeDefinition RooAbsReal.h:276; RooAbsReal::NumEvent@ NumEventDefinition RooAbsReal.h:276; RooAbsReal::Relative@ RelativeDefinition RooAbsReal.h:276; RooAbsReal::Raw@ RawDefinition RooAbsReal.h:276; RooAbsReal::RelativeExpected@ RelativeExpectedDefinition RooAbsReal.h:276; RooAbsReal::getValdouble getVal(const RooArgSet *normalisationSet=nullptr) constEvaluate object.Definition RooAbsReal.h:103; RooAbsReal::plotSanityChecksbool plotSanityChecks(RooPlot *frame) constUtility function for plotOn(), perform general sanity check on frame to ensure safe plotting operatio...Definition RooAbsReal.cxx:2860; RooAbsReal::printMultilinevoid printMultiline(std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const overrideStructure printing.Definition RooAbsReal.cxx:455; RooAbsReal::redirectServersHookbool redirectServersHook(const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) overrideFunction that is called at the end of redirectServers().Definition RooAbsReal.cxx:4474; RooAbsReal::_valuedouble _valueCache for current value of object.Definition RooAbsReal.h:536; RooAbsReal::analyticalIntegralvirtual double analyticalIntegral(Int_t code, const char *rangeName=nullptr) constImplements the actual analytical integral(s) advertised by getAnalyticalIntegral.Definition RooAbsReal.cxx:394; RooAbsReal::integralNameSuffixTString integralNameSuffix(const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *r",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:2983,Testability,log,logic,2983,"ables. In; 43such cases, the normalization of the composite PDF may not simply be; 44integral over the dependents of the top-level PDF: these are; 45functions with potentially non-trivial Jacobian terms themselves.; 46\note Therefore, no explicit attempt should be made to normalize the; 47function output in evaluate(). In particular, normalisation constants; 48can be omitted to speed up the function evaluations, and included later; 49in the integration of the PDF (see below), which is rarely called in; 50comparison to the `evaluate()` function.; 51 ; 52In addition, RooAbsPdf objects do not have a static concept of what; 53variables are parameters, and what variables are dependents (which; 54need to be integrated over for a correct PDF normalization).; 55Instead, the choice of normalization is always specified each time a; 56normalized value is requested from the PDF via the getVal(); 57method.; 58 ; 59RooAbsPdf manages the entire normalization logic of each PDF with; 60the help of a RooRealIntegral object, which coordinates the integration; 61of a given choice of normalization. By default, RooRealIntegral will; 62perform an entirely numeric integration of all dependents. However,; 63PDFs can advertise one or more (partial) analytical integrals of; 64their function, and these will be used by RooRealIntegral, if it; 65determines that this is safe (i.e., no hidden Jacobian terms,; 66multiplication with other PDFs that have one or more dependents in; 67common, etc).; 68 ; 69#### Implementing analytical integrals; 70To implement analytical integrals, two functions must be implemented. First,; 71 ; 72```; 73Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); 74```; 75should return the analytical integrals that are supported. `integSet`; 76is the set of dependents for which integration is requested. The; 77function should copy the subset of dependents it can analytically; 78integrate to `anaIntSet`, and return a unique identification code for; 79t",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:4737,Testability,assert,assert,4737,"ooArgSet& anaIntSet); 74```; 75should return the analytical integrals that are supported. `integSet`; 76is the set of dependents for which integration is requested. The; 77function should copy the subset of dependents it can analytically; 78integrate to `anaIntSet`, and return a unique identification code for; 79this integration configuration. If no integration can be; 80performed, zero should be returned. Second,; 81 ; 82```; 83double analyticalIntegral(Int_t code); 84```; 85 ; 86implements the actual analytical integral(s) advertised by; 87`getAnalyticalIntegral()`. This function will only be called with; 88codes returned by `getAnalyticalIntegral()`, except code zero.; 89 ; 90The integration range for each dependent to be integrated can; 91be obtained from the dependent's proxy functions `min()` and; 92`max()`. Never call these proxy functions for any proxy not known to; 93be a dependent via the integration code. Doing so may be; 94ill-defined, e.g., in case the proxy holds a function, and will; 95trigger an assert. Integrated category dependents should always be; 96summed over all of their states.; 97 ; 98 ; 99 ; 100### Direct generation of observables; 101 ; 102Distributions for any PDF can be generated with the accept/reject method,; 103but for certain PDFs, more efficient methods may be implemented. To; 104implement direct generation of one or more observables, two; 105functions need to be implemented, similar to those for analytical; 106integrals:; 107 ; 108```; 109Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); 110```; 111and; 112```; 113void generateEvent(Int_t code); 114```; 115 ; 116The first function advertises observables, for which distributions can be generated,; 117similar to the way analytical integrals are advertised. The second; 118function implements the actual generator for the advertised observables.; 119 ; 120The generated dependent values should be stored in the proxy; 121objects. For this, the assignment operator c",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:5931,Testability,assert,assert,5931,"ions for any PDF can be generated with the accept/reject method,; 103but for certain PDFs, more efficient methods may be implemented. To; 104implement direct generation of one or more observables, two; 105functions need to be implemented, similar to those for analytical; 106integrals:; 107 ; 108```; 109Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); 110```; 111and; 112```; 113void generateEvent(Int_t code); 114```; 115 ; 116The first function advertises observables, for which distributions can be generated,; 117similar to the way analytical integrals are advertised. The second; 118function implements the actual generator for the advertised observables.; 119 ; 120The generated dependent values should be stored in the proxy; 121objects. For this, the assignment operator can be used (i.e. `xProxy; 122= 3.0` ). Never call assign to any proxy not known to be a dependent; 123via the generation code. Doing so may be ill-defined, e.g. in case; 124the proxy holds a function, and will trigger an assert.; 125 ; 126 ; 127### Batched function evaluations (Advanced usage); 128 ; 129To speed up computations with large numbers of data events in unbinned fits,; 130it is beneficial to override `doEval()`. Like this, large spans of; 131computations can be done, without having to call `evaluate()` for each single data event.; 132`doEval()` should execute the same computation as `evaluate()`, but it; 133may choose an implementation that is capable of SIMD computations.; 134If doEval is not implemented, the classic and slower `evaluate()` will be; 135called for each data event.; 136*/; 137 ; 138#include ""RooAbsPdf.h""; 139 ; 140#include ""FitHelpers.h""; 141#include ""RooNormalizedPdf.h""; 142#include ""RooMsgService.h""; 143#include ""RooArgSet.h""; 144#include ""RooArgProxy.h""; 145#include ""RooRealProxy.h""; 146#include ""RooRealVar.h""; 147#include ""RooGenContext.h""; 148#include ""RooBinnedGenContext.h""; 149#include ""RooPlot.h""; 150#include ""RooCurve.h""; 151#include ""RooCa",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:7876,Testability,log,logEvalError,7876,"h""; 147#include ""RooGenContext.h""; 148#include ""RooBinnedGenContext.h""; 149#include ""RooPlot.h""; 150#include ""RooCurve.h""; 151#include ""RooCategory.h""; 152#include ""RooNameReg.h""; 153#include ""RooCmdConfig.h""; 154#include ""RooGlobalFunc.h""; 155#include ""RooRandom.h""; 156#include ""RooNumIntConfig.h""; 157#include ""RooProjectedPdf.h""; 158#include ""RooParamBinning.h""; 159#include ""RooNumCdf.h""; 160#include ""RooFitResult.h""; 161#include ""RooNumGenConfig.h""; 162#include ""RooCachedReal.h""; 163#include ""RooRealIntegral.h""; 164#include ""RooWorkspace.h""; 165#include ""RooNaNPacker.h""; 166#include ""RooFitImplHelpers.h""; 167#include ""RooHelpers.h""; 168#include ""RooFormulaVar.h""; 169#include ""RooDerivative.h""; 170 ; 171#include ""ROOT/StringUtils.hxx""; 172#include ""TMath.h""; 173#include ""TPaveText.h""; 174#include ""TMatrixD.h""; 175#include ""TMatrixDSym.h""; 176 ; 177#include <algorithm>; 178#include <iostream>; 179#include <string>; 180#include <cmath>; 181#include <stdexcept>; 182 ; 183namespace {; 184 ; 185inline double getLog(double prob, RooAbsReal const *caller); 186{; 187 ; 188 if (prob < 0) {; 189 caller->logEvalError(""getLogVal() top-level p.d.f evaluates to a negative number"");; 190 return RooNaNPacker::packFloatIntoNaN(-prob);; 191 }; 192 ; 193 if (std::isinf(prob)) {; 194 oocoutW(caller, Eval) << ""RooAbsPdf::getLogVal("" << caller->GetName(); 195 << "") WARNING: top-level pdf has an infinite value"" << std::endl;; 196 }; 197 ; 198 if (prob == 0) {; 199 caller->logEvalError(""getLogVal() top-level p.d.f evaluates to zero"");; 200 ; 201 return -std::numeric_limits<double>::infinity();; 202 }; 203 ; 204 if (TMath::IsNaN(prob)) {; 205 caller->logEvalError(""getLogVal() top-level p.d.f evaluates to NaN"");; 206 ; 207 return prob;; 208 }; 209 ; 210 return std::log(prob);; 211}; 212 ; 213} // namespace; 214 ; 215using std::endl, std::string, std::ostream, std::vector, std::pair, std::make_pair;; 216 ; 217using RooHelpers::getColonSeparatedNameString;; 218 ; 219ClassImp(RooAbsPdf);; 220",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:8239,Testability,log,logEvalError,8239," 158#include ""RooParamBinning.h""; 159#include ""RooNumCdf.h""; 160#include ""RooFitResult.h""; 161#include ""RooNumGenConfig.h""; 162#include ""RooCachedReal.h""; 163#include ""RooRealIntegral.h""; 164#include ""RooWorkspace.h""; 165#include ""RooNaNPacker.h""; 166#include ""RooFitImplHelpers.h""; 167#include ""RooHelpers.h""; 168#include ""RooFormulaVar.h""; 169#include ""RooDerivative.h""; 170 ; 171#include ""ROOT/StringUtils.hxx""; 172#include ""TMath.h""; 173#include ""TPaveText.h""; 174#include ""TMatrixD.h""; 175#include ""TMatrixDSym.h""; 176 ; 177#include <algorithm>; 178#include <iostream>; 179#include <string>; 180#include <cmath>; 181#include <stdexcept>; 182 ; 183namespace {; 184 ; 185inline double getLog(double prob, RooAbsReal const *caller); 186{; 187 ; 188 if (prob < 0) {; 189 caller->logEvalError(""getLogVal() top-level p.d.f evaluates to a negative number"");; 190 return RooNaNPacker::packFloatIntoNaN(-prob);; 191 }; 192 ; 193 if (std::isinf(prob)) {; 194 oocoutW(caller, Eval) << ""RooAbsPdf::getLogVal("" << caller->GetName(); 195 << "") WARNING: top-level pdf has an infinite value"" << std::endl;; 196 }; 197 ; 198 if (prob == 0) {; 199 caller->logEvalError(""getLogVal() top-level p.d.f evaluates to zero"");; 200 ; 201 return -std::numeric_limits<double>::infinity();; 202 }; 203 ; 204 if (TMath::IsNaN(prob)) {; 205 caller->logEvalError(""getLogVal() top-level p.d.f evaluates to NaN"");; 206 ; 207 return prob;; 208 }; 209 ; 210 return std::log(prob);; 211}; 212 ; 213} // namespace; 214 ; 215using std::endl, std::string, std::ostream, std::vector, std::pair, std::make_pair;; 216 ; 217using RooHelpers::getColonSeparatedNameString;; 218 ; 219ClassImp(RooAbsPdf);; 220 ; 221ClassImp(RooAbsPdf::GenSpec);; 222 ; 223 ; 224Int_t RooAbsPdf::_verboseEval = 0;; 225TString RooAbsPdf::_normRangeOverride;; 226 ; 227////////////////////////////////////////////////////////////////////////////////; 228/// Default constructor; 229 ; 230RooAbsPdf::RooAbsPdf() : _normMgr(this, 10) {}; 231 ; 232//////////////////",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:8419,Testability,log,logEvalError,8419,"elpers.h""; 167#include ""RooHelpers.h""; 168#include ""RooFormulaVar.h""; 169#include ""RooDerivative.h""; 170 ; 171#include ""ROOT/StringUtils.hxx""; 172#include ""TMath.h""; 173#include ""TPaveText.h""; 174#include ""TMatrixD.h""; 175#include ""TMatrixDSym.h""; 176 ; 177#include <algorithm>; 178#include <iostream>; 179#include <string>; 180#include <cmath>; 181#include <stdexcept>; 182 ; 183namespace {; 184 ; 185inline double getLog(double prob, RooAbsReal const *caller); 186{; 187 ; 188 if (prob < 0) {; 189 caller->logEvalError(""getLogVal() top-level p.d.f evaluates to a negative number"");; 190 return RooNaNPacker::packFloatIntoNaN(-prob);; 191 }; 192 ; 193 if (std::isinf(prob)) {; 194 oocoutW(caller, Eval) << ""RooAbsPdf::getLogVal("" << caller->GetName(); 195 << "") WARNING: top-level pdf has an infinite value"" << std::endl;; 196 }; 197 ; 198 if (prob == 0) {; 199 caller->logEvalError(""getLogVal() top-level p.d.f evaluates to zero"");; 200 ; 201 return -std::numeric_limits<double>::infinity();; 202 }; 203 ; 204 if (TMath::IsNaN(prob)) {; 205 caller->logEvalError(""getLogVal() top-level p.d.f evaluates to NaN"");; 206 ; 207 return prob;; 208 }; 209 ; 210 return std::log(prob);; 211}; 212 ; 213} // namespace; 214 ; 215using std::endl, std::string, std::ostream, std::vector, std::pair, std::make_pair;; 216 ; 217using RooHelpers::getColonSeparatedNameString;; 218 ; 219ClassImp(RooAbsPdf);; 220 ; 221ClassImp(RooAbsPdf::GenSpec);; 222 ; 223 ; 224Int_t RooAbsPdf::_verboseEval = 0;; 225TString RooAbsPdf::_normRangeOverride;; 226 ; 227////////////////////////////////////////////////////////////////////////////////; 228/// Default constructor; 229 ; 230RooAbsPdf::RooAbsPdf() : _normMgr(this, 10) {}; 231 ; 232////////////////////////////////////////////////////////////////////////////////; 233/// Constructor with name and title only; 234 ; 235RooAbsPdf::RooAbsPdf(const char *name, const char *title) :; 236 RooAbsReal(name,title), _normMgr(this,10), _selectComp(true); 237{; 238 resetErrorCounte",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:8535,Testability,log,log,8535," top-level p.d.f evaluates to zero"");; 200 ; 201 return -std::numeric_limits<double>::infinity();; 202 }; 203 ; 204 if (TMath::IsNaN(prob)) {; 205 caller->logEvalError(""getLogVal() top-level p.d.f evaluates to NaN"");; 206 ; 207 return prob;; 208 }; 209 ; 210 return std::log(prob);; 211}; 212 ; 213} // namespace; 214 ; 215using std::endl, std::string, std::ostream, std::vector, std::pair, std::make_pair;; 216 ; 217using RooHelpers::getColonSeparatedNameString;; 218 ; 219ClassImp(RooAbsPdf);; 220 ; 221ClassImp(RooAbsPdf::GenSpec);; 222 ; 223 ; 224Int_t RooAbsPdf::_verboseEval = 0;; 225TString RooAbsPdf::_normRangeOverride;; 226 ; 227////////////////////////////////////////////////////////////////////////////////; 228/// Default constructor; 229 ; 230RooAbsPdf::RooAbsPdf() : _normMgr(this, 10) {}; 231 ; 232////////////////////////////////////////////////////////////////////////////////; 233/// Constructor with name and title only; 234 ; 235RooAbsPdf::RooAbsPdf(const char *name, const char *title) :; 236 RooAbsReal(name,title), _normMgr(this,10), _selectComp(true); 237{; 238 resetErrorCounters() ;; 239 setTraceCounter(0) ;; 240}; 241 ; 242 ; 243 ; 244////////////////////////////////////////////////////////////////////////////////; 245/// Constructor with name, title, and plot range; 246 ; 247RooAbsPdf::RooAbsPdf(const char *name, const char *title,; 248 double plotMin, double plotMax) :; 249 RooAbsReal(name,title,plotMin,plotMax), _normMgr(this,10), _selectComp(true); 250{; 251 resetErrorCounters() ;; 252 setTraceCounter(0) ;; 253}; 254 ; 255 ; 256 ; 257////////////////////////////////////////////////////////////////////////////////; 258/// Copy constructor; 259 ; 260RooAbsPdf::RooAbsPdf(const RooAbsPdf& other, const char* name) :; 261 RooAbsReal(other,name),; 262 _normMgr(other._normMgr,this), _selectComp(other._selectComp), _normRange(other._normRange); 263{; 264 resetErrorCounters() ;; 265 setTraceCounter(other._traceCount) ;; 266 ; 267 if (other._specGeneratorConfig)",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:10920,Testability,log,logEvalError,10920,"////////////////////////////////; 258/// Copy constructor; 259 ; 260RooAbsPdf::RooAbsPdf(const RooAbsPdf& other, const char* name) :; 261 RooAbsReal(other,name),; 262 _normMgr(other._normMgr,this), _selectComp(other._selectComp), _normRange(other._normRange); 263{; 264 resetErrorCounters() ;; 265 setTraceCounter(other._traceCount) ;; 266 ; 267 if (other._specGeneratorConfig) {; 268 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*other._specGeneratorConfig);; 269 }; 270}; 271 ; 272 ; 273 ; 274////////////////////////////////////////////////////////////////////////////////; 275/// Destructor; 276 ; 277RooAbsPdf::~RooAbsPdf(); 278{; 279}; 280 ; 281 ; 282double RooAbsPdf::normalizeWithNaNPacking(double rawVal, double normVal) const {; 283 ; 284 if (normVal < 0. || (normVal == 0. && rawVal != 0)) {; 285 //Unreasonable normalisations. A zero integral can be tolerated if the function vanishes, though.; 286 const std::string msg = ""p.d.f normalization integral is zero or negative: "" + std::to_string(normVal);; 287 logEvalError(msg.c_str());; 288 clearValueAndShapeDirty();; 289 return RooNaNPacker::packFloatIntoNaN(-normVal + (rawVal < 0. ? -rawVal : 0.));; 290 }; 291 ; 292 if (rawVal < 0.) {; 293 logEvalError(Form(""p.d.f value is less than zero (%f), trying to recover"", rawVal));; 294 clearValueAndShapeDirty();; 295 return RooNaNPacker::packFloatIntoNaN(-rawVal);; 296 }; 297 ; 298 if (TMath::IsNaN(rawVal)) {; 299 logEvalError(""p.d.f value is Not-a-Number"");; 300 clearValueAndShapeDirty();; 301 return rawVal;; 302 }; 303 ; 304 return (rawVal == 0. && normVal == 0.) ? 0. : rawVal / normVal;; 305}; 306 ; 307 ; 308////////////////////////////////////////////////////////////////////////////////; 309/// Return current value, normalized by integrating over; 310/// the observables in `nset`. If `nset` is 0, the unnormalized value; 311/// is returned. All elements of `nset` must be lvalues.; 312///; 313/// Unnormalized values are not cached.; 314/// Doing so would be compli",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:11106,Testability,log,logEvalError,11106,"omp), _normRange(other._normRange); 263{; 264 resetErrorCounters() ;; 265 setTraceCounter(other._traceCount) ;; 266 ; 267 if (other._specGeneratorConfig) {; 268 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*other._specGeneratorConfig);; 269 }; 270}; 271 ; 272 ; 273 ; 274////////////////////////////////////////////////////////////////////////////////; 275/// Destructor; 276 ; 277RooAbsPdf::~RooAbsPdf(); 278{; 279}; 280 ; 281 ; 282double RooAbsPdf::normalizeWithNaNPacking(double rawVal, double normVal) const {; 283 ; 284 if (normVal < 0. || (normVal == 0. && rawVal != 0)) {; 285 //Unreasonable normalisations. A zero integral can be tolerated if the function vanishes, though.; 286 const std::string msg = ""p.d.f normalization integral is zero or negative: "" + std::to_string(normVal);; 287 logEvalError(msg.c_str());; 288 clearValueAndShapeDirty();; 289 return RooNaNPacker::packFloatIntoNaN(-normVal + (rawVal < 0. ? -rawVal : 0.));; 290 }; 291 ; 292 if (rawVal < 0.) {; 293 logEvalError(Form(""p.d.f value is less than zero (%f), trying to recover"", rawVal));; 294 clearValueAndShapeDirty();; 295 return RooNaNPacker::packFloatIntoNaN(-rawVal);; 296 }; 297 ; 298 if (TMath::IsNaN(rawVal)) {; 299 logEvalError(""p.d.f value is Not-a-Number"");; 300 clearValueAndShapeDirty();; 301 return rawVal;; 302 }; 303 ; 304 return (rawVal == 0. && normVal == 0.) ? 0. : rawVal / normVal;; 305}; 306 ; 307 ; 308////////////////////////////////////////////////////////////////////////////////; 309/// Return current value, normalized by integrating over; 310/// the observables in `nset`. If `nset` is 0, the unnormalized value; 311/// is returned. All elements of `nset` must be lvalues.; 312///; 313/// Unnormalized values are not cached.; 314/// Doing so would be complicated as `_norm->getVal()` could; 315/// spoil the cache and interfere with returning the cached; 316/// return value. Since unnormalized calls are typically; 317/// done in integration calls, there is no performance hit.; ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:11327,Testability,log,logEvalError,11327," (other._specGeneratorConfig) {; 268 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*other._specGeneratorConfig);; 269 }; 270}; 271 ; 272 ; 273 ; 274////////////////////////////////////////////////////////////////////////////////; 275/// Destructor; 276 ; 277RooAbsPdf::~RooAbsPdf(); 278{; 279}; 280 ; 281 ; 282double RooAbsPdf::normalizeWithNaNPacking(double rawVal, double normVal) const {; 283 ; 284 if (normVal < 0. || (normVal == 0. && rawVal != 0)) {; 285 //Unreasonable normalisations. A zero integral can be tolerated if the function vanishes, though.; 286 const std::string msg = ""p.d.f normalization integral is zero or negative: "" + std::to_string(normVal);; 287 logEvalError(msg.c_str());; 288 clearValueAndShapeDirty();; 289 return RooNaNPacker::packFloatIntoNaN(-normVal + (rawVal < 0. ? -rawVal : 0.));; 290 }; 291 ; 292 if (rawVal < 0.) {; 293 logEvalError(Form(""p.d.f value is less than zero (%f), trying to recover"", rawVal));; 294 clearValueAndShapeDirty();; 295 return RooNaNPacker::packFloatIntoNaN(-rawVal);; 296 }; 297 ; 298 if (TMath::IsNaN(rawVal)) {; 299 logEvalError(""p.d.f value is Not-a-Number"");; 300 clearValueAndShapeDirty();; 301 return rawVal;; 302 }; 303 ; 304 return (rawVal == 0. && normVal == 0.) ? 0. : rawVal / normVal;; 305}; 306 ; 307 ; 308////////////////////////////////////////////////////////////////////////////////; 309/// Return current value, normalized by integrating over; 310/// the observables in `nset`. If `nset` is 0, the unnormalized value; 311/// is returned. All elements of `nset` must be lvalues.; 312///; 313/// Unnormalized values are not cached.; 314/// Doing so would be complicated as `_norm->getVal()` could; 315/// spoil the cache and interfere with returning the cached; 316/// return value. Since unnormalized calls are typically; 317/// done in integration calls, there is no performance hit.; 318 ; 319double RooAbsPdf::getValV(const RooArgSet* nset) const; 320{; 321 ; 322 // Special handling of case without normali",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:14502,Testability,log,logEvalError,14502,"ral returned; 361/// by RooAbsReal::analyticalIntegral(). The passthrough scenario (code=0) is also changed; 362/// to return a normalized answer.; 363 ; 364double RooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName) const; 365{; 366 cxcoutD(Eval) << ""RooAbsPdf::analyticalIntegralWN("" << GetName() << "") code = "" << code << "" normset = "" << (normSet?*normSet:RooArgSet()) << endl ;; 367 ; 368 ; 369 if (code==0) return getVal(normSet) ;; 370 if (normSet) {; 371 return analyticalIntegral(code,rangeName) / getNorm(normSet) ;; 372 } else {; 373 return analyticalIntegral(code,rangeName) ;; 374 }; 375}; 376 ; 377 ; 378 ; 379////////////////////////////////////////////////////////////////////////////////; 380/// Check that passed value is positive and not 'not-a-number'. If; 381/// not, print an error, until the error counter reaches its set; 382/// maximum.; 383 ; 384bool RooAbsPdf::traceEvalPdf(double value) const; 385{; 386 // check for a math error or negative value; 387 bool error(false) ;; 388 if (TMath::IsNaN(value)) {; 389 logEvalError(Form(""p.d.f value is Not-a-Number (%f), forcing value to zero"",value)) ;; 390 error=true ;; 391 }; 392 if (value<0) {; 393 logEvalError(Form(""p.d.f value is less than zero (%f), forcing value to zero"",value)) ;; 394 error=true ;; 395 }; 396 ; 397 // do nothing if we are no longer tracing evaluations and there was no error; 398 if(!error) return error ;; 399 ; 400 // otherwise, print out this evaluations input values and result; 401 if(++_errorCount <= 10) {; 402 cxcoutD(Tracing) << ""*** Evaluation Error "" << _errorCount << "" "";; 403 if(_errorCount == 10) cxcoutD(Tracing) << ""(no more will be printed) "";; 404 }; 405 else {; 406 return error ;; 407 }; 408 ; 409 Print() ;; 410 return error ;; 411}; 412 ; 413 ; 414////////////////////////////////////////////////////////////////////////////////; 415/// Get normalisation term needed to normalise the raw values returned by; 416/// getVal(). Note that `g",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:14638,Testability,log,logEvalError,14638,"bsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName) const; 365{; 366 cxcoutD(Eval) << ""RooAbsPdf::analyticalIntegralWN("" << GetName() << "") code = "" << code << "" normset = "" << (normSet?*normSet:RooArgSet()) << endl ;; 367 ; 368 ; 369 if (code==0) return getVal(normSet) ;; 370 if (normSet) {; 371 return analyticalIntegral(code,rangeName) / getNorm(normSet) ;; 372 } else {; 373 return analyticalIntegral(code,rangeName) ;; 374 }; 375}; 376 ; 377 ; 378 ; 379////////////////////////////////////////////////////////////////////////////////; 380/// Check that passed value is positive and not 'not-a-number'. If; 381/// not, print an error, until the error counter reaches its set; 382/// maximum.; 383 ; 384bool RooAbsPdf::traceEvalPdf(double value) const; 385{; 386 // check for a math error or negative value; 387 bool error(false) ;; 388 if (TMath::IsNaN(value)) {; 389 logEvalError(Form(""p.d.f value is Not-a-Number (%f), forcing value to zero"",value)) ;; 390 error=true ;; 391 }; 392 if (value<0) {; 393 logEvalError(Form(""p.d.f value is less than zero (%f), forcing value to zero"",value)) ;; 394 error=true ;; 395 }; 396 ; 397 // do nothing if we are no longer tracing evaluations and there was no error; 398 if(!error) return error ;; 399 ; 400 // otherwise, print out this evaluations input values and result; 401 if(++_errorCount <= 10) {; 402 cxcoutD(Tracing) << ""*** Evaluation Error "" << _errorCount << "" "";; 403 if(_errorCount == 10) cxcoutD(Tracing) << ""(no more will be printed) "";; 404 }; 405 else {; 406 return error ;; 407 }; 408 ; 409 Print() ;; 410 return error ;; 411}; 412 ; 413 ; 414////////////////////////////////////////////////////////////////////////////////; 415/// Get normalisation term needed to normalise the raw values returned by; 416/// getVal(). Note that `getVal(normalisationVariables)` will automatically; 417/// apply the normalisation term returned here.; 418/// \param nset Set of variables to normalise over.; 419double",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:23479,Testability,log,log,23479,"cachedIntegral->setCacheSource(true) ;; 561 if (normInt->operMode()==ADirty) {; 562 cachedIntegral->setOperMode(ADirty) ;; 563 }; 564 normInt= cachedIntegral ;; 565 }; 566 ; 567 }; 568 _norm = normInt ;; 569 }; 570 ; 571 // Register new normalization with manager (takes ownership); 572 cache = new CacheElem(*_norm) ;; 573 _normMgr.setObj(nset,cache) ;; 574 ; 575// cout << ""making new object "" << _norm->GetName() << endl ;; 576 ; 577 return true ;; 578}; 579 ; 580 ; 581 ; 582////////////////////////////////////////////////////////////////////////////////; 583/// Reset error counter to given value, limiting the number; 584/// of future error messages for this pdf to 'resetValue'; 585 ; 586void RooAbsPdf::resetErrorCounters(Int_t resetValue); 587{; 588 _errorCount = resetValue ;; 589 _negCount = resetValue ;; 590}; 591 ; 592 ; 593 ; 594////////////////////////////////////////////////////////////////////////////////; 595/// Reset trace counter to given value, limiting the; 596/// number of future trace messages for this pdf to 'value'; 597 ; 598void RooAbsPdf::setTraceCounter(Int_t value, bool allNodes); 599{; 600 if (!allNodes) {; 601 _traceCount = value ;; 602 return ;; 603 } else {; 604 RooArgList branchList ;; 605 branchNodeServerList(&branchList) ;; 606 for(auto * pdf : dynamic_range_cast<RooAbsPdf*>(branchList)) {; 607 if (pdf) pdf->setTraceCounter(value,false) ;; 608 }; 609 }; 610 ; 611}; 612 ; 613 ; 614 ; 615 ; 616////////////////////////////////////////////////////////////////////////////////; 617/// Return the log of the current value with given normalization; 618/// An error message is printed if the argument of the log is negative.; 619 ; 620double RooAbsPdf::getLogVal(const RooArgSet* nset) const; 621{; 622 return getLog(getVal(nset), this);; 623}; 624 ; 625 ; 626////////////////////////////////////////////////////////////////////////////////; 627/// Check for infinity or NaN.; 628/// \param[in] inputs Array to check; 629/// \return True if either infinity ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:23588,Testability,log,log,23588,"cachedIntegral->setCacheSource(true) ;; 561 if (normInt->operMode()==ADirty) {; 562 cachedIntegral->setOperMode(ADirty) ;; 563 }; 564 normInt= cachedIntegral ;; 565 }; 566 ; 567 }; 568 _norm = normInt ;; 569 }; 570 ; 571 // Register new normalization with manager (takes ownership); 572 cache = new CacheElem(*_norm) ;; 573 _normMgr.setObj(nset,cache) ;; 574 ; 575// cout << ""making new object "" << _norm->GetName() << endl ;; 576 ; 577 return true ;; 578}; 579 ; 580 ; 581 ; 582////////////////////////////////////////////////////////////////////////////////; 583/// Reset error counter to given value, limiting the number; 584/// of future error messages for this pdf to 'resetValue'; 585 ; 586void RooAbsPdf::resetErrorCounters(Int_t resetValue); 587{; 588 _errorCount = resetValue ;; 589 _negCount = resetValue ;; 590}; 591 ; 592 ; 593 ; 594////////////////////////////////////////////////////////////////////////////////; 595/// Reset trace counter to given value, limiting the; 596/// number of future trace messages for this pdf to 'value'; 597 ; 598void RooAbsPdf::setTraceCounter(Int_t value, bool allNodes); 599{; 600 if (!allNodes) {; 601 _traceCount = value ;; 602 return ;; 603 } else {; 604 RooArgList branchList ;; 605 branchNodeServerList(&branchList) ;; 606 for(auto * pdf : dynamic_range_cast<RooAbsPdf*>(branchList)) {; 607 if (pdf) pdf->setTraceCounter(value,false) ;; 608 }; 609 }; 610 ; 611}; 612 ; 613 ; 614 ; 615 ; 616////////////////////////////////////////////////////////////////////////////////; 617/// Return the log of the current value with given normalization; 618/// An error message is printed if the argument of the log is negative.; 619 ; 620double RooAbsPdf::getLogVal(const RooArgSet* nset) const; 621{; 622 return getLog(getVal(nset), this);; 623}; 624 ; 625 ; 626////////////////////////////////////////////////////////////////////////////////; 627/// Check for infinity or NaN.; 628/// \param[in] inputs Array to check; 629/// \return True if either infinity ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:24518,Testability,log,log,24518,"sPdf*>(branchList)) {; 607 if (pdf) pdf->setTraceCounter(value,false) ;; 608 }; 609 }; 610 ; 611}; 612 ; 613 ; 614 ; 615 ; 616////////////////////////////////////////////////////////////////////////////////; 617/// Return the log of the current value with given normalization; 618/// An error message is printed if the argument of the log is negative.; 619 ; 620double RooAbsPdf::getLogVal(const RooArgSet* nset) const; 621{; 622 return getLog(getVal(nset), this);; 623}; 624 ; 625 ; 626////////////////////////////////////////////////////////////////////////////////; 627/// Check for infinity or NaN.; 628/// \param[in] inputs Array to check; 629/// \return True if either infinity or NaN were found.; 630namespace {; 631template<class T>; 632bool checkInfNaNNeg(const T& inputs) {; 633 // check for a math error or negative value; 634 bool inf = false;; 635 bool nan = false;; 636 bool neg = false;; 637 ; 638 for (double val : inputs) { //CHECK_VECTORISE; 639 inf |= !std::isfinite(val);; 640 nan |= TMath::IsNaN(val); // Works also during fast math; 641 neg |= val < 0;; 642 }; 643 ; 644 return inf || nan || neg;; 645}; 646}; 647 ; 648 ; 649////////////////////////////////////////////////////////////////////////////////; 650/// Scan through outputs and fix+log all nans and negative values.; 651/// \param[in,out] outputs Array to be scanned & fixed.; 652/// \param[in] begin Begin of event range. Only needed to print the correct event number; 653/// where the error occurred.; 654void RooAbsPdf::logBatchComputationErrors(std::span<const double>& outputs, std::size_t begin) const {; 655 for (unsigned int i=0; i<outputs.size(); ++i) {; 656 const double value = outputs[i];; 657 if (TMath::IsNaN(outputs[i])) {; 658 logEvalError(Form(""p.d.f value of (%s) is Not-a-Number (%f) for entry %zu"",; 659 GetName(), value, begin+i));; 660 } else if (!std::isfinite(outputs[i])){; 661 logEvalError(Form(""p.d.f value of (%s) is (%f) for entry %zu"",; 662 GetName(), value, begin+i));; 663 } else if (o",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:24759,Testability,log,logBatchComputationErrors,24759,"/////////; 627/// Check for infinity or NaN.; 628/// \param[in] inputs Array to check; 629/// \return True if either infinity or NaN were found.; 630namespace {; 631template<class T>; 632bool checkInfNaNNeg(const T& inputs) {; 633 // check for a math error or negative value; 634 bool inf = false;; 635 bool nan = false;; 636 bool neg = false;; 637 ; 638 for (double val : inputs) { //CHECK_VECTORISE; 639 inf |= !std::isfinite(val);; 640 nan |= TMath::IsNaN(val); // Works also during fast math; 641 neg |= val < 0;; 642 }; 643 ; 644 return inf || nan || neg;; 645}; 646}; 647 ; 648 ; 649////////////////////////////////////////////////////////////////////////////////; 650/// Scan through outputs and fix+log all nans and negative values.; 651/// \param[in,out] outputs Array to be scanned & fixed.; 652/// \param[in] begin Begin of event range. Only needed to print the correct event number; 653/// where the error occurred.; 654void RooAbsPdf::logBatchComputationErrors(std::span<const double>& outputs, std::size_t begin) const {; 655 for (unsigned int i=0; i<outputs.size(); ++i) {; 656 const double value = outputs[i];; 657 if (TMath::IsNaN(outputs[i])) {; 658 logEvalError(Form(""p.d.f value of (%s) is Not-a-Number (%f) for entry %zu"",; 659 GetName(), value, begin+i));; 660 } else if (!std::isfinite(outputs[i])){; 661 logEvalError(Form(""p.d.f value of (%s) is (%f) for entry %zu"",; 662 GetName(), value, begin+i));; 663 } else if (outputs[i] < 0.) {; 664 logEvalError(Form(""p.d.f value of (%s) is less than zero (%f) for entry %zu"",; 665 GetName(), value, begin+i));; 666 }; 667 }; 668}; 669 ; 670 ; 671void RooAbsPdf::getLogProbabilities(std::span<const double> pdfValues, double * output) const {; 672 for (std::size_t i = 0; i < pdfValues.size(); ++i) {; 673 output[i] = getLog(pdfValues[i], this);; 674 }; 675}; 676 ; 677////////////////////////////////////////////////////////////////////////////////; 678/// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{obser",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:24979,Testability,log,logEvalError,24979,"N were found.; 630namespace {; 631template<class T>; 632bool checkInfNaNNeg(const T& inputs) {; 633 // check for a math error or negative value; 634 bool inf = false;; 635 bool nan = false;; 636 bool neg = false;; 637 ; 638 for (double val : inputs) { //CHECK_VECTORISE; 639 inf |= !std::isfinite(val);; 640 nan |= TMath::IsNaN(val); // Works also during fast math; 641 neg |= val < 0;; 642 }; 643 ; 644 return inf || nan || neg;; 645}; 646}; 647 ; 648 ; 649////////////////////////////////////////////////////////////////////////////////; 650/// Scan through outputs and fix+log all nans and negative values.; 651/// \param[in,out] outputs Array to be scanned & fixed.; 652/// \param[in] begin Begin of event range. Only needed to print the correct event number; 653/// where the error occurred.; 654void RooAbsPdf::logBatchComputationErrors(std::span<const double>& outputs, std::size_t begin) const {; 655 for (unsigned int i=0; i<outputs.size(); ++i) {; 656 const double value = outputs[i];; 657 if (TMath::IsNaN(outputs[i])) {; 658 logEvalError(Form(""p.d.f value of (%s) is Not-a-Number (%f) for entry %zu"",; 659 GetName(), value, begin+i));; 660 } else if (!std::isfinite(outputs[i])){; 661 logEvalError(Form(""p.d.f value of (%s) is (%f) for entry %zu"",; 662 GetName(), value, begin+i));; 663 } else if (outputs[i] < 0.) {; 664 logEvalError(Form(""p.d.f value of (%s) is less than zero (%f) for entry %zu"",; 665 GetName(), value, begin+i));; 666 }; 667 }; 668}; 669 ; 670 ; 671void RooAbsPdf::getLogProbabilities(std::span<const double> pdfValues, double * output) const {; 672 for (std::size_t i = 0; i < pdfValues.size(); ++i) {; 673 output[i] = getLog(pdfValues[i], this);; 674 }; 675}; 676 ; 677////////////////////////////////////////////////////////////////////////////////; 678/// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); 679/// of this PDF for the given number of observed events.; 680///; 681/// For successful ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:25139,Testability,log,logEvalError,25139,"alue; 634 bool inf = false;; 635 bool nan = false;; 636 bool neg = false;; 637 ; 638 for (double val : inputs) { //CHECK_VECTORISE; 639 inf |= !std::isfinite(val);; 640 nan |= TMath::IsNaN(val); // Works also during fast math; 641 neg |= val < 0;; 642 }; 643 ; 644 return inf || nan || neg;; 645}; 646}; 647 ; 648 ; 649////////////////////////////////////////////////////////////////////////////////; 650/// Scan through outputs and fix+log all nans and negative values.; 651/// \param[in,out] outputs Array to be scanned & fixed.; 652/// \param[in] begin Begin of event range. Only needed to print the correct event number; 653/// where the error occurred.; 654void RooAbsPdf::logBatchComputationErrors(std::span<const double>& outputs, std::size_t begin) const {; 655 for (unsigned int i=0; i<outputs.size(); ++i) {; 656 const double value = outputs[i];; 657 if (TMath::IsNaN(outputs[i])) {; 658 logEvalError(Form(""p.d.f value of (%s) is Not-a-Number (%f) for entry %zu"",; 659 GetName(), value, begin+i));; 660 } else if (!std::isfinite(outputs[i])){; 661 logEvalError(Form(""p.d.f value of (%s) is (%f) for entry %zu"",; 662 GetName(), value, begin+i));; 663 } else if (outputs[i] < 0.) {; 664 logEvalError(Form(""p.d.f value of (%s) is less than zero (%f) for entry %zu"",; 665 GetName(), value, begin+i));; 666 }; 667 }; 668}; 669 ; 670 ; 671void RooAbsPdf::getLogProbabilities(std::span<const double> pdfValues, double * output) const {; 672 for (std::size_t i = 0; i < pdfValues.size(); ++i) {; 673 output[i] = getLog(pdfValues[i], this);; 674 }; 675}; 676 ; 677////////////////////////////////////////////////////////////////////////////////; 678/// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); 679/// of this PDF for the given number of observed events.; 680///; 681/// For successful operation, the PDF implementation must indicate that; 682/// it is extendable by overloading `canBeExtended()`, and must; 683/// implement ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:25276,Testability,log,logEvalError,25276,"ks also during fast math; 641 neg |= val < 0;; 642 }; 643 ; 644 return inf || nan || neg;; 645}; 646}; 647 ; 648 ; 649////////////////////////////////////////////////////////////////////////////////; 650/// Scan through outputs and fix+log all nans and negative values.; 651/// \param[in,out] outputs Array to be scanned & fixed.; 652/// \param[in] begin Begin of event range. Only needed to print the correct event number; 653/// where the error occurred.; 654void RooAbsPdf::logBatchComputationErrors(std::span<const double>& outputs, std::size_t begin) const {; 655 for (unsigned int i=0; i<outputs.size(); ++i) {; 656 const double value = outputs[i];; 657 if (TMath::IsNaN(outputs[i])) {; 658 logEvalError(Form(""p.d.f value of (%s) is Not-a-Number (%f) for entry %zu"",; 659 GetName(), value, begin+i));; 660 } else if (!std::isfinite(outputs[i])){; 661 logEvalError(Form(""p.d.f value of (%s) is (%f) for entry %zu"",; 662 GetName(), value, begin+i));; 663 } else if (outputs[i] < 0.) {; 664 logEvalError(Form(""p.d.f value of (%s) is less than zero (%f) for entry %zu"",; 665 GetName(), value, begin+i));; 666 }; 667 }; 668}; 669 ; 670 ; 671void RooAbsPdf::getLogProbabilities(std::span<const double> pdfValues, double * output) const {; 672 for (std::size_t i = 0; i < pdfValues.size(); ++i) {; 673 output[i] = getLog(pdfValues[i], this);; 674 }; 675}; 676 ; 677////////////////////////////////////////////////////////////////////////////////; 678/// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); 679/// of this PDF for the given number of observed events.; 680///; 681/// For successful operation, the PDF implementation must indicate that; 682/// it is extendable by overloading `canBeExtended()`, and must; 683/// implement the `expectedEvents()` function.; 684///; 685/// \param[in] sumEntries The number of observed events.; 686/// \param[in] nset The normalization set when asking the pdf for the expected; 687/// number o",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:25823,Testability,log,log,25823,"d.; 654void RooAbsPdf::logBatchComputationErrors(std::span<const double>& outputs, std::size_t begin) const {; 655 for (unsigned int i=0; i<outputs.size(); ++i) {; 656 const double value = outputs[i];; 657 if (TMath::IsNaN(outputs[i])) {; 658 logEvalError(Form(""p.d.f value of (%s) is Not-a-Number (%f) for entry %zu"",; 659 GetName(), value, begin+i));; 660 } else if (!std::isfinite(outputs[i])){; 661 logEvalError(Form(""p.d.f value of (%s) is (%f) for entry %zu"",; 662 GetName(), value, begin+i));; 663 } else if (outputs[i] < 0.) {; 664 logEvalError(Form(""p.d.f value of (%s) is less than zero (%f) for entry %zu"",; 665 GetName(), value, begin+i));; 666 }; 667 }; 668}; 669 ; 670 ; 671void RooAbsPdf::getLogProbabilities(std::span<const double> pdfValues, double * output) const {; 672 for (std::size_t i = 0; i < pdfValues.size(); ++i) {; 673 output[i] = getLog(pdfValues[i], this);; 674 }; 675}; 676 ; 677////////////////////////////////////////////////////////////////////////////////; 678/// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); 679/// of this PDF for the given number of observed events.; 680///; 681/// For successful operation, the PDF implementation must indicate that; 682/// it is extendable by overloading `canBeExtended()`, and must; 683/// implement the `expectedEvents()` function.; 684///; 685/// \param[in] sumEntries The number of observed events.; 686/// \param[in] nset The normalization set when asking the pdf for the expected; 687/// number of events.; 688/// \param[in] observedSumW2 The number of observed events when weighting with; 689/// squared weights. If non-zero, the weight-squared error; 690/// correction is applied to the extended term.; 691/// \param[in] doOffset Offset the extended term by a counterterm where the; 692/// expected number of events equals the observed number of events.; 693/// This constant shift results in a term closer to zero that is; 694/// approximately chi-",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:28263,Testability,log,log,28263,"/// both the observed and expected count of the Poisson with a factor \f$ \sum w_{i} / \sum w_{i}^2 \f$; 703/// (the effective weight of the Poisson term),; 704/// i.e., change \f$\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\f$; 705/// to \f$ \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \f$,; 706/// weighted by the effective weight \f$ \sum w_{i}^2 / \sum w_{i} \f$ in the likelihood.; 707/// Since here we compute the likelihood with the weight square, we need to multiply by the; 708/// square of the effective weight:; 709/// - \f$ W_\mathrm{expect} = N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 \f$ : effective expected entries; 710/// - \f$ W_\mathrm{observed} = \sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 \f$ : effective observed entries; 711///; 712/// The extended term for the likelihood weighted by the square of the weight will be then:; 713///; 714/// \f$ \left(\sum w_{i}^2 / \sum w_{i}\right)^2 \cdot W_\mathrm{expect} - (\sum w_{i}^2 / \sum w_{i})^2 \cdot W_\mathrm{observed} \cdot \log{W_\mathrm{expect}} \f$; 715///; 716/// aund this is using the previous expressions for \f$ W_\mathrm{expect} \f$ and \f$ W_\mathrm{observed} \f$:; 717///; 718/// \f$ \sum w_{i}^2 / \sum w_{i} \cdot N_\mathrm{expect} - \sum w_{i}^2 \cdot \log{W_\mathrm{expect}} \f$; 719///; 720/// Since the weights are constants in the likelihood we can use \f$\log{N_\mathrm{expect}}\f$ instead of \f$\log{W_\mathrm{expect}}\f$.; 721///; 722/// See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset),; 723/// which takes a dataset to extract \f$N_\mathrm{observed}\f$ and the; 724/// normalization set.; 725double RooAbsPdf::extendedTerm(double sumEntries, RooArgSet const* nset, double sumEntriesW2, bool doOffset) const; 726{; 727 return extendedTerm(sumEntries, expectedEvents(nset), sumEntriesW2, doOffset);; 728}; 729 ; 730double RooAbsPdf::extendedTerm(double sumEntr",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:28505,Testability,log,log,28505,"/// both the observed and expected count of the Poisson with a factor \f$ \sum w_{i} / \sum w_{i}^2 \f$; 703/// (the effective weight of the Poisson term),; 704/// i.e., change \f$\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\f$; 705/// to \f$ \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \f$,; 706/// weighted by the effective weight \f$ \sum w_{i}^2 / \sum w_{i} \f$ in the likelihood.; 707/// Since here we compute the likelihood with the weight square, we need to multiply by the; 708/// square of the effective weight:; 709/// - \f$ W_\mathrm{expect} = N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 \f$ : effective expected entries; 710/// - \f$ W_\mathrm{observed} = \sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 \f$ : effective observed entries; 711///; 712/// The extended term for the likelihood weighted by the square of the weight will be then:; 713///; 714/// \f$ \left(\sum w_{i}^2 / \sum w_{i}\right)^2 \cdot W_\mathrm{expect} - (\sum w_{i}^2 / \sum w_{i})^2 \cdot W_\mathrm{observed} \cdot \log{W_\mathrm{expect}} \f$; 715///; 716/// aund this is using the previous expressions for \f$ W_\mathrm{expect} \f$ and \f$ W_\mathrm{observed} \f$:; 717///; 718/// \f$ \sum w_{i}^2 / \sum w_{i} \cdot N_\mathrm{expect} - \sum w_{i}^2 \cdot \log{W_\mathrm{expect}} \f$; 719///; 720/// Since the weights are constants in the likelihood we can use \f$\log{N_\mathrm{expect}}\f$ instead of \f$\log{W_\mathrm{expect}}\f$.; 721///; 722/// See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset),; 723/// which takes a dataset to extract \f$N_\mathrm{observed}\f$ and the; 724/// normalization set.; 725double RooAbsPdf::extendedTerm(double sumEntries, RooArgSet const* nset, double sumEntriesW2, bool doOffset) const; 726{; 727 return extendedTerm(sumEntries, expectedEvents(nset), sumEntriesW2, doOffset);; 728}; 729 ; 730double RooAbsPdf::extendedTerm(double sumEntr",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:28613,Testability,log,log,28613,"/// both the observed and expected count of the Poisson with a factor \f$ \sum w_{i} / \sum w_{i}^2 \f$; 703/// (the effective weight of the Poisson term),; 704/// i.e., change \f$\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\f$; 705/// to \f$ \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \f$,; 706/// weighted by the effective weight \f$ \sum w_{i}^2 / \sum w_{i} \f$ in the likelihood.; 707/// Since here we compute the likelihood with the weight square, we need to multiply by the; 708/// square of the effective weight:; 709/// - \f$ W_\mathrm{expect} = N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 \f$ : effective expected entries; 710/// - \f$ W_\mathrm{observed} = \sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 \f$ : effective observed entries; 711///; 712/// The extended term for the likelihood weighted by the square of the weight will be then:; 713///; 714/// \f$ \left(\sum w_{i}^2 / \sum w_{i}\right)^2 \cdot W_\mathrm{expect} - (\sum w_{i}^2 / \sum w_{i})^2 \cdot W_\mathrm{observed} \cdot \log{W_\mathrm{expect}} \f$; 715///; 716/// aund this is using the previous expressions for \f$ W_\mathrm{expect} \f$ and \f$ W_\mathrm{observed} \f$:; 717///; 718/// \f$ \sum w_{i}^2 / \sum w_{i} \cdot N_\mathrm{expect} - \sum w_{i}^2 \cdot \log{W_\mathrm{expect}} \f$; 719///; 720/// Since the weights are constants in the likelihood we can use \f$\log{N_\mathrm{expect}}\f$ instead of \f$\log{W_\mathrm{expect}}\f$.; 721///; 722/// See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset),; 723/// which takes a dataset to extract \f$N_\mathrm{observed}\f$ and the; 724/// normalization set.; 725double RooAbsPdf::extendedTerm(double sumEntries, RooArgSet const* nset, double sumEntriesW2, bool doOffset) const; 726{; 727 return extendedTerm(sumEntries, expectedEvents(nset), sumEntriesW2, doOffset);; 728}; 729 ; 730double RooAbsPdf::extendedTerm(double sumEntr",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:28654,Testability,log,log,28654,"/// both the observed and expected count of the Poisson with a factor \f$ \sum w_{i} / \sum w_{i}^2 \f$; 703/// (the effective weight of the Poisson term),; 704/// i.e., change \f$\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\f$; 705/// to \f$ \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \f$,; 706/// weighted by the effective weight \f$ \sum w_{i}^2 / \sum w_{i} \f$ in the likelihood.; 707/// Since here we compute the likelihood with the weight square, we need to multiply by the; 708/// square of the effective weight:; 709/// - \f$ W_\mathrm{expect} = N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 \f$ : effective expected entries; 710/// - \f$ W_\mathrm{observed} = \sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 \f$ : effective observed entries; 711///; 712/// The extended term for the likelihood weighted by the square of the weight will be then:; 713///; 714/// \f$ \left(\sum w_{i}^2 / \sum w_{i}\right)^2 \cdot W_\mathrm{expect} - (\sum w_{i}^2 / \sum w_{i})^2 \cdot W_\mathrm{observed} \cdot \log{W_\mathrm{expect}} \f$; 715///; 716/// aund this is using the previous expressions for \f$ W_\mathrm{expect} \f$ and \f$ W_\mathrm{observed} \f$:; 717///; 718/// \f$ \sum w_{i}^2 / \sum w_{i} \cdot N_\mathrm{expect} - \sum w_{i}^2 \cdot \log{W_\mathrm{expect}} \f$; 719///; 720/// Since the weights are constants in the likelihood we can use \f$\log{N_\mathrm{expect}}\f$ instead of \f$\log{W_\mathrm{expect}}\f$.; 721///; 722/// See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset),; 723/// which takes a dataset to extract \f$N_\mathrm{observed}\f$ and the; 724/// normalization set.; 725double RooAbsPdf::extendedTerm(double sumEntries, RooArgSet const* nset, double sumEntriesW2, bool doOffset) const; 726{; 727 return extendedTerm(sumEntries, expectedEvents(nset), sumEntriesW2, doOffset);; 728}; 729 ; 730double RooAbsPdf::extendedTerm(double sumEntr",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:29625,Testability,log,logEvalError,29625,"721///; 722/// See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset),; 723/// which takes a dataset to extract \f$N_\mathrm{observed}\f$ and the; 724/// normalization set.; 725double RooAbsPdf::extendedTerm(double sumEntries, RooArgSet const* nset, double sumEntriesW2, bool doOffset) const; 726{; 727 return extendedTerm(sumEntries, expectedEvents(nset), sumEntriesW2, doOffset);; 728}; 729 ; 730double RooAbsPdf::extendedTerm(double sumEntries, double expected, double sumEntriesW2, bool doOffset) const; 731{; 732 // check if this PDF supports extended maximum likelihood fits; 733 if(!canBeExtended()) {; 734 coutE(InputArguments) << GetName() << "": this PDF does not support extended maximum likelihood""; 735 << std::endl;; 736 return 0.0;; 737 }; 738 ; 739 if(expected < 0.0) {; 740 coutE(InputArguments) << GetName() << "": calculated negative expected events: "" << expected; 741 << std::endl;; 742 logEvalError(""extendedTerm #expected events is <0 return a NaN"");; 743 return TMath::QuietNaN();; 744 }; 745 ; 746 ; 747 // Explicitly handle case Nobs=Nexp=0; 748 if (std::abs(expected)<1e-10 && std::abs(sumEntries)<1e-10) {; 749 return 0.0;; 750 }; 751 ; 752 // Check for errors in Nexpected; 753 if (TMath::IsNaN(expected)) {; 754 logEvalError(""extendedTerm #expected events is a NaN"") ;; 755 return TMath::QuietNaN() ;; 756 }; 757 ; 758 double extra = doOffset; 759 ? (expected - sumEntries) - sumEntries * (std::log(expected) - std::log(sumEntries)); 760 : expected - sumEntries * std::log(expected);; 761 ; 762 if(sumEntriesW2 != 0.0) {; 763 extra *= sumEntriesW2 / sumEntries;; 764 }; 765 ; 766 return extra;; 767}; 768 ; 769////////////////////////////////////////////////////////////////////////////////; 770/// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); 771/// of this PDF for the given number of observed events.; 772///; 773/// This function is a wrapper around; 774/// Ro",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:29959,Testability,log,logEvalError,29959,"ents(nset), sumEntriesW2, doOffset);; 728}; 729 ; 730double RooAbsPdf::extendedTerm(double sumEntries, double expected, double sumEntriesW2, bool doOffset) const; 731{; 732 // check if this PDF supports extended maximum likelihood fits; 733 if(!canBeExtended()) {; 734 coutE(InputArguments) << GetName() << "": this PDF does not support extended maximum likelihood""; 735 << std::endl;; 736 return 0.0;; 737 }; 738 ; 739 if(expected < 0.0) {; 740 coutE(InputArguments) << GetName() << "": calculated negative expected events: "" << expected; 741 << std::endl;; 742 logEvalError(""extendedTerm #expected events is <0 return a NaN"");; 743 return TMath::QuietNaN();; 744 }; 745 ; 746 ; 747 // Explicitly handle case Nobs=Nexp=0; 748 if (std::abs(expected)<1e-10 && std::abs(sumEntries)<1e-10) {; 749 return 0.0;; 750 }; 751 ; 752 // Check for errors in Nexpected; 753 if (TMath::IsNaN(expected)) {; 754 logEvalError(""extendedTerm #expected events is a NaN"") ;; 755 return TMath::QuietNaN() ;; 756 }; 757 ; 758 double extra = doOffset; 759 ? (expected - sumEntries) - sumEntries * (std::log(expected) - std::log(sumEntries)); 760 : expected - sumEntries * std::log(expected);; 761 ; 762 if(sumEntriesW2 != 0.0) {; 763 extra *= sumEntriesW2 / sumEntries;; 764 }; 765 ; 766 return extra;; 767}; 768 ; 769////////////////////////////////////////////////////////////////////////////////; 770/// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); 771/// of this PDF for the given number of observed events.; 772///; 773/// This function is a wrapper around; 774/// RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const,; 775/// where the number of observed events and observables to be used as the; 776/// normalization set for the pdf is extracted from a RooAbsData.; 777///; 778/// For successful operation, the PDF implementation must indicate that; 779/// it is extendable by overloading `canBeExtended()`, and must; 780/// impl",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:30142,Testability,log,log,30142,"ents(nset), sumEntriesW2, doOffset);; 728}; 729 ; 730double RooAbsPdf::extendedTerm(double sumEntries, double expected, double sumEntriesW2, bool doOffset) const; 731{; 732 // check if this PDF supports extended maximum likelihood fits; 733 if(!canBeExtended()) {; 734 coutE(InputArguments) << GetName() << "": this PDF does not support extended maximum likelihood""; 735 << std::endl;; 736 return 0.0;; 737 }; 738 ; 739 if(expected < 0.0) {; 740 coutE(InputArguments) << GetName() << "": calculated negative expected events: "" << expected; 741 << std::endl;; 742 logEvalError(""extendedTerm #expected events is <0 return a NaN"");; 743 return TMath::QuietNaN();; 744 }; 745 ; 746 ; 747 // Explicitly handle case Nobs=Nexp=0; 748 if (std::abs(expected)<1e-10 && std::abs(sumEntries)<1e-10) {; 749 return 0.0;; 750 }; 751 ; 752 // Check for errors in Nexpected; 753 if (TMath::IsNaN(expected)) {; 754 logEvalError(""extendedTerm #expected events is a NaN"") ;; 755 return TMath::QuietNaN() ;; 756 }; 757 ; 758 double extra = doOffset; 759 ? (expected - sumEntries) - sumEntries * (std::log(expected) - std::log(sumEntries)); 760 : expected - sumEntries * std::log(expected);; 761 ; 762 if(sumEntriesW2 != 0.0) {; 763 extra *= sumEntriesW2 / sumEntries;; 764 }; 765 ; 766 return extra;; 767}; 768 ; 769////////////////////////////////////////////////////////////////////////////////; 770/// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); 771/// of this PDF for the given number of observed events.; 772///; 773/// This function is a wrapper around; 774/// RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const,; 775/// where the number of observed events and observables to be used as the; 776/// normalization set for the pdf is extracted from a RooAbsData.; 777///; 778/// For successful operation, the PDF implementation must indicate that; 779/// it is extendable by overloading `canBeExtended()`, and must; 780/// impl",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:30163,Testability,log,log,30163,"ents(nset), sumEntriesW2, doOffset);; 728}; 729 ; 730double RooAbsPdf::extendedTerm(double sumEntries, double expected, double sumEntriesW2, bool doOffset) const; 731{; 732 // check if this PDF supports extended maximum likelihood fits; 733 if(!canBeExtended()) {; 734 coutE(InputArguments) << GetName() << "": this PDF does not support extended maximum likelihood""; 735 << std::endl;; 736 return 0.0;; 737 }; 738 ; 739 if(expected < 0.0) {; 740 coutE(InputArguments) << GetName() << "": calculated negative expected events: "" << expected; 741 << std::endl;; 742 logEvalError(""extendedTerm #expected events is <0 return a NaN"");; 743 return TMath::QuietNaN();; 744 }; 745 ; 746 ; 747 // Explicitly handle case Nobs=Nexp=0; 748 if (std::abs(expected)<1e-10 && std::abs(sumEntries)<1e-10) {; 749 return 0.0;; 750 }; 751 ; 752 // Check for errors in Nexpected; 753 if (TMath::IsNaN(expected)) {; 754 logEvalError(""extendedTerm #expected events is a NaN"") ;; 755 return TMath::QuietNaN() ;; 756 }; 757 ; 758 double extra = doOffset; 759 ? (expected - sumEntries) - sumEntries * (std::log(expected) - std::log(sumEntries)); 760 : expected - sumEntries * std::log(expected);; 761 ; 762 if(sumEntriesW2 != 0.0) {; 763 extra *= sumEntriesW2 / sumEntries;; 764 }; 765 ; 766 return extra;; 767}; 768 ; 769////////////////////////////////////////////////////////////////////////////////; 770/// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); 771/// of this PDF for the given number of observed events.; 772///; 773/// This function is a wrapper around; 774/// RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const,; 775/// where the number of observed events and observables to be used as the; 776/// normalization set for the pdf is extracted from a RooAbsData.; 777///; 778/// For successful operation, the PDF implementation must indicate that; 779/// it is extendable by overloading `canBeExtended()`, and must; 780/// impl",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:30216,Testability,log,log,30216,"ents(nset), sumEntriesW2, doOffset);; 728}; 729 ; 730double RooAbsPdf::extendedTerm(double sumEntries, double expected, double sumEntriesW2, bool doOffset) const; 731{; 732 // check if this PDF supports extended maximum likelihood fits; 733 if(!canBeExtended()) {; 734 coutE(InputArguments) << GetName() << "": this PDF does not support extended maximum likelihood""; 735 << std::endl;; 736 return 0.0;; 737 }; 738 ; 739 if(expected < 0.0) {; 740 coutE(InputArguments) << GetName() << "": calculated negative expected events: "" << expected; 741 << std::endl;; 742 logEvalError(""extendedTerm #expected events is <0 return a NaN"");; 743 return TMath::QuietNaN();; 744 }; 745 ; 746 ; 747 // Explicitly handle case Nobs=Nexp=0; 748 if (std::abs(expected)<1e-10 && std::abs(sumEntries)<1e-10) {; 749 return 0.0;; 750 }; 751 ; 752 // Check for errors in Nexpected; 753 if (TMath::IsNaN(expected)) {; 754 logEvalError(""extendedTerm #expected events is a NaN"") ;; 755 return TMath::QuietNaN() ;; 756 }; 757 ; 758 double extra = doOffset; 759 ? (expected - sumEntries) - sumEntries * (std::log(expected) - std::log(sumEntries)); 760 : expected - sumEntries * std::log(expected);; 761 ; 762 if(sumEntriesW2 != 0.0) {; 763 extra *= sumEntriesW2 / sumEntries;; 764 }; 765 ; 766 return extra;; 767}; 768 ; 769////////////////////////////////////////////////////////////////////////////////; 770/// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); 771/// of this PDF for the given number of observed events.; 772///; 773/// This function is a wrapper around; 774/// RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const,; 775/// where the number of observed events and observables to be used as the; 776/// normalization set for the pdf is extracted from a RooAbsData.; 777///; 778/// For successful operation, the PDF implementation must indicate that; 779/// it is extendable by overloading `canBeExtended()`, and must; 780/// impl",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:30534,Testability,log,log,30534,"endl;; 736 return 0.0;; 737 }; 738 ; 739 if(expected < 0.0) {; 740 coutE(InputArguments) << GetName() << "": calculated negative expected events: "" << expected; 741 << std::endl;; 742 logEvalError(""extendedTerm #expected events is <0 return a NaN"");; 743 return TMath::QuietNaN();; 744 }; 745 ; 746 ; 747 // Explicitly handle case Nobs=Nexp=0; 748 if (std::abs(expected)<1e-10 && std::abs(sumEntries)<1e-10) {; 749 return 0.0;; 750 }; 751 ; 752 // Check for errors in Nexpected; 753 if (TMath::IsNaN(expected)) {; 754 logEvalError(""extendedTerm #expected events is a NaN"") ;; 755 return TMath::QuietNaN() ;; 756 }; 757 ; 758 double extra = doOffset; 759 ? (expected - sumEntries) - sumEntries * (std::log(expected) - std::log(sumEntries)); 760 : expected - sumEntries * std::log(expected);; 761 ; 762 if(sumEntriesW2 != 0.0) {; 763 extra *= sumEntriesW2 / sumEntries;; 764 }; 765 ; 766 return extra;; 767}; 768 ; 769////////////////////////////////////////////////////////////////////////////////; 770/// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); 771/// of this PDF for the given number of observed events.; 772///; 773/// This function is a wrapper around; 774/// RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const,; 775/// where the number of observed events and observables to be used as the; 776/// normalization set for the pdf is extracted from a RooAbsData.; 777///; 778/// For successful operation, the PDF implementation must indicate that; 779/// it is extendable by overloading `canBeExtended()`, and must; 780/// implement the `expectedEvents()` function.; 781///; 782/// \param[in] data The RooAbsData to retrieve the set of observables and; 783/// number of expected events.; 784/// \param[in] weightSquared If set to `true`, the extended term will be scaled by; 785/// the ratio of squared event weights over event weights:; 786/// \f$ \sum w_{i}^2 / \sum w_{i} \f$.; 787/// Intended to be us",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:32164,Testability,log,log,32164,"// \param[in] data The RooAbsData to retrieve the set of observables and; 783/// number of expected events.; 784/// \param[in] weightSquared If set to `true`, the extended term will be scaled by; 785/// the ratio of squared event weights over event weights:; 786/// \f$ \sum w_{i}^2 / \sum w_{i} \f$.; 787/// Intended to be used by fits with the `SumW2Error()` option that; 788/// can be passed to RooAbsPdf::fitTo(); 789/// (see the documentation of said function to learn more about the; 790/// interpretation of fits with squared weights).; 791/// \param[in] doOffset See RooAbsPdf::extendedTerm(double, RooArgSet const*, double, bool) const.; 792 ; 793double RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset) const {; 794 double sumW = data.sumEntries();; 795 double sumW2 = 0.0;; 796 if (weightSquared) {; 797 sumW2 = data.sumEntriesW2();; 798 }; 799 return extendedTerm(sumW, data.get(), sumW2, doOffset);; 800}; 801 ; 802 ; 803/** @fn RooAbsPdf::createNLL(); 804 *; 805 * @brief Construct representation of -log(L) of PDF with given dataset.; 806 *; 807 * If dataset is unbinned, an unbinned likelihood is constructed.; 808 * If the dataset is binned, a binned likelihood is constructed.; 809 *; 810 * @param data Reference to a RooAbsData object representing the dataset.; 811 * @param cmdArgs Variadic template arguments representing optional command arguments.; 812 * You can pass either an arbitrary number of RooCmdArg instances; 813 * or a single RooLinkedList that points to the RooCmdArg objects.; 814 * @return An owning pointer to the created RooAbsReal NLL object.; 815 *; 816 * @tparam CmdArgs_t Template types for optional command arguments.; 817 * Can either be an arbitrary number of RooCmdArg or a single RooLinkedList.; 818 *; 819 * \note This front-end function should not be re-implemented in derived PDF types.; 820 * If you mean to customize the NLL creation routine,; 821 * you need to override the virtual RooAbsPdf::createNLLImpl() metho",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:36236,Testability,log,log-likelihoods,36236,"if RooSimultaneous components; 849 * do not share many parameters; 850 * <tr><td> 3 = RooFit::Hybrid <td> Follow strategy 0 for all RooSimultaneous components, except those with less than; 851 * 30 dataset entries, for which strategy 2 is followed.; 852 * </table>; 853 * <tr><td> `EvalBackend(std::string const&)` <td> Choose a likelihood evaluation backend:; 854 * <table>; 855 * <tr><th> Backend <th> Description; 856 * <tr><td> **cpu** - *default* <td> New vectorized evaluation mode, using faster math functions and auto-vectorisation.; 857 * Since ROOT 6.23, this is the default if `EvalBackend()` is not passed, succeeding the **legacy** backend.; 858 * If all RooAbsArg objects in the model support vectorized evaluation,; 859 * likelihood computations are 2 to 10 times faster than with the **legacy** backend; 860 * - unless your dataset is so small that the vectorization is not worth it.; 861 * The relative difference of the single log-likelihoods with respect to the legacy mode is usually better than \f$10^{-12}\f$,; 862 * and for fit parameters it's usually better than \f$10^{-6}\f$. In past ROOT releases, this backend could be activated with the now deprecated `BatchMode()` option.; 863 * <tr><td> **cuda** <td> Evaluate the likelihood on a GPU that supports CUDA.; 864 * This backend re-uses code from the **cpu** backend, but compiled in CUDA kernels.; 865 * Hence, the results are expected to be identical, modulo some numerical differences that can arise from the different order in which the GPU is summing the log probabilities.; 866 * This backend can drastically speed up the fit if all RooAbsArg object in the model support it.; 867 * <tr><td> **legacy** <td> The original likelihood evaluation method.; 868 * Evaluates the PDF for each single data entry at a time before summing the negative log probabilities.; 869 * <tr><td> **codegen** <td> **Experimental** - Generates and compiles minimal C++ code for the NLL on-the-fly and wraps it in the returned RooAbsReal.; 8",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:36828,Testability,log,log,36828,"torized evaluation mode, using faster math functions and auto-vectorisation.; 857 * Since ROOT 6.23, this is the default if `EvalBackend()` is not passed, succeeding the **legacy** backend.; 858 * If all RooAbsArg objects in the model support vectorized evaluation,; 859 * likelihood computations are 2 to 10 times faster than with the **legacy** backend; 860 * - unless your dataset is so small that the vectorization is not worth it.; 861 * The relative difference of the single log-likelihoods with respect to the legacy mode is usually better than \f$10^{-12}\f$,; 862 * and for fit parameters it's usually better than \f$10^{-6}\f$. In past ROOT releases, this backend could be activated with the now deprecated `BatchMode()` option.; 863 * <tr><td> **cuda** <td> Evaluate the likelihood on a GPU that supports CUDA.; 864 * This backend re-uses code from the **cpu** backend, but compiled in CUDA kernels.; 865 * Hence, the results are expected to be identical, modulo some numerical differences that can arise from the different order in which the GPU is summing the log probabilities.; 866 * This backend can drastically speed up the fit if all RooAbsArg object in the model support it.; 867 * <tr><td> **legacy** <td> The original likelihood evaluation method.; 868 * Evaluates the PDF for each single data entry at a time before summing the negative log probabilities.; 869 * <tr><td> **codegen** <td> **Experimental** - Generates and compiles minimal C++ code for the NLL on-the-fly and wraps it in the returned RooAbsReal.; 870 * Also generates and compiles the code for the gradient using Automatic Differentiation (AD) with [Clad](https://github.com/vgvassilev/clad).; 871 * This analytic gradient is passed to the minimizer, which can result in significant speedups for many-parameter fits,; 872 * even compared to the **cpu** backend. However, if one of the RooAbsArg objects in the model does not support the code generation,; 873 * this backend can't be used.; 874 * <tr><td> **codege",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:37114,Testability,log,log,37114,"than with the **legacy** backend; 860 * - unless your dataset is so small that the vectorization is not worth it.; 861 * The relative difference of the single log-likelihoods with respect to the legacy mode is usually better than \f$10^{-12}\f$,; 862 * and for fit parameters it's usually better than \f$10^{-6}\f$. In past ROOT releases, this backend could be activated with the now deprecated `BatchMode()` option.; 863 * <tr><td> **cuda** <td> Evaluate the likelihood on a GPU that supports CUDA.; 864 * This backend re-uses code from the **cpu** backend, but compiled in CUDA kernels.; 865 * Hence, the results are expected to be identical, modulo some numerical differences that can arise from the different order in which the GPU is summing the log probabilities.; 866 * This backend can drastically speed up the fit if all RooAbsArg object in the model support it.; 867 * <tr><td> **legacy** <td> The original likelihood evaluation method.; 868 * Evaluates the PDF for each single data entry at a time before summing the negative log probabilities.; 869 * <tr><td> **codegen** <td> **Experimental** - Generates and compiles minimal C++ code for the NLL on-the-fly and wraps it in the returned RooAbsReal.; 870 * Also generates and compiles the code for the gradient using Automatic Differentiation (AD) with [Clad](https://github.com/vgvassilev/clad).; 871 * This analytic gradient is passed to the minimizer, which can result in significant speedups for many-parameter fits,; 872 * even compared to the **cpu** backend. However, if one of the RooAbsArg objects in the model does not support the code generation,; 873 * this backend can't be used.; 874 * <tr><td> **codegen_no_grad** <td> **Experimental** - Same as **codegen**, but doesn't generate and compile the gradient code and use the regular numerical differentiation instead.; 875 * This is expected to be slower, but useful for debugging problems with the analytic gradient.; 876 * </table>; 877 * <tr><td> `Optimize(bool flag)` <td> ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:41526,Testability,test,tests,41526,"flag)` <td> Use clone of dataset in NLL (default is true).; 904 * \warning Deprecated option that is ignored. It is up to the implementation of the NLL creation method if the data is cloned or not.; 905 * <tr><td> `Offset(std::string const& mode)` <td> Likelihood offsetting mode. Can be either:; 906 * <table>; 907 * <tr><th> Mode <th> Description; 908 * <tr><td> **none** - *default* <td> No offsetting.; 909 * <tr><td> **initial** <td> Offset likelihood by initial value (so that starting value of FCN in minuit is zero).; 910 * This can improve numeric stability in simultaneous fits with components with large likelihood values.; 911 * <tr><td> **bin** <td> Offset likelihood bin-by-bin with a template histogram model based on the obersved data.; 912 * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; 913 * which can drastically improve numeric stability.; 914 * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; 915 * </table>; 916 * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; 917 * This can reduce the bias observed when fitting functions with high curvature to binned data.; 918 * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; 919 * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; 920 * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; 921 * has to be manipulated directly.; 922 * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; 923 * - precision < 0: Deactivate.; 924 * \see RooBinSamplingPdf; 925 * <tr><td> `ModularL(bool flag)` <td> Enab",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:43163,Testability,log,logic,43163,"s desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; 921 * has to be manipulated directly.; 922 * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; 923 * - precision < 0: Deactivate.; 924 * \see RooBinSamplingPdf; 925 * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; 926 * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this; 927 * should be set to true for parallel minimization of likelihoods!; 928 * Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, since; 929 * some features such as offsetting might not yet work in this case.; 930 * </table>; 931 */; 932 ; 933 ; 934/** @brief Protected implementation of the NLL creation routine.; 935 *; 936 * This virtual function can be overridden in case you want to change the NLL creation logic for custom PDFs.; 937 *; 938 * \note Never call this function directly. Instead, call RooAbsPdf::createNLL().; 939 */; 940 ; 941std::unique_ptr<RooAbsReal> RooAbsPdf::createNLLImpl(RooAbsData &data, const RooLinkedList &cmdList); 942{; 943 return RooFit::FitHelpers::createNLL(*this, data, cmdList);; 944}; 945 ; 946 ; 947/** @fn RooAbsPdf::fitTo(); 948 *; 949 * @brief Fit PDF to given dataset.; 950 *; 951 * If dataset is unbinned, an unbinned maximum likelihood is performed.; 952 * If the dataset is binned, a binned maximum likelihood is performed.; 953 * By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession.; 954 *; 955 * @param data Reference to a RooAbsData object representing the dataset.; 956 * @param cmdArgs Variadic template arguments representing optional command arguments.; 957 * You can pass either an arbitrary number of RooCmdArg instances; 958 * or a single RooLinkedList that points to the RooCmdArg",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:44899,Testability,log,log,44899,"ject representing the dataset.; 956 * @param cmdArgs Variadic template arguments representing optional command arguments.; 957 * You can pass either an arbitrary number of RooCmdArg instances; 958 * or a single RooLinkedList that points to the RooCmdArg objects.; 959 * @return An owning pointer to the created RooAbsReal NLL object.; 960 * @return RooFitResult with fit status and parameters if option Save() is used, `nullptr` otherwise. The user takes ownership of the fit result.; 961 *; 962 * @tparam CmdArgs_t Template types for optional command arguments.; 963 * Can either be an arbitrary number of RooCmdArg or a single RooLinkedList.; 964 *; 965 * \note This front-end function should not be re-implemented in derived PDF types.; 966 * If you mean to customize the likelihood fitting routine,; 967 * you need to override the virtual RooAbsPdf::fitToImpl() method.; 968 *; 969 * The following named arguments are supported:; 970 *; 971 * <table>; 972 * <tr><th> Type of CmdArg <th> Options to control construction of -log(L); 973 * <tr><td> <td> All command arguments that can also be passed to the NLL creation method.; 974 * \see RooAbsPdf::createNLL(); 975 *; 976 * <tr><th><th> Options to control flow of fit procedure; 977 * <tr><td> `Minimizer(""<type>"", ""<algo>"")` <td> Choose minimization package and optionally the algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer interface,; 978 * but others can be specified (through RooMinimizer interface).; 979 * <table>; 980 * <tr><th> Type <th> Algorithm; 981 * <tr><td> Minuit <td> migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve); 982 * <tr><td> Minuit2 <td> migrad, simplex, minimize, scan; 983 * <tr><td> GSLMultiMin <td> conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent; 984 * <tr><td> GSLSimAn <td> -; 985 * </table>; 986 *; 987 * <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; 988 * <tr><td> `Optimize(bool flag)` <td> Activate ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:45903,Testability,test,test,45903,"teNLL(); 975 *; 976 * <tr><th><th> Options to control flow of fit procedure; 977 * <tr><td> `Minimizer(""<type>"", ""<algo>"")` <td> Choose minimization package and optionally the algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer interface,; 978 * but others can be specified (through RooMinimizer interface).; 979 * <table>; 980 * <tr><th> Type <th> Algorithm; 981 * <tr><td> Minuit <td> migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve); 982 * <tr><td> Minuit2 <td> migrad, simplex, minimize, scan; 983 * <tr><td> GSLMultiMin <td> conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent; 984 * <tr><td> GSLSimAn <td> -; 985 * </table>; 986 *; 987 * <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; 988 * <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization of test statistic during minimization (on by default); 989 * <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; 990 * <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, off by default; 991 * <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; 992 * <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; 993 * <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 to 2, default is 1); 994 * <tr><td> `MaxCalls(int n)` <td> Change maximum number of likelihood function calls from MINUIT (if `n <= 0`, the default of 500 * #%parameters is used); 995 * <tr><td> `EvalErrorWall(bool flag=true)` <td> When parameters are in disallowed regions (e.g. PDF is negative), return very high value to fitter; 996 * to force it out of that region. This can, however, mean that the fitter gets lost in this region. If; 997 * this happens, try switching it off.; 998 * <tr><td> `RecoverFromUndefinedRegions(double strength)` <td> When PDF is invalid (e.g. parameter in undefined r",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:52450,Testability,log,logs,52450,"termines the internal partial derivative calculation; 1050 * ordering strategy. The third argument determines the number of partial; 1051 * derivatives that are executed per task package on each worker.; 1052 * <tr><td> `ParallelDescentOptions(bool enable=false, int splitStrategy=0, int numSplits=4)` <td> **Experimental** - Control settings related to the parallelization of likelihoods; 1053 * outside of the gradient calculation but in the minimization, most prominently; 1054 * in the linesearch step. The first argument this disables or enables likelihood; 1055 * parallelization. The second argument determines whether to split the task batches; 1056 * per event or per likelihood component. And the third argument how many events or; 1057 * respectively components to include in each batch.; 1058 * <tr><td> `TimingAnalysis(bool flag)` <td> **Experimental** - Log timings. This feature logs timings with NewStyle likelihoods on multiple processes simultaneously; 1059 * and outputs the timings at the end of a run to json log files, which can be analyzed with the; 1060 * `RooFit::MultiProcess::HeatmapAnalyzer`. Only works with simultaneous likelihoods.; 1061 * </table>; 1062 */; 1063 ; 1064 ; 1065/** @brief Protected implementation of the likelihood fitting routine.; 1066 *; 1067 * This virtual function can be overridden in case you want to change the likelihood fitting logic for custom PDFs.; 1068 *; 1069 * \note Never call this function directly. Instead, call RooAbsPdf::fitTo().; 1070 */; 1071 ; 1072std::unique_ptr<RooFitResult> RooAbsPdf::fitToImpl(RooAbsData& data, const RooLinkedList& cmdList); 1073{; 1074 return RooFit::FitHelpers::fitTo(*this, data, cmdList, false);; 1075}; 1076 ; 1077 ; 1078////////////////////////////////////////////////////////////////////////////////; 1079/// Print value of p.d.f, also print normalization integral that was last used, if any; 1080 ; 1081void RooAbsPdf::printValue(ostream& os) const; 1082{; 1083 // silent warning messages coming w",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:52586,Testability,log,log,52586,"termines the internal partial derivative calculation; 1050 * ordering strategy. The third argument determines the number of partial; 1051 * derivatives that are executed per task package on each worker.; 1052 * <tr><td> `ParallelDescentOptions(bool enable=false, int splitStrategy=0, int numSplits=4)` <td> **Experimental** - Control settings related to the parallelization of likelihoods; 1053 * outside of the gradient calculation but in the minimization, most prominently; 1054 * in the linesearch step. The first argument this disables or enables likelihood; 1055 * parallelization. The second argument determines whether to split the task batches; 1056 * per event or per likelihood component. And the third argument how many events or; 1057 * respectively components to include in each batch.; 1058 * <tr><td> `TimingAnalysis(bool flag)` <td> **Experimental** - Log timings. This feature logs timings with NewStyle likelihoods on multiple processes simultaneously; 1059 * and outputs the timings at the end of a run to json log files, which can be analyzed with the; 1060 * `RooFit::MultiProcess::HeatmapAnalyzer`. Only works with simultaneous likelihoods.; 1061 * </table>; 1062 */; 1063 ; 1064 ; 1065/** @brief Protected implementation of the likelihood fitting routine.; 1066 *; 1067 * This virtual function can be overridden in case you want to change the likelihood fitting logic for custom PDFs.; 1068 *; 1069 * \note Never call this function directly. Instead, call RooAbsPdf::fitTo().; 1070 */; 1071 ; 1072std::unique_ptr<RooFitResult> RooAbsPdf::fitToImpl(RooAbsData& data, const RooLinkedList& cmdList); 1073{; 1074 return RooFit::FitHelpers::fitTo(*this, data, cmdList, false);; 1075}; 1076 ; 1077 ; 1078////////////////////////////////////////////////////////////////////////////////; 1079/// Print value of p.d.f, also print normalization integral that was last used, if any; 1080 ; 1081void RooAbsPdf::printValue(ostream& os) const; 1082{; 1083 // silent warning messages coming w",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:52941,Testability,log,logic,52941," related to the parallelization of likelihoods; 1053 * outside of the gradient calculation but in the minimization, most prominently; 1054 * in the linesearch step. The first argument this disables or enables likelihood; 1055 * parallelization. The second argument determines whether to split the task batches; 1056 * per event or per likelihood component. And the third argument how many events or; 1057 * respectively components to include in each batch.; 1058 * <tr><td> `TimingAnalysis(bool flag)` <td> **Experimental** - Log timings. This feature logs timings with NewStyle likelihoods on multiple processes simultaneously; 1059 * and outputs the timings at the end of a run to json log files, which can be analyzed with the; 1060 * `RooFit::MultiProcess::HeatmapAnalyzer`. Only works with simultaneous likelihoods.; 1061 * </table>; 1062 */; 1063 ; 1064 ; 1065/** @brief Protected implementation of the likelihood fitting routine.; 1066 *; 1067 * This virtual function can be overridden in case you want to change the likelihood fitting logic for custom PDFs.; 1068 *; 1069 * \note Never call this function directly. Instead, call RooAbsPdf::fitTo().; 1070 */; 1071 ; 1072std::unique_ptr<RooFitResult> RooAbsPdf::fitToImpl(RooAbsData& data, const RooLinkedList& cmdList); 1073{; 1074 return RooFit::FitHelpers::fitTo(*this, data, cmdList, false);; 1075}; 1076 ; 1077 ; 1078////////////////////////////////////////////////////////////////////////////////; 1079/// Print value of p.d.f, also print normalization integral that was last used, if any; 1080 ; 1081void RooAbsPdf::printValue(ostream& os) const; 1082{; 1083 // silent warning messages coming when evaluating a RooAddPdf without a normalization set; 1084 RooHelpers::LocalChangeMsgLevel locmsg(RooFit::WARNING, 0u, RooFit::Eval, false);; 1085 ; 1086 getVal() ;; 1087 ; 1088 if (_norm) {; 1089 os << getVal() << ""/"" << _norm->getVal() ;; 1090 } else {; 1091 os << getVal();; 1092 }; 1093}; 1094 ; 1095 ; 1096 ; 1097///////////////////////",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:90432,Testability,log,log,90432," <td> Adjust normalization by given scale factor.; 1866/// Interpretation of number depends on code:; 1867/// `RooAbsReal::Relative`: relative adjustment factor; 1868/// `RooAbsReal::NumEvent`: scale to match given number of events.; 1869///; 1870/// <tr><th> Type of argument <th> Misc control; 1871/// <tr><td> `Name(const chat* name)` <td> Give curve specified name in frame. Useful if curve is to be referenced later; 1872/// <tr><td> `Asymmetry(const RooCategory& c)` <td> Show the asymmetry of the PDF in given two-state category; 1873/// \f$ \frac{F(+)-F(-)}{F(+)+F(-)} \f$ rather than the PDF projection. Category must have two; 1874/// states with indices -1 and +1 or three states with indices -1,0 and +1.; 1875/// <tr><td> `ShiftToZero(bool flag)` <td> Shift entire curve such that lowest visible point is at exactly zero.; 1876/// Mostly useful when plotting -log(L) or \f$ \chi^2 \f$ distributions; 1877/// <tr><td> `AddTo(const char* name, double_t wgtSelf, double_t wgtOther)` <td> Create a projection of this PDF onto the x-axis, but; 1878/// instead of plotting it directly, add it to an existing curve with given name (and relative weight factors).; 1879/// <tr><td> `Components(const char* names)` <td> When plotting sums of PDFs, plot only the named components (*e.g.* only; 1880/// the signal of a signal+background model).; 1881/// <tr><td> `Components(const RooArgSet& compSet)` <td> As above, but pass a RooArgSet of the components themselves.; 1882///; 1883/// <tr><th> Type of argument <th> Projection control; 1884/// <tr><td> `Slice(const RooArgSet& set)` <td> Override default projection behaviour by omitting observables listed; 1885/// in set from the projection, i.e. by not integrating over these.; 1886/// Slicing is usually only sensible in discrete observables, by e.g. creating a slice; 1887/// of the PDF at the current value of the category observable.; 1888/// <tr><td> `Slice(RooCategory& cat, const char* label)` <td> Override default projection behaviour by",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:104133,Testability,assert,assert,104133,"RooAbsPdf::plotOn("" << GetName() << "") p.d.f. curve is normalized using explicit choice of ranges '"" << pc.getString(""normRangeName"", """", false) << ""'"" << endl ;; 2097 ; 2098 nameSuffix.append(""_NormRange["" + std::string(pc.getString(""rangeName"")) + ""]"");; 2099 ; 2100 }; 2101 ; 2102 if (hasCustomRange && adjustNorm) {; 2103 // If overlapping ranges were given, remove them now; 2104 const std::size_t oldSize = rangeLim.size();; 2105 removeRangeOverlap(rangeLim);; 2106 ; 2107 if (oldSize != rangeLim.size() && !pc.hasProcessed(""NormRange"")) {; 2108 // User gave overlapping ranges. This leads to double-counting events and integrals, and must; 2109 // therefore be avoided. If a NormRange has been given, the overlap is already gone.; 2110 // It's safe to plot even with overlap now.; 2111 coutE(Plotting) << ""Requested plot/integration ranges overlap. For correct plotting, new ranges ""; 2112 ""will be defined."" << std::endl;; 2113 auto plotVar = dynamic_cast<RooRealVar*>(frame->getPlotVar());; 2114 assert(plotVar);; 2115 std::string rangesNoOverlap;; 2116 for (auto it = rangeLim.begin(); it != rangeLim.end(); ++it) {; 2117 std::stringstream rangeName;; 2118 rangeName << ""Remove_overlap_range_"" << it - rangeLim.begin();; 2119 plotVar->setRange(rangeName.str().c_str(), it->first, it->second);; 2120 if (!rangesNoOverlap.empty()); 2121 rangesNoOverlap += "","";; 2122 rangesNoOverlap += rangeName.str();; 2123 }; 2124 ; 2125 auto rangeArg = static_cast<RooCmdArg*>(cmdList.FindObject(""RangeWithName""));; 2126 if (rangeArg) {; 2127 rangeArg->setString(0, rangesNoOverlap.c_str());; 2128 } else {; 2129 plotRange = std::make_unique<RooCmdArg>(RooFit::Range(rangesNoOverlap.c_str()));; 2130 cmdList.Add(plotRange.get());; 2131 }; 2132 }; 2133 ; 2134 double rangeNevt(0) ;; 2135 for (const auto& riter : rangeLim) {; 2136 double nevt= frame->getFitRangeNEvt(riter.first, riter.second);; 2137 rangeNevt += nevt ;; 2138 }; 2139 ; 2140 scaleFactor *= rangeNevt/nExpected ;; 2141 ; 2142 } else {; 2143 ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:136016,Testability,test,testArg,136016,"axDefinition THbookFile.cxx:95; TMath.h; TMatrixDSym.h; TMatrixD.h; TPaveText.h; Formchar * Form(const char *fmt,...)Formats a string in a circular formatting buffer.Definition TString.cxx:2489; RooAbsArgCommon abstract base class for objects that represent a value and a ""shape"" in RooFit.Definition RooAbsArg.h:79; RooAbsArg::clearValueAndShapeDirtyvoid clearValueAndShapeDirty() constDefinition RooAbsArg.h:571; RooAbsArg::Printvoid Print(Option_t *options=nullptr) const overridePrint the object to the defaultPrintStream().Definition RooAbsArg.h:294; RooAbsArg::dependsOnbool dependsOn(const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) constTest whether we depend on (ie, are served by) any object in the specified collection.Definition RooAbsArg.cxx:850; RooAbsArg::constR__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg constDefinition RooAbsArg.h:145; RooAbsArg::setOperModevoid setOperMode(OperMode mode, bool recurseADirty=true)Set the operation mode of this node.Definition RooAbsArg.cxx:1963; RooAbsArg::getParametersRooFit::OwningPtr< RooArgSet > getParameters(const RooAbsData *data, bool stripDisconnected=true) constCreate a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of...Definition RooAbsArg.cxx:541; RooAbsArg::getObservablesRooFit::OwningPtr< RooArgSet > getObservables(const RooArgSet &set, bool valueOnly=true) constGiven a set of possible observables, return the observables that this PDF depends on.Definition RooAbsArg.cxx:698; RooAbsArg::addOwnedComponentsbool addOwnedComponents(const RooAbsCollection &comps)Take ownership of the contents of 'comps'.Definition RooAbsArg.cxx:2258; RooAbsArg::ADirty@ ADirtyDefinition RooAbsArg.h:362; RooAbsArg::getStringAttributeconst Text_t * getStringAttribute(const Text_t *key) constGet string attribute mapped",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:153560,Testability,log,logBatchComputationErrorsvoid,153560," traceEvalPdf(double value) constCheck that passed value is positive and not 'not-a-number'.Definition RooAbsPdf.cxx:384; RooAbsPdf::defaultGeneratorConfigstatic RooNumGenConfig * defaultGeneratorConfig()Returns the default numeric MC generator configuration for all RooAbsReals.Definition RooAbsPdf.cxx:2613; RooAbsPdf::redirectServersHookbool redirectServersHook(const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) overrideThe cache manager.Definition RooAbsPdf.cxx:2768; RooAbsPdf::printValuevoid printValue(std::ostream &os) const overridePrint value of p.d.f, also print normalization integral that was last used, if any.Definition RooAbsPdf.cxx:1081; RooAbsPdf::createNLLImplvirtual std::unique_ptr< RooAbsReal > createNLLImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the NLL creation routine.Definition RooAbsPdf.cxx:941; RooAbsPdf::logBatchComputationErrorsvoid logBatchComputationErrors(std::span< const double > &outputs, std::size_t begin) constScan through outputs and fix+log all nans and negative values.Definition RooAbsPdf.cxx:654; RooAbsPdf::genContextvirtual RooAbsGenContext * genContext(const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) constInterface function to create a generator context from a p.d.f.Definition RooAbsPdf.cxx:1127; RooAbsPdf::getLogProbabilitiesvoid getLogProbabilities(std::span< const double > pdfValues, double *output) constDefinition RooAbsPdf.cxx:671; RooAbsPdf::_normRangeOverridestatic TString _normRangeOverrideDefinition RooAbsPdf.h:343; RooAbsPdf::_verboseEvalstatic Int_t _verboseEvalDefinition RooAbsPdf.h:314; RooAbsPdf::extendedTermdouble extendedTerm(double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) constDefinition RooAbsPdf.cxx:730; RooAbsPdf::getGeneratorvirtual Int_t getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) co",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:153590,Testability,log,logBatchComputationErrors,153590," traceEvalPdf(double value) constCheck that passed value is positive and not 'not-a-number'.Definition RooAbsPdf.cxx:384; RooAbsPdf::defaultGeneratorConfigstatic RooNumGenConfig * defaultGeneratorConfig()Returns the default numeric MC generator configuration for all RooAbsReals.Definition RooAbsPdf.cxx:2613; RooAbsPdf::redirectServersHookbool redirectServersHook(const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) overrideThe cache manager.Definition RooAbsPdf.cxx:2768; RooAbsPdf::printValuevoid printValue(std::ostream &os) const overridePrint value of p.d.f, also print normalization integral that was last used, if any.Definition RooAbsPdf.cxx:1081; RooAbsPdf::createNLLImplvirtual std::unique_ptr< RooAbsReal > createNLLImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the NLL creation routine.Definition RooAbsPdf.cxx:941; RooAbsPdf::logBatchComputationErrorsvoid logBatchComputationErrors(std::span< const double > &outputs, std::size_t begin) constScan through outputs and fix+log all nans and negative values.Definition RooAbsPdf.cxx:654; RooAbsPdf::genContextvirtual RooAbsGenContext * genContext(const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) constInterface function to create a generator context from a p.d.f.Definition RooAbsPdf.cxx:1127; RooAbsPdf::getLogProbabilitiesvoid getLogProbabilities(std::span< const double > pdfValues, double *output) constDefinition RooAbsPdf.cxx:671; RooAbsPdf::_normRangeOverridestatic TString _normRangeOverrideDefinition RooAbsPdf.h:343; RooAbsPdf::_verboseEvalstatic Int_t _verboseEvalDefinition RooAbsPdf.h:314; RooAbsPdf::extendedTermdouble extendedTerm(double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) constDefinition RooAbsPdf.cxx:730; RooAbsPdf::getGeneratorvirtual Int_t getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) co",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:153705,Testability,log,log,153705," traceEvalPdf(double value) constCheck that passed value is positive and not 'not-a-number'.Definition RooAbsPdf.cxx:384; RooAbsPdf::defaultGeneratorConfigstatic RooNumGenConfig * defaultGeneratorConfig()Returns the default numeric MC generator configuration for all RooAbsReals.Definition RooAbsPdf.cxx:2613; RooAbsPdf::redirectServersHookbool redirectServersHook(const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) overrideThe cache manager.Definition RooAbsPdf.cxx:2768; RooAbsPdf::printValuevoid printValue(std::ostream &os) const overridePrint value of p.d.f, also print normalization integral that was last used, if any.Definition RooAbsPdf.cxx:1081; RooAbsPdf::createNLLImplvirtual std::unique_ptr< RooAbsReal > createNLLImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the NLL creation routine.Definition RooAbsPdf.cxx:941; RooAbsPdf::logBatchComputationErrorsvoid logBatchComputationErrors(std::span< const double > &outputs, std::size_t begin) constScan through outputs and fix+log all nans and negative values.Definition RooAbsPdf.cxx:654; RooAbsPdf::genContextvirtual RooAbsGenContext * genContext(const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) constInterface function to create a generator context from a p.d.f.Definition RooAbsPdf.cxx:1127; RooAbsPdf::getLogProbabilitiesvoid getLogProbabilities(std::span< const double > pdfValues, double *output) constDefinition RooAbsPdf.cxx:671; RooAbsPdf::_normRangeOverridestatic TString _normRangeOverrideDefinition RooAbsPdf.h:343; RooAbsPdf::_verboseEvalstatic Int_t _verboseEvalDefinition RooAbsPdf.h:314; RooAbsPdf::extendedTermdouble extendedTerm(double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) constDefinition RooAbsPdf.cxx:730; RooAbsPdf::getGeneratorvirtual Int_t getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) co",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:155076,Testability,log,log,155076,"oid getLogProbabilities(std::span< const double > pdfValues, double *output) constDefinition RooAbsPdf.cxx:671; RooAbsPdf::_normRangeOverridestatic TString _normRangeOverrideDefinition RooAbsPdf.h:343; RooAbsPdf::_verboseEvalstatic Int_t _verboseEvalDefinition RooAbsPdf.h:314; RooAbsPdf::extendedTermdouble extendedTerm(double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) constDefinition RooAbsPdf.cxx:730; RooAbsPdf::getGeneratorvirtual Int_t getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) constLoad generatedVars with the subset of directVars that we can generate events for, and return a code t...Definition RooAbsPdf.cxx:1522; RooAbsPdf::createProjectionvirtual RooAbsPdf * createProjection(const RooArgSet &iset)Return a p.d.f that represent a projection of this p.d.f integrated over given observables.Definition RooAbsPdf.cxx:2446; RooAbsPdf::getLogValvirtual double getLogVal(const RooArgSet *set=nullptr) constReturn the log of the current value with given normalization An error message is printed if the argum...Definition RooAbsPdf.cxx:620; RooAbsRealLValue::hasRangebool hasRange(const char *name) const overrideCheck if variable has a binning with given name.Definition RooAbsRealLValue.h:97; RooAbsRealLValue::getRangestd::pair< double, double > getRange(const char *name=nullptr) constGet low and high bound of the variable.Definition RooAbsRealLValue.h:88; RooAbsRealAbstract base class for objects that represent a real value and implements functionality common to al...Definition RooAbsReal.h:59; RooAbsReal::fillDataHistRooDataHist * fillDataHist(RooDataHist *hist, const RooArgSet *nset, double scaleFactor, bool correctForBinVolume=false, bool showProgress=false) constFill a RooDataHist with values sampled from this function at the bin centers.Definition RooAbsReal.cxx:1124; RooAbsReal::plotOnCompSelectvoid plotOnCompSelect(RooArgSet *selNodes) constHelper function for plotting of composite p.d.fs.",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:158388,Testability,log,logEvalErrorvoid,158388,"ServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) overrideFunction that is called at the end of redirectServers().Definition RooAbsReal.cxx:4474; RooAbsReal::_valuedouble _valueCache for current value of object.Definition RooAbsReal.h:536; RooAbsReal::analyticalIntegralvirtual double analyticalIntegral(Int_t code, const char *rangeName=nullptr) constImplements the actual analytical integral(s) advertised by getAnalyticalIntegral.Definition RooAbsReal.cxx:394; RooAbsReal::integralNameSuffixTString integralNameSuffix(const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) constConstruct string with unique suffix name to give to integral object that encodes integrated observabl...Definition RooAbsReal.cxx:755; RooAbsReal::evaluatevirtual double evaluate() const =0Evaluate this PDF / function / constant. Needs to be overridden by all derived classes.; RooAbsReal::logEvalErrorvoid logEvalError(const char *message, const char *serverValueString=nullptr) constLog evaluation error message.Definition RooAbsReal.cxx:3464; RooAbsReal::getIntegratorConfigconst RooNumIntConfig * getIntegratorConfig() constReturn the numeric integration configuration used for this object.Definition RooAbsReal.cxx:3309; RooAbsReal::isBinnedDistributionvirtual bool isBinnedDistribution(const RooArgSet &) constTests if the distribution is binned. Unless overridden by derived classes, this always returns false.Definition RooAbsReal.h:346; RooAbsReal::createIntRIRooFit::OwningPtr< RooAbsReal > createIntRI(const RooArgSet &iset, const RooArgSet &nset={})Utility function for createRunningIntegral.Definition RooAbsReal.cxx:3827; RooAbsReal::plotOnvirtual RooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:158405,Testability,log,logEvalError,158405,"ServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) overrideFunction that is called at the end of redirectServers().Definition RooAbsReal.cxx:4474; RooAbsReal::_valuedouble _valueCache for current value of object.Definition RooAbsReal.h:536; RooAbsReal::analyticalIntegralvirtual double analyticalIntegral(Int_t code, const char *rangeName=nullptr) constImplements the actual analytical integral(s) advertised by getAnalyticalIntegral.Definition RooAbsReal.cxx:394; RooAbsReal::integralNameSuffixTString integralNameSuffix(const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) constConstruct string with unique suffix name to give to integral object that encodes integrated observabl...Definition RooAbsReal.cxx:755; RooAbsReal::evaluatevirtual double evaluate() const =0Evaluate this PDF / function / constant. Needs to be overridden by all derived classes.; RooAbsReal::logEvalErrorvoid logEvalError(const char *message, const char *serverValueString=nullptr) constLog evaluation error message.Definition RooAbsReal.cxx:3464; RooAbsReal::getIntegratorConfigconst RooNumIntConfig * getIntegratorConfig() constReturn the numeric integration configuration used for this object.Definition RooAbsReal.cxx:3309; RooAbsReal::isBinnedDistributionvirtual bool isBinnedDistribution(const RooArgSet &) constTests if the distribution is binned. Unless overridden by derived classes, this always returns false.Definition RooAbsReal.h:346; RooAbsReal::createIntRIRooFit::OwningPtr< RooAbsReal > createIntRI(const RooArgSet &iset, const RooArgSet &nset={})Utility function for createRunningIntegral.Definition RooAbsReal.cxx:3827; RooAbsReal::plotOnvirtual RooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:2097,Usability,simpl,simply,2097,"RooAbsPdf, the base class of all PDFs; 23 ; 24RooAbsPdf is the base class for all probability density; 25functions (PDFs). The class provides hybrid analytical/numerical; 26normalization for its implementations, error tracing, and a Monte Carlo; 27generator interface.; 28 ; 29### A Minimal PDF Implementation; 30 ; 31A minimal implementation of a PDF class derived from RooAbsPdf; 32should override the `evaluate()` function. This function should; 33return the PDF's value (which does not need to be normalised).; 34 ; 35 ; 36#### Normalization/Integration; 37 ; 38Although the normalization of a PDF is an integral part of a; 39probability density function, normalization is treated separately; 40in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; 41PDF: it can be a building block for a more complex composite PDF; 42if any of its variables are functions instead of variables. In; 43such cases, the normalization of the composite PDF may not simply be; 44integral over the dependents of the top-level PDF: these are; 45functions with potentially non-trivial Jacobian terms themselves.; 46\note Therefore, no explicit attempt should be made to normalize the; 47function output in evaluate(). In particular, normalisation constants; 48can be omitted to speed up the function evaluations, and included later; 49in the integration of the PDF (see below), which is rarely called in; 50comparison to the `evaluate()` function.; 51 ; 52In addition, RooAbsPdf objects do not have a static concept of what; 53variables are parameters, and what variables are dependents (which; 54need to be integrated over for a correct PDF normalization).; 55Instead, the choice of normalization is always specified each time a; 56normalized value is requested from the PDF via the getVal(); 57method.; 58 ; 59RooAbsPdf manages the entire normalization logic of each PDF with; 60the help of a RooRealIntegral object, which coordinates the integration; 61of a given choice of normalization. By default, Roo",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:10952,Usability,clear,clearValueAndShapeDirty,10952,"f& other, const char* name) :; 261 RooAbsReal(other,name),; 262 _normMgr(other._normMgr,this), _selectComp(other._selectComp), _normRange(other._normRange); 263{; 264 resetErrorCounters() ;; 265 setTraceCounter(other._traceCount) ;; 266 ; 267 if (other._specGeneratorConfig) {; 268 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*other._specGeneratorConfig);; 269 }; 270}; 271 ; 272 ; 273 ; 274////////////////////////////////////////////////////////////////////////////////; 275/// Destructor; 276 ; 277RooAbsPdf::~RooAbsPdf(); 278{; 279}; 280 ; 281 ; 282double RooAbsPdf::normalizeWithNaNPacking(double rawVal, double normVal) const {; 283 ; 284 if (normVal < 0. || (normVal == 0. && rawVal != 0)) {; 285 //Unreasonable normalisations. A zero integral can be tolerated if the function vanishes, though.; 286 const std::string msg = ""p.d.f normalization integral is zero or negative: "" + std::to_string(normVal);; 287 logEvalError(msg.c_str());; 288 clearValueAndShapeDirty();; 289 return RooNaNPacker::packFloatIntoNaN(-normVal + (rawVal < 0. ? -rawVal : 0.));; 290 }; 291 ; 292 if (rawVal < 0.) {; 293 logEvalError(Form(""p.d.f value is less than zero (%f), trying to recover"", rawVal));; 294 clearValueAndShapeDirty();; 295 return RooNaNPacker::packFloatIntoNaN(-rawVal);; 296 }; 297 ; 298 if (TMath::IsNaN(rawVal)) {; 299 logEvalError(""p.d.f value is Not-a-Number"");; 300 clearValueAndShapeDirty();; 301 return rawVal;; 302 }; 303 ; 304 return (rawVal == 0. && normVal == 0.) ? 0. : rawVal / normVal;; 305}; 306 ; 307 ; 308////////////////////////////////////////////////////////////////////////////////; 309/// Return current value, normalized by integrating over; 310/// the observables in `nset`. If `nset` is 0, the unnormalized value; 311/// is returned. All elements of `nset` must be lvalues.; 312///; 313/// Unnormalized values are not cached.; 314/// Doing so would be complicated as `_norm->getVal()` could; 315/// spoil the cache and interfere with returning the cached; 316/",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:11196,Usability,clear,clearValueAndShapeDirty,11196," (other._specGeneratorConfig) {; 268 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*other._specGeneratorConfig);; 269 }; 270}; 271 ; 272 ; 273 ; 274////////////////////////////////////////////////////////////////////////////////; 275/// Destructor; 276 ; 277RooAbsPdf::~RooAbsPdf(); 278{; 279}; 280 ; 281 ; 282double RooAbsPdf::normalizeWithNaNPacking(double rawVal, double normVal) const {; 283 ; 284 if (normVal < 0. || (normVal == 0. && rawVal != 0)) {; 285 //Unreasonable normalisations. A zero integral can be tolerated if the function vanishes, though.; 286 const std::string msg = ""p.d.f normalization integral is zero or negative: "" + std::to_string(normVal);; 287 logEvalError(msg.c_str());; 288 clearValueAndShapeDirty();; 289 return RooNaNPacker::packFloatIntoNaN(-normVal + (rawVal < 0. ? -rawVal : 0.));; 290 }; 291 ; 292 if (rawVal < 0.) {; 293 logEvalError(Form(""p.d.f value is less than zero (%f), trying to recover"", rawVal));; 294 clearValueAndShapeDirty();; 295 return RooNaNPacker::packFloatIntoNaN(-rawVal);; 296 }; 297 ; 298 if (TMath::IsNaN(rawVal)) {; 299 logEvalError(""p.d.f value is Not-a-Number"");; 300 clearValueAndShapeDirty();; 301 return rawVal;; 302 }; 303 ; 304 return (rawVal == 0. && normVal == 0.) ? 0. : rawVal / normVal;; 305}; 306 ; 307 ; 308////////////////////////////////////////////////////////////////////////////////; 309/// Return current value, normalized by integrating over; 310/// the observables in `nset`. If `nset` is 0, the unnormalized value; 311/// is returned. All elements of `nset` must be lvalues.; 312///; 313/// Unnormalized values are not cached.; 314/// Doing so would be complicated as `_norm->getVal()` could; 315/// spoil the cache and interfere with returning the cached; 316/// return value. Since unnormalized calls are typically; 317/// done in integration calls, there is no performance hit.; 318 ; 319double RooAbsPdf::getValV(const RooArgSet* nset) const; 320{; 321 ; 322 // Special handling of case without normali",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:11377,Usability,clear,clearValueAndShapeDirty,11377,"////////////////////////////////////////////////////////////////////////; 275/// Destructor; 276 ; 277RooAbsPdf::~RooAbsPdf(); 278{; 279}; 280 ; 281 ; 282double RooAbsPdf::normalizeWithNaNPacking(double rawVal, double normVal) const {; 283 ; 284 if (normVal < 0. || (normVal == 0. && rawVal != 0)) {; 285 //Unreasonable normalisations. A zero integral can be tolerated if the function vanishes, though.; 286 const std::string msg = ""p.d.f normalization integral is zero or negative: "" + std::to_string(normVal);; 287 logEvalError(msg.c_str());; 288 clearValueAndShapeDirty();; 289 return RooNaNPacker::packFloatIntoNaN(-normVal + (rawVal < 0. ? -rawVal : 0.));; 290 }; 291 ; 292 if (rawVal < 0.) {; 293 logEvalError(Form(""p.d.f value is less than zero (%f), trying to recover"", rawVal));; 294 clearValueAndShapeDirty();; 295 return RooNaNPacker::packFloatIntoNaN(-rawVal);; 296 }; 297 ; 298 if (TMath::IsNaN(rawVal)) {; 299 logEvalError(""p.d.f value is Not-a-Number"");; 300 clearValueAndShapeDirty();; 301 return rawVal;; 302 }; 303 ; 304 return (rawVal == 0. && normVal == 0.) ? 0. : rawVal / normVal;; 305}; 306 ; 307 ; 308////////////////////////////////////////////////////////////////////////////////; 309/// Return current value, normalized by integrating over; 310/// the observables in `nset`. If `nset` is 0, the unnormalized value; 311/// is returned. All elements of `nset` must be lvalues.; 312///; 313/// Unnormalized values are not cached.; 314/// Doing so would be complicated as `_norm->getVal()` could; 315/// spoil the cache and interfere with returning the cached; 316/// return value. Since unnormalized calls are typically; 317/// done in integration calls, there is no performance hit.; 318 ; 319double RooAbsPdf::getValV(const RooArgSet* nset) const; 320{; 321 ; 322 // Special handling of case without normalization set (used in numeric integration of pdfs); 323 if (!nset) {; 324 RooArgSet const* tmp = _normSet ;; 325 _normSet = nullptr ;; 326 double val = evaluate() ;; 327 ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:13056,Usability,clear,clearValueAndShapeDirty,13056," 317/// done in integration calls, there is no performance hit.; 318 ; 319double RooAbsPdf::getValV(const RooArgSet* nset) const; 320{; 321 ; 322 // Special handling of case without normalization set (used in numeric integration of pdfs); 323 if (!nset) {; 324 RooArgSet const* tmp = _normSet ;; 325 _normSet = nullptr ;; 326 double val = evaluate() ;; 327 _normSet = tmp ;; 328 ; 329 return TMath::IsNaN(val) ? 0. : val;; 330 }; 331 ; 332 ; 333 // Process change in last data set used; 334 bool nintChanged(false) ;; 335 if (!isActiveNormSet(nset) || _norm==nullptr) {; 336 nintChanged = syncNormalization(nset) ;; 337 }; 338 ; 339 // Return value of object. Calculated if dirty, otherwise cached value is returned.; 340 if (isValueDirty() || nintChanged || _norm->isValueDirty()) {; 341 ; 342 // Evaluate numerator; 343 const double rawVal = evaluate();; 344 ; 345 // Evaluate denominator; 346 const double normVal = _norm->getVal();; 347 ; 348 _value = normalizeWithNaNPacking(rawVal, normVal);; 349 ; 350 clearValueAndShapeDirty();; 351 }; 352 ; 353 return _value ;; 354}; 355 ; 356 ; 357////////////////////////////////////////////////////////////////////////////////; 358/// Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information).; 359///; 360/// This function applies the normalization specified by `normSet` to the integral returned; 361/// by RooAbsReal::analyticalIntegral(). The passthrough scenario (code=0) is also changed; 362/// to return a normalized answer.; 363 ; 364double RooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName) const; 365{; 366 cxcoutD(Eval) << ""RooAbsPdf::analyticalIntegralWN("" << GetName() << "") code = "" << code << "" normset = "" << (normSet?*normSet:RooArgSet()) << endl ;; 367 ; 368 ; 369 if (code==0) return getVal(normSet) ;; 370 if (normSet) {; 371 return analyticalIntegral(code,rangeName) / getNorm(normSet) ;; 372 } else {; 373 return analyticalIntegral(code,rangeNam",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:31584,Usability,learn,learn,31584,"(N_\mathrm{expect} \f$); 771/// of this PDF for the given number of observed events.; 772///; 773/// This function is a wrapper around; 774/// RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const,; 775/// where the number of observed events and observables to be used as the; 776/// normalization set for the pdf is extracted from a RooAbsData.; 777///; 778/// For successful operation, the PDF implementation must indicate that; 779/// it is extendable by overloading `canBeExtended()`, and must; 780/// implement the `expectedEvents()` function.; 781///; 782/// \param[in] data The RooAbsData to retrieve the set of observables and; 783/// number of expected events.; 784/// \param[in] weightSquared If set to `true`, the extended term will be scaled by; 785/// the ratio of squared event weights over event weights:; 786/// \f$ \sum w_{i}^2 / \sum w_{i} \f$.; 787/// Intended to be used by fits with the `SumW2Error()` option that; 788/// can be passed to RooAbsPdf::fitTo(); 789/// (see the documentation of said function to learn more about the; 790/// interpretation of fits with squared weights).; 791/// \param[in] doOffset See RooAbsPdf::extendedTerm(double, RooArgSet const*, double, bool) const.; 792 ; 793double RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset) const {; 794 double sumW = data.sumEntries();; 795 double sumW2 = 0.0;; 796 if (weightSquared) {; 797 sumW2 = data.sumEntriesW2();; 798 }; 799 return extendedTerm(sumW, data.get(), sumW2, doOffset);; 800}; 801 ; 802 ; 803/** @fn RooAbsPdf::createNLL(); 804 *; 805 * @brief Construct representation of -log(L) of PDF with given dataset.; 806 *; 807 * If dataset is unbinned, an unbinned likelihood is constructed.; 808 * If the dataset is binned, a binned likelihood is constructed.; 809 *; 810 * @param data Reference to a RooAbsData object representing the dataset.; 811 * @param cmdArgs Variadic template arguments representing optional command arguments.; 812 * You can pa",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:45439,Usability,simpl,simplex,45439,"teNLL(); 975 *; 976 * <tr><th><th> Options to control flow of fit procedure; 977 * <tr><td> `Minimizer(""<type>"", ""<algo>"")` <td> Choose minimization package and optionally the algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer interface,; 978 * but others can be specified (through RooMinimizer interface).; 979 * <table>; 980 * <tr><th> Type <th> Algorithm; 981 * <tr><td> Minuit <td> migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve); 982 * <tr><td> Minuit2 <td> migrad, simplex, minimize, scan; 983 * <tr><td> GSLMultiMin <td> conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent; 984 * <tr><td> GSLSimAn <td> -; 985 * </table>; 986 *; 987 * <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; 988 * <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization of test statistic during minimization (on by default); 989 * <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; 990 * <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, off by default; 991 * <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; 992 * <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; 993 * <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 to 2, default is 1); 994 * <tr><td> `MaxCalls(int n)` <td> Change maximum number of likelihood function calls from MINUIT (if `n <= 0`, the default of 500 * #%parameters is used); 995 * <tr><td> `EvalErrorWall(bool flag=true)` <td> When parameters are in disallowed regions (e.g. PDF is negative), return very high value to fitter; 996 * to force it out of that region. This can, however, mean that the fitter gets lost in this region. If; 997 * this happens, try switching it off.; 998 * <tr><td> `RecoverFromUndefinedRegions(double strength)` <td> When PDF is invalid (e.g. parameter in undefined r",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:45466,Usability,simpl,simplex,45466,"teNLL(); 975 *; 976 * <tr><th><th> Options to control flow of fit procedure; 977 * <tr><td> `Minimizer(""<type>"", ""<algo>"")` <td> Choose minimization package and optionally the algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer interface,; 978 * but others can be specified (through RooMinimizer interface).; 979 * <table>; 980 * <tr><th> Type <th> Algorithm; 981 * <tr><td> Minuit <td> migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve); 982 * <tr><td> Minuit2 <td> migrad, simplex, minimize, scan; 983 * <tr><td> GSLMultiMin <td> conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent; 984 * <tr><td> GSLSimAn <td> -; 985 * </table>; 986 *; 987 * <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; 988 * <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization of test statistic during minimization (on by default); 989 * <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; 990 * <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, off by default; 991 * <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; 992 * <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; 993 * <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 to 2, default is 1); 994 * <tr><td> `MaxCalls(int n)` <td> Change maximum number of likelihood function calls from MINUIT (if `n <= 0`, the default of 500 * #%parameters is used); 995 * <tr><td> `EvalErrorWall(bool flag=true)` <td> When parameters are in disallowed regions (e.g. PDF is negative), return very high value to fitter; 996 * to force it out of that region. This can, however, mean that the fitter gets lost in this region. If; 997 * this happens, try switching it off.; 998 * <tr><td> `RecoverFromUndefinedRegions(double strength)` <td> When PDF is invalid (e.g. parameter in undefined r",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:45546,Usability,simpl,simplex,45546,"teNLL(); 975 *; 976 * <tr><th><th> Options to control flow of fit procedure; 977 * <tr><td> `Minimizer(""<type>"", ""<algo>"")` <td> Choose minimization package and optionally the algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer interface,; 978 * but others can be specified (through RooMinimizer interface).; 979 * <table>; 980 * <tr><th> Type <th> Algorithm; 981 * <tr><td> Minuit <td> migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve); 982 * <tr><td> Minuit2 <td> migrad, simplex, minimize, scan; 983 * <tr><td> GSLMultiMin <td> conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent; 984 * <tr><td> GSLSimAn <td> -; 985 * </table>; 986 *; 987 * <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; 988 * <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization of test statistic during minimization (on by default); 989 * <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; 990 * <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, off by default; 991 * <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; 992 * <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; 993 * <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 to 2, default is 1); 994 * <tr><td> `MaxCalls(int n)` <td> Change maximum number of likelihood function calls from MINUIT (if `n <= 0`, the default of 500 * #%parameters is used); 995 * <tr><td> `EvalErrorWall(bool flag=true)` <td> When parameters are in disallowed regions (e.g. PDF is negative), return very high value to fitter; 996 * to force it out of that region. This can, however, mean that the fitter gets lost in this region. If; 997 * this happens, try switching it off.; 998 * <tr><td> `RecoverFromUndefinedRegions(double strength)` <td> When PDF is invalid (e.g. parameter in undefined r",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:84334,Usability,simpl,simple,84334,"14 ; 1715 } else if (extended) {; 1716 ; 1717 // Extended mode, set contents to Poisson(pdf*nEvents); 1718 double w = RooRandom::randomGenerator()->Poisson(hist->weight()*nEvents) ;; 1719 hist->set(w,sqrt(w)) ;; 1720 ; 1721 } else {; 1722 ; 1723 // Regular mode, fill array of weights with Poisson(pdf*nEvents), but to not fill; 1724 // histogram yet.; 1725 if (hist->weight()>histMax) {; 1726 histMax = hist->weight() ;; 1727 }; 1728 histOut[i] = RooRandom::randomGenerator()->Poisson(hist->weight()*nEvents) ;; 1729 histOutSum += histOut[i] ;; 1730 }; 1731 }; 1732 ; 1733 ; 1734 if (!expectedData && !extended) {; 1735 ; 1736 // Second pass for regular mode - Trim/Extend dataset to exact number of entries; 1737 ; 1738 // Calculate difference between what is generated so far and what is requested; 1739 Int_t nEvtExtra = std::abs(Int_t(nEvents)-histOutSum) ;; 1740 Int_t wgt = (histOutSum>nEvents) ? -1 : 1 ;; 1741 ; 1742 // Perform simple binned accept/reject procedure to get to exact event count; 1743 std::size_t counter = 0;; 1744 bool havePrintedInfo = false;; 1745 while(nEvtExtra>0) {; 1746 ; 1747 Int_t ibinRand = RooRandom::randomGenerator()->Integer(hist->numEntries()) ;; 1748 hist->get(ibinRand) ;; 1749 double ranY = RooRandom::randomGenerator()->Uniform(histMax) ;; 1750 ; 1751 if (ranY<hist->weight()) {; 1752 if (wgt==1) {; 1753 histOut[ibinRand]++ ;; 1754 } else {; 1755 // If weight is negative, prior bin content must be at least 1; 1756 if (histOut[ibinRand]>0) {; 1757 histOut[ibinRand]-- ;; 1758 } else {; 1759 continue ;; 1760 }; 1761 }; 1762 nEvtExtra-- ;; 1763 }; 1764 ; 1765 if ((counter++ > 10*nEvents || nEvents > 1.E7) && !havePrintedInfo) {; 1766 havePrintedInfo = true;; 1767 coutP(Generation) << ""RooAbsPdf::generateBinned("" << GetName() << "") Performing costly accept/reject sampling. If this takes too long, use ""; 1768 << ""extended mode to speed up the process."" << std::endl;; 1769 }; 1770 }; 1771 ; 1772 // Transfer working array to histogram; 1773 for (int ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:102500,Usability,clear,clear,102500,"sRange(thisRangeName)) {; 2064 coutE(Plotting) << ""Range '"" << rangeNameToken << ""' not defined for variable '""; 2065 << frame->getPlotVar()->GetName() << ""'. Ignoring ..."" << std::endl;; 2066 continue;; 2067 }; 2068 rangeLim.push_back(frame->getPlotVar()->getRange(thisRangeName));; 2069 }; 2070 adjustNorm = pc.getInt(""rangeWNAdjustNorm"") ;; 2071 hasCustomRange = true ;; 2072 ; 2073 coutI(Plotting) << ""RooAbsPdf::plotOn("" << GetName() << "") only plotting range '"" << pc.getString(""rangeName"", """", false) << ""'"" ;; 2074 if (!pc.hasProcessed(""NormRange"")) {; 2075 ccoutI(Plotting) << "", curve is normalized to data in "" << (adjustNorm?""given"":""full"") << "" range"" << endl ;; 2076 } else {; 2077 ccoutI(Plotting) << endl ;; 2078 }; 2079 ; 2080 nameSuffix.append(""_Range["" + std::string(pc.getString(""rangeName"")) + ""]"");; 2081 }; 2082 // Specification of a normalization range override those in a regular range; 2083 if (pc.hasProcessed(""NormRange"")) {; 2084 rangeLim.clear();; 2085 for (const auto& rangeNameToken : ROOT::Split(pc.getString(""normRangeName"", """", false), "","")) {; 2086 const char* thisRangeName = rangeNameToken.empty() ? nullptr : rangeNameToken.c_str();; 2087 if (thisRangeName && !frame->getPlotVar()->hasRange(thisRangeName)) {; 2088 coutE(Plotting) << ""Range '"" << rangeNameToken << ""' not defined for variable '""; 2089 << frame->getPlotVar()->GetName() << ""'. Ignoring ..."" << std::endl;; 2090 continue;; 2091 }; 2092 rangeLim.push_back(frame->getPlotVar()->getRange(thisRangeName));; 2093 }; 2094 adjustNorm = true ;; 2095 hasCustomRange = true ;; 2096 coutI(Plotting) << ""RooAbsPdf::plotOn("" << GetName() << "") p.d.f. curve is normalized using explicit choice of ranges '"" << pc.getString(""normRangeName"", """", false) << ""'"" << endl ;; 2097 ; 2098 nameSuffix.append(""_NormRange["" + std::string(pc.getString(""rangeName"")) + ""]"");; 2099 ; 2100 }; 2101 ; 2102 if (hasCustomRange && adjustNorm) {; 2103 // If overlapping ranges were given, remove them now; 2104 const std::size_t o",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:129163,Usability,clear,cleared,129163,"), _init(init); 2689{; 2690}; 2691 ; 2692 ; 2693namespace {; 2694 ; 2695void sterilizeClientCaches(RooAbsArg & arg) {; 2696 auto const& clients = arg.clients();; 2697 for(std::size_t iClient = 0; iClient < clients.size(); ++iClient) {; 2698 ; 2699 const std::size_t oldClientsSize = clients.size();; 2700 RooAbsArg* client = clients[iClient];; 2701 ; 2702 for(int iCache = 0; iCache < client->numCaches(); ++iCache) {; 2703 if(auto cacheMgr = dynamic_cast<RooObjCacheManager*>(client->getCache(iCache))) {; 2704 cacheMgr->sterilize();; 2705 }; 2706 }; 2707 ; 2708 // It can happen that the objects cached by the client are also clients of; 2709 // the arg itself! In that case, the position of the client in the client; 2710 // list might have changed, and we need to find the new index.; 2711 if(clients.size() != oldClientsSize) {; 2712 auto clientIter = std::find(clients.begin(), clients.end(), client);; 2713 if(clientIter == clients.end()) {; 2714 throw std::runtime_error(""After a clients caches were cleared, the client was gone! This should not happen."");; 2715 }; 2716 iClient = std::distance(clients.begin(), clientIter);; 2717 }; 2718 }; 2719}; 2720 ; 2721} // namespace; 2722 ; 2723 ; 2724////////////////////////////////////////////////////////////////////////////////; 2725 ; 2726void RooAbsPdf::setNormRange(const char* rangeName); 2727{; 2728 if (rangeName) {; 2729 _normRange = rangeName ;; 2730 } else {; 2731 _normRange.Clear() ;; 2732 }; 2733 ; 2734 // the stuff that the clients have cached may depend on the normalization range; 2735 sterilizeClientCaches(*this);; 2736 ; 2737 if (_norm) {; 2738 _normMgr.sterilize() ;; 2739 _norm = nullptr ;; 2740 }; 2741}; 2742 ; 2743 ; 2744////////////////////////////////////////////////////////////////////////////////; 2745 ; 2746void RooAbsPdf::setNormRangeOverride(const char* rangeName); 2747{; 2748 if (rangeName) {; 2749 _normRangeOverride = rangeName ;; 2750 } else {; 2751 _normRangeOverride.Clear() ;; 2752 }; 2753 ; 2754 // the ",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:135347,Usability,clear,clearValueAndShapeDirtyvoid,135347,"inition TGWin32VirtualXProxy.cxx:104; inputOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void inputDefinition TGWin32VirtualXProxy.cxx:142; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; namechar name[80]Definition TGX11.cxx:110; xminfloat xminDefinition THbookFile.cxx:95; yminfloat yminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; ymaxfloat ymaxDefinition THbookFile.cxx:95; TMath.h; TMatrixDSym.h; TMatrixD.h; TPaveText.h; Formchar * Form(const char *fmt,...)Formats a string in a circular formatting buffer.Definition TString.cxx:2489; RooAbsArgCommon abstract base class for objects that represent a value and a ""shape"" in RooFit.Definition RooAbsArg.h:79; RooAbsArg::clearValueAndShapeDirtyvoid clearValueAndShapeDirty() constDefinition RooAbsArg.h:571; RooAbsArg::Printvoid Print(Option_t *options=nullptr) const overridePrint the object to the defaultPrintStream().Definition RooAbsArg.h:294; RooAbsArg::dependsOnbool dependsOn(const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) constTest whether we depend on (ie, are served by) any object in the specified collection.Definition RooAbsArg.cxx:850; RooAbsArg::constR__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg constDefinition RooAbsArg.h:145; RooAbsArg::setOperModevoid setOperMode(OperMode mode, bool recurseADirty=true)Set the operation mode of this node.Definition RooAbsArg.cxx:1963; RooAbsArg::getParametersRooFit::OwningPtr< RooArgSet > getParameters(const RooAbsData *data, bool stripDisconnected=true) constCreate a list of leaf nodes in the arg tree starti",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:135375,Usability,clear,clearValueAndShapeDirty,135375,"inition TGWin32VirtualXProxy.cxx:104; inputOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void inputDefinition TGWin32VirtualXProxy.cxx:142; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; namechar name[80]Definition TGX11.cxx:110; xminfloat xminDefinition THbookFile.cxx:95; yminfloat yminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; ymaxfloat ymaxDefinition THbookFile.cxx:95; TMath.h; TMatrixDSym.h; TMatrixD.h; TPaveText.h; Formchar * Form(const char *fmt,...)Formats a string in a circular formatting buffer.Definition TString.cxx:2489; RooAbsArgCommon abstract base class for objects that represent a value and a ""shape"" in RooFit.Definition RooAbsArg.h:79; RooAbsArg::clearValueAndShapeDirtyvoid clearValueAndShapeDirty() constDefinition RooAbsArg.h:571; RooAbsArg::Printvoid Print(Option_t *options=nullptr) const overridePrint the object to the defaultPrintStream().Definition RooAbsArg.h:294; RooAbsArg::dependsOnbool dependsOn(const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) constTest whether we depend on (ie, are served by) any object in the specified collection.Definition RooAbsArg.cxx:850; RooAbsArg::constR__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg constDefinition RooAbsArg.h:145; RooAbsArg::setOperModevoid setOperMode(OperMode mode, bool recurseADirty=true)Set the operation mode of this node.Definition RooAbsArg.cxx:1963; RooAbsArg::getParametersRooFit::OwningPtr< RooArgSet > getParameters(const RooAbsData *data, bool stripDisconnected=true) constCreate a list of leaf nodes in the arg tree starti",MatchSource.WIKI,doc/master/RooAbsPdf_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:6396,Availability,error,errors,6396,"const RooCmdArg& arg4={},; 118 const RooCmdArg& arg5={},const RooCmdArg& arg6={}) const;; 119 virtual RooFit::OwningPtr<RooDataHist> generateBinned(const RooArgSet &whatVars, double nEvents, bool expectedData=false, bool extended=false) const;; 120 ; 121 virtual RooFit::OwningPtr<RooDataSet> generateSimGlobal(const RooArgSet& whatVars, Int_t nEvents) ;; 122 ; 123 ///Helper calling plotOn(RooPlot*, RooLinkedList&) const; 124 RooPlot* plotOn(RooPlot* frame,; 125 const RooCmdArg& arg1={}, const RooCmdArg& arg2={},; 126 const RooCmdArg& arg3={}, const RooCmdArg& arg4={},; 127 const RooCmdArg& arg5={}, const RooCmdArg& arg6={},; 128 const RooCmdArg& arg7={}, const RooCmdArg& arg8={},; 129 const RooCmdArg& arg9={}, const RooCmdArg& arg10={}; 130 ) const override {; 131 return RooAbsReal::plotOn(frame,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10) ;; 132 }; 133 RooPlot* plotOn(RooPlot* frame, RooLinkedList& cmdList) const override ;; 134 ; 135 /// Add a box with parameter values (and errors) to the specified frame; 136 virtual RooPlot* paramOn(RooPlot* frame,; 137 const RooCmdArg& arg1={}, const RooCmdArg& arg2={},; 138 const RooCmdArg& arg3={}, const RooCmdArg& arg4={},; 139 const RooCmdArg& arg5={}, const RooCmdArg& arg6={},; 140 const RooCmdArg& arg7={}, const RooCmdArg& arg8={}) ;; 141 ; 142 // Built-in generator support; 143 virtual Int_t getGenerator(const RooArgSet& directVars, RooArgSet &generateVars, bool staticInitOK=true) const;; 144 virtual void initGenerator(Int_t code) ;; 145 virtual void generateEvent(Int_t code);; 146 virtual bool isDirectGenSafe(const RooAbsArg& arg) const ;; 147 ; 148 // Configuration of MC generators used for this pdf; 149 const RooNumGenConfig* getGeneratorConfig() const ;; 150 static RooNumGenConfig* defaultGeneratorConfig() ;; 151 RooNumGenConfig* specialGeneratorConfig() const ;; 152 RooNumGenConfig* specialGeneratorConfig(bool createOnTheFly) ;; 153 void setGeneratorConfig() ;; 154 void setGeneratorConfig(const RooNumGenConfig& ",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:16205,Availability,error,errors,16205,"roto,Int_t nGen,bool resample=false) const ;; 310 ; 311 // This also forces the definition of a copy ctor in derived classes; 312 RooAbsPdf(const RooAbsPdf& other, const char* name = nullptr);; 313 ; 314 static Int_t _verboseEval ;; 315 ; 316 virtual bool syncNormalization(const RooArgSet* dset, bool adjustProxies=true) const ;; 317 ; 318 mutable double _rawValue = 0;; 319 mutable RooAbsReal* _norm = nullptr; //! Normalization integral (owned by _normMgr); 320 mutable RooArgSet const* _normSet = nullptr; //! Normalization set with for above integral; 321 ; 322 class CacheElem : public RooAbsCacheElement {; 323 public:; 324 CacheElem(RooAbsReal& norm) : _norm(&norm) {} ;; 325 ~CacheElem() override ;; 326 RooArgList containedArgs(Action) override { return RooArgList(*_norm) ; }; 327 std::unique_ptr<RooAbsReal> _norm;; 328 } ;; 329 mutable RooObjCacheManager _normMgr ; //! The cache manager; 330 ; 331 bool redirectServersHook(const RooAbsCollection & newServerList, bool mustReplaceAll,; 332 bool nameChange, bool isRecursiveStep) override;; 333 ; 334 mutable Int_t _errorCount = 0; ///< Number of errors remaining to print; 335 mutable Int_t _traceCount = 0; ///< Number of traces remaining to print; 336 mutable Int_t _negCount = 0; ///< Number of negative probabilities remaining to print; 337 ; 338 bool _selectComp = false; ///< Component selection flag for RooAbsPdf::plotCompOn; 339 ; 340 std::unique_ptr<RooNumGenConfig> _specGeneratorConfig ; ///<! MC generator configuration specific for this object; 341 ; 342 TString _normRange ; ///< Normalization range; 343 static TString _normRangeOverride ;; 344 ; 345private:; 346 mutable RooFit::UniqueId<RooArgSet>::Value_t _normSetId = RooFit::UniqueId<RooArgSet>::nullval; ///<! Unique ID of the currently-active normalization set; 347 ; 348 friend class RooAbsReal;; 349 friend class RooChi2Var;; 350 ; 351 ClassDefOverride(RooAbsPdf,5) // Abstract PDF with normalization support; 352};; 353 ; 354 ; 355 ; 356 ; 357#endif; RooAbsReal.",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:22763,Availability,error,error,22763,"AbsPdf::plotCompOn.Definition RooAbsPdf.h:338; RooAbsPdf::generateEventvirtual void generateEvent(Int_t code)Interface for generation of an event using the algorithm corresponding to the specified code.Definition RooAbsPdf.cxx:1544; RooAbsPdf::createScanCdfRooFit::OwningPtr< RooAbsReal > createScanCdf(const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder)Definition RooAbsPdf.cxx:2545; RooAbsPdf::expectedEventsdouble expectedEvents(const RooArgSet &nset) constReturn expected number of events to be used in calculation of extended likelihood.Definition RooAbsPdf.h:232; RooAbsPdf::getConstraintsvirtual RooArgSet * getConstraints(const RooArgSet &, RooArgSet const &, RooArgSet &) constDefinition RooAbsPdf.h:169; RooAbsPdf::setGeneratorConfigvoid setGeneratorConfig()Remove the specialized numeric MC generator configuration associated with this object.Definition RooAbsPdf.cxx:2675; RooAbsPdf::resetErrorCountersvirtual void resetErrorCounters(Int_t resetValue=10)Reset error counter to given value, limiting the number of future error messages for this pdf to 'res...Definition RooAbsPdf.cxx:586; RooAbsPdf::verboseEvalstatic int verboseEval()Return global level of verbosity for p.d.f. evaluations.Definition RooAbsPdf.cxx:2418; RooAbsPdf::createCdfRooFit::OwningPtr< RooAbsReal > createCdf(const RooArgSet &iset, const RooArgSet &nset=RooArgSet())Create a cumulative distribution function of this p.d.f in terms of the observables listed in iset.Definition RooAbsPdf.cxx:2468; RooAbsPdf::isActiveNormSetbool isActiveNormSet(RooArgSet const *normSet) constChecks if normSet is the currently active normalization set of this PDF, meaning is exactly the same ...Definition RooAbsPdf.h:299; RooAbsPdf::expectedEventsvirtual double expectedEvents(const RooArgSet *nset) constReturn expected number of events to be used in calculation of extended likelihood.Definition RooAbsPdf.cxx:2398; RooAbsPdf::binnedGenContextvirtual RooAbsGenContext * binnedGenContext(const RooArgS",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:22823,Availability,error,error,22823,"AbsPdf::plotCompOn.Definition RooAbsPdf.h:338; RooAbsPdf::generateEventvirtual void generateEvent(Int_t code)Interface for generation of an event using the algorithm corresponding to the specified code.Definition RooAbsPdf.cxx:1544; RooAbsPdf::createScanCdfRooFit::OwningPtr< RooAbsReal > createScanCdf(const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder)Definition RooAbsPdf.cxx:2545; RooAbsPdf::expectedEventsdouble expectedEvents(const RooArgSet &nset) constReturn expected number of events to be used in calculation of extended likelihood.Definition RooAbsPdf.h:232; RooAbsPdf::getConstraintsvirtual RooArgSet * getConstraints(const RooArgSet &, RooArgSet const &, RooArgSet &) constDefinition RooAbsPdf.h:169; RooAbsPdf::setGeneratorConfigvoid setGeneratorConfig()Remove the specialized numeric MC generator configuration associated with this object.Definition RooAbsPdf.cxx:2675; RooAbsPdf::resetErrorCountersvirtual void resetErrorCounters(Int_t resetValue=10)Reset error counter to given value, limiting the number of future error messages for this pdf to 'res...Definition RooAbsPdf.cxx:586; RooAbsPdf::verboseEvalstatic int verboseEval()Return global level of verbosity for p.d.f. evaluations.Definition RooAbsPdf.cxx:2418; RooAbsPdf::createCdfRooFit::OwningPtr< RooAbsReal > createCdf(const RooArgSet &iset, const RooArgSet &nset=RooArgSet())Create a cumulative distribution function of this p.d.f in terms of the observables listed in iset.Definition RooAbsPdf.cxx:2468; RooAbsPdf::isActiveNormSetbool isActiveNormSet(RooArgSet const *normSet) constChecks if normSet is the currently active normalization set of this PDF, meaning is exactly the same ...Definition RooAbsPdf.h:299; RooAbsPdf::expectedEventsvirtual double expectedEvents(const RooArgSet *nset) constReturn expected number of events to be used in calculation of extended likelihood.Definition RooAbsPdf.cxx:2398; RooAbsPdf::binnedGenContextvirtual RooAbsGenContext * binnedGenContext(const RooArgS",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:26836,Availability,error,errors,26836,"rridePrint multi line detailed information of this RooAbsPdf.Definition RooAbsPdf.cxx:1100; RooAbsPdf::_traceCountInt_t _traceCountNumber of traces remaining to print.Definition RooAbsPdf.h:335; RooAbsPdf::canBeExtendedbool canBeExtended() constIf true, PDF can provide extended likelihood term.Definition RooAbsPdf.h:218; RooAbsPdf::_normRooAbsReal * _normDefinition RooAbsPdf.h:319; RooAbsPdf::setTraceCountervoid setTraceCounter(Int_t value, bool allNodes=false)Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'val...Definition RooAbsPdf.cxx:598; RooAbsPdf::prepareMultiGenGenSpec * prepareMultiGen(const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={})Prepare GenSpec configuration object for efficient generation of multiple datasets from identical spe...Definition RooAbsPdf.cxx:1299; RooAbsPdf::_errorCountInt_t _errorCountNumber of errors remaining to print.Definition RooAbsPdf.h:334; RooAbsPdf::ExtendModeExtendModeDefinition RooAbsPdf.h:212; RooAbsPdf::CanBeExtended@ CanBeExtendedDefinition RooAbsPdf.h:212; RooAbsPdf::MustBeExtended@ MustBeExtendedDefinition RooAbsPdf.h:212; RooAbsPdf::CanNotBeExtended@ CanNotBeExtendedDefinition RooAbsPdf.h:212; RooAbsPdf::_rawValuedouble _rawValueDefinition RooAbsPdf.h:318; RooAbsPdf::normRangeconst char * normRange() constDefinition RooAbsPdf.h:250; RooAbsPdf::createExpectedEventsFuncvirtual std::unique_ptr< RooAbsReal > createExpectedEventsFunc(const RooArgSet *nset) constReturns an object that represents the expected number of events for a given normalization set,...Definition RooAbsPdf.cxx:2812; RooAbsPdf::paramOnvirtual RooPlot * paramOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:27858,Availability,error,errors,27858," multiple datasets from identical spe...Definition RooAbsPdf.cxx:1299; RooAbsPdf::_errorCountInt_t _errorCountNumber of errors remaining to print.Definition RooAbsPdf.h:334; RooAbsPdf::ExtendModeExtendModeDefinition RooAbsPdf.h:212; RooAbsPdf::CanBeExtended@ CanBeExtendedDefinition RooAbsPdf.h:212; RooAbsPdf::MustBeExtended@ MustBeExtendedDefinition RooAbsPdf.h:212; RooAbsPdf::CanNotBeExtended@ CanNotBeExtendedDefinition RooAbsPdf.h:212; RooAbsPdf::_rawValuedouble _rawValueDefinition RooAbsPdf.h:318; RooAbsPdf::normRangeconst char * normRange() constDefinition RooAbsPdf.h:250; RooAbsPdf::createExpectedEventsFuncvirtual std::unique_ptr< RooAbsReal > createExpectedEventsFunc(const RooArgSet *nset) constReturns an object that represents the expected number of events for a given normalization set,...Definition RooAbsPdf.cxx:2812; RooAbsPdf::paramOnvirtual RooPlot * paramOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={})Add a box with parameter values (and errors) to the specified frame.Definition RooAbsPdf.cxx:2285; RooAbsPdf::fitToRooFit::OwningPtr< RooFitResult > fitTo(RooAbsData &data, CmdArgs_t const &... cmdArgs)Fit PDF to given dataset.Definition RooAbsPdf.h:157; RooAbsPdf::_negCountInt_t _negCountNumber of negative probabilities remaining to print.Definition RooAbsPdf.h:336; RooAbsPdf::generateRooFit::OwningPtr< RooDataSet > generate(const RooArgSet &whatVars, Int_t nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={})See RooAbsPdf::generate(const RooArgSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,...Definition RooAbsPdf.h:57; RooAbsPdf::getNormObjvirtual const RooAbsReal * getNormObj(const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) constReturn pointer to RooAbsReal objec",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:33774,Availability,error,error,33774,"oid getLogProbabilities(std::span< const double > pdfValues, double *output) constDefinition RooAbsPdf.cxx:671; RooAbsPdf::_normRangeOverridestatic TString _normRangeOverrideDefinition RooAbsPdf.h:343; RooAbsPdf::_verboseEvalstatic Int_t _verboseEvalDefinition RooAbsPdf.h:314; RooAbsPdf::extendedTermdouble extendedTerm(double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) constDefinition RooAbsPdf.cxx:730; RooAbsPdf::getGeneratorvirtual Int_t getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) constLoad generatedVars with the subset of directVars that we can generate events for, and return a code t...Definition RooAbsPdf.cxx:1522; RooAbsPdf::createProjectionvirtual RooAbsPdf * createProjection(const RooArgSet &iset)Return a p.d.f that represent a projection of this p.d.f integrated over given observables.Definition RooAbsPdf.cxx:2446; RooAbsPdf::getLogValvirtual double getLogVal(const RooArgSet *set=nullptr) constReturn the log of the current value with given normalization An error message is printed if the argum...Definition RooAbsPdf.cxx:620; RooAbsRealAbstract base class for objects that represent a real value and implements functionality common to al...Definition RooAbsReal.h:59; RooAbsReal::maxValvirtual double maxVal(Int_t code) constReturn maximum value for set of observables identified by code assigned in getMaxVal.Definition RooAbsReal.cxx:3397; RooAbsReal::plotOnvirtual RooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) constPlot (project) PDF on specified frame.Definition RooAbsReal.cxx:1611; RooArgListRooArgList is a container object that can hold multiple RooAbsArg objects.Definition RooArgList.h:22; RooArgSetRooArgSet is a container object that can",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:4015,Deployability,configurat,configuration,4015,"ts How many events to generate; 56 /// \param arg1,arg2,arg3,arg4,arg5 Optional command arguments.; 57 RooFit::OwningPtr<RooDataSet> generate(const RooArgSet &whatVars, Int_t nEvents, const RooCmdArg& arg1,; 58 const RooCmdArg& arg2={}, const RooCmdArg& arg3={},; 59 const RooCmdArg& arg4={}, const RooCmdArg& arg5={}) {; 60 return generate(whatVars,RooFit::NumEvents(nEvents),arg1,arg2,arg3,arg4,arg5) ;; 61 }; 62 RooFit::OwningPtr<RooDataSet> generate(const RooArgSet &whatVars,; 63 const RooCmdArg& arg1={},const RooCmdArg& arg2={},; 64 const RooCmdArg& arg3={},const RooCmdArg& arg4={},; 65 const RooCmdArg& arg5={},const RooCmdArg& arg6={}) ;; 66 RooFit::OwningPtr<RooDataSet> generate(const RooArgSet &whatVars, double nEvents = 0, bool verbose=false, bool autoBinned=true,; 67 const char* binnedTag="""", bool expectedData=false, bool extended = false) const;; 68 RooFit::OwningPtr<RooDataSet> generate(const RooArgSet &whatVars, const RooDataSet &prototype, Int_t nEvents= 0,; 69 bool verbose=false, bool randProtoOrder=false, bool resampleProto=false) const;; 70 ; 71 ; 72 class GenSpec {; 73 public:; 74 virtual ~GenSpec() ;; 75 GenSpec() = default;; 76 ; 77 private:; 78 GenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen, bool extended,; 79 bool randProto, bool resampleProto, TString dsetName, bool init=false) ;; 80 GenSpec(const GenSpec& other) ;; 81 ; 82 friend class RooAbsPdf ;; 83 std::unique_ptr<RooAbsGenContext> _genContext;; 84 RooArgSet _whatVars ;; 85 RooDataSet* _protoData = nullptr;; 86 Int_t _nGen = 0;; 87 bool _extended = false;; 88 bool _randProto = false;; 89 bool _resampleProto = false;; 90 TString _dsetName ;; 91 bool _init = false;; 92 ; 93 ClassDef(GenSpec,0) // Generation specification; 94 } ;; 95 ; 96 ///Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification.; 97 GenSpec* prepareMultiGen(const RooArgSet &whatVars,; 98 const RooCmdArg& arg1={},const RooCmd",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:16578,Deployability,configurat,configuration,16578,"roto,Int_t nGen,bool resample=false) const ;; 310 ; 311 // This also forces the definition of a copy ctor in derived classes; 312 RooAbsPdf(const RooAbsPdf& other, const char* name = nullptr);; 313 ; 314 static Int_t _verboseEval ;; 315 ; 316 virtual bool syncNormalization(const RooArgSet* dset, bool adjustProxies=true) const ;; 317 ; 318 mutable double _rawValue = 0;; 319 mutable RooAbsReal* _norm = nullptr; //! Normalization integral (owned by _normMgr); 320 mutable RooArgSet const* _normSet = nullptr; //! Normalization set with for above integral; 321 ; 322 class CacheElem : public RooAbsCacheElement {; 323 public:; 324 CacheElem(RooAbsReal& norm) : _norm(&norm) {} ;; 325 ~CacheElem() override ;; 326 RooArgList containedArgs(Action) override { return RooArgList(*_norm) ; }; 327 std::unique_ptr<RooAbsReal> _norm;; 328 } ;; 329 mutable RooObjCacheManager _normMgr ; //! The cache manager; 330 ; 331 bool redirectServersHook(const RooAbsCollection & newServerList, bool mustReplaceAll,; 332 bool nameChange, bool isRecursiveStep) override;; 333 ; 334 mutable Int_t _errorCount = 0; ///< Number of errors remaining to print; 335 mutable Int_t _traceCount = 0; ///< Number of traces remaining to print; 336 mutable Int_t _negCount = 0; ///< Number of negative probabilities remaining to print; 337 ; 338 bool _selectComp = false; ///< Component selection flag for RooAbsPdf::plotCompOn; 339 ; 340 std::unique_ptr<RooNumGenConfig> _specGeneratorConfig ; ///<! MC generator configuration specific for this object; 341 ; 342 TString _normRange ; ///< Normalization range; 343 static TString _normRangeOverride ;; 344 ; 345private:; 346 mutable RooFit::UniqueId<RooArgSet>::Value_t _normSetId = RooFit::UniqueId<RooArgSet>::nullval; ///<! Unique ID of the currently-active normalization set; 347 ; 348 friend class RooAbsReal;; 349 friend class RooChi2Var;; 350 ; 351 ClassDefOverride(RooAbsPdf,5) // Abstract PDF with normalization support; 352};; 353 ; 354 ; 355 ; 356 ; 357#endif; RooAbsReal.",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:21036,Deployability,configurat,configuration,21036,"df.h:85; RooAbsPdfAbstract interface for all probability density functions.Definition RooAbsPdf.h:40; RooAbsPdf::syncNormalizationvirtual bool syncNormalization(const RooArgSet *dset, bool adjustProxies=true) constVerify that the normalization integral cached with this PDF is valid for given set of normalization o...Definition RooAbsPdf.cxx:481; RooAbsPdf::getNormdouble getNorm(const RooArgSet &nset) constGet normalisation term needed to normalise the raw values returned by getVal().Definition RooAbsPdf.h:195; RooAbsPdf::compileForNormSetstd::unique_ptr< RooAbsArg > compileForNormSet(RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const overrideDefinition RooAbsPdf.cxx:2788; RooAbsPdf::_normMgrRooObjCacheManager _normMgrDefinition RooAbsPdf.h:329; RooAbsPdf::_normSetIdRooFit::UniqueId< RooArgSet >::Value_t _normSetId! Unique ID of the currently-active normalization setDefinition RooAbsPdf.h:346; RooAbsPdf::_specGeneratorConfigstd::unique_ptr< RooNumGenConfig > _specGeneratorConfig! MC generator configuration specific for this objectDefinition RooAbsPdf.h:340; RooAbsPdf::createNLLRooFit::OwningPtr< RooAbsReal > createNLL(RooAbsData &data, CmdArgs_t const &... cmdArgs)Construct representation of -log(L) of PDF with given dataset.Definition RooAbsPdf.h:163; RooAbsPdf::getValVdouble getValV(const RooArgSet *set=nullptr) const overrideReturn current value, normalized by integrating over the observables in nset.Definition RooAbsPdf.cxx:319; RooAbsPdf::fitToImplvirtual std::unique_ptr< RooFitResult > fitToImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the likelihood fitting routine.Definition RooAbsPdf.cxx:1072; RooAbsPdf::_selectCompbool _selectCompComponent selection flag for RooAbsPdf::plotCompOn.Definition RooAbsPdf.h:338; RooAbsPdf::generateEventvirtual void generateEvent(Int_t code)Interface for generation of an event using the algorithm corresponding to the specified code.Definition RooAbsPdf.cxx:1544; RooAbsPdf::create",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:21414,Deployability,integrat,integrating,21414,"ormdouble getNorm(const RooArgSet &nset) constGet normalisation term needed to normalise the raw values returned by getVal().Definition RooAbsPdf.h:195; RooAbsPdf::compileForNormSetstd::unique_ptr< RooAbsArg > compileForNormSet(RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const overrideDefinition RooAbsPdf.cxx:2788; RooAbsPdf::_normMgrRooObjCacheManager _normMgrDefinition RooAbsPdf.h:329; RooAbsPdf::_normSetIdRooFit::UniqueId< RooArgSet >::Value_t _normSetId! Unique ID of the currently-active normalization setDefinition RooAbsPdf.h:346; RooAbsPdf::_specGeneratorConfigstd::unique_ptr< RooNumGenConfig > _specGeneratorConfig! MC generator configuration specific for this objectDefinition RooAbsPdf.h:340; RooAbsPdf::createNLLRooFit::OwningPtr< RooAbsReal > createNLL(RooAbsData &data, CmdArgs_t const &... cmdArgs)Construct representation of -log(L) of PDF with given dataset.Definition RooAbsPdf.h:163; RooAbsPdf::getValVdouble getValV(const RooArgSet *set=nullptr) const overrideReturn current value, normalized by integrating over the observables in nset.Definition RooAbsPdf.cxx:319; RooAbsPdf::fitToImplvirtual std::unique_ptr< RooFitResult > fitToImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the likelihood fitting routine.Definition RooAbsPdf.cxx:1072; RooAbsPdf::_selectCompbool _selectCompComponent selection flag for RooAbsPdf::plotCompOn.Definition RooAbsPdf.h:338; RooAbsPdf::generateEventvirtual void generateEvent(Int_t code)Interface for generation of an event using the algorithm corresponding to the specified code.Definition RooAbsPdf.cxx:1544; RooAbsPdf::createScanCdfRooFit::OwningPtr< RooAbsReal > createScanCdf(const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder)Definition RooAbsPdf.cxx:2545; RooAbsPdf::expectedEventsdouble expectedEvents(const RooArgSet &nset) constReturn expected number of events to be used in calculation of extended likelihood.Definition RooAbsPdf.h:232; RooAbsPdf::get",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:22603,Deployability,configurat,configuration,22603,", const RooLinkedList &cmdList)Protected implementation of the likelihood fitting routine.Definition RooAbsPdf.cxx:1072; RooAbsPdf::_selectCompbool _selectCompComponent selection flag for RooAbsPdf::plotCompOn.Definition RooAbsPdf.h:338; RooAbsPdf::generateEventvirtual void generateEvent(Int_t code)Interface for generation of an event using the algorithm corresponding to the specified code.Definition RooAbsPdf.cxx:1544; RooAbsPdf::createScanCdfRooFit::OwningPtr< RooAbsReal > createScanCdf(const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder)Definition RooAbsPdf.cxx:2545; RooAbsPdf::expectedEventsdouble expectedEvents(const RooArgSet &nset) constReturn expected number of events to be used in calculation of extended likelihood.Definition RooAbsPdf.h:232; RooAbsPdf::getConstraintsvirtual RooArgSet * getConstraints(const RooArgSet &, RooArgSet const &, RooArgSet &) constDefinition RooAbsPdf.h:169; RooAbsPdf::setGeneratorConfigvoid setGeneratorConfig()Remove the specialized numeric MC generator configuration associated with this object.Definition RooAbsPdf.cxx:2675; RooAbsPdf::resetErrorCountersvirtual void resetErrorCounters(Int_t resetValue=10)Reset error counter to given value, limiting the number of future error messages for this pdf to 'res...Definition RooAbsPdf.cxx:586; RooAbsPdf::verboseEvalstatic int verboseEval()Return global level of verbosity for p.d.f. evaluations.Definition RooAbsPdf.cxx:2418; RooAbsPdf::createCdfRooFit::OwningPtr< RooAbsReal > createCdf(const RooArgSet &iset, const RooArgSet &nset=RooArgSet())Create a cumulative distribution function of this p.d.f in terms of the observables listed in iset.Definition RooAbsPdf.cxx:2468; RooAbsPdf::isActiveNormSetbool isActiveNormSet(RooArgSet const *normSet) constChecks if normSet is the currently active normalization set of this PDF, meaning is exactly the same ...Definition RooAbsPdf.h:299; RooAbsPdf::expectedEventsvirtual double expectedEvents(const RooArgSet *nset) constReturn",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:25429,Deployability,integrat,integrator,25429,"mRangevoid setNormRange(const char *rangeName)Definition RooAbsPdf.cxx:2726; RooAbsPdf::getNormIntegralconst RooAbsReal * getNormIntegral(const RooArgSet &nset) constDefinition RooAbsPdf.h:255; RooAbsPdf::~RooAbsPdf~RooAbsPdf() overrideDestructor.Definition RooAbsPdf.cxx:277; RooAbsPdf::mustBeExtendedbool mustBeExtended() constIf true PDF must provide extended likelihood term.Definition RooAbsPdf.h:222; RooAbsPdf::_normSetRooArgSet const * _normSetNormalization integral (owned by _normMgr)Definition RooAbsPdf.h:320; RooAbsPdf::plotOnRooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const overrideHelper calling plotOn(RooPlot*, RooLinkedList&) const.Definition RooAbsPdf.h:124; RooAbsPdf::specialGeneratorConfigRooNumGenConfig * specialGeneratorConfig() constReturns the specialized integrator configuration for this RooAbsReal.Definition RooAbsPdf.cxx:2623; RooAbsPdf::selfNormalizedvirtual bool selfNormalized() constShows if a PDF is self-normalized, which means that no attempt is made to add a normalization term.Definition RooAbsPdf.h:207; RooAbsPdf::printMultilinevoid printMultiline(std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const overridePrint multi line detailed information of this RooAbsPdf.Definition RooAbsPdf.cxx:1100; RooAbsPdf::_traceCountInt_t _traceCountNumber of traces remaining to print.Definition RooAbsPdf.h:335; RooAbsPdf::canBeExtendedbool canBeExtended() constIf true, PDF can provide extended likelihood term.Definition RooAbsPdf.h:218; RooAbsPdf::_normRooAbsReal * _normDefinition RooAbsPdf.h:319; RooAbsPdf::setTraceCountervoid setTraceCounter(Int_t value, bool allNodes=false)Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'val...Definiti",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:25440,Deployability,configurat,configuration,25440,"mRangevoid setNormRange(const char *rangeName)Definition RooAbsPdf.cxx:2726; RooAbsPdf::getNormIntegralconst RooAbsReal * getNormIntegral(const RooArgSet &nset) constDefinition RooAbsPdf.h:255; RooAbsPdf::~RooAbsPdf~RooAbsPdf() overrideDestructor.Definition RooAbsPdf.cxx:277; RooAbsPdf::mustBeExtendedbool mustBeExtended() constIf true PDF must provide extended likelihood term.Definition RooAbsPdf.h:222; RooAbsPdf::_normSetRooArgSet const * _normSetNormalization integral (owned by _normMgr)Definition RooAbsPdf.h:320; RooAbsPdf::plotOnRooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const overrideHelper calling plotOn(RooPlot*, RooLinkedList&) const.Definition RooAbsPdf.h:124; RooAbsPdf::specialGeneratorConfigRooNumGenConfig * specialGeneratorConfig() constReturns the specialized integrator configuration for this RooAbsReal.Definition RooAbsPdf.cxx:2623; RooAbsPdf::selfNormalizedvirtual bool selfNormalized() constShows if a PDF is self-normalized, which means that no attempt is made to add a normalization term.Definition RooAbsPdf.h:207; RooAbsPdf::printMultilinevoid printMultiline(std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const overridePrint multi line detailed information of this RooAbsPdf.Definition RooAbsPdf.cxx:1100; RooAbsPdf::_traceCountInt_t _traceCountNumber of traces remaining to print.Definition RooAbsPdf.h:335; RooAbsPdf::canBeExtendedbool canBeExtended() constIf true, PDF can provide extended likelihood term.Definition RooAbsPdf.h:218; RooAbsPdf::_normRooAbsReal * _normDefinition RooAbsPdf.h:319; RooAbsPdf::setTraceCountervoid setTraceCounter(Int_t value, bool allNodes=false)Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'val...Definiti",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:26668,Deployability,configurat,configuration,26668,"s self-normalized, which means that no attempt is made to add a normalization term.Definition RooAbsPdf.h:207; RooAbsPdf::printMultilinevoid printMultiline(std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const overridePrint multi line detailed information of this RooAbsPdf.Definition RooAbsPdf.cxx:1100; RooAbsPdf::_traceCountInt_t _traceCountNumber of traces remaining to print.Definition RooAbsPdf.h:335; RooAbsPdf::canBeExtendedbool canBeExtended() constIf true, PDF can provide extended likelihood term.Definition RooAbsPdf.h:218; RooAbsPdf::_normRooAbsReal * _normDefinition RooAbsPdf.h:319; RooAbsPdf::setTraceCountervoid setTraceCounter(Int_t value, bool allNodes=false)Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'val...Definition RooAbsPdf.cxx:598; RooAbsPdf::prepareMultiGenGenSpec * prepareMultiGen(const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={})Prepare GenSpec configuration object for efficient generation of multiple datasets from identical spe...Definition RooAbsPdf.cxx:1299; RooAbsPdf::_errorCountInt_t _errorCountNumber of errors remaining to print.Definition RooAbsPdf.h:334; RooAbsPdf::ExtendModeExtendModeDefinition RooAbsPdf.h:212; RooAbsPdf::CanBeExtended@ CanBeExtendedDefinition RooAbsPdf.h:212; RooAbsPdf::MustBeExtended@ MustBeExtendedDefinition RooAbsPdf.h:212; RooAbsPdf::CanNotBeExtended@ CanNotBeExtendedDefinition RooAbsPdf.h:212; RooAbsPdf::_rawValuedouble _rawValueDefinition RooAbsPdf.h:318; RooAbsPdf::normRangeconst char * normRange() constDefinition RooAbsPdf.h:250; RooAbsPdf::createExpectedEventsFuncvirtual std::unique_ptr< RooAbsReal > createExpectedEventsFunc(const RooArgSet *nset) constReturns an object that represents the expected number of events for a given normalization set,...Definition RooAbsPdf.cxx:2812; RooAbsPdf::paramOnvirtual Ro",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:30401,Deployability,configurat,configuration,30401,"RooAbsPdf.cxx:2746; RooAbsPdf::generateSimGlobalvirtual RooFit::OwningPtr< RooDataSet > generateSimGlobal(const RooArgSet &whatVars, Int_t nEvents)Special generator interface for generation of 'global observables' – for RooStats tools.Definition RooAbsPdf.cxx:1799; RooAbsPdf::normalizeWithNaNPackingdouble normalizeWithNaNPacking(double rawVal, double normVal) constDefinition RooAbsPdf.cxx:282; RooAbsPdf::autoGenContextvirtual RooAbsGenContext * autoGenContext(const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") constDefinition RooAbsPdf.cxx:1136; RooAbsPdf::getAllConstraintsRooArgSet * getAllConstraints(const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) constThis helper function finds and collects all constraints terms of all component p.d....Definition RooAbsPdf.cxx:2562; RooAbsPdf::getGeneratorConfigconst RooNumGenConfig * getGeneratorConfig() constReturn the numeric MC generator configuration used for this object.Definition RooAbsPdf.cxx:2651; RooAbsPdf::initGeneratorvirtual void initGenerator(Int_t code)Interface for one-time initialization to setup the generator for the specified code.Definition RooAbsPdf.cxx:1532; RooAbsPdf::extendModevirtual ExtendMode extendMode() constReturns ability of PDF to provide extended likelihood terms.Definition RooAbsPdf.h:216; RooAbsPdf::RooAbsPdfRooAbsPdf()Default constructor.Definition RooAbsPdf.cxx:230; RooAbsPdf::generateBinnedvirtual RooFit::OwningPtr< RooDataHist > generateBinned(const RooArgSet &whatVars, double nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}) constAs RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,...Definition RooAbsPdf.h:110; RooAbsPdf::traceEvalPdfbool traceEvalPdf(double value) constCheck that passed value is positive and n",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:31529,Deployability,configurat,configuration,31529,"itGeneratorvirtual void initGenerator(Int_t code)Interface for one-time initialization to setup the generator for the specified code.Definition RooAbsPdf.cxx:1532; RooAbsPdf::extendModevirtual ExtendMode extendMode() constReturns ability of PDF to provide extended likelihood terms.Definition RooAbsPdf.h:216; RooAbsPdf::RooAbsPdfRooAbsPdf()Default constructor.Definition RooAbsPdf.cxx:230; RooAbsPdf::generateBinnedvirtual RooFit::OwningPtr< RooDataHist > generateBinned(const RooArgSet &whatVars, double nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}) constAs RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,...Definition RooAbsPdf.h:110; RooAbsPdf::traceEvalPdfbool traceEvalPdf(double value) constCheck that passed value is positive and not 'not-a-number'.Definition RooAbsPdf.cxx:384; RooAbsPdf::defaultGeneratorConfigstatic RooNumGenConfig * defaultGeneratorConfig()Returns the default numeric MC generator configuration for all RooAbsReals.Definition RooAbsPdf.cxx:2613; RooAbsPdf::redirectServersHookbool redirectServersHook(const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) overrideThe cache manager.Definition RooAbsPdf.cxx:2768; RooAbsPdf::printValuevoid printValue(std::ostream &os) const overridePrint value of p.d.f, also print normalization integral that was last used, if any.Definition RooAbsPdf.cxx:1081; RooAbsPdf::createNLLImplvirtual std::unique_ptr< RooAbsReal > createNLLImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the NLL creation routine.Definition RooAbsPdf.cxx:941; RooAbsPdf::logBatchComputationErrorsvoid logBatchComputationErrors(std::span< const double > &outputs, std::size_t begin) constScan through outputs and fix+log all nans and negative values.Definition RooAbsPdf.cxx:654; RooAbsPdf::genContextvirtual RooAbsGenContext * genContext(const Ro",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:33565,Deployability,integrat,integrated,33565,"alse) constInterface function to create a generator context from a p.d.f.Definition RooAbsPdf.cxx:1127; RooAbsPdf::getLogProbabilitiesvoid getLogProbabilities(std::span< const double > pdfValues, double *output) constDefinition RooAbsPdf.cxx:671; RooAbsPdf::_normRangeOverridestatic TString _normRangeOverrideDefinition RooAbsPdf.h:343; RooAbsPdf::_verboseEvalstatic Int_t _verboseEvalDefinition RooAbsPdf.h:314; RooAbsPdf::extendedTermdouble extendedTerm(double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) constDefinition RooAbsPdf.cxx:730; RooAbsPdf::getGeneratorvirtual Int_t getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) constLoad generatedVars with the subset of directVars that we can generate events for, and return a code t...Definition RooAbsPdf.cxx:1522; RooAbsPdf::createProjectionvirtual RooAbsPdf * createProjection(const RooArgSet &iset)Return a p.d.f that represent a projection of this p.d.f integrated over given observables.Definition RooAbsPdf.cxx:2446; RooAbsPdf::getLogValvirtual double getLogVal(const RooArgSet *set=nullptr) constReturn the log of the current value with given normalization An error message is printed if the argum...Definition RooAbsPdf.cxx:620; RooAbsRealAbstract base class for objects that represent a real value and implements functionality common to al...Definition RooAbsReal.h:59; RooAbsReal::maxValvirtual double maxVal(Int_t code) constReturn maximum value for set of observables identified by code assigned in getMaxVal.Definition RooAbsReal.cxx:3397; RooAbsReal::plotOnvirtual RooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) constPlot (project) PDF on specified frame.Definition RooAbsReal.cxx:1611; RooArgListRooArgList is a ",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:35963,Deployability,configurat,configuration,35963,"tegers two object points and three string pointers that can be...Definition RooCmdArg.h:26; RooDataSetContainer class to hold unbinned data.Definition RooDataSet.h:33; RooExtendPdfRooExtendPdf is a wrapper around an existing PDF that adds a parameteric extended likelihood term to ...Definition RooExtendPdf.h:22; RooFitResultRooFitResult is a container class to hold the input and output of a PDF fit to a dataset.Definition RooFitResult.h:40; RooFit::Detail::CompileContextDefinition NormalizationHelpers.h:29; RooLinkedListCollection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list...Definition RooLinkedList.h:44; RooMCStudyHelper class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fittin...Definition RooMCStudy.h:32; RooMinimizerWrapper class around ROOT::Math::Minimizer that provides a seamless interface between the minimizer f...Definition RooMinimizer.h:48; RooNumGenConfigHolds the configuration parameters of the various numeric integrators used by RooRealIntegral.Definition RooNumGenConfig.h:25; RooObjCacheManagerImplementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elem...Definition RooObjCacheManager.h:29; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooRealIntegralPerforms hybrid numerical/analytical integrals of RooAbsReal objects.Definition RooRealIntegral.h:29; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TListA doubly linked list.Definition TList.h:38; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::Datac",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:36011,Deployability,integrat,integrators,36011,"tegers two object points and three string pointers that can be...Definition RooCmdArg.h:26; RooDataSetContainer class to hold unbinned data.Definition RooDataSet.h:33; RooExtendPdfRooExtendPdf is a wrapper around an existing PDF that adds a parameteric extended likelihood term to ...Definition RooExtendPdf.h:22; RooFitResultRooFitResult is a container class to hold the input and output of a PDF fit to a dataset.Definition RooFitResult.h:40; RooFit::Detail::CompileContextDefinition NormalizationHelpers.h:29; RooLinkedListCollection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list...Definition RooLinkedList.h:44; RooMCStudyHelper class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fittin...Definition RooMCStudy.h:32; RooMinimizerWrapper class around ROOT::Math::Minimizer that provides a seamless interface between the minimizer f...Definition RooMinimizer.h:48; RooNumGenConfigHolds the configuration parameters of the various numeric integrators used by RooRealIntegral.Definition RooNumGenConfig.h:25; RooObjCacheManagerImplementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elem...Definition RooObjCacheManager.h:29; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooRealIntegralPerforms hybrid numerical/analytical integrals of RooAbsReal objects.Definition RooRealIntegral.h:29; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TListA doubly linked list.Definition TList.h:38; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::Datac",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:4040,Energy Efficiency,efficient,efficient,4040,"ts How many events to generate; 56 /// \param arg1,arg2,arg3,arg4,arg5 Optional command arguments.; 57 RooFit::OwningPtr<RooDataSet> generate(const RooArgSet &whatVars, Int_t nEvents, const RooCmdArg& arg1,; 58 const RooCmdArg& arg2={}, const RooCmdArg& arg3={},; 59 const RooCmdArg& arg4={}, const RooCmdArg& arg5={}) {; 60 return generate(whatVars,RooFit::NumEvents(nEvents),arg1,arg2,arg3,arg4,arg5) ;; 61 }; 62 RooFit::OwningPtr<RooDataSet> generate(const RooArgSet &whatVars,; 63 const RooCmdArg& arg1={},const RooCmdArg& arg2={},; 64 const RooCmdArg& arg3={},const RooCmdArg& arg4={},; 65 const RooCmdArg& arg5={},const RooCmdArg& arg6={}) ;; 66 RooFit::OwningPtr<RooDataSet> generate(const RooArgSet &whatVars, double nEvents = 0, bool verbose=false, bool autoBinned=true,; 67 const char* binnedTag="""", bool expectedData=false, bool extended = false) const;; 68 RooFit::OwningPtr<RooDataSet> generate(const RooArgSet &whatVars, const RooDataSet &prototype, Int_t nEvents= 0,; 69 bool verbose=false, bool randProtoOrder=false, bool resampleProto=false) const;; 70 ; 71 ; 72 class GenSpec {; 73 public:; 74 virtual ~GenSpec() ;; 75 GenSpec() = default;; 76 ; 77 private:; 78 GenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen, bool extended,; 79 bool randProto, bool resampleProto, TString dsetName, bool init=false) ;; 80 GenSpec(const GenSpec& other) ;; 81 ; 82 friend class RooAbsPdf ;; 83 std::unique_ptr<RooAbsGenContext> _genContext;; 84 RooArgSet _whatVars ;; 85 RooDataSet* _protoData = nullptr;; 86 Int_t _nGen = 0;; 87 bool _extended = false;; 88 bool _randProto = false;; 89 bool _resampleProto = false;; 90 TString _dsetName ;; 91 bool _init = false;; 92 ; 93 ClassDef(GenSpec,0) // Generation specification; 94 } ;; 95 ; 96 ///Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification.; 97 GenSpec* prepareMultiGen(const RooArgSet &whatVars,; 98 const RooCmdArg& arg1={},const RooCmd",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:26693,Energy Efficiency,efficient,efficient,26693,"s self-normalized, which means that no attempt is made to add a normalization term.Definition RooAbsPdf.h:207; RooAbsPdf::printMultilinevoid printMultiline(std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const overridePrint multi line detailed information of this RooAbsPdf.Definition RooAbsPdf.cxx:1100; RooAbsPdf::_traceCountInt_t _traceCountNumber of traces remaining to print.Definition RooAbsPdf.h:335; RooAbsPdf::canBeExtendedbool canBeExtended() constIf true, PDF can provide extended likelihood term.Definition RooAbsPdf.h:218; RooAbsPdf::_normRooAbsReal * _normDefinition RooAbsPdf.h:319; RooAbsPdf::setTraceCountervoid setTraceCounter(Int_t value, bool allNodes=false)Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'val...Definition RooAbsPdf.cxx:598; RooAbsPdf::prepareMultiGenGenSpec * prepareMultiGen(const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={})Prepare GenSpec configuration object for efficient generation of multiple datasets from identical spe...Definition RooAbsPdf.cxx:1299; RooAbsPdf::_errorCountInt_t _errorCountNumber of errors remaining to print.Definition RooAbsPdf.h:334; RooAbsPdf::ExtendModeExtendModeDefinition RooAbsPdf.h:212; RooAbsPdf::CanBeExtended@ CanBeExtendedDefinition RooAbsPdf.h:212; RooAbsPdf::MustBeExtended@ MustBeExtendedDefinition RooAbsPdf.h:212; RooAbsPdf::CanNotBeExtended@ CanNotBeExtendedDefinition RooAbsPdf.h:212; RooAbsPdf::_rawValuedouble _rawValueDefinition RooAbsPdf.h:318; RooAbsPdf::normRangeconst char * normRange() constDefinition RooAbsPdf.h:250; RooAbsPdf::createExpectedEventsFuncvirtual std::unique_ptr< RooAbsReal > createExpectedEventsFunc(const RooArgSet *nset) constReturns an object that represents the expected number of events for a given normalization set,...Definition RooAbsPdf.cxx:2812; RooAbsPdf::paramOnvirtual Ro",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:11503,Integrability,interface,interface,11503,"218 inline bool canBeExtended() const {; 219 return (extendMode() != CanNotBeExtended) ;; 220 }; 221 /// If true PDF must provide extended likelihood term.; 222 inline bool mustBeExtended() const {; 223 return (extendMode() == MustBeExtended) ;; 224 }; 225 /// Return expected number of events to be used in calculation of extended; 226 /// likelihood.; 227 virtual double expectedEvents(const RooArgSet* nset) const ;; 228 /// Return expected number of events to be used in calculation of extended; 229 /// likelihood. This function should not be overridden, as it just redirects; 230 /// to the actual virtual function but takes a RooArgSet reference instead of; 231 /// pointer. \see expectedEvents(const RooArgSet*) const; 232 double expectedEvents(const RooArgSet& nset) const {; 233 return expectedEvents(&nset) ;; 234 }; 235 ; 236 virtual std::unique_ptr<RooAbsReal> createExpectedEventsFunc(const RooArgSet* nset) const;; 237 ; 238 // Printing interface (human readable); 239 void printValue(std::ostream& os) const override ;; 240 void printMultiline(std::ostream& os, Int_t contents, bool verbose=false, TString indent="""") const override ;; 241 ; 242 static void verboseEval(Int_t stat) ;; 243 static int verboseEval() ;; 244 ; 245 double extendedTerm(double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;; 246 double extendedTerm(double sumEntries, RooArgSet const* nset, double sumEntriesW2=0.0, bool doOffset=false) const;; 247 double extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset=false) const;; 248 ; 249 void setNormRange(const char* rangeName) ;; 250 const char* normRange() const {; 251 return _normRange.Length()>0 ? _normRange.Data() : nullptr ;; 252 }; 253 void setNormRangeOverride(const char* rangeName) ;; 254 ; 255 const RooAbsReal* getNormIntegral(const RooArgSet& nset) const { return getNormObj(nullptr,&nset,nullptr) ; }; 256 ; 257 virtual const RooAbsReal* getNormObj(const RooArgSet* set, const RooArgSet* iset,",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:20038,Integrability,interface,interface,20038,"CacheElem::containedArgsRooArgList containedArgs(Action) overrideDefinition RooAbsPdf.h:326; RooAbsPdf::GenSpecDefinition RooAbsPdf.h:72; RooAbsPdf::GenSpec::_genContextstd::unique_ptr< RooAbsGenContext > _genContextDefinition RooAbsPdf.h:83; RooAbsPdf::GenSpec::~GenSpecvirtual ~GenSpec(); RooAbsPdf::GenSpec::_whatVarsRooArgSet _whatVarsDefinition RooAbsPdf.h:84; RooAbsPdf::GenSpec::_initbool _initDefinition RooAbsPdf.h:91; RooAbsPdf::GenSpec::_extendedbool _extendedDefinition RooAbsPdf.h:87; RooAbsPdf::GenSpec::GenSpecGenSpec(const GenSpec &other); RooAbsPdf::GenSpec::_nGenInt_t _nGenDefinition RooAbsPdf.h:86; RooAbsPdf::GenSpec::GenSpecGenSpec()=default; RooAbsPdf::GenSpec::_randProtobool _randProtoDefinition RooAbsPdf.h:88; RooAbsPdf::GenSpec::_resampleProtobool _resampleProtoDefinition RooAbsPdf.h:89; RooAbsPdf::GenSpec::_dsetNameTString _dsetNameDefinition RooAbsPdf.h:90; RooAbsPdf::GenSpec::_protoDataRooDataSet * _protoDataDefinition RooAbsPdf.h:85; RooAbsPdfAbstract interface for all probability density functions.Definition RooAbsPdf.h:40; RooAbsPdf::syncNormalizationvirtual bool syncNormalization(const RooArgSet *dset, bool adjustProxies=true) constVerify that the normalization integral cached with this PDF is valid for given set of normalization o...Definition RooAbsPdf.cxx:481; RooAbsPdf::getNormdouble getNorm(const RooArgSet &nset) constGet normalisation term needed to normalise the raw values returned by getVal().Definition RooAbsPdf.h:195; RooAbsPdf::compileForNormSetstd::unique_ptr< RooAbsArg > compileForNormSet(RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const overrideDefinition RooAbsPdf.cxx:2788; RooAbsPdf::_normMgrRooObjCacheManager _normMgrDefinition RooAbsPdf.h:329; RooAbsPdf::_normSetIdRooFit::UniqueId< RooArgSet >::Value_t _normSetId! Unique ID of the currently-active normalization setDefinition RooAbsPdf.h:346; RooAbsPdf::_specGeneratorConfigstd::unique_ptr< RooNumGenConfig > _specGeneratorConfig! MC generator configuration ",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:21414,Integrability,integrat,integrating,21414,"ormdouble getNorm(const RooArgSet &nset) constGet normalisation term needed to normalise the raw values returned by getVal().Definition RooAbsPdf.h:195; RooAbsPdf::compileForNormSetstd::unique_ptr< RooAbsArg > compileForNormSet(RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const overrideDefinition RooAbsPdf.cxx:2788; RooAbsPdf::_normMgrRooObjCacheManager _normMgrDefinition RooAbsPdf.h:329; RooAbsPdf::_normSetIdRooFit::UniqueId< RooArgSet >::Value_t _normSetId! Unique ID of the currently-active normalization setDefinition RooAbsPdf.h:346; RooAbsPdf::_specGeneratorConfigstd::unique_ptr< RooNumGenConfig > _specGeneratorConfig! MC generator configuration specific for this objectDefinition RooAbsPdf.h:340; RooAbsPdf::createNLLRooFit::OwningPtr< RooAbsReal > createNLL(RooAbsData &data, CmdArgs_t const &... cmdArgs)Construct representation of -log(L) of PDF with given dataset.Definition RooAbsPdf.h:163; RooAbsPdf::getValVdouble getValV(const RooArgSet *set=nullptr) const overrideReturn current value, normalized by integrating over the observables in nset.Definition RooAbsPdf.cxx:319; RooAbsPdf::fitToImplvirtual std::unique_ptr< RooFitResult > fitToImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the likelihood fitting routine.Definition RooAbsPdf.cxx:1072; RooAbsPdf::_selectCompbool _selectCompComponent selection flag for RooAbsPdf::plotCompOn.Definition RooAbsPdf.h:338; RooAbsPdf::generateEventvirtual void generateEvent(Int_t code)Interface for generation of an event using the algorithm corresponding to the specified code.Definition RooAbsPdf.cxx:1544; RooAbsPdf::createScanCdfRooFit::OwningPtr< RooAbsReal > createScanCdf(const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder)Definition RooAbsPdf.cxx:2545; RooAbsPdf::expectedEventsdouble expectedEvents(const RooArgSet &nset) constReturn expected number of events to be used in calculation of extended likelihood.Definition RooAbsPdf.h:232; RooAbsPdf::get",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:21653,Integrability,rout,routine,21653,"tr< RooAbsArg > compileForNormSet(RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const overrideDefinition RooAbsPdf.cxx:2788; RooAbsPdf::_normMgrRooObjCacheManager _normMgrDefinition RooAbsPdf.h:329; RooAbsPdf::_normSetIdRooFit::UniqueId< RooArgSet >::Value_t _normSetId! Unique ID of the currently-active normalization setDefinition RooAbsPdf.h:346; RooAbsPdf::_specGeneratorConfigstd::unique_ptr< RooNumGenConfig > _specGeneratorConfig! MC generator configuration specific for this objectDefinition RooAbsPdf.h:340; RooAbsPdf::createNLLRooFit::OwningPtr< RooAbsReal > createNLL(RooAbsData &data, CmdArgs_t const &... cmdArgs)Construct representation of -log(L) of PDF with given dataset.Definition RooAbsPdf.h:163; RooAbsPdf::getValVdouble getValV(const RooArgSet *set=nullptr) const overrideReturn current value, normalized by integrating over the observables in nset.Definition RooAbsPdf.cxx:319; RooAbsPdf::fitToImplvirtual std::unique_ptr< RooFitResult > fitToImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the likelihood fitting routine.Definition RooAbsPdf.cxx:1072; RooAbsPdf::_selectCompbool _selectCompComponent selection flag for RooAbsPdf::plotCompOn.Definition RooAbsPdf.h:338; RooAbsPdf::generateEventvirtual void generateEvent(Int_t code)Interface for generation of an event using the algorithm corresponding to the specified code.Definition RooAbsPdf.cxx:1544; RooAbsPdf::createScanCdfRooFit::OwningPtr< RooAbsReal > createScanCdf(const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder)Definition RooAbsPdf.cxx:2545; RooAbsPdf::expectedEventsdouble expectedEvents(const RooArgSet &nset) constReturn expected number of events to be used in calculation of extended likelihood.Definition RooAbsPdf.h:232; RooAbsPdf::getConstraintsvirtual RooArgSet * getConstraints(const RooArgSet &, RooArgSet const &, RooArgSet &) constDefinition RooAbsPdf.h:169; RooAbsPdf::setGeneratorConfigvoid setGeneratorConfig()Remove the",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:22829,Integrability,message,messages,22829,"AbsPdf::plotCompOn.Definition RooAbsPdf.h:338; RooAbsPdf::generateEventvirtual void generateEvent(Int_t code)Interface for generation of an event using the algorithm corresponding to the specified code.Definition RooAbsPdf.cxx:1544; RooAbsPdf::createScanCdfRooFit::OwningPtr< RooAbsReal > createScanCdf(const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder)Definition RooAbsPdf.cxx:2545; RooAbsPdf::expectedEventsdouble expectedEvents(const RooArgSet &nset) constReturn expected number of events to be used in calculation of extended likelihood.Definition RooAbsPdf.h:232; RooAbsPdf::getConstraintsvirtual RooArgSet * getConstraints(const RooArgSet &, RooArgSet const &, RooArgSet &) constDefinition RooAbsPdf.h:169; RooAbsPdf::setGeneratorConfigvoid setGeneratorConfig()Remove the specialized numeric MC generator configuration associated with this object.Definition RooAbsPdf.cxx:2675; RooAbsPdf::resetErrorCountersvirtual void resetErrorCounters(Int_t resetValue=10)Reset error counter to given value, limiting the number of future error messages for this pdf to 'res...Definition RooAbsPdf.cxx:586; RooAbsPdf::verboseEvalstatic int verboseEval()Return global level of verbosity for p.d.f. evaluations.Definition RooAbsPdf.cxx:2418; RooAbsPdf::createCdfRooFit::OwningPtr< RooAbsReal > createCdf(const RooArgSet &iset, const RooArgSet &nset=RooArgSet())Create a cumulative distribution function of this p.d.f in terms of the observables listed in iset.Definition RooAbsPdf.cxx:2468; RooAbsPdf::isActiveNormSetbool isActiveNormSet(RooArgSet const *normSet) constChecks if normSet is the currently active normalization set of this PDF, meaning is exactly the same ...Definition RooAbsPdf.h:299; RooAbsPdf::expectedEventsvirtual double expectedEvents(const RooArgSet *nset) constReturn expected number of events to be used in calculation of extended likelihood.Definition RooAbsPdf.cxx:2398; RooAbsPdf::binnedGenContextvirtual RooAbsGenContext * binnedGenContext(const RooArgS",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:25429,Integrability,integrat,integrator,25429,"mRangevoid setNormRange(const char *rangeName)Definition RooAbsPdf.cxx:2726; RooAbsPdf::getNormIntegralconst RooAbsReal * getNormIntegral(const RooArgSet &nset) constDefinition RooAbsPdf.h:255; RooAbsPdf::~RooAbsPdf~RooAbsPdf() overrideDestructor.Definition RooAbsPdf.cxx:277; RooAbsPdf::mustBeExtendedbool mustBeExtended() constIf true PDF must provide extended likelihood term.Definition RooAbsPdf.h:222; RooAbsPdf::_normSetRooArgSet const * _normSetNormalization integral (owned by _normMgr)Definition RooAbsPdf.h:320; RooAbsPdf::plotOnRooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const overrideHelper calling plotOn(RooPlot*, RooLinkedList&) const.Definition RooAbsPdf.h:124; RooAbsPdf::specialGeneratorConfigRooNumGenConfig * specialGeneratorConfig() constReturns the specialized integrator configuration for this RooAbsReal.Definition RooAbsPdf.cxx:2623; RooAbsPdf::selfNormalizedvirtual bool selfNormalized() constShows if a PDF is self-normalized, which means that no attempt is made to add a normalization term.Definition RooAbsPdf.h:207; RooAbsPdf::printMultilinevoid printMultiline(std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const overridePrint multi line detailed information of this RooAbsPdf.Definition RooAbsPdf.cxx:1100; RooAbsPdf::_traceCountInt_t _traceCountNumber of traces remaining to print.Definition RooAbsPdf.h:335; RooAbsPdf::canBeExtendedbool canBeExtended() constIf true, PDF can provide extended likelihood term.Definition RooAbsPdf.h:218; RooAbsPdf::_normRooAbsReal * _normDefinition RooAbsPdf.h:319; RooAbsPdf::setTraceCountervoid setTraceCounter(Int_t value, bool allNodes=false)Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'val...Definiti",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:26356,Integrability,message,messages,26356,"onst.Definition RooAbsPdf.h:124; RooAbsPdf::specialGeneratorConfigRooNumGenConfig * specialGeneratorConfig() constReturns the specialized integrator configuration for this RooAbsReal.Definition RooAbsPdf.cxx:2623; RooAbsPdf::selfNormalizedvirtual bool selfNormalized() constShows if a PDF is self-normalized, which means that no attempt is made to add a normalization term.Definition RooAbsPdf.h:207; RooAbsPdf::printMultilinevoid printMultiline(std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const overridePrint multi line detailed information of this RooAbsPdf.Definition RooAbsPdf.cxx:1100; RooAbsPdf::_traceCountInt_t _traceCountNumber of traces remaining to print.Definition RooAbsPdf.h:335; RooAbsPdf::canBeExtendedbool canBeExtended() constIf true, PDF can provide extended likelihood term.Definition RooAbsPdf.h:218; RooAbsPdf::_normRooAbsReal * _normDefinition RooAbsPdf.h:319; RooAbsPdf::setTraceCountervoid setTraceCounter(Int_t value, bool allNodes=false)Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'val...Definition RooAbsPdf.cxx:598; RooAbsPdf::prepareMultiGenGenSpec * prepareMultiGen(const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={})Prepare GenSpec configuration object for efficient generation of multiple datasets from identical spe...Definition RooAbsPdf.cxx:1299; RooAbsPdf::_errorCountInt_t _errorCountNumber of errors remaining to print.Definition RooAbsPdf.h:334; RooAbsPdf::ExtendModeExtendModeDefinition RooAbsPdf.h:212; RooAbsPdf::CanBeExtended@ CanBeExtendedDefinition RooAbsPdf.h:212; RooAbsPdf::MustBeExtended@ MustBeExtendedDefinition RooAbsPdf.h:212; RooAbsPdf::CanNotBeExtended@ CanNotBeExtendedDefinition RooAbsPdf.h:212; RooAbsPdf::_rawValuedouble _rawValueDefinition RooAbsPdf.h:318; RooAbsPdf::normRangeconst char * normRange() constDefinition RooAbsPdf",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:29523,Integrability,interface,interface,29523,"st RooCmdArg&,const RooCmdArg&,...Definition RooAbsPdf.h:57; RooAbsPdf::getNormObjvirtual const RooAbsReal * getNormObj(const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) constReturn pointer to RooAbsReal object that implements calculation of integral over observables iset in ...Definition RooAbsPdf.cxx:443; RooAbsPdf::setActiveNormSetvoid setActiveNormSet(RooArgSet const *normSet) constSetter for the _normSet member, which should never be set directly.Definition RooAbsPdf.h:284; RooAbsPdf::analyticalIntegralWNdouble analyticalIntegralWN(Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const overrideAnalytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further informatio...Definition RooAbsPdf.cxx:364; RooAbsPdf::setNormRangeOverridevoid setNormRangeOverride(const char *rangeName)Definition RooAbsPdf.cxx:2746; RooAbsPdf::generateSimGlobalvirtual RooFit::OwningPtr< RooDataSet > generateSimGlobal(const RooArgSet &whatVars, Int_t nEvents)Special generator interface for generation of 'global observables' – for RooStats tools.Definition RooAbsPdf.cxx:1799; RooAbsPdf::normalizeWithNaNPackingdouble normalizeWithNaNPacking(double rawVal, double normVal) constDefinition RooAbsPdf.cxx:282; RooAbsPdf::autoGenContextvirtual RooAbsGenContext * autoGenContext(const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") constDefinition RooAbsPdf.cxx:1136; RooAbsPdf::getAllConstraintsRooArgSet * getAllConstraints(const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) constThis helper function finds and collects all constraints terms of all component p.d....Definition RooAbsPdf.cxx:2562; RooAbsPdf::getGeneratorConfigconst RooNumGenConfig * getGeneratorConfig() constReturn the numeric MC generator configuration used for this object.Definition RooAbsPdf.cxx:2651; RooAbsPdf::ini",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:32156,Integrability,rout,routine,32156,"onst RooCmdArg &arg4={}, const RooCmdArg &arg5={}) constAs RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,...Definition RooAbsPdf.h:110; RooAbsPdf::traceEvalPdfbool traceEvalPdf(double value) constCheck that passed value is positive and not 'not-a-number'.Definition RooAbsPdf.cxx:384; RooAbsPdf::defaultGeneratorConfigstatic RooNumGenConfig * defaultGeneratorConfig()Returns the default numeric MC generator configuration for all RooAbsReals.Definition RooAbsPdf.cxx:2613; RooAbsPdf::redirectServersHookbool redirectServersHook(const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) overrideThe cache manager.Definition RooAbsPdf.cxx:2768; RooAbsPdf::printValuevoid printValue(std::ostream &os) const overridePrint value of p.d.f, also print normalization integral that was last used, if any.Definition RooAbsPdf.cxx:1081; RooAbsPdf::createNLLImplvirtual std::unique_ptr< RooAbsReal > createNLLImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the NLL creation routine.Definition RooAbsPdf.cxx:941; RooAbsPdf::logBatchComputationErrorsvoid logBatchComputationErrors(std::span< const double > &outputs, std::size_t begin) constScan through outputs and fix+log all nans and negative values.Definition RooAbsPdf.cxx:654; RooAbsPdf::genContextvirtual RooAbsGenContext * genContext(const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) constInterface function to create a generator context from a p.d.f.Definition RooAbsPdf.cxx:1127; RooAbsPdf::getLogProbabilitiesvoid getLogProbabilities(std::span< const double > pdfValues, double *output) constDefinition RooAbsPdf.cxx:671; RooAbsPdf::_normRangeOverridestatic TString _normRangeOverrideDefinition RooAbsPdf.h:343; RooAbsPdf::_verboseEvalstatic Int_t _verboseEvalDefinition RooAbsPdf.h:314; RooAbsPdf::extendedTermdouble extendedTerm(double sumEntries, double expected",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:33565,Integrability,integrat,integrated,33565,"alse) constInterface function to create a generator context from a p.d.f.Definition RooAbsPdf.cxx:1127; RooAbsPdf::getLogProbabilitiesvoid getLogProbabilities(std::span< const double > pdfValues, double *output) constDefinition RooAbsPdf.cxx:671; RooAbsPdf::_normRangeOverridestatic TString _normRangeOverrideDefinition RooAbsPdf.h:343; RooAbsPdf::_verboseEvalstatic Int_t _verboseEvalDefinition RooAbsPdf.h:314; RooAbsPdf::extendedTermdouble extendedTerm(double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) constDefinition RooAbsPdf.cxx:730; RooAbsPdf::getGeneratorvirtual Int_t getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) constLoad generatedVars with the subset of directVars that we can generate events for, and return a code t...Definition RooAbsPdf.cxx:1522; RooAbsPdf::createProjectionvirtual RooAbsPdf * createProjection(const RooArgSet &iset)Return a p.d.f that represent a projection of this p.d.f integrated over given observables.Definition RooAbsPdf.cxx:2446; RooAbsPdf::getLogValvirtual double getLogVal(const RooArgSet *set=nullptr) constReturn the log of the current value with given normalization An error message is printed if the argum...Definition RooAbsPdf.cxx:620; RooAbsRealAbstract base class for objects that represent a real value and implements functionality common to al...Definition RooAbsReal.h:59; RooAbsReal::maxValvirtual double maxVal(Int_t code) constReturn maximum value for set of observables identified by code assigned in getMaxVal.Definition RooAbsReal.cxx:3397; RooAbsReal::plotOnvirtual RooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) constPlot (project) PDF on specified frame.Definition RooAbsReal.cxx:1611; RooArgListRooArgList is a ",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:33780,Integrability,message,message,33780,"oid getLogProbabilities(std::span< const double > pdfValues, double *output) constDefinition RooAbsPdf.cxx:671; RooAbsPdf::_normRangeOverridestatic TString _normRangeOverrideDefinition RooAbsPdf.h:343; RooAbsPdf::_verboseEvalstatic Int_t _verboseEvalDefinition RooAbsPdf.h:314; RooAbsPdf::extendedTermdouble extendedTerm(double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) constDefinition RooAbsPdf.cxx:730; RooAbsPdf::getGeneratorvirtual Int_t getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) constLoad generatedVars with the subset of directVars that we can generate events for, and return a code t...Definition RooAbsPdf.cxx:1522; RooAbsPdf::createProjectionvirtual RooAbsPdf * createProjection(const RooArgSet &iset)Return a p.d.f that represent a projection of this p.d.f integrated over given observables.Definition RooAbsPdf.cxx:2446; RooAbsPdf::getLogValvirtual double getLogVal(const RooArgSet *set=nullptr) constReturn the log of the current value with given normalization An error message is printed if the argum...Definition RooAbsPdf.cxx:620; RooAbsRealAbstract base class for objects that represent a real value and implements functionality common to al...Definition RooAbsReal.h:59; RooAbsReal::maxValvirtual double maxVal(Int_t code) constReturn maximum value for set of observables identified by code assigned in getMaxVal.Definition RooAbsReal.cxx:3397; RooAbsReal::plotOnvirtual RooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) constPlot (project) PDF on specified frame.Definition RooAbsReal.cxx:1611; RooArgListRooArgList is a container object that can hold multiple RooAbsArg objects.Definition RooArgList.h:22; RooArgSetRooArgSet is a container object that can",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:35187,Integrability,wrap,wrapper,35187,"*frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) constPlot (project) PDF on specified frame.Definition RooAbsReal.cxx:1611; RooArgListRooArgList is a container object that can hold multiple RooAbsArg objects.Definition RooArgList.h:22; RooArgSetRooArgSet is a container object that can hold multiple RooAbsArg objects.Definition RooArgSet.h:24; RooCategoryObject to represent discrete states.Definition RooCategory.h:28; RooChi2VarSimple calculation from a binned dataset and a PDF.Definition RooChi2Var.h:19; RooCmdArgNamed container for two doubles, two integers two object points and three string pointers that can be...Definition RooCmdArg.h:26; RooDataSetContainer class to hold unbinned data.Definition RooDataSet.h:33; RooExtendPdfRooExtendPdf is a wrapper around an existing PDF that adds a parameteric extended likelihood term to ...Definition RooExtendPdf.h:22; RooFitResultRooFitResult is a container class to hold the input and output of a PDF fit to a dataset.Definition RooFitResult.h:40; RooFit::Detail::CompileContextDefinition NormalizationHelpers.h:29; RooLinkedListCollection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list...Definition RooLinkedList.h:44; RooMCStudyHelper class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fittin...Definition RooMCStudy.h:32; RooMinimizerWrapper class around ROOT::Math::Minimizer that provides a seamless interface between the minimizer f...Definition RooMinimizer.h:48; RooNumGenConfigHolds the configuration parameters of the various numeric integrators used by RooRealIntegral.Definition RooNumGenConfig.h:25; RooObjCacheManagerImplementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elem...Definitio",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:35872,Integrability,interface,interface,35872,"h:28; RooChi2VarSimple calculation from a binned dataset and a PDF.Definition RooChi2Var.h:19; RooCmdArgNamed container for two doubles, two integers two object points and three string pointers that can be...Definition RooCmdArg.h:26; RooDataSetContainer class to hold unbinned data.Definition RooDataSet.h:33; RooExtendPdfRooExtendPdf is a wrapper around an existing PDF that adds a parameteric extended likelihood term to ...Definition RooExtendPdf.h:22; RooFitResultRooFitResult is a container class to hold the input and output of a PDF fit to a dataset.Definition RooFitResult.h:40; RooFit::Detail::CompileContextDefinition NormalizationHelpers.h:29; RooLinkedListCollection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list...Definition RooLinkedList.h:44; RooMCStudyHelper class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fittin...Definition RooMCStudy.h:32; RooMinimizerWrapper class around ROOT::Math::Minimizer that provides a seamless interface between the minimizer f...Definition RooMinimizer.h:48; RooNumGenConfigHolds the configuration parameters of the various numeric integrators used by RooRealIntegral.Definition RooNumGenConfig.h:25; RooObjCacheManagerImplementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elem...Definition RooObjCacheManager.h:29; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooRealIntegralPerforms hybrid numerical/analytical integrals of RooAbsReal objects.Definition RooRealIntegral.h:29; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TListA doubly linked list.Definition TList.h:38; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition ",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:36011,Integrability,integrat,integrators,36011,"tegers two object points and three string pointers that can be...Definition RooCmdArg.h:26; RooDataSetContainer class to hold unbinned data.Definition RooDataSet.h:33; RooExtendPdfRooExtendPdf is a wrapper around an existing PDF that adds a parameteric extended likelihood term to ...Definition RooExtendPdf.h:22; RooFitResultRooFitResult is a container class to hold the input and output of a PDF fit to a dataset.Definition RooFitResult.h:40; RooFit::Detail::CompileContextDefinition NormalizationHelpers.h:29; RooLinkedListCollection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list...Definition RooLinkedList.h:44; RooMCStudyHelper class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fittin...Definition RooMCStudy.h:32; RooMinimizerWrapper class around ROOT::Math::Minimizer that provides a seamless interface between the minimizer f...Definition RooMinimizer.h:48; RooNumGenConfigHolds the configuration parameters of the various numeric integrators used by RooRealIntegral.Definition RooNumGenConfig.h:25; RooObjCacheManagerImplementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elem...Definition RooObjCacheManager.h:29; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooRealIntegralPerforms hybrid numerical/analytical integrals of RooAbsReal objects.Definition RooRealIntegral.h:29; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TListA doubly linked list.Definition TList.h:38; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::Datac",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:3049,Modifiability,extend,extended,3049,"ts How many events to generate; 56 /// \param arg1,arg2,arg3,arg4,arg5 Optional command arguments.; 57 RooFit::OwningPtr<RooDataSet> generate(const RooArgSet &whatVars, Int_t nEvents, const RooCmdArg& arg1,; 58 const RooCmdArg& arg2={}, const RooCmdArg& arg3={},; 59 const RooCmdArg& arg4={}, const RooCmdArg& arg5={}) {; 60 return generate(whatVars,RooFit::NumEvents(nEvents),arg1,arg2,arg3,arg4,arg5) ;; 61 }; 62 RooFit::OwningPtr<RooDataSet> generate(const RooArgSet &whatVars,; 63 const RooCmdArg& arg1={},const RooCmdArg& arg2={},; 64 const RooCmdArg& arg3={},const RooCmdArg& arg4={},; 65 const RooCmdArg& arg5={},const RooCmdArg& arg6={}) ;; 66 RooFit::OwningPtr<RooDataSet> generate(const RooArgSet &whatVars, double nEvents = 0, bool verbose=false, bool autoBinned=true,; 67 const char* binnedTag="""", bool expectedData=false, bool extended = false) const;; 68 RooFit::OwningPtr<RooDataSet> generate(const RooArgSet &whatVars, const RooDataSet &prototype, Int_t nEvents= 0,; 69 bool verbose=false, bool randProtoOrder=false, bool resampleProto=false) const;; 70 ; 71 ; 72 class GenSpec {; 73 public:; 74 virtual ~GenSpec() ;; 75 GenSpec() = default;; 76 ; 77 private:; 78 GenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen, bool extended,; 79 bool randProto, bool resampleProto, TString dsetName, bool init=false) ;; 80 GenSpec(const GenSpec& other) ;; 81 ; 82 friend class RooAbsPdf ;; 83 std::unique_ptr<RooAbsGenContext> _genContext;; 84 RooArgSet _whatVars ;; 85 RooDataSet* _protoData = nullptr;; 86 Int_t _nGen = 0;; 87 bool _extended = false;; 88 bool _randProto = false;; 89 bool _resampleProto = false;; 90 TString _dsetName ;; 91 bool _init = false;; 92 ; 93 ClassDef(GenSpec,0) // Generation specification; 94 } ;; 95 ; 96 ///Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification.; 97 GenSpec* prepareMultiGen(const RooArgSet &whatVars,; 98 const RooCmdArg& arg1={},const RooCmd",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:3491,Modifiability,extend,extended,3491,"ts How many events to generate; 56 /// \param arg1,arg2,arg3,arg4,arg5 Optional command arguments.; 57 RooFit::OwningPtr<RooDataSet> generate(const RooArgSet &whatVars, Int_t nEvents, const RooCmdArg& arg1,; 58 const RooCmdArg& arg2={}, const RooCmdArg& arg3={},; 59 const RooCmdArg& arg4={}, const RooCmdArg& arg5={}) {; 60 return generate(whatVars,RooFit::NumEvents(nEvents),arg1,arg2,arg3,arg4,arg5) ;; 61 }; 62 RooFit::OwningPtr<RooDataSet> generate(const RooArgSet &whatVars,; 63 const RooCmdArg& arg1={},const RooCmdArg& arg2={},; 64 const RooCmdArg& arg3={},const RooCmdArg& arg4={},; 65 const RooCmdArg& arg5={},const RooCmdArg& arg6={}) ;; 66 RooFit::OwningPtr<RooDataSet> generate(const RooArgSet &whatVars, double nEvents = 0, bool verbose=false, bool autoBinned=true,; 67 const char* binnedTag="""", bool expectedData=false, bool extended = false) const;; 68 RooFit::OwningPtr<RooDataSet> generate(const RooArgSet &whatVars, const RooDataSet &prototype, Int_t nEvents= 0,; 69 bool verbose=false, bool randProtoOrder=false, bool resampleProto=false) const;; 70 ; 71 ; 72 class GenSpec {; 73 public:; 74 virtual ~GenSpec() ;; 75 GenSpec() = default;; 76 ; 77 private:; 78 GenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen, bool extended,; 79 bool randProto, bool resampleProto, TString dsetName, bool init=false) ;; 80 GenSpec(const GenSpec& other) ;; 81 ; 82 friend class RooAbsPdf ;; 83 std::unique_ptr<RooAbsGenContext> _genContext;; 84 RooArgSet _whatVars ;; 85 RooDataSet* _protoData = nullptr;; 86 Int_t _nGen = 0;; 87 bool _extended = false;; 88 bool _randProto = false;; 89 bool _resampleProto = false;; 90 TString _dsetName ;; 91 bool _init = false;; 92 ; 93 ClassDef(GenSpec,0) // Generation specification; 94 } ;; 95 ; 96 ///Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification.; 97 GenSpec* prepareMultiGen(const RooArgSet &whatVars,; 98 const RooCmdArg& arg1={},const RooCmd",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:4015,Modifiability,config,configuration,4015,"ts How many events to generate; 56 /// \param arg1,arg2,arg3,arg4,arg5 Optional command arguments.; 57 RooFit::OwningPtr<RooDataSet> generate(const RooArgSet &whatVars, Int_t nEvents, const RooCmdArg& arg1,; 58 const RooCmdArg& arg2={}, const RooCmdArg& arg3={},; 59 const RooCmdArg& arg4={}, const RooCmdArg& arg5={}) {; 60 return generate(whatVars,RooFit::NumEvents(nEvents),arg1,arg2,arg3,arg4,arg5) ;; 61 }; 62 RooFit::OwningPtr<RooDataSet> generate(const RooArgSet &whatVars,; 63 const RooCmdArg& arg1={},const RooCmdArg& arg2={},; 64 const RooCmdArg& arg3={},const RooCmdArg& arg4={},; 65 const RooCmdArg& arg5={},const RooCmdArg& arg6={}) ;; 66 RooFit::OwningPtr<RooDataSet> generate(const RooArgSet &whatVars, double nEvents = 0, bool verbose=false, bool autoBinned=true,; 67 const char* binnedTag="""", bool expectedData=false, bool extended = false) const;; 68 RooFit::OwningPtr<RooDataSet> generate(const RooArgSet &whatVars, const RooDataSet &prototype, Int_t nEvents= 0,; 69 bool verbose=false, bool randProtoOrder=false, bool resampleProto=false) const;; 70 ; 71 ; 72 class GenSpec {; 73 public:; 74 virtual ~GenSpec() ;; 75 GenSpec() = default;; 76 ; 77 private:; 78 GenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen, bool extended,; 79 bool randProto, bool resampleProto, TString dsetName, bool init=false) ;; 80 GenSpec(const GenSpec& other) ;; 81 ; 82 friend class RooAbsPdf ;; 83 std::unique_ptr<RooAbsGenContext> _genContext;; 84 RooArgSet _whatVars ;; 85 RooDataSet* _protoData = nullptr;; 86 Int_t _nGen = 0;; 87 bool _extended = false;; 88 bool _randProto = false;; 89 bool _resampleProto = false;; 90 TString _dsetName ;; 91 bool _init = false;; 92 ; 93 ClassDef(GenSpec,0) // Generation specification; 94 } ;; 95 ; 96 ///Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification.; 97 GenSpec* prepareMultiGen(const RooArgSet &whatVars,; 98 const RooCmdArg& arg1={},const RooCmd",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:5620,Modifiability,extend,extended,5620,,MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:7400,Modifiability,config,config,7400,"CmdArg& arg5={},const RooCmdArg& arg6={}) const;; 119 virtual RooFit::OwningPtr<RooDataHist> generateBinned(const RooArgSet &whatVars, double nEvents, bool expectedData=false, bool extended=false) const;; 120 ; 121 virtual RooFit::OwningPtr<RooDataSet> generateSimGlobal(const RooArgSet& whatVars, Int_t nEvents) ;; 122 ; 123 ///Helper calling plotOn(RooPlot*, RooLinkedList&) const; 124 RooPlot* plotOn(RooPlot* frame,; 125 const RooCmdArg& arg1={}, const RooCmdArg& arg2={},; 126 const RooCmdArg& arg3={}, const RooCmdArg& arg4={},; 127 const RooCmdArg& arg5={}, const RooCmdArg& arg6={},; 128 const RooCmdArg& arg7={}, const RooCmdArg& arg8={},; 129 const RooCmdArg& arg9={}, const RooCmdArg& arg10={}; 130 ) const override {; 131 return RooAbsReal::plotOn(frame,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10) ;; 132 }; 133 RooPlot* plotOn(RooPlot* frame, RooLinkedList& cmdList) const override ;; 134 ; 135 /// Add a box with parameter values (and errors) to the specified frame; 136 virtual RooPlot* paramOn(RooPlot* frame,; 137 const RooCmdArg& arg1={}, const RooCmdArg& arg2={},; 138 const RooCmdArg& arg3={}, const RooCmdArg& arg4={},; 139 const RooCmdArg& arg5={}, const RooCmdArg& arg6={},; 140 const RooCmdArg& arg7={}, const RooCmdArg& arg8={}) ;; 141 ; 142 // Built-in generator support; 143 virtual Int_t getGenerator(const RooArgSet& directVars, RooArgSet &generateVars, bool staticInitOK=true) const;; 144 virtual void initGenerator(Int_t code) ;; 145 virtual void generateEvent(Int_t code);; 146 virtual bool isDirectGenSafe(const RooAbsArg& arg) const ;; 147 ; 148 // Configuration of MC generators used for this pdf; 149 const RooNumGenConfig* getGeneratorConfig() const ;; 150 static RooNumGenConfig* defaultGeneratorConfig() ;; 151 RooNumGenConfig* specialGeneratorConfig() const ;; 152 RooNumGenConfig* specialGeneratorConfig(bool createOnTheFly) ;; 153 void setGeneratorConfig() ;; 154 void setGeneratorConfig(const RooNumGenConfig& config) ;; 155 ; 156 template <typename.",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:10079,Modifiability,extend,extended,10079,"nst RooArgSet* set=nullptr) const override ;; 190 virtual double getLogVal(const RooArgSet* set=nullptr) const ;; 191 ; 192 void getLogProbabilities(std::span<const double> pdfValues, double * output) const;; 193 ; 194 /// \copydoc getNorm(const RooArgSet*) const; 195 double getNorm(const RooArgSet& nset) const {; 196 return getNorm(&nset) ;; 197 }; 198 virtual double getNorm(const RooArgSet* set=nullptr) const ;; 199 ; 200 virtual void resetErrorCounters(Int_t resetValue=10) ;; 201 void setTraceCounter(Int_t value, bool allNodes=false) ;; 202 ; 203 double analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName=nullptr) const override ;; 204 ; 205 /// Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term.; 206 /// Always returns false, unless a PDF overrides this function.; 207 virtual bool selfNormalized() const {; 208 return false ;; 209 }; 210 ; 211 // Support for extended maximum likelihood, switched off by default; 212 enum ExtendMode { CanNotBeExtended, CanBeExtended, MustBeExtended } ;; 213 /// Returns ability of PDF to provide extended likelihood terms. Possible; 214 /// answers are in the enumerator RooAbsPdf::ExtendMode.; 215 /// This default implementation always returns CanNotBeExtended.; 216 virtual ExtendMode extendMode() const { return CanNotBeExtended; }; 217 /// If true, PDF can provide extended likelihood term.; 218 inline bool canBeExtended() const {; 219 return (extendMode() != CanNotBeExtended) ;; 220 }; 221 /// If true PDF must provide extended likelihood term.; 222 inline bool mustBeExtended() const {; 223 return (extendMode() == MustBeExtended) ;; 224 }; 225 /// Return expected number of events to be used in calculation of extended; 226 /// likelihood.; 227 virtual double expectedEvents(const RooArgSet* nset) const ;; 228 /// Return expected number of events to be used in calculation of extended; 229 /// likelihood. This function should not be overridden, as it just redirec",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:10250,Modifiability,extend,extended,10250,"nst RooArgSet* set=nullptr) const override ;; 190 virtual double getLogVal(const RooArgSet* set=nullptr) const ;; 191 ; 192 void getLogProbabilities(std::span<const double> pdfValues, double * output) const;; 193 ; 194 /// \copydoc getNorm(const RooArgSet*) const; 195 double getNorm(const RooArgSet& nset) const {; 196 return getNorm(&nset) ;; 197 }; 198 virtual double getNorm(const RooArgSet* set=nullptr) const ;; 199 ; 200 virtual void resetErrorCounters(Int_t resetValue=10) ;; 201 void setTraceCounter(Int_t value, bool allNodes=false) ;; 202 ; 203 double analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName=nullptr) const override ;; 204 ; 205 /// Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term.; 206 /// Always returns false, unless a PDF overrides this function.; 207 virtual bool selfNormalized() const {; 208 return false ;; 209 }; 210 ; 211 // Support for extended maximum likelihood, switched off by default; 212 enum ExtendMode { CanNotBeExtended, CanBeExtended, MustBeExtended } ;; 213 /// Returns ability of PDF to provide extended likelihood terms. Possible; 214 /// answers are in the enumerator RooAbsPdf::ExtendMode.; 215 /// This default implementation always returns CanNotBeExtended.; 216 virtual ExtendMode extendMode() const { return CanNotBeExtended; }; 217 /// If true, PDF can provide extended likelihood term.; 218 inline bool canBeExtended() const {; 219 return (extendMode() != CanNotBeExtended) ;; 220 }; 221 /// If true PDF must provide extended likelihood term.; 222 inline bool mustBeExtended() const {; 223 return (extendMode() == MustBeExtended) ;; 224 }; 225 /// Return expected number of events to be used in calculation of extended; 226 /// likelihood.; 227 virtual double expectedEvents(const RooArgSet* nset) const ;; 228 /// Return expected number of events to be used in calculation of extended; 229 /// likelihood. This function should not be overridden, as it just redirec",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:10442,Modifiability,extend,extendMode,10442,"8 virtual double getNorm(const RooArgSet* set=nullptr) const ;; 199 ; 200 virtual void resetErrorCounters(Int_t resetValue=10) ;; 201 void setTraceCounter(Int_t value, bool allNodes=false) ;; 202 ; 203 double analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName=nullptr) const override ;; 204 ; 205 /// Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term.; 206 /// Always returns false, unless a PDF overrides this function.; 207 virtual bool selfNormalized() const {; 208 return false ;; 209 }; 210 ; 211 // Support for extended maximum likelihood, switched off by default; 212 enum ExtendMode { CanNotBeExtended, CanBeExtended, MustBeExtended } ;; 213 /// Returns ability of PDF to provide extended likelihood terms. Possible; 214 /// answers are in the enumerator RooAbsPdf::ExtendMode.; 215 /// This default implementation always returns CanNotBeExtended.; 216 virtual ExtendMode extendMode() const { return CanNotBeExtended; }; 217 /// If true, PDF can provide extended likelihood term.; 218 inline bool canBeExtended() const {; 219 return (extendMode() != CanNotBeExtended) ;; 220 }; 221 /// If true PDF must provide extended likelihood term.; 222 inline bool mustBeExtended() const {; 223 return (extendMode() == MustBeExtended) ;; 224 }; 225 /// Return expected number of events to be used in calculation of extended; 226 /// likelihood.; 227 virtual double expectedEvents(const RooArgSet* nset) const ;; 228 /// Return expected number of events to be used in calculation of extended; 229 /// likelihood. This function should not be overridden, as it just redirects; 230 /// to the actual virtual function but takes a RooArgSet reference instead of; 231 /// pointer. \see expectedEvents(const RooArgSet*) const; 232 double expectedEvents(const RooArgSet& nset) const {; 233 return expectedEvents(&nset) ;; 234 }; 235 ; 236 virtual std::unique_ptr<RooAbsReal> createExpectedEventsFunc(const RooArgSet* nset) const;; 23",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:10524,Modifiability,extend,extended,10524,"8 virtual double getNorm(const RooArgSet* set=nullptr) const ;; 199 ; 200 virtual void resetErrorCounters(Int_t resetValue=10) ;; 201 void setTraceCounter(Int_t value, bool allNodes=false) ;; 202 ; 203 double analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName=nullptr) const override ;; 204 ; 205 /// Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term.; 206 /// Always returns false, unless a PDF overrides this function.; 207 virtual bool selfNormalized() const {; 208 return false ;; 209 }; 210 ; 211 // Support for extended maximum likelihood, switched off by default; 212 enum ExtendMode { CanNotBeExtended, CanBeExtended, MustBeExtended } ;; 213 /// Returns ability of PDF to provide extended likelihood terms. Possible; 214 /// answers are in the enumerator RooAbsPdf::ExtendMode.; 215 /// This default implementation always returns CanNotBeExtended.; 216 virtual ExtendMode extendMode() const { return CanNotBeExtended; }; 217 /// If true, PDF can provide extended likelihood term.; 218 inline bool canBeExtended() const {; 219 return (extendMode() != CanNotBeExtended) ;; 220 }; 221 /// If true PDF must provide extended likelihood term.; 222 inline bool mustBeExtended() const {; 223 return (extendMode() == MustBeExtended) ;; 224 }; 225 /// Return expected number of events to be used in calculation of extended; 226 /// likelihood.; 227 virtual double expectedEvents(const RooArgSet* nset) const ;; 228 /// Return expected number of events to be used in calculation of extended; 229 /// likelihood. This function should not be overridden, as it just redirects; 230 /// to the actual virtual function but takes a RooArgSet reference instead of; 231 /// pointer. \see expectedEvents(const RooArgSet*) const; 232 double expectedEvents(const RooArgSet& nset) const {; 233 return expectedEvents(&nset) ;; 234 }; 235 ; 236 virtual std::unique_ptr<RooAbsReal> createExpectedEventsFunc(const RooArgSet* nset) const;; 23",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:10604,Modifiability,extend,extendMode,10604,"aceCounter(Int_t value, bool allNodes=false) ;; 202 ; 203 double analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName=nullptr) const override ;; 204 ; 205 /// Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term.; 206 /// Always returns false, unless a PDF overrides this function.; 207 virtual bool selfNormalized() const {; 208 return false ;; 209 }; 210 ; 211 // Support for extended maximum likelihood, switched off by default; 212 enum ExtendMode { CanNotBeExtended, CanBeExtended, MustBeExtended } ;; 213 /// Returns ability of PDF to provide extended likelihood terms. Possible; 214 /// answers are in the enumerator RooAbsPdf::ExtendMode.; 215 /// This default implementation always returns CanNotBeExtended.; 216 virtual ExtendMode extendMode() const { return CanNotBeExtended; }; 217 /// If true, PDF can provide extended likelihood term.; 218 inline bool canBeExtended() const {; 219 return (extendMode() != CanNotBeExtended) ;; 220 }; 221 /// If true PDF must provide extended likelihood term.; 222 inline bool mustBeExtended() const {; 223 return (extendMode() == MustBeExtended) ;; 224 }; 225 /// Return expected number of events to be used in calculation of extended; 226 /// likelihood.; 227 virtual double expectedEvents(const RooArgSet* nset) const ;; 228 /// Return expected number of events to be used in calculation of extended; 229 /// likelihood. This function should not be overridden, as it just redirects; 230 /// to the actual virtual function but takes a RooArgSet reference instead of; 231 /// pointer. \see expectedEvents(const RooArgSet*) const; 232 double expectedEvents(const RooArgSet& nset) const {; 233 return expectedEvents(&nset) ;; 234 }; 235 ; 236 virtual std::unique_ptr<RooAbsReal> createExpectedEventsFunc(const RooArgSet* nset) const;; 237 ; 238 // Printing interface (human readable); 239 void printValue(std::ostream& os) const override ;; 240 void printMultiline(std::ostream& os,",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:10681,Modifiability,extend,extended,10681,"aceCounter(Int_t value, bool allNodes=false) ;; 202 ; 203 double analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName=nullptr) const override ;; 204 ; 205 /// Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term.; 206 /// Always returns false, unless a PDF overrides this function.; 207 virtual bool selfNormalized() const {; 208 return false ;; 209 }; 210 ; 211 // Support for extended maximum likelihood, switched off by default; 212 enum ExtendMode { CanNotBeExtended, CanBeExtended, MustBeExtended } ;; 213 /// Returns ability of PDF to provide extended likelihood terms. Possible; 214 /// answers are in the enumerator RooAbsPdf::ExtendMode.; 215 /// This default implementation always returns CanNotBeExtended.; 216 virtual ExtendMode extendMode() const { return CanNotBeExtended; }; 217 /// If true, PDF can provide extended likelihood term.; 218 inline bool canBeExtended() const {; 219 return (extendMode() != CanNotBeExtended) ;; 220 }; 221 /// If true PDF must provide extended likelihood term.; 222 inline bool mustBeExtended() const {; 223 return (extendMode() == MustBeExtended) ;; 224 }; 225 /// Return expected number of events to be used in calculation of extended; 226 /// likelihood.; 227 virtual double expectedEvents(const RooArgSet* nset) const ;; 228 /// Return expected number of events to be used in calculation of extended; 229 /// likelihood. This function should not be overridden, as it just redirects; 230 /// to the actual virtual function but takes a RooArgSet reference instead of; 231 /// pointer. \see expectedEvents(const RooArgSet*) const; 232 double expectedEvents(const RooArgSet& nset) const {; 233 return expectedEvents(&nset) ;; 234 }; 235 ; 236 virtual std::unique_ptr<RooAbsReal> createExpectedEventsFunc(const RooArgSet* nset) const;; 237 ; 238 // Printing interface (human readable); 239 void printValue(std::ostream& os) const override ;; 240 void printMultiline(std::ostream& os,",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:10762,Modifiability,extend,extendMode,10762,"; 205 /// Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term.; 206 /// Always returns false, unless a PDF overrides this function.; 207 virtual bool selfNormalized() const {; 208 return false ;; 209 }; 210 ; 211 // Support for extended maximum likelihood, switched off by default; 212 enum ExtendMode { CanNotBeExtended, CanBeExtended, MustBeExtended } ;; 213 /// Returns ability of PDF to provide extended likelihood terms. Possible; 214 /// answers are in the enumerator RooAbsPdf::ExtendMode.; 215 /// This default implementation always returns CanNotBeExtended.; 216 virtual ExtendMode extendMode() const { return CanNotBeExtended; }; 217 /// If true, PDF can provide extended likelihood term.; 218 inline bool canBeExtended() const {; 219 return (extendMode() != CanNotBeExtended) ;; 220 }; 221 /// If true PDF must provide extended likelihood term.; 222 inline bool mustBeExtended() const {; 223 return (extendMode() == MustBeExtended) ;; 224 }; 225 /// Return expected number of events to be used in calculation of extended; 226 /// likelihood.; 227 virtual double expectedEvents(const RooArgSet* nset) const ;; 228 /// Return expected number of events to be used in calculation of extended; 229 /// likelihood. This function should not be overridden, as it just redirects; 230 /// to the actual virtual function but takes a RooArgSet reference instead of; 231 /// pointer. \see expectedEvents(const RooArgSet*) const; 232 double expectedEvents(const RooArgSet& nset) const {; 233 return expectedEvents(&nset) ;; 234 }; 235 ; 236 virtual std::unique_ptr<RooAbsReal> createExpectedEventsFunc(const RooArgSet* nset) const;; 237 ; 238 // Printing interface (human readable); 239 void printValue(std::ostream& os) const override ;; 240 void printMultiline(std::ostream& os, Int_t contents, bool verbose=false, TString indent="""") const override ;; 241 ; 242 static void verboseEval(Int_t stat) ;; 243 static int verboseEval() ;; 244 ; 245 double exten",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:10874,Modifiability,extend,extended,10874,"; 205 /// Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term.; 206 /// Always returns false, unless a PDF overrides this function.; 207 virtual bool selfNormalized() const {; 208 return false ;; 209 }; 210 ; 211 // Support for extended maximum likelihood, switched off by default; 212 enum ExtendMode { CanNotBeExtended, CanBeExtended, MustBeExtended } ;; 213 /// Returns ability of PDF to provide extended likelihood terms. Possible; 214 /// answers are in the enumerator RooAbsPdf::ExtendMode.; 215 /// This default implementation always returns CanNotBeExtended.; 216 virtual ExtendMode extendMode() const { return CanNotBeExtended; }; 217 /// If true, PDF can provide extended likelihood term.; 218 inline bool canBeExtended() const {; 219 return (extendMode() != CanNotBeExtended) ;; 220 }; 221 /// If true PDF must provide extended likelihood term.; 222 inline bool mustBeExtended() const {; 223 return (extendMode() == MustBeExtended) ;; 224 }; 225 /// Return expected number of events to be used in calculation of extended; 226 /// likelihood.; 227 virtual double expectedEvents(const RooArgSet* nset) const ;; 228 /// Return expected number of events to be used in calculation of extended; 229 /// likelihood. This function should not be overridden, as it just redirects; 230 /// to the actual virtual function but takes a RooArgSet reference instead of; 231 /// pointer. \see expectedEvents(const RooArgSet*) const; 232 double expectedEvents(const RooArgSet& nset) const {; 233 return expectedEvents(&nset) ;; 234 }; 235 ; 236 virtual std::unique_ptr<RooAbsReal> createExpectedEventsFunc(const RooArgSet* nset) const;; 237 ; 238 // Printing interface (human readable); 239 void printValue(std::ostream& os) const override ;; 240 void printMultiline(std::ostream& os, Int_t contents, bool verbose=false, TString indent="""") const override ;; 241 ; 242 static void verboseEval(Int_t stat) ;; 243 static int verboseEval() ;; 244 ; 245 double exten",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:11041,Modifiability,extend,extended,11041,"7 virtual bool selfNormalized() const {; 208 return false ;; 209 }; 210 ; 211 // Support for extended maximum likelihood, switched off by default; 212 enum ExtendMode { CanNotBeExtended, CanBeExtended, MustBeExtended } ;; 213 /// Returns ability of PDF to provide extended likelihood terms. Possible; 214 /// answers are in the enumerator RooAbsPdf::ExtendMode.; 215 /// This default implementation always returns CanNotBeExtended.; 216 virtual ExtendMode extendMode() const { return CanNotBeExtended; }; 217 /// If true, PDF can provide extended likelihood term.; 218 inline bool canBeExtended() const {; 219 return (extendMode() != CanNotBeExtended) ;; 220 }; 221 /// If true PDF must provide extended likelihood term.; 222 inline bool mustBeExtended() const {; 223 return (extendMode() == MustBeExtended) ;; 224 }; 225 /// Return expected number of events to be used in calculation of extended; 226 /// likelihood.; 227 virtual double expectedEvents(const RooArgSet* nset) const ;; 228 /// Return expected number of events to be used in calculation of extended; 229 /// likelihood. This function should not be overridden, as it just redirects; 230 /// to the actual virtual function but takes a RooArgSet reference instead of; 231 /// pointer. \see expectedEvents(const RooArgSet*) const; 232 double expectedEvents(const RooArgSet& nset) const {; 233 return expectedEvents(&nset) ;; 234 }; 235 ; 236 virtual std::unique_ptr<RooAbsReal> createExpectedEventsFunc(const RooArgSet* nset) const;; 237 ; 238 // Printing interface (human readable); 239 void printValue(std::ostream& os) const override ;; 240 void printMultiline(std::ostream& os, Int_t contents, bool verbose=false, TString indent="""") const override ;; 241 ; 242 static void verboseEval(Int_t stat) ;; 243 static int verboseEval() ;; 244 ; 245 double extendedTerm(double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;; 246 double extendedTerm(double sumEntries, RooArgSet const* nset, double sumEntriesW",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:11800,Modifiability,extend,extendedTerm,11800,"218 inline bool canBeExtended() const {; 219 return (extendMode() != CanNotBeExtended) ;; 220 }; 221 /// If true PDF must provide extended likelihood term.; 222 inline bool mustBeExtended() const {; 223 return (extendMode() == MustBeExtended) ;; 224 }; 225 /// Return expected number of events to be used in calculation of extended; 226 /// likelihood.; 227 virtual double expectedEvents(const RooArgSet* nset) const ;; 228 /// Return expected number of events to be used in calculation of extended; 229 /// likelihood. This function should not be overridden, as it just redirects; 230 /// to the actual virtual function but takes a RooArgSet reference instead of; 231 /// pointer. \see expectedEvents(const RooArgSet*) const; 232 double expectedEvents(const RooArgSet& nset) const {; 233 return expectedEvents(&nset) ;; 234 }; 235 ; 236 virtual std::unique_ptr<RooAbsReal> createExpectedEventsFunc(const RooArgSet* nset) const;; 237 ; 238 // Printing interface (human readable); 239 void printValue(std::ostream& os) const override ;; 240 void printMultiline(std::ostream& os, Int_t contents, bool verbose=false, TString indent="""") const override ;; 241 ; 242 static void verboseEval(Int_t stat) ;; 243 static int verboseEval() ;; 244 ; 245 double extendedTerm(double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;; 246 double extendedTerm(double sumEntries, RooArgSet const* nset, double sumEntriesW2=0.0, bool doOffset=false) const;; 247 double extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset=false) const;; 248 ; 249 void setNormRange(const char* rangeName) ;; 250 const char* normRange() const {; 251 return _normRange.Length()>0 ? _normRange.Data() : nullptr ;; 252 }; 253 void setNormRangeOverride(const char* rangeName) ;; 254 ; 255 const RooAbsReal* getNormIntegral(const RooArgSet& nset) const { return getNormObj(nullptr,&nset,nullptr) ; }; 256 ; 257 virtual const RooAbsReal* getNormObj(const RooArgSet* set, const RooArgSet* iset,",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:11914,Modifiability,extend,extendedTerm,11914,"dEvents(const RooArgSet* nset) const ;; 228 /// Return expected number of events to be used in calculation of extended; 229 /// likelihood. This function should not be overridden, as it just redirects; 230 /// to the actual virtual function but takes a RooArgSet reference instead of; 231 /// pointer. \see expectedEvents(const RooArgSet*) const; 232 double expectedEvents(const RooArgSet& nset) const {; 233 return expectedEvents(&nset) ;; 234 }; 235 ; 236 virtual std::unique_ptr<RooAbsReal> createExpectedEventsFunc(const RooArgSet* nset) const;; 237 ; 238 // Printing interface (human readable); 239 void printValue(std::ostream& os) const override ;; 240 void printMultiline(std::ostream& os, Int_t contents, bool verbose=false, TString indent="""") const override ;; 241 ; 242 static void verboseEval(Int_t stat) ;; 243 static int verboseEval() ;; 244 ; 245 double extendedTerm(double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;; 246 double extendedTerm(double sumEntries, RooArgSet const* nset, double sumEntriesW2=0.0, bool doOffset=false) const;; 247 double extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset=false) const;; 248 ; 249 void setNormRange(const char* rangeName) ;; 250 const char* normRange() const {; 251 return _normRange.Length()>0 ? _normRange.Data() : nullptr ;; 252 }; 253 void setNormRangeOverride(const char* rangeName) ;; 254 ; 255 const RooAbsReal* getNormIntegral(const RooArgSet& nset) const { return getNormObj(nullptr,&nset,nullptr) ; }; 256 ; 257 virtual const RooAbsReal* getNormObj(const RooArgSet* set, const RooArgSet* iset, const TNamed* rangeName=nullptr) const ;; 258 ; 259 virtual RooAbsGenContext* binnedGenContext(const RooArgSet &vars, bool verbose= false) const ;; 260 ; 261 virtual RooAbsGenContext* genContext(const RooArgSet &vars, const RooDataSet *prototype=nullptr,; 262 const RooArgSet* auxProto=nullptr, bool verbose= false) const ;; 263 ; 264 virtual RooAbsGenContext* autoGenContext(co",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:12034,Modifiability,extend,extendedTerm,12034,"s it just redirects; 230 /// to the actual virtual function but takes a RooArgSet reference instead of; 231 /// pointer. \see expectedEvents(const RooArgSet*) const; 232 double expectedEvents(const RooArgSet& nset) const {; 233 return expectedEvents(&nset) ;; 234 }; 235 ; 236 virtual std::unique_ptr<RooAbsReal> createExpectedEventsFunc(const RooArgSet* nset) const;; 237 ; 238 // Printing interface (human readable); 239 void printValue(std::ostream& os) const override ;; 240 void printMultiline(std::ostream& os, Int_t contents, bool verbose=false, TString indent="""") const override ;; 241 ; 242 static void verboseEval(Int_t stat) ;; 243 static int verboseEval() ;; 244 ; 245 double extendedTerm(double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;; 246 double extendedTerm(double sumEntries, RooArgSet const* nset, double sumEntriesW2=0.0, bool doOffset=false) const;; 247 double extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset=false) const;; 248 ; 249 void setNormRange(const char* rangeName) ;; 250 const char* normRange() const {; 251 return _normRange.Length()>0 ? _normRange.Data() : nullptr ;; 252 }; 253 void setNormRangeOverride(const char* rangeName) ;; 254 ; 255 const RooAbsReal* getNormIntegral(const RooArgSet& nset) const { return getNormObj(nullptr,&nset,nullptr) ; }; 256 ; 257 virtual const RooAbsReal* getNormObj(const RooArgSet* set, const RooArgSet* iset, const TNamed* rangeName=nullptr) const ;; 258 ; 259 virtual RooAbsGenContext* binnedGenContext(const RooArgSet &vars, bool verbose= false) const ;; 260 ; 261 virtual RooAbsGenContext* genContext(const RooArgSet &vars, const RooDataSet *prototype=nullptr,; 262 const RooArgSet* auxProto=nullptr, bool verbose= false) const ;; 263 ; 264 virtual RooAbsGenContext* autoGenContext(const RooArgSet &vars, const RooDataSet* prototype=nullptr, const RooArgSet* auxProto=nullptr,; 265 bool verbose=false, bool autoBinned=true, const char* binnedTag="""") const ;; 266 ; ",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:13498,Modifiability,extend,extended,13498,"umEntriesW2=0.0, bool doOffset=false) const;; 247 double extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset=false) const;; 248 ; 249 void setNormRange(const char* rangeName) ;; 250 const char* normRange() const {; 251 return _normRange.Length()>0 ? _normRange.Data() : nullptr ;; 252 }; 253 void setNormRangeOverride(const char* rangeName) ;; 254 ; 255 const RooAbsReal* getNormIntegral(const RooArgSet& nset) const { return getNormObj(nullptr,&nset,nullptr) ; }; 256 ; 257 virtual const RooAbsReal* getNormObj(const RooArgSet* set, const RooArgSet* iset, const TNamed* rangeName=nullptr) const ;; 258 ; 259 virtual RooAbsGenContext* binnedGenContext(const RooArgSet &vars, bool verbose= false) const ;; 260 ; 261 virtual RooAbsGenContext* genContext(const RooArgSet &vars, const RooDataSet *prototype=nullptr,; 262 const RooArgSet* auxProto=nullptr, bool verbose= false) const ;; 263 ; 264 virtual RooAbsGenContext* autoGenContext(const RooArgSet &vars, const RooDataSet* prototype=nullptr, const RooArgSet* auxProto=nullptr,; 265 bool verbose=false, bool autoBinned=true, const char* binnedTag="""") const ;; 266 ; 267 std::unique_ptr<RooAbsArg> compileForNormSet(RooArgSet const &normSet, RooFit::Detail::CompileContext & ctx) const override;; 268 ; 269private:; 270 ; 271 std::unique_ptr<RooDataSet> generate(RooAbsGenContext& context, const RooArgSet& whatVars, const RooDataSet* prototype,; 272 double nEvents, bool verbose, bool randProtoOrder, bool resampleProto, bool skipInit=false,; 273 bool extended=false) const ;; 274 ; 275 // Implementation version; 276 virtual RooPlot* paramOn(RooPlot* frame, const RooArgSet& params, bool showConstants=false,; 277 const char *label= """", double xmin=0.65,; 278 double xmax= 0.99,double ymax=0.95, const RooCmdArg* formatCmd=nullptr) ;; 279 ; 280 void logBatchComputationErrors(std::span<const double>& outputs, std::size_t begin) const;; 281 bool traceEvalPdf(double value) const;; 282 ; 283 /// Setter for the _normSet member, whic",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:16578,Modifiability,config,configuration,16578,"roto,Int_t nGen,bool resample=false) const ;; 310 ; 311 // This also forces the definition of a copy ctor in derived classes; 312 RooAbsPdf(const RooAbsPdf& other, const char* name = nullptr);; 313 ; 314 static Int_t _verboseEval ;; 315 ; 316 virtual bool syncNormalization(const RooArgSet* dset, bool adjustProxies=true) const ;; 317 ; 318 mutable double _rawValue = 0;; 319 mutable RooAbsReal* _norm = nullptr; //! Normalization integral (owned by _normMgr); 320 mutable RooArgSet const* _normSet = nullptr; //! Normalization set with for above integral; 321 ; 322 class CacheElem : public RooAbsCacheElement {; 323 public:; 324 CacheElem(RooAbsReal& norm) : _norm(&norm) {} ;; 325 ~CacheElem() override ;; 326 RooArgList containedArgs(Action) override { return RooArgList(*_norm) ; }; 327 std::unique_ptr<RooAbsReal> _norm;; 328 } ;; 329 mutable RooObjCacheManager _normMgr ; //! The cache manager; 330 ; 331 bool redirectServersHook(const RooAbsCollection & newServerList, bool mustReplaceAll,; 332 bool nameChange, bool isRecursiveStep) override;; 333 ; 334 mutable Int_t _errorCount = 0; ///< Number of errors remaining to print; 335 mutable Int_t _traceCount = 0; ///< Number of traces remaining to print; 336 mutable Int_t _negCount = 0; ///< Number of negative probabilities remaining to print; 337 ; 338 bool _selectComp = false; ///< Component selection flag for RooAbsPdf::plotCompOn; 339 ; 340 std::unique_ptr<RooNumGenConfig> _specGeneratorConfig ; ///<! MC generator configuration specific for this object; 341 ; 342 TString _normRange ; ///< Normalization range; 343 static TString _normRangeOverride ;; 344 ; 345private:; 346 mutable RooFit::UniqueId<RooArgSet>::Value_t _normSetId = RooFit::UniqueId<RooArgSet>::nullval; ///<! Unique ID of the currently-active normalization set; 347 ; 348 friend class RooAbsReal;; 349 friend class RooChi2Var;; 350 ; 351 ClassDefOverride(RooAbsPdf,5) // Abstract PDF with normalization support; 352};; 353 ; 354 ; 355 ; 356 ; 357#endif; RooAbsReal.",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:21036,Modifiability,config,configuration,21036,"df.h:85; RooAbsPdfAbstract interface for all probability density functions.Definition RooAbsPdf.h:40; RooAbsPdf::syncNormalizationvirtual bool syncNormalization(const RooArgSet *dset, bool adjustProxies=true) constVerify that the normalization integral cached with this PDF is valid for given set of normalization o...Definition RooAbsPdf.cxx:481; RooAbsPdf::getNormdouble getNorm(const RooArgSet &nset) constGet normalisation term needed to normalise the raw values returned by getVal().Definition RooAbsPdf.h:195; RooAbsPdf::compileForNormSetstd::unique_ptr< RooAbsArg > compileForNormSet(RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const overrideDefinition RooAbsPdf.cxx:2788; RooAbsPdf::_normMgrRooObjCacheManager _normMgrDefinition RooAbsPdf.h:329; RooAbsPdf::_normSetIdRooFit::UniqueId< RooArgSet >::Value_t _normSetId! Unique ID of the currently-active normalization setDefinition RooAbsPdf.h:346; RooAbsPdf::_specGeneratorConfigstd::unique_ptr< RooNumGenConfig > _specGeneratorConfig! MC generator configuration specific for this objectDefinition RooAbsPdf.h:340; RooAbsPdf::createNLLRooFit::OwningPtr< RooAbsReal > createNLL(RooAbsData &data, CmdArgs_t const &... cmdArgs)Construct representation of -log(L) of PDF with given dataset.Definition RooAbsPdf.h:163; RooAbsPdf::getValVdouble getValV(const RooArgSet *set=nullptr) const overrideReturn current value, normalized by integrating over the observables in nset.Definition RooAbsPdf.cxx:319; RooAbsPdf::fitToImplvirtual std::unique_ptr< RooFitResult > fitToImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the likelihood fitting routine.Definition RooAbsPdf.cxx:1072; RooAbsPdf::_selectCompbool _selectCompComponent selection flag for RooAbsPdf::plotCompOn.Definition RooAbsPdf.h:338; RooAbsPdf::generateEventvirtual void generateEvent(Int_t code)Interface for generation of an event using the algorithm corresponding to the specified code.Definition RooAbsPdf.cxx:1544; RooAbsPdf::create",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:22313,Modifiability,extend,extended,22313," PDF with given dataset.Definition RooAbsPdf.h:163; RooAbsPdf::getValVdouble getValV(const RooArgSet *set=nullptr) const overrideReturn current value, normalized by integrating over the observables in nset.Definition RooAbsPdf.cxx:319; RooAbsPdf::fitToImplvirtual std::unique_ptr< RooFitResult > fitToImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the likelihood fitting routine.Definition RooAbsPdf.cxx:1072; RooAbsPdf::_selectCompbool _selectCompComponent selection flag for RooAbsPdf::plotCompOn.Definition RooAbsPdf.h:338; RooAbsPdf::generateEventvirtual void generateEvent(Int_t code)Interface for generation of an event using the algorithm corresponding to the specified code.Definition RooAbsPdf.cxx:1544; RooAbsPdf::createScanCdfRooFit::OwningPtr< RooAbsReal > createScanCdf(const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder)Definition RooAbsPdf.cxx:2545; RooAbsPdf::expectedEventsdouble expectedEvents(const RooArgSet &nset) constReturn expected number of events to be used in calculation of extended likelihood.Definition RooAbsPdf.h:232; RooAbsPdf::getConstraintsvirtual RooArgSet * getConstraints(const RooArgSet &, RooArgSet const &, RooArgSet &) constDefinition RooAbsPdf.h:169; RooAbsPdf::setGeneratorConfigvoid setGeneratorConfig()Remove the specialized numeric MC generator configuration associated with this object.Definition RooAbsPdf.cxx:2675; RooAbsPdf::resetErrorCountersvirtual void resetErrorCounters(Int_t resetValue=10)Reset error counter to given value, limiting the number of future error messages for this pdf to 'res...Definition RooAbsPdf.cxx:586; RooAbsPdf::verboseEvalstatic int verboseEval()Return global level of verbosity for p.d.f. evaluations.Definition RooAbsPdf.cxx:2418; RooAbsPdf::createCdfRooFit::OwningPtr< RooAbsReal > createCdf(const RooArgSet &iset, const RooArgSet &nset=RooArgSet())Create a cumulative distribution function of this p.d.f in terms of the observables listed in iset.Definiti",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:22603,Modifiability,config,configuration,22603,", const RooLinkedList &cmdList)Protected implementation of the likelihood fitting routine.Definition RooAbsPdf.cxx:1072; RooAbsPdf::_selectCompbool _selectCompComponent selection flag for RooAbsPdf::plotCompOn.Definition RooAbsPdf.h:338; RooAbsPdf::generateEventvirtual void generateEvent(Int_t code)Interface for generation of an event using the algorithm corresponding to the specified code.Definition RooAbsPdf.cxx:1544; RooAbsPdf::createScanCdfRooFit::OwningPtr< RooAbsReal > createScanCdf(const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder)Definition RooAbsPdf.cxx:2545; RooAbsPdf::expectedEventsdouble expectedEvents(const RooArgSet &nset) constReturn expected number of events to be used in calculation of extended likelihood.Definition RooAbsPdf.h:232; RooAbsPdf::getConstraintsvirtual RooArgSet * getConstraints(const RooArgSet &, RooArgSet const &, RooArgSet &) constDefinition RooAbsPdf.h:169; RooAbsPdf::setGeneratorConfigvoid setGeneratorConfig()Remove the specialized numeric MC generator configuration associated with this object.Definition RooAbsPdf.cxx:2675; RooAbsPdf::resetErrorCountersvirtual void resetErrorCounters(Int_t resetValue=10)Reset error counter to given value, limiting the number of future error messages for this pdf to 'res...Definition RooAbsPdf.cxx:586; RooAbsPdf::verboseEvalstatic int verboseEval()Return global level of verbosity for p.d.f. evaluations.Definition RooAbsPdf.cxx:2418; RooAbsPdf::createCdfRooFit::OwningPtr< RooAbsReal > createCdf(const RooArgSet &iset, const RooArgSet &nset=RooArgSet())Create a cumulative distribution function of this p.d.f in terms of the observables listed in iset.Definition RooAbsPdf.cxx:2468; RooAbsPdf::isActiveNormSetbool isActiveNormSet(RooArgSet const *normSet) constChecks if normSet is the currently active normalization set of this PDF, meaning is exactly the same ...Definition RooAbsPdf.h:299; RooAbsPdf::expectedEventsvirtual double expectedEvents(const RooArgSet *nset) constReturn",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:23628,Modifiability,extend,extended,23628,"ove the specialized numeric MC generator configuration associated with this object.Definition RooAbsPdf.cxx:2675; RooAbsPdf::resetErrorCountersvirtual void resetErrorCounters(Int_t resetValue=10)Reset error counter to given value, limiting the number of future error messages for this pdf to 'res...Definition RooAbsPdf.cxx:586; RooAbsPdf::verboseEvalstatic int verboseEval()Return global level of verbosity for p.d.f. evaluations.Definition RooAbsPdf.cxx:2418; RooAbsPdf::createCdfRooFit::OwningPtr< RooAbsReal > createCdf(const RooArgSet &iset, const RooArgSet &nset=RooArgSet())Create a cumulative distribution function of this p.d.f in terms of the observables listed in iset.Definition RooAbsPdf.cxx:2468; RooAbsPdf::isActiveNormSetbool isActiveNormSet(RooArgSet const *normSet) constChecks if normSet is the currently active normalization set of this PDF, meaning is exactly the same ...Definition RooAbsPdf.h:299; RooAbsPdf::expectedEventsvirtual double expectedEvents(const RooArgSet *nset) constReturn expected number of events to be used in calculation of extended likelihood.Definition RooAbsPdf.cxx:2398; RooAbsPdf::binnedGenContextvirtual RooAbsGenContext * binnedGenContext(const RooArgSet &vars, bool verbose=false) constReturn a binned generator context.Definition RooAbsPdf.cxx:1117; RooAbsPdf::_normRangeTString _normRangeNormalization range.Definition RooAbsPdf.h:342; RooAbsPdf::isDirectGenSafevirtual bool isDirectGenSafe(const RooAbsArg &arg) constCheck if given observable can be safely generated using the pdfs internal generator mechanism (if tha...Definition RooAbsPdf.cxx:1557; RooAbsPdf::randomizeProtoOrderInt_t * randomizeProtoOrder(Int_t nProto, Int_t nGen, bool resample=false) constReturn lookup table with randomized order for nProto prototype events.Definition RooAbsPdf.cxx:1485; RooAbsPdf::setNormRangevoid setNormRange(const char *rangeName)Definition RooAbsPdf.cxx:2726; RooAbsPdf::getNormIntegralconst RooAbsReal * getNormIntegral(const RooArgSet &nset) constD",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:24749,Modifiability,extend,extended,24749,"bsGenContext * binnedGenContext(const RooArgSet &vars, bool verbose=false) constReturn a binned generator context.Definition RooAbsPdf.cxx:1117; RooAbsPdf::_normRangeTString _normRangeNormalization range.Definition RooAbsPdf.h:342; RooAbsPdf::isDirectGenSafevirtual bool isDirectGenSafe(const RooAbsArg &arg) constCheck if given observable can be safely generated using the pdfs internal generator mechanism (if tha...Definition RooAbsPdf.cxx:1557; RooAbsPdf::randomizeProtoOrderInt_t * randomizeProtoOrder(Int_t nProto, Int_t nGen, bool resample=false) constReturn lookup table with randomized order for nProto prototype events.Definition RooAbsPdf.cxx:1485; RooAbsPdf::setNormRangevoid setNormRange(const char *rangeName)Definition RooAbsPdf.cxx:2726; RooAbsPdf::getNormIntegralconst RooAbsReal * getNormIntegral(const RooArgSet &nset) constDefinition RooAbsPdf.h:255; RooAbsPdf::~RooAbsPdf~RooAbsPdf() overrideDestructor.Definition RooAbsPdf.cxx:277; RooAbsPdf::mustBeExtendedbool mustBeExtended() constIf true PDF must provide extended likelihood term.Definition RooAbsPdf.h:222; RooAbsPdf::_normSetRooArgSet const * _normSetNormalization integral (owned by _normMgr)Definition RooAbsPdf.h:320; RooAbsPdf::plotOnRooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const overrideHelper calling plotOn(RooPlot*, RooLinkedList&) const.Definition RooAbsPdf.h:124; RooAbsPdf::specialGeneratorConfigRooNumGenConfig * specialGeneratorConfig() constReturns the specialized integrator configuration for this RooAbsReal.Definition RooAbsPdf.cxx:2623; RooAbsPdf::selfNormalizedvirtual bool selfNormalized() constShows if a PDF is self-normalized, which means that no attempt is made to add a normalization term.Definition RooAbsPdf.h:207; RooAbsPdf::printMultilinevo",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:25440,Modifiability,config,configuration,25440,"mRangevoid setNormRange(const char *rangeName)Definition RooAbsPdf.cxx:2726; RooAbsPdf::getNormIntegralconst RooAbsReal * getNormIntegral(const RooArgSet &nset) constDefinition RooAbsPdf.h:255; RooAbsPdf::~RooAbsPdf~RooAbsPdf() overrideDestructor.Definition RooAbsPdf.cxx:277; RooAbsPdf::mustBeExtendedbool mustBeExtended() constIf true PDF must provide extended likelihood term.Definition RooAbsPdf.h:222; RooAbsPdf::_normSetRooArgSet const * _normSetNormalization integral (owned by _normMgr)Definition RooAbsPdf.h:320; RooAbsPdf::plotOnRooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const overrideHelper calling plotOn(RooPlot*, RooLinkedList&) const.Definition RooAbsPdf.h:124; RooAbsPdf::specialGeneratorConfigRooNumGenConfig * specialGeneratorConfig() constReturns the specialized integrator configuration for this RooAbsReal.Definition RooAbsPdf.cxx:2623; RooAbsPdf::selfNormalizedvirtual bool selfNormalized() constShows if a PDF is self-normalized, which means that no attempt is made to add a normalization term.Definition RooAbsPdf.h:207; RooAbsPdf::printMultilinevoid printMultiline(std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const overridePrint multi line detailed information of this RooAbsPdf.Definition RooAbsPdf.cxx:1100; RooAbsPdf::_traceCountInt_t _traceCountNumber of traces remaining to print.Definition RooAbsPdf.h:335; RooAbsPdf::canBeExtendedbool canBeExtended() constIf true, PDF can provide extended likelihood term.Definition RooAbsPdf.h:218; RooAbsPdf::_normRooAbsReal * _normDefinition RooAbsPdf.h:319; RooAbsPdf::setTraceCountervoid setTraceCounter(Int_t value, bool allNodes=false)Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'val...Definiti",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:26089,Modifiability,extend,extended,26089," &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const overrideHelper calling plotOn(RooPlot*, RooLinkedList&) const.Definition RooAbsPdf.h:124; RooAbsPdf::specialGeneratorConfigRooNumGenConfig * specialGeneratorConfig() constReturns the specialized integrator configuration for this RooAbsReal.Definition RooAbsPdf.cxx:2623; RooAbsPdf::selfNormalizedvirtual bool selfNormalized() constShows if a PDF is self-normalized, which means that no attempt is made to add a normalization term.Definition RooAbsPdf.h:207; RooAbsPdf::printMultilinevoid printMultiline(std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const overridePrint multi line detailed information of this RooAbsPdf.Definition RooAbsPdf.cxx:1100; RooAbsPdf::_traceCountInt_t _traceCountNumber of traces remaining to print.Definition RooAbsPdf.h:335; RooAbsPdf::canBeExtendedbool canBeExtended() constIf true, PDF can provide extended likelihood term.Definition RooAbsPdf.h:218; RooAbsPdf::_normRooAbsReal * _normDefinition RooAbsPdf.h:319; RooAbsPdf::setTraceCountervoid setTraceCounter(Int_t value, bool allNodes=false)Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'val...Definition RooAbsPdf.cxx:598; RooAbsPdf::prepareMultiGenGenSpec * prepareMultiGen(const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={})Prepare GenSpec configuration object for efficient generation of multiple datasets from identical spe...Definition RooAbsPdf.cxx:1299; RooAbsPdf::_errorCountInt_t _errorCountNumber of errors remaining to print.Definition RooAbsPdf.h:334; RooAbsPdf::ExtendModeExtendModeDefinition RooAbsPdf.h:212; RooAbsPdf::CanBeExtended@ CanBeExtendedDefinition RooAbsPdf.h:212; RooAbsPdf::MustBeExtended@ MustBeExtendedDefi",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:26668,Modifiability,config,configuration,26668,"s self-normalized, which means that no attempt is made to add a normalization term.Definition RooAbsPdf.h:207; RooAbsPdf::printMultilinevoid printMultiline(std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const overridePrint multi line detailed information of this RooAbsPdf.Definition RooAbsPdf.cxx:1100; RooAbsPdf::_traceCountInt_t _traceCountNumber of traces remaining to print.Definition RooAbsPdf.h:335; RooAbsPdf::canBeExtendedbool canBeExtended() constIf true, PDF can provide extended likelihood term.Definition RooAbsPdf.h:218; RooAbsPdf::_normRooAbsReal * _normDefinition RooAbsPdf.h:319; RooAbsPdf::setTraceCountervoid setTraceCounter(Int_t value, bool allNodes=false)Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'val...Definition RooAbsPdf.cxx:598; RooAbsPdf::prepareMultiGenGenSpec * prepareMultiGen(const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={})Prepare GenSpec configuration object for efficient generation of multiple datasets from identical spe...Definition RooAbsPdf.cxx:1299; RooAbsPdf::_errorCountInt_t _errorCountNumber of errors remaining to print.Definition RooAbsPdf.h:334; RooAbsPdf::ExtendModeExtendModeDefinition RooAbsPdf.h:212; RooAbsPdf::CanBeExtended@ CanBeExtendedDefinition RooAbsPdf.h:212; RooAbsPdf::MustBeExtended@ MustBeExtendedDefinition RooAbsPdf.h:212; RooAbsPdf::CanNotBeExtended@ CanNotBeExtendedDefinition RooAbsPdf.h:212; RooAbsPdf::_rawValuedouble _rawValueDefinition RooAbsPdf.h:318; RooAbsPdf::normRangeconst char * normRange() constDefinition RooAbsPdf.h:250; RooAbsPdf::createExpectedEventsFuncvirtual std::unique_ptr< RooAbsReal > createExpectedEventsFunc(const RooArgSet *nset) constReturns an object that represents the expected number of events for a given normalization set,...Definition RooAbsPdf.cxx:2812; RooAbsPdf::paramOnvirtual Ro",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:30401,Modifiability,config,configuration,30401,"RooAbsPdf.cxx:2746; RooAbsPdf::generateSimGlobalvirtual RooFit::OwningPtr< RooDataSet > generateSimGlobal(const RooArgSet &whatVars, Int_t nEvents)Special generator interface for generation of 'global observables' – for RooStats tools.Definition RooAbsPdf.cxx:1799; RooAbsPdf::normalizeWithNaNPackingdouble normalizeWithNaNPacking(double rawVal, double normVal) constDefinition RooAbsPdf.cxx:282; RooAbsPdf::autoGenContextvirtual RooAbsGenContext * autoGenContext(const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") constDefinition RooAbsPdf.cxx:1136; RooAbsPdf::getAllConstraintsRooArgSet * getAllConstraints(const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) constThis helper function finds and collects all constraints terms of all component p.d....Definition RooAbsPdf.cxx:2562; RooAbsPdf::getGeneratorConfigconst RooNumGenConfig * getGeneratorConfig() constReturn the numeric MC generator configuration used for this object.Definition RooAbsPdf.cxx:2651; RooAbsPdf::initGeneratorvirtual void initGenerator(Int_t code)Interface for one-time initialization to setup the generator for the specified code.Definition RooAbsPdf.cxx:1532; RooAbsPdf::extendModevirtual ExtendMode extendMode() constReturns ability of PDF to provide extended likelihood terms.Definition RooAbsPdf.h:216; RooAbsPdf::RooAbsPdfRooAbsPdf()Default constructor.Definition RooAbsPdf.cxx:230; RooAbsPdf::generateBinnedvirtual RooFit::OwningPtr< RooDataHist > generateBinned(const RooArgSet &whatVars, double nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}) constAs RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,...Definition RooAbsPdf.h:110; RooAbsPdf::traceEvalPdfbool traceEvalPdf(double value) constCheck that passed value is positive and n",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:30655,Modifiability,extend,extendModevirtual,30655,"wVal, double normVal) constDefinition RooAbsPdf.cxx:282; RooAbsPdf::autoGenContextvirtual RooAbsGenContext * autoGenContext(const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") constDefinition RooAbsPdf.cxx:1136; RooAbsPdf::getAllConstraintsRooArgSet * getAllConstraints(const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) constThis helper function finds and collects all constraints terms of all component p.d....Definition RooAbsPdf.cxx:2562; RooAbsPdf::getGeneratorConfigconst RooNumGenConfig * getGeneratorConfig() constReturn the numeric MC generator configuration used for this object.Definition RooAbsPdf.cxx:2651; RooAbsPdf::initGeneratorvirtual void initGenerator(Int_t code)Interface for one-time initialization to setup the generator for the specified code.Definition RooAbsPdf.cxx:1532; RooAbsPdf::extendModevirtual ExtendMode extendMode() constReturns ability of PDF to provide extended likelihood terms.Definition RooAbsPdf.h:216; RooAbsPdf::RooAbsPdfRooAbsPdf()Default constructor.Definition RooAbsPdf.cxx:230; RooAbsPdf::generateBinnedvirtual RooFit::OwningPtr< RooDataHist > generateBinned(const RooArgSet &whatVars, double nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}) constAs RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,...Definition RooAbsPdf.h:110; RooAbsPdf::traceEvalPdfbool traceEvalPdf(double value) constCheck that passed value is positive and not 'not-a-number'.Definition RooAbsPdf.cxx:384; RooAbsPdf::defaultGeneratorConfigstatic RooNumGenConfig * defaultGeneratorConfig()Returns the default numeric MC generator configuration for all RooAbsReals.Definition RooAbsPdf.cxx:2613; RooAbsPdf::redirectServersHookbool redirectServersHook(const RooAbsCollection &newServerList, bool mustR",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:30684,Modifiability,extend,extendMode,30684,"wVal, double normVal) constDefinition RooAbsPdf.cxx:282; RooAbsPdf::autoGenContextvirtual RooAbsGenContext * autoGenContext(const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") constDefinition RooAbsPdf.cxx:1136; RooAbsPdf::getAllConstraintsRooArgSet * getAllConstraints(const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) constThis helper function finds and collects all constraints terms of all component p.d....Definition RooAbsPdf.cxx:2562; RooAbsPdf::getGeneratorConfigconst RooNumGenConfig * getGeneratorConfig() constReturn the numeric MC generator configuration used for this object.Definition RooAbsPdf.cxx:2651; RooAbsPdf::initGeneratorvirtual void initGenerator(Int_t code)Interface for one-time initialization to setup the generator for the specified code.Definition RooAbsPdf.cxx:1532; RooAbsPdf::extendModevirtual ExtendMode extendMode() constReturns ability of PDF to provide extended likelihood terms.Definition RooAbsPdf.h:216; RooAbsPdf::RooAbsPdfRooAbsPdf()Default constructor.Definition RooAbsPdf.cxx:230; RooAbsPdf::generateBinnedvirtual RooFit::OwningPtr< RooDataHist > generateBinned(const RooArgSet &whatVars, double nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}) constAs RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,...Definition RooAbsPdf.h:110; RooAbsPdf::traceEvalPdfbool traceEvalPdf(double value) constCheck that passed value is positive and not 'not-a-number'.Definition RooAbsPdf.cxx:384; RooAbsPdf::defaultGeneratorConfigstatic RooNumGenConfig * defaultGeneratorConfig()Returns the default numeric MC generator configuration for all RooAbsReals.Definition RooAbsPdf.cxx:2613; RooAbsPdf::redirectServersHookbool redirectServersHook(const RooAbsCollection &newServerList, bool mustR",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:30736,Modifiability,extend,extended,30736,"wVal, double normVal) constDefinition RooAbsPdf.cxx:282; RooAbsPdf::autoGenContextvirtual RooAbsGenContext * autoGenContext(const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") constDefinition RooAbsPdf.cxx:1136; RooAbsPdf::getAllConstraintsRooArgSet * getAllConstraints(const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) constThis helper function finds and collects all constraints terms of all component p.d....Definition RooAbsPdf.cxx:2562; RooAbsPdf::getGeneratorConfigconst RooNumGenConfig * getGeneratorConfig() constReturn the numeric MC generator configuration used for this object.Definition RooAbsPdf.cxx:2651; RooAbsPdf::initGeneratorvirtual void initGenerator(Int_t code)Interface for one-time initialization to setup the generator for the specified code.Definition RooAbsPdf.cxx:1532; RooAbsPdf::extendModevirtual ExtendMode extendMode() constReturns ability of PDF to provide extended likelihood terms.Definition RooAbsPdf.h:216; RooAbsPdf::RooAbsPdfRooAbsPdf()Default constructor.Definition RooAbsPdf.cxx:230; RooAbsPdf::generateBinnedvirtual RooFit::OwningPtr< RooDataHist > generateBinned(const RooArgSet &whatVars, double nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}) constAs RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,...Definition RooAbsPdf.h:110; RooAbsPdf::traceEvalPdfbool traceEvalPdf(double value) constCheck that passed value is positive and not 'not-a-number'.Definition RooAbsPdf.cxx:384; RooAbsPdf::defaultGeneratorConfigstatic RooNumGenConfig * defaultGeneratorConfig()Returns the default numeric MC generator configuration for all RooAbsReals.Definition RooAbsPdf.cxx:2613; RooAbsPdf::redirectServersHookbool redirectServersHook(const RooAbsCollection &newServerList, bool mustR",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:31529,Modifiability,config,configuration,31529,"itGeneratorvirtual void initGenerator(Int_t code)Interface for one-time initialization to setup the generator for the specified code.Definition RooAbsPdf.cxx:1532; RooAbsPdf::extendModevirtual ExtendMode extendMode() constReturns ability of PDF to provide extended likelihood terms.Definition RooAbsPdf.h:216; RooAbsPdf::RooAbsPdfRooAbsPdf()Default constructor.Definition RooAbsPdf.cxx:230; RooAbsPdf::generateBinnedvirtual RooFit::OwningPtr< RooDataHist > generateBinned(const RooArgSet &whatVars, double nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}) constAs RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,...Definition RooAbsPdf.h:110; RooAbsPdf::traceEvalPdfbool traceEvalPdf(double value) constCheck that passed value is positive and not 'not-a-number'.Definition RooAbsPdf.cxx:384; RooAbsPdf::defaultGeneratorConfigstatic RooNumGenConfig * defaultGeneratorConfig()Returns the default numeric MC generator configuration for all RooAbsReals.Definition RooAbsPdf.cxx:2613; RooAbsPdf::redirectServersHookbool redirectServersHook(const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) overrideThe cache manager.Definition RooAbsPdf.cxx:2768; RooAbsPdf::printValuevoid printValue(std::ostream &os) const overridePrint value of p.d.f, also print normalization integral that was last used, if any.Definition RooAbsPdf.cxx:1081; RooAbsPdf::createNLLImplvirtual std::unique_ptr< RooAbsReal > createNLLImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the NLL creation routine.Definition RooAbsPdf.cxx:941; RooAbsPdf::logBatchComputationErrorsvoid logBatchComputationErrors(std::span< const double > &outputs, std::size_t begin) constScan through outputs and fix+log all nans and negative values.Definition RooAbsPdf.cxx:654; RooAbsPdf::genContextvirtual RooAbsGenContext * genContext(const Ro",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:33005,Modifiability,extend,extendedTermdouble,33005,"bsReal > createNLLImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the NLL creation routine.Definition RooAbsPdf.cxx:941; RooAbsPdf::logBatchComputationErrorsvoid logBatchComputationErrors(std::span< const double > &outputs, std::size_t begin) constScan through outputs and fix+log all nans and negative values.Definition RooAbsPdf.cxx:654; RooAbsPdf::genContextvirtual RooAbsGenContext * genContext(const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) constInterface function to create a generator context from a p.d.f.Definition RooAbsPdf.cxx:1127; RooAbsPdf::getLogProbabilitiesvoid getLogProbabilities(std::span< const double > pdfValues, double *output) constDefinition RooAbsPdf.cxx:671; RooAbsPdf::_normRangeOverridestatic TString _normRangeOverrideDefinition RooAbsPdf.h:343; RooAbsPdf::_verboseEvalstatic Int_t _verboseEvalDefinition RooAbsPdf.h:314; RooAbsPdf::extendedTermdouble extendedTerm(double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) constDefinition RooAbsPdf.cxx:730; RooAbsPdf::getGeneratorvirtual Int_t getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) constLoad generatedVars with the subset of directVars that we can generate events for, and return a code t...Definition RooAbsPdf.cxx:1522; RooAbsPdf::createProjectionvirtual RooAbsPdf * createProjection(const RooArgSet &iset)Return a p.d.f that represent a projection of this p.d.f integrated over given observables.Definition RooAbsPdf.cxx:2446; RooAbsPdf::getLogValvirtual double getLogVal(const RooArgSet *set=nullptr) constReturn the log of the current value with given normalization An error message is printed if the argum...Definition RooAbsPdf.cxx:620; RooAbsRealAbstract base class for objects that represent a real value and implements functionality common to al...Definition RooAbsReal.h:59; RooAbsReal::maxValvirtual double maxVal(Int_t code) con",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:33024,Modifiability,extend,extendedTerm,33024,"bsReal > createNLLImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the NLL creation routine.Definition RooAbsPdf.cxx:941; RooAbsPdf::logBatchComputationErrorsvoid logBatchComputationErrors(std::span< const double > &outputs, std::size_t begin) constScan through outputs and fix+log all nans and negative values.Definition RooAbsPdf.cxx:654; RooAbsPdf::genContextvirtual RooAbsGenContext * genContext(const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) constInterface function to create a generator context from a p.d.f.Definition RooAbsPdf.cxx:1127; RooAbsPdf::getLogProbabilitiesvoid getLogProbabilities(std::span< const double > pdfValues, double *output) constDefinition RooAbsPdf.cxx:671; RooAbsPdf::_normRangeOverridestatic TString _normRangeOverrideDefinition RooAbsPdf.h:343; RooAbsPdf::_verboseEvalstatic Int_t _verboseEvalDefinition RooAbsPdf.h:314; RooAbsPdf::extendedTermdouble extendedTerm(double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) constDefinition RooAbsPdf.cxx:730; RooAbsPdf::getGeneratorvirtual Int_t getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) constLoad generatedVars with the subset of directVars that we can generate events for, and return a code t...Definition RooAbsPdf.cxx:1522; RooAbsPdf::createProjectionvirtual RooAbsPdf * createProjection(const RooArgSet &iset)Return a p.d.f that represent a projection of this p.d.f integrated over given observables.Definition RooAbsPdf.cxx:2446; RooAbsPdf::getLogValvirtual double getLogVal(const RooArgSet *set=nullptr) constReturn the log of the current value with given normalization An error message is printed if the argum...Definition RooAbsPdf.cxx:620; RooAbsRealAbstract base class for objects that represent a real value and implements functionality common to al...Definition RooAbsReal.h:59; RooAbsReal::maxValvirtual double maxVal(Int_t code) con",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:35242,Modifiability,extend,extended,35242,"*frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) constPlot (project) PDF on specified frame.Definition RooAbsReal.cxx:1611; RooArgListRooArgList is a container object that can hold multiple RooAbsArg objects.Definition RooArgList.h:22; RooArgSetRooArgSet is a container object that can hold multiple RooAbsArg objects.Definition RooArgSet.h:24; RooCategoryObject to represent discrete states.Definition RooCategory.h:28; RooChi2VarSimple calculation from a binned dataset and a PDF.Definition RooChi2Var.h:19; RooCmdArgNamed container for two doubles, two integers two object points and three string pointers that can be...Definition RooCmdArg.h:26; RooDataSetContainer class to hold unbinned data.Definition RooDataSet.h:33; RooExtendPdfRooExtendPdf is a wrapper around an existing PDF that adds a parameteric extended likelihood term to ...Definition RooExtendPdf.h:22; RooFitResultRooFitResult is a container class to hold the input and output of a PDF fit to a dataset.Definition RooFitResult.h:40; RooFit::Detail::CompileContextDefinition NormalizationHelpers.h:29; RooLinkedListCollection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list...Definition RooLinkedList.h:44; RooMCStudyHelper class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fittin...Definition RooMCStudy.h:32; RooMinimizerWrapper class around ROOT::Math::Minimizer that provides a seamless interface between the minimizer f...Definition RooMinimizer.h:48; RooNumGenConfigHolds the configuration parameters of the various numeric integrators used by RooRealIntegral.Definition RooNumGenConfig.h:25; RooObjCacheManagerImplementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elem...Definitio",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:35963,Modifiability,config,configuration,35963,"tegers two object points and three string pointers that can be...Definition RooCmdArg.h:26; RooDataSetContainer class to hold unbinned data.Definition RooDataSet.h:33; RooExtendPdfRooExtendPdf is a wrapper around an existing PDF that adds a parameteric extended likelihood term to ...Definition RooExtendPdf.h:22; RooFitResultRooFitResult is a container class to hold the input and output of a PDF fit to a dataset.Definition RooFitResult.h:40; RooFit::Detail::CompileContextDefinition NormalizationHelpers.h:29; RooLinkedListCollection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list...Definition RooLinkedList.h:44; RooMCStudyHelper class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fittin...Definition RooMCStudy.h:32; RooMinimizerWrapper class around ROOT::Math::Minimizer that provides a seamless interface between the minimizer f...Definition RooMinimizer.h:48; RooNumGenConfigHolds the configuration parameters of the various numeric integrators used by RooRealIntegral.Definition RooNumGenConfig.h:25; RooObjCacheManagerImplementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elem...Definition RooObjCacheManager.h:29; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooRealIntegralPerforms hybrid numerical/analytical integrals of RooAbsReal objects.Definition RooRealIntegral.h:29; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TListA doubly linked list.Definition TList.h:38; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::Datac",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:37792,Modifiability,enhance,enhance,37792,"of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elem...Definition RooObjCacheManager.h:29; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooRealIntegralPerforms hybrid numerical/analytical integrals of RooAbsReal objects.Definition RooRealIntegral.h:29; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TListA doubly linked list.Definition TList.h:38; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::Dataconst char * Data() constDefinition TString.h:376; int; RooFit::NumEventsRooCmdArg NumEvents(Int_t numEvents)Definition RooGlobalFunc.cxx:816; RooFit::Detail::createCmdListstd::unique_ptr< RooLinkedList > createCmdList()Definition RooGlobalFunc.h:463; RooFit::getUniqueIdUniqueId_t const & getUniqueId(Class const *ptr)A helper function to replace pointer comparisons with UniqueId comparisons.Definition UniqueId.h:89; RooFit::makeOwningPtrOwningPtr< T > makeOwningPtr(std::unique_ptr< T > &&ptr)Internal helper to turn a std::unique_ptr<T> into an OwningPtr.Definition Config.h:40; RooFit::OwningPtrT * OwningPtrAn alias for raw pointers for indicating that the return type of a RooFit function is an owning point...Definition Config.h:35; RooFit::UniqueIdA UniqueId can be added as a class member to enhance any class with a unique identifier for each inst...Definition UniqueId.h:39; RooFit::UniqueId::Value_tunsigned long Value_tDefinition UniqueId.h:41; outputstatic void output(). roofitroofitcoreincRooAbsPdf.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:15983,Performance,cache,cache,15983,"PlotOpt o) const override;; 306 ; 307 friend class RooMCStudy ;; 308 ; 309 Int_t* randomizeProtoOrder(Int_t nProto,Int_t nGen,bool resample=false) const ;; 310 ; 311 // This also forces the definition of a copy ctor in derived classes; 312 RooAbsPdf(const RooAbsPdf& other, const char* name = nullptr);; 313 ; 314 static Int_t _verboseEval ;; 315 ; 316 virtual bool syncNormalization(const RooArgSet* dset, bool adjustProxies=true) const ;; 317 ; 318 mutable double _rawValue = 0;; 319 mutable RooAbsReal* _norm = nullptr; //! Normalization integral (owned by _normMgr); 320 mutable RooArgSet const* _normSet = nullptr; //! Normalization set with for above integral; 321 ; 322 class CacheElem : public RooAbsCacheElement {; 323 public:; 324 CacheElem(RooAbsReal& norm) : _norm(&norm) {} ;; 325 ~CacheElem() override ;; 326 RooArgList containedArgs(Action) override { return RooArgList(*_norm) ; }; 327 std::unique_ptr<RooAbsReal> _norm;; 328 } ;; 329 mutable RooObjCacheManager _normMgr ; //! The cache manager; 330 ; 331 bool redirectServersHook(const RooAbsCollection & newServerList, bool mustReplaceAll,; 332 bool nameChange, bool isRecursiveStep) override;; 333 ; 334 mutable Int_t _errorCount = 0; ///< Number of errors remaining to print; 335 mutable Int_t _traceCount = 0; ///< Number of traces remaining to print; 336 mutable Int_t _negCount = 0; ///< Number of negative probabilities remaining to print; 337 ; 338 bool _selectComp = false; ///< Component selection flag for RooAbsPdf::plotCompOn; 339 ; 340 std::unique_ptr<RooNumGenConfig> _specGeneratorConfig ; ///<! MC generator configuration specific for this object; 341 ; 342 TString _normRange ; ///< Normalization range; 343 static TString _normRangeOverride ;; 344 ; 345private:; 346 mutable RooFit::UniqueId<RooArgSet>::Value_t _normSetId = RooFit::UniqueId<RooArgSet>::nullval; ///<! Unique ID of the currently-active normalization set; 347 ; 348 friend class RooAbsReal;; 349 friend class RooChi2Var;; 350 ; 351 ClassDefOverride",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:18199,Performance,cache,cache,18199,"ClassDef#define ClassDef(name, id)Definition Rtypes.h:342; ClassDefOverride#define ClassDefOverride(name, id)Definition Rtypes.h:346; indentstatic void indent(ostringstream &buf, int indent_level)Definition TClingCallFunc.cxx:89; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; namechar name[80]Definition TGX11.cxx:110; xminfloat xminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; ymaxfloat ymaxDefinition THbookFile.cxx:95; UniqueId.h; RooAbsArgCommon abstract base class for objects that represent a value and a ""shape"" in RooFit.Definition RooAbsArg.h:79; RooAbsCacheElementAbstract base class for objects to be stored in RooAbsCache cache manager objects.Definition RooAbsCacheElement.h:26; RooAbsCacheElement::ActionActionDefinition RooAbsCacheElement.h:39; RooAbsCollectionAbstract container object that can hold multiple RooAbsArg objects.Definition RooAbsCollection.h:65; RooAbsDataAbstract base class for binned and unbinned datasets.Definition RooAbsData.h:57; RooAbsGenContextAbstract base class for generator contexts of RooAbsPdf objects.Definition RooAbsGenContext.h:26; RooAbsPdf::CacheElemNormalization set with for above integral.Definition RooAbsPdf.h:322; RooAbsPdf::CacheElem::_normstd::unique_ptr< RooAbsReal > _normDefinition RooAbsPdf.h:327; RooAbsPdf::CacheElem::~CacheElem~CacheElem() overrideDestructor of normalization cache element.Definition RooAbsPdf.cxx:2430; RooAbsPdf::CacheElem::CacheElemCacheElem(RooAbsReal &norm)Definition RooAbsPdf.h:324; RooAbsPdf::CacheElem::containedArgsRooArgList containedArgs(Action) overrideDefinition RooAbsPdf.h:326; RooAbsPdf::GenSpecDefinit",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:18908,Performance,cache,cache,18908,"finition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; ymaxfloat ymaxDefinition THbookFile.cxx:95; UniqueId.h; RooAbsArgCommon abstract base class for objects that represent a value and a ""shape"" in RooFit.Definition RooAbsArg.h:79; RooAbsCacheElementAbstract base class for objects to be stored in RooAbsCache cache manager objects.Definition RooAbsCacheElement.h:26; RooAbsCacheElement::ActionActionDefinition RooAbsCacheElement.h:39; RooAbsCollectionAbstract container object that can hold multiple RooAbsArg objects.Definition RooAbsCollection.h:65; RooAbsDataAbstract base class for binned and unbinned datasets.Definition RooAbsData.h:57; RooAbsGenContextAbstract base class for generator contexts of RooAbsPdf objects.Definition RooAbsGenContext.h:26; RooAbsPdf::CacheElemNormalization set with for above integral.Definition RooAbsPdf.h:322; RooAbsPdf::CacheElem::_normstd::unique_ptr< RooAbsReal > _normDefinition RooAbsPdf.h:327; RooAbsPdf::CacheElem::~CacheElem~CacheElem() overrideDestructor of normalization cache element.Definition RooAbsPdf.cxx:2430; RooAbsPdf::CacheElem::CacheElemCacheElem(RooAbsReal &norm)Definition RooAbsPdf.h:324; RooAbsPdf::CacheElem::containedArgsRooArgList containedArgs(Action) overrideDefinition RooAbsPdf.h:326; RooAbsPdf::GenSpecDefinition RooAbsPdf.h:72; RooAbsPdf::GenSpec::_genContextstd::unique_ptr< RooAbsGenContext > _genContextDefinition RooAbsPdf.h:83; RooAbsPdf::GenSpec::~GenSpecvirtual ~GenSpec(); RooAbsPdf::GenSpec::_whatVarsRooArgSet _whatVarsDefinition RooAbsPdf.h:84; RooAbsPdf::GenSpec::_initbool _initDefinition RooAbsPdf.h:91; RooAbsPdf::GenSpec::_extendedbool _extendedDefinition RooAbsPdf.h:87; RooAbsPdf::GenSpec::GenSpecGenSpec(const GenSpec &other); RooAbsPdf::GenSpec::_nGenInt_t _nGenDefinition RooAbsPdf.h:86; RooAbsPdf::GenSpec::GenSpecGenSpec()=default; RooAbsPdf::GenSpec::_randProtobool _randProtoDefinition RooAbsPdf.h:88; RooAbsPdf::GenSpec::_resampleProtobool _resampleProtoDefinition RooAbsPdf.h:89; RooA",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:20264,Performance,cache,cached,20264,"xtstd::unique_ptr< RooAbsGenContext > _genContextDefinition RooAbsPdf.h:83; RooAbsPdf::GenSpec::~GenSpecvirtual ~GenSpec(); RooAbsPdf::GenSpec::_whatVarsRooArgSet _whatVarsDefinition RooAbsPdf.h:84; RooAbsPdf::GenSpec::_initbool _initDefinition RooAbsPdf.h:91; RooAbsPdf::GenSpec::_extendedbool _extendedDefinition RooAbsPdf.h:87; RooAbsPdf::GenSpec::GenSpecGenSpec(const GenSpec &other); RooAbsPdf::GenSpec::_nGenInt_t _nGenDefinition RooAbsPdf.h:86; RooAbsPdf::GenSpec::GenSpecGenSpec()=default; RooAbsPdf::GenSpec::_randProtobool _randProtoDefinition RooAbsPdf.h:88; RooAbsPdf::GenSpec::_resampleProtobool _resampleProtoDefinition RooAbsPdf.h:89; RooAbsPdf::GenSpec::_dsetNameTString _dsetNameDefinition RooAbsPdf.h:90; RooAbsPdf::GenSpec::_protoDataRooDataSet * _protoDataDefinition RooAbsPdf.h:85; RooAbsPdfAbstract interface for all probability density functions.Definition RooAbsPdf.h:40; RooAbsPdf::syncNormalizationvirtual bool syncNormalization(const RooArgSet *dset, bool adjustProxies=true) constVerify that the normalization integral cached with this PDF is valid for given set of normalization o...Definition RooAbsPdf.cxx:481; RooAbsPdf::getNormdouble getNorm(const RooArgSet &nset) constGet normalisation term needed to normalise the raw values returned by getVal().Definition RooAbsPdf.h:195; RooAbsPdf::compileForNormSetstd::unique_ptr< RooAbsArg > compileForNormSet(RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const overrideDefinition RooAbsPdf.cxx:2788; RooAbsPdf::_normMgrRooObjCacheManager _normMgrDefinition RooAbsPdf.h:329; RooAbsPdf::_normSetIdRooFit::UniqueId< RooArgSet >::Value_t _normSetId! Unique ID of the currently-active normalization setDefinition RooAbsPdf.h:346; RooAbsPdf::_specGeneratorConfigstd::unique_ptr< RooNumGenConfig > _specGeneratorConfig! MC generator configuration specific for this objectDefinition RooAbsPdf.h:340; RooAbsPdf::createNLLRooFit::OwningPtr< RooAbsReal > createNLL(RooAbsData &data, CmdArgs_t const &... cmdArgs)Constr",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:31760,Performance,cache,cache,31760,"Mode extendMode() constReturns ability of PDF to provide extended likelihood terms.Definition RooAbsPdf.h:216; RooAbsPdf::RooAbsPdfRooAbsPdf()Default constructor.Definition RooAbsPdf.cxx:230; RooAbsPdf::generateBinnedvirtual RooFit::OwningPtr< RooDataHist > generateBinned(const RooArgSet &whatVars, double nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}) constAs RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,...Definition RooAbsPdf.h:110; RooAbsPdf::traceEvalPdfbool traceEvalPdf(double value) constCheck that passed value is positive and not 'not-a-number'.Definition RooAbsPdf.cxx:384; RooAbsPdf::defaultGeneratorConfigstatic RooNumGenConfig * defaultGeneratorConfig()Returns the default numeric MC generator configuration for all RooAbsReals.Definition RooAbsPdf.cxx:2613; RooAbsPdf::redirectServersHookbool redirectServersHook(const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) overrideThe cache manager.Definition RooAbsPdf.cxx:2768; RooAbsPdf::printValuevoid printValue(std::ostream &os) const overridePrint value of p.d.f, also print normalization integral that was last used, if any.Definition RooAbsPdf.cxx:1081; RooAbsPdf::createNLLImplvirtual std::unique_ptr< RooAbsReal > createNLLImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the NLL creation routine.Definition RooAbsPdf.cxx:941; RooAbsPdf::logBatchComputationErrorsvoid logBatchComputationErrors(std::span< const double > &outputs, std::size_t begin) constScan through outputs and fix+log all nans and negative values.Definition RooAbsPdf.cxx:654; RooAbsPdf::genContextvirtual RooAbsGenContext * genContext(const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) constInterface function to create a generator context from a p.d.f.Definition RooAbsPdf.cxx:",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:36189,Performance,cache,cache,36189,"on RooDataSet.h:33; RooExtendPdfRooExtendPdf is a wrapper around an existing PDF that adds a parameteric extended likelihood term to ...Definition RooExtendPdf.h:22; RooFitResultRooFitResult is a container class to hold the input and output of a PDF fit to a dataset.Definition RooFitResult.h:40; RooFit::Detail::CompileContextDefinition NormalizationHelpers.h:29; RooLinkedListCollection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list...Definition RooLinkedList.h:44; RooMCStudyHelper class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fittin...Definition RooMCStudy.h:32; RooMinimizerWrapper class around ROOT::Math::Minimizer that provides a seamless interface between the minimizer f...Definition RooMinimizer.h:48; RooNumGenConfigHolds the configuration parameters of the various numeric integrators used by RooRealIntegral.Definition RooNumGenConfig.h:25; RooObjCacheManagerImplementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elem...Definition RooObjCacheManager.h:29; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooRealIntegralPerforms hybrid numerical/analytical integrals of RooAbsReal objects.Definition RooRealIntegral.h:29; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TListA doubly linked list.Definition TList.h:38; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::Dataconst char * Data() constDefinition TString.h:376; int; RooFit::NumEventsRooCmdArg NumEvents(Int_t numEvents)Definition RooGlobalFunc.cxx:816; RooFi",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:14187,Safety,detect,detect,14187,"ooFit::Detail::CompileContext & ctx) const override;; 268 ; 269private:; 270 ; 271 std::unique_ptr<RooDataSet> generate(RooAbsGenContext& context, const RooArgSet& whatVars, const RooDataSet* prototype,; 272 double nEvents, bool verbose, bool randProtoOrder, bool resampleProto, bool skipInit=false,; 273 bool extended=false) const ;; 274 ; 275 // Implementation version; 276 virtual RooPlot* paramOn(RooPlot* frame, const RooArgSet& params, bool showConstants=false,; 277 const char *label= """", double xmin=0.65,; 278 double xmax= 0.99,double ymax=0.95, const RooCmdArg* formatCmd=nullptr) ;; 279 ; 280 void logBatchComputationErrors(std::span<const double>& outputs, std::size_t begin) const;; 281 bool traceEvalPdf(double value) const;; 282 ; 283 /// Setter for the _normSet member, which should never be set directly.; 284 inline void setActiveNormSet(RooArgSet const* normSet) const {; 285 _normSet = normSet;; 286 // Also store the unique ID of the _normSet. This makes it possible to; 287 // detect if the pointer was invalidated.; 288 _normSetId = RooFit::getUniqueId(normSet);; 289 }; 290 ; 291protected:; 292 ; 293 virtual std::unique_ptr<RooAbsReal> createNLLImpl(RooAbsData& data, const RooLinkedList& cmdList);; 294 virtual std::unique_ptr<RooFitResult> fitToImpl(RooAbsData& data, const RooLinkedList& cmdList);; 295 ; 296 /// Checks if `normSet` is the currently active normalization set of this; 297 /// PDF, meaning is exactly the same object as the one the `_normSet` member; 298 /// points to (or both are `nullptr`).; 299 inline bool isActiveNormSet(RooArgSet const* normSet) const {; 300 return RooFit::getUniqueId(normSet).value() == _normSetId;; 301 }; 302 ; 303 double normalizeWithNaNPacking(double rawVal, double normVal) const;; 304 ; 305 RooPlot *plotOn(RooPlot *frame, PlotOpt o) const override;; 306 ; 307 friend class RooMCStudy ;; 308 ; 309 Int_t* randomizeProtoOrder(Int_t nProto,Int_t nGen,bool resample=false) const ;; 310 ; 311 // This also forces the definition of",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:24065,Safety,safe,safely,24065,"ateCdfRooFit::OwningPtr< RooAbsReal > createCdf(const RooArgSet &iset, const RooArgSet &nset=RooArgSet())Create a cumulative distribution function of this p.d.f in terms of the observables listed in iset.Definition RooAbsPdf.cxx:2468; RooAbsPdf::isActiveNormSetbool isActiveNormSet(RooArgSet const *normSet) constChecks if normSet is the currently active normalization set of this PDF, meaning is exactly the same ...Definition RooAbsPdf.h:299; RooAbsPdf::expectedEventsvirtual double expectedEvents(const RooArgSet *nset) constReturn expected number of events to be used in calculation of extended likelihood.Definition RooAbsPdf.cxx:2398; RooAbsPdf::binnedGenContextvirtual RooAbsGenContext * binnedGenContext(const RooArgSet &vars, bool verbose=false) constReturn a binned generator context.Definition RooAbsPdf.cxx:1117; RooAbsPdf::_normRangeTString _normRangeNormalization range.Definition RooAbsPdf.h:342; RooAbsPdf::isDirectGenSafevirtual bool isDirectGenSafe(const RooAbsArg &arg) constCheck if given observable can be safely generated using the pdfs internal generator mechanism (if tha...Definition RooAbsPdf.cxx:1557; RooAbsPdf::randomizeProtoOrderInt_t * randomizeProtoOrder(Int_t nProto, Int_t nGen, bool resample=false) constReturn lookup table with randomized order for nProto prototype events.Definition RooAbsPdf.cxx:1485; RooAbsPdf::setNormRangevoid setNormRange(const char *rangeName)Definition RooAbsPdf.cxx:2726; RooAbsPdf::getNormIntegralconst RooAbsReal * getNormIntegral(const RooArgSet &nset) constDefinition RooAbsPdf.h:255; RooAbsPdf::~RooAbsPdf~RooAbsPdf() overrideDestructor.Definition RooAbsPdf.cxx:277; RooAbsPdf::mustBeExtendedbool mustBeExtended() constIf true PDF must provide extended likelihood term.Definition RooAbsPdf.h:222; RooAbsPdf::_normSetRooArgSet const * _normSetNormalization integral (owned by _normMgr)Definition RooAbsPdf.h:320; RooAbsPdf::plotOnRooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:13797,Testability,log,logBatchComputationErrors,13797," ;; 263 ; 264 virtual RooAbsGenContext* autoGenContext(const RooArgSet &vars, const RooDataSet* prototype=nullptr, const RooArgSet* auxProto=nullptr,; 265 bool verbose=false, bool autoBinned=true, const char* binnedTag="""") const ;; 266 ; 267 std::unique_ptr<RooAbsArg> compileForNormSet(RooArgSet const &normSet, RooFit::Detail::CompileContext & ctx) const override;; 268 ; 269private:; 270 ; 271 std::unique_ptr<RooDataSet> generate(RooAbsGenContext& context, const RooArgSet& whatVars, const RooDataSet* prototype,; 272 double nEvents, bool verbose, bool randProtoOrder, bool resampleProto, bool skipInit=false,; 273 bool extended=false) const ;; 274 ; 275 // Implementation version; 276 virtual RooPlot* paramOn(RooPlot* frame, const RooArgSet& params, bool showConstants=false,; 277 const char *label= """", double xmin=0.65,; 278 double xmax= 0.99,double ymax=0.95, const RooCmdArg* formatCmd=nullptr) ;; 279 ; 280 void logBatchComputationErrors(std::span<const double>& outputs, std::size_t begin) const;; 281 bool traceEvalPdf(double value) const;; 282 ; 283 /// Setter for the _normSet member, which should never be set directly.; 284 inline void setActiveNormSet(RooArgSet const* normSet) const {; 285 _normSet = normSet;; 286 // Also store the unique ID of the _normSet. This makes it possible to; 287 // detect if the pointer was invalidated.; 288 _normSetId = RooFit::getUniqueId(normSet);; 289 }; 290 ; 291protected:; 292 ; 293 virtual std::unique_ptr<RooAbsReal> createNLLImpl(RooAbsData& data, const RooLinkedList& cmdList);; 294 virtual std::unique_ptr<RooFitResult> fitToImpl(RooAbsData& data, const RooLinkedList& cmdList);; 295 ; 296 /// Checks if `normSet` is the currently active normalization set of this; 297 /// PDF, meaning is exactly the same object as the one the `_normSet` member; 298 /// points to (or both are `nullptr`).; 299 inline bool isActiveNormSet(RooArgSet const* normSet) const {; 300 return RooFit::getUniqueId(normSet).value() == _normSetId;; 301 }; 302 ; 303 ",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:21240,Testability,log,log,21240,"the normalization integral cached with this PDF is valid for given set of normalization o...Definition RooAbsPdf.cxx:481; RooAbsPdf::getNormdouble getNorm(const RooArgSet &nset) constGet normalisation term needed to normalise the raw values returned by getVal().Definition RooAbsPdf.h:195; RooAbsPdf::compileForNormSetstd::unique_ptr< RooAbsArg > compileForNormSet(RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const overrideDefinition RooAbsPdf.cxx:2788; RooAbsPdf::_normMgrRooObjCacheManager _normMgrDefinition RooAbsPdf.h:329; RooAbsPdf::_normSetIdRooFit::UniqueId< RooArgSet >::Value_t _normSetId! Unique ID of the currently-active normalization setDefinition RooAbsPdf.h:346; RooAbsPdf::_specGeneratorConfigstd::unique_ptr< RooNumGenConfig > _specGeneratorConfig! MC generator configuration specific for this objectDefinition RooAbsPdf.h:340; RooAbsPdf::createNLLRooFit::OwningPtr< RooAbsReal > createNLL(RooAbsData &data, CmdArgs_t const &... cmdArgs)Construct representation of -log(L) of PDF with given dataset.Definition RooAbsPdf.h:163; RooAbsPdf::getValVdouble getValV(const RooArgSet *set=nullptr) const overrideReturn current value, normalized by integrating over the observables in nset.Definition RooAbsPdf.cxx:319; RooAbsPdf::fitToImplvirtual std::unique_ptr< RooFitResult > fitToImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the likelihood fitting routine.Definition RooAbsPdf.cxx:1072; RooAbsPdf::_selectCompbool _selectCompComponent selection flag for RooAbsPdf::plotCompOn.Definition RooAbsPdf.h:338; RooAbsPdf::generateEventvirtual void generateEvent(Int_t code)Interface for generation of an event using the algorithm corresponding to the specified code.Definition RooAbsPdf.cxx:1544; RooAbsPdf::createScanCdfRooFit::OwningPtr< RooAbsReal > createScanCdf(const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder)Definition RooAbsPdf.cxx:2545; RooAbsPdf::expectedEventsdouble expectedEvents(const RooArgSet",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:32205,Testability,log,logBatchComputationErrorsvoid,32205," traceEvalPdf(double value) constCheck that passed value is positive and not 'not-a-number'.Definition RooAbsPdf.cxx:384; RooAbsPdf::defaultGeneratorConfigstatic RooNumGenConfig * defaultGeneratorConfig()Returns the default numeric MC generator configuration for all RooAbsReals.Definition RooAbsPdf.cxx:2613; RooAbsPdf::redirectServersHookbool redirectServersHook(const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) overrideThe cache manager.Definition RooAbsPdf.cxx:2768; RooAbsPdf::printValuevoid printValue(std::ostream &os) const overridePrint value of p.d.f, also print normalization integral that was last used, if any.Definition RooAbsPdf.cxx:1081; RooAbsPdf::createNLLImplvirtual std::unique_ptr< RooAbsReal > createNLLImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the NLL creation routine.Definition RooAbsPdf.cxx:941; RooAbsPdf::logBatchComputationErrorsvoid logBatchComputationErrors(std::span< const double > &outputs, std::size_t begin) constScan through outputs and fix+log all nans and negative values.Definition RooAbsPdf.cxx:654; RooAbsPdf::genContextvirtual RooAbsGenContext * genContext(const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) constInterface function to create a generator context from a p.d.f.Definition RooAbsPdf.cxx:1127; RooAbsPdf::getLogProbabilitiesvoid getLogProbabilities(std::span< const double > pdfValues, double *output) constDefinition RooAbsPdf.cxx:671; RooAbsPdf::_normRangeOverridestatic TString _normRangeOverrideDefinition RooAbsPdf.h:343; RooAbsPdf::_verboseEvalstatic Int_t _verboseEvalDefinition RooAbsPdf.h:314; RooAbsPdf::extendedTermdouble extendedTerm(double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) constDefinition RooAbsPdf.cxx:730; RooAbsPdf::getGeneratorvirtual Int_t getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) co",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:32235,Testability,log,logBatchComputationErrors,32235," traceEvalPdf(double value) constCheck that passed value is positive and not 'not-a-number'.Definition RooAbsPdf.cxx:384; RooAbsPdf::defaultGeneratorConfigstatic RooNumGenConfig * defaultGeneratorConfig()Returns the default numeric MC generator configuration for all RooAbsReals.Definition RooAbsPdf.cxx:2613; RooAbsPdf::redirectServersHookbool redirectServersHook(const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) overrideThe cache manager.Definition RooAbsPdf.cxx:2768; RooAbsPdf::printValuevoid printValue(std::ostream &os) const overridePrint value of p.d.f, also print normalization integral that was last used, if any.Definition RooAbsPdf.cxx:1081; RooAbsPdf::createNLLImplvirtual std::unique_ptr< RooAbsReal > createNLLImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the NLL creation routine.Definition RooAbsPdf.cxx:941; RooAbsPdf::logBatchComputationErrorsvoid logBatchComputationErrors(std::span< const double > &outputs, std::size_t begin) constScan through outputs and fix+log all nans and negative values.Definition RooAbsPdf.cxx:654; RooAbsPdf::genContextvirtual RooAbsGenContext * genContext(const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) constInterface function to create a generator context from a p.d.f.Definition RooAbsPdf.cxx:1127; RooAbsPdf::getLogProbabilitiesvoid getLogProbabilities(std::span< const double > pdfValues, double *output) constDefinition RooAbsPdf.cxx:671; RooAbsPdf::_normRangeOverridestatic TString _normRangeOverrideDefinition RooAbsPdf.h:343; RooAbsPdf::_verboseEvalstatic Int_t _verboseEvalDefinition RooAbsPdf.h:314; RooAbsPdf::extendedTermdouble extendedTerm(double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) constDefinition RooAbsPdf.cxx:730; RooAbsPdf::getGeneratorvirtual Int_t getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) co",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:32350,Testability,log,log,32350," traceEvalPdf(double value) constCheck that passed value is positive and not 'not-a-number'.Definition RooAbsPdf.cxx:384; RooAbsPdf::defaultGeneratorConfigstatic RooNumGenConfig * defaultGeneratorConfig()Returns the default numeric MC generator configuration for all RooAbsReals.Definition RooAbsPdf.cxx:2613; RooAbsPdf::redirectServersHookbool redirectServersHook(const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) overrideThe cache manager.Definition RooAbsPdf.cxx:2768; RooAbsPdf::printValuevoid printValue(std::ostream &os) const overridePrint value of p.d.f, also print normalization integral that was last used, if any.Definition RooAbsPdf.cxx:1081; RooAbsPdf::createNLLImplvirtual std::unique_ptr< RooAbsReal > createNLLImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the NLL creation routine.Definition RooAbsPdf.cxx:941; RooAbsPdf::logBatchComputationErrorsvoid logBatchComputationErrors(std::span< const double > &outputs, std::size_t begin) constScan through outputs and fix+log all nans and negative values.Definition RooAbsPdf.cxx:654; RooAbsPdf::genContextvirtual RooAbsGenContext * genContext(const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) constInterface function to create a generator context from a p.d.f.Definition RooAbsPdf.cxx:1127; RooAbsPdf::getLogProbabilitiesvoid getLogProbabilities(std::span< const double > pdfValues, double *output) constDefinition RooAbsPdf.cxx:671; RooAbsPdf::_normRangeOverridestatic TString _normRangeOverrideDefinition RooAbsPdf.h:343; RooAbsPdf::_verboseEvalstatic Int_t _verboseEvalDefinition RooAbsPdf.h:314; RooAbsPdf::extendedTermdouble extendedTerm(double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) constDefinition RooAbsPdf.cxx:730; RooAbsPdf::getGeneratorvirtual Int_t getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) co",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsPdf_8h_source.html:33721,Testability,log,log,33721,"oid getLogProbabilities(std::span< const double > pdfValues, double *output) constDefinition RooAbsPdf.cxx:671; RooAbsPdf::_normRangeOverridestatic TString _normRangeOverrideDefinition RooAbsPdf.h:343; RooAbsPdf::_verboseEvalstatic Int_t _verboseEvalDefinition RooAbsPdf.h:314; RooAbsPdf::extendedTermdouble extendedTerm(double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) constDefinition RooAbsPdf.cxx:730; RooAbsPdf::getGeneratorvirtual Int_t getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) constLoad generatedVars with the subset of directVars that we can generate events for, and return a code t...Definition RooAbsPdf.cxx:1522; RooAbsPdf::createProjectionvirtual RooAbsPdf * createProjection(const RooArgSet &iset)Return a p.d.f that represent a projection of this p.d.f integrated over given observables.Definition RooAbsPdf.cxx:2446; RooAbsPdf::getLogValvirtual double getLogVal(const RooArgSet *set=nullptr) constReturn the log of the current value with given normalization An error message is printed if the argum...Definition RooAbsPdf.cxx:620; RooAbsRealAbstract base class for objects that represent a real value and implements functionality common to al...Definition RooAbsReal.h:59; RooAbsReal::maxValvirtual double maxVal(Int_t code) constReturn maximum value for set of observables identified by code assigned in getMaxVal.Definition RooAbsReal.cxx:3397; RooAbsReal::plotOnvirtual RooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) constPlot (project) PDF on specified frame.Definition RooAbsReal.cxx:1611; RooArgListRooArgList is a container object that can hold multiple RooAbsArg objects.Definition RooArgList.h:22; RooArgSetRooArgSet is a container object that can",MatchSource.WIKI,doc/master/RooAbsPdf_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:3284,Availability,error,errors,3284,"nt.h""; 63#include ""RooMsgService.h""; 64#include ""RooNumIntConfig.h""; 65#include ""RooNumRunningInt.h""; 66#include ""RooParamBinning.h""; 67#include ""RooPlot.h""; 68#include ""RooProduct.h""; 69#include ""RooProfileLL.h""; 70#include ""RooRealBinding.h""; 71#include ""RooRealIntegral.h""; 72#include ""RooRealVar.h""; 73#include ""RooSecondMoment.h""; 74#include ""RooVectorDataStore.h""; 75#include ""TreeReadBuffer.h""; 76#include ""ValueChecking.h""; 77 ; 78#include ""ROOT/StringUtils.hxx""; 79#include ""Compression.h""; 80#include ""Math/IFunction.h""; 81#include ""TMath.h""; 82#include ""TObjString.h""; 83#include ""TTree.h""; 84#include ""TH1.h""; 85#include ""TH2.h""; 86#include ""TH3.h""; 87#include ""TBranch.h""; 88#include ""TLeaf.h""; 89#include ""TAttLine.h""; 90#include ""TF1.h""; 91#include ""TF2.h""; 92#include ""TF3.h""; 93#include ""TMatrixD.h""; 94#include ""TVector.h""; 95#include ""strlcpy.h""; 96#ifndef NDEBUG; 97#include <TSystem.h> // To print stack traces when caching errors are detected; 98#endif; 99 ; 100#include <iomanip>; 101#include <iostream>; 102#include <limits>; 103#include <sstream>; 104#include <sys/types.h>; 105 ; 106namespace {; 107 ; 108// Internal helper RooAbsFunc that evaluates the scaled data-weighted average of; 109// given RooAbsReal as a function of a single variable using the RooFit::Evaluator.; 110class ScaledDataWeightedAverage : public RooAbsFunc {; 111public:; 112 ScaledDataWeightedAverage(RooAbsReal const &arg, RooAbsData const &data, double scaleFactor, RooAbsRealLValue &var); 113 : RooAbsFunc{1}, _var{var}, _dataWeights{data.getWeightBatch(0, data.numEntries())}, _scaleFactor{scaleFactor}; 114 {; 115 _arg = RooFit::Detail::compileForNormSet(arg, *data.get());; 116 _arg->recursiveRedirectServers(RooArgList{var});; 117 _evaluator = std::make_unique<RooFit::Evaluator>(*_arg);; 118 std::stack<std::vector<double>>{}.swap(_vectorBuffers);; 119 auto dataSpans = RooFit::BatchModeDataHelpers::getDataSpans(data, """", nullptr, /*skipZeroWeights=*/false,; 120 /*takeGlobalObservablesFromD",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:5838,Availability,error,errorList,5838,"double> pdfValues = _evaluator->run();; 134 if (_dataWeights.empty()) {; 135 out = std::accumulate(pdfValues.begin(), pdfValues.end(), 0.0) / pdfValues.size();; 136 } else {; 137 double weightsSum = 0.0;; 138 for (std::size_t i = 0; i < pdfValues.size(); ++i) {; 139 out += pdfValues[i] * _dataWeights[i];; 140 weightsSum += _dataWeights[i];; 141 }; 142 out /= weightsSum;; 143 }; 144 out *= _scaleFactor;; 145 ; 146 _var.setVal(oldVal);; 147 return out;; 148 }; 149 double getMinLimit(UInt_t /*dimension*/) const override { return _var.getMin(); }; 150 double getMaxLimit(UInt_t /*dimension*/) const override { return _var.getMax(); }; 151 ; 152private:; 153 RooAbsRealLValue &_var;; 154 std::unique_ptr<RooAbsReal> _arg;; 155 std::span<const double> _dataWeights;; 156 double _scaleFactor;; 157 std::unique_ptr<RooFit::Evaluator> _evaluator;; 158 std::stack<std::vector<double>> _vectorBuffers;; 159};; 160 ; 161struct EvalErrorData {; 162 using ErrorList = std::map<const RooAbsArg *, std::pair<std::string, std::list<RooAbsReal::EvalError>>>;; 163 RooAbsReal::ErrorLoggingMode mode = RooAbsReal::PrintErrors;; 164 int count = 0;; 165 ErrorList errorList;; 166};; 167 ; 168EvalErrorData &evalErrorData(); 169{; 170 static EvalErrorData data;; 171 return data;; 172}; 173 ; 174} // namespace; 175 ; 176Int_t RooAbsReal::numEvalErrorItems(); 177{; 178 return evalErrorData().errorList.size();; 179}; 180 ; 181EvalErrorData::ErrorList::iterator RooAbsReal::evalErrorIter(); 182{; 183 return evalErrorData().errorList.begin();; 184}; 185 ; 186ClassImp(RooAbsReal); 187 ; 188bool RooAbsReal::_globalSelectComp = false;; 189bool RooAbsReal::_hideOffset = true ;; 190 ; 191void RooAbsReal::setHideOffset(bool flag) { _hideOffset = flag ; }; 192bool RooAbsReal::hideOffset() { return _hideOffset ; }; 193 ; 194 ; 195////////////////////////////////////////////////////////////////////////////////; 196/// coverity[UNINIT_CTOR]; 197/// Default constructor; 198 ; 199RooAbsReal::RooAbsReal() {}; 200 ; 201 ;",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:6066,Availability,error,errorList,6066,"144 out *= _scaleFactor;; 145 ; 146 _var.setVal(oldVal);; 147 return out;; 148 }; 149 double getMinLimit(UInt_t /*dimension*/) const override { return _var.getMin(); }; 150 double getMaxLimit(UInt_t /*dimension*/) const override { return _var.getMax(); }; 151 ; 152private:; 153 RooAbsRealLValue &_var;; 154 std::unique_ptr<RooAbsReal> _arg;; 155 std::span<const double> _dataWeights;; 156 double _scaleFactor;; 157 std::unique_ptr<RooFit::Evaluator> _evaluator;; 158 std::stack<std::vector<double>> _vectorBuffers;; 159};; 160 ; 161struct EvalErrorData {; 162 using ErrorList = std::map<const RooAbsArg *, std::pair<std::string, std::list<RooAbsReal::EvalError>>>;; 163 RooAbsReal::ErrorLoggingMode mode = RooAbsReal::PrintErrors;; 164 int count = 0;; 165 ErrorList errorList;; 166};; 167 ; 168EvalErrorData &evalErrorData(); 169{; 170 static EvalErrorData data;; 171 return data;; 172}; 173 ; 174} // namespace; 175 ; 176Int_t RooAbsReal::numEvalErrorItems(); 177{; 178 return evalErrorData().errorList.size();; 179}; 180 ; 181EvalErrorData::ErrorList::iterator RooAbsReal::evalErrorIter(); 182{; 183 return evalErrorData().errorList.begin();; 184}; 185 ; 186ClassImp(RooAbsReal); 187 ; 188bool RooAbsReal::_globalSelectComp = false;; 189bool RooAbsReal::_hideOffset = true ;; 190 ; 191void RooAbsReal::setHideOffset(bool flag) { _hideOffset = flag ; }; 192bool RooAbsReal::hideOffset() { return _hideOffset ; }; 193 ; 194 ; 195////////////////////////////////////////////////////////////////////////////////; 196/// coverity[UNINIT_CTOR]; 197/// Default constructor; 198 ; 199RooAbsReal::RooAbsReal() {}; 200 ; 201 ; 202////////////////////////////////////////////////////////////////////////////////; 203/// Constructor with unit label; 204 ; 205RooAbsReal::RooAbsReal(const char *name, const char *title, const char *unit) : RooAbsReal{name, title, 0.0, 0.0, unit}; 206{; 207}; 208 ; 209 ; 210////////////////////////////////////////////////////////////////////////////////; 211/// Constructor w",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:6197,Availability,error,errorList,6197,"t override { return _var.getMin(); }; 150 double getMaxLimit(UInt_t /*dimension*/) const override { return _var.getMax(); }; 151 ; 152private:; 153 RooAbsRealLValue &_var;; 154 std::unique_ptr<RooAbsReal> _arg;; 155 std::span<const double> _dataWeights;; 156 double _scaleFactor;; 157 std::unique_ptr<RooFit::Evaluator> _evaluator;; 158 std::stack<std::vector<double>> _vectorBuffers;; 159};; 160 ; 161struct EvalErrorData {; 162 using ErrorList = std::map<const RooAbsArg *, std::pair<std::string, std::list<RooAbsReal::EvalError>>>;; 163 RooAbsReal::ErrorLoggingMode mode = RooAbsReal::PrintErrors;; 164 int count = 0;; 165 ErrorList errorList;; 166};; 167 ; 168EvalErrorData &evalErrorData(); 169{; 170 static EvalErrorData data;; 171 return data;; 172}; 173 ; 174} // namespace; 175 ; 176Int_t RooAbsReal::numEvalErrorItems(); 177{; 178 return evalErrorData().errorList.size();; 179}; 180 ; 181EvalErrorData::ErrorList::iterator RooAbsReal::evalErrorIter(); 182{; 183 return evalErrorData().errorList.begin();; 184}; 185 ; 186ClassImp(RooAbsReal); 187 ; 188bool RooAbsReal::_globalSelectComp = false;; 189bool RooAbsReal::_hideOffset = true ;; 190 ; 191void RooAbsReal::setHideOffset(bool flag) { _hideOffset = flag ; }; 192bool RooAbsReal::hideOffset() { return _hideOffset ; }; 193 ; 194 ; 195////////////////////////////////////////////////////////////////////////////////; 196/// coverity[UNINIT_CTOR]; 197/// Default constructor; 198 ; 199RooAbsReal::RooAbsReal() {}; 200 ; 201 ; 202////////////////////////////////////////////////////////////////////////////////; 203/// Constructor with unit label; 204 ; 205RooAbsReal::RooAbsReal(const char *name, const char *title, const char *unit) : RooAbsReal{name, title, 0.0, 0.0, unit}; 206{; 207}; 208 ; 209 ; 210////////////////////////////////////////////////////////////////////////////////; 211/// Constructor with plot range and unit label; 212 ; 213RooAbsReal::RooAbsReal(const char *name, const char *title, double inMinVal,; 214 double in",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:10656,Availability,error,error,10656," the cache is clean, return the; 297/// cached value, otherwise recalculate on the fly and refill; 298/// the cache; 299 ; 300double RooAbsReal::getValV(const RooArgSet* nset) const; 301{; 302 if (nset && nset->uniqueId().value() != _lastNormSetId) {; 303 const_cast<RooAbsReal*>(this)->setProxyNormSet(nset);; 304 _lastNormSetId = nset->uniqueId().value();; 305 }; 306 ; 307 if (isValueDirtyAndClear()) {; 308 _value = traceEval(nullptr) ;; 309 // clearValueDirty() ;; 310 }; 311 ; 312 return hideOffset() ? _value + offset() : _value;; 313}; 314 ; 315 ; 316////////////////////////////////////////////////////////////////////////////////; 317/// Calculate current value of object, with error tracing wrapper; 318 ; 319double RooAbsReal::traceEval(const RooArgSet* /*nset*/) const; 320{; 321 double value = evaluate() ;; 322 ; 323 if (TMath::IsNaN(value)) {; 324 logEvalError(""function value is NAN"") ;; 325 }; 326 ; 327 //cxcoutD(Tracing) << ""RooAbsReal::getValF("" << GetName() << "") operMode = "" << _operMode << "" recalculated, new value = "" << value << std::endl ;; 328 ; 329 //Standard tracing code goes here; 330 if (!isValidReal(value)) {; 331 coutW(Tracing) << ""RooAbsReal::traceEval("" << GetName(); 332 << ""): validation failed: "" << value << std::endl ;; 333 }; 334 ; 335 //Call optional subclass tracing code; 336 // traceEvalHook(value) ;; 337 ; 338 return value ;; 339}; 340 ; 341 ; 342 ; 343////////////////////////////////////////////////////////////////////////////////; 344/// Variant of getAnalyticalIntegral that is also passed the normalization set; 345/// that should be applied to the integrand of which the integral is requested.; 346/// For certain operator p.d.f it is useful to overload this function rather; 347/// than analyticalIntegralWN() as the additional normalization information; 348/// may be useful in determining a more efficient decomposition of the; 349/// requested integral.; 350 ; 351Int_t RooAbsReal::getAnalyticalIntegralWN(RooArgSet& allDeps, RooArgSet& a",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:22612,Availability,error,error,22612,"tokens) {; 575 components.addOwned(std::unique_ptr<RooAbsReal>{createIntObj(iset,nset,cfg, token.c_str())});; 576 }; 577 ; 578 const std::string title = std::string(""Integral of "") + GetTitle();; 579 const std::string fullName = std::string(GetName()) + integralNameSuffix(iset,nset,rangeName).Data();; 580 ; 581 auto out = std::make_unique<RooAddition>(fullName.c_str(), title.c_str(), components);; 582 out->addOwnedComponents(std::move(components));; 583 return RooFit::makeOwningPtr<RooAbsReal>(std::move(out));; 584}; 585 ; 586 ; 587 ; 588////////////////////////////////////////////////////////////////////////////////; 589/// Internal utility function for createIntegral() that creates the actual integral object.; 590RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntObj(const RooArgSet& iset2, const RooArgSet* nset2,; 591 const RooNumIntConfig* cfg, const char* rangeName) const; 592{; 593 // Make internal use copies of iset and nset; 594 RooArgSet iset(iset2) ;; 595 const RooArgSet* nset = nset2 ;; 596 ; 597 ; 598 // Initialize local variables perparing for recursive loop; 599 bool error = false ;; 600 const RooAbsReal* integrand = this ;; 601 std::unique_ptr<RooAbsReal> integral;; 602 ; 603 // Handle trivial case of no integration here explicitly; 604 if (iset.empty()) {; 605 ; 606 const std::string title = std::string(""Integral of "") + GetTitle();; 607 const std::string name = std::string(GetName()) + integralNameSuffix(iset,nset,rangeName).Data();; 608 ; 609 auto out = std::make_unique<RooRealIntegral>(name.c_str(), title.c_str(), *this, iset, nset, cfg, rangeName);; 610 return RooFit::makeOwningPtr<RooAbsReal>(std::move(out));; 611 }; 612 ; 613 // Process integration over remaining integration variables; 614 while(!iset.empty()) {; 615 ; 616 ; 617 // Find largest set of observables that can be integrated in one go; 618 RooArgSet innerSet ;; 619 findInnerMostIntegration(iset,innerSet,rangeName) ;; 620 ; 621 // If largest set of observables that can be integrated is",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:23568,Availability,error,error,23568,"t; 594 RooArgSet iset(iset2) ;; 595 const RooArgSet* nset = nset2 ;; 596 ; 597 ; 598 // Initialize local variables perparing for recursive loop; 599 bool error = false ;; 600 const RooAbsReal* integrand = this ;; 601 std::unique_ptr<RooAbsReal> integral;; 602 ; 603 // Handle trivial case of no integration here explicitly; 604 if (iset.empty()) {; 605 ; 606 const std::string title = std::string(""Integral of "") + GetTitle();; 607 const std::string name = std::string(GetName()) + integralNameSuffix(iset,nset,rangeName).Data();; 608 ; 609 auto out = std::make_unique<RooRealIntegral>(name.c_str(), title.c_str(), *this, iset, nset, cfg, rangeName);; 610 return RooFit::makeOwningPtr<RooAbsReal>(std::move(out));; 611 }; 612 ; 613 // Process integration over remaining integration variables; 614 while(!iset.empty()) {; 615 ; 616 ; 617 // Find largest set of observables that can be integrated in one go; 618 RooArgSet innerSet ;; 619 findInnerMostIntegration(iset,innerSet,rangeName) ;; 620 ; 621 // If largest set of observables that can be integrated is empty set, problem was ill defined; 622 // Postpone error messaging and handling to end of function, exit loop here; 623 if (innerSet.empty()) {; 624 error = true ;; 625 break ;; 626 }; 627 ; 628 // Prepare name and title of integral to be created; 629 const std::string title = std::string(""Integral of "") + integrand->GetTitle();; 630 const std::string name = std::string(integrand->GetName()) + integrand->integralNameSuffix(innerSet,nset,rangeName).Data();; 631 ; 632 std::unique_ptr<RooAbsReal> innerIntegral = std::move(integral);; 633 ; 634 // Construct innermost integral; 635 integral = std::make_unique<RooRealIntegral>(name.c_str(),title.c_str(),*integrand,innerSet,nset,cfg,rangeName);; 636 ; 637 // Integral of integral takes ownership of innermost integral; 638 if (innerIntegral) {; 639 integral->addOwnedComponents(std::move(innerIntegral));; 640 }; 641 ; 642 // Remove already integrated observables from to-do list; 643 iset.",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:23666,Availability,error,error,23666,"5 ; 606 const std::string title = std::string(""Integral of "") + GetTitle();; 607 const std::string name = std::string(GetName()) + integralNameSuffix(iset,nset,rangeName).Data();; 608 ; 609 auto out = std::make_unique<RooRealIntegral>(name.c_str(), title.c_str(), *this, iset, nset, cfg, rangeName);; 610 return RooFit::makeOwningPtr<RooAbsReal>(std::move(out));; 611 }; 612 ; 613 // Process integration over remaining integration variables; 614 while(!iset.empty()) {; 615 ; 616 ; 617 // Find largest set of observables that can be integrated in one go; 618 RooArgSet innerSet ;; 619 findInnerMostIntegration(iset,innerSet,rangeName) ;; 620 ; 621 // If largest set of observables that can be integrated is empty set, problem was ill defined; 622 // Postpone error messaging and handling to end of function, exit loop here; 623 if (innerSet.empty()) {; 624 error = true ;; 625 break ;; 626 }; 627 ; 628 // Prepare name and title of integral to be created; 629 const std::string title = std::string(""Integral of "") + integrand->GetTitle();; 630 const std::string name = std::string(integrand->GetName()) + integrand->integralNameSuffix(innerSet,nset,rangeName).Data();; 631 ; 632 std::unique_ptr<RooAbsReal> innerIntegral = std::move(integral);; 633 ; 634 // Construct innermost integral; 635 integral = std::make_unique<RooRealIntegral>(name.c_str(),title.c_str(),*integrand,innerSet,nset,cfg,rangeName);; 636 ; 637 // Integral of integral takes ownership of innermost integral; 638 if (innerIntegral) {; 639 integral->addOwnedComponents(std::move(innerIntegral));; 640 }; 641 ; 642 // Remove already integrated observables from to-do list; 643 iset.remove(innerSet) ;; 644 ; 645 // Send info message on recursion if needed; 646 if (integrand == this && !iset.empty()) {; 647 coutI(Integration) << GetName() << "" : multidimensional integration over observables with parameterized ranges in terms of other integrated observables detected, using recursive integration strategy to construct final integra",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:25067,Availability,error,error,25067,"d::move(innerIntegral));; 640 }; 641 ; 642 // Remove already integrated observables from to-do list; 643 iset.remove(innerSet) ;; 644 ; 645 // Send info message on recursion if needed; 646 if (integrand == this && !iset.empty()) {; 647 coutI(Integration) << GetName() << "" : multidimensional integration over observables with parameterized ranges in terms of other integrated observables detected, using recursive integration strategy to construct final integral"" << std::endl ;; 648 }; 649 ; 650 // Prepare for recursion, next integral should integrate last integrand; 651 integrand = integral.get();; 652 ; 653 ; 654 // Only need normalization set in innermost integration; 655 nset = nullptr;; 656 }; 657 ; 658 if (error) {; 659 coutE(Integration) << GetName() << "" : ERROR while defining recursive integral over observables with parameterized integration ranges, please check that integration rangs specify uniquely defined integral "" << std::endl;; 660 return nullptr;; 661 }; 662 ; 663 ; 664 // After-burner: apply interpolating cache on (numeric) integral if requested by user; 665 const char* cacheParamsStr = getStringAttribute(""CACHEPARAMINT"") ;; 666 if (cacheParamsStr && strlen(cacheParamsStr)) {; 667 ; 668 std::unique_ptr<RooArgSet> intParams{integral->getVariables()};; 669 ; 670 RooArgSet cacheParams = RooHelpers::selectFromArgSet(*intParams, cacheParamsStr);; 671 ; 672 if (!cacheParams.empty()) {; 673 cxcoutD(Caching) << ""RooAbsReal::createIntObj("" << GetName() << "") INFO: constructing "" << cacheParams.size(); 674 << ""-dim value cache for integral over "" << iset2 << "" as a function of "" << cacheParams << "" in range "" << (rangeName?rangeName:""<none>"") << std::endl ;; 675 std::string name = Form(""%s_CACHE_[%s]"",integral->GetName(),cacheParams.contentsString().c_str()) ;; 676 auto cachedIntegral = std::make_unique<RooCachedReal>(name.c_str(),name.c_str(),*integral,cacheParams);; 677 cachedIntegral->setInterpolationOrder(2) ;; 678 cachedIntegral->addOwnedComponents(std::mov",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:32446,Availability,error,error,32446,"object \f$ G \f$ that represents the normalized projection:; 800/// \f[; 801/// G[x,p] = \frac{\int F[x,y,p] \; \mathrm{d}\{y\}}; 802/// {\int F[x,y,p] \; \mathrm{d}\{x\} \, \mathrm{d}\{y\}}; 803/// \f]; 804/// where \f$ F[x,y,p] \f$ is the function we represent, and; 805/// \f$ \{ p \} \f$ are the remaining variables (""parameters"").; 806///; 807/// \param[in] dependentVars Dependent variables over which to normalise, \f$ \{x\} \f$.; 808/// \param[in] projectedVars Variables to project out, \f$ \{ y \} \f$.; 809/// \param[out] cloneSet Will be set to a RooArgSet*, which will contain a clone of *this plus its projection integral object.; 810/// The latter will also be returned. The caller takes ownership of this set.; 811/// \param[in] rangeName Optional range for projection integrals; 812/// \param[in] condObs Conditional observables, which are not integrated for normalisation, even if they; 813/// are in `dependentVars` or `projectedVars`.; 814/// \return A pointer to the newly created object, or zero in case of an; 815/// error. The caller is responsible for deleting the `cloneSet` (which includes the returned projection object).; 816const RooAbsReal *RooAbsReal::createPlotProjection(const RooArgSet &dependentVars, const RooArgSet *projectedVars,; 817 RooArgSet *&cloneSet, const char* rangeName, const RooArgSet* condObs) const; 818{; 819 // Get the set of our leaf nodes; 820 RooArgSet leafNodes;; 821 RooArgSet treeNodes;; 822 leafNodeServerList(&leafNodes,this);; 823 treeNodeServerList(&treeNodes,this) ;; 824 ; 825 ; 826 // Check that the dependents are all fundamental. Filter out any that we; 827 // do not depend on, and make substitutions by name in our leaf list.; 828 // Check for overlaps with the projection variables.; 829 for (const auto arg : dependentVars) {; 830 if(!arg->isFundamental() && !dynamic_cast<const RooAbsLValue*>(arg)) {; 831 coutE(Plotting) << ClassName() << ""::"" << GetName() << "":createPlotProjection: variable \"""" << arg->GetName(); 832 << ""\",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:37973,Availability,error,error,37973,"itsFrom(RooRealIntegral::Class())){; 916 static_cast<RooRealIntegral&>(*projected).setAllowComponentSelection(true);; 917 }; 918 ; 919 projected->SetName(name.c_str()) ;; 920 projected->SetTitle(title.c_str()) ;; 921 ; 922 // Add the projection integral to the cloneSet so that it eventually gets cleaned up by the caller.; 923 RooAbsReal *projectedPtr = projected.get();; 924 cloneSet->addOwned(std::move(projected));; 925 ; 926 // return a const pointer to remind the caller that they do not delete the returned object; 927 // directly (it is contained in the cloneSet instead).; 928 return projectedPtr;; 929}; 930 ; 931 ; 932 ; 933////////////////////////////////////////////////////////////////////////////////; 934/// Fill the ROOT histogram 'hist' with values sampled from this; 935/// function at the bin centers. Our value is calculated by first; 936/// integrating out any variables in projectedVars and then scaling; 937/// the result by scaleFactor. Returns a pointer to the input; 938/// histogram, or zero in case of an error. The input histogram can; 939/// be any TH1 subclass, and therefore of arbitrary; 940/// dimension. Variables are matched with the (x,y,...) dimensions of; 941/// the input histogram according to the order in which they appear; 942/// in the input plotVars list. If scaleForDensity is true the; 943/// histogram is filled with a the functions density rather than; 944/// the functions value (i.e. the value at the bin center is multiplied; 945/// with bin volume); 946 ; 947TH1 *RooAbsReal::fillHistogram(TH1 *hist, const RooArgList &plotVars,; 948 double scaleFactor, const RooArgSet *projectedVars, bool scaleForDensity,; 949 const RooArgSet* condObs, bool setError) const; 950{; 951 // Do we have a valid histogram to use?; 952 if(nullptr == hist) {; 953 coutE(InputArguments) << ClassName() << ""::"" << GetName() << "":fillHistogram: no valid histogram to fill"" << std::endl;; 954 return nullptr;; 955 }; 956 ; 957 // Check that the number of plotVars matches",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:40667,Availability,error,error,40667,": "" << realVar->GetName() << std::endl;; 979 }; 980 plotClones.addClone(*realVar,true); // do not complain about duplicates; 981 }; 982 ; 983 // Reconnect all plotClones to each other, imported when plotting N-dim integrals with entangled parameterized ranges; 984 for(RooAbsArg * pc : plotClones) {; 985 pc->recursiveRedirectServers(plotClones,false,false,true) ;; 986 }; 987 ; 988 // Call checkObservables; 989 RooArgSet allDeps(plotClones) ;; 990 if (projectedVars) {; 991 allDeps.add(*projectedVars) ;; 992 }; 993 if (checkObservables(&allDeps)) {; 994 coutE(InputArguments) << ""RooAbsReal::fillHistogram("" << GetName() << "") error in checkObservables, abort"" << std::endl ;; 995 return hist ;; 996 }; 997 ; 998 // Create a standalone projection object to use for calculating bin contents; 999 RooArgSet *cloneSet = nullptr;; 1000 const RooAbsReal *projected= createPlotProjection(plotClones,projectedVars,cloneSet,nullptr,condObs);; 1001 ; 1002 cxcoutD(Plotting) << ""RooAbsReal::fillHistogram("" << GetName() << "") plot projection object is "" << projected->GetName() << std::endl ;; 1003 ; 1004 // Prepare to loop over the histogram bins; 1005 Int_t xbins(0);; 1006 Int_t ybins(1);; 1007 Int_t zbins(1);; 1008 RooRealVar *xvar = nullptr;; 1009 RooRealVar *yvar = nullptr;; 1010 RooRealVar *zvar = nullptr;; 1011 TAxis *xaxis = nullptr;; 1012 TAxis *yaxis = nullptr;; 1013 TAxis *zaxis = nullptr;; 1014 switch(hdim) {; 1015 case 3:; 1016 zbins= hist->GetNbinsZ();; 1017 zvar= dynamic_cast<RooRealVar*>(plotClones.find(plotVars.at(2)->GetName()));; 1018 zaxis= hist->GetZaxis();; 1019 assert(nullptr != zvar && nullptr != zaxis);; 1020 if (scaleForDensity) {; 1021 scaleFactor*= (zaxis->GetXmax() - zaxis->GetXmin())/zbins;; 1022 }; 1023 // fall through to next case...; 1024 case 2:; 1025 ybins= hist->GetNbinsY();; 1026 yvar= dynamic_cast<RooRealVar*>(plotClones.find(plotVars.at(1)->GetName()));; 1027 yaxis= hist->GetYaxis();; 1028 assert(nullptr != yvar && nullptr != yaxis);; 1029 if (scaleFo",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:43765,Availability,error,error,43765,"58 if(bin % (xbins*ybins) == 0) {; 1059 zbin++;; 1060 zvar->setVal(zaxis->GetBinCenter(zbin));; 1061 }; 1062 // fall through to next case...; 1063 case 2:; 1064 if(bin % xbins == 0) {; 1065 ybin= (ybin%ybins) + 1;; 1066 yvar->setVal(yaxis->GetBinCenter(ybin));; 1067 }; 1068 // fall through to next case...; 1069 case 1:; 1070 xbin= (xbin%xbins) + 1;; 1071 xvar->setVal(xaxis->GetBinCenter(xbin));; 1072 break;; 1073 default:; 1074 coutE(InputArguments) << ""RooAbsReal::fillHistogram: Internal Error!"" << std::endl;; 1075 break;; 1076 }; 1077 ; 1078 double result= scaleFactor*projected->getVal();; 1079 if (RooAbsReal::numEvalErrors()>0) {; 1080 coutW(Plotting) << ""WARNING: Function evaluation error(s) at coordinates [x]="" << xvar->getVal() ;; 1081 if (hdim==2) ccoutW(Plotting) << "" [y]="" << yvar->getVal() ;; 1082 if (hdim==3) ccoutW(Plotting) << "" [z]="" << zvar->getVal() ;; 1083 ccoutW(Plotting) << std::endl ;; 1084 // RooAbsReal::printEvalErrors(ccoutW(Plotting),10) ;; 1085 result = 0 ;; 1086 }; 1087 RooAbsReal::clearEvalErrorLog() ;; 1088 ; 1089 hist->SetBinContent(hist->GetBin(xbin,ybin,zbin),result);; 1090 if (setError) {; 1091 hist->SetBinError(hist->GetBin(xbin,ybin,zbin),sqrt(result)) ;; 1092 }; 1093 ; 1094 //cout << ""bin "" << bin << "" -> ("" << xbin << "","" << ybin << "","" << zbin << "") = "" << result << std::endl;; 1095 }; 1096 RooAbsReal::setEvalErrorLoggingMode(RooAbsReal::PrintErrors) ;; 1097 ; 1098 // cleanup; 1099 delete cloneSet;; 1100 ; 1101 return hist;; 1102}; 1103 ; 1104 ; 1105 ; 1106////////////////////////////////////////////////////////////////////////////////; 1107/// Fill a RooDataHist with values sampled from this function at the; 1108/// bin centers. If extendedMode is true, the p.d.f. values is multiplied; 1109/// by the number of expected events in each bin; 1110///; 1111/// An optional scaling by a given scaleFactor can be performed.; 1112/// Returns a pointer to the input RooDataHist, or zero; 1113/// in case of an error.; 1114///; 1115/// If cor",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:45038,Availability,error,error,45038,"oAbsReal::printEvalErrors(ccoutW(Plotting),10) ;; 1085 result = 0 ;; 1086 }; 1087 RooAbsReal::clearEvalErrorLog() ;; 1088 ; 1089 hist->SetBinContent(hist->GetBin(xbin,ybin,zbin),result);; 1090 if (setError) {; 1091 hist->SetBinError(hist->GetBin(xbin,ybin,zbin),sqrt(result)) ;; 1092 }; 1093 ; 1094 //cout << ""bin "" << bin << "" -> ("" << xbin << "","" << ybin << "","" << zbin << "") = "" << result << std::endl;; 1095 }; 1096 RooAbsReal::setEvalErrorLoggingMode(RooAbsReal::PrintErrors) ;; 1097 ; 1098 // cleanup; 1099 delete cloneSet;; 1100 ; 1101 return hist;; 1102}; 1103 ; 1104 ; 1105 ; 1106////////////////////////////////////////////////////////////////////////////////; 1107/// Fill a RooDataHist with values sampled from this function at the; 1108/// bin centers. If extendedMode is true, the p.d.f. values is multiplied; 1109/// by the number of expected events in each bin; 1110///; 1111/// An optional scaling by a given scaleFactor can be performed.; 1112/// Returns a pointer to the input RooDataHist, or zero; 1113/// in case of an error.; 1114///; 1115/// If correctForBinSize is true the RooDataHist; 1116/// is filled with the functions density (function value times the; 1117/// bin volume) rather than function value.; 1118///; 1119/// If showProgress is true; 1120/// a process indicator is printed on stdout in steps of one percent,; 1121/// which is mostly useful for the sampling of expensive functions; 1122/// such as likelihoods; 1123 ; 1124RooDataHist* RooAbsReal::fillDataHist(RooDataHist *hist, const RooArgSet* normSet, double scaleFactor,; 1125 bool correctForBinSize, bool showProgress) const; 1126{; 1127 // Do we have a valid histogram to use?; 1128 if(nullptr == hist) {; 1129 coutE(InputArguments) << ClassName() << ""::"" << GetName() << "":fillDataHist: no valid RooDataHist to fill"" << std::endl;; 1130 return nullptr;; 1131 }; 1132 ; 1133 // Call checkObservables; 1134 RooArgSet allDeps(*hist->get()) ;; 1135 if (checkObservables(&allDeps)) {; 1136 coutE(InputArguments",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:46051,Availability,error,error,46051,"f extendedMode is true, the p.d.f. values is multiplied; 1109/// by the number of expected events in each bin; 1110///; 1111/// An optional scaling by a given scaleFactor can be performed.; 1112/// Returns a pointer to the input RooDataHist, or zero; 1113/// in case of an error.; 1114///; 1115/// If correctForBinSize is true the RooDataHist; 1116/// is filled with the functions density (function value times the; 1117/// bin volume) rather than function value.; 1118///; 1119/// If showProgress is true; 1120/// a process indicator is printed on stdout in steps of one percent,; 1121/// which is mostly useful for the sampling of expensive functions; 1122/// such as likelihoods; 1123 ; 1124RooDataHist* RooAbsReal::fillDataHist(RooDataHist *hist, const RooArgSet* normSet, double scaleFactor,; 1125 bool correctForBinSize, bool showProgress) const; 1126{; 1127 // Do we have a valid histogram to use?; 1128 if(nullptr == hist) {; 1129 coutE(InputArguments) << ClassName() << ""::"" << GetName() << "":fillDataHist: no valid RooDataHist to fill"" << std::endl;; 1130 return nullptr;; 1131 }; 1132 ; 1133 // Call checkObservables; 1134 RooArgSet allDeps(*hist->get()) ;; 1135 if (checkObservables(&allDeps)) {; 1136 coutE(InputArguments) << ""RooAbsReal::fillDataHist("" << GetName() << "") error in checkObservables, abort"" << std::endl ;; 1137 return hist ;; 1138 }; 1139 ; 1140 // Make deep clone of self and attach to dataset observables; 1141 //RooArgSet* origObs = getObservables(hist) ;; 1142 RooArgSet cloneSet;; 1143 RooArgSet(*this).snapshot(cloneSet, true);; 1144 RooAbsReal* theClone = static_cast<RooAbsReal*>(cloneSet.find(GetName()));; 1145 theClone->recursiveRedirectServers(*hist->get()) ;; 1146 //const_cast<RooAbsReal*>(this)->recursiveRedirectServers(*hist->get()) ;; 1147 ; 1148 // Iterator over all bins of RooDataHist and fill weights; 1149 Int_t onePct = hist->numEntries()/100 ;; 1150 if (onePct==0) {; 1151 onePct++ ;; 1152 }; 1153 for (Int_t i=0 ; i<hist->numEntries() ; i++) {; ",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:64506,Availability,error,errors,64506," in given dataset; 1531/// projection of PDF is achieved by constructing an average over all observable values in given set.; 1532/// Consult RooFit plotting tutorial for further explanation of meaning & use of this technique; 1533///; 1534/// <tr><td> `ProjWData(const RooArgSet& s, const RooAbsData& d)` <td> As above but only consider subset 's' of observables in dataset 'd' for projection through data averaging; 1535///; 1536/// <tr><td> `ProjectionRange(const char* rn)` <td> Override default range of projection integrals to a different range specified by given range name.; 1537/// This technique allows you to project a finite width slice in a real-valued observable; 1538///; 1539/// <tr><td> `NumCPU(Int_t ncpu)` <td> Number of CPUs to use simultaneously to calculate data-weighted projections (only in combination with ProjWData); 1540///; 1541///; 1542/// <tr><th><th> Misc content control; 1543/// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per curve. A negative; 1544/// value suppress output completely, a zero value will only print the error count per p.d.f component,; 1545/// a positive value is will print details of each error up to numErr messages per p.d.f component.; 1546///; 1547/// <tr><td> `EvalErrorValue(double value)` <td> Set curve points at which (pdf) evaluation errors occur to specified value. By default the; 1548/// function value is plotted.; 1549///; 1550/// <tr><td> `Normalization(double scale, ScaleType code)` <td> Adjust normalization by given scale factor. Interpretation of number depends on code:; 1551/// - Relative: relative adjustment factor for a normalized function,; 1552/// - NumEvent: scale to match given number of events.; 1553/// - Raw: relative adjustment factor for an un-normalized function.; 1554///; 1555/// <tr><td> `Name(const chat* name)` <td> Give curve specified name in frame. Useful if curve is to be referenced later; 1556///; 1557/// <tr><td> `Asymmetry(const RooCategory& ",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:64619,Availability,error,error,64619," an average over all observable values in given set.; 1532/// Consult RooFit plotting tutorial for further explanation of meaning & use of this technique; 1533///; 1534/// <tr><td> `ProjWData(const RooArgSet& s, const RooAbsData& d)` <td> As above but only consider subset 's' of observables in dataset 'd' for projection through data averaging; 1535///; 1536/// <tr><td> `ProjectionRange(const char* rn)` <td> Override default range of projection integrals to a different range specified by given range name.; 1537/// This technique allows you to project a finite width slice in a real-valued observable; 1538///; 1539/// <tr><td> `NumCPU(Int_t ncpu)` <td> Number of CPUs to use simultaneously to calculate data-weighted projections (only in combination with ProjWData); 1540///; 1541///; 1542/// <tr><th><th> Misc content control; 1543/// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per curve. A negative; 1544/// value suppress output completely, a zero value will only print the error count per p.d.f component,; 1545/// a positive value is will print details of each error up to numErr messages per p.d.f component.; 1546///; 1547/// <tr><td> `EvalErrorValue(double value)` <td> Set curve points at which (pdf) evaluation errors occur to specified value. By default the; 1548/// function value is plotted.; 1549///; 1550/// <tr><td> `Normalization(double scale, ScaleType code)` <td> Adjust normalization by given scale factor. Interpretation of number depends on code:; 1551/// - Relative: relative adjustment factor for a normalized function,; 1552/// - NumEvent: scale to match given number of events.; 1553/// - Raw: relative adjustment factor for an un-normalized function.; 1554///; 1555/// <tr><td> `Name(const chat* name)` <td> Give curve specified name in frame. Useful if curve is to be referenced later; 1556///; 1557/// <tr><td> `Asymmetry(const RooCategory& c)` <td> Show the asymmetry of the PDF in given two-state category [F(+)",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:64708,Availability,error,error,64708," explanation of meaning & use of this technique; 1533///; 1534/// <tr><td> `ProjWData(const RooArgSet& s, const RooAbsData& d)` <td> As above but only consider subset 's' of observables in dataset 'd' for projection through data averaging; 1535///; 1536/// <tr><td> `ProjectionRange(const char* rn)` <td> Override default range of projection integrals to a different range specified by given range name.; 1537/// This technique allows you to project a finite width slice in a real-valued observable; 1538///; 1539/// <tr><td> `NumCPU(Int_t ncpu)` <td> Number of CPUs to use simultaneously to calculate data-weighted projections (only in combination with ProjWData); 1540///; 1541///; 1542/// <tr><th><th> Misc content control; 1543/// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per curve. A negative; 1544/// value suppress output completely, a zero value will only print the error count per p.d.f component,; 1545/// a positive value is will print details of each error up to numErr messages per p.d.f component.; 1546///; 1547/// <tr><td> `EvalErrorValue(double value)` <td> Set curve points at which (pdf) evaluation errors occur to specified value. By default the; 1548/// function value is plotted.; 1549///; 1550/// <tr><td> `Normalization(double scale, ScaleType code)` <td> Adjust normalization by given scale factor. Interpretation of number depends on code:; 1551/// - Relative: relative adjustment factor for a normalized function,; 1552/// - NumEvent: scale to match given number of events.; 1553/// - Raw: relative adjustment factor for an un-normalized function.; 1554///; 1555/// <tr><td> `Name(const chat* name)` <td> Give curve specified name in frame. Useful if curve is to be referenced later; 1556///; 1557/// <tr><td> `Asymmetry(const RooCategory& c)` <td> Show the asymmetry of the PDF in given two-state category [F(+)-F(-)] / [F(+)+F(-)] rather than; 1558/// the PDF projection. Category must have two states with indices -1",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:64863,Availability,error,errors,64863," above but only consider subset 's' of observables in dataset 'd' for projection through data averaging; 1535///; 1536/// <tr><td> `ProjectionRange(const char* rn)` <td> Override default range of projection integrals to a different range specified by given range name.; 1537/// This technique allows you to project a finite width slice in a real-valued observable; 1538///; 1539/// <tr><td> `NumCPU(Int_t ncpu)` <td> Number of CPUs to use simultaneously to calculate data-weighted projections (only in combination with ProjWData); 1540///; 1541///; 1542/// <tr><th><th> Misc content control; 1543/// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per curve. A negative; 1544/// value suppress output completely, a zero value will only print the error count per p.d.f component,; 1545/// a positive value is will print details of each error up to numErr messages per p.d.f component.; 1546///; 1547/// <tr><td> `EvalErrorValue(double value)` <td> Set curve points at which (pdf) evaluation errors occur to specified value. By default the; 1548/// function value is plotted.; 1549///; 1550/// <tr><td> `Normalization(double scale, ScaleType code)` <td> Adjust normalization by given scale factor. Interpretation of number depends on code:; 1551/// - Relative: relative adjustment factor for a normalized function,; 1552/// - NumEvent: scale to match given number of events.; 1553/// - Raw: relative adjustment factor for an un-normalized function.; 1554///; 1555/// <tr><td> `Name(const chat* name)` <td> Give curve specified name in frame. Useful if curve is to be referenced later; 1556///; 1557/// <tr><td> `Asymmetry(const RooCategory& c)` <td> Show the asymmetry of the PDF in given two-state category [F(+)-F(-)] / [F(+)+F(-)] rather than; 1558/// the PDF projection. Category must have two states with indices -1 and +1 or three states with; 1559/// indices -1,0 and +1.; 1560///; 1561/// <tr><td> `ShiftToZero(bool flag)` <td> Shift entire curve ",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:67673,Availability,down,downward,67673,""" (points).; 1570/// \note Option ""P"" will cause RooFit to plot (and treat) this pdf as if it were data! This is intended for plotting ""corrected data""-type pdfs such as ""data-minus-background"" or unfolded datasets.; 1571///; 1572/// <tr><td> `LineStyle(Int_t style)` <td> Select line style by ROOT line style code, default is solid; 1573///; 1574/// <tr><td> `LineColor(Int_t color)` <td> Select line color by ROOT color code, default is blue; 1575///; 1576/// <tr><td> `LineWidth(Int_t width)` <td> Select line with in pixels, default is 3; 1577///; 1578/// <tr><td> `MarkerStyle(Int_t style)` <td> Select the ROOT marker style, default is 21; 1579///; 1580/// <tr><td> `MarkerColor(Int_t color)` <td> Select the ROOT marker color, default is black; 1581///; 1582/// <tr><td> `MarkerSize(double size)` <td> Select the ROOT marker size; 1583///; 1584/// <tr><td> `FillStyle(Int_t style)` <td> Select fill style, default is not filled. If a filled style is selected, also use VLines(); 1585/// to add vertical downward lines at end of curve to ensure proper closure. Add `DrawOption(""F"")` for filled drawing.; 1586/// <tr><td> `FillColor(Int_t color)` <td> Select fill color by ROOT color code; 1587///; 1588/// <tr><td> `Range(const char* name)` <td> Only draw curve in range defined by given name; 1589///; 1590/// <tr><td> `Range(double lo, double hi)` <td> Only draw curve in specified range; 1591///; 1592/// <tr><td> `VLines()` <td> Add vertical lines to y=0 at end points of curve; 1593///; 1594/// <tr><td> `Precision(double eps)` <td> Control precision of drawn curve w.r.t to scale of plot, default is 1e-3. Higher precision; 1595/// will result in more and more densely spaced curve points; 1596///; 1597/// <tr><td> `Invisible(bool flag)` <td> Add curve to frame, but do not display. Useful in combination AddTo(); 1598///; 1599/// <tr><td> `VisualizeError(const RooFitResult& fitres, double Z=1, bool linearMethod=true)`; 1600/// <td> Visualize the uncertainty on the parameters, as given",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:69294,Availability,error,error,69294,"nd points of curve; 1593///; 1594/// <tr><td> `Precision(double eps)` <td> Control precision of drawn curve w.r.t to scale of plot, default is 1e-3. Higher precision; 1595/// will result in more and more densely spaced curve points; 1596///; 1597/// <tr><td> `Invisible(bool flag)` <td> Add curve to frame, but do not display. Useful in combination AddTo(); 1598///; 1599/// <tr><td> `VisualizeError(const RooFitResult& fitres, double Z=1, bool linearMethod=true)`; 1600/// <td> Visualize the uncertainty on the parameters, as given in fitres, at 'Z' sigma'. The linear method is fast but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made. Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much) longer to calculate; 1601///; 1602/// <tr><td> `VisualizeError(const RooFitResult& fitres, const RooArgSet& param, double Z=1, bool linearMethod=true)`; 1603/// <td> Visualize the uncertainty on the subset of parameters 'param', as given in fitres, at 'Z' sigma'; 1604/// </table>; 1605///; 1606/// Details on error band visualization; 1607/// -----------------------------------; 1608/// *VisualizeError() uses plotOnWithErrorBand(). Documentation of the latter:*; 1609/// \see plotOnWithErrorBand(); 1610 ; 1611RooPlot* RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1, const RooCmdArg& arg2,; 1612 const RooCmdArg& arg3, const RooCmdArg& arg4,; 1613 const RooCmdArg& arg5, const RooCmdArg& arg6,; 1614 const RooCmdArg& arg7, const RooCmdArg& arg8,; 1615 const RooCmdArg& arg9, const RooCmdArg& arg10) const; 1616{; 1617 RooLinkedList l ;; 1618 l.Add((TObject*)&arg1) ; l.Add((TObject*)&arg2) ;; 1619 l.Add((TObject*)&arg3) ; l.Add((TObject*)&arg4) ;; 1620 l.Add((TObject*)&arg5) ; l.Add((TObject*)&arg6) ;; 1621 l.Add((TObject*)&arg7) ; l.Add((TObject*)&arg8) ;; 1622 l.Add((TObject*)&arg9) ; l.Add((TObject*)&arg10) ;; 1623 return plotO",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:72594,Availability,error,errorFR,72594,"; 1658 pc.defineDouble(""scaleFactor"",""Normalization"",0,1.0) ;; 1659 pc.defineInt(""scaleType"",""Normalization"",0,Relative) ;; 1660 pc.defineSet(""sliceSet"",""SliceVars"",0) ;; 1661 pc.defineObject(""sliceCatList"",""SliceCat"",0,nullptr,true) ;; 1662 // This dummy is needed for plotOn to recognize the ""SliceCatMany"" command.; 1663 // It is not used directly, but the ""SliceCat"" commands are nested in it.; 1664 // Removing this dummy definition results in ""ERROR: unrecognized command: SliceCatMany"".; 1665 pc.defineObject(""dummy1"",""SliceCatMany"",0) ;; 1666 pc.defineSet(""projSet"",""Project"",0) ;; 1667 pc.defineObject(""asymCat"",""Asymmetry"",0) ;; 1668 pc.defineDouble(""precision"",""Precision"",0,1e-3) ;; 1669 pc.defineDouble(""evalErrorVal"",""EvalErrorValue"",0,0) ;; 1670 pc.defineInt(""doEvalError"",""EvalErrorValue"",0,0) ;; 1671 pc.defineInt(""shiftToZero"",""ShiftToZero"",0,0) ;; 1672 pc.defineSet(""projDataSet"",""ProjData"",0) ;; 1673 pc.defineObject(""projData"",""ProjData"",1) ;; 1674 pc.defineObject(""errorFR"",""VisualizeError"",0) ;; 1675 pc.defineDouble(""errorZ"",""VisualizeError"",0,1.) ;; 1676 pc.defineSet(""errorPars"",""VisualizeError"",0) ;; 1677 pc.defineInt(""linearMethod"",""VisualizeError"",0,0) ;; 1678 pc.defineInt(""binProjData"",""ProjData"",0,0) ;; 1679 pc.defineDouble(""rangeLo"",""Range"",0,-999.) ;; 1680 pc.defineDouble(""rangeHi"",""Range"",1,-999.) ;; 1681 pc.defineInt(""numee"",""PrintEvalErrors"",0,10) ;; 1682 pc.defineInt(""rangeAdjustNorm"",""Range"",0,0) ;; 1683 pc.defineInt(""rangeWNAdjustNorm"",""RangeWithName"",0,0) ;; 1684 pc.defineInt(""VLines"",""VLines"",0,2) ; // 2==ExtendedWings; 1685 pc.defineString(""rangeName"",""RangeWithName"",0,"""") ;; 1686 pc.defineString(""normRangeName"",""NormRange"",0,"""") ;; 1687 pc.defineInt(""markerColor"",""MarkerColor"",0,-999) ;; 1688 pc.defineInt(""markerStyle"",""MarkerStyle"",0,-999) ;; 1689 pc.defineDouble(""markerSize"",""MarkerSize"",0,-999) ;; 1690 pc.defineInt(""lineColor"",""LineColor"",0,-999) ;; 1691 pc.defineInt(""lineStyle"",""LineStyle"",0,-999) ;; 1692 pc.defineInt(""lineWidth"",""LineW",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:72648,Availability,error,errorZ,72648,"ion"",0,1.0) ;; 1659 pc.defineInt(""scaleType"",""Normalization"",0,Relative) ;; 1660 pc.defineSet(""sliceSet"",""SliceVars"",0) ;; 1661 pc.defineObject(""sliceCatList"",""SliceCat"",0,nullptr,true) ;; 1662 // This dummy is needed for plotOn to recognize the ""SliceCatMany"" command.; 1663 // It is not used directly, but the ""SliceCat"" commands are nested in it.; 1664 // Removing this dummy definition results in ""ERROR: unrecognized command: SliceCatMany"".; 1665 pc.defineObject(""dummy1"",""SliceCatMany"",0) ;; 1666 pc.defineSet(""projSet"",""Project"",0) ;; 1667 pc.defineObject(""asymCat"",""Asymmetry"",0) ;; 1668 pc.defineDouble(""precision"",""Precision"",0,1e-3) ;; 1669 pc.defineDouble(""evalErrorVal"",""EvalErrorValue"",0,0) ;; 1670 pc.defineInt(""doEvalError"",""EvalErrorValue"",0,0) ;; 1671 pc.defineInt(""shiftToZero"",""ShiftToZero"",0,0) ;; 1672 pc.defineSet(""projDataSet"",""ProjData"",0) ;; 1673 pc.defineObject(""projData"",""ProjData"",1) ;; 1674 pc.defineObject(""errorFR"",""VisualizeError"",0) ;; 1675 pc.defineDouble(""errorZ"",""VisualizeError"",0,1.) ;; 1676 pc.defineSet(""errorPars"",""VisualizeError"",0) ;; 1677 pc.defineInt(""linearMethod"",""VisualizeError"",0,0) ;; 1678 pc.defineInt(""binProjData"",""ProjData"",0,0) ;; 1679 pc.defineDouble(""rangeLo"",""Range"",0,-999.) ;; 1680 pc.defineDouble(""rangeHi"",""Range"",1,-999.) ;; 1681 pc.defineInt(""numee"",""PrintEvalErrors"",0,10) ;; 1682 pc.defineInt(""rangeAdjustNorm"",""Range"",0,0) ;; 1683 pc.defineInt(""rangeWNAdjustNorm"",""RangeWithName"",0,0) ;; 1684 pc.defineInt(""VLines"",""VLines"",0,2) ; // 2==ExtendedWings; 1685 pc.defineString(""rangeName"",""RangeWithName"",0,"""") ;; 1686 pc.defineString(""normRangeName"",""NormRange"",0,"""") ;; 1687 pc.defineInt(""markerColor"",""MarkerColor"",0,-999) ;; 1688 pc.defineInt(""markerStyle"",""MarkerStyle"",0,-999) ;; 1689 pc.defineDouble(""markerSize"",""MarkerSize"",0,-999) ;; 1690 pc.defineInt(""lineColor"",""LineColor"",0,-999) ;; 1691 pc.defineInt(""lineStyle"",""LineStyle"",0,-999) ;; 1692 pc.defineInt(""lineWidth"",""LineWidth"",0,-999) ;; 1693 pc.defineInt(""fillColor"",""F",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:72701,Availability,error,errorPars,72701,"0,Relative) ;; 1660 pc.defineSet(""sliceSet"",""SliceVars"",0) ;; 1661 pc.defineObject(""sliceCatList"",""SliceCat"",0,nullptr,true) ;; 1662 // This dummy is needed for plotOn to recognize the ""SliceCatMany"" command.; 1663 // It is not used directly, but the ""SliceCat"" commands are nested in it.; 1664 // Removing this dummy definition results in ""ERROR: unrecognized command: SliceCatMany"".; 1665 pc.defineObject(""dummy1"",""SliceCatMany"",0) ;; 1666 pc.defineSet(""projSet"",""Project"",0) ;; 1667 pc.defineObject(""asymCat"",""Asymmetry"",0) ;; 1668 pc.defineDouble(""precision"",""Precision"",0,1e-3) ;; 1669 pc.defineDouble(""evalErrorVal"",""EvalErrorValue"",0,0) ;; 1670 pc.defineInt(""doEvalError"",""EvalErrorValue"",0,0) ;; 1671 pc.defineInt(""shiftToZero"",""ShiftToZero"",0,0) ;; 1672 pc.defineSet(""projDataSet"",""ProjData"",0) ;; 1673 pc.defineObject(""projData"",""ProjData"",1) ;; 1674 pc.defineObject(""errorFR"",""VisualizeError"",0) ;; 1675 pc.defineDouble(""errorZ"",""VisualizeError"",0,1.) ;; 1676 pc.defineSet(""errorPars"",""VisualizeError"",0) ;; 1677 pc.defineInt(""linearMethod"",""VisualizeError"",0,0) ;; 1678 pc.defineInt(""binProjData"",""ProjData"",0,0) ;; 1679 pc.defineDouble(""rangeLo"",""Range"",0,-999.) ;; 1680 pc.defineDouble(""rangeHi"",""Range"",1,-999.) ;; 1681 pc.defineInt(""numee"",""PrintEvalErrors"",0,10) ;; 1682 pc.defineInt(""rangeAdjustNorm"",""Range"",0,0) ;; 1683 pc.defineInt(""rangeWNAdjustNorm"",""RangeWithName"",0,0) ;; 1684 pc.defineInt(""VLines"",""VLines"",0,2) ; // 2==ExtendedWings; 1685 pc.defineString(""rangeName"",""RangeWithName"",0,"""") ;; 1686 pc.defineString(""normRangeName"",""NormRange"",0,"""") ;; 1687 pc.defineInt(""markerColor"",""MarkerColor"",0,-999) ;; 1688 pc.defineInt(""markerStyle"",""MarkerStyle"",0,-999) ;; 1689 pc.defineDouble(""markerSize"",""MarkerSize"",0,-999) ;; 1690 pc.defineInt(""lineColor"",""LineColor"",0,-999) ;; 1691 pc.defineInt(""lineStyle"",""LineStyle"",0,-999) ;; 1692 pc.defineInt(""lineWidth"",""LineWidth"",0,-999) ;; 1693 pc.defineInt(""fillColor"",""FillColor"",0,-999) ;; 1694 pc.defineInt(""fillStyle"",""FillStyle",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:74648,Availability,error,errorFR,74648,"lColor"",0,-999) ;; 1694 pc.defineInt(""fillStyle"",""FillStyle"",0,-999) ;; 1695 pc.defineString(""curveName"",""Name"",0,"""") ;; 1696 pc.defineInt(""curveInvisible"",""Invisible"",0,0) ;; 1697 pc.defineInt(""showProg"",""ShowProgress"",0,0) ;; 1698 pc.defineInt(""numCPU"",""NumCPU"",0,1) ;; 1699 pc.defineInt(""interleave"",""NumCPU"",1,0) ;; 1700 pc.defineString(""addToCurveName"",""AddTo"",0,"""") ;; 1701 pc.defineDouble(""addToWgtSelf"",""AddTo"",0,1.) ;; 1702 pc.defineDouble(""addToWgtOther"",""AddTo"",1,1.) ;; 1703 pc.defineInt(""moveToBack"",""MoveToBack"",0,0) ;; 1704 pc.defineMutex(""SliceVars"",""Project"") ;; 1705 pc.defineMutex(""AddTo"",""Asymmetry"") ;; 1706 pc.defineMutex(""Range"",""RangeWithName"") ;; 1707 pc.defineMutex(""VisualizeError"",""VisualizeErrorData"") ;; 1708 ; 1709 // Process & check varargs; 1710 pc.process(argList) ;; 1711 if (!pc.ok(true)) {; 1712 return frame ;; 1713 }; 1714 ; 1715 TString drawOpt(pc.getString(""drawOption""));; 1716 ; 1717 RooFitResult* errFR = static_cast<RooFitResult*>(pc.getObject(""errorFR"")) ;; 1718 if (!drawOpt.Contains(""P"") && errFR) {; 1719 return plotOnWithErrorBand(frame, *errFR, pc.getDouble(""errorZ""), pc.getSet(""errorPars""), argList,; 1720 pc.getInt(""linearMethod""));; 1721 }; 1722 ; 1723 // Extract values from named arguments; 1724 PlotOpt o ;; 1725 o.numee = pc.getInt(""numee"") ;; 1726 o.drawOptions = drawOpt.Data();; 1727 o.curveNameSuffix = pc.getString(""curveNameSuffix"") ;; 1728 o.scaleFactor = pc.getDouble(""scaleFactor"") ;; 1729 o.stype = (ScaleType) pc.getInt(""scaleType"") ;; 1730 o.projData = static_cast<const RooAbsData*>(pc.getObject(""projData"")) ;; 1731 o.binProjData = pc.getInt(""binProjData"") ;; 1732 o.projDataSet = pc.getSet(""projDataSet"");; 1733 o.numCPU = pc.getInt(""numCPU"") ;; 1734 o.interleave = (RooFit::MPSplit) pc.getInt(""interleave"") ;; 1735 o.eeval = pc.getDouble(""evalErrorVal"") ;; 1736 o.doeeval = pc.getInt(""doEvalError"") ;; 1737 o.errorFR = errFR;; 1738 ; 1739 const RooArgSet* sliceSetTmp = pc.getSet(""sliceSet"");; 1740 std::unique_ptr<RooArgSet> ",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:74768,Availability,error,errorZ,74768,",0,"""") ;; 1696 pc.defineInt(""curveInvisible"",""Invisible"",0,0) ;; 1697 pc.defineInt(""showProg"",""ShowProgress"",0,0) ;; 1698 pc.defineInt(""numCPU"",""NumCPU"",0,1) ;; 1699 pc.defineInt(""interleave"",""NumCPU"",1,0) ;; 1700 pc.defineString(""addToCurveName"",""AddTo"",0,"""") ;; 1701 pc.defineDouble(""addToWgtSelf"",""AddTo"",0,1.) ;; 1702 pc.defineDouble(""addToWgtOther"",""AddTo"",1,1.) ;; 1703 pc.defineInt(""moveToBack"",""MoveToBack"",0,0) ;; 1704 pc.defineMutex(""SliceVars"",""Project"") ;; 1705 pc.defineMutex(""AddTo"",""Asymmetry"") ;; 1706 pc.defineMutex(""Range"",""RangeWithName"") ;; 1707 pc.defineMutex(""VisualizeError"",""VisualizeErrorData"") ;; 1708 ; 1709 // Process & check varargs; 1710 pc.process(argList) ;; 1711 if (!pc.ok(true)) {; 1712 return frame ;; 1713 }; 1714 ; 1715 TString drawOpt(pc.getString(""drawOption""));; 1716 ; 1717 RooFitResult* errFR = static_cast<RooFitResult*>(pc.getObject(""errorFR"")) ;; 1718 if (!drawOpt.Contains(""P"") && errFR) {; 1719 return plotOnWithErrorBand(frame, *errFR, pc.getDouble(""errorZ""), pc.getSet(""errorPars""), argList,; 1720 pc.getInt(""linearMethod""));; 1721 }; 1722 ; 1723 // Extract values from named arguments; 1724 PlotOpt o ;; 1725 o.numee = pc.getInt(""numee"") ;; 1726 o.drawOptions = drawOpt.Data();; 1727 o.curveNameSuffix = pc.getString(""curveNameSuffix"") ;; 1728 o.scaleFactor = pc.getDouble(""scaleFactor"") ;; 1729 o.stype = (ScaleType) pc.getInt(""scaleType"") ;; 1730 o.projData = static_cast<const RooAbsData*>(pc.getObject(""projData"")) ;; 1731 o.binProjData = pc.getInt(""binProjData"") ;; 1732 o.projDataSet = pc.getSet(""projDataSet"");; 1733 o.numCPU = pc.getInt(""numCPU"") ;; 1734 o.interleave = (RooFit::MPSplit) pc.getInt(""interleave"") ;; 1735 o.eeval = pc.getDouble(""evalErrorVal"") ;; 1736 o.doeeval = pc.getInt(""doEvalError"") ;; 1737 o.errorFR = errFR;; 1738 ; 1739 const RooArgSet* sliceSetTmp = pc.getSet(""sliceSet"");; 1740 std::unique_ptr<RooArgSet> sliceSet{sliceSetTmp ? static_cast<RooArgSet*>(sliceSetTmp->Clone()) : nullptr};; 1741 const RooArgSet* projSe",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:74789,Availability,error,errorPars,74789,"rveInvisible"",""Invisible"",0,0) ;; 1697 pc.defineInt(""showProg"",""ShowProgress"",0,0) ;; 1698 pc.defineInt(""numCPU"",""NumCPU"",0,1) ;; 1699 pc.defineInt(""interleave"",""NumCPU"",1,0) ;; 1700 pc.defineString(""addToCurveName"",""AddTo"",0,"""") ;; 1701 pc.defineDouble(""addToWgtSelf"",""AddTo"",0,1.) ;; 1702 pc.defineDouble(""addToWgtOther"",""AddTo"",1,1.) ;; 1703 pc.defineInt(""moveToBack"",""MoveToBack"",0,0) ;; 1704 pc.defineMutex(""SliceVars"",""Project"") ;; 1705 pc.defineMutex(""AddTo"",""Asymmetry"") ;; 1706 pc.defineMutex(""Range"",""RangeWithName"") ;; 1707 pc.defineMutex(""VisualizeError"",""VisualizeErrorData"") ;; 1708 ; 1709 // Process & check varargs; 1710 pc.process(argList) ;; 1711 if (!pc.ok(true)) {; 1712 return frame ;; 1713 }; 1714 ; 1715 TString drawOpt(pc.getString(""drawOption""));; 1716 ; 1717 RooFitResult* errFR = static_cast<RooFitResult*>(pc.getObject(""errorFR"")) ;; 1718 if (!drawOpt.Contains(""P"") && errFR) {; 1719 return plotOnWithErrorBand(frame, *errFR, pc.getDouble(""errorZ""), pc.getSet(""errorPars""), argList,; 1720 pc.getInt(""linearMethod""));; 1721 }; 1722 ; 1723 // Extract values from named arguments; 1724 PlotOpt o ;; 1725 o.numee = pc.getInt(""numee"") ;; 1726 o.drawOptions = drawOpt.Data();; 1727 o.curveNameSuffix = pc.getString(""curveNameSuffix"") ;; 1728 o.scaleFactor = pc.getDouble(""scaleFactor"") ;; 1729 o.stype = (ScaleType) pc.getInt(""scaleType"") ;; 1730 o.projData = static_cast<const RooAbsData*>(pc.getObject(""projData"")) ;; 1731 o.binProjData = pc.getInt(""binProjData"") ;; 1732 o.projDataSet = pc.getSet(""projDataSet"");; 1733 o.numCPU = pc.getInt(""numCPU"") ;; 1734 o.interleave = (RooFit::MPSplit) pc.getInt(""interleave"") ;; 1735 o.eeval = pc.getDouble(""evalErrorVal"") ;; 1736 o.doeeval = pc.getInt(""doEvalError"") ;; 1737 o.errorFR = errFR;; 1738 ; 1739 const RooArgSet* sliceSetTmp = pc.getSet(""sliceSet"");; 1740 std::unique_ptr<RooArgSet> sliceSet{sliceSetTmp ? static_cast<RooArgSet*>(sliceSetTmp->Clone()) : nullptr};; 1741 const RooArgSet* projSet = pc.getSet(""projSet"") ;; 1742",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:75542,Availability,error,errorFR,75542,"716 ; 1717 RooFitResult* errFR = static_cast<RooFitResult*>(pc.getObject(""errorFR"")) ;; 1718 if (!drawOpt.Contains(""P"") && errFR) {; 1719 return plotOnWithErrorBand(frame, *errFR, pc.getDouble(""errorZ""), pc.getSet(""errorPars""), argList,; 1720 pc.getInt(""linearMethod""));; 1721 }; 1722 ; 1723 // Extract values from named arguments; 1724 PlotOpt o ;; 1725 o.numee = pc.getInt(""numee"") ;; 1726 o.drawOptions = drawOpt.Data();; 1727 o.curveNameSuffix = pc.getString(""curveNameSuffix"") ;; 1728 o.scaleFactor = pc.getDouble(""scaleFactor"") ;; 1729 o.stype = (ScaleType) pc.getInt(""scaleType"") ;; 1730 o.projData = static_cast<const RooAbsData*>(pc.getObject(""projData"")) ;; 1731 o.binProjData = pc.getInt(""binProjData"") ;; 1732 o.projDataSet = pc.getSet(""projDataSet"");; 1733 o.numCPU = pc.getInt(""numCPU"") ;; 1734 o.interleave = (RooFit::MPSplit) pc.getInt(""interleave"") ;; 1735 o.eeval = pc.getDouble(""evalErrorVal"") ;; 1736 o.doeeval = pc.getInt(""doEvalError"") ;; 1737 o.errorFR = errFR;; 1738 ; 1739 const RooArgSet* sliceSetTmp = pc.getSet(""sliceSet"");; 1740 std::unique_ptr<RooArgSet> sliceSet{sliceSetTmp ? static_cast<RooArgSet*>(sliceSetTmp->Clone()) : nullptr};; 1741 const RooArgSet* projSet = pc.getSet(""projSet"") ;; 1742 const RooAbsCategoryLValue* asymCat = static_cast<const RooAbsCategoryLValue*>(pc.getObject(""asymCat"")) ;; 1743 ; 1744 ; 1745 // Look for category slice arguments and add them to the master slice list if found; 1746 if (const char* sliceCatState = pc.getString(""sliceCatState"",nullptr,true)) {; 1747 const RooLinkedList& sliceCatList = pc.getObjectList(""sliceCatList"") ;; 1748 ; 1749 // Make the master slice set if it doesnt exist; 1750 if (!sliceSet) {; 1751 sliceSet = std::make_unique<RooArgSet>();; 1752 }; 1753 ; 1754 // Loop over all categories provided by (multiple) Slice() arguments; 1755 auto iter = sliceCatList.begin();; 1756 for (auto const& catToken : ROOT::Split(sliceCatState, "","")) {; 1757 if (auto scat = static_cast<RooCategory*>(*iter)) {; 1758 // Set",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:82362,Availability,error,errors,82362,"s set for plotting \"""" << GetName(); 1854 << ""\"", but these only have an effect when 'DrawOption(\""F\"")' for fill is used at the same time."" << std::endl;; 1855 }; 1856 ; 1857 // Move last inserted object to back to drawing stack if requested; 1858 if (pc.getInt(""moveToBack"") && frame->numItems()>1) {; 1859 frame->drawBefore(frame->getObject(0)->GetName(), frame->getCurve()->GetName());; 1860 }; 1861 ; 1862 return ret ;; 1863}; 1864 ; 1865 ; 1866 ; 1867/// Plotting engine function for internal use; 1868///; 1869/// Plot ourselves on given frame. If frame contains a histogram, all dimensions of the plotted; 1870/// function that occur in the previously plotted dataset are projected via partial integration,; 1871/// otherwise no projections are performed. Optionally, certain projections can be performed; 1872/// by summing over the values present in a provided dataset ('projData'), to correctly; 1873/// project out data dependents that are not properly described by the PDF (e.g. per-event errors).; 1874///; 1875/// The functions value can be multiplied with an optional scale factor. The interpretation; 1876/// of the scale factor is unique for generic real functions, for PDFs there are various interpretations; 1877/// possible, which can be selection with 'stype' (see RooAbsPdf::plotOn() for details).; 1878///; 1879/// The default projection behaviour can be overridden by supplying an optional set of dependents; 1880/// to project via RooFit command arguments.; 1881//_____________________________________________________________________________; 1882// coverity[PASS_BY_VALUE]; 1883RooPlot* RooAbsReal::plotOn(RooPlot *frame, PlotOpt o) const; 1884{; 1885 // Sanity checks; 1886 if (plotSanityChecks(frame)) return frame ;; 1887 ; 1888 // ProjDataVars is either all projData observables, or the user indicated subset of it; 1889 RooArgSet projDataVars ;; 1890 if (o.projData) {; 1891 cxcoutD(Plotting) << ""RooAbsReal::plotOn("" << GetName() << "") have ProjData with observables =",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:87269,Availability,error,error,87269," variables "" << projectedVars; 1954 << (o.projectionRangeName?Form("" in range %s"",o.projectionRangeName):"""") << std::endl;; 1955 }; 1956 if (projDataNeededVars && !projDataNeededVars->empty()) {; 1957 coutI(Plotting) << ""RooAbsReal::plotOn("" << GetName() << "") plot on "" << plotVar->GetName(); 1958 << "" averages using data variables "" << *projDataNeededVars << std::endl ;; 1959 }; 1960 ; 1961 // Create projection integral; 1962 RooArgSet* projectionCompList = nullptr ;; 1963 ; 1964 RooArgSet deps;; 1965 getObservables(frame->getNormVars(), deps) ;; 1966 deps.remove(projectedVars,true,true) ;; 1967 if (projDataNeededVars) {; 1968 deps.remove(*projDataNeededVars,true,true) ;; 1969 }; 1970 deps.remove(*plotVar,true,true) ;; 1971 deps.add(*plotVar) ;; 1972 ; 1973 // Now that we have the final set of dependents, call checkObservables(); 1974 ; 1975 // WVE take out conditional observables; 1976 if (checkObservables(&deps)) {; 1977 coutE(Plotting) << ""RooAbsReal::plotOn("" << GetName() << "") error in checkObservables, abort"" << std::endl ;; 1978 if (projDataNeededVars) delete projDataNeededVars ;; 1979 return frame ;; 1980 }; 1981 ; 1982 RooAbsReal *projection = const_cast<RooAbsReal*>(createPlotProjection(deps, &projectedVars, projectionCompList, o.projectionRangeName));; 1983 cxcoutD(Plotting) << ""RooAbsReal::plotOn("" << GetName() << "") plot projection object is "" << projection->GetName() << std::endl ;; 1984 if (dologD(Plotting)) {; 1985 projection->printStream(ccoutD(Plotting),0,kVerbose) ;; 1986 }; 1987 ; 1988 // Always fix RooAddPdf normalizations; 1989 RooArgSet fullNormSet(deps) ;; 1990 fullNormSet.add(projectedVars) ;; 1991 if (projDataNeededVars && !projDataNeededVars->empty()) {; 1992 fullNormSet.add(*projDataNeededVars) ;; 1993 }; 1994 ; 1995 std::unique_ptr<RooArgSet> projectionComponents(projection->getComponents());; 1996 for(auto * pdf : dynamic_range_cast<RooAbsPdf*>(*projectionComponents)) {; 1997 if (pdf) {; 1998 pdf->selectNormalization(&fullNormSet) ;; 19",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:94860,Availability,error,errorFR,94860,"his->InheritsFrom(RooAbsPdf::Class())){; 2132 // this scaling should only be !=1 when plotting partial ranges; 2133 // still, raw means raw; 2134 o.scaleFactor /= intFrac->getVal() ;; 2135 }; 2136 }; 2137 ; 2138 // create a new curve of our function using the clone to do the evaluations; 2139 // Curve constructor for regular projections; 2140 ; 2141 // Set default name of curve; 2142 std::string curveName(projection->GetName()) ;; 2143 if (!sliceSet.empty()) {; 2144 curveName.append(""_Slice["" + sliceSet.contentsString() + ""]"");; 2145 }; 2146 if (o.curveNameSuffix) {; 2147 // Append any suffixes imported from RooAbsPdf::plotOn; 2148 curveName.append(o.curveNameSuffix) ;; 2149 }; 2150 ; 2151 TString opt(o.drawOptions);; 2152 if(opt.Contains(""P"")){; 2153 RooAbsReal::setEvalErrorLoggingMode(RooAbsReal::CollectErrors) ;; 2154 RooHist *graph= new RooHist(*projection,*plotVar,1.,o.scaleFactor,frame->getNormVars(),o.errorFR);; 2155 RooAbsReal::setEvalErrorLoggingMode(RooAbsReal::PrintErrors) ;; 2156 ; 2157 // Override name of curve by user name, if specified; 2158 if (o.curveName) {; 2159 graph->SetName(o.curveName) ;; 2160 }; 2161 ; 2162 // add this new curve to the specified plot frame; 2163 frame->addPlotable(graph, o.drawOptions, o.curveInvisible);; 2164 } else {; 2165 RooAbsReal::setEvalErrorLoggingMode(RooAbsReal::CollectErrors) ;; 2166 RooCurve *curve = new RooCurve(*projection,*plotVar,o.rangeLo,o.rangeHi,frame->GetNbinsX(),; 2167 o.scaleFactor,nullptr,o.precision,o.precision,o.shiftToZero,o.wmode,o.numee,o.doeeval,o.eeval,o.progress);; 2168 RooAbsReal::setEvalErrorLoggingMode(RooAbsReal::PrintErrors) ;; 2169 curve->SetName(curveName.c_str()) ;; 2170 ; 2171 // Add self to other curve if requested; 2172 if (o.addToCurveName) {; 2173 RooCurve* otherCurve = static_cast<RooCurve*>(frame->findObject(o.addToCurveName,RooCurve::Class())) ;; 2174 RooCurve* sumCurve = new RooCurve(projection->GetName(),projection->GetTitle(),*curve,*otherCurve,o.addToWgtSelf,o.addToWgtOther) ",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:109167,Availability,error,error,109167,"rr}_{i,j} = \left(\sigma_{\theta_i} \sigma_{\theta_j}\right)^{-1} \cdot \mathrm{Cov}_{i,j} \f$ is the correlation matrix from the fit result.; 2471 ; 2472double RooAbsReal::getPropagatedError(const RooFitResult &fr, const RooArgSet &nset) const; 2473{; 2474 // Calling getParameters() might be costly, but necessary to get the right; 2475 // parameters in the RooAbsReal. The RooFitResult only stores snapshots.; 2476 RooArgSet allParamsInAbsReal;; 2477 getParameters(&nset, allParamsInAbsReal);; 2478 ; 2479 RooArgList paramList;; 2480 for(auto * rrvFitRes : static_range_cast<RooRealVar*>(fr.floatParsFinal())) {; 2481 ; 2482 auto rrvInAbsReal = static_cast<RooRealVar const*>(allParamsInAbsReal.find(*rrvFitRes));; 2483 ; 2484 // If this RooAbsReal is a RooRealVar in the fit result, we don't need to; 2485 // propagate anything and can just return the error in the fit result; 2486 if(rrvFitRes->namePtr() == namePtr()) return rrvFitRes->getError();; 2487 ; 2488 // Strip out parameters with zero error; 2489 if (rrvFitRes->getError() <= std::abs(rrvFitRes->getVal()) * std::numeric_limits<double>::epsilon()) continue;; 2490 ; 2491 // Ignore parameters in the fit result that this RooAbsReal doesn't depend on; 2492 if(!rrvInAbsReal) continue;; 2493 ; 2494 // Checking for float equality is a bad. We check if the values are; 2495 // negligibly far away from each other, relative to the uncertainty.; 2496 if(std::abs(rrvInAbsReal->getVal() - rrvFitRes->getVal()) > 0.01 * rrvFitRes->getError()) {; 2497 std::stringstream errMsg;; 2498 errMsg << ""RooAbsReal::getPropagatedError(): the parameters of the RooAbsReal don't have""; 2499 << "" the same values as in the fit result! The logic of getPropagatedError is broken in this case."";; 2500 ; 2501 throw std::runtime_error(errMsg.str());; 2502 }; 2503 ; 2504 paramList.add(*rrvInAbsReal);; 2505 }; 2506 ; 2507 std::vector<double> plusVar;; 2508 std::vector<double> minusVar;; 2509 plusVar.reserve(paramList.size());; 2510 minusVar.reserve(paramLis",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:109312,Availability,error,error,109312,"rr}_{i,j} = \left(\sigma_{\theta_i} \sigma_{\theta_j}\right)^{-1} \cdot \mathrm{Cov}_{i,j} \f$ is the correlation matrix from the fit result.; 2471 ; 2472double RooAbsReal::getPropagatedError(const RooFitResult &fr, const RooArgSet &nset) const; 2473{; 2474 // Calling getParameters() might be costly, but necessary to get the right; 2475 // parameters in the RooAbsReal. The RooFitResult only stores snapshots.; 2476 RooArgSet allParamsInAbsReal;; 2477 getParameters(&nset, allParamsInAbsReal);; 2478 ; 2479 RooArgList paramList;; 2480 for(auto * rrvFitRes : static_range_cast<RooRealVar*>(fr.floatParsFinal())) {; 2481 ; 2482 auto rrvInAbsReal = static_cast<RooRealVar const*>(allParamsInAbsReal.find(*rrvFitRes));; 2483 ; 2484 // If this RooAbsReal is a RooRealVar in the fit result, we don't need to; 2485 // propagate anything and can just return the error in the fit result; 2486 if(rrvFitRes->namePtr() == namePtr()) return rrvFitRes->getError();; 2487 ; 2488 // Strip out parameters with zero error; 2489 if (rrvFitRes->getError() <= std::abs(rrvFitRes->getVal()) * std::numeric_limits<double>::epsilon()) continue;; 2490 ; 2491 // Ignore parameters in the fit result that this RooAbsReal doesn't depend on; 2492 if(!rrvInAbsReal) continue;; 2493 ; 2494 // Checking for float equality is a bad. We check if the values are; 2495 // negligibly far away from each other, relative to the uncertainty.; 2496 if(std::abs(rrvInAbsReal->getVal() - rrvFitRes->getVal()) > 0.01 * rrvFitRes->getError()) {; 2497 std::stringstream errMsg;; 2498 errMsg << ""RooAbsReal::getPropagatedError(): the parameters of the RooAbsReal don't have""; 2499 << "" the same values as in the fit result! The logic of getPropagatedError is broken in this case."";; 2500 ; 2501 throw std::runtime_error(errMsg.str());; 2502 }; 2503 ; 2504 paramList.add(*rrvInAbsReal);; 2505 }; 2506 ; 2507 std::vector<double> plusVar;; 2508 std::vector<double> minusVar;; 2509 plusVar.reserve(paramList.size());; 2510 minusVar.reserve(paramLis",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:111527,Availability,error,error,111527,".size() ?; 2514 fr.covarianceMatrix() :; 2515 fr.reducedCovarianceMatrix(paramList)) ;; 2516 ; 2517 for (std::size_t ivar=0 ; ivar<paramList.size() ; ivar++) {; 2518 ; 2519 auto& rrv = static_cast<RooRealVar&>(paramList[ivar]);; 2520 ; 2521 double cenVal = rrv.getVal() ;; 2522 double errVal = sqrt(V(ivar,ivar)) ;; 2523 ; 2524 // Make Plus variation; 2525 rrv.setVal(cenVal+errVal) ;; 2526 plusVar.push_back(getVal(nset)) ;; 2527 ; 2528 // Make Minus variation; 2529 rrv.setVal(cenVal-errVal) ;; 2530 minusVar.push_back(getVal(nset)) ;; 2531 ; 2532 rrv.setVal(cenVal) ;; 2533 }; 2534 ; 2535 // Re-evaluate this RooAbsReal with the central parameters just to be; 2536 // extra-safe that a call to `getPropagatedError()` doesn't change any state.; 2537 // It should not be necessary because thanks to the dirty flag propagation; 2538 // the RooAbsReal is re-evaluated anyway the next time getVal() is called.; 2539 // Still there are imaginable corner cases where it would not be triggered,; 2540 // for example if the user changes the RooFit operation more after the error; 2541 // propagation.; 2542 getVal(nset);; 2543 ; 2544 TMatrixDSym C(paramList.size()) ;; 2545 std::vector<double> errVec(paramList.size()) ;; 2546 for (std::size_t i=0 ; i<paramList.size() ; i++) {; 2547 errVec[i] = std::sqrt(V(i,i)) ;; 2548 for (std::size_t j=i ; j<paramList.size() ; j++) {; 2549 C(i,j) = V(i,j) / std::sqrt(V(i,i)*V(j,j));; 2550 C(j,i) = C(i,j) ;; 2551 }; 2552 }; 2553 ; 2554 // Make std::vector of variations; 2555 TVectorD F(plusVar.size()) ;; 2556 for (std::size_t j=0 ; j<plusVar.size() ; j++) {; 2557 F[j] = (plusVar[j]-minusVar[j]) * 0.5;; 2558 }; 2559 ; 2560 // Calculate error in linear approximation from variations and correlation coefficient; 2561 double sum = F*(C*F) ;; 2562 ; 2563 return sqrt(sum) ;; 2564}; 2565 ; 2566 ; 2567 ; 2568////////////////////////////////////////////////////////////////////////////////; 2569/// Plot function or PDF on frame with support for visualization of the un",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:112133,Availability,error,error,112133,"ooAbsReal is re-evaluated anyway the next time getVal() is called.; 2539 // Still there are imaginable corner cases where it would not be triggered,; 2540 // for example if the user changes the RooFit operation more after the error; 2541 // propagation.; 2542 getVal(nset);; 2543 ; 2544 TMatrixDSym C(paramList.size()) ;; 2545 std::vector<double> errVec(paramList.size()) ;; 2546 for (std::size_t i=0 ; i<paramList.size() ; i++) {; 2547 errVec[i] = std::sqrt(V(i,i)) ;; 2548 for (std::size_t j=i ; j<paramList.size() ; j++) {; 2549 C(i,j) = V(i,j) / std::sqrt(V(i,i)*V(j,j));; 2550 C(j,i) = C(i,j) ;; 2551 }; 2552 }; 2553 ; 2554 // Make std::vector of variations; 2555 TVectorD F(plusVar.size()) ;; 2556 for (std::size_t j=0 ; j<plusVar.size() ; j++) {; 2557 F[j] = (plusVar[j]-minusVar[j]) * 0.5;; 2558 }; 2559 ; 2560 // Calculate error in linear approximation from variations and correlation coefficient; 2561 double sum = F*(C*F) ;; 2562 ; 2563 return sqrt(sum) ;; 2564}; 2565 ; 2566 ; 2567 ; 2568////////////////////////////////////////////////////////////////////////////////; 2569/// Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr.; 2570/// \param[in] frame RooPlot to plot on; 2571/// \param[in] fr The RooFitResult, where errors can be extracted; 2572/// \param[in] Z The desired significance (width) of the error band; 2573/// \param[in] params If non-zero, consider only the subset of the parameters in fr for the error evaluation; 2574/// \param[in] argList Optional `RooCmdArg` that can be applied to a regular plotOn() operation; 2575/// \param[in] linMethod By default (linMethod=true), a linearized error is shown.; 2576/// \return The RooPlot the band was plotted on (for chaining of plotting commands).; 2577///; 2578/// The linearized error is calculated as follows:; 2579/// \f[; 2580/// \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; 2581/// \f]; 2582///; 2583/// where; 2584/// \f",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:112599,Availability,error,errors,112599,"d::sqrt(V(i,i)) ;; 2548 for (std::size_t j=i ; j<paramList.size() ; j++) {; 2549 C(i,j) = V(i,j) / std::sqrt(V(i,i)*V(j,j));; 2550 C(j,i) = C(i,j) ;; 2551 }; 2552 }; 2553 ; 2554 // Make std::vector of variations; 2555 TVectorD F(plusVar.size()) ;; 2556 for (std::size_t j=0 ; j<plusVar.size() ; j++) {; 2557 F[j] = (plusVar[j]-minusVar[j]) * 0.5;; 2558 }; 2559 ; 2560 // Calculate error in linear approximation from variations and correlation coefficient; 2561 double sum = F*(C*F) ;; 2562 ; 2563 return sqrt(sum) ;; 2564}; 2565 ; 2566 ; 2567 ; 2568////////////////////////////////////////////////////////////////////////////////; 2569/// Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr.; 2570/// \param[in] frame RooPlot to plot on; 2571/// \param[in] fr The RooFitResult, where errors can be extracted; 2572/// \param[in] Z The desired significance (width) of the error band; 2573/// \param[in] params If non-zero, consider only the subset of the parameters in fr for the error evaluation; 2574/// \param[in] argList Optional `RooCmdArg` that can be applied to a regular plotOn() operation; 2575/// \param[in] linMethod By default (linMethod=true), a linearized error is shown.; 2576/// \return The RooPlot the band was plotted on (for chaining of plotting commands).; 2577///; 2578/// The linearized error is calculated as follows:; 2579/// \f[; 2580/// \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; 2581/// \f]; 2582///; 2583/// where; 2584/// \f[; 2585/// F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; 2586/// \f]; 2587/// with \f$ f(x) \f$ the plotted curve and \f$ \mathrm{d}a \f$ taken from the fit result, and; 2588/// \f$ \mathrm{Corr}(a,a') \f$ = the correlation matrix from the fit result, and \f$ Z \f$ = requested signifance (\f$ Z \sigma \f$ band); 2589///; 2590/// The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters),",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:112685,Availability,error,error,112685,"d::sqrt(V(i,i)) ;; 2548 for (std::size_t j=i ; j<paramList.size() ; j++) {; 2549 C(i,j) = V(i,j) / std::sqrt(V(i,i)*V(j,j));; 2550 C(j,i) = C(i,j) ;; 2551 }; 2552 }; 2553 ; 2554 // Make std::vector of variations; 2555 TVectorD F(plusVar.size()) ;; 2556 for (std::size_t j=0 ; j<plusVar.size() ; j++) {; 2557 F[j] = (plusVar[j]-minusVar[j]) * 0.5;; 2558 }; 2559 ; 2560 // Calculate error in linear approximation from variations and correlation coefficient; 2561 double sum = F*(C*F) ;; 2562 ; 2563 return sqrt(sum) ;; 2564}; 2565 ; 2566 ; 2567 ; 2568////////////////////////////////////////////////////////////////////////////////; 2569/// Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr.; 2570/// \param[in] frame RooPlot to plot on; 2571/// \param[in] fr The RooFitResult, where errors can be extracted; 2572/// \param[in] Z The desired significance (width) of the error band; 2573/// \param[in] params If non-zero, consider only the subset of the parameters in fr for the error evaluation; 2574/// \param[in] argList Optional `RooCmdArg` that can be applied to a regular plotOn() operation; 2575/// \param[in] linMethod By default (linMethod=true), a linearized error is shown.; 2576/// \return The RooPlot the band was plotted on (for chaining of plotting commands).; 2577///; 2578/// The linearized error is calculated as follows:; 2579/// \f[; 2580/// \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; 2581/// \f]; 2582///; 2583/// where; 2584/// \f[; 2585/// F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; 2586/// \f]; 2587/// with \f$ f(x) \f$ the plotted curve and \f$ \mathrm{d}a \f$ taken from the fit result, and; 2588/// \f$ \mathrm{Corr}(a,a') \f$ = the correlation matrix from the fit result, and \f$ Z \f$ = requested signifance (\f$ Z \sigma \f$ band); 2589///; 2590/// The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters),",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:112793,Availability,error,error,112793,"d::sqrt(V(i,i)) ;; 2548 for (std::size_t j=i ; j<paramList.size() ; j++) {; 2549 C(i,j) = V(i,j) / std::sqrt(V(i,i)*V(j,j));; 2550 C(j,i) = C(i,j) ;; 2551 }; 2552 }; 2553 ; 2554 // Make std::vector of variations; 2555 TVectorD F(plusVar.size()) ;; 2556 for (std::size_t j=0 ; j<plusVar.size() ; j++) {; 2557 F[j] = (plusVar[j]-minusVar[j]) * 0.5;; 2558 }; 2559 ; 2560 // Calculate error in linear approximation from variations and correlation coefficient; 2561 double sum = F*(C*F) ;; 2562 ; 2563 return sqrt(sum) ;; 2564}; 2565 ; 2566 ; 2567 ; 2568////////////////////////////////////////////////////////////////////////////////; 2569/// Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr.; 2570/// \param[in] frame RooPlot to plot on; 2571/// \param[in] fr The RooFitResult, where errors can be extracted; 2572/// \param[in] Z The desired significance (width) of the error band; 2573/// \param[in] params If non-zero, consider only the subset of the parameters in fr for the error evaluation; 2574/// \param[in] argList Optional `RooCmdArg` that can be applied to a regular plotOn() operation; 2575/// \param[in] linMethod By default (linMethod=true), a linearized error is shown.; 2576/// \return The RooPlot the band was plotted on (for chaining of plotting commands).; 2577///; 2578/// The linearized error is calculated as follows:; 2579/// \f[; 2580/// \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; 2581/// \f]; 2582///; 2583/// where; 2584/// \f[; 2585/// F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; 2586/// \f]; 2587/// with \f$ f(x) \f$ the plotted curve and \f$ \mathrm{d}a \f$ taken from the fit result, and; 2588/// \f$ \mathrm{Corr}(a,a') \f$ = the correlation matrix from the fit result, and \f$ Z \f$ = requested signifance (\f$ Z \sigma \f$ band); 2589///; 2590/// The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters),",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:112983,Availability,error,error,112983,"d::sqrt(V(i,i)) ;; 2548 for (std::size_t j=i ; j<paramList.size() ; j++) {; 2549 C(i,j) = V(i,j) / std::sqrt(V(i,i)*V(j,j));; 2550 C(j,i) = C(i,j) ;; 2551 }; 2552 }; 2553 ; 2554 // Make std::vector of variations; 2555 TVectorD F(plusVar.size()) ;; 2556 for (std::size_t j=0 ; j<plusVar.size() ; j++) {; 2557 F[j] = (plusVar[j]-minusVar[j]) * 0.5;; 2558 }; 2559 ; 2560 // Calculate error in linear approximation from variations and correlation coefficient; 2561 double sum = F*(C*F) ;; 2562 ; 2563 return sqrt(sum) ;; 2564}; 2565 ; 2566 ; 2567 ; 2568////////////////////////////////////////////////////////////////////////////////; 2569/// Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr.; 2570/// \param[in] frame RooPlot to plot on; 2571/// \param[in] fr The RooFitResult, where errors can be extracted; 2572/// \param[in] Z The desired significance (width) of the error band; 2573/// \param[in] params If non-zero, consider only the subset of the parameters in fr for the error evaluation; 2574/// \param[in] argList Optional `RooCmdArg` that can be applied to a regular plotOn() operation; 2575/// \param[in] linMethod By default (linMethod=true), a linearized error is shown.; 2576/// \return The RooPlot the band was plotted on (for chaining of plotting commands).; 2577///; 2578/// The linearized error is calculated as follows:; 2579/// \f[; 2580/// \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; 2581/// \f]; 2582///; 2583/// where; 2584/// \f[; 2585/// F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; 2586/// \f]; 2587/// with \f$ f(x) \f$ the plotted curve and \f$ \mathrm{d}a \f$ taken from the fit result, and; 2588/// \f$ \mathrm{Corr}(a,a') \f$ = the correlation matrix from the fit result, and \f$ Z \f$ = requested signifance (\f$ Z \sigma \f$ band); 2589///; 2590/// The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters),",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:113122,Availability,error,error,113122,"uncertainty encoded in the given fit result fr.; 2570/// \param[in] frame RooPlot to plot on; 2571/// \param[in] fr The RooFitResult, where errors can be extracted; 2572/// \param[in] Z The desired significance (width) of the error band; 2573/// \param[in] params If non-zero, consider only the subset of the parameters in fr for the error evaluation; 2574/// \param[in] argList Optional `RooCmdArg` that can be applied to a regular plotOn() operation; 2575/// \param[in] linMethod By default (linMethod=true), a linearized error is shown.; 2576/// \return The RooPlot the band was plotted on (for chaining of plotting commands).; 2577///; 2578/// The linearized error is calculated as follows:; 2579/// \f[; 2580/// \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; 2581/// \f]; 2582///; 2583/// where; 2584/// \f[; 2585/// F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; 2586/// \f]; 2587/// with \f$ f(x) \f$ the plotted curve and \f$ \mathrm{d}a \f$ taken from the fit result, and; 2588/// \f$ \mathrm{Corr}(a,a') \f$ = the correlation matrix from the fit result, and \f$ Z \f$ = requested signifance (\f$ Z \sigma \f$ band); 2589///; 2590/// The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may; 2591/// not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; 2592///; 2593/// Alternatively, a more robust error is calculated using a sampling method. In this method a number of curves; 2594/// is calculated with variations of the parameter values, as drawn from a multi-variate Gaussian p.d.f. that is constructed; 2595/// from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations; 2596/// for each value of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen to be such; 2597/// that at least 30 curves ar",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:113184,Availability,error,error,113184,"uncertainty encoded in the given fit result fr.; 2570/// \param[in] frame RooPlot to plot on; 2571/// \param[in] fr The RooFitResult, where errors can be extracted; 2572/// \param[in] Z The desired significance (width) of the error band; 2573/// \param[in] params If non-zero, consider only the subset of the parameters in fr for the error evaluation; 2574/// \param[in] argList Optional `RooCmdArg` that can be applied to a regular plotOn() operation; 2575/// \param[in] linMethod By default (linMethod=true), a linearized error is shown.; 2576/// \return The RooPlot the band was plotted on (for chaining of plotting commands).; 2577///; 2578/// The linearized error is calculated as follows:; 2579/// \f[; 2580/// \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; 2581/// \f]; 2582///; 2583/// where; 2584/// \f[; 2585/// F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; 2586/// \f]; 2587/// with \f$ f(x) \f$ the plotted curve and \f$ \mathrm{d}a \f$ taken from the fit result, and; 2588/// \f$ \mathrm{Corr}(a,a') \f$ = the correlation matrix from the fit result, and \f$ Z \f$ = requested signifance (\f$ Z \sigma \f$ band); 2589///; 2590/// The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may; 2591/// not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; 2592///; 2593/// Alternatively, a more robust error is calculated using a sampling method. In this method a number of curves; 2594/// is calculated with variations of the parameter values, as drawn from a multi-variate Gaussian p.d.f. that is constructed; 2595/// from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations; 2596/// for each value of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen to be such; 2597/// that at least 30 curves ar",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:113931,Availability,robust,robust,113931,"tion; 2575/// \param[in] linMethod By default (linMethod=true), a linearized error is shown.; 2576/// \return The RooPlot the band was plotted on (for chaining of plotting commands).; 2577///; 2578/// The linearized error is calculated as follows:; 2579/// \f[; 2580/// \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; 2581/// \f]; 2582///; 2583/// where; 2584/// \f[; 2585/// F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; 2586/// \f]; 2587/// with \f$ f(x) \f$ the plotted curve and \f$ \mathrm{d}a \f$ taken from the fit result, and; 2588/// \f$ \mathrm{Corr}(a,a') \f$ = the correlation matrix from the fit result, and \f$ Z \f$ = requested signifance (\f$ Z \sigma \f$ band); 2589///; 2590/// The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may; 2591/// not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; 2592///; 2593/// Alternatively, a more robust error is calculated using a sampling method. In this method a number of curves; 2594/// is calculated with variations of the parameter values, as drawn from a multi-variate Gaussian p.d.f. that is constructed; 2595/// from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations; 2596/// for each value of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen to be such; 2597/// that at least 30 curves are expected to be outside the N% interval, and is minimally 100 (e.g. Z=1->Ncurve=100, Z=2->Ncurve=659, Z=3->Ncurve=11111); 2598/// Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much); 2599/// longer to calculate.; 2600 ; 2601RooPlot* RooAbsReal::plotOnWithErrorBand(RooPlot* frame,const RooFitResult& fr, double Z,const RooArgSet* params, const RooLinkedList& ar",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:113938,Availability,error,error,113938,"tion; 2575/// \param[in] linMethod By default (linMethod=true), a linearized error is shown.; 2576/// \return The RooPlot the band was plotted on (for chaining of plotting commands).; 2577///; 2578/// The linearized error is calculated as follows:; 2579/// \f[; 2580/// \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; 2581/// \f]; 2582///; 2583/// where; 2584/// \f[; 2585/// F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; 2586/// \f]; 2587/// with \f$ f(x) \f$ the plotted curve and \f$ \mathrm{d}a \f$ taken from the fit result, and; 2588/// \f$ \mathrm{Corr}(a,a') \f$ = the correlation matrix from the fit result, and \f$ Z \f$ = requested signifance (\f$ Z \sigma \f$ band); 2589///; 2590/// The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may; 2591/// not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; 2592///; 2593/// Alternatively, a more robust error is calculated using a sampling method. In this method a number of curves; 2594/// is calculated with variations of the parameter values, as drawn from a multi-variate Gaussian p.d.f. that is constructed; 2595/// from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations; 2596/// for each value of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen to be such; 2597/// that at least 30 curves are expected to be outside the N% interval, and is minimally 100 (e.g. Z=1->Ncurve=100, Z=2->Ncurve=659, Z=3->Ncurve=11111); 2598/// Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much); 2599/// longer to calculate.; 2600 ; 2601RooPlot* RooAbsReal::plotOnWithErrorBand(RooPlot* frame,const RooFitResult& fr, double Z,const RooArgSet* params, const RooLinkedList& ar",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:114200,Availability,error,error,114200,"/; 2583/// where; 2584/// \f[; 2585/// F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; 2586/// \f]; 2587/// with \f$ f(x) \f$ the plotted curve and \f$ \mathrm{d}a \f$ taken from the fit result, and; 2588/// \f$ \mathrm{Corr}(a,a') \f$ = the correlation matrix from the fit result, and \f$ Z \f$ = requested signifance (\f$ Z \sigma \f$ band); 2589///; 2590/// The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may; 2591/// not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; 2592///; 2593/// Alternatively, a more robust error is calculated using a sampling method. In this method a number of curves; 2594/// is calculated with variations of the parameter values, as drawn from a multi-variate Gaussian p.d.f. that is constructed; 2595/// from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations; 2596/// for each value of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen to be such; 2597/// that at least 30 curves are expected to be outside the N% interval, and is minimally 100 (e.g. Z=1->Ncurve=100, Z=2->Ncurve=659, Z=3->Ncurve=11111); 2598/// Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much); 2599/// longer to calculate.; 2600 ; 2601RooPlot* RooAbsReal::plotOnWithErrorBand(RooPlot* frame,const RooFitResult& fr, double Z,const RooArgSet* params, const RooLinkedList& argList, bool linMethod) const; 2602{; 2603 RooLinkedList plotArgListTmp(argList) ;; 2604 RooCmdConfig::stripCmdList(plotArgListTmp,""VisualizeError,MoveToBack"") ;; 2605 ; 2606 // Strip any 'internal normalization' arguments from list; 2607 RooLinkedList plotArgList ;; 2608 for (auto * cmd : static_range_cast<RooCmdArg*>(plotArgListTmp)) {; 2609 if (std::string(""Normal",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:116146,Availability,avail,available,116146,"d::string(""Normalization"")==cmd->GetName()) {; 2610 if (((RooCmdArg*)cmd)->getInt(1)!=0) {; 2611 } else {; 2612 plotArgList.Add(cmd) ;; 2613 }; 2614 } else {; 2615 plotArgList.Add(cmd) ;; 2616 }; 2617 }; 2618 ; 2619 // Function to plot a single curve, creating a copy of the plotArgList to; 2620 // pass as plot command arguments. The ""FillColor"" command is removed because; 2621 // it has no effect on plotting single curves and would cause a warning.; 2622 auto plotFunc = [&](RooAbsReal const& absReal) {; 2623 RooLinkedList tmp(plotArgList) ;; 2624 RooCmdConfig::stripCmdList(tmp, ""FillColor"");; 2625 absReal.plotOn(frame, tmp);; 2626 };; 2627 ; 2628 // Generate central value curve; 2629 plotFunc(*this);; 2630 RooCurve* cenCurve = frame->getCurve() ;; 2631 if(!cenCurve){; 2632 coutE(Plotting) << ClassName() << ""::"" << GetName() << "":plotOnWithErrorBand: no curve for central value available"" << std::endl;; 2633 return frame;; 2634 }; 2635 frame->remove(nullptr,false) ;; 2636 ; 2637 RooCurve* band(nullptr) ;; 2638 if (!linMethod) {; 2639 ; 2640 // *** Interval method ***; 2641 //; 2642 // Make N variations of parameters samples from V and visualize N% central interval where N% is defined from Z; 2643 ; 2644 // Clone self for internal use; 2645 RooAbsReal* cloneFunc = static_cast<RooAbsReal*>(cloneTree()) ;; 2646 RooArgSet cloneParams;; 2647 cloneFunc->getObservables(&fr.floatParsFinal(), cloneParams) ;; 2648 RooArgSet errorParams{cloneParams};; 2649 if(params) {; 2650 // clear and fill errorParams only with parameters that both in params and cloneParams; 2651 cloneParams.selectCommon(*params, errorParams);; 2652 }; 2653 ; 2654 // Generate 100 random parameter points distributed according to fit result covariance matrix; 2655 RooAbsPdf* paramPdf = fr.createHessePdf(errorParams) ;; 2656 Int_t n = Int_t(100./TMath::Erfc(Z/sqrt(2.))) ;; 2657 if (n<100) n=100 ;; 2658 ; 2659 coutI(Plotting) << ""RooAbsReal::plotOn("" << GetName() << "") INFO: visualizing "" << Z << ""-sigma uncertai",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:116693,Availability,error,errorParams,116693," const& absReal) {; 2623 RooLinkedList tmp(plotArgList) ;; 2624 RooCmdConfig::stripCmdList(tmp, ""FillColor"");; 2625 absReal.plotOn(frame, tmp);; 2626 };; 2627 ; 2628 // Generate central value curve; 2629 plotFunc(*this);; 2630 RooCurve* cenCurve = frame->getCurve() ;; 2631 if(!cenCurve){; 2632 coutE(Plotting) << ClassName() << ""::"" << GetName() << "":plotOnWithErrorBand: no curve for central value available"" << std::endl;; 2633 return frame;; 2634 }; 2635 frame->remove(nullptr,false) ;; 2636 ; 2637 RooCurve* band(nullptr) ;; 2638 if (!linMethod) {; 2639 ; 2640 // *** Interval method ***; 2641 //; 2642 // Make N variations of parameters samples from V and visualize N% central interval where N% is defined from Z; 2643 ; 2644 // Clone self for internal use; 2645 RooAbsReal* cloneFunc = static_cast<RooAbsReal*>(cloneTree()) ;; 2646 RooArgSet cloneParams;; 2647 cloneFunc->getObservables(&fr.floatParsFinal(), cloneParams) ;; 2648 RooArgSet errorParams{cloneParams};; 2649 if(params) {; 2650 // clear and fill errorParams only with parameters that both in params and cloneParams; 2651 cloneParams.selectCommon(*params, errorParams);; 2652 }; 2653 ; 2654 // Generate 100 random parameter points distributed according to fit result covariance matrix; 2655 RooAbsPdf* paramPdf = fr.createHessePdf(errorParams) ;; 2656 Int_t n = Int_t(100./TMath::Erfc(Z/sqrt(2.))) ;; 2657 if (n<100) n=100 ;; 2658 ; 2659 coutI(Plotting) << ""RooAbsReal::plotOn("" << GetName() << "") INFO: visualizing "" << Z << ""-sigma uncertainties in parameters ""; 2660 << errorParams << "" from fit result "" << fr.GetName() << "" using "" << n << "" samplings."" << std::endl ;; 2661 ; 2662 // Generate variation curves with above set of parameter values; 2663 double ymin = frame->GetMinimum() ;; 2664 double ymax = frame->GetMaximum() ;; 2665 std::unique_ptr<RooDataSet> generatedData{paramPdf->generate(errorParams,n)};; 2666 std::vector<RooCurve*> cvec ;; 2667 for (int i=0 ; i<generatedData->numEntries() ; i++) {; 2668 cloneParams",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:116762,Availability,error,errorParams,116762," const& absReal) {; 2623 RooLinkedList tmp(plotArgList) ;; 2624 RooCmdConfig::stripCmdList(tmp, ""FillColor"");; 2625 absReal.plotOn(frame, tmp);; 2626 };; 2627 ; 2628 // Generate central value curve; 2629 plotFunc(*this);; 2630 RooCurve* cenCurve = frame->getCurve() ;; 2631 if(!cenCurve){; 2632 coutE(Plotting) << ClassName() << ""::"" << GetName() << "":plotOnWithErrorBand: no curve for central value available"" << std::endl;; 2633 return frame;; 2634 }; 2635 frame->remove(nullptr,false) ;; 2636 ; 2637 RooCurve* band(nullptr) ;; 2638 if (!linMethod) {; 2639 ; 2640 // *** Interval method ***; 2641 //; 2642 // Make N variations of parameters samples from V and visualize N% central interval where N% is defined from Z; 2643 ; 2644 // Clone self for internal use; 2645 RooAbsReal* cloneFunc = static_cast<RooAbsReal*>(cloneTree()) ;; 2646 RooArgSet cloneParams;; 2647 cloneFunc->getObservables(&fr.floatParsFinal(), cloneParams) ;; 2648 RooArgSet errorParams{cloneParams};; 2649 if(params) {; 2650 // clear and fill errorParams only with parameters that both in params and cloneParams; 2651 cloneParams.selectCommon(*params, errorParams);; 2652 }; 2653 ; 2654 // Generate 100 random parameter points distributed according to fit result covariance matrix; 2655 RooAbsPdf* paramPdf = fr.createHessePdf(errorParams) ;; 2656 Int_t n = Int_t(100./TMath::Erfc(Z/sqrt(2.))) ;; 2657 if (n<100) n=100 ;; 2658 ; 2659 coutI(Plotting) << ""RooAbsReal::plotOn("" << GetName() << "") INFO: visualizing "" << Z << ""-sigma uncertainties in parameters ""; 2660 << errorParams << "" from fit result "" << fr.GetName() << "" using "" << n << "" samplings."" << std::endl ;; 2661 ; 2662 // Generate variation curves with above set of parameter values; 2663 double ymin = frame->GetMinimum() ;; 2664 double ymax = frame->GetMaximum() ;; 2665 std::unique_ptr<RooDataSet> generatedData{paramPdf->generate(errorParams,n)};; 2666 std::vector<RooCurve*> cvec ;; 2667 for (int i=0 ; i<generatedData->numEntries() ; i++) {; 2668 cloneParams",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:116871,Availability,error,errorParams,116871,"rve; 2629 plotFunc(*this);; 2630 RooCurve* cenCurve = frame->getCurve() ;; 2631 if(!cenCurve){; 2632 coutE(Plotting) << ClassName() << ""::"" << GetName() << "":plotOnWithErrorBand: no curve for central value available"" << std::endl;; 2633 return frame;; 2634 }; 2635 frame->remove(nullptr,false) ;; 2636 ; 2637 RooCurve* band(nullptr) ;; 2638 if (!linMethod) {; 2639 ; 2640 // *** Interval method ***; 2641 //; 2642 // Make N variations of parameters samples from V and visualize N% central interval where N% is defined from Z; 2643 ; 2644 // Clone self for internal use; 2645 RooAbsReal* cloneFunc = static_cast<RooAbsReal*>(cloneTree()) ;; 2646 RooArgSet cloneParams;; 2647 cloneFunc->getObservables(&fr.floatParsFinal(), cloneParams) ;; 2648 RooArgSet errorParams{cloneParams};; 2649 if(params) {; 2650 // clear and fill errorParams only with parameters that both in params and cloneParams; 2651 cloneParams.selectCommon(*params, errorParams);; 2652 }; 2653 ; 2654 // Generate 100 random parameter points distributed according to fit result covariance matrix; 2655 RooAbsPdf* paramPdf = fr.createHessePdf(errorParams) ;; 2656 Int_t n = Int_t(100./TMath::Erfc(Z/sqrt(2.))) ;; 2657 if (n<100) n=100 ;; 2658 ; 2659 coutI(Plotting) << ""RooAbsReal::plotOn("" << GetName() << "") INFO: visualizing "" << Z << ""-sigma uncertainties in parameters ""; 2660 << errorParams << "" from fit result "" << fr.GetName() << "" using "" << n << "" samplings."" << std::endl ;; 2661 ; 2662 // Generate variation curves with above set of parameter values; 2663 double ymin = frame->GetMinimum() ;; 2664 double ymax = frame->GetMaximum() ;; 2665 std::unique_ptr<RooDataSet> generatedData{paramPdf->generate(errorParams,n)};; 2666 std::vector<RooCurve*> cvec ;; 2667 for (int i=0 ; i<generatedData->numEntries() ; i++) {; 2668 cloneParams.assign(*generatedData->get(i)) ;; 2669 plotFunc(*cloneFunc);; 2670 cvec.push_back(frame->getCurve()) ;; 2671 frame->remove(nullptr,false) ;; 2672 }; 2673 frame->SetMinimum(ymin) ;; 2674 frame-",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:117046,Availability,error,errorParams,117046," ClassName() << ""::"" << GetName() << "":plotOnWithErrorBand: no curve for central value available"" << std::endl;; 2633 return frame;; 2634 }; 2635 frame->remove(nullptr,false) ;; 2636 ; 2637 RooCurve* band(nullptr) ;; 2638 if (!linMethod) {; 2639 ; 2640 // *** Interval method ***; 2641 //; 2642 // Make N variations of parameters samples from V and visualize N% central interval where N% is defined from Z; 2643 ; 2644 // Clone self for internal use; 2645 RooAbsReal* cloneFunc = static_cast<RooAbsReal*>(cloneTree()) ;; 2646 RooArgSet cloneParams;; 2647 cloneFunc->getObservables(&fr.floatParsFinal(), cloneParams) ;; 2648 RooArgSet errorParams{cloneParams};; 2649 if(params) {; 2650 // clear and fill errorParams only with parameters that both in params and cloneParams; 2651 cloneParams.selectCommon(*params, errorParams);; 2652 }; 2653 ; 2654 // Generate 100 random parameter points distributed according to fit result covariance matrix; 2655 RooAbsPdf* paramPdf = fr.createHessePdf(errorParams) ;; 2656 Int_t n = Int_t(100./TMath::Erfc(Z/sqrt(2.))) ;; 2657 if (n<100) n=100 ;; 2658 ; 2659 coutI(Plotting) << ""RooAbsReal::plotOn("" << GetName() << "") INFO: visualizing "" << Z << ""-sigma uncertainties in parameters ""; 2660 << errorParams << "" from fit result "" << fr.GetName() << "" using "" << n << "" samplings."" << std::endl ;; 2661 ; 2662 // Generate variation curves with above set of parameter values; 2663 double ymin = frame->GetMinimum() ;; 2664 double ymax = frame->GetMaximum() ;; 2665 std::unique_ptr<RooDataSet> generatedData{paramPdf->generate(errorParams,n)};; 2666 std::vector<RooCurve*> cvec ;; 2667 for (int i=0 ; i<generatedData->numEntries() ; i++) {; 2668 cloneParams.assign(*generatedData->get(i)) ;; 2669 plotFunc(*cloneFunc);; 2670 cvec.push_back(frame->getCurve()) ;; 2671 frame->remove(nullptr,false) ;; 2672 }; 2673 frame->SetMinimum(ymin) ;; 2674 frame->SetMaximum(ymax) ;; 2675 ; 2676 ; 2677 // Generate upper and lower curve points from 68% interval around each point of",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:117288,Availability,error,errorParams,117288,"nullptr,false) ;; 2636 ; 2637 RooCurve* band(nullptr) ;; 2638 if (!linMethod) {; 2639 ; 2640 // *** Interval method ***; 2641 //; 2642 // Make N variations of parameters samples from V and visualize N% central interval where N% is defined from Z; 2643 ; 2644 // Clone self for internal use; 2645 RooAbsReal* cloneFunc = static_cast<RooAbsReal*>(cloneTree()) ;; 2646 RooArgSet cloneParams;; 2647 cloneFunc->getObservables(&fr.floatParsFinal(), cloneParams) ;; 2648 RooArgSet errorParams{cloneParams};; 2649 if(params) {; 2650 // clear and fill errorParams only with parameters that both in params and cloneParams; 2651 cloneParams.selectCommon(*params, errorParams);; 2652 }; 2653 ; 2654 // Generate 100 random parameter points distributed according to fit result covariance matrix; 2655 RooAbsPdf* paramPdf = fr.createHessePdf(errorParams) ;; 2656 Int_t n = Int_t(100./TMath::Erfc(Z/sqrt(2.))) ;; 2657 if (n<100) n=100 ;; 2658 ; 2659 coutI(Plotting) << ""RooAbsReal::plotOn("" << GetName() << "") INFO: visualizing "" << Z << ""-sigma uncertainties in parameters ""; 2660 << errorParams << "" from fit result "" << fr.GetName() << "" using "" << n << "" samplings."" << std::endl ;; 2661 ; 2662 // Generate variation curves with above set of parameter values; 2663 double ymin = frame->GetMinimum() ;; 2664 double ymax = frame->GetMaximum() ;; 2665 std::unique_ptr<RooDataSet> generatedData{paramPdf->generate(errorParams,n)};; 2666 std::vector<RooCurve*> cvec ;; 2667 for (int i=0 ; i<generatedData->numEntries() ; i++) {; 2668 cloneParams.assign(*generatedData->get(i)) ;; 2669 plotFunc(*cloneFunc);; 2670 cvec.push_back(frame->getCurve()) ;; 2671 frame->remove(nullptr,false) ;; 2672 }; 2673 frame->SetMinimum(ymin) ;; 2674 frame->SetMaximum(ymax) ;; 2675 ; 2676 ; 2677 // Generate upper and lower curve points from 68% interval around each point of central curve; 2678 band = cenCurve->makeErrorBand(cvec,Z) ;; 2679 ; 2680 // Cleanup; 2681 delete paramPdf ;; 2682 delete cloneFunc ;; 2683 for (std::vector<Ro",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:117617,Availability,error,errorParams,117617,"l*>(cloneTree()) ;; 2646 RooArgSet cloneParams;; 2647 cloneFunc->getObservables(&fr.floatParsFinal(), cloneParams) ;; 2648 RooArgSet errorParams{cloneParams};; 2649 if(params) {; 2650 // clear and fill errorParams only with parameters that both in params and cloneParams; 2651 cloneParams.selectCommon(*params, errorParams);; 2652 }; 2653 ; 2654 // Generate 100 random parameter points distributed according to fit result covariance matrix; 2655 RooAbsPdf* paramPdf = fr.createHessePdf(errorParams) ;; 2656 Int_t n = Int_t(100./TMath::Erfc(Z/sqrt(2.))) ;; 2657 if (n<100) n=100 ;; 2658 ; 2659 coutI(Plotting) << ""RooAbsReal::plotOn("" << GetName() << "") INFO: visualizing "" << Z << ""-sigma uncertainties in parameters ""; 2660 << errorParams << "" from fit result "" << fr.GetName() << "" using "" << n << "" samplings."" << std::endl ;; 2661 ; 2662 // Generate variation curves with above set of parameter values; 2663 double ymin = frame->GetMinimum() ;; 2664 double ymax = frame->GetMaximum() ;; 2665 std::unique_ptr<RooDataSet> generatedData{paramPdf->generate(errorParams,n)};; 2666 std::vector<RooCurve*> cvec ;; 2667 for (int i=0 ; i<generatedData->numEntries() ; i++) {; 2668 cloneParams.assign(*generatedData->get(i)) ;; 2669 plotFunc(*cloneFunc);; 2670 cvec.push_back(frame->getCurve()) ;; 2671 frame->remove(nullptr,false) ;; 2672 }; 2673 frame->SetMinimum(ymin) ;; 2674 frame->SetMaximum(ymax) ;; 2675 ; 2676 ; 2677 // Generate upper and lower curve points from 68% interval around each point of central curve; 2678 band = cenCurve->makeErrorBand(cvec,Z) ;; 2679 ; 2680 // Cleanup; 2681 delete paramPdf ;; 2682 delete cloneFunc ;; 2683 for (std::vector<RooCurve*>::iterator i=cvec.begin() ; i!=cvec.end() ; ++i) {; 2684 delete (*i) ;; 2685 }; 2686 ; 2687 } else {; 2688 ; 2689 // *** Linear Method ***; 2690 //; 2691 // Make a one-sigma up- and down fluctation for each parameter and visualize; 2692 // a from a linearized calculation as follows; 2693 //; 2694 // error(x) = F(a) C_aa' F(a'); 269",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:118409,Availability,down,down,118409,">GetMaximum() ;; 2665 std::unique_ptr<RooDataSet> generatedData{paramPdf->generate(errorParams,n)};; 2666 std::vector<RooCurve*> cvec ;; 2667 for (int i=0 ; i<generatedData->numEntries() ; i++) {; 2668 cloneParams.assign(*generatedData->get(i)) ;; 2669 plotFunc(*cloneFunc);; 2670 cvec.push_back(frame->getCurve()) ;; 2671 frame->remove(nullptr,false) ;; 2672 }; 2673 frame->SetMinimum(ymin) ;; 2674 frame->SetMaximum(ymax) ;; 2675 ; 2676 ; 2677 // Generate upper and lower curve points from 68% interval around each point of central curve; 2678 band = cenCurve->makeErrorBand(cvec,Z) ;; 2679 ; 2680 // Cleanup; 2681 delete paramPdf ;; 2682 delete cloneFunc ;; 2683 for (std::vector<RooCurve*>::iterator i=cvec.begin() ; i!=cvec.end() ; ++i) {; 2684 delete (*i) ;; 2685 }; 2686 ; 2687 } else {; 2688 ; 2689 // *** Linear Method ***; 2690 //; 2691 // Make a one-sigma up- and down fluctation for each parameter and visualize; 2692 // a from a linearized calculation as follows; 2693 //; 2694 // error(x) = F(a) C_aa' F(a'); 2695 //; 2696 // Where F(a) = (f(x,a+da) - f(x,a-da))/2; 2697 // and C_aa' is the correlation matrix; 2698 ; 2699 // Strip out parameters with zero error; 2700 RooArgList fpf_stripped;; 2701 for (auto const* frv : static_range_cast<RooRealVar*>(fr.floatParsFinal())) {; 2702 if (frv->getError() > frv->getVal() * std::numeric_limits<double>::epsilon()) {; 2703 fpf_stripped.add(*frv);; 2704 }; 2705 }; 2706 ; 2707 // Clone self for internal use; 2708 RooAbsReal* cloneFunc = static_cast<RooAbsReal*>(cloneTree()) ;; 2709 RooArgSet cloneParams;; 2710 cloneFunc->getObservables(&fpf_stripped, cloneParams) ;; 2711 RooArgSet errorParams{cloneParams};; 2712 if(params) {; 2713 // clear and fill errorParams only with parameters that both in params and cloneParams; 2714 cloneParams.selectCommon(*params, errorParams);; 2715 }; 2716 ; 2717 ; 2718 // Make list of parameter instances of cloneFunc in order of error matrix; 2719 RooArgList paramList ;; 2720 const RooArgList& fpf = fr",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:118528,Availability,error,error,118528,">GetMaximum() ;; 2665 std::unique_ptr<RooDataSet> generatedData{paramPdf->generate(errorParams,n)};; 2666 std::vector<RooCurve*> cvec ;; 2667 for (int i=0 ; i<generatedData->numEntries() ; i++) {; 2668 cloneParams.assign(*generatedData->get(i)) ;; 2669 plotFunc(*cloneFunc);; 2670 cvec.push_back(frame->getCurve()) ;; 2671 frame->remove(nullptr,false) ;; 2672 }; 2673 frame->SetMinimum(ymin) ;; 2674 frame->SetMaximum(ymax) ;; 2675 ; 2676 ; 2677 // Generate upper and lower curve points from 68% interval around each point of central curve; 2678 band = cenCurve->makeErrorBand(cvec,Z) ;; 2679 ; 2680 // Cleanup; 2681 delete paramPdf ;; 2682 delete cloneFunc ;; 2683 for (std::vector<RooCurve*>::iterator i=cvec.begin() ; i!=cvec.end() ; ++i) {; 2684 delete (*i) ;; 2685 }; 2686 ; 2687 } else {; 2688 ; 2689 // *** Linear Method ***; 2690 //; 2691 // Make a one-sigma up- and down fluctation for each parameter and visualize; 2692 // a from a linearized calculation as follows; 2693 //; 2694 // error(x) = F(a) C_aa' F(a'); 2695 //; 2696 // Where F(a) = (f(x,a+da) - f(x,a-da))/2; 2697 // and C_aa' is the correlation matrix; 2698 ; 2699 // Strip out parameters with zero error; 2700 RooArgList fpf_stripped;; 2701 for (auto const* frv : static_range_cast<RooRealVar*>(fr.floatParsFinal())) {; 2702 if (frv->getError() > frv->getVal() * std::numeric_limits<double>::epsilon()) {; 2703 fpf_stripped.add(*frv);; 2704 }; 2705 }; 2706 ; 2707 // Clone self for internal use; 2708 RooAbsReal* cloneFunc = static_cast<RooAbsReal*>(cloneTree()) ;; 2709 RooArgSet cloneParams;; 2710 cloneFunc->getObservables(&fpf_stripped, cloneParams) ;; 2711 RooArgSet errorParams{cloneParams};; 2712 if(params) {; 2713 // clear and fill errorParams only with parameters that both in params and cloneParams; 2714 cloneParams.selectCommon(*params, errorParams);; 2715 }; 2716 ; 2717 ; 2718 // Make list of parameter instances of cloneFunc in order of error matrix; 2719 RooArgList paramList ;; 2720 const RooArgList& fpf = fr",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:118705,Availability,error,error,118705,">GetMaximum() ;; 2665 std::unique_ptr<RooDataSet> generatedData{paramPdf->generate(errorParams,n)};; 2666 std::vector<RooCurve*> cvec ;; 2667 for (int i=0 ; i<generatedData->numEntries() ; i++) {; 2668 cloneParams.assign(*generatedData->get(i)) ;; 2669 plotFunc(*cloneFunc);; 2670 cvec.push_back(frame->getCurve()) ;; 2671 frame->remove(nullptr,false) ;; 2672 }; 2673 frame->SetMinimum(ymin) ;; 2674 frame->SetMaximum(ymax) ;; 2675 ; 2676 ; 2677 // Generate upper and lower curve points from 68% interval around each point of central curve; 2678 band = cenCurve->makeErrorBand(cvec,Z) ;; 2679 ; 2680 // Cleanup; 2681 delete paramPdf ;; 2682 delete cloneFunc ;; 2683 for (std::vector<RooCurve*>::iterator i=cvec.begin() ; i!=cvec.end() ; ++i) {; 2684 delete (*i) ;; 2685 }; 2686 ; 2687 } else {; 2688 ; 2689 // *** Linear Method ***; 2690 //; 2691 // Make a one-sigma up- and down fluctation for each parameter and visualize; 2692 // a from a linearized calculation as follows; 2693 //; 2694 // error(x) = F(a) C_aa' F(a'); 2695 //; 2696 // Where F(a) = (f(x,a+da) - f(x,a-da))/2; 2697 // and C_aa' is the correlation matrix; 2698 ; 2699 // Strip out parameters with zero error; 2700 RooArgList fpf_stripped;; 2701 for (auto const* frv : static_range_cast<RooRealVar*>(fr.floatParsFinal())) {; 2702 if (frv->getError() > frv->getVal() * std::numeric_limits<double>::epsilon()) {; 2703 fpf_stripped.add(*frv);; 2704 }; 2705 }; 2706 ; 2707 // Clone self for internal use; 2708 RooAbsReal* cloneFunc = static_cast<RooAbsReal*>(cloneTree()) ;; 2709 RooArgSet cloneParams;; 2710 cloneFunc->getObservables(&fpf_stripped, cloneParams) ;; 2711 RooArgSet errorParams{cloneParams};; 2712 if(params) {; 2713 // clear and fill errorParams only with parameters that both in params and cloneParams; 2714 cloneParams.selectCommon(*params, errorParams);; 2715 }; 2716 ; 2717 ; 2718 // Make list of parameter instances of cloneFunc in order of error matrix; 2719 RooArgList paramList ;; 2720 const RooArgList& fpf = fr",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:119179,Availability,error,errorParams,119179," // Cleanup; 2681 delete paramPdf ;; 2682 delete cloneFunc ;; 2683 for (std::vector<RooCurve*>::iterator i=cvec.begin() ; i!=cvec.end() ; ++i) {; 2684 delete (*i) ;; 2685 }; 2686 ; 2687 } else {; 2688 ; 2689 // *** Linear Method ***; 2690 //; 2691 // Make a one-sigma up- and down fluctation for each parameter and visualize; 2692 // a from a linearized calculation as follows; 2693 //; 2694 // error(x) = F(a) C_aa' F(a'); 2695 //; 2696 // Where F(a) = (f(x,a+da) - f(x,a-da))/2; 2697 // and C_aa' is the correlation matrix; 2698 ; 2699 // Strip out parameters with zero error; 2700 RooArgList fpf_stripped;; 2701 for (auto const* frv : static_range_cast<RooRealVar*>(fr.floatParsFinal())) {; 2702 if (frv->getError() > frv->getVal() * std::numeric_limits<double>::epsilon()) {; 2703 fpf_stripped.add(*frv);; 2704 }; 2705 }; 2706 ; 2707 // Clone self for internal use; 2708 RooAbsReal* cloneFunc = static_cast<RooAbsReal*>(cloneTree()) ;; 2709 RooArgSet cloneParams;; 2710 cloneFunc->getObservables(&fpf_stripped, cloneParams) ;; 2711 RooArgSet errorParams{cloneParams};; 2712 if(params) {; 2713 // clear and fill errorParams only with parameters that both in params and cloneParams; 2714 cloneParams.selectCommon(*params, errorParams);; 2715 }; 2716 ; 2717 ; 2718 // Make list of parameter instances of cloneFunc in order of error matrix; 2719 RooArgList paramList ;; 2720 const RooArgList& fpf = fr.floatParsFinal() ;; 2721 std::vector<int> fpf_idx ;; 2722 for (std::size_t i=0 ; i<fpf.size() ; i++) {; 2723 RooAbsArg* par = errorParams.find(fpf[i].GetName()) ;; 2724 if (par) {; 2725 paramList.add(*par) ;; 2726 fpf_idx.push_back(i) ;; 2727 }; 2728 }; 2729 ; 2730 std::vector<RooCurve *> plusVar;; 2731 std::vector<RooCurve *> minusVar;; 2732 ; 2733 // Create std::vector of plus,minus variations for each parameter; 2734 ; 2735 TMatrixDSym V(paramList.size() == fr.floatParsFinal().size() ?; 2736 fr.covarianceMatrix():; 2737 fr.reducedCovarianceMatrix(paramList)) ;; 2738 ; 2739 ; 2740 for (std",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:119248,Availability,error,errorParams,119248," // Cleanup; 2681 delete paramPdf ;; 2682 delete cloneFunc ;; 2683 for (std::vector<RooCurve*>::iterator i=cvec.begin() ; i!=cvec.end() ; ++i) {; 2684 delete (*i) ;; 2685 }; 2686 ; 2687 } else {; 2688 ; 2689 // *** Linear Method ***; 2690 //; 2691 // Make a one-sigma up- and down fluctation for each parameter and visualize; 2692 // a from a linearized calculation as follows; 2693 //; 2694 // error(x) = F(a) C_aa' F(a'); 2695 //; 2696 // Where F(a) = (f(x,a+da) - f(x,a-da))/2; 2697 // and C_aa' is the correlation matrix; 2698 ; 2699 // Strip out parameters with zero error; 2700 RooArgList fpf_stripped;; 2701 for (auto const* frv : static_range_cast<RooRealVar*>(fr.floatParsFinal())) {; 2702 if (frv->getError() > frv->getVal() * std::numeric_limits<double>::epsilon()) {; 2703 fpf_stripped.add(*frv);; 2704 }; 2705 }; 2706 ; 2707 // Clone self for internal use; 2708 RooAbsReal* cloneFunc = static_cast<RooAbsReal*>(cloneTree()) ;; 2709 RooArgSet cloneParams;; 2710 cloneFunc->getObservables(&fpf_stripped, cloneParams) ;; 2711 RooArgSet errorParams{cloneParams};; 2712 if(params) {; 2713 // clear and fill errorParams only with parameters that both in params and cloneParams; 2714 cloneParams.selectCommon(*params, errorParams);; 2715 }; 2716 ; 2717 ; 2718 // Make list of parameter instances of cloneFunc in order of error matrix; 2719 RooArgList paramList ;; 2720 const RooArgList& fpf = fr.floatParsFinal() ;; 2721 std::vector<int> fpf_idx ;; 2722 for (std::size_t i=0 ; i<fpf.size() ; i++) {; 2723 RooAbsArg* par = errorParams.find(fpf[i].GetName()) ;; 2724 if (par) {; 2725 paramList.add(*par) ;; 2726 fpf_idx.push_back(i) ;; 2727 }; 2728 }; 2729 ; 2730 std::vector<RooCurve *> plusVar;; 2731 std::vector<RooCurve *> minusVar;; 2732 ; 2733 // Create std::vector of plus,minus variations for each parameter; 2734 ; 2735 TMatrixDSym V(paramList.size() == fr.floatParsFinal().size() ?; 2736 fr.covarianceMatrix():; 2737 fr.reducedCovarianceMatrix(paramList)) ;; 2738 ; 2739 ; 2740 for (std",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:119357,Availability,error,errorParams,119357,"arameter and visualize; 2692 // a from a linearized calculation as follows; 2693 //; 2694 // error(x) = F(a) C_aa' F(a'); 2695 //; 2696 // Where F(a) = (f(x,a+da) - f(x,a-da))/2; 2697 // and C_aa' is the correlation matrix; 2698 ; 2699 // Strip out parameters with zero error; 2700 RooArgList fpf_stripped;; 2701 for (auto const* frv : static_range_cast<RooRealVar*>(fr.floatParsFinal())) {; 2702 if (frv->getError() > frv->getVal() * std::numeric_limits<double>::epsilon()) {; 2703 fpf_stripped.add(*frv);; 2704 }; 2705 }; 2706 ; 2707 // Clone self for internal use; 2708 RooAbsReal* cloneFunc = static_cast<RooAbsReal*>(cloneTree()) ;; 2709 RooArgSet cloneParams;; 2710 cloneFunc->getObservables(&fpf_stripped, cloneParams) ;; 2711 RooArgSet errorParams{cloneParams};; 2712 if(params) {; 2713 // clear and fill errorParams only with parameters that both in params and cloneParams; 2714 cloneParams.selectCommon(*params, errorParams);; 2715 }; 2716 ; 2717 ; 2718 // Make list of parameter instances of cloneFunc in order of error matrix; 2719 RooArgList paramList ;; 2720 const RooArgList& fpf = fr.floatParsFinal() ;; 2721 std::vector<int> fpf_idx ;; 2722 for (std::size_t i=0 ; i<fpf.size() ; i++) {; 2723 RooAbsArg* par = errorParams.find(fpf[i].GetName()) ;; 2724 if (par) {; 2725 paramList.add(*par) ;; 2726 fpf_idx.push_back(i) ;; 2727 }; 2728 }; 2729 ; 2730 std::vector<RooCurve *> plusVar;; 2731 std::vector<RooCurve *> minusVar;; 2732 ; 2733 // Create std::vector of plus,minus variations for each parameter; 2734 ; 2735 TMatrixDSym V(paramList.size() == fr.floatParsFinal().size() ?; 2736 fr.covarianceMatrix():; 2737 fr.reducedCovarianceMatrix(paramList)) ;; 2738 ; 2739 ; 2740 for (std::size_t ivar=0 ; ivar<paramList.size() ; ivar++) {; 2741 ; 2742 RooRealVar& rrv = static_cast<RooRealVar&>(fpf[fpf_idx[ivar]]) ;; 2743 ; 2744 double cenVal = rrv.getVal() ;; 2745 double errVal = sqrt(V(ivar,ivar)) ;; 2746 ; 2747 // Make Plus variation; 2748 (static_cast<RooRealVar*>(paramList.at(ivar",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:119460,Availability,error,error,119460,"arameter and visualize; 2692 // a from a linearized calculation as follows; 2693 //; 2694 // error(x) = F(a) C_aa' F(a'); 2695 //; 2696 // Where F(a) = (f(x,a+da) - f(x,a-da))/2; 2697 // and C_aa' is the correlation matrix; 2698 ; 2699 // Strip out parameters with zero error; 2700 RooArgList fpf_stripped;; 2701 for (auto const* frv : static_range_cast<RooRealVar*>(fr.floatParsFinal())) {; 2702 if (frv->getError() > frv->getVal() * std::numeric_limits<double>::epsilon()) {; 2703 fpf_stripped.add(*frv);; 2704 }; 2705 }; 2706 ; 2707 // Clone self for internal use; 2708 RooAbsReal* cloneFunc = static_cast<RooAbsReal*>(cloneTree()) ;; 2709 RooArgSet cloneParams;; 2710 cloneFunc->getObservables(&fpf_stripped, cloneParams) ;; 2711 RooArgSet errorParams{cloneParams};; 2712 if(params) {; 2713 // clear and fill errorParams only with parameters that both in params and cloneParams; 2714 cloneParams.selectCommon(*params, errorParams);; 2715 }; 2716 ; 2717 ; 2718 // Make list of parameter instances of cloneFunc in order of error matrix; 2719 RooArgList paramList ;; 2720 const RooArgList& fpf = fr.floatParsFinal() ;; 2721 std::vector<int> fpf_idx ;; 2722 for (std::size_t i=0 ; i<fpf.size() ; i++) {; 2723 RooAbsArg* par = errorParams.find(fpf[i].GetName()) ;; 2724 if (par) {; 2725 paramList.add(*par) ;; 2726 fpf_idx.push_back(i) ;; 2727 }; 2728 }; 2729 ; 2730 std::vector<RooCurve *> plusVar;; 2731 std::vector<RooCurve *> minusVar;; 2732 ; 2733 // Create std::vector of plus,minus variations for each parameter; 2734 ; 2735 TMatrixDSym V(paramList.size() == fr.floatParsFinal().size() ?; 2736 fr.covarianceMatrix():; 2737 fr.reducedCovarianceMatrix(paramList)) ;; 2738 ; 2739 ; 2740 for (std::size_t ivar=0 ; ivar<paramList.size() ; ivar++) {; 2741 ; 2742 RooRealVar& rrv = static_cast<RooRealVar&>(fpf[fpf_idx[ivar]]) ;; 2743 ; 2744 double cenVal = rrv.getVal() ;; 2745 double errVal = sqrt(V(ivar,ivar)) ;; 2746 ; 2747 // Make Plus variation; 2748 (static_cast<RooRealVar*>(paramList.at(ivar",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:119661,Availability,error,errorParams,119661,"ion matrix; 2698 ; 2699 // Strip out parameters with zero error; 2700 RooArgList fpf_stripped;; 2701 for (auto const* frv : static_range_cast<RooRealVar*>(fr.floatParsFinal())) {; 2702 if (frv->getError() > frv->getVal() * std::numeric_limits<double>::epsilon()) {; 2703 fpf_stripped.add(*frv);; 2704 }; 2705 }; 2706 ; 2707 // Clone self for internal use; 2708 RooAbsReal* cloneFunc = static_cast<RooAbsReal*>(cloneTree()) ;; 2709 RooArgSet cloneParams;; 2710 cloneFunc->getObservables(&fpf_stripped, cloneParams) ;; 2711 RooArgSet errorParams{cloneParams};; 2712 if(params) {; 2713 // clear and fill errorParams only with parameters that both in params and cloneParams; 2714 cloneParams.selectCommon(*params, errorParams);; 2715 }; 2716 ; 2717 ; 2718 // Make list of parameter instances of cloneFunc in order of error matrix; 2719 RooArgList paramList ;; 2720 const RooArgList& fpf = fr.floatParsFinal() ;; 2721 std::vector<int> fpf_idx ;; 2722 for (std::size_t i=0 ; i<fpf.size() ; i++) {; 2723 RooAbsArg* par = errorParams.find(fpf[i].GetName()) ;; 2724 if (par) {; 2725 paramList.add(*par) ;; 2726 fpf_idx.push_back(i) ;; 2727 }; 2728 }; 2729 ; 2730 std::vector<RooCurve *> plusVar;; 2731 std::vector<RooCurve *> minusVar;; 2732 ; 2733 // Create std::vector of plus,minus variations for each parameter; 2734 ; 2735 TMatrixDSym V(paramList.size() == fr.floatParsFinal().size() ?; 2736 fr.covarianceMatrix():; 2737 fr.reducedCovarianceMatrix(paramList)) ;; 2738 ; 2739 ; 2740 for (std::size_t ivar=0 ; ivar<paramList.size() ; ivar++) {; 2741 ; 2742 RooRealVar& rrv = static_cast<RooRealVar&>(fpf[fpf_idx[ivar]]) ;; 2743 ; 2744 double cenVal = rrv.getVal() ;; 2745 double errVal = sqrt(V(ivar,ivar)) ;; 2746 ; 2747 // Make Plus variation; 2748 (static_cast<RooRealVar*>(paramList.at(ivar)))->setVal(cenVal+Z*errVal) ;; 2749 ; 2750 ; 2751 plotFunc(*cloneFunc);; 2752 plusVar.push_back(frame->getCurve()) ;; 2753 frame->remove(nullptr,false) ;; 2754 ; 2755 ; 2756 // Make Minus variation; 2757 (static_",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:122701,Availability,error,error,122701,"Define configuration for this method; 2793 RooCmdConfig pc(""RooAbsPdf::plotOn("" + std::string(GetName()) + "")"");; 2794 pc.defineString(""drawOption"",""DrawOption"",0,""F"") ;; 2795 pc.defineString(""curveNameSuffix"",""CurveNameSuffix"",0,"""") ;; 2796 pc.defineInt(""lineColor"",""LineColor"",0,-999) ;; 2797 pc.defineInt(""lineStyle"",""LineStyle"",0,-999) ;; 2798 pc.defineInt(""lineWidth"",""LineWidth"",0,-999) ;; 2799 pc.defineInt(""markerColor"",""MarkerColor"",0,-999) ;; 2800 pc.defineInt(""markerStyle"",""MarkerStyle"",0,-999) ;; 2801 pc.defineDouble(""markerSize"",""MarkerSize"",0,-999) ;; 2802 pc.defineInt(""fillColor"",""FillColor"",0,-999) ;; 2803 pc.defineInt(""fillStyle"",""FillStyle"",0,-999) ;; 2804 pc.defineString(""curveName"",""Name"",0,"""") ;; 2805 pc.defineInt(""curveInvisible"",""Invisible"",0,0) ;; 2806 pc.defineInt(""moveToBack"",""MoveToBack"",0,0) ;; 2807 pc.allowUndefined() ;; 2808 ; 2809 // Process & check varargs; 2810 pc.process(argList) ;; 2811 if (!pc.ok(true)) {; 2812 return frame ;; 2813 }; 2814 ; 2815 // Insert error band in plot frame; 2816 frame->addPlotable(band,pc.getString(""drawOption""),pc.getInt(""curveInvisible"")) ;; 2817 ; 2818 // Optionally adjust line/fill attributes; 2819 Int_t lineColor = pc.getInt(""lineColor"") ;; 2820 Int_t lineStyle = pc.getInt(""lineStyle"") ;; 2821 Int_t lineWidth = pc.getInt(""lineWidth"") ;; 2822 Int_t markerColor = pc.getInt(""markerColor"") ;; 2823 Int_t markerStyle = pc.getInt(""markerStyle"") ;; 2824 Size_t markerSize = pc.getDouble(""markerSize"") ;; 2825 Int_t fillColor = pc.getInt(""fillColor"") ;; 2826 Int_t fillStyle = pc.getInt(""fillStyle"") ;; 2827 if (lineColor!=-999) frame->getAttLine()->SetLineColor(lineColor) ;; 2828 if (lineStyle!=-999) frame->getAttLine()->SetLineStyle(lineStyle) ;; 2829 if (lineWidth!=-999) frame->getAttLine()->SetLineWidth(lineWidth) ;; 2830 if (fillColor!=-999) frame->getAttFill()->SetFillColor(fillColor) ;; 2831 if (fillStyle!=-999) frame->getAttFill()->SetFillStyle(fillStyle) ;; 2832 if (markerColor!=-999) frame->getAttMarker()->S",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:146257,Availability,error,error,146257,"///////////////////////; 3368/// Interface function to force use of a given normalization range; 3369/// to interpret function value. Needed for functions or p.d.f.s; 3370/// whose shape depends on the choice of normalization such as; 3371/// RooAddPdf; 3372 ; 3373void RooAbsReal::selectNormalizationRange(const char*, bool); 3374{; 3375}; 3376 ; 3377 ; 3378 ; 3379////////////////////////////////////////////////////////////////////////////////; 3380/// Advertise capability to determine maximum value of function for given set of; 3381/// observables. If no direct generator method is provided, this information; 3382/// will assist the accept/reject generator to operate more efficiently as; 3383/// it can skip the initial trial sampling phase to empirically find the function; 3384/// maximum; 3385 ; 3386Int_t RooAbsReal::getMaxVal(const RooArgSet& /*vars*/) const; 3387{; 3388 return 0 ;; 3389}; 3390 ; 3391 ; 3392 ; 3393////////////////////////////////////////////////////////////////////////////////; 3394/// Return maximum value for set of observables identified by code assigned; 3395/// in getMaxVal; 3396 ; 3397double RooAbsReal::maxVal(Int_t /*code*/) const; 3398{; 3399 assert(1) ;; 3400 return 0 ;; 3401}; 3402 ; 3403 ; 3404 ; 3405////////////////////////////////////////////////////////////////////////////////; 3406/// Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream.; 3407 ; 3408void RooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString); 3409{; 3410 if (evalErrorData().mode == Ignore) {; 3411 return ;; 3412 }; 3413 ; 3414 if (evalErrorData().mode == CountErrors) {; 3415 evalErrorData().count++ ;; 3416 return ;; 3417 }; 3418 ; 3419 static bool inLogEvalError = false ;; 3420 ; 3421 if (inLogEvalError) {; 3422 return ;; 3423 }; 3424 inLogEvalError = true ;; 3425 ; 3426 EvalError ee ;; 3427 ee.setMessage(message) ;; 3428 ; 3429 if (serverVa",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:146317,Availability,error,error,146317,"///////////////////////; 3368/// Interface function to force use of a given normalization range; 3369/// to interpret function value. Needed for functions or p.d.f.s; 3370/// whose shape depends on the choice of normalization such as; 3371/// RooAddPdf; 3372 ; 3373void RooAbsReal::selectNormalizationRange(const char*, bool); 3374{; 3375}; 3376 ; 3377 ; 3378 ; 3379////////////////////////////////////////////////////////////////////////////////; 3380/// Advertise capability to determine maximum value of function for given set of; 3381/// observables. If no direct generator method is provided, this information; 3382/// will assist the accept/reject generator to operate more efficiently as; 3383/// it can skip the initial trial sampling phase to empirically find the function; 3384/// maximum; 3385 ; 3386Int_t RooAbsReal::getMaxVal(const RooArgSet& /*vars*/) const; 3387{; 3388 return 0 ;; 3389}; 3390 ; 3391 ; 3392 ; 3393////////////////////////////////////////////////////////////////////////////////; 3394/// Return maximum value for set of observables identified by code assigned; 3395/// in getMaxVal; 3396 ; 3397double RooAbsReal::maxVal(Int_t /*code*/) const; 3398{; 3399 assert(1) ;; 3400 return 0 ;; 3401}; 3402 ; 3403 ; 3404 ; 3405////////////////////////////////////////////////////////////////////////////////; 3406/// Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream.; 3407 ; 3408void RooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString); 3409{; 3410 if (evalErrorData().mode == Ignore) {; 3411 return ;; 3412 }; 3413 ; 3414 if (evalErrorData().mode == CountErrors) {; 3415 evalErrorData().count++ ;; 3416 return ;; 3417 }; 3418 ; 3419 static bool inLogEvalError = false ;; 3420 ; 3421 if (inLogEvalError) {; 3422 return ;; 3423 }; 3424 inLogEvalError = true ;; 3425 ; 3426 EvalError ee ;; 3427 ee.setMessage(message) ;; 3428 ; 3429 if (serverVa",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:147105,Availability,error,error,147105,"eturn 0 ;; 3401}; 3402 ; 3403 ; 3404 ; 3405////////////////////////////////////////////////////////////////////////////////; 3406/// Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream.; 3407 ; 3408void RooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString); 3409{; 3410 if (evalErrorData().mode == Ignore) {; 3411 return ;; 3412 }; 3413 ; 3414 if (evalErrorData().mode == CountErrors) {; 3415 evalErrorData().count++ ;; 3416 return ;; 3417 }; 3418 ; 3419 static bool inLogEvalError = false ;; 3420 ; 3421 if (inLogEvalError) {; 3422 return ;; 3423 }; 3424 inLogEvalError = true ;; 3425 ; 3426 EvalError ee ;; 3427 ee.setMessage(message) ;; 3428 ; 3429 if (serverValueString) {; 3430 ee.setServerValues(serverValueString) ;; 3431 }; 3432 ; 3433 if (evalErrorData().mode == PrintErrors) {; 3434 oocoutE(nullptr,Eval) << ""RooAbsReal::logEvalError("" << ""<STATIC>"" << "") evaluation error, "" << std::endl; 3435 << "" origin : "" << origName << std::endl; 3436 << "" message : "" << ee._msg << std::endl; 3437 << "" server values: "" << ee._srvval << std::endl ;; 3438 } else if (evalErrorData().mode == CollectErrors) {; 3439 auto &evalErrorList = evalErrorData().errorList[originator];; 3440 evalErrorList.first = origName ;; 3441 evalErrorList.second.push_back(ee) ;; 3442 }; 3443 ; 3444 ; 3445 inLogEvalError = false ;; 3446}; 3447 ; 3448 ; 3449 ; 3450////////////////////////////////////////////////////////////////////////////////; 3451/// Log evaluation error message. Evaluation errors may be routed through a different; 3452/// protocol than generic RooFit warning message (which go straight through RooMsgService); 3453/// because evaluation errors can occur in very large numbers in the use of likelihood; 3454/// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); 3455/// messages reported through this function are not printed but a",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:147380,Availability,error,errorList,147380,"iginator, const char* origName, const char* message, const char* serverValueString); 3409{; 3410 if (evalErrorData().mode == Ignore) {; 3411 return ;; 3412 }; 3413 ; 3414 if (evalErrorData().mode == CountErrors) {; 3415 evalErrorData().count++ ;; 3416 return ;; 3417 }; 3418 ; 3419 static bool inLogEvalError = false ;; 3420 ; 3421 if (inLogEvalError) {; 3422 return ;; 3423 }; 3424 inLogEvalError = true ;; 3425 ; 3426 EvalError ee ;; 3427 ee.setMessage(message) ;; 3428 ; 3429 if (serverValueString) {; 3430 ee.setServerValues(serverValueString) ;; 3431 }; 3432 ; 3433 if (evalErrorData().mode == PrintErrors) {; 3434 oocoutE(nullptr,Eval) << ""RooAbsReal::logEvalError("" << ""<STATIC>"" << "") evaluation error, "" << std::endl; 3435 << "" origin : "" << origName << std::endl; 3436 << "" message : "" << ee._msg << std::endl; 3437 << "" server values: "" << ee._srvval << std::endl ;; 3438 } else if (evalErrorData().mode == CollectErrors) {; 3439 auto &evalErrorList = evalErrorData().errorList[originator];; 3440 evalErrorList.first = origName ;; 3441 evalErrorList.second.push_back(ee) ;; 3442 }; 3443 ; 3444 ; 3445 inLogEvalError = false ;; 3446}; 3447 ; 3448 ; 3449 ; 3450////////////////////////////////////////////////////////////////////////////////; 3451/// Log evaluation error message. Evaluation errors may be routed through a different; 3452/// protocol than generic RooFit warning message (which go straight through RooMsgService); 3453/// because evaluation errors can occur in very large numbers in the use of likelihood; 3454/// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); 3455/// messages reported through this function are not printed but all stored in a list,; 3456/// along with server values at the time of reporting. Error messages logged in this; 3457/// way can be printed in a structured way, eliminating duplicates and with the ability; 3458/// to truncate the list by printEvalErrors. This is the standard mode of error logging; 3459//",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:147676,Availability,error,error,147676,"lErrorData().mode == CountErrors) {; 3415 evalErrorData().count++ ;; 3416 return ;; 3417 }; 3418 ; 3419 static bool inLogEvalError = false ;; 3420 ; 3421 if (inLogEvalError) {; 3422 return ;; 3423 }; 3424 inLogEvalError = true ;; 3425 ; 3426 EvalError ee ;; 3427 ee.setMessage(message) ;; 3428 ; 3429 if (serverValueString) {; 3430 ee.setServerValues(serverValueString) ;; 3431 }; 3432 ; 3433 if (evalErrorData().mode == PrintErrors) {; 3434 oocoutE(nullptr,Eval) << ""RooAbsReal::logEvalError("" << ""<STATIC>"" << "") evaluation error, "" << std::endl; 3435 << "" origin : "" << origName << std::endl; 3436 << "" message : "" << ee._msg << std::endl; 3437 << "" server values: "" << ee._srvval << std::endl ;; 3438 } else if (evalErrorData().mode == CollectErrors) {; 3439 auto &evalErrorList = evalErrorData().errorList[originator];; 3440 evalErrorList.first = origName ;; 3441 evalErrorList.second.push_back(ee) ;; 3442 }; 3443 ; 3444 ; 3445 inLogEvalError = false ;; 3446}; 3447 ; 3448 ; 3449 ; 3450////////////////////////////////////////////////////////////////////////////////; 3451/// Log evaluation error message. Evaluation errors may be routed through a different; 3452/// protocol than generic RooFit warning message (which go straight through RooMsgService); 3453/// because evaluation errors can occur in very large numbers in the use of likelihood; 3454/// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); 3455/// messages reported through this function are not printed but all stored in a list,; 3456/// along with server values at the time of reporting. Error messages logged in this; 3457/// way can be printed in a structured way, eliminating duplicates and with the ability; 3458/// to truncate the list by printEvalErrors. This is the standard mode of error logging; 3459/// during MINUIT operations. If enableEvalErrorLogging() is false, all errors; 3460/// reported through this method are passed for immediate printing through RooMsgService.; 3461/",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:147702,Availability,error,errors,147702,"EvalError ee ;; 3427 ee.setMessage(message) ;; 3428 ; 3429 if (serverValueString) {; 3430 ee.setServerValues(serverValueString) ;; 3431 }; 3432 ; 3433 if (evalErrorData().mode == PrintErrors) {; 3434 oocoutE(nullptr,Eval) << ""RooAbsReal::logEvalError("" << ""<STATIC>"" << "") evaluation error, "" << std::endl; 3435 << "" origin : "" << origName << std::endl; 3436 << "" message : "" << ee._msg << std::endl; 3437 << "" server values: "" << ee._srvval << std::endl ;; 3438 } else if (evalErrorData().mode == CollectErrors) {; 3439 auto &evalErrorList = evalErrorData().errorList[originator];; 3440 evalErrorList.first = origName ;; 3441 evalErrorList.second.push_back(ee) ;; 3442 }; 3443 ; 3444 ; 3445 inLogEvalError = false ;; 3446}; 3447 ; 3448 ; 3449 ; 3450////////////////////////////////////////////////////////////////////////////////; 3451/// Log evaluation error message. Evaluation errors may be routed through a different; 3452/// protocol than generic RooFit warning message (which go straight through RooMsgService); 3453/// because evaluation errors can occur in very large numbers in the use of likelihood; 3454/// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); 3455/// messages reported through this function are not printed but all stored in a list,; 3456/// along with server values at the time of reporting. Error messages logged in this; 3457/// way can be printed in a structured way, eliminating duplicates and with the ability; 3458/// to truncate the list by printEvalErrors. This is the standard mode of error logging; 3459/// during MINUIT operations. If enableEvalErrorLogging() is false, all errors; 3460/// reported through this method are passed for immediate printing through RooMsgService.; 3461/// A string with server names and values is constructed automatically for error logging; 3462/// purposes, unless a custom string with similar information is passed as argument.; 3463 ; 3464void RooAbsReal::logEvalError(const char* message, ",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:147867,Availability,error,errors,147867,"EvalError ee ;; 3427 ee.setMessage(message) ;; 3428 ; 3429 if (serverValueString) {; 3430 ee.setServerValues(serverValueString) ;; 3431 }; 3432 ; 3433 if (evalErrorData().mode == PrintErrors) {; 3434 oocoutE(nullptr,Eval) << ""RooAbsReal::logEvalError("" << ""<STATIC>"" << "") evaluation error, "" << std::endl; 3435 << "" origin : "" << origName << std::endl; 3436 << "" message : "" << ee._msg << std::endl; 3437 << "" server values: "" << ee._srvval << std::endl ;; 3438 } else if (evalErrorData().mode == CollectErrors) {; 3439 auto &evalErrorList = evalErrorData().errorList[originator];; 3440 evalErrorList.first = origName ;; 3441 evalErrorList.second.push_back(ee) ;; 3442 }; 3443 ; 3444 ; 3445 inLogEvalError = false ;; 3446}; 3447 ; 3448 ; 3449 ; 3450////////////////////////////////////////////////////////////////////////////////; 3451/// Log evaluation error message. Evaluation errors may be routed through a different; 3452/// protocol than generic RooFit warning message (which go straight through RooMsgService); 3453/// because evaluation errors can occur in very large numbers in the use of likelihood; 3454/// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); 3455/// messages reported through this function are not printed but all stored in a list,; 3456/// along with server values at the time of reporting. Error messages logged in this; 3457/// way can be printed in a structured way, eliminating duplicates and with the ability; 3458/// to truncate the list by printEvalErrors. This is the standard mode of error logging; 3459/// during MINUIT operations. If enableEvalErrorLogging() is false, all errors; 3460/// reported through this method are passed for immediate printing through RooMsgService.; 3461/// A string with server names and values is constructed automatically for error logging; 3462/// purposes, unless a custom string with similar information is passed as argument.; 3463 ; 3464void RooAbsReal::logEvalError(const char* message, ",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:148381,Availability,error,error,148381,"originator];; 3440 evalErrorList.first = origName ;; 3441 evalErrorList.second.push_back(ee) ;; 3442 }; 3443 ; 3444 ; 3445 inLogEvalError = false ;; 3446}; 3447 ; 3448 ; 3449 ; 3450////////////////////////////////////////////////////////////////////////////////; 3451/// Log evaluation error message. Evaluation errors may be routed through a different; 3452/// protocol than generic RooFit warning message (which go straight through RooMsgService); 3453/// because evaluation errors can occur in very large numbers in the use of likelihood; 3454/// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); 3455/// messages reported through this function are not printed but all stored in a list,; 3456/// along with server values at the time of reporting. Error messages logged in this; 3457/// way can be printed in a structured way, eliminating duplicates and with the ability; 3458/// to truncate the list by printEvalErrors. This is the standard mode of error logging; 3459/// during MINUIT operations. If enableEvalErrorLogging() is false, all errors; 3460/// reported through this method are passed for immediate printing through RooMsgService.; 3461/// A string with server names and values is constructed automatically for error logging; 3462/// purposes, unless a custom string with similar information is passed as argument.; 3463 ; 3464void RooAbsReal::logEvalError(const char* message, const char* serverValueString) const; 3465{; 3466 if (evalErrorData().mode == Ignore) {; 3467 return ;; 3468 }; 3469 ; 3470 if (evalErrorData().mode == CountErrors) {; 3471 evalErrorData().count++ ;; 3472 return ;; 3473 }; 3474 ; 3475 static bool inLogEvalError = false ;; 3476 ; 3477 if (inLogEvalError) {; 3478 return ;; 3479 }; 3480 inLogEvalError = true ;; 3481 ; 3482 EvalError ee ;; 3483 ee.setMessage(message) ;; 3484 ; 3485 if (serverValueString) {; 3486 ee.setServerValues(serverValueString) ;; 3487 } else {; 3488 std::string srvval ;; 3489 std::ostringstream",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:148472,Availability,error,errors,148472,"3444 ; 3445 inLogEvalError = false ;; 3446}; 3447 ; 3448 ; 3449 ; 3450////////////////////////////////////////////////////////////////////////////////; 3451/// Log evaluation error message. Evaluation errors may be routed through a different; 3452/// protocol than generic RooFit warning message (which go straight through RooMsgService); 3453/// because evaluation errors can occur in very large numbers in the use of likelihood; 3454/// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); 3455/// messages reported through this function are not printed but all stored in a list,; 3456/// along with server values at the time of reporting. Error messages logged in this; 3457/// way can be printed in a structured way, eliminating duplicates and with the ability; 3458/// to truncate the list by printEvalErrors. This is the standard mode of error logging; 3459/// during MINUIT operations. If enableEvalErrorLogging() is false, all errors; 3460/// reported through this method are passed for immediate printing through RooMsgService.; 3461/// A string with server names and values is constructed automatically for error logging; 3462/// purposes, unless a custom string with similar information is passed as argument.; 3463 ; 3464void RooAbsReal::logEvalError(const char* message, const char* serverValueString) const; 3465{; 3466 if (evalErrorData().mode == Ignore) {; 3467 return ;; 3468 }; 3469 ; 3470 if (evalErrorData().mode == CountErrors) {; 3471 evalErrorData().count++ ;; 3472 return ;; 3473 }; 3474 ; 3475 static bool inLogEvalError = false ;; 3476 ; 3477 if (inLogEvalError) {; 3478 return ;; 3479 }; 3480 inLogEvalError = true ;; 3481 ; 3482 EvalError ee ;; 3483 ee.setMessage(message) ;; 3484 ; 3485 if (serverValueString) {; 3486 ee.setServerValues(serverValueString) ;; 3487 } else {; 3488 std::string srvval ;; 3489 std::ostringstream oss ;; 3490 bool first(true) ;; 3491 for (Int_t i=0 ; i<numProxies() ; i++) {; 3492 RooAbsProxy* p = getProxy(",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:148654,Availability,error,error,148654,"evaluation error message. Evaluation errors may be routed through a different; 3452/// protocol than generic RooFit warning message (which go straight through RooMsgService); 3453/// because evaluation errors can occur in very large numbers in the use of likelihood; 3454/// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); 3455/// messages reported through this function are not printed but all stored in a list,; 3456/// along with server values at the time of reporting. Error messages logged in this; 3457/// way can be printed in a structured way, eliminating duplicates and with the ability; 3458/// to truncate the list by printEvalErrors. This is the standard mode of error logging; 3459/// during MINUIT operations. If enableEvalErrorLogging() is false, all errors; 3460/// reported through this method are passed for immediate printing through RooMsgService.; 3461/// A string with server names and values is constructed automatically for error logging; 3462/// purposes, unless a custom string with similar information is passed as argument.; 3463 ; 3464void RooAbsReal::logEvalError(const char* message, const char* serverValueString) const; 3465{; 3466 if (evalErrorData().mode == Ignore) {; 3467 return ;; 3468 }; 3469 ; 3470 if (evalErrorData().mode == CountErrors) {; 3471 evalErrorData().count++ ;; 3472 return ;; 3473 }; 3474 ; 3475 static bool inLogEvalError = false ;; 3476 ; 3477 if (inLogEvalError) {; 3478 return ;; 3479 }; 3480 inLogEvalError = true ;; 3481 ; 3482 EvalError ee ;; 3483 ee.setMessage(message) ;; 3484 ; 3485 if (serverValueString) {; 3486 ee.setServerValues(serverValueString) ;; 3487 } else {; 3488 std::string srvval ;; 3489 std::ostringstream oss ;; 3490 bool first(true) ;; 3491 for (Int_t i=0 ; i<numProxies() ; i++) {; 3492 RooAbsProxy* p = getProxy(i) ;; 3493 if (!p) continue ;; 3494 //if (p->name()[0]=='!') continue ;; 3495 if (first) {; 3496 first=false ;; 3497 } else {; 3498 oss << "", "" ;; 3499 }; 3500 p->p",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:149975,Availability,error,error,149975,"valErrorData().mode == CountErrors) {; 3471 evalErrorData().count++ ;; 3472 return ;; 3473 }; 3474 ; 3475 static bool inLogEvalError = false ;; 3476 ; 3477 if (inLogEvalError) {; 3478 return ;; 3479 }; 3480 inLogEvalError = true ;; 3481 ; 3482 EvalError ee ;; 3483 ee.setMessage(message) ;; 3484 ; 3485 if (serverValueString) {; 3486 ee.setServerValues(serverValueString) ;; 3487 } else {; 3488 std::string srvval ;; 3489 std::ostringstream oss ;; 3490 bool first(true) ;; 3491 for (Int_t i=0 ; i<numProxies() ; i++) {; 3492 RooAbsProxy* p = getProxy(i) ;; 3493 if (!p) continue ;; 3494 //if (p->name()[0]=='!') continue ;; 3495 if (first) {; 3496 first=false ;; 3497 } else {; 3498 oss << "", "" ;; 3499 }; 3500 p->print(oss,true) ;; 3501 }; 3502 ee.setServerValues(oss.str().c_str()) ;; 3503 }; 3504 ; 3505 std::ostringstream oss2 ;; 3506 printStream(oss2,kName|kClassName|kArgs,kInline) ;; 3507 ; 3508 if (evalErrorData().mode == PrintErrors) {; 3509 coutE(Eval) << ""RooAbsReal::logEvalError("" << GetName() << "") evaluation error, "" << std::endl; 3510 << "" origin : "" << oss2.str() << std::endl; 3511 << "" message : "" << ee._msg << std::endl; 3512 << "" server values: "" << ee._srvval << std::endl ;; 3513 } else if (evalErrorData().mode == CollectErrors) {; 3514 auto &evalErrorList = evalErrorData().errorList[this];; 3515 if (evalErrorList.second.size() >= 2048) {; 3516 // avoid overflowing the error list, so if there are very many, print; 3517 // the oldest one first, and pop it off the list; 3518 const EvalError& oee = evalErrorList.second.front();; 3519 // print to debug stream, since these would normally be suppressed, and; 3520 // we do not want to increase the error count in the message service...; 3521 ccoutD(Eval) << ""RooAbsReal::logEvalError("" << GetName(); 3522 << "") delayed evaluation error, "" << std::endl; 3523 << "" origin : "" << oss2.str() << std::endl; 3524 << "" message : "" << oee._msg << std::endl; 3525 << "" server values: "" << oee._srvval << std::endl ;; 3526 evalError",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:150252,Availability,error,errorList,150252,"ng) {; 3486 ee.setServerValues(serverValueString) ;; 3487 } else {; 3488 std::string srvval ;; 3489 std::ostringstream oss ;; 3490 bool first(true) ;; 3491 for (Int_t i=0 ; i<numProxies() ; i++) {; 3492 RooAbsProxy* p = getProxy(i) ;; 3493 if (!p) continue ;; 3494 //if (p->name()[0]=='!') continue ;; 3495 if (first) {; 3496 first=false ;; 3497 } else {; 3498 oss << "", "" ;; 3499 }; 3500 p->print(oss,true) ;; 3501 }; 3502 ee.setServerValues(oss.str().c_str()) ;; 3503 }; 3504 ; 3505 std::ostringstream oss2 ;; 3506 printStream(oss2,kName|kClassName|kArgs,kInline) ;; 3507 ; 3508 if (evalErrorData().mode == PrintErrors) {; 3509 coutE(Eval) << ""RooAbsReal::logEvalError("" << GetName() << "") evaluation error, "" << std::endl; 3510 << "" origin : "" << oss2.str() << std::endl; 3511 << "" message : "" << ee._msg << std::endl; 3512 << "" server values: "" << ee._srvval << std::endl ;; 3513 } else if (evalErrorData().mode == CollectErrors) {; 3514 auto &evalErrorList = evalErrorData().errorList[this];; 3515 if (evalErrorList.second.size() >= 2048) {; 3516 // avoid overflowing the error list, so if there are very many, print; 3517 // the oldest one first, and pop it off the list; 3518 const EvalError& oee = evalErrorList.second.front();; 3519 // print to debug stream, since these would normally be suppressed, and; 3520 // we do not want to increase the error count in the message service...; 3521 ccoutD(Eval) << ""RooAbsReal::logEvalError("" << GetName(); 3522 << "") delayed evaluation error, "" << std::endl; 3523 << "" origin : "" << oss2.str() << std::endl; 3524 << "" message : "" << oee._msg << std::endl; 3525 << "" server values: "" << oee._srvval << std::endl ;; 3526 evalErrorList.second.pop_front();; 3527 }; 3528 evalErrorList.first = oss2.str() ;; 3529 evalErrorList.second.push_back(ee) ;; 3530 }; 3531 ; 3532 inLogEvalError = false ;; 3533 //coutE(Tracing) << ""RooAbsReal::logEvalError("" << GetName() << "") message = "" << message << std::endl ;; 3534}; 3535 ; 3536 ; 3537 ; 3538 ; 3539/////////",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:150349,Availability,error,error,150349,"; 3490 bool first(true) ;; 3491 for (Int_t i=0 ; i<numProxies() ; i++) {; 3492 RooAbsProxy* p = getProxy(i) ;; 3493 if (!p) continue ;; 3494 //if (p->name()[0]=='!') continue ;; 3495 if (first) {; 3496 first=false ;; 3497 } else {; 3498 oss << "", "" ;; 3499 }; 3500 p->print(oss,true) ;; 3501 }; 3502 ee.setServerValues(oss.str().c_str()) ;; 3503 }; 3504 ; 3505 std::ostringstream oss2 ;; 3506 printStream(oss2,kName|kClassName|kArgs,kInline) ;; 3507 ; 3508 if (evalErrorData().mode == PrintErrors) {; 3509 coutE(Eval) << ""RooAbsReal::logEvalError("" << GetName() << "") evaluation error, "" << std::endl; 3510 << "" origin : "" << oss2.str() << std::endl; 3511 << "" message : "" << ee._msg << std::endl; 3512 << "" server values: "" << ee._srvval << std::endl ;; 3513 } else if (evalErrorData().mode == CollectErrors) {; 3514 auto &evalErrorList = evalErrorData().errorList[this];; 3515 if (evalErrorList.second.size() >= 2048) {; 3516 // avoid overflowing the error list, so if there are very many, print; 3517 // the oldest one first, and pop it off the list; 3518 const EvalError& oee = evalErrorList.second.front();; 3519 // print to debug stream, since these would normally be suppressed, and; 3520 // we do not want to increase the error count in the message service...; 3521 ccoutD(Eval) << ""RooAbsReal::logEvalError("" << GetName(); 3522 << "") delayed evaluation error, "" << std::endl; 3523 << "" origin : "" << oss2.str() << std::endl; 3524 << "" message : "" << oee._msg << std::endl; 3525 << "" server values: "" << oee._srvval << std::endl ;; 3526 evalErrorList.second.pop_front();; 3527 }; 3528 evalErrorList.first = oss2.str() ;; 3529 evalErrorList.second.push_back(ee) ;; 3530 }; 3531 ; 3532 inLogEvalError = false ;; 3533 //coutE(Tracing) << ""RooAbsReal::logEvalError("" << GetName() << "") message = "" << message << std::endl ;; 3534}; 3535 ; 3536 ; 3537 ; 3538 ; 3539////////////////////////////////////////////////////////////////////////////////; 3540/// Clear the stack of evaluation error messag",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:150626,Availability,error,error,150626,"f (first) {; 3496 first=false ;; 3497 } else {; 3498 oss << "", "" ;; 3499 }; 3500 p->print(oss,true) ;; 3501 }; 3502 ee.setServerValues(oss.str().c_str()) ;; 3503 }; 3504 ; 3505 std::ostringstream oss2 ;; 3506 printStream(oss2,kName|kClassName|kArgs,kInline) ;; 3507 ; 3508 if (evalErrorData().mode == PrintErrors) {; 3509 coutE(Eval) << ""RooAbsReal::logEvalError("" << GetName() << "") evaluation error, "" << std::endl; 3510 << "" origin : "" << oss2.str() << std::endl; 3511 << "" message : "" << ee._msg << std::endl; 3512 << "" server values: "" << ee._srvval << std::endl ;; 3513 } else if (evalErrorData().mode == CollectErrors) {; 3514 auto &evalErrorList = evalErrorData().errorList[this];; 3515 if (evalErrorList.second.size() >= 2048) {; 3516 // avoid overflowing the error list, so if there are very many, print; 3517 // the oldest one first, and pop it off the list; 3518 const EvalError& oee = evalErrorList.second.front();; 3519 // print to debug stream, since these would normally be suppressed, and; 3520 // we do not want to increase the error count in the message service...; 3521 ccoutD(Eval) << ""RooAbsReal::logEvalError("" << GetName(); 3522 << "") delayed evaluation error, "" << std::endl; 3523 << "" origin : "" << oss2.str() << std::endl; 3524 << "" message : "" << oee._msg << std::endl; 3525 << "" server values: "" << oee._srvval << std::endl ;; 3526 evalErrorList.second.pop_front();; 3527 }; 3528 evalErrorList.first = oss2.str() ;; 3529 evalErrorList.second.push_back(ee) ;; 3530 }; 3531 ; 3532 inLogEvalError = false ;; 3533 //coutE(Tracing) << ""RooAbsReal::logEvalError("" << GetName() << "") message = "" << message << std::endl ;; 3534}; 3535 ; 3536 ; 3537 ; 3538 ; 3539////////////////////////////////////////////////////////////////////////////////; 3540/// Clear the stack of evaluation error messages; 3541 ; 3542void RooAbsReal::clearEvalErrorLog(); 3543{; 3544 if (evalErrorData().mode == PrintErrors) {; 3545 return ;; 3546 } else if (evalErrorData().mode == CollectErrors) {; 35",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:150758,Availability,error,error,150758," 3503 }; 3504 ; 3505 std::ostringstream oss2 ;; 3506 printStream(oss2,kName|kClassName|kArgs,kInline) ;; 3507 ; 3508 if (evalErrorData().mode == PrintErrors) {; 3509 coutE(Eval) << ""RooAbsReal::logEvalError("" << GetName() << "") evaluation error, "" << std::endl; 3510 << "" origin : "" << oss2.str() << std::endl; 3511 << "" message : "" << ee._msg << std::endl; 3512 << "" server values: "" << ee._srvval << std::endl ;; 3513 } else if (evalErrorData().mode == CollectErrors) {; 3514 auto &evalErrorList = evalErrorData().errorList[this];; 3515 if (evalErrorList.second.size() >= 2048) {; 3516 // avoid overflowing the error list, so if there are very many, print; 3517 // the oldest one first, and pop it off the list; 3518 const EvalError& oee = evalErrorList.second.front();; 3519 // print to debug stream, since these would normally be suppressed, and; 3520 // we do not want to increase the error count in the message service...; 3521 ccoutD(Eval) << ""RooAbsReal::logEvalError("" << GetName(); 3522 << "") delayed evaluation error, "" << std::endl; 3523 << "" origin : "" << oss2.str() << std::endl; 3524 << "" message : "" << oee._msg << std::endl; 3525 << "" server values: "" << oee._srvval << std::endl ;; 3526 evalErrorList.second.pop_front();; 3527 }; 3528 evalErrorList.first = oss2.str() ;; 3529 evalErrorList.second.push_back(ee) ;; 3530 }; 3531 ; 3532 inLogEvalError = false ;; 3533 //coutE(Tracing) << ""RooAbsReal::logEvalError("" << GetName() << "") message = "" << message << std::endl ;; 3534}; 3535 ; 3536 ; 3537 ; 3538 ; 3539////////////////////////////////////////////////////////////////////////////////; 3540/// Clear the stack of evaluation error messages; 3541 ; 3542void RooAbsReal::clearEvalErrorLog(); 3543{; 3544 if (evalErrorData().mode == PrintErrors) {; 3545 return ;; 3546 } else if (evalErrorData().mode == CollectErrors) {; 3547 evalErrorData().errorList.clear() ;; 3548 } else {; 3549 evalErrorData().count = 0 ;; 3550 }; 3551}; 3552 ; 3553 ; 3554///////////////////////////////////",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:151384,Availability,error,error,151384,"];; 3515 if (evalErrorList.second.size() >= 2048) {; 3516 // avoid overflowing the error list, so if there are very many, print; 3517 // the oldest one first, and pop it off the list; 3518 const EvalError& oee = evalErrorList.second.front();; 3519 // print to debug stream, since these would normally be suppressed, and; 3520 // we do not want to increase the error count in the message service...; 3521 ccoutD(Eval) << ""RooAbsReal::logEvalError("" << GetName(); 3522 << "") delayed evaluation error, "" << std::endl; 3523 << "" origin : "" << oss2.str() << std::endl; 3524 << "" message : "" << oee._msg << std::endl; 3525 << "" server values: "" << oee._srvval << std::endl ;; 3526 evalErrorList.second.pop_front();; 3527 }; 3528 evalErrorList.first = oss2.str() ;; 3529 evalErrorList.second.push_back(ee) ;; 3530 }; 3531 ; 3532 inLogEvalError = false ;; 3533 //coutE(Tracing) << ""RooAbsReal::logEvalError("" << GetName() << "") message = "" << message << std::endl ;; 3534}; 3535 ; 3536 ; 3537 ; 3538 ; 3539////////////////////////////////////////////////////////////////////////////////; 3540/// Clear the stack of evaluation error messages; 3541 ; 3542void RooAbsReal::clearEvalErrorLog(); 3543{; 3544 if (evalErrorData().mode == PrintErrors) {; 3545 return ;; 3546 } else if (evalErrorData().mode == CollectErrors) {; 3547 evalErrorData().errorList.clear() ;; 3548 } else {; 3549 evalErrorData().count = 0 ;; 3550 }; 3551}; 3552 ; 3553 ; 3554////////////////////////////////////////////////////////////////////////////////; 3555/// Retrieve bin boundaries if this distribution is binned in `obs`.; 3556/// \param[in] obs Observable to retrieve boundaries for.; 3557/// \param[in] xlo Beginning of range.; 3558/// \param[in] xhi End of range.; 3559/// \return The caller owns the returned std::list.; 3560std::list<double>* RooAbsReal::binBoundaries(RooAbsRealLValue& /*obs*/, double /*xlo*/, double /*xhi*/) const {; 3561 return nullptr;; 3562}; 3563 ; 3564 ; 3565//////////////////////////////////////////",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:151599,Availability,error,errorList,151599," want to increase the error count in the message service...; 3521 ccoutD(Eval) << ""RooAbsReal::logEvalError("" << GetName(); 3522 << "") delayed evaluation error, "" << std::endl; 3523 << "" origin : "" << oss2.str() << std::endl; 3524 << "" message : "" << oee._msg << std::endl; 3525 << "" server values: "" << oee._srvval << std::endl ;; 3526 evalErrorList.second.pop_front();; 3527 }; 3528 evalErrorList.first = oss2.str() ;; 3529 evalErrorList.second.push_back(ee) ;; 3530 }; 3531 ; 3532 inLogEvalError = false ;; 3533 //coutE(Tracing) << ""RooAbsReal::logEvalError("" << GetName() << "") message = "" << message << std::endl ;; 3534}; 3535 ; 3536 ; 3537 ; 3538 ; 3539////////////////////////////////////////////////////////////////////////////////; 3540/// Clear the stack of evaluation error messages; 3541 ; 3542void RooAbsReal::clearEvalErrorLog(); 3543{; 3544 if (evalErrorData().mode == PrintErrors) {; 3545 return ;; 3546 } else if (evalErrorData().mode == CollectErrors) {; 3547 evalErrorData().errorList.clear() ;; 3548 } else {; 3549 evalErrorData().count = 0 ;; 3550 }; 3551}; 3552 ; 3553 ; 3554////////////////////////////////////////////////////////////////////////////////; 3555/// Retrieve bin boundaries if this distribution is binned in `obs`.; 3556/// \param[in] obs Observable to retrieve boundaries for.; 3557/// \param[in] xlo Beginning of range.; 3558/// \param[in] xhi End of range.; 3559/// \return The caller owns the returned std::list.; 3560std::list<double>* RooAbsReal::binBoundaries(RooAbsRealLValue& /*obs*/, double /*xlo*/, double /*xhi*/) const {; 3561 return nullptr;; 3562}; 3563 ; 3564 ; 3565////////////////////////////////////////////////////////////////////////////////; 3566/// Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable `obs`.; 3567/// \param[in] obs Observable to retrieve sampling hint for.; 3568/// \param[in] xlo Beginning of range.; 3569/// \param[in] xhi End of range.; 3570/// \return",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:152936,Availability,error,error,152936,"n boundaries if this distribution is binned in `obs`.; 3556/// \param[in] obs Observable to retrieve boundaries for.; 3557/// \param[in] xlo Beginning of range.; 3558/// \param[in] xhi End of range.; 3559/// \return The caller owns the returned std::list.; 3560std::list<double>* RooAbsReal::binBoundaries(RooAbsRealLValue& /*obs*/, double /*xlo*/, double /*xhi*/) const {; 3561 return nullptr;; 3562}; 3563 ; 3564 ; 3565////////////////////////////////////////////////////////////////////////////////; 3566/// Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable `obs`.; 3567/// \param[in] obs Observable to retrieve sampling hint for.; 3568/// \param[in] xlo Beginning of range.; 3569/// \param[in] xhi End of range.; 3570/// \return The caller owns the returned std::list.; 3571std::list<double>* RooAbsReal::plotSamplingHint(RooAbsRealLValue& /*obs*/, double /*xlo*/, double /*xhi*/) const {; 3572 return nullptr;; 3573}; 3574 ; 3575////////////////////////////////////////////////////////////////////////////////; 3576/// Print all outstanding logged evaluation error on the given ostream. If maxPerNode; 3577/// is zero, only the number of errors for each source (object with unique name) is listed.; 3578/// If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; 3579/// per source of errors. A truncation message is shown if there were more errors logged; 3580/// than shown.; 3581 ; 3582void RooAbsReal::printEvalErrors(std::ostream &os, Int_t maxPerNode); 3583{; 3584 if (evalErrorData().mode == CountErrors) {; 3585 os << evalErrorData().count << "" errors counted"" << std::endl;; 3586 }; 3587 ; 3588 if (maxPerNode < 0); 3589 return;; 3590 ; 3591 for (auto const &item : evalErrorData().errorList) {; 3592 if (maxPerNode == 0) {; 3593 ; 3594 // Only print node name with total number of errors; 3595 os << item.second.first;; 3596 // item.first->printStream(os,kName|kClassName|kArgs,kInline",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:153015,Availability,error,errors,153015," The caller owns the returned std::list.; 3560std::list<double>* RooAbsReal::binBoundaries(RooAbsRealLValue& /*obs*/, double /*xlo*/, double /*xhi*/) const {; 3561 return nullptr;; 3562}; 3563 ; 3564 ; 3565////////////////////////////////////////////////////////////////////////////////; 3566/// Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable `obs`.; 3567/// \param[in] obs Observable to retrieve sampling hint for.; 3568/// \param[in] xlo Beginning of range.; 3569/// \param[in] xhi End of range.; 3570/// \return The caller owns the returned std::list.; 3571std::list<double>* RooAbsReal::plotSamplingHint(RooAbsRealLValue& /*obs*/, double /*xlo*/, double /*xhi*/) const {; 3572 return nullptr;; 3573}; 3574 ; 3575////////////////////////////////////////////////////////////////////////////////; 3576/// Print all outstanding logged evaluation error on the given ostream. If maxPerNode; 3577/// is zero, only the number of errors for each source (object with unique name) is listed.; 3578/// If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; 3579/// per source of errors. A truncation message is shown if there were more errors logged; 3580/// than shown.; 3581 ; 3582void RooAbsReal::printEvalErrors(std::ostream &os, Int_t maxPerNode); 3583{; 3584 if (evalErrorData().mode == CountErrors) {; 3585 os << evalErrorData().count << "" errors counted"" << std::endl;; 3586 }; 3587 ; 3588 if (maxPerNode < 0); 3589 return;; 3590 ; 3591 for (auto const &item : evalErrorData().errorList) {; 3592 if (maxPerNode == 0) {; 3593 ; 3594 // Only print node name with total number of errors; 3595 os << item.second.first;; 3596 // item.first->printStream(os,kName|kClassName|kArgs,kInline) ;; 3597 os << "" has "" << item.second.second.size() << "" errors"" << std::endl;; 3598 ; 3599 } else {; 3600 ; 3601 // Print node name and details of 'maxPerNode' errors; 3602 os << item.second.first << std::endl;; 3",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:153146,Availability,error,error,153146,"ouble /*xlo*/, double /*xhi*/) const {; 3561 return nullptr;; 3562}; 3563 ; 3564 ; 3565////////////////////////////////////////////////////////////////////////////////; 3566/// Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable `obs`.; 3567/// \param[in] obs Observable to retrieve sampling hint for.; 3568/// \param[in] xlo Beginning of range.; 3569/// \param[in] xhi End of range.; 3570/// \return The caller owns the returned std::list.; 3571std::list<double>* RooAbsReal::plotSamplingHint(RooAbsRealLValue& /*obs*/, double /*xlo*/, double /*xhi*/) const {; 3572 return nullptr;; 3573}; 3574 ; 3575////////////////////////////////////////////////////////////////////////////////; 3576/// Print all outstanding logged evaluation error on the given ostream. If maxPerNode; 3577/// is zero, only the number of errors for each source (object with unique name) is listed.; 3578/// If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; 3579/// per source of errors. A truncation message is shown if there were more errors logged; 3580/// than shown.; 3581 ; 3582void RooAbsReal::printEvalErrors(std::ostream &os, Int_t maxPerNode); 3583{; 3584 if (evalErrorData().mode == CountErrors) {; 3585 os << evalErrorData().count << "" errors counted"" << std::endl;; 3586 }; 3587 ; 3588 if (maxPerNode < 0); 3589 return;; 3590 ; 3591 for (auto const &item : evalErrorData().errorList) {; 3592 if (maxPerNode == 0) {; 3593 ; 3594 // Only print node name with total number of errors; 3595 os << item.second.first;; 3596 // item.first->printStream(os,kName|kClassName|kArgs,kInline) ;; 3597 os << "" has "" << item.second.second.size() << "" errors"" << std::endl;; 3598 ; 3599 } else {; 3600 ; 3601 // Print node name and details of 'maxPerNode' errors; 3602 os << item.second.first << std::endl;; 3603 // item.first->printStream(os,kName|kClassName|kArgs,kSingleLine) ;; 3604 ; 3605 Int_t i(0);; 3606 for (auto const ",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:153194,Availability,error,errors,153194,"ouble /*xlo*/, double /*xhi*/) const {; 3561 return nullptr;; 3562}; 3563 ; 3564 ; 3565////////////////////////////////////////////////////////////////////////////////; 3566/// Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable `obs`.; 3567/// \param[in] obs Observable to retrieve sampling hint for.; 3568/// \param[in] xlo Beginning of range.; 3569/// \param[in] xhi End of range.; 3570/// \return The caller owns the returned std::list.; 3571std::list<double>* RooAbsReal::plotSamplingHint(RooAbsRealLValue& /*obs*/, double /*xlo*/, double /*xhi*/) const {; 3572 return nullptr;; 3573}; 3574 ; 3575////////////////////////////////////////////////////////////////////////////////; 3576/// Print all outstanding logged evaluation error on the given ostream. If maxPerNode; 3577/// is zero, only the number of errors for each source (object with unique name) is listed.; 3578/// If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; 3579/// per source of errors. A truncation message is shown if there were more errors logged; 3580/// than shown.; 3581 ; 3582void RooAbsReal::printEvalErrors(std::ostream &os, Int_t maxPerNode); 3583{; 3584 if (evalErrorData().mode == CountErrors) {; 3585 os << evalErrorData().count << "" errors counted"" << std::endl;; 3586 }; 3587 ; 3588 if (maxPerNode < 0); 3589 return;; 3590 ; 3591 for (auto const &item : evalErrorData().errorList) {; 3592 if (maxPerNode == 0) {; 3593 ; 3594 // Only print node name with total number of errors; 3595 os << item.second.first;; 3596 // item.first->printStream(os,kName|kClassName|kArgs,kInline) ;; 3597 os << "" has "" << item.second.second.size() << "" errors"" << std::endl;; 3598 ; 3599 } else {; 3600 ; 3601 // Print node name and details of 'maxPerNode' errors; 3602 os << item.second.first << std::endl;; 3603 // item.first->printStream(os,kName|kClassName|kArgs,kSingleLine) ;; 3604 ; 3605 Int_t i(0);; 3606 for (auto const ",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:153251,Availability,error,errors,153251,"/////////////////////////////////////////////////////////////; 3566/// Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable `obs`.; 3567/// \param[in] obs Observable to retrieve sampling hint for.; 3568/// \param[in] xlo Beginning of range.; 3569/// \param[in] xhi End of range.; 3570/// \return The caller owns the returned std::list.; 3571std::list<double>* RooAbsReal::plotSamplingHint(RooAbsRealLValue& /*obs*/, double /*xlo*/, double /*xhi*/) const {; 3572 return nullptr;; 3573}; 3574 ; 3575////////////////////////////////////////////////////////////////////////////////; 3576/// Print all outstanding logged evaluation error on the given ostream. If maxPerNode; 3577/// is zero, only the number of errors for each source (object with unique name) is listed.; 3578/// If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; 3579/// per source of errors. A truncation message is shown if there were more errors logged; 3580/// than shown.; 3581 ; 3582void RooAbsReal::printEvalErrors(std::ostream &os, Int_t maxPerNode); 3583{; 3584 if (evalErrorData().mode == CountErrors) {; 3585 os << evalErrorData().count << "" errors counted"" << std::endl;; 3586 }; 3587 ; 3588 if (maxPerNode < 0); 3589 return;; 3590 ; 3591 for (auto const &item : evalErrorData().errorList) {; 3592 if (maxPerNode == 0) {; 3593 ; 3594 // Only print node name with total number of errors; 3595 os << item.second.first;; 3596 // item.first->printStream(os,kName|kClassName|kArgs,kInline) ;; 3597 os << "" has "" << item.second.second.size() << "" errors"" << std::endl;; 3598 ; 3599 } else {; 3600 ; 3601 // Print node name and details of 'maxPerNode' errors; 3602 os << item.second.first << std::endl;; 3603 // item.first->printStream(os,kName|kClassName|kArgs,kSingleLine) ;; 3604 ; 3605 Int_t i(0);; 3606 for (auto const &item2 : item.second.second) {; 3607 os << "" "" << item2._msg << "" @ "" << item2._srvval << std::endl;; 360",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:153462,Availability,error,errors,153462," xlo Beginning of range.; 3569/// \param[in] xhi End of range.; 3570/// \return The caller owns the returned std::list.; 3571std::list<double>* RooAbsReal::plotSamplingHint(RooAbsRealLValue& /*obs*/, double /*xlo*/, double /*xhi*/) const {; 3572 return nullptr;; 3573}; 3574 ; 3575////////////////////////////////////////////////////////////////////////////////; 3576/// Print all outstanding logged evaluation error on the given ostream. If maxPerNode; 3577/// is zero, only the number of errors for each source (object with unique name) is listed.; 3578/// If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; 3579/// per source of errors. A truncation message is shown if there were more errors logged; 3580/// than shown.; 3581 ; 3582void RooAbsReal::printEvalErrors(std::ostream &os, Int_t maxPerNode); 3583{; 3584 if (evalErrorData().mode == CountErrors) {; 3585 os << evalErrorData().count << "" errors counted"" << std::endl;; 3586 }; 3587 ; 3588 if (maxPerNode < 0); 3589 return;; 3590 ; 3591 for (auto const &item : evalErrorData().errorList) {; 3592 if (maxPerNode == 0) {; 3593 ; 3594 // Only print node name with total number of errors; 3595 os << item.second.first;; 3596 // item.first->printStream(os,kName|kClassName|kArgs,kInline) ;; 3597 os << "" has "" << item.second.second.size() << "" errors"" << std::endl;; 3598 ; 3599 } else {; 3600 ; 3601 // Print node name and details of 'maxPerNode' errors; 3602 os << item.second.first << std::endl;; 3603 // item.first->printStream(os,kName|kClassName|kArgs,kSingleLine) ;; 3604 ; 3605 Int_t i(0);; 3606 for (auto const &item2 : item.second.second) {; 3607 os << "" "" << item2._msg << "" @ "" << item2._srvval << std::endl;; 3608 if (i > maxPerNode) {; 3609 os << "" ... (remaining "" << item.second.second.size() - maxPerNode << "" messages suppressed)""; 3610 << std::endl;; 3611 break;; 3612 }; 3613 i++;; 3614 }; 3615 }; 3616 }; 3617}; 3618 ; 3619 ; 3620 ; 3621//////////////////////////////////////////////////",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:153600,Availability,error,errorList,153600,"uble>* RooAbsReal::plotSamplingHint(RooAbsRealLValue& /*obs*/, double /*xlo*/, double /*xhi*/) const {; 3572 return nullptr;; 3573}; 3574 ; 3575////////////////////////////////////////////////////////////////////////////////; 3576/// Print all outstanding logged evaluation error on the given ostream. If maxPerNode; 3577/// is zero, only the number of errors for each source (object with unique name) is listed.; 3578/// If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; 3579/// per source of errors. A truncation message is shown if there were more errors logged; 3580/// than shown.; 3581 ; 3582void RooAbsReal::printEvalErrors(std::ostream &os, Int_t maxPerNode); 3583{; 3584 if (evalErrorData().mode == CountErrors) {; 3585 os << evalErrorData().count << "" errors counted"" << std::endl;; 3586 }; 3587 ; 3588 if (maxPerNode < 0); 3589 return;; 3590 ; 3591 for (auto const &item : evalErrorData().errorList) {; 3592 if (maxPerNode == 0) {; 3593 ; 3594 // Only print node name with total number of errors; 3595 os << item.second.first;; 3596 // item.first->printStream(os,kName|kClassName|kArgs,kInline) ;; 3597 os << "" has "" << item.second.second.size() << "" errors"" << std::endl;; 3598 ; 3599 } else {; 3600 ; 3601 // Print node name and details of 'maxPerNode' errors; 3602 os << item.second.first << std::endl;; 3603 // item.first->printStream(os,kName|kClassName|kArgs,kSingleLine) ;; 3604 ; 3605 Int_t i(0);; 3606 for (auto const &item2 : item.second.second) {; 3607 os << "" "" << item2._msg << "" @ "" << item2._srvval << std::endl;; 3608 if (i > maxPerNode) {; 3609 os << "" ... (remaining "" << item.second.second.size() - maxPerNode << "" messages suppressed)""; 3610 << std::endl;; 3611 break;; 3612 }; 3613 i++;; 3614 }; 3615 }; 3616 }; 3617}; 3618 ; 3619 ; 3620 ; 3621////////////////////////////////////////////////////////////////////////////////; 3622/// Return the number of logged evaluation errors since the last clearing.; 3623 ; 3624Int_t RooAbsR",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:153700,Availability,error,errors,153700,"uble>* RooAbsReal::plotSamplingHint(RooAbsRealLValue& /*obs*/, double /*xlo*/, double /*xhi*/) const {; 3572 return nullptr;; 3573}; 3574 ; 3575////////////////////////////////////////////////////////////////////////////////; 3576/// Print all outstanding logged evaluation error on the given ostream. If maxPerNode; 3577/// is zero, only the number of errors for each source (object with unique name) is listed.; 3578/// If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; 3579/// per source of errors. A truncation message is shown if there were more errors logged; 3580/// than shown.; 3581 ; 3582void RooAbsReal::printEvalErrors(std::ostream &os, Int_t maxPerNode); 3583{; 3584 if (evalErrorData().mode == CountErrors) {; 3585 os << evalErrorData().count << "" errors counted"" << std::endl;; 3586 }; 3587 ; 3588 if (maxPerNode < 0); 3589 return;; 3590 ; 3591 for (auto const &item : evalErrorData().errorList) {; 3592 if (maxPerNode == 0) {; 3593 ; 3594 // Only print node name with total number of errors; 3595 os << item.second.first;; 3596 // item.first->printStream(os,kName|kClassName|kArgs,kInline) ;; 3597 os << "" has "" << item.second.second.size() << "" errors"" << std::endl;; 3598 ; 3599 } else {; 3600 ; 3601 // Print node name and details of 'maxPerNode' errors; 3602 os << item.second.first << std::endl;; 3603 // item.first->printStream(os,kName|kClassName|kArgs,kSingleLine) ;; 3604 ; 3605 Int_t i(0);; 3606 for (auto const &item2 : item.second.second) {; 3607 os << "" "" << item2._msg << "" @ "" << item2._srvval << std::endl;; 3608 if (i > maxPerNode) {; 3609 os << "" ... (remaining "" << item.second.second.size() - maxPerNode << "" messages suppressed)""; 3610 << std::endl;; 3611 break;; 3612 }; 3613 i++;; 3614 }; 3615 }; 3616 }; 3617}; 3618 ; 3619 ; 3620 ; 3621////////////////////////////////////////////////////////////////////////////////; 3622/// Return the number of logged evaluation errors since the last clearing.; 3623 ; 3624Int_t RooAbsR",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:153862,Availability,error,errors,153862,"gged evaluation error on the given ostream. If maxPerNode; 3577/// is zero, only the number of errors for each source (object with unique name) is listed.; 3578/// If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; 3579/// per source of errors. A truncation message is shown if there were more errors logged; 3580/// than shown.; 3581 ; 3582void RooAbsReal::printEvalErrors(std::ostream &os, Int_t maxPerNode); 3583{; 3584 if (evalErrorData().mode == CountErrors) {; 3585 os << evalErrorData().count << "" errors counted"" << std::endl;; 3586 }; 3587 ; 3588 if (maxPerNode < 0); 3589 return;; 3590 ; 3591 for (auto const &item : evalErrorData().errorList) {; 3592 if (maxPerNode == 0) {; 3593 ; 3594 // Only print node name with total number of errors; 3595 os << item.second.first;; 3596 // item.first->printStream(os,kName|kClassName|kArgs,kInline) ;; 3597 os << "" has "" << item.second.second.size() << "" errors"" << std::endl;; 3598 ; 3599 } else {; 3600 ; 3601 // Print node name and details of 'maxPerNode' errors; 3602 os << item.second.first << std::endl;; 3603 // item.first->printStream(os,kName|kClassName|kArgs,kSingleLine) ;; 3604 ; 3605 Int_t i(0);; 3606 for (auto const &item2 : item.second.second) {; 3607 os << "" "" << item2._msg << "" @ "" << item2._srvval << std::endl;; 3608 if (i > maxPerNode) {; 3609 os << "" ... (remaining "" << item.second.second.size() - maxPerNode << "" messages suppressed)""; 3610 << std::endl;; 3611 break;; 3612 }; 3613 i++;; 3614 }; 3615 }; 3616 }; 3617}; 3618 ; 3619 ; 3620 ; 3621////////////////////////////////////////////////////////////////////////////////; 3622/// Return the number of logged evaluation errors since the last clearing.; 3623 ; 3624Int_t RooAbsReal::numEvalErrors(); 3625{; 3626 auto &evalErrors = evalErrorData();; 3627 if (evalErrors.mode == CountErrors) {; 3628 return evalErrors.count;; 3629 }; 3630 ; 3631 Int_t ntot(0);; 3632 for (auto const &elem : evalErrors.errorList) {; 3633 ntot += elem.seco",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:153966,Availability,error,errors,153966,"gged evaluation error on the given ostream. If maxPerNode; 3577/// is zero, only the number of errors for each source (object with unique name) is listed.; 3578/// If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; 3579/// per source of errors. A truncation message is shown if there were more errors logged; 3580/// than shown.; 3581 ; 3582void RooAbsReal::printEvalErrors(std::ostream &os, Int_t maxPerNode); 3583{; 3584 if (evalErrorData().mode == CountErrors) {; 3585 os << evalErrorData().count << "" errors counted"" << std::endl;; 3586 }; 3587 ; 3588 if (maxPerNode < 0); 3589 return;; 3590 ; 3591 for (auto const &item : evalErrorData().errorList) {; 3592 if (maxPerNode == 0) {; 3593 ; 3594 // Only print node name with total number of errors; 3595 os << item.second.first;; 3596 // item.first->printStream(os,kName|kClassName|kArgs,kInline) ;; 3597 os << "" has "" << item.second.second.size() << "" errors"" << std::endl;; 3598 ; 3599 } else {; 3600 ; 3601 // Print node name and details of 'maxPerNode' errors; 3602 os << item.second.first << std::endl;; 3603 // item.first->printStream(os,kName|kClassName|kArgs,kSingleLine) ;; 3604 ; 3605 Int_t i(0);; 3606 for (auto const &item2 : item.second.second) {; 3607 os << "" "" << item2._msg << "" @ "" << item2._srvval << std::endl;; 3608 if (i > maxPerNode) {; 3609 os << "" ... (remaining "" << item.second.second.size() - maxPerNode << "" messages suppressed)""; 3610 << std::endl;; 3611 break;; 3612 }; 3613 i++;; 3614 }; 3615 }; 3616 }; 3617}; 3618 ; 3619 ; 3620 ; 3621////////////////////////////////////////////////////////////////////////////////; 3622/// Return the number of logged evaluation errors since the last clearing.; 3623 ; 3624Int_t RooAbsReal::numEvalErrors(); 3625{; 3626 auto &evalErrors = evalErrorData();; 3627 if (evalErrors.mode == CountErrors) {; 3628 return evalErrors.count;; 3629 }; 3630 ; 3631 Int_t ntot(0);; 3632 for (auto const &elem : evalErrors.errorList) {; 3633 ntot += elem.seco",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:154605,Availability,error,errors,154605,"<< std::endl;; 3586 }; 3587 ; 3588 if (maxPerNode < 0); 3589 return;; 3590 ; 3591 for (auto const &item : evalErrorData().errorList) {; 3592 if (maxPerNode == 0) {; 3593 ; 3594 // Only print node name with total number of errors; 3595 os << item.second.first;; 3596 // item.first->printStream(os,kName|kClassName|kArgs,kInline) ;; 3597 os << "" has "" << item.second.second.size() << "" errors"" << std::endl;; 3598 ; 3599 } else {; 3600 ; 3601 // Print node name and details of 'maxPerNode' errors; 3602 os << item.second.first << std::endl;; 3603 // item.first->printStream(os,kName|kClassName|kArgs,kSingleLine) ;; 3604 ; 3605 Int_t i(0);; 3606 for (auto const &item2 : item.second.second) {; 3607 os << "" "" << item2._msg << "" @ "" << item2._srvval << std::endl;; 3608 if (i > maxPerNode) {; 3609 os << "" ... (remaining "" << item.second.second.size() - maxPerNode << "" messages suppressed)""; 3610 << std::endl;; 3611 break;; 3612 }; 3613 i++;; 3614 }; 3615 }; 3616 }; 3617}; 3618 ; 3619 ; 3620 ; 3621////////////////////////////////////////////////////////////////////////////////; 3622/// Return the number of logged evaluation errors since the last clearing.; 3623 ; 3624Int_t RooAbsReal::numEvalErrors(); 3625{; 3626 auto &evalErrors = evalErrorData();; 3627 if (evalErrors.mode == CountErrors) {; 3628 return evalErrors.count;; 3629 }; 3630 ; 3631 Int_t ntot(0);; 3632 for (auto const &elem : evalErrors.errorList) {; 3633 ntot += elem.second.second.size();; 3634 }; 3635 return ntot;; 3636}; 3637 ; 3638 ; 3639 ; 3640////////////////////////////////////////////////////////////////////////////////; 3641/// Fix the interpretation of the coefficient of any RooAddPdf component in; 3642/// the expression tree headed by this object to the given set of observables.; 3643///; 3644/// If the force flag is false, the normalization choice is only fixed for those; 3645/// RooAddPdf components that have the default 'automatic' interpretation of; 3646/// coefficients (i.e. the interpretation is defined",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:154884,Availability,error,errorList,154884,"lse {; 3600 ; 3601 // Print node name and details of 'maxPerNode' errors; 3602 os << item.second.first << std::endl;; 3603 // item.first->printStream(os,kName|kClassName|kArgs,kSingleLine) ;; 3604 ; 3605 Int_t i(0);; 3606 for (auto const &item2 : item.second.second) {; 3607 os << "" "" << item2._msg << "" @ "" << item2._srvval << std::endl;; 3608 if (i > maxPerNode) {; 3609 os << "" ... (remaining "" << item.second.second.size() - maxPerNode << "" messages suppressed)""; 3610 << std::endl;; 3611 break;; 3612 }; 3613 i++;; 3614 }; 3615 }; 3616 }; 3617}; 3618 ; 3619 ; 3620 ; 3621////////////////////////////////////////////////////////////////////////////////; 3622/// Return the number of logged evaluation errors since the last clearing.; 3623 ; 3624Int_t RooAbsReal::numEvalErrors(); 3625{; 3626 auto &evalErrors = evalErrorData();; 3627 if (evalErrors.mode == CountErrors) {; 3628 return evalErrors.count;; 3629 }; 3630 ; 3631 Int_t ntot(0);; 3632 for (auto const &elem : evalErrors.errorList) {; 3633 ntot += elem.second.second.size();; 3634 }; 3635 return ntot;; 3636}; 3637 ; 3638 ; 3639 ; 3640////////////////////////////////////////////////////////////////////////////////; 3641/// Fix the interpretation of the coefficient of any RooAddPdf component in; 3642/// the expression tree headed by this object to the given set of observables.; 3643///; 3644/// If the force flag is false, the normalization choice is only fixed for those; 3645/// RooAddPdf components that have the default 'automatic' interpretation of; 3646/// coefficients (i.e. the interpretation is defined by the observables passed; 3647/// to getVal()). If force is true, also RooAddPdf that already have a fixed; 3648/// interpretation are changed to a new fixed interpretation.; 3649 ; 3650void RooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet, bool force); 3651{; 3652 std::unique_ptr<RooArgSet> compSet{getComponents()};; 3653 for(auto * pdf : dynamic_range_cast<RooAbsPdf*>(*compSet)) {; 3654 if (pdf) {; 3",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:176493,Availability,error,error,176493,"////////////////////////////////////////////////////////; 4061/// Perform a \f$ \chi^2 \f$ fit to given histogram. By default the fit is executed through the MINUIT; 4062/// commands MIGRAD, HESSE in succession; 4063///; 4064/// The following named arguments are supported; 4065///; 4066/// <table>; 4067/// <tr><th> <th> Options to control construction of chi2; 4068/// <tr><td> `Extended(bool flag)` <td> **Only applicable when fitting a RooAbsPdf**. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight.; 4069/// This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; 4070/// - If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events; 4071/// (in RooFit jargon, ""if the pdf can be extended"").; 4072/// - Passing `Extended(true)` when the the pdf makes no prediction on the expected number of events will result in error messages,; 4073/// and the chi2 will fall back to the total data weight to scale the normalized pdf.; 4074/// - There are cases where the fit **must** be done in extended mode. This happens for example when you have a RooAddPdf; 4075/// where the coefficients represent component yields. If the fit is not extended, these coefficients will not be; 4076/// well-defined, as the RooAddPdf always normalizes itself. If you pass `Extended(false)` in such a case, an error will be; 4077/// printed and you'll most likely get garbage results.; 4078/// <tr><td> `Range(const char* name)` <td> Fit only data inside range with given name; 4079/// <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; 4080/// Multiple comma separated range names can be specified.; 4081/// <tr><td> `NumCPU(int num)` <td> Parallelize NLL calculation on num CPUs; 4082/// <tr><td> `Optimize(bool flag)` <td> Activate constant ",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:176961,Availability,error,error,176961,"ber of events predicted by the model instead of scaling by the total data weight.; 4069/// This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; 4070/// - If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events; 4071/// (in RooFit jargon, ""if the pdf can be extended"").; 4072/// - Passing `Extended(true)` when the the pdf makes no prediction on the expected number of events will result in error messages,; 4073/// and the chi2 will fall back to the total data weight to scale the normalized pdf.; 4074/// - There are cases where the fit **must** be done in extended mode. This happens for example when you have a RooAddPdf; 4075/// where the coefficients represent component yields. If the fit is not extended, these coefficients will not be; 4076/// well-defined, as the RooAddPdf always normalizes itself. If you pass `Extended(false)` in such a case, an error will be; 4077/// printed and you'll most likely get garbage results.; 4078/// <tr><td> `Range(const char* name)` <td> Fit only data inside range with given name; 4079/// <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; 4080/// Multiple comma separated range names can be specified.; 4081/// <tr><td> `NumCPU(int num)` <td> Parallelize NLL calculation on num CPUs; 4082/// <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); 4083/// <tr><td> `IntegrateBins()` <td> Integrate PDF within each bin. This sets the desired precision.; 4084///; 4085/// <tr><th> <th> Options to control flow of fit procedure; 4086/// <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; 4087/// <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; 4088/// <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS i",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:178981,Availability,error,errors,178981,"by default; 4089/// <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; 4090/// <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; 4091/// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); 4092///; 4093/// <tr><th> <th> Options to control informational output; 4094/// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit; 4095/// <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default; 4096/// <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational; 4097/// messages are suppressed as well; 4098/// <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); 4099/// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative; 4100/// value suppress output completely, a zero value will only print the error count per p.d.f component,; 4101/// a positive value is will print details of each error up to numErr messages per p.d.f component.; 4102/// </table>; 4103///; 4104 ; 4105RooFit::OwningPtr<RooFitResult> RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1, const RooCmdArg& arg2,; 4106 const RooCmdArg& arg3, const RooCmdArg& arg4, const RooCmdArg& arg5,; 4107 const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdArg& arg8); 4108{; 4109 RooLinkedList l ;; 4110 l.Add((TObject*)&arg1) ; l.Add((TObject*)&arg2) ;; 4111 l.Add((TObject*)&arg3) ; l.Add((TObject*)&arg4) ;; 4112 l.Add((TObject*)&arg5) ; l.Add((TObject*)&arg6) ;; 4113 l.Add((TObject*)&arg7) ; l.Add((TObject*)&arg8) ;; 4114 return chi2FitTo(data,l) ;; 4115}; 4116 ; 4117 ; 4118 ; 4119////////////////////////////////////////////////////////////////////////////////; 4120/// Calls RooAbsReal::createChi2",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:179110,Availability,error,error,179110,"n given subset of arguments; 4090/// <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; 4091/// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); 4092///; 4093/// <tr><th> <th> Options to control informational output; 4094/// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit; 4095/// <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default; 4096/// <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational; 4097/// messages are suppressed as well; 4098/// <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); 4099/// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative; 4100/// value suppress output completely, a zero value will only print the error count per p.d.f component,; 4101/// a positive value is will print details of each error up to numErr messages per p.d.f component.; 4102/// </table>; 4103///; 4104 ; 4105RooFit::OwningPtr<RooFitResult> RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1, const RooCmdArg& arg2,; 4106 const RooCmdArg& arg3, const RooCmdArg& arg4, const RooCmdArg& arg5,; 4107 const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdArg& arg8); 4108{; 4109 RooLinkedList l ;; 4110 l.Add((TObject*)&arg1) ; l.Add((TObject*)&arg2) ;; 4111 l.Add((TObject*)&arg3) ; l.Add((TObject*)&arg4) ;; 4112 l.Add((TObject*)&arg5) ; l.Add((TObject*)&arg6) ;; 4113 l.Add((TObject*)&arg7) ; l.Add((TObject*)&arg8) ;; 4114 return chi2FitTo(data,l) ;; 4115}; 4116 ; 4117 ; 4118 ; 4119////////////////////////////////////////////////////////////////////////////////; 4120/// Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result.; 4121//",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:179199,Availability,error,error,179199,"is produced and returned, off by default; 4091/// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); 4092///; 4093/// <tr><th> <th> Options to control informational output; 4094/// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit; 4095/// <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default; 4096/// <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational; 4097/// messages are suppressed as well; 4098/// <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); 4099/// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative; 4100/// value suppress output completely, a zero value will only print the error count per p.d.f component,; 4101/// a positive value is will print details of each error up to numErr messages per p.d.f component.; 4102/// </table>; 4103///; 4104 ; 4105RooFit::OwningPtr<RooFitResult> RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1, const RooCmdArg& arg2,; 4106 const RooCmdArg& arg3, const RooCmdArg& arg4, const RooCmdArg& arg5,; 4107 const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdArg& arg8); 4108{; 4109 RooLinkedList l ;; 4110 l.Add((TObject*)&arg1) ; l.Add((TObject*)&arg2) ;; 4111 l.Add((TObject*)&arg3) ; l.Add((TObject*)&arg4) ;; 4112 l.Add((TObject*)&arg5) ; l.Add((TObject*)&arg6) ;; 4113 l.Add((TObject*)&arg7) ; l.Add((TObject*)&arg8) ;; 4114 return chi2FitTo(data,l) ;; 4115}; 4116 ; 4117 ; 4118 ; 4119////////////////////////////////////////////////////////////////////////////////; 4120/// Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result.; 4121///; 4122/// List of possible commands in the `cmdList`:; 4123///; 4124/// <table>; 4125/// <tr><th> Type of ",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:180340,Availability,error,error,180340," p.d.f component.; 4102/// </table>; 4103///; 4104 ; 4105RooFit::OwningPtr<RooFitResult> RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1, const RooCmdArg& arg2,; 4106 const RooCmdArg& arg3, const RooCmdArg& arg4, const RooCmdArg& arg5,; 4107 const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdArg& arg8); 4108{; 4109 RooLinkedList l ;; 4110 l.Add((TObject*)&arg1) ; l.Add((TObject*)&arg2) ;; 4111 l.Add((TObject*)&arg3) ; l.Add((TObject*)&arg4) ;; 4112 l.Add((TObject*)&arg5) ; l.Add((TObject*)&arg6) ;; 4113 l.Add((TObject*)&arg7) ; l.Add((TObject*)&arg8) ;; 4114 return chi2FitTo(data,l) ;; 4115}; 4116 ; 4117 ; 4118 ; 4119////////////////////////////////////////////////////////////////////////////////; 4120/// Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result.; 4121///; 4122/// List of possible commands in the `cmdList`:; 4123///; 4124/// <table>; 4125/// <tr><th> Type of CmdArg <th> Effect on \f$ \chi^2 \f$; 4126/// <tr><td>; 4127/// <tr><td> `DataError()` <td> Choose between:; 4128/// - RooAbsData::Expected: Expected Poisson error (\f$ \sqrt{n_\text{expected}} \f$ from the PDF).; 4129/// - RooAbsData::SumW2: The observed error from the square root of the sum of weights,; 4130/// i.e., symmetric errors calculated with the standard deviation of a Poisson distribution.; 4131/// - RooAbsData::Poisson: Asymmetric errors from the central 68 % interval around a Poisson distribution with mean \f$ n_\text{observed} \f$.; 4132/// If for a given bin \f$ n_\text{expected} \f$ is lower than the \f$ n_\text{observed} \f$, the lower uncertainty is taken; 4133/// (e.g., the difference between the mean and the 16 % quantile).; 4134/// If \f$ n_\text{expected} \f$ is higher than \f$ n_\text{observed} \f$, the higher uncertainty is taken; 4135/// (e.g., the difference between the 84 % quantile and the mean).; 4136/// - RooAbsData::Auto (default): RooAbsData::Expected for unweighted data, RooAbsData::SumW2 for weighted",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:180438,Availability,error,error,180438,"dArg& arg4, const RooCmdArg& arg5,; 4107 const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdArg& arg8); 4108{; 4109 RooLinkedList l ;; 4110 l.Add((TObject*)&arg1) ; l.Add((TObject*)&arg2) ;; 4111 l.Add((TObject*)&arg3) ; l.Add((TObject*)&arg4) ;; 4112 l.Add((TObject*)&arg5) ; l.Add((TObject*)&arg6) ;; 4113 l.Add((TObject*)&arg7) ; l.Add((TObject*)&arg8) ;; 4114 return chi2FitTo(data,l) ;; 4115}; 4116 ; 4117 ; 4118 ; 4119////////////////////////////////////////////////////////////////////////////////; 4120/// Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result.; 4121///; 4122/// List of possible commands in the `cmdList`:; 4123///; 4124/// <table>; 4125/// <tr><th> Type of CmdArg <th> Effect on \f$ \chi^2 \f$; 4126/// <tr><td>; 4127/// <tr><td> `DataError()` <td> Choose between:; 4128/// - RooAbsData::Expected: Expected Poisson error (\f$ \sqrt{n_\text{expected}} \f$ from the PDF).; 4129/// - RooAbsData::SumW2: The observed error from the square root of the sum of weights,; 4130/// i.e., symmetric errors calculated with the standard deviation of a Poisson distribution.; 4131/// - RooAbsData::Poisson: Asymmetric errors from the central 68 % interval around a Poisson distribution with mean \f$ n_\text{observed} \f$.; 4132/// If for a given bin \f$ n_\text{expected} \f$ is lower than the \f$ n_\text{observed} \f$, the lower uncertainty is taken; 4133/// (e.g., the difference between the mean and the 16 % quantile).; 4134/// If \f$ n_\text{expected} \f$ is higher than \f$ n_\text{observed} \f$, the higher uncertainty is taken; 4135/// (e.g., the difference between the 84 % quantile and the mean).; 4136/// - RooAbsData::Auto (default): RooAbsData::Expected for unweighted data, RooAbsData::SumW2 for weighted data.; 4137/// <tr><td>; 4138/// `Extended()` <td> Use expected number of events of an extended p.d.f as normalization; 4139/// <tr><td>; 4140/// NumCPU() <td> Activate parallel processing feature; 4141/// <tr><td>;",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:180513,Availability,error,errors,180513,"mdArg& arg8); 4108{; 4109 RooLinkedList l ;; 4110 l.Add((TObject*)&arg1) ; l.Add((TObject*)&arg2) ;; 4111 l.Add((TObject*)&arg3) ; l.Add((TObject*)&arg4) ;; 4112 l.Add((TObject*)&arg5) ; l.Add((TObject*)&arg6) ;; 4113 l.Add((TObject*)&arg7) ; l.Add((TObject*)&arg8) ;; 4114 return chi2FitTo(data,l) ;; 4115}; 4116 ; 4117 ; 4118 ; 4119////////////////////////////////////////////////////////////////////////////////; 4120/// Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result.; 4121///; 4122/// List of possible commands in the `cmdList`:; 4123///; 4124/// <table>; 4125/// <tr><th> Type of CmdArg <th> Effect on \f$ \chi^2 \f$; 4126/// <tr><td>; 4127/// <tr><td> `DataError()` <td> Choose between:; 4128/// - RooAbsData::Expected: Expected Poisson error (\f$ \sqrt{n_\text{expected}} \f$ from the PDF).; 4129/// - RooAbsData::SumW2: The observed error from the square root of the sum of weights,; 4130/// i.e., symmetric errors calculated with the standard deviation of a Poisson distribution.; 4131/// - RooAbsData::Poisson: Asymmetric errors from the central 68 % interval around a Poisson distribution with mean \f$ n_\text{observed} \f$.; 4132/// If for a given bin \f$ n_\text{expected} \f$ is lower than the \f$ n_\text{observed} \f$, the lower uncertainty is taken; 4133/// (e.g., the difference between the mean and the 16 % quantile).; 4134/// If \f$ n_\text{expected} \f$ is higher than \f$ n_\text{observed} \f$, the higher uncertainty is taken; 4135/// (e.g., the difference between the 84 % quantile and the mean).; 4136/// - RooAbsData::Auto (default): RooAbsData::Expected for unweighted data, RooAbsData::SumW2 for weighted data.; 4137/// <tr><td>; 4138/// `Extended()` <td> Use expected number of events of an extended p.d.f as normalization; 4139/// <tr><td>; 4140/// NumCPU() <td> Activate parallel processing feature; 4141/// <tr><td>; 4142/// Range() <td> Calculate \f$ \chi^2 \f$ only in selected region; 4143/// <tr><td>; 4144//",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:180629,Availability,error,errors,180629,"ject*)&arg3) ; l.Add((TObject*)&arg4) ;; 4112 l.Add((TObject*)&arg5) ; l.Add((TObject*)&arg6) ;; 4113 l.Add((TObject*)&arg7) ; l.Add((TObject*)&arg8) ;; 4114 return chi2FitTo(data,l) ;; 4115}; 4116 ; 4117 ; 4118 ; 4119////////////////////////////////////////////////////////////////////////////////; 4120/// Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result.; 4121///; 4122/// List of possible commands in the `cmdList`:; 4123///; 4124/// <table>; 4125/// <tr><th> Type of CmdArg <th> Effect on \f$ \chi^2 \f$; 4126/// <tr><td>; 4127/// <tr><td> `DataError()` <td> Choose between:; 4128/// - RooAbsData::Expected: Expected Poisson error (\f$ \sqrt{n_\text{expected}} \f$ from the PDF).; 4129/// - RooAbsData::SumW2: The observed error from the square root of the sum of weights,; 4130/// i.e., symmetric errors calculated with the standard deviation of a Poisson distribution.; 4131/// - RooAbsData::Poisson: Asymmetric errors from the central 68 % interval around a Poisson distribution with mean \f$ n_\text{observed} \f$.; 4132/// If for a given bin \f$ n_\text{expected} \f$ is lower than the \f$ n_\text{observed} \f$, the lower uncertainty is taken; 4133/// (e.g., the difference between the mean and the 16 % quantile).; 4134/// If \f$ n_\text{expected} \f$ is higher than \f$ n_\text{observed} \f$, the higher uncertainty is taken; 4135/// (e.g., the difference between the 84 % quantile and the mean).; 4136/// - RooAbsData::Auto (default): RooAbsData::Expected for unweighted data, RooAbsData::SumW2 for weighted data.; 4137/// <tr><td>; 4138/// `Extended()` <td> Use expected number of events of an extended p.d.f as normalization; 4139/// <tr><td>; 4140/// NumCPU() <td> Activate parallel processing feature; 4141/// <tr><td>; 4142/// Range() <td> Calculate \f$ \chi^2 \f$ only in selected region; 4143/// <tr><td>; 4144/// Verbose() <td> Verbose output of GOF framework; 4145/// <tr><td>; 4146/// IntegrateBins() <td> Integrate PDF withi",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:184898,Availability,error,errors,184898,";; 4192 return createChi2(data, l);; 4193}; 4194 ; 4195////////////////////////////////////////////////////////////////////////////////; 4196/// \see RooAbsReal::createChi2(RooDataHist&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&); 4197/// \param data hist data; 4198/// \param cmdList List with RooCmdArg() from the table; 4199 ; 4200RooFit::OwningPtr<RooAbsReal> RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); 4201{; 4202 return RooFit::makeOwningPtr(RooFit::FitHelpers::createChi2(*this, data, cmdList));; 4203}; 4204 ; 4205////////////////////////////////////////////////////////////////////////////////; 4206/// Perform a 2-D \f$ \chi^2 \f$ fit using a series of x and y values stored in the dataset `xydata`.; 4207/// The y values can either be the event weights, or can be another column designated; 4208/// by the YVar() argument. The y value must have errors defined for the \f$ \chi^2 \f$ to; 4209/// be well defined.; 4210///; 4211/// <table>; 4212/// <tr><th><th> Options to control construction of the chi-square; 4213/// <tr><td> `YVar(RooRealVar& yvar)` <td> Designate given column in dataset as Y value; 4214/// <tr><td> `Integrate(bool flag)` <td> Integrate function over range specified by X errors; 4215/// rather than take value at bin center.; 4216///; 4217/// <tr><th><th> Options to control flow of fit procedure; 4218/// <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; 4219/// <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; 4220/// <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, on by default; 4221/// <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; 4222/// <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; 4223/// <tr><td> `Str",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:185247,Availability,error,errors,185247,"mdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&); 4197/// \param data hist data; 4198/// \param cmdList List with RooCmdArg() from the table; 4199 ; 4200RooFit::OwningPtr<RooAbsReal> RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); 4201{; 4202 return RooFit::makeOwningPtr(RooFit::FitHelpers::createChi2(*this, data, cmdList));; 4203}; 4204 ; 4205////////////////////////////////////////////////////////////////////////////////; 4206/// Perform a 2-D \f$ \chi^2 \f$ fit using a series of x and y values stored in the dataset `xydata`.; 4207/// The y values can either be the event weights, or can be another column designated; 4208/// by the YVar() argument. The y value must have errors defined for the \f$ \chi^2 \f$ to; 4209/// be well defined.; 4210///; 4211/// <table>; 4212/// <tr><th><th> Options to control construction of the chi-square; 4213/// <tr><td> `YVar(RooRealVar& yvar)` <td> Designate given column in dataset as Y value; 4214/// <tr><td> `Integrate(bool flag)` <td> Integrate function over range specified by X errors; 4215/// rather than take value at bin center.; 4216///; 4217/// <tr><th><th> Options to control flow of fit procedure; 4218/// <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; 4219/// <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; 4220/// <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, on by default; 4221/// <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; 4222/// <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; 4223/// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); 4224///; 4225/// <tr><th><th> Options to control informational output; 4226/// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose ",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:186656,Availability,error,errors,186656," by default; 4221/// <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; 4222/// <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; 4223/// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); 4224///; 4225/// <tr><th><th> Options to control informational output; 4226/// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit; 4227/// <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default; 4228/// <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational; 4229/// messages are suppressed as well; 4230/// <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); 4231/// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative; 4232/// value suppress output completely, a zero value will only print the error count per p.d.f component,; 4233/// a positive value is will print details of each error up to numErr messages per p.d.f component.; 4234/// </table>; 4235 ; 4236RooFit::OwningPtr<RooFitResult> RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1, const RooCmdArg& arg2,; 4237 const RooCmdArg& arg3, const RooCmdArg& arg4, const RooCmdArg& arg5,; 4238 const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdArg& arg8); 4239{; 4240 RooLinkedList l ;; 4241 l.Add((TObject*)&arg1) ; l.Add((TObject*)&arg2) ;; 4242 l.Add((TObject*)&arg3) ; l.Add((TObject*)&arg4) ;; 4243 l.Add((TObject*)&arg5) ; l.Add((TObject*)&arg6) ;; 4244 l.Add((TObject*)&arg7) ; l.Add((TObject*)&arg8) ;; 4245 return chi2FitTo(xydata,l) ;; 4246}; 4247 ; 4248 ; 4249 ; 4250 ; 4251////////////////////////////////////////////////////////////////////////////////; 4252/// \copydoc RooAbsReal::chi2Fi",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:186785,Availability,error,error,186785,"on given subset of arguments; 4222/// <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; 4223/// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); 4224///; 4225/// <tr><th><th> Options to control informational output; 4226/// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit; 4227/// <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default; 4228/// <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational; 4229/// messages are suppressed as well; 4230/// <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); 4231/// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative; 4232/// value suppress output completely, a zero value will only print the error count per p.d.f component,; 4233/// a positive value is will print details of each error up to numErr messages per p.d.f component.; 4234/// </table>; 4235 ; 4236RooFit::OwningPtr<RooFitResult> RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1, const RooCmdArg& arg2,; 4237 const RooCmdArg& arg3, const RooCmdArg& arg4, const RooCmdArg& arg5,; 4238 const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdArg& arg8); 4239{; 4240 RooLinkedList l ;; 4241 l.Add((TObject*)&arg1) ; l.Add((TObject*)&arg2) ;; 4242 l.Add((TObject*)&arg3) ; l.Add((TObject*)&arg4) ;; 4243 l.Add((TObject*)&arg5) ; l.Add((TObject*)&arg6) ;; 4244 l.Add((TObject*)&arg7) ; l.Add((TObject*)&arg8) ;; 4245 return chi2FitTo(xydata,l) ;; 4246}; 4247 ; 4248 ; 4249 ; 4250 ; 4251////////////////////////////////////////////////////////////////////////////////; 4252/// \copydoc RooAbsReal::chi2FitTo(RooDataSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdA",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:186874,Availability,error,error,186874," is produced and returned, off by default; 4223/// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); 4224///; 4225/// <tr><th><th> Options to control informational output; 4226/// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit; 4227/// <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default; 4228/// <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational; 4229/// messages are suppressed as well; 4230/// <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); 4231/// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative; 4232/// value suppress output completely, a zero value will only print the error count per p.d.f component,; 4233/// a positive value is will print details of each error up to numErr messages per p.d.f component.; 4234/// </table>; 4235 ; 4236RooFit::OwningPtr<RooFitResult> RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1, const RooCmdArg& arg2,; 4237 const RooCmdArg& arg3, const RooCmdArg& arg4, const RooCmdArg& arg5,; 4238 const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdArg& arg8); 4239{; 4240 RooLinkedList l ;; 4241 l.Add((TObject*)&arg1) ; l.Add((TObject*)&arg2) ;; 4242 l.Add((TObject*)&arg3) ; l.Add((TObject*)&arg4) ;; 4243 l.Add((TObject*)&arg5) ; l.Add((TObject*)&arg6) ;; 4244 l.Add((TObject*)&arg7) ; l.Add((TObject*)&arg8) ;; 4245 return chi2FitTo(xydata,l) ;; 4246}; 4247 ; 4248 ; 4249 ; 4250 ; 4251////////////////////////////////////////////////////////////////////////////////; 4252/// \copydoc RooAbsReal::chi2FitTo(RooDataSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&); 4253 ; 4254RooFit::OwningPtr<RooF",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:188402,Availability,error,errors,188402,"4244 l.Add((TObject*)&arg7) ; l.Add((TObject*)&arg8) ;; 4245 return chi2FitTo(xydata,l) ;; 4246}; 4247 ; 4248 ; 4249 ; 4250 ; 4251////////////////////////////////////////////////////////////////////////////////; 4252/// \copydoc RooAbsReal::chi2FitTo(RooDataSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&); 4253 ; 4254RooFit::OwningPtr<RooFitResult> RooAbsReal::chi2FitTo(RooDataSet &xydata, const RooLinkedList &cmdList); 4255{; 4256 return RooFit::makeOwningPtr(RooFit::FitHelpers::fitTo(*this, xydata, cmdList, true));; 4257}; 4258 ; 4259 ; 4260 ; 4261 ; 4262////////////////////////////////////////////////////////////////////////////////; 4263/// Create a \f$ \chi^2 \f$ from a series of x and y values stored in a dataset.; 4264/// The y values can either be the event weights (default), or can be another column designated; 4265/// by the YVar() argument. The y value must have errors defined for the \f$ \chi^2 \f$ to; 4266/// be well defined.; 4267///; 4268/// The following named arguments are supported; 4269///; 4270/// | | Options to control construction of the \f$ \chi^2 \f$; 4271/// |-|-----------------------------------------; 4272/// | `YVar(RooRealVar& yvar)` | Designate given column in dataset as Y value; 4273/// | `Integrate(bool flag)` | Integrate function over range specified by X errors rather than take value at bin center.; 4274///; 4275 ; 4276RooFit::OwningPtr<RooAbsReal> RooAbsReal::createChi2(RooDataSet& data, const RooCmdArg& arg1, const RooCmdArg& arg2,; 4277 const RooCmdArg& arg3, const RooCmdArg& arg4, const RooCmdArg& arg5,; 4278 const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdArg& arg8); 4279{; 4280 RooLinkedList l ;; 4281 l.Add((TObject*)&arg1) ; l.Add((TObject*)&arg2) ;; 4282 l.Add((TObject*)&arg3) ; l.Add((TObject*)&arg4) ;; 4283 l.Add((TObject*)&arg5) ; l.Add((TObject*)&arg6) ;; 4284 l.Add((TObject*)&arg7) ; l.Add((TObject*)&arg8) ;; 4285 retur",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:188825,Availability,error,errors,188825,"FitTo(RooDataSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&); 4253 ; 4254RooFit::OwningPtr<RooFitResult> RooAbsReal::chi2FitTo(RooDataSet &xydata, const RooLinkedList &cmdList); 4255{; 4256 return RooFit::makeOwningPtr(RooFit::FitHelpers::fitTo(*this, xydata, cmdList, true));; 4257}; 4258 ; 4259 ; 4260 ; 4261 ; 4262////////////////////////////////////////////////////////////////////////////////; 4263/// Create a \f$ \chi^2 \f$ from a series of x and y values stored in a dataset.; 4264/// The y values can either be the event weights (default), or can be another column designated; 4265/// by the YVar() argument. The y value must have errors defined for the \f$ \chi^2 \f$ to; 4266/// be well defined.; 4267///; 4268/// The following named arguments are supported; 4269///; 4270/// | | Options to control construction of the \f$ \chi^2 \f$; 4271/// |-|-----------------------------------------; 4272/// | `YVar(RooRealVar& yvar)` | Designate given column in dataset as Y value; 4273/// | `Integrate(bool flag)` | Integrate function over range specified by X errors rather than take value at bin center.; 4274///; 4275 ; 4276RooFit::OwningPtr<RooAbsReal> RooAbsReal::createChi2(RooDataSet& data, const RooCmdArg& arg1, const RooCmdArg& arg2,; 4277 const RooCmdArg& arg3, const RooCmdArg& arg4, const RooCmdArg& arg5,; 4278 const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdArg& arg8); 4279{; 4280 RooLinkedList l ;; 4281 l.Add((TObject*)&arg1) ; l.Add((TObject*)&arg2) ;; 4282 l.Add((TObject*)&arg3) ; l.Add((TObject*)&arg4) ;; 4283 l.Add((TObject*)&arg5) ; l.Add((TObject*)&arg6) ;; 4284 l.Add((TObject*)&arg7) ; l.Add((TObject*)&arg8) ;; 4285 return createChi2(data,l) ;; 4286}; 4287 ; 4288 ; 4289////////////////////////////////////////////////////////////////////////////////; 4290/// See RooAbsReal::createChi2(RooDataSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:190098,Availability,error,error,190098,"| `Integrate(bool flag)` | Integrate function over range specified by X errors rather than take value at bin center.; 4274///; 4275 ; 4276RooFit::OwningPtr<RooAbsReal> RooAbsReal::createChi2(RooDataSet& data, const RooCmdArg& arg1, const RooCmdArg& arg2,; 4277 const RooCmdArg& arg3, const RooCmdArg& arg4, const RooCmdArg& arg5,; 4278 const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdArg& arg8); 4279{; 4280 RooLinkedList l ;; 4281 l.Add((TObject*)&arg1) ; l.Add((TObject*)&arg2) ;; 4282 l.Add((TObject*)&arg3) ; l.Add((TObject*)&arg4) ;; 4283 l.Add((TObject*)&arg5) ; l.Add((TObject*)&arg6) ;; 4284 l.Add((TObject*)&arg7) ; l.Add((TObject*)&arg8) ;; 4285 return createChi2(data,l) ;; 4286}; 4287 ; 4288 ; 4289////////////////////////////////////////////////////////////////////////////////; 4290/// See RooAbsReal::createChi2(RooDataSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&); 4291 ; 4292RooFit::OwningPtr<RooAbsReal> RooAbsReal::createChi2(RooDataSet &data, const RooLinkedList &cmdList); 4293{; 4294 return RooFit::makeOwningPtr(RooFit::FitHelpers::createChi2(*this, data, cmdList));; 4295}; 4296 ; 4297 ; 4298 ; 4299////////////////////////////////////////////////////////////////////////////////; 4300/// Return current evaluation error logging mode.; 4301 ; 4302RooAbsReal::ErrorLoggingMode RooAbsReal::evalErrorLoggingMode(); 4303{; 4304 return evalErrorData().mode ;; 4305}; 4306 ; 4307////////////////////////////////////////////////////////////////////////////////; 4308/// Set evaluation error logging mode. Options are; 4309///; 4310/// PrintErrors - Print each error through RooMsgService() as it occurs; 4311/// CollectErrors - Accumulate errors, but do not print them. A subsequent call; 4312/// to printEvalErrors() will print a summary; 4313/// CountErrors - Accumulate error count, but do not print them.; 4314///; 4315 ; 4316void RooAbsReal::setEvalErrorLoggingMode(RooAbsR",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:190361,Availability,error,error,190361,"3 l.Add((TObject*)&arg5) ; l.Add((TObject*)&arg6) ;; 4284 l.Add((TObject*)&arg7) ; l.Add((TObject*)&arg8) ;; 4285 return createChi2(data,l) ;; 4286}; 4287 ; 4288 ; 4289////////////////////////////////////////////////////////////////////////////////; 4290/// See RooAbsReal::createChi2(RooDataSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&); 4291 ; 4292RooFit::OwningPtr<RooAbsReal> RooAbsReal::createChi2(RooDataSet &data, const RooLinkedList &cmdList); 4293{; 4294 return RooFit::makeOwningPtr(RooFit::FitHelpers::createChi2(*this, data, cmdList));; 4295}; 4296 ; 4297 ; 4298 ; 4299////////////////////////////////////////////////////////////////////////////////; 4300/// Return current evaluation error logging mode.; 4301 ; 4302RooAbsReal::ErrorLoggingMode RooAbsReal::evalErrorLoggingMode(); 4303{; 4304 return evalErrorData().mode ;; 4305}; 4306 ; 4307////////////////////////////////////////////////////////////////////////////////; 4308/// Set evaluation error logging mode. Options are; 4309///; 4310/// PrintErrors - Print each error through RooMsgService() as it occurs; 4311/// CollectErrors - Accumulate errors, but do not print them. A subsequent call; 4312/// to printEvalErrors() will print a summary; 4313/// CountErrors - Accumulate error count, but do not print them.; 4314///; 4315 ; 4316void RooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); 4317{; 4318 evalErrorData().mode = m;; 4319}; 4320 ; 4321 ; 4322////////////////////////////////////////////////////////////////////////////////; 4323 ; 4324void RooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); 4325{; 4326 std::string plist ;; 4327 for (auto const* arg : paramVars) {; 4328 if (!dependsOnValue(*arg)) {; 4329 coutW(InputArguments) << ""RooAbsReal::setParameterizeIntegral("" << GetName(); 4330 << "") function does not depend on listed parameter "" << arg->GetName() << "", ignoring"" << std::endl ",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:190436,Availability,error,error,190436,"4288 ; 4289////////////////////////////////////////////////////////////////////////////////; 4290/// See RooAbsReal::createChi2(RooDataSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&); 4291 ; 4292RooFit::OwningPtr<RooAbsReal> RooAbsReal::createChi2(RooDataSet &data, const RooLinkedList &cmdList); 4293{; 4294 return RooFit::makeOwningPtr(RooFit::FitHelpers::createChi2(*this, data, cmdList));; 4295}; 4296 ; 4297 ; 4298 ; 4299////////////////////////////////////////////////////////////////////////////////; 4300/// Return current evaluation error logging mode.; 4301 ; 4302RooAbsReal::ErrorLoggingMode RooAbsReal::evalErrorLoggingMode(); 4303{; 4304 return evalErrorData().mode ;; 4305}; 4306 ; 4307////////////////////////////////////////////////////////////////////////////////; 4308/// Set evaluation error logging mode. Options are; 4309///; 4310/// PrintErrors - Print each error through RooMsgService() as it occurs; 4311/// CollectErrors - Accumulate errors, but do not print them. A subsequent call; 4312/// to printEvalErrors() will print a summary; 4313/// CountErrors - Accumulate error count, but do not print them.; 4314///; 4315 ; 4316void RooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); 4317{; 4318 evalErrorData().mode = m;; 4319}; 4320 ; 4321 ; 4322////////////////////////////////////////////////////////////////////////////////; 4323 ; 4324void RooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); 4325{; 4326 std::string plist ;; 4327 for (auto const* arg : paramVars) {; 4328 if (!dependsOnValue(*arg)) {; 4329 coutW(InputArguments) << ""RooAbsReal::setParameterizeIntegral("" << GetName(); 4330 << "") function does not depend on listed parameter "" << arg->GetName() << "", ignoring"" << std::endl ;; 4331 continue ;; 4332 }; 4333 if (!plist.empty()) plist += "":"" ;; 4334 plist += arg->GetName() ;; 4335 }; 4336 setStringAttribute(""CACHEPARAMINT"",plist.c_s",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:190515,Availability,error,errors,190515,"4288 ; 4289////////////////////////////////////////////////////////////////////////////////; 4290/// See RooAbsReal::createChi2(RooDataSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&); 4291 ; 4292RooFit::OwningPtr<RooAbsReal> RooAbsReal::createChi2(RooDataSet &data, const RooLinkedList &cmdList); 4293{; 4294 return RooFit::makeOwningPtr(RooFit::FitHelpers::createChi2(*this, data, cmdList));; 4295}; 4296 ; 4297 ; 4298 ; 4299////////////////////////////////////////////////////////////////////////////////; 4300/// Return current evaluation error logging mode.; 4301 ; 4302RooAbsReal::ErrorLoggingMode RooAbsReal::evalErrorLoggingMode(); 4303{; 4304 return evalErrorData().mode ;; 4305}; 4306 ; 4307////////////////////////////////////////////////////////////////////////////////; 4308/// Set evaluation error logging mode. Options are; 4309///; 4310/// PrintErrors - Print each error through RooMsgService() as it occurs; 4311/// CollectErrors - Accumulate errors, but do not print them. A subsequent call; 4312/// to printEvalErrors() will print a summary; 4313/// CountErrors - Accumulate error count, but do not print them.; 4314///; 4315 ; 4316void RooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); 4317{; 4318 evalErrorData().mode = m;; 4319}; 4320 ; 4321 ; 4322////////////////////////////////////////////////////////////////////////////////; 4323 ; 4324void RooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); 4325{; 4326 std::string plist ;; 4327 for (auto const* arg : paramVars) {; 4328 if (!dependsOnValue(*arg)) {; 4329 coutW(InputArguments) << ""RooAbsReal::setParameterizeIntegral("" << GetName(); 4330 << "") function does not depend on listed parameter "" << arg->GetName() << "", ignoring"" << std::endl ;; 4331 continue ;; 4332 }; 4333 if (!plist.empty()) plist += "":"" ;; 4334 plist += arg->GetName() ;; 4335 }; 4336 setStringAttribute(""CACHEPARAMINT"",plist.c_s",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:190649,Availability,error,error,190649,"Arg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&); 4291 ; 4292RooFit::OwningPtr<RooAbsReal> RooAbsReal::createChi2(RooDataSet &data, const RooLinkedList &cmdList); 4293{; 4294 return RooFit::makeOwningPtr(RooFit::FitHelpers::createChi2(*this, data, cmdList));; 4295}; 4296 ; 4297 ; 4298 ; 4299////////////////////////////////////////////////////////////////////////////////; 4300/// Return current evaluation error logging mode.; 4301 ; 4302RooAbsReal::ErrorLoggingMode RooAbsReal::evalErrorLoggingMode(); 4303{; 4304 return evalErrorData().mode ;; 4305}; 4306 ; 4307////////////////////////////////////////////////////////////////////////////////; 4308/// Set evaluation error logging mode. Options are; 4309///; 4310/// PrintErrors - Print each error through RooMsgService() as it occurs; 4311/// CollectErrors - Accumulate errors, but do not print them. A subsequent call; 4312/// to printEvalErrors() will print a summary; 4313/// CountErrors - Accumulate error count, but do not print them.; 4314///; 4315 ; 4316void RooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); 4317{; 4318 evalErrorData().mode = m;; 4319}; 4320 ; 4321 ; 4322////////////////////////////////////////////////////////////////////////////////; 4323 ; 4324void RooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); 4325{; 4326 std::string plist ;; 4327 for (auto const* arg : paramVars) {; 4328 if (!dependsOnValue(*arg)) {; 4329 coutW(InputArguments) << ""RooAbsReal::setParameterizeIntegral("" << GetName(); 4330 << "") function does not depend on listed parameter "" << arg->GetName() << "", ignoring"" << std::endl ;; 4331 continue ;; 4332 }; 4333 if (!plist.empty()) plist += "":"" ;; 4334 plist += arg->GetName() ;; 4335 }; 4336 setStringAttribute(""CACHEPARAMINT"",plist.c_str()) ;; 4337}; 4338 ; 4339 ; 4340/** Base function for computing multiple values of a RooAbsReal.; 4341\param ctx An evaluation context object; 4342**/",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:195248,Availability,error,errorMsg,195248," For each event, write temporary values into our servers' caches, and run a single-value computation.; 4407 ; 4408 for (std::size_t i=0; i < output.size(); ++i) {; 4409 for (auto& serv : ourServers) {; 4410 serv.server->setCachedValue(serv.batch[std::min(i, serv.batch.size()-1)], false);; 4411 }; 4412 ; 4413 output[i] = evaluate();; 4414 }; 4415}; 4416 ; 4417////////////////////////////////////////////////////////////////////////////////; 4418/// This function defines the analytical integral translation for the class.; 4419///; 4420/// \param[in] code The code that decides the integrands.; 4421/// \param[in] rangeName Name of the normalization range.; 4422/// \param[in] ctx An object to manage auxiliary information for code-squashing.; 4423///; 4424/// \returns The representative code string of the integral for the given object.; 4425std::string RooAbsReal::buildCallToAnalyticIntegral(Int_t /* code */, const char * /* rangeName */,; 4426 RooFit::Detail::CodeSquashContext & /*ctx*/) const; 4427{; 4428 std::stringstream errorMsg;; 4429 errorMsg << ""An analytical integral function for class \"""" << ClassName() << ""\"" has not yet been implemented."";; 4430 coutE(Minimization) << errorMsg.str() << std::endl;; 4431 throw std::runtime_error(errorMsg.str().c_str());; 4432}; 4433 ; 4434double RooAbsReal::_DEBUG_getVal(const RooArgSet* normalisationSet) const {; 4435 ; 4436 const bool tmpFast = _fast;; 4437 const double tmp = _value;; 4438 ; 4439 double fullEval = 0.;; 4440 try {; 4441 fullEval = getValV(normalisationSet);; 4442 }; 4443 catch (CachingError& error) {; 4444 throw CachingError(std::move(error),; 4445 FormatPdfTree() << *this);; 4446 }; 4447 ; 4448 const double ret = (_fast && !_inhibitDirty) ? _value : fullEval;; 4449 ; 4450 if (std::isfinite(ret) && ( ret != 0. ? (ret - fullEval)/ret : ret - fullEval) > 1.E-9) {; 4451#ifndef NDEBUG; 4452 gSystem->StackTrace();; 4453#endif; 4454 FormatPdfTree formatter;; 4455 formatter << ""--> (Scalar computation wrong here:)\n""; ",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:195264,Availability,error,errorMsg,195264," For each event, write temporary values into our servers' caches, and run a single-value computation.; 4407 ; 4408 for (std::size_t i=0; i < output.size(); ++i) {; 4409 for (auto& serv : ourServers) {; 4410 serv.server->setCachedValue(serv.batch[std::min(i, serv.batch.size()-1)], false);; 4411 }; 4412 ; 4413 output[i] = evaluate();; 4414 }; 4415}; 4416 ; 4417////////////////////////////////////////////////////////////////////////////////; 4418/// This function defines the analytical integral translation for the class.; 4419///; 4420/// \param[in] code The code that decides the integrands.; 4421/// \param[in] rangeName Name of the normalization range.; 4422/// \param[in] ctx An object to manage auxiliary information for code-squashing.; 4423///; 4424/// \returns The representative code string of the integral for the given object.; 4425std::string RooAbsReal::buildCallToAnalyticIntegral(Int_t /* code */, const char * /* rangeName */,; 4426 RooFit::Detail::CodeSquashContext & /*ctx*/) const; 4427{; 4428 std::stringstream errorMsg;; 4429 errorMsg << ""An analytical integral function for class \"""" << ClassName() << ""\"" has not yet been implemented."";; 4430 coutE(Minimization) << errorMsg.str() << std::endl;; 4431 throw std::runtime_error(errorMsg.str().c_str());; 4432}; 4433 ; 4434double RooAbsReal::_DEBUG_getVal(const RooArgSet* normalisationSet) const {; 4435 ; 4436 const bool tmpFast = _fast;; 4437 const double tmp = _value;; 4438 ; 4439 double fullEval = 0.;; 4440 try {; 4441 fullEval = getValV(normalisationSet);; 4442 }; 4443 catch (CachingError& error) {; 4444 throw CachingError(std::move(error),; 4445 FormatPdfTree() << *this);; 4446 }; 4447 ; 4448 const double ret = (_fast && !_inhibitDirty) ? _value : fullEval;; 4449 ; 4450 if (std::isfinite(ret) && ( ret != 0. ? (ret - fullEval)/ret : ret - fullEval) > 1.E-9) {; 4451#ifndef NDEBUG; 4452 gSystem->StackTrace();; 4453#endif; 4454 FormatPdfTree formatter;; 4455 formatter << ""--> (Scalar computation wrong here:)\n""; ",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:195406,Availability,error,errorMsg,195406,"serv : ourServers) {; 4410 serv.server->setCachedValue(serv.batch[std::min(i, serv.batch.size()-1)], false);; 4411 }; 4412 ; 4413 output[i] = evaluate();; 4414 }; 4415}; 4416 ; 4417////////////////////////////////////////////////////////////////////////////////; 4418/// This function defines the analytical integral translation for the class.; 4419///; 4420/// \param[in] code The code that decides the integrands.; 4421/// \param[in] rangeName Name of the normalization range.; 4422/// \param[in] ctx An object to manage auxiliary information for code-squashing.; 4423///; 4424/// \returns The representative code string of the integral for the given object.; 4425std::string RooAbsReal::buildCallToAnalyticIntegral(Int_t /* code */, const char * /* rangeName */,; 4426 RooFit::Detail::CodeSquashContext & /*ctx*/) const; 4427{; 4428 std::stringstream errorMsg;; 4429 errorMsg << ""An analytical integral function for class \"""" << ClassName() << ""\"" has not yet been implemented."";; 4430 coutE(Minimization) << errorMsg.str() << std::endl;; 4431 throw std::runtime_error(errorMsg.str().c_str());; 4432}; 4433 ; 4434double RooAbsReal::_DEBUG_getVal(const RooArgSet* normalisationSet) const {; 4435 ; 4436 const bool tmpFast = _fast;; 4437 const double tmp = _value;; 4438 ; 4439 double fullEval = 0.;; 4440 try {; 4441 fullEval = getValV(normalisationSet);; 4442 }; 4443 catch (CachingError& error) {; 4444 throw CachingError(std::move(error),; 4445 FormatPdfTree() << *this);; 4446 }; 4447 ; 4448 const double ret = (_fast && !_inhibitDirty) ? _value : fullEval;; 4449 ; 4450 if (std::isfinite(ret) && ( ret != 0. ? (ret - fullEval)/ret : ret - fullEval) > 1.E-9) {; 4451#ifndef NDEBUG; 4452 gSystem->StackTrace();; 4453#endif; 4454 FormatPdfTree formatter;; 4455 formatter << ""--> (Scalar computation wrong here:)\n""; 4456 << GetName() << "" "" << this << "" _fast="" << tmpFast; 4457 << ""\n\tcached _value="" << std::setprecision(16) << tmp; 4458 << ""\n\treturning ="" << ret; 4459 << ""\n\trecomputed ="" ",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:195466,Availability,error,errorMsg,195466,"lue(serv.batch[std::min(i, serv.batch.size()-1)], false);; 4411 }; 4412 ; 4413 output[i] = evaluate();; 4414 }; 4415}; 4416 ; 4417////////////////////////////////////////////////////////////////////////////////; 4418/// This function defines the analytical integral translation for the class.; 4419///; 4420/// \param[in] code The code that decides the integrands.; 4421/// \param[in] rangeName Name of the normalization range.; 4422/// \param[in] ctx An object to manage auxiliary information for code-squashing.; 4423///; 4424/// \returns The representative code string of the integral for the given object.; 4425std::string RooAbsReal::buildCallToAnalyticIntegral(Int_t /* code */, const char * /* rangeName */,; 4426 RooFit::Detail::CodeSquashContext & /*ctx*/) const; 4427{; 4428 std::stringstream errorMsg;; 4429 errorMsg << ""An analytical integral function for class \"""" << ClassName() << ""\"" has not yet been implemented."";; 4430 coutE(Minimization) << errorMsg.str() << std::endl;; 4431 throw std::runtime_error(errorMsg.str().c_str());; 4432}; 4433 ; 4434double RooAbsReal::_DEBUG_getVal(const RooArgSet* normalisationSet) const {; 4435 ; 4436 const bool tmpFast = _fast;; 4437 const double tmp = _value;; 4438 ; 4439 double fullEval = 0.;; 4440 try {; 4441 fullEval = getValV(normalisationSet);; 4442 }; 4443 catch (CachingError& error) {; 4444 throw CachingError(std::move(error),; 4445 FormatPdfTree() << *this);; 4446 }; 4447 ; 4448 const double ret = (_fast && !_inhibitDirty) ? _value : fullEval;; 4449 ; 4450 if (std::isfinite(ret) && ( ret != 0. ? (ret - fullEval)/ret : ret - fullEval) > 1.E-9) {; 4451#ifndef NDEBUG; 4452 gSystem->StackTrace();; 4453#endif; 4454 FormatPdfTree formatter;; 4455 formatter << ""--> (Scalar computation wrong here:)\n""; 4456 << GetName() << "" "" << this << "" _fast="" << tmpFast; 4457 << ""\n\tcached _value="" << std::setprecision(16) << tmp; 4458 << ""\n\treturning ="" << ret; 4459 << ""\n\trecomputed ="" << fullEval; 4460 << ""\n\tnew _value ="" << _value ",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:195786,Availability,error,error,195786,"e normalization range.; 4422/// \param[in] ctx An object to manage auxiliary information for code-squashing.; 4423///; 4424/// \returns The representative code string of the integral for the given object.; 4425std::string RooAbsReal::buildCallToAnalyticIntegral(Int_t /* code */, const char * /* rangeName */,; 4426 RooFit::Detail::CodeSquashContext & /*ctx*/) const; 4427{; 4428 std::stringstream errorMsg;; 4429 errorMsg << ""An analytical integral function for class \"""" << ClassName() << ""\"" has not yet been implemented."";; 4430 coutE(Minimization) << errorMsg.str() << std::endl;; 4431 throw std::runtime_error(errorMsg.str().c_str());; 4432}; 4433 ; 4434double RooAbsReal::_DEBUG_getVal(const RooArgSet* normalisationSet) const {; 4435 ; 4436 const bool tmpFast = _fast;; 4437 const double tmp = _value;; 4438 ; 4439 double fullEval = 0.;; 4440 try {; 4441 fullEval = getValV(normalisationSet);; 4442 }; 4443 catch (CachingError& error) {; 4444 throw CachingError(std::move(error),; 4445 FormatPdfTree() << *this);; 4446 }; 4447 ; 4448 const double ret = (_fast && !_inhibitDirty) ? _value : fullEval;; 4449 ; 4450 if (std::isfinite(ret) && ( ret != 0. ? (ret - fullEval)/ret : ret - fullEval) > 1.E-9) {; 4451#ifndef NDEBUG; 4452 gSystem->StackTrace();; 4453#endif; 4454 FormatPdfTree formatter;; 4455 formatter << ""--> (Scalar computation wrong here:)\n""; 4456 << GetName() << "" "" << this << "" _fast="" << tmpFast; 4457 << ""\n\tcached _value="" << std::setprecision(16) << tmp; 4458 << ""\n\treturning ="" << ret; 4459 << ""\n\trecomputed ="" << fullEval; 4460 << ""\n\tnew _value ="" << _value << ""] "";; 4461 formatter << ""\nServers:"";; 4462 for (const auto server : _serverList) {; 4463 formatter << ""\n "";; 4464 server->printStream(formatter.stream(), kName | kClassName | kArgs | kExtras | kAddress | kValue, kInline);; 4465 }; 4466 ; 4467 throw CachingError(formatter);; 4468 }; 4469 ; 4470 return ret;; 4471}; 4472 ; 4473 ; 4474bool RooAbsReal::redirectServersHook(const RooAbsCollection & newSe",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:195830,Availability,error,error,195830,"e normalization range.; 4422/// \param[in] ctx An object to manage auxiliary information for code-squashing.; 4423///; 4424/// \returns The representative code string of the integral for the given object.; 4425std::string RooAbsReal::buildCallToAnalyticIntegral(Int_t /* code */, const char * /* rangeName */,; 4426 RooFit::Detail::CodeSquashContext & /*ctx*/) const; 4427{; 4428 std::stringstream errorMsg;; 4429 errorMsg << ""An analytical integral function for class \"""" << ClassName() << ""\"" has not yet been implemented."";; 4430 coutE(Minimization) << errorMsg.str() << std::endl;; 4431 throw std::runtime_error(errorMsg.str().c_str());; 4432}; 4433 ; 4434double RooAbsReal::_DEBUG_getVal(const RooArgSet* normalisationSet) const {; 4435 ; 4436 const bool tmpFast = _fast;; 4437 const double tmp = _value;; 4438 ; 4439 double fullEval = 0.;; 4440 try {; 4441 fullEval = getValV(normalisationSet);; 4442 }; 4443 catch (CachingError& error) {; 4444 throw CachingError(std::move(error),; 4445 FormatPdfTree() << *this);; 4446 }; 4447 ; 4448 const double ret = (_fast && !_inhibitDirty) ? _value : fullEval;; 4449 ; 4450 if (std::isfinite(ret) && ( ret != 0. ? (ret - fullEval)/ret : ret - fullEval) > 1.E-9) {; 4451#ifndef NDEBUG; 4452 gSystem->StackTrace();; 4453#endif; 4454 FormatPdfTree formatter;; 4455 formatter << ""--> (Scalar computation wrong here:)\n""; 4456 << GetName() << "" "" << this << "" _fast="" << tmpFast; 4457 << ""\n\tcached _value="" << std::setprecision(16) << tmp; 4458 << ""\n\treturning ="" << ret; 4459 << ""\n\trecomputed ="" << fullEval; 4460 << ""\n\tnew _value ="" << _value << ""] "";; 4461 formatter << ""\nServers:"";; 4462 for (const auto server : _serverList) {; 4463 formatter << ""\n "";; 4464 server->printStream(formatter.stream(), kName | kClassName | kArgs | kExtras | kAddress | kValue, kInline);; 4465 }; 4466 ; 4467 throw CachingError(formatter);; 4468 }; 4469 ; 4470 return ret;; 4471}; 4472 ; 4473 ; 4474bool RooAbsReal::redirectServersHook(const RooAbsCollection & newSe",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:220306,Availability,error,error,220306,"ng elements for each name in nameList.Definition RooAbsReal.cxx:3241; RooAbsReal::hideOffsetstatic bool hideOffset()Definition RooAbsReal.cxx:192; RooAbsReal::setTreeBranchStatusvoid setTreeBranchStatus(TTree &t, bool active) override(De)Activate associated tree branchDefinition RooAbsReal.cxx:3116; RooAbsReal::fillHistogramTH1 * fillHistogram(TH1 *hist, const RooArgList &plotVars, double scaleFactor=1, const RooArgSet *projectedVars=nullptr, bool scaling=true, const RooArgSet *condObs=nullptr, bool setError=true) constFill the ROOT histogram 'hist' with values sampled from this function at the bin centers.Definition RooAbsReal.cxx:947; RooAbsReal::createScanRIRooFit::OwningPtr< RooAbsReal > createScanRI(const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder)Utility function for createRunningIntegral that construct an object implementing the numeric scanning...Definition RooAbsReal.cxx:3810; RooAbsReal::_DEBUG_getValdouble _DEBUG_getVal(const RooArgSet *normalisationSet) constDebug version of getVal(), which is slow and does error checking.Definition RooAbsReal.cxx:4434; RooAbsReal::createFundamentalRooFit::OwningPtr< RooAbsArg > createFundamental(const char *newname=nullptr) const overrideCreate a RooRealVar fundamental object with our properties.Definition RooAbsReal.cxx:3130; RooAbsReal::plotSanityChecksbool plotSanityChecks(RooPlot *frame) constUtility function for plotOn(), perform general sanity check on frame to ensure safe plotting operatio...Definition RooAbsReal.cxx:2860; RooAbsReal::bindVarsRooFit::OwningPtr< RooAbsFunc > bindVars(const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) constCreate an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order).Definition RooAbsReal.cxx:2980; RooAbsReal::selectNormalizationvirtual void selectNormalization(const RooArgSet *depSet=nullptr, bool force=false)Interface function to force use of a given set of observables to interpret functi",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:223516,Availability,error,error,223516,"mpact, bool verbose=false) overrideRead object contents from stream (dummy for now)Definition RooAbsReal.cxx:426; RooAbsReal::matchArgsbool matchArgs(const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) constUtility function for use in getAnalyticalIntegral().Definition RooAbsReal.cxx:3146; RooAbsReal::fillTreeBranchvoid fillTreeBranch(TTree &t) overrideFill the tree branch that associated with this object with its current value.Definition RooAbsReal.cxx:3099; RooAbsReal::printMultilinevoid printMultiline(std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const overrideStructure printing.Definition RooAbsReal.cxx:455; RooAbsReal::plotAsymOnvirtual RooPlot * plotAsymOn(RooPlot *frame, const RooAbsCategoryLValue &asymCat, PlotOpt o) constDefinition RooAbsReal.cxx:2199; RooAbsReal::operator==bool operator==(double value) constEquality operator comparing to a double.Definition RooAbsReal.cxx:250; RooAbsReal::evalErrorLoggingModestatic ErrorLoggingMode evalErrorLoggingMode()Return current evaluation error logging mode.Definition RooAbsReal.cxx:4302; RooAbsReal::redirectServersHookbool redirectServersHook(const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) overrideFunction that is called at the end of redirectServers().Definition RooAbsReal.cxx:4474; RooAbsReal::isValidRealvirtual bool isValidReal(double, bool printError=false) constInterface function to check if given value is a valid value for this object. Returns true unless over...Definition RooAbsReal.h:447; RooAbsReal::setIntegratorConfigvoid setIntegratorConfig()Remove the specialized numeric integration configuration associated with this object.Definition RooAbsReal.cxx:3346; RooAbsReal::printValuevoid printValue(std::ostream &os) const overridePrint object value.Definition RooAbsReal.cxx:445; RooAbsReal::isIdenticalbool isIdentical(const RooAbsArg &other, bool assumeSameType=false) const overrideDefinition RooAbsReal.cxx:270; RooA",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:226543,Availability,error,error,226543,"on of the coefficient of any RooAddPdf component in the expression tree headed by...Definition RooAbsReal.cxx:3675; RooAbsReal::_valuedouble _valueCache for current value of object.Definition RooAbsReal.h:536; RooAbsReal::analyticalIntegralvirtual double analyticalIntegral(Int_t code, const char *rangeName=nullptr) constImplements the actual analytical integral(s) advertised by getAnalyticalIntegral.Definition RooAbsReal.cxx:394; RooAbsReal::attachToTreevoid attachToTree(TTree &t, Int_t bufSize=32000) overrideAttach object to a branch of given TTree.Definition RooAbsReal.cxx:3028; RooAbsReal::specialIntegratorConfigRooNumIntConfig * specialIntegratorConfig() constReturns the specialized integrator configuration for this RooAbsReal.Definition RooAbsReal.cxx:3282; RooAbsReal::writeToStreamvoid writeToStream(std::ostream &os, bool compact) const overrideWrite object contents to stream (dummy for now)Definition RooAbsReal.cxx:436; RooAbsReal::traceEvaldouble traceEval(const RooArgSet *set) constCalculate current value of object, with error tracing wrapper.Definition RooAbsReal.cxx:319; RooAbsReal::getPropagatedErrordouble getPropagatedError(const RooFitResult &fr, const RooArgSet &nset={}) constPropagates parameter uncertainties to an uncertainty estimate for this RooAbsReal.Definition RooAbsReal.cxx:2472; RooAbsReal::setHideOffsetstatic void setHideOffset(bool flag)Definition RooAbsReal.cxx:191; RooAbsReal::ErrorLoggingModeErrorLoggingModeDefinition RooAbsReal.h:317; RooAbsReal::CountErrors@ CountErrorsDefinition RooAbsReal.h:317; RooAbsReal::CollectErrors@ CollectErrorsDefinition RooAbsReal.h:317; RooAbsReal::PrintErrors@ PrintErrorsDefinition RooAbsReal.h:317; RooAbsReal::Ignore@ IgnoreDefinition RooAbsReal.h:317; RooAbsReal::globalSelectCompstatic void globalSelectComp(bool flag)Global switch controlling the activation of the selectComp() functionality.Definition RooAbsReal.cxx:2966; RooAbsReal::momentRooAbsMoment * moment(RooRealVar &obs, Int_t order, bool central,",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:229421,Availability,error,errors,229421,"t char * getPlotLabel() constGet the label associated with the variable.Definition RooAbsReal.cxx:406; RooAbsReal::createRunningIntegralRooFit::OwningPtr< RooAbsReal > createRunningIntegral(const RooArgSet &iset, const RooArgSet &nset={})Calls createRunningIntegral(const RooArgSet&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&,...Definition RooAbsReal.cxx:3706; RooAbsReal::_specIntegratorConfigstd::unique_ptr< RooNumIntConfig > _specIntegratorConfigDefinition RooAbsReal.h:540; RooAbsReal::getAnalyticalIntegralvirtual Int_t getAnalyticalIntegral(RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) constInterface function getAnalyticalIntergral advertises the analytical integrals that are supported.Definition RooAbsReal.cxx:368; RooAbsReal::evalErrorIterstatic std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter()Definition RooAbsReal.cxx:181; RooAbsReal::numEvalErrorsstatic Int_t numEvalErrors()Return the number of logged evaluation errors since the last clearing.Definition RooAbsReal.cxx:3624; RooAbsReal::setEvalErrorLoggingModestatic void setEvalErrorLoggingMode(ErrorLoggingMode m)Set evaluation error logging mode.Definition RooAbsReal.cxx:4316; RooAbsReal::preferredObservableScanOrdervirtual void preferredObservableScanOrder(const RooArgSet &obs, RooArgSet &orderedObs) constInterface method for function objects to indicate their preferred order of observables for scanning t...Definition RooAbsReal.cxx:3694; RooAbsReal::maxValvirtual double maxVal(Int_t code) constReturn maximum value for set of observables identified by code assigned in getMaxVal.Definition RooAbsReal.cxx:3397; RooAbsReal::findInnerMostIntegrationvoid findInnerMostIntegration(const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) constUtility function for createIntObj() that aids in the construct of recursive integrals over functions ...Definition RooAbsReal.cxx:701; RooAbsReal::integralNameSuffi",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:229589,Availability,error,error,229589,"RooAbsReal > createRunningIntegral(const RooArgSet &iset, const RooArgSet &nset={})Calls createRunningIntegral(const RooArgSet&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&,...Definition RooAbsReal.cxx:3706; RooAbsReal::_specIntegratorConfigstd::unique_ptr< RooNumIntConfig > _specIntegratorConfigDefinition RooAbsReal.h:540; RooAbsReal::getAnalyticalIntegralvirtual Int_t getAnalyticalIntegral(RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) constInterface function getAnalyticalIntergral advertises the analytical integrals that are supported.Definition RooAbsReal.cxx:368; RooAbsReal::evalErrorIterstatic std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter()Definition RooAbsReal.cxx:181; RooAbsReal::numEvalErrorsstatic Int_t numEvalErrors()Return the number of logged evaluation errors since the last clearing.Definition RooAbsReal.cxx:3624; RooAbsReal::setEvalErrorLoggingModestatic void setEvalErrorLoggingMode(ErrorLoggingMode m)Set evaluation error logging mode.Definition RooAbsReal.cxx:4316; RooAbsReal::preferredObservableScanOrdervirtual void preferredObservableScanOrder(const RooArgSet &obs, RooArgSet &orderedObs) constInterface method for function objects to indicate their preferred order of observables for scanning t...Definition RooAbsReal.cxx:3694; RooAbsReal::maxValvirtual double maxVal(Int_t code) constReturn maximum value for set of observables identified by code assigned in getMaxVal.Definition RooAbsReal.cxx:3397; RooAbsReal::findInnerMostIntegrationvoid findInnerMostIntegration(const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) constUtility function for createIntObj() that aids in the construct of recursive integrals over functions ...Definition RooAbsReal.cxx:701; RooAbsReal::integralNameSuffixTString integralNameSuffix(const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) constConstruct strin",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:231058,Availability,error,error,231058,"servables identified by code assigned in getMaxVal.Definition RooAbsReal.cxx:3397; RooAbsReal::findInnerMostIntegrationvoid findInnerMostIntegration(const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) constUtility function for createIntObj() that aids in the construct of recursive integrals over functions ...Definition RooAbsReal.cxx:701; RooAbsReal::integralNameSuffixTString integralNameSuffix(const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) constConstruct string with unique suffix name to give to integral object that encodes integrated observabl...Definition RooAbsReal.cxx:755; RooAbsReal::evaluatevirtual double evaluate() const =0Evaluate this PDF / function / constant. Needs to be overridden by all derived classes.; RooAbsReal::getTitleTString getTitle(bool appendUnit=false) constReturn this variable's title string.Definition RooAbsReal.cxx:285; RooAbsReal::logEvalErrorvoid logEvalError(const char *message, const char *serverValueString=nullptr) constLog evaluation error message.Definition RooAbsReal.cxx:3464; RooAbsReal::analyticalIntegralWNvirtual double analyticalIntegralWN(Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) constImplements the actual analytical integral(s) advertised by getAnalyticalIntegral.Definition RooAbsReal.cxx:380; RooAbsReal::getUnitconst Text_t * getUnit() constDefinition RooAbsReal.h:143; RooAbsReal::getIntegratorConfigconst RooNumIntConfig * getIntegratorConfig() constReturn the numeric integration configuration used for this object.Definition RooAbsReal.cxx:3309; RooAbsReal::printEvalErrorsstatic void printEvalErrors(std::ostream &os=std::cout, Int_t maxPerNode=10000000)Print all outstanding logged evaluation error on the given ostream.Definition RooAbsReal.cxx:3582; RooAbsReal::createIntRIRooFit::OwningPtr< RooAbsReal > createIntRI(const RooArgSet &iset, const RooArgSet &nset={})Utility function for createRunningIntegral.Definition RooAbsR",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:231765,Availability,error,error,231765,"luate() const =0Evaluate this PDF / function / constant. Needs to be overridden by all derived classes.; RooAbsReal::getTitleTString getTitle(bool appendUnit=false) constReturn this variable's title string.Definition RooAbsReal.cxx:285; RooAbsReal::logEvalErrorvoid logEvalError(const char *message, const char *serverValueString=nullptr) constLog evaluation error message.Definition RooAbsReal.cxx:3464; RooAbsReal::analyticalIntegralWNvirtual double analyticalIntegralWN(Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) constImplements the actual analytical integral(s) advertised by getAnalyticalIntegral.Definition RooAbsReal.cxx:380; RooAbsReal::getUnitconst Text_t * getUnit() constDefinition RooAbsReal.h:143; RooAbsReal::getIntegratorConfigconst RooNumIntConfig * getIntegratorConfig() constReturn the numeric integration configuration used for this object.Definition RooAbsReal.cxx:3309; RooAbsReal::printEvalErrorsstatic void printEvalErrors(std::ostream &os=std::cout, Int_t maxPerNode=10000000)Print all outstanding logged evaluation error on the given ostream.Definition RooAbsReal.cxx:3582; RooAbsReal::createIntRIRooFit::OwningPtr< RooAbsReal > createIntRI(const RooArgSet &iset, const RooArgSet &nset={})Utility function for createRunningIntegral.Definition RooAbsReal.cxx:3827; RooAbsReal::enableOffsettingvirtual void enableOffsetting(bool)Definition RooAbsReal.cxx:4484; RooAbsReal::clearEvalErrorLogstatic void clearEvalErrorLog()Clear the stack of evaluation error messages.Definition RooAbsReal.cxx:3542; RooAbsReal::createIntObjRooFit::OwningPtr< RooAbsReal > createIntObj(const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) constInternal utility function for createIntegral() that creates the actual integral object.Definition RooAbsReal.cxx:590; RooAbsReal::functorRooFunctor * functor(const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) constReturn a RooFunctor obje",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:232199,Availability,error,error,232199,"ticalIntegralWN(Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) constImplements the actual analytical integral(s) advertised by getAnalyticalIntegral.Definition RooAbsReal.cxx:380; RooAbsReal::getUnitconst Text_t * getUnit() constDefinition RooAbsReal.h:143; RooAbsReal::getIntegratorConfigconst RooNumIntConfig * getIntegratorConfig() constReturn the numeric integration configuration used for this object.Definition RooAbsReal.cxx:3309; RooAbsReal::printEvalErrorsstatic void printEvalErrors(std::ostream &os=std::cout, Int_t maxPerNode=10000000)Print all outstanding logged evaluation error on the given ostream.Definition RooAbsReal.cxx:3582; RooAbsReal::createIntRIRooFit::OwningPtr< RooAbsReal > createIntRI(const RooArgSet &iset, const RooArgSet &nset={})Utility function for createRunningIntegral.Definition RooAbsReal.cxx:3827; RooAbsReal::enableOffsettingvirtual void enableOffsetting(bool)Definition RooAbsReal.cxx:4484; RooAbsReal::clearEvalErrorLogstatic void clearEvalErrorLog()Clear the stack of evaluation error messages.Definition RooAbsReal.cxx:3542; RooAbsReal::createIntObjRooFit::OwningPtr< RooAbsReal > createIntObj(const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) constInternal utility function for createIntegral() that creates the actual integral object.Definition RooAbsReal.cxx:590; RooAbsReal::functorRooFunctor * functor(const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) constReturn a RooFunctor object bound to this RooAbsReal with given definition of observables and paramete...Definition RooAbsReal.cxx:3887; RooAbsReal::createPlotProjectionconst RooAbsReal * createPlotProjection(const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) constUtility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a Roo...Definition RooAbsReal.cxx:787; RooAbsReal::plotSamplingHintvirtual std::list< double > * p",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:239727,Availability,error,error,239727,"ition RooCmdConfig.cxx:214; RooCmdConfig::getStringconst char * getString(const char *name, const char *defaultValue="""", bool convEmptyToNull=false) constReturn string property registered with name 'name'.Definition RooCmdConfig.cxx:506; RooCmdConfig::defineStringbool defineString(const char *name, const char *argName, int stringNum, const char *defValue="""", bool appendMode=false)Define double property name 'name' mapped to double in slot 'stringNum' in RooCmdArg with name argNam...Definition RooCmdConfig.cxx:189; RooCmdConfig::getObjectListconst RooLinkedList & getObjectList(const char *name) constReturn list of objects registered with name 'name'.Definition RooCmdConfig.cxx:541; RooCmdConfig::defineIntbool defineInt(const char *name, const char *argName, int intNum, int defValue=0)Define integer property name 'name' mapped to integer in slot 'intNum' in RooCmdArg with name argName...Definition RooCmdConfig.cxx:143; RooCmdConfig::allowUndefinedvoid allowUndefined(bool flag=true)If flag is true the processing of unrecognized RooCmdArgs is not considered an error.Definition RooCmdConfig.h:44; RooCmdConfig::getIntint getInt(const char *name, int defaultValue=0) constReturn integer property registered with name 'name'.Definition RooCmdConfig.cxx:481; RooCmdConfig::getObjectTObject * getObject(const char *name, TObject *obj=nullptr) constReturn TObject property registered with name 'name'.Definition RooCmdConfig.cxx:519; RooCurveOne-dimensional graphical representation of a real-valued function.Definition RooCurve.h:36; RooCurve::Extended@ ExtendedDefinition RooCurve.h:39; RooCurve::NoWings@ NoWingsDefinition RooCurve.h:39; RooCurve::Straight@ StraightDefinition RooCurve.h:39; RooCurve::makeErrorBandRooCurve * makeErrorBand(const std::vector< RooCurve * > &variations, double Z=1) constConstruct filled RooCurve represented error band that captures alpha% of the variations of the curves...Definition RooCurve.cxx:701; RooCurve::Classstatic TClass * Class(); RooCustomizerRoo",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:240504,Availability,error,error,240504,"ger property name 'name' mapped to integer in slot 'intNum' in RooCmdArg with name argName...Definition RooCmdConfig.cxx:143; RooCmdConfig::allowUndefinedvoid allowUndefined(bool flag=true)If flag is true the processing of unrecognized RooCmdArgs is not considered an error.Definition RooCmdConfig.h:44; RooCmdConfig::getIntint getInt(const char *name, int defaultValue=0) constReturn integer property registered with name 'name'.Definition RooCmdConfig.cxx:481; RooCmdConfig::getObjectTObject * getObject(const char *name, TObject *obj=nullptr) constReturn TObject property registered with name 'name'.Definition RooCmdConfig.cxx:519; RooCurveOne-dimensional graphical representation of a real-valued function.Definition RooCurve.h:36; RooCurve::Extended@ ExtendedDefinition RooCurve.h:39; RooCurve::NoWings@ NoWingsDefinition RooCurve.h:39; RooCurve::Straight@ StraightDefinition RooCurve.h:39; RooCurve::makeErrorBandRooCurve * makeErrorBand(const std::vector< RooCurve * > &variations, double Z=1) constConstruct filled RooCurve represented error band that captures alpha% of the variations of the curves...Definition RooCurve.cxx:701; RooCurve::Classstatic TClass * Class(); RooCustomizerRooCustomizer is a factory class to produce clones of a prototype composite PDF object with the same ...Definition RooCustomizer.h:36; RooCustomizer::setCloneBranchSetvoid setCloneBranchSet(RooArgSet &cloneBranchSet)Releases ownership of list of cloned branch nodes.Definition RooCustomizer.cxx:640; RooCustomizer::replaceArgvoid replaceArg(const RooAbsArg &orig, const RooAbsArg &subst)Replace any occurrence of arg 'orig' with arg 'subst'.Definition RooCustomizer.cxx:327; RooCustomizer::buildRooAbsArg * build(const char *masterCatState, bool verbose=false)Build a clone of the prototype executing all registered 'replace' rules and 'split' rules for the mas...Definition RooCustomizer.cxx:383; RooCustomizer::setOwningvoid setOwning(bool flag)If flag is true, make customizer own all created components.",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:252898,Availability,error,error,252898,"TF1::SetParametervirtual void SetParameter(Int_t param, Double_t value)Definition TF1.h:667; TF2A 2-Dim function with parameters.Definition TF2.h:29; TF3A 3-Dim function with parameters.Definition TF3.h:28; TGraph::SetNamevoid SetName(const char *name="""") overrideSet graph name.Definition TGraph.cxx:2381; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::GetZaxisTAxis * GetZaxis()Definition TH1.h:326; TH1::GetNbinsYvirtual Int_t GetNbinsY() constDefinition TH1.h:298; TH1::GetNbinsZvirtual Int_t GetNbinsZ() constDefinition TH1.h:299; TH1::GetDimensionvirtual Int_t GetDimension() constDefinition TH1.h:283; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TH1::GetBinvirtual Int_t GetBin(Int_t binx, Int_t biny=0, Int_t binz=0) constReturn Global bin number corresponding to binx,y,z.Definition TH1.cxx:4961; TH1::GetNbinsXvirtual Int_t GetNbinsX() constDefinition TH1.h:297; TH1::SetBinErrorvirtual void SetBinError(Int_t bin, Double_t error)Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empt...Definition TH1.cxx:9206; TH1::GetYaxisTAxis * GetYaxis()Definition TH1.h:325; TH1::SetBinContentvirtual void SetBinContent(Int_t bin, Double_t content)Set bin content see convention for numbering bins in TH1::GetBin In case the bin number is greater th...Definition TH1.cxx:9222; TLeafA TLeaf describes individual elements of a TBranch See TBranch structure in TTree.Definition TLeaf.h:57; TLeaf::GetTypeNamevirtual const char * GetTypeName() constDefinition TLeaf.h:139; TLeaf::GetLeafCountervirtual TLeaf * GetLeafCounter(Int_t &countval) constReturn a pointer to the counter of this leaf (if any) or store the number of elements that the leaf c...Definition TLeaf.cxx:249; TListA doubly linked list.Definition TList.h:38; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TList::Deletevoid Delete(Option_t *option="""") overrideRemove all objects from the list AND delete all heap based objects.",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:258322,Availability,error,error,258322,"::INFO@ INFODefinition RooGlobalFunc.h:60; RooFit::MPSplitMPSplitDefinition RooGlobalFunc.h:65; RooFit::FastEvaluations@ FastEvaluationsDefinition RooGlobalFunc.h:64; RooFit::makeOwningPtrOwningPtr< T > makeOwningPtr(std::unique_ptr< T > &&ptr)Internal helper to turn a std::unique_ptr<T> into an OwningPtr.Definition Config.h:40; RooFit::OwningPtrT * OwningPtrAn alias for raw pointers for indicating that the return type of a RooFit function is an owning point...Definition Config.h:35; RooHelpers::selectFromArgSetRooArgSet selectFromArgSet(RooArgSet const &, std::string const &names); RooHelpers::checkIfRangesOverlapbool checkIfRangesOverlap(RooArgSet const &observables, std::vector< std::string > const &rangeNames); RooHelpers::getColonSeparatedNameStringstd::string getColonSeparatedNameString(RooArgSet const &argSet, char delim=':'); TMVA_SOFIE_GNN.outoutDefinition TMVA_SOFIE_GNN.py:203; TMath::IsNaNBool_t IsNaN(Double_t x)Definition TMath.h:892; TMath::ErfcDouble_t Erfc(Double_t x)Computes the complementary error function erfc(x).Definition TMath.cxx:199; graphDefinition graph.py:1; RooAbsReal::GlobalSelectComponentRAIIDefinition RooAbsReal.h:508; RooAbsReal::PlotOptDefinition RooAbsReal.h:463; RooAbsReal::PlotOpt::wmodeRooCurve::WingMode wmodeDefinition RooAbsReal.h:477; RooAbsReal::PlotOpt::normRangeNameconst char * normRangeNameDefinition RooAbsReal.h:473; RooAbsReal::PlotOpt::scaleFactordouble scaleFactorDefinition RooAbsReal.h:465; RooAbsReal::PlotOpt::precisiondouble precisionDefinition RooAbsReal.h:470; RooAbsReal::PlotOpt::addToWgtOtherdouble addToWgtOtherDefinition RooAbsReal.h:483; RooAbsReal::PlotOpt::interleaveRooFit::MPSplit interleaveDefinition RooAbsReal.h:485; RooAbsReal::PlotOpt::projectionRangeNameconst char * projectionRangeNameDefinition RooAbsReal.h:478; RooAbsReal::PlotOpt::eevaldouble eevalDefinition RooAbsReal.h:488; RooAbsReal::PlotOpt::progressbool progressDefinition RooAbsReal.h:490; RooAbsReal::PlotOpt::doeevalbool doeevalDefinition RooAb",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:259978,Availability,error,errorFRconst,259978,Real.h:485; RooAbsReal::PlotOpt::projectionRangeNameconst char * projectionRangeNameDefinition RooAbsReal.h:478; RooAbsReal::PlotOpt::eevaldouble eevalDefinition RooAbsReal.h:488; RooAbsReal::PlotOpt::progressbool progressDefinition RooAbsReal.h:490; RooAbsReal::PlotOpt::doeevalbool doeevalDefinition RooAbsReal.h:489; RooAbsReal::PlotOpt::addToWgtSelfdouble addToWgtSelfDefinition RooAbsReal.h:482; RooAbsReal::PlotOpt::shiftToZerobool shiftToZeroDefinition RooAbsReal.h:471; RooAbsReal::PlotOpt::projDataSetconst RooArgSet * projDataSetDefinition RooAbsReal.h:472; RooAbsReal::PlotOpt::binProjDatabool binProjDataDefinition RooAbsReal.h:468; RooAbsReal::PlotOpt::stypeScaleType stypeDefinition RooAbsReal.h:466; RooAbsReal::PlotOpt::curveNameSuffixconst char * curveNameSuffixDefinition RooAbsReal.h:486; RooAbsReal::PlotOpt::addToCurveNameconst char * addToCurveNameDefinition RooAbsReal.h:481; RooAbsReal::PlotOpt::numeeInt_t numeeDefinition RooAbsReal.h:487; RooAbsReal::PlotOpt::errorFRconst RooFitResult * errorFRDefinition RooAbsReal.h:491; RooAbsReal::PlotOpt::rangeHidouble rangeHiDefinition RooAbsReal.h:475; RooAbsReal::PlotOpt::numCPUInt_t numCPUDefinition RooAbsReal.h:484; RooAbsReal::PlotOpt::projSetconst RooArgSet * projSetDefinition RooAbsReal.h:469; RooAbsReal::PlotOpt::postRangeFracScalebool postRangeFracScaleDefinition RooAbsReal.h:476; RooAbsReal::PlotOpt::curveInvisiblebool curveInvisibleDefinition RooAbsReal.h:479; RooAbsReal::PlotOpt::curveNameconst char * curveNameDefinition RooAbsReal.h:480; RooAbsReal::PlotOpt::projDataconst RooAbsData * projDataDefinition RooAbsReal.h:467; RooAbsReal::PlotOpt::drawOptionsOption_t * drawOptionsDefinition RooAbsReal.h:464; RooAbsReal::PlotOpt::rangeLodouble rangeLoDefinition RooAbsReal.h:474; RooFit::UniqueIdA UniqueId can be added as a class member to enhance any class with a unique identifier for each inst...Definition UniqueId.h:39; RooFit::UniqueId::valueconstexpr Value_t value() constReturn numerical value of ID.Definit,MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:260006,Availability,error,errorFRDefinition,260006,Real.h:485; RooAbsReal::PlotOpt::projectionRangeNameconst char * projectionRangeNameDefinition RooAbsReal.h:478; RooAbsReal::PlotOpt::eevaldouble eevalDefinition RooAbsReal.h:488; RooAbsReal::PlotOpt::progressbool progressDefinition RooAbsReal.h:490; RooAbsReal::PlotOpt::doeevalbool doeevalDefinition RooAbsReal.h:489; RooAbsReal::PlotOpt::addToWgtSelfdouble addToWgtSelfDefinition RooAbsReal.h:482; RooAbsReal::PlotOpt::shiftToZerobool shiftToZeroDefinition RooAbsReal.h:471; RooAbsReal::PlotOpt::projDataSetconst RooArgSet * projDataSetDefinition RooAbsReal.h:472; RooAbsReal::PlotOpt::binProjDatabool binProjDataDefinition RooAbsReal.h:468; RooAbsReal::PlotOpt::stypeScaleType stypeDefinition RooAbsReal.h:466; RooAbsReal::PlotOpt::curveNameSuffixconst char * curveNameSuffixDefinition RooAbsReal.h:486; RooAbsReal::PlotOpt::addToCurveNameconst char * addToCurveNameDefinition RooAbsReal.h:481; RooAbsReal::PlotOpt::numeeInt_t numeeDefinition RooAbsReal.h:487; RooAbsReal::PlotOpt::errorFRconst RooFitResult * errorFRDefinition RooAbsReal.h:491; RooAbsReal::PlotOpt::rangeHidouble rangeHiDefinition RooAbsReal.h:475; RooAbsReal::PlotOpt::numCPUInt_t numCPUDefinition RooAbsReal.h:484; RooAbsReal::PlotOpt::projSetconst RooArgSet * projSetDefinition RooAbsReal.h:469; RooAbsReal::PlotOpt::postRangeFracScalebool postRangeFracScaleDefinition RooAbsReal.h:476; RooAbsReal::PlotOpt::curveInvisiblebool curveInvisibleDefinition RooAbsReal.h:479; RooAbsReal::PlotOpt::curveNameconst char * curveNameDefinition RooAbsReal.h:480; RooAbsReal::PlotOpt::projDataconst RooAbsData * projDataDefinition RooAbsReal.h:467; RooAbsReal::PlotOpt::drawOptionsOption_t * drawOptionsDefinition RooAbsReal.h:464; RooAbsReal::PlotOpt::rangeLodouble rangeLoDefinition RooAbsReal.h:474; RooFit::UniqueIdA UniqueId can be added as a class member to enhance any class with a unique identifier for each inst...Definition UniqueId.h:39; RooFit::UniqueId::valueconstexpr Value_t value() constReturn numerical value of ID.Definit,MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:12408,Deployability,integrat,integration,12408,"////////////////////////////////////////////////////////////; 344/// Variant of getAnalyticalIntegral that is also passed the normalization set; 345/// that should be applied to the integrand of which the integral is requested.; 346/// For certain operator p.d.f it is useful to overload this function rather; 347/// than analyticalIntegralWN() as the additional normalization information; 348/// may be useful in determining a more efficient decomposition of the; 349/// requested integral.; 350 ; 351Int_t RooAbsReal::getAnalyticalIntegralWN(RooArgSet& allDeps, RooArgSet& analDeps,; 352 const RooArgSet* /*normSet*/, const char* rangeName) const; 353{; 354 return _forceNumInt ? 0 : getAnalyticalIntegral(allDeps,analDeps,rangeName) ;; 355}; 356 ; 357 ; 358 ; 359////////////////////////////////////////////////////////////////////////////////; 360/// Interface function getAnalyticalIntergral advertises the; 361/// analytical integrals that are supported. 'integSet'; 362/// is the set of dependents for which integration is requested. The; 363/// function should copy the subset of dependents it can analytically; 364/// integrate to anaIntSet and return a unique identification code for; 365/// this integration configuration. If no integration can be; 366/// performed, zero should be returned.; 367 ; 368Int_t RooAbsReal::getAnalyticalIntegral(RooArgSet& /*integSet*/, RooArgSet& /*anaIntSet*/, const char* /*rangeName*/) const; 369{; 370 return 0 ;; 371}; 372 ; 373 ; 374 ; 375////////////////////////////////////////////////////////////////////////////////; 376/// Implements the actual analytical integral(s) advertised by; 377/// getAnalyticalIntegral. This functions will only be called with; 378/// codes returned by getAnalyticalIntegral, except code zero.; 379 ; 380double RooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName) const; 381{; 382// cout << ""RooAbsReal::analyticalIntegralWN("" << GetName() << "") code = "" << code << "" normSet = "" ",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:12520,Deployability,integrat,integrate,12520,"ion set; 345/// that should be applied to the integrand of which the integral is requested.; 346/// For certain operator p.d.f it is useful to overload this function rather; 347/// than analyticalIntegralWN() as the additional normalization information; 348/// may be useful in determining a more efficient decomposition of the; 349/// requested integral.; 350 ; 351Int_t RooAbsReal::getAnalyticalIntegralWN(RooArgSet& allDeps, RooArgSet& analDeps,; 352 const RooArgSet* /*normSet*/, const char* rangeName) const; 353{; 354 return _forceNumInt ? 0 : getAnalyticalIntegral(allDeps,analDeps,rangeName) ;; 355}; 356 ; 357 ; 358 ; 359////////////////////////////////////////////////////////////////////////////////; 360/// Interface function getAnalyticalIntergral advertises the; 361/// analytical integrals that are supported. 'integSet'; 362/// is the set of dependents for which integration is requested. The; 363/// function should copy the subset of dependents it can analytically; 364/// integrate to anaIntSet and return a unique identification code for; 365/// this integration configuration. If no integration can be; 366/// performed, zero should be returned.; 367 ; 368Int_t RooAbsReal::getAnalyticalIntegral(RooArgSet& /*integSet*/, RooArgSet& /*anaIntSet*/, const char* /*rangeName*/) const; 369{; 370 return 0 ;; 371}; 372 ; 373 ; 374 ; 375////////////////////////////////////////////////////////////////////////////////; 376/// Implements the actual analytical integral(s) advertised by; 377/// getAnalyticalIntegral. This functions will only be called with; 378/// codes returned by getAnalyticalIntegral, except code zero.; 379 ; 380double RooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName) const; 381{; 382// cout << ""RooAbsReal::analyticalIntegralWN("" << GetName() << "") code = "" << code << "" normSet = "" << (normSet?*normSet:RooArgSet()) << std::endl ;; 383 if (code==0) return getVal(normSet) ;; 384 return analyticalIntegral(code,rangeName",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:12600,Deployability,integrat,integration,12600,"ion set; 345/// that should be applied to the integrand of which the integral is requested.; 346/// For certain operator p.d.f it is useful to overload this function rather; 347/// than analyticalIntegralWN() as the additional normalization information; 348/// may be useful in determining a more efficient decomposition of the; 349/// requested integral.; 350 ; 351Int_t RooAbsReal::getAnalyticalIntegralWN(RooArgSet& allDeps, RooArgSet& analDeps,; 352 const RooArgSet* /*normSet*/, const char* rangeName) const; 353{; 354 return _forceNumInt ? 0 : getAnalyticalIntegral(allDeps,analDeps,rangeName) ;; 355}; 356 ; 357 ; 358 ; 359////////////////////////////////////////////////////////////////////////////////; 360/// Interface function getAnalyticalIntergral advertises the; 361/// analytical integrals that are supported. 'integSet'; 362/// is the set of dependents for which integration is requested. The; 363/// function should copy the subset of dependents it can analytically; 364/// integrate to anaIntSet and return a unique identification code for; 365/// this integration configuration. If no integration can be; 366/// performed, zero should be returned.; 367 ; 368Int_t RooAbsReal::getAnalyticalIntegral(RooArgSet& /*integSet*/, RooArgSet& /*anaIntSet*/, const char* /*rangeName*/) const; 369{; 370 return 0 ;; 371}; 372 ; 373 ; 374 ; 375////////////////////////////////////////////////////////////////////////////////; 376/// Implements the actual analytical integral(s) advertised by; 377/// getAnalyticalIntegral. This functions will only be called with; 378/// codes returned by getAnalyticalIntegral, except code zero.; 379 ; 380double RooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName) const; 381{; 382// cout << ""RooAbsReal::analyticalIntegralWN("" << GetName() << "") code = "" << code << "" normSet = "" << (normSet?*normSet:RooArgSet()) << std::endl ;; 383 if (code==0) return getVal(normSet) ;; 384 return analyticalIntegral(code,rangeName",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:12612,Deployability,configurat,configuration,12612,"ion set; 345/// that should be applied to the integrand of which the integral is requested.; 346/// For certain operator p.d.f it is useful to overload this function rather; 347/// than analyticalIntegralWN() as the additional normalization information; 348/// may be useful in determining a more efficient decomposition of the; 349/// requested integral.; 350 ; 351Int_t RooAbsReal::getAnalyticalIntegralWN(RooArgSet& allDeps, RooArgSet& analDeps,; 352 const RooArgSet* /*normSet*/, const char* rangeName) const; 353{; 354 return _forceNumInt ? 0 : getAnalyticalIntegral(allDeps,analDeps,rangeName) ;; 355}; 356 ; 357 ; 358 ; 359////////////////////////////////////////////////////////////////////////////////; 360/// Interface function getAnalyticalIntergral advertises the; 361/// analytical integrals that are supported. 'integSet'; 362/// is the set of dependents for which integration is requested. The; 363/// function should copy the subset of dependents it can analytically; 364/// integrate to anaIntSet and return a unique identification code for; 365/// this integration configuration. If no integration can be; 366/// performed, zero should be returned.; 367 ; 368Int_t RooAbsReal::getAnalyticalIntegral(RooArgSet& /*integSet*/, RooArgSet& /*anaIntSet*/, const char* /*rangeName*/) const; 369{; 370 return 0 ;; 371}; 372 ; 373 ; 374 ; 375////////////////////////////////////////////////////////////////////////////////; 376/// Implements the actual analytical integral(s) advertised by; 377/// getAnalyticalIntegral. This functions will only be called with; 378/// codes returned by getAnalyticalIntegral, except code zero.; 379 ; 380double RooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName) const; 381{; 382// cout << ""RooAbsReal::analyticalIntegralWN("" << GetName() << "") code = "" << code << "" normSet = "" << (normSet?*normSet:RooArgSet()) << std::endl ;; 383 if (code==0) return getVal(normSet) ;; 384 return analyticalIntegral(code,rangeName",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:12633,Deployability,integrat,integration,12633,"s useful to overload this function rather; 347/// than analyticalIntegralWN() as the additional normalization information; 348/// may be useful in determining a more efficient decomposition of the; 349/// requested integral.; 350 ; 351Int_t RooAbsReal::getAnalyticalIntegralWN(RooArgSet& allDeps, RooArgSet& analDeps,; 352 const RooArgSet* /*normSet*/, const char* rangeName) const; 353{; 354 return _forceNumInt ? 0 : getAnalyticalIntegral(allDeps,analDeps,rangeName) ;; 355}; 356 ; 357 ; 358 ; 359////////////////////////////////////////////////////////////////////////////////; 360/// Interface function getAnalyticalIntergral advertises the; 361/// analytical integrals that are supported. 'integSet'; 362/// is the set of dependents for which integration is requested. The; 363/// function should copy the subset of dependents it can analytically; 364/// integrate to anaIntSet and return a unique identification code for; 365/// this integration configuration. If no integration can be; 366/// performed, zero should be returned.; 367 ; 368Int_t RooAbsReal::getAnalyticalIntegral(RooArgSet& /*integSet*/, RooArgSet& /*anaIntSet*/, const char* /*rangeName*/) const; 369{; 370 return 0 ;; 371}; 372 ; 373 ; 374 ; 375////////////////////////////////////////////////////////////////////////////////; 376/// Implements the actual analytical integral(s) advertised by; 377/// getAnalyticalIntegral. This functions will only be called with; 378/// codes returned by getAnalyticalIntegral, except code zero.; 379 ; 380double RooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName) const; 381{; 382// cout << ""RooAbsReal::analyticalIntegralWN("" << GetName() << "") code = "" << code << "" normSet = "" << (normSet?*normSet:RooArgSet()) << std::endl ;; 383 if (code==0) return getVal(normSet) ;; 384 return analyticalIntegral(code,rangeName) ;; 385}; 386 ; 387 ; 388 ; 389////////////////////////////////////////////////////////////////////////////////; 390/// Implements",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:17305,Deployability,integrat,integration,17305,"n except the stated paramsOfInterest; 470 ; 471RooFit::OwningPtr<RooAbsReal> RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); 472{; 473 // Construct name of profile object; 474 auto name = std::string(GetName()) + ""_Profile["";; 475 bool first = true;; 476 for (auto const& arg : paramsOfInterest) {; 477 if (first) {; 478 first = false ;; 479 } else {; 480 name.append("","") ;; 481 }; 482 name.append(arg->GetName()) ;; 483 }; 484 name.append(""]"") ;; 485 ; 486 // Create and return profile object; 487 auto out = std::make_unique<RooProfileLL>(name.c_str(),(std::string(""Profile of "") + GetTitle()).c_str(),*this,paramsOfInterest);; 488 return RooFit::makeOwningPtr<RooAbsReal>(std::move(out));; 489}; 490 ; 491 ; 492 ; 493 ; 494 ; 495 ; 496////////////////////////////////////////////////////////////////////////////////; 497/// Create an object that represents the integral of the function over one or more observables listed in `iset`.; 498/// The actual integration calculation is only performed when the returned object is evaluated. The name; 499/// of the integral object is automatically constructed from the name of the input function, the variables; 500/// it integrates and the range integrates over.; 501///; 502/// \note The integral over a PDF is usually not normalised (*i.e.*, it is usually not; 503/// 1 when integrating the PDF over the full range). In fact, this integral is used *to compute*; 504/// the normalisation of each PDF. See the [rf110 tutorial](group__tutorial__roofit.html); 505/// for details on PDF normalisation.; 506///; 507/// The following named arguments are accepted; 508/// | | Effect on integral creation; 509/// |--|-------------------------------; 510/// | `NormSet(const RooArgSet&)` | Specify normalization set, mostly useful when working with PDFs; 511/// | `NumIntConfig(const RooNumIntConfig&)` | Use given configuration for any numeric integration, if necessary; 512/// | `Range(const char* name)` | Integrate only over given range. Multi",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:17517,Deployability,integrat,integrates,17517,"); 472{; 473 // Construct name of profile object; 474 auto name = std::string(GetName()) + ""_Profile["";; 475 bool first = true;; 476 for (auto const& arg : paramsOfInterest) {; 477 if (first) {; 478 first = false ;; 479 } else {; 480 name.append("","") ;; 481 }; 482 name.append(arg->GetName()) ;; 483 }; 484 name.append(""]"") ;; 485 ; 486 // Create and return profile object; 487 auto out = std::make_unique<RooProfileLL>(name.c_str(),(std::string(""Profile of "") + GetTitle()).c_str(),*this,paramsOfInterest);; 488 return RooFit::makeOwningPtr<RooAbsReal>(std::move(out));; 489}; 490 ; 491 ; 492 ; 493 ; 494 ; 495 ; 496////////////////////////////////////////////////////////////////////////////////; 497/// Create an object that represents the integral of the function over one or more observables listed in `iset`.; 498/// The actual integration calculation is only performed when the returned object is evaluated. The name; 499/// of the integral object is automatically constructed from the name of the input function, the variables; 500/// it integrates and the range integrates over.; 501///; 502/// \note The integral over a PDF is usually not normalised (*i.e.*, it is usually not; 503/// 1 when integrating the PDF over the full range). In fact, this integral is used *to compute*; 504/// the normalisation of each PDF. See the [rf110 tutorial](group__tutorial__roofit.html); 505/// for details on PDF normalisation.; 506///; 507/// The following named arguments are accepted; 508/// | | Effect on integral creation; 509/// |--|-------------------------------; 510/// | `NormSet(const RooArgSet&)` | Specify normalization set, mostly useful when working with PDFs; 511/// | `NumIntConfig(const RooNumIntConfig&)` | Use given configuration for any numeric integration, if necessary; 512/// | `Range(const char* name)` | Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments; 513 ; 514RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntegral(cons",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:17542,Deployability,integrat,integrates,17542,"); 472{; 473 // Construct name of profile object; 474 auto name = std::string(GetName()) + ""_Profile["";; 475 bool first = true;; 476 for (auto const& arg : paramsOfInterest) {; 477 if (first) {; 478 first = false ;; 479 } else {; 480 name.append("","") ;; 481 }; 482 name.append(arg->GetName()) ;; 483 }; 484 name.append(""]"") ;; 485 ; 486 // Create and return profile object; 487 auto out = std::make_unique<RooProfileLL>(name.c_str(),(std::string(""Profile of "") + GetTitle()).c_str(),*this,paramsOfInterest);; 488 return RooFit::makeOwningPtr<RooAbsReal>(std::move(out));; 489}; 490 ; 491 ; 492 ; 493 ; 494 ; 495 ; 496////////////////////////////////////////////////////////////////////////////////; 497/// Create an object that represents the integral of the function over one or more observables listed in `iset`.; 498/// The actual integration calculation is only performed when the returned object is evaluated. The name; 499/// of the integral object is automatically constructed from the name of the input function, the variables; 500/// it integrates and the range integrates over.; 501///; 502/// \note The integral over a PDF is usually not normalised (*i.e.*, it is usually not; 503/// 1 when integrating the PDF over the full range). In fact, this integral is used *to compute*; 504/// the normalisation of each PDF. See the [rf110 tutorial](group__tutorial__roofit.html); 505/// for details on PDF normalisation.; 506///; 507/// The following named arguments are accepted; 508/// | | Effect on integral creation; 509/// |--|-------------------------------; 510/// | `NormSet(const RooArgSet&)` | Specify normalization set, mostly useful when working with PDFs; 511/// | `NumIntConfig(const RooNumIntConfig&)` | Use given configuration for any numeric integration, if necessary; 512/// | `Range(const char* name)` | Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments; 513 ; 514RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntegral(cons",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:17673,Deployability,integrat,integrating,17673," = false ;; 479 } else {; 480 name.append("","") ;; 481 }; 482 name.append(arg->GetName()) ;; 483 }; 484 name.append(""]"") ;; 485 ; 486 // Create and return profile object; 487 auto out = std::make_unique<RooProfileLL>(name.c_str(),(std::string(""Profile of "") + GetTitle()).c_str(),*this,paramsOfInterest);; 488 return RooFit::makeOwningPtr<RooAbsReal>(std::move(out));; 489}; 490 ; 491 ; 492 ; 493 ; 494 ; 495 ; 496////////////////////////////////////////////////////////////////////////////////; 497/// Create an object that represents the integral of the function over one or more observables listed in `iset`.; 498/// The actual integration calculation is only performed when the returned object is evaluated. The name; 499/// of the integral object is automatically constructed from the name of the input function, the variables; 500/// it integrates and the range integrates over.; 501///; 502/// \note The integral over a PDF is usually not normalised (*i.e.*, it is usually not; 503/// 1 when integrating the PDF over the full range). In fact, this integral is used *to compute*; 504/// the normalisation of each PDF. See the [rf110 tutorial](group__tutorial__roofit.html); 505/// for details on PDF normalisation.; 506///; 507/// The following named arguments are accepted; 508/// | | Effect on integral creation; 509/// |--|-------------------------------; 510/// | `NormSet(const RooArgSet&)` | Specify normalization set, mostly useful when working with PDFs; 511/// | `NumIntConfig(const RooNumIntConfig&)` | Use given configuration for any numeric integration, if necessary; 512/// | `Range(const char* name)` | Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments; 513 ; 514RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2,; 515 const RooCmdArg& arg3, const RooCmdArg& arg4, const RooCmdArg& arg5,; 516 const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdAr",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:18203,Deployability,configurat,configuration,18203,"/////////////////////////////////////////////////////////; 497/// Create an object that represents the integral of the function over one or more observables listed in `iset`.; 498/// The actual integration calculation is only performed when the returned object is evaluated. The name; 499/// of the integral object is automatically constructed from the name of the input function, the variables; 500/// it integrates and the range integrates over.; 501///; 502/// \note The integral over a PDF is usually not normalised (*i.e.*, it is usually not; 503/// 1 when integrating the PDF over the full range). In fact, this integral is used *to compute*; 504/// the normalisation of each PDF. See the [rf110 tutorial](group__tutorial__roofit.html); 505/// for details on PDF normalisation.; 506///; 507/// The following named arguments are accepted; 508/// | | Effect on integral creation; 509/// |--|-------------------------------; 510/// | `NormSet(const RooArgSet&)` | Specify normalization set, mostly useful when working with PDFs; 511/// | `NumIntConfig(const RooNumIntConfig&)` | Use given configuration for any numeric integration, if necessary; 512/// | `Range(const char* name)` | Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments; 513 ; 514RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2,; 515 const RooCmdArg& arg3, const RooCmdArg& arg4, const RooCmdArg& arg5,; 516 const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdArg& arg8) const; 517{; 518 // Define configuration for this method; 519 RooCmdConfig pc(""RooAbsReal::createIntegral("" + std::string(GetName()) + "")"");; 520 pc.defineString(""rangeName"",""RangeWithName"",0,"""",true) ;; 521 pc.defineSet(""normSet"",""NormSet"",0,nullptr) ;; 522 pc.defineObject(""numIntConfig"",""NumIntConfig"",0,nullptr) ;; 523 ; 524 // Process & check varargs; 525 pc.process(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8) ;; 526 if (!pc",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:18233,Deployability,integrat,integration,18233,"/////////////////////////////////////////////////////////; 497/// Create an object that represents the integral of the function over one or more observables listed in `iset`.; 498/// The actual integration calculation is only performed when the returned object is evaluated. The name; 499/// of the integral object is automatically constructed from the name of the input function, the variables; 500/// it integrates and the range integrates over.; 501///; 502/// \note The integral over a PDF is usually not normalised (*i.e.*, it is usually not; 503/// 1 when integrating the PDF over the full range). In fact, this integral is used *to compute*; 504/// the normalisation of each PDF. See the [rf110 tutorial](group__tutorial__roofit.html); 505/// for details on PDF normalisation.; 506///; 507/// The following named arguments are accepted; 508/// | | Effect on integral creation; 509/// |--|-------------------------------; 510/// | `NormSet(const RooArgSet&)` | Specify normalization set, mostly useful when working with PDFs; 511/// | `NumIntConfig(const RooNumIntConfig&)` | Use given configuration for any numeric integration, if necessary; 512/// | `Range(const char* name)` | Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments; 513 ; 514RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2,; 515 const RooCmdArg& arg3, const RooCmdArg& arg4, const RooCmdArg& arg5,; 516 const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdArg& arg8) const; 517{; 518 // Define configuration for this method; 519 RooCmdConfig pc(""RooAbsReal::createIntegral("" + std::string(GetName()) + "")"");; 520 pc.defineString(""rangeName"",""RangeWithName"",0,"""",true) ;; 521 pc.defineSet(""normSet"",""NormSet"",0,nullptr) ;; 522 pc.defineObject(""numIntConfig"",""NumIntConfig"",0,nullptr) ;; 523 ; 524 // Process & check varargs; 525 pc.process(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8) ;; 526 if (!pc",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:18712,Deployability,configurat,configuration,18712,"The integral over a PDF is usually not normalised (*i.e.*, it is usually not; 503/// 1 when integrating the PDF over the full range). In fact, this integral is used *to compute*; 504/// the normalisation of each PDF. See the [rf110 tutorial](group__tutorial__roofit.html); 505/// for details on PDF normalisation.; 506///; 507/// The following named arguments are accepted; 508/// | | Effect on integral creation; 509/// |--|-------------------------------; 510/// | `NormSet(const RooArgSet&)` | Specify normalization set, mostly useful when working with PDFs; 511/// | `NumIntConfig(const RooNumIntConfig&)` | Use given configuration for any numeric integration, if necessary; 512/// | `Range(const char* name)` | Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments; 513 ; 514RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2,; 515 const RooCmdArg& arg3, const RooCmdArg& arg4, const RooCmdArg& arg5,; 516 const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdArg& arg8) const; 517{; 518 // Define configuration for this method; 519 RooCmdConfig pc(""RooAbsReal::createIntegral("" + std::string(GetName()) + "")"");; 520 pc.defineString(""rangeName"",""RangeWithName"",0,"""",true) ;; 521 pc.defineSet(""normSet"",""NormSet"",0,nullptr) ;; 522 pc.defineObject(""numIntConfig"",""NumIntConfig"",0,nullptr) ;; 523 ; 524 // Process & check varargs; 525 pc.process(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8) ;; 526 if (!pc.ok(true)) {; 527 return nullptr;; 528 }; 529 ; 530 // Extract values from named arguments; 531 const char* rangeName = pc.getString(""rangeName"",nullptr,true) ;; 532 const RooArgSet* nset = pc.getSet(""normSet"",nullptr);; 533 const RooNumIntConfig* cfg = static_cast<const RooNumIntConfig*>(pc.getObject(""numIntConfig"",nullptr)) ;; 534 ; 535 return createIntegral(iset,nset,cfg,rangeName) ;; 536}; 537 ; 538 ; 539 ; 540 ; 541 ; 542////////////////////////////////////////",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:19757,Deployability,integrat,integration,19757,"gral("" + std::string(GetName()) + "")"");; 520 pc.defineString(""rangeName"",""RangeWithName"",0,"""",true) ;; 521 pc.defineSet(""normSet"",""NormSet"",0,nullptr) ;; 522 pc.defineObject(""numIntConfig"",""NumIntConfig"",0,nullptr) ;; 523 ; 524 // Process & check varargs; 525 pc.process(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8) ;; 526 if (!pc.ok(true)) {; 527 return nullptr;; 528 }; 529 ; 530 // Extract values from named arguments; 531 const char* rangeName = pc.getString(""rangeName"",nullptr,true) ;; 532 const RooArgSet* nset = pc.getSet(""normSet"",nullptr);; 533 const RooNumIntConfig* cfg = static_cast<const RooNumIntConfig*>(pc.getObject(""numIntConfig"",nullptr)) ;; 534 ; 535 return createIntegral(iset,nset,cfg,rangeName) ;; 536}; 537 ; 538 ; 539 ; 540 ; 541 ; 542////////////////////////////////////////////////////////////////////////////////; 543/// Create an object that represents the integral of the function over one or more observables listed in iset.; 544/// The actual integration calculation is only performed when the return object is evaluated. The name; 545/// of the integral object is automatically constructed from the name of the input function, the variables; 546/// it integrates and the range integrates over. If nset is specified the integrand is request; 547/// to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified; 548/// the integral is performed over the named range, otherwise it is performed over the domain of each; 549/// integrated observable. If cfg is specified it will be used to configure any numeric integration; 550/// aspect of the integral. It will not force the integral to be performed numerically, which is; 551/// decided automatically by RooRealIntegral.; 552 ; 553RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntegral(const RooArgSet& iset, const RooArgSet* nset,; 554 const RooNumIntConfig* cfg, const char* rangeName) const; 555{; 556 if (!rangeName || strchr(rangeName,',')==nullptr) {; 557 // Simple case: int",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:19967,Deployability,integrat,integrates,19967,"Set"",0,nullptr) ;; 522 pc.defineObject(""numIntConfig"",""NumIntConfig"",0,nullptr) ;; 523 ; 524 // Process & check varargs; 525 pc.process(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8) ;; 526 if (!pc.ok(true)) {; 527 return nullptr;; 528 }; 529 ; 530 // Extract values from named arguments; 531 const char* rangeName = pc.getString(""rangeName"",nullptr,true) ;; 532 const RooArgSet* nset = pc.getSet(""normSet"",nullptr);; 533 const RooNumIntConfig* cfg = static_cast<const RooNumIntConfig*>(pc.getObject(""numIntConfig"",nullptr)) ;; 534 ; 535 return createIntegral(iset,nset,cfg,rangeName) ;; 536}; 537 ; 538 ; 539 ; 540 ; 541 ; 542////////////////////////////////////////////////////////////////////////////////; 543/// Create an object that represents the integral of the function over one or more observables listed in iset.; 544/// The actual integration calculation is only performed when the return object is evaluated. The name; 545/// of the integral object is automatically constructed from the name of the input function, the variables; 546/// it integrates and the range integrates over. If nset is specified the integrand is request; 547/// to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified; 548/// the integral is performed over the named range, otherwise it is performed over the domain of each; 549/// integrated observable. If cfg is specified it will be used to configure any numeric integration; 550/// aspect of the integral. It will not force the integral to be performed numerically, which is; 551/// decided automatically by RooRealIntegral.; 552 ; 553RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntegral(const RooArgSet& iset, const RooArgSet* nset,; 554 const RooNumIntConfig* cfg, const char* rangeName) const; 555{; 556 if (!rangeName || strchr(rangeName,',')==nullptr) {; 557 // Simple case: integral over full range or single limited range; 558 return createIntObj(iset,nset,cfg,rangeName);; 559 }; 560 ; 561 // Integral over mult",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:19992,Deployability,integrat,integrates,19992,"Set"",0,nullptr) ;; 522 pc.defineObject(""numIntConfig"",""NumIntConfig"",0,nullptr) ;; 523 ; 524 // Process & check varargs; 525 pc.process(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8) ;; 526 if (!pc.ok(true)) {; 527 return nullptr;; 528 }; 529 ; 530 // Extract values from named arguments; 531 const char* rangeName = pc.getString(""rangeName"",nullptr,true) ;; 532 const RooArgSet* nset = pc.getSet(""normSet"",nullptr);; 533 const RooNumIntConfig* cfg = static_cast<const RooNumIntConfig*>(pc.getObject(""numIntConfig"",nullptr)) ;; 534 ; 535 return createIntegral(iset,nset,cfg,rangeName) ;; 536}; 537 ; 538 ; 539 ; 540 ; 541 ; 542////////////////////////////////////////////////////////////////////////////////; 543/// Create an object that represents the integral of the function over one or more observables listed in iset.; 544/// The actual integration calculation is only performed when the return object is evaluated. The name; 545/// of the integral object is automatically constructed from the name of the input function, the variables; 546/// it integrates and the range integrates over. If nset is specified the integrand is request; 547/// to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified; 548/// the integral is performed over the named range, otherwise it is performed over the domain of each; 549/// integrated observable. If cfg is specified it will be used to configure any numeric integration; 550/// aspect of the integral. It will not force the integral to be performed numerically, which is; 551/// decided automatically by RooRealIntegral.; 552 ; 553RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntegral(const RooArgSet& iset, const RooArgSet* nset,; 554 const RooNumIntConfig* cfg, const char* rangeName) const; 555{; 556 if (!rangeName || strchr(rangeName,',')==nullptr) {; 557 // Simple case: integral over full range or single limited range; 558 return createIntObj(iset,nset,cfg,rangeName);; 559 }; 560 ; 561 // Integral over mult",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:20277,Deployability,integrat,integrated,20277,"r* rangeName = pc.getString(""rangeName"",nullptr,true) ;; 532 const RooArgSet* nset = pc.getSet(""normSet"",nullptr);; 533 const RooNumIntConfig* cfg = static_cast<const RooNumIntConfig*>(pc.getObject(""numIntConfig"",nullptr)) ;; 534 ; 535 return createIntegral(iset,nset,cfg,rangeName) ;; 536}; 537 ; 538 ; 539 ; 540 ; 541 ; 542////////////////////////////////////////////////////////////////////////////////; 543/// Create an object that represents the integral of the function over one or more observables listed in iset.; 544/// The actual integration calculation is only performed when the return object is evaluated. The name; 545/// of the integral object is automatically constructed from the name of the input function, the variables; 546/// it integrates and the range integrates over. If nset is specified the integrand is request; 547/// to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified; 548/// the integral is performed over the named range, otherwise it is performed over the domain of each; 549/// integrated observable. If cfg is specified it will be used to configure any numeric integration; 550/// aspect of the integral. It will not force the integral to be performed numerically, which is; 551/// decided automatically by RooRealIntegral.; 552 ; 553RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntegral(const RooArgSet& iset, const RooArgSet* nset,; 554 const RooNumIntConfig* cfg, const char* rangeName) const; 555{; 556 if (!rangeName || strchr(rangeName,',')==nullptr) {; 557 // Simple case: integral over full range or single limited range; 558 return createIntObj(iset,nset,cfg,rangeName);; 559 }; 560 ; 561 // Integral over multiple ranges; 562 std::vector<std::string> tokens = ROOT::Split(rangeName, "","");; 563 ; 564 if(RooHelpers::checkIfRangesOverlap(iset, tokens)) {; 565 std::stringstream errMsg;; 566 errMsg << GetName() << "" : integrating with respect to the variables "" << iset << "" on the ranges \"""" << rangeName; ",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:20361,Deployability,integrat,integration,20361,"tConfig* cfg = static_cast<const RooNumIntConfig*>(pc.getObject(""numIntConfig"",nullptr)) ;; 534 ; 535 return createIntegral(iset,nset,cfg,rangeName) ;; 536}; 537 ; 538 ; 539 ; 540 ; 541 ; 542////////////////////////////////////////////////////////////////////////////////; 543/// Create an object that represents the integral of the function over one or more observables listed in iset.; 544/// The actual integration calculation is only performed when the return object is evaluated. The name; 545/// of the integral object is automatically constructed from the name of the input function, the variables; 546/// it integrates and the range integrates over. If nset is specified the integrand is request; 547/// to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified; 548/// the integral is performed over the named range, otherwise it is performed over the domain of each; 549/// integrated observable. If cfg is specified it will be used to configure any numeric integration; 550/// aspect of the integral. It will not force the integral to be performed numerically, which is; 551/// decided automatically by RooRealIntegral.; 552 ; 553RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntegral(const RooArgSet& iset, const RooArgSet* nset,; 554 const RooNumIntConfig* cfg, const char* rangeName) const; 555{; 556 if (!rangeName || strchr(rangeName,',')==nullptr) {; 557 // Simple case: integral over full range or single limited range; 558 return createIntObj(iset,nset,cfg,rangeName);; 559 }; 560 ; 561 // Integral over multiple ranges; 562 std::vector<std::string> tokens = ROOT::Split(rangeName, "","");; 563 ; 564 if(RooHelpers::checkIfRangesOverlap(iset, tokens)) {; 565 std::stringstream errMsg;; 566 errMsg << GetName() << "" : integrating with respect to the variables "" << iset << "" on the ranges \"""" << rangeName; 567 << ""\"" is not possible because the ranges are overlapping"";; 568 const std::string errMsgString = errMsg.str();; 569 coutE(Integra",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:21129,Deployability,integrat,integrating,21129," input function, the variables; 546/// it integrates and the range integrates over. If nset is specified the integrand is request; 547/// to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified; 548/// the integral is performed over the named range, otherwise it is performed over the domain of each; 549/// integrated observable. If cfg is specified it will be used to configure any numeric integration; 550/// aspect of the integral. It will not force the integral to be performed numerically, which is; 551/// decided automatically by RooRealIntegral.; 552 ; 553RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntegral(const RooArgSet& iset, const RooArgSet* nset,; 554 const RooNumIntConfig* cfg, const char* rangeName) const; 555{; 556 if (!rangeName || strchr(rangeName,',')==nullptr) {; 557 // Simple case: integral over full range or single limited range; 558 return createIntObj(iset,nset,cfg,rangeName);; 559 }; 560 ; 561 // Integral over multiple ranges; 562 std::vector<std::string> tokens = ROOT::Split(rangeName, "","");; 563 ; 564 if(RooHelpers::checkIfRangesOverlap(iset, tokens)) {; 565 std::stringstream errMsg;; 566 errMsg << GetName() << "" : integrating with respect to the variables "" << iset << "" on the ranges \"""" << rangeName; 567 << ""\"" is not possible because the ranges are overlapping"";; 568 const std::string errMsgString = errMsg.str();; 569 coutE(Integration) << errMsgString << std::endl;; 570 throw std::invalid_argument(errMsgString);; 571 }; 572 ; 573 RooArgSet components ;; 574 for (const std::string& token : tokens) {; 575 components.addOwned(std::unique_ptr<RooAbsReal>{createIntObj(iset,nset,cfg, token.c_str())});; 576 }; 577 ; 578 const std::string title = std::string(""Integral of "") + GetTitle();; 579 const std::string fullName = std::string(GetName()) + integralNameSuffix(iset,nset,rangeName).Data();; 580 ; 581 auto out = std::make_unique<RooAddition>(fullName.c_str(), title.c_str(), components);; 582 out->a",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:22753,Deployability,integrat,integration,22753,"tokens) {; 575 components.addOwned(std::unique_ptr<RooAbsReal>{createIntObj(iset,nset,cfg, token.c_str())});; 576 }; 577 ; 578 const std::string title = std::string(""Integral of "") + GetTitle();; 579 const std::string fullName = std::string(GetName()) + integralNameSuffix(iset,nset,rangeName).Data();; 580 ; 581 auto out = std::make_unique<RooAddition>(fullName.c_str(), title.c_str(), components);; 582 out->addOwnedComponents(std::move(components));; 583 return RooFit::makeOwningPtr<RooAbsReal>(std::move(out));; 584}; 585 ; 586 ; 587 ; 588////////////////////////////////////////////////////////////////////////////////; 589/// Internal utility function for createIntegral() that creates the actual integral object.; 590RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntObj(const RooArgSet& iset2, const RooArgSet* nset2,; 591 const RooNumIntConfig* cfg, const char* rangeName) const; 592{; 593 // Make internal use copies of iset and nset; 594 RooArgSet iset(iset2) ;; 595 const RooArgSet* nset = nset2 ;; 596 ; 597 ; 598 // Initialize local variables perparing for recursive loop; 599 bool error = false ;; 600 const RooAbsReal* integrand = this ;; 601 std::unique_ptr<RooAbsReal> integral;; 602 ; 603 // Handle trivial case of no integration here explicitly; 604 if (iset.empty()) {; 605 ; 606 const std::string title = std::string(""Integral of "") + GetTitle();; 607 const std::string name = std::string(GetName()) + integralNameSuffix(iset,nset,rangeName).Data();; 608 ; 609 auto out = std::make_unique<RooRealIntegral>(name.c_str(), title.c_str(), *this, iset, nset, cfg, rangeName);; 610 return RooFit::makeOwningPtr<RooAbsReal>(std::move(out));; 611 }; 612 ; 613 // Process integration over remaining integration variables; 614 while(!iset.empty()) {; 615 ; 616 ; 617 // Find largest set of observables that can be integrated in one go; 618 RooArgSet innerSet ;; 619 findInnerMostIntegration(iset,innerSet,rangeName) ;; 620 ; 621 // If largest set of observables that can be integrated is",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:23201,Deployability,integrat,integration,23201,"unction for createIntegral() that creates the actual integral object.; 590RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntObj(const RooArgSet& iset2, const RooArgSet* nset2,; 591 const RooNumIntConfig* cfg, const char* rangeName) const; 592{; 593 // Make internal use copies of iset and nset; 594 RooArgSet iset(iset2) ;; 595 const RooArgSet* nset = nset2 ;; 596 ; 597 ; 598 // Initialize local variables perparing for recursive loop; 599 bool error = false ;; 600 const RooAbsReal* integrand = this ;; 601 std::unique_ptr<RooAbsReal> integral;; 602 ; 603 // Handle trivial case of no integration here explicitly; 604 if (iset.empty()) {; 605 ; 606 const std::string title = std::string(""Integral of "") + GetTitle();; 607 const std::string name = std::string(GetName()) + integralNameSuffix(iset,nset,rangeName).Data();; 608 ; 609 auto out = std::make_unique<RooRealIntegral>(name.c_str(), title.c_str(), *this, iset, nset, cfg, rangeName);; 610 return RooFit::makeOwningPtr<RooAbsReal>(std::move(out));; 611 }; 612 ; 613 // Process integration over remaining integration variables; 614 while(!iset.empty()) {; 615 ; 616 ; 617 // Find largest set of observables that can be integrated in one go; 618 RooArgSet innerSet ;; 619 findInnerMostIntegration(iset,innerSet,rangeName) ;; 620 ; 621 // If largest set of observables that can be integrated is empty set, problem was ill defined; 622 // Postpone error messaging and handling to end of function, exit loop here; 623 if (innerSet.empty()) {; 624 error = true ;; 625 break ;; 626 }; 627 ; 628 // Prepare name and title of integral to be created; 629 const std::string title = std::string(""Integral of "") + integrand->GetTitle();; 630 const std::string name = std::string(integrand->GetName()) + integrand->integralNameSuffix(innerSet,nset,rangeName).Data();; 631 ; 632 std::unique_ptr<RooAbsReal> innerIntegral = std::move(integral);; 633 ; 634 // Construct innermost integral; 635 integral = std::make_unique<RooRealIntegral>(name.c_str(),title.c",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:23228,Deployability,integrat,integration,23228,"unction for createIntegral() that creates the actual integral object.; 590RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntObj(const RooArgSet& iset2, const RooArgSet* nset2,; 591 const RooNumIntConfig* cfg, const char* rangeName) const; 592{; 593 // Make internal use copies of iset and nset; 594 RooArgSet iset(iset2) ;; 595 const RooArgSet* nset = nset2 ;; 596 ; 597 ; 598 // Initialize local variables perparing for recursive loop; 599 bool error = false ;; 600 const RooAbsReal* integrand = this ;; 601 std::unique_ptr<RooAbsReal> integral;; 602 ; 603 // Handle trivial case of no integration here explicitly; 604 if (iset.empty()) {; 605 ; 606 const std::string title = std::string(""Integral of "") + GetTitle();; 607 const std::string name = std::string(GetName()) + integralNameSuffix(iset,nset,rangeName).Data();; 608 ; 609 auto out = std::make_unique<RooRealIntegral>(name.c_str(), title.c_str(), *this, iset, nset, cfg, rangeName);; 610 return RooFit::makeOwningPtr<RooAbsReal>(std::move(out));; 611 }; 612 ; 613 // Process integration over remaining integration variables; 614 while(!iset.empty()) {; 615 ; 616 ; 617 // Find largest set of observables that can be integrated in one go; 618 RooArgSet innerSet ;; 619 findInnerMostIntegration(iset,innerSet,rangeName) ;; 620 ; 621 // If largest set of observables that can be integrated is empty set, problem was ill defined; 622 // Postpone error messaging and handling to end of function, exit loop here; 623 if (innerSet.empty()) {; 624 error = true ;; 625 break ;; 626 }; 627 ; 628 // Prepare name and title of integral to be created; 629 const std::string title = std::string(""Integral of "") + integrand->GetTitle();; 630 const std::string name = std::string(integrand->GetName()) + integrand->integralNameSuffix(innerSet,nset,rangeName).Data();; 631 ; 632 std::unique_ptr<RooAbsReal> innerIntegral = std::move(integral);; 633 ; 634 // Construct innermost integral; 635 integral = std::make_unique<RooRealIntegral>(name.c_str(),title.c",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:23342,Deployability,integrat,integrated,23342,"t; 594 RooArgSet iset(iset2) ;; 595 const RooArgSet* nset = nset2 ;; 596 ; 597 ; 598 // Initialize local variables perparing for recursive loop; 599 bool error = false ;; 600 const RooAbsReal* integrand = this ;; 601 std::unique_ptr<RooAbsReal> integral;; 602 ; 603 // Handle trivial case of no integration here explicitly; 604 if (iset.empty()) {; 605 ; 606 const std::string title = std::string(""Integral of "") + GetTitle();; 607 const std::string name = std::string(GetName()) + integralNameSuffix(iset,nset,rangeName).Data();; 608 ; 609 auto out = std::make_unique<RooRealIntegral>(name.c_str(), title.c_str(), *this, iset, nset, cfg, rangeName);; 610 return RooFit::makeOwningPtr<RooAbsReal>(std::move(out));; 611 }; 612 ; 613 // Process integration over remaining integration variables; 614 while(!iset.empty()) {; 615 ; 616 ; 617 // Find largest set of observables that can be integrated in one go; 618 RooArgSet innerSet ;; 619 findInnerMostIntegration(iset,innerSet,rangeName) ;; 620 ; 621 // If largest set of observables that can be integrated is empty set, problem was ill defined; 622 // Postpone error messaging and handling to end of function, exit loop here; 623 if (innerSet.empty()) {; 624 error = true ;; 625 break ;; 626 }; 627 ; 628 // Prepare name and title of integral to be created; 629 const std::string title = std::string(""Integral of "") + integrand->GetTitle();; 630 const std::string name = std::string(integrand->GetName()) + integrand->integralNameSuffix(innerSet,nset,rangeName).Data();; 631 ; 632 std::unique_ptr<RooAbsReal> innerIntegral = std::move(integral);; 633 ; 634 // Construct innermost integral; 635 integral = std::make_unique<RooRealIntegral>(name.c_str(),title.c_str(),*integrand,innerSet,nset,cfg,rangeName);; 636 ; 637 // Integral of integral takes ownership of innermost integral; 638 if (innerIntegral) {; 639 integral->addOwnedComponents(std::move(innerIntegral));; 640 }; 641 ; 642 // Remove already integrated observables from to-do list; 643 iset.",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:23502,Deployability,integrat,integrated,23502,"t; 594 RooArgSet iset(iset2) ;; 595 const RooArgSet* nset = nset2 ;; 596 ; 597 ; 598 // Initialize local variables perparing for recursive loop; 599 bool error = false ;; 600 const RooAbsReal* integrand = this ;; 601 std::unique_ptr<RooAbsReal> integral;; 602 ; 603 // Handle trivial case of no integration here explicitly; 604 if (iset.empty()) {; 605 ; 606 const std::string title = std::string(""Integral of "") + GetTitle();; 607 const std::string name = std::string(GetName()) + integralNameSuffix(iset,nset,rangeName).Data();; 608 ; 609 auto out = std::make_unique<RooRealIntegral>(name.c_str(), title.c_str(), *this, iset, nset, cfg, rangeName);; 610 return RooFit::makeOwningPtr<RooAbsReal>(std::move(out));; 611 }; 612 ; 613 // Process integration over remaining integration variables; 614 while(!iset.empty()) {; 615 ; 616 ; 617 // Find largest set of observables that can be integrated in one go; 618 RooArgSet innerSet ;; 619 findInnerMostIntegration(iset,innerSet,rangeName) ;; 620 ; 621 // If largest set of observables that can be integrated is empty set, problem was ill defined; 622 // Postpone error messaging and handling to end of function, exit loop here; 623 if (innerSet.empty()) {; 624 error = true ;; 625 break ;; 626 }; 627 ; 628 // Prepare name and title of integral to be created; 629 const std::string title = std::string(""Integral of "") + integrand->GetTitle();; 630 const std::string name = std::string(integrand->GetName()) + integrand->integralNameSuffix(innerSet,nset,rangeName).Data();; 631 ; 632 std::unique_ptr<RooAbsReal> innerIntegral = std::move(integral);; 633 ; 634 // Construct innermost integral; 635 integral = std::make_unique<RooRealIntegral>(name.c_str(),title.c_str(),*integrand,innerSet,nset,cfg,rangeName);; 636 ; 637 // Integral of integral takes ownership of innermost integral; 638 if (innerIntegral) {; 639 integral->addOwnedComponents(std::move(innerIntegral));; 640 }; 641 ; 642 // Remove already integrated observables from to-do list; 643 iset.",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:24410,Deployability,integrat,integrated,24410,"et of observables that can be integrated in one go; 618 RooArgSet innerSet ;; 619 findInnerMostIntegration(iset,innerSet,rangeName) ;; 620 ; 621 // If largest set of observables that can be integrated is empty set, problem was ill defined; 622 // Postpone error messaging and handling to end of function, exit loop here; 623 if (innerSet.empty()) {; 624 error = true ;; 625 break ;; 626 }; 627 ; 628 // Prepare name and title of integral to be created; 629 const std::string title = std::string(""Integral of "") + integrand->GetTitle();; 630 const std::string name = std::string(integrand->GetName()) + integrand->integralNameSuffix(innerSet,nset,rangeName).Data();; 631 ; 632 std::unique_ptr<RooAbsReal> innerIntegral = std::move(integral);; 633 ; 634 // Construct innermost integral; 635 integral = std::make_unique<RooRealIntegral>(name.c_str(),title.c_str(),*integrand,innerSet,nset,cfg,rangeName);; 636 ; 637 // Integral of integral takes ownership of innermost integral; 638 if (innerIntegral) {; 639 integral->addOwnedComponents(std::move(innerIntegral));; 640 }; 641 ; 642 // Remove already integrated observables from to-do list; 643 iset.remove(innerSet) ;; 644 ; 645 // Send info message on recursion if needed; 646 if (integrand == this && !iset.empty()) {; 647 coutI(Integration) << GetName() << "" : multidimensional integration over observables with parameterized ranges in terms of other integrated observables detected, using recursive integration strategy to construct final integral"" << std::endl ;; 648 }; 649 ; 650 // Prepare for recursion, next integral should integrate last integrand; 651 integrand = integral.get();; 652 ; 653 ; 654 // Only need normalization set in innermost integration; 655 nset = nullptr;; 656 }; 657 ; 658 if (error) {; 659 coutE(Integration) << GetName() << "" : ERROR while defining recursive integral over observables with parameterized integration ranges, please check that integration rangs specify uniquely defined integral "" << std::endl;; 660 retur",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:24641,Deployability,integrat,integration,24641,"created; 629 const std::string title = std::string(""Integral of "") + integrand->GetTitle();; 630 const std::string name = std::string(integrand->GetName()) + integrand->integralNameSuffix(innerSet,nset,rangeName).Data();; 631 ; 632 std::unique_ptr<RooAbsReal> innerIntegral = std::move(integral);; 633 ; 634 // Construct innermost integral; 635 integral = std::make_unique<RooRealIntegral>(name.c_str(),title.c_str(),*integrand,innerSet,nset,cfg,rangeName);; 636 ; 637 // Integral of integral takes ownership of innermost integral; 638 if (innerIntegral) {; 639 integral->addOwnedComponents(std::move(innerIntegral));; 640 }; 641 ; 642 // Remove already integrated observables from to-do list; 643 iset.remove(innerSet) ;; 644 ; 645 // Send info message on recursion if needed; 646 if (integrand == this && !iset.empty()) {; 647 coutI(Integration) << GetName() << "" : multidimensional integration over observables with parameterized ranges in terms of other integrated observables detected, using recursive integration strategy to construct final integral"" << std::endl ;; 648 }; 649 ; 650 // Prepare for recursion, next integral should integrate last integrand; 651 integrand = integral.get();; 652 ; 653 ; 654 // Only need normalization set in innermost integration; 655 nset = nullptr;; 656 }; 657 ; 658 if (error) {; 659 coutE(Integration) << GetName() << "" : ERROR while defining recursive integral over observables with parameterized integration ranges, please check that integration rangs specify uniquely defined integral "" << std::endl;; 660 return nullptr;; 661 }; 662 ; 663 ; 664 // After-burner: apply interpolating cache on (numeric) integral if requested by user; 665 const char* cacheParamsStr = getStringAttribute(""CACHEPARAMINT"") ;; 666 if (cacheParamsStr && strlen(cacheParamsStr)) {; 667 ; 668 std::unique_ptr<RooArgSet> intParams{integral->getVariables()};; 669 ; 670 RooArgSet cacheParams = RooHelpers::selectFromArgSet(*intParams, cacheParamsStr);; 671 ; 672 if (!cacheParams.emp",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:24714,Deployability,integrat,integrated,24714,"created; 629 const std::string title = std::string(""Integral of "") + integrand->GetTitle();; 630 const std::string name = std::string(integrand->GetName()) + integrand->integralNameSuffix(innerSet,nset,rangeName).Data();; 631 ; 632 std::unique_ptr<RooAbsReal> innerIntegral = std::move(integral);; 633 ; 634 // Construct innermost integral; 635 integral = std::make_unique<RooRealIntegral>(name.c_str(),title.c_str(),*integrand,innerSet,nset,cfg,rangeName);; 636 ; 637 // Integral of integral takes ownership of innermost integral; 638 if (innerIntegral) {; 639 integral->addOwnedComponents(std::move(innerIntegral));; 640 }; 641 ; 642 // Remove already integrated observables from to-do list; 643 iset.remove(innerSet) ;; 644 ; 645 // Send info message on recursion if needed; 646 if (integrand == this && !iset.empty()) {; 647 coutI(Integration) << GetName() << "" : multidimensional integration over observables with parameterized ranges in terms of other integrated observables detected, using recursive integration strategy to construct final integral"" << std::endl ;; 648 }; 649 ; 650 // Prepare for recursion, next integral should integrate last integrand; 651 integrand = integral.get();; 652 ; 653 ; 654 // Only need normalization set in innermost integration; 655 nset = nullptr;; 656 }; 657 ; 658 if (error) {; 659 coutE(Integration) << GetName() << "" : ERROR while defining recursive integral over observables with parameterized integration ranges, please check that integration rangs specify uniquely defined integral "" << std::endl;; 660 return nullptr;; 661 }; 662 ; 663 ; 664 // After-burner: apply interpolating cache on (numeric) integral if requested by user; 665 const char* cacheParamsStr = getStringAttribute(""CACHEPARAMINT"") ;; 666 if (cacheParamsStr && strlen(cacheParamsStr)) {; 667 ; 668 std::unique_ptr<RooArgSet> intParams{integral->getVariables()};; 669 ; 670 RooArgSet cacheParams = RooHelpers::selectFromArgSet(*intParams, cacheParamsStr);; 671 ; 672 if (!cacheParams.emp",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:24763,Deployability,integrat,integration,24763,"created; 629 const std::string title = std::string(""Integral of "") + integrand->GetTitle();; 630 const std::string name = std::string(integrand->GetName()) + integrand->integralNameSuffix(innerSet,nset,rangeName).Data();; 631 ; 632 std::unique_ptr<RooAbsReal> innerIntegral = std::move(integral);; 633 ; 634 // Construct innermost integral; 635 integral = std::make_unique<RooRealIntegral>(name.c_str(),title.c_str(),*integrand,innerSet,nset,cfg,rangeName);; 636 ; 637 // Integral of integral takes ownership of innermost integral; 638 if (innerIntegral) {; 639 integral->addOwnedComponents(std::move(innerIntegral));; 640 }; 641 ; 642 // Remove already integrated observables from to-do list; 643 iset.remove(innerSet) ;; 644 ; 645 // Send info message on recursion if needed; 646 if (integrand == this && !iset.empty()) {; 647 coutI(Integration) << GetName() << "" : multidimensional integration over observables with parameterized ranges in terms of other integrated observables detected, using recursive integration strategy to construct final integral"" << std::endl ;; 648 }; 649 ; 650 // Prepare for recursion, next integral should integrate last integrand; 651 integrand = integral.get();; 652 ; 653 ; 654 // Only need normalization set in innermost integration; 655 nset = nullptr;; 656 }; 657 ; 658 if (error) {; 659 coutE(Integration) << GetName() << "" : ERROR while defining recursive integral over observables with parameterized integration ranges, please check that integration rangs specify uniquely defined integral "" << std::endl;; 660 return nullptr;; 661 }; 662 ; 663 ; 664 // After-burner: apply interpolating cache on (numeric) integral if requested by user; 665 const char* cacheParamsStr = getStringAttribute(""CACHEPARAMINT"") ;; 666 if (cacheParamsStr && strlen(cacheParamsStr)) {; 667 ; 668 std::unique_ptr<RooArgSet> intParams{integral->getVariables()};; 669 ; 670 RooArgSet cacheParams = RooHelpers::selectFromArgSet(*intParams, cacheParamsStr);; 671 ; 672 if (!cacheParams.emp",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:24893,Deployability,integrat,integrate,24893,"created; 629 const std::string title = std::string(""Integral of "") + integrand->GetTitle();; 630 const std::string name = std::string(integrand->GetName()) + integrand->integralNameSuffix(innerSet,nset,rangeName).Data();; 631 ; 632 std::unique_ptr<RooAbsReal> innerIntegral = std::move(integral);; 633 ; 634 // Construct innermost integral; 635 integral = std::make_unique<RooRealIntegral>(name.c_str(),title.c_str(),*integrand,innerSet,nset,cfg,rangeName);; 636 ; 637 // Integral of integral takes ownership of innermost integral; 638 if (innerIntegral) {; 639 integral->addOwnedComponents(std::move(innerIntegral));; 640 }; 641 ; 642 // Remove already integrated observables from to-do list; 643 iset.remove(innerSet) ;; 644 ; 645 // Send info message on recursion if needed; 646 if (integrand == this && !iset.empty()) {; 647 coutI(Integration) << GetName() << "" : multidimensional integration over observables with parameterized ranges in terms of other integrated observables detected, using recursive integration strategy to construct final integral"" << std::endl ;; 648 }; 649 ; 650 // Prepare for recursion, next integral should integrate last integrand; 651 integrand = integral.get();; 652 ; 653 ; 654 // Only need normalization set in innermost integration; 655 nset = nullptr;; 656 }; 657 ; 658 if (error) {; 659 coutE(Integration) << GetName() << "" : ERROR while defining recursive integral over observables with parameterized integration ranges, please check that integration rangs specify uniquely defined integral "" << std::endl;; 660 return nullptr;; 661 }; 662 ; 663 ; 664 // After-burner: apply interpolating cache on (numeric) integral if requested by user; 665 const char* cacheParamsStr = getStringAttribute(""CACHEPARAMINT"") ;; 666 if (cacheParamsStr && strlen(cacheParamsStr)) {; 667 ; 668 std::unique_ptr<RooArgSet> intParams{integral->getVariables()};; 669 ; 670 RooArgSet cacheParams = RooHelpers::selectFromArgSet(*intParams, cacheParamsStr);; 671 ; 672 if (!cacheParams.emp",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:25012,Deployability,integrat,integration,25012,"d::move(innerIntegral));; 640 }; 641 ; 642 // Remove already integrated observables from to-do list; 643 iset.remove(innerSet) ;; 644 ; 645 // Send info message on recursion if needed; 646 if (integrand == this && !iset.empty()) {; 647 coutI(Integration) << GetName() << "" : multidimensional integration over observables with parameterized ranges in terms of other integrated observables detected, using recursive integration strategy to construct final integral"" << std::endl ;; 648 }; 649 ; 650 // Prepare for recursion, next integral should integrate last integrand; 651 integrand = integral.get();; 652 ; 653 ; 654 // Only need normalization set in innermost integration; 655 nset = nullptr;; 656 }; 657 ; 658 if (error) {; 659 coutE(Integration) << GetName() << "" : ERROR while defining recursive integral over observables with parameterized integration ranges, please check that integration rangs specify uniquely defined integral "" << std::endl;; 660 return nullptr;; 661 }; 662 ; 663 ; 664 // After-burner: apply interpolating cache on (numeric) integral if requested by user; 665 const char* cacheParamsStr = getStringAttribute(""CACHEPARAMINT"") ;; 666 if (cacheParamsStr && strlen(cacheParamsStr)) {; 667 ; 668 std::unique_ptr<RooArgSet> intParams{integral->getVariables()};; 669 ; 670 RooArgSet cacheParams = RooHelpers::selectFromArgSet(*intParams, cacheParamsStr);; 671 ; 672 if (!cacheParams.empty()) {; 673 cxcoutD(Caching) << ""RooAbsReal::createIntObj("" << GetName() << "") INFO: constructing "" << cacheParams.size(); 674 << ""-dim value cache for integral over "" << iset2 << "" as a function of "" << cacheParams << "" in range "" << (rangeName?rangeName:""<none>"") << std::endl ;; 675 std::string name = Form(""%s_CACHE_[%s]"",integral->GetName(),cacheParams.contentsString().c_str()) ;; 676 auto cachedIntegral = std::make_unique<RooCachedReal>(name.c_str(),name.c_str(),*integral,cacheParams);; 677 cachedIntegral->setInterpolationOrder(2) ;; 678 cachedIntegral->addOwnedComponents(std::mov",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:25196,Deployability,integrat,integration,25196,"d::move(innerIntegral));; 640 }; 641 ; 642 // Remove already integrated observables from to-do list; 643 iset.remove(innerSet) ;; 644 ; 645 // Send info message on recursion if needed; 646 if (integrand == this && !iset.empty()) {; 647 coutI(Integration) << GetName() << "" : multidimensional integration over observables with parameterized ranges in terms of other integrated observables detected, using recursive integration strategy to construct final integral"" << std::endl ;; 648 }; 649 ; 650 // Prepare for recursion, next integral should integrate last integrand; 651 integrand = integral.get();; 652 ; 653 ; 654 // Only need normalization set in innermost integration; 655 nset = nullptr;; 656 }; 657 ; 658 if (error) {; 659 coutE(Integration) << GetName() << "" : ERROR while defining recursive integral over observables with parameterized integration ranges, please check that integration rangs specify uniquely defined integral "" << std::endl;; 660 return nullptr;; 661 }; 662 ; 663 ; 664 // After-burner: apply interpolating cache on (numeric) integral if requested by user; 665 const char* cacheParamsStr = getStringAttribute(""CACHEPARAMINT"") ;; 666 if (cacheParamsStr && strlen(cacheParamsStr)) {; 667 ; 668 std::unique_ptr<RooArgSet> intParams{integral->getVariables()};; 669 ; 670 RooArgSet cacheParams = RooHelpers::selectFromArgSet(*intParams, cacheParamsStr);; 671 ; 672 if (!cacheParams.empty()) {; 673 cxcoutD(Caching) << ""RooAbsReal::createIntObj("" << GetName() << "") INFO: constructing "" << cacheParams.size(); 674 << ""-dim value cache for integral over "" << iset2 << "" as a function of "" << cacheParams << "" in range "" << (rangeName?rangeName:""<none>"") << std::endl ;; 675 std::string name = Form(""%s_CACHE_[%s]"",integral->GetName(),cacheParams.contentsString().c_str()) ;; 676 auto cachedIntegral = std::make_unique<RooCachedReal>(name.c_str(),name.c_str(),*integral,cacheParams);; 677 cachedIntegral->setInterpolationOrder(2) ;; 678 cachedIntegral->addOwnedComponents(std::mov",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:25234,Deployability,integrat,integration,25234,"d::move(innerIntegral));; 640 }; 641 ; 642 // Remove already integrated observables from to-do list; 643 iset.remove(innerSet) ;; 644 ; 645 // Send info message on recursion if needed; 646 if (integrand == this && !iset.empty()) {; 647 coutI(Integration) << GetName() << "" : multidimensional integration over observables with parameterized ranges in terms of other integrated observables detected, using recursive integration strategy to construct final integral"" << std::endl ;; 648 }; 649 ; 650 // Prepare for recursion, next integral should integrate last integrand; 651 integrand = integral.get();; 652 ; 653 ; 654 // Only need normalization set in innermost integration; 655 nset = nullptr;; 656 }; 657 ; 658 if (error) {; 659 coutE(Integration) << GetName() << "" : ERROR while defining recursive integral over observables with parameterized integration ranges, please check that integration rangs specify uniquely defined integral "" << std::endl;; 660 return nullptr;; 661 }; 662 ; 663 ; 664 // After-burner: apply interpolating cache on (numeric) integral if requested by user; 665 const char* cacheParamsStr = getStringAttribute(""CACHEPARAMINT"") ;; 666 if (cacheParamsStr && strlen(cacheParamsStr)) {; 667 ; 668 std::unique_ptr<RooArgSet> intParams{integral->getVariables()};; 669 ; 670 RooArgSet cacheParams = RooHelpers::selectFromArgSet(*intParams, cacheParamsStr);; 671 ; 672 if (!cacheParams.empty()) {; 673 cxcoutD(Caching) << ""RooAbsReal::createIntObj("" << GetName() << "") INFO: constructing "" << cacheParams.size(); 674 << ""-dim value cache for integral over "" << iset2 << "" as a function of "" << cacheParams << "" in range "" << (rangeName?rangeName:""<none>"") << std::endl ;; 675 std::string name = Form(""%s_CACHE_[%s]"",integral->GetName(),cacheParams.contentsString().c_str()) ;; 676 auto cachedIntegral = std::make_unique<RooCachedReal>(name.c_str(),name.c_str(),*integral,cacheParams);; 677 cachedIntegral->setInterpolationOrder(2) ;; 678 cachedIntegral->addOwnedComponents(std::mov",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:27032,Deployability,integrat,integration,27032,"g name = Form(""%s_CACHE_[%s]"",integral->GetName(),cacheParams.contentsString().c_str()) ;; 676 auto cachedIntegral = std::make_unique<RooCachedReal>(name.c_str(),name.c_str(),*integral,cacheParams);; 677 cachedIntegral->setInterpolationOrder(2) ;; 678 cachedIntegral->addOwnedComponents(std::move(integral));; 679 cachedIntegral->setCacheSource(true) ;; 680 if (integral->operMode()==ADirty) {; 681 cachedIntegral->setOperMode(ADirty) ;; 682 }; 683 //cachedIntegral->disableCache(true) ;; 684 return RooFit::makeOwningPtr<RooAbsReal>(std::move(cachedIntegral));; 685 }; 686 }; 687 ; 688 return RooFit::makeOwningPtr(std::move(integral));; 689}; 690 ; 691 ; 692 ; 693////////////////////////////////////////////////////////////////////////////////; 694/// Utility function for createIntObj() that aids in the construct of recursive integrals; 695/// over functions with multiple observables with parameterized ranges. This function; 696/// finds in a given set allObs over which integration is requested the largeset subset; 697/// of observables that can be integrated simultaneously. This subset consists of; 698/// observables with fixed ranges and observables with parameterized ranges whose; 699/// parameterization does not depend on any observable that is also integrated.; 700 ; 701void RooAbsReal::findInnerMostIntegration(const RooArgSet& allObs, RooArgSet& innerObs, const char* rangeName) const; 702{; 703 // Make lists of; 704 // a) integrated observables with fixed ranges,; 705 // b) integrated observables with parameterized ranges depending on other integrated observables; 706 // c) integrated observables used in definition of any parameterized ranges of integrated observables; 707 RooArgSet obsWithFixedRange(allObs) ;; 708 RooArgSet obsWithParamRange ;; 709 RooArgSet obsServingAsRangeParams ;; 710 ; 711 // Loop over all integrated observables; 712 for (const auto aarg : allObs) {; 713 // Check if observable is real-valued lvalue; 714 if (auto arglv = dynamic_cast<RooAbsRealL",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:27112,Deployability,integrat,integrated,27112,"g name = Form(""%s_CACHE_[%s]"",integral->GetName(),cacheParams.contentsString().c_str()) ;; 676 auto cachedIntegral = std::make_unique<RooCachedReal>(name.c_str(),name.c_str(),*integral,cacheParams);; 677 cachedIntegral->setInterpolationOrder(2) ;; 678 cachedIntegral->addOwnedComponents(std::move(integral));; 679 cachedIntegral->setCacheSource(true) ;; 680 if (integral->operMode()==ADirty) {; 681 cachedIntegral->setOperMode(ADirty) ;; 682 }; 683 //cachedIntegral->disableCache(true) ;; 684 return RooFit::makeOwningPtr<RooAbsReal>(std::move(cachedIntegral));; 685 }; 686 }; 687 ; 688 return RooFit::makeOwningPtr(std::move(integral));; 689}; 690 ; 691 ; 692 ; 693////////////////////////////////////////////////////////////////////////////////; 694/// Utility function for createIntObj() that aids in the construct of recursive integrals; 695/// over functions with multiple observables with parameterized ranges. This function; 696/// finds in a given set allObs over which integration is requested the largeset subset; 697/// of observables that can be integrated simultaneously. This subset consists of; 698/// observables with fixed ranges and observables with parameterized ranges whose; 699/// parameterization does not depend on any observable that is also integrated.; 700 ; 701void RooAbsReal::findInnerMostIntegration(const RooArgSet& allObs, RooArgSet& innerObs, const char* rangeName) const; 702{; 703 // Make lists of; 704 // a) integrated observables with fixed ranges,; 705 // b) integrated observables with parameterized ranges depending on other integrated observables; 706 // c) integrated observables used in definition of any parameterized ranges of integrated observables; 707 RooArgSet obsWithFixedRange(allObs) ;; 708 RooArgSet obsWithParamRange ;; 709 RooArgSet obsServingAsRangeParams ;; 710 ; 711 // Loop over all integrated observables; 712 for (const auto aarg : allObs) {; 713 // Check if observable is real-valued lvalue; 714 if (auto arglv = dynamic_cast<RooAbsRealL",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:27321,Deployability,integrat,integrated,27321,"ral,cacheParams);; 677 cachedIntegral->setInterpolationOrder(2) ;; 678 cachedIntegral->addOwnedComponents(std::move(integral));; 679 cachedIntegral->setCacheSource(true) ;; 680 if (integral->operMode()==ADirty) {; 681 cachedIntegral->setOperMode(ADirty) ;; 682 }; 683 //cachedIntegral->disableCache(true) ;; 684 return RooFit::makeOwningPtr<RooAbsReal>(std::move(cachedIntegral));; 685 }; 686 }; 687 ; 688 return RooFit::makeOwningPtr(std::move(integral));; 689}; 690 ; 691 ; 692 ; 693////////////////////////////////////////////////////////////////////////////////; 694/// Utility function for createIntObj() that aids in the construct of recursive integrals; 695/// over functions with multiple observables with parameterized ranges. This function; 696/// finds in a given set allObs over which integration is requested the largeset subset; 697/// of observables that can be integrated simultaneously. This subset consists of; 698/// observables with fixed ranges and observables with parameterized ranges whose; 699/// parameterization does not depend on any observable that is also integrated.; 700 ; 701void RooAbsReal::findInnerMostIntegration(const RooArgSet& allObs, RooArgSet& innerObs, const char* rangeName) const; 702{; 703 // Make lists of; 704 // a) integrated observables with fixed ranges,; 705 // b) integrated observables with parameterized ranges depending on other integrated observables; 706 // c) integrated observables used in definition of any parameterized ranges of integrated observables; 707 RooArgSet obsWithFixedRange(allObs) ;; 708 RooArgSet obsWithParamRange ;; 709 RooArgSet obsServingAsRangeParams ;; 710 ; 711 // Loop over all integrated observables; 712 for (const auto aarg : allObs) {; 713 // Check if observable is real-valued lvalue; 714 if (auto arglv = dynamic_cast<RooAbsRealLValue*>(aarg)) {; 715 ; 716 // Check if range is parameterized; 717 RooAbsBinning& binning = arglv->getBinning(rangeName,false,true) ;; 718 if (binning.isParameterized()) {; 719 Roo",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:27499,Deployability,integrat,integrated,27499,"///////////////////////////////; 694/// Utility function for createIntObj() that aids in the construct of recursive integrals; 695/// over functions with multiple observables with parameterized ranges. This function; 696/// finds in a given set allObs over which integration is requested the largeset subset; 697/// of observables that can be integrated simultaneously. This subset consists of; 698/// observables with fixed ranges and observables with parameterized ranges whose; 699/// parameterization does not depend on any observable that is also integrated.; 700 ; 701void RooAbsReal::findInnerMostIntegration(const RooArgSet& allObs, RooArgSet& innerObs, const char* rangeName) const; 702{; 703 // Make lists of; 704 // a) integrated observables with fixed ranges,; 705 // b) integrated observables with parameterized ranges depending on other integrated observables; 706 // c) integrated observables used in definition of any parameterized ranges of integrated observables; 707 RooArgSet obsWithFixedRange(allObs) ;; 708 RooArgSet obsWithParamRange ;; 709 RooArgSet obsServingAsRangeParams ;; 710 ; 711 // Loop over all integrated observables; 712 for (const auto aarg : allObs) {; 713 // Check if observable is real-valued lvalue; 714 if (auto arglv = dynamic_cast<RooAbsRealLValue*>(aarg)) {; 715 ; 716 // Check if range is parameterized; 717 RooAbsBinning& binning = arglv->getBinning(rangeName,false,true) ;; 718 if (binning.isParameterized()) {; 719 RooArgSet loBoundObs;; 720 RooArgSet hiBoundObs;; 721 binning.lowBoundFunc()->getObservables(&allObs, loBoundObs) ;; 722 binning.highBoundFunc()->getObservables(&allObs, hiBoundObs) ;; 723 ; 724 // Check if range parameterization depends on other integrated observables; 725 if (loBoundObs.overlaps(allObs) || hiBoundObs.overlaps(allObs)) {; 726 obsWithParamRange.add(*aarg) ;; 727 obsWithFixedRange.remove(*aarg) ;; 728 obsServingAsRangeParams.add(loBoundObs,false) ;; 729 obsServingAsRangeParams.add(hiBoundObs,false) ;; 730 }; 731 }; ",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:27552,Deployability,integrat,integrated,27552,"///////////////////////////////; 694/// Utility function for createIntObj() that aids in the construct of recursive integrals; 695/// over functions with multiple observables with parameterized ranges. This function; 696/// finds in a given set allObs over which integration is requested the largeset subset; 697/// of observables that can be integrated simultaneously. This subset consists of; 698/// observables with fixed ranges and observables with parameterized ranges whose; 699/// parameterization does not depend on any observable that is also integrated.; 700 ; 701void RooAbsReal::findInnerMostIntegration(const RooArgSet& allObs, RooArgSet& innerObs, const char* rangeName) const; 702{; 703 // Make lists of; 704 // a) integrated observables with fixed ranges,; 705 // b) integrated observables with parameterized ranges depending on other integrated observables; 706 // c) integrated observables used in definition of any parameterized ranges of integrated observables; 707 RooArgSet obsWithFixedRange(allObs) ;; 708 RooArgSet obsWithParamRange ;; 709 RooArgSet obsServingAsRangeParams ;; 710 ; 711 // Loop over all integrated observables; 712 for (const auto aarg : allObs) {; 713 // Check if observable is real-valued lvalue; 714 if (auto arglv = dynamic_cast<RooAbsRealLValue*>(aarg)) {; 715 ; 716 // Check if range is parameterized; 717 RooAbsBinning& binning = arglv->getBinning(rangeName,false,true) ;; 718 if (binning.isParameterized()) {; 719 RooArgSet loBoundObs;; 720 RooArgSet hiBoundObs;; 721 binning.lowBoundFunc()->getObservables(&allObs, loBoundObs) ;; 722 binning.highBoundFunc()->getObservables(&allObs, hiBoundObs) ;; 723 ; 724 // Check if range parameterization depends on other integrated observables; 725 if (loBoundObs.overlaps(allObs) || hiBoundObs.overlaps(allObs)) {; 726 obsWithParamRange.add(*aarg) ;; 727 obsWithFixedRange.remove(*aarg) ;; 728 obsServingAsRangeParams.add(loBoundObs,false) ;; 729 obsServingAsRangeParams.add(hiBoundObs,false) ;; 730 }; 731 }; ",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:27620,Deployability,integrat,integrated,27620,"///////////////////////////////; 694/// Utility function for createIntObj() that aids in the construct of recursive integrals; 695/// over functions with multiple observables with parameterized ranges. This function; 696/// finds in a given set allObs over which integration is requested the largeset subset; 697/// of observables that can be integrated simultaneously. This subset consists of; 698/// observables with fixed ranges and observables with parameterized ranges whose; 699/// parameterization does not depend on any observable that is also integrated.; 700 ; 701void RooAbsReal::findInnerMostIntegration(const RooArgSet& allObs, RooArgSet& innerObs, const char* rangeName) const; 702{; 703 // Make lists of; 704 // a) integrated observables with fixed ranges,; 705 // b) integrated observables with parameterized ranges depending on other integrated observables; 706 // c) integrated observables used in definition of any parameterized ranges of integrated observables; 707 RooArgSet obsWithFixedRange(allObs) ;; 708 RooArgSet obsWithParamRange ;; 709 RooArgSet obsServingAsRangeParams ;; 710 ; 711 // Loop over all integrated observables; 712 for (const auto aarg : allObs) {; 713 // Check if observable is real-valued lvalue; 714 if (auto arglv = dynamic_cast<RooAbsRealLValue*>(aarg)) {; 715 ; 716 // Check if range is parameterized; 717 RooAbsBinning& binning = arglv->getBinning(rangeName,false,true) ;; 718 if (binning.isParameterized()) {; 719 RooArgSet loBoundObs;; 720 RooArgSet hiBoundObs;; 721 binning.lowBoundFunc()->getObservables(&allObs, loBoundObs) ;; 722 binning.highBoundFunc()->getObservables(&allObs, hiBoundObs) ;; 723 ; 724 // Check if range parameterization depends on other integrated observables; 725 if (loBoundObs.overlaps(allObs) || hiBoundObs.overlaps(allObs)) {; 726 obsWithParamRange.add(*aarg) ;; 727 obsWithFixedRange.remove(*aarg) ;; 728 obsServingAsRangeParams.add(loBoundObs,false) ;; 729 obsServingAsRangeParams.add(hiBoundObs,false) ;; 730 }; 731 }; ",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:27654,Deployability,integrat,integrated,27654,"///////////////////////////////; 694/// Utility function for createIntObj() that aids in the construct of recursive integrals; 695/// over functions with multiple observables with parameterized ranges. This function; 696/// finds in a given set allObs over which integration is requested the largeset subset; 697/// of observables that can be integrated simultaneously. This subset consists of; 698/// observables with fixed ranges and observables with parameterized ranges whose; 699/// parameterization does not depend on any observable that is also integrated.; 700 ; 701void RooAbsReal::findInnerMostIntegration(const RooArgSet& allObs, RooArgSet& innerObs, const char* rangeName) const; 702{; 703 // Make lists of; 704 // a) integrated observables with fixed ranges,; 705 // b) integrated observables with parameterized ranges depending on other integrated observables; 706 // c) integrated observables used in definition of any parameterized ranges of integrated observables; 707 RooArgSet obsWithFixedRange(allObs) ;; 708 RooArgSet obsWithParamRange ;; 709 RooArgSet obsServingAsRangeParams ;; 710 ; 711 // Loop over all integrated observables; 712 for (const auto aarg : allObs) {; 713 // Check if observable is real-valued lvalue; 714 if (auto arglv = dynamic_cast<RooAbsRealLValue*>(aarg)) {; 715 ; 716 // Check if range is parameterized; 717 RooAbsBinning& binning = arglv->getBinning(rangeName,false,true) ;; 718 if (binning.isParameterized()) {; 719 RooArgSet loBoundObs;; 720 RooArgSet hiBoundObs;; 721 binning.lowBoundFunc()->getObservables(&allObs, loBoundObs) ;; 722 binning.highBoundFunc()->getObservables(&allObs, hiBoundObs) ;; 723 ; 724 // Check if range parameterization depends on other integrated observables; 725 if (loBoundObs.overlaps(allObs) || hiBoundObs.overlaps(allObs)) {; 726 obsWithParamRange.add(*aarg) ;; 727 obsWithFixedRange.remove(*aarg) ;; 728 obsServingAsRangeParams.add(loBoundObs,false) ;; 729 obsServingAsRangeParams.add(hiBoundObs,false) ;; 730 }; 731 }; ",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:27727,Deployability,integrat,integrated,27727,"///////////////////////////////; 694/// Utility function for createIntObj() that aids in the construct of recursive integrals; 695/// over functions with multiple observables with parameterized ranges. This function; 696/// finds in a given set allObs over which integration is requested the largeset subset; 697/// of observables that can be integrated simultaneously. This subset consists of; 698/// observables with fixed ranges and observables with parameterized ranges whose; 699/// parameterization does not depend on any observable that is also integrated.; 700 ; 701void RooAbsReal::findInnerMostIntegration(const RooArgSet& allObs, RooArgSet& innerObs, const char* rangeName) const; 702{; 703 // Make lists of; 704 // a) integrated observables with fixed ranges,; 705 // b) integrated observables with parameterized ranges depending on other integrated observables; 706 // c) integrated observables used in definition of any parameterized ranges of integrated observables; 707 RooArgSet obsWithFixedRange(allObs) ;; 708 RooArgSet obsWithParamRange ;; 709 RooArgSet obsServingAsRangeParams ;; 710 ; 711 // Loop over all integrated observables; 712 for (const auto aarg : allObs) {; 713 // Check if observable is real-valued lvalue; 714 if (auto arglv = dynamic_cast<RooAbsRealLValue*>(aarg)) {; 715 ; 716 // Check if range is parameterized; 717 RooAbsBinning& binning = arglv->getBinning(rangeName,false,true) ;; 718 if (binning.isParameterized()) {; 719 RooArgSet loBoundObs;; 720 RooArgSet hiBoundObs;; 721 binning.lowBoundFunc()->getObservables(&allObs, loBoundObs) ;; 722 binning.highBoundFunc()->getObservables(&allObs, hiBoundObs) ;; 723 ; 724 // Check if range parameterization depends on other integrated observables; 725 if (loBoundObs.overlaps(allObs) || hiBoundObs.overlaps(allObs)) {; 726 obsWithParamRange.add(*aarg) ;; 727 obsWithFixedRange.remove(*aarg) ;; 728 obsServingAsRangeParams.add(loBoundObs,false) ;; 729 obsServingAsRangeParams.add(hiBoundObs,false) ;; 730 }; 731 }; ",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:27897,Deployability,integrat,integrated,27897,"///////////////////////////////; 694/// Utility function for createIntObj() that aids in the construct of recursive integrals; 695/// over functions with multiple observables with parameterized ranges. This function; 696/// finds in a given set allObs over which integration is requested the largeset subset; 697/// of observables that can be integrated simultaneously. This subset consists of; 698/// observables with fixed ranges and observables with parameterized ranges whose; 699/// parameterization does not depend on any observable that is also integrated.; 700 ; 701void RooAbsReal::findInnerMostIntegration(const RooArgSet& allObs, RooArgSet& innerObs, const char* rangeName) const; 702{; 703 // Make lists of; 704 // a) integrated observables with fixed ranges,; 705 // b) integrated observables with parameterized ranges depending on other integrated observables; 706 // c) integrated observables used in definition of any parameterized ranges of integrated observables; 707 RooArgSet obsWithFixedRange(allObs) ;; 708 RooArgSet obsWithParamRange ;; 709 RooArgSet obsServingAsRangeParams ;; 710 ; 711 // Loop over all integrated observables; 712 for (const auto aarg : allObs) {; 713 // Check if observable is real-valued lvalue; 714 if (auto arglv = dynamic_cast<RooAbsRealLValue*>(aarg)) {; 715 ; 716 // Check if range is parameterized; 717 RooAbsBinning& binning = arglv->getBinning(rangeName,false,true) ;; 718 if (binning.isParameterized()) {; 719 RooArgSet loBoundObs;; 720 RooArgSet hiBoundObs;; 721 binning.lowBoundFunc()->getObservables(&allObs, loBoundObs) ;; 722 binning.highBoundFunc()->getObservables(&allObs, hiBoundObs) ;; 723 ; 724 // Check if range parameterization depends on other integrated observables; 725 if (loBoundObs.overlaps(allObs) || hiBoundObs.overlaps(allObs)) {; 726 obsWithParamRange.add(*aarg) ;; 727 obsWithFixedRange.remove(*aarg) ;; 728 obsServingAsRangeParams.add(loBoundObs,false) ;; 729 obsServingAsRangeParams.add(hiBoundObs,false) ;; 730 }; 731 }; ",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:28479,Deployability,integrat,integrated,28479,"* rangeName) const; 702{; 703 // Make lists of; 704 // a) integrated observables with fixed ranges,; 705 // b) integrated observables with parameterized ranges depending on other integrated observables; 706 // c) integrated observables used in definition of any parameterized ranges of integrated observables; 707 RooArgSet obsWithFixedRange(allObs) ;; 708 RooArgSet obsWithParamRange ;; 709 RooArgSet obsServingAsRangeParams ;; 710 ; 711 // Loop over all integrated observables; 712 for (const auto aarg : allObs) {; 713 // Check if observable is real-valued lvalue; 714 if (auto arglv = dynamic_cast<RooAbsRealLValue*>(aarg)) {; 715 ; 716 // Check if range is parameterized; 717 RooAbsBinning& binning = arglv->getBinning(rangeName,false,true) ;; 718 if (binning.isParameterized()) {; 719 RooArgSet loBoundObs;; 720 RooArgSet hiBoundObs;; 721 binning.lowBoundFunc()->getObservables(&allObs, loBoundObs) ;; 722 binning.highBoundFunc()->getObservables(&allObs, hiBoundObs) ;; 723 ; 724 // Check if range parameterization depends on other integrated observables; 725 if (loBoundObs.overlaps(allObs) || hiBoundObs.overlaps(allObs)) {; 726 obsWithParamRange.add(*aarg) ;; 727 obsWithFixedRange.remove(*aarg) ;; 728 obsServingAsRangeParams.add(loBoundObs,false) ;; 729 obsServingAsRangeParams.add(hiBoundObs,false) ;; 730 }; 731 }; 732 }; 733 }; 734 ; 735 // Make list of fixed-range observables that are _not_ involved in the parameterization of ranges of other observables; 736 RooArgSet obsWithFixedRangeNP(obsWithFixedRange) ;; 737 obsWithFixedRangeNP.remove(obsServingAsRangeParams) ;; 738 ; 739 // Make list of param-range observables that are _not_ involved in the parameterization of ranges of other observables; 740 RooArgSet obsWithParamRangeNP(obsWithParamRange) ;; 741 obsWithParamRangeNP.remove(obsServingAsRangeParams) ;; 742 ; 743 // Construct inner-most integration: over observables (with fixed or param range) not used in any other param range definitions; 744 innerObs.removeAll() ;; 74",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:29307,Deployability,integrat,integration,29307,"s, loBoundObs) ;; 722 binning.highBoundFunc()->getObservables(&allObs, hiBoundObs) ;; 723 ; 724 // Check if range parameterization depends on other integrated observables; 725 if (loBoundObs.overlaps(allObs) || hiBoundObs.overlaps(allObs)) {; 726 obsWithParamRange.add(*aarg) ;; 727 obsWithFixedRange.remove(*aarg) ;; 728 obsServingAsRangeParams.add(loBoundObs,false) ;; 729 obsServingAsRangeParams.add(hiBoundObs,false) ;; 730 }; 731 }; 732 }; 733 }; 734 ; 735 // Make list of fixed-range observables that are _not_ involved in the parameterization of ranges of other observables; 736 RooArgSet obsWithFixedRangeNP(obsWithFixedRange) ;; 737 obsWithFixedRangeNP.remove(obsServingAsRangeParams) ;; 738 ; 739 // Make list of param-range observables that are _not_ involved in the parameterization of ranges of other observables; 740 RooArgSet obsWithParamRangeNP(obsWithParamRange) ;; 741 obsWithParamRangeNP.remove(obsServingAsRangeParams) ;; 742 ; 743 // Construct inner-most integration: over observables (with fixed or param range) not used in any other param range definitions; 744 innerObs.removeAll() ;; 745 innerObs.add(obsWithFixedRangeNP) ;; 746 innerObs.add(obsWithParamRangeNP) ;; 747 ; 748}; 749 ; 750 ; 751////////////////////////////////////////////////////////////////////////////////; 752/// Construct string with unique suffix name to give to integral object that encodes; 753/// integrated observables, normalization observables and the integration range name; 754 ; 755TString RooAbsReal::integralNameSuffix(const RooArgSet& iset, const RooArgSet* nset, const char* rangeName, bool omitEmpty) const; 756{; 757 TString name ;; 758 if (!iset.empty()) {; 759 name.Append(""_Int["" + RooHelpers::getColonSeparatedNameString(iset, ','));; 760 if (rangeName) {; 761 name.Append(""|"" + std::string{rangeName});; 762 }; 763 name.Append(""]"");; 764 } else if (!omitEmpty) {; 765 name.Append(""_Int[]"") ;; 766 }; 767 ; 768 if (nset && !nset->empty()) {; 769 name.Append(""_Norm["" + RooHelpers::getCo",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:29727,Deployability,integrat,integrated,29727,"Obs,false) ;; 730 }; 731 }; 732 }; 733 }; 734 ; 735 // Make list of fixed-range observables that are _not_ involved in the parameterization of ranges of other observables; 736 RooArgSet obsWithFixedRangeNP(obsWithFixedRange) ;; 737 obsWithFixedRangeNP.remove(obsServingAsRangeParams) ;; 738 ; 739 // Make list of param-range observables that are _not_ involved in the parameterization of ranges of other observables; 740 RooArgSet obsWithParamRangeNP(obsWithParamRange) ;; 741 obsWithParamRangeNP.remove(obsServingAsRangeParams) ;; 742 ; 743 // Construct inner-most integration: over observables (with fixed or param range) not used in any other param range definitions; 744 innerObs.removeAll() ;; 745 innerObs.add(obsWithFixedRangeNP) ;; 746 innerObs.add(obsWithParamRangeNP) ;; 747 ; 748}; 749 ; 750 ; 751////////////////////////////////////////////////////////////////////////////////; 752/// Construct string with unique suffix name to give to integral object that encodes; 753/// integrated observables, normalization observables and the integration range name; 754 ; 755TString RooAbsReal::integralNameSuffix(const RooArgSet& iset, const RooArgSet* nset, const char* rangeName, bool omitEmpty) const; 756{; 757 TString name ;; 758 if (!iset.empty()) {; 759 name.Append(""_Int["" + RooHelpers::getColonSeparatedNameString(iset, ','));; 760 if (rangeName) {; 761 name.Append(""|"" + std::string{rangeName});; 762 }; 763 name.Append(""]"");; 764 } else if (!omitEmpty) {; 765 name.Append(""_Int[]"") ;; 766 }; 767 ; 768 if (nset && !nset->empty()) {; 769 name.Append(""_Norm["" + RooHelpers::getColonSeparatedNameString(*nset, ','));; 770 const RooAbsPdf* thisPdf = dynamic_cast<const RooAbsPdf*>(this) ;; 771 if (thisPdf && thisPdf->normRange()) {; 772 name.Append(""|"" + std::string{thisPdf->normRange()}) ;; 773 }; 774 name.Append(""]"") ;; 775 }; 776 ; 777 return name ;; 778}; 779 ; 780 ; 781 ; 782////////////////////////////////////////////////////////////////////////////////; 783/// Utility function f",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:29785,Deployability,integrat,integration,29785,"Obs,false) ;; 730 }; 731 }; 732 }; 733 }; 734 ; 735 // Make list of fixed-range observables that are _not_ involved in the parameterization of ranges of other observables; 736 RooArgSet obsWithFixedRangeNP(obsWithFixedRange) ;; 737 obsWithFixedRangeNP.remove(obsServingAsRangeParams) ;; 738 ; 739 // Make list of param-range observables that are _not_ involved in the parameterization of ranges of other observables; 740 RooArgSet obsWithParamRangeNP(obsWithParamRange) ;; 741 obsWithParamRangeNP.remove(obsServingAsRangeParams) ;; 742 ; 743 // Construct inner-most integration: over observables (with fixed or param range) not used in any other param range definitions; 744 innerObs.removeAll() ;; 745 innerObs.add(obsWithFixedRangeNP) ;; 746 innerObs.add(obsWithParamRangeNP) ;; 747 ; 748}; 749 ; 750 ; 751////////////////////////////////////////////////////////////////////////////////; 752/// Construct string with unique suffix name to give to integral object that encodes; 753/// integrated observables, normalization observables and the integration range name; 754 ; 755TString RooAbsReal::integralNameSuffix(const RooArgSet& iset, const RooArgSet* nset, const char* rangeName, bool omitEmpty) const; 756{; 757 TString name ;; 758 if (!iset.empty()) {; 759 name.Append(""_Int["" + RooHelpers::getColonSeparatedNameString(iset, ','));; 760 if (rangeName) {; 761 name.Append(""|"" + std::string{rangeName});; 762 }; 763 name.Append(""]"");; 764 } else if (!omitEmpty) {; 765 name.Append(""_Int[]"") ;; 766 }; 767 ; 768 if (nset && !nset->empty()) {; 769 name.Append(""_Norm["" + RooHelpers::getColonSeparatedNameString(*nset, ','));; 770 const RooAbsPdf* thisPdf = dynamic_cast<const RooAbsPdf*>(this) ;; 771 if (thisPdf && thisPdf->normRange()) {; 772 name.Append(""|"" + std::string{thisPdf->normRange()}) ;; 773 }; 774 name.Append(""]"") ;; 775 }; 776 ; 777 return name ;; 778}; 779 ; 780 ; 781 ; 782////////////////////////////////////////////////////////////////////////////////; 783/// Utility function f",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:32267,Deployability,integrat,integrated,32267," plotOn() that creates a projection of a function or p.d.f; 796/// to be plotted on a RooPlot.; 797/// \anchor createPlotProjAnchor; 798///; 799/// Create a new object \f$ G \f$ that represents the normalized projection:; 800/// \f[; 801/// G[x,p] = \frac{\int F[x,y,p] \; \mathrm{d}\{y\}}; 802/// {\int F[x,y,p] \; \mathrm{d}\{x\} \, \mathrm{d}\{y\}}; 803/// \f]; 804/// where \f$ F[x,y,p] \f$ is the function we represent, and; 805/// \f$ \{ p \} \f$ are the remaining variables (""parameters"").; 806///; 807/// \param[in] dependentVars Dependent variables over which to normalise, \f$ \{x\} \f$.; 808/// \param[in] projectedVars Variables to project out, \f$ \{ y \} \f$.; 809/// \param[out] cloneSet Will be set to a RooArgSet*, which will contain a clone of *this plus its projection integral object.; 810/// The latter will also be returned. The caller takes ownership of this set.; 811/// \param[in] rangeName Optional range for projection integrals; 812/// \param[in] condObs Conditional observables, which are not integrated for normalisation, even if they; 813/// are in `dependentVars` or `projectedVars`.; 814/// \return A pointer to the newly created object, or zero in case of an; 815/// error. The caller is responsible for deleting the `cloneSet` (which includes the returned projection object).; 816const RooAbsReal *RooAbsReal::createPlotProjection(const RooArgSet &dependentVars, const RooArgSet *projectedVars,; 817 RooArgSet *&cloneSet, const char* rangeName, const RooArgSet* condObs) const; 818{; 819 // Get the set of our leaf nodes; 820 RooArgSet leafNodes;; 821 RooArgSet treeNodes;; 822 leafNodeServerList(&leafNodes,this);; 823 treeNodeServerList(&treeNodes,this) ;; 824 ; 825 ; 826 // Check that the dependents are all fundamental. Filter out any that we; 827 // do not depend on, and make substitutions by name in our leaf list.; 828 // Check for overlaps with the projection variables.; 829 for (const auto arg : dependentVars) {; 830 if(!arg->isFundamental() && !dynamic",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:36796,Deployability,integrat,integrate,36796,"tVars)};; 887 theClone->recursiveRedirectServers(*plotLeafNodes,false,false,false);; 888 ; 889 // Create the set of normalization variables to use in the projection integrand; 890 RooArgSet normSet(dependentVars);; 891 if(nullptr != projectedVars) normSet.add(*projectedVars);; 892 if(nullptr != condObs) {; 893 normSet.remove(*condObs,true,true) ;; 894 }; 895 ; 896 // Try to create a valid projection integral. If no variables are to be projected,; 897 // create a null projection anyway to bind our normalization over the dependents; 898 // consistently with the way they would be bound with a non-trivial projection.; 899 RooArgSet empty;; 900 if(nullptr == projectedVars) projectedVars= &empty;; 901 ; 902 std::string name = GetName();; 903 name += integralNameSuffix(*projectedVars,&normSet,rangeName,true) ;; 904 ; 905 std::string title = std::string{""Projection of ""} + GetTitle();; 906 ; 907 std::unique_ptr<RooAbsReal> projected{theClone->createIntegral(*projectedVars,normSet,rangeName)};; 908 ; 909 if(nullptr == projected || !projected->isValid()) {; 910 coutE(Plotting) << ClassName() << ""::"" << GetName() << "":createPlotProjection: cannot integrate out "";; 911 projectedVars->printStream(std::cout,kName|kArgs,kSingleLine);; 912 return nullptr;; 913 }; 914 ; 915 if(projected->InheritsFrom(RooRealIntegral::Class())){; 916 static_cast<RooRealIntegral&>(*projected).setAllowComponentSelection(true);; 917 }; 918 ; 919 projected->SetName(name.c_str()) ;; 920 projected->SetTitle(title.c_str()) ;; 921 ; 922 // Add the projection integral to the cloneSet so that it eventually gets cleaned up by the caller.; 923 RooAbsReal *projectedPtr = projected.get();; 924 cloneSet->addOwned(std::move(projected));; 925 ; 926 // return a const pointer to remind the caller that they do not delete the returned object; 927 // directly (it is contained in the cloneSet instead).; 928 return projectedPtr;; 929}; 930 ; 931 ; 932 ; 933////////////////////////////////////////////////////////////////////",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:37802,Deployability,integrat,integrating,37802,"s->printStream(std::cout,kName|kArgs,kSingleLine);; 912 return nullptr;; 913 }; 914 ; 915 if(projected->InheritsFrom(RooRealIntegral::Class())){; 916 static_cast<RooRealIntegral&>(*projected).setAllowComponentSelection(true);; 917 }; 918 ; 919 projected->SetName(name.c_str()) ;; 920 projected->SetTitle(title.c_str()) ;; 921 ; 922 // Add the projection integral to the cloneSet so that it eventually gets cleaned up by the caller.; 923 RooAbsReal *projectedPtr = projected.get();; 924 cloneSet->addOwned(std::move(projected));; 925 ; 926 // return a const pointer to remind the caller that they do not delete the returned object; 927 // directly (it is contained in the cloneSet instead).; 928 return projectedPtr;; 929}; 930 ; 931 ; 932 ; 933////////////////////////////////////////////////////////////////////////////////; 934/// Fill the ROOT histogram 'hist' with values sampled from this; 935/// function at the bin centers. Our value is calculated by first; 936/// integrating out any variables in projectedVars and then scaling; 937/// the result by scaleFactor. Returns a pointer to the input; 938/// histogram, or zero in case of an error. The input histogram can; 939/// be any TH1 subclass, and therefore of arbitrary; 940/// dimension. Variables are matched with the (x,y,...) dimensions of; 941/// the input histogram according to the order in which they appear; 942/// in the input plotVars list. If scaleForDensity is true the; 943/// histogram is filled with a the functions density rather than; 944/// the functions value (i.e. the value at the bin center is multiplied; 945/// with bin volume); 946 ; 947TH1 *RooAbsReal::fillHistogram(TH1 *hist, const RooArgList &plotVars,; 948 double scaleFactor, const RooArgSet *projectedVars, bool scaleForDensity,; 949 const RooArgSet* condObs, bool setError) const; 950{; 951 // Do we have a valid histogram to use?; 952 if(nullptr == hist) {; 953 coutE(InputArguments) << ClassName() << ""::"" << GetName() << "":fillHistogram: no valid histog",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:52914,Deployability,configurat,configuration,52914,"(-1,1,30)), ZVar(z,Binning(""zbinning""))); 1257/// ```; 1258/// <tr><td> `ZVar(const RooAbsRealLValue& var,...)` <td> Observable to be std::mapped on z axis of ROOT histogram; 1259/// </table>; 1260///; 1261///; 1262 ; 1263TH1 *RooAbsReal::createHistogram(const char *name, const RooAbsRealLValue& xvar,; 1264 const RooCmdArg& arg1, const RooCmdArg& arg2, const RooCmdArg& arg3, const RooCmdArg& arg4,; 1265 const RooCmdArg& arg5, const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdArg& arg8) const; 1266{; 1267 ; 1268 RooLinkedList l ;; 1269 l.Add((TObject*)&arg1) ; l.Add((TObject*)&arg2) ;; 1270 l.Add((TObject*)&arg3) ; l.Add((TObject*)&arg4) ;; 1271 l.Add((TObject*)&arg5) ; l.Add((TObject*)&arg6) ;; 1272 l.Add((TObject*)&arg7) ; l.Add((TObject*)&arg8) ;; 1273 ; 1274 return createHistogram(name,xvar,l) ;; 1275}; 1276 ; 1277 ; 1278////////////////////////////////////////////////////////////////////////////////; 1279/// Internal method implementing createHistogram; 1280 ; 1281TH1* RooAbsReal::createHistogram(const char *name, const RooAbsRealLValue& xvar, RooLinkedList& argList) const; 1282{; 1283 ; 1284 // Define configuration for this method; 1285 RooCmdConfig pc(""RooAbsReal::createHistogram("" + std::string(GetName()) + "")"");; 1286 pc.defineInt(""scaling"",""Scaling"",0,1) ;; 1287 pc.defineInt(""intBinning"",""IntrinsicBinning"",0,2) ;; 1288 pc.defineInt(""extended"",""Extended"",0,2) ;; 1289 ; 1290 pc.defineSet(""compSet"",""SelectCompSet"",0);; 1291 pc.defineString(""compSpec"",""SelectCompSpec"",0) ;; 1292 pc.defineSet(""projObs"",""ProjectedObservables"",0,nullptr) ;; 1293 pc.defineObject(""yvar"",""YVar"",0,nullptr) ;; 1294 pc.defineObject(""zvar"",""ZVar"",0,nullptr) ;; 1295 pc.defineMutex(""SelectCompSet"",""SelectCompSpec"") ;; 1296 pc.defineMutex(""IntrinsicBinning"",""Binning"") ;; 1297 pc.defineMutex(""IntrinsicBinning"",""BinningName"") ;; 1298 pc.defineMutex(""IntrinsicBinning"",""BinningSpec"") ;; 1299 pc.allowUndefined() ;; 1300 ; 1301 // Process & check varargs; 1302 pc.process(argList) ;; 1303 i",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
https://root.cern/doc/master/RooAbsReal_8cxx_source.html:61578,Deployability,integrat,integrated,61578,"478 }; 1479 ; 1480 tmp.remove(*selNodes, true);; 1481 tmp.remove(*this);; 1482 selNodes->add(tmp);; 1483 coutI(Plotting) << ""RooAbsPdf::plotOn("" << GetName() << "") indirectly selected PDF components: "" << tmp << std::endl ;; 1484 ; 1485 // Set PDF selection bits according to selNodes; 1486 for (const auto arg : branchNodeSet) {; 1487 bool select = selNodes->find(arg->GetName()) != nullptr;; 1488 static_cast<RooAbsReal*>(arg)->selectComp(select);; 1489 }; 1490}; 1491 ; 1492 ; 1493 ; 1494////////////////////////////////////////////////////////////////////////////////; 1495/// Plot (project) PDF on specified frame. If a PDF is plotted in an empty frame, it; 1496/// will show a unit normalized curve in the frame variable, taken at the present value; 1497/// of other observables defined for this PDF.; 1498///; 1499/// \param[in] frame pointer to RooPlot; 1500/// \param[in] arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10 Ordered arguments; 1501///; 1502/// If a PDF is plotted in a frame in which a dataset has already been plotted, it will; 1503/// show a projected curve integrated over all variables that were present in the shown; 1504/// dataset except for the one on the x-axis. The normalization of the curve will also; 1505/// be adjusted to the event count of the plotted dataset. An informational message; 1506/// will be printed for each projection step that is performed.; 1507///; 1508/// This function takes the following named arguments; 1509/// <table>; 1510/// <tr><th><th> Projection control; 1511/// <tr><td> `Slice(const RooArgSet& set)` <td> Override default projection behaviour by omitting observables listed; 1512/// in set from the projection, i.e. by not integrating over these.; 1513/// Slicing is usually only sensible in discrete observables, by e.g. creating a slice; 1514/// of the PDF at the current value of the category observable.; 1515///; 1516/// <tr><td> `Slice(RooCategory& cat, const char* label)` <td> Override default projection behaviour by omitti",MatchSource.WIKI,doc/master/RooAbsReal_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html
