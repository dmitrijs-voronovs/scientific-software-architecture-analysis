id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_frame-members.html:206,Modifiability,inherit,inherited,206,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::Frame Member List . This is the complete list of members for sofa::type::Frame, including all inherited members. clear()sofa::type::Frame; Frame(const Vec3 &origin, const Mat33 &matrix)sofa::type::Frame; Frame(const Vec3 &origin, const Quat &orientation, const Vec3 &scale=Vec3(1_sreal, 1_sreal, 1_sreal))sofa::type::Frame; Frame(const Vec3 &origin)sofa::type::Frame; Frame()sofa::type::Frame; getBasis()sofa::type::Frame; getBasis() constsofa::type::Frame; getOrigin()sofa::type::Frame; getOrigin() constsofa::type::Frame; identity()sofa::type::Framestatic; inversed() constsofa::type::Frame; Mat33 typedefsofa::type::Frame; mult(const Frame &c) constsofa::type::Frame; multRight(const Frame &c)sofa::type::Frame; operator<<(std::ostream &out, const Frame &c)sofa::type::Framefriend; projectPoint(const V &v) constsofa::type::Frameinline; projectVector(const V &v) constsofa::type::Frameinline; Quat typedefsofa::type::Frame; setBasis(const Mat33 &m)sofa::type::Frame; setOrigin(const Vec3 &origin)sofa::type::Frame; setTransform(const Vec3 &origin, const Quat &orientation, const Vec3 &scale)sofa::type::Frame; writeOpenGlMatrix(float *m) constsofa::type::Frame; writeOpenGlMatrix(double *m) constsofa::type::Frame. Generated on Mon Nov 11 2024 03:36:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_frame-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_frame-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_frame-members.html:225,Usability,clear,clear,225,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::Frame Member List . This is the complete list of members for sofa::type::Frame, including all inherited members. clear()sofa::type::Frame; Frame(const Vec3 &origin, const Mat33 &matrix)sofa::type::Frame; Frame(const Vec3 &origin, const Quat &orientation, const Vec3 &scale=Vec3(1_sreal, 1_sreal, 1_sreal))sofa::type::Frame; Frame(const Vec3 &origin)sofa::type::Frame; Frame()sofa::type::Frame; getBasis()sofa::type::Frame; getBasis() constsofa::type::Frame; getOrigin()sofa::type::Frame; getOrigin() constsofa::type::Frame; identity()sofa::type::Framestatic; inversed() constsofa::type::Frame; Mat33 typedefsofa::type::Frame; mult(const Frame &c) constsofa::type::Frame; multRight(const Frame &c)sofa::type::Frame; operator<<(std::ostream &out, const Frame &c)sofa::type::Framefriend; projectPoint(const V &v) constsofa::type::Frameinline; projectVector(const V &v) constsofa::type::Frameinline; Quat typedefsofa::type::Frame; setBasis(const Mat33 &m)sofa::type::Frame; setOrigin(const Vec3 &origin)sofa::type::Frame; setTransform(const Vec3 &origin, const Quat &orientation, const Vec3 &scale)sofa::type::Frame; writeOpenGlMatrix(float *m) constsofa::type::Frame; writeOpenGlMatrix(double *m) constsofa::type::Frame. Generated on Mon Nov 11 2024 03:36:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_frame-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_frame-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_frame.html:1580,Usability,clear,clear,1580,"placements starting from the reference frame: translation, then rotation along the new origin, then scale along the new axes. Conversely, the projection of a point from the local frame to the reference frame undergoes scaling, then rotation, then translation. Vectors do not undergo translation since they model directions or displacement.; The product F1F2 can be seen as a frame displacement F1 starting from the reference frame followed by a frame displacement F2 starting from the new frame. It is used in frame hierarchies to model the transformation from frame 2 wrt the reference frame.; AuthorFrancois Faure, INRIA-UJF, 2006 . Public Member Functions;  Frame (const Vec3 &origin, const Mat33 &matrix);  ;  Frame (const Vec3 &origin, const Quat &orientation, const Vec3 &scale=Vec3(1_sreal, 1_sreal, 1_sreal));  ;  Frame (const Vec3 &origin);  ;  Frame ();  Default constructor set the transformation to identity. More...;  ; void setTransform (const Vec3 &origin, const Quat &orientation, const Vec3 &scale);  ; void clear ();  Reset the transformation to identity. More...;  ; Vec3 & getOrigin ();  Origin of the local frame in the reference frame,. More...;  ; const Vec3 & getOrigin () const;  Origin of the local frame in the reference frame,. More...;  ; void setOrigin (const Vec3 &origin);  Set the origin of the local frame in the reference frame,. More...;  ; Mat33 & getBasis ();  The columns represent the base vectors of the local frame wrt the reference frame. More...;  ; const Mat33 & getBasis () const;  The columns represent the base vectors of the local frame wrt the reference frame. More...;  ; void setBasis (const Mat33 &m);  The columns represent the base vectors of the local frame wrt the reference frame. More...;  ; void multRight (const Frame &c);  Apply a transformation defined in the child frame (mult. right) More...;  ; Frame mult (const Frame &c) const;  compute the product with another frame on the right More...;  ; void writeOpenGlMatrix (float *m) const;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_frame.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_frame.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_frame.html:3926,Usability,clear,clear,3926,"V &v) const;  compute the projection of a point from the local frame to the reference frame More...;  ; Frame inversed () const;  Transformation from the reference frame to the local frame. More...;  . Static Public Member Functions; static Frame identity ();  The identity transform. More...;  . Friends; std::ostream & operator<< (std::ostream &out, const Frame &c);  . Constructor details. ◆ Frame() [1/4]. sofa::type::Frame::Frame ; (; const Vec3 & ; origin, . const Mat33 & ; matrix . ). Define the local frame using origin and basis vectors . ◆ Frame() [2/4]. sofa::type::Frame::Frame ; (; const Vec3 & ; origin, . const Quat & ; orientation, . const Vec3 & ; scale = Vec3(1_sreal,1_sreal,1_sreal) . ). Define the local frame using three transforms . ◆ Frame() [3/4]. sofa::type::Frame::Frame ; (; const Vec3 & ; origin). Define the local frame without rotation . ◆ Frame() [4/4]. sofa::type::Frame::Frame ; (; ). Default constructor set the transformation to identity. . Function details. ◆ clear(). void sofa::type::Frame::clear ; (; ). Reset the transformation to identity. . ◆ getBasis() [1/2]. Frame::Mat33 & sofa::type::Frame::getBasis ; (; ). The columns represent the base vectors of the local frame wrt the reference frame. . ◆ getBasis() [2/2]. const Frame::Mat33 & sofa::type::Frame::getBasis ; (; ); const. The columns represent the base vectors of the local frame wrt the reference frame. . ◆ getOrigin() [1/2]. Vec3 & sofa::type::Frame::getOrigin ; (; ). Origin of the local frame in the reference frame,. . ◆ getOrigin() [2/2]. const Vec3 & sofa::type::Frame::getOrigin ; (; ); const. Origin of the local frame in the reference frame,. . ◆ identity(). Frame sofa::type::Frame::identity ; (; ). static . The identity transform. . ◆ inversed(). Frame sofa::type::Frame::inversed ; (; ); const. Transformation from the reference frame to the local frame. ; Compute the transformation from the parent to the child. . ◆ mult(). Frame sofa::type::Frame::mult ; (; const Frame & ; c); co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_frame.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_frame.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_frame.html:3959,Usability,clear,clear,3959," projection of a point from the local frame to the reference frame More...;  ; Frame inversed () const;  Transformation from the reference frame to the local frame. More...;  . Static Public Member Functions; static Frame identity ();  The identity transform. More...;  . Friends; std::ostream & operator<< (std::ostream &out, const Frame &c);  . Constructor details. ◆ Frame() [1/4]. sofa::type::Frame::Frame ; (; const Vec3 & ; origin, . const Mat33 & ; matrix . ). Define the local frame using origin and basis vectors . ◆ Frame() [2/4]. sofa::type::Frame::Frame ; (; const Vec3 & ; origin, . const Quat & ; orientation, . const Vec3 & ; scale = Vec3(1_sreal,1_sreal,1_sreal) . ). Define the local frame using three transforms . ◆ Frame() [3/4]. sofa::type::Frame::Frame ; (; const Vec3 & ; origin). Define the local frame without rotation . ◆ Frame() [4/4]. sofa::type::Frame::Frame ; (; ). Default constructor set the transformation to identity. . Function details. ◆ clear(). void sofa::type::Frame::clear ; (; ). Reset the transformation to identity. . ◆ getBasis() [1/2]. Frame::Mat33 & sofa::type::Frame::getBasis ; (; ). The columns represent the base vectors of the local frame wrt the reference frame. . ◆ getBasis() [2/2]. const Frame::Mat33 & sofa::type::Frame::getBasis ; (; ); const. The columns represent the base vectors of the local frame wrt the reference frame. . ◆ getOrigin() [1/2]. Vec3 & sofa::type::Frame::getOrigin ; (; ). Origin of the local frame in the reference frame,. . ◆ getOrigin() [2/2]. const Vec3 & sofa::type::Frame::getOrigin ; (; ); const. Origin of the local frame in the reference frame,. . ◆ identity(). Frame sofa::type::Frame::identity ; (; ). static . The identity transform. . ◆ inversed(). Frame sofa::type::Frame::inversed ; (; ); const. Transformation from the reference frame to the local frame. ; Compute the transformation from the parent to the child. . ◆ mult(). Frame sofa::type::Frame::mult ; (; const Frame & ; c); const. compute the product",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_frame.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_frame.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat-members.html:230,Modifiability,inherit,inherited,230,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::Mat< L, C, real > Member List . This is the complete list of members for sofa::type::Mat< L, C, real >, including all inherited members. addTransposed(const Mat< C, L, real > &m) noexceptsofa::type::Mat< L, C, real >inline; ArrayLineType typedefsofa::type::Mat< L, C, real >; back()sofa::type::Mat< L, C, real >inline; back() constsofa::type::Mat< L, C, real >inline; begin() noexceptsofa::type::Mat< L, C, real >inline; begin() const noexceptsofa::type::Mat< L, C, real >inline; canSelfTranspose(const Mat< S, S, real > &lhs, const Mat< S, S, real > &rhs) noexceptsofa::type::Mat< L, C, real >inlinestatic; canSelfTranspose(const Mat< I, J, real > &, const Mat< J, I, real > &) noexceptsofa::type::Mat< L, C, real >inlinestatic; clear() noexceptsofa::type::Mat< L, C, real >inline; Col typedefsofa::type::Mat< L, C, real >; col(Size j) const noexceptsofa::type::Mat< L, C, real >inline; const_iterator typedefsofa::type::Mat< L, C, real >; const_reference typedefsofa::type::Mat< L, C, real >; data() const noexceptsofa::type::Mat< L, C, real >inline; difference_type typedefsofa::type::Mat< L, C, real >; elemssofa::type::Mat< L, C, real >; end() noexceptsofa::type::Mat< L, C, real >inline; end() const noexceptsofa::type::Mat< L, C, real >inline; fill(real r) noexceptsofa::type::Mat< L, C, real >inline; front()sofa::type::Mat< L, C, real >inline; front() constsofa::type::Mat< L, C, real >inline; getNbCols() constsofa::type::Mat< L, C, real >inline; getNbLines() constsofa::type::Mat< L, C, real >inline; getsub(Size L0, Size C0, Mat< L2, C2, real > &m) const noexceptsofa::type::Mat< L, C, real >inline; getsub(const Size L0, const Size C0, Vec< C2, real > &m) const noexceptsofa::type::Mat< L, C, real >inline; getsub(Size L0, Size C0, real &m) const noexceptsofa::type::Mat< L, C, real >inline; identity() noexceptsofa::type::Mat< L, C, real >inline; Identity() noexceptsofa::typ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat-members.html:842,Usability,clear,clear,842," addTransposed(const Mat< C, L, real > &m) noexceptsofa::type::Mat< L, C, real >inline; ArrayLineType typedefsofa::type::Mat< L, C, real >; back()sofa::type::Mat< L, C, real >inline; back() constsofa::type::Mat< L, C, real >inline; begin() noexceptsofa::type::Mat< L, C, real >inline; begin() const noexceptsofa::type::Mat< L, C, real >inline; canSelfTranspose(const Mat< S, S, real > &lhs, const Mat< S, S, real > &rhs) noexceptsofa::type::Mat< L, C, real >inlinestatic; canSelfTranspose(const Mat< I, J, real > &, const Mat< J, I, real > &) noexceptsofa::type::Mat< L, C, real >inlinestatic; clear() noexceptsofa::type::Mat< L, C, real >inline; Col typedefsofa::type::Mat< L, C, real >; col(Size j) const noexceptsofa::type::Mat< L, C, real >inline; const_iterator typedefsofa::type::Mat< L, C, real >; const_reference typedefsofa::type::Mat< L, C, real >; data() const noexceptsofa::type::Mat< L, C, real >inline; difference_type typedefsofa::type::Mat< L, C, real >; elemssofa::type::Mat< L, C, real >; end() noexceptsofa::type::Mat< L, C, real >inline; end() const noexceptsofa::type::Mat< L, C, real >inline; fill(real r) noexceptsofa::type::Mat< L, C, real >inline; front()sofa::type::Mat< L, C, real >inline; front() constsofa::type::Mat< L, C, real >inline; getNbCols() constsofa::type::Mat< L, C, real >inline; getNbLines() constsofa::type::Mat< L, C, real >inline; getsub(Size L0, Size C0, Mat< L2, C2, real > &m) const noexceptsofa::type::Mat< L, C, real >inline; getsub(const Size L0, const Size C0, Vec< C2, real > &m) const noexceptsofa::type::Mat< L, C, real >inline; getsub(Size L0, Size C0, real &m) const noexceptsofa::type::Mat< L, C, real >inline; identity() noexceptsofa::type::Mat< L, C, real >inline; Identity() noexceptsofa::typ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:361,Modifiability,Inherit,Inheritance,361,"﻿. SOFA API: sofa::type::Mat< L, C, real > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Static Public Attributes |; Public Member Functions |; Static Public Member Functions |; Friends |; List of all members . sofa::type::Mat< L, C, real > Class Template Reference . #include <Mat.h>. Inheritance diagram for sofa::type::Mat< L, C, real >:. [legend]. Public Attributes; ArrayLineType elems {};  . Static Public Attributes; static constexpr sofa::Size N = L * C;  ; static constexpr Size nbLines = L;  ; static constexpr Size nbCols = C;  ; static constexpr sofa::Size static_size = L;  ; static constexpr sofa::Size total_size = L;  . Public Member Functions; constexpr Mat () noexcept=default;  ; constexpr Mat (NoInit) noexcept;  ; template<sofa::Size TL = L, sofa::Size TC = C, typename = std::enable_if_t<(TL == 1 && TC != 1) || (TC == 1 && TL != 1)>> ; constexpr Mat (std::initializer_list< Real > &&scalars) noexcept;  ; constexpr Mat (std::initializer_list< std::initializer_list< Real >> &&rows) noexcept;  ; template<typename... ArgsT, typename = std::enable_if_t< (std::is_convertible_v<ArgsT, Line> && ...) >, typename = std::enable_if_t< (sizeof...(ArgsT) == L && sizeof...(ArgsT) > 1) >> ; constexpr Mat (ArgsT &&... r) noexcept;  ; constexpr Mat (const real &v) noexcept;  Constructor from an element. More...;  ; template<typename real2 > ; constexpr Mat (const Mat< L, C, real2 > &m) noexcept;  Constructor from another matrix. More...;  ; template<Size L2, Size C2, typename real2 > ; constexpr Mat (const Mat< L2, C2, real2 > &m) noexcept;  Constructor from another matrix with different size (with null default entries and ignoring outside entries) More...;  ; template<typename real2 > ; constexpr Mat (const real2 *p) noexcept;  Constructor from an array of elements (stored per line). More...;  ; constexpr Size getNbLines () const;  number of lines More...;  ; constexpr Size getNbCols () const;  numbe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:3154,Security,access,access,3154,"ine). More...;  ; template<typename real2 > ; constexpr void operator= (const Mat< L, C, real2 > &m) noexcept;  Assignment from another matrix. More...;  ; template<Size L2, Size C2> ; constexpr void operator= (const Mat< L2, C2, real > &m) noexcept;  Assignment from a matrix of different size. More...;  ; template<Size L2, Size C2> ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, real > &m) const noexcept;  ; template<Size C2> ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standar",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:3318,Security,access,access,3318,"ize L2, Size C2> ; constexpr void operator= (const Mat< L2, C2, real > &m) noexcept;  Assignment from a matrix of different size. More...;  ; template<Size L2, Size C2> ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, real > &m) const noexcept;  ; template<Size C2> ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:3424,Security,access,access,3424,"rom a matrix of different size. More...;  ; template<Size L2, Size C2> ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, real > &m) const noexcept;  ; template<Size C2> ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:3514,Security,access,access,3514,"ze L0, Size C0, Mat< L2, C2, real > &m) const noexcept;  ; template<Size C2> ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:3620,Security,access,access,3620,"ub (const Size L0, const Size C0, Vec< C2, real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:3712,Security,access,access,3712,"0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:3827,Security,access,access,3827,"0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:4416,Security,access,access,4416,"neNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexce",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:4566,Security,access,access,4566,"cess to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const L",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:4717,Security,access,access,4717,"operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename =",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:4867,Security,access,access,4867,"Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr real toReal () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:5030,Security,access,access,5030,"expr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr real toReal () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr operator real () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:5204,Security,access,access,5204,"red per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr real toReal () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr operator real () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, real > &m) noexcept;  ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:5379,Security,access,access,5379,"L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr real toReal () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr operator real () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr Mat< C, L, real > transposed () const noexcept;  Return the transpose of m. More...;  ; template<sofa::Size NbLine = L",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:5553,Security,access,access,5553,"e_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr real toReal () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr operator real () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr Mat< C, L, real > transposed () const noexcept;  Return the transpose of m. More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; constexpr void transpose () noexcept;  Transpose the square matrix. More...;  ; constexpr Mat< L,",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:21123,Security,access,access,21123,"quare matrix m. . ◆ inverted(). template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> . constexpr Mat<L,C,real> sofa::type::Mat< L, C, real >::inverted ; (; ); const. inlineconstexpr . invert this . ◆ isDiagonal(). template<sofa::Size L, sofa::Size C, class real > . bool sofa::type::Mat< L, C, real >::isDiagonal ; (; ); const. inlinenoexcept . ◆ isSymmetric(). template<sofa::Size L, sofa::Size C, class real > . bool sofa::type::Mat< L, C, real >::isSymmetric ; (; ); const. inline . ◆ isTransform(). template<sofa::Size L, sofa::Size C, class real > . constexpr bool sofa::type::Mat< L, C, real >::isTransform ; (; ); const. inlineconstexpr . ReturnsTrue if and only if the Matrix is a transformation matrix . ◆ line(). template<sofa::Size L, sofa::Size C, class real > . constexpr const Line& sofa::type::Mat< L, C, real >::line ; (; Size ; i); const. inlineconstexprnoexcept . Read-only access to line i. . ◆ lptr() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr const Line* sofa::type::Mat< L, C, real >::lptr ; (; ); const. inlineconstexprnoexcept . Cast into a standard C array of lines (read-only). . ◆ lptr() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr Line* sofa::type::Mat< L, C, real >::lptr ; (; ). inlineconstexprnoexcept . Cast into a standard C array of lines. . ◆ minusTransposed(). template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<L,C,real> sofa::type::Mat< L, C, real >::minusTransposed ; (; const Mat< C, L, real > & ; m); const. inlineconstexprnoexcept . Subtraction with the transposed of the given matrix operator. ; Returnsthis - mt . ◆ multDiagonal(). template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<L,C,real> sofa::type::Mat< L, C, real >::multDiagonal ; (; const Line & ; d); const. inlineconstexprnoexcept . Multiplication with a diagonal Matrix CxC represented as a vector of size C.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:23716,Security,access,access,23716,"P] . ◆ multTransposed(). template<sofa::Size L, sofa::Size C, class real > . template<Size P> . constexpr Mat<L,P,real> sofa::type::Mat< L, C, real >::multTransposed ; (; const Mat< P, C, real > & ; m); const. inlineconstexprnoexcept . Multiplication with the transposed of the given matrix operator. ; Returnsthis * mt . ◆ operator real(). template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> . constexpr sofa::type::Mat< L, C, real >::operator real ; (; ); const. inlineconstexpr . ◆ operator!=(). template<sofa::Size L, sofa::Size C, class real > . constexpr bool sofa::type::Mat< L, C, real >::operator!= ; (; const Mat< L, C, real > & ; b); const. inlineconstexprnoexcept . ◆ operator()() [1/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr const LineNoInit& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i); const. inlineconstexprnoexcept . Read-only access to line i. . ◆ operator()() [2/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr LineNoInit& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i). inlineconstexprnoexcept . Write access to line i. . ◆ operator()() [3/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr const real& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i, . Size ; j . ); const. inlineconstexprnoexcept . Read-only access to element (i,j). . ◆ operator()() [4/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr real& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i, . Size ; j . ). inlineconstexprnoexcept . Write access to element (i,j). . ◆ operator*() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr Col sofa::type::Mat< L, C, real >::operator* ; (; const Line & ; v); const. inlineconstexprnoexcept . Multiplication operator Matrix * Line. . ◆ operator*() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<L,C",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:23922,Security,access,access,23922,". inlineconstexprnoexcept . Multiplication with the transposed of the given matrix operator. ; Returnsthis * mt . ◆ operator real(). template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> . constexpr sofa::type::Mat< L, C, real >::operator real ; (; ); const. inlineconstexpr . ◆ operator!=(). template<sofa::Size L, sofa::Size C, class real > . constexpr bool sofa::type::Mat< L, C, real >::operator!= ; (; const Mat< L, C, real > & ; b); const. inlineconstexprnoexcept . ◆ operator()() [1/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr const LineNoInit& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i); const. inlineconstexprnoexcept . Read-only access to line i. . ◆ operator()() [2/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr LineNoInit& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i). inlineconstexprnoexcept . Write access to line i. . ◆ operator()() [3/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr const real& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i, . Size ; j . ); const. inlineconstexprnoexcept . Read-only access to element (i,j). . ◆ operator()() [4/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr real& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i, . Size ; j . ). inlineconstexprnoexcept . Write access to element (i,j). . ◆ operator*() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr Col sofa::type::Mat< L, C, real >::operator* ; (; const Line & ; v); const. inlineconstexprnoexcept . Multiplication operator Matrix * Line. . ◆ operator*() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<L,C,real> sofa::type::Mat< L, C, real >::operator* ; (; real ; f); const. inlineconstexprnoexcept . Scalar multiplication operator. . ◆ operator*=(). template<sofa::Size L, sofa::Size C, class real > . constexpr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:24154,Security,access,access,24154,"umn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> . constexpr sofa::type::Mat< L, C, real >::operator real ; (; ); const. inlineconstexpr . ◆ operator!=(). template<sofa::Size L, sofa::Size C, class real > . constexpr bool sofa::type::Mat< L, C, real >::operator!= ; (; const Mat< L, C, real > & ; b); const. inlineconstexprnoexcept . ◆ operator()() [1/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr const LineNoInit& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i); const. inlineconstexprnoexcept . Read-only access to line i. . ◆ operator()() [2/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr LineNoInit& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i). inlineconstexprnoexcept . Write access to line i. . ◆ operator()() [3/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr const real& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i, . Size ; j . ); const. inlineconstexprnoexcept . Read-only access to element (i,j). . ◆ operator()() [4/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr real& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i, . Size ; j . ). inlineconstexprnoexcept . Write access to element (i,j). . ◆ operator*() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr Col sofa::type::Mat< L, C, real >::operator* ; (; const Line & ; v); const. inlineconstexprnoexcept . Multiplication operator Matrix * Line. . ◆ operator*() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<L,C,real> sofa::type::Mat< L, C, real >::operator* ; (; real ; f); const. inlineconstexprnoexcept . Scalar multiplication operator. . ◆ operator*=(). template<sofa::Size L, sofa::Size C, class real > . constexpr void sofa::type::Mat< L, C, real >::operator*= ; (; real ; r). inlineconstexprnoexcept . Scalar multiplication assignment operator. . ◆ operator+(). template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<L,C,real> sofa::ty",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:24376,Security,access,access,24376,". constexpr bool sofa::type::Mat< L, C, real >::operator!= ; (; const Mat< L, C, real > & ; b); const. inlineconstexprnoexcept . ◆ operator()() [1/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr const LineNoInit& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i); const. inlineconstexprnoexcept . Read-only access to line i. . ◆ operator()() [2/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr LineNoInit& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i). inlineconstexprnoexcept . Write access to line i. . ◆ operator()() [3/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr const real& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i, . Size ; j . ); const. inlineconstexprnoexcept . Read-only access to element (i,j). . ◆ operator()() [4/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr real& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i, . Size ; j . ). inlineconstexprnoexcept . Write access to element (i,j). . ◆ operator*() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr Col sofa::type::Mat< L, C, real >::operator* ; (; const Line & ; v); const. inlineconstexprnoexcept . Multiplication operator Matrix * Line. . ◆ operator*() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<L,C,real> sofa::type::Mat< L, C, real >::operator* ; (; real ; f); const. inlineconstexprnoexcept . Scalar multiplication operator. . ◆ operator*=(). template<sofa::Size L, sofa::Size C, class real > . constexpr void sofa::type::Mat< L, C, real >::operator*= ; (; real ; r). inlineconstexprnoexcept . Scalar multiplication assignment operator. . ◆ operator+(). template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<L,C,real> sofa::type::Mat< L, C, real >::operator+ ; (; const Mat< L, C, real > & ; m); const. inlineconstexprnoexcept . Matrix addition operator. . ◆ operator+=(). template<sofa::Size L, sofa::Size C, class real > . constexpr void sofa::type",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:27739,Security,access,access,27739,"const Mat< L, C, real2 > & ; m). inlineconstexprnoexcept . Assignment from another matrix. . ◆ operator=() [2/3]. template<sofa::Size L, sofa::Size C, class real > . template<Size L2, Size C2> . constexpr void sofa::type::Mat< L, C, real >::operator= ; (; const Mat< L2, C2, real > & ; m). inlineconstexprnoexcept . Assignment from a matrix of different size. . ◆ operator=() [3/3]. template<sofa::Size L, sofa::Size C, class real > . constexpr void sofa::type::Mat< L, C, real >::operator= ; (; const real * ; p). inlineconstexprnoexcept . Assignment from an array of elements (stored per line). . ◆ operator==(). template<sofa::Size L, sofa::Size C, class real > . constexpr bool sofa::type::Mat< L, C, real >::operator== ; (; const Mat< L, C, real > & ; b); const. inlineconstexprnoexcept . ◆ operator[]() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr const LineNoInit& sofa::type::Mat< L, C, real >::operator[] ; (; Size ; i); const. inlineconstexprnoexcept . Read-only access to line i. . ◆ operator[]() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr LineNoInit& sofa::type::Mat< L, C, real >::operator[] ; (; Size ; i). inlineconstexprnoexcept . Write access to line i. . ◆ plusTransposed(). template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<L,C,real> sofa::type::Mat< L, C, real >::plusTransposed ; (; const Mat< C, L, real > & ; m); const. inlineconstexprnoexcept . Addition with the transposed of the given matrix operator. ; Returnsthis + mt . ◆ ptr() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr const real* sofa::type::Mat< L, C, real >::ptr ; (; ); const. inlineconstexprnoexcept . Cast into a standard C array of elements (stored per line) (read-only). . ◆ ptr() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr real* sofa::type::Mat< L, C, real >::ptr ; (; ). inlineconstexprnoexcept . Cast into a standard C array of elements (stored per line). . ◆ setsub() [1/2]. template<sofa:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:27945,Security,access,access,27945,"d sofa::type::Mat< L, C, real >::operator= ; (; const Mat< L2, C2, real > & ; m). inlineconstexprnoexcept . Assignment from a matrix of different size. . ◆ operator=() [3/3]. template<sofa::Size L, sofa::Size C, class real > . constexpr void sofa::type::Mat< L, C, real >::operator= ; (; const real * ; p). inlineconstexprnoexcept . Assignment from an array of elements (stored per line). . ◆ operator==(). template<sofa::Size L, sofa::Size C, class real > . constexpr bool sofa::type::Mat< L, C, real >::operator== ; (; const Mat< L, C, real > & ; b); const. inlineconstexprnoexcept . ◆ operator[]() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr const LineNoInit& sofa::type::Mat< L, C, real >::operator[] ; (; Size ; i); const. inlineconstexprnoexcept . Read-only access to line i. . ◆ operator[]() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr LineNoInit& sofa::type::Mat< L, C, real >::operator[] ; (; Size ; i). inlineconstexprnoexcept . Write access to line i. . ◆ plusTransposed(). template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<L,C,real> sofa::type::Mat< L, C, real >::plusTransposed ; (; const Mat< C, L, real > & ; m); const. inlineconstexprnoexcept . Addition with the transposed of the given matrix operator. ; Returnsthis + mt . ◆ ptr() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr const real* sofa::type::Mat< L, C, real >::ptr ; (; ); const. inlineconstexprnoexcept . Cast into a standard C array of elements (stored per line) (read-only). . ◆ ptr() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr real* sofa::type::Mat< L, C, real >::ptr ; (; ). inlineconstexprnoexcept . Cast into a standard C array of elements (stored per line). . ◆ setsub() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<Size L2, Size C2> . constexpr void sofa::type::Mat< L, C, real >::setsub ; (; Size ; L0, . Size ; C0, . const Mat< L2, C2, real > & ; m . ). inlineconstexprnoexc",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:32958,Security,access,access,32958,"oexcept . ◆ transpose() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> . constexpr void sofa::type::Mat< L, C, real >::transpose ; (; ). inlineconstexprnoexcept . Transpose the square matrix. . ◆ transpose() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr void sofa::type::Mat< L, C, real >::transpose ; (; const Mat< C, L, real > & ; m). inlineconstexprnoexcept . Set matrix as the transpose of m. . ◆ transposed(). template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<C,L,real> sofa::type::Mat< L, C, real >::transposed ; (; ); const. inlineconstexprnoexcept . Return the transpose of m. . ◆ w() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> . constexpr const Line& sofa::type::Mat< L, C, real >::w ; (; ); const. inlineconstexprnoexcept . Special access to fourth line (read-only). . ◆ w() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> . constexpr Line& sofa::type::Mat< L, C, real >::w ; (; ). inlineconstexprnoexcept . Special access to fourth line. . ◆ x() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr const Line& sofa::type::Mat< L, C, real >::x ; (; ); const. inlineconstexprnoexcept . Special access to first line (read-only). . ◆ x() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr Line& sofa::type::Mat< L, C, real >::x ; (; ). inlineconstexprnoexcept . Special access to first line. . ◆ y() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr const Line& sofa::type::Mat< L, C, ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:33226,Security,access,access,33226,"onstexprnoexcept . Transpose the square matrix. . ◆ transpose() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr void sofa::type::Mat< L, C, real >::transpose ; (; const Mat< C, L, real > & ; m). inlineconstexprnoexcept . Set matrix as the transpose of m. . ◆ transposed(). template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<C,L,real> sofa::type::Mat< L, C, real >::transposed ; (; ); const. inlineconstexprnoexcept . Return the transpose of m. . ◆ w() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> . constexpr const Line& sofa::type::Mat< L, C, real >::w ; (; ); const. inlineconstexprnoexcept . Special access to fourth line (read-only). . ◆ w() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> . constexpr Line& sofa::type::Mat< L, C, real >::w ; (; ). inlineconstexprnoexcept . Special access to fourth line. . ◆ x() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr const Line& sofa::type::Mat< L, C, real >::x ; (; ); const. inlineconstexprnoexcept . Special access to first line (read-only). . ◆ x() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr Line& sofa::type::Mat< L, C, real >::x ; (; ). inlineconstexprnoexcept . Special access to first line. . ◆ y() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr const Line& sofa::type::Mat< L, C, real >::y ; (; ); const. inlineconstexprnoexcept . Special access to second line (read-only). . ◆ y() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr Line& sofa::type",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:33495,Security,access,access,33495," . ◆ transposed(). template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<C,L,real> sofa::type::Mat< L, C, real >::transposed ; (; ); const. inlineconstexprnoexcept . Return the transpose of m. . ◆ w() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> . constexpr const Line& sofa::type::Mat< L, C, real >::w ; (; ); const. inlineconstexprnoexcept . Special access to fourth line (read-only). . ◆ w() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> . constexpr Line& sofa::type::Mat< L, C, real >::w ; (; ). inlineconstexprnoexcept . Special access to fourth line. . ◆ x() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr const Line& sofa::type::Mat< L, C, real >::x ; (; ); const. inlineconstexprnoexcept . Special access to first line (read-only). . ◆ x() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr Line& sofa::type::Mat< L, C, real >::x ; (; ). inlineconstexprnoexcept . Special access to first line. . ◆ y() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr const Line& sofa::type::Mat< L, C, real >::y ; (; ); const. inlineconstexprnoexcept . Special access to second line (read-only). . ◆ y() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr Line& sofa::type::Mat< L, C, real >::y ; (; ). inlineconstexprnoexcept . Special access to second line. . ◆ z() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> . constexpr const Line& sofa::type::Mat< L, C,",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:33762,Security,access,access,33762,"s real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> . constexpr const Line& sofa::type::Mat< L, C, real >::w ; (; ); const. inlineconstexprnoexcept . Special access to fourth line (read-only). . ◆ w() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> . constexpr Line& sofa::type::Mat< L, C, real >::w ; (; ). inlineconstexprnoexcept . Special access to fourth line. . ◆ x() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr const Line& sofa::type::Mat< L, C, real >::x ; (; ); const. inlineconstexprnoexcept . Special access to first line (read-only). . ◆ x() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr Line& sofa::type::Mat< L, C, real >::x ; (; ). inlineconstexprnoexcept . Special access to first line. . ◆ y() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr const Line& sofa::type::Mat< L, C, real >::y ; (; ); const. inlineconstexprnoexcept . Special access to second line (read-only). . ◆ y() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr Line& sofa::type::Mat< L, C, real >::y ; (; ). inlineconstexprnoexcept . Special access to second line. . ◆ z() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> . constexpr const Line& sofa::type::Mat< L, C, real >::z ; (; ); const. inlineconstexprnoexcept . Special access to third line (read-only). . ◆ z() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> . constexpr Line& sofa::typ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:34030,Security,access,access,34030,"C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> . constexpr Line& sofa::type::Mat< L, C, real >::w ; (; ). inlineconstexprnoexcept . Special access to fourth line. . ◆ x() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr const Line& sofa::type::Mat< L, C, real >::x ; (; ); const. inlineconstexprnoexcept . Special access to first line (read-only). . ◆ x() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr Line& sofa::type::Mat< L, C, real >::x ; (; ). inlineconstexprnoexcept . Special access to first line. . ◆ y() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr const Line& sofa::type::Mat< L, C, real >::y ; (; ); const. inlineconstexprnoexcept . Special access to second line (read-only). . ◆ y() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr Line& sofa::type::Mat< L, C, real >::y ; (; ). inlineconstexprnoexcept . Special access to second line. . ◆ z() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> . constexpr const Line& sofa::type::Mat< L, C, real >::z ; (; ); const. inlineconstexprnoexcept . Special access to third line (read-only). . ◆ z() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> . constexpr Line& sofa::type::Mat< L, C, real >::z ; (; ). inlineconstexprnoexcept . Special access to third line. . Related details. ◆ operator*. template<sofa::Size L, sofa::Size C, class real > . constexpr friend Mat<L,C,real> operator* ; (; real ; r, . const Mat< L, C, real > & ; m . ). friend . S",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:34298,Security,access,access,34298,"ype::Mat< L, C, real >::w ; (; ). inlineconstexprnoexcept . Special access to fourth line. . ◆ x() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr const Line& sofa::type::Mat< L, C, real >::x ; (; ); const. inlineconstexprnoexcept . Special access to first line (read-only). . ◆ x() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr Line& sofa::type::Mat< L, C, real >::x ; (; ). inlineconstexprnoexcept . Special access to first line. . ◆ y() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr const Line& sofa::type::Mat< L, C, real >::y ; (; ); const. inlineconstexprnoexcept . Special access to second line (read-only). . ◆ y() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr Line& sofa::type::Mat< L, C, real >::y ; (; ). inlineconstexprnoexcept . Special access to second line. . ◆ z() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> . constexpr const Line& sofa::type::Mat< L, C, real >::z ; (; ); const. inlineconstexprnoexcept . Special access to third line (read-only). . ◆ z() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> . constexpr Line& sofa::type::Mat< L, C, real >::z ; (; ). inlineconstexprnoexcept . Special access to third line. . Related details. ◆ operator*. template<sofa::Size L, sofa::Size C, class real > . constexpr friend Mat<L,C,real> operator* ; (; real ; r, . const Mat< L, C, real > & ; m . ). friend . Scalar matrix multiplication operator. . sofatypeMat; Generated on Mon Nov 11 2024 03:36:09 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:34567,Security,access,access,34567,"ype::Mat< L, C, real >::w ; (; ). inlineconstexprnoexcept . Special access to fourth line. . ◆ x() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr const Line& sofa::type::Mat< L, C, real >::x ; (; ); const. inlineconstexprnoexcept . Special access to first line (read-only). . ◆ x() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr Line& sofa::type::Mat< L, C, real >::x ; (; ). inlineconstexprnoexcept . Special access to first line. . ◆ y() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr const Line& sofa::type::Mat< L, C, real >::y ; (; ); const. inlineconstexprnoexcept . Special access to second line (read-only). . ◆ y() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr Line& sofa::type::Mat< L, C, real >::y ; (; ). inlineconstexprnoexcept . Special access to second line. . ◆ z() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> . constexpr const Line& sofa::type::Mat< L, C, real >::z ; (; ); const. inlineconstexprnoexcept . Special access to third line (read-only). . ◆ z() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> . constexpr Line& sofa::type::Mat< L, C, real >::z ; (; ). inlineconstexprnoexcept . Special access to third line. . Related details. ◆ operator*. template<sofa::Size L, sofa::Size C, class real > . constexpr friend Mat<L,C,real> operator* ; (; real ; r, . const Mat< L, C, real > & ; m . ). friend . Scalar matrix multiplication operator. . sofatypeMat; Generated on Mon Nov 11 2024 03:36:09 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:34834,Security,access,access,34834,"ype::Mat< L, C, real >::w ; (; ). inlineconstexprnoexcept . Special access to fourth line. . ◆ x() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr const Line& sofa::type::Mat< L, C, real >::x ; (; ); const. inlineconstexprnoexcept . Special access to first line (read-only). . ◆ x() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr Line& sofa::type::Mat< L, C, real >::x ; (; ). inlineconstexprnoexcept . Special access to first line. . ◆ y() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr const Line& sofa::type::Mat< L, C, real >::y ; (; ); const. inlineconstexprnoexcept . Special access to second line (read-only). . ◆ y() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr Line& sofa::type::Mat< L, C, real >::y ; (; ). inlineconstexprnoexcept . Special access to second line. . ◆ z() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> . constexpr const Line& sofa::type::Mat< L, C, real >::z ; (; ); const. inlineconstexprnoexcept . Special access to third line (read-only). . ◆ z() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> . constexpr Line& sofa::type::Mat< L, C, real >::z ; (; ). inlineconstexprnoexcept . Special access to third line. . Related details. ◆ operator*. template<sofa::Size L, sofa::Size C, class real > . constexpr friend Mat<L,C,real> operator* ; (; real ; r, . const Mat< L, C, real > & ; m . ). friend . Scalar matrix multiplication operator. . sofatypeMat; Generated on Mon Nov 11 2024 03:36:09 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:10087,Testability,Test,Tests,10087,"e NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; constexpr bool invert (const Mat< L, C, real > &m);  Invert square matrix m. More...;  ; constexpr bool isTransform () const;  ; constexpr Vec< C-1, real > transform (const Vec< C-1, real > &v) const noexcept;  Multiplication operator Matrix * Vector considering the matrix as a transformation. More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; constexpr bool transformInvert (const Mat< L, C, real > &m);  Invert transformation matrix m. More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; constexpr void symmetrize () noexcept;  ; constexpr const real * data () const noexcept;  ; constexpr ArrayLineType::iterator begin () noexcept;  ; constexpr ArrayLineType::const_iterator begin () const noexcept;  ; constexpr ArrayLineType::iterator end () noexcept;  ; constexpr ArrayLineType::const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  ; Tests operators; constexpr bool operator== (const Mat< L, C, real > &b) const noexcept;  ; constexpr bool operator!= (const Mat< L, C, real > &b) const noexcept;  ; bool isSymmetric () const;  ; bool isDiagonal () const noexcept;  . Static Public Member Functions; static constexpr sofa::Size size ();  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; static const Mat< L, L, real > & Identity () noexcept;  Returns the identity matrix. More...;  ; template<Size S> ; static bool canSelfTranspose (const Mat< S, S, real > &lhs, const Mat< S, S, real > &rhs) noexcept;  ; template<Size I, Size J> ; static bool canSelfTranspose (const Mat< I, J, real > &, const Mat< J, I, real > &) noexcept;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, ty",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:13492,Testability,assert,assert,13492,"ass real > . constexpr sofa::Size sofa::type::Mat< L, C, real >::total_size = L. staticconstexpr . Constructor details. ◆ Mat() [1/9]. template<sofa::Size L, sofa::Size C, class real > . constexpr sofa::type::Mat< L, C, real >::Mat ; (; ). constexprdefaultnoexcept . ◆ Mat() [2/9]. template<sofa::Size L, sofa::Size C, class real > . constexpr sofa::type::Mat< L, C, real >::Mat ; (; NoInit ; ). inlineexplicitconstexprnoexcept . ◆ Mat() [3/9]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size TL = L, sofa::Size TC = C, typename = std::enable_if_t<(TL == 1 && TC != 1) || (TC == 1 && TL != 1)>> . constexpr sofa::type::Mat< L, C, real >::Mat ; (; std::initializer_list< Real > && ; scalars). inlineconstexprnoexcept . Constructs a 1xC matrix (single-row, multiple columns) or a Lx1 matrix (multiple row, single column) and initializes it from a scalar initializer-list. Allows to build a matrix with the following syntax: sofa::type::Mat<1, 3, int> M {1, 2, 3} or sofa::type::Mat<3, 1, int> M {1, 2, 3} Initializer-list must match matrix column size, otherwise an assert is triggered. . ◆ Mat() [4/9]. template<sofa::Size L, sofa::Size C, class real > . constexpr sofa::type::Mat< L, C, real >::Mat ; (; std::initializer_list< std::initializer_list< Real >> && ; rows). inlineconstexprnoexcept . Constructs a matrix and initializes it from scalar initializer-lists grouped by row. Allows to build a matrix with the following syntax: sofa::type::Mat<3, 3, int> M {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}} Initializer-lists must match matrix size, otherwise an assert is triggered. . ◆ Mat() [5/9]. template<sofa::Size L, sofa::Size C, class real > . template<typename... ArgsT, typename = std::enable_if_t< (std::is_convertible_v<ArgsT, Line> && ...) >, typename = std::enable_if_t< (sizeof...(ArgsT) == L && sizeof...(ArgsT) > 1) >> . constexpr sofa::type::Mat< L, C, real >::Mat ; (; ArgsT &&... ; r). inlineconstexprnoexcept . ◆ Mat() [6/9]. template<sofa::Size L, sofa::Size C, clas",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:13979,Testability,assert,assert,13979,"mplate<sofa::Size TL = L, sofa::Size TC = C, typename = std::enable_if_t<(TL == 1 && TC != 1) || (TC == 1 && TL != 1)>> . constexpr sofa::type::Mat< L, C, real >::Mat ; (; std::initializer_list< Real > && ; scalars). inlineconstexprnoexcept . Constructs a 1xC matrix (single-row, multiple columns) or a Lx1 matrix (multiple row, single column) and initializes it from a scalar initializer-list. Allows to build a matrix with the following syntax: sofa::type::Mat<1, 3, int> M {1, 2, 3} or sofa::type::Mat<3, 1, int> M {1, 2, 3} Initializer-list must match matrix column size, otherwise an assert is triggered. . ◆ Mat() [4/9]. template<sofa::Size L, sofa::Size C, class real > . constexpr sofa::type::Mat< L, C, real >::Mat ; (; std::initializer_list< std::initializer_list< Real >> && ; rows). inlineconstexprnoexcept . Constructs a matrix and initializes it from scalar initializer-lists grouped by row. Allows to build a matrix with the following syntax: sofa::type::Mat<3, 3, int> M {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}} Initializer-lists must match matrix size, otherwise an assert is triggered. . ◆ Mat() [5/9]. template<sofa::Size L, sofa::Size C, class real > . template<typename... ArgsT, typename = std::enable_if_t< (std::is_convertible_v<ArgsT, Line> && ...) >, typename = std::enable_if_t< (sizeof...(ArgsT) == L && sizeof...(ArgsT) > 1) >> . constexpr sofa::type::Mat< L, C, real >::Mat ; (; ArgsT &&... ; r). inlineconstexprnoexcept . ◆ Mat() [6/9]. template<sofa::Size L, sofa::Size C, class real > . constexpr sofa::type::Mat< L, C, real >::Mat ; (; const real & ; v). inlineexplicitconstexprnoexcept . Constructor from an element. . ◆ Mat() [7/9]. template<sofa::Size L, sofa::Size C, class real > . template<typename real2 > . constexpr sofa::type::Mat< L, C, real >::Mat ; (; const Mat< L, C, real2 > & ; m). inlineconstexprnoexcept . Constructor from another matrix. . ◆ Mat() [8/9]. template<sofa::Size L, sofa::Size C, class real > . template<Size L2, Size C2, typename real2 > . co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:2958,Usability,clear,clear,2958,"d ignoring outside entries) More...;  ; template<typename real2 > ; constexpr Mat (const real2 *p) noexcept;  Constructor from an array of elements (stored per line). More...;  ; constexpr Size getNbLines () const;  number of lines More...;  ; constexpr Size getNbCols () const;  number of columns More...;  ; constexpr void operator= (const real *p) noexcept;  Assignment from an array of elements (stored per line). More...;  ; template<typename real2 > ; constexpr void operator= (const Mat< L, C, real2 > &m) noexcept;  Assignment from another matrix. More...;  ; template<Size L2, Size C2> ; constexpr void operator= (const Mat< L2, C2, real > &m) noexcept;  Assignment from a matrix of different size. More...;  ; template<Size L2, Size C2> ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, real > &m) const noexcept;  ; template<Size C2> ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write acce",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:16833,Usability,clear,clear,16833,"e C, class real > . constexpr const_reference sofa::type::Mat< L, C, real >::back ; (; ); const. inlineconstexpr . ◆ begin() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr ArrayLineType::const_iterator sofa::type::Mat< L, C, real >::begin ; (; ); const. inlineconstexprnoexcept . ◆ begin() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr ArrayLineType::iterator sofa::type::Mat< L, C, real >::begin ; (; ). inlineconstexprnoexcept . ◆ canSelfTranspose() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<Size I, Size J> . static bool sofa::type::Mat< L, C, real >::canSelfTranspose ; (; const Mat< I, J, real > & ; , . const Mat< J, I, real > & ;  . ). inlinestaticnoexcept . ◆ canSelfTranspose() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<Size S> . static bool sofa::type::Mat< L, C, real >::canSelfTranspose ; (; const Mat< S, S, real > & ; lhs, . const Mat< S, S, real > & ; rhs . ). inlinestaticnoexcept . ◆ clear(). template<sofa::Size L, sofa::Size C, class real > . constexpr void sofa::type::Mat< L, C, real >::clear ; (; ). inlineconstexprnoexcept . Sets each element to 0. . ◆ col(). template<sofa::Size L, sofa::Size C, class real > . constexpr Col sofa::type::Mat< L, C, real >::col ; (; Size ; j); const. inlineconstexprnoexcept . Copy of column j. . ◆ data(). template<sofa::Size L, sofa::Size C, class real > . constexpr const real* sofa::type::Mat< L, C, real >::data ; (; ); const. inlineconstexprnoexcept . ◆ end() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr ArrayLineType::const_iterator sofa::type::Mat< L, C, real >::end ; (; ); const. inlineconstexprnoexcept . ◆ end() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr ArrayLineType::iterator sofa::type::Mat< L, C, real >::end ; (; ). inlineconstexprnoexcept . ◆ fill(). template<sofa::Size L, sofa::Size C, class real > . constexpr void sofa::type::Mat< L, C, real >::fill ; (; real ; r). inlineco",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:16940,Usability,clear,clear,16940,"; const. inlineconstexpr . ◆ begin() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr ArrayLineType::const_iterator sofa::type::Mat< L, C, real >::begin ; (; ); const. inlineconstexprnoexcept . ◆ begin() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr ArrayLineType::iterator sofa::type::Mat< L, C, real >::begin ; (; ). inlineconstexprnoexcept . ◆ canSelfTranspose() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<Size I, Size J> . static bool sofa::type::Mat< L, C, real >::canSelfTranspose ; (; const Mat< I, J, real > & ; , . const Mat< J, I, real > & ;  . ). inlinestaticnoexcept . ◆ canSelfTranspose() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<Size S> . static bool sofa::type::Mat< L, C, real >::canSelfTranspose ; (; const Mat< S, S, real > & ; lhs, . const Mat< S, S, real > & ; rhs . ). inlinestaticnoexcept . ◆ clear(). template<sofa::Size L, sofa::Size C, class real > . constexpr void sofa::type::Mat< L, C, real >::clear ; (; ). inlineconstexprnoexcept . Sets each element to 0. . ◆ col(). template<sofa::Size L, sofa::Size C, class real > . constexpr Col sofa::type::Mat< L, C, real >::col ; (; Size ; j); const. inlineconstexprnoexcept . Copy of column j. . ◆ data(). template<sofa::Size L, sofa::Size C, class real > . constexpr const real* sofa::type::Mat< L, C, real >::data ; (; ); const. inlineconstexprnoexcept . ◆ end() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr ArrayLineType::const_iterator sofa::type::Mat< L, C, real >::end ; (; ); const. inlineconstexprnoexcept . ◆ end() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr ArrayLineType::iterator sofa::type::Mat< L, C, real >::end ; (; ). inlineconstexprnoexcept . ◆ fill(). template<sofa::Size L, sofa::Size C, class real > . constexpr void sofa::type::Mat< L, C, real >::fill ; (; real ; r). inlineconstexprnoexcept . Sets each element to r. . ◆ front() [1/2]. template<sofa::Size L, sof",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:29889,Usability,simpl,simple,29889," const Mat< L2, C2, real > & ; m . ). inlineconstexprnoexcept . ◆ setsub() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<Size L2> . constexpr void sofa::type::Mat< L, C, real >::setsub ; (; Size ; L0, . Size ; C0, . const Vec< L2, real > & ; v . ). inlineconstexprnoexcept . ◆ size(). template<sofa::Size L, sofa::Size C, class real > . static constexpr sofa::Size sofa::type::Mat< L, C, real >::size ; (; void ; ). inlinestaticconstexpr . ◆ subTransposed(). template<sofa::Size L, sofa::Size C, class real > . constexpr void sofa::type::Mat< L, C, real >::subTransposed ; (; const Mat< C, L, real > & ; m). inlineconstexprnoexcept . Subtraction of the transposed of m. . ◆ symmetrize(). template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> . constexpr void sofa::type::Mat< L, C, real >::symmetrize ; (; ). inlineconstexprnoexcept . for square matrices Warningin-place simple symmetrization this = ( this + this.transposed() ) / 2.0 . ◆ toReal(). template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> . constexpr real sofa::type::Mat< L, C, real >::toReal ; (; ); const. inlineconstexpr . ◆ transform(). template<sofa::Size L, sofa::Size C, class real > . constexpr Vec<C-1,real> sofa::type::Mat< L, C, real >::transform ; (; const Vec< C-1, real > & ; v); const. inlineconstexprnoexcept . Multiplication operator Matrix * Vector considering the matrix as a transformation. . ◆ transformInvert(). template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> . constexpr bool sofa::type::Mat< L, C, real >::transformInvert ; (; const Mat< L, C, real > & ; m). inlineconstexpr . Invert transformation matrix m. . ◆ transformRotation(). template<sofa::Size L, sofa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_material-members.html:212,Modifiability,inherit,inherited,212,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::Material Member List . This is the complete list of members for sofa::type::Material, including all inherited members. activatedsofa::type::Material; ambientsofa::type::Material; bumpTextureFilenamesofa::type::Material; diffusesofa::type::Material; emissivesofa::type::Material; Material()sofa::type::Material; Material(const Material &mat)sofa::type::Material; namesofa::type::Material; operator<<(std::ostream &out, const Material &m)sofa::type::Materialfriend; operator=(const Material &other)sofa::type::Material; operator>>(std::istream &in, Material &m)sofa::type::Materialfriend; setColor(float r, float g, float b, float a)sofa::type::Material; shininesssofa::type::Material; specularsofa::type::Material; textureFilenamesofa::type::Material; useAmbientsofa::type::Material; useBumpMappingsofa::type::Material; useDiffusesofa::type::Material; useEmissivesofa::type::Material; useShininesssofa::type::Material; useSpecularsofa::type::Material; useTexturesofa::type::Material. Generated on Mon Nov 11 2024 03:36:09 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_material-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_material-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init-members.html:242,Modifiability,inherit,inherited,242,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::MatNoInit< L, C, real > Member List . This is the complete list of members for sofa::type::MatNoInit< L, C, real >, including all inherited members. addTransposed(const Mat< C, L, real > &m) noexceptsofa::type::Mat< L, C, real >inline; ArrayLineType typedefsofa::type::Mat< L, C, real >; back()sofa::type::Mat< L, C, real >inline; back() constsofa::type::Mat< L, C, real >inline; begin() noexceptsofa::type::Mat< L, C, real >inline; begin() const noexceptsofa::type::Mat< L, C, real >inline; canSelfTranspose(const Mat< S, S, real > &lhs, const Mat< S, S, real > &rhs) noexceptsofa::type::Mat< L, C, real >inlinestatic; canSelfTranspose(const Mat< I, J, real > &, const Mat< J, I, real > &) noexceptsofa::type::Mat< L, C, real >inlinestatic; clear() noexceptsofa::type::Mat< L, C, real >inline; col(Size j) const noexceptsofa::type::Mat< L, C, real >inline; Col typedefsofa::type::Mat< L, C, real >; const_iterator typedefsofa::type::Mat< L, C, real >; const_reference typedefsofa::type::Mat< L, C, real >; data() const noexceptsofa::type::Mat< L, C, real >inline; difference_type typedefsofa::type::Mat< L, C, real >; elemssofa::type::Mat< L, C, real >; end() noexceptsofa::type::Mat< L, C, real >inline; end() const noexceptsofa::type::Mat< L, C, real >inline; fill(real r) noexceptsofa::type::Mat< L, C, real >inline; front()sofa::type::Mat< L, C, real >inline; front() constsofa::type::Mat< L, C, real >inline; getNbCols() constsofa::type::Mat< L, C, real >inline; getNbLines() constsofa::type::Mat< L, C, real >inline; getsub(Size L0, Size C0, Mat< L2, C2, real > &m) const noexceptsofa::type::Mat< L, C, real >inline; getsub(const Size L0, const Size C0, Vec< C2, real > &m) const noexceptsofa::type::Mat< L, C, real >inline; getsub(Size L0, Size C0, real &m) const noexceptsofa::type::Mat< L, C, real >inline; identity() noexceptsofa::type::Mat< L, C, real >inline; Identity() noexc",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init-members.html:854,Usability,clear,clear,854," addTransposed(const Mat< C, L, real > &m) noexceptsofa::type::Mat< L, C, real >inline; ArrayLineType typedefsofa::type::Mat< L, C, real >; back()sofa::type::Mat< L, C, real >inline; back() constsofa::type::Mat< L, C, real >inline; begin() noexceptsofa::type::Mat< L, C, real >inline; begin() const noexceptsofa::type::Mat< L, C, real >inline; canSelfTranspose(const Mat< S, S, real > &lhs, const Mat< S, S, real > &rhs) noexceptsofa::type::Mat< L, C, real >inlinestatic; canSelfTranspose(const Mat< I, J, real > &, const Mat< J, I, real > &) noexceptsofa::type::Mat< L, C, real >inlinestatic; clear() noexceptsofa::type::Mat< L, C, real >inline; col(Size j) const noexceptsofa::type::Mat< L, C, real >inline; Col typedefsofa::type::Mat< L, C, real >; const_iterator typedefsofa::type::Mat< L, C, real >; const_reference typedefsofa::type::Mat< L, C, real >; data() const noexceptsofa::type::Mat< L, C, real >inline; difference_type typedefsofa::type::Mat< L, C, real >; elemssofa::type::Mat< L, C, real >; end() noexceptsofa::type::Mat< L, C, real >inline; end() const noexceptsofa::type::Mat< L, C, real >inline; fill(real r) noexceptsofa::type::Mat< L, C, real >inline; front()sofa::type::Mat< L, C, real >inline; front() constsofa::type::Mat< L, C, real >inline; getNbCols() constsofa::type::Mat< L, C, real >inline; getNbLines() constsofa::type::Mat< L, C, real >inline; getsub(Size L0, Size C0, Mat< L2, C2, real > &m) const noexceptsofa::type::Mat< L, C, real >inline; getsub(const Size L0, const Size C0, Vec< C2, real > &m) const noexceptsofa::type::Mat< L, C, real >inline; getsub(Size L0, Size C0, real &m) const noexceptsofa::type::Mat< L, C, real >inline; identity() noexceptsofa::type::Mat< L, C, real >inline; Identity() noexc",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:351,Modifiability,Inherit,Inheritance,351,"﻿. SOFA API: sofa::type::MatNoInit< L, C, real > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::type::MatNoInit< L, C, real > Class Template Reference . #include <Mat.h>; Same as Mat except the values are not initialized by default. ; More... Inheritance diagram for sofa::type::MatNoInit< L, C, real >:. [legend]; Detailed Description; template<sofa::Size L, sofa::Size C, typename real>; class sofa::type::MatNoInit< L, C, real >; Same as Mat except the values are not initialized by default. . Public Member Functions; constexpr MatNoInit () noexcept;  ; constexpr void operator= (const real *p) noexcept;  Assignment from an array of elements (stored per line). More...;  ; template<sofa::Size L2, sofa::Size C2, typename real2 > ; constexpr void operator= (const Mat< L2, C2, real2 > &m) noexcept;  Assignment from another matrix. More...;  ;  Public Member Functions inherited from sofa::type::Mat< L, C, real >; constexpr Mat () noexcept=default;  ; constexpr Mat (NoInit) noexcept;  ; template<sofa::Size TL = L, sofa::Size TC = C, typename = std::enable_if_t<(TL == 1 && TC != 1) || (TC == 1 && TL != 1)>> ; constexpr Mat (std::initializer_list< Real > &&scalars) noexcept;  ; constexpr Mat (std::initializer_list< std::initializer_list< Real >> &&rows) noexcept;  ; template<typename... ArgsT, typename = std::enable_if_t< (std::is_convertible_v<ArgsT, Line> && ...) >, typename = std::enable_if_t< (sizeof...(ArgsT) == L && sizeof...(ArgsT) > 1) >> ; constexpr Mat (ArgsT &&... r) noexcept;  ; constexpr Mat (const real &v) noexcept;  Constructor from an element. More...;  ; template<typename real2 > ; constexpr Mat (const Mat< L, C, real2 > &m) noexcept;  Constructor from another matrix. More...;  ; template<Size L2, Size C2, typename real2 > ; constexpr Mat (const Mat< L2, C2, real2 > &m) noexcept;  Constructor from another matrix with different size (with null default entr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:981,Modifiability,inherit,inherited,981,"List of all members . sofa::type::MatNoInit< L, C, real > Class Template Reference . #include <Mat.h>; Same as Mat except the values are not initialized by default. ; More... Inheritance diagram for sofa::type::MatNoInit< L, C, real >:. [legend]; Detailed Description; template<sofa::Size L, sofa::Size C, typename real>; class sofa::type::MatNoInit< L, C, real >; Same as Mat except the values are not initialized by default. . Public Member Functions; constexpr MatNoInit () noexcept;  ; constexpr void operator= (const real *p) noexcept;  Assignment from an array of elements (stored per line). More...;  ; template<sofa::Size L2, sofa::Size C2, typename real2 > ; constexpr void operator= (const Mat< L2, C2, real2 > &m) noexcept;  Assignment from another matrix. More...;  ;  Public Member Functions inherited from sofa::type::Mat< L, C, real >; constexpr Mat () noexcept=default;  ; constexpr Mat (NoInit) noexcept;  ; template<sofa::Size TL = L, sofa::Size TC = C, typename = std::enable_if_t<(TL == 1 && TC != 1) || (TC == 1 && TL != 1)>> ; constexpr Mat (std::initializer_list< Real > &&scalars) noexcept;  ; constexpr Mat (std::initializer_list< std::initializer_list< Real >> &&rows) noexcept;  ; template<typename... ArgsT, typename = std::enable_if_t< (std::is_convertible_v<ArgsT, Line> && ...) >, typename = std::enable_if_t< (sizeof...(ArgsT) == L && sizeof...(ArgsT) > 1) >> ; constexpr Mat (ArgsT &&... r) noexcept;  ; constexpr Mat (const real &v) noexcept;  Constructor from an element. More...;  ; template<typename real2 > ; constexpr Mat (const Mat< L, C, real2 > &m) noexcept;  Constructor from another matrix. More...;  ; template<Size L2, Size C2, typename real2 > ; constexpr Mat (const Mat< L2, C2, real2 > &m) noexcept;  Constructor from another matrix with different size (with null default entries and ignoring outside entries) More...;  ; template<typename real2 > ; constexpr Mat (const real2 *p) noexcept;  Constructor from an array of elements (stored per line). Mor",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:10605,Modifiability,Inherit,Inherited,10605,"* data () const noexcept;  ; constexpr ArrayLineType::iterator begin () noexcept;  ; constexpr ArrayLineType::const_iterator begin () const noexcept;  ; constexpr ArrayLineType::iterator end () noexcept;  ; constexpr ArrayLineType::const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  ; constexpr bool operator== (const Mat< L, C, real > &b) const noexcept;  ; constexpr bool operator!= (const Mat< L, C, real > &b) const noexcept;  ; bool isSymmetric () const;  ; bool isDiagonal () const noexcept;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::Mat< L, C, real >; ArrayLineType elems {};  ;  Static Public Attributes inherited from sofa::type::Mat< L, C, real >; static constexpr sofa::Size N = L * C;  ; static constexpr Size nbLines = L;  ; static constexpr Size nbCols = C;  ; static constexpr sofa::Size static_size = L;  ; static constexpr sofa::Size total_size = L;  ;  Static Public Member Functions inherited from sofa::type::Mat< L, C, real >; static constexpr sofa::Size size ();  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; static const Mat< L, L, real > & Identity () noexcept;  Returns the identity matrix. More...;  ; template<Size S> ; static bool canSelfTranspose (const Mat< S, S, real > &lhs, const Mat< S, S, real > &rhs) noexcept;  ; template<Size I, Size J> ; static bool canSelfTranspose (const Mat< I, J, real > &, const Mat< J, I, real > &) noexcept;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; static Mat< L, C, real > transformTranslation (const Vec< C-1, real > &t) noexcept;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; static Mat< L, C, real > transformScale (real s) noexcept;  ; template<sofa::Siz",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:10643,Modifiability,inherit,inherited,10643,"* data () const noexcept;  ; constexpr ArrayLineType::iterator begin () noexcept;  ; constexpr ArrayLineType::const_iterator begin () const noexcept;  ; constexpr ArrayLineType::iterator end () noexcept;  ; constexpr ArrayLineType::const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  ; constexpr bool operator== (const Mat< L, C, real > &b) const noexcept;  ; constexpr bool operator!= (const Mat< L, C, real > &b) const noexcept;  ; bool isSymmetric () const;  ; bool isDiagonal () const noexcept;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::Mat< L, C, real >; ArrayLineType elems {};  ;  Static Public Attributes inherited from sofa::type::Mat< L, C, real >; static constexpr sofa::Size N = L * C;  ; static constexpr Size nbLines = L;  ; static constexpr Size nbCols = C;  ; static constexpr sofa::Size static_size = L;  ; static constexpr sofa::Size total_size = L;  ;  Static Public Member Functions inherited from sofa::type::Mat< L, C, real >; static constexpr sofa::Size size ();  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; static const Mat< L, L, real > & Identity () noexcept;  Returns the identity matrix. More...;  ; template<Size S> ; static bool canSelfTranspose (const Mat< S, S, real > &lhs, const Mat< S, S, real > &rhs) noexcept;  ; template<Size I, Size J> ; static bool canSelfTranspose (const Mat< I, J, real > &, const Mat< J, I, real > &) noexcept;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; static Mat< L, C, real > transformTranslation (const Vec< C-1, real > &t) noexcept;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; static Mat< L, C, real > transformScale (real s) noexcept;  ; template<sofa::Siz",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:10742,Modifiability,inherit,inherited,10742,"* data () const noexcept;  ; constexpr ArrayLineType::iterator begin () noexcept;  ; constexpr ArrayLineType::const_iterator begin () const noexcept;  ; constexpr ArrayLineType::iterator end () noexcept;  ; constexpr ArrayLineType::const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  ; constexpr bool operator== (const Mat< L, C, real > &b) const noexcept;  ; constexpr bool operator!= (const Mat< L, C, real > &b) const noexcept;  ; bool isSymmetric () const;  ; bool isDiagonal () const noexcept;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::Mat< L, C, real >; ArrayLineType elems {};  ;  Static Public Attributes inherited from sofa::type::Mat< L, C, real >; static constexpr sofa::Size N = L * C;  ; static constexpr Size nbLines = L;  ; static constexpr Size nbCols = C;  ; static constexpr sofa::Size static_size = L;  ; static constexpr sofa::Size total_size = L;  ;  Static Public Member Functions inherited from sofa::type::Mat< L, C, real >; static constexpr sofa::Size size ();  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; static const Mat< L, L, real > & Identity () noexcept;  Returns the identity matrix. More...;  ; template<Size S> ; static bool canSelfTranspose (const Mat< S, S, real > &lhs, const Mat< S, S, real > &rhs) noexcept;  ; template<Size I, Size J> ; static bool canSelfTranspose (const Mat< I, J, real > &, const Mat< J, I, real > &) noexcept;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; static Mat< L, C, real > transformTranslation (const Vec< C-1, real > &t) noexcept;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; static Mat< L, C, real > transformScale (real s) noexcept;  ; template<sofa::Siz",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:11032,Modifiability,inherit,inherited,11032,"* data () const noexcept;  ; constexpr ArrayLineType::iterator begin () noexcept;  ; constexpr ArrayLineType::const_iterator begin () const noexcept;  ; constexpr ArrayLineType::iterator end () noexcept;  ; constexpr ArrayLineType::const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  ; constexpr bool operator== (const Mat< L, C, real > &b) const noexcept;  ; constexpr bool operator!= (const Mat< L, C, real > &b) const noexcept;  ; bool isSymmetric () const;  ; bool isDiagonal () const noexcept;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::Mat< L, C, real >; ArrayLineType elems {};  ;  Static Public Attributes inherited from sofa::type::Mat< L, C, real >; static constexpr sofa::Size N = L * C;  ; static constexpr Size nbLines = L;  ; static constexpr Size nbCols = C;  ; static constexpr sofa::Size static_size = L;  ; static constexpr sofa::Size total_size = L;  ;  Static Public Member Functions inherited from sofa::type::Mat< L, C, real >; static constexpr sofa::Size size ();  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; static const Mat< L, L, real > & Identity () noexcept;  Returns the identity matrix. More...;  ; template<Size S> ; static bool canSelfTranspose (const Mat< S, S, real > &lhs, const Mat< S, S, real > &rhs) noexcept;  ; template<Size I, Size J> ; static bool canSelfTranspose (const Mat< I, J, real > &, const Mat< J, I, real > &) noexcept;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; static Mat< L, C, real > transformTranslation (const Vec< C-1, real > &t) noexcept;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; static Mat< L, C, real > transformScale (real s) noexcept;  ; template<sofa::Siz",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:3445,Security,access,access,3445,"ine). More...;  ; template<typename real2 > ; constexpr void operator= (const Mat< L, C, real2 > &m) noexcept;  Assignment from another matrix. More...;  ; template<Size L2, Size C2> ; constexpr void operator= (const Mat< L2, C2, real > &m) noexcept;  Assignment from a matrix of different size. More...;  ; template<Size L2, Size C2> ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, real > &m) const noexcept;  ; template<Size C2> ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standar",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:3609,Security,access,access,3609,"ize L2, Size C2> ; constexpr void operator= (const Mat< L2, C2, real > &m) noexcept;  Assignment from a matrix of different size. More...;  ; template<Size L2, Size C2> ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, real > &m) const noexcept;  ; template<Size C2> ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:3715,Security,access,access,3715,"rom a matrix of different size. More...;  ; template<Size L2, Size C2> ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, real > &m) const noexcept;  ; template<Size C2> ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:3805,Security,access,access,3805,"ze L0, Size C0, Mat< L2, C2, real > &m) const noexcept;  ; template<Size C2> ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:3911,Security,access,access,3911,"ub (const Size L0, const Size C0, Vec< C2, real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:4003,Security,access,access,4003,"0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:4118,Security,access,access,4118,"0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:4707,Security,access,access,4707,"neNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexce",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:4857,Security,access,access,4857,"cess to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const L",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:5008,Security,access,access,5008,"operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename =",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:5158,Security,access,access,5158,"Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr real toReal () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:5321,Security,access,access,5321,"expr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr real toReal () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr operator real () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:5495,Security,access,access,5495,"red per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr real toReal () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr operator real () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, real > &m) noexcept;  ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:5670,Security,access,access,5670,"L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr real toReal () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr operator real () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr Mat< C, L, real > transposed () const noexcept;  Return the transpose of m. More...;  ; template<sofa::Size NbLine = L",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:5844,Security,access,access,5844,"e_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr real toReal () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr operator real () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr Mat< C, L, real > transposed () const noexcept;  Return the transpose of m. More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; constexpr void transpose () noexcept;  Transpose the square matrix. More...;  ; constexpr Mat< L,",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:3249,Usability,clear,clear,3249,"d ignoring outside entries) More...;  ; template<typename real2 > ; constexpr Mat (const real2 *p) noexcept;  Constructor from an array of elements (stored per line). More...;  ; constexpr Size getNbLines () const;  number of lines More...;  ; constexpr Size getNbCols () const;  number of columns More...;  ; constexpr void operator= (const real *p) noexcept;  Assignment from an array of elements (stored per line). More...;  ; template<typename real2 > ; constexpr void operator= (const Mat< L, C, real2 > &m) noexcept;  Assignment from another matrix. More...;  ; template<Size L2, Size C2> ; constexpr void operator= (const Mat< L2, C2, real > &m) noexcept;  Assignment from a matrix of different size. More...;  ; template<Size L2, Size C2> ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, real > &m) const noexcept;  ; template<Size C2> ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write acce",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym-members.html:230,Modifiability,inherit,inherited,230,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::MatSym< D, real > Member List . This is the complete list of members for sofa::type::MatSym< D, real >, including all inherited members. ArrayType typedefsofa::type::Vec< N, ValueType >; assign(const ValueType &value) noexceptsofa::type::Vec< N, ValueType >inline; back()sofa::type::Vec< N, ValueType >inline; back() constsofa::type::Vec< N, ValueType >inline; begin() noexceptsofa::type::Vec< N, ValueType >inline; begin() const noexceptsofa::type::Vec< N, ValueType >inline; clear()sofa::type::MatSym< D, real >inline; const_iterator typedefsofa::type::Vec< N, ValueType >; const_reference typedefsofa::type::Vec< N, ValueType >; Coord typedefsofa::type::MatSym< D, real >; cross(const Vec< 3, R > &b) const noexceptsofa::type::Vec< N, ValueType >inline; data() const noexceptsofa::type::Vec< N, ValueType >inline; difference_type typedefsofa::type::Vec< N, ValueType >; divscalar(const ValueType f) const noexceptsofa::type::Vec< N, ValueType >inline; divscalar(const real2 f) const noexceptsofa::type::Vec< N, ValueType >inline; elemssofa::type::Vec< N, ValueType >; end() noexceptsofa::type::Vec< N, ValueType >inline; end() const noexceptsofa::type::Vec< N, ValueType >inline; eqdivscalar(const ValueType f) noexceptsofa::type::Vec< N, ValueType >inline; eqdivscalar(const real2 f) noexceptsofa::type::Vec< N, ValueType >inline; eqmulscalar(const ValueType f) noexceptsofa::type::Vec< N, ValueType >inline; eqmulscalar(const real2 f) noexceptsofa::type::Vec< N, ValueType >inline; fill(real r)sofa::type::MatSym< D, real >inline; VecNoInit< D *(D+1)/2, SReal >::fill(ValueType r) noexceptsofa::type::Vec< N, ValueType >inline; front()sofa::type::Vec< N, ValueType >inline; front() constsofa::type::Vec< N, ValueType >inline; getsub(const Size i, Vec< N2, ValueType > &m) const noexceptsofa::type::Vec< N, ValueType >inline; getsub(const Size i, ValueType &m) const noexceptsofa::type",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym-members.html:589,Usability,clear,clear,589," ArrayType typedefsofa::type::Vec< N, ValueType >; assign(const ValueType &value) noexceptsofa::type::Vec< N, ValueType >inline; back()sofa::type::Vec< N, ValueType >inline; back() constsofa::type::Vec< N, ValueType >inline; begin() noexceptsofa::type::Vec< N, ValueType >inline; begin() const noexceptsofa::type::Vec< N, ValueType >inline; clear()sofa::type::MatSym< D, real >inline; const_iterator typedefsofa::type::Vec< N, ValueType >; const_reference typedefsofa::type::Vec< N, ValueType >; Coord typedefsofa::type::MatSym< D, real >; cross(const Vec< 3, R > &b) const noexceptsofa::type::Vec< N, ValueType >inline; data() const noexceptsofa::type::Vec< N, ValueType >inline; difference_type typedefsofa::type::Vec< N, ValueType >; divscalar(const ValueType f) const noexceptsofa::type::Vec< N, ValueType >inline; divscalar(const real2 f) const noexceptsofa::type::Vec< N, ValueType >inline; elemssofa::type::Vec< N, ValueType >; end() noexceptsofa::type::Vec< N, ValueType >inline; end() const noexceptsofa::type::Vec< N, ValueType >inline; eqdivscalar(const ValueType f) noexceptsofa::type::Vec< N, ValueType >inline; eqdivscalar(const real2 f) noexceptsofa::type::Vec< N, ValueType >inline; eqmulscalar(const ValueType f) noexceptsofa::type::Vec< N, ValueType >inline; eqmulscalar(const real2 f) noexceptsofa::type::Vec< N, ValueType >inline; fill(real r)sofa::type::MatSym< D, real >inline; VecNoInit< D *(D+1)/2, SReal >::fill(ValueType r) noexceptsofa::type::Vec< N, ValueType >inline; front()sofa::type::Vec< N, ValueType >inline; front() constsofa::type::Vec< N, ValueType >inline; getsub(const Size i, Vec< N2, ValueType > &m) const noexceptsofa::type::Vec< N, ValueType >inline; getsub(const Size i, ValueType &m) const noexceptsofa::type",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:343,Modifiability,Inherit,Inheritance,343,"﻿. SOFA API: sofa::type::MatSym< D, real > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; Static Public Member Functions |; Friends |; List of all members . sofa::type::MatSym< D, real > Class Template Reference . #include <MatSym.h>. Inheritance diagram for sofa::type::MatSym< D, real >:. [legend]; Detailed Description; template<sofa::Size D, class real = SReal>; class sofa::type::MatSym< D, real >; Dense symmetric matrix of size DxD storing only D*(D+1)/2 values Template Parameters. DSize of the matrix ; realType of scalar . Static Public Attributes; static constexpr auto NumberStoredValues = D * (D + 1) / 2;  ;  Static Public Attributes inherited from sofa::type::Vec< N, ValueType >; static constexpr sofa::Size static_size = N;  ; static constexpr Size total_size = N;  Compile-time constant specifying the number of scalars within this vector (equivalent to static_size and size() method) More...;  ; static constexpr Size spatial_dimensions = N;  Compile-time constant specifying the number of dimensions of space (equivalent to total_size here) More...;  . Public Member Functions; constexpr MatSym () noexcept;  ; constexpr MatSym (NoInit) noexcept;  ; template<sofa::Size TD = D, typename = std::enable_if_t<TD == 3>> ; constexpr MatSym (const real &v1, const real &v2, const real &v3, const real &v4, const real &v5, const real &v6);  Constructor from 6 elements. More...;  ; constexpr MatSym (const sofa::Size sizeM, const real &v);  Constructor from an element. More...;  ; template<typename real2 > ;  MatSym (const MatSym< D, real2 > &m);  Constructor from another matrix. More...;  ; template<typename real2 > ; void operator= (const MatSym< D, real2 > &m);  Assignment from another matrix. More...;  ; void clear ();  Sets each element to 0. More...;  ; void fill (real r);  Sets each element to r. More...;  ; real & operator() (const int i, const int j);  Write acce",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:756,Modifiability,inherit,inherited,756,"﻿. SOFA API: sofa::type::MatSym< D, real > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; Static Public Member Functions |; Friends |; List of all members . sofa::type::MatSym< D, real > Class Template Reference . #include <MatSym.h>. Inheritance diagram for sofa::type::MatSym< D, real >:. [legend]; Detailed Description; template<sofa::Size D, class real = SReal>; class sofa::type::MatSym< D, real >; Dense symmetric matrix of size DxD storing only D*(D+1)/2 values Template Parameters. DSize of the matrix ; realType of scalar . Static Public Attributes; static constexpr auto NumberStoredValues = D * (D + 1) / 2;  ;  Static Public Attributes inherited from sofa::type::Vec< N, ValueType >; static constexpr sofa::Size static_size = N;  ; static constexpr Size total_size = N;  Compile-time constant specifying the number of scalars within this vector (equivalent to static_size and size() method) More...;  ; static constexpr Size spatial_dimensions = N;  Compile-time constant specifying the number of dimensions of space (equivalent to total_size here) More...;  . Public Member Functions; constexpr MatSym () noexcept;  ; constexpr MatSym (NoInit) noexcept;  ; template<sofa::Size TD = D, typename = std::enable_if_t<TD == 3>> ; constexpr MatSym (const real &v1, const real &v2, const real &v3, const real &v4, const real &v5, const real &v6);  Constructor from 6 elements. More...;  ; constexpr MatSym (const sofa::Size sizeM, const real &v);  Constructor from an element. More...;  ; template<typename real2 > ;  MatSym (const MatSym< D, real2 > &m);  Constructor from another matrix. More...;  ; template<typename real2 > ; void operator= (const MatSym< D, real2 > &m);  Assignment from another matrix. More...;  ; void clear ();  Sets each element to 0. More...;  ; void fill (real r);  Sets each element to r. More...;  ; real & operator() (const int i, const int j);  Write acce",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:4191,Modifiability,inherit,inherited,4191,"st;  Matrix substractor operator with a non-symmetric matrix. More...;  ; Coord operator* (const Coord &v) const;  Multiplication operator Matrix * Vector. More...;  ; MatSym< D, real > operator* (real f) const;  Scalar multiplication operator. More...;  ; MatSym< D, real > operator/ (real f) const;  Scalar division operator. More...;  ; void operator*= (real r);  Scalar multiplication assignment operator. More...;  ; void operator/= (real r);  Scalar division assignment operator. More...;  ; void operator+= (const MatSym< D, real > &m);  Addition assignment operator. More...;  ; void operator-= (const MatSym< D, real > &m);  Subtraction assignment operator. More...;  ; bool invert (const MatSym< D, real > &m);  Invert matrix m. More...;  ; Tests operators; bool operator== (const MatSym< D, real > &b) const;  ; bool operator!= (const MatSym< D, real > &b) const;  ;  Public Member Functions inherited from sofa::type::VecNoInit< D *(D+1)/2, SReal >; constexpr VecNoInit () noexcept;  ; constexpr VecNoInit (const Vec< N, SReal > &v) noexcept;  ; constexpr VecNoInit (Vec< N, SReal > &&v) noexcept;  ;  Public Member Functions inherited from sofa::type::Vec< N, ValueType >; constexpr Vec ()=default;  Default constructor: sets all values to 0. More...;  ; constexpr Vec (NoInit);  Fast constructor: no initialization. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr Vec (const ValueType r1) noexcept;  Specific constructor for 1-element vectors. More...;  ; template<typename... ArgsT, typename = std::enable_if_t< (std::is_convertible_v<ArgsT, ValueType> && ...) >, typename = std::enable_if_t< (sizeof...(ArgsT) == N && sizeof...(ArgsT) > 1) >> ; constexpr Vec (ArgsT &&... r) noexcept;  ; template<typename R , typename T , Size NN = N, typename std::enable_if< NN==6, int >::type = 0> ;  Vec (const Vec< 3, R > &a, const Vec< 3, T > &b);  Specific constructor for 6-elements vectors, taking two 3-elements vectors. More...;  ; template<Si",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:4426,Modifiability,inherit,inherited,4426,"st;  Matrix substractor operator with a non-symmetric matrix. More...;  ; Coord operator* (const Coord &v) const;  Multiplication operator Matrix * Vector. More...;  ; MatSym< D, real > operator* (real f) const;  Scalar multiplication operator. More...;  ; MatSym< D, real > operator/ (real f) const;  Scalar division operator. More...;  ; void operator*= (real r);  Scalar multiplication assignment operator. More...;  ; void operator/= (real r);  Scalar division assignment operator. More...;  ; void operator+= (const MatSym< D, real > &m);  Addition assignment operator. More...;  ; void operator-= (const MatSym< D, real > &m);  Subtraction assignment operator. More...;  ; bool invert (const MatSym< D, real > &m);  Invert matrix m. More...;  ; Tests operators; bool operator== (const MatSym< D, real > &b) const;  ; bool operator!= (const MatSym< D, real > &b) const;  ;  Public Member Functions inherited from sofa::type::VecNoInit< D *(D+1)/2, SReal >; constexpr VecNoInit () noexcept;  ; constexpr VecNoInit (const Vec< N, SReal > &v) noexcept;  ; constexpr VecNoInit (Vec< N, SReal > &&v) noexcept;  ;  Public Member Functions inherited from sofa::type::Vec< N, ValueType >; constexpr Vec ()=default;  Default constructor: sets all values to 0. More...;  ; constexpr Vec (NoInit);  Fast constructor: no initialization. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr Vec (const ValueType r1) noexcept;  Specific constructor for 1-element vectors. More...;  ; template<typename... ArgsT, typename = std::enable_if_t< (std::is_convertible_v<ArgsT, ValueType> && ...) >, typename = std::enable_if_t< (sizeof...(ArgsT) == N && sizeof...(ArgsT) > 1) >> ; constexpr Vec (ArgsT &&... r) noexcept;  ; template<typename R , typename T , Size NN = N, typename std::enable_if< NN==6, int >::type = 0> ;  Vec (const Vec< 3, R > &a, const Vec< 3, T > &b);  Specific constructor for 6-elements vectors, taking two 3-elements vectors. More...;  ; template<Si",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:14450,Modifiability,inherit,inherited,14450,"<(NN==3), int >::type = 0> ; constexpr Vec cross (const Vec< 3, R > &b) const noexcept;  ; constexpr ValueType sum () const noexcept;  sum of all elements of the vector More...;  ; constexpr bool operator== (const Vec &b) const noexcept;  ; constexpr bool operator!= (const Vec &b) const noexcept;  ; constexpr reference operator[] (size_type i);  ; constexpr const_reference operator[] (size_type i) const;  ; constexpr const ValueType * data () const noexcept;  ; constexpr iterator begin () noexcept;  ; constexpr const_iterator begin () const noexcept;  ; constexpr iterator end () noexcept;  ; constexpr const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  . Static Public Member Functions; static void Mat2Sym (const Mat< D, D, real > &M, MatSym< D, real > &W);  convert matrix to sym More...;  ;  Static Public Member Functions inherited from sofa::type::Vec< N, ValueType >; static constexpr sofa::Size size ();  . Friends; MatSym< D, real > operator* (real r, const MatSym< D, real > &m);  Scalar matrix multiplication operator. More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::Vec< N, ValueType >; ArrayType elems {};  . Attribute details. ◆ NumberStoredValues. template<sofa::Size D, class real = SReal> . constexpr auto sofa::type::MatSym< D, real >::NumberStoredValues = D * (D + 1) / 2. staticconstexpr . Constructor details. ◆ MatSym() [1/5]. template<sofa::Size D, class real = SReal> . constexpr sofa::type::MatSym< D, real >::MatSym ; (; ). inlineconstexprnoexcept . ◆ MatSym() [2/5]. template<sofa::Size D, class real = SReal> . constexpr sofa::type::MatSym< D, real >::MatSym ; (; NoInit ; ). inlineexplicitconstexprnoexcept . ◆ MatSym() [3/5]. template<sofa::Size D, class real = SReal> . template<sofa::Size TD = D, typename = std::enable_if_t<TD == 3>> . constexpr sofa::type::MatSym< D, real >::Ma",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:14676,Modifiability,Inherit,Inherited,14676,"r bool operator!= (const Vec &b) const noexcept;  ; constexpr reference operator[] (size_type i);  ; constexpr const_reference operator[] (size_type i) const;  ; constexpr const ValueType * data () const noexcept;  ; constexpr iterator begin () noexcept;  ; constexpr const_iterator begin () const noexcept;  ; constexpr iterator end () noexcept;  ; constexpr const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  . Static Public Member Functions; static void Mat2Sym (const Mat< D, D, real > &M, MatSym< D, real > &W);  convert matrix to sym More...;  ;  Static Public Member Functions inherited from sofa::type::Vec< N, ValueType >; static constexpr sofa::Size size ();  . Friends; MatSym< D, real > operator* (real r, const MatSym< D, real > &m);  Scalar matrix multiplication operator. More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::Vec< N, ValueType >; ArrayType elems {};  . Attribute details. ◆ NumberStoredValues. template<sofa::Size D, class real = SReal> . constexpr auto sofa::type::MatSym< D, real >::NumberStoredValues = D * (D + 1) / 2. staticconstexpr . Constructor details. ◆ MatSym() [1/5]. template<sofa::Size D, class real = SReal> . constexpr sofa::type::MatSym< D, real >::MatSym ; (; ). inlineconstexprnoexcept . ◆ MatSym() [2/5]. template<sofa::Size D, class real = SReal> . constexpr sofa::type::MatSym< D, real >::MatSym ; (; NoInit ; ). inlineexplicitconstexprnoexcept . ◆ MatSym() [3/5]. template<sofa::Size D, class real = SReal> . template<sofa::Size TD = D, typename = std::enable_if_t<TD == 3>> . constexpr sofa::type::MatSym< D, real >::MatSym ; (; const real & ; v1, . const real & ; v2, . const real & ; v3, . const real & ; v4, . const real & ; v5, . const real & ; v6 . ). inlineconstexpr . Constructor from 6 elements. . ◆ MatSym() [4/5]. template<sofa::Size D, class real = SReal> .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:14714,Modifiability,inherit,inherited,14714,"r bool operator!= (const Vec &b) const noexcept;  ; constexpr reference operator[] (size_type i);  ; constexpr const_reference operator[] (size_type i) const;  ; constexpr const ValueType * data () const noexcept;  ; constexpr iterator begin () noexcept;  ; constexpr const_iterator begin () const noexcept;  ; constexpr iterator end () noexcept;  ; constexpr const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  . Static Public Member Functions; static void Mat2Sym (const Mat< D, D, real > &M, MatSym< D, real > &W);  convert matrix to sym More...;  ;  Static Public Member Functions inherited from sofa::type::Vec< N, ValueType >; static constexpr sofa::Size size ();  . Friends; MatSym< D, real > operator* (real r, const MatSym< D, real > &m);  Scalar matrix multiplication operator. More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::Vec< N, ValueType >; ArrayType elems {};  . Attribute details. ◆ NumberStoredValues. template<sofa::Size D, class real = SReal> . constexpr auto sofa::type::MatSym< D, real >::NumberStoredValues = D * (D + 1) / 2. staticconstexpr . Constructor details. ◆ MatSym() [1/5]. template<sofa::Size D, class real = SReal> . constexpr sofa::type::MatSym< D, real >::MatSym ; (; ). inlineconstexprnoexcept . ◆ MatSym() [2/5]. template<sofa::Size D, class real = SReal> . constexpr sofa::type::MatSym< D, real >::MatSym ; (; NoInit ; ). inlineexplicitconstexprnoexcept . ◆ MatSym() [3/5]. template<sofa::Size D, class real = SReal> . template<sofa::Size TD = D, typename = std::enable_if_t<TD == 3>> . constexpr sofa::type::MatSym< D, real >::MatSym ; (; const real & ; v1, . const real & ; v2, . const real & ; v3, . const real & ; v4, . const real & ; v5, . const real & ; v6 . ). inlineconstexpr . Constructor from 6 elements. . ◆ MatSym() [4/5]. template<sofa::Size D, class real = SReal> .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:1997,Security,access,access,1997,"static_size and size() method) More...;  ; static constexpr Size spatial_dimensions = N;  Compile-time constant specifying the number of dimensions of space (equivalent to total_size here) More...;  . Public Member Functions; constexpr MatSym () noexcept;  ; constexpr MatSym (NoInit) noexcept;  ; template<sofa::Size TD = D, typename = std::enable_if_t<TD == 3>> ; constexpr MatSym (const real &v1, const real &v2, const real &v3, const real &v4, const real &v5, const real &v6);  Constructor from 6 elements. More...;  ; constexpr MatSym (const sofa::Size sizeM, const real &v);  Constructor from an element. More...;  ; template<typename real2 > ;  MatSym (const MatSym< D, real2 > &m);  Constructor from another matrix. More...;  ; template<typename real2 > ; void operator= (const MatSym< D, real2 > &m);  Assignment from another matrix. More...;  ; void clear ();  Sets each element to 0. More...;  ; void fill (real r);  Sets each element to r. More...;  ; real & operator() (const int i, const int j);  Write access to element (i,j). More...;  ; const real & operator() (const int i, const int j) const;  Read-only access to element (i,j). More...;  ; template<sofa::Size TD = D, typename = std::enable_if_t<TD == 3 || TD == 2>> ; Vec< NumberStoredValues, real > getVoigt () const;  convert to Voigt notation (supported only for D == 2 and D == 3) More...;  ; constexpr void identity ();  Set matrix to identity. More...;  ; Mat< D, D, real > SymSymMultiply (const MatSym< D, real > &m) const;  Matrix multiplication operator: product of two symmetric matrices. More...;  ; Mat< D, D, real > operator* (const MatSym< D, real > &m) const;  ; Mat< D, D, real > SymMatMultiply (const Mat< D, D, real > &m) const;  ; Mat< D, D, real > operator* (const Mat< D, D, real > &m) const;  ; Mat< D, D, real > MatSymMultiply (const Mat< D, D, real > &m) const;  ; MatSym< D, real > operator+ (const MatSym< D, real > &m) const;  Matrix addition operator with a symmetric matrix. More...;  ; Mat< D, D, re",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:2103,Security,access,access,2103,"time constant specifying the number of dimensions of space (equivalent to total_size here) More...;  . Public Member Functions; constexpr MatSym () noexcept;  ; constexpr MatSym (NoInit) noexcept;  ; template<sofa::Size TD = D, typename = std::enable_if_t<TD == 3>> ; constexpr MatSym (const real &v1, const real &v2, const real &v3, const real &v4, const real &v5, const real &v6);  Constructor from 6 elements. More...;  ; constexpr MatSym (const sofa::Size sizeM, const real &v);  Constructor from an element. More...;  ; template<typename real2 > ;  MatSym (const MatSym< D, real2 > &m);  Constructor from another matrix. More...;  ; template<typename real2 > ; void operator= (const MatSym< D, real2 > &m);  Assignment from another matrix. More...;  ; void clear ();  Sets each element to 0. More...;  ; void fill (real r);  Sets each element to r. More...;  ; real & operator() (const int i, const int j);  Write access to element (i,j). More...;  ; const real & operator() (const int i, const int j) const;  Read-only access to element (i,j). More...;  ; template<sofa::Size TD = D, typename = std::enable_if_t<TD == 3 || TD == 2>> ; Vec< NumberStoredValues, real > getVoigt () const;  convert to Voigt notation (supported only for D == 2 and D == 3) More...;  ; constexpr void identity ();  Set matrix to identity. More...;  ; Mat< D, D, real > SymSymMultiply (const MatSym< D, real > &m) const;  Matrix multiplication operator: product of two symmetric matrices. More...;  ; Mat< D, D, real > operator* (const MatSym< D, real > &m) const;  ; Mat< D, D, real > SymMatMultiply (const Mat< D, D, real > &m) const;  ; Mat< D, D, real > operator* (const Mat< D, D, real > &m) const;  ; Mat< D, D, real > MatSymMultiply (const Mat< D, D, real > &m) const;  ; MatSym< D, real > operator+ (const MatSym< D, real > &m) const;  Matrix addition operator with a symmetric matrix. More...;  ; Mat< D, D, real > operator+ (const Mat< D, D, real > &m) const;  Matrix addition operator with a non-symmetric ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:6758,Security,access,access,6758,"te<Size N2, class real2 > ; constexpr void set (const Vec< N2, real2 > &v, ValueType defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; template<Size NN = N, typename std::enable_if<(NN >1), int >::type = 0> ; constexpr Vec (const Vec< N-1, ValueType > &v, ValueType r1) noexcept;  Constructor from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< ValueType, N > &p) noexcept;  ; template<Size N2, typename real2 > ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; template<typename real2 > ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; template<typename real2 > ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:6916,Security,access,access,6916,"en default value and ignored outside entries) More...;  ; template<Size NN = N, typename std::enable_if<(NN >1), int >::type = 0> ; constexpr Vec (const Vec< N-1, ValueType > &v, ValueType r1) noexcept;  Constructor from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< ValueType, N > &p) noexcept;  ; template<Size N2, typename real2 > ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; template<typename real2 > ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; template<typename real2 > ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::typ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:7075,Security,access,access,7075,"-1, ValueType > &v, ValueType r1) noexcept;  Constructor from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< ValueType, N > &p) noexcept;  ; template<Size N2, typename real2 > ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; template<typename real2 > ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; template<typename real2 > ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:7233,Security,access,access,7233,"nst sofa::type::fixed_array< ValueType, N > &p) noexcept;  ; template<Size N2, typename real2 > ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; template<typename real2 > ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; template<typename real2 > ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:7410,Security,access,access,7410,"a different size vector (null default value and ignoring outside entries) More...;  ; template<typename real2 > ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; template<typename real2 > ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typename real2 > ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; template<Size M, typename real2 > ; const",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:7586,Security,access,access,7586,"<typename real2 > ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typename real2 > ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; template<Size M, typename real2 > ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const ValueType &value) noexcept",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:7763,Security,access,access,7763,"e = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typename real2 > ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; template<Size M, typename real2 > ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const ValueType &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (ValueType r) noexcept;  Sets every element to r. More...;  ; constexpr ValueTy",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:7939,Security,access,access,7939," ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typename real2 > ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; template<Size M, typename real2 > ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const ValueType &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (ValueType r) noexcept;  Sets every element to r. More...;  ; constexpr ValueType & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const ValueType & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:8739,Security,Access,Access,8739,"ype & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typename real2 > ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; template<Size M, typename real2 > ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const ValueType &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (ValueType r) noexcept;  Sets every element to r. More...;  ; constexpr ValueType & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const ValueType & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const ValueType * ptr () const noexcept;  Cast into a const array of values. More...;  ; constexpr ValueType * ptr () noexcept;  Cast into an array of values. More...;  ; template<Size N2, std::enable_if_t<(N2< N), bool > = true> ; constexpr void getsub (const Size i, Vec< N2, ValueType > &m) const noexcept;  ; constexpr void getsub (const Size i, ValueType &m) const noexcept;  ; constexpr Vec< N, ValueType > mulscalar (const ValueType f) const noexcept;  ; template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> ; constexpr Vec< N, ValueType > mulscalar (const real2 f) const noexcept;  Multiplication by a scalar f. More...;  ; template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> ; constexpr Vec< N, ValueType > operator* (const real",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:8846,Security,access,access,8846,"N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typename real2 > ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; template<Size M, typename real2 > ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const ValueType &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (ValueType r) noexcept;  Sets every element to r. More...;  ; constexpr ValueType & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const ValueType & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const ValueType * ptr () const noexcept;  Cast into a const array of values. More...;  ; constexpr ValueType * ptr () noexcept;  Cast into an array of values. More...;  ; template<Size N2, std::enable_if_t<(N2< N), bool > = true> ; constexpr void getsub (const Size i, Vec< N2, ValueType > &m) const noexcept;  ; constexpr void getsub (const Size i, ValueType &m) const noexcept;  ; constexpr Vec< N, ValueType > mulscalar (const ValueType f) const noexcept;  ; template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> ; constexpr Vec< N, ValueType > mulscalar (const real2 f) const noexcept;  Multiplication by a scalar f. More...;  ; template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> ; constexpr Vec< N, ValueType > operator* (const real2 f) const noexcept;  ; constexpr void eqmulscalar (const ValueType f) noexcept;  In-place multipl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:17759,Security,access,access,17759,"pr void sofa::type::MatSym< D, real >::identity ; (; ). inlineconstexpr . Set matrix to identity. . ◆ invert(). template<sofa::Size D, class real = SReal> . bool sofa::type::MatSym< D, real >::invert ; (; const MatSym< D, real > & ; m). inline . Invert matrix m. . ◆ Mat2Sym(). template<sofa::Size D, class real = SReal> . static void sofa::type::MatSym< D, real >::Mat2Sym ; (; const Mat< D, D, real > & ; M, . MatSym< D, real > & ; W . ). inlinestatic . convert matrix to sym . ◆ MatSymMultiply(). template<sofa::Size D, class real = SReal> . Mat<D, D, real> sofa::type::MatSym< D, real >::MatSymMultiply ; (; const Mat< D, D, real > & ; m); const. inline . ◆ operator!=(). template<sofa::Size D, class real = SReal> . bool sofa::type::MatSym< D, real >::operator!= ; (; const MatSym< D, real > & ; b); const. inline . ◆ operator()() [1/2]. template<sofa::Size D, class real = SReal> . real& sofa::type::MatSym< D, real >::operator() ; (; const int ; i, . const int ; j . ). inline . Write access to element (i,j). . ◆ operator()() [2/2]. template<sofa::Size D, class real = SReal> . const real& sofa::type::MatSym< D, real >::operator() ; (; const int ; i, . const int ; j . ); const. inline . Read-only access to element (i,j). . ◆ operator*() [1/4]. template<sofa::Size D, class real = SReal> . Coord sofa::type::MatSym< D, real >::operator* ; (; const Coord & ; v); const. inline . Multiplication operator Matrix * Vector. . ◆ operator*() [2/4]. template<sofa::Size D, class real = SReal> . Mat<D,D,real> sofa::type::MatSym< D, real >::operator* ; (; const Mat< D, D, real > & ; m); const. inline . ◆ operator*() [3/4]. template<sofa::Size D, class real = SReal> . Mat<D, D, real> sofa::type::MatSym< D, real >::operator* ; (; const MatSym< D, real > & ; m); const. inline . ◆ operator*() [4/4]. template<sofa::Size D, class real = SReal> . MatSym<D, real> sofa::type::MatSym< D, real >::operator* ; (; real ; f); const. inline . Scalar multiplication operator. . ◆ operator*=(). template<sofa::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:17974,Security,access,access,17974,"tSym< D, real > & ; m). inline . Invert matrix m. . ◆ Mat2Sym(). template<sofa::Size D, class real = SReal> . static void sofa::type::MatSym< D, real >::Mat2Sym ; (; const Mat< D, D, real > & ; M, . MatSym< D, real > & ; W . ). inlinestatic . convert matrix to sym . ◆ MatSymMultiply(). template<sofa::Size D, class real = SReal> . Mat<D, D, real> sofa::type::MatSym< D, real >::MatSymMultiply ; (; const Mat< D, D, real > & ; m); const. inline . ◆ operator!=(). template<sofa::Size D, class real = SReal> . bool sofa::type::MatSym< D, real >::operator!= ; (; const MatSym< D, real > & ; b); const. inline . ◆ operator()() [1/2]. template<sofa::Size D, class real = SReal> . real& sofa::type::MatSym< D, real >::operator() ; (; const int ; i, . const int ; j . ). inline . Write access to element (i,j). . ◆ operator()() [2/2]. template<sofa::Size D, class real = SReal> . const real& sofa::type::MatSym< D, real >::operator() ; (; const int ; i, . const int ; j . ); const. inline . Read-only access to element (i,j). . ◆ operator*() [1/4]. template<sofa::Size D, class real = SReal> . Coord sofa::type::MatSym< D, real >::operator* ; (; const Coord & ; v); const. inline . Multiplication operator Matrix * Vector. . ◆ operator*() [2/4]. template<sofa::Size D, class real = SReal> . Mat<D,D,real> sofa::type::MatSym< D, real >::operator* ; (; const Mat< D, D, real > & ; m); const. inline . ◆ operator*() [3/4]. template<sofa::Size D, class real = SReal> . Mat<D, D, real> sofa::type::MatSym< D, real >::operator* ; (; const MatSym< D, real > & ; m); const. inline . ◆ operator*() [4/4]. template<sofa::Size D, class real = SReal> . MatSym<D, real> sofa::type::MatSym< D, real >::operator* ; (; real ; f); const. inline . Scalar multiplication operator. . ◆ operator*=(). template<sofa::Size D, class real = SReal> . void sofa::type::MatSym< D, real >::operator*= ; (; real ; r). inline . Scalar multiplication assignment operator. . ◆ operator+() [1/2]. template<sofa::Size D, class real = SReal> . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:4039,Testability,Test,Tests,4039,"st;  Matrix substractor operator with a non-symmetric matrix. More...;  ; Coord operator* (const Coord &v) const;  Multiplication operator Matrix * Vector. More...;  ; MatSym< D, real > operator* (real f) const;  Scalar multiplication operator. More...;  ; MatSym< D, real > operator/ (real f) const;  Scalar division operator. More...;  ; void operator*= (real r);  Scalar multiplication assignment operator. More...;  ; void operator/= (real r);  Scalar division assignment operator. More...;  ; void operator+= (const MatSym< D, real > &m);  Addition assignment operator. More...;  ; void operator-= (const MatSym< D, real > &m);  Subtraction assignment operator. More...;  ; bool invert (const MatSym< D, real > &m);  Invert matrix m. More...;  ; Tests operators; bool operator== (const MatSym< D, real > &b) const;  ; bool operator!= (const MatSym< D, real > &b) const;  ;  Public Member Functions inherited from sofa::type::VecNoInit< D *(D+1)/2, SReal >; constexpr VecNoInit () noexcept;  ; constexpr VecNoInit (const Vec< N, SReal > &v) noexcept;  ; constexpr VecNoInit (Vec< N, SReal > &&v) noexcept;  ;  Public Member Functions inherited from sofa::type::Vec< N, ValueType >; constexpr Vec ()=default;  Default constructor: sets all values to 0. More...;  ; constexpr Vec (NoInit);  Fast constructor: no initialization. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr Vec (const ValueType r1) noexcept;  Specific constructor for 1-element vectors. More...;  ; template<typename... ArgsT, typename = std::enable_if_t< (std::is_convertible_v<ArgsT, ValueType> && ...) >, typename = std::enable_if_t< (sizeof...(ArgsT) == N && sizeof...(ArgsT) > 1) >> ; constexpr Vec (ArgsT &&... r) noexcept;  ; template<typename R , typename T , Size NN = N, typename std::enable_if< NN==6, int >::type = 0> ;  Vec (const Vec< 3, R > &a, const Vec< 3, T > &b);  Specific constructor for 6-elements vectors, taking two 3-elements vectors. More...;  ; template<Si",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:1840,Usability,clear,clear,1840,"static constexpr Size total_size = N;  Compile-time constant specifying the number of scalars within this vector (equivalent to static_size and size() method) More...;  ; static constexpr Size spatial_dimensions = N;  Compile-time constant specifying the number of dimensions of space (equivalent to total_size here) More...;  . Public Member Functions; constexpr MatSym () noexcept;  ; constexpr MatSym (NoInit) noexcept;  ; template<sofa::Size TD = D, typename = std::enable_if_t<TD == 3>> ; constexpr MatSym (const real &v1, const real &v2, const real &v3, const real &v4, const real &v5, const real &v6);  Constructor from 6 elements. More...;  ; constexpr MatSym (const sofa::Size sizeM, const real &v);  Constructor from an element. More...;  ; template<typename real2 > ;  MatSym (const MatSym< D, real2 > &m);  Constructor from another matrix. More...;  ; template<typename real2 > ; void operator= (const MatSym< D, real2 > &m);  Assignment from another matrix. More...;  ; void clear ();  Sets each element to 0. More...;  ; void fill (real r);  Sets each element to r. More...;  ; real & operator() (const int i, const int j);  Write access to element (i,j). More...;  ; const real & operator() (const int i, const int j) const;  Read-only access to element (i,j). More...;  ; template<sofa::Size TD = D, typename = std::enable_if_t<TD == 3 || TD == 2>> ; Vec< NumberStoredValues, real > getVoigt () const;  convert to Voigt notation (supported only for D == 2 and D == 3) More...;  ; constexpr void identity ();  Set matrix to identity. More...;  ; Mat< D, D, real > SymSymMultiply (const MatSym< D, real > &m) const;  Matrix multiplication operator: product of two symmetric matrices. More...;  ; Mat< D, D, real > operator* (const MatSym< D, real > &m) const;  ; Mat< D, D, real > SymMatMultiply (const Mat< D, D, real > &m) const;  ; Mat< D, D, real > operator* (const Mat< D, D, real > &m) const;  ; Mat< D, D, real > MatSymMultiply (const Mat< D, D, real > &m) const;  ; MatSym< D, r",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:8547,Usability,clear,clear,8547,"pr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typename real2 > ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; template<Size M, typename real2 > ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const ValueType &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (ValueType r) noexcept;  Sets every element to r. More...;  ; constexpr ValueType & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const ValueType & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const ValueType * ptr () const noexcept;  Cast into a const array of values. More...;  ; constexpr ValueType * ptr () noexcept;  Cast into an array of values. More...;  ; template<Size N2, std::enable_if_t<(N2< N), bool > = true> ; constexpr void getsub (const Size i, Vec< N2, ValueType > &m) const noexcept;  ; constexpr void getsub (const Size i, ValueType &m) const noexcept;  ; constexpr Vec< N, ValueType > mulscalar (const ValueType f) const noexcept;  ; template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> ; constexpr Vec< N, ValueType > mulscalar (const real2 f) const noexcept;  M",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:16116,Usability,clear,clear,16116,"econstexprnoexcept . ◆ MatSym() [2/5]. template<sofa::Size D, class real = SReal> . constexpr sofa::type::MatSym< D, real >::MatSym ; (; NoInit ; ). inlineexplicitconstexprnoexcept . ◆ MatSym() [3/5]. template<sofa::Size D, class real = SReal> . template<sofa::Size TD = D, typename = std::enable_if_t<TD == 3>> . constexpr sofa::type::MatSym< D, real >::MatSym ; (; const real & ; v1, . const real & ; v2, . const real & ; v3, . const real & ; v4, . const real & ; v5, . const real & ; v6 . ). inlineconstexpr . Constructor from 6 elements. . ◆ MatSym() [4/5]. template<sofa::Size D, class real = SReal> . constexpr sofa::type::MatSym< D, real >::MatSym ; (; const sofa::Size ; sizeM, . const real & ; v . ). inlineconstexpr . Constructor from an element. . ◆ MatSym() [5/5]. template<sofa::Size D, class real = SReal> . template<typename real2 > . sofa::type::MatSym< D, real >::MatSym ; (; const MatSym< D, real2 > & ; m). inlineexplicit . Constructor from another matrix. . Function details. ◆ clear(). template<sofa::Size D, class real = SReal> . void sofa::type::MatSym< D, real >::clear ; (; ). inline . Sets each element to 0. . ◆ fill(). template<sofa::Size D, class real = SReal> . void sofa::type::MatSym< D, real >::fill ; (; real ; r). inline . Sets each element to r. . ◆ getVoigt(). template<sofa::Size D, class real = SReal> . template<sofa::Size TD = D, typename = std::enable_if_t<TD == 3 || TD == 2>> . Vec<NumberStoredValues, real> sofa::type::MatSym< D, real >::getVoigt ; (; ); const. inline . convert to Voigt notation (supported only for D == 2 and D == 3) . ◆ identity(). template<sofa::Size D, class real = SReal> . constexpr void sofa::type::MatSym< D, real >::identity ; (; ). inlineconstexpr . Set matrix to identity. . ◆ invert(). template<sofa::Size D, class real = SReal> . bool sofa::type::MatSym< D, real >::invert ; (; const MatSym< D, real > & ; m). inline . Invert matrix m. . ◆ Mat2Sym(). template<sofa::Size D, class real = SReal> . static void sofa::type::MatSy",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:16206,Usability,clear,clear,16206,"Real> . constexpr sofa::type::MatSym< D, real >::MatSym ; (; NoInit ; ). inlineexplicitconstexprnoexcept . ◆ MatSym() [3/5]. template<sofa::Size D, class real = SReal> . template<sofa::Size TD = D, typename = std::enable_if_t<TD == 3>> . constexpr sofa::type::MatSym< D, real >::MatSym ; (; const real & ; v1, . const real & ; v2, . const real & ; v3, . const real & ; v4, . const real & ; v5, . const real & ; v6 . ). inlineconstexpr . Constructor from 6 elements. . ◆ MatSym() [4/5]. template<sofa::Size D, class real = SReal> . constexpr sofa::type::MatSym< D, real >::MatSym ; (; const sofa::Size ; sizeM, . const real & ; v . ). inlineconstexpr . Constructor from an element. . ◆ MatSym() [5/5]. template<sofa::Size D, class real = SReal> . template<typename real2 > . sofa::type::MatSym< D, real >::MatSym ; (; const MatSym< D, real2 > & ; m). inlineexplicit . Constructor from another matrix. . Function details. ◆ clear(). template<sofa::Size D, class real = SReal> . void sofa::type::MatSym< D, real >::clear ; (; ). inline . Sets each element to 0. . ◆ fill(). template<sofa::Size D, class real = SReal> . void sofa::type::MatSym< D, real >::fill ; (; real ; r). inline . Sets each element to r. . ◆ getVoigt(). template<sofa::Size D, class real = SReal> . template<sofa::Size TD = D, typename = std::enable_if_t<TD == 3 || TD == 2>> . Vec<NumberStoredValues, real> sofa::type::MatSym< D, real >::getVoigt ; (; ); const. inline . convert to Voigt notation (supported only for D == 2 and D == 3) . ◆ identity(). template<sofa::Size D, class real = SReal> . constexpr void sofa::type::MatSym< D, real >::identity ; (; ). inlineconstexpr . Set matrix to identity. . ◆ invert(). template<sofa::Size D, class real = SReal> . bool sofa::type::MatSym< D, real >::invert ; (; const MatSym< D, real > & ; m). inline . Invert matrix m. . ◆ Mat2Sym(). template<sofa::Size D, class real = SReal> . static void sofa::type::MatSym< D, real >::Mat2Sym ; (; const Mat< D, D, real > & ; M, . MatSym< D, real",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_primitive_group-members.html:224,Modifiability,inherit,inherited,224,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::PrimitiveGroup Member List . This is the complete list of members for sofa::type::PrimitiveGroup, including all inherited members. groupNamesofa::type::PrimitiveGroup; materialIdsofa::type::PrimitiveGroup; materialNamesofa::type::PrimitiveGroup; nbpsofa::type::PrimitiveGroup; operator<(const PrimitiveGroup &p) constsofa::type::PrimitiveGroup; operator<<(std::ostream &out, const PrimitiveGroup &g)sofa::type::PrimitiveGroupfriend; operator>>(std::istream &in, PrimitiveGroup &g)sofa::type::PrimitiveGroupfriend; p0sofa::type::PrimitiveGroup; PrimitiveGroup()sofa::type::PrimitiveGroup; PrimitiveGroup(int p0, int nbp, std::string materialName, std::string groupName, int materialId)sofa::type::PrimitiveGroup. Generated on Mon Nov 11 2024 03:36:09 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_primitive_group-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_primitive_group-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat-members.html:220,Modifiability,inherit,inherited,220,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::Quat< Real > Member List . This is the complete list of members for sofa::type::Quat< Real >, including all inherited members. angularDisplacement(const Quat &a, const Quat &b) -> Vec3sofa::type::Quat< Real >static; axisToQuat(Vec3 a, Real phi) -> Quatsofa::type::Quat< Real >; buildRotationMatrix(Real m[4][4]) constsofa::type::Quat< Real >inline; clear()sofa::type::Quat< Real >inline; createFromRotationVector(const Vec3 &a) -> Quatsofa::type::Quat< Real >static; createFromRotationVector(Real a0, Real a1, Real a2) -> Quatsofa::type::Quat< Real >static; createQuaterFromEuler(const Vec3 &v, EulerOrder order=EulerOrder::ZYX) -> Quatsofa::type::Quat< Real >static; createQuaterFromFrame(const Vec3 &lox, const Vec3 &loy, const Vec3 &loz) -> Quatsofa::type::Quat< Real >static; EulerOrder enum namesofa::type::Quat< Real >; fromEuler(Real alpha, Real beta, Real gamma, EulerOrder order=EulerOrder::ZYX) -> Quatsofa::type::Quat< Real >static; fromFrame(const Vec3 &x, const Vec3 &y, const Vec3 &z)sofa::type::Quat< Real >; fromMatrix(const Mat3x3 &m)sofa::type::Quat< Real >; identity()sofa::type::Quat< Real >inlinestatic; inverse() const -> Quatsofa::type::Quat< Real >; inverseRotate(const Vec3 &v) const -> Vec3sofa::type::Quat< Real >inline; isNormalized()sofa::type::Quat< Real >; normalize()sofa::type::Quat< Real >; operator!=(const Quat &q) constsofa::type::Quat< Real >; operator*(const Quat &q1) const -> Quatsofa::type::Quat< Real >inline; operator*(const Real &r) const -> Quatsofa::type::Quat< Real >inline; operator*=(const Real &r)sofa::type::Quat< Real >inline; operator*=(const Quat &q1)sofa::type::Quat< Real >inline; operator+(const Quat &q1) const -> Quatsofa::type::Quat< Real >; operator+=(const Quat &q2)sofa::type::Quat< Real >; operator/(const Real &r) const -> Quatsofa::type::Quat< Real >inline; operator/=(const Real &r)sofa::type::Quat< Real >inline; operato",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_quat-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat-members.html:461,Usability,clear,clear,461," angularDisplacement(const Quat &a, const Quat &b) -> Vec3sofa::type::Quat< Real >static; axisToQuat(Vec3 a, Real phi) -> Quatsofa::type::Quat< Real >; buildRotationMatrix(Real m[4][4]) constsofa::type::Quat< Real >inline; clear()sofa::type::Quat< Real >inline; createFromRotationVector(const Vec3 &a) -> Quatsofa::type::Quat< Real >static; createFromRotationVector(Real a0, Real a1, Real a2) -> Quatsofa::type::Quat< Real >static; createQuaterFromEuler(const Vec3 &v, EulerOrder order=EulerOrder::ZYX) -> Quatsofa::type::Quat< Real >static; createQuaterFromFrame(const Vec3 &lox, const Vec3 &loy, const Vec3 &loz) -> Quatsofa::type::Quat< Real >static; EulerOrder enum namesofa::type::Quat< Real >; fromEuler(Real alpha, Real beta, Real gamma, EulerOrder order=EulerOrder::ZYX) -> Quatsofa::type::Quat< Real >static; fromFrame(const Vec3 &x, const Vec3 &y, const Vec3 &z)sofa::type::Quat< Real >; fromMatrix(const Mat3x3 &m)sofa::type::Quat< Real >; identity()sofa::type::Quat< Real >inlinestatic; inverse() const -> Quatsofa::type::Quat< Real >; inverseRotate(const Vec3 &v) const -> Vec3sofa::type::Quat< Real >inline; isNormalized()sofa::type::Quat< Real >; normalize()sofa::type::Quat< Real >; operator!=(const Quat &q) constsofa::type::Quat< Real >; operator*(const Quat &q1) const -> Quatsofa::type::Quat< Real >inline; operator*(const Real &r) const -> Quatsofa::type::Quat< Real >inline; operator*=(const Real &r)sofa::type::Quat< Real >inline; operator*=(const Quat &q1)sofa::type::Quat< Real >inline; operator+(const Quat &q1) const -> Quatsofa::type::Quat< Real >; operator+=(const Quat &q2)sofa::type::Quat< Real >; operator/(const Real &r) const -> Quatsofa::type::Quat< Real >inline; operator/=(const Real &r)sofa::type::Quat< Real >inline; operato",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_quat-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat.html:11605,Integrability,rout,routine,11605,":Quat< Real >::operator* ; (; const Quat< Real > & ; q1); const -> Quat. inlineconstexpr . ◆ operator*() [2/2]. template<class Real > . constexpr auto sofa::type::Quat< Real >::operator* ; (; const Real & ; r); const -> Quat. inlineconstexpr . ◆ operator*=() [1/2]. template<class Real > . constexpr void sofa::type::Quat< Real >::operator*= ; (; const Quat< Real > & ; q1). inlineconstexpr . ◆ operator*=() [2/2]. template<class Real > . void sofa::type::Quat< Real >::operator*= ; (; const Real & ; r). inline . ◆ operator+(). template<class Real > . auto sofa::type::Quat< Real >::operator+ ; (; const Quat< Real > & ; q1); const -> Quat. Given two quaternions, add them together to get a third quaternion. Adding quaternions to get a compound rotation is analogous to adding translations to get a compound translation.; Given two rotations, e1 and e2, expressed as quaternion rotations, figure out the equivalent single rotation and stuff it into dest. NOTE: This routine is written so that q1 or q2 may be the same as dest (or each other). . ◆ operator+=(). template<class Real > . void sofa::type::Quat< Real >::operator+= ; (; const Quat< Real > & ; q2). ◆ operator/(). template<class Real > . auto sofa::type::Quat< Real >::operator/ ; (; const Real & ; r); const -> Quat. inline . ◆ operator/=(). template<class Real > . void sofa::type::Quat< Real >::operator/= ; (; const Real & ; r). inline . ◆ operator==(). template<class Real > . bool sofa::type::Quat< Real >::operator== ; (; const Quat< Real > & ; q); const. ◆ operator[]() [1/2]. template<class Real > . constexpr Real& sofa::type::Quat< Real >::operator[] ; (; Size ; index). inlineconstexpr . ◆ operator[]() [2/2]. template<class Real > . constexpr const Real& sofa::type::Quat< Real >::operator[] ; (; Size ; index); const. inlineconstexpr . ◆ ptr() [1/2]. template<class Real > . Real* sofa::type::Quat< Real >::ptr ; (; ). inline . Cast into a standard C array of elements. . ◆ ptr() [2/2]. template<class Real > . const Real* ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_quat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat.html:320,Modifiability,Inherit,Inheritance,320,"﻿. SOFA API: sofa::type::Quat< Real > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::type::Quat< Real > Class Template Reference . #include <Quat.h>. Inheritance diagram for sofa::type::Quat< Real >:. [legend]. Static Public Attributes; static constexpr Size static_size = 4;  ; static constexpr Size total_size = 4;  Compile-time constant specifying the number of scalars within this vector (equivalent to the size() method) More...;  ; static constexpr Size spatial_dimensions = 3;  Compile-time constant specifying the number of dimensions of space (NOT equivalent to total_size for quaternions) More...;  . Public Member Functions; constexpr Quat ();  ; constexpr Quat (qNoInit);  Fast constructor: no initialization. More...;  ;  ~Quat ()=default;  ; constexpr Quat (Real x, Real y, Real z, Real w);  ; template<class Real2 > ; constexpr Quat (const Real2 q[]);  ; template<class Real2 > ; constexpr Quat (const Quat< Real2 > &q);  ;  Quat (const Vec3 &axis, Real angle);  ;  Quat (const Vec3 &vFrom, const Vec3 &vTo);  ; void set (Real x, Real y, Real z, Real w);  ; const Real * ptr () const;  Cast into a standard C array of elements. More...;  ; Real * ptr ();  Cast into a standard C array of elements. More...;  ; bool isNormalized ();  Returns true if norm of Quaternion is one, false otherwise. More...;  ; void normalize ();  Normalize a quaternion. More...;  ; void clear ();  ; void fromFrame (const Vec3 &x, const Vec3 &y, const Vec3 &z);  Convert the reference frame orientation into an orientation quaternion. More...;  ; void fromMatrix (const Mat3x3 &m);  Convert a rotation matrix into an orientation quaternion. More...;  ; void toMatrix (Mat3x3 &m) const;  Convert the quaternion into an orientation matrix. More...;  ; constexpr void toHomogeneousMatrix (Mat4x4 &m) const;  ; constexpr auto rotate (const V",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_quat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat.html:1551,Usability,clear,clear,1551,"texpr Size spatial_dimensions = 3;  Compile-time constant specifying the number of dimensions of space (NOT equivalent to total_size for quaternions) More...;  . Public Member Functions; constexpr Quat ();  ; constexpr Quat (qNoInit);  Fast constructor: no initialization. More...;  ;  ~Quat ()=default;  ; constexpr Quat (Real x, Real y, Real z, Real w);  ; template<class Real2 > ; constexpr Quat (const Real2 q[]);  ; template<class Real2 > ; constexpr Quat (const Quat< Real2 > &q);  ;  Quat (const Vec3 &axis, Real angle);  ;  Quat (const Vec3 &vFrom, const Vec3 &vTo);  ; void set (Real x, Real y, Real z, Real w);  ; const Real * ptr () const;  Cast into a standard C array of elements. More...;  ; Real * ptr ();  Cast into a standard C array of elements. More...;  ; bool isNormalized ();  Returns true if norm of Quaternion is one, false otherwise. More...;  ; void normalize ();  Normalize a quaternion. More...;  ; void clear ();  ; void fromFrame (const Vec3 &x, const Vec3 &y, const Vec3 &z);  Convert the reference frame orientation into an orientation quaternion. More...;  ; void fromMatrix (const Mat3x3 &m);  Convert a rotation matrix into an orientation quaternion. More...;  ; void toMatrix (Mat3x3 &m) const;  Convert the quaternion into an orientation matrix. More...;  ; constexpr void toHomogeneousMatrix (Mat4x4 &m) const;  ; constexpr auto rotate (const Vec3 &v) const -> Vec3;  Apply the rotation to a given vector. More...;  ; constexpr auto inverseRotate (const Vec3 &v) const -> Vec3;  Apply the inverse rotation to a given vector. More...;  ; auto operator+ (const Quat &q1) const -> Quat;  ; constexpr auto operator* (const Quat &q1) const -> Quat;  ; constexpr auto operator* (const Real &r) const -> Quat;  ; auto operator/ (const Real &r) const -> Quat;  ; void operator*= (const Real &r);  ; void operator/= (const Real &r);  ; constexpr auto quatVectMult (const Vec3 &vect) const -> Quat;  Given two Quats, multiply them together to get a third quaternion. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_quat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat.html:8012,Usability,clear,clear,8012,"Sets this quaternion to the rotation required to rotate direction vector vFrom to direction vector vTo. ; vFrom and vTo are assumed to be normalized. . Function details. ◆ angularDisplacement(). template<class Real > . auto sofa::type::Quat< Real >::angularDisplacement ; (; const Quat< Real > & ; a, . const Quat< Real > & ; b . ); -> Vec3. static . Return the eulerian vector resulting of the movement between 2 quaternions. . ◆ axisToQuat(). template<class Real > . auto sofa::type::Quat< Real >::axisToQuat ; (; Vec3 ; a, . Real ; phi . ); -> Quat. Given an axis and angle, compute quaternion. ; This function computes a quaternion based on an axis (defined by the given vector) and an angle about which to rotate. The angle is expressed in radians. . ◆ buildRotationMatrix(). template<class Real > . constexpr void sofa::type::Quat< Real >::buildRotationMatrix ; (; Real ; m[4][4]); const. inlineconstexpr . A useful function, builds a rotation matrix in Matrix based on given quaternion. . ◆ clear(). template<class Real > . void sofa::type::Quat< Real >::clear ; (; ). inline . ◆ createFromRotationVector() [1/2]. template<class Real > . auto sofa::type::Quat< Real >::createFromRotationVector ; (; const Vec3 & ; a); -> Quat. static . Create using rotation vector (axis*angle) given in parent coordinates. . ◆ createFromRotationVector() [2/2]. template<class Real > . auto sofa::type::Quat< Real >::createFromRotationVector ; (; Real ; a0, . Real ; a1, . Real ; a2 . ); -> Quat. static . Create using the entries of a rotation vector (axis*angle) given in parent coordinates. . ◆ createQuaterFromEuler(). template<class Real > . auto sofa::type::Quat< Real >::createQuaterFromEuler ; (; const Vec3 & ; v, . EulerOrder ; order = EulerOrder::ZYX . ); -> Quat. static . ◆ createQuaterFromFrame(). template<class Real > . auto sofa::type::Quat< Real >::createQuaterFromFrame ; (; const Vec3 & ; lox, . const Vec3 & ; loy, . const Vec3 & ; loz . ); -> Quat. static . ◆ fromEuler(). template<class R",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_quat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat.html:8076,Usability,clear,clear,8076,"ate direction vector vFrom to direction vector vTo. ; vFrom and vTo are assumed to be normalized. . Function details. ◆ angularDisplacement(). template<class Real > . auto sofa::type::Quat< Real >::angularDisplacement ; (; const Quat< Real > & ; a, . const Quat< Real > & ; b . ); -> Vec3. static . Return the eulerian vector resulting of the movement between 2 quaternions. . ◆ axisToQuat(). template<class Real > . auto sofa::type::Quat< Real >::axisToQuat ; (; Vec3 ; a, . Real ; phi . ); -> Quat. Given an axis and angle, compute quaternion. ; This function computes a quaternion based on an axis (defined by the given vector) and an angle about which to rotate. The angle is expressed in radians. . ◆ buildRotationMatrix(). template<class Real > . constexpr void sofa::type::Quat< Real >::buildRotationMatrix ; (; Real ; m[4][4]); const. inlineconstexpr . A useful function, builds a rotation matrix in Matrix based on given quaternion. . ◆ clear(). template<class Real > . void sofa::type::Quat< Real >::clear ; (; ). inline . ◆ createFromRotationVector() [1/2]. template<class Real > . auto sofa::type::Quat< Real >::createFromRotationVector ; (; const Vec3 & ; a); -> Quat. static . Create using rotation vector (axis*angle) given in parent coordinates. . ◆ createFromRotationVector() [2/2]. template<class Real > . auto sofa::type::Quat< Real >::createFromRotationVector ; (; Real ; a0, . Real ; a1, . Real ; a2 . ); -> Quat. static . Create using the entries of a rotation vector (axis*angle) given in parent coordinates. . ◆ createQuaterFromEuler(). template<class Real > . auto sofa::type::Quat< Real >::createQuaterFromEuler ; (; const Vec3 & ; v, . EulerOrder ; order = EulerOrder::ZYX . ); -> Quat. static . ◆ createQuaterFromFrame(). template<class Real > . auto sofa::type::Quat< Real >::createQuaterFromFrame ; (; const Vec3 & ; lox, . const Vec3 & ; loy, . const Vec3 & ; loz . ); -> Quat. static . ◆ fromEuler(). template<class Real > . auto sofa::type::Quat< Real >::fromEuler ; (",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_quat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init-members.html:232,Modifiability,inherit,inherited,232,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::QuatNoInit< Real > Member List . This is the complete list of members for sofa::type::QuatNoInit< Real >, including all inherited members. angularDisplacement(const Quat &a, const Quat &b) -> Vec3sofa::type::Quat< Real >static; axisToQuat(Vec3 a, Real phi) -> Quatsofa::type::Quat< Real >; buildRotationMatrix(Real m[4][4]) constsofa::type::Quat< Real >inline; clear()sofa::type::Quat< Real >inline; createFromRotationVector(const Vec3 &a) -> Quatsofa::type::Quat< Real >static; createFromRotationVector(Real a0, Real a1, Real a2) -> Quatsofa::type::Quat< Real >static; createQuaterFromEuler(const Vec3 &v, EulerOrder order=EulerOrder::ZYX) -> Quatsofa::type::Quat< Real >static; createQuaterFromFrame(const Vec3 &lox, const Vec3 &loy, const Vec3 &loz) -> Quatsofa::type::Quat< Real >static; EulerOrder enum namesofa::type::Quat< Real >; fromEuler(Real alpha, Real beta, Real gamma, EulerOrder order=EulerOrder::ZYX) -> Quatsofa::type::Quat< Real >static; fromFrame(const Vec3 &x, const Vec3 &y, const Vec3 &z)sofa::type::Quat< Real >; fromMatrix(const Mat3x3 &m)sofa::type::Quat< Real >; identity()sofa::type::Quat< Real >inlinestatic; inverse() const -> Quatsofa::type::Quat< Real >; inverseRotate(const Vec3 &v) const -> Vec3sofa::type::Quat< Real >inline; isNormalized()sofa::type::Quat< Real >; normalize()sofa::type::Quat< Real >; operator!=(const Quat &q) constsofa::type::Quat< Real >; operator*(const Quat &q1) const -> Quatsofa::type::Quat< Real >inline; operator*(const Real &r) const -> Quatsofa::type::Quat< Real >inline; operator*=(const Real &r)sofa::type::Quat< Real >inline; operator*=(const Quat &q1)sofa::type::Quat< Real >inline; operator+(const Quat &q1) const -> Quatsofa::type::Quat< Real >; operator+=(const Quat &q2)sofa::type::Quat< Real >; operator/(const Real &r) const -> Quatsofa::type::Quat< Real >inline; operator/=(const Real &r)sofa::type::Quat< Real >inl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init-members.html:473,Usability,clear,clear,473," angularDisplacement(const Quat &a, const Quat &b) -> Vec3sofa::type::Quat< Real >static; axisToQuat(Vec3 a, Real phi) -> Quatsofa::type::Quat< Real >; buildRotationMatrix(Real m[4][4]) constsofa::type::Quat< Real >inline; clear()sofa::type::Quat< Real >inline; createFromRotationVector(const Vec3 &a) -> Quatsofa::type::Quat< Real >static; createFromRotationVector(Real a0, Real a1, Real a2) -> Quatsofa::type::Quat< Real >static; createQuaterFromEuler(const Vec3 &v, EulerOrder order=EulerOrder::ZYX) -> Quatsofa::type::Quat< Real >static; createQuaterFromFrame(const Vec3 &lox, const Vec3 &loy, const Vec3 &loz) -> Quatsofa::type::Quat< Real >static; EulerOrder enum namesofa::type::Quat< Real >; fromEuler(Real alpha, Real beta, Real gamma, EulerOrder order=EulerOrder::ZYX) -> Quatsofa::type::Quat< Real >static; fromFrame(const Vec3 &x, const Vec3 &y, const Vec3 &z)sofa::type::Quat< Real >; fromMatrix(const Mat3x3 &m)sofa::type::Quat< Real >; identity()sofa::type::Quat< Real >inlinestatic; inverse() const -> Quatsofa::type::Quat< Real >; inverseRotate(const Vec3 &v) const -> Vec3sofa::type::Quat< Real >inline; isNormalized()sofa::type::Quat< Real >; normalize()sofa::type::Quat< Real >; operator!=(const Quat &q) constsofa::type::Quat< Real >; operator*(const Quat &q1) const -> Quatsofa::type::Quat< Real >inline; operator*(const Real &r) const -> Quatsofa::type::Quat< Real >inline; operator*=(const Real &r)sofa::type::Quat< Real >inline; operator*=(const Quat &q1)sofa::type::Quat< Real >inline; operator+(const Quat &q1) const -> Quatsofa::type::Quat< Real >; operator+=(const Quat &q2)sofa::type::Quat< Real >; operator/(const Real &r) const -> Quatsofa::type::Quat< Real >inline; operator/=(const Real &r)sofa::type::Quat< Real >inl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init.html:343,Modifiability,Inherit,Inheritance,343,"﻿. SOFA API: sofa::type::QuatNoInit< Real > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::type::QuatNoInit< Real > Class Template Reference . #include <Quat.h>; Same as Quat except the values are not initialized by default. ; More... Inheritance diagram for sofa::type::QuatNoInit< Real >:. [legend]; Detailed Description; template<class Real>; class sofa::type::QuatNoInit< Real >; Same as Quat except the values are not initialized by default. . Public Member Functions; constexpr QuatNoInit () noexcept;  ;  Public Member Functions inherited from sofa::type::Quat< Real >; constexpr Quat ();  ; constexpr Quat (qNoInit);  Fast constructor: no initialization. More...;  ;  ~Quat ()=default;  ; constexpr Quat (Real x, Real y, Real z, Real w);  ; template<class Real2 > ; constexpr Quat (const Real2 q[]);  ; template<class Real2 > ; constexpr Quat (const Quat< Real2 > &q);  ;  Quat (const Vec3 &axis, Real angle);  ;  Quat (const Vec3 &vFrom, const Vec3 &vTo);  ; void set (Real x, Real y, Real z, Real w);  ; const Real * ptr () const;  Cast into a standard C array of elements. More...;  ; Real * ptr ();  Cast into a standard C array of elements. More...;  ; bool isNormalized ();  Returns true if norm of Quaternion is one, false otherwise. More...;  ; void normalize ();  Normalize a quaternion. More...;  ; void clear ();  ; void fromFrame (const Vec3 &x, const Vec3 &y, const Vec3 &z);  Convert the reference frame orientation into an orientation quaternion. More...;  ; void fromMatrix (const Mat3x3 &m);  Convert a rotation matrix into an orientation quaternion. More...;  ; void toMatrix (Mat3x3 &m) const;  Convert the quaternion into an orientation matrix. More...;  ; constexpr void toHomogeneousMatrix (Mat4x4 &m) const;  ; constexpr auto rotate (const Vec3 &v) const -> Vec3;  Apply the rotation to a given vector. More...;  ; constexpr auto inverseRotate (const Vec3 &v) co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init.html:644,Modifiability,inherit,inherited,644,"﻿. SOFA API: sofa::type::QuatNoInit< Real > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::type::QuatNoInit< Real > Class Template Reference . #include <Quat.h>; Same as Quat except the values are not initialized by default. ; More... Inheritance diagram for sofa::type::QuatNoInit< Real >:. [legend]; Detailed Description; template<class Real>; class sofa::type::QuatNoInit< Real >; Same as Quat except the values are not initialized by default. . Public Member Functions; constexpr QuatNoInit () noexcept;  ;  Public Member Functions inherited from sofa::type::Quat< Real >; constexpr Quat ();  ; constexpr Quat (qNoInit);  Fast constructor: no initialization. More...;  ;  ~Quat ()=default;  ; constexpr Quat (Real x, Real y, Real z, Real w);  ; template<class Real2 > ; constexpr Quat (const Real2 q[]);  ; template<class Real2 > ; constexpr Quat (const Quat< Real2 > &q);  ;  Quat (const Vec3 &axis, Real angle);  ;  Quat (const Vec3 &vFrom, const Vec3 &vTo);  ; void set (Real x, Real y, Real z, Real w);  ; const Real * ptr () const;  Cast into a standard C array of elements. More...;  ; Real * ptr ();  Cast into a standard C array of elements. More...;  ; bool isNormalized ();  Returns true if norm of Quaternion is one, false otherwise. More...;  ; void normalize ();  Normalize a quaternion. More...;  ; void clear ();  ; void fromFrame (const Vec3 &x, const Vec3 &y, const Vec3 &z);  Convert the reference frame orientation into an orientation quaternion. More...;  ; void fromMatrix (const Mat3x3 &m);  Convert a rotation matrix into an orientation quaternion. More...;  ; void toMatrix (Mat3x3 &m) const;  Convert the quaternion into an orientation matrix. More...;  ; constexpr void toHomogeneousMatrix (Mat4x4 &m) const;  ; constexpr auto rotate (const Vec3 &v) const -> Vec3;  Apply the rotation to a given vector. More...;  ; constexpr auto inverseRotate (const Vec3 &v) co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init.html:3904,Modifiability,Inherit,Inherited,3904,"RotationMatrix (Real m[4][4]) const;  ; constexpr void writeOpenGlMatrix (double *m) const;  ; constexpr void writeOpenGlMatrix (float *m) const;  ; auto axisToQuat (Vec3 a, Real phi) -> Quat;  Given an axis and angle, compute quaternion. More...;  ; void quatToAxis (Vec3 &a, Real &phi) const;  Given a quaternion, compute an axis and angle. More...;  ; void setFromUnitVectors (const Vec3 &vFrom, const Vec3 &vTo);  Sets this quaternion to the rotation required to rotate direction vector vFrom to direction vector vTo. vFrom and vTo are assumed to be normalized. More...;  ; auto slerp (const Quat &q1, Real t) const -> Quat;  ; auto slerp2 (const Quat &q1, Real t) const -> Quat;  ; void operator+= (const Quat &q2);  ; constexpr void operator*= (const Quat &q1);  ; bool operator== (const Quat &q) const;  ; bool operator!= (const Quat &q) const;  . Additional Inherited Members;  Static Public Attributes inherited from sofa::type::Quat< Real >; static constexpr Size static_size = 4;  ; static constexpr Size total_size = 4;  Compile-time constant specifying the number of scalars within this vector (equivalent to the size() method) More...;  ; static constexpr Size spatial_dimensions = 3;  Compile-time constant specifying the number of dimensions of space (NOT equivalent to total_size for quaternions) More...;  ;  Static Public Member Functions inherited from sofa::type::Quat< Real >; static Quat identity ();  ; static auto createQuaterFromFrame (const Vec3 &lox, const Vec3 &loy, const Vec3 &loz) -> Quat;  ; static auto createFromRotationVector (const Vec3 &a) -> Quat;  Create using rotation vector (axis*angle) given in parent coordinates. More...;  ; static auto createQuaterFromEuler (const Vec3 &v, EulerOrder order=EulerOrder::ZYX) -> Quat;  ; static auto fromEuler (Real alpha, Real beta, Real gamma, EulerOrder order=EulerOrder::ZYX) -> Quat;  Create a quaternion from Euler angles. More...;  ; static auto createFromRotationVector (Real a0, Real a1, Real a2) -> Quat;  Creat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init.html:3949,Modifiability,inherit,inherited,3949,"RotationMatrix (Real m[4][4]) const;  ; constexpr void writeOpenGlMatrix (double *m) const;  ; constexpr void writeOpenGlMatrix (float *m) const;  ; auto axisToQuat (Vec3 a, Real phi) -> Quat;  Given an axis and angle, compute quaternion. More...;  ; void quatToAxis (Vec3 &a, Real &phi) const;  Given a quaternion, compute an axis and angle. More...;  ; void setFromUnitVectors (const Vec3 &vFrom, const Vec3 &vTo);  Sets this quaternion to the rotation required to rotate direction vector vFrom to direction vector vTo. vFrom and vTo are assumed to be normalized. More...;  ; auto slerp (const Quat &q1, Real t) const -> Quat;  ; auto slerp2 (const Quat &q1, Real t) const -> Quat;  ; void operator+= (const Quat &q2);  ; constexpr void operator*= (const Quat &q1);  ; bool operator== (const Quat &q) const;  ; bool operator!= (const Quat &q) const;  . Additional Inherited Members;  Static Public Attributes inherited from sofa::type::Quat< Real >; static constexpr Size static_size = 4;  ; static constexpr Size total_size = 4;  Compile-time constant specifying the number of scalars within this vector (equivalent to the size() method) More...;  ; static constexpr Size spatial_dimensions = 3;  Compile-time constant specifying the number of dimensions of space (NOT equivalent to total_size for quaternions) More...;  ;  Static Public Member Functions inherited from sofa::type::Quat< Real >; static Quat identity ();  ; static auto createQuaterFromFrame (const Vec3 &lox, const Vec3 &loy, const Vec3 &loz) -> Quat;  ; static auto createFromRotationVector (const Vec3 &a) -> Quat;  Create using rotation vector (axis*angle) given in parent coordinates. More...;  ; static auto createQuaterFromEuler (const Vec3 &v, EulerOrder order=EulerOrder::ZYX) -> Quat;  ; static auto fromEuler (Real alpha, Real beta, Real gamma, EulerOrder order=EulerOrder::ZYX) -> Quat;  Create a quaternion from Euler angles. More...;  ; static auto createFromRotationVector (Real a0, Real a1, Real a2) -> Quat;  Creat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init.html:4396,Modifiability,inherit,inherited,4396,"r vFrom to direction vector vTo. vFrom and vTo are assumed to be normalized. More...;  ; auto slerp (const Quat &q1, Real t) const -> Quat;  ; auto slerp2 (const Quat &q1, Real t) const -> Quat;  ; void operator+= (const Quat &q2);  ; constexpr void operator*= (const Quat &q1);  ; bool operator== (const Quat &q) const;  ; bool operator!= (const Quat &q) const;  . Additional Inherited Members;  Static Public Attributes inherited from sofa::type::Quat< Real >; static constexpr Size static_size = 4;  ; static constexpr Size total_size = 4;  Compile-time constant specifying the number of scalars within this vector (equivalent to the size() method) More...;  ; static constexpr Size spatial_dimensions = 3;  Compile-time constant specifying the number of dimensions of space (NOT equivalent to total_size for quaternions) More...;  ;  Static Public Member Functions inherited from sofa::type::Quat< Real >; static Quat identity ();  ; static auto createQuaterFromFrame (const Vec3 &lox, const Vec3 &loy, const Vec3 &loz) -> Quat;  ; static auto createFromRotationVector (const Vec3 &a) -> Quat;  Create using rotation vector (axis*angle) given in parent coordinates. More...;  ; static auto createQuaterFromEuler (const Vec3 &v, EulerOrder order=EulerOrder::ZYX) -> Quat;  ; static auto fromEuler (Real alpha, Real beta, Real gamma, EulerOrder order=EulerOrder::ZYX) -> Quat;  Create a quaternion from Euler angles. More...;  ; static auto createFromRotationVector (Real a0, Real a1, Real a2) -> Quat;  Create using the entries of a rotation vector (axis*angle) given in parent coordinates. More...;  ; static auto set (const Vec3 &a);  Create using rotation vector (axis*angle) given in parent coordinates. More...;  ; static auto set (Real a0, Real a1, Real a2);  Create using using the entries of a rotation vector (axis*angle) given in parent coordinates. More...;  ; static auto quatDiff (Quat a, const Quat &b) -> Quat;  Return the quaternion resulting of the movement between 2 quaternions. ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init.html:1430,Usability,clear,clear,1430,"s Quat except the values are not initialized by default. . Public Member Functions; constexpr QuatNoInit () noexcept;  ;  Public Member Functions inherited from sofa::type::Quat< Real >; constexpr Quat ();  ; constexpr Quat (qNoInit);  Fast constructor: no initialization. More...;  ;  ~Quat ()=default;  ; constexpr Quat (Real x, Real y, Real z, Real w);  ; template<class Real2 > ; constexpr Quat (const Real2 q[]);  ; template<class Real2 > ; constexpr Quat (const Quat< Real2 > &q);  ;  Quat (const Vec3 &axis, Real angle);  ;  Quat (const Vec3 &vFrom, const Vec3 &vTo);  ; void set (Real x, Real y, Real z, Real w);  ; const Real * ptr () const;  Cast into a standard C array of elements. More...;  ; Real * ptr ();  Cast into a standard C array of elements. More...;  ; bool isNormalized ();  Returns true if norm of Quaternion is one, false otherwise. More...;  ; void normalize ();  Normalize a quaternion. More...;  ; void clear ();  ; void fromFrame (const Vec3 &x, const Vec3 &y, const Vec3 &z);  Convert the reference frame orientation into an orientation quaternion. More...;  ; void fromMatrix (const Mat3x3 &m);  Convert a rotation matrix into an orientation quaternion. More...;  ; void toMatrix (Mat3x3 &m) const;  Convert the quaternion into an orientation matrix. More...;  ; constexpr void toHomogeneousMatrix (Mat4x4 &m) const;  ; constexpr auto rotate (const Vec3 &v) const -> Vec3;  Apply the rotation to a given vector. More...;  ; constexpr auto inverseRotate (const Vec3 &v) const -> Vec3;  Apply the inverse rotation to a given vector. More...;  ; auto operator+ (const Quat &q1) const -> Quat;  ; constexpr auto operator* (const Quat &q1) const -> Quat;  ; constexpr auto operator* (const Real &r) const -> Quat;  ; auto operator/ (const Real &r) const -> Quat;  ; void operator*= (const Real &r);  ; void operator/= (const Real &r);  ; constexpr auto quatVectMult (const Vec3 &vect) const -> Quat;  Given two Quats, multiply them together to get a third quaternion. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_ray-members.html:202,Modifiability,inherit,inherited,202,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::Ray Member List . This is the complete list of members for sofa::type::Ray, including all inherited members. direction() constsofa::type::Rayinline; getPoint(double z) constsofa::type::Rayinline; origin() constsofa::type::Rayinline; Ray(const Vec3 &origin=Vec3(0, 0, 0), const Vec3 &direction=Vec3(0, 0, 0))sofa::type::Rayinline; setDirection(const Vec3 &direction)sofa::type::Rayinline; setOrigin(const Vec3 &origin)sofa::type::Rayinline. Generated on Mon Nov 11 2024 03:36:09 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_ray-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_ray-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color-members.html:1895,Energy Efficiency,green,green,1895,"ay()sofa::type::RGBAColorstatic; data() const noexceptsofa::type::RGBAColorinline; end() noexceptsofa::type::RGBAColorinline; end() const noexceptsofa::type::RGBAColorinline; fromFloat(float r, float g, float b, float a)sofa::type::RGBAColorstatic; fromHSVA(float h, float s, float v, float a)sofa::type::RGBAColorstatic; fromStdArray(const std::array< float, 4 > &color)sofa::type::RGBAColorstatic; fromStdArray(const std::array< double, 4 > &color)sofa::type::RGBAColorstatic; fromString(const std::string &str)sofa::type::RGBAColorstatic; fromVec4(const type::fixed_array< float, 4 > &color)=deletesofa::type::RGBAColorstatic; fromVec4(const type::fixed_array< double, 4 > &color)=deletesofa::type::RGBAColorstatic; fromVec4(const Vec4f &color)=deletesofa::type::RGBAColorstatic; fromVec4(const Vec4d &color)=deletesofa::type::RGBAColorstatic; g()sofa::type::RGBAColorinline; g() constsofa::type::RGBAColorinline; g(const float g)sofa::type::RGBAColorinline; gray()sofa::type::RGBAColorstatic; green()sofa::type::RGBAColorstatic; lighten(const RGBAColor &in, const SReal factor)sofa::type::RGBAColorstatic; lightgray()sofa::type::RGBAColorstatic; magenta()sofa::type::RGBAColorstatic; NumberOfComponentssofa::type::RGBAColorstatic; operator!=(const RGBAColor &b) constsofa::type::RGBAColorinline; operator*(float f) constsofa::type::RGBAColor; operator<(const RGBAColor &b) constsofa::type::RGBAColorinline; operator<<(std::ostream &i, const RGBAColor &t)sofa::type::RGBAColorfriend; operator==(const RGBAColor &b) constsofa::type::RGBAColorinline; operator>>(std::istream &i, RGBAColor &t)sofa::type::RGBAColorfriend; operator[](std::size_t i)sofa::type::RGBAColorinline; operator[](std::size_t i) constsofa::type::RGBAColorinline; r()sofa::type::RGBAColorinline; r() constsofa::type::RGBAColorinline; r(const float r)sofa::type::RGBAColorinline; read(const std::string &str, RGBAColor &color)sofa::type::RGBAColorstatic; red()sofa::type::RGBAColorstatic; RGBAColor()sofa::type::RGBAColorinline; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color-members.html:214,Modifiability,inherit,inherited,214,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::RGBAColor Member List . This is the complete list of members for sofa::type::RGBAColor, including all inherited members. a()sofa::type::RGBAColorinline; a() constsofa::type::RGBAColorinline; a(const float a)sofa::type::RGBAColorinline; array() const noexceptsofa::type::RGBAColorinline; array() noexceptsofa::type::RGBAColorinline; b()sofa::type::RGBAColorinline; b() constsofa::type::RGBAColorinline; b(const float b)sofa::type::RGBAColorinline; begin() noexceptsofa::type::RGBAColorinline; begin() const noexceptsofa::type::RGBAColorinline; black()sofa::type::RGBAColorstatic; blue()sofa::type::RGBAColorstatic; clamp(const RGBAColor &color, float min, float max)sofa::type::RGBAColorinlinestatic; ComponentArray typedefsofa::type::RGBAColor; cyan()sofa::type::RGBAColorstatic; darkgray()sofa::type::RGBAColorstatic; data() const noexceptsofa::type::RGBAColorinline; end() noexceptsofa::type::RGBAColorinline; end() const noexceptsofa::type::RGBAColorinline; fromFloat(float r, float g, float b, float a)sofa::type::RGBAColorstatic; fromHSVA(float h, float s, float v, float a)sofa::type::RGBAColorstatic; fromStdArray(const std::array< float, 4 > &color)sofa::type::RGBAColorstatic; fromStdArray(const std::array< double, 4 > &color)sofa::type::RGBAColorstatic; fromString(const std::string &str)sofa::type::RGBAColorstatic; fromVec4(const type::fixed_array< float, 4 > &color)=deletesofa::type::RGBAColorstatic; fromVec4(const type::fixed_array< double, 4 > &color)=deletesofa::type::RGBAColorstatic; fromVec4(const Vec4f &color)=deletesofa::type::RGBAColorstatic; fromVec4(const Vec4d &color)=deletesofa::type::RGBAColorstatic; g()sofa::type::RGBAColorinline; g() constsofa::type::RGBAColorinline; g(const float g)sofa::type::RGBAColorinline; gray()sofa::type::RGBAColorstatic; green()sofa::type::RGBAColorstatic; lighten(const RGBAColor &in, const SReal factor)sofa::type::RGBAColors",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html:2988,Energy Efficiency,green,green,2988,"texpr ComponentArray & array () noexcept;  direct access to array More...;  ; constexpr ComponentArray::iterator begin () noexcept;  ; constexpr ComponentArray::const_iterator begin () const noexcept;  ; constexpr ComponentArray::iterator end () noexcept;  ; constexpr ComponentArray::const_iterator end () const noexcept;  . Static Public Member Functions; static RGBAColor fromVec4 (const type::fixed_array< float, 4 > &color)=delete;  ; static RGBAColor fromVec4 (const type::fixed_array< double, 4 > &color)=delete;  ; static RGBAColor fromVec4 (const Vec4f &color)=delete;  ; static RGBAColor fromVec4 (const Vec4d &color)=delete;  ; static RGBAColor fromString (const std::string &str);  ; static RGBAColor fromFloat (float r, float g, float b, float a);  ; static RGBAColor fromStdArray (const std::array< float, 4 > &color);  ; static RGBAColor fromStdArray (const std::array< double, 4 > &color);  ; static RGBAColor fromHSVA (float h, float s, float v, float a);  ; static bool read (const std::string &str, RGBAColor &color);  ; constexpr static const RGBAColor & white ();  ; constexpr static const RGBAColor & black ();  ; constexpr static const RGBAColor & red ();  ; constexpr static const RGBAColor & green ();  ; constexpr static const RGBAColor & blue ();  ; constexpr static const RGBAColor & cyan ();  ; constexpr static const RGBAColor & magenta ();  ; constexpr static const RGBAColor & yellow ();  ; constexpr static const RGBAColor & gray ();  ; constexpr static const RGBAColor & darkgray ();  ; constexpr static const RGBAColor & lightgray ();  ; static RGBAColor lighten (const RGBAColor &in, const SReal factor);  enlight a color by a given factor. More...;  ; static constexpr RGBAColor clamp (const RGBAColor &color, float min, float max);  ; static constexpr sofa::Size size ();  . Friends; SOFA_TYPE_API std::ostream & operator<< (std::ostream &i, const RGBAColor &t);  Write to an output stream. More...;  ; SOFA_TYPE_API std::istream & operator>> (std::istream &i, RG",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html:8063,Energy Efficiency,green,green,8063,"float, 4 > & ; color). static . ◆ fromString(). RGBAColor sofa::type::RGBAColor::fromString ; (; const std::string & ; str). static . ◆ fromVec4() [1/4]. static RGBAColor sofa::type::RGBAColor::fromVec4 ; (; const type::fixed_array< double, 4 > & ; color). staticdelete . ◆ fromVec4() [2/4]. static RGBAColor sofa::type::RGBAColor::fromVec4 ; (; const type::fixed_array< float, 4 > & ; color). staticdelete . ◆ fromVec4() [3/4]. static RGBAColor sofa::type::RGBAColor::fromVec4 ; (; const Vec4d & ; color). staticdelete . ◆ fromVec4() [4/4]. static RGBAColor sofa::type::RGBAColor::fromVec4 ; (; const Vec4f & ; color). staticdelete . ◆ g() [1/3]. constexpr float& sofa::type::RGBAColor::g ; (; ). inlineconstexpr . ◆ g() [2/3]. constexpr const float& sofa::type::RGBAColor::g ; (; ); const. inlineconstexpr . ◆ g() [3/3]. constexpr void sofa::type::RGBAColor::g ; (; const float ; g). inlineconstexpr . ◆ gray(). constexpr const RGBAColor & sofa::type::RGBAColor::gray ; (; ). staticconstexpr . ◆ green(). constexpr const RGBAColor & sofa::type::RGBAColor::green ; (; ). staticconstexpr . ◆ lighten(). RGBAColor sofa::type::RGBAColor::lighten ; (; const RGBAColor & ; in, . const SReal ; factor . ). static . enlight a color by a given factor. . ◆ lightgray(). constexpr const RGBAColor & sofa::type::RGBAColor::lightgray ; (; ). staticconstexpr . ◆ magenta(). constexpr const RGBAColor & sofa::type::RGBAColor::magenta ; (; ). staticconstexpr . ◆ operator!=(). bool sofa::type::RGBAColor::operator!= ; (; const RGBAColor & ; b); const. inline . ◆ operator*(). RGBAColor sofa::type::RGBAColor::operator* ; (; float ; f); const. ◆ operator<(). bool sofa::type::RGBAColor::operator< ; (; const RGBAColor & ; b); const. inline . ◆ operator==(). bool sofa::type::RGBAColor::operator== ; (; const RGBAColor & ; b); const. inline . ◆ operator[]() [1/2]. constexpr float& sofa::type::RGBAColor::operator[] ; (; std::size_t ; i). inlineconstexpr . ◆ operator[]() [2/2]. constexpr const float& sofa::type::RGB",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html:8123,Energy Efficiency,green,green,8123,"String(). RGBAColor sofa::type::RGBAColor::fromString ; (; const std::string & ; str). static . ◆ fromVec4() [1/4]. static RGBAColor sofa::type::RGBAColor::fromVec4 ; (; const type::fixed_array< double, 4 > & ; color). staticdelete . ◆ fromVec4() [2/4]. static RGBAColor sofa::type::RGBAColor::fromVec4 ; (; const type::fixed_array< float, 4 > & ; color). staticdelete . ◆ fromVec4() [3/4]. static RGBAColor sofa::type::RGBAColor::fromVec4 ; (; const Vec4d & ; color). staticdelete . ◆ fromVec4() [4/4]. static RGBAColor sofa::type::RGBAColor::fromVec4 ; (; const Vec4f & ; color). staticdelete . ◆ g() [1/3]. constexpr float& sofa::type::RGBAColor::g ; (; ). inlineconstexpr . ◆ g() [2/3]. constexpr const float& sofa::type::RGBAColor::g ; (; ); const. inlineconstexpr . ◆ g() [3/3]. constexpr void sofa::type::RGBAColor::g ; (; const float ; g). inlineconstexpr . ◆ gray(). constexpr const RGBAColor & sofa::type::RGBAColor::gray ; (; ). staticconstexpr . ◆ green(). constexpr const RGBAColor & sofa::type::RGBAColor::green ; (; ). staticconstexpr . ◆ lighten(). RGBAColor sofa::type::RGBAColor::lighten ; (; const RGBAColor & ; in, . const SReal ; factor . ). static . enlight a color by a given factor. . ◆ lightgray(). constexpr const RGBAColor & sofa::type::RGBAColor::lightgray ; (; ). staticconstexpr . ◆ magenta(). constexpr const RGBAColor & sofa::type::RGBAColor::magenta ; (; ). staticconstexpr . ◆ operator!=(). bool sofa::type::RGBAColor::operator!= ; (; const RGBAColor & ; b); const. inline . ◆ operator*(). RGBAColor sofa::type::RGBAColor::operator* ; (; float ; f); const. ◆ operator<(). bool sofa::type::RGBAColor::operator< ; (; const RGBAColor & ; b); const. inline . ◆ operator==(). bool sofa::type::RGBAColor::operator== ; (; const RGBAColor & ; b); const. inline . ◆ operator[]() [1/2]. constexpr float& sofa::type::RGBAColor::operator[] ; (; std::size_t ; i). inlineconstexpr . ◆ operator[]() [2/2]. constexpr const float& sofa::type::RGBAColor::operator[] ; (; std::size_t ; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html:1739,Security,access,access,1739,"ic Member Functions |; Static Public Member Functions |; Friends |; List of all members . sofa::type::RGBAColor Class Reference . #include <RGBAColor.h>; encode a 4 RGBA component color ; More...; Detailed Description; encode a 4 RGBA component color . Static Public Attributes; static constexpr sofa::Size NumberOfComponents = 4;  ; static constexpr sofa::Size static_size = NumberOfComponents;  . Public Member Functions; constexpr RGBAColor ();  ; constexpr RGBAColor (const std::array< float, NumberOfComponents > &c);  ; constexpr RGBAColor (float r, float g, float b, float a);  ;  RGBAColor (const type::fixed_array< float, NumberOfComponents > &c)=delete;  ;  RGBAColor (const type::Vec4f &c)=delete;  ; constexpr float & r ();  ; constexpr float & g ();  ; constexpr float & b ();  ; constexpr float & a ();  ; constexpr const float & r () const;  ; constexpr const float & g () const;  ; constexpr const float & b () const;  ; constexpr const float & a () const;  ; constexpr void r (const float r);  ; constexpr void g (const float g);  ; constexpr void b (const float b);  ; constexpr void a (const float a);  ; constexpr float & operator[] (std::size_t i);  ; constexpr const float & operator[] (std::size_t i) const;  ; void set (float r, float g, float b, float a);  ; bool operator== (const RGBAColor &b) const;  ; bool operator!= (const RGBAColor &b) const;  ; bool operator< (const RGBAColor &b) const;  ; RGBAColor operator* (float f) const;  ; constexpr const float * data () const noexcept;  ; constexpr const ComponentArray & array () const noexcept;  direct access to array More...;  ; constexpr ComponentArray & array () noexcept;  direct access to array More...;  ; constexpr ComponentArray::iterator begin () noexcept;  ; constexpr ComponentArray::const_iterator begin () const noexcept;  ; constexpr ComponentArray::iterator end () noexcept;  ; constexpr ComponentArray::const_iterator end () const noexcept;  . Static Public Member Functions; static RGBAColor fromVec4 (co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html:1821,Security,access,access,1821,"nents > &c)=delete;  ;  RGBAColor (const type::Vec4f &c)=delete;  ; constexpr float & r ();  ; constexpr float & g ();  ; constexpr float & b ();  ; constexpr float & a ();  ; constexpr const float & r () const;  ; constexpr const float & g () const;  ; constexpr const float & b () const;  ; constexpr const float & a () const;  ; constexpr void r (const float r);  ; constexpr void g (const float g);  ; constexpr void b (const float b);  ; constexpr void a (const float a);  ; constexpr float & operator[] (std::size_t i);  ; constexpr const float & operator[] (std::size_t i) const;  ; void set (float r, float g, float b, float a);  ; bool operator== (const RGBAColor &b) const;  ; bool operator!= (const RGBAColor &b) const;  ; bool operator< (const RGBAColor &b) const;  ; RGBAColor operator* (float f) const;  ; constexpr const float * data () const noexcept;  ; constexpr const ComponentArray & array () const noexcept;  direct access to array More...;  ; constexpr ComponentArray & array () noexcept;  direct access to array More...;  ; constexpr ComponentArray::iterator begin () noexcept;  ; constexpr ComponentArray::const_iterator begin () const noexcept;  ; constexpr ComponentArray::iterator end () noexcept;  ; constexpr ComponentArray::const_iterator end () const noexcept;  . Static Public Member Functions; static RGBAColor fromVec4 (const type::fixed_array< float, 4 > &color)=delete;  ; static RGBAColor fromVec4 (const type::fixed_array< double, 4 > &color)=delete;  ; static RGBAColor fromVec4 (const Vec4f &color)=delete;  ; static RGBAColor fromVec4 (const Vec4d &color)=delete;  ; static RGBAColor fromString (const std::string &str);  ; static RGBAColor fromFloat (float r, float g, float b, float a);  ; static RGBAColor fromStdArray (const std::array< float, 4 > &color);  ; static RGBAColor fromStdArray (const std::array< double, 4 > &color);  ; static RGBAColor fromHSVA (float h, float s, float v, float a);  ; static bool read (const std::string &str, RGBAColor &co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html:5063,Security,access,access,5063," constexpr sofa::type::RGBAColor::RGBAColor ; (; ). inlineconstexpr . ◆ RGBAColor() [2/5]. constexpr sofa::type::RGBAColor::RGBAColor ; (; const std::array< float, NumberOfComponents > & ; c). inlineexplicitconstexpr . ◆ RGBAColor() [3/5]. constexpr sofa::type::RGBAColor::RGBAColor ; (; float ; r, . float ; g, . float ; b, . float ; a . ). inlineconstexpr . ◆ RGBAColor() [4/5]. sofa::type::RGBAColor::RGBAColor ; (; const type::fixed_array< float, NumberOfComponents > & ; c). delete . ◆ RGBAColor() [5/5]. sofa::type::RGBAColor::RGBAColor ; (; const type::Vec4f & ; c). delete . Function details. ◆ a() [1/3]. constexpr float& sofa::type::RGBAColor::a ; (; ). inlineconstexpr . ◆ a() [2/3]. constexpr const float& sofa::type::RGBAColor::a ; (; ); const. inlineconstexpr . ◆ a() [3/3]. constexpr void sofa::type::RGBAColor::a ; (; const float ; a). inlineconstexpr . ◆ array() [1/2]. constexpr const ComponentArray& sofa::type::RGBAColor::array ; (; ); const. inlineconstexprnoexcept . direct access to array . ◆ array() [2/2]. constexpr ComponentArray& sofa::type::RGBAColor::array ; (; ). inlineconstexprnoexcept . direct access to array . ◆ b() [1/3]. constexpr float& sofa::type::RGBAColor::b ; (; ). inlineconstexpr . ◆ b() [2/3]. constexpr const float& sofa::type::RGBAColor::b ; (; ); const. inlineconstexpr . ◆ b() [3/3]. constexpr void sofa::type::RGBAColor::b ; (; const float ; b). inlineconstexpr . ◆ begin() [1/2]. constexpr ComponentArray::const_iterator sofa::type::RGBAColor::begin ; (; ); const. inlineconstexprnoexcept . ◆ begin() [2/2]. constexpr ComponentArray::iterator sofa::type::RGBAColor::begin ; (; ). inlineconstexprnoexcept . ◆ black(). constexpr const RGBAColor & sofa::type::RGBAColor::black ; (; ). staticconstexpr . ◆ blue(). constexpr const RGBAColor & sofa::type::RGBAColor::blue ; (; ). staticconstexpr . ◆ clamp(). static constexpr RGBAColor sofa::type::RGBAColor::clamp ; (; const RGBAColor & ; color, . float ; min, . float ; max . ). inlinestaticconstexpr . ◆",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html:5194,Security,access,access,5194,"or ; (; const std::array< float, NumberOfComponents > & ; c). inlineexplicitconstexpr . ◆ RGBAColor() [3/5]. constexpr sofa::type::RGBAColor::RGBAColor ; (; float ; r, . float ; g, . float ; b, . float ; a . ). inlineconstexpr . ◆ RGBAColor() [4/5]. sofa::type::RGBAColor::RGBAColor ; (; const type::fixed_array< float, NumberOfComponents > & ; c). delete . ◆ RGBAColor() [5/5]. sofa::type::RGBAColor::RGBAColor ; (; const type::Vec4f & ; c). delete . Function details. ◆ a() [1/3]. constexpr float& sofa::type::RGBAColor::a ; (; ). inlineconstexpr . ◆ a() [2/3]. constexpr const float& sofa::type::RGBAColor::a ; (; ); const. inlineconstexpr . ◆ a() [3/3]. constexpr void sofa::type::RGBAColor::a ; (; const float ; a). inlineconstexpr . ◆ array() [1/2]. constexpr const ComponentArray& sofa::type::RGBAColor::array ; (; ); const. inlineconstexprnoexcept . direct access to array . ◆ array() [2/2]. constexpr ComponentArray& sofa::type::RGBAColor::array ; (; ). inlineconstexprnoexcept . direct access to array . ◆ b() [1/3]. constexpr float& sofa::type::RGBAColor::b ; (; ). inlineconstexpr . ◆ b() [2/3]. constexpr const float& sofa::type::RGBAColor::b ; (; ); const. inlineconstexpr . ◆ b() [3/3]. constexpr void sofa::type::RGBAColor::b ; (; const float ; b). inlineconstexpr . ◆ begin() [1/2]. constexpr ComponentArray::const_iterator sofa::type::RGBAColor::begin ; (; ); const. inlineconstexprnoexcept . ◆ begin() [2/2]. constexpr ComponentArray::iterator sofa::type::RGBAColor::begin ; (; ). inlineconstexprnoexcept . ◆ black(). constexpr const RGBAColor & sofa::type::RGBAColor::black ; (; ). staticconstexpr . ◆ blue(). constexpr const RGBAColor & sofa::type::RGBAColor::blue ; (; ). staticconstexpr . ◆ clamp(). static constexpr RGBAColor sofa::type::RGBAColor::clamp ; (; const RGBAColor & ; color, . float ; min, . float ; max . ). inlinestaticconstexpr . ◆ cyan(). constexpr const RGBAColor & sofa::type::RGBAColor::cyan ; (; ). staticconstexpr . ◆ darkgray(). constexpr const RGBAColor ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_spatial_vector-members.html:240,Modifiability,inherit,inherited,240,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::SpatialVector< TReal > Member List . This is the complete list of members for sofa::type::SpatialVector< TReal >, including all inherited members. clear()sofa::type::SpatialVector< TReal >; cross(const SpatialVector &v) constsofa::type::SpatialVector< TReal >; freeVecsofa::type::SpatialVector< TReal >; getAngularVelocity()sofa::type::SpatialVector< TReal >inline; getAngularVelocity() constsofa::type::SpatialVector< TReal >inline; getForce()sofa::type::SpatialVector< TReal >inline; getForce() constsofa::type::SpatialVector< TReal >inline; getLinearVelocity()sofa::type::SpatialVector< TReal >inline; getLinearVelocity() constsofa::type::SpatialVector< TReal >inline; getTorque()sofa::type::SpatialVector< TReal >inline; getTorque() constsofa::type::SpatialVector< TReal >inline; lineVecsofa::type::SpatialVector< TReal >; Mat66 typedefsofa::type::SpatialVector< TReal >; operator*(Real a) constsofa::type::SpatialVector< TReal >inline; operator*(const SpatialVector &v) constsofa::type::SpatialVector< TReal >; operator*(const Mat66 &) constsofa::type::SpatialVector< TReal >; operator*=(Real a)sofa::type::SpatialVector< TReal >inline; operator+(const SpatialVector &v) constsofa::type::SpatialVector< TReal >; operator+=(const SpatialVector &v)sofa::type::SpatialVector< TReal >; operator-(const SpatialVector &v) constsofa::type::SpatialVector< TReal >; operator-() constsofa::type::SpatialVector< TReal >; operator<<(std::ostream &out, const SpatialVector &t)sofa::type::SpatialVector< TReal >friend; operator>>(std::istream &in, SpatialVector &t)sofa::type::SpatialVector< TReal >friend; Real typedefsofa::type::SpatialVector< TReal >; setAngularVelocity(const Vec &v)sofa::type::SpatialVector< TReal >inline; setForce(const Vec &v)sofa::type::SpatialVector< TReal >inline; setLinearVelocity(const Vec &v)sofa::type::SpatialVector< TReal >inline; setTorque(const Vec &v)sofa::typ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_spatial_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_spatial_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_spatial_vector-members.html:259,Usability,clear,clear,259,"ll inherited members. clear()sofa::type::SpatialVector< TReal >; cross(const SpatialVector &v) constsofa::type::SpatialVector< TReal >; freeVecsofa::type::SpatialVector< TReal >; getAngularVelocity()sofa::type::SpatialVector< TReal >inline; getAngularVelocity() constsofa::type::SpatialVector< TReal >inline; getForce()sofa::type::SpatialVector< TReal >inline; getForce() constsofa::type::SpatialVector< TReal >inline; getLinearVelocity()sofa::type::SpatialVector< TReal >inline; getLinearVelocity() constsofa::type::SpatialVector< TReal >inline; getTorque()sofa::type::SpatialVector< TReal >inline; getTorque() constsofa::type::SpatialVector< TReal >inline; lineVecsofa::type::SpatialVector< TReal >; Mat66 typedefsofa::type::SpatialVector< TReal >; operator*(Real a) constsofa::type::SpatialVector< TReal >inline; operator*(const SpatialVector &v) constsofa::type::SpatialVector< TReal >; operator*(const Mat66 &) constsofa::type::SpatialVector< TReal >; operator*=(Real a)sofa::type::SpatialVector< TReal >inline; operator+(const SpatialVector &v) constsofa::type::SpatialVector< TReal >; operator+=(const SpatialVector &v)sofa::type::SpatialVector< TReal >; operator-(const SpatialVector &v) constsofa::type::SpatialVector< TReal >; operator-() constsofa::type::SpatialVector< TReal >; operator<<(std::ostream &out, const SpatialVector &t)sofa::type::SpatialVector< TReal >friend; operator>>(std::istream &in, SpatialVector &t)sofa::type::SpatialVector< TReal >friend; Real typedefsofa::type::SpatialVector< TReal >; setAngularVelocity(const Vec &v)sofa::type::SpatialVector< TReal >inline; setForce(const Vec &v)sofa::type::SpatialVector< TReal >inline; setLinearVelocity(const Vec &v)sofa::type::SpatialVector< TReal >inline; setTorque(const Vec &v)sofa::type::SpatialVector< TReal >inline; SpatialVector()=defaultsofa::type::SpatialVector< TReal >; SpatialVector(const Vec &l, const Vec &f)sofa::type::SpatialVector< TReal >; Vec typedefsofa::type::SpatialVector< TReal >. Generated on Mon Nov",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_spatial_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_spatial_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_spatial_vector.html:319,Modifiability,Inherit,Inheritance,319,"﻿. SOFA API: sofa::type::SpatialVector< TReal > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Friends |; List of all members . sofa::type::SpatialVector< TReal > Class Template Reference . #include <SpatialVector.h>. Inheritance diagram for sofa::type::SpatialVector< TReal >:. [legend]; Detailed Description; template<class TReal>; class sofa::type::SpatialVector< TReal >; A spatial vector. When representing a velocity, lineVec is the angular velocity and freeVec is the linear velocity. When representing a spatial force, lineVec is the force and freeVec is the torque. . Public Attributes; Vec lineVec { type::NOINIT };  ; Vec freeVec { type::NOINIT };  . Public Member Functions; void clear ();  ;  SpatialVector ()=default;  ;  SpatialVector (const Vec &l, const Vec &f);  ; SpatialVector & operator+= (const SpatialVector &v);  ; SpatialVector operator* (Real a) const;  ; SpatialVector & operator*= (Real a);  ; SpatialVector operator+ (const SpatialVector &v) const;  ; SpatialVector operator- (const SpatialVector &v) const;  ; SpatialVector operator- () const;  ; Real operator* (const SpatialVector &v) const;  Spatial dot product (cross terms) More...;  ; SpatialVector cross (const SpatialVector &v) const;  Spatial cross product. More...;  ; SpatialVector operator* (const Mat66 &) const;  product with a dense matrix More...;  ; Vec & getLinearVelocity ();  ; const Vec & getLinearVelocity () const;  ; void setLinearVelocity (const Vec &v);  ; Vec & getAngularVelocity ();  ; const Vec & getAngularVelocity () const;  ; void setAngularVelocity (const Vec &v);  ; Vec & getTorque ();  ; const Vec & getTorque () const;  ; void setTorque (const Vec &v);  ; Vec & getForce ();  ; const Vec & getForce () const;  ; void setForce (const Vec &v);  . Friends; std::ostream & operator<< (std::ostream &out, const SpatialVector &t);  write to an output stream More...;  ; std::istream & ope",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_spatial_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_spatial_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_spatial_vector.html:793,Usability,clear,clear,793,"sofa::type::SpatialVector< TReal > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Friends |; List of all members . sofa::type::SpatialVector< TReal > Class Template Reference . #include <SpatialVector.h>. Inheritance diagram for sofa::type::SpatialVector< TReal >:. [legend]; Detailed Description; template<class TReal>; class sofa::type::SpatialVector< TReal >; A spatial vector. When representing a velocity, lineVec is the angular velocity and freeVec is the linear velocity. When representing a spatial force, lineVec is the force and freeVec is the torque. . Public Attributes; Vec lineVec { type::NOINIT };  ; Vec freeVec { type::NOINIT };  . Public Member Functions; void clear ();  ;  SpatialVector ()=default;  ;  SpatialVector (const Vec &l, const Vec &f);  ; SpatialVector & operator+= (const SpatialVector &v);  ; SpatialVector operator* (Real a) const;  ; SpatialVector & operator*= (Real a);  ; SpatialVector operator+ (const SpatialVector &v) const;  ; SpatialVector operator- (const SpatialVector &v) const;  ; SpatialVector operator- () const;  ; Real operator* (const SpatialVector &v) const;  Spatial dot product (cross terms) More...;  ; SpatialVector cross (const SpatialVector &v) const;  Spatial cross product. More...;  ; SpatialVector operator* (const Mat66 &) const;  product with a dense matrix More...;  ; Vec & getLinearVelocity ();  ; const Vec & getLinearVelocity () const;  ; void setLinearVelocity (const Vec &v);  ; Vec & getAngularVelocity ();  ; const Vec & getAngularVelocity () const;  ; void setAngularVelocity (const Vec &v);  ; Vec & getTorque ();  ; const Vec & getTorque () const;  ; void setTorque (const Vec &v);  ; Vec & getForce ();  ; const Vec & getForce () const;  ; void setForce (const Vec &v);  . Friends; std::ostream & operator<< (std::ostream &out, const SpatialVector &t);  write to an output stream More...;  ; std::istream & operator>> (std:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_spatial_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_spatial_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_spatial_vector.html:2719,Usability,clear,clear,2719,"Torque () const;  ; void setTorque (const Vec &v);  ; Vec & getForce ();  ; const Vec & getForce () const;  ; void setForce (const Vec &v);  . Friends; std::ostream & operator<< (std::ostream &out, const SpatialVector &t);  write to an output stream More...;  ; std::istream & operator>> (std::istream &in, SpatialVector &t);  read from an input stream More...;  . Attribute details. ◆ freeVec. template<class TReal > . Vec sofa::type::SpatialVector< TReal >::freeVec { type::NOINIT }. ◆ lineVec. template<class TReal > . Vec sofa::type::SpatialVector< TReal >::lineVec { type::NOINIT }. Constructor details. ◆ SpatialVector() [1/2]. template<class TReal > . sofa::type::SpatialVector< TReal >::SpatialVector ; (; ). default . ◆ SpatialVector() [2/2]. template<class TReal > . sofa::type::SpatialVector< TReal >::SpatialVector ; (; const Vec & ; l, . const Vec & ; f . ). Parameters. lThe line vector: angular velocity, or force ; fThe free vector: linear velocity, or torque . Function details. ◆ clear(). template<class TReal > . void sofa::type::SpatialVector< TReal >::clear. ◆ cross(). template<class TReal > . SpatialVector< TReal > sofa::type::SpatialVector< TReal >::cross ; (; const SpatialVector< TReal > & ; v); const. Spatial cross product. . ◆ getAngularVelocity() [1/2]. template<class TReal > . Vec& sofa::type::SpatialVector< TReal >::getAngularVelocity ; (; ). inline . If the SpatialVector models a spatial velocity, then the angular velocity is the lineVec. Otherwise, the SpatialVector models a spatial force, and this method returns a force. . ◆ getAngularVelocity() [2/2]. template<class TReal > . const Vec& sofa::type::SpatialVector< TReal >::getAngularVelocity ; (; ); const. inline . ◆ getForce() [1/2]. template<class TReal > . Vec& sofa::type::SpatialVector< TReal >::getForce ; (; ). inline . If the SpatialVector models a spatial force, then the torque is the lineVec. Otherwise, the SpatialVector models a spatial velocity, and this method returns an angular velocity. .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_spatial_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_spatial_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_spatial_vector.html:2794,Usability,clear,clear,2794,"ec & getForce ();  ; const Vec & getForce () const;  ; void setForce (const Vec &v);  . Friends; std::ostream & operator<< (std::ostream &out, const SpatialVector &t);  write to an output stream More...;  ; std::istream & operator>> (std::istream &in, SpatialVector &t);  read from an input stream More...;  . Attribute details. ◆ freeVec. template<class TReal > . Vec sofa::type::SpatialVector< TReal >::freeVec { type::NOINIT }. ◆ lineVec. template<class TReal > . Vec sofa::type::SpatialVector< TReal >::lineVec { type::NOINIT }. Constructor details. ◆ SpatialVector() [1/2]. template<class TReal > . sofa::type::SpatialVector< TReal >::SpatialVector ; (; ). default . ◆ SpatialVector() [2/2]. template<class TReal > . sofa::type::SpatialVector< TReal >::SpatialVector ; (; const Vec & ; l, . const Vec & ; f . ). Parameters. lThe line vector: angular velocity, or force ; fThe free vector: linear velocity, or torque . Function details. ◆ clear(). template<class TReal > . void sofa::type::SpatialVector< TReal >::clear. ◆ cross(). template<class TReal > . SpatialVector< TReal > sofa::type::SpatialVector< TReal >::cross ; (; const SpatialVector< TReal > & ; v); const. Spatial cross product. . ◆ getAngularVelocity() [1/2]. template<class TReal > . Vec& sofa::type::SpatialVector< TReal >::getAngularVelocity ; (; ). inline . If the SpatialVector models a spatial velocity, then the angular velocity is the lineVec. Otherwise, the SpatialVector models a spatial force, and this method returns a force. . ◆ getAngularVelocity() [2/2]. template<class TReal > . const Vec& sofa::type::SpatialVector< TReal >::getAngularVelocity ; (; ); const. inline . ◆ getForce() [1/2]. template<class TReal > . Vec& sofa::type::SpatialVector< TReal >::getForce ; (; ). inline . If the SpatialVector models a spatial force, then the torque is the lineVec. Otherwise, the SpatialVector models a spatial velocity, and this method returns an angular velocity. . ◆ getForce() [2/2]. template<class TReal > . const Ve",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_spatial_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_spatial_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector-members.html:220,Modifiability,inherit,inherited,220,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::SVector< T > Member List . This is the complete list of members for sofa::type::SVector< T >, including all inherited members. Alloc typedefsofa::type::SVector< T >; const_reference typedefsofa::type::vector< T, type::CPUMemoryManager< T > >; fastResize(Size n)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; fill(const T &value)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; Inherit typedefsofa::type::SVector< T >; memory_manager typedefsofa::type::vector< T, type::CPUMemoryManager< T > >; operator<<(std::ostream &os, const SVector< T > &vec)sofa::type::SVector< T >friend; operator=(const Inherit &x)sofa::type::SVector< T >inline; operator=(Inherit &&v)sofa::type::SVector< T >inline; vector< T, type::CPUMemoryManager< T > >::operator=(const std::vector< T, Alloc > &x)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; vector< T, type::CPUMemoryManager< T > >::operator=(std::vector< T, Alloc > &&v)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; operator>>(std::istream &in, SVector< T > &vec)sofa::type::SVector< T >friend; operator[](Size n)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; operator[](Size n) constsofa::type::vector< T, type::CPUMemoryManager< T > >inline; read(std::istream &in)sofa::type::SVector< T >inline; read(std::istream &in)sofa::type::SVector< T >; read(std::istream &in)sofa::type::SVector< T >; rebind_to typedefsofa::type::vector< T, type::CPUMemoryManager< T > >; reference typedefsofa::type::vector< T, type::CPUMemoryManager< T > >; Size typedefsofa::type::SVector< T >; SVector()sofa::type::SVector< T >inline; SVector(Size n, const T &value)sofa::type::SVector< T >inline; SVector(int n, const T &value)sofa::type::SVector< T >inline; SVector(long n, const T &value)sofa::type::SVector< T >inline; SVector(Size n)sofa::type::SVector< T >inlineexplicit; SVector(const Inherit &x)sofa::ty",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_s_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector-members.html:513,Modifiability,Inherit,Inherit,513," Alloc typedefsofa::type::SVector< T >; const_reference typedefsofa::type::vector< T, type::CPUMemoryManager< T > >; fastResize(Size n)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; fill(const T &value)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; Inherit typedefsofa::type::SVector< T >; memory_manager typedefsofa::type::vector< T, type::CPUMemoryManager< T > >; operator<<(std::ostream &os, const SVector< T > &vec)sofa::type::SVector< T >friend; operator=(const Inherit &x)sofa::type::SVector< T >inline; operator=(Inherit &&v)sofa::type::SVector< T >inline; vector< T, type::CPUMemoryManager< T > >::operator=(const std::vector< T, Alloc > &x)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; vector< T, type::CPUMemoryManager< T > >::operator=(std::vector< T, Alloc > &&v)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; operator>>(std::istream &in, SVector< T > &vec)sofa::type::SVector< T >friend; operator[](Size n)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; operator[](Size n) constsofa::type::vector< T, type::CPUMemoryManager< T > >inline; read(std::istream &in)sofa::type::SVector< T >inline; read(std::istream &in)sofa::type::SVector< T >; read(std::istream &in)sofa::type::SVector< T >; rebind_to typedefsofa::type::vector< T, type::CPUMemoryManager< T > >; reference typedefsofa::type::vector< T, type::CPUMemoryManager< T > >; Size typedefsofa::type::SVector< T >; SVector()sofa::type::SVector< T >inline; SVector(Size n, const T &value)sofa::type::SVector< T >inline; SVector(int n, const T &value)sofa::type::SVector< T >inline; SVector(long n, const T &value)sofa::type::SVector< T >inline; SVector(Size n)sofa::type::SVector< T >inlineexplicit; SVector(const Inherit &x)sofa::ty",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_s_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector-members.html:731,Modifiability,Inherit,Inherit,731," Alloc typedefsofa::type::SVector< T >; const_reference typedefsofa::type::vector< T, type::CPUMemoryManager< T > >; fastResize(Size n)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; fill(const T &value)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; Inherit typedefsofa::type::SVector< T >; memory_manager typedefsofa::type::vector< T, type::CPUMemoryManager< T > >; operator<<(std::ostream &os, const SVector< T > &vec)sofa::type::SVector< T >friend; operator=(const Inherit &x)sofa::type::SVector< T >inline; operator=(Inherit &&v)sofa::type::SVector< T >inline; vector< T, type::CPUMemoryManager< T > >::operator=(const std::vector< T, Alloc > &x)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; vector< T, type::CPUMemoryManager< T > >::operator=(std::vector< T, Alloc > &&v)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; operator>>(std::istream &in, SVector< T > &vec)sofa::type::SVector< T >friend; operator[](Size n)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; operator[](Size n) constsofa::type::vector< T, type::CPUMemoryManager< T > >inline; read(std::istream &in)sofa::type::SVector< T >inline; read(std::istream &in)sofa::type::SVector< T >; read(std::istream &in)sofa::type::SVector< T >; rebind_to typedefsofa::type::vector< T, type::CPUMemoryManager< T > >; reference typedefsofa::type::vector< T, type::CPUMemoryManager< T > >; Size typedefsofa::type::SVector< T >; SVector()sofa::type::SVector< T >inline; SVector(Size n, const T &value)sofa::type::SVector< T >inline; SVector(int n, const T &value)sofa::type::SVector< T >inline; SVector(long n, const T &value)sofa::type::SVector< T >inline; SVector(Size n)sofa::type::SVector< T >inlineexplicit; SVector(const Inherit &x)sofa::ty",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_s_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector-members.html:784,Modifiability,Inherit,Inherit,784," Alloc typedefsofa::type::SVector< T >; const_reference typedefsofa::type::vector< T, type::CPUMemoryManager< T > >; fastResize(Size n)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; fill(const T &value)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; Inherit typedefsofa::type::SVector< T >; memory_manager typedefsofa::type::vector< T, type::CPUMemoryManager< T > >; operator<<(std::ostream &os, const SVector< T > &vec)sofa::type::SVector< T >friend; operator=(const Inherit &x)sofa::type::SVector< T >inline; operator=(Inherit &&v)sofa::type::SVector< T >inline; vector< T, type::CPUMemoryManager< T > >::operator=(const std::vector< T, Alloc > &x)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; vector< T, type::CPUMemoryManager< T > >::operator=(std::vector< T, Alloc > &&v)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; operator>>(std::istream &in, SVector< T > &vec)sofa::type::SVector< T >friend; operator[](Size n)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; operator[](Size n) constsofa::type::vector< T, type::CPUMemoryManager< T > >inline; read(std::istream &in)sofa::type::SVector< T >inline; read(std::istream &in)sofa::type::SVector< T >; read(std::istream &in)sofa::type::SVector< T >; rebind_to typedefsofa::type::vector< T, type::CPUMemoryManager< T > >; reference typedefsofa::type::vector< T, type::CPUMemoryManager< T > >; Size typedefsofa::type::SVector< T >; SVector()sofa::type::SVector< T >inline; SVector(Size n, const T &value)sofa::type::SVector< T >inline; SVector(int n, const T &value)sofa::type::SVector< T >inline; SVector(long n, const T &value)sofa::type::SVector< T >inline; SVector(Size n)sofa::type::SVector< T >inlineexplicit; SVector(const Inherit &x)sofa::ty",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_s_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector-members.html:1982,Modifiability,Inherit,Inherit,1982,"pe::CPUMemoryManager< T > >::operator=(std::vector< T, Alloc > &&v)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; operator>>(std::istream &in, SVector< T > &vec)sofa::type::SVector< T >friend; operator[](Size n)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; operator[](Size n) constsofa::type::vector< T, type::CPUMemoryManager< T > >inline; read(std::istream &in)sofa::type::SVector< T >inline; read(std::istream &in)sofa::type::SVector< T >; read(std::istream &in)sofa::type::SVector< T >; rebind_to typedefsofa::type::vector< T, type::CPUMemoryManager< T > >; reference typedefsofa::type::vector< T, type::CPUMemoryManager< T > >; Size typedefsofa::type::SVector< T >; SVector()sofa::type::SVector< T >inline; SVector(Size n, const T &value)sofa::type::SVector< T >inline; SVector(int n, const T &value)sofa::type::SVector< T >inline; SVector(long n, const T &value)sofa::type::SVector< T >inline; SVector(Size n)sofa::type::SVector< T >inlineexplicit; SVector(const Inherit &x)sofa::type::SVector< T >inline; SVector(Inherit &&v)sofa::type::SVector< T >inline; SVector(typename SVector< T >::const_iterator first, typename SVector< T >::const_iterator last)sofa::type::SVector< T >inline; vector()sofa::type::vector< T, type::CPUMemoryManager< T > >inline; vector(Size n, const T &value)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; vector(Size n)sofa::type::vector< T, type::CPUMemoryManager< T > >inlineexplicit; vector(const std::vector< T, Alloc > &x)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; vector(const std::initializer_list< T > &t)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; vector(std::vector< T, Alloc > &&v)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; vector(typename vector< T >::const_iterator first, typename vector< T >::const_iterator last)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; write(std::ostream &os) constsofa::type::SVector< T >inline; write(std::ostream &os) const",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_s_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector-members.html:2033,Modifiability,Inherit,Inherit,2033," T, Alloc > &&v)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; operator>>(std::istream &in, SVector< T > &vec)sofa::type::SVector< T >friend; operator[](Size n)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; operator[](Size n) constsofa::type::vector< T, type::CPUMemoryManager< T > >inline; read(std::istream &in)sofa::type::SVector< T >inline; read(std::istream &in)sofa::type::SVector< T >; read(std::istream &in)sofa::type::SVector< T >; rebind_to typedefsofa::type::vector< T, type::CPUMemoryManager< T > >; reference typedefsofa::type::vector< T, type::CPUMemoryManager< T > >; Size typedefsofa::type::SVector< T >; SVector()sofa::type::SVector< T >inline; SVector(Size n, const T &value)sofa::type::SVector< T >inline; SVector(int n, const T &value)sofa::type::SVector< T >inline; SVector(long n, const T &value)sofa::type::SVector< T >inline; SVector(Size n)sofa::type::SVector< T >inlineexplicit; SVector(const Inherit &x)sofa::type::SVector< T >inline; SVector(Inherit &&v)sofa::type::SVector< T >inline; SVector(typename SVector< T >::const_iterator first, typename SVector< T >::const_iterator last)sofa::type::SVector< T >inline; vector()sofa::type::vector< T, type::CPUMemoryManager< T > >inline; vector(Size n, const T &value)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; vector(Size n)sofa::type::vector< T, type::CPUMemoryManager< T > >inlineexplicit; vector(const std::vector< T, Alloc > &x)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; vector(const std::initializer_list< T > &t)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; vector(std::vector< T, Alloc > &&v)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; vector(typename vector< T >::const_iterator first, typename vector< T >::const_iterator last)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; write(std::ostream &os) constsofa::type::SVector< T >inline; write(std::ostream &os) constsofa::type::SVector< T >; write(std::ostream &os) c",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_s_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html:335,Modifiability,Inherit,Inheritance,335,"﻿. SOFA API: sofa::type::SVector< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Friends |; List of all members . sofa::type::SVector< T > Class Template Reference . #include <SVector.h>; Same as type::vector, + delimiters on serialization. ; More... Inheritance diagram for sofa::type::SVector< T >:. [legend]; Detailed Description; template<class T>; class sofa::type::SVector< T >; Same as type::vector, + delimiters on serialization. . Public Member Functions;  SVector ();  reference to a value (read-write) More...;  ;  SVector (Size n, const T &value);  Constructor. More...;  ;  SVector (int n, const T &value);  Constructor. More...;  ;  SVector (long n, const T &value);  Constructor. More...;  ;  SVector (Size n);  Constructor. More...;  ;  SVector (const Inherit &x);  Constructor. More...;  ;  SVector (Inherit &&v);  Move constructor. More...;  ; SVector< T > & operator= (const Inherit &x);  Copy operator. More...;  ; SVector< T > & operator= (Inherit &&v);  Move assignment operator. More...;  ;  SVector (typename SVector< T >::const_iterator first, typename SVector< T >::const_iterator last);  Constructor. More...;  ; std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; std::ostream & write (std::ostream &os) const;  ;  Public Member Functions inherited from sofa::type::vector< T, type::CPUMemoryManager< T > >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html:852,Modifiability,Inherit,Inherit,852,"﻿. SOFA API: sofa::type::SVector< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Friends |; List of all members . sofa::type::SVector< T > Class Template Reference . #include <SVector.h>; Same as type::vector, + delimiters on serialization. ; More... Inheritance diagram for sofa::type::SVector< T >:. [legend]; Detailed Description; template<class T>; class sofa::type::SVector< T >; Same as type::vector, + delimiters on serialization. . Public Member Functions;  SVector ();  reference to a value (read-write) More...;  ;  SVector (Size n, const T &value);  Constructor. More...;  ;  SVector (int n, const T &value);  Constructor. More...;  ;  SVector (long n, const T &value);  Constructor. More...;  ;  SVector (Size n);  Constructor. More...;  ;  SVector (const Inherit &x);  Constructor. More...;  ;  SVector (Inherit &&v);  Move constructor. More...;  ; SVector< T > & operator= (const Inherit &x);  Copy operator. More...;  ; SVector< T > & operator= (Inherit &&v);  Move assignment operator. More...;  ;  SVector (typename SVector< T >::const_iterator first, typename SVector< T >::const_iterator last);  Constructor. More...;  ; std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; std::ostream & write (std::ostream &os) const;  ;  Public Member Functions inherited from sofa::type::vector< T, type::CPUMemoryManager< T > >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html:901,Modifiability,Inherit,Inherit,901,"﻿. SOFA API: sofa::type::SVector< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Friends |; List of all members . sofa::type::SVector< T > Class Template Reference . #include <SVector.h>; Same as type::vector, + delimiters on serialization. ; More... Inheritance diagram for sofa::type::SVector< T >:. [legend]; Detailed Description; template<class T>; class sofa::type::SVector< T >; Same as type::vector, + delimiters on serialization. . Public Member Functions;  SVector ();  reference to a value (read-write) More...;  ;  SVector (Size n, const T &value);  Constructor. More...;  ;  SVector (int n, const T &value);  Constructor. More...;  ;  SVector (long n, const T &value);  Constructor. More...;  ;  SVector (Size n);  Constructor. More...;  ;  SVector (const Inherit &x);  Constructor. More...;  ;  SVector (Inherit &&v);  Move constructor. More...;  ; SVector< T > & operator= (const Inherit &x);  Copy operator. More...;  ; SVector< T > & operator= (Inherit &&v);  Move assignment operator. More...;  ;  SVector (typename SVector< T >::const_iterator first, typename SVector< T >::const_iterator last);  Constructor. More...;  ; std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; std::ostream & write (std::ostream &os) const;  ;  Public Member Functions inherited from sofa::type::vector< T, type::CPUMemoryManager< T > >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html:978,Modifiability,Inherit,Inherit,978,"﻿. SOFA API: sofa::type::SVector< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Friends |; List of all members . sofa::type::SVector< T > Class Template Reference . #include <SVector.h>; Same as type::vector, + delimiters on serialization. ; More... Inheritance diagram for sofa::type::SVector< T >:. [legend]; Detailed Description; template<class T>; class sofa::type::SVector< T >; Same as type::vector, + delimiters on serialization. . Public Member Functions;  SVector ();  reference to a value (read-write) More...;  ;  SVector (Size n, const T &value);  Constructor. More...;  ;  SVector (int n, const T &value);  Constructor. More...;  ;  SVector (long n, const T &value);  Constructor. More...;  ;  SVector (Size n);  Constructor. More...;  ;  SVector (const Inherit &x);  Constructor. More...;  ;  SVector (Inherit &&v);  Move constructor. More...;  ; SVector< T > & operator= (const Inherit &x);  Copy operator. More...;  ; SVector< T > & operator= (Inherit &&v);  Move assignment operator. More...;  ;  SVector (typename SVector< T >::const_iterator first, typename SVector< T >::const_iterator last);  Constructor. More...;  ; std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; std::ostream & write (std::ostream &os) const;  ;  Public Member Functions inherited from sofa::type::vector< T, type::CPUMemoryManager< T > >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html:1045,Modifiability,Inherit,Inherit,1045,"ate Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Friends |; List of all members . sofa::type::SVector< T > Class Template Reference . #include <SVector.h>; Same as type::vector, + delimiters on serialization. ; More... Inheritance diagram for sofa::type::SVector< T >:. [legend]; Detailed Description; template<class T>; class sofa::type::SVector< T >; Same as type::vector, + delimiters on serialization. . Public Member Functions;  SVector ();  reference to a value (read-write) More...;  ;  SVector (Size n, const T &value);  Constructor. More...;  ;  SVector (int n, const T &value);  Constructor. More...;  ;  SVector (long n, const T &value);  Constructor. More...;  ;  SVector (Size n);  Constructor. More...;  ;  SVector (const Inherit &x);  Constructor. More...;  ;  SVector (Inherit &&v);  Move constructor. More...;  ; SVector< T > & operator= (const Inherit &x);  Copy operator. More...;  ; SVector< T > & operator= (Inherit &&v);  Move assignment operator. More...;  ;  SVector (typename SVector< T >::const_iterator first, typename SVector< T >::const_iterator last);  Constructor. More...;  ; std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; std::ostream & write (std::ostream &os) const;  ;  Public Member Functions inherited from sofa::type::vector< T, type::CPUMemoryManager< T > >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...;  ;  vector (typename vector< T >::const_iterator ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html:1556,Modifiability,inherit,inherited,1556,"class sofa::type::SVector< T >; Same as type::vector, + delimiters on serialization. . Public Member Functions;  SVector ();  reference to a value (read-write) More...;  ;  SVector (Size n, const T &value);  Constructor. More...;  ;  SVector (int n, const T &value);  Constructor. More...;  ;  SVector (long n, const T &value);  Constructor. More...;  ;  SVector (Size n);  Constructor. More...;  ;  SVector (const Inherit &x);  Constructor. More...;  ;  SVector (Inherit &&v);  Move constructor. More...;  ; SVector< T > & operator= (const Inherit &x);  Copy operator. More...;  ; SVector< T > & operator= (Inherit &&v);  Move assignment operator. More...;  ;  SVector (typename SVector< T >::const_iterator first, typename SVector< T >::const_iterator last);  Constructor. More...;  ; std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; std::ostream & write (std::ostream &os) const;  ;  Public Member Functions inherited from sofa::type::vector< T, type::CPUMemoryManager< T > >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...;  ;  vector (typename vector< T >::const_iterator first, typename vector< T >::const_iterator last);  Constructor. More...;  ; vector & operator= (const std::vector< T, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< T, Alloc > &&v);  Move assignment operator. More...;  ; reference operator[] (Size n);  Read/write random access. More...;  ; const_reference operator[] (Size n) const;  Read-only random access. ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html:4455,Modifiability,Inherit,Inherit,4455,"td::ostream & operator<< (std::ostream &os, const SVector< T > &vec);  Output stream. More...;  ; std::istream & operator>> (std::istream &in, SVector< T > &vec);  Input stream. More...;  . Constructor details. ◆ SVector() [1/8]. template<class T > . sofa::type::SVector< T >::SVector ; (; ). inline . reference to a value (read-write) ; const reference to a value (read only) Basic onstructor . ◆ SVector() [2/8]. template<class T > . sofa::type::SVector< T >::SVector ; (; Size ; n, . const T & ; value . ). inline . Constructor. . ◆ SVector() [3/8]. template<class T > . sofa::type::SVector< T >::SVector ; (; int ; n, . const T & ; value . ). inline . Constructor. . ◆ SVector() [4/8]. template<class T > . sofa::type::SVector< T >::SVector ; (; long ; n, . const T & ; value . ). inline . Constructor. . ◆ SVector() [5/8]. template<class T > . sofa::type::SVector< T >::SVector ; (; Size ; n). inlineexplicit . Constructor. . ◆ SVector() [6/8]. template<class T > . sofa::type::SVector< T >::SVector ; (; const Inherit & ; x). inline . Constructor. . ◆ SVector() [7/8]. template<class T > . sofa::type::SVector< T >::SVector ; (; Inherit && ; v). inline . Move constructor. . ◆ SVector() [8/8]. template<class T > . sofa::type::SVector< T >::SVector ; (; typename SVector< T >::const_iterator ; first, . typename SVector< T >::const_iterator ; last . ). inline . Constructor. . Function details. ◆ operator=() [1/2]. template<class T > . SVector<T>& sofa::type::SVector< T >::operator= ; (; const Inherit & ; x). inline . Copy operator. . ◆ operator=() [2/2]. template<class T > . SVector<T>& sofa::type::SVector< T >::operator= ; (; Inherit && ; v). inline . Move assignment operator. . ◆ read() [1/3]. SOFA_TYPE_API std::istream & sofa::type::SVector< std::string >::read ; (; std::istream & ; in). reading specialization for std::string SVector begins by [, ends by ] and separates elements with , string elements must be delimited by ' or "" (like a list of strings in python).; Note this is a",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html:4574,Modifiability,Inherit,Inherit,4574," (std::istream &in, SVector< T > &vec);  Input stream. More...;  . Constructor details. ◆ SVector() [1/8]. template<class T > . sofa::type::SVector< T >::SVector ; (; ). inline . reference to a value (read-write) ; const reference to a value (read only) Basic onstructor . ◆ SVector() [2/8]. template<class T > . sofa::type::SVector< T >::SVector ; (; Size ; n, . const T & ; value . ). inline . Constructor. . ◆ SVector() [3/8]. template<class T > . sofa::type::SVector< T >::SVector ; (; int ; n, . const T & ; value . ). inline . Constructor. . ◆ SVector() [4/8]. template<class T > . sofa::type::SVector< T >::SVector ; (; long ; n, . const T & ; value . ). inline . Constructor. . ◆ SVector() [5/8]. template<class T > . sofa::type::SVector< T >::SVector ; (; Size ; n). inlineexplicit . Constructor. . ◆ SVector() [6/8]. template<class T > . sofa::type::SVector< T >::SVector ; (; const Inherit & ; x). inline . Constructor. . ◆ SVector() [7/8]. template<class T > . sofa::type::SVector< T >::SVector ; (; Inherit && ; v). inline . Move constructor. . ◆ SVector() [8/8]. template<class T > . sofa::type::SVector< T >::SVector ; (; typename SVector< T >::const_iterator ; first, . typename SVector< T >::const_iterator ; last . ). inline . Constructor. . Function details. ◆ operator=() [1/2]. template<class T > . SVector<T>& sofa::type::SVector< T >::operator= ; (; const Inherit & ; x). inline . Copy operator. . ◆ operator=() [2/2]. template<class T > . SVector<T>& sofa::type::SVector< T >::operator= ; (; Inherit && ; v). inline . Move assignment operator. . ◆ read() [1/3]. SOFA_TYPE_API std::istream & sofa::type::SVector< std::string >::read ; (; std::istream & ; in). reading specialization for std::string SVector begins by [, ends by ] and separates elements with , string elements must be delimited by ' or "" (like a list of strings in python).; Note this is a quick&dirty implementation and it could be improved . ◆ read() [2/3]. template<class T > . std::istream& sofa::type::SVec",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html:4941,Modifiability,Inherit,Inherit,4941," ; n, . const T & ; value . ). inline . Constructor. . ◆ SVector() [3/8]. template<class T > . sofa::type::SVector< T >::SVector ; (; int ; n, . const T & ; value . ). inline . Constructor. . ◆ SVector() [4/8]. template<class T > . sofa::type::SVector< T >::SVector ; (; long ; n, . const T & ; value . ). inline . Constructor. . ◆ SVector() [5/8]. template<class T > . sofa::type::SVector< T >::SVector ; (; Size ; n). inlineexplicit . Constructor. . ◆ SVector() [6/8]. template<class T > . sofa::type::SVector< T >::SVector ; (; const Inherit & ; x). inline . Constructor. . ◆ SVector() [7/8]. template<class T > . sofa::type::SVector< T >::SVector ; (; Inherit && ; v). inline . Move constructor. . ◆ SVector() [8/8]. template<class T > . sofa::type::SVector< T >::SVector ; (; typename SVector< T >::const_iterator ; first, . typename SVector< T >::const_iterator ; last . ). inline . Constructor. . Function details. ◆ operator=() [1/2]. template<class T > . SVector<T>& sofa::type::SVector< T >::operator= ; (; const Inherit & ; x). inline . Copy operator. . ◆ operator=() [2/2]. template<class T > . SVector<T>& sofa::type::SVector< T >::operator= ; (; Inherit && ; v). inline . Move assignment operator. . ◆ read() [1/3]. SOFA_TYPE_API std::istream & sofa::type::SVector< std::string >::read ; (; std::istream & ; in). reading specialization for std::string SVector begins by [, ends by ] and separates elements with , string elements must be delimited by ' or "" (like a list of strings in python).; Note this is a quick&dirty implementation and it could be improved . ◆ read() [2/3]. template<class T > . std::istream& sofa::type::SVector< T >::read ; (; std::istream & ; in). inline . ◆ read() [3/3]. std::istream & sofa::type::SVector< std::string >::read ; (; std::istream & ; in). reading specialization for std::string SVector begins by [, ends by ] and separates elements with , string elements must be delimited by ' or "" (like a list of strings in python).; example: ['string1' , ""str",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html:5078,Modifiability,Inherit,Inherit,5078,", . const T & ; value . ). inline . Constructor. . ◆ SVector() [4/8]. template<class T > . sofa::type::SVector< T >::SVector ; (; long ; n, . const T & ; value . ). inline . Constructor. . ◆ SVector() [5/8]. template<class T > . sofa::type::SVector< T >::SVector ; (; Size ; n). inlineexplicit . Constructor. . ◆ SVector() [6/8]. template<class T > . sofa::type::SVector< T >::SVector ; (; const Inherit & ; x). inline . Constructor. . ◆ SVector() [7/8]. template<class T > . sofa::type::SVector< T >::SVector ; (; Inherit && ; v). inline . Move constructor. . ◆ SVector() [8/8]. template<class T > . sofa::type::SVector< T >::SVector ; (; typename SVector< T >::const_iterator ; first, . typename SVector< T >::const_iterator ; last . ). inline . Constructor. . Function details. ◆ operator=() [1/2]. template<class T > . SVector<T>& sofa::type::SVector< T >::operator= ; (; const Inherit & ; x). inline . Copy operator. . ◆ operator=() [2/2]. template<class T > . SVector<T>& sofa::type::SVector< T >::operator= ; (; Inherit && ; v). inline . Move assignment operator. . ◆ read() [1/3]. SOFA_TYPE_API std::istream & sofa::type::SVector< std::string >::read ; (; std::istream & ; in). reading specialization for std::string SVector begins by [, ends by ] and separates elements with , string elements must be delimited by ' or "" (like a list of strings in python).; Note this is a quick&dirty implementation and it could be improved . ◆ read() [2/3]. template<class T > . std::istream& sofa::type::SVector< T >::read ; (; std::istream & ; in). inline . ◆ read() [3/3]. std::istream & sofa::type::SVector< std::string >::read ; (; std::istream & ; in). reading specialization for std::string SVector begins by [, ends by ] and separates elements with , string elements must be delimited by ' or "" (like a list of strings in python).; example: ['string1' , ""string 2 "",'etc...' ] . ◆ write() [1/3]. SOFA_TYPE_API std::ostream & sofa::type::SVector< std::string >::write ; (; std::ostream & ; os); cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html:2349,Security,access,access,2349,"E_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; std::ostream & write (std::ostream &os) const;  ;  Public Member Functions inherited from sofa::type::vector< T, type::CPUMemoryManager< T > >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...;  ;  vector (typename vector< T >::const_iterator first, typename vector< T >::const_iterator last);  Constructor. More...;  ; vector & operator= (const std::vector< T, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< T, Alloc > &&v);  Move assignment operator. More...;  ; reference operator[] (Size n);  Read/write random access. More...;  ; const_reference operator[] (Size n) const;  Read-only random access. More...;  ; std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  Specialization for writing vectors of unsigned char. More...;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in); ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html:2430,Security,access,access,2430," & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; std::ostream & write (std::ostream &os) const;  ;  Public Member Functions inherited from sofa::type::vector< T, type::CPUMemoryManager< T > >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...;  ;  vector (typename vector< T >::const_iterator first, typename vector< T >::const_iterator last);  Constructor. More...;  ; vector & operator= (const std::vector< T, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< T, Alloc > &&v);  Move assignment operator. More...;  ; reference operator[] (Size n);  Read/write random access. More...;  ; const_reference operator[] (Size n) const;  Read-only random access. More...;  ; std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  Specialization for writing vectors of unsigned char. More...;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; void fill (const T &value);  Sets every element to 'value'. More...;  ; v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform-members.html:232,Modifiability,inherit,inherited,232,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::Transform< TReal > Member List . This is the complete list of members for sofa::type::Transform< TReal >, including all inherited members. backProjectPoint(const Vec &pointInParent) constsofa::type::Transform< TReal >; backProjectVector(const Vec &vectorInParent) constsofa::type::Transform< TReal >; clear()sofa::type::Transform< TReal >; CreateSpatialVector()sofa::type::Transform< TReal >; DTrans()sofa::type::Transform< TReal >; getAdjointMatrix() constsofa::type::Transform< TReal >; getOrientation() constsofa::type::Transform< TReal >; getOrigin() constsofa::type::Transform< TReal >; getOriginOfParentInChild() constsofa::type::Transform< TReal >; getRotationMatrix() constsofa::type::Transform< TReal >; identity()sofa::type::Transform< TReal >static; inversed() constsofa::type::Transform< TReal >; Mat3x3 typedefsofa::type::Transform< TReal >; Mat6x6 typedefsofa::type::Transform< TReal >; operator*(const Transform &f2) constsofa::type::Transform< TReal >; operator*(const SpatialVector< TReal > &sv) constsofa::type::Transform< TReal >; operator*(Real2 a) constsofa::type::Transform< TReal >inline; operator*=(const Transform &f2)sofa::type::Transform< TReal >; operator*=(Real2 a)sofa::type::Transform< TReal >inline; operator+=(const SpatialVector< TReal > &a)sofa::type::Transform< TReal >; operator+=(const Transform &a)sofa::type::Transform< TReal >; operator/(const SpatialVector< TReal > &sv) constsofa::type::Transform< TReal >; operator<<(std::ostream &out, const Transform &t)sofa::type::Transform< TReal >friend; operator>>(std::istream &in, Transform &t)sofa::type::Transform< TReal >friend; orientation_sofa::type::Transform< TReal >protected; origin_sofa::type::Transform< TReal >protected; printInternal(std::ostream &) constsofa::type::Transform< TReal >; projectPoint(const Vec &pointInChild) constsofa::type::Transform< TReal >; projectVector(const Vec &vect",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform-members.html:413,Usability,clear,clear,413," backProjectPoint(const Vec &pointInParent) constsofa::type::Transform< TReal >; backProjectVector(const Vec &vectorInParent) constsofa::type::Transform< TReal >; clear()sofa::type::Transform< TReal >; CreateSpatialVector()sofa::type::Transform< TReal >; DTrans()sofa::type::Transform< TReal >; getAdjointMatrix() constsofa::type::Transform< TReal >; getOrientation() constsofa::type::Transform< TReal >; getOrigin() constsofa::type::Transform< TReal >; getOriginOfParentInChild() constsofa::type::Transform< TReal >; getRotationMatrix() constsofa::type::Transform< TReal >; identity()sofa::type::Transform< TReal >static; inversed() constsofa::type::Transform< TReal >; Mat3x3 typedefsofa::type::Transform< TReal >; Mat6x6 typedefsofa::type::Transform< TReal >; operator*(const Transform &f2) constsofa::type::Transform< TReal >; operator*(const SpatialVector< TReal > &sv) constsofa::type::Transform< TReal >; operator*(Real2 a) constsofa::type::Transform< TReal >inline; operator*=(const Transform &f2)sofa::type::Transform< TReal >; operator*=(Real2 a)sofa::type::Transform< TReal >inline; operator+=(const SpatialVector< TReal > &a)sofa::type::Transform< TReal >; operator+=(const Transform &a)sofa::type::Transform< TReal >; operator/(const SpatialVector< TReal > &sv) constsofa::type::Transform< TReal >; operator<<(std::ostream &out, const Transform &t)sofa::type::Transform< TReal >friend; operator>>(std::istream &in, Transform &t)sofa::type::Transform< TReal >friend; orientation_sofa::type::Transform< TReal >protected; origin_sofa::type::Transform< TReal >protected; printInternal(std::ostream &) constsofa::type::Transform< TReal >; projectPoint(const Vec &pointInChild) constsofa::type::Transform< TReal >; projectVector(const Vec &vect",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html:4834,Deployability,integrat,integration,4834,";  ; Transform & operator*= (const Transform &f2);  Combine two transforms. If (*this) locates frame B (child) wrt frame A (parent) and if f2 locates frame C (child) wrt frame B (parent) then the result locates frame C wrt to Frame A. More...;  ; SpatialVector< TReal > CreateSpatialVector ();  ; SpatialVector< TReal > DTrans ();  ; SpatialVector< TReal > operator* (const SpatialVector< TReal > &sv) const;  ; SpatialVector< TReal > operator/ (const SpatialVector< TReal > &sv) const;  Project a spatial vector from parent to child (the inverse of operator *). This method computes (*this).inversed()*sv without inverting (*this). More...;  ; void writeOpenGlMatrix (double *m) const;  Write an OpenGL matrix encoding the transformation of the coordinate system of the child wrt the coordinate system of the parent. More...;  ; void printInternal (std::ostream &) const;  Print the internal values (i.e. using Featherstone's conventions, see class documentation) More...;  ; Time integration; Methods used in time integration . Transform & operator+= (const SpatialVector< TReal > &a);  ; Transform & operator+= (const Transform &a);  ; template<class Real2 > ; Transform & operator*= (Real2 a);  ; template<class Real2 > ; Transform operator* (Real2 a) const;  . Static Public Member Functions; static Transform identity ();  The identity transform (child = parent) More...;  . Friends; std::ostream & operator<< (std::ostream &out, const Transform &t);  ; std::istream & operator>> (std::istream &in, Transform &t);  read from an input stream More...;  . Attribute details. ◆ orientation_. template<class TReal > . Rot sofa::type::Transform< TReal >::orientation_. protected . child wrt parent . ◆ origin_. template<class TReal > . Vec sofa::type::Transform< TReal >::origin_. protected . parent wrt child . Constructor details. ◆ Transform() [1/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform. The default constructor does not initialize the transform. . ◆ Transform() [2/4",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html:4868,Deployability,integrat,integration,4868,";  ; Transform & operator*= (const Transform &f2);  Combine two transforms. If (*this) locates frame B (child) wrt frame A (parent) and if f2 locates frame C (child) wrt frame B (parent) then the result locates frame C wrt to Frame A. More...;  ; SpatialVector< TReal > CreateSpatialVector ();  ; SpatialVector< TReal > DTrans ();  ; SpatialVector< TReal > operator* (const SpatialVector< TReal > &sv) const;  ; SpatialVector< TReal > operator/ (const SpatialVector< TReal > &sv) const;  Project a spatial vector from parent to child (the inverse of operator *). This method computes (*this).inversed()*sv without inverting (*this). More...;  ; void writeOpenGlMatrix (double *m) const;  Write an OpenGL matrix encoding the transformation of the coordinate system of the child wrt the coordinate system of the parent. More...;  ; void printInternal (std::ostream &) const;  Print the internal values (i.e. using Featherstone's conventions, see class documentation) More...;  ; Time integration; Methods used in time integration . Transform & operator+= (const SpatialVector< TReal > &a);  ; Transform & operator+= (const Transform &a);  ; template<class Real2 > ; Transform & operator*= (Real2 a);  ; template<class Real2 > ; Transform operator* (Real2 a) const;  . Static Public Member Functions; static Transform identity ();  The identity transform (child = parent) More...;  . Friends; std::ostream & operator<< (std::ostream &out, const Transform &t);  ; std::istream & operator>> (std::istream &in, Transform &t);  read from an input stream More...;  . Attribute details. ◆ orientation_. template<class TReal > . Rot sofa::type::Transform< TReal >::orientation_. protected . child wrt parent . ◆ origin_. template<class TReal > . Vec sofa::type::Transform< TReal >::origin_. protected . parent wrt child . Constructor details. ◆ Transform() [1/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform. The default constructor does not initialize the transform. . ◆ Transform() [2/4",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html:6635,Deployability,integrat,integrated,6635,"rigin_. protected . parent wrt child . Constructor details. ◆ Transform() [1/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform. The default constructor does not initialize the transform. . ◆ Transform() [2/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const Vec & ; origin, . const Rot & ; orientation . ). Origin of the child in parent coordinates, orientation of the child wrt to parent. ; Define using standard conventions. . ◆ Transform() [3/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const Rot & ; q, . const Vec & ; o . ). WARNING: using Featherstone's conventions (see class documentation) ; Define using Featherstone's conventions. . ◆ Transform() [4/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const SpatialVector< TReal > & ; v). Origin of the child in the parent coordinate system and the orientation of the child wrt the parent (i.e. standard way) ; Define as a given SpatialVector integrated during one second. The spatial vector is given in parent coordinates.; Define child as a given SpatialVector<TReal> integrated during one second, starting from the parent (used for time integration). The spatial vector is given in parent coordinates. . Function details. ◆ backProjectPoint(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectPoint ; (; const Vec & ; pointInParent); const. Project point from parent coordinates to this coordinates. . ◆ backProjectVector(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectVector ; (; const Vec & ; vectorInParent); const. Projected a vector (i.e. a direction or a displacement) from parent coordinates to child coordinates. . ◆ clear(). template<class TReal > . void sofa::type::Transform< TReal >::clear. Reset this to identity. . ◆ CreateSpatialVector(). template<class TReal > . SpatialVector< TReal > sofa::type::Transform< TReal >::CreateSpatialVector. Project a spatial vect",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html:6762,Deployability,integrat,integrated,6762,"fault constructor does not initialize the transform. . ◆ Transform() [2/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const Vec & ; origin, . const Rot & ; orientation . ). Origin of the child in parent coordinates, orientation of the child wrt to parent. ; Define using standard conventions. . ◆ Transform() [3/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const Rot & ; q, . const Vec & ; o . ). WARNING: using Featherstone's conventions (see class documentation) ; Define using Featherstone's conventions. . ◆ Transform() [4/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const SpatialVector< TReal > & ; v). Origin of the child in the parent coordinate system and the orientation of the child wrt the parent (i.e. standard way) ; Define as a given SpatialVector integrated during one second. The spatial vector is given in parent coordinates.; Define child as a given SpatialVector<TReal> integrated during one second, starting from the parent (used for time integration). The spatial vector is given in parent coordinates. . Function details. ◆ backProjectPoint(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectPoint ; (; const Vec & ; pointInParent); const. Project point from parent coordinates to this coordinates. . ◆ backProjectVector(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectVector ; (; const Vec & ; vectorInParent); const. Projected a vector (i.e. a direction or a displacement) from parent coordinates to child coordinates. . ◆ clear(). template<class TReal > . void sofa::type::Transform< TReal >::clear. Reset this to identity. . ◆ CreateSpatialVector(). template<class TReal > . SpatialVector< TReal > sofa::type::Transform< TReal >::CreateSpatialVector. Project a spatial vector from child to parent TODO One should handle differently the transformation of a twist and a wrench ! This applying the adjoint to velocities or its tran",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html:6832,Deployability,integrat,integration,6832,"fault constructor does not initialize the transform. . ◆ Transform() [2/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const Vec & ; origin, . const Rot & ; orientation . ). Origin of the child in parent coordinates, orientation of the child wrt to parent. ; Define using standard conventions. . ◆ Transform() [3/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const Rot & ; q, . const Vec & ; o . ). WARNING: using Featherstone's conventions (see class documentation) ; Define using Featherstone's conventions. . ◆ Transform() [4/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const SpatialVector< TReal > & ; v). Origin of the child in the parent coordinate system and the orientation of the child wrt the parent (i.e. standard way) ; Define as a given SpatialVector integrated during one second. The spatial vector is given in parent coordinates.; Define child as a given SpatialVector<TReal> integrated during one second, starting from the parent (used for time integration). The spatial vector is given in parent coordinates. . Function details. ◆ backProjectPoint(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectPoint ; (; const Vec & ; pointInParent); const. Project point from parent coordinates to this coordinates. . ◆ backProjectVector(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectVector ; (; const Vec & ; vectorInParent); const. Projected a vector (i.e. a direction or a displacement) from parent coordinates to child coordinates. . ◆ clear(). template<class TReal > . void sofa::type::Transform< TReal >::clear. Reset this to identity. . ◆ CreateSpatialVector(). template<class TReal > . SpatialVector< TReal > sofa::type::Transform< TReal >::CreateSpatialVector. Project a spatial vector from child to parent TODO One should handle differently the transformation of a twist and a wrench ! This applying the adjoint to velocities or its tran",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html:11004,Deployability,integrat,integration,11004,"ne two transforms. If (*this) locates frame B (child) wrt frame A (parent) and if f2 locates frame C (child) wrt frame B (parent) then the result locates frame C wrt to Frame A. . ◆ operator*() [3/3]. template<class TReal > . template<class Real2 > . Transform sofa::type::Transform< TReal >::operator* ; (; Real2 ; a); const. inline . ◆ operator*=() [1/2]. template<class TReal > . Transform< TReal > & sofa::type::Transform< TReal >::operator*= ; (; const Transform< TReal > & ; f2). Combine two transforms. If (*this) locates frame B (child) wrt frame A (parent) and if f2 locates frame C (child) wrt frame B (parent) then the result locates frame C wrt to Frame A. . ◆ operator*=() [2/2]. template<class TReal > . template<class Real2 > . Transform& sofa::type::Transform< TReal >::operator*= ; (; Real2 ; a). inline . ◆ operator+=() [1/2]. template<class TReal > . Transform< TReal > & sofa::type::Transform< TReal >::operator+= ; (; const SpatialVector< TReal > & ; a). (this) *= Transform(v) Used for time integration. SHOULD WE RATHER APPLY (*this)=Transform(v)(*this) ??? . ◆ operator+=() [2/2]. template<class TReal > . Transform< TReal > & sofa::type::Transform< TReal >::operator+= ; (; const Transform< TReal > & ; a). ◆ operator/(). template<class TReal > . SpatialVector< TReal > sofa::type::Transform< TReal >::operator/ ; (; const SpatialVector< TReal > & ; sv); const. Project a spatial vector from parent to child (the inverse of operator *). This method computes (*this).inversed()*sv without inverting (*this). . ◆ printInternal(). template<class TReal > . void sofa::type::Transform< TReal >::printInternal ; (; std::ostream & ; out); const. Print the internal values (i.e. using Featherstone's conventions, see class documentation) . ◆ projectPoint(). template<class TReal > . auto sofa::type::Transform< TReal >::projectPoint ; (; const Vec & ; pointInChild); const. Project a point from child coordinates to parent coordinates. . ◆ projectVector(). template<class TReal > . T",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html:4834,Integrability,integrat,integration,4834,";  ; Transform & operator*= (const Transform &f2);  Combine two transforms. If (*this) locates frame B (child) wrt frame A (parent) and if f2 locates frame C (child) wrt frame B (parent) then the result locates frame C wrt to Frame A. More...;  ; SpatialVector< TReal > CreateSpatialVector ();  ; SpatialVector< TReal > DTrans ();  ; SpatialVector< TReal > operator* (const SpatialVector< TReal > &sv) const;  ; SpatialVector< TReal > operator/ (const SpatialVector< TReal > &sv) const;  Project a spatial vector from parent to child (the inverse of operator *). This method computes (*this).inversed()*sv without inverting (*this). More...;  ; void writeOpenGlMatrix (double *m) const;  Write an OpenGL matrix encoding the transformation of the coordinate system of the child wrt the coordinate system of the parent. More...;  ; void printInternal (std::ostream &) const;  Print the internal values (i.e. using Featherstone's conventions, see class documentation) More...;  ; Time integration; Methods used in time integration . Transform & operator+= (const SpatialVector< TReal > &a);  ; Transform & operator+= (const Transform &a);  ; template<class Real2 > ; Transform & operator*= (Real2 a);  ; template<class Real2 > ; Transform operator* (Real2 a) const;  . Static Public Member Functions; static Transform identity ();  The identity transform (child = parent) More...;  . Friends; std::ostream & operator<< (std::ostream &out, const Transform &t);  ; std::istream & operator>> (std::istream &in, Transform &t);  read from an input stream More...;  . Attribute details. ◆ orientation_. template<class TReal > . Rot sofa::type::Transform< TReal >::orientation_. protected . child wrt parent . ◆ origin_. template<class TReal > . Vec sofa::type::Transform< TReal >::origin_. protected . parent wrt child . Constructor details. ◆ Transform() [1/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform. The default constructor does not initialize the transform. . ◆ Transform() [2/4",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html:4868,Integrability,integrat,integration,4868,";  ; Transform & operator*= (const Transform &f2);  Combine two transforms. If (*this) locates frame B (child) wrt frame A (parent) and if f2 locates frame C (child) wrt frame B (parent) then the result locates frame C wrt to Frame A. More...;  ; SpatialVector< TReal > CreateSpatialVector ();  ; SpatialVector< TReal > DTrans ();  ; SpatialVector< TReal > operator* (const SpatialVector< TReal > &sv) const;  ; SpatialVector< TReal > operator/ (const SpatialVector< TReal > &sv) const;  Project a spatial vector from parent to child (the inverse of operator *). This method computes (*this).inversed()*sv without inverting (*this). More...;  ; void writeOpenGlMatrix (double *m) const;  Write an OpenGL matrix encoding the transformation of the coordinate system of the child wrt the coordinate system of the parent. More...;  ; void printInternal (std::ostream &) const;  Print the internal values (i.e. using Featherstone's conventions, see class documentation) More...;  ; Time integration; Methods used in time integration . Transform & operator+= (const SpatialVector< TReal > &a);  ; Transform & operator+= (const Transform &a);  ; template<class Real2 > ; Transform & operator*= (Real2 a);  ; template<class Real2 > ; Transform operator* (Real2 a) const;  . Static Public Member Functions; static Transform identity ();  The identity transform (child = parent) More...;  . Friends; std::ostream & operator<< (std::ostream &out, const Transform &t);  ; std::istream & operator>> (std::istream &in, Transform &t);  read from an input stream More...;  . Attribute details. ◆ orientation_. template<class TReal > . Rot sofa::type::Transform< TReal >::orientation_. protected . child wrt parent . ◆ origin_. template<class TReal > . Vec sofa::type::Transform< TReal >::origin_. protected . parent wrt child . Constructor details. ◆ Transform() [1/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform. The default constructor does not initialize the transform. . ◆ Transform() [2/4",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html:6635,Integrability,integrat,integrated,6635,"rigin_. protected . parent wrt child . Constructor details. ◆ Transform() [1/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform. The default constructor does not initialize the transform. . ◆ Transform() [2/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const Vec & ; origin, . const Rot & ; orientation . ). Origin of the child in parent coordinates, orientation of the child wrt to parent. ; Define using standard conventions. . ◆ Transform() [3/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const Rot & ; q, . const Vec & ; o . ). WARNING: using Featherstone's conventions (see class documentation) ; Define using Featherstone's conventions. . ◆ Transform() [4/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const SpatialVector< TReal > & ; v). Origin of the child in the parent coordinate system and the orientation of the child wrt the parent (i.e. standard way) ; Define as a given SpatialVector integrated during one second. The spatial vector is given in parent coordinates.; Define child as a given SpatialVector<TReal> integrated during one second, starting from the parent (used for time integration). The spatial vector is given in parent coordinates. . Function details. ◆ backProjectPoint(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectPoint ; (; const Vec & ; pointInParent); const. Project point from parent coordinates to this coordinates. . ◆ backProjectVector(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectVector ; (; const Vec & ; vectorInParent); const. Projected a vector (i.e. a direction or a displacement) from parent coordinates to child coordinates. . ◆ clear(). template<class TReal > . void sofa::type::Transform< TReal >::clear. Reset this to identity. . ◆ CreateSpatialVector(). template<class TReal > . SpatialVector< TReal > sofa::type::Transform< TReal >::CreateSpatialVector. Project a spatial vect",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html:6762,Integrability,integrat,integrated,6762,"fault constructor does not initialize the transform. . ◆ Transform() [2/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const Vec & ; origin, . const Rot & ; orientation . ). Origin of the child in parent coordinates, orientation of the child wrt to parent. ; Define using standard conventions. . ◆ Transform() [3/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const Rot & ; q, . const Vec & ; o . ). WARNING: using Featherstone's conventions (see class documentation) ; Define using Featherstone's conventions. . ◆ Transform() [4/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const SpatialVector< TReal > & ; v). Origin of the child in the parent coordinate system and the orientation of the child wrt the parent (i.e. standard way) ; Define as a given SpatialVector integrated during one second. The spatial vector is given in parent coordinates.; Define child as a given SpatialVector<TReal> integrated during one second, starting from the parent (used for time integration). The spatial vector is given in parent coordinates. . Function details. ◆ backProjectPoint(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectPoint ; (; const Vec & ; pointInParent); const. Project point from parent coordinates to this coordinates. . ◆ backProjectVector(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectVector ; (; const Vec & ; vectorInParent); const. Projected a vector (i.e. a direction or a displacement) from parent coordinates to child coordinates. . ◆ clear(). template<class TReal > . void sofa::type::Transform< TReal >::clear. Reset this to identity. . ◆ CreateSpatialVector(). template<class TReal > . SpatialVector< TReal > sofa::type::Transform< TReal >::CreateSpatialVector. Project a spatial vector from child to parent TODO One should handle differently the transformation of a twist and a wrench ! This applying the adjoint to velocities or its tran",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html:6832,Integrability,integrat,integration,6832,"fault constructor does not initialize the transform. . ◆ Transform() [2/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const Vec & ; origin, . const Rot & ; orientation . ). Origin of the child in parent coordinates, orientation of the child wrt to parent. ; Define using standard conventions. . ◆ Transform() [3/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const Rot & ; q, . const Vec & ; o . ). WARNING: using Featherstone's conventions (see class documentation) ; Define using Featherstone's conventions. . ◆ Transform() [4/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const SpatialVector< TReal > & ; v). Origin of the child in the parent coordinate system and the orientation of the child wrt the parent (i.e. standard way) ; Define as a given SpatialVector integrated during one second. The spatial vector is given in parent coordinates.; Define child as a given SpatialVector<TReal> integrated during one second, starting from the parent (used for time integration). The spatial vector is given in parent coordinates. . Function details. ◆ backProjectPoint(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectPoint ; (; const Vec & ; pointInParent); const. Project point from parent coordinates to this coordinates. . ◆ backProjectVector(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectVector ; (; const Vec & ; vectorInParent); const. Projected a vector (i.e. a direction or a displacement) from parent coordinates to child coordinates. . ◆ clear(). template<class TReal > . void sofa::type::Transform< TReal >::clear. Reset this to identity. . ◆ CreateSpatialVector(). template<class TReal > . SpatialVector< TReal > sofa::type::Transform< TReal >::CreateSpatialVector. Project a spatial vector from child to parent TODO One should handle differently the transformation of a twist and a wrench ! This applying the adjoint to velocities or its tran",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html:11004,Integrability,integrat,integration,11004,"ne two transforms. If (*this) locates frame B (child) wrt frame A (parent) and if f2 locates frame C (child) wrt frame B (parent) then the result locates frame C wrt to Frame A. . ◆ operator*() [3/3]. template<class TReal > . template<class Real2 > . Transform sofa::type::Transform< TReal >::operator* ; (; Real2 ; a); const. inline . ◆ operator*=() [1/2]. template<class TReal > . Transform< TReal > & sofa::type::Transform< TReal >::operator*= ; (; const Transform< TReal > & ; f2). Combine two transforms. If (*this) locates frame B (child) wrt frame A (parent) and if f2 locates frame C (child) wrt frame B (parent) then the result locates frame C wrt to Frame A. . ◆ operator*=() [2/2]. template<class TReal > . template<class Real2 > . Transform& sofa::type::Transform< TReal >::operator*= ; (; Real2 ; a). inline . ◆ operator+=() [1/2]. template<class TReal > . Transform< TReal > & sofa::type::Transform< TReal >::operator+= ; (; const SpatialVector< TReal > & ; a). (this) *= Transform(v) Used for time integration. SHOULD WE RATHER APPLY (*this)=Transform(v)(*this) ??? . ◆ operator+=() [2/2]. template<class TReal > . Transform< TReal > & sofa::type::Transform< TReal >::operator+= ; (; const Transform< TReal > & ; a). ◆ operator/(). template<class TReal > . SpatialVector< TReal > sofa::type::Transform< TReal >::operator/ ; (; const SpatialVector< TReal > & ; sv); const. Project a spatial vector from parent to child (the inverse of operator *). This method computes (*this).inversed()*sv without inverting (*this). . ◆ printInternal(). template<class TReal > . void sofa::type::Transform< TReal >::printInternal ; (; std::ostream & ; out); const. Print the internal values (i.e. using Featherstone's conventions, see class documentation) . ◆ projectPoint(). template<class TReal > . auto sofa::type::Transform< TReal >::projectPoint ; (; const Vec & ; pointInChild); const. Project a point from child coordinates to parent coordinates. . ◆ projectVector(). template<class TReal > . T",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html:1721,Usability,clear,clear,1721,"M in parent given the coordinates M_c of the same point in child are given by: M_p = orientation * ( M_c - origin ). This is due to Featherstone's conventions. Use method setTranslationRotation( const Vec& t, const Rot& q ) to model the Transform the standard way (i.e. translation given in the parent frame). . Protected Attributes; Rot orientation_;  child wrt parent More...;  ; Vec origin_;  parent wrt child More...;  . Public Member Functions;  Transform ();  The default constructor does not initialize the transform. More...;  ;  Transform (const Vec &origin, const Rot &orientation);  Origin of the child in parent coordinates, orientation of the child wrt to parent. More...;  ;  Transform (const Rot &q, const Vec &o);  WARNING: using Featherstone's conventions (see class documentation) More...;  ; void set (const Vec &t, const Rot &q);  Origin of the child in the parent coordinate system and the orientation of the child wrt the parent (i.e. standard way) More...;  ; void clear ();  Reset this to identity. More...;  ;  Transform (const SpatialVector< TReal > &v);  Origin of the child in the parent coordinate system and the orientation of the child wrt the parent (i.e. standard way) More...;  ; Transform inversed () const;  The inverse transform i.e. parent wrt child. More...;  ; const Vec & getOriginOfParentInChild () const;  Parent origin in child coordinates (the way it is actually stored internally) More...;  ; Vec getOrigin () const;  Origin of child in parent coordinates. More...;  ; void setOrigin (const Vec &);  Origin of child in parent coordinates. More...;  ; const Rot & getOrientation () const;  Orientation of the child coordinate axes wrt the parent coordinate axes. More...;  ; void setOrientation (const Rot &);  Orientation of the child coordinate axes wrt the parent coordinate axes. More...;  ; Mat3x3 getRotationMatrix () const;  Matrix which projects vectors from child coordinates to parent coordinates. The columns of the matrix are the axes of the c",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html:7373,Usability,clear,clear,7373,"plate<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const SpatialVector< TReal > & ; v). Origin of the child in the parent coordinate system and the orientation of the child wrt the parent (i.e. standard way) ; Define as a given SpatialVector integrated during one second. The spatial vector is given in parent coordinates.; Define child as a given SpatialVector<TReal> integrated during one second, starting from the parent (used for time integration). The spatial vector is given in parent coordinates. . Function details. ◆ backProjectPoint(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectPoint ; (; const Vec & ; pointInParent); const. Project point from parent coordinates to this coordinates. . ◆ backProjectVector(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectVector ; (; const Vec & ; vectorInParent); const. Projected a vector (i.e. a direction or a displacement) from parent coordinates to child coordinates. . ◆ clear(). template<class TReal > . void sofa::type::Transform< TReal >::clear. Reset this to identity. . ◆ CreateSpatialVector(). template<class TReal > . SpatialVector< TReal > sofa::type::Transform< TReal >::CreateSpatialVector. Project a spatial vector from child to parent TODO One should handle differently the transformation of a twist and a wrench ! This applying the adjoint to velocities or its transpose to wrench : V_parent = Ad . V_child or W_child = Ad^T . W_parent To project a wrench in the child frame to the parent frame you need to do parent_wrench = this->inversed * child_wrench (this doc needs to be douv-ble checked !) . ◆ DTrans(). template<class TReal > . SpatialVector< TReal > sofa::type::Transform< TReal >::DTrans. ◆ getAdjointMatrix(). template<class TReal > . auto sofa::type::Transform< TReal >::getAdjointMatrix. Adjoint matrix to the transform This matrix transports velocities in twist coordinates from the child frame to the parent frame. Its inverse transpose does the",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html:7444,Usability,clear,clear,7444,":Transform ; (; const SpatialVector< TReal > & ; v). Origin of the child in the parent coordinate system and the orientation of the child wrt the parent (i.e. standard way) ; Define as a given SpatialVector integrated during one second. The spatial vector is given in parent coordinates.; Define child as a given SpatialVector<TReal> integrated during one second, starting from the parent (used for time integration). The spatial vector is given in parent coordinates. . Function details. ◆ backProjectPoint(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectPoint ; (; const Vec & ; pointInParent); const. Project point from parent coordinates to this coordinates. . ◆ backProjectVector(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectVector ; (; const Vec & ; vectorInParent); const. Projected a vector (i.e. a direction or a displacement) from parent coordinates to child coordinates. . ◆ clear(). template<class TReal > . void sofa::type::Transform< TReal >::clear. Reset this to identity. . ◆ CreateSpatialVector(). template<class TReal > . SpatialVector< TReal > sofa::type::Transform< TReal >::CreateSpatialVector. Project a spatial vector from child to parent TODO One should handle differently the transformation of a twist and a wrench ! This applying the adjoint to velocities or its transpose to wrench : V_parent = Ad . V_child or W_child = Ad^T . W_parent To project a wrench in the child frame to the parent frame you need to do parent_wrench = this->inversed * child_wrench (this doc needs to be douv-ble checked !) . ◆ DTrans(). template<class TReal > . SpatialVector< TReal > sofa::type::Transform< TReal >::DTrans. ◆ getAdjointMatrix(). template<class TReal > . auto sofa::type::Transform< TReal >::getAdjointMatrix. Adjoint matrix to the transform This matrix transports velocities in twist coordinates from the child frame to the parent frame. Its inverse transpose does the same for the wrenches. . ◆ getOrientation(). templa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_t_bounding_box-members.html:238,Modifiability,inherit,inherited,238,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::TBoundingBox< TReal > Member List . This is the complete list of members for sofa::type::TBoundingBox< TReal >, including all inherited members. bboxsofa::type::BoundingBoxprotected; bbox_t typedefsofa::type::BoundingBox; BoundingBox()sofa::type::BoundingBox; BoundingBox(const sofa::type::Vec3 &minBBox, const sofa::type::Vec3 &maxBBox)sofa::type::BoundingBox; BoundingBox(const bbox_t &bbox)sofa::type::BoundingBox; BoundingBox(SReal xmin, SReal xmax, SReal ymin, SReal ymax, SReal zmin, SReal zmax)sofa::type::BoundingBox; BoundingBox(const Vec6f &bbox)sofa::type::BoundingBox; BoundingBox(const Vec6d &bbox)sofa::type::BoundingBox; contains(const sofa::type::Vec3 &point) constsofa::type::BoundingBox; contains(const BoundingBox &other) constsofa::type::BoundingBox; getInclude(const sofa::type::Vec3 &point) constsofa::type::BoundingBox; getInclude(const BoundingBox &other) constsofa::type::BoundingBox; getInflate(SReal amount) constsofa::type::BoundingBox; getIntersection(const BoundingBox &other) constsofa::type::BoundingBox; include(const sofa::type::Vec3 &point)sofa::type::BoundingBox; include(const BoundingBox &other)sofa::type::BoundingBox; inflate(SReal amount)sofa::type::BoundingBox; intersect(const BoundingBox &other) constsofa::type::BoundingBox; intersection(const BoundingBox &other)sofa::type::BoundingBox; invalidate()sofa::type::BoundingBox; isFlat() constsofa::type::BoundingBox; isNegligeable() constsofa::type::BoundingBox; isNull() constsofa::type::BoundingBox; isValid() constsofa::type::BoundingBox; maxBBox() constsofa::type::BoundingBox; maxBBox()sofa::type::BoundingBox; maxBBoxPtr()sofa::type::BoundingBox; maxBBoxPtr() constsofa::type::BoundingBox; minBBox() constsofa::type::BoundingBox; minBBox()sofa::type::BoundingBox; minBBoxPtr()sofa::type::BoundingBox; minBBoxPtr() constsofa::type::BoundingBox; neutral_bbox()sofa::type::BoundingBoxstatic; op",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_t_bounding_box-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_t_bounding_box-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_t_bounding_box.html:283,Modifiability,Inherit,Inheritance,283,"﻿. SOFA API: sofa::type::TBoundingBox< TReal > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::type::TBoundingBox< TReal > Class Template Reference . #include <BoundingBox.h>. Inheritance diagram for sofa::type::TBoundingBox< TReal >:. [legend]. Public Member Functions;  TBoundingBox (const TReal *minBBoxPtr, const TReal *maxBBoxPtr);  ;  TBoundingBox ();  ;  Public Member Functions inherited from sofa::type::BoundingBox;  BoundingBox ();  ;  BoundingBox (const sofa::type::Vec3 &minBBox, const sofa::type::Vec3 &maxBBox);  Define using the endpoints of the main diagonal. More...;  ;  BoundingBox (const bbox_t &bbox);  ;  BoundingBox (SReal xmin, SReal xmax, SReal ymin, SReal ymax, SReal zmin, SReal zmax);  Define using xmin, xmax, ymin, ymax, zmin, zmax in this order. More...;  ;  BoundingBox (const Vec6f &bbox);  Define using xmin, xmax, ymin, ymax, zmin, zmax in this order. More...;  ;  BoundingBox (const Vec6d &bbox);  Define using xmin, xmax, ymin, ymax, zmin, zmax in this order. More...;  ;  operator bbox_t () const;  ; void invalidate ();  ; bool isValid () const;  ; bool isFlat () const;  ; bool isNegligeable () const;  ; bool isNull () const;  ; SReal * minBBoxPtr ();  ; SReal * maxBBoxPtr ();  ; const SReal * minBBoxPtr () const;  ; const SReal * maxBBoxPtr () const;  ; const sofa::type::Vec3 & minBBox () const;  ; const sofa::type::Vec3 & maxBBox () const;  ; sofa::type::Vec3 & minBBox ();  ; sofa::type::Vec3 & maxBBox ();  ; bool contains (const sofa::type::Vec3 &point) const;  ; bool contains (const BoundingBox &other) const;  ; bool intersect (const BoundingBox &other) const;  ; void intersection (const BoundingBox &other);  ; void include (const sofa::type::Vec3 &point);  ; void include (const BoundingBox &other);  ; void inflate (SReal amount);  ; BoundingBox getIntersection (const BoundingBox &other) const;  ; BoundingBox getInclude (const sofa::t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_t_bounding_box.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_t_bounding_box.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_t_bounding_box.html:493,Modifiability,inherit,inherited,493,"﻿. SOFA API: sofa::type::TBoundingBox< TReal > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::type::TBoundingBox< TReal > Class Template Reference . #include <BoundingBox.h>. Inheritance diagram for sofa::type::TBoundingBox< TReal >:. [legend]. Public Member Functions;  TBoundingBox (const TReal *minBBoxPtr, const TReal *maxBBoxPtr);  ;  TBoundingBox ();  ;  Public Member Functions inherited from sofa::type::BoundingBox;  BoundingBox ();  ;  BoundingBox (const sofa::type::Vec3 &minBBox, const sofa::type::Vec3 &maxBBox);  Define using the endpoints of the main diagonal. More...;  ;  BoundingBox (const bbox_t &bbox);  ;  BoundingBox (SReal xmin, SReal xmax, SReal ymin, SReal ymax, SReal zmin, SReal zmax);  Define using xmin, xmax, ymin, ymax, zmin, zmax in this order. More...;  ;  BoundingBox (const Vec6f &bbox);  Define using xmin, xmax, ymin, ymax, zmin, zmax in this order. More...;  ;  BoundingBox (const Vec6d &bbox);  Define using xmin, xmax, ymin, ymax, zmin, zmax in this order. More...;  ;  operator bbox_t () const;  ; void invalidate ();  ; bool isValid () const;  ; bool isFlat () const;  ; bool isNegligeable () const;  ; bool isNull () const;  ; SReal * minBBoxPtr ();  ; SReal * maxBBoxPtr ();  ; const SReal * minBBoxPtr () const;  ; const SReal * maxBBoxPtr () const;  ; const sofa::type::Vec3 & minBBox () const;  ; const sofa::type::Vec3 & maxBBox () const;  ; sofa::type::Vec3 & minBBox ();  ; sofa::type::Vec3 & maxBBox ();  ; bool contains (const sofa::type::Vec3 &point) const;  ; bool contains (const BoundingBox &other) const;  ; bool intersect (const BoundingBox &other) const;  ; void intersection (const BoundingBox &other);  ; void include (const sofa::type::Vec3 &point);  ; void include (const BoundingBox &other);  ; void inflate (SReal amount);  ; BoundingBox getIntersection (const BoundingBox &other) const;  ; BoundingBox getInclude (const sofa::t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_t_bounding_box.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_t_bounding_box.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_t_bounding_box.html:2148,Modifiability,Inherit,Inherited,2148,"xmin, SReal xmax, SReal ymin, SReal ymax, SReal zmin, SReal zmax);  Define using xmin, xmax, ymin, ymax, zmin, zmax in this order. More...;  ;  BoundingBox (const Vec6f &bbox);  Define using xmin, xmax, ymin, ymax, zmin, zmax in this order. More...;  ;  BoundingBox (const Vec6d &bbox);  Define using xmin, xmax, ymin, ymax, zmin, zmax in this order. More...;  ;  operator bbox_t () const;  ; void invalidate ();  ; bool isValid () const;  ; bool isFlat () const;  ; bool isNegligeable () const;  ; bool isNull () const;  ; SReal * minBBoxPtr ();  ; SReal * maxBBoxPtr ();  ; const SReal * minBBoxPtr () const;  ; const SReal * maxBBoxPtr () const;  ; const sofa::type::Vec3 & minBBox () const;  ; const sofa::type::Vec3 & maxBBox () const;  ; sofa::type::Vec3 & minBBox ();  ; sofa::type::Vec3 & maxBBox ();  ; bool contains (const sofa::type::Vec3 &point) const;  ; bool contains (const BoundingBox &other) const;  ; bool intersect (const BoundingBox &other) const;  ; void intersection (const BoundingBox &other);  ; void include (const sofa::type::Vec3 &point);  ; void include (const BoundingBox &other);  ; void inflate (SReal amount);  ; BoundingBox getIntersection (const BoundingBox &other) const;  ; BoundingBox getInclude (const sofa::type::Vec3 &point) const;  ; BoundingBox getInclude (const BoundingBox &other) const;  ; BoundingBox getInflate (SReal amount) const;  . Additional Inherited Members;  Protected Attributes inherited from sofa::type::BoundingBox; bbox_t bbox;  ;  Static Public Member Functions inherited from sofa::type::BoundingBox; static BoundingBox neutral_bbox ();  . Constructor details. ◆ TBoundingBox() [1/2]. template<typename TReal > . sofa::type::TBoundingBox< TReal >::TBoundingBox ; (; const TReal * ; minBBoxPtr, . const TReal * ; maxBBoxPtr . ). inline . ◆ TBoundingBox() [2/2]. template<typename TReal > . sofa::type::TBoundingBox< TReal >::TBoundingBox ; (; ). inline . sofatypeTBoundingBox; Generated on Mon Nov 11 2024 03:36:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_t_bounding_box.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_t_bounding_box.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_t_bounding_box.html:2189,Modifiability,inherit,inherited,2189,"xmin, SReal xmax, SReal ymin, SReal ymax, SReal zmin, SReal zmax);  Define using xmin, xmax, ymin, ymax, zmin, zmax in this order. More...;  ;  BoundingBox (const Vec6f &bbox);  Define using xmin, xmax, ymin, ymax, zmin, zmax in this order. More...;  ;  BoundingBox (const Vec6d &bbox);  Define using xmin, xmax, ymin, ymax, zmin, zmax in this order. More...;  ;  operator bbox_t () const;  ; void invalidate ();  ; bool isValid () const;  ; bool isFlat () const;  ; bool isNegligeable () const;  ; bool isNull () const;  ; SReal * minBBoxPtr ();  ; SReal * maxBBoxPtr ();  ; const SReal * minBBoxPtr () const;  ; const SReal * maxBBoxPtr () const;  ; const sofa::type::Vec3 & minBBox () const;  ; const sofa::type::Vec3 & maxBBox () const;  ; sofa::type::Vec3 & minBBox ();  ; sofa::type::Vec3 & maxBBox ();  ; bool contains (const sofa::type::Vec3 &point) const;  ; bool contains (const BoundingBox &other) const;  ; bool intersect (const BoundingBox &other) const;  ; void intersection (const BoundingBox &other);  ; void include (const sofa::type::Vec3 &point);  ; void include (const BoundingBox &other);  ; void inflate (SReal amount);  ; BoundingBox getIntersection (const BoundingBox &other) const;  ; BoundingBox getInclude (const sofa::type::Vec3 &point) const;  ; BoundingBox getInclude (const BoundingBox &other) const;  ; BoundingBox getInflate (SReal amount) const;  . Additional Inherited Members;  Protected Attributes inherited from sofa::type::BoundingBox; bbox_t bbox;  ;  Static Public Member Functions inherited from sofa::type::BoundingBox; static BoundingBox neutral_bbox ();  . Constructor details. ◆ TBoundingBox() [1/2]. template<typename TReal > . sofa::type::TBoundingBox< TReal >::TBoundingBox ; (; const TReal * ; minBBoxPtr, . const TReal * ; maxBBoxPtr . ). inline . ◆ TBoundingBox() [2/2]. template<typename TReal > . sofa::type::TBoundingBox< TReal >::TBoundingBox ; (; ). inline . sofatypeTBoundingBox; Generated on Mon Nov 11 2024 03:36:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_t_bounding_box.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_t_bounding_box.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_t_bounding_box.html:2277,Modifiability,inherit,inherited,2277,"xmin, SReal xmax, SReal ymin, SReal ymax, SReal zmin, SReal zmax);  Define using xmin, xmax, ymin, ymax, zmin, zmax in this order. More...;  ;  BoundingBox (const Vec6f &bbox);  Define using xmin, xmax, ymin, ymax, zmin, zmax in this order. More...;  ;  BoundingBox (const Vec6d &bbox);  Define using xmin, xmax, ymin, ymax, zmin, zmax in this order. More...;  ;  operator bbox_t () const;  ; void invalidate ();  ; bool isValid () const;  ; bool isFlat () const;  ; bool isNegligeable () const;  ; bool isNull () const;  ; SReal * minBBoxPtr ();  ; SReal * maxBBoxPtr ();  ; const SReal * minBBoxPtr () const;  ; const SReal * maxBBoxPtr () const;  ; const sofa::type::Vec3 & minBBox () const;  ; const sofa::type::Vec3 & maxBBox () const;  ; sofa::type::Vec3 & minBBox ();  ; sofa::type::Vec3 & maxBBox ();  ; bool contains (const sofa::type::Vec3 &point) const;  ; bool contains (const BoundingBox &other) const;  ; bool intersect (const BoundingBox &other) const;  ; void intersection (const BoundingBox &other);  ; void include (const sofa::type::Vec3 &point);  ; void include (const BoundingBox &other);  ; void inflate (SReal amount);  ; BoundingBox getIntersection (const BoundingBox &other) const;  ; BoundingBox getInclude (const sofa::type::Vec3 &point) const;  ; BoundingBox getInclude (const BoundingBox &other) const;  ; BoundingBox getInflate (SReal amount) const;  . Additional Inherited Members;  Protected Attributes inherited from sofa::type::BoundingBox; bbox_t bbox;  ;  Static Public Member Functions inherited from sofa::type::BoundingBox; static BoundingBox neutral_bbox ();  . Constructor details. ◆ TBoundingBox() [1/2]. template<typename TReal > . sofa::type::TBoundingBox< TReal >::TBoundingBox ; (; const TReal * ; minBBoxPtr, . const TReal * ; maxBBoxPtr . ). inline . ◆ TBoundingBox() [2/2]. template<typename TReal > . sofa::type::TBoundingBox< TReal >::TBoundingBox ; (; ). inline . sofatypeTBoundingBox; Generated on Mon Nov 11 2024 03:36:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_t_bounding_box.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_t_bounding_box.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec-members.html:234,Modifiability,inherit,inherited,234,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::Vec< N, ValueType > Member List . This is the complete list of members for sofa::type::Vec< N, ValueType >, including all inherited members. ArrayType typedefsofa::type::Vec< N, ValueType >; assign(const ValueType &value) noexceptsofa::type::Vec< N, ValueType >inline; back()sofa::type::Vec< N, ValueType >inline; back() constsofa::type::Vec< N, ValueType >inline; begin() noexceptsofa::type::Vec< N, ValueType >inline; begin() const noexceptsofa::type::Vec< N, ValueType >inline; clear() noexceptsofa::type::Vec< N, ValueType >inline; const_iterator typedefsofa::type::Vec< N, ValueType >; const_reference typedefsofa::type::Vec< N, ValueType >; cross(const Vec< 3, R > &b) const noexceptsofa::type::Vec< N, ValueType >inline; data() const noexceptsofa::type::Vec< N, ValueType >inline; difference_type typedefsofa::type::Vec< N, ValueType >; divscalar(const ValueType f) const noexceptsofa::type::Vec< N, ValueType >inline; divscalar(const real2 f) const noexceptsofa::type::Vec< N, ValueType >inline; elemssofa::type::Vec< N, ValueType >; end() noexceptsofa::type::Vec< N, ValueType >inline; end() const noexceptsofa::type::Vec< N, ValueType >inline; eqdivscalar(const ValueType f) noexceptsofa::type::Vec< N, ValueType >inline; eqdivscalar(const real2 f) noexceptsofa::type::Vec< N, ValueType >inline; eqmulscalar(const ValueType f) noexceptsofa::type::Vec< N, ValueType >inline; eqmulscalar(const real2 f) noexceptsofa::type::Vec< N, ValueType >inline; fill(ValueType r) noexceptsofa::type::Vec< N, ValueType >inline; front()sofa::type::Vec< N, ValueType >inline; front() constsofa::type::Vec< N, ValueType >inline; getsub(const Size i, Vec< N2, ValueType > &m) const noexceptsofa::type::Vec< N, ValueType >inline; getsub(const Size i, ValueType &m) const noexceptsofa::type::Vec< N, ValueType >inline; isNormalized(ValueType threshold=std::numeric_limits< ValueType >::epsilon() *(Va",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec-members.html:593,Usability,clear,clear,593," ArrayType typedefsofa::type::Vec< N, ValueType >; assign(const ValueType &value) noexceptsofa::type::Vec< N, ValueType >inline; back()sofa::type::Vec< N, ValueType >inline; back() constsofa::type::Vec< N, ValueType >inline; begin() noexceptsofa::type::Vec< N, ValueType >inline; begin() const noexceptsofa::type::Vec< N, ValueType >inline; clear() noexceptsofa::type::Vec< N, ValueType >inline; const_iterator typedefsofa::type::Vec< N, ValueType >; const_reference typedefsofa::type::Vec< N, ValueType >; cross(const Vec< 3, R > &b) const noexceptsofa::type::Vec< N, ValueType >inline; data() const noexceptsofa::type::Vec< N, ValueType >inline; difference_type typedefsofa::type::Vec< N, ValueType >; divscalar(const ValueType f) const noexceptsofa::type::Vec< N, ValueType >inline; divscalar(const real2 f) const noexceptsofa::type::Vec< N, ValueType >inline; elemssofa::type::Vec< N, ValueType >; end() noexceptsofa::type::Vec< N, ValueType >inline; end() const noexceptsofa::type::Vec< N, ValueType >inline; eqdivscalar(const ValueType f) noexceptsofa::type::Vec< N, ValueType >inline; eqdivscalar(const real2 f) noexceptsofa::type::Vec< N, ValueType >inline; eqmulscalar(const ValueType f) noexceptsofa::type::Vec< N, ValueType >inline; eqmulscalar(const real2 f) noexceptsofa::type::Vec< N, ValueType >inline; fill(ValueType r) noexceptsofa::type::Vec< N, ValueType >inline; front()sofa::type::Vec< N, ValueType >inline; front() constsofa::type::Vec< N, ValueType >inline; getsub(const Size i, Vec< N2, ValueType > &m) const noexceptsofa::type::Vec< N, ValueType >inline; getsub(const Size i, ValueType &m) const noexceptsofa::type::Vec< N, ValueType >inline; isNormalized(ValueType threshold=std::numeric_limits< ValueType >::epsilon() *(Va",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:354,Modifiability,Inherit,Inheritance,354,"﻿. SOFA API: sofa::type::Vec< N, ValueType > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Static Public Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::type::Vec< N, ValueType > Class Template Reference . #include <Vec.h>. Inheritance diagram for sofa::type::Vec< N, ValueType >:. [legend]. Public Attributes; ArrayType elems {};  . Static Public Attributes; static constexpr sofa::Size static_size = N;  ; static constexpr Size total_size = N;  Compile-time constant specifying the number of scalars within this vector (equivalent to static_size and size() method) More...;  ; static constexpr Size spatial_dimensions = N;  Compile-time constant specifying the number of dimensions of space (equivalent to total_size here) More...;  . Public Member Functions; constexpr Vec ()=default;  Default constructor: sets all values to 0. More...;  ; constexpr Vec (NoInit);  Fast constructor: no initialization. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr Vec (const ValueType r1) noexcept;  Specific constructor for 1-element vectors. More...;  ; template<typename... ArgsT, typename = std::enable_if_t< (std::is_convertible_v<ArgsT, ValueType> && ...) >, typename = std::enable_if_t< (sizeof...(ArgsT) == N && sizeof...(ArgsT) > 1) >> ; constexpr Vec (ArgsT &&... r) noexcept;  ; template<typename R , typename T , Size NN = N, typename std::enable_if< NN==6, int >::type = 0> ;  Vec (const Vec< 3, R > &a, const Vec< 3, T > &b);  Specific constructor for 6-elements vectors, taking two 3-elements vectors. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void set (const ValueType r1) noexcept;  Specific set function for 1-element vectors. More...;  ; template<typename... ArgsT, typename = std::enable_if_t< (std::is_convertible_v<ArgsT, ValueType> && ...) >, typename = std:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:3176,Security,access,access,3176,"te<Size N2, class real2 > ; constexpr void set (const Vec< N2, real2 > &v, ValueType defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; template<Size NN = N, typename std::enable_if<(NN >1), int >::type = 0> ; constexpr Vec (const Vec< N-1, ValueType > &v, ValueType r1) noexcept;  Constructor from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< ValueType, N > &p) noexcept;  ; template<Size N2, typename real2 > ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; template<typename real2 > ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; template<typename real2 > ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:3334,Security,access,access,3334,"en default value and ignored outside entries) More...;  ; template<Size NN = N, typename std::enable_if<(NN >1), int >::type = 0> ; constexpr Vec (const Vec< N-1, ValueType > &v, ValueType r1) noexcept;  Constructor from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< ValueType, N > &p) noexcept;  ; template<Size N2, typename real2 > ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; template<typename real2 > ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; template<typename real2 > ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::typ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:3493,Security,access,access,3493,"-1, ValueType > &v, ValueType r1) noexcept;  Constructor from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< ValueType, N > &p) noexcept;  ; template<Size N2, typename real2 > ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; template<typename real2 > ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; template<typename real2 > ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:3651,Security,access,access,3651,"nst sofa::type::fixed_array< ValueType, N > &p) noexcept;  ; template<Size N2, typename real2 > ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; template<typename real2 > ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; template<typename real2 > ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:3828,Security,access,access,3828,"a different size vector (null default value and ignoring outside entries) More...;  ; template<typename real2 > ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; template<typename real2 > ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typename real2 > ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; template<Size M, typename real2 > ; const",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:4004,Security,access,access,4004,"<typename real2 > ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typename real2 > ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; template<Size M, typename real2 > ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const ValueType &value) noexcept",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:4181,Security,access,access,4181,"e = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typename real2 > ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; template<Size M, typename real2 > ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const ValueType &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (ValueType r) noexcept;  Sets every element to r. More...;  ; constexpr ValueTy",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:4357,Security,access,access,4357," ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typename real2 > ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; template<Size M, typename real2 > ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const ValueType &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (ValueType r) noexcept;  Sets every element to r. More...;  ; constexpr ValueType & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const ValueType & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:5157,Security,Access,Access,5157,"ype & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typename real2 > ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; template<Size M, typename real2 > ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const ValueType &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (ValueType r) noexcept;  Sets every element to r. More...;  ; constexpr ValueType & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const ValueType & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const ValueType * ptr () const noexcept;  Cast into a const array of values. More...;  ; constexpr ValueType * ptr () noexcept;  Cast into an array of values. More...;  ; template<Size N2, std::enable_if_t<(N2< N), bool > = true> ; constexpr void getsub (const Size i, Vec< N2, ValueType > &m) const noexcept;  ; constexpr void getsub (const Size i, ValueType &m) const noexcept;  ; constexpr Vec< N, ValueType > mulscalar (const ValueType f) const noexcept;  ; template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> ; constexpr Vec< N, ValueType > mulscalar (const real2 f) const noexcept;  Multiplication by a scalar f. More...;  ; template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> ; constexpr Vec< N, ValueType > operator* (const real",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:5264,Security,access,access,5264,"N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typename real2 > ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; template<Size M, typename real2 > ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const ValueType &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (ValueType r) noexcept;  Sets every element to r. More...;  ; constexpr ValueType & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const ValueType & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const ValueType * ptr () const noexcept;  Cast into a const array of values. More...;  ; constexpr ValueType * ptr () noexcept;  Cast into an array of values. More...;  ; template<Size N2, std::enable_if_t<(N2< N), bool > = true> ; constexpr void getsub (const Size i, Vec< N2, ValueType > &m) const noexcept;  ; constexpr void getsub (const Size i, ValueType &m) const noexcept;  ; constexpr Vec< N, ValueType > mulscalar (const ValueType f) const noexcept;  ; template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> ; constexpr Vec< N, ValueType > mulscalar (const real2 f) const noexcept;  Multiplication by a scalar f. More...;  ; template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> ; constexpr Vec< N, ValueType > operator* (const real2 f) const noexcept;  ; constexpr void eqmulscalar (const ValueType f) noexcept;  In-place multipl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:22043,Security,access,access,22043,"ormalized(). template<sofa::Size N, typename ValueType > . Vec<N,ValueType> sofa::type::Vec< N, ValueType >::normalized ; (; ); const. inlinenoexcept . Return the normalized vector. Warning'this' is not normalized. . ◆ normalizeWithNorm(). template<sofa::Size N, typename ValueType > . constexpr bool sofa::type::Vec< N, ValueType >::normalizeWithNorm ; (; ValueType ; norm, . ValueType ; threshold = std::numeric_limits<ValueType>::epsilon() . ). inlineconstexprnoexcept . Normalize the vector taking advantage of its already computed norm, equivalent to /=norm returns false iff the norm is too small . ◆ operator!=(). template<sofa::Size N, typename ValueType > . constexpr bool sofa::type::Vec< N, ValueType >::operator!= ; (; const Vec< N, ValueType > & ; b); const. inlineconstexprnoexcept . ◆ operator()() [1/2]. template<sofa::Size N, typename ValueType > . constexpr const ValueType& sofa::type::Vec< N, ValueType >::operator() ; (; Size ; i); const. inlineconstexprnoexcept . Const access to i-th element. . ◆ operator()() [2/2]. template<sofa::Size N, typename ValueType > . constexpr ValueType& sofa::type::Vec< N, ValueType >::operator() ; (; Size ; i). inlineconstexprnoexcept . Access to i-th element. . ◆ operator*() [1/2]. template<sofa::Size N, typename ValueType > . template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> . constexpr Vec<N,ValueType> sofa::type::Vec< N, ValueType >::operator* ; (; const real2 ; f); const. inlineconstexprnoexcept . ◆ operator*() [2/2]. template<sofa::Size N, typename ValueType > . template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> . constexpr ValueType sofa::type::Vec< N, ValueType >::operator* ; (; const Vec< N, real2 > & ; v); const. inlineconstexprnoexcept . Dot product. . ◆ operator*=(). template<sofa::Size N, typename ValueType > . template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> . constexpr ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:22244,Security,Access,Access,22244,"ormalized. . ◆ normalizeWithNorm(). template<sofa::Size N, typename ValueType > . constexpr bool sofa::type::Vec< N, ValueType >::normalizeWithNorm ; (; ValueType ; norm, . ValueType ; threshold = std::numeric_limits<ValueType>::epsilon() . ). inlineconstexprnoexcept . Normalize the vector taking advantage of its already computed norm, equivalent to /=norm returns false iff the norm is too small . ◆ operator!=(). template<sofa::Size N, typename ValueType > . constexpr bool sofa::type::Vec< N, ValueType >::operator!= ; (; const Vec< N, ValueType > & ; b); const. inlineconstexprnoexcept . ◆ operator()() [1/2]. template<sofa::Size N, typename ValueType > . constexpr const ValueType& sofa::type::Vec< N, ValueType >::operator() ; (; Size ; i); const. inlineconstexprnoexcept . Const access to i-th element. . ◆ operator()() [2/2]. template<sofa::Size N, typename ValueType > . constexpr ValueType& sofa::type::Vec< N, ValueType >::operator() ; (; Size ; i). inlineconstexprnoexcept . Access to i-th element. . ◆ operator*() [1/2]. template<sofa::Size N, typename ValueType > . template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> . constexpr Vec<N,ValueType> sofa::type::Vec< N, ValueType >::operator* ; (; const real2 ; f); const. inlineconstexprnoexcept . ◆ operator*() [2/2]. template<sofa::Size N, typename ValueType > . template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> . constexpr ValueType sofa::type::Vec< N, ValueType >::operator* ; (; const Vec< N, real2 > & ; v); const. inlineconstexprnoexcept . Dot product. . ◆ operator*=(). template<sofa::Size N, typename ValueType > . template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> . constexpr void sofa::type::Vec< N, ValueType >::operator*= ; (; const real2 ; f). inlineconstexprnoexcept . ◆ operator+(). template<sofa::Size N, typename ValueType > . template<class real2 , std::enable_if_t< std:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:28620,Security,access,access,28620,"except . Specific set function for 1-element vectors. . ◆ set() [3/3]. template<sofa::Size N, typename ValueType > . template<Size N2, class real2 > . constexpr void sofa::type::Vec< N, ValueType >::set ; (; const Vec< N2, real2 > & ; v, . ValueType ; defaultvalue = 0 . ). inlineconstexprnoexcept . Specific set from a different size vector (given default value and ignored outside entries) . ◆ size(). template<sofa::Size N, typename ValueType > . static constexpr sofa::Size sofa::type::Vec< N, ValueType >::size ; (; void ; ). inlinestaticconstexpr . ◆ sum(). template<sofa::Size N, typename ValueType > . constexpr ValueType sofa::type::Vec< N, ValueType >::sum ; (; ); const. inlineconstexprnoexcept . sum of all elements of the vector . ◆ w() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::w ; (; ); const. inlineconstexprnoexcept . Special const access to fourth element. . ◆ w() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::w ; (; ). inlineconstexprnoexcept . Special access to fourth element. . ◆ x() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::x ; (; ); const. inlineconstexprnoexcept . Special const access to first element. . ◆ x() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::x ; (; ). inlineconstexprnoexcept . Special access to first element. . ◆ y() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N,",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:28880,Security,access,access,28880,"e = 0 . ). inlineconstexprnoexcept . Specific set from a different size vector (given default value and ignored outside entries) . ◆ size(). template<sofa::Size N, typename ValueType > . static constexpr sofa::Size sofa::type::Vec< N, ValueType >::size ; (; void ; ). inlinestaticconstexpr . ◆ sum(). template<sofa::Size N, typename ValueType > . constexpr ValueType sofa::type::Vec< N, ValueType >::sum ; (; ); const. inlineconstexprnoexcept . sum of all elements of the vector . ◆ w() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::w ; (; ); const. inlineconstexprnoexcept . Special const access to fourth element. . ◆ w() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::w ; (; ). inlineconstexprnoexcept . Special access to fourth element. . ◆ x() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::x ; (; ); const. inlineconstexprnoexcept . Special const access to first element. . ◆ x() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::x ; (; ). inlineconstexprnoexcept . Special access to first element. . ◆ y() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::y ; (; ); const. inlineconstexprnoexcept . Special const access to second element. . ◆ y() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr ValueType& sofa::typ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:29159,Security,access,access,29159,"taticconstexpr . ◆ sum(). template<sofa::Size N, typename ValueType > . constexpr ValueType sofa::type::Vec< N, ValueType >::sum ; (; ); const. inlineconstexprnoexcept . sum of all elements of the vector . ◆ w() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::w ; (; ); const. inlineconstexprnoexcept . Special const access to fourth element. . ◆ w() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::w ; (; ). inlineconstexprnoexcept . Special access to fourth element. . ◆ x() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::x ; (; ); const. inlineconstexprnoexcept . Special const access to first element. . ◆ x() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::x ; (; ). inlineconstexprnoexcept . Special access to first element. . ◆ y() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::y ; (; ); const. inlineconstexprnoexcept . Special const access to second element. . ◆ y() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::y ; (; ). inlineconstexprnoexcept . Special access to second element. . ◆ z() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N,",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:29418,Security,access,access,29418," . template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::w ; (; ); const. inlineconstexprnoexcept . Special const access to fourth element. . ◆ w() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::w ; (; ). inlineconstexprnoexcept . Special access to fourth element. . ◆ x() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::x ; (; ); const. inlineconstexprnoexcept . Special const access to first element. . ◆ x() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::x ; (; ). inlineconstexprnoexcept . Special access to first element. . ◆ y() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::y ; (; ); const. inlineconstexprnoexcept . Special const access to second element. . ◆ y() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::y ; (; ). inlineconstexprnoexcept . Special access to second element. . ◆ z() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::z ; (; ); const. inlineconstexprnoexcept . Special const access to third element. . ◆ z() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> . constexpr ValueType& sofa::typ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:29696,Security,access,access,29696,"oexcept . Special const access to fourth element. . ◆ w() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::w ; (; ). inlineconstexprnoexcept . Special access to fourth element. . ◆ x() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::x ; (; ); const. inlineconstexprnoexcept . Special const access to first element. . ◆ x() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::x ; (; ). inlineconstexprnoexcept . Special access to first element. . ◆ y() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::y ; (; ); const. inlineconstexprnoexcept . Special const access to second element. . ◆ y() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::y ; (; ). inlineconstexprnoexcept . Special access to second element. . ◆ z() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::z ; (; ); const. inlineconstexprnoexcept . Special const access to third element. . ◆ z() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::z ; (; ). inlineconstexprnoexcept . Special access to third element. . sofatypeVec; Generated on Mon Nov 11 2024 03:36:05 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:29956,Security,access,access,29956,"oexcept . Special const access to fourth element. . ◆ w() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::w ; (; ). inlineconstexprnoexcept . Special access to fourth element. . ◆ x() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::x ; (; ); const. inlineconstexprnoexcept . Special const access to first element. . ◆ x() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::x ; (; ). inlineconstexprnoexcept . Special access to first element. . ◆ y() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::y ; (; ); const. inlineconstexprnoexcept . Special const access to second element. . ◆ y() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::y ; (; ). inlineconstexprnoexcept . Special access to second element. . ◆ z() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::z ; (; ); const. inlineconstexprnoexcept . Special const access to third element. . ◆ z() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::z ; (; ). inlineconstexprnoexcept . Special access to third element. . sofatypeVec; Generated on Mon Nov 11 2024 03:36:05 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:30235,Security,access,access,30235,"oexcept . Special const access to fourth element. . ◆ w() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::w ; (; ). inlineconstexprnoexcept . Special access to fourth element. . ◆ x() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::x ; (; ); const. inlineconstexprnoexcept . Special const access to first element. . ◆ x() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::x ; (; ). inlineconstexprnoexcept . Special access to first element. . ◆ y() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::y ; (; ); const. inlineconstexprnoexcept . Special const access to second element. . ◆ y() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::y ; (; ). inlineconstexprnoexcept . Special access to second element. . ◆ z() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::z ; (; ); const. inlineconstexprnoexcept . Special const access to third element. . ◆ z() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::z ; (; ). inlineconstexprnoexcept . Special access to third element. . sofatypeVec; Generated on Mon Nov 11 2024 03:36:05 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:30494,Security,access,access,30494,"oexcept . Special const access to fourth element. . ◆ w() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::w ; (; ). inlineconstexprnoexcept . Special access to fourth element. . ◆ x() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::x ; (; ); const. inlineconstexprnoexcept . Special const access to first element. . ◆ x() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::x ; (; ). inlineconstexprnoexcept . Special access to first element. . ◆ y() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::y ; (; ); const. inlineconstexprnoexcept . Special const access to second element. . ◆ y() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::y ; (; ). inlineconstexprnoexcept . Special access to second element. . ◆ z() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::z ; (; ); const. inlineconstexprnoexcept . Special const access to third element. . ◆ z() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::z ; (; ). inlineconstexprnoexcept . Special access to third element. . sofatypeVec; Generated on Mon Nov 11 2024 03:36:05 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:10074,Testability,Test,Tests,10074," >::epsilon()) noexcept;  ; bool normalize (ValueType threshold=std::numeric_limits< ValueType >::epsilon()) noexcept;  ; void normalize (Vec< N, ValueType > failsafe, ValueType threshold=std::numeric_limits< ValueType >::epsilon()) noexcept;  ; Vec< N, ValueType > normalized () const noexcept;  ; bool isNormalized (ValueType threshold=std::numeric_limits< ValueType >::epsilon() *(ValueType) 10) const;  return true if norm()==1 More...;  ; template<typename R , Size NN = N, typename std::enable_if<(NN==3), int >::type = 0> ; constexpr Vec cross (const Vec< 3, R > &b) const noexcept;  ; constexpr ValueType sum () const noexcept;  sum of all elements of the vector More...;  ; Tests operators; constexpr bool operator== (const Vec &b) const noexcept;  ; constexpr bool operator!= (const Vec &b) const noexcept;  ; constexpr reference operator[] (size_type i);  ; constexpr const_reference operator[] (size_type i) const;  ; constexpr const ValueType * data () const noexcept;  ; constexpr iterator begin () noexcept;  ; constexpr const_iterator begin () const noexcept;  ; constexpr iterator end () noexcept;  ; constexpr const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  . Static Public Member Functions; static constexpr sofa::Size size ();  . Attribute details. ◆ elems. template<sofa::Size N, typename ValueType > . ArrayType sofa::type::Vec< N, ValueType >::elems {}. ◆ spatial_dimensions. template<sofa::Size N, typename ValueType > . constexpr Size sofa::type::Vec< N, ValueType >::spatial_dimensions = N. staticconstexpr . Compile-time constant specifying the number of dimensions of space (equivalent to total_size here) . ◆ static_size. template<sofa::Size N, typename ValueType > . constexpr sofa::Size sofa::type::Vec< N, ValueType >::static_size = N. staticconstexpr . ◆ total_size. template<sofa::Size N, typename ValueType > . constexpr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:4965,Usability,clear,clear,4965,"pr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typename real2 > ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; template<Size M, typename real2 > ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const ValueType &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (ValueType r) noexcept;  Sets every element to r. More...;  ; constexpr ValueType & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const ValueType & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const ValueType * ptr () const noexcept;  Cast into a const array of values. More...;  ; constexpr ValueType * ptr () noexcept;  Cast into an array of values. More...;  ; template<Size N2, std::enable_if_t<(N2< N), bool > = true> ; constexpr void getsub (const Size i, Vec< N2, ValueType > &m) const noexcept;  ; constexpr void getsub (const Size i, ValueType &m) const noexcept;  ; constexpr Vec< N, ValueType > mulscalar (const ValueType f) const noexcept;  ; template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> ; constexpr Vec< N, ValueType > mulscalar (const real2 f) const noexcept;  M",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:15078,Usability,clear,clear,15078," > . template<typename real2 > . constexpr sofa::type::Vec< N, ValueType >::Vec ; (; const real2 * ; p). inlineexplicitconstexprnoexcept . Constructor from an array of values. . Function details. ◆ assign(). template<sofa::Size N, typename ValueType > . constexpr void sofa::type::Vec< N, ValueType >::assign ; (; const ValueType & ; value). inlineconstexprnoexcept . ◆ back() [1/2]. template<sofa::Size N, typename ValueType > . constexpr reference sofa::type::Vec< N, ValueType >::back ; (; ). inlineconstexpr . ◆ back() [2/2]. template<sofa::Size N, typename ValueType > . constexpr const_reference sofa::type::Vec< N, ValueType >::back ; (; ); const. inlineconstexpr . ◆ begin() [1/2]. template<sofa::Size N, typename ValueType > . constexpr const_iterator sofa::type::Vec< N, ValueType >::begin ; (; ); const. inlineconstexprnoexcept . ◆ begin() [2/2]. template<sofa::Size N, typename ValueType > . constexpr iterator sofa::type::Vec< N, ValueType >::begin ; (; ). inlineconstexprnoexcept . ◆ clear(). template<sofa::Size N, typename ValueType > . constexpr void sofa::type::Vec< N, ValueType >::clear ; (; ). inlineconstexprnoexcept . Sets every element to 0. . ◆ cross(). template<sofa::Size N, typename ValueType > . template<typename R , Size NN = N, typename std::enable_if<(NN==3), int >::type = 0> . constexpr Vec sofa::type::Vec< N, ValueType >::cross ; (; const Vec< 3, R > & ; b); const. inlineconstexprnoexcept . ◆ data(). template<sofa::Size N, typename ValueType > . constexpr const ValueType* sofa::type::Vec< N, ValueType >::data ; (; ); const. inlineconstexprnoexcept . ◆ divscalar() [1/2]. template<sofa::Size N, typename ValueType > . template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> . constexpr Vec<N,ValueType> sofa::type::Vec< N, ValueType >::divscalar ; (; const real2 ; f); const. inlineconstexprnoexcept . ◆ divscalar() [2/2]. template<sofa::Size N, typename ValueType > . constexpr Vec<N,ValueType> sofa::type::Vec< N, Va",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:15181,Usability,clear,clear,15181,"; const real2 * ; p). inlineexplicitconstexprnoexcept . Constructor from an array of values. . Function details. ◆ assign(). template<sofa::Size N, typename ValueType > . constexpr void sofa::type::Vec< N, ValueType >::assign ; (; const ValueType & ; value). inlineconstexprnoexcept . ◆ back() [1/2]. template<sofa::Size N, typename ValueType > . constexpr reference sofa::type::Vec< N, ValueType >::back ; (; ). inlineconstexpr . ◆ back() [2/2]. template<sofa::Size N, typename ValueType > . constexpr const_reference sofa::type::Vec< N, ValueType >::back ; (; ); const. inlineconstexpr . ◆ begin() [1/2]. template<sofa::Size N, typename ValueType > . constexpr const_iterator sofa::type::Vec< N, ValueType >::begin ; (; ); const. inlineconstexprnoexcept . ◆ begin() [2/2]. template<sofa::Size N, typename ValueType > . constexpr iterator sofa::type::Vec< N, ValueType >::begin ; (; ). inlineconstexprnoexcept . ◆ clear(). template<sofa::Size N, typename ValueType > . constexpr void sofa::type::Vec< N, ValueType >::clear ; (; ). inlineconstexprnoexcept . Sets every element to 0. . ◆ cross(). template<sofa::Size N, typename ValueType > . template<typename R , Size NN = N, typename std::enable_if<(NN==3), int >::type = 0> . constexpr Vec sofa::type::Vec< N, ValueType >::cross ; (; const Vec< 3, R > & ; b); const. inlineconstexprnoexcept . ◆ data(). template<sofa::Size N, typename ValueType > . constexpr const ValueType* sofa::type::Vec< N, ValueType >::data ; (; ); const. inlineconstexprnoexcept . ◆ divscalar() [1/2]. template<sofa::Size N, typename ValueType > . template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> . constexpr Vec<N,ValueType> sofa::type::Vec< N, ValueType >::divscalar ; (; const real2 ; f); const. inlineconstexprnoexcept . ◆ divscalar() [2/2]. template<sofa::Size N, typename ValueType > . constexpr Vec<N,ValueType> sofa::type::Vec< N, ValueType >::divscalar ; (; const ValueType ; f); const. inlineconstexprnoexcept . D",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init-members.html:236,Modifiability,inherit,inherited,236,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::VecNoInit< N, real > Member List . This is the complete list of members for sofa::type::VecNoInit< N, real >, including all inherited members. ArrayType typedefsofa::type::Vec< N, real >; assign(const real &value) noexceptsofa::type::Vec< N, real >inline; back()sofa::type::Vec< N, real >inline; back() constsofa::type::Vec< N, real >inline; begin() noexceptsofa::type::Vec< N, real >inline; begin() const noexceptsofa::type::Vec< N, real >inline; clear() noexceptsofa::type::Vec< N, real >inline; const_iterator typedefsofa::type::Vec< N, real >; const_reference typedefsofa::type::Vec< N, real >; cross(const Vec< 3, R > &b) const noexceptsofa::type::Vec< N, real >inline; data() const noexceptsofa::type::Vec< N, real >inline; difference_type typedefsofa::type::Vec< N, real >; divscalar(const real f) const noexceptsofa::type::Vec< N, real >inline; divscalar(const real2 f) const noexceptsofa::type::Vec< N, real >inline; elemssofa::type::Vec< N, real >; end() noexceptsofa::type::Vec< N, real >inline; end() const noexceptsofa::type::Vec< N, real >inline; eqdivscalar(const real f) noexceptsofa::type::Vec< N, real >inline; eqdivscalar(const real2 f) noexceptsofa::type::Vec< N, real >inline; eqmulscalar(const real f) noexceptsofa::type::Vec< N, real >inline; eqmulscalar(const real2 f) noexceptsofa::type::Vec< N, real >inline; fill(real r) noexceptsofa::type::Vec< N, real >inline; front()sofa::type::Vec< N, real >inline; front() constsofa::type::Vec< N, real >inline; getsub(const Size i, Vec< N2, real > &m) const noexceptsofa::type::Vec< N, real >inline; getsub(const Size i, real &m) const noexceptsofa::type::Vec< N, real >inline; isNormalized(real threshold=std::numeric_limits< real >::epsilon() *(real) 10) constsofa::type::Vec< N, real >inline; iterator typedefsofa::type::Vec< N, real >; linearDivision(const Vec< N, real2 > &v) const noexceptsofa::type::Vec< N, real >i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init-members.html:560,Usability,clear,clear,560," ArrayType typedefsofa::type::Vec< N, real >; assign(const real &value) noexceptsofa::type::Vec< N, real >inline; back()sofa::type::Vec< N, real >inline; back() constsofa::type::Vec< N, real >inline; begin() noexceptsofa::type::Vec< N, real >inline; begin() const noexceptsofa::type::Vec< N, real >inline; clear() noexceptsofa::type::Vec< N, real >inline; const_iterator typedefsofa::type::Vec< N, real >; const_reference typedefsofa::type::Vec< N, real >; cross(const Vec< 3, R > &b) const noexceptsofa::type::Vec< N, real >inline; data() const noexceptsofa::type::Vec< N, real >inline; difference_type typedefsofa::type::Vec< N, real >; divscalar(const real f) const noexceptsofa::type::Vec< N, real >inline; divscalar(const real2 f) const noexceptsofa::type::Vec< N, real >inline; elemssofa::type::Vec< N, real >; end() noexceptsofa::type::Vec< N, real >inline; end() const noexceptsofa::type::Vec< N, real >inline; eqdivscalar(const real f) noexceptsofa::type::Vec< N, real >inline; eqdivscalar(const real2 f) noexceptsofa::type::Vec< N, real >inline; eqmulscalar(const real f) noexceptsofa::type::Vec< N, real >inline; eqmulscalar(const real2 f) noexceptsofa::type::Vec< N, real >inline; fill(real r) noexceptsofa::type::Vec< N, real >inline; front()sofa::type::Vec< N, real >inline; front() constsofa::type::Vec< N, real >inline; getsub(const Size i, Vec< N2, real > &m) const noexceptsofa::type::Vec< N, real >inline; getsub(const Size i, real &m) const noexceptsofa::type::Vec< N, real >inline; isNormalized(real threshold=std::numeric_limits< real >::epsilon() *(real) 10) constsofa::type::Vec< N, real >inline; iterator typedefsofa::type::Vec< N, real >; linearDivision(const Vec< N, real2 > &v) const noexceptsofa::type::Vec< N, real >i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:356,Modifiability,Inherit,Inheritance,356,"﻿. SOFA API: sofa::type::VecNoInit< N, real > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Friends |; List of all members . sofa::type::VecNoInit< N, real > Class Template Reference . #include <Vec.h>; Same as Vec except the values are not initialized by default. ; More... Inheritance diagram for sofa::type::VecNoInit< N, real >:. [legend]; Detailed Description; template<sofa::Size N, typename real>; class sofa::type::VecNoInit< N, real >; Same as Vec except the values are not initialized by default. . Public Member Functions; constexpr VecNoInit () noexcept;  ; constexpr VecNoInit (const Vec< N, real > &v) noexcept;  ; constexpr VecNoInit (Vec< N, real > &&v) noexcept;  ;  Public Member Functions inherited from sofa::type::Vec< N, real >; constexpr Vec ()=default;  Default constructor: sets all values to 0. More...;  ; constexpr Vec (NoInit);  Fast constructor: no initialization. More...;  ; constexpr Vec (const real r1) noexcept;  Specific constructor for 1-element vectors. More...;  ; constexpr Vec (ArgsT &&... r) noexcept;  ;  Vec (const Vec< 3, R > &a, const Vec< 3, T > &b);  Specific constructor for 6-elements vectors, taking two 3-elements vectors. More...;  ; constexpr Vec (const Vec< N-1, real > &v, real r1) noexcept;  Constructor from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< real, N > &p) noexcept;  ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const real r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:789,Modifiability,inherit,inherited,789,"﻿. SOFA API: sofa::type::VecNoInit< N, real > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Friends |; List of all members . sofa::type::VecNoInit< N, real > Class Template Reference . #include <Vec.h>; Same as Vec except the values are not initialized by default. ; More... Inheritance diagram for sofa::type::VecNoInit< N, real >:. [legend]; Detailed Description; template<sofa::Size N, typename real>; class sofa::type::VecNoInit< N, real >; Same as Vec except the values are not initialized by default. . Public Member Functions; constexpr VecNoInit () noexcept;  ; constexpr VecNoInit (const Vec< N, real > &v) noexcept;  ; constexpr VecNoInit (Vec< N, real > &&v) noexcept;  ;  Public Member Functions inherited from sofa::type::Vec< N, real >; constexpr Vec ()=default;  Default constructor: sets all values to 0. More...;  ; constexpr Vec (NoInit);  Fast constructor: no initialization. More...;  ; constexpr Vec (const real r1) noexcept;  Specific constructor for 1-element vectors. More...;  ; constexpr Vec (ArgsT &&... r) noexcept;  ;  Vec (const Vec< 3, R > &a, const Vec< 3, T > &b);  Specific constructor for 6-elements vectors, taking two 3-elements vectors. More...;  ; constexpr Vec (const Vec< N-1, real > &v, real r1) noexcept;  Constructor from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< real, N > &p) noexcept;  ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const real r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:7197,Modifiability,Inherit,Inherited,7197," of all elements of the vector More...;  ; constexpr bool operator== (const Vec &b) const noexcept;  ; constexpr bool operator!= (const Vec &b) const noexcept;  ; constexpr reference operator[] (size_type i);  ; constexpr const_reference operator[] (size_type i) const;  ; constexpr const real * data () const noexcept;  ; constexpr iterator begin () noexcept;  ; constexpr const_iterator begin () const noexcept;  ; constexpr iterator end () noexcept;  ; constexpr const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  . Friends; constexpr friend Vec< N, real > operator* (real r, const Vec< N, real > &v) noexcept;  Scalar vector multiplication operator. More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::Vec< N, real >; ArrayType elems;  ;  Static Public Attributes inherited from sofa::type::Vec< N, real >; static constexpr sofa::Size static_size;  ; static constexpr Size total_size;  Compile-time constant specifying the number of scalars within this vector (equivalent to static_size and size() method) More...;  ; static constexpr Size spatial_dimensions;  Compile-time constant specifying the number of dimensions of space (equivalent to total_size here) More...;  ;  Static Public Member Functions inherited from sofa::type::Vec< N, real >; static constexpr sofa::Size size ();  . Constructor details. ◆ VecNoInit() [1/3]. template<sofa::Size N, typename real > . constexpr sofa::type::VecNoInit< N, real >::VecNoInit ; (; ). inlineconstexprnoexcept . ◆ VecNoInit() [2/3]. template<sofa::Size N, typename real > . constexpr sofa::type::VecNoInit< N, real >::VecNoInit ; (; const Vec< N, real > & ; v). inlineconstexprnoexcept . ◆ VecNoInit() [3/3]. template<sofa::Size N, typename real > . constexpr sofa::type::VecNoInit< N, real >::VecNoInit ; (; Vec< N, real > && ; v). inlineconstexprnoexcept . Related detai",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:7235,Modifiability,inherit,inherited,7235," of all elements of the vector More...;  ; constexpr bool operator== (const Vec &b) const noexcept;  ; constexpr bool operator!= (const Vec &b) const noexcept;  ; constexpr reference operator[] (size_type i);  ; constexpr const_reference operator[] (size_type i) const;  ; constexpr const real * data () const noexcept;  ; constexpr iterator begin () noexcept;  ; constexpr const_iterator begin () const noexcept;  ; constexpr iterator end () noexcept;  ; constexpr const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  . Friends; constexpr friend Vec< N, real > operator* (real r, const Vec< N, real > &v) noexcept;  Scalar vector multiplication operator. More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::Vec< N, real >; ArrayType elems;  ;  Static Public Attributes inherited from sofa::type::Vec< N, real >; static constexpr sofa::Size static_size;  ; static constexpr Size total_size;  Compile-time constant specifying the number of scalars within this vector (equivalent to static_size and size() method) More...;  ; static constexpr Size spatial_dimensions;  Compile-time constant specifying the number of dimensions of space (equivalent to total_size here) More...;  ;  Static Public Member Functions inherited from sofa::type::Vec< N, real >; static constexpr sofa::Size size ();  . Constructor details. ◆ VecNoInit() [1/3]. template<sofa::Size N, typename real > . constexpr sofa::type::VecNoInit< N, real >::VecNoInit ; (; ). inlineconstexprnoexcept . ◆ VecNoInit() [2/3]. template<sofa::Size N, typename real > . constexpr sofa::type::VecNoInit< N, real >::VecNoInit ; (; const Vec< N, real > & ; v). inlineconstexprnoexcept . ◆ VecNoInit() [3/3]. template<sofa::Size N, typename real > . constexpr sofa::type::VecNoInit< N, real >::VecNoInit ; (; Vec< N, real > && ; v). inlineconstexprnoexcept . Related detai",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:7324,Modifiability,inherit,inherited,7324," of all elements of the vector More...;  ; constexpr bool operator== (const Vec &b) const noexcept;  ; constexpr bool operator!= (const Vec &b) const noexcept;  ; constexpr reference operator[] (size_type i);  ; constexpr const_reference operator[] (size_type i) const;  ; constexpr const real * data () const noexcept;  ; constexpr iterator begin () noexcept;  ; constexpr const_iterator begin () const noexcept;  ; constexpr iterator end () noexcept;  ; constexpr const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  . Friends; constexpr friend Vec< N, real > operator* (real r, const Vec< N, real > &v) noexcept;  Scalar vector multiplication operator. More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::Vec< N, real >; ArrayType elems;  ;  Static Public Attributes inherited from sofa::type::Vec< N, real >; static constexpr sofa::Size static_size;  ; static constexpr Size total_size;  Compile-time constant specifying the number of scalars within this vector (equivalent to static_size and size() method) More...;  ; static constexpr Size spatial_dimensions;  Compile-time constant specifying the number of dimensions of space (equivalent to total_size here) More...;  ;  Static Public Member Functions inherited from sofa::type::Vec< N, real >; static constexpr sofa::Size size ();  . Constructor details. ◆ VecNoInit() [1/3]. template<sofa::Size N, typename real > . constexpr sofa::type::VecNoInit< N, real >::VecNoInit ; (; ). inlineconstexprnoexcept . ◆ VecNoInit() [2/3]. template<sofa::Size N, typename real > . constexpr sofa::type::VecNoInit< N, real >::VecNoInit ; (; const Vec< N, real > & ; v). inlineconstexprnoexcept . ◆ VecNoInit() [3/3]. template<sofa::Size N, typename real > . constexpr sofa::type::VecNoInit< N, real >::VecNoInit ; (; Vec< N, real > && ; v). inlineconstexprnoexcept . Related detai",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:7764,Modifiability,inherit,inherited,7764,"texpr const real * data () const noexcept;  ; constexpr iterator begin () noexcept;  ; constexpr const_iterator begin () const noexcept;  ; constexpr iterator end () noexcept;  ; constexpr const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  . Friends; constexpr friend Vec< N, real > operator* (real r, const Vec< N, real > &v) noexcept;  Scalar vector multiplication operator. More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::Vec< N, real >; ArrayType elems;  ;  Static Public Attributes inherited from sofa::type::Vec< N, real >; static constexpr sofa::Size static_size;  ; static constexpr Size total_size;  Compile-time constant specifying the number of scalars within this vector (equivalent to static_size and size() method) More...;  ; static constexpr Size spatial_dimensions;  Compile-time constant specifying the number of dimensions of space (equivalent to total_size here) More...;  ;  Static Public Member Functions inherited from sofa::type::Vec< N, real >; static constexpr sofa::Size size ();  . Constructor details. ◆ VecNoInit() [1/3]. template<sofa::Size N, typename real > . constexpr sofa::type::VecNoInit< N, real >::VecNoInit ; (; ). inlineconstexprnoexcept . ◆ VecNoInit() [2/3]. template<sofa::Size N, typename real > . constexpr sofa::type::VecNoInit< N, real >::VecNoInit ; (; const Vec< N, real > & ; v). inlineconstexprnoexcept . ◆ VecNoInit() [3/3]. template<sofa::Size N, typename real > . constexpr sofa::type::VecNoInit< N, real >::VecNoInit ; (; Vec< N, real > && ; v). inlineconstexprnoexcept . Related details. ◆ operator*. template<sofa::Size N, typename real > . constexpr friend Vec<N,real> operator* ; (; real ; r, . const Vec< N, real > & ; v . ). friend . Scalar vector multiplication operator. . sofatypeVecNoInit; Generated on Mon Nov 11 2024 03:36:07 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:2178,Security,access,access,2178,"3, T > &b);  Specific constructor for 6-elements vectors, taking two 3-elements vectors. More...;  ; constexpr Vec (const Vec< N-1, real > &v, real r1) noexcept;  Constructor from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< real, N > &p) noexcept;  ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const real r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, real defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr real & x () noexcept;  Special access to first element. More...;  ; constexpr const real & x () const noexcept;  Special const access to first element. More...;  ; constexpr real & y () noexcept;  Special access to second element. More...;  ; constexpr const real & y () const noexcept;  Special const access to second element. More...;  ; constexpr real & z () noexcept;  Special access to third element. More...;  ; constexpr const real & z () const noexcept;  Special const access to third element. More...;  ; constexpr real & w () noexcept;  Special access to fourth element. More...;  ; constexpr const real & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const real r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different d",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:2274,Security,access,access,2274,". More...;  ; constexpr Vec (const Vec< N-1, real > &v, real r1) noexcept;  Constructor from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< real, N > &p) noexcept;  ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const real r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, real defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr real & x () noexcept;  Special access to first element. More...;  ; constexpr const real & x () const noexcept;  Special const access to first element. More...;  ; constexpr real & y () noexcept;  Special access to second element. More...;  ; constexpr const real & y () const noexcept;  Special const access to second element. More...;  ; constexpr real & z () noexcept;  Special access to third element. More...;  ; constexpr const real & z () const noexcept;  Special const access to third element. More...;  ; constexpr real & w () noexcept;  Special access to fourth element. More...;  ; constexpr const real & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const real r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const real &value) noexcept;  ; constexpr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:2352,Security,access,access,2352," from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< real, N > &p) noexcept;  ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const real r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, real defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr real & x () noexcept;  Special access to first element. More...;  ; constexpr const real & x () const noexcept;  Special const access to first element. More...;  ; constexpr real & y () noexcept;  Special access to second element. More...;  ; constexpr const real & y () const noexcept;  Special const access to second element. More...;  ; constexpr real & z () noexcept;  Special access to third element. More...;  ; constexpr const real & z () const noexcept;  Special const access to third element. More...;  ; constexpr real & w () noexcept;  Special access to fourth element. More...;  ; constexpr const real & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const real r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const real &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (real",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:2449,Security,access,access,2449,"stexpr Vec (const sofa::type::fixed_array< real, N > &p) noexcept;  ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const real r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, real defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr real & x () noexcept;  Special access to first element. More...;  ; constexpr const real & x () const noexcept;  Special const access to first element. More...;  ; constexpr real & y () noexcept;  Special access to second element. More...;  ; constexpr const real & y () const noexcept;  Special const access to second element. More...;  ; constexpr real & z () noexcept;  Special access to third element. More...;  ; constexpr const real & z () const noexcept;  Special const access to third element. More...;  ; constexpr real & w () noexcept;  Special access to fourth element. More...;  ; constexpr const real & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const real r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const real &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets every element to r. More...;  ; constexpr real & operator() (Size i)",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:2528,Security,access,access,2528,"st Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const real r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, real defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr real & x () noexcept;  Special access to first element. More...;  ; constexpr const real & x () const noexcept;  Special const access to first element. More...;  ; constexpr real & y () noexcept;  Special access to second element. More...;  ; constexpr const real & y () const noexcept;  Special const access to second element. More...;  ; constexpr real & z () noexcept;  Special access to third element. More...;  ; constexpr const real & z () const noexcept;  Special const access to third element. More...;  ; constexpr real & w () noexcept;  Special access to fourth element. More...;  ; constexpr const real & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const real r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const real &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets every element to r. More...;  ; constexpr real & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const real & operator() (Size",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:2624,Security,access,access,2624,"lt value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const real r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, real defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr real & x () noexcept;  Special access to first element. More...;  ; constexpr const real & x () const noexcept;  Special const access to first element. More...;  ; constexpr real & y () noexcept;  Special access to second element. More...;  ; constexpr const real & y () const noexcept;  Special const access to second element. More...;  ; constexpr real & z () noexcept;  Special access to third element. More...;  ; constexpr const real & z () const noexcept;  Special const access to third element. More...;  ; constexpr real & w () noexcept;  Special access to fourth element. More...;  ; constexpr const real & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const real r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const real &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets every element to r. More...;  ; constexpr real & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const real & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const real * p",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:2702,Security,access,access,2702," &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const real r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, real defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr real & x () noexcept;  Special access to first element. More...;  ; constexpr const real & x () const noexcept;  Special const access to first element. More...;  ; constexpr real & y () noexcept;  Special access to second element. More...;  ; constexpr const real & y () const noexcept;  Special const access to second element. More...;  ; constexpr real & z () noexcept;  Special access to third element. More...;  ; constexpr const real & z () const noexcept;  Special const access to third element. More...;  ; constexpr real & w () noexcept;  Special access to fourth element. More...;  ; constexpr const real & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const real r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const real &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets every element to r. More...;  ; constexpr real & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const real & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a const array of values. More...;  ; constexpr real * p",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:2799,Security,access,access,2799," values. More...;  ; constexpr void set (const real r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, real defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr real & x () noexcept;  Special access to first element. More...;  ; constexpr const real & x () const noexcept;  Special const access to first element. More...;  ; constexpr real & y () noexcept;  Special access to second element. More...;  ; constexpr const real & y () const noexcept;  Special const access to second element. More...;  ; constexpr real & z () noexcept;  Special access to third element. More...;  ; constexpr const real & z () const noexcept;  Special const access to third element. More...;  ; constexpr real & w () noexcept;  Special access to fourth element. More...;  ; constexpr const real & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const real r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const real &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets every element to r. More...;  ; constexpr real & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const real & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a const array of values. More...;  ; constexpr real * ptr () noexcept;  Cast into an array of values. More...;  ; constexpr void getsub (const ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:3442,Security,Access,Access,3442,"xcept;  Special const access to second element. More...;  ; constexpr real & z () noexcept;  Special access to third element. More...;  ; constexpr const real & z () const noexcept;  Special const access to third element. More...;  ; constexpr real & w () noexcept;  Special access to fourth element. More...;  ; constexpr const real & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const real r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const real &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets every element to r. More...;  ; constexpr real & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const real & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a const array of values. More...;  ; constexpr real * ptr () noexcept;  Cast into an array of values. More...;  ; constexpr void getsub (const Size i, Vec< N2, real > &m) const noexcept;  ; constexpr void getsub (const Size i, real &m) const noexcept;  ; constexpr Vec< N, real > mulscalar (const real f) const noexcept;  ; constexpr Vec< N, real > mulscalar (const real2 f) const noexcept;  Multiplication by a scalar f. More...;  ; constexpr Vec< N, real > operator* (const real2 f) const noexcept;  ; constexpr real operator* (const Vec< N, real2 > &v) const noexcept;  Dot product. More...;  ; constexpr void eqmulscalar (const real f) noexcept;  In-place multiplication by a scalar f. More...;  ; constexpr void eqmulscalar (const real2 f) noexcept;  ; constexpr void operator*= (const",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:3544,Security,access,access,3544,"Special access to third element. More...;  ; constexpr const real & z () const noexcept;  Special const access to third element. More...;  ; constexpr real & w () noexcept;  Special access to fourth element. More...;  ; constexpr const real & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const real r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const real &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets every element to r. More...;  ; constexpr real & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const real & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a const array of values. More...;  ; constexpr real * ptr () noexcept;  Cast into an array of values. More...;  ; constexpr void getsub (const Size i, Vec< N2, real > &m) const noexcept;  ; constexpr void getsub (const Size i, real &m) const noexcept;  ; constexpr Vec< N, real > mulscalar (const real f) const noexcept;  ; constexpr Vec< N, real > mulscalar (const real2 f) const noexcept;  Multiplication by a scalar f. More...;  ; constexpr Vec< N, real > operator* (const real2 f) const noexcept;  ; constexpr real operator* (const Vec< N, real2 > &v) const noexcept;  Dot product. More...;  ; constexpr void eqmulscalar (const real f) noexcept;  In-place multiplication by a scalar f. More...;  ; constexpr void eqmulscalar (const real2 f) noexcept;  ; constexpr void operator*= (const real2 f) noexcept;  ; constexpr Vec< N, real > divscalar (const real f) const noexcept;  Div",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:3260,Usability,clear,clear,3260,"onst noexcept;  Special const access to first element. More...;  ; constexpr real & y () noexcept;  Special access to second element. More...;  ; constexpr const real & y () const noexcept;  Special const access to second element. More...;  ; constexpr real & z () noexcept;  Special access to third element. More...;  ; constexpr const real & z () const noexcept;  Special const access to third element. More...;  ; constexpr real & w () noexcept;  Special access to fourth element. More...;  ; constexpr const real & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const real r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const real &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets every element to r. More...;  ; constexpr real & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const real & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a const array of values. More...;  ; constexpr real * ptr () noexcept;  Cast into an array of values. More...;  ; constexpr void getsub (const Size i, Vec< N2, real > &m) const noexcept;  ; constexpr void getsub (const Size i, real &m) const noexcept;  ; constexpr Vec< N, real > mulscalar (const real f) const noexcept;  ; constexpr Vec< N, real > mulscalar (const real2 f) const noexcept;  Multiplication by a scalar f. More...;  ; constexpr Vec< N, real > operator* (const real2 f) const noexcept;  ; constexpr real operator* (const Vec< N, real2 > &v) const noexcept;  Dot product. More...;  ; constexpr ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html:218,Modifiability,inherit,inherited,218,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::TemplateAliasTest Member List . This is the complete list of members for sofa::TemplateAliasTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; registerAlias(const std::string &alias, const std::string &target, bool succeed, bool warn)sofa::TemplateAliasTestinlineprotected; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html:263,Testability,test,testing,263,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::TemplateAliasTest Member List . This is the complete list of members for sofa::TemplateAliasTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; registerAlias(const std::string &alias, const std::string &target, bool succeed, bool warn)sofa::TemplateAliasTestinlineprotected; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html:308,Testability,test,testing,308,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::TemplateAliasTest Member List . This is the complete list of members for sofa::TemplateAliasTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; registerAlias(const std::string &alias, const std::string &target, bool succeed, bool warn)sofa::TemplateAliasTestinlineprotected; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html:370,Testability,test,testing,370,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::TemplateAliasTest Member List . This is the complete list of members for sofa::TemplateAliasTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; registerAlias(const std::string &alias, const std::string &target, bool succeed, bool warn)sofa::TemplateAliasTestinlineprotected; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html:412,Testability,test,testing,412,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::TemplateAliasTest Member List . This is the complete list of members for sofa::TemplateAliasTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; registerAlias(const std::string &alias, const std::string &target, bool succeed, bool warn)sofa::TemplateAliasTestinlineprotected; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html:444,Testability,test,testing,444,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::TemplateAliasTest Member List . This is the complete list of members for sofa::TemplateAliasTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; registerAlias(const std::string &alias, const std::string &target, bool succeed, bool warn)sofa::TemplateAliasTestinlineprotected; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html:478,Testability,test,testing,478,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::TemplateAliasTest Member List . This is the complete list of members for sofa::TemplateAliasTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; registerAlias(const std::string &alias, const std::string &target, bool succeed, bool warn)sofa::TemplateAliasTestinlineprotected; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html:528,Testability,test,testing,528,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::TemplateAliasTest Member List . This is the complete list of members for sofa::TemplateAliasTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; registerAlias(const std::string &alias, const std::string &target, bool succeed, bool warn)sofa::TemplateAliasTestinlineprotected; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html:701,Testability,test,testing,701,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::TemplateAliasTest Member List . This is the complete list of members for sofa::TemplateAliasTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; registerAlias(const std::string &alias, const std::string &target, bool succeed, bool warn)sofa::TemplateAliasTestinlineprotected; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html:752,Testability,test,testing,752,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::TemplateAliasTest Member List . This is the complete list of members for sofa::TemplateAliasTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; registerAlias(const std::string &alias, const std::string &target, bool succeed, bool warn)sofa::TemplateAliasTestinlineprotected; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html:516,Integrability,Message,MessageAsTestFailure,516,"﻿. SOFA API: sofa::TemplateAliasTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Member Functions |; List of all members . sofa::TemplateAliasTest Class Reference . Inheritance diagram for sofa::TemplateAliasTest:. [legend]. Protected Member Functions; bool registerAlias (const std::string &alias, const std::string &target, bool succeed, bool warn);  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Function details. ◆ registerAlias(). bool sofa::TemplateAliasTest::registerAlias ; (; const std::string & ; alias, . const std::string & ; target, . bool ; succeed, . bool ; warn . ). inlineprotected . sofaTemplateAliasTest; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html:564,Integrability,Message,MessageAsTestFailure,564,"﻿. SOFA API: sofa::TemplateAliasTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Member Functions |; List of all members . sofa::TemplateAliasTest Class Reference . Inheritance diagram for sofa::TemplateAliasTest:. [legend]. Protected Member Functions; bool registerAlias (const std::string &alias, const std::string &target, bool succeed, bool warn);  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Function details. ◆ registerAlias(). bool sofa::TemplateAliasTest::registerAlias ; (; const std::string & ; alias, . const std::string & ; target, . bool ; succeed, . bool ; warn . ). inlineprotected . sofaTemplateAliasTest; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html:222,Modifiability,Inherit,Inheritance,222,"﻿. SOFA API: sofa::TemplateAliasTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Member Functions |; List of all members . sofa::TemplateAliasTest Class Reference . Inheritance diagram for sofa::TemplateAliasTest:. [legend]. Protected Member Functions; bool registerAlias (const std::string &alias, const std::string &target, bool succeed, bool warn);  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Function details. ◆ registerAlias(). bool sofa::TemplateAliasTest::registerAlias ; (; const std::string & ; alias, . const std::string & ; target, . bool ; succeed, . bool ; warn . ). inlineprotected . sofaTemplateAliasTest; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html:423,Modifiability,Inherit,Inherited,423,"﻿. SOFA API: sofa::TemplateAliasTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Member Functions |; List of all members . sofa::TemplateAliasTest Class Reference . Inheritance diagram for sofa::TemplateAliasTest:. [legend]. Protected Member Functions; bool registerAlias (const std::string &alias, const std::string &target, bool succeed, bool warn);  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Function details. ◆ registerAlias(). bool sofa::TemplateAliasTest::registerAlias ; (; const std::string & ; alias, . const std::string & ; target, . bool ; succeed, . bool ; warn . ). inlineprotected . sofaTemplateAliasTest; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html:461,Modifiability,inherit,inherited,461,"﻿. SOFA API: sofa::TemplateAliasTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Member Functions |; List of all members . sofa::TemplateAliasTest Class Reference . Inheritance diagram for sofa::TemplateAliasTest:. [legend]. Protected Member Functions; bool registerAlias (const std::string &alias, const std::string &target, bool succeed, bool warn);  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Function details. ◆ registerAlias(). bool sofa::TemplateAliasTest::registerAlias ; (; const std::string & ; alias, . const std::string & ; target, . bool ; succeed, . bool ; warn . ). inlineprotected . sofaTemplateAliasTest; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html:623,Modifiability,inherit,inherited,623,"﻿. SOFA API: sofa::TemplateAliasTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Member Functions |; List of all members . sofa::TemplateAliasTest Class Reference . Inheritance diagram for sofa::TemplateAliasTest:. [legend]. Protected Member Functions; bool registerAlias (const std::string &alias, const std::string &target, bool succeed, bool warn);  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Function details. ◆ registerAlias(). bool sofa::TemplateAliasTest::registerAlias ; (; const std::string & ; alias, . const std::string & ; target, . bool ; succeed, . bool ; warn . ). inlineprotected . sofaTemplateAliasTest; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html:760,Modifiability,inherit,inherited,760,"﻿. SOFA API: sofa::TemplateAliasTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Member Functions |; List of all members . sofa::TemplateAliasTest Class Reference . Inheritance diagram for sofa::TemplateAliasTest:. [legend]. Protected Member Functions; bool registerAlias (const std::string &alias, const std::string &target, bool succeed, bool warn);  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Function details. ◆ registerAlias(). bool sofa::TemplateAliasTest::registerAlias ; (; const std::string & ; alias, . const std::string & ; target, . bool ; succeed, . bool ; warn . ). inlineprotected . sofaTemplateAliasTest; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html:910,Modifiability,inherit,inherited,910,"﻿. SOFA API: sofa::TemplateAliasTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Member Functions |; List of all members . sofa::TemplateAliasTest Class Reference . Inheritance diagram for sofa::TemplateAliasTest:. [legend]. Protected Member Functions; bool registerAlias (const std::string &alias, const std::string &target, bool succeed, bool warn);  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Function details. ◆ registerAlias(). bool sofa::TemplateAliasTest::registerAlias ; (; const std::string & ; alias, . const std::string & ; target, . bool ; succeed, . bool ; warn . ). inlineprotected . sofaTemplateAliasTest; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html:482,Testability,test,testing,482,"﻿. SOFA API: sofa::TemplateAliasTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Member Functions |; List of all members . sofa::TemplateAliasTest Class Reference . Inheritance diagram for sofa::TemplateAliasTest:. [legend]. Protected Member Functions; bool registerAlias (const std::string &alias, const std::string &target, bool succeed, bool warn);  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Function details. ◆ registerAlias(). bool sofa::TemplateAliasTest::registerAlias ; (; const std::string & ; alias, . const std::string & ; target, . bool ; succeed, . bool ; warn . ). inlineprotected . sofaTemplateAliasTest; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html:507,Testability,test,testing,507,"﻿. SOFA API: sofa::TemplateAliasTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Member Functions |; List of all members . sofa::TemplateAliasTest Class Reference . Inheritance diagram for sofa::TemplateAliasTest:. [legend]. Protected Member Functions; bool registerAlias (const std::string &alias, const std::string &target, bool succeed, bool warn);  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Function details. ◆ registerAlias(). bool sofa::TemplateAliasTest::registerAlias ; (; const std::string & ; alias, . const std::string & ; target, . bool ; succeed, . bool ; warn . ). inlineprotected . sofaTemplateAliasTest; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html:555,Testability,test,testing,555,"﻿. SOFA API: sofa::TemplateAliasTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Member Functions |; List of all members . sofa::TemplateAliasTest Class Reference . Inheritance diagram for sofa::TemplateAliasTest:. [legend]. Protected Member Functions; bool registerAlias (const std::string &alias, const std::string &target, bool succeed, bool warn);  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Function details. ◆ registerAlias(). bool sofa::TemplateAliasTest::registerAlias ; (; const std::string & ; alias, . const std::string & ; target, . bool ; succeed, . bool ; warn . ). inlineprotected . sofaTemplateAliasTest; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html:644,Testability,test,testing,644,"﻿. SOFA API: sofa::TemplateAliasTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Member Functions |; List of all members . sofa::TemplateAliasTest Class Reference . Inheritance diagram for sofa::TemplateAliasTest:. [legend]. Protected Member Functions; bool registerAlias (const std::string &alias, const std::string &target, bool succeed, bool warn);  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Function details. ◆ registerAlias(). bool sofa::TemplateAliasTest::registerAlias ; (; const std::string & ; alias, . const std::string & ; target, . bool ; succeed, . bool ; warn . ). inlineprotected . sofaTemplateAliasTest; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html:781,Testability,test,testing,781,"﻿. SOFA API: sofa::TemplateAliasTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Member Functions |; List of all members . sofa::TemplateAliasTest Class Reference . Inheritance diagram for sofa::TemplateAliasTest:. [legend]. Protected Member Functions; bool registerAlias (const std::string &alias, const std::string &target, bool succeed, bool warn);  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Function details. ◆ registerAlias(). bool sofa::TemplateAliasTest::registerAlias ; (; const std::string & ; alias, . const std::string & ; target, . bool ; succeed, . bool ; warn . ). inlineprotected . sofaTemplateAliasTest; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html:931,Testability,test,testing,931,"﻿. SOFA API: sofa::TemplateAliasTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Member Functions |; List of all members . sofa::TemplateAliasTest Class Reference . Inheritance diagram for sofa::TemplateAliasTest:. [legend]. Protected Member Functions; bool registerAlias (const std::string &alias, const std::string &target, bool succeed, bool warn);  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Function details. ◆ registerAlias(). bool sofa::TemplateAliasTest::registerAlias ; (; const std::string & ; alias, . const std::string & ; target, . bool ; succeed, . bool ; warn . ). inlineprotected . sofaTemplateAliasTest; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine-members.html:248,Modifiability,inherit,inherited,248,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::TestDataEngine< DataEngineType > Member List . This is the complete list of members for sofa::TestDataEngine< DataEngineType >, including all inherited members. doUpdate() overridesofa::TestDataEngine< DataEngineType >inline; getCounter() constsofa::TestDataEngine< DataEngineType >inline; resetCounter()sofa::TestDataEngine< DataEngineType >inline; SOFA_CLASS(SOFA_TEMPLATE(TestDataEngine, DataEngineType), DataEngineType)sofa::TestDataEngine< DataEngineType >; TestDataEngine()sofa::TestDataEngine< DataEngineType >inline. Generated on Mon Nov 11 2024 02:16:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_test_data_engine-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine-members.html:106,Testability,Test,TestDataEngine,106,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::TestDataEngine< DataEngineType > Member List . This is the complete list of members for sofa::TestDataEngine< DataEngineType >, including all inherited members. doUpdate() overridesofa::TestDataEngine< DataEngineType >inline; getCounter() constsofa::TestDataEngine< DataEngineType >inline; resetCounter()sofa::TestDataEngine< DataEngineType >inline; SOFA_CLASS(SOFA_TEMPLATE(TestDataEngine, DataEngineType), DataEngineType)sofa::TestDataEngine< DataEngineType >; TestDataEngine()sofa::TestDataEngine< DataEngineType >inline. Generated on Mon Nov 11 2024 02:16:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_test_data_engine-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine-members.html:200,Testability,Test,TestDataEngine,200,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::TestDataEngine< DataEngineType > Member List . This is the complete list of members for sofa::TestDataEngine< DataEngineType >, including all inherited members. doUpdate() overridesofa::TestDataEngine< DataEngineType >inline; getCounter() constsofa::TestDataEngine< DataEngineType >inline; resetCounter()sofa::TestDataEngine< DataEngineType >inline; SOFA_CLASS(SOFA_TEMPLATE(TestDataEngine, DataEngineType), DataEngineType)sofa::TestDataEngine< DataEngineType >; TestDataEngine()sofa::TestDataEngine< DataEngineType >inline. Generated on Mon Nov 11 2024 02:16:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_test_data_engine-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine-members.html:292,Testability,Test,TestDataEngine,292,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::TestDataEngine< DataEngineType > Member List . This is the complete list of members for sofa::TestDataEngine< DataEngineType >, including all inherited members. doUpdate() overridesofa::TestDataEngine< DataEngineType >inline; getCounter() constsofa::TestDataEngine< DataEngineType >inline; resetCounter()sofa::TestDataEngine< DataEngineType >inline; SOFA_CLASS(SOFA_TEMPLATE(TestDataEngine, DataEngineType), DataEngineType)sofa::TestDataEngine< DataEngineType >; TestDataEngine()sofa::TestDataEngine< DataEngineType >inline. Generated on Mon Nov 11 2024 02:16:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_test_data_engine-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine-members.html:356,Testability,Test,TestDataEngine,356,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::TestDataEngine< DataEngineType > Member List . This is the complete list of members for sofa::TestDataEngine< DataEngineType >, including all inherited members. doUpdate() overridesofa::TestDataEngine< DataEngineType >inline; getCounter() constsofa::TestDataEngine< DataEngineType >inline; resetCounter()sofa::TestDataEngine< DataEngineType >inline; SOFA_CLASS(SOFA_TEMPLATE(TestDataEngine, DataEngineType), DataEngineType)sofa::TestDataEngine< DataEngineType >; TestDataEngine()sofa::TestDataEngine< DataEngineType >inline. Generated on Mon Nov 11 2024 02:16:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_test_data_engine-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine-members.html:416,Testability,Test,TestDataEngine,416,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::TestDataEngine< DataEngineType > Member List . This is the complete list of members for sofa::TestDataEngine< DataEngineType >, including all inherited members. doUpdate() overridesofa::TestDataEngine< DataEngineType >inline; getCounter() constsofa::TestDataEngine< DataEngineType >inline; resetCounter()sofa::TestDataEngine< DataEngineType >inline; SOFA_CLASS(SOFA_TEMPLATE(TestDataEngine, DataEngineType), DataEngineType)sofa::TestDataEngine< DataEngineType >; TestDataEngine()sofa::TestDataEngine< DataEngineType >inline. Generated on Mon Nov 11 2024 02:16:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_test_data_engine-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine-members.html:481,Testability,Test,TestDataEngine,481,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::TestDataEngine< DataEngineType > Member List . This is the complete list of members for sofa::TestDataEngine< DataEngineType >, including all inherited members. doUpdate() overridesofa::TestDataEngine< DataEngineType >inline; getCounter() constsofa::TestDataEngine< DataEngineType >inline; resetCounter()sofa::TestDataEngine< DataEngineType >inline; SOFA_CLASS(SOFA_TEMPLATE(TestDataEngine, DataEngineType), DataEngineType)sofa::TestDataEngine< DataEngineType >; TestDataEngine()sofa::TestDataEngine< DataEngineType >inline. Generated on Mon Nov 11 2024 02:16:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_test_data_engine-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine-members.html:535,Testability,Test,TestDataEngine,535,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::TestDataEngine< DataEngineType > Member List . This is the complete list of members for sofa::TestDataEngine< DataEngineType >, including all inherited members. doUpdate() overridesofa::TestDataEngine< DataEngineType >inline; getCounter() constsofa::TestDataEngine< DataEngineType >inline; resetCounter()sofa::TestDataEngine< DataEngineType >inline; SOFA_CLASS(SOFA_TEMPLATE(TestDataEngine, DataEngineType), DataEngineType)sofa::TestDataEngine< DataEngineType >; TestDataEngine()sofa::TestDataEngine< DataEngineType >inline. Generated on Mon Nov 11 2024 02:16:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_test_data_engine-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine-members.html:569,Testability,Test,TestDataEngine,569,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::TestDataEngine< DataEngineType > Member List . This is the complete list of members for sofa::TestDataEngine< DataEngineType >, including all inherited members. doUpdate() overridesofa::TestDataEngine< DataEngineType >inline; getCounter() constsofa::TestDataEngine< DataEngineType >inline; resetCounter()sofa::TestDataEngine< DataEngineType >inline; SOFA_CLASS(SOFA_TEMPLATE(TestDataEngine, DataEngineType), DataEngineType)sofa::TestDataEngine< DataEngineType >; TestDataEngine()sofa::TestDataEngine< DataEngineType >inline. Generated on Mon Nov 11 2024 02:16:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_test_data_engine-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine-members.html:591,Testability,Test,TestDataEngine,591,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::TestDataEngine< DataEngineType > Member List . This is the complete list of members for sofa::TestDataEngine< DataEngineType >, including all inherited members. doUpdate() overridesofa::TestDataEngine< DataEngineType >inline; getCounter() constsofa::TestDataEngine< DataEngineType >inline; resetCounter()sofa::TestDataEngine< DataEngineType >inline; SOFA_CLASS(SOFA_TEMPLATE(TestDataEngine, DataEngineType), DataEngineType)sofa::TestDataEngine< DataEngineType >; TestDataEngine()sofa::TestDataEngine< DataEngineType >inline. Generated on Mon Nov 11 2024 02:16:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_test_data_engine-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine.html:304,Modifiability,Inherit,Inheritance,304,"﻿. SOFA API: sofa::TestDataEngine< DataEngineType > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::TestDataEngine< DataEngineType > Class Template Reference . #include <DataEngineTestCreation.h>. Inheritance diagram for sofa::TestDataEngine< DataEngineType >:. [legend]. Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(TestDataEngine, DataEngineType), DataEngineType);  ;  TestDataEngine ();  ; void doUpdate () override;  ; void resetCounter ();  ; unsigned getCounter () const;  . Constructor details. ◆ TestDataEngine(). template<typename DataEngineType > . sofa::TestDataEngine< DataEngineType >::TestDataEngine ; (; ). inline . Function details. ◆ doUpdate(). template<typename DataEngineType > . void sofa::TestDataEngine< DataEngineType >::doUpdate ; (; ). inlineoverride . ◆ getCounter(). template<typename DataEngineType > . unsigned sofa::TestDataEngine< DataEngineType >::getCounter ; (; ); const. inline . ◆ resetCounter(). template<typename DataEngineType > . void sofa::TestDataEngine< DataEngineType >::resetCounter ; (; ). inline . ◆ SOFA_CLASS(). template<typename DataEngineType > . sofa::TestDataEngine< DataEngineType >::SOFA_CLASS ; (; SOFA_TEMPLATE(TestDataEngine< DataEngineType >, DataEngineType) ; , . DataEngineType ;  . ). sofaTestDataEngine; Generated on Mon Nov 11 2024 02:16:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_test_data_engine.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine.html:19,Testability,Test,TestDataEngine,19,"﻿. SOFA API: sofa::TestDataEngine< DataEngineType > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::TestDataEngine< DataEngineType > Class Template Reference . #include <DataEngineTestCreation.h>. Inheritance diagram for sofa::TestDataEngine< DataEngineType >:. [legend]. Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(TestDataEngine, DataEngineType), DataEngineType);  ;  TestDataEngine ();  ; void doUpdate () override;  ; void resetCounter ();  ; unsigned getCounter () const;  . Constructor details. ◆ TestDataEngine(). template<typename DataEngineType > . sofa::TestDataEngine< DataEngineType >::TestDataEngine ; (; ). inline . Function details. ◆ doUpdate(). template<typename DataEngineType > . void sofa::TestDataEngine< DataEngineType >::doUpdate ; (; ). inlineoverride . ◆ getCounter(). template<typename DataEngineType > . unsigned sofa::TestDataEngine< DataEngineType >::getCounter ; (; ); const. inline . ◆ resetCounter(). template<typename DataEngineType > . void sofa::TestDataEngine< DataEngineType >::resetCounter ; (; ). inline . ◆ SOFA_CLASS(). template<typename DataEngineType > . sofa::TestDataEngine< DataEngineType >::SOFA_CLASS ; (; SOFA_TEMPLATE(TestDataEngine< DataEngineType >, DataEngineType) ; , . DataEngineType ;  . ). sofaTestDataEngine; Generated on Mon Nov 11 2024 02:16:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_test_data_engine.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine.html:207,Testability,Test,TestDataEngine,207,"﻿. SOFA API: sofa::TestDataEngine< DataEngineType > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::TestDataEngine< DataEngineType > Class Template Reference . #include <DataEngineTestCreation.h>. Inheritance diagram for sofa::TestDataEngine< DataEngineType >:. [legend]. Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(TestDataEngine, DataEngineType), DataEngineType);  ;  TestDataEngine ();  ; void doUpdate () override;  ; void resetCounter ();  ; unsigned getCounter () const;  . Constructor details. ◆ TestDataEngine(). template<typename DataEngineType > . sofa::TestDataEngine< DataEngineType >::TestDataEngine ; (; ). inline . Function details. ◆ doUpdate(). template<typename DataEngineType > . void sofa::TestDataEngine< DataEngineType >::doUpdate ; (; ). inlineoverride . ◆ getCounter(). template<typename DataEngineType > . unsigned sofa::TestDataEngine< DataEngineType >::getCounter ; (; ); const. inline . ◆ resetCounter(). template<typename DataEngineType > . void sofa::TestDataEngine< DataEngineType >::resetCounter ; (; ). inline . ◆ SOFA_CLASS(). template<typename DataEngineType > . sofa::TestDataEngine< DataEngineType >::SOFA_CLASS ; (; SOFA_TEMPLATE(TestDataEngine< DataEngineType >, DataEngineType) ; , . DataEngineType ;  . ). sofaTestDataEngine; Generated on Mon Nov 11 2024 02:16:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_test_data_engine.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine.html:334,Testability,Test,TestDataEngine,334,"﻿. SOFA API: sofa::TestDataEngine< DataEngineType > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::TestDataEngine< DataEngineType > Class Template Reference . #include <DataEngineTestCreation.h>. Inheritance diagram for sofa::TestDataEngine< DataEngineType >:. [legend]. Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(TestDataEngine, DataEngineType), DataEngineType);  ;  TestDataEngine ();  ; void doUpdate () override;  ; void resetCounter ();  ; unsigned getCounter () const;  . Constructor details. ◆ TestDataEngine(). template<typename DataEngineType > . sofa::TestDataEngine< DataEngineType >::TestDataEngine ; (; ). inline . Function details. ◆ doUpdate(). template<typename DataEngineType > . void sofa::TestDataEngine< DataEngineType >::doUpdate ; (; ). inlineoverride . ◆ getCounter(). template<typename DataEngineType > . unsigned sofa::TestDataEngine< DataEngineType >::getCounter ; (; ); const. inline . ◆ resetCounter(). template<typename DataEngineType > . void sofa::TestDataEngine< DataEngineType >::resetCounter ; (; ). inline . ◆ SOFA_CLASS(). template<typename DataEngineType > . sofa::TestDataEngine< DataEngineType >::SOFA_CLASS ; (; SOFA_TEMPLATE(TestDataEngine< DataEngineType >, DataEngineType) ; , . DataEngineType ;  . ). sofaTestDataEngine; Generated on Mon Nov 11 2024 02:16:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_test_data_engine.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine.html:431,Testability,Test,TestDataEngine,431,"﻿. SOFA API: sofa::TestDataEngine< DataEngineType > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::TestDataEngine< DataEngineType > Class Template Reference . #include <DataEngineTestCreation.h>. Inheritance diagram for sofa::TestDataEngine< DataEngineType >:. [legend]. Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(TestDataEngine, DataEngineType), DataEngineType);  ;  TestDataEngine ();  ; void doUpdate () override;  ; void resetCounter ();  ; unsigned getCounter () const;  . Constructor details. ◆ TestDataEngine(). template<typename DataEngineType > . sofa::TestDataEngine< DataEngineType >::TestDataEngine ; (; ). inline . Function details. ◆ doUpdate(). template<typename DataEngineType > . void sofa::TestDataEngine< DataEngineType >::doUpdate ; (; ). inlineoverride . ◆ getCounter(). template<typename DataEngineType > . unsigned sofa::TestDataEngine< DataEngineType >::getCounter ; (; ); const. inline . ◆ resetCounter(). template<typename DataEngineType > . void sofa::TestDataEngine< DataEngineType >::resetCounter ; (; ). inline . ◆ SOFA_CLASS(). template<typename DataEngineType > . sofa::TestDataEngine< DataEngineType >::SOFA_CLASS ; (; SOFA_TEMPLATE(TestDataEngine< DataEngineType >, DataEngineType) ; , . DataEngineType ;  . ). sofaTestDataEngine; Generated on Mon Nov 11 2024 02:16:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_test_data_engine.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine.html:485,Testability,Test,TestDataEngine,485,"﻿. SOFA API: sofa::TestDataEngine< DataEngineType > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::TestDataEngine< DataEngineType > Class Template Reference . #include <DataEngineTestCreation.h>. Inheritance diagram for sofa::TestDataEngine< DataEngineType >:. [legend]. Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(TestDataEngine, DataEngineType), DataEngineType);  ;  TestDataEngine ();  ; void doUpdate () override;  ; void resetCounter ();  ; unsigned getCounter () const;  . Constructor details. ◆ TestDataEngine(). template<typename DataEngineType > . sofa::TestDataEngine< DataEngineType >::TestDataEngine ; (; ). inline . Function details. ◆ doUpdate(). template<typename DataEngineType > . void sofa::TestDataEngine< DataEngineType >::doUpdate ; (; ). inlineoverride . ◆ getCounter(). template<typename DataEngineType > . unsigned sofa::TestDataEngine< DataEngineType >::getCounter ; (; ); const. inline . ◆ resetCounter(). template<typename DataEngineType > . void sofa::TestDataEngine< DataEngineType >::resetCounter ; (; ). inline . ◆ SOFA_CLASS(). template<typename DataEngineType > . sofa::TestDataEngine< DataEngineType >::SOFA_CLASS ; (; SOFA_TEMPLATE(TestDataEngine< DataEngineType >, DataEngineType) ; , . DataEngineType ;  . ). sofaTestDataEngine; Generated on Mon Nov 11 2024 02:16:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_test_data_engine.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine.html:618,Testability,Test,TestDataEngine,618,"﻿. SOFA API: sofa::TestDataEngine< DataEngineType > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::TestDataEngine< DataEngineType > Class Template Reference . #include <DataEngineTestCreation.h>. Inheritance diagram for sofa::TestDataEngine< DataEngineType >:. [legend]. Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(TestDataEngine, DataEngineType), DataEngineType);  ;  TestDataEngine ();  ; void doUpdate () override;  ; void resetCounter ();  ; unsigned getCounter () const;  . Constructor details. ◆ TestDataEngine(). template<typename DataEngineType > . sofa::TestDataEngine< DataEngineType >::TestDataEngine ; (; ). inline . Function details. ◆ doUpdate(). template<typename DataEngineType > . void sofa::TestDataEngine< DataEngineType >::doUpdate ; (; ). inlineoverride . ◆ getCounter(). template<typename DataEngineType > . unsigned sofa::TestDataEngine< DataEngineType >::getCounter ; (; ); const. inline . ◆ resetCounter(). template<typename DataEngineType > . void sofa::TestDataEngine< DataEngineType >::resetCounter ; (; ). inline . ◆ SOFA_CLASS(). template<typename DataEngineType > . sofa::TestDataEngine< DataEngineType >::SOFA_CLASS ; (; SOFA_TEMPLATE(TestDataEngine< DataEngineType >, DataEngineType) ; , . DataEngineType ;  . ). sofaTestDataEngine; Generated on Mon Nov 11 2024 02:16:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_test_data_engine.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine.html:679,Testability,Test,TestDataEngine,679,"﻿. SOFA API: sofa::TestDataEngine< DataEngineType > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::TestDataEngine< DataEngineType > Class Template Reference . #include <DataEngineTestCreation.h>. Inheritance diagram for sofa::TestDataEngine< DataEngineType >:. [legend]. Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(TestDataEngine, DataEngineType), DataEngineType);  ;  TestDataEngine ();  ; void doUpdate () override;  ; void resetCounter ();  ; unsigned getCounter () const;  . Constructor details. ◆ TestDataEngine(). template<typename DataEngineType > . sofa::TestDataEngine< DataEngineType >::TestDataEngine ; (; ). inline . Function details. ◆ doUpdate(). template<typename DataEngineType > . void sofa::TestDataEngine< DataEngineType >::doUpdate ; (; ). inlineoverride . ◆ getCounter(). template<typename DataEngineType > . unsigned sofa::TestDataEngine< DataEngineType >::getCounter ; (; ); const. inline . ◆ resetCounter(). template<typename DataEngineType > . void sofa::TestDataEngine< DataEngineType >::resetCounter ; (; ). inline . ◆ SOFA_CLASS(). template<typename DataEngineType > . sofa::TestDataEngine< DataEngineType >::SOFA_CLASS ; (; SOFA_TEMPLATE(TestDataEngine< DataEngineType >, DataEngineType) ; , . DataEngineType ;  . ). sofaTestDataEngine; Generated on Mon Nov 11 2024 02:16:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_test_data_engine.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine.html:713,Testability,Test,TestDataEngine,713,"﻿. SOFA API: sofa::TestDataEngine< DataEngineType > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::TestDataEngine< DataEngineType > Class Template Reference . #include <DataEngineTestCreation.h>. Inheritance diagram for sofa::TestDataEngine< DataEngineType >:. [legend]. Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(TestDataEngine, DataEngineType), DataEngineType);  ;  TestDataEngine ();  ; void doUpdate () override;  ; void resetCounter ();  ; unsigned getCounter () const;  . Constructor details. ◆ TestDataEngine(). template<typename DataEngineType > . sofa::TestDataEngine< DataEngineType >::TestDataEngine ; (; ). inline . Function details. ◆ doUpdate(). template<typename DataEngineType > . void sofa::TestDataEngine< DataEngineType >::doUpdate ; (; ). inlineoverride . ◆ getCounter(). template<typename DataEngineType > . unsigned sofa::TestDataEngine< DataEngineType >::getCounter ; (; ); const. inline . ◆ resetCounter(). template<typename DataEngineType > . void sofa::TestDataEngine< DataEngineType >::resetCounter ; (; ). inline . ◆ SOFA_CLASS(). template<typename DataEngineType > . sofa::TestDataEngine< DataEngineType >::SOFA_CLASS ; (; SOFA_TEMPLATE(TestDataEngine< DataEngineType >, DataEngineType) ; , . DataEngineType ;  . ). sofaTestDataEngine; Generated on Mon Nov 11 2024 02:16:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_test_data_engine.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine.html:825,Testability,Test,TestDataEngine,825,"﻿. SOFA API: sofa::TestDataEngine< DataEngineType > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::TestDataEngine< DataEngineType > Class Template Reference . #include <DataEngineTestCreation.h>. Inheritance diagram for sofa::TestDataEngine< DataEngineType >:. [legend]. Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(TestDataEngine, DataEngineType), DataEngineType);  ;  TestDataEngine ();  ; void doUpdate () override;  ; void resetCounter ();  ; unsigned getCounter () const;  . Constructor details. ◆ TestDataEngine(). template<typename DataEngineType > . sofa::TestDataEngine< DataEngineType >::TestDataEngine ; (; ). inline . Function details. ◆ doUpdate(). template<typename DataEngineType > . void sofa::TestDataEngine< DataEngineType >::doUpdate ; (; ). inlineoverride . ◆ getCounter(). template<typename DataEngineType > . unsigned sofa::TestDataEngine< DataEngineType >::getCounter ; (; ); const. inline . ◆ resetCounter(). template<typename DataEngineType > . void sofa::TestDataEngine< DataEngineType >::resetCounter ; (; ). inline . ◆ SOFA_CLASS(). template<typename DataEngineType > . sofa::TestDataEngine< DataEngineType >::SOFA_CLASS ; (; SOFA_TEMPLATE(TestDataEngine< DataEngineType >, DataEngineType) ; , . DataEngineType ;  . ). sofaTestDataEngine; Generated on Mon Nov 11 2024 02:16:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_test_data_engine.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine.html:961,Testability,Test,TestDataEngine,961,"﻿. SOFA API: sofa::TestDataEngine< DataEngineType > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::TestDataEngine< DataEngineType > Class Template Reference . #include <DataEngineTestCreation.h>. Inheritance diagram for sofa::TestDataEngine< DataEngineType >:. [legend]. Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(TestDataEngine, DataEngineType), DataEngineType);  ;  TestDataEngine ();  ; void doUpdate () override;  ; void resetCounter ();  ; unsigned getCounter () const;  . Constructor details. ◆ TestDataEngine(). template<typename DataEngineType > . sofa::TestDataEngine< DataEngineType >::TestDataEngine ; (; ). inline . Function details. ◆ doUpdate(). template<typename DataEngineType > . void sofa::TestDataEngine< DataEngineType >::doUpdate ; (; ). inlineoverride . ◆ getCounter(). template<typename DataEngineType > . unsigned sofa::TestDataEngine< DataEngineType >::getCounter ; (; ); const. inline . ◆ resetCounter(). template<typename DataEngineType > . void sofa::TestDataEngine< DataEngineType >::resetCounter ; (; ). inline . ◆ SOFA_CLASS(). template<typename DataEngineType > . sofa::TestDataEngine< DataEngineType >::SOFA_CLASS ; (; SOFA_TEMPLATE(TestDataEngine< DataEngineType >, DataEngineType) ; , . DataEngineType ;  . ). sofaTestDataEngine; Generated on Mon Nov 11 2024 02:16:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_test_data_engine.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine.html:1096,Testability,Test,TestDataEngine,1096,"﻿. SOFA API: sofa::TestDataEngine< DataEngineType > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::TestDataEngine< DataEngineType > Class Template Reference . #include <DataEngineTestCreation.h>. Inheritance diagram for sofa::TestDataEngine< DataEngineType >:. [legend]. Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(TestDataEngine, DataEngineType), DataEngineType);  ;  TestDataEngine ();  ; void doUpdate () override;  ; void resetCounter ();  ; unsigned getCounter () const;  . Constructor details. ◆ TestDataEngine(). template<typename DataEngineType > . sofa::TestDataEngine< DataEngineType >::TestDataEngine ; (; ). inline . Function details. ◆ doUpdate(). template<typename DataEngineType > . void sofa::TestDataEngine< DataEngineType >::doUpdate ; (; ). inlineoverride . ◆ getCounter(). template<typename DataEngineType > . unsigned sofa::TestDataEngine< DataEngineType >::getCounter ; (; ); const. inline . ◆ resetCounter(). template<typename DataEngineType > . void sofa::TestDataEngine< DataEngineType >::resetCounter ; (; ). inline . ◆ SOFA_CLASS(). template<typename DataEngineType > . sofa::TestDataEngine< DataEngineType >::SOFA_CLASS ; (; SOFA_TEMPLATE(TestDataEngine< DataEngineType >, DataEngineType) ; , . DataEngineType ;  . ). sofaTestDataEngine; Generated on Mon Nov 11 2024 02:16:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_test_data_engine.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine.html:1219,Testability,Test,TestDataEngine,1219,"﻿. SOFA API: sofa::TestDataEngine< DataEngineType > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::TestDataEngine< DataEngineType > Class Template Reference . #include <DataEngineTestCreation.h>. Inheritance diagram for sofa::TestDataEngine< DataEngineType >:. [legend]. Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(TestDataEngine, DataEngineType), DataEngineType);  ;  TestDataEngine ();  ; void doUpdate () override;  ; void resetCounter ();  ; unsigned getCounter () const;  . Constructor details. ◆ TestDataEngine(). template<typename DataEngineType > . sofa::TestDataEngine< DataEngineType >::TestDataEngine ; (; ). inline . Function details. ◆ doUpdate(). template<typename DataEngineType > . void sofa::TestDataEngine< DataEngineType >::doUpdate ; (; ). inlineoverride . ◆ getCounter(). template<typename DataEngineType > . unsigned sofa::TestDataEngine< DataEngineType >::getCounter ; (; ); const. inline . ◆ resetCounter(). template<typename DataEngineType > . void sofa::TestDataEngine< DataEngineType >::resetCounter ; (; ). inline . ◆ SOFA_CLASS(). template<typename DataEngineType > . sofa::TestDataEngine< DataEngineType >::SOFA_CLASS ; (; SOFA_TEMPLATE(TestDataEngine< DataEngineType >, DataEngineType) ; , . DataEngineType ;  . ). sofaTestDataEngine; Generated on Mon Nov 11 2024 02:16:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_test_data_engine.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine.html:1283,Testability,Test,TestDataEngine,1283,"﻿. SOFA API: sofa::TestDataEngine< DataEngineType > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::TestDataEngine< DataEngineType > Class Template Reference . #include <DataEngineTestCreation.h>. Inheritance diagram for sofa::TestDataEngine< DataEngineType >:. [legend]. Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(TestDataEngine, DataEngineType), DataEngineType);  ;  TestDataEngine ();  ; void doUpdate () override;  ; void resetCounter ();  ; unsigned getCounter () const;  . Constructor details. ◆ TestDataEngine(). template<typename DataEngineType > . sofa::TestDataEngine< DataEngineType >::TestDataEngine ; (; ). inline . Function details. ◆ doUpdate(). template<typename DataEngineType > . void sofa::TestDataEngine< DataEngineType >::doUpdate ; (; ). inlineoverride . ◆ getCounter(). template<typename DataEngineType > . unsigned sofa::TestDataEngine< DataEngineType >::getCounter ; (; ); const. inline . ◆ resetCounter(). template<typename DataEngineType > . void sofa::TestDataEngine< DataEngineType >::resetCounter ; (; ). inline . ◆ SOFA_CLASS(). template<typename DataEngineType > . sofa::TestDataEngine< DataEngineType >::SOFA_CLASS ; (; SOFA_TEMPLATE(TestDataEngine< DataEngineType >, DataEngineType) ; , . DataEngineType ;  . ). sofaTestDataEngine; Generated on Mon Nov 11 2024 02:16:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_test_data_engine.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine.html
https://www.sofa-framework.org/api/master/sofa/html/class_basic_mapping.html:148,Modifiability,Inherit,Inheritance,148,﻿. SOFA API: BasicMapping Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. BasicMapping Class Reference . Inheritance diagram for BasicMapping:. [legend]. BasicMapping; Generated on Mon Nov 11 2024 02:15:07 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/class_basic_mapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/class_basic_mapping.html
https://www.sofa-framework.org/api/master/sofa/html/class_data_engine_type.html:152,Modifiability,Inherit,Inheritance,152,﻿. SOFA API: DataEngineType Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. DataEngineType Class Reference . Inheritance diagram for DataEngineType:. [legend]. DataEngineType; Generated on Mon Nov 11 2024 02:15:07 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/class_data_engine_type.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/class_data_engine_type.html
https://www.sofa-framework.org/api/master/sofa/html/class_eigen_1_1_sparse_time_dense_product___m_t-members.html:260,Modifiability,inherit,inherited,260,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Eigen::SparseTimeDenseProduct_MT< Lhs, Rhs > Member List . This is the complete list of members for Eigen::SparseTimeDenseProduct_MT< Lhs, Rhs >, including all inherited members. scaleAndAddTo(Dest &dest, const Scalar &alpha) constEigen::SparseTimeDenseProduct_MT< Lhs, Rhs >inline; SparseTimeDenseProduct_MT(const Lhs &lhs, const Rhs &rhs, unsigned nbThreads)Eigen::SparseTimeDenseProduct_MT< Lhs, Rhs >inline. Generated on Mon Nov 11 2024 02:15:18 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/class_eigen_1_1_sparse_time_dense_product___m_t-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/class_eigen_1_1_sparse_time_dense_product___m_t-members.html
https://www.sofa-framework.org/api/master/sofa/html/class_eigen_1_1_sparse_time_dense_product___m_t.html:318,Modifiability,Inherit,Inheritance,318,"﻿. SOFA API: Eigen::SparseTimeDenseProduct_MT< Lhs, Rhs > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . Eigen::SparseTimeDenseProduct_MT< Lhs, Rhs > Class Template Reference . #include <EigenBaseSparseMatrix_MT.h>. Inheritance diagram for Eigen::SparseTimeDenseProduct_MT< Lhs, Rhs >:. [legend]. Public Member Functions;  SparseTimeDenseProduct_MT (const Lhs &lhs, const Rhs &rhs, unsigned nbThreads);  ; template<typename Dest > ; void scaleAndAddTo (Dest &dest, const Scalar &alpha) const;  . Constructor details. ◆ SparseTimeDenseProduct_MT(). template<typename Lhs , typename Rhs > . Eigen::SparseTimeDenseProduct_MT< Lhs, Rhs >::SparseTimeDenseProduct_MT ; (; const Lhs & ; lhs, . const Rhs & ; rhs, . unsigned ; nbThreads . ). inline . Function details. ◆ scaleAndAddTo(). template<typename Lhs , typename Rhs > . template<typename Dest > . void Eigen::SparseTimeDenseProduct_MT< Lhs, Rhs >::scaleAndAddTo ; (; Dest & ; dest, . const Scalar & ; alpha . ); const. inline . EigenSparseTimeDenseProduct_MT; Generated on Mon Nov 11 2024 02:15:18 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/class_eigen_1_1_sparse_time_dense_product___m_t.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/class_eigen_1_1_sparse_time_dense_product___m_t.html
https://www.sofa-framework.org/api/master/sofa/html/class_info.html:132,Modifiability,Inherit,Inheritance,132,﻿. SOFA API: Info Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Info Class Reference . Inheritance diagram for Info:. [legend]. Info; Generated on Mon Nov 11 2024 02:15:07 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/class_info.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/class_info.html
https://www.sofa-framework.org/api/master/sofa/html/class_q_application.html:148,Modifiability,Inherit,Inheritance,148,﻿. SOFA API: QApplication Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. QApplication Class Reference . Inheritance diagram for QApplication:. [legend]. QApplication; Generated on Mon Nov 11 2024 02:15:07 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/class_q_application.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/class_q_application.html
https://www.sofa-framework.org/api/master/sofa/html/class_q_chart_view.html:144,Modifiability,Inherit,Inheritance,144,﻿. SOFA API: QChartView Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. QChartView Class Reference . Inheritance diagram for QChartView:. [legend]. QChartView; Generated on Mon Nov 11 2024 02:15:07 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/class_q_chart_view.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/class_q_chart_view.html
https://www.sofa-framework.org/api/master/sofa/html/class_q_dialog.html:138,Modifiability,Inherit,Inheritance,138,﻿. SOFA API: QDialog Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. QDialog Class Reference . Inheritance diagram for QDialog:. [legend]. QDialog; Generated on Mon Nov 11 2024 02:15:07 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/class_q_dialog.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/class_q_dialog.html
https://www.sofa-framework.org/api/master/sofa/html/class_q_group_box.html:142,Modifiability,Inherit,Inheritance,142,﻿. SOFA API: QGroupBox Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. QGroupBox Class Reference . Inheritance diagram for QGroupBox:. [legend]. QGroupBox; Generated on Mon Nov 11 2024 02:15:07 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/class_q_group_box.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/class_q_group_box.html
https://www.sofa-framework.org/api/master/sofa/html/class_q_g_l_viewer.html:142,Modifiability,Inherit,Inheritance,142,﻿. SOFA API: QGLViewer Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. QGLViewer Class Reference . Inheritance diagram for QGLViewer:. [legend]. QGLViewer; Generated on Mon Nov 11 2024 02:15:07 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/class_q_g_l_viewer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/class_q_g_l_viewer.html
https://www.sofa-framework.org/api/master/sofa/html/class_q_line_edit.html:142,Modifiability,Inherit,Inheritance,142,﻿. SOFA API: QLineEdit Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. QLineEdit Class Reference . Inheritance diagram for QLineEdit:. [legend]. QLineEdit; Generated on Mon Nov 11 2024 02:15:07 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/class_q_line_edit.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/class_q_line_edit.html
https://www.sofa-framework.org/api/master/sofa/html/class_q_line_series.html:146,Modifiability,Inherit,Inheritance,146,﻿. SOFA API: QLineSeries Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. QLineSeries Class Reference . Inheritance diagram for QLineSeries:. [legend]. QLineSeries; Generated on Mon Nov 11 2024 02:15:07 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/class_q_line_series.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/class_q_line_series.html
https://www.sofa-framework.org/api/master/sofa/html/class_q_object.html:138,Modifiability,Inherit,Inheritance,138,﻿. SOFA API: QObject Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. QObject Class Reference . Inheritance diagram for QObject:. [legend]. QObject; Generated on Mon Nov 11 2024 02:15:07 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/class_q_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/class_q_object.html
https://www.sofa-framework.org/api/master/sofa/html/class_q_push_button.html:146,Modifiability,Inherit,Inheritance,146,﻿. SOFA API: QPushButton Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. QPushButton Class Reference . Inheritance diagram for QPushButton:. [legend]. QPushButton; Generated on Mon Nov 11 2024 02:15:07 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/class_q_push_button.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/class_q_push_button.html
https://www.sofa-framework.org/api/master/sofa/html/class_q_tree_widget.html:146,Modifiability,Inherit,Inheritance,146,﻿. SOFA API: QTreeWidget Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. QTreeWidget Class Reference . Inheritance diagram for QTreeWidget:. [legend]. QTreeWidget; Generated on Mon Nov 11 2024 02:15:07 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/class_q_tree_widget.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/class_q_tree_widget.html
https://www.sofa-framework.org/api/master/sofa/html/class_q_widget.html:138,Modifiability,Inherit,Inheritance,138,﻿. SOFA API: QWidget Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. QWidget Class Reference . Inheritance diagram for QWidget:. [legend]. QWidget; Generated on Mon Nov 11 2024 02:15:07 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/class_q_widget.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/class_q_widget.html
https://www.sofa-framework.org/api/master/sofa/html/class_state_life_cycle.html:152,Modifiability,Inherit,Inheritance,152,﻿. SOFA API: StateLifeCycle Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. StateLifeCycle Class Reference . Inheritance diagram for StateLifeCycle:. [legend]. StateLifeCycle; Generated on Mon Nov 11 2024 02:15:07 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/class_state_life_cycle.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/class_state_life_cycle.html
https://www.sofa-framework.org/api/master/sofa/html/class_storage_policy.html:150,Modifiability,Inherit,Inheritance,150,﻿. SOFA API: StoragePolicy Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. StoragePolicy Class Reference . Inheritance diagram for StoragePolicy:. [legend]. StoragePolicy; Generated on Mon Nov 11 2024 02:15:07 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/class_storage_policy.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/class_storage_policy.html
https://www.sofa-framework.org/api/master/sofa/html/class_thread_access_policy.html:160,Modifiability,Inherit,Inheritance,160,﻿. SOFA API: ThreadAccessPolicy Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. ThreadAccessPolicy Class Reference . Inheritance diagram for ThreadAccessPolicy:. [legend]. ThreadAccessPolicy; Generated on Mon Nov 11 2024 02:15:07 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/class_thread_access_policy.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/class_thread_access_policy.html
https://www.sofa-framework.org/api/master/sofa/html/class_t_base.html:134,Modifiability,Inherit,Inheritance,134,﻿. SOFA API: TBase Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. TBase Class Reference . Inheritance diagram for TBase:. [legend]. TBase; Generated on Mon Nov 11 2024 02:15:07 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/class_t_base.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/class_t_base.html
https://www.sofa-framework.org/api/master/sofa/html/class_t_base_matrix_accumulator.html:168,Modifiability,Inherit,Inheritance,168,﻿. SOFA API: TBaseMatrixAccumulator Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. TBaseMatrixAccumulator Class Reference . Inheritance diagram for TBaseMatrixAccumulator:. [legend]. TBaseMatrixAccumulator; Generated on Mon Nov 11 2024 02:15:07 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/class_t_base_matrix_accumulator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/class_t_base_matrix_accumulator.html
https://www.sofa-framework.org/api/master/sofa/html/class_t_mapping.html:140,Modifiability,Inherit,Inheritance,140,﻿. SOFA API: TMapping Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. TMapping Class Reference . Inheritance diagram for TMapping:. [legend]. TMapping; Generated on Mon Nov 11 2024 02:15:07 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/class_t_mapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/class_t_mapping.html
https://www.sofa-framework.org/api/master/sofa/html/class_t_matrix_accumulator.html:160,Modifiability,Inherit,Inheritance,160,﻿. SOFA API: TMatrixAccumulator Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. TMatrixAccumulator Class Reference . Inheritance diagram for TMatrixAccumulator:. [legend]. TMatrixAccumulator; Generated on Mon Nov 11 2024 02:15:07 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/class_t_matrix_accumulator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/class_t_matrix_accumulator.html
https://www.sofa-framework.org/api/master/sofa/html/class_visual_model_policy_type.html:166,Modifiability,Inherit,Inheritance,166,﻿. SOFA API: VisualModelPolicyType Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. VisualModelPolicyType Class Reference . Inheritance diagram for VisualModelPolicyType:. [legend]. VisualModelPolicyType; Generated on Mon Nov 11 2024 02:15:07 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/class_visual_model_policy_type.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/class_visual_model_policy_type.html
https://www.sofa-framework.org/api/master/sofa/html/class_w_double_line_edit-members.html:202,Modifiability,inherit,inherited,202,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. WDoubleLineEdit Member List . This is the complete list of members for WDoubleLineEdit, including all inherited members. checkValue()WDoubleLineEditprotected; getDisplayedValue()WDoubleLineEditinline; getIntDisplayedValue()WDoubleLineEditinline; getIntValue()WDoubleLineEditinline; getMaxValue()WDoubleLineEditinline; getMinValue()WDoubleLineEditinline; getValue()WDoubleLineEditinline; intValueWDoubleLineEdit; intValue() constWDoubleLineEditinline; keyPressEvent(QKeyEvent *) overrideWDoubleLineEditprotected; m_bFirstWDoubleLineEditprotected; m_bInternalWDoubleLineEditprotected; m_DblValidWDoubleLineEditprotected; m_fMaxValueWDoubleLineEditprotected; m_fMinValueWDoubleLineEditprotected; m_fValueWDoubleLineEditmutableprotected; m_iPercentWDoubleLineEditprotected; m_isDraggingWDoubleLineEditprotected; m_prevMousePositionWDoubleLineEditprotected; maxValueWDoubleLineEdit; maxValue() constWDoubleLineEditinline; minValueWDoubleLineEdit; minValue() constWDoubleLineEditinline; mouseMoveEvent(QMouseEvent *) overrideWDoubleLineEditprotected; mousePressEvent(QMouseEvent *) overrideWDoubleLineEditprotected; mouseReleaseEvent(QMouseEvent *) overrideWDoubleLineEditprotected; setIntValue(int f)WDoubleLineEdit; setMaxValue(double f)WDoubleLineEditinline; setMinValue(double f)WDoubleLineEditinline; setValue(double f)WDoubleLineEdit; setValuePercent(int p)WDoubleLineEditslot; slotCalcValue(const QString &)WDoubleLineEditprotectedslot; slotCalcValue(double, bool isEditted=false)WDoubleLineEditprotectedslot; slotReturnPressed()WDoubleLineEditprotectedslot; ValueWDoubleLineEdit; Value() constWDoubleLineEditinline; valueChanged(double)WDoubleLineEditsignal; valueEdited(double)WDoubleLineEditsignal; valuePercent()WDoubleLineEdit; valuePercentChanged(int)WDoubleLineEditsignal; WDoubleLineEdit(QWidget *parent, const char *name)WDoubleLineEdit. Generated on Mon Nov 11 2024 02:15:07 for SOFA API by",MatchSource.WIKI,api/master/sofa/html/class_w_double_line_edit-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/class_w_double_line_edit-members.html
https://www.sofa-framework.org/api/master/sofa/html/class_w_double_line_edit.html:347,Modifiability,Inherit,Inheritance,347,"﻿. SOFA API: WDoubleLineEdit Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; Signals |; Public Slots |; Protected Slots |; Properties |; List of all members . WDoubleLineEdit Class Reference . #include <WDoubleLineEdit.h>. Inheritance diagram for WDoubleLineEdit:. [legend]. Protected Attributes; int m_iPercent;  ; double m_fMinValue;  ; double m_fMaxValue;  ; bool m_bFirst;  ; double m_fValue;  ; QDoubleValidator * m_DblValid;  ; double m_bInternal;  ; bool m_isDragging;  ; QPoint m_prevMousePosition;  . Public Member Functions;  WDoubleLineEdit (QWidget *parent, const char *name);  ; double minValue () const;  ; double getMinValue ();  ; void setMinValue (double f);  ; double maxValue () const;  ; double getMaxValue ();  ; void setMaxValue (double f);  ; double Value () const;  ; double getValue ();  ; void setValue (double f);  ; int intValue () const;  ; int getIntValue ();  ; void setIntValue (int f);  ; int valuePercent ();  ; double getDisplayedValue ();  ; int getIntDisplayedValue ();  . Protected Member Functions; void checkValue ();  ; void keyPressEvent (QKeyEvent *) override;  ; void mouseMoveEvent (QMouseEvent *) override;  ; void mousePressEvent (QMouseEvent *) override;  ; void mouseReleaseEvent (QMouseEvent *) override;  . Signals; void valueEdited (double);  ; void valueChanged (double);  ; void valuePercentChanged (int);  . Public Slots; void setValuePercent (int p);  . Protected Slots; void slotCalcValue (const QString &);  ; void slotCalcValue (double, bool isEditted=false);  ; void slotReturnPressed ();  . Properties; double minValue;  ; double maxValue;  ; double Value;  ; int intValue;  . Attribute details. ◆ m_bFirst. bool WDoubleLineEdit::m_bFirst. protected . ◆ m_bInternal. double WDoubleLineEdit::m_bInternal. protected . ◆ m_DblValid. QDoubleValidator* WDoubleLineEdit::m_DblValid. protected . ◆ m_fMaxValue. double WDoub",MatchSource.WIKI,api/master/sofa/html/class_w_double_line_edit.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/class_w_double_line_edit.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:1760,Energy Efficiency,green,green,1760,"; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the pointed class or struct is accessible. . A yellow dashed arrow denotes a relation between a template instance and the template class it was instantiated from. The arrow is labelled with the template parameters of the instance. . Generated on Mon Nov 11 2024 03:36:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:318,Modifiability,inherit,inheritance,318,"﻿. SOFA API: Graph Legend. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Graph Legend . This page explains how to interpret the graphs that are generated by doxygen.; Consider the following example: /*! Invisible class because of truncation */; class Invisible { };; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:491,Modifiability,inherit,inherited,491,"﻿. SOFA API: Graph Legend. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Graph Legend . This page explains how to interpret the graphs that are generated by doxygen.; Consider the following example: /*! Invisible class because of truncation */; class Invisible { };; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:514,Modifiability,inherit,inheritance,514,"﻿. SOFA API: Graph Legend. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Graph Legend . This page explains how to interpret the graphs that are generated by doxygen.; Consider the following example: /*! Invisible class because of truncation */; class Invisible { };; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:655,Modifiability,inherit,inherited,655,"﻿. SOFA API: Graph Legend. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Graph Legend . This page explains how to interpret the graphs that are generated by doxygen.; Consider the following example: /*! Invisible class because of truncation */; class Invisible { };; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:681,Modifiability,inherit,inheritance,681,"﻿. SOFA API: Graph Legend. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Graph Legend . This page explains how to interpret the graphs that are generated by doxygen.; Consider the following example: /*! Invisible class because of truncation */; class Invisible { };; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:743,Modifiability,inherit,inherited,743,"﻿. SOFA API: Graph Legend. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Graph Legend . This page explains how to interpret the graphs that are generated by doxygen.; Consider the following example: /*! Invisible class because of truncation */; class Invisible { };; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:767,Modifiability,inherit,inheritance,767,"﻿. SOFA API: Graph Legend. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Graph Legend . This page explains how to interpret the graphs that are generated by doxygen.; Consider the following example: /*! Invisible class because of truncation */; class Invisible { };; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:839,Modifiability,Inherit,Inherited,839,"﻿. SOFA API: Graph Legend. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Graph Legend . This page explains how to interpret the graphs that are generated by doxygen.; Consider the following example: /*! Invisible class because of truncation */; class Invisible { };; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:899,Modifiability,inherit,inherits,899,"﻿. SOFA API: Graph Legend. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Graph Legend . This page explains how to interpret the graphs that are generated by doxygen.; Consider the following example: /*! Invisible class because of truncation */; class Invisible { };; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:944,Modifiability,Inherit,Inherited,944,"﻿. SOFA API: Graph Legend. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Graph Legend . This page explains how to interpret the graphs that are generated by doxygen.; Consider the following example: /*! Invisible class because of truncation */; class Invisible { };; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:1500,Modifiability,inherit,inheritance,1500,"; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the pointed class or struct is accessible. . A yellow dashed arrow denotes a relation between a template instance and the template class it was instantiated from. The arrow is labelled with the template parameters of the instance. . Generated on Mon Nov 11 2024 03:36:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:1709,Modifiability,inherit,inheritance,1709,"; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the pointed class or struct is accessible. . A yellow dashed arrow denotes a relation between a template instance and the template class it was instantiated from. The arrow is labelled with the template parameters of the instance. . Generated on Mon Nov 11 2024 03:36:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:1794,Modifiability,inherit,inheritance,1794,"; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the pointed class or struct is accessible. . A yellow dashed arrow denotes a relation between a template instance and the template class it was instantiated from. The arrow is labelled with the template parameters of the instance. . Generated on Mon Nov 11 2024 03:36:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:1846,Modifiability,inherit,inheritance,1846,"; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the pointed class or struct is accessible. . A yellow dashed arrow denotes a relation between a template instance and the template class it was instantiated from. The arrow is labelled with the template parameters of the instance. . Generated on Mon Nov 11 2024 03:36:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:1972,Modifiability,variab,variable,1972,"; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the pointed class or struct is accessible. . A yellow dashed arrow denotes a relation between a template instance and the template class it was instantiated from. The arrow is labelled with the template parameters of the instance. . Generated on Mon Nov 11 2024 03:36:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:2029,Security,access,accessible,2029,"; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the pointed class or struct is accessible. . A yellow dashed arrow denotes a relation between a template instance and the template class it was instantiated from. The arrow is labelled with the template parameters of the instance. . Generated on Mon Nov 11 2024 03:36:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:452,Usability,Undo,Undocumented,452,"﻿. SOFA API: Graph Legend. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Graph Legend . This page explains how to interpret the graphs that are generated by doxygen.; Consider the following example: /*! Invisible class because of truncation */; class Invisible { };; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:1031,Usability,Undo,Undocumented,1031,"﻿. SOFA API: Graph Legend. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Graph Legend . This page explains how to interpret the graphs that are generated by doxygen.; Consider the following example: /*! Invisible class because of truncation */; class Invisible { };; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:1390,Usability,undo,undocumented,1390,"; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the pointed class or struct is accessible. . A yellow dashed arrow denotes a relation between a template instance and the template class it was instantiated from. The arrow is labelled with the template parameters of the instance. . Generated on Mon Nov 11 2024 03:36:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/index.html:343,Availability,avail,available,343,﻿. SOFA API: SOFA API Documentation. . SOFA API;  679a9147. Open source framework for multi-physics simuation. SOFA API Documentation . You are on the main page of the SOFA API Documentation. This is the starting point of the documentation of the classes of the framework itself.; A general introduction to SOFA and the user documentation are available on https://www.sofa-framework.org/community/doc/; Plugins; Plugins doc are listed on the Plugins page. . Generated on Mon Nov 11 2024 03:36:34 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/index.html
https://www.sofa-framework.org/api/master/sofa/html/index.html:403,Modifiability,Plugin,Plugins,403,﻿. SOFA API: SOFA API Documentation. . SOFA API;  679a9147. Open source framework for multi-physics simuation. SOFA API Documentation . You are on the main page of the SOFA API Documentation. This is the starting point of the documentation of the classes of the framework itself.; A general introduction to SOFA and the user documentation are available on https://www.sofa-framework.org/community/doc/; Plugins; Plugins doc are listed on the Plugins page. . Generated on Mon Nov 11 2024 03:36:34 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/index.html
https://www.sofa-framework.org/api/master/sofa/html/index.html:412,Modifiability,Plugin,Plugins,412,﻿. SOFA API: SOFA API Documentation. . SOFA API;  679a9147. Open source framework for multi-physics simuation. SOFA API Documentation . You are on the main page of the SOFA API Documentation. This is the starting point of the documentation of the classes of the framework itself.; A general introduction to SOFA and the user documentation are available on https://www.sofa-framework.org/community/doc/; Plugins; Plugins doc are listed on the Plugins page. . Generated on Mon Nov 11 2024 03:36:34 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/index.html
https://www.sofa-framework.org/api/master/sofa/html/index.html:442,Modifiability,Plugin,Plugins,442,﻿. SOFA API: SOFA API Documentation. . SOFA API;  679a9147. Open source framework for multi-physics simuation. SOFA API Documentation . You are on the main page of the SOFA API Documentation. This is the starting point of the documentation of the classes of the framework itself.; A general introduction to SOFA and the user documentation are available on https://www.sofa-framework.org/community/doc/; Plugins; Plugins doc are listed on the Plugins page. . Generated on Mon Nov 11 2024 03:36:34 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/index.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:1130,Availability,avail,available,1130,"mespaces |; Classes |; Typedefs |; Functions |; Variables . sofa Namespace Reference . Namespaces;  collision_test;  ;  component;  ;  core;  ;  defaulttype;  ;  framework;  ;  geometry;  ;  gl;  Forward declaration. ;  ;  gui;  ;  helper;  ;  linearalgebra;  ;  mapping_test;  ;  simpleapi;  ;  simulation;  ;  testing;  ;  topology;  ;  type;  for std::pair ;  . Classes; class  TestDataEngine;  ; struct  DataEngine_test;  Helper for writing DataEngine tests. More...;  ; struct  MultiMapping_test;  Base class for the MultiMapping tests, directly adapted from Mapping_test. More...;  ; struct  AffinePatch_sofa_test;  ; struct  CylinderTractionStruct;  Structure which contains the nodes and the pointers useful for the cylindertraction test. More...;  ; struct  LinearElasticity_test;  ; struct  ForceField_test;  Helper for writing ForceField tests. The constructor creates a root node and adds it a State and a ForceField (of the parameter type of this template class). Pointers to node, state and force are available. Deriving the ForceField test from this class makes it easy to write: just call function run_test with positions, velocities and the corresponding expected forces. This function automatically checks not only the forces (function addForce), but also the stiffness (methods addDForce and addKToMatrix), using finite differences. More...;  ; struct  PatchTestStruct;  Structure which contains the nodes and the pointers useful for the patch test. More...;  ; class  TemplateAliasTest;  ; struct  AdvancedTimerTest;  ; struct  DefaultAnimationLoop_test;  . Typedefs; typedef Types< Vec3Types > DataTypes;  ; typedef component::statecontainer::MechanicalObject< defaulttype::Vec3Types > MechanicalObject3;  ; template<typename DataTypes > ; using Coord_t = typename DataTypes::Coord;  ; template<typename DataTypes > ; using Real_t = typename DataTypes::Real;  ; template<typename DataTypes > ; using VecReal_t = typename DataTypes::VecReal;  ; template<typename DataTypes > ; usin",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:1487,Deployability,Patch,PatchTestStruct,1487,"ngine_test;  Helper for writing DataEngine tests. More...;  ; struct  MultiMapping_test;  Base class for the MultiMapping tests, directly adapted from Mapping_test. More...;  ; struct  AffinePatch_sofa_test;  ; struct  CylinderTractionStruct;  Structure which contains the nodes and the pointers useful for the cylindertraction test. More...;  ; struct  LinearElasticity_test;  ; struct  ForceField_test;  Helper for writing ForceField tests. The constructor creates a root node and adds it a State and a ForceField (of the parameter type of this template class). Pointers to node, state and force are available. Deriving the ForceField test from this class makes it easy to write: just call function run_test with positions, velocities and the corresponding expected forces. This function automatically checks not only the forces (function addForce), but also the stiffness (methods addDForce and addKToMatrix), using finite differences. More...;  ; struct  PatchTestStruct;  Structure which contains the nodes and the pointers useful for the patch test. More...;  ; class  TemplateAliasTest;  ; struct  AdvancedTimerTest;  ; struct  DefaultAnimationLoop_test;  . Typedefs; typedef Types< Vec3Types > DataTypes;  ; typedef component::statecontainer::MechanicalObject< defaulttype::Vec3Types > MechanicalObject3;  ; template<typename DataTypes > ; using Coord_t = typename DataTypes::Coord;  ; template<typename DataTypes > ; using Real_t = typename DataTypes::Real;  ; template<typename DataTypes > ; using VecReal_t = typename DataTypes::VecReal;  ; template<typename DataTypes > ; using Deriv_t = typename DataTypes::Deriv;  ; template<typename DataTypes > ; using MatrixDeriv_t = typename DataTypes::MatrixDeriv;  ; template<typename DataTypes > ; using VecCoord_t = typename DataTypes::VecCoord;  ; template<typename DataTypes > ; using VecDeriv_t = typename DataTypes::VecDeriv;  ; template<typename DataTypes > ; using DataVecCoord_t = core::objectmodel::Data< VecCoord_t< DataTypes > >;  ; tem",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:1572,Deployability,patch,patch,1572,"ngine_test;  Helper for writing DataEngine tests. More...;  ; struct  MultiMapping_test;  Base class for the MultiMapping tests, directly adapted from Mapping_test. More...;  ; struct  AffinePatch_sofa_test;  ; struct  CylinderTractionStruct;  Structure which contains the nodes and the pointers useful for the cylindertraction test. More...;  ; struct  LinearElasticity_test;  ; struct  ForceField_test;  Helper for writing ForceField tests. The constructor creates a root node and adds it a State and a ForceField (of the parameter type of this template class). Pointers to node, state and force are available. Deriving the ForceField test from this class makes it easy to write: just call function run_test with positions, velocities and the corresponding expected forces. This function automatically checks not only the forces (function addForce), but also the stiffness (methods addDForce and addKToMatrix), using finite differences. More...;  ; struct  PatchTestStruct;  Structure which contains the nodes and the pointers useful for the patch test. More...;  ; class  TemplateAliasTest;  ; struct  AdvancedTimerTest;  ; struct  DefaultAnimationLoop_test;  . Typedefs; typedef Types< Vec3Types > DataTypes;  ; typedef component::statecontainer::MechanicalObject< defaulttype::Vec3Types > MechanicalObject3;  ; template<typename DataTypes > ; using Coord_t = typename DataTypes::Coord;  ; template<typename DataTypes > ; using Real_t = typename DataTypes::Real;  ; template<typename DataTypes > ; using VecReal_t = typename DataTypes::VecReal;  ; template<typename DataTypes > ; using Deriv_t = typename DataTypes::Deriv;  ; template<typename DataTypes > ; using MatrixDeriv_t = typename DataTypes::MatrixDeriv;  ; template<typename DataTypes > ; using VecCoord_t = typename DataTypes::VecCoord;  ; template<typename DataTypes > ; using VecDeriv_t = typename DataTypes::VecDeriv;  ; template<typename DataTypes > ; using DataVecCoord_t = core::objectmodel::Data< VecCoord_t< DataTypes > >;  ; tem",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:3331,Deployability,Patch,PatchTestStruct,3331,"rixDeriv;  ; template<typename DataTypes > ; using VecCoord_t = typename DataTypes::VecCoord;  ; template<typename DataTypes > ; using VecDeriv_t = typename DataTypes::VecDeriv;  ; template<typename DataTypes > ; using DataVecCoord_t = core::objectmodel::Data< VecCoord_t< DataTypes > >;  ; template<typename DataTypes > ; using DataVecDeriv_t = core::objectmodel::Data< VecDeriv_t< DataTypes > >;  ; template<typename DataTypes > ; using DataMatrixDeriv_t = core::objectmodel::Data< MatrixDeriv_t< DataTypes > >;  . Functions;  TYPED_TEST_SUITE (AffinePatch_sofa_test, DataTypes);  ;  TYPED_TEST (AffinePatch_sofa_test, patchTest2D);  ;  TYPED_TEST (AffinePatch_sofa_test, patchTest3D);  ; template<typename DataTypes > ; CylinderTractionStruct< DataTypes > createCylinderTractionScene (int resolutionCircumferential, int resolutionRadial, int resolutionHeight, int maxIter);  ;  TYPED_TEST_SUITE (LinearElasticity_test, DataTypes);  ;  TYPED_TEST (LinearElasticity_test, testTractionTensorMass);  ;  TYPED_TEST (LinearElasticity_test, testTractionCorotational);  ; template<class DataTypes > ; PatchTestStruct< DataTypes > createRegularGridScene (simulation::Node::SPtr root, typename DataTypes::Coord startPoint, typename DataTypes::Coord endPoint, int numX, int numY, int numZ, sofa::type::Vec< 6, SReal > entireBoxRoi, sofa::type::Vec< 6, SReal > inclusiveBox, sofa::type::Vec< 6, SReal > includedBox);  Create a scene with a regular grid and an affine constraint for patch test. More...;  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initSofaConfig ();  ;  TEST_F (TemplateAliasTest, Register);  ;  TEST_F (AdvancedTimerTest, IsEnabled);  ;  TEST_F (AdvancedTimerTest, SetOutputType);  ;  TEST_F (AdvancedTimerTest, End);  ; template<class mat > ; helper::OwnershipSPtr< mat > convertSPtr (const linearalgebra::BaseMatrix *m);  ;  TEST_F (DefaultAnimationLoop_test, testOneStep);  . Variables; const double pressureArray [] = {0.6, 0.2, -0.2, -0.6};  ; const size_t sizePressureArray = sizeof(pressureArr",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:3708,Deployability,patch,patch,3708,"rixDeriv;  ; template<typename DataTypes > ; using VecCoord_t = typename DataTypes::VecCoord;  ; template<typename DataTypes > ; using VecDeriv_t = typename DataTypes::VecDeriv;  ; template<typename DataTypes > ; using DataVecCoord_t = core::objectmodel::Data< VecCoord_t< DataTypes > >;  ; template<typename DataTypes > ; using DataVecDeriv_t = core::objectmodel::Data< VecDeriv_t< DataTypes > >;  ; template<typename DataTypes > ; using DataMatrixDeriv_t = core::objectmodel::Data< MatrixDeriv_t< DataTypes > >;  . Functions;  TYPED_TEST_SUITE (AffinePatch_sofa_test, DataTypes);  ;  TYPED_TEST (AffinePatch_sofa_test, patchTest2D);  ;  TYPED_TEST (AffinePatch_sofa_test, patchTest3D);  ; template<typename DataTypes > ; CylinderTractionStruct< DataTypes > createCylinderTractionScene (int resolutionCircumferential, int resolutionRadial, int resolutionHeight, int maxIter);  ;  TYPED_TEST_SUITE (LinearElasticity_test, DataTypes);  ;  TYPED_TEST (LinearElasticity_test, testTractionTensorMass);  ;  TYPED_TEST (LinearElasticity_test, testTractionCorotational);  ; template<class DataTypes > ; PatchTestStruct< DataTypes > createRegularGridScene (simulation::Node::SPtr root, typename DataTypes::Coord startPoint, typename DataTypes::Coord endPoint, int numX, int numY, int numZ, sofa::type::Vec< 6, SReal > entireBoxRoi, sofa::type::Vec< 6, SReal > inclusiveBox, sofa::type::Vec< 6, SReal > includedBox);  Create a scene with a regular grid and an affine constraint for patch test. More...;  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initSofaConfig ();  ;  TEST_F (TemplateAliasTest, Register);  ;  TEST_F (AdvancedTimerTest, IsEnabled);  ;  TEST_F (AdvancedTimerTest, SetOutputType);  ;  TEST_F (AdvancedTimerTest, End);  ; template<class mat > ; helper::OwnershipSPtr< mat > convertSPtr (const linearalgebra::BaseMatrix *m);  ;  TEST_F (DefaultAnimationLoop_test, testOneStep);  . Variables; const double pressureArray [] = {0.6, 0.2, -0.2, -0.6};  ; const size_t sizePressureArray = sizeof(pressureArr",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:6797,Deployability,Patch,PatchTestStruct,6797,"name DataTypes > . using sofa::VecReal_t = typedef typename DataTypes::VecReal. Function Documentation. ◆ convertSPtr(). template<class mat > . helper::OwnershipSPtr<mat> sofa::convertSPtr ; (; const linearalgebra::BaseMatrix * ; m). Converts a BaseMatrix to a eigen sparse matrix encapsulated in a OwnershipSPtr. It the conversion needs to create a temporary matrix, it will be automatically deleted by the OwnershipSPtr (with ownership). It the conversion did not create a temporary data, and points to an existing matrix, the OwnershipSPtr does not take the ownership and won't delete anything. @TODO move this somewhere else? AuthorMatthieu Nesme . ◆ createCylinderTractionScene(). template<typename DataTypes > . CylinderTractionStruct<DataTypes> sofa::createCylinderTractionScene ; (; int ; resolutionCircumferential, . int ; resolutionRadial, . int ; resolutionHeight, . int ; maxIter . ). ◆ createRegularGridScene(). template<class DataTypes > . PatchTestStruct<DataTypes> sofa::createRegularGridScene ; (; simulation::Node::SPtr ; root, . typename DataTypes::Coord ; startPoint, . typename DataTypes::Coord ; endPoint, . int ; numX, . int ; numY, . int ; numZ, . sofa::type::Vec< 6, SReal > ; entireBoxRoi, . sofa::type::Vec< 6, SReal > ; inclusiveBox, . sofa::type::Vec< 6, SReal > ; includedBox . ). Create a scene with a regular grid and an affine constraint for patch test. . ◆ initSofaConfig(). SOFA_EXPORT_DYNAMIC_LIBRARY void sofa::initSofaConfig ; (; ). ◆ TEST_F() [1/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . End ;  . ). ◆ TEST_F() [2/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . IsEnabled ;  . ). ◆ TEST_F() [3/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . SetOutputType ;  . ). ◆ TEST_F() [4/5]. sofa::TEST_F ; (; DefaultAnimationLoop_test ; , . testOneStep ;  . ). ◆ TEST_F() [5/5]. sofa::TEST_F ; (; TemplateAliasTest ; , . Register ;  . ). ◆ TYPED_TEST() [1/4]. sofa::TYPED_TEST ; (; AffinePatch_sofa_test ; , . patchTest2D ;  . ). ◆ TYPED_TEST() [2/4]. sofa::TYPED_TEST ;",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:7218,Deployability,patch,patch,7218,"a temporary matrix, it will be automatically deleted by the OwnershipSPtr (with ownership). It the conversion did not create a temporary data, and points to an existing matrix, the OwnershipSPtr does not take the ownership and won't delete anything. @TODO move this somewhere else? AuthorMatthieu Nesme . ◆ createCylinderTractionScene(). template<typename DataTypes > . CylinderTractionStruct<DataTypes> sofa::createCylinderTractionScene ; (; int ; resolutionCircumferential, . int ; resolutionRadial, . int ; resolutionHeight, . int ; maxIter . ). ◆ createRegularGridScene(). template<class DataTypes > . PatchTestStruct<DataTypes> sofa::createRegularGridScene ; (; simulation::Node::SPtr ; root, . typename DataTypes::Coord ; startPoint, . typename DataTypes::Coord ; endPoint, . int ; numX, . int ; numY, . int ; numZ, . sofa::type::Vec< 6, SReal > ; entireBoxRoi, . sofa::type::Vec< 6, SReal > ; inclusiveBox, . sofa::type::Vec< 6, SReal > ; includedBox . ). Create a scene with a regular grid and an affine constraint for patch test. . ◆ initSofaConfig(). SOFA_EXPORT_DYNAMIC_LIBRARY void sofa::initSofaConfig ; (; ). ◆ TEST_F() [1/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . End ;  . ). ◆ TEST_F() [2/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . IsEnabled ;  . ). ◆ TEST_F() [3/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . SetOutputType ;  . ). ◆ TEST_F() [4/5]. sofa::TEST_F ; (; DefaultAnimationLoop_test ; , . testOneStep ;  . ). ◆ TEST_F() [5/5]. sofa::TEST_F ; (; TemplateAliasTest ; , . Register ;  . ). ◆ TYPED_TEST() [1/4]. sofa::TYPED_TEST ; (; AffinePatch_sofa_test ; , . patchTest2D ;  . ). ◆ TYPED_TEST() [2/4]. sofa::TYPED_TEST ; (; AffinePatch_sofa_test ; , . patchTest3D ;  . ). ◆ TYPED_TEST() [3/4]. sofa::TYPED_TEST ; (; LinearElasticity_test ; , . testTractionCorotational ;  . ). ◆ TYPED_TEST() [4/4]. sofa::TYPED_TEST ; (; LinearElasticity_test ; , . testTractionTensorMass ;  . ). ◆ TYPED_TEST_SUITE() [1/2]. sofa::TYPED_TEST_SUITE ; (; AffinePatch_sofa_test ; , . Data",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:666,Energy Efficiency,adapt,adapted,666,"﻿. SOFA API: sofa Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions |; Variables . sofa Namespace Reference . Namespaces;  collision_test;  ;  component;  ;  core;  ;  defaulttype;  ;  framework;  ;  geometry;  ;  gl;  Forward declaration. ;  ;  gui;  ;  helper;  ;  linearalgebra;  ;  mapping_test;  ;  simpleapi;  ;  simulation;  ;  testing;  ;  topology;  ;  type;  for std::pair ;  . Classes; class  TestDataEngine;  ; struct  DataEngine_test;  Helper for writing DataEngine tests. More...;  ; struct  MultiMapping_test;  Base class for the MultiMapping tests, directly adapted from Mapping_test. More...;  ; struct  AffinePatch_sofa_test;  ; struct  CylinderTractionStruct;  Structure which contains the nodes and the pointers useful for the cylindertraction test. More...;  ; struct  LinearElasticity_test;  ; struct  ForceField_test;  Helper for writing ForceField tests. The constructor creates a root node and adds it a State and a ForceField (of the parameter type of this template class). Pointers to node, state and force are available. Deriving the ForceField test from this class makes it easy to write: just call function run_test with positions, velocities and the corresponding expected forces. This function automatically checks not only the forces (function addForce), but also the stiffness (methods addDForce and addKToMatrix), using finite differences. More...;  ; struct  PatchTestStruct;  Structure which contains the nodes and the pointers useful for the patch test. More...;  ; class  TemplateAliasTest;  ; struct  AdvancedTimerTest;  ; struct  DefaultAnimationLoop_test;  . Typedefs; typedef Types< Vec3Types > DataTypes;  ; typedef component::statecontainer::MechanicalObject< defaulttype::Vec3Types > MechanicalObject3;  ; template<typename DataTypes > ; using Coord_t = typename DataTypes::Coord;  ; template<typename DataTypes > ; using Real_t = typename DataTypes::Real;  ; tem",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:163,Modifiability,Variab,Variables,163,"﻿. SOFA API: sofa Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions |; Variables . sofa Namespace Reference . Namespaces;  collision_test;  ;  component;  ;  core;  ;  defaulttype;  ;  framework;  ;  geometry;  ;  gl;  Forward declaration. ;  ;  gui;  ;  helper;  ;  linearalgebra;  ;  mapping_test;  ;  simpleapi;  ;  simulation;  ;  testing;  ;  topology;  ;  type;  for std::pair ;  . Classes; class  TestDataEngine;  ; struct  DataEngine_test;  Helper for writing DataEngine tests. More...;  ; struct  MultiMapping_test;  Base class for the MultiMapping tests, directly adapted from Mapping_test. More...;  ; struct  AffinePatch_sofa_test;  ; struct  CylinderTractionStruct;  Structure which contains the nodes and the pointers useful for the cylindertraction test. More...;  ; struct  LinearElasticity_test;  ; struct  ForceField_test;  Helper for writing ForceField tests. The constructor creates a root node and adds it a State and a ForceField (of the parameter type of this template class). Pointers to node, state and force are available. Deriving the ForceField test from this class makes it easy to write: just call function run_test with positions, velocities and the corresponding expected forces. This function automatically checks not only the forces (function addForce), but also the stiffness (methods addDForce and addKToMatrix), using finite differences. More...;  ; struct  PatchTestStruct;  Structure which contains the nodes and the pointers useful for the patch test. More...;  ; class  TemplateAliasTest;  ; struct  AdvancedTimerTest;  ; struct  DefaultAnimationLoop_test;  . Typedefs; typedef Types< Vec3Types > DataTypes;  ; typedef component::statecontainer::MechanicalObject< defaulttype::Vec3Types > MechanicalObject3;  ; template<typename DataTypes > ; using Coord_t = typename DataTypes::Coord;  ; template<typename DataTypes > ; using Real_t = typename DataTypes::Real;  ; tem",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:666,Modifiability,adapt,adapted,666,"﻿. SOFA API: sofa Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions |; Variables . sofa Namespace Reference . Namespaces;  collision_test;  ;  component;  ;  core;  ;  defaulttype;  ;  framework;  ;  geometry;  ;  gl;  Forward declaration. ;  ;  gui;  ;  helper;  ;  linearalgebra;  ;  mapping_test;  ;  simpleapi;  ;  simulation;  ;  testing;  ;  topology;  ;  type;  for std::pair ;  . Classes; class  TestDataEngine;  ; struct  DataEngine_test;  Helper for writing DataEngine tests. More...;  ; struct  MultiMapping_test;  Base class for the MultiMapping tests, directly adapted from Mapping_test. More...;  ; struct  AffinePatch_sofa_test;  ; struct  CylinderTractionStruct;  Structure which contains the nodes and the pointers useful for the cylindertraction test. More...;  ; struct  LinearElasticity_test;  ; struct  ForceField_test;  Helper for writing ForceField tests. The constructor creates a root node and adds it a State and a ForceField (of the parameter type of this template class). Pointers to node, state and force are available. Deriving the ForceField test from this class makes it easy to write: just call function run_test with positions, velocities and the corresponding expected forces. This function automatically checks not only the forces (function addForce), but also the stiffness (methods addDForce and addKToMatrix), using finite differences. More...;  ; struct  PatchTestStruct;  Structure which contains the nodes and the pointers useful for the patch test. More...;  ; class  TemplateAliasTest;  ; struct  AdvancedTimerTest;  ; struct  DefaultAnimationLoop_test;  . Typedefs; typedef Types< Vec3Types > DataTypes;  ; typedef component::statecontainer::MechanicalObject< defaulttype::Vec3Types > MechanicalObject3;  ; template<typename DataTypes > ; using Coord_t = typename DataTypes::Coord;  ; template<typename DataTypes > ; using Real_t = typename DataTypes::Real;  ; tem",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:4114,Modifiability,Variab,Variables,4114,"nearElasticity_test, DataTypes);  ;  TYPED_TEST (LinearElasticity_test, testTractionTensorMass);  ;  TYPED_TEST (LinearElasticity_test, testTractionCorotational);  ; template<class DataTypes > ; PatchTestStruct< DataTypes > createRegularGridScene (simulation::Node::SPtr root, typename DataTypes::Coord startPoint, typename DataTypes::Coord endPoint, int numX, int numY, int numZ, sofa::type::Vec< 6, SReal > entireBoxRoi, sofa::type::Vec< 6, SReal > inclusiveBox, sofa::type::Vec< 6, SReal > includedBox);  Create a scene with a regular grid and an affine constraint for patch test. More...;  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initSofaConfig ();  ;  TEST_F (TemplateAliasTest, Register);  ;  TEST_F (AdvancedTimerTest, IsEnabled);  ;  TEST_F (AdvancedTimerTest, SetOutputType);  ;  TEST_F (AdvancedTimerTest, End);  ; template<class mat > ; helper::OwnershipSPtr< mat > convertSPtr (const linearalgebra::BaseMatrix *m);  ;  TEST_F (DefaultAnimationLoop_test, testOneStep);  . Variables; const double pressureArray [] = {0.6, 0.2, -0.2, -0.6};  ; const size_t sizePressureArray = sizeof(pressureArray)/sizeof(pressureArray[0]);  ; const double youngModulusArray [] = {1.0,2.0};  ; const size_t sizeYoungModulusArray = sizeof(youngModulusArray)/sizeof(youngModulusArray[0]);  ; const double poissonRatioArray [] = {0.0,0.3,0.49};  ; const size_t sizePoissonRatioArray = sizeof(poissonRatioArray)/sizeof(poissonRatioArray[0]);  . Typedef Documentation. ◆ Coord_t. template<typename DataTypes > . using sofa::Coord_t = typedef typename DataTypes::Coord. ◆ DataMatrixDeriv_t. template<typename DataTypes > . using sofa::DataMatrixDeriv_t = typedef core::objectmodel::Data<MatrixDeriv_t<DataTypes> >. ◆ DataTypes. typedef Types< Vec3Types > sofa::DataTypes. ◆ DataVecCoord_t. template<typename DataTypes > . using sofa::DataVecCoord_t = typedef core::objectmodel::Data<VecCoord_t<DataTypes> >. ◆ DataVecDeriv_t. template<typename DataTypes > . using sofa::DataVecDeriv_t = typedef core::objectmodel::Data<",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:8307,Modifiability,Variab,Variable,8307," . int ; numY, . int ; numZ, . sofa::type::Vec< 6, SReal > ; entireBoxRoi, . sofa::type::Vec< 6, SReal > ; inclusiveBox, . sofa::type::Vec< 6, SReal > ; includedBox . ). Create a scene with a regular grid and an affine constraint for patch test. . ◆ initSofaConfig(). SOFA_EXPORT_DYNAMIC_LIBRARY void sofa::initSofaConfig ; (; ). ◆ TEST_F() [1/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . End ;  . ). ◆ TEST_F() [2/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . IsEnabled ;  . ). ◆ TEST_F() [3/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . SetOutputType ;  . ). ◆ TEST_F() [4/5]. sofa::TEST_F ; (; DefaultAnimationLoop_test ; , . testOneStep ;  . ). ◆ TEST_F() [5/5]. sofa::TEST_F ; (; TemplateAliasTest ; , . Register ;  . ). ◆ TYPED_TEST() [1/4]. sofa::TYPED_TEST ; (; AffinePatch_sofa_test ; , . patchTest2D ;  . ). ◆ TYPED_TEST() [2/4]. sofa::TYPED_TEST ; (; AffinePatch_sofa_test ; , . patchTest3D ;  . ). ◆ TYPED_TEST() [3/4]. sofa::TYPED_TEST ; (; LinearElasticity_test ; , . testTractionCorotational ;  . ). ◆ TYPED_TEST() [4/4]. sofa::TYPED_TEST ; (; LinearElasticity_test ; , . testTractionTensorMass ;  . ). ◆ TYPED_TEST_SUITE() [1/2]. sofa::TYPED_TEST_SUITE ; (; AffinePatch_sofa_test ; , . DataTypes ;  . ). ◆ TYPED_TEST_SUITE() [2/2]. sofa::TYPED_TEST_SUITE ; (; LinearElasticity_test ; , . DataTypes ;  . ). Variable Documentation. ◆ poissonRatioArray. const double sofa::poissonRatioArray[] = {0.0,0.3,0.49}. ◆ pressureArray. const double sofa::pressureArray[] = {0.6, 0.2, -0.2, -0.6}. ◆ sizePoissonRatioArray. const size_t sofa::sizePoissonRatioArray = sizeof(poissonRatioArray)/sizeof(poissonRatioArray[0]). ◆ sizePressureArray. const size_t sofa::sizePressureArray = sizeof(pressureArray)/sizeof(pressureArray[0]). ◆ sizeYoungModulusArray. const size_t sofa::sizeYoungModulusArray = sizeof(youngModulusArray)/sizeof(youngModulusArray[0]). ◆ youngModulusArray. const double sofa::youngModulusArray[] = {1.0,2.0}. sofa; Generated on Mon Nov 11 2024 02:16:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:427,Testability,test,testing,427,"﻿. SOFA API: sofa Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions |; Variables . sofa Namespace Reference . Namespaces;  collision_test;  ;  component;  ;  core;  ;  defaulttype;  ;  framework;  ;  geometry;  ;  gl;  Forward declaration. ;  ;  gui;  ;  helper;  ;  linearalgebra;  ;  mapping_test;  ;  simpleapi;  ;  simulation;  ;  testing;  ;  topology;  ;  type;  for std::pair ;  . Classes; class  TestDataEngine;  ; struct  DataEngine_test;  Helper for writing DataEngine tests. More...;  ; struct  MultiMapping_test;  Base class for the MultiMapping tests, directly adapted from Mapping_test. More...;  ; struct  AffinePatch_sofa_test;  ; struct  CylinderTractionStruct;  Structure which contains the nodes and the pointers useful for the cylindertraction test. More...;  ; struct  LinearElasticity_test;  ; struct  ForceField_test;  Helper for writing ForceField tests. The constructor creates a root node and adds it a State and a ForceField (of the parameter type of this template class). Pointers to node, state and force are available. Deriving the ForceField test from this class makes it easy to write: just call function run_test with positions, velocities and the corresponding expected forces. This function automatically checks not only the forces (function addForce), but also the stiffness (methods addDForce and addKToMatrix), using finite differences. More...;  ; struct  PatchTestStruct;  Structure which contains the nodes and the pointers useful for the patch test. More...;  ; class  TemplateAliasTest;  ; struct  AdvancedTimerTest;  ; struct  DefaultAnimationLoop_test;  . Typedefs; typedef Types< Vec3Types > DataTypes;  ; typedef component::statecontainer::MechanicalObject< defaulttype::Vec3Types > MechanicalObject3;  ; template<typename DataTypes > ; using Coord_t = typename DataTypes::Coord;  ; template<typename DataTypes > ; using Real_t = typename DataTypes::Real;  ; tem",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:496,Testability,Test,TestDataEngine,496,"﻿. SOFA API: sofa Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions |; Variables . sofa Namespace Reference . Namespaces;  collision_test;  ;  component;  ;  core;  ;  defaulttype;  ;  framework;  ;  geometry;  ;  gl;  Forward declaration. ;  ;  gui;  ;  helper;  ;  linearalgebra;  ;  mapping_test;  ;  simpleapi;  ;  simulation;  ;  testing;  ;  topology;  ;  type;  for std::pair ;  . Classes; class  TestDataEngine;  ; struct  DataEngine_test;  Helper for writing DataEngine tests. More...;  ; struct  MultiMapping_test;  Base class for the MultiMapping tests, directly adapted from Mapping_test. More...;  ; struct  AffinePatch_sofa_test;  ; struct  CylinderTractionStruct;  Structure which contains the nodes and the pointers useful for the cylindertraction test. More...;  ; struct  LinearElasticity_test;  ; struct  ForceField_test;  Helper for writing ForceField tests. The constructor creates a root node and adds it a State and a ForceField (of the parameter type of this template class). Pointers to node, state and force are available. Deriving the ForceField test from this class makes it easy to write: just call function run_test with positions, velocities and the corresponding expected forces. This function automatically checks not only the forces (function addForce), but also the stiffness (methods addDForce and addKToMatrix), using finite differences. More...;  ; struct  PatchTestStruct;  Structure which contains the nodes and the pointers useful for the patch test. More...;  ; class  TemplateAliasTest;  ; struct  AdvancedTimerTest;  ; struct  DefaultAnimationLoop_test;  . Typedefs; typedef Types< Vec3Types > DataTypes;  ; typedef component::statecontainer::MechanicalObject< defaulttype::Vec3Types > MechanicalObject3;  ; template<typename DataTypes > ; using Coord_t = typename DataTypes::Coord;  ; template<typename DataTypes > ; using Real_t = typename DataTypes::Real;  ; tem",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:571,Testability,test,tests,571,"﻿. SOFA API: sofa Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions |; Variables . sofa Namespace Reference . Namespaces;  collision_test;  ;  component;  ;  core;  ;  defaulttype;  ;  framework;  ;  geometry;  ;  gl;  Forward declaration. ;  ;  gui;  ;  helper;  ;  linearalgebra;  ;  mapping_test;  ;  simpleapi;  ;  simulation;  ;  testing;  ;  topology;  ;  type;  for std::pair ;  . Classes; class  TestDataEngine;  ; struct  DataEngine_test;  Helper for writing DataEngine tests. More...;  ; struct  MultiMapping_test;  Base class for the MultiMapping tests, directly adapted from Mapping_test. More...;  ; struct  AffinePatch_sofa_test;  ; struct  CylinderTractionStruct;  Structure which contains the nodes and the pointers useful for the cylindertraction test. More...;  ; struct  LinearElasticity_test;  ; struct  ForceField_test;  Helper for writing ForceField tests. The constructor creates a root node and adds it a State and a ForceField (of the parameter type of this template class). Pointers to node, state and force are available. Deriving the ForceField test from this class makes it easy to write: just call function run_test with positions, velocities and the corresponding expected forces. This function automatically checks not only the forces (function addForce), but also the stiffness (methods addDForce and addKToMatrix), using finite differences. More...;  ; struct  PatchTestStruct;  Structure which contains the nodes and the pointers useful for the patch test. More...;  ; class  TemplateAliasTest;  ; struct  AdvancedTimerTest;  ; struct  DefaultAnimationLoop_test;  . Typedefs; typedef Types< Vec3Types > DataTypes;  ; typedef component::statecontainer::MechanicalObject< defaulttype::Vec3Types > MechanicalObject3;  ; template<typename DataTypes > ; using Coord_t = typename DataTypes::Coord;  ; template<typename DataTypes > ; using Real_t = typename DataTypes::Real;  ; tem",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:650,Testability,test,tests,650,"﻿. SOFA API: sofa Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions |; Variables . sofa Namespace Reference . Namespaces;  collision_test;  ;  component;  ;  core;  ;  defaulttype;  ;  framework;  ;  geometry;  ;  gl;  Forward declaration. ;  ;  gui;  ;  helper;  ;  linearalgebra;  ;  mapping_test;  ;  simpleapi;  ;  simulation;  ;  testing;  ;  topology;  ;  type;  for std::pair ;  . Classes; class  TestDataEngine;  ; struct  DataEngine_test;  Helper for writing DataEngine tests. More...;  ; struct  MultiMapping_test;  Base class for the MultiMapping tests, directly adapted from Mapping_test. More...;  ; struct  AffinePatch_sofa_test;  ; struct  CylinderTractionStruct;  Structure which contains the nodes and the pointers useful for the cylindertraction test. More...;  ; struct  LinearElasticity_test;  ; struct  ForceField_test;  Helper for writing ForceField tests. The constructor creates a root node and adds it a State and a ForceField (of the parameter type of this template class). Pointers to node, state and force are available. Deriving the ForceField test from this class makes it easy to write: just call function run_test with positions, velocities and the corresponding expected forces. This function automatically checks not only the forces (function addForce), but also the stiffness (methods addDForce and addKToMatrix), using finite differences. More...;  ; struct  PatchTestStruct;  Structure which contains the nodes and the pointers useful for the patch test. More...;  ; class  TemplateAliasTest;  ; struct  AdvancedTimerTest;  ; struct  DefaultAnimationLoop_test;  . Typedefs; typedef Types< Vec3Types > DataTypes;  ; typedef component::statecontainer::MechanicalObject< defaulttype::Vec3Types > MechanicalObject3;  ; template<typename DataTypes > ; using Coord_t = typename DataTypes::Coord;  ; template<typename DataTypes > ; using Real_t = typename DataTypes::Real;  ; tem",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:856,Testability,test,test,856,"﻿. SOFA API: sofa Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions |; Variables . sofa Namespace Reference . Namespaces;  collision_test;  ;  component;  ;  core;  ;  defaulttype;  ;  framework;  ;  geometry;  ;  gl;  Forward declaration. ;  ;  gui;  ;  helper;  ;  linearalgebra;  ;  mapping_test;  ;  simpleapi;  ;  simulation;  ;  testing;  ;  topology;  ;  type;  for std::pair ;  . Classes; class  TestDataEngine;  ; struct  DataEngine_test;  Helper for writing DataEngine tests. More...;  ; struct  MultiMapping_test;  Base class for the MultiMapping tests, directly adapted from Mapping_test. More...;  ; struct  AffinePatch_sofa_test;  ; struct  CylinderTractionStruct;  Structure which contains the nodes and the pointers useful for the cylindertraction test. More...;  ; struct  LinearElasticity_test;  ; struct  ForceField_test;  Helper for writing ForceField tests. The constructor creates a root node and adds it a State and a ForceField (of the parameter type of this template class). Pointers to node, state and force are available. Deriving the ForceField test from this class makes it easy to write: just call function run_test with positions, velocities and the corresponding expected forces. This function automatically checks not only the forces (function addForce), but also the stiffness (methods addDForce and addKToMatrix), using finite differences. More...;  ; struct  PatchTestStruct;  Structure which contains the nodes and the pointers useful for the patch test. More...;  ; class  TemplateAliasTest;  ; struct  AdvancedTimerTest;  ; struct  DefaultAnimationLoop_test;  . Typedefs; typedef Types< Vec3Types > DataTypes;  ; typedef component::statecontainer::MechanicalObject< defaulttype::Vec3Types > MechanicalObject3;  ; template<typename DataTypes > ; using Coord_t = typename DataTypes::Coord;  ; template<typename DataTypes > ; using Real_t = typename DataTypes::Real;  ; tem",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:964,Testability,test,tests,964,"﻿. SOFA API: sofa Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions |; Variables . sofa Namespace Reference . Namespaces;  collision_test;  ;  component;  ;  core;  ;  defaulttype;  ;  framework;  ;  geometry;  ;  gl;  Forward declaration. ;  ;  gui;  ;  helper;  ;  linearalgebra;  ;  mapping_test;  ;  simpleapi;  ;  simulation;  ;  testing;  ;  topology;  ;  type;  for std::pair ;  . Classes; class  TestDataEngine;  ; struct  DataEngine_test;  Helper for writing DataEngine tests. More...;  ; struct  MultiMapping_test;  Base class for the MultiMapping tests, directly adapted from Mapping_test. More...;  ; struct  AffinePatch_sofa_test;  ; struct  CylinderTractionStruct;  Structure which contains the nodes and the pointers useful for the cylindertraction test. More...;  ; struct  LinearElasticity_test;  ; struct  ForceField_test;  Helper for writing ForceField tests. The constructor creates a root node and adds it a State and a ForceField (of the parameter type of this template class). Pointers to node, state and force are available. Deriving the ForceField test from this class makes it easy to write: just call function run_test with positions, velocities and the corresponding expected forces. This function automatically checks not only the forces (function addForce), but also the stiffness (methods addDForce and addKToMatrix), using finite differences. More...;  ; struct  PatchTestStruct;  Structure which contains the nodes and the pointers useful for the patch test. More...;  ; class  TemplateAliasTest;  ; struct  AdvancedTimerTest;  ; struct  DefaultAnimationLoop_test;  . Typedefs; typedef Types< Vec3Types > DataTypes;  ; typedef component::statecontainer::MechanicalObject< defaulttype::Vec3Types > MechanicalObject3;  ; template<typename DataTypes > ; using Coord_t = typename DataTypes::Coord;  ; template<typename DataTypes > ; using Real_t = typename DataTypes::Real;  ; tem",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:1165,Testability,test,test,1165,"ion_test;  ;  component;  ;  core;  ;  defaulttype;  ;  framework;  ;  geometry;  ;  gl;  Forward declaration. ;  ;  gui;  ;  helper;  ;  linearalgebra;  ;  mapping_test;  ;  simpleapi;  ;  simulation;  ;  testing;  ;  topology;  ;  type;  for std::pair ;  . Classes; class  TestDataEngine;  ; struct  DataEngine_test;  Helper for writing DataEngine tests. More...;  ; struct  MultiMapping_test;  Base class for the MultiMapping tests, directly adapted from Mapping_test. More...;  ; struct  AffinePatch_sofa_test;  ; struct  CylinderTractionStruct;  Structure which contains the nodes and the pointers useful for the cylindertraction test. More...;  ; struct  LinearElasticity_test;  ; struct  ForceField_test;  Helper for writing ForceField tests. The constructor creates a root node and adds it a State and a ForceField (of the parameter type of this template class). Pointers to node, state and force are available. Deriving the ForceField test from this class makes it easy to write: just call function run_test with positions, velocities and the corresponding expected forces. This function automatically checks not only the forces (function addForce), but also the stiffness (methods addDForce and addKToMatrix), using finite differences. More...;  ; struct  PatchTestStruct;  Structure which contains the nodes and the pointers useful for the patch test. More...;  ; class  TemplateAliasTest;  ; struct  AdvancedTimerTest;  ; struct  DefaultAnimationLoop_test;  . Typedefs; typedef Types< Vec3Types > DataTypes;  ; typedef component::statecontainer::MechanicalObject< defaulttype::Vec3Types > MechanicalObject3;  ; template<typename DataTypes > ; using Coord_t = typename DataTypes::Coord;  ; template<typename DataTypes > ; using Real_t = typename DataTypes::Real;  ; template<typename DataTypes > ; using VecReal_t = typename DataTypes::VecReal;  ; template<typename DataTypes > ; using Deriv_t = typename DataTypes::Deriv;  ; template<typename DataTypes > ; using MatrixDeriv_t = typename D",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:1578,Testability,test,test,1578,"ngine_test;  Helper for writing DataEngine tests. More...;  ; struct  MultiMapping_test;  Base class for the MultiMapping tests, directly adapted from Mapping_test. More...;  ; struct  AffinePatch_sofa_test;  ; struct  CylinderTractionStruct;  Structure which contains the nodes and the pointers useful for the cylindertraction test. More...;  ; struct  LinearElasticity_test;  ; struct  ForceField_test;  Helper for writing ForceField tests. The constructor creates a root node and adds it a State and a ForceField (of the parameter type of this template class). Pointers to node, state and force are available. Deriving the ForceField test from this class makes it easy to write: just call function run_test with positions, velocities and the corresponding expected forces. This function automatically checks not only the forces (function addForce), but also the stiffness (methods addDForce and addKToMatrix), using finite differences. More...;  ; struct  PatchTestStruct;  Structure which contains the nodes and the pointers useful for the patch test. More...;  ; class  TemplateAliasTest;  ; struct  AdvancedTimerTest;  ; struct  DefaultAnimationLoop_test;  . Typedefs; typedef Types< Vec3Types > DataTypes;  ; typedef component::statecontainer::MechanicalObject< defaulttype::Vec3Types > MechanicalObject3;  ; template<typename DataTypes > ; using Coord_t = typename DataTypes::Coord;  ; template<typename DataTypes > ; using Real_t = typename DataTypes::Real;  ; template<typename DataTypes > ; using VecReal_t = typename DataTypes::VecReal;  ; template<typename DataTypes > ; using Deriv_t = typename DataTypes::Deriv;  ; template<typename DataTypes > ; using MatrixDeriv_t = typename DataTypes::MatrixDeriv;  ; template<typename DataTypes > ; using VecCoord_t = typename DataTypes::VecCoord;  ; template<typename DataTypes > ; using VecDeriv_t = typename DataTypes::VecDeriv;  ; template<typename DataTypes > ; using DataVecCoord_t = core::objectmodel::Data< VecCoord_t< DataTypes > >;  ; tem",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:3208,Testability,test,testTractionTensorMass,3208,"rixDeriv;  ; template<typename DataTypes > ; using VecCoord_t = typename DataTypes::VecCoord;  ; template<typename DataTypes > ; using VecDeriv_t = typename DataTypes::VecDeriv;  ; template<typename DataTypes > ; using DataVecCoord_t = core::objectmodel::Data< VecCoord_t< DataTypes > >;  ; template<typename DataTypes > ; using DataVecDeriv_t = core::objectmodel::Data< VecDeriv_t< DataTypes > >;  ; template<typename DataTypes > ; using DataMatrixDeriv_t = core::objectmodel::Data< MatrixDeriv_t< DataTypes > >;  . Functions;  TYPED_TEST_SUITE (AffinePatch_sofa_test, DataTypes);  ;  TYPED_TEST (AffinePatch_sofa_test, patchTest2D);  ;  TYPED_TEST (AffinePatch_sofa_test, patchTest3D);  ; template<typename DataTypes > ; CylinderTractionStruct< DataTypes > createCylinderTractionScene (int resolutionCircumferential, int resolutionRadial, int resolutionHeight, int maxIter);  ;  TYPED_TEST_SUITE (LinearElasticity_test, DataTypes);  ;  TYPED_TEST (LinearElasticity_test, testTractionTensorMass);  ;  TYPED_TEST (LinearElasticity_test, testTractionCorotational);  ; template<class DataTypes > ; PatchTestStruct< DataTypes > createRegularGridScene (simulation::Node::SPtr root, typename DataTypes::Coord startPoint, typename DataTypes::Coord endPoint, int numX, int numY, int numZ, sofa::type::Vec< 6, SReal > entireBoxRoi, sofa::type::Vec< 6, SReal > inclusiveBox, sofa::type::Vec< 6, SReal > includedBox);  Create a scene with a regular grid and an affine constraint for patch test. More...;  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initSofaConfig ();  ;  TEST_F (TemplateAliasTest, Register);  ;  TEST_F (AdvancedTimerTest, IsEnabled);  ;  TEST_F (AdvancedTimerTest, SetOutputType);  ;  TEST_F (AdvancedTimerTest, End);  ; template<class mat > ; helper::OwnershipSPtr< mat > convertSPtr (const linearalgebra::BaseMatrix *m);  ;  TEST_F (DefaultAnimationLoop_test, testOneStep);  . Variables; const double pressureArray [] = {0.6, 0.2, -0.2, -0.6};  ; const size_t sizePressureArray = sizeof(pressureArr",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:3272,Testability,test,testTractionCorotational,3272,"rixDeriv;  ; template<typename DataTypes > ; using VecCoord_t = typename DataTypes::VecCoord;  ; template<typename DataTypes > ; using VecDeriv_t = typename DataTypes::VecDeriv;  ; template<typename DataTypes > ; using DataVecCoord_t = core::objectmodel::Data< VecCoord_t< DataTypes > >;  ; template<typename DataTypes > ; using DataVecDeriv_t = core::objectmodel::Data< VecDeriv_t< DataTypes > >;  ; template<typename DataTypes > ; using DataMatrixDeriv_t = core::objectmodel::Data< MatrixDeriv_t< DataTypes > >;  . Functions;  TYPED_TEST_SUITE (AffinePatch_sofa_test, DataTypes);  ;  TYPED_TEST (AffinePatch_sofa_test, patchTest2D);  ;  TYPED_TEST (AffinePatch_sofa_test, patchTest3D);  ; template<typename DataTypes > ; CylinderTractionStruct< DataTypes > createCylinderTractionScene (int resolutionCircumferential, int resolutionRadial, int resolutionHeight, int maxIter);  ;  TYPED_TEST_SUITE (LinearElasticity_test, DataTypes);  ;  TYPED_TEST (LinearElasticity_test, testTractionTensorMass);  ;  TYPED_TEST (LinearElasticity_test, testTractionCorotational);  ; template<class DataTypes > ; PatchTestStruct< DataTypes > createRegularGridScene (simulation::Node::SPtr root, typename DataTypes::Coord startPoint, typename DataTypes::Coord endPoint, int numX, int numY, int numZ, sofa::type::Vec< 6, SReal > entireBoxRoi, sofa::type::Vec< 6, SReal > inclusiveBox, sofa::type::Vec< 6, SReal > includedBox);  Create a scene with a regular grid and an affine constraint for patch test. More...;  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initSofaConfig ();  ;  TEST_F (TemplateAliasTest, Register);  ;  TEST_F (AdvancedTimerTest, IsEnabled);  ;  TEST_F (AdvancedTimerTest, SetOutputType);  ;  TEST_F (AdvancedTimerTest, End);  ; template<class mat > ; helper::OwnershipSPtr< mat > convertSPtr (const linearalgebra::BaseMatrix *m);  ;  TEST_F (DefaultAnimationLoop_test, testOneStep);  . Variables; const double pressureArray [] = {0.6, 0.2, -0.2, -0.6};  ; const size_t sizePressureArray = sizeof(pressureArr",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:3714,Testability,test,test,3714,"rixDeriv;  ; template<typename DataTypes > ; using VecCoord_t = typename DataTypes::VecCoord;  ; template<typename DataTypes > ; using VecDeriv_t = typename DataTypes::VecDeriv;  ; template<typename DataTypes > ; using DataVecCoord_t = core::objectmodel::Data< VecCoord_t< DataTypes > >;  ; template<typename DataTypes > ; using DataVecDeriv_t = core::objectmodel::Data< VecDeriv_t< DataTypes > >;  ; template<typename DataTypes > ; using DataMatrixDeriv_t = core::objectmodel::Data< MatrixDeriv_t< DataTypes > >;  . Functions;  TYPED_TEST_SUITE (AffinePatch_sofa_test, DataTypes);  ;  TYPED_TEST (AffinePatch_sofa_test, patchTest2D);  ;  TYPED_TEST (AffinePatch_sofa_test, patchTest3D);  ; template<typename DataTypes > ; CylinderTractionStruct< DataTypes > createCylinderTractionScene (int resolutionCircumferential, int resolutionRadial, int resolutionHeight, int maxIter);  ;  TYPED_TEST_SUITE (LinearElasticity_test, DataTypes);  ;  TYPED_TEST (LinearElasticity_test, testTractionTensorMass);  ;  TYPED_TEST (LinearElasticity_test, testTractionCorotational);  ; template<class DataTypes > ; PatchTestStruct< DataTypes > createRegularGridScene (simulation::Node::SPtr root, typename DataTypes::Coord startPoint, typename DataTypes::Coord endPoint, int numX, int numY, int numZ, sofa::type::Vec< 6, SReal > entireBoxRoi, sofa::type::Vec< 6, SReal > inclusiveBox, sofa::type::Vec< 6, SReal > includedBox);  Create a scene with a regular grid and an affine constraint for patch test. More...;  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initSofaConfig ();  ;  TEST_F (TemplateAliasTest, Register);  ;  TEST_F (AdvancedTimerTest, IsEnabled);  ;  TEST_F (AdvancedTimerTest, SetOutputType);  ;  TEST_F (AdvancedTimerTest, End);  ; template<class mat > ; helper::OwnershipSPtr< mat > convertSPtr (const linearalgebra::BaseMatrix *m);  ;  TEST_F (DefaultAnimationLoop_test, testOneStep);  . Variables; const double pressureArray [] = {0.6, 0.2, -0.2, -0.6};  ; const size_t sizePressureArray = sizeof(pressureArr",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:4097,Testability,test,testOneStep,4097,");  ; template<typename DataTypes > ; CylinderTractionStruct< DataTypes > createCylinderTractionScene (int resolutionCircumferential, int resolutionRadial, int resolutionHeight, int maxIter);  ;  TYPED_TEST_SUITE (LinearElasticity_test, DataTypes);  ;  TYPED_TEST (LinearElasticity_test, testTractionTensorMass);  ;  TYPED_TEST (LinearElasticity_test, testTractionCorotational);  ; template<class DataTypes > ; PatchTestStruct< DataTypes > createRegularGridScene (simulation::Node::SPtr root, typename DataTypes::Coord startPoint, typename DataTypes::Coord endPoint, int numX, int numY, int numZ, sofa::type::Vec< 6, SReal > entireBoxRoi, sofa::type::Vec< 6, SReal > inclusiveBox, sofa::type::Vec< 6, SReal > includedBox);  Create a scene with a regular grid and an affine constraint for patch test. More...;  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initSofaConfig ();  ;  TEST_F (TemplateAliasTest, Register);  ;  TEST_F (AdvancedTimerTest, IsEnabled);  ;  TEST_F (AdvancedTimerTest, SetOutputType);  ;  TEST_F (AdvancedTimerTest, End);  ; template<class mat > ; helper::OwnershipSPtr< mat > convertSPtr (const linearalgebra::BaseMatrix *m);  ;  TEST_F (DefaultAnimationLoop_test, testOneStep);  . Variables; const double pressureArray [] = {0.6, 0.2, -0.2, -0.6};  ; const size_t sizePressureArray = sizeof(pressureArray)/sizeof(pressureArray[0]);  ; const double youngModulusArray [] = {1.0,2.0};  ; const size_t sizeYoungModulusArray = sizeof(youngModulusArray)/sizeof(youngModulusArray[0]);  ; const double poissonRatioArray [] = {0.0,0.3,0.49};  ; const size_t sizePoissonRatioArray = sizeof(poissonRatioArray)/sizeof(poissonRatioArray[0]);  . Typedef Documentation. ◆ Coord_t. template<typename DataTypes > . using sofa::Coord_t = typedef typename DataTypes::Coord. ◆ DataMatrixDeriv_t. template<typename DataTypes > . using sofa::DataMatrixDeriv_t = typedef core::objectmodel::Data<MatrixDeriv_t<DataTypes> >. ◆ DataTypes. typedef Types< Vec3Types > sofa::DataTypes. ◆ DataVecCoord_t. template<typ",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:7224,Testability,test,test,7224,"a temporary matrix, it will be automatically deleted by the OwnershipSPtr (with ownership). It the conversion did not create a temporary data, and points to an existing matrix, the OwnershipSPtr does not take the ownership and won't delete anything. @TODO move this somewhere else? AuthorMatthieu Nesme . ◆ createCylinderTractionScene(). template<typename DataTypes > . CylinderTractionStruct<DataTypes> sofa::createCylinderTractionScene ; (; int ; resolutionCircumferential, . int ; resolutionRadial, . int ; resolutionHeight, . int ; maxIter . ). ◆ createRegularGridScene(). template<class DataTypes > . PatchTestStruct<DataTypes> sofa::createRegularGridScene ; (; simulation::Node::SPtr ; root, . typename DataTypes::Coord ; startPoint, . typename DataTypes::Coord ; endPoint, . int ; numX, . int ; numY, . int ; numZ, . sofa::type::Vec< 6, SReal > ; entireBoxRoi, . sofa::type::Vec< 6, SReal > ; inclusiveBox, . sofa::type::Vec< 6, SReal > ; includedBox . ). Create a scene with a regular grid and an affine constraint for patch test. . ◆ initSofaConfig(). SOFA_EXPORT_DYNAMIC_LIBRARY void sofa::initSofaConfig ; (; ). ◆ TEST_F() [1/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . End ;  . ). ◆ TEST_F() [2/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . IsEnabled ;  . ). ◆ TEST_F() [3/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . SetOutputType ;  . ). ◆ TEST_F() [4/5]. sofa::TEST_F ; (; DefaultAnimationLoop_test ; , . testOneStep ;  . ). ◆ TEST_F() [5/5]. sofa::TEST_F ; (; TemplateAliasTest ; , . Register ;  . ). ◆ TYPED_TEST() [1/4]. sofa::TYPED_TEST ; (; AffinePatch_sofa_test ; , . patchTest2D ;  . ). ◆ TYPED_TEST() [2/4]. sofa::TYPED_TEST ; (; AffinePatch_sofa_test ; , . patchTest3D ;  . ). ◆ TYPED_TEST() [3/4]. sofa::TYPED_TEST ; (; LinearElasticity_test ; , . testTractionCorotational ;  . ). ◆ TYPED_TEST() [4/4]. sofa::TYPED_TEST ; (; LinearElasticity_test ; , . testTractionTensorMass ;  . ). ◆ TYPED_TEST_SUITE() [1/2]. sofa::TYPED_TEST_SUITE ; (; AffinePatch_sofa_test ; , . Data",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:7614,Testability,test,testOneStep,7614,"onScene ; (; int ; resolutionCircumferential, . int ; resolutionRadial, . int ; resolutionHeight, . int ; maxIter . ). ◆ createRegularGridScene(). template<class DataTypes > . PatchTestStruct<DataTypes> sofa::createRegularGridScene ; (; simulation::Node::SPtr ; root, . typename DataTypes::Coord ; startPoint, . typename DataTypes::Coord ; endPoint, . int ; numX, . int ; numY, . int ; numZ, . sofa::type::Vec< 6, SReal > ; entireBoxRoi, . sofa::type::Vec< 6, SReal > ; inclusiveBox, . sofa::type::Vec< 6, SReal > ; includedBox . ). Create a scene with a regular grid and an affine constraint for patch test. . ◆ initSofaConfig(). SOFA_EXPORT_DYNAMIC_LIBRARY void sofa::initSofaConfig ; (; ). ◆ TEST_F() [1/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . End ;  . ). ◆ TEST_F() [2/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . IsEnabled ;  . ). ◆ TEST_F() [3/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . SetOutputType ;  . ). ◆ TEST_F() [4/5]. sofa::TEST_F ; (; DefaultAnimationLoop_test ; , . testOneStep ;  . ). ◆ TEST_F() [5/5]. sofa::TEST_F ; (; TemplateAliasTest ; , . Register ;  . ). ◆ TYPED_TEST() [1/4]. sofa::TYPED_TEST ; (; AffinePatch_sofa_test ; , . patchTest2D ;  . ). ◆ TYPED_TEST() [2/4]. sofa::TYPED_TEST ; (; AffinePatch_sofa_test ; , . patchTest3D ;  . ). ◆ TYPED_TEST() [3/4]. sofa::TYPED_TEST ; (; LinearElasticity_test ; , . testTractionCorotational ;  . ). ◆ TYPED_TEST() [4/4]. sofa::TYPED_TEST ; (; LinearElasticity_test ; , . testTractionTensorMass ;  . ). ◆ TYPED_TEST_SUITE() [1/2]. sofa::TYPED_TEST_SUITE ; (; AffinePatch_sofa_test ; , . DataTypes ;  . ). ◆ TYPED_TEST_SUITE() [2/2]. sofa::TYPED_TEST_SUITE ; (; LinearElasticity_test ; , . DataTypes ;  . ). Variable Documentation. ◆ poissonRatioArray. const double sofa::poissonRatioArray[] = {0.0,0.3,0.49}. ◆ pressureArray. const double sofa::pressureArray[] = {0.6, 0.2, -0.2, -0.6}. ◆ sizePoissonRatioArray. const size_t sofa::sizePoissonRatioArray = sizeof(poissonRatioArray)/sizeof(poissonRatioArray[0]). ◆ sizePress",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:7967,Testability,test,testTractionCorotational,7967,"mX, . int ; numY, . int ; numZ, . sofa::type::Vec< 6, SReal > ; entireBoxRoi, . sofa::type::Vec< 6, SReal > ; inclusiveBox, . sofa::type::Vec< 6, SReal > ; includedBox . ). Create a scene with a regular grid and an affine constraint for patch test. . ◆ initSofaConfig(). SOFA_EXPORT_DYNAMIC_LIBRARY void sofa::initSofaConfig ; (; ). ◆ TEST_F() [1/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . End ;  . ). ◆ TEST_F() [2/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . IsEnabled ;  . ). ◆ TEST_F() [3/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . SetOutputType ;  . ). ◆ TEST_F() [4/5]. sofa::TEST_F ; (; DefaultAnimationLoop_test ; , . testOneStep ;  . ). ◆ TEST_F() [5/5]. sofa::TEST_F ; (; TemplateAliasTest ; , . Register ;  . ). ◆ TYPED_TEST() [1/4]. sofa::TYPED_TEST ; (; AffinePatch_sofa_test ; , . patchTest2D ;  . ). ◆ TYPED_TEST() [2/4]. sofa::TYPED_TEST ; (; AffinePatch_sofa_test ; , . patchTest3D ;  . ). ◆ TYPED_TEST() [3/4]. sofa::TYPED_TEST ; (; LinearElasticity_test ; , . testTractionCorotational ;  . ). ◆ TYPED_TEST() [4/4]. sofa::TYPED_TEST ; (; LinearElasticity_test ; , . testTractionTensorMass ;  . ). ◆ TYPED_TEST_SUITE() [1/2]. sofa::TYPED_TEST_SUITE ; (; AffinePatch_sofa_test ; , . DataTypes ;  . ). ◆ TYPED_TEST_SUITE() [2/2]. sofa::TYPED_TEST_SUITE ; (; LinearElasticity_test ; , . DataTypes ;  . ). Variable Documentation. ◆ poissonRatioArray. const double sofa::poissonRatioArray[] = {0.0,0.3,0.49}. ◆ pressureArray. const double sofa::pressureArray[] = {0.6, 0.2, -0.2, -0.6}. ◆ sizePoissonRatioArray. const size_t sofa::sizePoissonRatioArray = sizeof(poissonRatioArray)/sizeof(poissonRatioArray[0]). ◆ sizePressureArray. const size_t sofa::sizePressureArray = sizeof(pressureArray)/sizeof(pressureArray[0]). ◆ sizeYoungModulusArray. const size_t sofa::sizeYoungModulusArray = sizeof(youngModulusArray)/sizeof(youngModulusArray[0]). ◆ youngModulusArray. const double sofa::youngModulusArray[] = {1.0,2.0}. sofa; Generated on Mon Nov 11 2024 02:16:34 for SOFA API by 1.9.1",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:8072,Testability,test,testTractionTensorMass,8072," . int ; numY, . int ; numZ, . sofa::type::Vec< 6, SReal > ; entireBoxRoi, . sofa::type::Vec< 6, SReal > ; inclusiveBox, . sofa::type::Vec< 6, SReal > ; includedBox . ). Create a scene with a regular grid and an affine constraint for patch test. . ◆ initSofaConfig(). SOFA_EXPORT_DYNAMIC_LIBRARY void sofa::initSofaConfig ; (; ). ◆ TEST_F() [1/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . End ;  . ). ◆ TEST_F() [2/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . IsEnabled ;  . ). ◆ TEST_F() [3/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . SetOutputType ;  . ). ◆ TEST_F() [4/5]. sofa::TEST_F ; (; DefaultAnimationLoop_test ; , . testOneStep ;  . ). ◆ TEST_F() [5/5]. sofa::TEST_F ; (; TemplateAliasTest ; , . Register ;  . ). ◆ TYPED_TEST() [1/4]. sofa::TYPED_TEST ; (; AffinePatch_sofa_test ; , . patchTest2D ;  . ). ◆ TYPED_TEST() [2/4]. sofa::TYPED_TEST ; (; AffinePatch_sofa_test ; , . patchTest3D ;  . ). ◆ TYPED_TEST() [3/4]. sofa::TYPED_TEST ; (; LinearElasticity_test ; , . testTractionCorotational ;  . ). ◆ TYPED_TEST() [4/4]. sofa::TYPED_TEST ; (; LinearElasticity_test ; , . testTractionTensorMass ;  . ). ◆ TYPED_TEST_SUITE() [1/2]. sofa::TYPED_TEST_SUITE ; (; AffinePatch_sofa_test ; , . DataTypes ;  . ). ◆ TYPED_TEST_SUITE() [2/2]. sofa::TYPED_TEST_SUITE ; (; LinearElasticity_test ; , . DataTypes ;  . ). Variable Documentation. ◆ poissonRatioArray. const double sofa::poissonRatioArray[] = {0.0,0.3,0.49}. ◆ pressureArray. const double sofa::pressureArray[] = {0.6, 0.2, -0.2, -0.6}. ◆ sizePoissonRatioArray. const size_t sofa::sizePoissonRatioArray = sizeof(poissonRatioArray)/sizeof(poissonRatioArray[0]). ◆ sizePressureArray. const size_t sofa::sizePressureArray = sizeof(pressureArray)/sizeof(pressureArray[0]). ◆ sizeYoungModulusArray. const size_t sofa::sizeYoungModulusArray = sizeof(youngModulusArray)/sizeof(youngModulusArray[0]). ◆ youngModulusArray. const double sofa::youngModulusArray[] = {1.0,2.0}. sofa; Generated on Mon Nov 11 2024 02:16:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:396,Usability,simpl,simpleapi,396,"﻿. SOFA API: sofa Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions |; Variables . sofa Namespace Reference . Namespaces;  collision_test;  ;  component;  ;  core;  ;  defaulttype;  ;  framework;  ;  geometry;  ;  gl;  Forward declaration. ;  ;  gui;  ;  helper;  ;  linearalgebra;  ;  mapping_test;  ;  simpleapi;  ;  simulation;  ;  testing;  ;  topology;  ;  type;  for std::pair ;  . Classes; class  TestDataEngine;  ; struct  DataEngine_test;  Helper for writing DataEngine tests. More...;  ; struct  MultiMapping_test;  Base class for the MultiMapping tests, directly adapted from Mapping_test. More...;  ; struct  AffinePatch_sofa_test;  ; struct  CylinderTractionStruct;  Structure which contains the nodes and the pointers useful for the cylindertraction test. More...;  ; struct  LinearElasticity_test;  ; struct  ForceField_test;  Helper for writing ForceField tests. The constructor creates a root node and adds it a State and a ForceField (of the parameter type of this template class). Pointers to node, state and force are available. Deriving the ForceField test from this class makes it easy to write: just call function run_test with positions, velocities and the corresponding expected forces. This function automatically checks not only the forces (function addForce), but also the stiffness (methods addDForce and addKToMatrix), using finite differences. More...;  ; struct  PatchTestStruct;  Structure which contains the nodes and the pointers useful for the patch test. More...;  ; class  TemplateAliasTest;  ; struct  AdvancedTimerTest;  ; struct  DefaultAnimationLoop_test;  . Typedefs; typedef Types< Vec3Types > DataTypes;  ; typedef component::statecontainer::MechanicalObject< defaulttype::Vec3Types > MechanicalObject3;  ; template<typename DataTypes > ; using Coord_t = typename DataTypes::Coord;  ; template<typename DataTypes > ; using Real_t = typename DataTypes::Real;  ; tem",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision.html:223,Safety,detect,detection,223,﻿. SOFA API: sofa::component::collision Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Functions . sofa::component::collision Namespace Reference . Namespaces;  detection;  ;  geometry;  ;  model;  ;  response;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_API void sofa::component::collision::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::initExternalModule ; (; ). ◆ registerObjects(). void sofa::component::collision::registerObjects ; (; sofa::core::ObjectFactory * ; factory). sofacomponentcollision; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html:41,Safety,detect,detection,41,﻿. SOFA API: sofa::component::collision::detection Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Functions . sofa::component::collision::detection Namespace Reference . Namespaces;  algorithm;  ;  intersection;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_API void sofa::component::collision::detection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::initExternalModule ; (; ). ◆ registerObjects(). void sofa::component::collision::detection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). sofacomponentcollisiondetection; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html:200,Safety,detect,detection,200,﻿. SOFA API: sofa::component::collision::detection Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Functions . sofa::component::collision::detection Namespace Reference . Namespaces;  algorithm;  ;  intersection;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_API void sofa::component::collision::detection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::initExternalModule ; (; ). ◆ registerObjects(). void sofa::component::collision::detection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). sofacomponentcollisiondetection; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html:665,Safety,detect,detection,665,﻿. SOFA API: sofa::component::collision::detection Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Functions . sofa::component::collision::detection Namespace Reference . Namespaces;  algorithm;  ;  intersection;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_API void sofa::component::collision::detection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::initExternalModule ; (; ). ◆ registerObjects(). void sofa::component::collision::detection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). sofacomponentcollisiondetection; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html:761,Safety,detect,detection,761,﻿. SOFA API: sofa::component::collision::detection Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Functions . sofa::component::collision::detection Namespace Reference . Namespaces;  algorithm;  ;  intersection;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_API void sofa::component::collision::detection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::initExternalModule ; (; ). ◆ registerObjects(). void sofa::component::collision::detection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). sofacomponentcollisiondetection; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html:879,Safety,detect,detection,879,﻿. SOFA API: sofa::component::collision::detection Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Functions . sofa::component::collision::detection Namespace Reference . Namespaces;  algorithm;  ;  intersection;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_API void sofa::component::collision::detection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::initExternalModule ; (; ). ◆ registerObjects(). void sofa::component::collision::detection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). sofacomponentcollisiondetection; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html:960,Safety,detect,detection,960,﻿. SOFA API: sofa::component::collision::detection Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Functions . sofa::component::collision::detection Namespace Reference . Namespaces;  algorithm;  ;  intersection;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_API void sofa::component::collision::detection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::initExternalModule ; (; ). ◆ registerObjects(). void sofa::component::collision::detection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). sofacomponentcollisiondetection; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html:1052,Safety,detect,detection,1052,﻿. SOFA API: sofa::component::collision::detection Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Functions . sofa::component::collision::detection Namespace Reference . Namespaces;  algorithm;  ;  intersection;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_API void sofa::component::collision::detection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::initExternalModule ; (; ). ◆ registerObjects(). void sofa::component::collision::detection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). sofacomponentcollisiondetection; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:290,Performance,Perform,Perform,290,﻿. SOFA API: sofa::component::collision::detection::algorithm Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::collision::detection::algorithm Namespace Reference . Classes; class  BruteForceBroadPhase;  Perform an extensive pair-wise collision test based on the bounding volume of collision models. More...;  ; class  BruteForceDetection;  ; class  BVHNarrowPhase;  Narrow phase collision detection based on bounding volume hierarchy. More...;  ; class  CollisionPipeline;  ; class  CollidingPair;  ; class  CollisionPairID;  ; class  CollidingPM;  ; class  DirectSAP;  ; class  DirectSAPNarrowPhase;  ; class  DSAPBox;  ; class  EndPoint;  ; class  EndPointID;  ; struct  CompPEndPoint;  ; class  ISAPBox;  ; class  IncrSAP;  ; class  MirrorIntersector;  ; class  RayTraceDetection;  It is a Ray Trace based collision detection algorithm. More...;  ; class  RayTraceNarrowPhase;  It is a Ray Trace based collision detection algorithm. More...;  . Functions; void registerBruteForceBroadPhase (sofa::core::ObjectFactory *factory);  ; void registerBruteForceDetection (sofa::core::ObjectFactory *factory);  ; void registerBVHNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerCollisionPipeline (sofa::core::ObjectFactory *factory);  ; void registerDirectSAP (sofa::core::ObjectFactory *factory);  ; void registerDirectSAPNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerIncrSAP (sofa::core::ObjectFactory *factory);  ; void registerRayTraceDetection (sofa::core::ObjectFactory *factory);  ; void registerRayTraceNarrowPhase (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:41,Safety,detect,detection,41,﻿. SOFA API: sofa::component::collision::detection::algorithm Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::collision::detection::algorithm Namespace Reference . Classes; class  BruteForceBroadPhase;  Perform an extensive pair-wise collision test based on the bounding volume of collision models. More...;  ; class  BruteForceDetection;  ; class  BVHNarrowPhase;  Narrow phase collision detection based on bounding volume hierarchy. More...;  ; class  CollisionPipeline;  ; class  CollidingPair;  ; class  CollisionPairID;  ; class  CollidingPM;  ; class  DirectSAP;  ; class  DirectSAPNarrowPhase;  ; class  DSAPBox;  ; class  EndPoint;  ; class  EndPointID;  ; struct  CompPEndPoint;  ; class  ISAPBox;  ; class  IncrSAP;  ; class  MirrorIntersector;  ; class  RayTraceDetection;  It is a Ray Trace based collision detection algorithm. More...;  ; class  RayTraceNarrowPhase;  It is a Ray Trace based collision detection algorithm. More...;  . Functions; void registerBruteForceBroadPhase (sofa::core::ObjectFactory *factory);  ; void registerBruteForceDetection (sofa::core::ObjectFactory *factory);  ; void registerBVHNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerCollisionPipeline (sofa::core::ObjectFactory *factory);  ; void registerDirectSAP (sofa::core::ObjectFactory *factory);  ; void registerDirectSAPNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerIncrSAP (sofa::core::ObjectFactory *factory);  ; void registerRayTraceDetection (sofa::core::ObjectFactory *factory);  ; void registerRayTraceNarrowPhase (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:208,Safety,detect,detection,208,﻿. SOFA API: sofa::component::collision::detection::algorithm Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::collision::detection::algorithm Namespace Reference . Classes; class  BruteForceBroadPhase;  Perform an extensive pair-wise collision test based on the bounding volume of collision models. More...;  ; class  BruteForceDetection;  ; class  BVHNarrowPhase;  Narrow phase collision detection based on bounding volume hierarchy. More...;  ; class  CollisionPipeline;  ; class  CollidingPair;  ; class  CollisionPairID;  ; class  CollidingPM;  ; class  DirectSAP;  ; class  DirectSAPNarrowPhase;  ; class  DSAPBox;  ; class  EndPoint;  ; class  EndPointID;  ; struct  CompPEndPoint;  ; class  ISAPBox;  ; class  IncrSAP;  ; class  MirrorIntersector;  ; class  RayTraceDetection;  It is a Ray Trace based collision detection algorithm. More...;  ; class  RayTraceNarrowPhase;  It is a Ray Trace based collision detection algorithm. More...;  . Functions; void registerBruteForceBroadPhase (sofa::core::ObjectFactory *factory);  ; void registerBruteForceDetection (sofa::core::ObjectFactory *factory);  ; void registerBVHNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerCollisionPipeline (sofa::core::ObjectFactory *factory);  ; void registerDirectSAP (sofa::core::ObjectFactory *factory);  ; void registerDirectSAPNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerIncrSAP (sofa::core::ObjectFactory *factory);  ; void registerRayTraceDetection (sofa::core::ObjectFactory *factory);  ; void registerRayTraceNarrowPhase (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:476,Safety,detect,detection,476,﻿. SOFA API: sofa::component::collision::detection::algorithm Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::collision::detection::algorithm Namespace Reference . Classes; class  BruteForceBroadPhase;  Perform an extensive pair-wise collision test based on the bounding volume of collision models. More...;  ; class  BruteForceDetection;  ; class  BVHNarrowPhase;  Narrow phase collision detection based on bounding volume hierarchy. More...;  ; class  CollisionPipeline;  ; class  CollidingPair;  ; class  CollisionPairID;  ; class  CollidingPM;  ; class  DirectSAP;  ; class  DirectSAPNarrowPhase;  ; class  DSAPBox;  ; class  EndPoint;  ; class  EndPointID;  ; struct  CompPEndPoint;  ; class  ISAPBox;  ; class  IncrSAP;  ; class  MirrorIntersector;  ; class  RayTraceDetection;  It is a Ray Trace based collision detection algorithm. More...;  ; class  RayTraceNarrowPhase;  It is a Ray Trace based collision detection algorithm. More...;  . Functions; void registerBruteForceBroadPhase (sofa::core::ObjectFactory *factory);  ; void registerBruteForceDetection (sofa::core::ObjectFactory *factory);  ; void registerBVHNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerCollisionPipeline (sofa::core::ObjectFactory *factory);  ; void registerDirectSAP (sofa::core::ObjectFactory *factory);  ; void registerDirectSAPNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerIncrSAP (sofa::core::ObjectFactory *factory);  ; void registerRayTraceDetection (sofa::core::ObjectFactory *factory);  ; void registerRayTraceNarrowPhase (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:906,Safety,detect,detection,906,﻿. SOFA API: sofa::component::collision::detection::algorithm Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::collision::detection::algorithm Namespace Reference . Classes; class  BruteForceBroadPhase;  Perform an extensive pair-wise collision test based on the bounding volume of collision models. More...;  ; class  BruteForceDetection;  ; class  BVHNarrowPhase;  Narrow phase collision detection based on bounding volume hierarchy. More...;  ; class  CollisionPipeline;  ; class  CollidingPair;  ; class  CollisionPairID;  ; class  CollidingPM;  ; class  DirectSAP;  ; class  DirectSAPNarrowPhase;  ; class  DSAPBox;  ; class  EndPoint;  ; class  EndPointID;  ; struct  CompPEndPoint;  ; class  ISAPBox;  ; class  IncrSAP;  ; class  MirrorIntersector;  ; class  RayTraceDetection;  It is a Ray Trace based collision detection algorithm. More...;  ; class  RayTraceNarrowPhase;  It is a Ray Trace based collision detection algorithm. More...;  . Functions; void registerBruteForceBroadPhase (sofa::core::ObjectFactory *factory);  ; void registerBruteForceDetection (sofa::core::ObjectFactory *factory);  ; void registerBVHNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerCollisionPipeline (sofa::core::ObjectFactory *factory);  ; void registerDirectSAP (sofa::core::ObjectFactory *factory);  ; void registerDirectSAPNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerIncrSAP (sofa::core::ObjectFactory *factory);  ; void registerRayTraceDetection (sofa::core::ObjectFactory *factory);  ; void registerRayTraceNarrowPhase (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:1002,Safety,detect,detection,1002,﻿. SOFA API: sofa::component::collision::detection::algorithm Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::collision::detection::algorithm Namespace Reference . Classes; class  BruteForceBroadPhase;  Perform an extensive pair-wise collision test based on the bounding volume of collision models. More...;  ; class  BruteForceDetection;  ; class  BVHNarrowPhase;  Narrow phase collision detection based on bounding volume hierarchy. More...;  ; class  CollisionPipeline;  ; class  CollidingPair;  ; class  CollisionPairID;  ; class  CollidingPM;  ; class  DirectSAP;  ; class  DirectSAPNarrowPhase;  ; class  DSAPBox;  ; class  EndPoint;  ; class  EndPointID;  ; struct  CompPEndPoint;  ; class  ISAPBox;  ; class  IncrSAP;  ; class  MirrorIntersector;  ; class  RayTraceDetection;  It is a Ray Trace based collision detection algorithm. More...;  ; class  RayTraceNarrowPhase;  It is a Ray Trace based collision detection algorithm. More...;  . Functions; void registerBruteForceBroadPhase (sofa::core::ObjectFactory *factory);  ; void registerBruteForceDetection (sofa::core::ObjectFactory *factory);  ; void registerBVHNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerCollisionPipeline (sofa::core::ObjectFactory *factory);  ; void registerDirectSAP (sofa::core::ObjectFactory *factory);  ; void registerDirectSAPNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerIncrSAP (sofa::core::ObjectFactory *factory);  ; void registerRayTraceDetection (sofa::core::ObjectFactory *factory);  ; void registerRayTraceNarrowPhase (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:2060,Safety,detect,detection,2060,ruteForceBroadPhase (sofa::core::ObjectFactory *factory);  ; void registerBruteForceDetection (sofa::core::ObjectFactory *factory);  ; void registerBVHNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerCollisionPipeline (sofa::core::ObjectFactory *factory);  ; void registerDirectSAP (sofa::core::ObjectFactory *factory);  ; void registerDirectSAPNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerIncrSAP (sofa::core::ObjectFactory *factory);  ; void registerRayTraceDetection (sofa::core::ObjectFactory *factory);  ; void registerRayTraceNarrowPhase (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::algorithm::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::algorithm::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_API void sofa::component::collision::detection::algorithm::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::algorithm::initExternalModule ; (; ). ◆ registerBruteForceBroadPhase(). void sofa::component::collision::detection::algorithm::registerBruteForceBroadPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBruteForceDetection(). void sofa::component::collision::detection::algorithm::registerBruteForceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBVHNarrowPhase(). void sofa::component::collision::detection::algorithm::registerBVHNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerCollisionPipeline(). void sofa::component::collision::detection::algorithm::registerCollisionPipeline ; (; sofa::core::ObjectFact,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:2167,Safety,detect,detection,2167,jectFactory *factory);  ; void registerBVHNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerCollisionPipeline (sofa::core::ObjectFactory *factory);  ; void registerDirectSAP (sofa::core::ObjectFactory *factory);  ; void registerDirectSAPNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerIncrSAP (sofa::core::ObjectFactory *factory);  ; void registerRayTraceDetection (sofa::core::ObjectFactory *factory);  ; void registerRayTraceNarrowPhase (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::algorithm::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::algorithm::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_API void sofa::component::collision::detection::algorithm::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::algorithm::initExternalModule ; (; ). ◆ registerBruteForceBroadPhase(). void sofa::component::collision::detection::algorithm::registerBruteForceBroadPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBruteForceDetection(). void sofa::component::collision::detection::algorithm::registerBruteForceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBVHNarrowPhase(). void sofa::component::collision::detection::algorithm::registerBVHNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerCollisionPipeline(). void sofa::component::collision::detection::algorithm::registerCollisionPipeline ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAP(). void sofa::component::collision::detection::algorithm::registerDire,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:2306,Safety,detect,detection,2306,isionPipeline (sofa::core::ObjectFactory *factory);  ; void registerDirectSAP (sofa::core::ObjectFactory *factory);  ; void registerDirectSAPNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerIncrSAP (sofa::core::ObjectFactory *factory);  ; void registerRayTraceDetection (sofa::core::ObjectFactory *factory);  ; void registerRayTraceNarrowPhase (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::algorithm::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::algorithm::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_API void sofa::component::collision::detection::algorithm::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::algorithm::initExternalModule ; (; ). ◆ registerBruteForceBroadPhase(). void sofa::component::collision::detection::algorithm::registerBruteForceBroadPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBruteForceDetection(). void sofa::component::collision::detection::algorithm::registerBruteForceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBVHNarrowPhase(). void sofa::component::collision::detection::algorithm::registerBVHNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerCollisionPipeline(). void sofa::component::collision::detection::algorithm::registerCollisionPipeline ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAP(). void sofa::component::collision::detection::algorithm::registerDirectSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAPNarrowPhase(). void sofa::component::collis,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:2398,Safety,detect,detection,2398,registerDirectSAPNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerIncrSAP (sofa::core::ObjectFactory *factory);  ; void registerRayTraceDetection (sofa::core::ObjectFactory *factory);  ; void registerRayTraceNarrowPhase (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::algorithm::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::algorithm::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_API void sofa::component::collision::detection::algorithm::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::algorithm::initExternalModule ; (; ). ◆ registerBruteForceBroadPhase(). void sofa::component::collision::detection::algorithm::registerBruteForceBroadPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBruteForceDetection(). void sofa::component::collision::detection::algorithm::registerBruteForceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBVHNarrowPhase(). void sofa::component::collision::detection::algorithm::registerBVHNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerCollisionPipeline(). void sofa::component::collision::detection::algorithm::registerCollisionPipeline ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAP(). void sofa::component::collision::detection::algorithm::registerDirectSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAPNarrowPhase(). void sofa::component::collision::detection::algorithm::registerDirectSAPNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerIncrSAP(). v,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:2514,Safety,detect,detection,2514,gisterRayTraceDetection (sofa::core::ObjectFactory *factory);  ; void registerRayTraceNarrowPhase (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::algorithm::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::algorithm::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_API void sofa::component::collision::detection::algorithm::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::algorithm::initExternalModule ; (; ). ◆ registerBruteForceBroadPhase(). void sofa::component::collision::detection::algorithm::registerBruteForceBroadPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBruteForceDetection(). void sofa::component::collision::detection::algorithm::registerBruteForceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBVHNarrowPhase(). void sofa::component::collision::detection::algorithm::registerBVHNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerCollisionPipeline(). void sofa::component::collision::detection::algorithm::registerCollisionPipeline ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAP(). void sofa::component::collision::detection::algorithm::registerDirectSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAPNarrowPhase(). void sofa::component::collision::detection::algorithm::registerDirectSAPNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerIncrSAP(). void sofa::component::collision::detection::algorithm::registerIncrSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:2676,Safety,detect,detection,2676,RARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::algorithm::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::algorithm::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_API void sofa::component::collision::detection::algorithm::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::algorithm::initExternalModule ; (; ). ◆ registerBruteForceBroadPhase(). void sofa::component::collision::detection::algorithm::registerBruteForceBroadPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBruteForceDetection(). void sofa::component::collision::detection::algorithm::registerBruteForceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBVHNarrowPhase(). void sofa::component::collision::detection::algorithm::registerBVHNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerCollisionPipeline(). void sofa::component::collision::detection::algorithm::registerCollisionPipeline ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAP(). void sofa::component::collision::detection::algorithm::registerDirectSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAPNarrowPhase(). void sofa::component::collision::detection::algorithm::registerDirectSAPNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerIncrSAP(). void sofa::component::collision::detection::algorithm::registerIncrSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::algorithm::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceDetection(). void sofa::compone,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:2832,Safety,detect,detection,2832,on ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::algorithm::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::algorithm::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_API void sofa::component::collision::detection::algorithm::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::algorithm::initExternalModule ; (; ). ◆ registerBruteForceBroadPhase(). void sofa::component::collision::detection::algorithm::registerBruteForceBroadPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBruteForceDetection(). void sofa::component::collision::detection::algorithm::registerBruteForceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBVHNarrowPhase(). void sofa::component::collision::detection::algorithm::registerBVHNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerCollisionPipeline(). void sofa::component::collision::detection::algorithm::registerCollisionPipeline ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAP(). void sofa::component::collision::detection::algorithm::registerDirectSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAPNarrowPhase(). void sofa::component::collision::detection::algorithm::registerDirectSAPNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerIncrSAP(). void sofa::component::collision::detection::algorithm::registerIncrSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::algorithm::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceDetection(). void sofa::component::collision::detection::algorithm::registerRayTraceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceNarrowPhase(). void sofa::co,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:2986,Safety,detect,detection,2986,(). const char * sofa::component::collision::detection::algorithm::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::algorithm::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_API void sofa::component::collision::detection::algorithm::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::algorithm::initExternalModule ; (; ). ◆ registerBruteForceBroadPhase(). void sofa::component::collision::detection::algorithm::registerBruteForceBroadPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBruteForceDetection(). void sofa::component::collision::detection::algorithm::registerBruteForceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBVHNarrowPhase(). void sofa::component::collision::detection::algorithm::registerBVHNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerCollisionPipeline(). void sofa::component::collision::detection::algorithm::registerCollisionPipeline ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAP(). void sofa::component::collision::detection::algorithm::registerDirectSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAPNarrowPhase(). void sofa::component::collision::detection::algorithm::registerDirectSAPNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerIncrSAP(). void sofa::component::collision::detection::algorithm::registerIncrSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::algorithm::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceDetection(). void sofa::component::collision::detection::algorithm::registerRayTraceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceNarrowPhase(). void sofa::component::collision::detection::algorithm::registerRayTraceNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). sofacomponentcollisiondetectionalgorithm,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:3135,Safety,detect,detection,3135,m::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::algorithm::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_API void sofa::component::collision::detection::algorithm::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::algorithm::initExternalModule ; (; ). ◆ registerBruteForceBroadPhase(). void sofa::component::collision::detection::algorithm::registerBruteForceBroadPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBruteForceDetection(). void sofa::component::collision::detection::algorithm::registerBruteForceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBVHNarrowPhase(). void sofa::component::collision::detection::algorithm::registerBVHNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerCollisionPipeline(). void sofa::component::collision::detection::algorithm::registerCollisionPipeline ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAP(). void sofa::component::collision::detection::algorithm::registerDirectSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAPNarrowPhase(). void sofa::component::collision::detection::algorithm::registerDirectSAPNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerIncrSAP(). void sofa::component::collision::detection::algorithm::registerIncrSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::algorithm::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceDetection(). void sofa::component::collision::detection::algorithm::registerRayTraceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceNarrowPhase(). void sofa::component::collision::detection::algorithm::registerRayTraceNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). sofacomponentcollisiondetectionalgorithm; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:3287,Safety,detect,detection,3287,m::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::algorithm::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_API void sofa::component::collision::detection::algorithm::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::algorithm::initExternalModule ; (; ). ◆ registerBruteForceBroadPhase(). void sofa::component::collision::detection::algorithm::registerBruteForceBroadPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBruteForceDetection(). void sofa::component::collision::detection::algorithm::registerBruteForceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBVHNarrowPhase(). void sofa::component::collision::detection::algorithm::registerBVHNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerCollisionPipeline(). void sofa::component::collision::detection::algorithm::registerCollisionPipeline ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAP(). void sofa::component::collision::detection::algorithm::registerDirectSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAPNarrowPhase(). void sofa::component::collision::detection::algorithm::registerDirectSAPNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerIncrSAP(). void sofa::component::collision::detection::algorithm::registerIncrSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::algorithm::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceDetection(). void sofa::component::collision::detection::algorithm::registerRayTraceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceNarrowPhase(). void sofa::component::collision::detection::algorithm::registerRayTraceNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). sofacomponentcollisiondetectionalgorithm; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:3437,Safety,detect,detection,3437,m::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::algorithm::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_API void sofa::component::collision::detection::algorithm::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::algorithm::initExternalModule ; (; ). ◆ registerBruteForceBroadPhase(). void sofa::component::collision::detection::algorithm::registerBruteForceBroadPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBruteForceDetection(). void sofa::component::collision::detection::algorithm::registerBruteForceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBVHNarrowPhase(). void sofa::component::collision::detection::algorithm::registerBVHNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerCollisionPipeline(). void sofa::component::collision::detection::algorithm::registerCollisionPipeline ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAP(). void sofa::component::collision::detection::algorithm::registerDirectSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAPNarrowPhase(). void sofa::component::collision::detection::algorithm::registerDirectSAPNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerIncrSAP(). void sofa::component::collision::detection::algorithm::registerIncrSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::algorithm::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceDetection(). void sofa::component::collision::detection::algorithm::registerRayTraceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceNarrowPhase(). void sofa::component::collision::detection::algorithm::registerRayTraceNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). sofacomponentcollisiondetectionalgorithm; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:3574,Safety,detect,detection,3574,m::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::algorithm::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_API void sofa::component::collision::detection::algorithm::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::algorithm::initExternalModule ; (; ). ◆ registerBruteForceBroadPhase(). void sofa::component::collision::detection::algorithm::registerBruteForceBroadPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBruteForceDetection(). void sofa::component::collision::detection::algorithm::registerBruteForceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBVHNarrowPhase(). void sofa::component::collision::detection::algorithm::registerBVHNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerCollisionPipeline(). void sofa::component::collision::detection::algorithm::registerCollisionPipeline ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAP(). void sofa::component::collision::detection::algorithm::registerDirectSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAPNarrowPhase(). void sofa::component::collision::detection::algorithm::registerDirectSAPNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerIncrSAP(). void sofa::component::collision::detection::algorithm::registerIncrSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::algorithm::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceDetection(). void sofa::component::collision::detection::algorithm::registerRayTraceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceNarrowPhase(). void sofa::component::collision::detection::algorithm::registerRayTraceNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). sofacomponentcollisiondetectionalgorithm; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:3721,Safety,detect,detection,3721,m::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::algorithm::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_API void sofa::component::collision::detection::algorithm::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::algorithm::initExternalModule ; (; ). ◆ registerBruteForceBroadPhase(). void sofa::component::collision::detection::algorithm::registerBruteForceBroadPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBruteForceDetection(). void sofa::component::collision::detection::algorithm::registerBruteForceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBVHNarrowPhase(). void sofa::component::collision::detection::algorithm::registerBVHNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerCollisionPipeline(). void sofa::component::collision::detection::algorithm::registerCollisionPipeline ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAP(). void sofa::component::collision::detection::algorithm::registerDirectSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAPNarrowPhase(). void sofa::component::collision::detection::algorithm::registerDirectSAPNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerIncrSAP(). void sofa::component::collision::detection::algorithm::registerIncrSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::algorithm::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceDetection(). void sofa::component::collision::detection::algorithm::registerRayTraceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceNarrowPhase(). void sofa::component::collision::detection::algorithm::registerRayTraceNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). sofacomponentcollisiondetectionalgorithm; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:3880,Safety,detect,detection,3880,m::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::algorithm::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_API void sofa::component::collision::detection::algorithm::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::algorithm::initExternalModule ; (; ). ◆ registerBruteForceBroadPhase(). void sofa::component::collision::detection::algorithm::registerBruteForceBroadPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBruteForceDetection(). void sofa::component::collision::detection::algorithm::registerBruteForceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBVHNarrowPhase(). void sofa::component::collision::detection::algorithm::registerBVHNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerCollisionPipeline(). void sofa::component::collision::detection::algorithm::registerCollisionPipeline ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAP(). void sofa::component::collision::detection::algorithm::registerDirectSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAPNarrowPhase(). void sofa::component::collision::detection::algorithm::registerDirectSAPNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerIncrSAP(). void sofa::component::collision::detection::algorithm::registerIncrSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::algorithm::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceDetection(). void sofa::component::collision::detection::algorithm::registerRayTraceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceNarrowPhase(). void sofa::component::collision::detection::algorithm::registerRayTraceNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). sofacomponentcollisiondetectionalgorithm; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:331,Testability,test,test,331,﻿. SOFA API: sofa::component::collision::detection::algorithm Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::collision::detection::algorithm Namespace Reference . Classes; class  BruteForceBroadPhase;  Perform an extensive pair-wise collision test based on the bounding volume of collision models. More...;  ; class  BruteForceDetection;  ; class  BVHNarrowPhase;  Narrow phase collision detection based on bounding volume hierarchy. More...;  ; class  CollisionPipeline;  ; class  CollidingPair;  ; class  CollisionPairID;  ; class  CollidingPM;  ; class  DirectSAP;  ; class  DirectSAPNarrowPhase;  ; class  DSAPBox;  ; class  EndPoint;  ; class  EndPointID;  ; struct  CompPEndPoint;  ; class  ISAPBox;  ; class  IncrSAP;  ; class  MirrorIntersector;  ; class  RayTraceDetection;  It is a Ray Trace based collision detection algorithm. More...;  ; class  RayTraceNarrowPhase;  It is a Ray Trace based collision detection algorithm. More...;  . Functions; void registerBruteForceBroadPhase (sofa::core::ObjectFactory *factory);  ; void registerBruteForceDetection (sofa::core::ObjectFactory *factory);  ; void registerBVHNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerCollisionPipeline (sofa::core::ObjectFactory *factory);  ; void registerDirectSAP (sofa::core::ObjectFactory *factory);  ; void registerDirectSAPNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerIncrSAP (sofa::core::ObjectFactory *factory);  ; void registerRayTraceDetection (sofa::core::ObjectFactory *factory);  ; void registerRayTraceNarrowPhase (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:184,Modifiability,Variab,Variables,184,"﻿. SOFA API: sofa::component::collision::detection::intersection Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::collision::detection::intersection Namespace Reference . Classes; class  BaseProximityIntersection;  ; class  DiscreteIntersection;  ; class  LocalMinDistance;  ; class  MeshDiscreteIntersection;  ; class  MeshMinProximityIntersection;  ; class  MeshNewProximityIntersection;  ; class  MinProximityIntersection;  ; class  NewProximityIntersection;  ; class  RayDiscreteIntersection;  ; class  RayNewProximityIntersection;  ; class  TetrahedronDiscreteIntersection;  . Functions; void registerDiscreteIntersection (sofa::core::ObjectFactory *factory);  ; void registerLocalMinDistance (sofa::core::ObjectFactory *factory);  ; void registerMinProximityIntersection (sofa::core::ObjectFactory *factory);  ; void registerNewProximityIntersection (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; IntersectorCreator< DiscreteIntersection, MeshDiscreteIntersection > MeshDiscreteIntersectors (""Mesh"");  ; IntersectorCreator< MinProximityIntersection, MeshMinProximityIntersection > MeshMinProximityIntersectors (""Mesh"");  ; IntersectorCreator< NewProximityIntersection, MeshNewProximityIntersection > MeshNewProximityIntersectors (""Mesh"");  ; IntersectorCreator< DiscreteIntersection, RayDiscreteIntersection > RayDiscreteIntersectors (""Ray"");  ; IntersectorCreator< MinProximityIntersection, RayDiscreteIntersection > RayMinProximityIntersectors (""Ray"");  ; IntersectorCreator< NewProximityIntersection, RayNewProximityIntersection > RayNewProximityIntersectors (""Ray"");  ; IntersectorCreator< Disc",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:1289,Modifiability,Variab,Variables,1289,"void registerDiscreteIntersection (sofa::core::ObjectFactory *factory);  ; void registerLocalMinDistance (sofa::core::ObjectFactory *factory);  ; void registerMinProximityIntersection (sofa::core::ObjectFactory *factory);  ; void registerNewProximityIntersection (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; IntersectorCreator< DiscreteIntersection, MeshDiscreteIntersection > MeshDiscreteIntersectors (""Mesh"");  ; IntersectorCreator< MinProximityIntersection, MeshMinProximityIntersection > MeshMinProximityIntersectors (""Mesh"");  ; IntersectorCreator< NewProximityIntersection, MeshNewProximityIntersection > MeshNewProximityIntersectors (""Mesh"");  ; IntersectorCreator< DiscreteIntersection, RayDiscreteIntersection > RayDiscreteIntersectors (""Ray"");  ; IntersectorCreator< MinProximityIntersection, RayDiscreteIntersection > RayMinProximityIntersectors (""Ray"");  ; IntersectorCreator< NewProximityIntersection, RayNewProximityIntersection > RayNewProximityIntersectors (""Ray"");  ; IntersectorCreator< DiscreteIntersection, TetrahedronDiscreteIntersection > TetrahedronDiscreteIntersectors (""Ray"");  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::intersection::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::intersection::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_INTERSECTION_API void sofa::component::collision::detection::intersection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::intersection::initExternalModule ; (; ). ◆ registerDiscreteIntersection(). void sofa::component::collision::detection::intersection::registerDiscreteI",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:3395,Modifiability,Variab,Variable,3395,"d sofa::component::collision::detection::intersection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::intersection::initExternalModule ; (; ). ◆ registerDiscreteIntersection(). void sofa::component::collision::detection::intersection::registerDiscreteIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerLocalMinDistance(). void sofa::component::collision::detection::intersection::registerLocalMinDistance ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMinProximityIntersection(). void sofa::component::collision::detection::intersection::registerMinProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNewProximityIntersection(). void sofa::component::collision::detection::intersection::registerNewProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::intersection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MeshDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, MeshDiscreteIntersection> sofa::component::collision::detection::intersection::MeshDiscreteIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, MeshMinProximityIntersection> sofa::component::collision::detection::intersection::MeshMinProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, MeshNewProximityIntersection> sofa::component::collision::detection::intersection::MeshNewProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ RayDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersection::RayDiscreteIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ RayMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersection::RayMinProximit",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:41,Safety,detect,detection,41,"﻿. SOFA API: sofa::component::collision::detection::intersection Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::collision::detection::intersection Namespace Reference . Classes; class  BaseProximityIntersection;  ; class  DiscreteIntersection;  ; class  LocalMinDistance;  ; class  MeshDiscreteIntersection;  ; class  MeshMinProximityIntersection;  ; class  MeshNewProximityIntersection;  ; class  MinProximityIntersection;  ; class  NewProximityIntersection;  ; class  RayDiscreteIntersection;  ; class  RayNewProximityIntersection;  ; class  TetrahedronDiscreteIntersection;  . Functions; void registerDiscreteIntersection (sofa::core::ObjectFactory *factory);  ; void registerLocalMinDistance (sofa::core::ObjectFactory *factory);  ; void registerMinProximityIntersection (sofa::core::ObjectFactory *factory);  ; void registerNewProximityIntersection (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; IntersectorCreator< DiscreteIntersection, MeshDiscreteIntersection > MeshDiscreteIntersectors (""Mesh"");  ; IntersectorCreator< MinProximityIntersection, MeshMinProximityIntersection > MeshMinProximityIntersectors (""Mesh"");  ; IntersectorCreator< NewProximityIntersection, MeshNewProximityIntersection > MeshNewProximityIntersectors (""Mesh"");  ; IntersectorCreator< DiscreteIntersection, RayDiscreteIntersection > RayDiscreteIntersectors (""Ray"");  ; IntersectorCreator< MinProximityIntersection, RayDiscreteIntersection > RayMinProximityIntersectors (""Ray"");  ; IntersectorCreator< NewProximityIntersection, RayNewProximityIntersection > RayNewProximityIntersectors (""Ray"");  ; IntersectorCreator< Disc",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:224,Safety,detect,detection,224,"﻿. SOFA API: sofa::component::collision::detection::intersection Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::collision::detection::intersection Namespace Reference . Classes; class  BaseProximityIntersection;  ; class  DiscreteIntersection;  ; class  LocalMinDistance;  ; class  MeshDiscreteIntersection;  ; class  MeshMinProximityIntersection;  ; class  MeshNewProximityIntersection;  ; class  MinProximityIntersection;  ; class  NewProximityIntersection;  ; class  RayDiscreteIntersection;  ; class  RayNewProximityIntersection;  ; class  TetrahedronDiscreteIntersection;  . Functions; void registerDiscreteIntersection (sofa::core::ObjectFactory *factory);  ; void registerLocalMinDistance (sofa::core::ObjectFactory *factory);  ; void registerMinProximityIntersection (sofa::core::ObjectFactory *factory);  ; void registerNewProximityIntersection (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; IntersectorCreator< DiscreteIntersection, MeshDiscreteIntersection > MeshDiscreteIntersectors (""Mesh"");  ; IntersectorCreator< MinProximityIntersection, MeshMinProximityIntersection > MeshMinProximityIntersectors (""Mesh"");  ; IntersectorCreator< NewProximityIntersection, MeshNewProximityIntersection > MeshNewProximityIntersectors (""Mesh"");  ; IntersectorCreator< DiscreteIntersection, RayDiscreteIntersection > RayDiscreteIntersectors (""Ray"");  ; IntersectorCreator< MinProximityIntersection, RayDiscreteIntersection > RayMinProximityIntersectors (""Ray"");  ; IntersectorCreator< NewProximityIntersection, RayNewProximityIntersection > RayNewProximityIntersectors (""Ray"");  ; IntersectorCreator< Disc",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:2181,Safety,detect,detection,2181,"OFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; IntersectorCreator< DiscreteIntersection, MeshDiscreteIntersection > MeshDiscreteIntersectors (""Mesh"");  ; IntersectorCreator< MinProximityIntersection, MeshMinProximityIntersection > MeshMinProximityIntersectors (""Mesh"");  ; IntersectorCreator< NewProximityIntersection, MeshNewProximityIntersection > MeshNewProximityIntersectors (""Mesh"");  ; IntersectorCreator< DiscreteIntersection, RayDiscreteIntersection > RayDiscreteIntersectors (""Ray"");  ; IntersectorCreator< MinProximityIntersection, RayDiscreteIntersection > RayMinProximityIntersectors (""Ray"");  ; IntersectorCreator< NewProximityIntersection, RayNewProximityIntersection > RayNewProximityIntersectors (""Ray"");  ; IntersectorCreator< DiscreteIntersection, TetrahedronDiscreteIntersection > TetrahedronDiscreteIntersectors (""Ray"");  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::intersection::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::intersection::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_INTERSECTION_API void sofa::component::collision::detection::intersection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::intersection::initExternalModule ; (; ). ◆ registerDiscreteIntersection(). void sofa::component::collision::detection::intersection::registerDiscreteIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerLocalMinDistance(). void sofa::component::collision::detection::intersection::registerLocalMinDistance ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMinProximityIntersection(). void sofa::component::collision::detection::intersection::registerMinProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNewProximityIntersection(). void sofa::component::collision::detection::intersection::regist",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:2291,Safety,detect,detection,2291,"bles; IntersectorCreator< DiscreteIntersection, MeshDiscreteIntersection > MeshDiscreteIntersectors (""Mesh"");  ; IntersectorCreator< MinProximityIntersection, MeshMinProximityIntersection > MeshMinProximityIntersectors (""Mesh"");  ; IntersectorCreator< NewProximityIntersection, MeshNewProximityIntersection > MeshNewProximityIntersectors (""Mesh"");  ; IntersectorCreator< DiscreteIntersection, RayDiscreteIntersection > RayDiscreteIntersectors (""Ray"");  ; IntersectorCreator< MinProximityIntersection, RayDiscreteIntersection > RayMinProximityIntersectors (""Ray"");  ; IntersectorCreator< NewProximityIntersection, RayNewProximityIntersection > RayNewProximityIntersectors (""Ray"");  ; IntersectorCreator< DiscreteIntersection, TetrahedronDiscreteIntersection > TetrahedronDiscreteIntersectors (""Ray"");  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::intersection::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::intersection::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_INTERSECTION_API void sofa::component::collision::detection::intersection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::intersection::initExternalModule ; (; ). ◆ registerDiscreteIntersection(). void sofa::component::collision::detection::intersection::registerDiscreteIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerLocalMinDistance(). void sofa::component::collision::detection::intersection::registerLocalMinDistance ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMinProximityIntersection(). void sofa::component::collision::detection::intersection::registerMinProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNewProximityIntersection(). void sofa::component::collision::detection::intersection::registerNewProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::componen",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:2436,Safety,detect,detection,2436,"rsectorCreator< MinProximityIntersection, MeshMinProximityIntersection > MeshMinProximityIntersectors (""Mesh"");  ; IntersectorCreator< NewProximityIntersection, MeshNewProximityIntersection > MeshNewProximityIntersectors (""Mesh"");  ; IntersectorCreator< DiscreteIntersection, RayDiscreteIntersection > RayDiscreteIntersectors (""Ray"");  ; IntersectorCreator< MinProximityIntersection, RayDiscreteIntersection > RayMinProximityIntersectors (""Ray"");  ; IntersectorCreator< NewProximityIntersection, RayNewProximityIntersection > RayNewProximityIntersectors (""Ray"");  ; IntersectorCreator< DiscreteIntersection, TetrahedronDiscreteIntersection > TetrahedronDiscreteIntersectors (""Ray"");  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::intersection::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::intersection::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_INTERSECTION_API void sofa::component::collision::detection::intersection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::intersection::initExternalModule ; (; ). ◆ registerDiscreteIntersection(). void sofa::component::collision::detection::intersection::registerDiscreteIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerLocalMinDistance(). void sofa::component::collision::detection::intersection::registerLocalMinDistance ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMinProximityIntersection(). void sofa::component::collision::detection::intersection::registerMinProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNewProximityIntersection(). void sofa::component::collision::detection::intersection::registerNewProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::intersection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Document",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:2531,Safety,detect,detection,2531,"eator< NewProximityIntersection, MeshNewProximityIntersection > MeshNewProximityIntersectors (""Mesh"");  ; IntersectorCreator< DiscreteIntersection, RayDiscreteIntersection > RayDiscreteIntersectors (""Ray"");  ; IntersectorCreator< MinProximityIntersection, RayDiscreteIntersection > RayMinProximityIntersectors (""Ray"");  ; IntersectorCreator< NewProximityIntersection, RayNewProximityIntersection > RayNewProximityIntersectors (""Ray"");  ; IntersectorCreator< DiscreteIntersection, TetrahedronDiscreteIntersection > TetrahedronDiscreteIntersectors (""Ray"");  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::intersection::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::intersection::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_INTERSECTION_API void sofa::component::collision::detection::intersection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::intersection::initExternalModule ; (; ). ◆ registerDiscreteIntersection(). void sofa::component::collision::detection::intersection::registerDiscreteIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerLocalMinDistance(). void sofa::component::collision::detection::intersection::registerLocalMinDistance ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMinProximityIntersection(). void sofa::component::collision::detection::intersection::registerMinProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNewProximityIntersection(). void sofa::component::collision::detection::intersection::registerNewProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::intersection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MeshDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, MeshDiscreteIntersection> sofa::component::collision",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:2650,Safety,detect,detection,2650,"ion, RayDiscreteIntersection > RayDiscreteIntersectors (""Ray"");  ; IntersectorCreator< MinProximityIntersection, RayDiscreteIntersection > RayMinProximityIntersectors (""Ray"");  ; IntersectorCreator< NewProximityIntersection, RayNewProximityIntersection > RayNewProximityIntersectors (""Ray"");  ; IntersectorCreator< DiscreteIntersection, TetrahedronDiscreteIntersection > TetrahedronDiscreteIntersectors (""Ray"");  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::intersection::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::intersection::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_INTERSECTION_API void sofa::component::collision::detection::intersection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::intersection::initExternalModule ; (; ). ◆ registerDiscreteIntersection(). void sofa::component::collision::detection::intersection::registerDiscreteIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerLocalMinDistance(). void sofa::component::collision::detection::intersection::registerLocalMinDistance ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMinProximityIntersection(). void sofa::component::collision::detection::intersection::registerMinProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNewProximityIntersection(). void sofa::component::collision::detection::intersection::registerNewProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::intersection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MeshDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, MeshDiscreteIntersection> sofa::component::collision::detection::intersection::MeshDiscreteIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshMinProximityIntersectors. IntersectorCreator<MinProximityIn",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:2812,Safety,detect,detection,2812,"ectors (""Ray"");  ; IntersectorCreator< NewProximityIntersection, RayNewProximityIntersection > RayNewProximityIntersectors (""Ray"");  ; IntersectorCreator< DiscreteIntersection, TetrahedronDiscreteIntersection > TetrahedronDiscreteIntersectors (""Ray"");  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::intersection::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::intersection::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_INTERSECTION_API void sofa::component::collision::detection::intersection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::intersection::initExternalModule ; (; ). ◆ registerDiscreteIntersection(). void sofa::component::collision::detection::intersection::registerDiscreteIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerLocalMinDistance(). void sofa::component::collision::detection::intersection::registerLocalMinDistance ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMinProximityIntersection(). void sofa::component::collision::detection::intersection::registerMinProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNewProximityIntersection(). void sofa::component::collision::detection::intersection::registerNewProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::intersection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MeshDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, MeshDiscreteIntersection> sofa::component::collision::detection::intersection::MeshDiscreteIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, MeshMinProximityIntersection> sofa::component::collision::detection::intersection::MeshMinProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshNewPr",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:2978,Safety,detect,detection,2978,"ction, TetrahedronDiscreteIntersection > TetrahedronDiscreteIntersectors (""Ray"");  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::intersection::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::intersection::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_INTERSECTION_API void sofa::component::collision::detection::intersection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::intersection::initExternalModule ; (; ). ◆ registerDiscreteIntersection(). void sofa::component::collision::detection::intersection::registerDiscreteIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerLocalMinDistance(). void sofa::component::collision::detection::intersection::registerLocalMinDistance ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMinProximityIntersection(). void sofa::component::collision::detection::intersection::registerMinProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNewProximityIntersection(). void sofa::component::collision::detection::intersection::registerNewProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::intersection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MeshDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, MeshDiscreteIntersection> sofa::component::collision::detection::intersection::MeshDiscreteIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, MeshMinProximityIntersection> sofa::component::collision::detection::intersection::MeshMinProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, MeshNewProximityIntersection> sofa::component::collision::detection::intersection::MeshNewProximityInter",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:3152,Safety,detect,detection,3152,"tion::intersection::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::intersection::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_INTERSECTION_API void sofa::component::collision::detection::intersection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::intersection::initExternalModule ; (; ). ◆ registerDiscreteIntersection(). void sofa::component::collision::detection::intersection::registerDiscreteIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerLocalMinDistance(). void sofa::component::collision::detection::intersection::registerLocalMinDistance ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMinProximityIntersection(). void sofa::component::collision::detection::intersection::registerMinProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNewProximityIntersection(). void sofa::component::collision::detection::intersection::registerNewProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::intersection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MeshDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, MeshDiscreteIntersection> sofa::component::collision::detection::intersection::MeshDiscreteIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, MeshMinProximityIntersection> sofa::component::collision::detection::intersection::MeshMinProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, MeshNewProximityIntersection> sofa::component::collision::detection::intersection::MeshNewProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ RayDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersect",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:3309,Safety,detect,detection,3309," (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_INTERSECTION_API void sofa::component::collision::detection::intersection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::intersection::initExternalModule ; (; ). ◆ registerDiscreteIntersection(). void sofa::component::collision::detection::intersection::registerDiscreteIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerLocalMinDistance(). void sofa::component::collision::detection::intersection::registerLocalMinDistance ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMinProximityIntersection(). void sofa::component::collision::detection::intersection::registerMinProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNewProximityIntersection(). void sofa::component::collision::detection::intersection::registerNewProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::intersection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MeshDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, MeshDiscreteIntersection> sofa::component::collision::detection::intersection::MeshDiscreteIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, MeshMinProximityIntersection> sofa::component::collision::detection::intersection::MeshMinProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, MeshNewProximityIntersection> sofa::component::collision::detection::intersection::MeshNewProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ RayDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersection::RayDiscreteIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ RayMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, RayDiscreteIntersecti",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:3542,Safety,detect,detection,3542,"detection::intersection::initExternalModule ; (; ). ◆ registerDiscreteIntersection(). void sofa::component::collision::detection::intersection::registerDiscreteIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerLocalMinDistance(). void sofa::component::collision::detection::intersection::registerLocalMinDistance ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMinProximityIntersection(). void sofa::component::collision::detection::intersection::registerMinProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNewProximityIntersection(). void sofa::component::collision::detection::intersection::registerNewProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::intersection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MeshDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, MeshDiscreteIntersection> sofa::component::collision::detection::intersection::MeshDiscreteIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, MeshMinProximityIntersection> sofa::component::collision::detection::intersection::MeshMinProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, MeshNewProximityIntersection> sofa::component::collision::detection::intersection::MeshNewProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ RayDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersection::RayDiscreteIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ RayMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersection::RayMinProximityIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ RayNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, RayNewProxim",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:3752,Safety,detect,detection,3752,"factory). ◆ registerLocalMinDistance(). void sofa::component::collision::detection::intersection::registerLocalMinDistance ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMinProximityIntersection(). void sofa::component::collision::detection::intersection::registerMinProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNewProximityIntersection(). void sofa::component::collision::detection::intersection::registerNewProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::intersection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MeshDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, MeshDiscreteIntersection> sofa::component::collision::detection::intersection::MeshDiscreteIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, MeshMinProximityIntersection> sofa::component::collision::detection::intersection::MeshMinProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, MeshNewProximityIntersection> sofa::component::collision::detection::intersection::MeshNewProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ RayDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersection::RayDiscreteIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ RayMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersection::RayMinProximityIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ RayNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, RayNewProximityIntersection> sofa::component::collision::detection::intersection::RayNewProximityIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ TetrahedronDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, Tetrahedron",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:3966,Safety,detect,detection,3966,"a::component::collision::detection::intersection::registerMinProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNewProximityIntersection(). void sofa::component::collision::detection::intersection::registerNewProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::intersection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MeshDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, MeshDiscreteIntersection> sofa::component::collision::detection::intersection::MeshDiscreteIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, MeshMinProximityIntersection> sofa::component::collision::detection::intersection::MeshMinProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, MeshNewProximityIntersection> sofa::component::collision::detection::intersection::MeshNewProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ RayDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersection::RayDiscreteIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ RayMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersection::RayMinProximityIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ RayNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, RayNewProximityIntersection> sofa::component::collision::detection::intersection::RayNewProximityIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ TetrahedronDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, TetrahedronDiscreteIntersection> sofa::component::collision::detection::intersection::TetrahedronDiscreteIntersectors(""Ray"") ; (; ""Ray"" ; ). sofacomponentcollisiondetectionintersection; Generated on Mon Nov 11 2024 02:19:53 f",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:4166,Safety,detect,detection,4166,"::detection::intersection::registerMinProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNewProximityIntersection(). void sofa::component::collision::detection::intersection::registerNewProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::intersection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MeshDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, MeshDiscreteIntersection> sofa::component::collision::detection::intersection::MeshDiscreteIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, MeshMinProximityIntersection> sofa::component::collision::detection::intersection::MeshMinProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, MeshNewProximityIntersection> sofa::component::collision::detection::intersection::MeshNewProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ RayDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersection::RayDiscreteIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ RayMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersection::RayMinProximityIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ RayNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, RayNewProximityIntersection> sofa::component::collision::detection::intersection::RayNewProximityIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ TetrahedronDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, TetrahedronDiscreteIntersection> sofa::component::collision::detection::intersection::TetrahedronDiscreteIntersectors(""Ray"") ; (; ""Ray"" ; ). sofacomponentcollisiondetectionintersection; Generated on Mon Nov 11 2024 02:19:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:4367,Safety,detect,detection,4367,"::detection::intersection::registerMinProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNewProximityIntersection(). void sofa::component::collision::detection::intersection::registerNewProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::intersection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MeshDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, MeshDiscreteIntersection> sofa::component::collision::detection::intersection::MeshDiscreteIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, MeshMinProximityIntersection> sofa::component::collision::detection::intersection::MeshMinProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, MeshNewProximityIntersection> sofa::component::collision::detection::intersection::MeshNewProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ RayDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersection::RayDiscreteIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ RayMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersection::RayMinProximityIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ RayNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, RayNewProximityIntersection> sofa::component::collision::detection::intersection::RayNewProximityIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ TetrahedronDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, TetrahedronDiscreteIntersection> sofa::component::collision::detection::intersection::TetrahedronDiscreteIntersectors(""Ray"") ; (; ""Ray"" ; ). sofacomponentcollisiondetectionintersection; Generated on Mon Nov 11 2024 02:19:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:4576,Safety,detect,detection,4576,"::detection::intersection::registerMinProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNewProximityIntersection(). void sofa::component::collision::detection::intersection::registerNewProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::intersection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MeshDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, MeshDiscreteIntersection> sofa::component::collision::detection::intersection::MeshDiscreteIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, MeshMinProximityIntersection> sofa::component::collision::detection::intersection::MeshMinProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, MeshNewProximityIntersection> sofa::component::collision::detection::intersection::MeshNewProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ RayDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersection::RayDiscreteIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ RayMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersection::RayMinProximityIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ RayNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, RayNewProximityIntersection> sofa::component::collision::detection::intersection::RayNewProximityIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ TetrahedronDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, TetrahedronDiscreteIntersection> sofa::component::collision::detection::intersection::TetrahedronDiscreteIntersectors(""Ray"") ; (; ""Ray"" ; ). sofacomponentcollisiondetectionintersection; Generated on Mon Nov 11 2024 02:19:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:4789,Safety,detect,detection,4789,"::detection::intersection::registerMinProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNewProximityIntersection(). void sofa::component::collision::detection::intersection::registerNewProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::intersection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MeshDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, MeshDiscreteIntersection> sofa::component::collision::detection::intersection::MeshDiscreteIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, MeshMinProximityIntersection> sofa::component::collision::detection::intersection::MeshMinProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, MeshNewProximityIntersection> sofa::component::collision::detection::intersection::MeshNewProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ RayDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersection::RayDiscreteIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ RayMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersection::RayMinProximityIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ RayNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, RayNewProximityIntersection> sofa::component::collision::detection::intersection::RayNewProximityIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ TetrahedronDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, TetrahedronDiscreteIntersection> sofa::component::collision::detection::intersection::TetrahedronDiscreteIntersectors(""Ray"") ; (; ""Ray"" ; ). sofacomponentcollisiondetectionintersection; Generated on Mon Nov 11 2024 02:19:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1response_1_1contact.html:178,Modifiability,Variab,Variables,178,"﻿. SOFA API: sofa::component::collision::response::contact Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::collision::response::contact Namespace Reference . Classes; class  BarycentricPenalityContact;  ; class  BarycentricStickContact;  ; class  CollisionResponse;  ; class  ContactIdentifier;  ; class  ContactListener;  ; class  FrictionContact;  ; class  PenalityContact;  ; class  PenalityContactForceField;  ; class  BaseRayContact;  ; class  RayContact;  ; class  RuleBasedContactManager;  ; class  StickContactConstraint;  . Functions; void registerCollisionResponse (sofa::core::ObjectFactory *factory);  ; long cantorPolynomia (sofa::core::collision::DetectionOutput::ContactId x, sofa::core::collision::DetectionOutput::ContactId y);  ; void registerContactListener (sofa::core::ObjectFactory *factory);  ; void registerPenalityContactForceField (sofa::core::ObjectFactory *factory);  ; void registerRuleBasedContactManager (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; Creator< Contact::Factory, BarycentricPenalityContact< SphereCollisionModel< sofa::defaulttype::Vec3Types >, SphereCollisionModel< sofa::defaulttype::Vec3Types > > > SphereSpherePenalityContactClass (""PenalityContactForceField"", true);  ; Creator< Contact::Factory, BarycentricPenalityContact< SphereCollisionModel< sofa::defaulttype::Vec3Types >, RigidSphereModel > > SphereRigidSpherePenalityContactClass (""PenalityContactForceField"", true);  ; Creator< Contact::Factory, BarycentricPenalityContact< RigidSphereModel, RigidSphereModel > > RigidSphereRigidSpherePenalityContactClass (""PenalityContactForceField"", true); ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1response_1_1contact.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1response_1_1contact.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1response_1_1contact.html:1369,Modifiability,Variab,Variables,1369," Variables; Creator< Contact::Factory, BarycentricPenalityContact< SphereCollisionModel< sofa::defaulttype::Vec3Types >, SphereCollisionModel< sofa::defaulttype::Vec3Types > > > SphereSpherePenalityContactClass (""PenalityContactForceField"", true);  ; Creator< Contact::Factory, BarycentricPenalityContact< SphereCollisionModel< sofa::defaulttype::Vec3Types >, RigidSphereModel > > SphereRigidSpherePenalityContactClass (""PenalityContactForceField"", true);  ; Creator< Contact::Factory, BarycentricPenalityContact< RigidSphereModel, RigidSphereModel > > RigidSphereRigidSpherePenalityContactClass (""PenalityContactForceField"", true); ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1response_1_1contact.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1response_1_1contact.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1response_1_1contact.html:19586,Modifiability,Variab,Variable,19586," SOFA_COMPONENT_COLLISION_RESPONSE_CONTACT_API void sofa::component::collision::response::contact::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::response::contact::initExternalModule ; (; ). ◆ registerCollisionResponse(). void sofa::component::collision::response::contact::registerCollisionResponse ; (; sofa::core::ObjectFactory * ; factory). ◆ registerContactListener(). void sofa::component::collision::response::contact::registerContactListener ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::response::contact::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerPenalityContactForceField(). void sofa::component::collision::response::contact::registerPenalityContactForceField ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRuleBasedContactManager(). void sofa::component::collision::response::contact::registerRuleBasedContactManager ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ BarycentricPenalityContact< RigidSphereModel, RigidSphereModel >. template class SOFA_COMPONENT_COLLISION_RESPONSE_CONTACT_API sofa::component::collision::response::contact::BarycentricPenalityContact< RigidSphereModel, RigidSphereModel >. ◆ CylinderCylinderPenalityContactClass. Creator<Contact::Factory, BarycentricPenalityContact<CylinderCollisionModel<sofa::defaulttype::Rigid3Types>, CylinderCollisionModel<sofa::defaulttype::Rigid3Types> > > sofa::component::collision::response::contact::CylinderCylinderPenalityContactClass(""PenalityContactForceField"", true) ; (; ""PenalityContactForceField"" ; , . true ;  . ). ◆ CylinderRigidSpherePenalityContactClass. Creator<Contact::Factory, BarycentricPenalityContact<CylinderCollisionModel<sofa::defaulttype::Rigid3Types>, RigidSphereModel> > sofa::component::collision::response::contact::CylinderRigidSpherePenalityContactClass(""PenalityContactForceField"", true) ; (; ""PenalityContactForceField"" ; , . true ;  . ). ◆ CylinderSpherePena",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1response_1_1contact.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1response_1_1contact.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1response_1_1contact.html:761,Safety,Detect,DetectionOutput,761,"﻿. SOFA API: sofa::component::collision::response::contact Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::collision::response::contact Namespace Reference . Classes; class  BarycentricPenalityContact;  ; class  BarycentricStickContact;  ; class  CollisionResponse;  ; class  ContactIdentifier;  ; class  ContactListener;  ; class  FrictionContact;  ; class  PenalityContact;  ; class  PenalityContactForceField;  ; class  BaseRayContact;  ; class  RayContact;  ; class  RuleBasedContactManager;  ; class  StickContactConstraint;  . Functions; void registerCollisionResponse (sofa::core::ObjectFactory *factory);  ; long cantorPolynomia (sofa::core::collision::DetectionOutput::ContactId x, sofa::core::collision::DetectionOutput::ContactId y);  ; void registerContactListener (sofa::core::ObjectFactory *factory);  ; void registerPenalityContactForceField (sofa::core::ObjectFactory *factory);  ; void registerRuleBasedContactManager (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; Creator< Contact::Factory, BarycentricPenalityContact< SphereCollisionModel< sofa::defaulttype::Vec3Types >, SphereCollisionModel< sofa::defaulttype::Vec3Types > > > SphereSpherePenalityContactClass (""PenalityContactForceField"", true);  ; Creator< Contact::Factory, BarycentricPenalityContact< SphereCollisionModel< sofa::defaulttype::Vec3Types >, RigidSphereModel > > SphereRigidSpherePenalityContactClass (""PenalityContactForceField"", true);  ; Creator< Contact::Factory, BarycentricPenalityContact< RigidSphereModel, RigidSphereModel > > RigidSphereRigidSpherePenalityContactClass (""PenalityContactForceField"", true);",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1response_1_1contact.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1response_1_1contact.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1response_1_1contact.html:814,Safety,Detect,DetectionOutput,814,"﻿. SOFA API: sofa::component::collision::response::contact Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::collision::response::contact Namespace Reference . Classes; class  BarycentricPenalityContact;  ; class  BarycentricStickContact;  ; class  CollisionResponse;  ; class  ContactIdentifier;  ; class  ContactListener;  ; class  FrictionContact;  ; class  PenalityContact;  ; class  PenalityContactForceField;  ; class  BaseRayContact;  ; class  RayContact;  ; class  RuleBasedContactManager;  ; class  StickContactConstraint;  . Functions; void registerCollisionResponse (sofa::core::ObjectFactory *factory);  ; long cantorPolynomia (sofa::core::collision::DetectionOutput::ContactId x, sofa::core::collision::DetectionOutput::ContactId y);  ; void registerContactListener (sofa::core::ObjectFactory *factory);  ; void registerPenalityContactForceField (sofa::core::ObjectFactory *factory);  ; void registerRuleBasedContactManager (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; Creator< Contact::Factory, BarycentricPenalityContact< SphereCollisionModel< sofa::defaulttype::Vec3Types >, SphereCollisionModel< sofa::defaulttype::Vec3Types > > > SphereSpherePenalityContactClass (""PenalityContactForceField"", true);  ; Creator< Contact::Factory, BarycentricPenalityContact< SphereCollisionModel< sofa::defaulttype::Vec3Types >, RigidSphereModel > > SphereRigidSpherePenalityContactClass (""PenalityContactForceField"", true);  ; Creator< Contact::Factory, BarycentricPenalityContact< RigidSphereModel, RigidSphereModel > > RigidSphereRigidSpherePenalityContactClass (""PenalityContactForceField"", true);",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1response_1_1contact.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1response_1_1contact.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1response_1_1contact.html:18278,Safety,Detect,DetectionOutput,18278,"faulttype::Vec3Types > > > TetrahedronPointPenalityFrictionContactClass (""FrictionContactConstraint"", true);  ; Creator< Contact::Factory, FrictionContact< TetrahedronCollisionModel, LineCollisionModel< sofa::defaulttype::Vec3Types > > > TetrahedronLinePenalityFrictionContactClass (""FrictionContactConstraint"", true);  ; Creator< Contact::Factory, FrictionContact< TetrahedronCollisionModel, TriangleCollisionModel< sofa::defaulttype::Vec3Types > > > TetrahedronTrianglePenalityFrictionContactClass (""FrictionContactConstraint"", true);  ; Creator< Contact::Factory, FrictionContact< TetrahedronCollisionModel, TetrahedronCollisionModel > > TetrahedronTetrahedronPenalityFrictionContactClass (""FrictionContactConstraint"", true);  ; Creator< core::collision::Contact::Factory, RayContact< collision::geometry::TetrahedronCollisionModel > > RayTetrahedronContactClass (""RayContact"", true);  . Function Documentation. ◆ cantorPolynomia(). long sofa::component::collision::response::contact::cantorPolynomia ; (; sofa::core::collision::DetectionOutput::ContactId ; x, . sofa::core::collision::DetectionOutput::ContactId ; y . ). inline . ◆ getModuleName(). const char * sofa::component::collision::response::contact::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::response::contact::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_RESPONSE_CONTACT_API void sofa::component::collision::response::contact::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::response::contact::initExternalModule ; (; ). ◆ registerCollisionResponse(). void sofa::component::collision::response::contact::registerCollisionResponse ; (; sofa::core::ObjectFactory * ; factory). ◆ registerContactListener(). void sofa::component::collision::response::contact::registerContactListener ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::response::contact::registerObjects ; (; sofa::core::ObjectFactory * ; factor",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1response_1_1contact.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1response_1_1contact.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1response_1_1contact.html:18335,Safety,Detect,DetectionOutput,18335,"traint"", true);  ; Creator< Contact::Factory, FrictionContact< TetrahedronCollisionModel, LineCollisionModel< sofa::defaulttype::Vec3Types > > > TetrahedronLinePenalityFrictionContactClass (""FrictionContactConstraint"", true);  ; Creator< Contact::Factory, FrictionContact< TetrahedronCollisionModel, TriangleCollisionModel< sofa::defaulttype::Vec3Types > > > TetrahedronTrianglePenalityFrictionContactClass (""FrictionContactConstraint"", true);  ; Creator< Contact::Factory, FrictionContact< TetrahedronCollisionModel, TetrahedronCollisionModel > > TetrahedronTetrahedronPenalityFrictionContactClass (""FrictionContactConstraint"", true);  ; Creator< core::collision::Contact::Factory, RayContact< collision::geometry::TetrahedronCollisionModel > > RayTetrahedronContactClass (""RayContact"", true);  . Function Documentation. ◆ cantorPolynomia(). long sofa::component::collision::response::contact::cantorPolynomia ; (; sofa::core::collision::DetectionOutput::ContactId ; x, . sofa::core::collision::DetectionOutput::ContactId ; y . ). inline . ◆ getModuleName(). const char * sofa::component::collision::response::contact::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::response::contact::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_RESPONSE_CONTACT_API void sofa::component::collision::response::contact::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::response::contact::initExternalModule ; (; ). ◆ registerCollisionResponse(). void sofa::component::collision::response::contact::registerCollisionResponse ; (; sofa::core::ObjectFactory * ; factory). ◆ registerContactListener(). void sofa::component::collision::response::contact::registerContactListener ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::response::contact::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerPenalityContactForceField(). void sofa::component::collision::response::contact",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1response_1_1contact.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1response_1_1contact.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1response_1_1mapper.html:177,Modifiability,Variab,Variables,177,"﻿. SOFA API: sofa::component::collision::response::mapper Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::collision::response::mapper Namespace Reference . Classes; class  BarycentricContactMapper;  Base class for all mappers using BarycentricMapping. More...;  ; class  ContactMapper< collision::geometry::LineCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >;  Mapper for LineModel. More...;  ; class  ContactMapper< collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >;  Mapper for TriangleModel. More...;  ; class  GenerateStringID;  ; class  ContactMapper;  This class will be specialized to whatever mapper is required. More...;  ; class  BaseContactMapper;  Base class common to all mappers able to provide a MechanicalState of a given type. More...;  ; class  ContactMapperCreator;  ; class  IdentityContactMapper;  Base class for IdentityMapping based mappers. More...;  ; class  IdentityContactMapper< TCollisionModel, typename TCollisionModel::InDataTypes >;  Specialization of IdentityContactMapper when mapping to the same DataTypes, as no mapping is required in this case. More...;  ; class  ContactMapper< collision::geometry::PointCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >;  Mapper for PointModel. More...;  ; class  ContactMapper< collision::geometry::SphereCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >;  Mapper for SphereModel. More...;  ; class  RigidContactMapper;  Base class for all mappers using RigidMapping. More...;  ; class  ContactMapper< collision::geometry::RigidSphereModel, TVec3Types >;  ; class  ContactMapper< collision::geometry::CylinderCollisionModel< sofa::defaulttype::Rigid3Types >, TVec3Types >;  ; class  SubsetContactMapper;  Base class for all mappers using SubsetMapping. More...;  ; class  ContactMapper< collision::geometry::TetrahedronCollisionModel, DataTypes >;  Mapper f",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1response_1_1mapper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1response_1_1mapper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1response_1_1mapper.html:2347,Modifiability,Variab,Variables,2347,"nCollisionModel, DataTypes >;  Mapper for TetrahedronCollisionModel. More...;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; ContactMapperCreator< ContactMapper< LineCollisionModel< sofa::defaulttype::Vec3Types > > > LineContactMapperClass (""PenalityContactForceField"", true);  ; ContactMapperCreator< ContactMapper< TriangleCollisionModel< sofa::defaulttype::Vec3Types > > > TriangleContactMapperClass (""PenalityContactForceField"", true);  ; ContactMapperCreator< ContactMapper< SphereCollisionModel< sofa::defaulttype::Vec3Types > > > SphereContactMapperClass (""PenalityContactForceField"", true);  ; ContactMapperCreator< ContactMapper< PointCollisionModel< sofa::defaulttype::Vec3Types > > > PointContactMapperClass (""PenalityContactForceField"", true);  ; ContactMapperCreator< ContactMapper< CylinderCollisionModel< sofa::defaulttype::Rigid3Types >, Vec3Types > > CylinderModelContactMapperClass (""PenalityContactForceField"", true);  ; ContactMapperCreator< ContactMapper< RigidSphereModel, Vec3Types > > RigidSphereContactMapperClass (""PenalityContactForceField"", true);  ; template class SOFA_COMPONENT_COLLISION_RESPONSE_MAPPER_API ContactMapper< RigidSphereModel, Vec3Types >;  ; ContactMapperCreator< ContactMapper< collision::geometry::TetrahedronCollisionModel > > TetrahedronContactMapperClass (""PenalityContactForceField"", true);  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::response::mapper::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::response::mapper::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_RESPONSE_MAPPER_API void sofa::component::collision::response::mapper::init ; (; ). ◆ initExternalModule(). void sofa:",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1response_1_1mapper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1response_1_1mapper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1response_1_1mapper.html:4163,Modifiability,Variab,Variable,4163,"ontactMapperCreator< ContactMapper< RigidSphereModel, Vec3Types > > RigidSphereContactMapperClass (""PenalityContactForceField"", true);  ; template class SOFA_COMPONENT_COLLISION_RESPONSE_MAPPER_API ContactMapper< RigidSphereModel, Vec3Types >;  ; ContactMapperCreator< ContactMapper< collision::geometry::TetrahedronCollisionModel > > TetrahedronContactMapperClass (""PenalityContactForceField"", true);  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::response::mapper::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::response::mapper::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_RESPONSE_MAPPER_API void sofa::component::collision::response::mapper::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::response::mapper::initExternalModule ; (; ). ◆ registerObjects(). void sofa::component::collision::response::mapper::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ ContactMapper< RigidSphereModel, Vec3Types >. template class SOFA_COMPONENT_COLLISION_RESPONSE_MAPPER_API sofa::component::collision::response::mapper::ContactMapper< RigidSphereModel, Vec3Types >. ◆ CylinderModelContactMapperClass. ContactMapperCreator< ContactMapper<CylinderCollisionModel<sofa::defaulttype::Rigid3Types>,Vec3Types> > sofa::component::collision::response::mapper::CylinderModelContactMapperClass(""PenalityContactForceField"", true) ; (; ""PenalityContactForceField"" ; , . true ;  . ). ◆ LineContactMapperClass. ContactMapperCreator< ContactMapper<LineCollisionModel<sofa::defaulttype::Vec3Types> > > sofa::component::collision::response::mapper::LineContactMapperClass(""PenalityContactForceField"", true) ; (; ""PenalityContactForceField"" ; , . true ;  . ). ◆ PointContactMapperClass. ContactMapperCreator< ContactMapper<PointCollisionModel<sofa::defaulttype::Vec3Types> > > sofa::component::collision::response::mapper::PointContactMapperClass(""PenalityContactForceFiel",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1response_1_1mapper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1response_1_1mapper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1lagrangian_1_1correction.html:184,Modifiability,Variab,Variables,184,﻿. SOFA API: sofa::component::constraint::lagrangian::correction Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::constraint::lagrangian::correction Namespace Reference . Classes; class  GenericConstraintCorrection;  ; class  LinearSolverConstraintCorrection;  Component computing constrained forces within a simulated body using the compliance method. More...;  ; class  PrecomputedConstraintCorrection;  Component computing constraint forces within a simulated body using the compliance method. More...;  ; struct  ConstraintActivation;  ; class  UncoupledConstraintCorrection;  Component computing constraint forces within a simulated body using the compliance method. More...;  . Functions; void registerGenericConstraintCorrection (sofa::core::ObjectFactory *factory);  ; void registerLinearSolverConstraintCorrection (sofa::core::ObjectFactory *factory);  ; void registerPrecomputedConstraintCorrection (sofa::core::ObjectFactory *factory);  ; void registerUncoupledConstraintCorrection (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_CORRECTION_API LinearSolverConstraintCorrection< Vec3Types >;  ; template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_CORRECTION_API LinearSolverConstraintCorrection< Vec2Types >;  ; template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_CORRECTION_API LinearSolverConstraintCorrection< Vec1Types >;  ; template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_CORRECTION_API LinearSolverConstraintCorrection< Rigid3Types >;  ; template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_CORRECTION_API PrecomputedConstraintCorrec,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1lagrangian_1_1correction.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1lagrangian_1_1correction.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1lagrangian_1_1correction.html:1426,Modifiability,Variab,Variables,1426,edConstraintCorrection (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_CORRECTION_API LinearSolverConstraintCorrection< Vec3Types >;  ; template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_CORRECTION_API LinearSolverConstraintCorrection< Vec2Types >;  ; template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_CORRECTION_API LinearSolverConstraintCorrection< Vec1Types >;  ; template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_CORRECTION_API LinearSolverConstraintCorrection< Rigid3Types >;  ; template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_CORRECTION_API PrecomputedConstraintCorrection< Vec3Types >;  ; template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_CORRECTION_API PrecomputedConstraintCorrection< Vec1Types >;  ; template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_CORRECTION_API PrecomputedConstraintCorrection< Rigid3Types >;  ; template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_CORRECTION_API UncoupledConstraintCorrection< Vec1Types >;  ; template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_CORRECTION_API UncoupledConstraintCorrection< Vec2Types >;  ; template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_CORRECTION_API UncoupledConstraintCorrection< Vec3Types >;  ; template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_CORRECTION_API UncoupledConstraintCorrection< Rigid3Types >;  . Function Documentation. ◆ getModuleName(). const char * sofa::component::constraint::lagrangian::correction::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::constraint::lagrangian::correction::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_CORRECTION_API void sofa::component::constraint::lagrangian::cor,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1lagrangian_1_1correction.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1lagrangian_1_1correction.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1lagrangian_1_1correction.html:4083,Modifiability,Variab,Variable,4083,initExternalModule(). void sofa::component::constraint::lagrangian::correction::initExternalModule ; (; ). ◆ registerGenericConstraintCorrection(). void sofa::component::constraint::lagrangian::correction::registerGenericConstraintCorrection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerLinearSolverConstraintCorrection(). void sofa::component::constraint::lagrangian::correction::registerLinearSolverConstraintCorrection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::constraint::lagrangian::correction::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerPrecomputedConstraintCorrection(). void sofa::component::constraint::lagrangian::correction::registerPrecomputedConstraintCorrection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerUncoupledConstraintCorrection(). void sofa::component::constraint::lagrangian::correction::registerUncoupledConstraintCorrection ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ LinearSolverConstraintCorrection< Rigid3Types >. template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_CORRECTION_API sofa::component::constraint::lagrangian::correction::LinearSolverConstraintCorrection< Rigid3Types >. ◆ LinearSolverConstraintCorrection< Vec1Types >. template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_CORRECTION_API sofa::component::constraint::lagrangian::correction::LinearSolverConstraintCorrection< Vec1Types >. ◆ LinearSolverConstraintCorrection< Vec2Types >. template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_CORRECTION_API sofa::component::constraint::lagrangian::correction::LinearSolverConstraintCorrection< Vec2Types >. ◆ LinearSolverConstraintCorrection< Vec3Types >. template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_CORRECTION_API sofa::component::constraint::lagrangian::correction::LinearSolverConstraintCorrection< Vec3Types >. ◆ PrecomputedConstraintCorrection< Rigid3Types >. template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_CORRECTION_API so,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1lagrangian_1_1correction.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1lagrangian_1_1correction.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1lagrangian_1_1model.html:205,Modifiability,Variab,Variables,205,﻿. SOFA API: sofa::component::constraint::lagrangian::model Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions |; Variables . sofa::component::constraint::lagrangian::model Namespace Reference . Namespaces;  bilateralconstraintresolution;  . Classes; class  RigidImpl;  ; class  BilateralLagrangianConstraintSpecialization< RigidImpl >;  ; class  BilateralLagrangianConstraintSpecialization;  ; class  BilateralLagrangianConstraint;  ; class  FixedLagrangianConstraint;  ; class  SlidingLagrangianConstraint;  ; class  StopperLagrangianConstraintResolution1Dof;  ; class  StopperLagrangianConstraint;  ; class  UniformLagrangianConstraint;  ; class  UnilateralConstraintResolution;  ; class  PreviousForcesContainer;  ; class  UnilateralConstraintResolutionWithFriction;  ; class  UnilateralLagrangianConstraint;  . Typedefs; using BilateralLagrangianConstraint = BilateralLagrangianConstraint< T >;  ; using SlidingLagrangianConstraint = SlidingLagrangianConstraint< T >;  ; using StopperLagrangianConstraint = StopperLagrangianConstraint< T >;  ; using UniformLagrangianConstraint = UniformLagrangianConstraint< T >;  ; using UnilateralLagrangianConstraint = UnilateralLagrangianConstraint< T >;  . Functions; void registerBilateralLagrangianConstraint (sofa::core::ObjectFactory *factory);  ; void registerFixedLagrangianConstraint (sofa::core::ObjectFactory *factory);  ; void registerSlidingLagrangianConstraint (sofa::core::ObjectFactory *factory);  ; void registerStopperLagrangianConstraint (sofa::core::ObjectFactory *factory);  ; void registerUniformLagrangianConstraint (sofa::core::ObjectFactory *factory);  ; void registerUnilateralLagrangianConstraint (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAM,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1lagrangian_1_1model.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1lagrangian_1_1model.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1lagrangian_1_1model.html:2265,Modifiability,Variab,Variables,2265,"PORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  ; template<class DstV , class Free > ; void computeViolation (DstV &resV, unsigned int constraintIndex, const Free &free, size_t N, std::function< double(int i, int j)> f);  . Variables; template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_MODEL_API BilateralLagrangianConstraint< Vec3Types >;  ; template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_MODEL_API BilateralLagrangianConstraint< Rigid3Types >;  ; template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_MODEL_API FixedLagrangianConstraint< Vec6Types >;  ; template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_MODEL_API FixedLagrangianConstraint< Vec3Types >;  ; template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_MODEL_API FixedLagrangianConstraint< Vec2Types >;  ; template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_MODEL_API FixedLagrangianConstraint< Vec1Types >;  ; template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_MODEL_API FixedLagrangianConstraint< Rigid3Types >;  ; template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_MODEL_API SlidingLagrangianConstraint< Vec3Types >;  ; template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_MODEL_API StopperLagrangianConstraint< Vec1Types >;  ; template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_MODEL_API UnilateralLagrangianConstraint< Vec3Types >;  . Typedef Documentation. ◆ BilateralLagrangianConstraint. using sofa::component::constraint::lagrangian::model::BilateralLagrangianConstraint = typedef BilateralLagrangianConstraint<T>. ◆ SlidingLagrangianConstraint. template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_MODEL_API sofa::component::constraint::lagrangian::model::SlidingLagrangianConstraint< defaulttype::Vec3Types >. ◆ StopperLagrangianConstraint. template class SOFA_COMPONENT_CONSTRAINT_LAGRAN",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1lagrangian_1_1model.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1lagrangian_1_1model.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1lagrangian_1_1model.html:6247,Modifiability,Variab,Variable,6247,anConstraint(). void sofa::component::constraint::lagrangian::model::registerFixedLagrangianConstraint ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::constraint::lagrangian::model::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSlidingLagrangianConstraint(). void sofa::component::constraint::lagrangian::model::registerSlidingLagrangianConstraint ; (; sofa::core::ObjectFactory * ; factory). ◆ registerStopperLagrangianConstraint(). void sofa::component::constraint::lagrangian::model::registerStopperLagrangianConstraint ; (; sofa::core::ObjectFactory * ; factory). ◆ registerUniformLagrangianConstraint(). void sofa::component::constraint::lagrangian::model::registerUniformLagrangianConstraint ; (; sofa::core::ObjectFactory * ; factory). ◆ registerUnilateralLagrangianConstraint(). void sofa::component::constraint::lagrangian::model::registerUnilateralLagrangianConstraint ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ BilateralLagrangianConstraint< Rigid3Types >. template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_MODEL_API sofa::component::constraint::lagrangian::model::BilateralLagrangianConstraint< Rigid3Types >. ◆ BilateralLagrangianConstraint< Vec3Types >. template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_MODEL_API sofa::component::constraint::lagrangian::model::BilateralLagrangianConstraint< Vec3Types >. ◆ FixedLagrangianConstraint< Rigid3Types >. template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_MODEL_API sofa::component::constraint::lagrangian::model::FixedLagrangianConstraint< Rigid3Types >. ◆ FixedLagrangianConstraint< Vec1Types >. template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_MODEL_API sofa::component::constraint::lagrangian::model::FixedLagrangianConstraint< Vec1Types >. ◆ FixedLagrangianConstraint< Vec2Types >. template class SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_MODEL_API sofa::component::constraint::lagrangian::model::FixedLagrangianConstraint< Vec2Types >. ◆ F,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1lagrangian_1_1model.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1lagrangian_1_1model.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html:1894,Deployability,Patch,PatchTestMovementProjectiveConstraintInternalData,1894,n be overridden if needed for additional storage within template specializations. More...;  ; class  FixedProjectiveConstraint;  ; class  FixedRotationProjectiveConstraint;  ; class  FixedTranslationProjectiveConstraintInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  FixedTranslationProjectiveConstraint;  ; class  HermiteSplineProjectiveConstraint;  ; class  LinearMovementProjectiveConstraintInternalData;  ; class  LinearMovementProjectiveConstraint;  ; class  LinearVelocityProjectiveConstraint;  ; class  LineProjectiveConstraintInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  LineProjectiveConstraint;  ; class  OscillatorProjectiveConstraint;  ; class  ParabolicProjectiveConstraint;  ; class  PartialFixedProjectiveConstraint;  ; class  PartialLinearMovementProjectiveConstraintInternalData;  ; class  PartialLinearMovementProjectiveConstraint;  ; class  PatchTestMovementProjectiveConstraintInternalData;  ; class  PatchTestMovementProjectiveConstraint;  ; class  PlaneProjectiveConstraintInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  PlaneProjectiveConstraint;  ; class  PointProjectiveConstraintInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  PointProjectiveConstraint;  ; class  PositionBasedDynamicsProjectiveConstraintInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  PositionBasedDynamicsProjectiveConstraint;  ; struct  SkeletonJoint;  ; class  SkeletalMotionProjectiveConstraint;  . Typedefs; using AffineMovementProjectiveConstraint = AffineMovementProjectiveConstraint< T >;  ; using AttachProjectiveConstraint = AttachProjectiveConstraint< T >;  ; using FixedProjectiveConstra,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html:1955,Deployability,Patch,PatchTestMovementProjectiveConstraint,1955,n be overridden if needed for additional storage within template specializations. More...;  ; class  FixedProjectiveConstraint;  ; class  FixedRotationProjectiveConstraint;  ; class  FixedTranslationProjectiveConstraintInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  FixedTranslationProjectiveConstraint;  ; class  HermiteSplineProjectiveConstraint;  ; class  LinearMovementProjectiveConstraintInternalData;  ; class  LinearMovementProjectiveConstraint;  ; class  LinearVelocityProjectiveConstraint;  ; class  LineProjectiveConstraintInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  LineProjectiveConstraint;  ; class  OscillatorProjectiveConstraint;  ; class  ParabolicProjectiveConstraint;  ; class  PartialFixedProjectiveConstraint;  ; class  PartialLinearMovementProjectiveConstraintInternalData;  ; class  PartialLinearMovementProjectiveConstraint;  ; class  PatchTestMovementProjectiveConstraintInternalData;  ; class  PatchTestMovementProjectiveConstraint;  ; class  PlaneProjectiveConstraintInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  PlaneProjectiveConstraint;  ; class  PointProjectiveConstraintInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  PointProjectiveConstraint;  ; class  PositionBasedDynamicsProjectiveConstraintInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  PositionBasedDynamicsProjectiveConstraint;  ; struct  SkeletonJoint;  ; class  SkeletalMotionProjectiveConstraint;  . Typedefs; using AffineMovementProjectiveConstraint = AffineMovementProjectiveConstraint< T >;  ; using AttachProjectiveConstraint = AttachProjectiveConstraint< T >;  ; using FixedProjectiveConstra,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html:3771,Deployability,Patch,PatchTestMovementProjectiveConstraint,3771,plate specializations. More...;  ; class  PositionBasedDynamicsProjectiveConstraint;  ; struct  SkeletonJoint;  ; class  SkeletalMotionProjectiveConstraint;  . Typedefs; using AffineMovementProjectiveConstraint = AffineMovementProjectiveConstraint< T >;  ; using AttachProjectiveConstraint = AttachProjectiveConstraint< T >;  ; using FixedProjectiveConstraint = FixedProjectiveConstraint< T >;  ; using FixedPlaneProjectiveConstraint = FixedPlaneProjectiveConstraint< T >;  ; using FixedRotationProjectiveConstraint = FixedRotationProjectiveConstraint< T >;  ; using FixedTranslationProjectiveConstraint = FixedTranslationProjectiveConstraint< T >;  ; using HermiteSplineProjectiveConstraint = HermiteSplineProjectiveConstraint< T >;  ; using LinearMovementProjectiveConstraint = LinearMovementProjectiveConstraint< T >;  ; using LinearVelocityProjectiveConstraint = LinearVelocityProjectiveConstraint< T >;  ; using OscillatorProjectiveConstraint = OscillatorProjectiveConstraint< T >;  ; using ParabolicProjectiveConstraint = ParabolicProjectiveConstraint< T >;  ; using PartialFixedProjectiveConstraint = PartialFixedProjectiveConstraint< T >;  ; using PartialLinearMovementProjectiveConstraint = PartialLinearMovementProjectiveConstraint< T >;  ; using PatchTestMovementProjectiveConstraint = PatchTestMovementProjectiveConstraint< T >;  ; using PositionBasedDynamicsProjectiveConstraint = PositionBasedDynamicsProjectiveConstraint< T >;  ; using DirectionProjectiveConstraint = DirectionProjectiveConstraint< T >;  ; using LineProjectiveConstraint = LineProjectiveConstraint< T >;  ; using PlaneProjectiveConstraint = PlaneProjectiveConstraint< T >;  ; using PointProjectiveConstraint = PointProjectiveConstraint< T >;  ; using SkeletalMotionProjectiveConstraint = SkeletalMotionProjectiveConstraint< T >;  ; typedef int SkeletonBone;  . Functions; void registerAffineMovementProjectiveConstraint (sofa::core::ObjectFactory *factory);  ; void registerAttachProjectiveConstraint (sofa::core::Objec,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html:3811,Deployability,Patch,PatchTestMovementProjectiveConstraint,3811,plate specializations. More...;  ; class  PositionBasedDynamicsProjectiveConstraint;  ; struct  SkeletonJoint;  ; class  SkeletalMotionProjectiveConstraint;  . Typedefs; using AffineMovementProjectiveConstraint = AffineMovementProjectiveConstraint< T >;  ; using AttachProjectiveConstraint = AttachProjectiveConstraint< T >;  ; using FixedProjectiveConstraint = FixedProjectiveConstraint< T >;  ; using FixedPlaneProjectiveConstraint = FixedPlaneProjectiveConstraint< T >;  ; using FixedRotationProjectiveConstraint = FixedRotationProjectiveConstraint< T >;  ; using FixedTranslationProjectiveConstraint = FixedTranslationProjectiveConstraint< T >;  ; using HermiteSplineProjectiveConstraint = HermiteSplineProjectiveConstraint< T >;  ; using LinearMovementProjectiveConstraint = LinearMovementProjectiveConstraint< T >;  ; using LinearVelocityProjectiveConstraint = LinearVelocityProjectiveConstraint< T >;  ; using OscillatorProjectiveConstraint = OscillatorProjectiveConstraint< T >;  ; using ParabolicProjectiveConstraint = ParabolicProjectiveConstraint< T >;  ; using PartialFixedProjectiveConstraint = PartialFixedProjectiveConstraint< T >;  ; using PartialLinearMovementProjectiveConstraint = PartialLinearMovementProjectiveConstraint< T >;  ; using PatchTestMovementProjectiveConstraint = PatchTestMovementProjectiveConstraint< T >;  ; using PositionBasedDynamicsProjectiveConstraint = PositionBasedDynamicsProjectiveConstraint< T >;  ; using DirectionProjectiveConstraint = DirectionProjectiveConstraint< T >;  ; using LineProjectiveConstraint = LineProjectiveConstraint< T >;  ; using PlaneProjectiveConstraint = PlaneProjectiveConstraint< T >;  ; using PointProjectiveConstraint = PointProjectiveConstraint< T >;  ; using SkeletalMotionProjectiveConstraint = SkeletalMotionProjectiveConstraint< T >;  ; typedef int SkeletonBone;  . Functions; void registerAffineMovementProjectiveConstraint (sofa::core::ObjectFactory *factory);  ; void registerAttachProjectiveConstraint (sofa::core::Objec,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html:14221,Deployability,Patch,PatchTestMovementProjectiveConstraint,14221,straint::projective::LinearVelocityProjectiveConstraint< defaulttype::Rigid3Types >. ◆ LineProjectiveConstraint. template class SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API sofa::component::constraint::projective::LineProjectiveConstraint< defaulttype::Vec2Types >. ◆ OscillatorProjectiveConstraint. using sofa::component::constraint::projective::OscillatorProjectiveConstraint = typedef OscillatorProjectiveConstraint<T>. ◆ ParabolicProjectiveConstraint. using sofa::component::constraint::projective::ParabolicProjectiveConstraint = typedef ParabolicProjectiveConstraint<T>. ◆ PartialFixedProjectiveConstraint. template class SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API sofa::component::constraint::projective::PartialFixedProjectiveConstraint< defaulttype::Rigid2Types >. ◆ PartialLinearMovementProjectiveConstraint. template class SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API sofa::component::constraint::projective::PartialLinearMovementProjectiveConstraint< defaulttype::Rigid3Types >. ◆ PatchTestMovementProjectiveConstraint. template class SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API sofa::component::constraint::projective::PatchTestMovementProjectiveConstraint< defaulttype::Rigid3Types >. ◆ PlaneProjectiveConstraint. template class SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API sofa::component::constraint::projective::PlaneProjectiveConstraint< defaulttype::Vec2Types >. ◆ PointProjectiveConstraint. template class SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API sofa::component::constraint::projective::PointProjectiveConstraint< defaulttype::Vec6Types >. ◆ PositionBasedDynamicsProjectiveConstraint. template class SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API sofa::component::constraint::projective::PositionBasedDynamicsProjectiveConstraint< defaulttype::Rigid3Types >. ◆ SkeletalMotionProjectiveConstraint. template class SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API sofa::component::constraint::projective::SkeletalMotionProjectiveConstraint< defaulttype::Rigid3Types >. ◆ SkeletonBone. typedef int sofa::component::,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html:14357,Deployability,Patch,PatchTestMovementProjectiveConstraint,14357,nstraint. template class SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API sofa::component::constraint::projective::LineProjectiveConstraint< defaulttype::Vec2Types >. ◆ OscillatorProjectiveConstraint. using sofa::component::constraint::projective::OscillatorProjectiveConstraint = typedef OscillatorProjectiveConstraint<T>. ◆ ParabolicProjectiveConstraint. using sofa::component::constraint::projective::ParabolicProjectiveConstraint = typedef ParabolicProjectiveConstraint<T>. ◆ PartialFixedProjectiveConstraint. template class SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API sofa::component::constraint::projective::PartialFixedProjectiveConstraint< defaulttype::Rigid2Types >. ◆ PartialLinearMovementProjectiveConstraint. template class SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API sofa::component::constraint::projective::PartialLinearMovementProjectiveConstraint< defaulttype::Rigid3Types >. ◆ PatchTestMovementProjectiveConstraint. template class SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API sofa::component::constraint::projective::PatchTestMovementProjectiveConstraint< defaulttype::Rigid3Types >. ◆ PlaneProjectiveConstraint. template class SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API sofa::component::constraint::projective::PlaneProjectiveConstraint< defaulttype::Vec2Types >. ◆ PointProjectiveConstraint. template class SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API sofa::component::constraint::projective::PointProjectiveConstraint< defaulttype::Vec6Types >. ◆ PositionBasedDynamicsProjectiveConstraint. template class SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API sofa::component::constraint::projective::PositionBasedDynamicsProjectiveConstraint< defaulttype::Rigid3Types >. ◆ SkeletalMotionProjectiveConstraint. template class SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API sofa::component::constraint::projective::SkeletalMotionProjectiveConstraint< defaulttype::Rigid3Types >. ◆ SkeletonBone. typedef int sofa::component::constraint::projective::SkeletonBone. Function Documentation. ◆ getModuleName(). const char * sofa::co,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html:16833,Integrability,interface,interface,16833,ofa::type::Vec3f& sofa::component::constraint::projective::getVec ; (; const sofa::defaulttype::Rigid3fTypes::Coord & ; i). ◆ getVec() [4/10]. const sofa::type::Vec3f& sofa::component::constraint::projective::getVec ; (; const sofa::defaulttype::Rigid3fTypes::Deriv & ; i). ◆ getVec() [5/10]. const sofa::type::Vec6f & sofa::component::constraint::projective::getVec ; (; const sofa::defaulttype::Vec3dTypes::Deriv & ; i). ◆ getVec() [6/10]. sofa::type::Vec3d& sofa::component::constraint::projective::getVec ; (; sofa::defaulttype::Rigid3dTypes::Coord & ; i). ◆ getVec() [7/10]. sofa::type::Vec3d& sofa::component::constraint::projective::getVec ; (; sofa::defaulttype::Rigid3dTypes::Deriv & ; i). This function are there to provide kind of type translation to the vector one so we can implement the algorithm as is the different objects where of similar type. this solution is not really satisfactory but for the moment it does the job. A better solution would that all the used types are following the same interface which requires to touch core sofa classes. . ◆ getVec() [8/10]. sofa::type::Vec3f& sofa::component::constraint::projective::getVec ; (; sofa::defaulttype::Rigid3fTypes::Coord & ; i). ◆ getVec() [9/10]. sofa::type::Vec3f& sofa::component::constraint::projective::getVec ; (; sofa::defaulttype::Rigid3fTypes::Deriv & ; i). ◆ getVec() [10/10]. sofa::type::Vec6f & sofa::component::constraint::projective::getVec ; (; sofa::defaulttype::Vec3dTypes::Deriv & ; i). ◆ init(). SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API void sofa::component::constraint::projective::init ; (; ). ◆ initExternalModule(). void sofa::component::constraint::projective::initExternalModule ; (; ). ◆ registerAffineMovementProjectiveConstraint(). void sofa::component::constraint::projective::registerAffineMovementProjectiveConstraint ; (; sofa::core::ObjectFactory * ; factory). ◆ registerAttachProjectiveConstraint(). void sofa::component::constraint::projective::registerAttachProjectiveConstraint ; (; sofa::,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html:184,Modifiability,Variab,Variables,184,﻿. SOFA API: sofa::component::constraint::projective Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Functions |; Variables . sofa::component::constraint::projective Namespace Reference . Classes; class  AffineMovementProjectiveConstraintInternalData;  ; class  AffineMovementProjectiveConstraint;  ; class  AttachProjectiveConstraint;  ; class  DirectionProjectiveConstraintInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  DirectionProjectiveConstraint;  ; class  FixedPlaneProjectiveConstraintInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  FixedPlaneProjectiveConstraint;  ; class  FixedProjectiveConstraintInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  FixedProjectiveConstraint;  ; class  FixedRotationProjectiveConstraint;  ; class  FixedTranslationProjectiveConstraintInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  FixedTranslationProjectiveConstraint;  ; class  HermiteSplineProjectiveConstraint;  ; class  LinearMovementProjectiveConstraintInternalData;  ; class  LinearMovementProjectiveConstraint;  ; class  LinearVelocityProjectiveConstraint;  ; class  LineProjectiveConstraintInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  LineProjectiveConstraint;  ; class  OscillatorProjectiveConstraint;  ; class  ParabolicProjectiveConstraint;  ; class  PartialFixedProjectiveConstraint;  ; class  PartialLinearMovementProjectiveConstraintInternalData;  ; class  PartialLinearMovementProjectiveConstraint;  ; class  PatchTestMovementProjectiveConstraintInternalData;  ; class  PatchTestMovementProjectiveConstraint;  ; clas,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html:7199,Modifiability,Variab,Variables,7199,,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html:21181,Modifiability,Variab,Variable,21181,registerPartialLinearMovementProjectiveConstraint ; (; sofa::core::ObjectFactory * ; factory). ◆ registerPatchTestMovementProjectiveConstraint(). void sofa::component::constraint::projective::registerPatchTestMovementProjectiveConstraint ; (; sofa::core::ObjectFactory * ; factory). ◆ registerPlaneProjectiveConstraint(). void sofa::component::constraint::projective::registerPlaneProjectiveConstraint ; (; sofa::core::ObjectFactory * ; factory). ◆ registerPointProjectiveConstraint(). void sofa::component::constraint::projective::registerPointProjectiveConstraint ; (; sofa::core::ObjectFactory * ; factory). ◆ registerPositionBasedDynamicsProjectiveConstraint(). void sofa::component::constraint::projective::registerPositionBasedDynamicsProjectiveConstraint ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSkeletalMotionProjectiveConstraint(). void sofa::component::constraint::projective::registerSkeletalMotionProjectiveConstraint ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ AttachProjectiveConstraint< Rigid2Types >. template class SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API sofa::component::constraint::projective::AttachProjectiveConstraint< Rigid2Types >. ◆ AttachProjectiveConstraint< Rigid3Types >. template class SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API sofa::component::constraint::projective::AttachProjectiveConstraint< Rigid3Types >. ◆ AttachProjectiveConstraint< Vec1Types >. template class SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API sofa::component::constraint::projective::AttachProjectiveConstraint< Vec1Types >. ◆ AttachProjectiveConstraint< Vec2Types >. template class SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API sofa::component::constraint::projective::AttachProjectiveConstraint< Vec2Types >. ◆ AttachProjectiveConstraint< Vec3Types >. template class SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API sofa::component::constraint::projective::AttachProjectiveConstraint< Vec3Types >. ◆ DirectionProjectiveConstraint< Vec2Types >. template class SOFA_COMPONEN,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1controller.html:269,Integrability,Interface,Interface,269,﻿. SOFA API: sofa::component::controller Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::controller Namespace Reference . Classes; class  Controller;  Controller Class. Interface of user interaction on SOFA Components. Provides also an interface for BeginAnimation and EndAnimation events launched at the beginning and the end of a time step. More...;  ; class  MechanicalStateController;  MechanicalStateController Class. More...;  . Functions; void registerMechanicalStateController (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; template class SOFA_COMPONENT_CONTROLLER_API MechanicalStateController< Vec1Types >;  ; template class SOFA_COMPONENT_CONTROLLER_API MechanicalStateController< Rigid3Types >;  . Function Documentation. ◆ getModuleName(). const char * sofa::component::controller::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::controller::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_CONTROLLER_API void sofa::component::controller::init ; (; ). ◆ initExternalModule(). void sofa::component::controller::initExternalModule ; (; ). ◆ registerMechanicalStateController(). void sofa::component::controller::registerMechanicalStateController ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::controller::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MechanicalStateController< Rigid3Types >. template class SOFA_COMPONENT_CONTROLLER_API sofa::component::controller::MechanicalStateController< Rigid3Types >. ◆ MechanicalStateController< Vec1Types >. template class SOFA_COMPONENT_C,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1controller.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1controller.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1controller.html:336,Integrability,interface,interface,336,﻿. SOFA API: sofa::component::controller Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::controller Namespace Reference . Classes; class  Controller;  Controller Class. Interface of user interaction on SOFA Components. Provides also an interface for BeginAnimation and EndAnimation events launched at the beginning and the end of a time step. More...;  ; class  MechanicalStateController;  MechanicalStateController Class. More...;  . Functions; void registerMechanicalStateController (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; template class SOFA_COMPONENT_CONTROLLER_API MechanicalStateController< Vec1Types >;  ; template class SOFA_COMPONENT_CONTROLLER_API MechanicalStateController< Rigid3Types >;  . Function Documentation. ◆ getModuleName(). const char * sofa::component::controller::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::controller::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_CONTROLLER_API void sofa::component::controller::init ; (; ). ◆ initExternalModule(). void sofa::component::controller::initExternalModule ; (; ). ◆ registerMechanicalStateController(). void sofa::component::controller::registerMechanicalStateController ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::controller::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MechanicalStateController< Rigid3Types >. template class SOFA_COMPONENT_CONTROLLER_API sofa::component::controller::MechanicalStateController< Rigid3Types >. ◆ MechanicalStateController< Vec1Types >. template class SOFA_COMPONENT_C,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1controller.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1controller.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1controller.html:160,Modifiability,Variab,Variables,160,﻿. SOFA API: sofa::component::controller Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::controller Namespace Reference . Classes; class  Controller;  Controller Class. Interface of user interaction on SOFA Components. Provides also an interface for BeginAnimation and EndAnimation events launched at the beginning and the end of a time step. More...;  ; class  MechanicalStateController;  MechanicalStateController Class. More...;  . Functions; void registerMechanicalStateController (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; template class SOFA_COMPONENT_CONTROLLER_API MechanicalStateController< Vec1Types >;  ; template class SOFA_COMPONENT_CONTROLLER_API MechanicalStateController< Rigid3Types >;  . Function Documentation. ◆ getModuleName(). const char * sofa::component::controller::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::controller::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_CONTROLLER_API void sofa::component::controller::init ; (; ). ◆ initExternalModule(). void sofa::component::controller::initExternalModule ; (; ). ◆ registerMechanicalStateController(). void sofa::component::controller::registerMechanicalStateController ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::controller::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MechanicalStateController< Rigid3Types >. template class SOFA_COMPONENT_CONTROLLER_API sofa::component::controller::MechanicalStateController< Rigid3Types >. ◆ MechanicalStateController< Vec1Types >. template class SOFA_COMPONENT_C,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1controller.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1controller.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1controller.html:919,Modifiability,Variab,Variables,919, sofa::component::controller Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::controller Namespace Reference . Classes; class  Controller;  Controller Class. Interface of user interaction on SOFA Components. Provides also an interface for BeginAnimation and EndAnimation events launched at the beginning and the end of a time step. More...;  ; class  MechanicalStateController;  MechanicalStateController Class. More...;  . Functions; void registerMechanicalStateController (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; template class SOFA_COMPONENT_CONTROLLER_API MechanicalStateController< Vec1Types >;  ; template class SOFA_COMPONENT_CONTROLLER_API MechanicalStateController< Rigid3Types >;  . Function Documentation. ◆ getModuleName(). const char * sofa::component::controller::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::controller::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_CONTROLLER_API void sofa::component::controller::init ; (; ). ◆ initExternalModule(). void sofa::component::controller::initExternalModule ; (; ). ◆ registerMechanicalStateController(). void sofa::component::controller::registerMechanicalStateController ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::controller::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MechanicalStateController< Rigid3Types >. template class SOFA_COMPONENT_CONTROLLER_API sofa::component::controller::MechanicalStateController< Rigid3Types >. ◆ MechanicalStateController< Vec1Types >. template class SOFA_COMPONENT_CONTROLLER_AP,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1controller.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1controller.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1controller.html:1744,Modifiability,Variab,Variable,1744, sofa::component::controller Namespace Reference . Classes; class  Controller;  Controller Class. Interface of user interaction on SOFA Components. Provides also an interface for BeginAnimation and EndAnimation events launched at the beginning and the end of a time step. More...;  ; class  MechanicalStateController;  MechanicalStateController Class. More...;  . Functions; void registerMechanicalStateController (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; template class SOFA_COMPONENT_CONTROLLER_API MechanicalStateController< Vec1Types >;  ; template class SOFA_COMPONENT_CONTROLLER_API MechanicalStateController< Rigid3Types >;  . Function Documentation. ◆ getModuleName(). const char * sofa::component::controller::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::controller::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_CONTROLLER_API void sofa::component::controller::init ; (; ). ◆ initExternalModule(). void sofa::component::controller::initExternalModule ; (; ). ◆ registerMechanicalStateController(). void sofa::component::controller::registerMechanicalStateController ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::controller::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MechanicalStateController< Rigid3Types >. template class SOFA_COMPONENT_CONTROLLER_API sofa::component::controller::MechanicalStateController< Rigid3Types >. ◆ MechanicalStateController< Vec1Types >. template class SOFA_COMPONENT_CONTROLLER_API sofa::component::controller::MechanicalStateController< Vec1Types >. sofacomponentcontroller; Generated on Mon Nov 11 2024 02:38:14 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1controller.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1controller.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1diffusion.html:171,Modifiability,Variab,Variables,171,﻿. SOFA API: sofa::component::diffusion Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Functions |; Variables . sofa::component::diffusion Namespace Reference . Classes; class  TetrahedronDiffusionFEMForceField;  . Typedefs; typedef BaseMeshTopology::EdgesInTetrahedron EdgesInTetrahedron;  . Functions; void registerTetrahedronDiffusionFEMForceField (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; template class SOFA_COMPONENT_DIFFUSION_API TetrahedronDiffusionFEMForceField< Vec1Types >;  ; template class SOFA_COMPONENT_DIFFUSION_API TetrahedronDiffusionFEMForceField< Vec2Types >;  ; template class SOFA_COMPONENT_DIFFUSION_API TetrahedronDiffusionFEMForceField< Vec3Types >;  . Typedef Documentation. ◆ EdgesInTetrahedron. typedef BaseMeshTopology::EdgesInTetrahedron sofa::component::diffusion::EdgesInTetrahedron. Function Documentation. ◆ getModuleName(). const char * sofa::component::diffusion::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::diffusion::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_DIFFUSION_API void sofa::component::diffusion::init ; (; ). ◆ initExternalModule(). void sofa::component::diffusion::initExternalModule ; (; ). ◆ registerObjects(). void sofa::component::diffusion::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerTetrahedronDiffusionFEMForceField(). void sofa::component::diffusion::registerTetrahedronDiffusionFEMForceField ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ TetrahedronDiffusionFEMForceField< Vec1Types >. template class SOFA_COMPONENT_DIFFUSION_API sofa::component::diffusion::TetrahedronDiffusion,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1diffusion.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1diffusion.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1diffusion.html:756,Modifiability,Variab,Variables,756,﻿. SOFA API: sofa::component::diffusion Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Functions |; Variables . sofa::component::diffusion Namespace Reference . Classes; class  TetrahedronDiffusionFEMForceField;  . Typedefs; typedef BaseMeshTopology::EdgesInTetrahedron EdgesInTetrahedron;  . Functions; void registerTetrahedronDiffusionFEMForceField (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; template class SOFA_COMPONENT_DIFFUSION_API TetrahedronDiffusionFEMForceField< Vec1Types >;  ; template class SOFA_COMPONENT_DIFFUSION_API TetrahedronDiffusionFEMForceField< Vec2Types >;  ; template class SOFA_COMPONENT_DIFFUSION_API TetrahedronDiffusionFEMForceField< Vec3Types >;  . Typedef Documentation. ◆ EdgesInTetrahedron. typedef BaseMeshTopology::EdgesInTetrahedron sofa::component::diffusion::EdgesInTetrahedron. Function Documentation. ◆ getModuleName(). const char * sofa::component::diffusion::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::diffusion::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_DIFFUSION_API void sofa::component::diffusion::init ; (; ). ◆ initExternalModule(). void sofa::component::diffusion::initExternalModule ; (; ). ◆ registerObjects(). void sofa::component::diffusion::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerTetrahedronDiffusionFEMForceField(). void sofa::component::diffusion::registerTetrahedronDiffusionFEMForceField ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ TetrahedronDiffusionFEMForceField< Vec1Types >. template class SOFA_COMPONENT_DIFFUSION_API sofa::component::diffusion::TetrahedronDiffusion,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1diffusion.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1diffusion.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1diffusion.html:1835,Modifiability,Variab,Variable,1835,ry);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; template class SOFA_COMPONENT_DIFFUSION_API TetrahedronDiffusionFEMForceField< Vec1Types >;  ; template class SOFA_COMPONENT_DIFFUSION_API TetrahedronDiffusionFEMForceField< Vec2Types >;  ; template class SOFA_COMPONENT_DIFFUSION_API TetrahedronDiffusionFEMForceField< Vec3Types >;  . Typedef Documentation. ◆ EdgesInTetrahedron. typedef BaseMeshTopology::EdgesInTetrahedron sofa::component::diffusion::EdgesInTetrahedron. Function Documentation. ◆ getModuleName(). const char * sofa::component::diffusion::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::diffusion::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_DIFFUSION_API void sofa::component::diffusion::init ; (; ). ◆ initExternalModule(). void sofa::component::diffusion::initExternalModule ; (; ). ◆ registerObjects(). void sofa::component::diffusion::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerTetrahedronDiffusionFEMForceField(). void sofa::component::diffusion::registerTetrahedronDiffusionFEMForceField ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ TetrahedronDiffusionFEMForceField< Vec1Types >. template class SOFA_COMPONENT_DIFFUSION_API sofa::component::diffusion::TetrahedronDiffusionFEMForceField< Vec1Types >. ◆ TetrahedronDiffusionFEMForceField< Vec2Types >. template class SOFA_COMPONENT_DIFFUSION_API sofa::component::diffusion::TetrahedronDiffusionFEMForceField< Vec2Types >. ◆ TetrahedronDiffusionFEMForceField< Vec3Types >. template class SOFA_COMPONENT_DIFFUSION_API sofa::component::diffusion::TetrahedronDiffusionFEMForceField< Vec3Types >. sofacomponentdiffusion; Generated on Mon Nov 11 2024 02:38:14 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1diffusion.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1diffusion.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1analyze.html:165,Modifiability,Variab,Variables,165,"﻿. SOFA API: sofa::component::engine::analyze Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::engine::analyze Namespace Reference . Classes; class  AverageCoord;  ; class  ClusteringEngine;  ; class  DistancesInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  Distances;  ; class  HausdorffDistance;  ; class  ShapeMatching;  ; class  SumEngine;  . Functions; void registerAverageCoord (sofa::core::ObjectFactory *factory);  ; void registerClusteringEngine (sofa::core::ObjectFactory *factory);  ; void registerDistances (sofa::core::ObjectFactory *factory);  ; void registerHausdorffDistance (sofa::core::ObjectFactory *factory);  ; void registerShapeMatching (sofa::core::ObjectFactory *factory);  ; void registerSumEngine (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  ; template<class Real > ; const type::Vec< 3, Real > & center (const type::Vec< 3, Real > &c);  ; template<class _Real > ; type::Vec< 3, _Real > & center (type::Vec< 3, _Real > &c);  ; template<class Real > ; const type::Vec< 3, Real > & center (const defaulttype::RigidCoord< 3, Real > &c);  ; template<class Real > ; type::Vec< 3, Real > & center (defaulttype::RigidCoord< 3, Real > &c);  . Variables; template class SOFA_COMPONENT_ENGINE_ANALYZE_API AverageCoord< Vec2Types >;  ; template class SOFA_COMPONENT_ENGINE_ANALYZE_API AverageCoord< Rigid2Types >;  ; template class SOFA_COMPONENT_ENGINE_ANALYZE_API AverageCoord< Vec3Types >;  ; template class SOFA_COMPONENT_ENGINE_ANALYZE_API AverageCoord< Rigid3Types >;  ; template class SOFA_COMPONENT_ENGINE_ANALY",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1analyze.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1analyze.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1analyze.html:1628,Modifiability,Variab,Variables,1628," template<class Real > ; const type::Vec< 3, Real > & center (const type::Vec< 3, Real > &c);  ; template<class _Real > ; type::Vec< 3, _Real > & center (type::Vec< 3, _Real > &c);  ; template<class Real > ; const type::Vec< 3, Real > & center (const defaulttype::RigidCoord< 3, Real > &c);  ; template<class Real > ; type::Vec< 3, Real > & center (defaulttype::RigidCoord< 3, Real > &c);  . Variables; template class SOFA_COMPONENT_ENGINE_ANALYZE_API AverageCoord< Vec2Types >;  ; template class SOFA_COMPONENT_ENGINE_ANALYZE_API AverageCoord< Rigid2Types >;  ; template class SOFA_COMPONENT_ENGINE_ANALYZE_API AverageCoord< Vec3Types >;  ; template class SOFA_COMPONENT_ENGINE_ANALYZE_API AverageCoord< Rigid3Types >;  ; template class SOFA_COMPONENT_ENGINE_ANALYZE_API ClusteringEngine< Vec3Types >;  ; template class SOFA_COMPONENT_ENGINE_ANALYZE_API Distances< Vec3Types >;  ; template class SOFA_COMPONENT_ENGINE_ANALYZE_API HausdorffDistance< Vec1Types >;  ; template class SOFA_COMPONENT_ENGINE_ANALYZE_API HausdorffDistance< Vec2Types >;  ; template class SOFA_COMPONENT_ENGINE_ANALYZE_API HausdorffDistance< Vec3Types >;  ; template class SOFA_COMPONENT_ENGINE_ANALYZE_API HausdorffDistance< Rigid2Types >;  ; template class SOFA_COMPONENT_ENGINE_ANALYZE_API HausdorffDistance< Rigid3Types >;  ; template class SOFA_COMPONENT_ENGINE_ANALYZE_API ShapeMatching< Vec3Types >;  ; template class SOFA_COMPONENT_ENGINE_ANALYZE_API ShapeMatching< Rigid3Types >;  ; template class SOFA_COMPONENT_ENGINE_ANALYZE_API SumEngine< Vec1 >;  ; template class SOFA_COMPONENT_ENGINE_ANALYZE_API SumEngine< Vec3 >;  . Function Documentation. ◆ center() [1/4]. template<class Real > . const type::Vec<3,Real>& sofa::component::engine::analyze::center ; (; const defaulttype::RigidCoord< 3, Real > & ; c). inline . ◆ center() [2/4]. template<class Real > . const type::Vec<3,Real>& sofa::component::engine::analyze::center ; (; const type::Vec< 3, Real > & ; c). inline . ◆ center() [3/4]. template<class Real ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1analyze.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1analyze.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1analyze.html:4788,Modifiability,Variab,Variable,4788,dule(). void sofa::component::engine::analyze::initExternalModule ; (; ). ◆ registerAverageCoord(). void sofa::component::engine::analyze::registerAverageCoord ; (; sofa::core::ObjectFactory * ; factory). ◆ registerClusteringEngine(). void sofa::component::engine::analyze::registerClusteringEngine ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDistances(). void sofa::component::engine::analyze::registerDistances ; (; sofa::core::ObjectFactory * ; factory). ◆ registerHausdorffDistance(). void sofa::component::engine::analyze::registerHausdorffDistance ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::engine::analyze::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerShapeMatching(). void sofa::component::engine::analyze::registerShapeMatching ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSumEngine(). void sofa::component::engine::analyze::registerSumEngine ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ AverageCoord< Rigid2Types >. template class SOFA_COMPONENT_ENGINE_ANALYZE_API sofa::component::engine::analyze::AverageCoord< Rigid2Types >. ◆ AverageCoord< Rigid3Types >. template class SOFA_COMPONENT_ENGINE_ANALYZE_API sofa::component::engine::analyze::AverageCoord< Rigid3Types >. ◆ AverageCoord< Vec2Types >. template class SOFA_COMPONENT_ENGINE_ANALYZE_API sofa::component::engine::analyze::AverageCoord< Vec2Types >. ◆ AverageCoord< Vec3Types >. template class SOFA_COMPONENT_ENGINE_ANALYZE_API sofa::component::engine::analyze::AverageCoord< Vec3Types >. ◆ ClusteringEngine< Vec3Types >. template class SOFA_COMPONENT_ENGINE_ANALYZE_API sofa::component::engine::analyze::ClusteringEngine< Vec3Types >. ◆ Distances< Vec3Types >. template class SOFA_COMPONENT_ENGINE_ANALYZE_API sofa::component::engine::analyze::Distances< Vec3Types >. ◆ HausdorffDistance< Rigid2Types >. template class SOFA_COMPONENT_ENGINE_ANALYZE_API sofa::component::engine::analyze::HausdorffDistance< Rigid,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1analyze.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1analyze.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1generate.html:166,Modifiability,Variab,Variables,166,"﻿. SOFA API: sofa::component::engine::generate Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::engine::generate Namespace Reference . Classes; class  ExtrudeEdgesAndGenerateQuads;  ; class  ExtrudeQuadsAndGenerateHexas;  ; class  ExtrudeSurface;  ; class  GenerateCylinder;  ; class  GenerateGrid;  ; class  GenerateRigidMass;  ; class  GenerateSphere;  ; class  GroupFilterYoungModulus;  ; class  JoinPoints;  ; class  MergeMeshes;  ; class  MergePoints;  ; class  MergeSets;  ; class  MergeVectors;  ; class  MeshBarycentricMapperEngine;  ; class  MeshClosingEngine;  ; class  MeshTetraStuffing;  Create a tetrahedral volume mesh from a surface, using the algorithm from F. Labelle and J.R. Shewchuk, ""Isosurface Stuffing: Fast Tetrahedral Meshes with Good Dihedral Angles"", SIGGRAPH 2007. More...;  ; class  NormalsFromPoints;  ; class  NormEngine;  convert a vector of Vecs in a vector of their l-norms More...;  ; class  RandomPointDistributionInSurface;  ; class  Spiral;  . Functions; void registerExtrudeEdgesAndGenerateQuads (sofa::core::ObjectFactory *factory);  ; void registerExtrudeQuadsAndGenerateHexas (sofa::core::ObjectFactory *factory);  ; void registerExtrudeSurface (sofa::core::ObjectFactory *factory);  ; void registerGenerateCylinder (sofa::core::ObjectFactory *factory);  ; void registerGenerateGrid (sofa::core::ObjectFactory *factory);  ; void registerGenerateRigidMass (sofa::core::ObjectFactory *factory);  ; void registerGenerateSphere (sofa::core::ObjectFactory *factory);  ; void registerGroupFilterYoungModulus (sofa::core::ObjectFactory *factory);  ; void registerJoinPoints (sofa::core::ObjectFactory *factory);  ; void registerMergeMeshes (sofa::core::ObjectFactory *factory);  ; void registerMergePoints (sofa::core::ObjectFactory *factory);  ; void registerMergeSets (sofa::core::ObjectFactory *factory);  ; void registerMergeVectors (sofa::core::ObjectFactory *fa",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1generate.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1generate.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1generate.html:2816,Modifiability,Variab,Variables,2816,"initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; template class SOFA_COMPONENT_ENGINE_GENERATE_API ExtrudeEdgesAndGenerateQuads< Vec3Types >;  ; template class SOFA_COMPONENT_ENGINE_GENERATE_API ExtrudeQuadsAndGenerateHexas< Vec3Types >;  ; template class SOFA_COMPONENT_ENGINE_GENERATE_API ExtrudeSurface< Vec3Types >;  ; template class SOFA_COMPONENT_ENGINE_GENERATE_API GenerateCylinder< Vec3Types >;  ; template class SOFA_COMPONENT_ENGINE_GENERATE_API GenerateGrid< Vec3Types >;  ; template class SOFA_COMPONENT_ENGINE_GENERATE_API GenerateGrid< Vec2Types >;  ; template class SOFA_COMPONENT_ENGINE_GENERATE_API GenerateRigidMass< Rigid3Types, Rigid3Mass >;  ; template class SOFA_COMPONENT_ENGINE_GENERATE_API GenerateSphere< Vec3Types >;  ; const unsigned int adjacentVerticesToEdges [6][2] = {{2,3}, {1,3}, {1,2}, {0,3}, {0,2}, {0,1}};  ; template class SOFA_COMPONENT_ENGINE_GENERATE_API GroupFilterYoungModulus< Vec3Types >;  ; template class SOFA_COMPONENT_ENGINE_GENERATE_API JoinPoints< Vec3Types >;  ; template class SOFA_COMPONENT_ENGINE_GENERATE_API MergeSets< int >;  ; template class SOFA_COMPONENT_ENGINE_GENERATE_API MergeSets< unsigned int >;  ; template class SOFA_COMPONENT_ENGINE_GENERATE_API MeshBarycentricMapperEngine< Vec3Types >;  ; template class SOFA_COMPONENT_ENGINE_GENERATE_API NormalsFromPoints< Vec3Types >;  ; template class SOFA_COMPONENT_ENGINE_GENERATE_API RandomPointDistributionInSurface< Vec3Types >;  ; template class SOFA_COMPONENT_ENGINE_GENERATE_API Spiral< Vec3Types >;  . Function Documentation. ◆ getModuleName(). const char * sofa::component::engine::generate::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::engine::generate::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_ENGINE_GENERATE_API void ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1generate.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1generate.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1generate.html:7640,Modifiability,Variab,Variable,7640,"actory * ; factory). ◆ registerMeshClosingEngine(). void sofa::component::engine::generate::registerMeshClosingEngine ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMeshTetraStuffing(). void sofa::component::engine::generate::registerMeshTetraStuffing ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNormalsFromPoints(). void sofa::component::engine::generate::registerNormalsFromPoints ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNormEngine(). void sofa::component::engine::generate::registerNormEngine ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::engine::generate::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRandomPointDistributionInSurface(). void sofa::component::engine::generate::registerRandomPointDistributionInSurface ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSpiral(). void sofa::component::engine::generate::registerSpiral ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ adjacentVerticesToEdges. const unsigned int sofa::component::engine::generate::adjacentVerticesToEdges[6][2] = {{2,3}, {1,3}, {1,2}, {0,3}, {0,2}, {0,1}}. ◆ ExtrudeEdgesAndGenerateQuads< Vec3Types >. template class SOFA_COMPONENT_ENGINE_GENERATE_API sofa::component::engine::generate::ExtrudeEdgesAndGenerateQuads< Vec3Types >. ◆ ExtrudeQuadsAndGenerateHexas< Vec3Types >. template class SOFA_COMPONENT_ENGINE_GENERATE_API sofa::component::engine::generate::ExtrudeQuadsAndGenerateHexas< Vec3Types >. ◆ ExtrudeSurface< Vec3Types >. template class SOFA_COMPONENT_ENGINE_GENERATE_API sofa::component::engine::generate::ExtrudeSurface< Vec3Types >. ◆ GenerateCylinder< Vec3Types >. template class SOFA_COMPONENT_ENGINE_GENERATE_API sofa::component::engine::generate::GenerateCylinder< Vec3Types >. ◆ GenerateGrid< Vec2Types >. template class SOFA_COMPONENT_ENGINE_GENERATE_API sofa::component::engine::generate::GenerateGrid< Vec2Types >. ◆ GenerateGrid< Vec3Types >. template class SOFA_",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1generate.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1generate.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1select.html:178,Modifiability,Variab,Variables,178,"﻿. SOFA API: sofa::component::engine::select Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Functions |; Variables . sofa::component::engine::select Namespace Reference . Namespaces;  boxroi;  . Classes; class  BaseROI;  ; class  ComplementaryROI;  ; class  IndicesFromValues;  ; class  MergeROIs;  ; class  MeshBoundaryROI;  ; class  MeshROI;  ; class  MeshSampler;  ; class  MeshSplittingEngine;  ; class  MeshSubsetEngine;  ; class  NearestPointROI;  ; class  PairBoxROI;  ; class  PlaneROI;  ; class  PointsFromIndices;  ; class  ProximityROI;  ; class  SortingPair;  ; class  SelectConnectedLabelsROI;  ; class  SelectLabelROI;  ; class  SphereROI;  ; class  SubsetTopology;  ; class  ValuesFromIndices;  ; class  ValuesFromPositions;  . Functions; template<typename DataTypes , typename Element > ; constexpr auto getCenter (const Element &e, const typename DataTypes::VecCoord &positions) -> typename DataTypes::CPos;  ; template<typename DataTypes , typename Element > ; bool isElementInROI (const Element &e, const typename DataTypes::VecCoord &positions, const std::function< bool(const typename DataTypes::CPos &)> &isPointInROI);  ; template<typename DataTypes , typename Element > ; bool isElementInStrictROI (const Element &e, const typename DataTypes::VecCoord &positions, const std::function< bool(const typename DataTypes::CPos &)> &isPointInROI);  ; void registerBoxROI (sofa::core::ObjectFactory *factory);  ; void registerComplementaryROI (sofa::core::ObjectFactory *factory);  ; void registerIndicesFromValues (sofa::core::ObjectFactory *factory);  ; void registerMergeROIs (sofa::core::ObjectFactory *factory);  ; void registerMeshBoundaryROI (sofa::core::ObjectFactory *factory);  ; void registerMeshROI (sofa::core::ObjectFactory *factory);  ; void registerMeshSampler (sofa::core::ObjectFactory *factory);  ; void registerMeshSplittingEngine (sofa::core::ObjectFactory *factory);  ; void registerMeshSub",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1select.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1select.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1select.html:3925,Modifiability,Variab,Variables,3925,,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1select.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1select.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1select.html:11653,Modifiability,Variab,Variable,11653,:ObjectFactory * ; factory). ◆ registerProximityROI(). void sofa::component::engine::select::registerProximityROI ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSelectConnectedLabelsROI(). void sofa::component::engine::select::registerSelectConnectedLabelsROI ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSelectLabelROI(). void sofa::component::engine::select::registerSelectLabelROI ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSphereROI(). void sofa::component::engine::select::registerSphereROI ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSubsetTopology(). void sofa::component::engine::select::registerSubsetTopology ; (; sofa::core::ObjectFactory * ; factory). ◆ registerValuesFromIndices(). void sofa::component::engine::select::registerValuesFromIndices ; (; sofa::core::ObjectFactory * ; factory). ◆ registerValuesFromPositions(). void sofa::component::engine::select::registerValuesFromPositions ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ ComplementaryROI< Vec3Types >. template class SOFA_COMPONENT_ENGINE_SELECT_API sofa::component::engine::select::ComplementaryROI< Vec3Types >. ◆ IndicesFromValues< int >. template class SOFA_COMPONENT_ENGINE_SELECT_API sofa::component::engine::select::IndicesFromValues< int >. ◆ IndicesFromValues< SReal >. template class SOFA_COMPONENT_ENGINE_SELECT_API sofa::component::engine::select::IndicesFromValues< SReal >. ◆ IndicesFromValues< unsigned int >. template class SOFA_COMPONENT_ENGINE_SELECT_API sofa::component::engine::select::IndicesFromValues< unsigned int >. ◆ MeshROI< Rigid3Types >. template class SOFA_COMPONENT_ENGINE_SELECT_API sofa::component::engine::select::MeshROI< Rigid3Types >. ◆ MeshROI< Vec3Types >. template class SOFA_COMPONENT_ENGINE_SELECT_API sofa::component::engine::select::MeshROI< Vec3Types >. ◆ MeshROI< Vec6Types >. template class SOFA_COMPONENT_ENGINE_SELECT_API sofa::component::engine::select::MeshROI< Vec6Types >. ◆ MeshSampler< Vec3Types >. te,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1select.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1select.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1select_1_1boxroi.html:159,Modifiability,Variab,Variables,159,﻿. SOFA API: sofa::component::engine::select::boxroi Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Variables . sofa::component::engine::select::boxroi Namespace Reference . Classes; class  BoxROI;  . Variables; template class SOFA_COMPONENT_ENGINE_SELECT_API BoxROI< Vec3Types >;  ; template class SOFA_COMPONENT_ENGINE_SELECT_API BoxROI< Vec2Types >;  ; template class SOFA_COMPONENT_ENGINE_SELECT_API BoxROI< Vec1Types >;  ; template class SOFA_COMPONENT_ENGINE_SELECT_API BoxROI< Rigid3Types >;  ; template class SOFA_COMPONENT_ENGINE_SELECT_API BoxROI< Vec6Types >;  . Variable Documentation. ◆ BoxROI< Rigid3Types >. template class SOFA_COMPONENT_ENGINE_SELECT_API sofa::component::engine::select::boxroi::BoxROI< Rigid3Types >. ◆ BoxROI< Vec1Types >. template class SOFA_COMPONENT_ENGINE_SELECT_API sofa::component::engine::select::boxroi::BoxROI< Vec1Types >. ◆ BoxROI< Vec2Types >. template class SOFA_COMPONENT_ENGINE_SELECT_API sofa::component::engine::select::boxroi::BoxROI< Vec2Types >. ◆ BoxROI< Vec3Types >. template class SOFA_COMPONENT_ENGINE_SELECT_API sofa::component::engine::select::boxroi::BoxROI< Vec3Types >. ◆ BoxROI< Vec6Types >. template class SOFA_COMPONENT_ENGINE_SELECT_API sofa::component::engine::select::boxroi::BoxROI< Vec6Types >. sofacomponentengineselectboxroi; Generated on Mon Nov 11 2024 02:42:39 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1select_1_1boxroi.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1select_1_1boxroi.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1select_1_1boxroi.html:260,Modifiability,Variab,Variables,260,﻿. SOFA API: sofa::component::engine::select::boxroi Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Variables . sofa::component::engine::select::boxroi Namespace Reference . Classes; class  BoxROI;  . Variables; template class SOFA_COMPONENT_ENGINE_SELECT_API BoxROI< Vec3Types >;  ; template class SOFA_COMPONENT_ENGINE_SELECT_API BoxROI< Vec2Types >;  ; template class SOFA_COMPONENT_ENGINE_SELECT_API BoxROI< Vec1Types >;  ; template class SOFA_COMPONENT_ENGINE_SELECT_API BoxROI< Rigid3Types >;  ; template class SOFA_COMPONENT_ENGINE_SELECT_API BoxROI< Vec6Types >;  . Variable Documentation. ◆ BoxROI< Rigid3Types >. template class SOFA_COMPONENT_ENGINE_SELECT_API sofa::component::engine::select::boxroi::BoxROI< Rigid3Types >. ◆ BoxROI< Vec1Types >. template class SOFA_COMPONENT_ENGINE_SELECT_API sofa::component::engine::select::boxroi::BoxROI< Vec1Types >. ◆ BoxROI< Vec2Types >. template class SOFA_COMPONENT_ENGINE_SELECT_API sofa::component::engine::select::boxroi::BoxROI< Vec2Types >. ◆ BoxROI< Vec3Types >. template class SOFA_COMPONENT_ENGINE_SELECT_API sofa::component::engine::select::boxroi::BoxROI< Vec3Types >. ◆ BoxROI< Vec6Types >. template class SOFA_COMPONENT_ENGINE_SELECT_API sofa::component::engine::select::boxroi::BoxROI< Vec6Types >. sofacomponentengineselectboxroi; Generated on Mon Nov 11 2024 02:42:39 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1select_1_1boxroi.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1select_1_1boxroi.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1select_1_1boxroi.html:633,Modifiability,Variab,Variable,633,﻿. SOFA API: sofa::component::engine::select::boxroi Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Variables . sofa::component::engine::select::boxroi Namespace Reference . Classes; class  BoxROI;  . Variables; template class SOFA_COMPONENT_ENGINE_SELECT_API BoxROI< Vec3Types >;  ; template class SOFA_COMPONENT_ENGINE_SELECT_API BoxROI< Vec2Types >;  ; template class SOFA_COMPONENT_ENGINE_SELECT_API BoxROI< Vec1Types >;  ; template class SOFA_COMPONENT_ENGINE_SELECT_API BoxROI< Rigid3Types >;  ; template class SOFA_COMPONENT_ENGINE_SELECT_API BoxROI< Vec6Types >;  . Variable Documentation. ◆ BoxROI< Rigid3Types >. template class SOFA_COMPONENT_ENGINE_SELECT_API sofa::component::engine::select::boxroi::BoxROI< Rigid3Types >. ◆ BoxROI< Vec1Types >. template class SOFA_COMPONENT_ENGINE_SELECT_API sofa::component::engine::select::boxroi::BoxROI< Vec1Types >. ◆ BoxROI< Vec2Types >. template class SOFA_COMPONENT_ENGINE_SELECT_API sofa::component::engine::select::boxroi::BoxROI< Vec2Types >. ◆ BoxROI< Vec3Types >. template class SOFA_COMPONENT_ENGINE_SELECT_API sofa::component::engine::select::boxroi::BoxROI< Vec3Types >. ◆ BoxROI< Vec6Types >. template class SOFA_COMPONENT_ENGINE_SELECT_API sofa::component::engine::select::boxroi::BoxROI< Vec6Types >. sofacomponentengineselectboxroi; Generated on Mon Nov 11 2024 02:42:39 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1select_1_1boxroi.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1select_1_1boxroi.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1transform.html:167,Modifiability,Variab,Variables,167,"﻿. SOFA API: sofa::component::engine::transform Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::engine::transform Namespace Reference . Classes; class  DifferenceEngine;  ; class  DilateEngine;  ; class  DisplacementTransformEngine;  ; class  DisplacementMatrixEngine;  ; class  IndexValueMapper;  ; class  Indices2ValuesMapper;  ; class  MapIndices;  ; class  MathOp;  ; struct  MathOpAdd;  ; struct  MathOpSub;  ; struct  MathOpMul;  ; struct  MathOpDiv;  ; struct  MathOpMin;  ; struct  MathOpMax;  ; struct  MathOpNot;  ; struct  MathOpAnd;  ; struct  MathOpOr;  ; struct  MathOpXor;  ; struct  MathOpNAnd;  ; struct  MathOpNOr;  ; struct  MathOpXNor;  ; struct  MathOpTraits;  ; struct  MathOpTraitsReal;  Real-like ops. More...;  ; class  MathOpTraits< int >;  ; class  MathOpTraits< float >;  ; class  MathOpTraits< double >;  ; struct  MathOpTraitsVecReal;  Real-like ops. More...;  ; class  MathOpTraits< type::Vec< N, Real > >;  ; struct  MathOpTraitsBool;  Bool-like ops. More...;  ; class  MathOpTraits< bool >;  ; struct  MathOpNames;  ; struct  MathOpNames< std::pair< TOps1, TOps2 > >;  ; struct  MathOpApply;  ; struct  MathOpApply< std::pair< TOps1, TOps2 > >;  ; class  ProjectiveTransformEngine;  ; class  QuatToRigidEngine;  ; class  RigidToQuatEngine;  ; class  ROIValueMapper;  ; class  SmoothMeshEngine;  ; class  TransformEngine;  ; struct  TransformOperation;  ; struct  Scale;  ; struct  RotationSpecialized;  ; struct  RotationSpecialized< DataTypes, 2, false >;  ; struct  RotationSpecialized< DataTypes, 3, false >;  ; struct  Rotation;  ; struct  Translation;  ; struct  Transform;  ; class  AbstractTransformMatrixEngine;  ; class  InvertTransformMatrixEngine;  ; class  TranslateTransformMatrixEngine;  ; class  RotateTransformMatrixEngine;  ; class  ScaleTransformMatrixEngine;  ; class  TransformPosition;  ; class  Vertex2Frame;  . Functions; void registerDifference",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1transform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1transform.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1transform.html:3745,Modifiability,Variab,Variables,3745,"rixEngine (sofa::core::ObjectFactory *factory);  ; void registerTransformPosition (sofa::core::ObjectFactory *factory);  ; void registerVertex2Frame (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; template class SOFA_COMPONENT_ENGINE_TRANSFORM_API DifferenceEngine< Vec1 >;  ; template class SOFA_COMPONENT_ENGINE_TRANSFORM_API DifferenceEngine< Vec3 >;  ; template class SOFA_COMPONENT_ENGINE_TRANSFORM_API DilateEngine< Vec3Types >;  ; template class SOFA_COMPONENT_ENGINE_TRANSFORM_API DisplacementTransformEngine< Rigid3Types, Mat4x4 >;  ; template class SOFA_COMPONENT_ENGINE_TRANSFORM_API DisplacementMatrixEngine< Rigid3Types >;  ; template class SOFA_COMPONENT_ENGINE_TRANSFORM_API IndexValueMapper< Vec3Types >;  ; template class SOFA_COMPONENT_ENGINE_TRANSFORM_API Indices2ValuesMapper< Vec3Types >;  ; template class SOFA_COMPONENT_ENGINE_TRANSFORM_API MapIndices< int >;  ; template class SOFA_COMPONENT_ENGINE_TRANSFORM_API MapIndices< unsigned int >;  ; template class SOFA_COMPONENT_ENGINE_TRANSFORM_API SmoothMeshEngine< Vec3Types >;  ; template class SOFA_COMPONENT_ENGINE_TRANSFORM_API TransformPosition< Vec3Types >;  ; template class SOFA_COMPONENT_ENGINE_TRANSFORM_API Vertex2Frame< Rigid3Types >;  . Function Documentation. ◆ getModuleName(). const char * sofa::component::engine::transform::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::engine::transform::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_ENGINE_TRANSFORM_API void sofa::component::engine::transform::init ; (; ). ◆ initExternalModule(). void sofa::component::engine::transform::initExternalModule ; (; ). ◆ registerDifferenceEngine(). void sofa::component::engine::transform::register",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1transform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1transform.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1transform.html:8234,Modifiability,Variab,Variable,8234,"t::engine::transform::registerRotateTransformMatrixEngine ; (; sofa::core::ObjectFactory * ; factory). ◆ registerScaleTransformMatrixEngine(). void sofa::component::engine::transform::registerScaleTransformMatrixEngine ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSmoothMeshEngine(). void sofa::component::engine::transform::registerSmoothMeshEngine ; (; sofa::core::ObjectFactory * ; factory). ◆ registerTransformEngine(). void sofa::component::engine::transform::registerTransformEngine ; (; sofa::core::ObjectFactory * ; factory). ◆ registerTransformPosition(). void sofa::component::engine::transform::registerTransformPosition ; (; sofa::core::ObjectFactory * ; factory). ◆ registerTranslateTransformMatrixEngine(). void sofa::component::engine::transform::registerTranslateTransformMatrixEngine ; (; sofa::core::ObjectFactory * ; factory). ◆ registerVertex2Frame(). void sofa::component::engine::transform::registerVertex2Frame ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ DifferenceEngine< Vec1 >. template class SOFA_COMPONENT_ENGINE_TRANSFORM_API sofa::component::engine::transform::DifferenceEngine< Vec1 >. ◆ DifferenceEngine< Vec3 >. template class SOFA_COMPONENT_ENGINE_TRANSFORM_API sofa::component::engine::transform::DifferenceEngine< Vec3 >. ◆ DilateEngine< Vec3Types >. template class SOFA_COMPONENT_ENGINE_TRANSFORM_API sofa::component::engine::transform::DilateEngine< Vec3Types >. ◆ DisplacementMatrixEngine< Rigid3Types >. template class SOFA_COMPONENT_ENGINE_TRANSFORM_API sofa::component::engine::transform::DisplacementMatrixEngine< Rigid3Types >. ◆ DisplacementTransformEngine< Rigid3Types, Mat4x4 >. template class SOFA_COMPONENT_ENGINE_TRANSFORM_API sofa::component::engine::transform::DisplacementTransformEngine< Rigid3Types, Mat4x4 >. ◆ IndexValueMapper< Vec3Types >. template class SOFA_COMPONENT_ENGINE_TRANSFORM_API sofa::component::engine::transform::IndexValueMapper< Vec3Types >. ◆ Indices2ValuesMapper< Vec3Types >. template c",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1transform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1engine_1_1transform.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1haptics.html:409,Usability,feedback,feedback,409,﻿. SOFA API: sofa::component::haptics Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::haptics Namespace Reference . Classes; class  ForceFeedback;  Base class implementing forcefeedback as a force field. More...;  ; class  LCPForceFeedback;  ; class  MechanicalStateForceFeedback;  ; class  NullForceFeedback;  Null force feedback for haptic feedback device. More...;  ; class  NullForceFeedbackT;  Null force feedback for haptic feedback device. More...;  . Functions; void registerLCPForceFeedback (sofa::core::ObjectFactory *factory);  ; void registerNullForceFeedback (sofa::core::ObjectFactory *factory);  ; void registerNullForceFeedbackT (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::haptics::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::haptics::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_HAPTICS_API void sofa::component::haptics::init ; (; ). ◆ initExternalModule(). void sofa::component::haptics::initExternalModule ; (; ). ◆ registerLCPForceFeedback(). void sofa::component::haptics::registerLCPForceFeedback ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNullForceFeedback(). void sofa::component::haptics::registerNullForceFeedback ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNullForceFeedbackT(). void sofa::component::haptics::registerNullForceFeedbackT ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::haptics::registerObjects ; (; sofa::core::ObjectFactory * ; factory). sofacomponenthaptics; Generated on Mon Nov 11 2024 02:46:05 for SOFA A,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1haptics.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1haptics.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1haptics.html:429,Usability,feedback,feedback,429,﻿. SOFA API: sofa::component::haptics Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::haptics Namespace Reference . Classes; class  ForceFeedback;  Base class implementing forcefeedback as a force field. More...;  ; class  LCPForceFeedback;  ; class  MechanicalStateForceFeedback;  ; class  NullForceFeedback;  Null force feedback for haptic feedback device. More...;  ; class  NullForceFeedbackT;  Null force feedback for haptic feedback device. More...;  . Functions; void registerLCPForceFeedback (sofa::core::ObjectFactory *factory);  ; void registerNullForceFeedback (sofa::core::ObjectFactory *factory);  ; void registerNullForceFeedbackT (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::haptics::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::haptics::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_HAPTICS_API void sofa::component::haptics::init ; (; ). ◆ initExternalModule(). void sofa::component::haptics::initExternalModule ; (; ). ◆ registerLCPForceFeedback(). void sofa::component::haptics::registerLCPForceFeedback ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNullForceFeedback(). void sofa::component::haptics::registerNullForceFeedback ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNullForceFeedbackT(). void sofa::component::haptics::registerNullForceFeedbackT ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::haptics::registerObjects ; (; sofa::core::ObjectFactory * ; factory). sofacomponenthaptics; Generated on Mon Nov 11 2024 02:46:05 for SOFA A,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1haptics.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1haptics.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1haptics.html:497,Usability,feedback,feedback,497,﻿. SOFA API: sofa::component::haptics Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::haptics Namespace Reference . Classes; class  ForceFeedback;  Base class implementing forcefeedback as a force field. More...;  ; class  LCPForceFeedback;  ; class  MechanicalStateForceFeedback;  ; class  NullForceFeedback;  Null force feedback for haptic feedback device. More...;  ; class  NullForceFeedbackT;  Null force feedback for haptic feedback device. More...;  . Functions; void registerLCPForceFeedback (sofa::core::ObjectFactory *factory);  ; void registerNullForceFeedback (sofa::core::ObjectFactory *factory);  ; void registerNullForceFeedbackT (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::haptics::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::haptics::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_HAPTICS_API void sofa::component::haptics::init ; (; ). ◆ initExternalModule(). void sofa::component::haptics::initExternalModule ; (; ). ◆ registerLCPForceFeedback(). void sofa::component::haptics::registerLCPForceFeedback ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNullForceFeedback(). void sofa::component::haptics::registerNullForceFeedback ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNullForceFeedbackT(). void sofa::component::haptics::registerNullForceFeedbackT ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::haptics::registerObjects ; (; sofa::core::ObjectFactory * ; factory). sofacomponenthaptics; Generated on Mon Nov 11 2024 02:46:05 for SOFA A,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1haptics.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1haptics.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1haptics.html:517,Usability,feedback,feedback,517,﻿. SOFA API: sofa::component::haptics Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::haptics Namespace Reference . Classes; class  ForceFeedback;  Base class implementing forcefeedback as a force field. More...;  ; class  LCPForceFeedback;  ; class  MechanicalStateForceFeedback;  ; class  NullForceFeedback;  Null force feedback for haptic feedback device. More...;  ; class  NullForceFeedbackT;  Null force feedback for haptic feedback device. More...;  . Functions; void registerLCPForceFeedback (sofa::core::ObjectFactory *factory);  ; void registerNullForceFeedback (sofa::core::ObjectFactory *factory);  ; void registerNullForceFeedbackT (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::haptics::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::haptics::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_HAPTICS_API void sofa::component::haptics::init ; (; ). ◆ initExternalModule(). void sofa::component::haptics::initExternalModule ; (; ). ◆ registerLCPForceFeedback(). void sofa::component::haptics::registerLCPForceFeedback ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNullForceFeedback(). void sofa::component::haptics::registerNullForceFeedback ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNullForceFeedbackT(). void sofa::component::haptics::registerNullForceFeedbackT ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::haptics::registerObjects ; (; sofa::core::ObjectFactory * ; factory). sofacomponenthaptics; Generated on Mon Nov 11 2024 02:46:05 for SOFA A,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1haptics.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1haptics.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver.html:176,Modifiability,Variab,Variables,176,"﻿. SOFA API: sofa::component::linearsolver Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Functions |; Variables . sofa::component::linearsolver Namespace Reference . Namespaces;  direct;  ;  iterative;  ;  ordering;  ;  preconditioner;  . Classes; class  MultExpr;  ; class  GraphScatteredMatrix;  ; class  GraphScatteredVector;  ; class  MatrixInvertData;  ; class  BaseMatrixLinearSolver;  ; class  NoThreadManager;  Empty class used for default solver implementation without multi-threading support. More...;  ; class  MatrixLinearSolverInternalData;  ; class  MatrixLinearSolver;  ; class  MatrixLinearSolver< Matrix, Vector, NoThreadManager >;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  ; template<typename Derived , typename OtherDerived > ; const Eigen::SparseDenseProductReturnType_MT< Derived, OtherDerived >::Type mul_EigenSparseDenseMatrix_MT (const Eigen::SparseMatrixBase< Derived > &lhs, const Eigen::MatrixBase< OtherDerived > &rhs, unsigned nbThreads=OMP_DEFAULT_NUM_THREADS_EIGEN_SPARSE_DENSE_PRODUCT);  Eigen::Sparse * Dense Matrices multiplication (openmp multi-threaded version) More...;  . Variables; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MatrixLinearSolver< GraphScatteredMatrix, GraphScatteredVector, NoThreadManager >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MatrixLinearSolver< FullMatrix< SReal >, FullVector< SReal >, NoThreadManager >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MatrixLinearSolver< SparseMatrix< SReal >, FullVector< SReal >, NoThreadManager >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MatrixLinearSolver< CompressedRowSparseMatrix< SReal >, Ful",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver.html:1447,Modifiability,Variab,Variables,1447,"Objects (sofa::core::ObjectFactory *factory);  ; void init ();  ; template<typename Derived , typename OtherDerived > ; const Eigen::SparseDenseProductReturnType_MT< Derived, OtherDerived >::Type mul_EigenSparseDenseMatrix_MT (const Eigen::SparseMatrixBase< Derived > &lhs, const Eigen::MatrixBase< OtherDerived > &rhs, unsigned nbThreads=OMP_DEFAULT_NUM_THREADS_EIGEN_SPARSE_DENSE_PRODUCT);  Eigen::Sparse * Dense Matrices multiplication (openmp multi-threaded version) More...;  . Variables; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MatrixLinearSolver< GraphScatteredMatrix, GraphScatteredVector, NoThreadManager >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MatrixLinearSolver< FullMatrix< SReal >, FullVector< SReal >, NoThreadManager >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MatrixLinearSolver< SparseMatrix< SReal >, FullVector< SReal >, NoThreadManager >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MatrixLinearSolver< CompressedRowSparseMatrix< SReal >, FullVector< SReal >, NoThreadManager >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MatrixLinearSolver< DiagonalMatrix< SReal >, FullVector< SReal >, NoThreadManager >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MatrixLinearSolver< BlockDiagonalMatrix< 3, SReal >, FullVector< SReal >, NoThreadManager >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MatrixLinearSolver< RotationMatrix< SReal >, FullVector< SReal >, NoThreadManager >;  . Function Documentation. ◆ getModuleName(). const char * sofa::component::linearsolver::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::linearsolver::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_LINEARSOLVER_API void sofa::component::linearsolver::init ; (; ). ◆ initExternalModule(). void sofa::component::linearsolver::initExternalModule ; (; ). ◆ mul_EigenSparseDenseMatrix_MT(). template<typename Derived , typename OtherDerived > . const Eigen::S",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver.html:3479,Modifiability,Variab,Variable,3479,"on Documentation. ◆ getModuleName(). const char * sofa::component::linearsolver::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::linearsolver::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_LINEARSOLVER_API void sofa::component::linearsolver::init ; (; ). ◆ initExternalModule(). void sofa::component::linearsolver::initExternalModule ; (; ). ◆ mul_EigenSparseDenseMatrix_MT(). template<typename Derived , typename OtherDerived > . const Eigen::SparseDenseProductReturnType_MT<Derived,OtherDerived>::Type sofa::component::linearsolver::mul_EigenSparseDenseMatrix_MT ; (; const Eigen::SparseMatrixBase< Derived > & ; lhs, . const Eigen::MatrixBase< OtherDerived > & ; rhs, . unsigned ; nbThreads = OMP_DEFAULT_NUM_THREADS_EIGEN_SPARSE_DENSE_PRODUCT . ). inline . Eigen::Sparse * Dense Matrices multiplication (openmp multi-threaded version) . ◆ registerObjects(). void sofa::component::linearsolver::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MatrixLinearSolver< BlockDiagonalMatrix< 3, SReal >, FullVector< SReal >, NoThreadManager >. template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API sofa::component::linearsolver::MatrixLinearSolver< BlockDiagonalMatrix< 3, SReal >, FullVector< SReal >, NoThreadManager >. ◆ MatrixLinearSolver< CompressedRowSparseMatrix< SReal >, FullVector< SReal >, NoThreadManager >. template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API sofa::component::linearsolver::MatrixLinearSolver< CompressedRowSparseMatrix< SReal >, FullVector< SReal >, NoThreadManager >. ◆ MatrixLinearSolver< DiagonalMatrix< SReal >, FullVector< SReal >, NoThreadManager >. template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API sofa::component::linearsolver::MatrixLinearSolver< DiagonalMatrix< SReal >, FullVector< SReal >, NoThreadManager >. ◆ MatrixLinearSolver< FullMatrix< SReal >, FullVector< SReal >, NoThreadManager >. template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API sofa::component::linearsolver",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver.html:552,Performance,multi-thread,multi-threading,552,"﻿. SOFA API: sofa::component::linearsolver Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Functions |; Variables . sofa::component::linearsolver Namespace Reference . Namespaces;  direct;  ;  iterative;  ;  ordering;  ;  preconditioner;  . Classes; class  MultExpr;  ; class  GraphScatteredMatrix;  ; class  GraphScatteredVector;  ; class  MatrixInvertData;  ; class  BaseMatrixLinearSolver;  ; class  NoThreadManager;  Empty class used for default solver implementation without multi-threading support. More...;  ; class  MatrixLinearSolverInternalData;  ; class  MatrixLinearSolver;  ; class  MatrixLinearSolver< Matrix, Vector, NoThreadManager >;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  ; template<typename Derived , typename OtherDerived > ; const Eigen::SparseDenseProductReturnType_MT< Derived, OtherDerived >::Type mul_EigenSparseDenseMatrix_MT (const Eigen::SparseMatrixBase< Derived > &lhs, const Eigen::MatrixBase< OtherDerived > &rhs, unsigned nbThreads=OMP_DEFAULT_NUM_THREADS_EIGEN_SPARSE_DENSE_PRODUCT);  Eigen::Sparse * Dense Matrices multiplication (openmp multi-threaded version) More...;  . Variables; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MatrixLinearSolver< GraphScatteredMatrix, GraphScatteredVector, NoThreadManager >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MatrixLinearSolver< FullMatrix< SReal >, FullVector< SReal >, NoThreadManager >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MatrixLinearSolver< SparseMatrix< SReal >, FullVector< SReal >, NoThreadManager >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MatrixLinearSolver< CompressedRowSparseMatrix< SReal >, Ful",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver.html:1411,Performance,multi-thread,multi-threaded,1411,"147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Functions |; Variables . sofa::component::linearsolver Namespace Reference . Namespaces;  direct;  ;  iterative;  ;  ordering;  ;  preconditioner;  . Classes; class  MultExpr;  ; class  GraphScatteredMatrix;  ; class  GraphScatteredVector;  ; class  MatrixInvertData;  ; class  BaseMatrixLinearSolver;  ; class  NoThreadManager;  Empty class used for default solver implementation without multi-threading support. More...;  ; class  MatrixLinearSolverInternalData;  ; class  MatrixLinearSolver;  ; class  MatrixLinearSolver< Matrix, Vector, NoThreadManager >;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  ; template<typename Derived , typename OtherDerived > ; const Eigen::SparseDenseProductReturnType_MT< Derived, OtherDerived >::Type mul_EigenSparseDenseMatrix_MT (const Eigen::SparseMatrixBase< Derived > &lhs, const Eigen::MatrixBase< OtherDerived > &rhs, unsigned nbThreads=OMP_DEFAULT_NUM_THREADS_EIGEN_SPARSE_DENSE_PRODUCT);  Eigen::Sparse * Dense Matrices multiplication (openmp multi-threaded version) More...;  . Variables; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MatrixLinearSolver< GraphScatteredMatrix, GraphScatteredVector, NoThreadManager >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MatrixLinearSolver< FullMatrix< SReal >, FullVector< SReal >, NoThreadManager >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MatrixLinearSolver< SparseMatrix< SReal >, FullVector< SReal >, NoThreadManager >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MatrixLinearSolver< CompressedRowSparseMatrix< SReal >, FullVector< SReal >, NoThreadManager >;  ; template class SOFA_COMPONENT_LINEARSOLVER",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver.html:3335,Performance,multi-thread,multi-threaded,3335,"hreadManager >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MatrixLinearSolver< RotationMatrix< SReal >, FullVector< SReal >, NoThreadManager >;  . Function Documentation. ◆ getModuleName(). const char * sofa::component::linearsolver::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::linearsolver::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_LINEARSOLVER_API void sofa::component::linearsolver::init ; (; ). ◆ initExternalModule(). void sofa::component::linearsolver::initExternalModule ; (; ). ◆ mul_EigenSparseDenseMatrix_MT(). template<typename Derived , typename OtherDerived > . const Eigen::SparseDenseProductReturnType_MT<Derived,OtherDerived>::Type sofa::component::linearsolver::mul_EigenSparseDenseMatrix_MT ; (; const Eigen::SparseMatrixBase< Derived > & ; lhs, . const Eigen::MatrixBase< OtherDerived > & ; rhs, . unsigned ; nbThreads = OMP_DEFAULT_NUM_THREADS_EIGEN_SPARSE_DENSE_PRODUCT . ). inline . Eigen::Sparse * Dense Matrices multiplication (openmp multi-threaded version) . ◆ registerObjects(). void sofa::component::linearsolver::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MatrixLinearSolver< BlockDiagonalMatrix< 3, SReal >, FullVector< SReal >, NoThreadManager >. template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API sofa::component::linearsolver::MatrixLinearSolver< BlockDiagonalMatrix< 3, SReal >, FullVector< SReal >, NoThreadManager >. ◆ MatrixLinearSolver< CompressedRowSparseMatrix< SReal >, FullVector< SReal >, NoThreadManager >. template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API sofa::component::linearsolver::MatrixLinearSolver< CompressedRowSparseMatrix< SReal >, FullVector< SReal >, NoThreadManager >. ◆ MatrixLinearSolver< DiagonalMatrix< SReal >, FullVector< SReal >, NoThreadManager >. template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API sofa::component::linearsolver::MatrixLinearSolver< DiagonalMatrix< SReal >, FullVector< SReal >, NoThreadManager >.",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1direct.html:182,Modifiability,Variab,Variables,182,"﻿. SOFA API: sofa::component::linearsolver::direct Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Functions |; Variables . sofa::component::linearsolver::direct Namespace Reference . Classes; class  AsyncSparseLDLSolver;  ; class  BTDLinearSolver;  ; class  CholeskySolver;  Direct linear solver based on Cholesky factorization, for dense matrices. More...;  ; class  EigenDirectSparseSolver;  ; class  EigenSimplicialLDLT;  ; class  EigenSimplicialLLT;  ; struct  BaseEigenSolverProxy;  ; class  EigenSolverWrapper;  ; class  EigenSolverFactory;  ; class  BaseMainEigenSolverFactory;  ; class  MainSimplicialLDLTFactory;  ; class  MainSimplicialLLTFactory;  ; class  MainQRFactory;  ; class  MainLUFactory;  ; class  EigenSparseLU;  ; class  EigenSparseQR;  ; class  PrecomputedLinearSolverInternalData;  ; class  PrecomputedLinearSolver;  Linear system solver based on a precomputed inverse matrix. More...;  ; class  SparseLDLSolver;  ; class  SparseLDLImplInvertData;  ; class  SparseLDLSolverImpl;  ; class  SVDLinearSolver;  . Typedefs; template<class Real > ; using SimplicialLDLTTraits = DeprecatedAndRemoved;  ; template<class Real > ; using SimplicialLLTTraits = DeprecatedAndRemoved;  ; template<class Real > ; using SparseLUTraits = DeprecatedAndRemoved;  ; template<class Real > ; using SparseQRTraits = DeprecatedAndRemoved;  . Functions; void registerAsyncSparseLDLSolver (sofa::core::ObjectFactory *factory);  ; void registerBTDLinearSolver (sofa::core::ObjectFactory *factory);  ; void registerCholeskySolver (sofa::core::ObjectFactory *factory);  ; void registerEigenSimplicialLDLT (sofa::core::ObjectFactory *factory);  ; void registerEigenSimplicialLLT (sofa::core::ObjectFactory *factory);  ; void registerEigenSparseLU (sofa::core::ObjectFactory *factory);  ; void registerEigenSparseQR (sofa::core::ObjectFactory *factory);  ; void registerPrecomputedLinearSolver (sofa::core::ObjectFactory *factory);  ; vo",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1direct.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1direct.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1direct.html:3374,Modifiability,Variab,Variables,3374,"ind);  ; void CSPARSE_symbolic (int n, int *M_colptr, int *M_rowind, int *colptr, int *perm, int *invperm, int *Parent, int *Flag, int *Lnz);  ; template<class Real > ; void CSPARSE_numeric (int n, int *M_colptr, int *M_rowind, Real *M_values, int *colptr, int *rowind, Real *values, Real *D, int *perm, int *invperm, int *Parent, int *Flag, int *Lnz, int *Pattern, Real *Y);  . Variables; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API AsyncSparseLDLSolver< CompressedRowSparseMatrix< SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API CholeskySolver< SparseMatrix< SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API CholeskySolver< FullMatrix< SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API EigenSimplicialLDLT< SReal >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API EigenSimplicialLLT< SReal >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API EigenSparseLU< SReal >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API EigenSparseQR< SReal >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API PrecomputedLinearSolver< CompressedRowSparseMatrix< SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API SparseLDLSolver< CompressedRowSparseMatrix< SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API SVDLinearSolver< FullMatrix< SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API SVDLinearSolver< CompressedRowSparseMatrix< SReal >, FullVector< SReal > >;  . Typedef Documentation. ◆ SimplicialLDLTTraits. template<class Real > . using sofa::component::linearsolver::direct::SimplicialLDLTTraits = typedef DeprecatedAndRemoved. ◆ SimplicialLLTTraits. template<class Real > . using sofa::component::linearsolver::direct::SimplicialLLTTraits = typedef DeprecatedAndRemoved. ◆ SparseLUTraits. template<class Real > . using sofa::component:",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1direct.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1direct.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1direct.html:9344,Modifiability,Variab,Variable,9344,"rseQR(). void sofa::component::linearsolver::direct::registerEigenSparseQR ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::linearsolver::direct::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerOrderingMethods() [1/2]. template<class EigenSolverFactory , class Scalar > . void sofa::component::linearsolver::direct::registerOrderingMethods ; (; ). ◆ registerOrderingMethods() [2/2]. template<class Scalar > . void sofa::component::linearsolver::direct::registerOrderingMethods ; (; ). ◆ registerPrecomputedLinearSolver(). void sofa::component::linearsolver::direct::registerPrecomputedLinearSolver ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSparseLDLSolver(). void sofa::component::linearsolver::direct::registerSparseLDLSolver ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSVDLinearSolver(). void sofa::component::linearsolver::direct::registerSVDLinearSolver ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ AsyncSparseLDLSolver< CompressedRowSparseMatrix< SReal >, FullVector< SReal > >. template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API sofa::component::linearsolver::direct::AsyncSparseLDLSolver< CompressedRowSparseMatrix< SReal >,FullVector< SReal > >. ◆ CholeskySolver< FullMatrix< SReal >, FullVector< SReal > >. template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API sofa::component::linearsolver::direct::CholeskySolver< FullMatrix< SReal >, FullVector< SReal > >. ◆ CholeskySolver< SparseMatrix< SReal >, FullVector< SReal > >. template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API sofa::component::linearsolver::direct::CholeskySolver< SparseMatrix< SReal >, FullVector< SReal > >. ◆ EigenSimplicialLDLT< SReal >. template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API sofa::component::linearsolver::direct::EigenSimplicialLDLT< SReal >. ◆ EigenSimplicialLLT< SReal >. template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API sofa::component::linearsolver::direct::EigenSimplicialLLT",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1direct.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1direct.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1direct.html:1144,Usability,Simpl,SimplicialLDLTTraits,1144,"sses; class  AsyncSparseLDLSolver;  ; class  BTDLinearSolver;  ; class  CholeskySolver;  Direct linear solver based on Cholesky factorization, for dense matrices. More...;  ; class  EigenDirectSparseSolver;  ; class  EigenSimplicialLDLT;  ; class  EigenSimplicialLLT;  ; struct  BaseEigenSolverProxy;  ; class  EigenSolverWrapper;  ; class  EigenSolverFactory;  ; class  BaseMainEigenSolverFactory;  ; class  MainSimplicialLDLTFactory;  ; class  MainSimplicialLLTFactory;  ; class  MainQRFactory;  ; class  MainLUFactory;  ; class  EigenSparseLU;  ; class  EigenSparseQR;  ; class  PrecomputedLinearSolverInternalData;  ; class  PrecomputedLinearSolver;  Linear system solver based on a precomputed inverse matrix. More...;  ; class  SparseLDLSolver;  ; class  SparseLDLImplInvertData;  ; class  SparseLDLSolverImpl;  ; class  SVDLinearSolver;  . Typedefs; template<class Real > ; using SimplicialLDLTTraits = DeprecatedAndRemoved;  ; template<class Real > ; using SimplicialLLTTraits = DeprecatedAndRemoved;  ; template<class Real > ; using SparseLUTraits = DeprecatedAndRemoved;  ; template<class Real > ; using SparseQRTraits = DeprecatedAndRemoved;  . Functions; void registerAsyncSparseLDLSolver (sofa::core::ObjectFactory *factory);  ; void registerBTDLinearSolver (sofa::core::ObjectFactory *factory);  ; void registerCholeskySolver (sofa::core::ObjectFactory *factory);  ; void registerEigenSimplicialLDLT (sofa::core::ObjectFactory *factory);  ; void registerEigenSimplicialLLT (sofa::core::ObjectFactory *factory);  ; void registerEigenSparseLU (sofa::core::ObjectFactory *factory);  ; void registerEigenSparseQR (sofa::core::ObjectFactory *factory);  ; void registerPrecomputedLinearSolver (sofa::core::ObjectFactory *factory);  ; void registerSparseLDLSolver (sofa::core::ObjectFactory *factory);  ; void registerSVDLinearSolver (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1direct.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1direct.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1direct.html:1222,Usability,Simpl,SimplicialLLTTraits,1222,"sses; class  AsyncSparseLDLSolver;  ; class  BTDLinearSolver;  ; class  CholeskySolver;  Direct linear solver based on Cholesky factorization, for dense matrices. More...;  ; class  EigenDirectSparseSolver;  ; class  EigenSimplicialLDLT;  ; class  EigenSimplicialLLT;  ; struct  BaseEigenSolverProxy;  ; class  EigenSolverWrapper;  ; class  EigenSolverFactory;  ; class  BaseMainEigenSolverFactory;  ; class  MainSimplicialLDLTFactory;  ; class  MainSimplicialLLTFactory;  ; class  MainQRFactory;  ; class  MainLUFactory;  ; class  EigenSparseLU;  ; class  EigenSparseQR;  ; class  PrecomputedLinearSolverInternalData;  ; class  PrecomputedLinearSolver;  Linear system solver based on a precomputed inverse matrix. More...;  ; class  SparseLDLSolver;  ; class  SparseLDLImplInvertData;  ; class  SparseLDLSolverImpl;  ; class  SVDLinearSolver;  . Typedefs; template<class Real > ; using SimplicialLDLTTraits = DeprecatedAndRemoved;  ; template<class Real > ; using SimplicialLLTTraits = DeprecatedAndRemoved;  ; template<class Real > ; using SparseLUTraits = DeprecatedAndRemoved;  ; template<class Real > ; using SparseQRTraits = DeprecatedAndRemoved;  . Functions; void registerAsyncSparseLDLSolver (sofa::core::ObjectFactory *factory);  ; void registerBTDLinearSolver (sofa::core::ObjectFactory *factory);  ; void registerCholeskySolver (sofa::core::ObjectFactory *factory);  ; void registerEigenSimplicialLDLT (sofa::core::ObjectFactory *factory);  ; void registerEigenSimplicialLLT (sofa::core::ObjectFactory *factory);  ; void registerEigenSparseLU (sofa::core::ObjectFactory *factory);  ; void registerEigenSparseQR (sofa::core::ObjectFactory *factory);  ; void registerPrecomputedLinearSolver (sofa::core::ObjectFactory *factory);  ; void registerSparseLDLSolver (sofa::core::ObjectFactory *factory);  ; void registerSVDLinearSolver (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1direct.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1direct.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1direct.html:4644,Usability,Simpl,SimplicialLDLTTraits,4644,"ass SOFA_COMPONENT_LINEARSOLVER_DIRECT_API CholeskySolver< FullMatrix< SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API EigenSimplicialLDLT< SReal >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API EigenSimplicialLLT< SReal >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API EigenSparseLU< SReal >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API EigenSparseQR< SReal >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API PrecomputedLinearSolver< CompressedRowSparseMatrix< SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API SparseLDLSolver< CompressedRowSparseMatrix< SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API SVDLinearSolver< FullMatrix< SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API SVDLinearSolver< CompressedRowSparseMatrix< SReal >, FullVector< SReal > >;  . Typedef Documentation. ◆ SimplicialLDLTTraits. template<class Real > . using sofa::component::linearsolver::direct::SimplicialLDLTTraits = typedef DeprecatedAndRemoved. ◆ SimplicialLLTTraits. template<class Real > . using sofa::component::linearsolver::direct::SimplicialLLTTraits = typedef DeprecatedAndRemoved. ◆ SparseLUTraits. template<class Real > . using sofa::component::linearsolver::direct::SparseLUTraits = typedef DeprecatedAndRemoved. ◆ SparseQRTraits. template<class Real > . using sofa::component::linearsolver::direct::SparseQRTraits = typedef DeprecatedAndRemoved. Function Documentation. ◆ compareMatrixShape(). bool sofa::component::linearsolver::direct::compareMatrixShape ; (; int ; s_M, . int * ; M_colptr, . int * ; M_rowind, . int ; s_P, . int * ; P_colptr, . int * ; P_rowind . ). inline . ◆ CSPARSE_numeric(). template<class Real > . void sofa::component::linearsolver::direct::CSPARSE_numeric ; (; int ; n, . int * ; M_colptr, . int * ; M_rowind, . Real * ; M_values, . int * ; colptr, . int * ; rowind, . Re",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1direct.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1direct.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1direct.html:4735,Usability,Simpl,SimplicialLDLTTraits,4735,"ector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API EigenSimplicialLDLT< SReal >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API EigenSimplicialLLT< SReal >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API EigenSparseLU< SReal >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API EigenSparseQR< SReal >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API PrecomputedLinearSolver< CompressedRowSparseMatrix< SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API SparseLDLSolver< CompressedRowSparseMatrix< SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API SVDLinearSolver< FullMatrix< SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API SVDLinearSolver< CompressedRowSparseMatrix< SReal >, FullVector< SReal > >;  . Typedef Documentation. ◆ SimplicialLDLTTraits. template<class Real > . using sofa::component::linearsolver::direct::SimplicialLDLTTraits = typedef DeprecatedAndRemoved. ◆ SimplicialLLTTraits. template<class Real > . using sofa::component::linearsolver::direct::SimplicialLLTTraits = typedef DeprecatedAndRemoved. ◆ SparseLUTraits. template<class Real > . using sofa::component::linearsolver::direct::SparseLUTraits = typedef DeprecatedAndRemoved. ◆ SparseQRTraits. template<class Real > . using sofa::component::linearsolver::direct::SparseQRTraits = typedef DeprecatedAndRemoved. Function Documentation. ◆ compareMatrixShape(). bool sofa::component::linearsolver::direct::compareMatrixShape ; (; int ; s_M, . int * ; M_colptr, . int * ; M_rowind, . int ; s_P, . int * ; P_colptr, . int * ; P_rowind . ). inline . ◆ CSPARSE_numeric(). template<class Real > . void sofa::component::linearsolver::direct::CSPARSE_numeric ; (; int ; n, . int * ; M_colptr, . int * ; M_rowind, . Real * ; M_values, . int * ; colptr, . int * ; rowind, . Real * ; values, . Real * ; D, . int * ; perm, . int * ; invperm, . int * ; Parent, . i",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1direct.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1direct.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1direct.html:4790,Usability,Simpl,SimplicialLLTTraits,4790,"VER_DIRECT_API EigenSimplicialLDLT< SReal >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API EigenSimplicialLLT< SReal >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API EigenSparseLU< SReal >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API EigenSparseQR< SReal >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API PrecomputedLinearSolver< CompressedRowSparseMatrix< SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API SparseLDLSolver< CompressedRowSparseMatrix< SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API SVDLinearSolver< FullMatrix< SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API SVDLinearSolver< CompressedRowSparseMatrix< SReal >, FullVector< SReal > >;  . Typedef Documentation. ◆ SimplicialLDLTTraits. template<class Real > . using sofa::component::linearsolver::direct::SimplicialLDLTTraits = typedef DeprecatedAndRemoved. ◆ SimplicialLLTTraits. template<class Real > . using sofa::component::linearsolver::direct::SimplicialLLTTraits = typedef DeprecatedAndRemoved. ◆ SparseLUTraits. template<class Real > . using sofa::component::linearsolver::direct::SparseLUTraits = typedef DeprecatedAndRemoved. ◆ SparseQRTraits. template<class Real > . using sofa::component::linearsolver::direct::SparseQRTraits = typedef DeprecatedAndRemoved. Function Documentation. ◆ compareMatrixShape(). bool sofa::component::linearsolver::direct::compareMatrixShape ; (; int ; s_M, . int * ; M_colptr, . int * ; M_rowind, . int ; s_P, . int * ; P_colptr, . int * ; P_rowind . ). inline . ◆ CSPARSE_numeric(). template<class Real > . void sofa::component::linearsolver::direct::CSPARSE_numeric ; (; int ; n, . int * ; M_colptr, . int * ; M_rowind, . Real * ; M_values, . int * ; colptr, . int * ; rowind, . Real * ; values, . Real * ; D, . int * ; perm, . int * ; invperm, . int * ; Parent, . int * ; Flag, . int * ; Lnz, . int * ; Pattern, . Real * ; Y .",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1direct.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1direct.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1direct.html:4880,Usability,Simpl,SimplicialLLTTraits,4880,"SOLVER_DIRECT_API EigenSimplicialLLT< SReal >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API EigenSparseLU< SReal >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API EigenSparseQR< SReal >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API PrecomputedLinearSolver< CompressedRowSparseMatrix< SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API SparseLDLSolver< CompressedRowSparseMatrix< SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API SVDLinearSolver< FullMatrix< SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSOLVER_DIRECT_API SVDLinearSolver< CompressedRowSparseMatrix< SReal >, FullVector< SReal > >;  . Typedef Documentation. ◆ SimplicialLDLTTraits. template<class Real > . using sofa::component::linearsolver::direct::SimplicialLDLTTraits = typedef DeprecatedAndRemoved. ◆ SimplicialLLTTraits. template<class Real > . using sofa::component::linearsolver::direct::SimplicialLLTTraits = typedef DeprecatedAndRemoved. ◆ SparseLUTraits. template<class Real > . using sofa::component::linearsolver::direct::SparseLUTraits = typedef DeprecatedAndRemoved. ◆ SparseQRTraits. template<class Real > . using sofa::component::linearsolver::direct::SparseQRTraits = typedef DeprecatedAndRemoved. Function Documentation. ◆ compareMatrixShape(). bool sofa::component::linearsolver::direct::compareMatrixShape ; (; int ; s_M, . int * ; M_colptr, . int * ; M_rowind, . int ; s_P, . int * ; P_colptr, . int * ; P_rowind . ). inline . ◆ CSPARSE_numeric(). template<class Real > . void sofa::component::linearsolver::direct::CSPARSE_numeric ; (; int ; n, . int * ; M_colptr, . int * ; M_rowind, . Real * ; M_values, . int * ; colptr, . int * ; rowind, . Real * ; values, . Real * ; D, . int * ; perm, . int * ; invperm, . int * ; Parent, . int * ; Flag, . int * ; Lnz, . int * ; Pattern, . Real * ; Y . ). inline . ◆ CSPARSE_symbolic(). void sofa::component::linearsolver::direct::CSPAR",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1direct.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1direct.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1iterative.html:173,Modifiability,Variab,Variables,173,"﻿. SOFA API: sofa::component::linearsolver::iterative Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::linearsolver::iterative Namespace Reference . Classes; class  CGLinearSolver;  Linear system solver using the conjugate gradient iterative algorithm. More...;  ; class  MinResLinearSolver;  ; class  ShewchukPCGLinearSolver;  Linear system solver using the conjugate gradient iterative algorithm. More...;  . Functions; void registerCGLinearSolver (sofa::core::ObjectFactory *factory);  ; void registerMinResLinearSolver (sofa::core::ObjectFactory *factory);  ; void registerShewchukPCGLinearSolver (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API CGLinearSolver< GraphScatteredMatrix, GraphScatteredVector >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API CGLinearSolver< FullMatrix< SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API CGLinearSolver< SparseMatrix< SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API CGLinearSolver< CompressedRowSparseMatrix< SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MinResLinearSolver< GraphScatteredMatrix, GraphScatteredVector >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MinResLinearSolver< FullMatrix< SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MinResLinearSolver< SparseMatrix< SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MinResLinearSolver< Comp",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1iterative.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1iterative.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1iterative.html:1034,Modifiability,Variab,Variables,1034," Variables; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API CGLinearSolver< GraphScatteredMatrix, GraphScatteredVector >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API CGLinearSolver< FullMatrix< SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API CGLinearSolver< SparseMatrix< SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API CGLinearSolver< CompressedRowSparseMatrix< SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MinResLinearSolver< GraphScatteredMatrix, GraphScatteredVector >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MinResLinearSolver< FullMatrix< SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MinResLinearSolver< SparseMatrix< SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MinResLinearSolver< Comp",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1iterative.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1iterative.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1iterative.html:4361,Modifiability,Variab,Variable,4361,"etModuleName(). const char * sofa::component::linearsolver::iterative::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::linearsolver::iterative::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void sofa::component::linearsolver::iterative::init ; (; ). ◆ initExternalModule(). void sofa::component::linearsolver::iterative::initExternalModule ; (; ). ◆ registerCGLinearSolver(). void sofa::component::linearsolver::iterative::registerCGLinearSolver ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMinResLinearSolver(). void sofa::component::linearsolver::iterative::registerMinResLinearSolver ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::linearsolver::iterative::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerShewchukPCGLinearSolver(). void sofa::component::linearsolver::iterative::registerShewchukPCGLinearSolver ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ CGLinearSolver< CompressedRowSparseMatrix< SReal >, FullVector< SReal > >. template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API sofa::component::linearsolver::iterative::CGLinearSolver< CompressedRowSparseMatrix< SReal >, FullVector< SReal > >. ◆ CGLinearSolver< FullMatrix< SReal >, FullVector< SReal > >. template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API sofa::component::linearsolver::iterative::CGLinearSolver< FullMatrix< SReal >, FullVector< SReal > >. ◆ CGLinearSolver< GraphScatteredMatrix, GraphScatteredVector >. template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API sofa::component::linearsolver::iterative::CGLinearSolver< GraphScatteredMatrix, GraphScatteredVector >. ◆ CGLinearSolver< SparseMatrix< SReal >, FullVector< SReal > >. template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API sofa::component::linearsolver::iterative::CGLinearSolver< SparseMatrix< SReal >, FullVector< SReal > >. ◆ MinResLinearSolver< CompressedRowSparseMatrix< Mat< 2, 2, SReal",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1iterative.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1iterative.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1preconditioner.html:748,Integrability,wrap,wrapped,748,"﻿. SOFA API: sofa::component::linearsolver::preconditioner Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::linearsolver::preconditioner Namespace Reference . Classes; class  BlockJacobiPreconditionerInternalData;  ; class  BlockJacobiPreconditioner;  Linear solver based on a NxN block diagonal matrix (i.e. block Jacobi preconditioner) More...;  ; class  JacobiPreconditioner;  Linear solver based on a diagonal matrix (i.e. Jacobi preconditioner) More...;  ; class  PrecomputedMatrixSystem;  ; class  PrecomputedWarpPreconditionerInternalData;  ; class  PrecomputedWarpPreconditioner;  Linear system solver based on a precomputed inverse matrix, wrapped by a per-node rotation matrix. More...;  ; class  RotationMatrixSystem;  ; class  SSORPreconditioner;  ; class  WarpPreconditioner;  Linear system solver wrapping another (precomputed) linear solver by a per-node rotation matrix. More...;  . Functions; void registerBlockJacobiPreconditioner (sofa::core::ObjectFactory *factory);  ; void registerJacobiPreconditioner (sofa::core::ObjectFactory *factory);  ; void registerPrecomputedMatrixSystem (sofa::core::ObjectFactory *factory);  ; void registerPrecomputedWarpPreconditioner (sofa::core::ObjectFactory *factory);  ; void registerRotationMatrixSystem (sofa::core::ObjectFactory *factory);  ; void registerSSORPreconditioner (sofa::core::ObjectFactory *factory);  ; void registerWarpPreconditioner (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; template class SOFA_COMPONENT_LINEARSOLVER_PRECONDITIONER_API BlockJacobiPreconditioner< BlockDiagonalMatrix< 3, SReal >, FullVector< SReal > >;  ; te",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1preconditioner.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1preconditioner.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1preconditioner.html:910,Integrability,wrap,wrapping,910,"﻿. SOFA API: sofa::component::linearsolver::preconditioner Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::linearsolver::preconditioner Namespace Reference . Classes; class  BlockJacobiPreconditionerInternalData;  ; class  BlockJacobiPreconditioner;  Linear solver based on a NxN block diagonal matrix (i.e. block Jacobi preconditioner) More...;  ; class  JacobiPreconditioner;  Linear solver based on a diagonal matrix (i.e. Jacobi preconditioner) More...;  ; class  PrecomputedMatrixSystem;  ; class  PrecomputedWarpPreconditionerInternalData;  ; class  PrecomputedWarpPreconditioner;  Linear system solver based on a precomputed inverse matrix, wrapped by a per-node rotation matrix. More...;  ; class  RotationMatrixSystem;  ; class  SSORPreconditioner;  ; class  WarpPreconditioner;  Linear system solver wrapping another (precomputed) linear solver by a per-node rotation matrix. More...;  . Functions; void registerBlockJacobiPreconditioner (sofa::core::ObjectFactory *factory);  ; void registerJacobiPreconditioner (sofa::core::ObjectFactory *factory);  ; void registerPrecomputedMatrixSystem (sofa::core::ObjectFactory *factory);  ; void registerPrecomputedWarpPreconditioner (sofa::core::ObjectFactory *factory);  ; void registerRotationMatrixSystem (sofa::core::ObjectFactory *factory);  ; void registerSSORPreconditioner (sofa::core::ObjectFactory *factory);  ; void registerWarpPreconditioner (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; template class SOFA_COMPONENT_LINEARSOLVER_PRECONDITIONER_API BlockJacobiPreconditioner< BlockDiagonalMatrix< 3, SReal >, FullVector< SReal > >;  ; te",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1preconditioner.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1preconditioner.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1preconditioner.html:178,Modifiability,Variab,Variables,178,"﻿. SOFA API: sofa::component::linearsolver::preconditioner Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::linearsolver::preconditioner Namespace Reference . Classes; class  BlockJacobiPreconditionerInternalData;  ; class  BlockJacobiPreconditioner;  Linear solver based on a NxN block diagonal matrix (i.e. block Jacobi preconditioner) More...;  ; class  JacobiPreconditioner;  Linear solver based on a diagonal matrix (i.e. Jacobi preconditioner) More...;  ; class  PrecomputedMatrixSystem;  ; class  PrecomputedWarpPreconditionerInternalData;  ; class  PrecomputedWarpPreconditioner;  Linear system solver based on a precomputed inverse matrix, wrapped by a per-node rotation matrix. More...;  ; class  RotationMatrixSystem;  ; class  SSORPreconditioner;  ; class  WarpPreconditioner;  Linear system solver wrapping another (precomputed) linear solver by a per-node rotation matrix. More...;  . Functions; void registerBlockJacobiPreconditioner (sofa::core::ObjectFactory *factory);  ; void registerJacobiPreconditioner (sofa::core::ObjectFactory *factory);  ; void registerPrecomputedMatrixSystem (sofa::core::ObjectFactory *factory);  ; void registerPrecomputedWarpPreconditioner (sofa::core::ObjectFactory *factory);  ; void registerRotationMatrixSystem (sofa::core::ObjectFactory *factory);  ; void registerSSORPreconditioner (sofa::core::ObjectFactory *factory);  ; void registerWarpPreconditioner (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; template class SOFA_COMPONENT_LINEARSOLVER_PRECONDITIONER_API BlockJacobiPreconditioner< BlockDiagonalMatrix< 3, SReal >, FullVector< SReal > >;  ; te",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1preconditioner.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1preconditioner.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1preconditioner.html:1840,Modifiability,Variab,Variables,1840,"::core::ObjectFactory *factory);  ; void registerPrecomputedMatrixSystem (sofa::core::ObjectFactory *factory);  ; void registerPrecomputedWarpPreconditioner (sofa::core::ObjectFactory *factory);  ; void registerRotationMatrixSystem (sofa::core::ObjectFactory *factory);  ; void registerSSORPreconditioner (sofa::core::ObjectFactory *factory);  ; void registerWarpPreconditioner (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; template class SOFA_COMPONENT_LINEARSOLVER_PRECONDITIONER_API BlockJacobiPreconditioner< BlockDiagonalMatrix< 3, SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSOLVER_PRECONDITIONER_API JacobiPreconditioner< DiagonalMatrix< SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSOLVER_PRECONDITIONER_API RotationMatrixSystem< RotationMatrix< SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSOLVER_PRECONDITIONER_API WarpPreconditioner< RotationMatrix< SReal >, FullVector< SReal >, NoThreadManager >;  . Function Documentation. ◆ getModuleName(). const char * sofa::component::linearsolver::preconditioner::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::linearsolver::preconditioner::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_LINEARSOLVER_PRECONDITIONER_API void sofa::component::linearsolver::preconditioner::init ; (; ). ◆ initExternalModule(). void sofa::component::linearsolver::preconditioner::initExternalModule ; (; ). ◆ registerBlockJacobiPreconditioner(). void sofa::component::linearsolver::preconditioner::registerBlockJacobiPreconditioner ; (; sofa::core::ObjectFactory * ; factory). ◆ registerJacobiPreconditioner(). void sofa::component::linearsolver::preconditione",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1preconditioner.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1preconditioner.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1preconditioner.html:4156,Modifiability,Variab,Variable,4156,"ofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::linearsolver::preconditioner::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerPrecomputedMatrixSystem(). void sofa::component::linearsolver::preconditioner::registerPrecomputedMatrixSystem ; (; sofa::core::ObjectFactory * ; factory). ◆ registerPrecomputedWarpPreconditioner(). void sofa::component::linearsolver::preconditioner::registerPrecomputedWarpPreconditioner ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRotationMatrixSystem(). void sofa::component::linearsolver::preconditioner::registerRotationMatrixSystem ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSSORPreconditioner(). void sofa::component::linearsolver::preconditioner::registerSSORPreconditioner ; (; sofa::core::ObjectFactory * ; factory). ◆ registerWarpPreconditioner(). void sofa::component::linearsolver::preconditioner::registerWarpPreconditioner ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ BlockJacobiPreconditioner< BlockDiagonalMatrix< 3, SReal >, FullVector< SReal > >. template class SOFA_COMPONENT_LINEARSOLVER_PRECONDITIONER_API sofa::component::linearsolver::preconditioner::BlockJacobiPreconditioner< BlockDiagonalMatrix< 3, SReal >, FullVector< SReal > >. ◆ JacobiPreconditioner< DiagonalMatrix< SReal >, FullVector< SReal > >. template class SOFA_COMPONENT_LINEARSOLVER_PRECONDITIONER_API sofa::component::linearsolver::preconditioner::JacobiPreconditioner< DiagonalMatrix< SReal >, FullVector< SReal > >. ◆ RotationMatrixSystem< RotationMatrix< SReal >, FullVector< SReal > >. template class SOFA_COMPONENT_LINEARSOLVER_PRECONDITIONER_API sofa::component::linearsolver::preconditioner::RotationMatrixSystem< RotationMatrix< SReal >, FullVector< SReal > >. ◆ WarpPreconditioner< RotationMatrix< SReal >, FullVector< SReal >, NoThreadManager >. template class SOFA_COMPONENT_LINEARSOLVER_PRECONDITIONER_API sofa::component::linearsolver::preconditioner::WarpPrecondi",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1preconditioner.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1preconditioner.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html:174,Modifiability,Variab,Variables,174,"﻿. SOFA API: sofa::component::linearsystem Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Functions |; Variables . sofa::component::linearsystem Namespace Reference . Classes; class  BaseMatrixProjectionMethod;  ; class  CompositeLinearSystem;  ; class  SparsityPatternLocalMatrix;  ; class  SparsityPatternLocalMappedMatrix;  ; class  ConstantSparsityPatternSystem;  ; struct  CheckNoChangeInInsertionOrder;  Check that the incoming rows and columns are expected by the constant sparsity pattern. More...;  ; class  ConstantSparsityProjectionMethod;  ; struct  CreateMatrixDispatcher;  ; struct  LinearSystemData;  ; struct  MappedMassMatrixObserver;  ; class  ComponentGroupsVisitor;  ; class  MappingGraph;  ; class  MappingJacobians;  ; class  AssemblingMappedMatrixAccumulator;  ; class  AssemblingMatrixAccumulator;  ; class  BaseAssemblingMatrixAccumulator;  ; class  ConstantLocalMappedMatrix;  ; class  ConstantLocalMatrix;  ; class  MatrixFreeSystem;  ; struct  LocalMatrixMaps;  ; class  MatrixLinearSystem;  ; struct  GroupOfComponentsAssociatedToAPairOfMechanicalStates;  ; class  MatrixProjectionMethod;  ; class  TypedMatrixLinearSystem;  ; class  AssembleGlobalVectorFromLocalVectorVisitor;  ; class  DispatchFromGlobalVectorToLocalVectorVisitor;  . Typedefs; using StrategyCheckerType = sofa::core::matrixaccumulator::CompositeIndexVerificationStrategy< core::matrixaccumulator::RangeVerification, CheckNoChangeInInsertionOrder >;  ; template<class TReal > ; using LocalMappedMatrixType = sofa::linearalgebra::CompressedRowSparseMatrix< TReal >;  . Functions; void registerMatrixLinearSystemBTDMatrix (sofa::core::ObjectFactory *factory);  ; void registerTypedMatrixLinearSystemBTDMatrix (sofa::core::ObjectFactory *factory);  ; void registerMatrixFreeSystemGraphScattered (sofa::core::ObjectFactory *factory);  ; void registerCompositeLinearSystem (sofa::core::ObjectFactory *factory);  ; void registerConstantSp",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html:3485,Modifiability,config,configureCreatedMatrixComponent,3485,"oupOfComponentsAssociatedToAPairOfMechanicalStates &group);  ; sofa::type::vector< core::behavior::BaseMechanicalState * > retrieveAssociatedMechanicalState (const sofa::core::behavior::StateAccessor *component);  ; sofa::type::vector< core::behavior::BaseMechanicalState * > retrieveAssociatedMechanicalState (BaseMapping *component);  ; auto generatePairs (const sofa::type::vector< core::behavior::BaseMechanicalState * > &mstates) -> sofa::type::vector< sofa::type::fixed_array< core::behavior::BaseMechanicalState *, 2 > >;  Generate all possible pairs of Mechanical States from a list of Mechanical States. More...;  ; template<core::matrixaccumulator::Contribution c> ; void configureCreatedMatrixComponent (typename BaseAssemblingMatrixAccumulator< c >::SPtr mat, typename BaseAssemblingMatrixAccumulator< c >::ComponentType *object, const SReal factor, bool printLog);  ; template<class BlockType > ; void computeProjection (const Eigen::Map< Eigen::SparseMatrix< BlockType, Eigen::RowMajor > > KMap, const sofa::type::fixed_array< std::shared_ptr< linearalgebra::CompressedRowSparseMatrix< BlockType >>, 2 > J, Eigen::SparseMatrix< BlockType, Eigen::RowMajor > &JT_K_J);  ; template<class BlockType > ; void addToGlobalMatrix (linearalgebra::BaseMatrix *globalMatrix, Eigen::SparseMatrix< BlockType, Eigen::RowMajor > JT_K_J, const type::Vec2u positionInGlobalMatrix);  . Variables; template struct SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MatrixFreeSystem< GraphScatteredMatrix, GraphScatteredVector >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API TypedMatrixLinearSystem< GraphScatteredMatrix, GraphScatteredVector >;  ; template class SOFA_COMPONENT_LINEARSYSTEM_API CompositeLinearSystem< FullMatrix< SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSYSTEM_API CompositeLinearSystem< SparseMatrix< SReal >, FullVector< SReal ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html:4185,Modifiability,Variab,Variables,4185,,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html:8947,Modifiability,config,configureCreatedMatrixComponent,8947,"eIndexVerificationStrategy< core::matrixaccumulator::RangeVerification, CheckNoChangeInInsertionOrder >. The strategy used to check the incoming rows and columns is a combination of: 1) checking if the indices are in the authorized submatrix (range) 2) checking if the indices comply with the initial sparsity pattern . Function Documentation. ◆ addToGlobalMatrix(). template<class BlockType > . void sofa::component::linearsystem::addToGlobalMatrix ; (; linearalgebra::BaseMatrix * ; globalMatrix, . Eigen::SparseMatrix< BlockType, Eigen::RowMajor > ; JT_K_J, . const type::Vec2u ; positionInGlobalMatrix . ). ◆ computeProjection(). template<class BlockType > . void sofa::component::linearsystem::computeProjection ; (; const Eigen::Map< Eigen::SparseMatrix< BlockType, Eigen::RowMajor > > ; KMap, . const sofa::type::fixed_array< std::shared_ptr< linearalgebra::CompressedRowSparseMatrix< BlockType >>, 2 > ; J, . Eigen::SparseMatrix< BlockType, Eigen::RowMajor > & ; JT_K_J . ). ◆ configureCreatedMatrixComponent(). template<core::matrixaccumulator::Contribution c> . void sofa::component::linearsystem::configureCreatedMatrixComponent ; (; typename BaseAssemblingMatrixAccumulator< c >::SPtr ; mat, . typename BaseAssemblingMatrixAccumulator< c >::ComponentType * ; object, . const SReal ; factor, . bool ; printLog . ). Generic function to configure a local matrix and associate it to a component . ◆ generatePairs(). auto sofa::component::linearsystem::generatePairs ; (; const sofa::type::vector< core::behavior::BaseMechanicalState * > & ; mstates); -> sofa::type::vector<sofa::type::fixed_array<core::behavior::BaseMechanicalState*, 2> >. inline . Generate all possible pairs of Mechanical States from a list of Mechanical States. . ◆ getModuleDescription(). const char * sofa::component::linearsystem::getModuleDescription ; (; ). ◆ getModuleLicense(). const char * sofa::component::linearsystem::getModuleLicense ; (; ). ◆ getModuleName(). const char * sofa::component::linearsystem::getMo",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html:9070,Modifiability,config,configureCreatedMatrixComponent,9070,"coming rows and columns is a combination of: 1) checking if the indices are in the authorized submatrix (range) 2) checking if the indices comply with the initial sparsity pattern . Function Documentation. ◆ addToGlobalMatrix(). template<class BlockType > . void sofa::component::linearsystem::addToGlobalMatrix ; (; linearalgebra::BaseMatrix * ; globalMatrix, . Eigen::SparseMatrix< BlockType, Eigen::RowMajor > ; JT_K_J, . const type::Vec2u ; positionInGlobalMatrix . ). ◆ computeProjection(). template<class BlockType > . void sofa::component::linearsystem::computeProjection ; (; const Eigen::Map< Eigen::SparseMatrix< BlockType, Eigen::RowMajor > > ; KMap, . const sofa::type::fixed_array< std::shared_ptr< linearalgebra::CompressedRowSparseMatrix< BlockType >>, 2 > ; J, . Eigen::SparseMatrix< BlockType, Eigen::RowMajor > & ; JT_K_J . ). ◆ configureCreatedMatrixComponent(). template<core::matrixaccumulator::Contribution c> . void sofa::component::linearsystem::configureCreatedMatrixComponent ; (; typename BaseAssemblingMatrixAccumulator< c >::SPtr ; mat, . typename BaseAssemblingMatrixAccumulator< c >::ComponentType * ; object, . const SReal ; factor, . bool ; printLog . ). Generic function to configure a local matrix and associate it to a component . ◆ generatePairs(). auto sofa::component::linearsystem::generatePairs ; (; const sofa::type::vector< core::behavior::BaseMechanicalState * > & ; mstates); -> sofa::type::vector<sofa::type::fixed_array<core::behavior::BaseMechanicalState*, 2> >. inline . Generate all possible pairs of Mechanical States from a list of Mechanical States. . ◆ getModuleDescription(). const char * sofa::component::linearsystem::getModuleDescription ; (; ). ◆ getModuleLicense(). const char * sofa::component::linearsystem::getModuleLicense ; (; ). ◆ getModuleName(). const char * sofa::component::linearsystem::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::linearsystem::getModuleVersion ; (; ). ◆ init(). void SOFA_COMPONENT",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html:9308,Modifiability,config,configure,9308,"). template<class BlockType > . void sofa::component::linearsystem::addToGlobalMatrix ; (; linearalgebra::BaseMatrix * ; globalMatrix, . Eigen::SparseMatrix< BlockType, Eigen::RowMajor > ; JT_K_J, . const type::Vec2u ; positionInGlobalMatrix . ). ◆ computeProjection(). template<class BlockType > . void sofa::component::linearsystem::computeProjection ; (; const Eigen::Map< Eigen::SparseMatrix< BlockType, Eigen::RowMajor > > ; KMap, . const sofa::type::fixed_array< std::shared_ptr< linearalgebra::CompressedRowSparseMatrix< BlockType >>, 2 > ; J, . Eigen::SparseMatrix< BlockType, Eigen::RowMajor > & ; JT_K_J . ). ◆ configureCreatedMatrixComponent(). template<core::matrixaccumulator::Contribution c> . void sofa::component::linearsystem::configureCreatedMatrixComponent ; (; typename BaseAssemblingMatrixAccumulator< c >::SPtr ; mat, . typename BaseAssemblingMatrixAccumulator< c >::ComponentType * ; object, . const SReal ; factor, . bool ; printLog . ). Generic function to configure a local matrix and associate it to a component . ◆ generatePairs(). auto sofa::component::linearsystem::generatePairs ; (; const sofa::type::vector< core::behavior::BaseMechanicalState * > & ; mstates); -> sofa::type::vector<sofa::type::fixed_array<core::behavior::BaseMechanicalState*, 2> >. inline . Generate all possible pairs of Mechanical States from a list of Mechanical States. . ◆ getModuleDescription(). const char * sofa::component::linearsystem::getModuleDescription ; (; ). ◆ getModuleLicense(). const char * sofa::component::linearsystem::getModuleLicense ; (; ). ◆ getModuleName(). const char * sofa::component::linearsystem::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::linearsystem::getModuleVersion ; (; ). ◆ init(). void SOFA_COMPONENT_LINEARSYSTEM_API sofa::component::linearsystem::init ; (; ). ◆ initExternalModule(). void sofa::component::linearsystem::initExternalModule ; (; ). ◆ operator<<(). std::ostream& sofa::component::linearsystem::operator<< ; (; s",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html:12252,Modifiability,Variab,Variable,12252,":component::linearsystem::registerMatrixLinearSystemBTDMatrix ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMatrixProjectionMethod(). void sofa::component::linearsystem::registerMatrixProjectionMethod ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::linearsystem::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerTypedMatrixLinearSystemBTDMatrix(). void sofa::component::linearsystem::registerTypedMatrixLinearSystemBTDMatrix ; (; sofa::core::ObjectFactory * ; factory). ◆ retrieveAssociatedMechanicalState() [1/2]. sofa::type::vector<core::behavior::BaseMechanicalState*> sofa::component::linearsystem::retrieveAssociatedMechanicalState ; (; BaseMapping * ; component). inline . ◆ retrieveAssociatedMechanicalState() [2/2]. sofa::type::vector<core::behavior::BaseMechanicalState*> sofa::component::linearsystem::retrieveAssociatedMechanicalState ; (; const sofa::core::behavior::StateAccessor * ; component). inline . Variable Documentation. ◆ CompositeLinearSystem< BlockDiagonalMatrix< 3, SReal >, FullVector< SReal > >. template class SOFA_COMPONENT_LINEARSYSTEM_API sofa::component::linearsystem::CompositeLinearSystem< BlockDiagonalMatrix< 3, SReal >, FullVector< SReal > >. ◆ CompositeLinearSystem< CompressedRowSparseMatrix< SReal >, FullVector< SReal > >. template class SOFA_COMPONENT_LINEARSYSTEM_API sofa::component::linearsystem::CompositeLinearSystem< CompressedRowSparseMatrix< SReal >, FullVector< SReal > >. ◆ CompositeLinearSystem< DiagonalMatrix< SReal >, FullVector< SReal > >. template class SOFA_COMPONENT_LINEARSYSTEM_API sofa::component::linearsystem::CompositeLinearSystem< DiagonalMatrix< SReal >, FullVector< SReal > >. ◆ CompositeLinearSystem< FullMatrix< SReal >, FullVector< SReal > >. template class SOFA_COMPONENT_LINEARSYSTEM_API sofa::component::linearsystem::CompositeLinearSystem< FullMatrix< SReal >, FullVector< SReal > >. ◆ CompositeLinearSystem< RotationMatrix< SReal >, FullVector< SReal >",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html:8183,Security,authoriz,authorized,8183,"pedMatrixLinearSystem< BlockDiagonalMatrix< 3, double >, FullVector< double > >;  ; template class SOFA_COMPONENT_LINEARSYSTEM_API TypedMatrixLinearSystem< BlockDiagonalMatrix< 3, float >, FullVector< float > >;  ; template class SOFA_COMPONENT_LINEARSYSTEM_API TypedMatrixLinearSystem< RotationMatrix< double >, FullVector< double > >;  ; template class SOFA_COMPONENT_LINEARSYSTEM_API TypedMatrixLinearSystem< RotationMatrix< float >, FullVector< float > >;  . Typedef Documentation. ◆ LocalMappedMatrixType. template<class TReal > . using sofa::component::linearsystem::LocalMappedMatrixType = typedef sofa::linearalgebra::CompressedRowSparseMatrix<TReal>. ◆ StrategyCheckerType. using sofa::component::linearsystem::StrategyCheckerType = typedef sofa::core::matrixaccumulator::CompositeIndexVerificationStrategy< core::matrixaccumulator::RangeVerification, CheckNoChangeInInsertionOrder >. The strategy used to check the incoming rows and columns is a combination of: 1) checking if the indices are in the authorized submatrix (range) 2) checking if the indices comply with the initial sparsity pattern . Function Documentation. ◆ addToGlobalMatrix(). template<class BlockType > . void sofa::component::linearsystem::addToGlobalMatrix ; (; linearalgebra::BaseMatrix * ; globalMatrix, . Eigen::SparseMatrix< BlockType, Eigen::RowMajor > ; JT_K_J, . const type::Vec2u ; positionInGlobalMatrix . ). ◆ computeProjection(). template<class BlockType > . void sofa::component::linearsystem::computeProjection ; (; const Eigen::Map< Eigen::SparseMatrix< BlockType, Eigen::RowMajor > > ; KMap, . const sofa::type::fixed_array< std::shared_ptr< linearalgebra::CompressedRowSparseMatrix< BlockType >>, 2 > ; J, . Eigen::SparseMatrix< BlockType, Eigen::RowMajor > & ; JT_K_J . ). ◆ configureCreatedMatrixComponent(). template<core::matrixaccumulator::Contribution c> . void sofa::component::linearsystem::configureCreatedMatrixComponent ; (; typename BaseAssemblingMatrixAccumulator< c >::SPtr ; mat, . typena",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mapping_1_1linear.html:191,Modifiability,Variab,Variables,191,"﻿. SOFA API: sofa::component::mapping::linear Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions |; Variables . sofa::component::mapping::linear Namespace Reference . Namespaces;  crtp;  . Classes; class  BarycentricMapperEdgeSetTopology;  ; class  BarycentricMapperHexahedronSetTopology;  Class allowing barycentric mapping computation on a HexahedronSetTopology. More...;  ; class  BarycentricMapperMeshTopology;  Class allowing barycentric mapping computation on a MeshTopology. More...;  ; class  BarycentricMapperQuadSetTopology;  Class allowing barycentric mapping computation on a QuadSetTopology. More...;  ; class  BarycentricMapperRegularGridTopology;  Class allowing barycentric mapping computation on a RegularGridTopology. More...;  ; class  BarycentricMapperSparseGridTopology;  Class allowing barycentric mapping computation on a SparseGridTopology. More...;  ; class  BarycentricMapperTetrahedronSetTopology;  Class allowing barycentric mapping computation on a TetrahedronSetTopology. More...;  ; class  BarycentricMapperTriangleSetTopology;  Class allowing barycentric mapping computation on a TriangleSetTopology. More...;  ; class  BarycentricMapping;  ; class  BarycentricMapperTetrahedronSetTopologyRigid;  Class allowing barycentric mapping computation on a TetrahedronSetTopology in Vec3 -> Rigid case. More...;  ; class  BarycentricMapperTetrahedronSetTopology< sofa::defaulttype::StdVectorTypes< sofa::type::Vec< 3, TInReal >, sofa::type::Vec< 3, TInReal >, TInReal >, sofa::defaulttype::StdRigidTypes< 3, TOutReal > >;  ; class  BeamLinearMapping;  ; struct  RigidMappingMatrixHelper;  ; struct  RigidMappingMatrixHelper< 2, Real >;  ; struct  RigidMappingMatrixHelper< 3, Real >;  ; class  CenterOfMassMapping;  ; struct  CenterOfMassMappingOperation;  ; class  CenterOfMassMulti2Mapping;  ; class  CenterOfMassMultiMapping;  ; class  DeformableOnRigidFrameMappingInternalData;  Map",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1mapping_1_1linear.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mapping_1_1linear.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mapping_1_1linear.html:7233,Modifiability,Variab,Variables,7233,,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1mapping_1_1linear.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mapping_1_1linear.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mapping_1_1linear.html:19741,Modifiability,Variab,Variable,19741," sofa::component::mapping::linear::registerSimpleTesselatedTetraMechanicalMapping ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSimpleTesselatedTetraTopologicalMapping(). void sofa::component::mapping::linear::registerSimpleTesselatedTetraTopologicalMapping ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSkinningMapping(). void sofa::component::mapping::linear::registerSkinningMapping ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSubsetMapping(). void sofa::component::mapping::linear::registerSubsetMapping ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSubsetMultiMapping(). void sofa::component::mapping::linear::registerSubsetMultiMapping ; (; sofa::core::ObjectFactory * ; factory). ◆ registerTubularMapping(). void sofa::component::mapping::linear::registerTubularMapping ; (; sofa::core::ObjectFactory * ; factory). ◆ registerVoidMapping(). void sofa::component::mapping::linear::registerVoidMapping ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ BarycentricMapperEdgeSetTopology< Vec3Types, Rigid3Types >. template class SOFA_COMPONENT_MAPPING_LINEAR_API sofa::component::mapping::linear::BarycentricMapperEdgeSetTopology< Vec3Types, Rigid3Types >. ◆ BarycentricMapperEdgeSetTopology< Vec3Types, Vec3Types >. template class SOFA_COMPONENT_MAPPING_LINEAR_API sofa::component::mapping::linear::BarycentricMapperEdgeSetTopology< Vec3Types, Vec3Types >. ◆ BarycentricMapperHexahedronSetTopology< Vec3Types, Rigid3Types >. template class SOFA_COMPONENT_MAPPING_LINEAR_API sofa::component::mapping::linear::BarycentricMapperHexahedronSetTopology< Vec3Types, Rigid3Types >. ◆ BarycentricMapperHexahedronSetTopology< Vec3Types, Vec3Types >. template class SOFA_COMPONENT_MAPPING_LINEAR_API sofa::component::mapping::linear::BarycentricMapperHexahedronSetTopology< Vec3Types, Vec3Types >. ◆ BarycentricMapperMeshTopology< Vec3Types, Rigid3Types >. template class SOFA_COMPONENT_MAPPING_LINEAR_API sofa::component::mapping::linear::Barycentr",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1mapping_1_1linear.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mapping_1_1linear.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mapping_1_1linear.html:2481,Usability,Simpl,SimpleTesselatedHexaTopologicalMapping,2481,"eal >, TInReal >, sofa::defaulttype::StdRigidTypes< 3, TOutReal > >;  ; class  BeamLinearMapping;  ; struct  RigidMappingMatrixHelper;  ; struct  RigidMappingMatrixHelper< 2, Real >;  ; struct  RigidMappingMatrixHelper< 3, Real >;  ; class  CenterOfMassMapping;  ; struct  CenterOfMassMappingOperation;  ; class  CenterOfMassMulti2Mapping;  ; class  CenterOfMassMultiMapping;  ; class  DeformableOnRigidFrameMappingInternalData;  Maps a deformable mechanical state to another deformable mechanical state mapped onto a rigid frame. Inputs: One Vec3 and One Rigid mechanical objects Output: One Vec3 mechanical object. More...;  ; class  DeformableOnRigidFrameMapping;  ; class  IdentityMapping;  ; class  IdentityMultiMapping;  concatanate several entire mechanical states together More...;  ; class  LineSetSkinningMapping;  ; class  Mesh2PointMechanicalMapping;  ; class  Mesh2PointTopologicalMapping;  ; class  SimpleTesselatedHexaTopologicalMapping;  ; class  SimpleTesselatedTetraMechanicalMapping;  ; class  SimpleTesselatedTetraTopologicalMapping;  ; class  SkinningMapping;  ; class  SubsetMappingInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  SubsetMapping;  Compute a subset of input points. More...;  ; class  SubsetMultiMapping;  ; class  TubularMapping;  ; class  VoidMapping;  . Typedefs; typedef sofa::core::topology::BaseMeshTopology::Edge Edge;  ; typedef sofa::core::topology::BaseMeshTopology::Hexahedron Hexahedron;  ; typedef sofa::core::topology::BaseMeshTopology::Triangle Triangle;  ; typedef sofa::core::topology::BaseMeshTopology::Quad Quad;  ; typedef sofa::core::topology::BaseMeshTopology::Tetrahedron Tetrahedron;  ; typedef sofa::core::topology::BaseMeshTopology::Tetra Tetra;  ; typedef sofa::core::topology::BaseMeshTopology::Hexa Hexa;  ; typedef sofa::core::topology::BaseMeshTopology::SeqLines SeqLines;  ; typedef sofa::core::topology::BaseMeshTopology::SeqEdges SeqEdges;  ; typedef",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1mapping_1_1linear.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mapping_1_1linear.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mapping_1_1linear.html:2531,Usability,Simpl,SimpleTesselatedTetraMechanicalMapping,2531,"eal >, TInReal >, sofa::defaulttype::StdRigidTypes< 3, TOutReal > >;  ; class  BeamLinearMapping;  ; struct  RigidMappingMatrixHelper;  ; struct  RigidMappingMatrixHelper< 2, Real >;  ; struct  RigidMappingMatrixHelper< 3, Real >;  ; class  CenterOfMassMapping;  ; struct  CenterOfMassMappingOperation;  ; class  CenterOfMassMulti2Mapping;  ; class  CenterOfMassMultiMapping;  ; class  DeformableOnRigidFrameMappingInternalData;  Maps a deformable mechanical state to another deformable mechanical state mapped onto a rigid frame. Inputs: One Vec3 and One Rigid mechanical objects Output: One Vec3 mechanical object. More...;  ; class  DeformableOnRigidFrameMapping;  ; class  IdentityMapping;  ; class  IdentityMultiMapping;  concatanate several entire mechanical states together More...;  ; class  LineSetSkinningMapping;  ; class  Mesh2PointMechanicalMapping;  ; class  Mesh2PointTopologicalMapping;  ; class  SimpleTesselatedHexaTopologicalMapping;  ; class  SimpleTesselatedTetraMechanicalMapping;  ; class  SimpleTesselatedTetraTopologicalMapping;  ; class  SkinningMapping;  ; class  SubsetMappingInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  SubsetMapping;  Compute a subset of input points. More...;  ; class  SubsetMultiMapping;  ; class  TubularMapping;  ; class  VoidMapping;  . Typedefs; typedef sofa::core::topology::BaseMeshTopology::Edge Edge;  ; typedef sofa::core::topology::BaseMeshTopology::Hexahedron Hexahedron;  ; typedef sofa::core::topology::BaseMeshTopology::Triangle Triangle;  ; typedef sofa::core::topology::BaseMeshTopology::Quad Quad;  ; typedef sofa::core::topology::BaseMeshTopology::Tetrahedron Tetrahedron;  ; typedef sofa::core::topology::BaseMeshTopology::Tetra Tetra;  ; typedef sofa::core::topology::BaseMeshTopology::Hexa Hexa;  ; typedef sofa::core::topology::BaseMeshTopology::SeqLines SeqLines;  ; typedef sofa::core::topology::BaseMeshTopology::SeqEdges SeqEdges;  ; typedef",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1mapping_1_1linear.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mapping_1_1linear.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mapping_1_1linear.html:2581,Usability,Simpl,SimpleTesselatedTetraTopologicalMapping,2581,"eal >, TInReal >, sofa::defaulttype::StdRigidTypes< 3, TOutReal > >;  ; class  BeamLinearMapping;  ; struct  RigidMappingMatrixHelper;  ; struct  RigidMappingMatrixHelper< 2, Real >;  ; struct  RigidMappingMatrixHelper< 3, Real >;  ; class  CenterOfMassMapping;  ; struct  CenterOfMassMappingOperation;  ; class  CenterOfMassMulti2Mapping;  ; class  CenterOfMassMultiMapping;  ; class  DeformableOnRigidFrameMappingInternalData;  Maps a deformable mechanical state to another deformable mechanical state mapped onto a rigid frame. Inputs: One Vec3 and One Rigid mechanical objects Output: One Vec3 mechanical object. More...;  ; class  DeformableOnRigidFrameMapping;  ; class  IdentityMapping;  ; class  IdentityMultiMapping;  concatanate several entire mechanical states together More...;  ; class  LineSetSkinningMapping;  ; class  Mesh2PointMechanicalMapping;  ; class  Mesh2PointTopologicalMapping;  ; class  SimpleTesselatedHexaTopologicalMapping;  ; class  SimpleTesselatedTetraMechanicalMapping;  ; class  SimpleTesselatedTetraTopologicalMapping;  ; class  SkinningMapping;  ; class  SubsetMappingInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  SubsetMapping;  Compute a subset of input points. More...;  ; class  SubsetMultiMapping;  ; class  TubularMapping;  ; class  VoidMapping;  . Typedefs; typedef sofa::core::topology::BaseMeshTopology::Edge Edge;  ; typedef sofa::core::topology::BaseMeshTopology::Hexahedron Hexahedron;  ; typedef sofa::core::topology::BaseMeshTopology::Triangle Triangle;  ; typedef sofa::core::topology::BaseMeshTopology::Quad Quad;  ; typedef sofa::core::topology::BaseMeshTopology::Tetrahedron Tetrahedron;  ; typedef sofa::core::topology::BaseMeshTopology::Tetra Tetra;  ; typedef sofa::core::topology::BaseMeshTopology::Hexa Hexa;  ; typedef sofa::core::topology::BaseMeshTopology::SeqLines SeqLines;  ; typedef sofa::core::topology::BaseMeshTopology::SeqEdges SeqEdges;  ; typedef",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1mapping_1_1linear.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mapping_1_1linear.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mapping_1_1nonlinear.html:194,Modifiability,Variab,Variables,194,"﻿. SOFA API: sofa::component::mapping::nonlinear Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions |; Variables . sofa::component::mapping::nonlinear Namespace Reference . Namespaces;  impl;  . Classes; class  AreaMapping;  ; class  BaseNonLinearMapping;  ; class  DistanceFromTargetMappingInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; struct  BaseDistanceFromTargetMapping;  ; class  DistanceFromTargetMapping;  ; class  DistanceMapping;  ; class  DistanceMultiMapping;  ; class  NonLinearMappingData;  ; class  RigidMappingInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  RigidMapping;  ; struct  RigidMappingMatrixHelper;  ; struct  RigidMappingMatrixHelper< 2, Real >;  ; struct  RigidMappingMatrixHelper< 3, Real >;  ; class  SquareDistanceMapping;  ; class  SquareMapping;  ; class  VolumeMapping;  . Typedefs; using StabilizedNonLinearMappingData = NonLinearMappingData< true >;  . Functions; void registerAreaMapping (sofa::core::ObjectFactory *factory);  ; void registerDistanceFromTargetMapping (sofa::core::ObjectFactory *factory);  ; void registerDistanceMapping (sofa::core::ObjectFactory *factory);  ; void registerDistanceMultiMapping (sofa::core::ObjectFactory *factory);  ; void registerRigidMapping (sofa::core::ObjectFactory *factory);  ; void registerSquareDistanceMapping (sofa::core::ObjectFactory *factory);  ; void registerSquareMapping (sofa::core::ObjectFactory *factory);  ; void registerVolumeMapping (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void in",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1mapping_1_1nonlinear.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mapping_1_1nonlinear.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mapping_1_1nonlinear.html:2011,Modifiability,Variab,Variables,2011,"alModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; template class SOFA_COMPONENT_MAPPING_NONLINEAR_API AreaMapping< Vec3Types, Vec1Types >;  ; template class SOFA_COMPONENT_MAPPING_NONLINEAR_API DistanceFromTargetMapping< Vec3Types, Vec1Types >;  ; template class SOFA_COMPONENT_MAPPING_NONLINEAR_API DistanceFromTargetMapping< Vec1Types, Vec1Types >;  ; template class SOFA_COMPONENT_MAPPING_NONLINEAR_API DistanceFromTargetMapping< Rigid3Types, Vec1Types >;  ; template class SOFA_COMPONENT_MAPPING_NONLINEAR_API DistanceMapping< Vec3Types, Vec1Types >;  ; template class SOFA_COMPONENT_MAPPING_NONLINEAR_API DistanceMapping< Rigid3Types, Vec1Types >;  ; template class SOFA_COMPONENT_MAPPING_NONLINEAR_API DistanceMultiMapping< Vec3Types, Vec1Types >;  ; template class SOFA_COMPONENT_MAPPING_NONLINEAR_API DistanceMultiMapping< Rigid3Types, Vec1Types >;  ; template class SOFA_COMPONENT_MAPPING_NONLINEAR_API RigidMapping< Rigid3Types, Vec3Types >;  ; template class SOFA_COMPONENT_MAPPING_NONLINEAR_API RigidMapping< Rigid3Types, Rigid3Types >;  ; template class SOFA_COMPONENT_MAPPING_NONLINEAR_API RigidMapping< Rigid2Types, Vec2Types >;  ; template class SOFA_COMPONENT_MAPPING_NONLINEAR_API SquareDistanceMapping< Vec3Types, Vec1Types >;  ; template class SOFA_COMPONENT_MAPPING_NONLINEAR_API SquareDistanceMapping< Rigid3Types, Vec1Types >;  ; template class SOFA_COMPONENT_MAPPING_NONLINEAR_API SquareMapping< Vec1Types, Vec1Types >;  ; template class SOFA_COMPONENT_MAPPING_NONLINEAR_API VolumeMapping< Vec3Types, Vec1Types >;  . Typedef Documentation. ◆ StabilizedNonLinearMappingData. using sofa::component::mapping::nonlinear::StabilizedNonLinearMappingData = typedef NonLinearMappingData<true>. Function Documentation. ◆ getModuleName(). const char * sofa::component::mappin",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1mapping_1_1nonlinear.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mapping_1_1nonlinear.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mapping_1_1nonlinear.html:5353,Modifiability,Variab,Variable,5353,"ry * ; factory). ◆ registerDistanceMapping(). void sofa::component::mapping::nonlinear::registerDistanceMapping ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDistanceMultiMapping(). void sofa::component::mapping::nonlinear::registerDistanceMultiMapping ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::mapping::nonlinear::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRigidMapping(). void sofa::component::mapping::nonlinear::registerRigidMapping ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSquareDistanceMapping(). void sofa::component::mapping::nonlinear::registerSquareDistanceMapping ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSquareMapping(). void sofa::component::mapping::nonlinear::registerSquareMapping ; (; sofa::core::ObjectFactory * ; factory). ◆ registerVolumeMapping(). void sofa::component::mapping::nonlinear::registerVolumeMapping ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ AreaMapping< Vec3Types, Vec1Types >. template class SOFA_COMPONENT_MAPPING_NONLINEAR_API sofa::component::mapping::nonlinear::AreaMapping< Vec3Types, Vec1Types >. ◆ DistanceFromTargetMapping< Rigid3Types, Vec1Types >. template class SOFA_COMPONENT_MAPPING_NONLINEAR_API sofa::component::mapping::nonlinear::DistanceFromTargetMapping< Rigid3Types, Vec1Types >. ◆ DistanceFromTargetMapping< Vec1Types, Vec1Types >. template class SOFA_COMPONENT_MAPPING_NONLINEAR_API sofa::component::mapping::nonlinear::DistanceFromTargetMapping< Vec1Types, Vec1Types >. ◆ DistanceFromTargetMapping< Vec3Types, Vec1Types >. template class SOFA_COMPONENT_MAPPING_NONLINEAR_API sofa::component::mapping::nonlinear::DistanceFromTargetMapping< Vec3Types, Vec1Types >. ◆ DistanceMapping< Rigid3Types, Vec1Types >. template class SOFA_COMPONENT_MAPPING_NONLINEAR_API sofa::component::mapping::nonlinear::DistanceMapping< Rigid3Types, Vec1Types >. ◆ DistanceMapping< Vec3Types, Vec1Types >. template class SOFA",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1mapping_1_1nonlinear.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mapping_1_1nonlinear.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mass.html:154,Modifiability,Variab,Variables,154,"﻿. SOFA API: sofa::component::mass Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::mass Namespace Reference . Classes; struct  AddMToMatrixFunctor;  ; struct  AddMToMatrixFunctor< defaulttype::RigidDeriv< N, Real >, defaulttype::RigidMass< N, Real >, MatrixType >;  ; class  DiagonalMassInternalData;  ; class  DiagonalMass;  This component computes the integral of this mass density over the volume of the object geometry but it supposes that the Mass matrix is diagonal. More...;  ; struct  MassType;  ; class  MeshMatrixMassInternalData;  ; class  MeshMatrixMass;  This component computes the integral of this mass density over the volume of the object geometry. More...;  ; struct  MassType< sofa::defaulttype::StdRigidTypes< N, real > >;  ; class  UniformMass;  ; struct  MassType< defaulttype::StdVectorTypes< TCoord, TDeriv, TReal > >;  . Functions; void registerDiagonalMass (sofa::core::ObjectFactory *factory);  ; void registerMeshMatrixMass (sofa::core::ObjectFactory *factory);  ; void registerUniformMass (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  ; template<class MassType > ; void parseMassTemplate (sofa::core::objectmodel::BaseObjectDescription *arg, const core::behavior::BaseMass *mass);  ; Mat3x3d MatrixFromEulerXYZ (double thetaX, double thetaY, double thetaZ);  . Variables; template class SOFA_COMPONENT_MASS_API DiagonalMass< Vec3Types >;  ; template class SOFA_COMPONENT_MASS_API DiagonalMass< Vec2Types >;  ; template class SOFA_COMPONENT_MASS_API DiagonalMass< Vec2Types, Vec3Types >;  ; template class SOFA_COMPONENT_MASS_API DiagonalMass< Vec1Types >;  ; template class SOFA_COMPONE",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1mass.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mass.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mass.html:1676,Modifiability,Variab,Variables,1676,"EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  ; template<class MassType > ; void parseMassTemplate (sofa::core::objectmodel::BaseObjectDescription *arg, const core::behavior::BaseMass *mass);  ; Mat3x3d MatrixFromEulerXYZ (double thetaX, double thetaY, double thetaZ);  . Variables; template class SOFA_COMPONENT_MASS_API DiagonalMass< Vec3Types >;  ; template class SOFA_COMPONENT_MASS_API DiagonalMass< Vec2Types >;  ; template class SOFA_COMPONENT_MASS_API DiagonalMass< Vec2Types, Vec3Types >;  ; template class SOFA_COMPONENT_MASS_API DiagonalMass< Vec1Types >;  ; template class SOFA_COMPONENT_MASS_API DiagonalMass< Vec1Types, Vec2Types >;  ; template class SOFA_COMPONENT_MASS_API DiagonalMass< Vec1Types, Vec3Types >;  ; template class SOFA_COMPONENT_MASS_API DiagonalMass< Rigid3Types >;  ; template class SOFA_COMPONENT_MASS_API DiagonalMass< Rigid2Types >;  ; template class SOFA_COMPONENT_MASS_API DiagonalMass< Rigid2Types, Rigid3Types >;  ; template class SOFA_COMPONENT_MASS_API UniformMass< Vec3Types >;  ; template class SOFA_COMPONENT_MASS_API UniformMass< Vec2Types >;  ; template class SOFA_COMPONENT_MASS_API UniformMass< Vec1Types >;  ; template class SOFA_COMPONENT_MASS_API UniformMass< Vec6Types >;  ; template class SOFA_COMPONENT_MASS_API UniformMass< Rigid3Types >;  ; template class SOFA_COMPONENT_MASS_API UniformMass< Rigid2Types >;  . Function Documentation. ◆ getModuleName(). const char * sofa::component::mass::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::mass::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_MASS_API void sofa::component::mass::init ; (; ). ◆ initExternalModule(). void sofa::component::mass::initExternalModule ; (; ). ◆ MatrixFromEulerXYZ(). Mat3x3d sofa::component::mass::MatrixFromEulerXYZ ; (; double ; thetaX, . double ; thetaY",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1mass.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mass.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mass.html:4057,Modifiability,Variab,Variable,4057,"mponent::mass::initExternalModule ; (; ). ◆ MatrixFromEulerXYZ(). Mat3x3d sofa::component::mass::MatrixFromEulerXYZ ; (; double ; thetaX, . double ; thetaY, . double ; thetaZ . ). ◆ parseMassTemplate(). template<class MassType > . void sofa::component::mass::parseMassTemplate ; (; sofa::core::objectmodel::BaseObjectDescription * ; arg, . const core::behavior::BaseMass * ; mass . ). Function used in parsing some classes derived from BaseMass to warn the user how the template attributes have changed since #2644 . ◆ registerDiagonalMass(). void sofa::component::mass::registerDiagonalMass ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMeshMatrixMass(). void sofa::component::mass::registerMeshMatrixMass ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::mass::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerUniformMass(). void sofa::component::mass::registerUniformMass ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ DiagonalMass< Rigid2Types >. template class SOFA_COMPONENT_MASS_API sofa::component::mass::DiagonalMass< Rigid2Types >. ◆ DiagonalMass< Rigid2Types, Rigid3Types >. template class SOFA_COMPONENT_MASS_API sofa::component::mass::DiagonalMass< Rigid2Types, Rigid3Types >. ◆ DiagonalMass< Rigid3Types >. template class SOFA_COMPONENT_MASS_API sofa::component::mass::DiagonalMass< Rigid3Types >. ◆ DiagonalMass< Vec1Types >. template class SOFA_COMPONENT_MASS_API sofa::component::mass::DiagonalMass< Vec1Types >. ◆ DiagonalMass< Vec1Types, Vec2Types >. template class SOFA_COMPONENT_MASS_API sofa::component::mass::DiagonalMass< Vec1Types, Vec2Types >. ◆ DiagonalMass< Vec1Types, Vec3Types >. template class SOFA_COMPONENT_MASS_API sofa::component::mass::DiagonalMass< Vec1Types, Vec3Types >. ◆ DiagonalMass< Vec2Types >. template class SOFA_COMPONENT_MASS_API sofa::component::mass::DiagonalMass< Vec2Types >. ◆ DiagonalMass< Vec2Types, Vec3Types >. template class SOFA_COMPONENT_MASS_API ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1mass.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mass.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mass.html:6054,Safety,avoid,avoid,6054,"mplate class SOFA_COMPONENT_MASS_API sofa::component::mass::DiagonalMass< Rigid3Types >. ◆ DiagonalMass< Vec1Types >. template class SOFA_COMPONENT_MASS_API sofa::component::mass::DiagonalMass< Vec1Types >. ◆ DiagonalMass< Vec1Types, Vec2Types >. template class SOFA_COMPONENT_MASS_API sofa::component::mass::DiagonalMass< Vec1Types, Vec2Types >. ◆ DiagonalMass< Vec1Types, Vec3Types >. template class SOFA_COMPONENT_MASS_API sofa::component::mass::DiagonalMass< Vec1Types, Vec3Types >. ◆ DiagonalMass< Vec2Types >. template class SOFA_COMPONENT_MASS_API sofa::component::mass::DiagonalMass< Vec2Types >. ◆ DiagonalMass< Vec2Types, Vec3Types >. template class SOFA_COMPONENT_MASS_API sofa::component::mass::DiagonalMass< Vec2Types, Vec3Types >. ◆ DiagonalMass< Vec3Types >. template class SOFA_COMPONENT_MASS_API sofa::component::mass::DiagonalMass< Vec3Types >. ◆ UniformMass< Rigid2Types >. template class SOFA_COMPONENT_MASS_API sofa::component::mass::UniformMass< Rigid2Types >. ◆ UniformMass< Rigid3Types >. template class SOFA_COMPONENT_MASS_API sofa::component::mass::UniformMass< Rigid3Types >. ◆ UniformMass< Vec1Types >. template class SOFA_COMPONENT_MASS_API sofa::component::mass::UniformMass< Vec1Types >. ◆ UniformMass< Vec2Types >. template class SOFA_COMPONENT_MASS_API sofa::component::mass::UniformMass< Vec2Types >. ◆ UniformMass< Vec3Types >. template class SOFA_COMPONENT_MASS_API sofa::component::mass::UniformMass< Vec3Types >. TEMPLATE INITIALIZATION ///////////////////////////////////////////////// Force template specialization for the most common sofa type. This goes with the extern template declaration in the .h. Declaring extern template avoid the code generation of the template for each compilation unit. see: http://www.stroustrup.com/C++11FAQ.html#extern-templates . ◆ UniformMass< Vec6Types >. template class SOFA_COMPONENT_MASS_API sofa::component::mass::UniformMass< Vec6Types >. sofacomponentmass; Generated on Mon Nov 11 2024 02:51:56 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1mass.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mass.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mechanicalload.html:164,Modifiability,Variab,Variables,164,﻿. SOFA API: sofa::component::mechanicalload Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::mechanicalload Namespace Reference . Classes; class  ConicalForceFieldInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  ConicalForceField;  ; class  ConstantForceField;  Apply constant forces to given degrees of freedom. More...;  ; class  DiagonalVelocityDampingForceField;  Apply damping forces to given degrees of freedom. More...;  ; class  EdgePressureForceField;  ; class  EllipsoidForceFieldInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  EllipsoidForceField;  ; class  Gravity;  ; class  InteractionEllipsoidForceFieldInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  InteractionEllipsoidForceField;  ; class  LinearForceFieldInternalData;  ; class  LinearForceField;  ; class  OscillatingTorsionPressureForceField;  ; class  PlaneForceFieldInternalData;  ; class  PlaneForceField;  ; class  QuadPressureForceField;  QuadPressureForceField Class. More...;  ; class  SphereForceFieldInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  SphereForceField;  ; class  SurfacePressureForceField;  SurfacePressureForceField Class. More...;  ; class  TaitSurfacePressureForceField;  ; class  TorsionForceField;  TorsionForceField. More...;  ; class  TrianglePressureForceField;  ; class  UniformVelocityDampingForceField;  Apply damping forces to given degrees of freedom. More...;  . Functions; void registerConicalForceField (sofa::core::ObjectFactory *factory);  ; void registerConstantForceField (sofa::core::ObjectFactory *factory);  ; void registerDiagonalVelocityDampingForceField (sofa,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1mechanicalload.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mechanicalload.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mechanicalload.html:3616,Modifiability,Variab,Variables,3616,,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1mechanicalload.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mechanicalload.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mechanicalload.html:10937,Modifiability,Variab,Variable,10937,ressureForceField ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSphereForceField(). void sofa::component::mechanicalload::registerSphereForceField ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSurfacePressureForceField(). void sofa::component::mechanicalload::registerSurfacePressureForceField ; (; sofa::core::ObjectFactory * ; factory). ◆ registerTaitSurfacePressureForceField(). void sofa::component::mechanicalload::registerTaitSurfacePressureForceField ; (; sofa::core::ObjectFactory * ; factory). ◆ registerTorsionForceField(). void sofa::component::mechanicalload::registerTorsionForceField ; (; sofa::core::ObjectFactory * ; factory). ◆ registerTrianglePressureForceField(). void sofa::component::mechanicalload::registerTrianglePressureForceField ; (; sofa::core::ObjectFactory * ; factory). ◆ registerUniformVelocityDampingForceField(). void sofa::component::mechanicalload::registerUniformVelocityDampingForceField ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ ConstantForceField< Rigid2Types >. template class SOFA_COMPONENT_MECHANICALLOAD_API sofa::component::mechanicalload::ConstantForceField< Rigid2Types >. ◆ ConstantForceField< Rigid3Types >. template class SOFA_COMPONENT_MECHANICALLOAD_API sofa::component::mechanicalload::ConstantForceField< Rigid3Types >. ◆ ConstantForceField< Vec1Types >. template class SOFA_COMPONENT_MECHANICALLOAD_API sofa::component::mechanicalload::ConstantForceField< Vec1Types >. ◆ ConstantForceField< Vec2Types >. template class SOFA_COMPONENT_MECHANICALLOAD_API sofa::component::mechanicalload::ConstantForceField< Vec2Types >. ◆ ConstantForceField< Vec3Types >. template class SOFA_COMPONENT_MECHANICALLOAD_API sofa::component::mechanicalload::ConstantForceField< Vec3Types >. ◆ ConstantForceField< Vec6Types >. template class SOFA_COMPONENT_MECHANICALLOAD_API sofa::component::mechanicalload::ConstantForceField< Vec6Types >. ◆ DiagonalVelocityDampingForceField< Rigid2Types >. template class SOFA_COMPONE,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1mechanicalload.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mechanicalload.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1odesolver.html:250,Testability,test,testing,250,﻿. SOFA API: sofa::component::odesolver Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Functions . sofa::component::odesolver Namespace Reference . Namespaces;  backward;  ;  forward;  ;  testing;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::odesolver::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::odesolver::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_ODESOLVER_API void sofa::component::odesolver::init ; (; ). ◆ initExternalModule(). void sofa::component::odesolver::initExternalModule ; (; ). ◆ registerObjects(). void sofa::component::odesolver::registerObjects ; (; sofa::core::ObjectFactory * ; factory). sofacomponentodesolver; Generated on Mon Nov 11 2024 02:56:13 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1odesolver.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1odesolver.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1odesolver_1_1testing.html:41,Testability,test,testing,41,"﻿. SOFA API: sofa::component::odesolver::testing Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::odesolver::testing Namespace Reference . Classes; class  GetVectorVisitor;  ; class  GetAssembledSizeVisitor;  ; struct  ODESolverSpringTest;  . Functions; Eigen::VectorXd getVector (simulation::Node::SPtr root, core::ConstVecId id, bool indep=true);  ; simulation::Node::SPtr createMassSpringSystem (simulation::Node::SPtr root, const std::string &stiffness, const std::string &mass, const std::string &restLength, const std::string &xFixedPoint, const std::string &vFixedPoint, const std::string &xMass, const std::string &vMass);  Create a mass spring system. More...;  ; template<typename DataTypes > ; simulation::Node::SPtr createMassSpringSystem (simulation::Node::SPtr root, double stiffness, double mass, double restLength, typename DataTypes::VecCoord xFixedPoint, typename DataTypes::VecDeriv vFixedPoint, typename DataTypes::VecCoord xMass, typename DataTypes::VecDeriv vMass);  . Function Documentation. ◆ createMassSpringSystem() [1/2]. simulation::Node::SPtr sofa::component::odesolver::testing::createMassSpringSystem ; (; simulation::Node::SPtr ; root, . const std::string & ; stiffness, . const std::string & ; mass, . const std::string & ; restLength, . const std::string & ; xFixedPoint, . const std::string & ; vFixedPoint, . const std::string & ; xMass, . const std::string & ; vMass . ). inline . Create a mass spring system. . ◆ createMassSpringSystem() [2/2]. template<typename DataTypes > . simulation::Node::SPtr sofa::component::odesolver::testing::createMassSpringSystem ; (; simulation::Node::SPtr ; root, . double ; stiffness, . double ; mass, . double ; restLength, . typename DataTypes::VecCoord ; xFixedPoint, . typename DataTypes::VecDeriv ; vFixedPoint, . typename DataTypes::VecCoord ; xMass, . typename DataTypes::VecDeriv ; vMass . ). inline . ◆ getVector(). Eigen::VectorXd sof",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1odesolver_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1odesolver_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1odesolver_1_1testing.html:195,Testability,test,testing,195,"﻿. SOFA API: sofa::component::odesolver::testing Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::odesolver::testing Namespace Reference . Classes; class  GetVectorVisitor;  ; class  GetAssembledSizeVisitor;  ; struct  ODESolverSpringTest;  . Functions; Eigen::VectorXd getVector (simulation::Node::SPtr root, core::ConstVecId id, bool indep=true);  ; simulation::Node::SPtr createMassSpringSystem (simulation::Node::SPtr root, const std::string &stiffness, const std::string &mass, const std::string &restLength, const std::string &xFixedPoint, const std::string &vFixedPoint, const std::string &xMass, const std::string &vMass);  Create a mass spring system. More...;  ; template<typename DataTypes > ; simulation::Node::SPtr createMassSpringSystem (simulation::Node::SPtr root, double stiffness, double mass, double restLength, typename DataTypes::VecCoord xFixedPoint, typename DataTypes::VecDeriv vFixedPoint, typename DataTypes::VecCoord xMass, typename DataTypes::VecDeriv vMass);  . Function Documentation. ◆ createMassSpringSystem() [1/2]. simulation::Node::SPtr sofa::component::odesolver::testing::createMassSpringSystem ; (; simulation::Node::SPtr ; root, . const std::string & ; stiffness, . const std::string & ; mass, . const std::string & ; restLength, . const std::string & ; xFixedPoint, . const std::string & ; vFixedPoint, . const std::string & ; xMass, . const std::string & ; vMass . ). inline . Create a mass spring system. . ◆ createMassSpringSystem() [2/2]. template<typename DataTypes > . simulation::Node::SPtr sofa::component::odesolver::testing::createMassSpringSystem ; (; simulation::Node::SPtr ; root, . double ; stiffness, . double ; mass, . double ; restLength, . typename DataTypes::VecCoord ; xFixedPoint, . typename DataTypes::VecDeriv ; vFixedPoint, . typename DataTypes::VecCoord ; xMass, . typename DataTypes::VecDeriv ; vMass . ). inline . ◆ getVector(). Eigen::VectorXd sof",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1odesolver_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1odesolver_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1odesolver_1_1testing.html:1186,Testability,test,testing,1186,":testing Namespace Reference . Classes; class  GetVectorVisitor;  ; class  GetAssembledSizeVisitor;  ; struct  ODESolverSpringTest;  . Functions; Eigen::VectorXd getVector (simulation::Node::SPtr root, core::ConstVecId id, bool indep=true);  ; simulation::Node::SPtr createMassSpringSystem (simulation::Node::SPtr root, const std::string &stiffness, const std::string &mass, const std::string &restLength, const std::string &xFixedPoint, const std::string &vFixedPoint, const std::string &xMass, const std::string &vMass);  Create a mass spring system. More...;  ; template<typename DataTypes > ; simulation::Node::SPtr createMassSpringSystem (simulation::Node::SPtr root, double stiffness, double mass, double restLength, typename DataTypes::VecCoord xFixedPoint, typename DataTypes::VecDeriv vFixedPoint, typename DataTypes::VecCoord xMass, typename DataTypes::VecDeriv vMass);  . Function Documentation. ◆ createMassSpringSystem() [1/2]. simulation::Node::SPtr sofa::component::odesolver::testing::createMassSpringSystem ; (; simulation::Node::SPtr ; root, . const std::string & ; stiffness, . const std::string & ; mass, . const std::string & ; restLength, . const std::string & ; xFixedPoint, . const std::string & ; vFixedPoint, . const std::string & ; xMass, . const std::string & ; vMass . ). inline . Create a mass spring system. . ◆ createMassSpringSystem() [2/2]. template<typename DataTypes > . simulation::Node::SPtr sofa::component::odesolver::testing::createMassSpringSystem ; (; simulation::Node::SPtr ; root, . double ; stiffness, . double ; mass, . double ; restLength, . typename DataTypes::VecCoord ; xFixedPoint, . typename DataTypes::VecDeriv ; vFixedPoint, . typename DataTypes::VecCoord ; xMass, . typename DataTypes::VecDeriv ; vMass . ). inline . ◆ getVector(). Eigen::VectorXd sofa::component::odesolver::testing::getVector ; (; simulation::Node::SPtr ; root, . core::ConstVecId ; id, . bool ; indep = true . ). inline . sofacomponentodesolvertesting; Generated on Mon Nov 1",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1odesolver_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1odesolver_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1odesolver_1_1testing.html:1652,Testability,test,testing,1652,"lass  GetVectorVisitor;  ; class  GetAssembledSizeVisitor;  ; struct  ODESolverSpringTest;  . Functions; Eigen::VectorXd getVector (simulation::Node::SPtr root, core::ConstVecId id, bool indep=true);  ; simulation::Node::SPtr createMassSpringSystem (simulation::Node::SPtr root, const std::string &stiffness, const std::string &mass, const std::string &restLength, const std::string &xFixedPoint, const std::string &vFixedPoint, const std::string &xMass, const std::string &vMass);  Create a mass spring system. More...;  ; template<typename DataTypes > ; simulation::Node::SPtr createMassSpringSystem (simulation::Node::SPtr root, double stiffness, double mass, double restLength, typename DataTypes::VecCoord xFixedPoint, typename DataTypes::VecDeriv vFixedPoint, typename DataTypes::VecCoord xMass, typename DataTypes::VecDeriv vMass);  . Function Documentation. ◆ createMassSpringSystem() [1/2]. simulation::Node::SPtr sofa::component::odesolver::testing::createMassSpringSystem ; (; simulation::Node::SPtr ; root, . const std::string & ; stiffness, . const std::string & ; mass, . const std::string & ; restLength, . const std::string & ; xFixedPoint, . const std::string & ; vFixedPoint, . const std::string & ; xMass, . const std::string & ; vMass . ). inline . Create a mass spring system. . ◆ createMassSpringSystem() [2/2]. template<typename DataTypes > . simulation::Node::SPtr sofa::component::odesolver::testing::createMassSpringSystem ; (; simulation::Node::SPtr ; root, . double ; stiffness, . double ; mass, . double ; restLength, . typename DataTypes::VecCoord ; xFixedPoint, . typename DataTypes::VecDeriv ; vFixedPoint, . typename DataTypes::VecCoord ; xMass, . typename DataTypes::VecDeriv ; vMass . ). inline . ◆ getVector(). Eigen::VectorXd sofa::component::odesolver::testing::getVector ; (; simulation::Node::SPtr ; root, . core::ConstVecId ; id, . bool ; indep = true . ). inline . sofacomponentodesolvertesting; Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1odesolver_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1odesolver_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1odesolver_1_1testing.html:2026,Testability,test,testing,2026,"lass  GetVectorVisitor;  ; class  GetAssembledSizeVisitor;  ; struct  ODESolverSpringTest;  . Functions; Eigen::VectorXd getVector (simulation::Node::SPtr root, core::ConstVecId id, bool indep=true);  ; simulation::Node::SPtr createMassSpringSystem (simulation::Node::SPtr root, const std::string &stiffness, const std::string &mass, const std::string &restLength, const std::string &xFixedPoint, const std::string &vFixedPoint, const std::string &xMass, const std::string &vMass);  Create a mass spring system. More...;  ; template<typename DataTypes > ; simulation::Node::SPtr createMassSpringSystem (simulation::Node::SPtr root, double stiffness, double mass, double restLength, typename DataTypes::VecCoord xFixedPoint, typename DataTypes::VecDeriv vFixedPoint, typename DataTypes::VecCoord xMass, typename DataTypes::VecDeriv vMass);  . Function Documentation. ◆ createMassSpringSystem() [1/2]. simulation::Node::SPtr sofa::component::odesolver::testing::createMassSpringSystem ; (; simulation::Node::SPtr ; root, . const std::string & ; stiffness, . const std::string & ; mass, . const std::string & ; restLength, . const std::string & ; xFixedPoint, . const std::string & ; vFixedPoint, . const std::string & ; xMass, . const std::string & ; vMass . ). inline . Create a mass spring system. . ◆ createMassSpringSystem() [2/2]. template<typename DataTypes > . simulation::Node::SPtr sofa::component::odesolver::testing::createMassSpringSystem ; (; simulation::Node::SPtr ; root, . double ; stiffness, . double ; mass, . double ; restLength, . typename DataTypes::VecCoord ; xFixedPoint, . typename DataTypes::VecDeriv ; vFixedPoint, . typename DataTypes::VecCoord ; xMass, . typename DataTypes::VecDeriv ; vMass . ). inline . ◆ getVector(). Eigen::VectorXd sofa::component::odesolver::testing::getVector ; (; simulation::Node::SPtr ; root, . core::ConstVecId ; id, . bool ; indep = true . ). inline . sofacomponentodesolvertesting; Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1odesolver_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1odesolver_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1sceneutility.html:513,Integrability,Message,MessageHandlerComponent,513,﻿. SOFA API: sofa::component::sceneutility Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Functions . sofa::component::sceneutility Namespace Reference . Namespaces;  infocomponent;  ;  makealiascomponent;  ;  makedataaliascomponent;  . Classes; class  BaseAddResourceRepository;  ; class  AddDataRepository;  Add a new path to DataRepository. More...;  ; class  AddPluginRepository;  Add a new path to PluginRepository. More...;  ; class  MessageHandlerComponent;  A sofa component to add a MessageHandler to the main logger. More...;  ; class  FileMessageHandlerComponent;  A sofa component to add a FileMessageHandlerComponent to the main logger. More...;  ; class  PauseAnimation;  ; class  PauseAnimationOnEvent;  . Functions; void registerAddDataRepository (sofa::core::ObjectFactory *factory);  ; void registerAddPluginRepository (sofa::core::ObjectFactory *factory);  ; void registerAPIVersion (sofa::core::ObjectFactory *factory);  ; void registerInfoComponent (sofa::core::ObjectFactory *factory);  ; void registerFileMessageHandlerComponent (sofa::core::ObjectFactory *factory);  ; void registerMakeAliasComponent (sofa::core::ObjectFactory *factory);  ; void registerMakeDataAliasComponent (sofa::core::ObjectFactory *factory);  ; void registerMessageHandlerComponent (sofa::core::ObjectFactory *factory);  ; void registerPauseAnimationOnEvent (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::sceneutility::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::sceneutility::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_SCENEUTILITY_,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1sceneutility.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1sceneutility.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1sceneutility.html:565,Integrability,Message,MessageHandler,565,﻿. SOFA API: sofa::component::sceneutility Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Functions . sofa::component::sceneutility Namespace Reference . Namespaces;  infocomponent;  ;  makealiascomponent;  ;  makedataaliascomponent;  . Classes; class  BaseAddResourceRepository;  ; class  AddDataRepository;  Add a new path to DataRepository. More...;  ; class  AddPluginRepository;  Add a new path to PluginRepository. More...;  ; class  MessageHandlerComponent;  A sofa component to add a MessageHandler to the main logger. More...;  ; class  FileMessageHandlerComponent;  A sofa component to add a FileMessageHandlerComponent to the main logger. More...;  ; class  PauseAnimation;  ; class  PauseAnimationOnEvent;  . Functions; void registerAddDataRepository (sofa::core::ObjectFactory *factory);  ; void registerAddPluginRepository (sofa::core::ObjectFactory *factory);  ; void registerAPIVersion (sofa::core::ObjectFactory *factory);  ; void registerInfoComponent (sofa::core::ObjectFactory *factory);  ; void registerFileMessageHandlerComponent (sofa::core::ObjectFactory *factory);  ; void registerMakeAliasComponent (sofa::core::ObjectFactory *factory);  ; void registerMakeDataAliasComponent (sofa::core::ObjectFactory *factory);  ; void registerMessageHandlerComponent (sofa::core::ObjectFactory *factory);  ; void registerPauseAnimationOnEvent (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::sceneutility::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::sceneutility::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_SCENEUTILITY_,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1sceneutility.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1sceneutility.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1sceneutility.html:476,Modifiability,Plugin,PluginRepository,476,﻿. SOFA API: sofa::component::sceneutility Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Functions . sofa::component::sceneutility Namespace Reference . Namespaces;  infocomponent;  ;  makealiascomponent;  ;  makedataaliascomponent;  . Classes; class  BaseAddResourceRepository;  ; class  AddDataRepository;  Add a new path to DataRepository. More...;  ; class  AddPluginRepository;  Add a new path to PluginRepository. More...;  ; class  MessageHandlerComponent;  A sofa component to add a MessageHandler to the main logger. More...;  ; class  FileMessageHandlerComponent;  A sofa component to add a FileMessageHandlerComponent to the main logger. More...;  ; class  PauseAnimation;  ; class  PauseAnimationOnEvent;  . Functions; void registerAddDataRepository (sofa::core::ObjectFactory *factory);  ; void registerAddPluginRepository (sofa::core::ObjectFactory *factory);  ; void registerAPIVersion (sofa::core::ObjectFactory *factory);  ; void registerInfoComponent (sofa::core::ObjectFactory *factory);  ; void registerFileMessageHandlerComponent (sofa::core::ObjectFactory *factory);  ; void registerMakeAliasComponent (sofa::core::ObjectFactory *factory);  ; void registerMakeDataAliasComponent (sofa::core::ObjectFactory *factory);  ; void registerMessageHandlerComponent (sofa::core::ObjectFactory *factory);  ; void registerPauseAnimationOnEvent (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::sceneutility::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::sceneutility::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_SCENEUTILITY_,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1sceneutility.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1sceneutility.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1sceneutility.html:592,Testability,log,logger,592,﻿. SOFA API: sofa::component::sceneutility Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Functions . sofa::component::sceneutility Namespace Reference . Namespaces;  infocomponent;  ;  makealiascomponent;  ;  makedataaliascomponent;  . Classes; class  BaseAddResourceRepository;  ; class  AddDataRepository;  Add a new path to DataRepository. More...;  ; class  AddPluginRepository;  Add a new path to PluginRepository. More...;  ; class  MessageHandlerComponent;  A sofa component to add a MessageHandler to the main logger. More...;  ; class  FileMessageHandlerComponent;  A sofa component to add a FileMessageHandlerComponent to the main logger. More...;  ; class  PauseAnimation;  ; class  PauseAnimationOnEvent;  . Functions; void registerAddDataRepository (sofa::core::ObjectFactory *factory);  ; void registerAddPluginRepository (sofa::core::ObjectFactory *factory);  ; void registerAPIVersion (sofa::core::ObjectFactory *factory);  ; void registerInfoComponent (sofa::core::ObjectFactory *factory);  ; void registerFileMessageHandlerComponent (sofa::core::ObjectFactory *factory);  ; void registerMakeAliasComponent (sofa::core::ObjectFactory *factory);  ; void registerMakeDataAliasComponent (sofa::core::ObjectFactory *factory);  ; void registerMessageHandlerComponent (sofa::core::ObjectFactory *factory);  ; void registerPauseAnimationOnEvent (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::sceneutility::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::sceneutility::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_SCENEUTILITY_,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1sceneutility.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1sceneutility.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1sceneutility.html:715,Testability,log,logger,715,﻿. SOFA API: sofa::component::sceneutility Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Functions . sofa::component::sceneutility Namespace Reference . Namespaces;  infocomponent;  ;  makealiascomponent;  ;  makedataaliascomponent;  . Classes; class  BaseAddResourceRepository;  ; class  AddDataRepository;  Add a new path to DataRepository. More...;  ; class  AddPluginRepository;  Add a new path to PluginRepository. More...;  ; class  MessageHandlerComponent;  A sofa component to add a MessageHandler to the main logger. More...;  ; class  FileMessageHandlerComponent;  A sofa component to add a FileMessageHandlerComponent to the main logger. More...;  ; class  PauseAnimation;  ; class  PauseAnimationOnEvent;  . Functions; void registerAddDataRepository (sofa::core::ObjectFactory *factory);  ; void registerAddPluginRepository (sofa::core::ObjectFactory *factory);  ; void registerAPIVersion (sofa::core::ObjectFactory *factory);  ; void registerInfoComponent (sofa::core::ObjectFactory *factory);  ; void registerFileMessageHandlerComponent (sofa::core::ObjectFactory *factory);  ; void registerMakeAliasComponent (sofa::core::ObjectFactory *factory);  ; void registerMakeDataAliasComponent (sofa::core::ObjectFactory *factory);  ; void registerMessageHandlerComponent (sofa::core::ObjectFactory *factory);  ; void registerPauseAnimationOnEvent (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::sceneutility::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::sceneutility::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_SCENEUTILITY_,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1sceneutility.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1sceneutility.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1sceneutility.html:742,Usability,Pause,PauseAnimation,742,﻿. SOFA API: sofa::component::sceneutility Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Functions . sofa::component::sceneutility Namespace Reference . Namespaces;  infocomponent;  ;  makealiascomponent;  ;  makedataaliascomponent;  . Classes; class  BaseAddResourceRepository;  ; class  AddDataRepository;  Add a new path to DataRepository. More...;  ; class  AddPluginRepository;  Add a new path to PluginRepository. More...;  ; class  MessageHandlerComponent;  A sofa component to add a MessageHandler to the main logger. More...;  ; class  FileMessageHandlerComponent;  A sofa component to add a FileMessageHandlerComponent to the main logger. More...;  ; class  PauseAnimation;  ; class  PauseAnimationOnEvent;  . Functions; void registerAddDataRepository (sofa::core::ObjectFactory *factory);  ; void registerAddPluginRepository (sofa::core::ObjectFactory *factory);  ; void registerAPIVersion (sofa::core::ObjectFactory *factory);  ; void registerInfoComponent (sofa::core::ObjectFactory *factory);  ; void registerFileMessageHandlerComponent (sofa::core::ObjectFactory *factory);  ; void registerMakeAliasComponent (sofa::core::ObjectFactory *factory);  ; void registerMakeDataAliasComponent (sofa::core::ObjectFactory *factory);  ; void registerMessageHandlerComponent (sofa::core::ObjectFactory *factory);  ; void registerPauseAnimationOnEvent (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::sceneutility::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::sceneutility::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_SCENEUTILITY_,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1sceneutility.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1sceneutility.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1sceneutility.html:768,Usability,Pause,PauseAnimationOnEvent,768,﻿. SOFA API: sofa::component::sceneutility Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Functions . sofa::component::sceneutility Namespace Reference . Namespaces;  infocomponent;  ;  makealiascomponent;  ;  makedataaliascomponent;  . Classes; class  BaseAddResourceRepository;  ; class  AddDataRepository;  Add a new path to DataRepository. More...;  ; class  AddPluginRepository;  Add a new path to PluginRepository. More...;  ; class  MessageHandlerComponent;  A sofa component to add a MessageHandler to the main logger. More...;  ; class  FileMessageHandlerComponent;  A sofa component to add a FileMessageHandlerComponent to the main logger. More...;  ; class  PauseAnimation;  ; class  PauseAnimationOnEvent;  . Functions; void registerAddDataRepository (sofa::core::ObjectFactory *factory);  ; void registerAddPluginRepository (sofa::core::ObjectFactory *factory);  ; void registerAPIVersion (sofa::core::ObjectFactory *factory);  ; void registerInfoComponent (sofa::core::ObjectFactory *factory);  ; void registerFileMessageHandlerComponent (sofa::core::ObjectFactory *factory);  ; void registerMakeAliasComponent (sofa::core::ObjectFactory *factory);  ; void registerMakeDataAliasComponent (sofa::core::ObjectFactory *factory);  ; void registerMessageHandlerComponent (sofa::core::ObjectFactory *factory);  ; void registerPauseAnimationOnEvent (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::sceneutility::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::sceneutility::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_SCENEUTILITY_,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1sceneutility.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1sceneutility.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html:253,Deployability,configurat,configuration,253,﻿. SOFA API: sofa::component::setting Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::setting Namespace Reference . Classes; class  BackgroundSetting;  Class for the configuration of background settings. More...;  ; class  MouseButtonSetting;  ; class  SofaDefaultPathSetting;  Class for the configuration of default path for sofa application. More...;  ; class  StatsSetting;  Class for the configuration of stats settings. More...;  ; class  ViewerSetting;  Class for the configuration of viewer settings. More...;  . Functions; void registerBackgroundSetting (sofa::core::ObjectFactory *factory);  ; void registerSofaDefaultPathSetting (sofa::core::ObjectFactory *factory);  ; void registerStatsSetting (sofa::core::ObjectFactory *factory);  ; void registerViewerSetting (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::setting::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::setting::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_SETTING_API void sofa::component::setting::init ; (; ). ◆ initExternalModule(). void sofa::component::setting::initExternalModule ; (; ). ◆ registerBackgroundSetting(). void sofa::component::setting::registerBackgroundSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::setting::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSofaDefaultPathSetting(). void sofa::component::setting::registerSofaDefaultPathSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerStatsSetting(). void sofa::component::setting::registe,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html:379,Deployability,configurat,configuration,379,﻿. SOFA API: sofa::component::setting Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::setting Namespace Reference . Classes; class  BackgroundSetting;  Class for the configuration of background settings. More...;  ; class  MouseButtonSetting;  ; class  SofaDefaultPathSetting;  Class for the configuration of default path for sofa application. More...;  ; class  StatsSetting;  Class for the configuration of stats settings. More...;  ; class  ViewerSetting;  Class for the configuration of viewer settings. More...;  . Functions; void registerBackgroundSetting (sofa::core::ObjectFactory *factory);  ; void registerSofaDefaultPathSetting (sofa::core::ObjectFactory *factory);  ; void registerStatsSetting (sofa::core::ObjectFactory *factory);  ; void registerViewerSetting (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::setting::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::setting::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_SETTING_API void sofa::component::setting::init ; (; ). ◆ initExternalModule(). void sofa::component::setting::initExternalModule ; (; ). ◆ registerBackgroundSetting(). void sofa::component::setting::registerBackgroundSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::setting::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSofaDefaultPathSetting(). void sofa::component::setting::registerSofaDefaultPathSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerStatsSetting(). void sofa::component::setting::registe,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html:479,Deployability,configurat,configuration,479,﻿. SOFA API: sofa::component::setting Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::setting Namespace Reference . Classes; class  BackgroundSetting;  Class for the configuration of background settings. More...;  ; class  MouseButtonSetting;  ; class  SofaDefaultPathSetting;  Class for the configuration of default path for sofa application. More...;  ; class  StatsSetting;  Class for the configuration of stats settings. More...;  ; class  ViewerSetting;  Class for the configuration of viewer settings. More...;  . Functions; void registerBackgroundSetting (sofa::core::ObjectFactory *factory);  ; void registerSofaDefaultPathSetting (sofa::core::ObjectFactory *factory);  ; void registerStatsSetting (sofa::core::ObjectFactory *factory);  ; void registerViewerSetting (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::setting::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::setting::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_SETTING_API void sofa::component::setting::init ; (; ). ◆ initExternalModule(). void sofa::component::setting::initExternalModule ; (; ). ◆ registerBackgroundSetting(). void sofa::component::setting::registerBackgroundSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::setting::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSofaDefaultPathSetting(). void sofa::component::setting::registerSofaDefaultPathSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerStatsSetting(). void sofa::component::setting::registe,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html:561,Deployability,configurat,configuration,561,﻿. SOFA API: sofa::component::setting Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::setting Namespace Reference . Classes; class  BackgroundSetting;  Class for the configuration of background settings. More...;  ; class  MouseButtonSetting;  ; class  SofaDefaultPathSetting;  Class for the configuration of default path for sofa application. More...;  ; class  StatsSetting;  Class for the configuration of stats settings. More...;  ; class  ViewerSetting;  Class for the configuration of viewer settings. More...;  . Functions; void registerBackgroundSetting (sofa::core::ObjectFactory *factory);  ; void registerSofaDefaultPathSetting (sofa::core::ObjectFactory *factory);  ; void registerStatsSetting (sofa::core::ObjectFactory *factory);  ; void registerViewerSetting (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::setting::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::setting::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_SETTING_API void sofa::component::setting::init ; (; ). ◆ initExternalModule(). void sofa::component::setting::initExternalModule ; (; ). ◆ registerBackgroundSetting(). void sofa::component::setting::registerBackgroundSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::setting::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSofaDefaultPathSetting(). void sofa::component::setting::registerSofaDefaultPathSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerStatsSetting(). void sofa::component::setting::registe,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html:253,Modifiability,config,configuration,253,﻿. SOFA API: sofa::component::setting Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::setting Namespace Reference . Classes; class  BackgroundSetting;  Class for the configuration of background settings. More...;  ; class  MouseButtonSetting;  ; class  SofaDefaultPathSetting;  Class for the configuration of default path for sofa application. More...;  ; class  StatsSetting;  Class for the configuration of stats settings. More...;  ; class  ViewerSetting;  Class for the configuration of viewer settings. More...;  . Functions; void registerBackgroundSetting (sofa::core::ObjectFactory *factory);  ; void registerSofaDefaultPathSetting (sofa::core::ObjectFactory *factory);  ; void registerStatsSetting (sofa::core::ObjectFactory *factory);  ; void registerViewerSetting (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::setting::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::setting::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_SETTING_API void sofa::component::setting::init ; (; ). ◆ initExternalModule(). void sofa::component::setting::initExternalModule ; (; ). ◆ registerBackgroundSetting(). void sofa::component::setting::registerBackgroundSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::setting::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSofaDefaultPathSetting(). void sofa::component::setting::registerSofaDefaultPathSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerStatsSetting(). void sofa::component::setting::registe,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html:379,Modifiability,config,configuration,379,﻿. SOFA API: sofa::component::setting Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::setting Namespace Reference . Classes; class  BackgroundSetting;  Class for the configuration of background settings. More...;  ; class  MouseButtonSetting;  ; class  SofaDefaultPathSetting;  Class for the configuration of default path for sofa application. More...;  ; class  StatsSetting;  Class for the configuration of stats settings. More...;  ; class  ViewerSetting;  Class for the configuration of viewer settings. More...;  . Functions; void registerBackgroundSetting (sofa::core::ObjectFactory *factory);  ; void registerSofaDefaultPathSetting (sofa::core::ObjectFactory *factory);  ; void registerStatsSetting (sofa::core::ObjectFactory *factory);  ; void registerViewerSetting (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::setting::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::setting::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_SETTING_API void sofa::component::setting::init ; (; ). ◆ initExternalModule(). void sofa::component::setting::initExternalModule ; (; ). ◆ registerBackgroundSetting(). void sofa::component::setting::registerBackgroundSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::setting::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSofaDefaultPathSetting(). void sofa::component::setting::registerSofaDefaultPathSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerStatsSetting(). void sofa::component::setting::registe,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html:479,Modifiability,config,configuration,479,﻿. SOFA API: sofa::component::setting Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::setting Namespace Reference . Classes; class  BackgroundSetting;  Class for the configuration of background settings. More...;  ; class  MouseButtonSetting;  ; class  SofaDefaultPathSetting;  Class for the configuration of default path for sofa application. More...;  ; class  StatsSetting;  Class for the configuration of stats settings. More...;  ; class  ViewerSetting;  Class for the configuration of viewer settings. More...;  . Functions; void registerBackgroundSetting (sofa::core::ObjectFactory *factory);  ; void registerSofaDefaultPathSetting (sofa::core::ObjectFactory *factory);  ; void registerStatsSetting (sofa::core::ObjectFactory *factory);  ; void registerViewerSetting (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::setting::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::setting::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_SETTING_API void sofa::component::setting::init ; (; ). ◆ initExternalModule(). void sofa::component::setting::initExternalModule ; (; ). ◆ registerBackgroundSetting(). void sofa::component::setting::registerBackgroundSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::setting::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSofaDefaultPathSetting(). void sofa::component::setting::registerSofaDefaultPathSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerStatsSetting(). void sofa::component::setting::registe,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html:561,Modifiability,config,configuration,561,﻿. SOFA API: sofa::component::setting Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::setting Namespace Reference . Classes; class  BackgroundSetting;  Class for the configuration of background settings. More...;  ; class  MouseButtonSetting;  ; class  SofaDefaultPathSetting;  Class for the configuration of default path for sofa application. More...;  ; class  StatsSetting;  Class for the configuration of stats settings. More...;  ; class  ViewerSetting;  Class for the configuration of viewer settings. More...;  . Functions; void registerBackgroundSetting (sofa::core::ObjectFactory *factory);  ; void registerSofaDefaultPathSetting (sofa::core::ObjectFactory *factory);  ; void registerStatsSetting (sofa::core::ObjectFactory *factory);  ; void registerViewerSetting (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::setting::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::setting::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_SETTING_API void sofa::component::setting::init ; (; ). ◆ initExternalModule(). void sofa::component::setting::initExternalModule ; (; ). ◆ registerBackgroundSetting(). void sofa::component::setting::registerBackgroundSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::setting::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSofaDefaultPathSetting(). void sofa::component::setting::registerSofaDefaultPathSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerStatsSetting(). void sofa::component::setting::registe,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic.html:178,Modifiability,Variab,Variables,178,﻿. SOFA API: sofa::component::solidmechanics::fem::elastic Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::solidmechanics::fem::elastic Namespace Reference . Classes; struct  _2DMaterials;  ; struct  _3DMaterials;  ; class  BaseLinearElasticityFEMForceField;  ; class  FastTetrahedralCorotationalForceField;  ; class  FastTetrahedralCorotationalForceFieldData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  HexahedralFEMForceField;  ; class  HexahedralFEMForceFieldAndMass;  ; class  HexahedronFEMForceField;  ; class  HexahedronFEMForceFieldInternalData;  ; class  HexahedronFEMForceFieldAndMass;  ; class  QuadBendingFEMForceField;  ; class  TetrahedralCorotationalFEMForceField;  ; class  TetrahedronFEMForceField;  ; class  TetrahedronFEMForceFieldInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  TriangleFEMForceField;  ; class  TriangleFEMUtils;  ; class  TriangularAnisotropicFEMForceField;  ; class  TriangularFEMForceField;  ; class  TriangularFEMForceFieldOptim;  ; class  TriangularFEMForceFieldOptimInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  . Functions; void registerBeamFEMForceField (sofa::core::ObjectFactory *factory);  ; void registerFastTetrahedralCorotationalForceField (sofa::core::ObjectFactory *factory);  ; void registerHexahedralFEMForceField (sofa::core::ObjectFactory *factory);  ; void registerHexahedralFEMForceFieldAndMass (sofa::core::ObjectFactory *factory);  ; void registerHexahedronFEMForceField (sofa::core::ObjectFactory *factory);  ; void registerHexahedronFEMForceFieldAndMass (sofa::core::ObjectFactory *factory);  ; void registerQuadBendingFEMForceField (sofa::core::ObjectFactory *factory);  ; void registerTetrahedralCorotationalFEM,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic.html:2751,Modifiability,Variab,Variables,2751,arFEMForceFieldOptim (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; template class SOFA_COMPONENT_SOLIDMECHANICS_FEM_ELASTIC_API FastTetrahedralCorotationalForceField< Vec3Types >;  ; template class SOFA_COMPONENT_SOLIDMECHANICS_FEM_ELASTIC_API HexahedralFEMForceField< Vec3Types >;  ; template class SOFA_COMPONENT_SOLIDMECHANICS_FEM_ELASTIC_API HexahedralFEMForceFieldAndMass< Vec3Types >;  ; template class SOFA_COMPONENT_SOLIDMECHANICS_FEM_ELASTIC_API HexahedronFEMForceField< Vec3Types >;  ; template class SOFA_COMPONENT_SOLIDMECHANICS_FEM_ELASTIC_API HexahedronFEMForceFieldAndMass< Vec3Types >;  ; template class SOFA_COMPONENT_SOLIDMECHANICS_FEM_ELASTIC_API QuadBendingFEMForceField< Vec3Types >;  ; template class SOFA_COMPONENT_SOLIDMECHANICS_FEM_ELASTIC_API TetrahedralCorotationalFEMForceField< Vec3Types >;  ; template class SOFA_COMPONENT_SOLIDMECHANICS_FEM_ELASTIC_API TetrahedronFEMForceField< Vec3Types >;  ; template class SOFA_COMPONENT_SOLIDMECHANICS_FEM_ELASTIC_API TriangleFEMForceField< Vec3Types >;  ; template class SOFA_COMPONENT_SOLIDMECHANICS_FEM_ELASTIC_API TriangularAnisotropicFEMForceField< Vec3Types >;  ; template class SOFA_COMPONENT_SOLIDMECHANICS_FEM_ELASTIC_API TriangularFEMForceField< Vec3Types >;  ; template class SOFA_COMPONENT_SOLIDMECHANICS_FEM_ELASTIC_API TriangularFEMForceFieldOptim< Vec3Types >;  . Function Documentation. ◆ getModuleName(). const char * sofa::component::solidmechanics::fem::elastic::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::solidmechanics::fem::elastic::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_SOLIDMECHANICS_FEM_ELASTIC_API void sofa::component::solidmechanics::fem::elastic::init ; (; ). ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic.html:6893,Modifiability,Variab,Variable,6893,mponent::solidmechanics::fem::elastic::registerTetrahedralCorotationalFEMForceField ; (; sofa::core::ObjectFactory * ; factory). ◆ registerTetrahedronFEMForceField(). void sofa::component::solidmechanics::fem::elastic::registerTetrahedronFEMForceField ; (; sofa::core::ObjectFactory * ; factory). ◆ registerTriangleFEMForceField(). void sofa::component::solidmechanics::fem::elastic::registerTriangleFEMForceField ; (; sofa::core::ObjectFactory * ; factory). ◆ registerTriangularAnisotropicFEMForceField(). void sofa::component::solidmechanics::fem::elastic::registerTriangularAnisotropicFEMForceField ; (; sofa::core::ObjectFactory * ; factory). ◆ registerTriangularFEMForceField(). void sofa::component::solidmechanics::fem::elastic::registerTriangularFEMForceField ; (; sofa::core::ObjectFactory * ; factory). ◆ registerTriangularFEMForceFieldOptim(). void sofa::component::solidmechanics::fem::elastic::registerTriangularFEMForceFieldOptim ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ FastTetrahedralCorotationalForceField< Vec3Types >. template class SOFA_COMPONENT_SOLIDMECHANICS_FEM_ELASTIC_API sofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< Vec3Types >. ◆ HexahedralFEMForceField< Vec3Types >. template class SOFA_COMPONENT_SOLIDMECHANICS_FEM_ELASTIC_API sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< Vec3Types >. ◆ HexahedralFEMForceFieldAndMass< Vec3Types >. template class SOFA_COMPONENT_SOLIDMECHANICS_FEM_ELASTIC_API sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceFieldAndMass< Vec3Types >. ◆ HexahedronFEMForceField< Vec3Types >. template class SOFA_COMPONENT_SOLIDMECHANICS_FEM_ELASTIC_API sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< Vec3Types >. ◆ HexahedronFEMForceFieldAndMass< Vec3Types >. template class SOFA_COMPONENT_SOLIDMECHANICS_FEM_ELASTIC_API sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< Vec3Types >. ◆,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic.html:197,Modifiability,Variab,Variables,197,"﻿. SOFA API: sofa::component::solidmechanics::fem::hyperelastic Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Functions |; Variables . sofa::component::solidmechanics::fem::hyperelastic Namespace Reference . Namespaces;  material;  . Classes; class  StandardTetrahedralFEMForceField;  ; class  TetrahedronHyperelasticityFEMForceField;  . Functions; void registerPlasticMaterial (sofa::core::ObjectFactory *factory);  ; void registerStandardTetrahedralFEMForceField (sofa::core::ObjectFactory *factory);  ; void registerTetrahedronHyperelasticityFEMForceField (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  ; template<class DataTypes > ; void selectColors (const std::string &materialName, sofa::type::RGBAColor &color1, sofa::type::RGBAColor &color2, sofa::type::RGBAColor &color3, sofa::type::RGBAColor &color4);  ; template<class DataTypes > ; void drawHyperelasticTets (const core::visual::VisualParams *vparams, const typename DataTypes::VecCoord &x, core::topology::BaseMeshTopology *topology, const std::string &materialName, const sofa::type::vector< core::topology::Topology::TetrahedronID > &indicesToDraw);  ; template<class DataTypes > ; void drawHyperelasticTets (const core::visual::VisualParams *vparams, const typename DataTypes::VecCoord &x, core::topology::BaseMeshTopology *topology, const std::string &materialName);  . Variables; template class SOFA_COMPONENT_SOLIDMECHANICS_FEM_HYPERELASTIC_API StandardTetrahedralFEMForceField< Vec3Types >;  ; template class SOFA_COMPONENT_SOLIDMECHANICS_FEM_HYPERELASTIC_API TetrahedronHyperelasticityFEMForceField< Vec3Types >;  ; template<class DataTypes > ; const helper::OptionsGro",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic.html:1698,Modifiability,Variab,Variables,1698,"SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  ; template<class DataTypes > ; void selectColors (const std::string &materialName, sofa::type::RGBAColor &color1, sofa::type::RGBAColor &color2, sofa::type::RGBAColor &color3, sofa::type::RGBAColor &color4);  ; template<class DataTypes > ; void drawHyperelasticTets (const core::visual::VisualParams *vparams, const typename DataTypes::VecCoord &x, core::topology::BaseMeshTopology *topology, const std::string &materialName, const sofa::type::vector< core::topology::Topology::TetrahedronID > &indicesToDraw);  ; template<class DataTypes > ; void drawHyperelasticTets (const core::visual::VisualParams *vparams, const typename DataTypes::VecCoord &x, core::topology::BaseMeshTopology *topology, const std::string &materialName);  . Variables; template class SOFA_COMPONENT_SOLIDMECHANICS_FEM_HYPERELASTIC_API StandardTetrahedralFEMForceField< Vec3Types >;  ; template class SOFA_COMPONENT_SOLIDMECHANICS_FEM_HYPERELASTIC_API TetrahedronHyperelasticityFEMForceField< Vec3Types >;  ; template<class DataTypes > ; const helper::OptionsGroup materialOptions;  . Function Documentation. ◆ drawHyperelasticTets() [1/2]. template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::drawHyperelasticTets ; (; const core::visual::VisualParams * ; vparams, . const typename DataTypes::VecCoord & ; x, . core::topology::BaseMeshTopology * ; topology, . const std::string & ; materialName . ). ◆ drawHyperelasticTets() [2/2]. template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::drawHyperelasticTets ; (; const core::visual::VisualParams * ; vparams, . const typename DataTypes::VecCoord & ; x, . core::topology::BaseMeshTopology * ; topology, . const std::string & ; materialName, . const sofa::type::vector< core::topology::Topology::TetrahedronID > & ; indicesToDraw . ). ◆ getModuleName(). const char * sofa::component::solidmechanics::fem::hyp",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic.html:4236,Modifiability,Variab,Variable,4236,"ernalModule ; (; ). ◆ registerObjects(). void sofa::component::solidmechanics::fem::hyperelastic::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerPlasticMaterial(). void sofa::component::solidmechanics::fem::hyperelastic::registerPlasticMaterial ; (; sofa::core::ObjectFactory * ; factory). ◆ registerStandardTetrahedralFEMForceField(). void sofa::component::solidmechanics::fem::hyperelastic::registerStandardTetrahedralFEMForceField ; (; sofa::core::ObjectFactory * ; factory). ◆ registerTetrahedronHyperelasticityFEMForceField(). void sofa::component::solidmechanics::fem::hyperelastic::registerTetrahedronHyperelasticityFEMForceField ; (; sofa::core::ObjectFactory * ; factory). ◆ selectColors(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::selectColors ; (; const std::string & ; materialName, . sofa::type::RGBAColor & ; color1, . sofa::type::RGBAColor & ; color2, . sofa::type::RGBAColor & ; color3, . sofa::type::RGBAColor & ; color4 . ). Variable Documentation. ◆ materialOptions. template<class DataTypes > . const helper::OptionsGroup sofa::component::solidmechanics::fem::hyperelastic::materialOptions. Initial value:{; BoyceAndArruda<DataTypes>::Name,; STVenantKirchhoff<DataTypes>::Name,; NeoHookean<DataTypes>::Name,; MooneyRivlin<DataTypes>::Name,; VerondaWestman<DataTypes>::Name,; Costa<DataTypes>::Name,; Ogden<DataTypes>::Name,; StableNeoHookean<DataTypes>::Name; }. ◆ StandardTetrahedralFEMForceField< Vec3Types >. template class SOFA_COMPONENT_SOLIDMECHANICS_FEM_HYPERELASTIC_API sofa::component::solidmechanics::fem::hyperelastic::StandardTetrahedralFEMForceField< Vec3Types >. ◆ TetrahedronHyperelasticityFEMForceField< Vec3Types >. template class SOFA_COMPONENT_SOLIDMECHANICS_FEM_HYPERELASTIC_API sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< Vec3Types >. sofacomponentsolidmechanicsfemhyperelastic; Generated on Mon Nov 11 2024 02:57:27 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform.html:193,Modifiability,Variab,Variables,193,﻿. SOFA API: sofa::component::solidmechanics::fem::nonuniform Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Functions |; Variables . sofa::component::solidmechanics::fem::nonuniform Namespace Reference . Classes; class  HexahedronCompositeFEMForceFieldAndMass;  ; class  HexahedronCompositeFEMMapping;  ; class  NonUniformHexahedralFEMForceFieldAndMass;  ; class  NonUniformHexahedronFEMForceFieldAndMass;  . Typedefs; using EigenMatrix = Eigen::MatrixXd;  . Functions; void registerHexahedronCompositeFEMForceFieldAndMass (sofa::core::ObjectFactory *factory);  ; void registerHexahedronCompositeFEMMapping (sofa::core::ObjectFactory *factory);  ; void registerNonUniformHexahedralFEMForceFieldAndMass (sofa::core::ObjectFactory *factory);  ; void registerNonUniformHexahedronFEMForceFieldAndMass (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; template class SOFA_COMPONENT_SOLIDMECHANICS_FEM_NONUNIFORM_API HexahedronCompositeFEMForceFieldAndMass< Vec3Types >;  ; template class SOFA_COMPONENT_SOLIDMECHANICS_FEM_NONUNIFORM_API NonUniformHexahedralFEMForceFieldAndMass< Vec3Types >;  ; template class SOFA_COMPONENT_SOLIDMECHANICS_FEM_NONUNIFORM_API NonUniformHexahedronFEMForceFieldAndMass< Vec3Types >;  . Typedef Documentation. ◆ EigenMatrix. using sofa::component::solidmechanics::fem::nonuniform::EigenMatrix = typedef Eigen::MatrixXd. Function Documentation. ◆ getModuleName(). const char * sofa::component::solidmechanics::fem::nonuniform::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::solidmechanics::fem::nonuniform::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_SOLIDMECHANICS_FEM_NONUNIF,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform.html:1203,Modifiability,Variab,Variables,1203,formHexahedralFEMForceFieldAndMass;  ; class  NonUniformHexahedronFEMForceFieldAndMass;  . Typedefs; using EigenMatrix = Eigen::MatrixXd;  . Functions; void registerHexahedronCompositeFEMForceFieldAndMass (sofa::core::ObjectFactory *factory);  ; void registerHexahedronCompositeFEMMapping (sofa::core::ObjectFactory *factory);  ; void registerNonUniformHexahedralFEMForceFieldAndMass (sofa::core::ObjectFactory *factory);  ; void registerNonUniformHexahedronFEMForceFieldAndMass (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; template class SOFA_COMPONENT_SOLIDMECHANICS_FEM_NONUNIFORM_API HexahedronCompositeFEMForceFieldAndMass< Vec3Types >;  ; template class SOFA_COMPONENT_SOLIDMECHANICS_FEM_NONUNIFORM_API NonUniformHexahedralFEMForceFieldAndMass< Vec3Types >;  ; template class SOFA_COMPONENT_SOLIDMECHANICS_FEM_NONUNIFORM_API NonUniformHexahedronFEMForceFieldAndMass< Vec3Types >;  . Typedef Documentation. ◆ EigenMatrix. using sofa::component::solidmechanics::fem::nonuniform::EigenMatrix = typedef Eigen::MatrixXd. Function Documentation. ◆ getModuleName(). const char * sofa::component::solidmechanics::fem::nonuniform::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::solidmechanics::fem::nonuniform::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_SOLIDMECHANICS_FEM_NONUNIFORM_API void sofa::component::solidmechanics::fem::nonuniform::init ; (; ). ◆ initExternalModule(). void sofa::component::solidmechanics::fem::nonuniform::initExternalModule ; (; ). ◆ registerHexahedronCompositeFEMForceFieldAndMass(). void sofa::component::solidmechanics::fem::nonuniform::registerHexahedronCompositeFEMForceFieldAndMass ; (; sofa::core::ObjectFactory * ; factory). ◆ regi,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform.html:3108,Modifiability,Variab,Variable,3108,:nonuniform::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_SOLIDMECHANICS_FEM_NONUNIFORM_API void sofa::component::solidmechanics::fem::nonuniform::init ; (; ). ◆ initExternalModule(). void sofa::component::solidmechanics::fem::nonuniform::initExternalModule ; (; ). ◆ registerHexahedronCompositeFEMForceFieldAndMass(). void sofa::component::solidmechanics::fem::nonuniform::registerHexahedronCompositeFEMForceFieldAndMass ; (; sofa::core::ObjectFactory * ; factory). ◆ registerHexahedronCompositeFEMMapping(). void sofa::component::solidmechanics::fem::nonuniform::registerHexahedronCompositeFEMMapping ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNonUniformHexahedralFEMForceFieldAndMass(). void sofa::component::solidmechanics::fem::nonuniform::registerNonUniformHexahedralFEMForceFieldAndMass ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNonUniformHexahedronFEMForceFieldAndMass(). void sofa::component::solidmechanics::fem::nonuniform::registerNonUniformHexahedronFEMForceFieldAndMass ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::solidmechanics::fem::nonuniform::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ HexahedronCompositeFEMForceFieldAndMass< Vec3Types >. template class SOFA_COMPONENT_SOLIDMECHANICS_FEM_NONUNIFORM_API sofa::component::solidmechanics::fem::nonuniform::HexahedronCompositeFEMForceFieldAndMass< Vec3Types >. ◆ NonUniformHexahedralFEMForceFieldAndMass< Vec3Types >. template class SOFA_COMPONENT_SOLIDMECHANICS_FEM_NONUNIFORM_API sofa::component::solidmechanics::fem::nonuniform::NonUniformHexahedralFEMForceFieldAndMass< Vec3Types >. ◆ NonUniformHexahedronFEMForceFieldAndMass< Vec3Types >. template class SOFA_COMPONENT_SOLIDMECHANICS_FEM_NONUNIFORM_API sofa::component::solidmechanics::fem::nonuniform::NonUniformHexahedronFEMForceFieldAndMass< Vec3Types >. sofacomponentsolidmechanicsfemnonuniform; Generated on Mon Nov 11 2024 03:02:25 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1spring.html:184,Modifiability,Variab,Variables,184,﻿. SOFA API: sofa::component::solidmechanics::spring Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Functions |; Variables . sofa::component::solidmechanics::spring Namespace Reference . Classes; class  AngularSpringForceField;  This class describes a simple elastic springs ForceField between DOFs positions and rest positions. More...;  ; class  FastTriangularBendingSprings;  ; class  FrameSpringForceFieldInternalData;  ; class  FrameSpringForceField;  ; class  GearSpring;  ; class  GearSpringForceFieldInternalData;  ; class  GearSpringForceField;  ; class  JointSpring;  JOINTSPRING. More...;  ; class  JointSpringForceFieldInternalData;  ; class  JointSpringForceField;  ; class  LinearSpring;  This class contains the description of one linear spring. More...;  ; class  MeshSpringForceField;  ; class  PolynomialRestShapeSpringsForceField;  This class describes a polynomial elastic springs ForceField between DOFs positions and rest positions. More...;  ; class  PolynomialSpringsForceField;  This class describes a polynomial elastic springs ForceField. More...;  ; class  QuadBendingSprings;  ; class  QuadularBendingSprings;  ; class  RegularGridSpringForceField;  ; class  RepulsiveSpringForceField;  ; class  RestShapeSpringsForceField;  This class describes a simple elastic springs ForceField between DOFs positions and rest positions. More...;  ; class  SpringForceFieldInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  SpringForceField;  Set of simple springs between particles. More...;  ; class  TriangleBendingSprings;  ; class  TriangularBendingSprings;  ; class  TriangularBiquadraticSpringsForceField;  ; class  TriangularQuadraticSpringsForceField;  ; class  VectorSpringForceField;  . Typedefs; typedef core::topology::BaseMeshTopology::EdgesInTriangle EdgesInTriangle;  ; typedef core::topology::BaseMeshTopology::Quad Qua,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1spring.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1spring.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1spring.html:4032,Modifiability,Variab,Variables,4032,,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1spring.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1spring.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1spring.html:11622,Modifiability,Variab,Variable,11622,pringForceField(). void sofa::component::solidmechanics::spring::registerSpringForceField ; (; sofa::core::ObjectFactory * ; factory). ◆ registerTriangleBendingSprings(). void sofa::component::solidmechanics::spring::registerTriangleBendingSprings ; (; sofa::core::ObjectFactory * ; factory). ◆ registerTriangularBendingSprings(). void sofa::component::solidmechanics::spring::registerTriangularBendingSprings ; (; sofa::core::ObjectFactory * ; factory). ◆ registerTriangularBiquadraticSpringsForceField(). void sofa::component::solidmechanics::spring::registerTriangularBiquadraticSpringsForceField ; (; sofa::core::ObjectFactory * ; factory). ◆ registerTriangularQuadraticSpringsForceField(). void sofa::component::solidmechanics::spring::registerTriangularQuadraticSpringsForceField ; (; sofa::core::ObjectFactory * ; factory). ◆ registerVectorSpringForceField(). void sofa::component::solidmechanics::spring::registerVectorSpringForceField ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ AngularSpringForceField< Rigid3Types >. template class SOFA_COMPONENT_SOLIDMECHANICS_SPRING_API sofa::component::solidmechanics::spring::AngularSpringForceField< Rigid3Types >. ◆ FastTriangularBendingSprings< Vec3Types >. template class SOFA_COMPONENT_SOLIDMECHANICS_SPRING_API sofa::component::solidmechanics::spring::FastTriangularBendingSprings< Vec3Types >. ◆ FrameSpringForceField< Rigid3Types >. template class SOFA_COMPONENT_SOLIDMECHANICS_SPRING_API sofa::component::solidmechanics::spring::FrameSpringForceField< Rigid3Types >. ◆ LinearSpring< SReal >. template class SOFA_COMPONENT_SOLIDMECHANICS_SPRING_API sofa::component::solidmechanics::spring::LinearSpring< SReal >. extern . ◆ MeshSpringForceField< Vec1Types >. template class SOFA_COMPONENT_SOLIDMECHANICS_SPRING_API sofa::component::solidmechanics::spring::MeshSpringForceField< Vec1Types >. ◆ MeshSpringForceField< Vec2Types >. template class SOFA_COMPONENT_SOLIDMECHANICS_SPRING_API sofa::component::solidmechanics:,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1spring.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1spring.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1spring.html:323,Usability,simpl,simple,323,﻿. SOFA API: sofa::component::solidmechanics::spring Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Functions |; Variables . sofa::component::solidmechanics::spring Namespace Reference . Classes; class  AngularSpringForceField;  This class describes a simple elastic springs ForceField between DOFs positions and rest positions. More...;  ; class  FastTriangularBendingSprings;  ; class  FrameSpringForceFieldInternalData;  ; class  FrameSpringForceField;  ; class  GearSpring;  ; class  GearSpringForceFieldInternalData;  ; class  GearSpringForceField;  ; class  JointSpring;  JOINTSPRING. More...;  ; class  JointSpringForceFieldInternalData;  ; class  JointSpringForceField;  ; class  LinearSpring;  This class contains the description of one linear spring. More...;  ; class  MeshSpringForceField;  ; class  PolynomialRestShapeSpringsForceField;  This class describes a polynomial elastic springs ForceField between DOFs positions and rest positions. More...;  ; class  PolynomialSpringsForceField;  This class describes a polynomial elastic springs ForceField. More...;  ; class  QuadBendingSprings;  ; class  QuadularBendingSprings;  ; class  RegularGridSpringForceField;  ; class  RepulsiveSpringForceField;  ; class  RestShapeSpringsForceField;  This class describes a simple elastic springs ForceField between DOFs positions and rest positions. More...;  ; class  SpringForceFieldInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  SpringForceField;  Set of simple springs between particles. More...;  ; class  TriangleBendingSprings;  ; class  TriangularBendingSprings;  ; class  TriangularBiquadraticSpringsForceField;  ; class  TriangularQuadraticSpringsForceField;  ; class  VectorSpringForceField;  . Typedefs; typedef core::topology::BaseMeshTopology::EdgesInTriangle EdgesInTriangle;  ; typedef core::topology::BaseMeshTopology::Quad Qua,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1spring.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1spring.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1spring.html:1348,Usability,simpl,simple,1348,ingForceField;  This class describes a simple elastic springs ForceField between DOFs positions and rest positions. More...;  ; class  FastTriangularBendingSprings;  ; class  FrameSpringForceFieldInternalData;  ; class  FrameSpringForceField;  ; class  GearSpring;  ; class  GearSpringForceFieldInternalData;  ; class  GearSpringForceField;  ; class  JointSpring;  JOINTSPRING. More...;  ; class  JointSpringForceFieldInternalData;  ; class  JointSpringForceField;  ; class  LinearSpring;  This class contains the description of one linear spring. More...;  ; class  MeshSpringForceField;  ; class  PolynomialRestShapeSpringsForceField;  This class describes a polynomial elastic springs ForceField between DOFs positions and rest positions. More...;  ; class  PolynomialSpringsForceField;  This class describes a polynomial elastic springs ForceField. More...;  ; class  QuadBendingSprings;  ; class  QuadularBendingSprings;  ; class  RegularGridSpringForceField;  ; class  RepulsiveSpringForceField;  ; class  RestShapeSpringsForceField;  This class describes a simple elastic springs ForceField between DOFs positions and rest positions. More...;  ; class  SpringForceFieldInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  SpringForceField;  Set of simple springs between particles. More...;  ; class  TriangleBendingSprings;  ; class  TriangularBendingSprings;  ; class  TriangularBiquadraticSpringsForceField;  ; class  TriangularQuadraticSpringsForceField;  ; class  VectorSpringForceField;  . Typedefs; typedef core::topology::BaseMeshTopology::EdgesInTriangle EdgesInTriangle;  ; typedef core::topology::BaseMeshTopology::Quad Quad;  ; typedef core::topology::BaseMeshTopology::EdgesInQuad EdgesInQuad;  ; using SpringForceField = SpringForceField< T >;  ; typedef core::topology::BaseMeshTopology::Triangle Triangle;  . Functions; void registerAngularSpringForceField (sofa::core::ObjectFactory *factory);  ; voi,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1spring.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1spring.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1spring.html:1615,Usability,simpl,simple,1615,gForceField;  ; class  JointSpring;  JOINTSPRING. More...;  ; class  JointSpringForceFieldInternalData;  ; class  JointSpringForceField;  ; class  LinearSpring;  This class contains the description of one linear spring. More...;  ; class  MeshSpringForceField;  ; class  PolynomialRestShapeSpringsForceField;  This class describes a polynomial elastic springs ForceField between DOFs positions and rest positions. More...;  ; class  PolynomialSpringsForceField;  This class describes a polynomial elastic springs ForceField. More...;  ; class  QuadBendingSprings;  ; class  QuadularBendingSprings;  ; class  RegularGridSpringForceField;  ; class  RepulsiveSpringForceField;  ; class  RestShapeSpringsForceField;  This class describes a simple elastic springs ForceField between DOFs positions and rest positions. More...;  ; class  SpringForceFieldInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  SpringForceField;  Set of simple springs between particles. More...;  ; class  TriangleBendingSprings;  ; class  TriangularBendingSprings;  ; class  TriangularBiquadraticSpringsForceField;  ; class  TriangularQuadraticSpringsForceField;  ; class  VectorSpringForceField;  . Typedefs; typedef core::topology::BaseMeshTopology::EdgesInTriangle EdgesInTriangle;  ; typedef core::topology::BaseMeshTopology::Quad Quad;  ; typedef core::topology::BaseMeshTopology::EdgesInQuad EdgesInQuad;  ; using SpringForceField = SpringForceField< T >;  ; typedef core::topology::BaseMeshTopology::Triangle Triangle;  . Functions; void registerAngularSpringForceField (sofa::core::ObjectFactory *factory);  ; void registerFastTriangularBendingSprings (sofa::core::ObjectFactory *factory);  ; void registerFrameSpringForceField (sofa::core::ObjectFactory *factory);  ; void registerGearSpringForceField (sofa::core::ObjectFactory *factory);  ; void registerNonUniformHexahedronFEMForceFieldAndMass (sofa::core::ObjectFactory *factory);  ; voi,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1spring.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1spring.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1tensormass.html:188,Modifiability,Variab,Variables,188,﻿. SOFA API: sofa::component::solidmechanics::tensormass Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Functions |; Variables . sofa::component::solidmechanics::tensormass Namespace Reference . Classes; class  TetrahedralTensorMassForceField;  ; class  TriangularTensorMassForceField;  . Typedefs; typedef core::topology::BaseMeshTopology::Tetra Tetra;  ; typedef core::topology::BaseMeshTopology::EdgesInTetrahedron EdgesInTetrahedron;  ; typedef Tetra Tetrahedron;  ; typedef core::topology::BaseMeshTopology::EdgesInTriangle EdgesInTriangle;  . Functions; void registerTetrahedralTensorMassForceField (sofa::core::ObjectFactory *factory);  ; void registerTriangularTensorMassForceField (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; template class SOFA_COMPONENT_SOLIDMECHANICS_TENSORMASS_API TetrahedralTensorMassForceField< Vec3Types >;  ; template class SOFA_COMPONENT_SOLIDMECHANICS_TENSORMASS_API TriangularTensorMassForceField< Vec3Types >;  . Typedef Documentation. ◆ EdgesInTetrahedron. typedef EdgesInTetrahedron sofa::component::solidmechanics::tensormass::EdgesInTetrahedron. ◆ EdgesInTriangle. typedef core::topology::BaseMeshTopology::EdgesInTriangle sofa::component::solidmechanics::tensormass::EdgesInTriangle. ◆ Tetra. typedef core::topology::BaseMeshTopology::Tetra sofa::component::solidmechanics::tensormass::Tetra. ◆ Tetrahedron. typedef Tetra sofa::component::solidmechanics::tensormass::Tetrahedron. Function Documentation. ◆ getModuleName(). const char * sofa::component::solidmechanics::tensormass::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::solidmechanics::tensormass::get,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1tensormass.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1tensormass.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1tensormass.html:1095,Modifiability,Variab,Variables,1095,mponent::solidmechanics::tensormass Namespace Reference . Classes; class  TetrahedralTensorMassForceField;  ; class  TriangularTensorMassForceField;  . Typedefs; typedef core::topology::BaseMeshTopology::Tetra Tetra;  ; typedef core::topology::BaseMeshTopology::EdgesInTetrahedron EdgesInTetrahedron;  ; typedef Tetra Tetrahedron;  ; typedef core::topology::BaseMeshTopology::EdgesInTriangle EdgesInTriangle;  . Functions; void registerTetrahedralTensorMassForceField (sofa::core::ObjectFactory *factory);  ; void registerTriangularTensorMassForceField (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; template class SOFA_COMPONENT_SOLIDMECHANICS_TENSORMASS_API TetrahedralTensorMassForceField< Vec3Types >;  ; template class SOFA_COMPONENT_SOLIDMECHANICS_TENSORMASS_API TriangularTensorMassForceField< Vec3Types >;  . Typedef Documentation. ◆ EdgesInTetrahedron. typedef EdgesInTetrahedron sofa::component::solidmechanics::tensormass::EdgesInTetrahedron. ◆ EdgesInTriangle. typedef core::topology::BaseMeshTopology::EdgesInTriangle sofa::component::solidmechanics::tensormass::EdgesInTriangle. ◆ Tetra. typedef core::topology::BaseMeshTopology::Tetra sofa::component::solidmechanics::tensormass::Tetra. ◆ Tetrahedron. typedef Tetra sofa::component::solidmechanics::tensormass::Tetrahedron. Function Documentation. ◆ getModuleName(). const char * sofa::component::solidmechanics::tensormass::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::solidmechanics::tensormass::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_SOLIDMECHANICS_TENSORMASS_API void sofa::component::solidmechanics::tensormass::init ; (; ). ◆ initExternalModule(). void sofa::component::solidmechanics::tenso,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1tensormass.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1tensormass.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1tensormass.html:2732,Modifiability,Variab,Variable,2732,HANICS_TENSORMASS_API TriangularTensorMassForceField< Vec3Types >;  . Typedef Documentation. ◆ EdgesInTetrahedron. typedef EdgesInTetrahedron sofa::component::solidmechanics::tensormass::EdgesInTetrahedron. ◆ EdgesInTriangle. typedef core::topology::BaseMeshTopology::EdgesInTriangle sofa::component::solidmechanics::tensormass::EdgesInTriangle. ◆ Tetra. typedef core::topology::BaseMeshTopology::Tetra sofa::component::solidmechanics::tensormass::Tetra. ◆ Tetrahedron. typedef Tetra sofa::component::solidmechanics::tensormass::Tetrahedron. Function Documentation. ◆ getModuleName(). const char * sofa::component::solidmechanics::tensormass::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::solidmechanics::tensormass::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_SOLIDMECHANICS_TENSORMASS_API void sofa::component::solidmechanics::tensormass::init ; (; ). ◆ initExternalModule(). void sofa::component::solidmechanics::tensormass::initExternalModule ; (; ). ◆ registerObjects(). void sofa::component::solidmechanics::tensormass::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerTetrahedralTensorMassForceField(). void sofa::component::solidmechanics::tensormass::registerTetrahedralTensorMassForceField ; (; sofa::core::ObjectFactory * ; factory). ◆ registerTriangularTensorMassForceField(). void sofa::component::solidmechanics::tensormass::registerTriangularTensorMassForceField ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ TetrahedralTensorMassForceField< Vec3Types >. template class SOFA_COMPONENT_SOLIDMECHANICS_TENSORMASS_API sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< Vec3Types >. ◆ TriangularTensorMassForceField< Vec3Types >. template class SOFA_COMPONENT_SOLIDMECHANICS_TENSORMASS_API sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< Vec3Types >. sofacomponentsolidmechanicstensormass; Generated on Mon Nov 11 2024 03:08:49 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1tensormass.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1tensormass.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html:176,Modifiability,Variab,Variables,176,﻿. SOFA API: sofa::component::statecontainer Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Functions |; Variables . sofa::component::statecontainer Namespace Reference . Classes; class  MappedObjectInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  MappedObject;  ; class  MechanicalObject;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  MechanicalObjectInternalData;  . Typedefs; typedef std::size_t nat;  . Functions; void registerMechanicalObject (sofa::core::ObjectFactory *factory);  ; void registerMappedObject (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  ; template<class T > ; void clear (T &t);  ; template<> ; void clear (float &t);  ; template<> ; void clear (double &t);  . Variables; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec1Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec6Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec1Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec6T,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html:1191,Modifiability,Variab,Variables,1191,ctFactory *factory);  ; void registerMappedObject (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  ; template<class T > ; void clear (T &t);  ; template<> ; void clear (float &t);  ; template<> ; void clear (double &t);  . Variables; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec1Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec6Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec1Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec6Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Rigid3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Rigid2Types >;  . Typedef Documentation. ◆ nat. typedef std::size_t sofa::component::statecontainer::nat. Function Documentation. ◆ clear() [1/3]. template<> . void sofa::component::statecontainer::clear ; (; double & ; t). inline . ◆ clear() [2/3]. template<> . void sofa::component::statecontainer::clear ; (; float & ; t). inline . ◆ clear() [3/3]. template<class T > . void sofa::component::statecontainer::clear ; (; T & ; t). inline . ◆ getModuleName(). const char * sofa::component::statecontainer::getModuleName ; ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html:3357,Modifiability,Variab,Variable,3357,; (; double & ; t). inline . ◆ clear() [2/3]. template<> . void sofa::component::statecontainer::clear ; (; float & ; t). inline . ◆ clear() [3/3]. template<class T > . void sofa::component::statecontainer::clear ; (; T & ; t). inline . ◆ getModuleName(). const char * sofa::component::statecontainer::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::statecontainer::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_STATECONTAINER_API void sofa::component::statecontainer::init ; (; ). ◆ initExternalModule(). void sofa::component::statecontainer::initExternalModule ; (; ). ◆ registerMappedObject(). void sofa::component::statecontainer::registerMappedObject ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMechanicalObject(). void sofa::component::statecontainer::registerMechanicalObject ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::statecontainer::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MappedObject< Rigid2Types >. template class SOFA_COMPONENT_STATECONTAINER_API sofa::component::statecontainer::MappedObject< Rigid2Types >. ◆ MappedObject< Rigid3Types >. template class SOFA_COMPONENT_STATECONTAINER_API sofa::component::statecontainer::MappedObject< Rigid3Types >. ◆ MappedObject< Vec1Types >. template class SOFA_COMPONENT_STATECONTAINER_API sofa::component::statecontainer::MappedObject< Vec1Types >. ◆ MappedObject< Vec2Types >. template class SOFA_COMPONENT_STATECONTAINER_API sofa::component::statecontainer::MappedObject< Vec2Types >. ◆ MappedObject< Vec3Types >. template class SOFA_COMPONENT_STATECONTAINER_API sofa::component::statecontainer::MappedObject< Vec3Types >. ◆ MappedObject< Vec6Types >. template class SOFA_COMPONENT_STATECONTAINER_API sofa::component::statecontainer::MappedObject< Vec6Types >. ◆ MechanicalObject< Rigid2Types >. template class SOFA_COMPONENT_STATECONTAINER_API sofa::component::statecontainer::MechanicalObject< Rigid2Types >. ◆,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html:1095,Usability,clear,clear,1095,﻿. SOFA API: sofa::component::statecontainer Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Functions |; Variables . sofa::component::statecontainer Namespace Reference . Classes; class  MappedObjectInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  MappedObject;  ; class  MechanicalObject;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  MechanicalObjectInternalData;  . Typedefs; typedef std::size_t nat;  . Functions; void registerMechanicalObject (sofa::core::ObjectFactory *factory);  ; void registerMappedObject (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  ; template<class T > ; void clear (T &t);  ; template<> ; void clear (float &t);  ; template<> ; void clear (double &t);  . Variables; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec1Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec6Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec1Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec6T,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html:1130,Usability,clear,clear,1130,﻿. SOFA API: sofa::component::statecontainer Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Functions |; Variables . sofa::component::statecontainer Namespace Reference . Classes; class  MappedObjectInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  MappedObject;  ; class  MechanicalObject;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  MechanicalObjectInternalData;  . Typedefs; typedef std::size_t nat;  . Functions; void registerMechanicalObject (sofa::core::ObjectFactory *factory);  ; void registerMappedObject (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  ; template<class T > ; void clear (T &t);  ; template<> ; void clear (float &t);  ; template<> ; void clear (double &t);  . Variables; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec1Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec6Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec1Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec6T,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html:1169,Usability,clear,clear,1169,﻿. SOFA API: sofa::component::statecontainer Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Functions |; Variables . sofa::component::statecontainer Namespace Reference . Classes; class  MappedObjectInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  MappedObject;  ; class  MechanicalObject;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  MechanicalObjectInternalData;  . Typedefs; typedef std::size_t nat;  . Functions; void registerMechanicalObject (sofa::core::ObjectFactory *factory);  ; void registerMappedObject (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  ; template<class T > ; void clear (T &t);  ; template<> ; void clear (float &t);  ; template<> ; void clear (double &t);  . Variables; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec1Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec6Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec1Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec6T,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html:2296,Usability,clear,clear,2296,COMPONENT_STATECONTAINER_API MappedObject< Vec2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec6Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec1Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec6Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Rigid3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Rigid2Types >;  . Typedef Documentation. ◆ nat. typedef std::size_t sofa::component::statecontainer::nat. Function Documentation. ◆ clear() [1/3]. template<> . void sofa::component::statecontainer::clear ; (; double & ; t). inline . ◆ clear() [2/3]. template<> . void sofa::component::statecontainer::clear ; (; float & ; t). inline . ◆ clear() [3/3]. template<class T > . void sofa::component::statecontainer::clear ; (; T & ; t). inline . ◆ getModuleName(). const char * sofa::component::statecontainer::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::statecontainer::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_STATECONTAINER_API void sofa::component::statecontainer::init ; (; ). ◆ initExternalModule(). void sofa::component::statecontainer::initExternalModule ; (; ). ◆ registerMappedObject(). void sofa::component::statecontainer::registerMappedObject ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMechanicalObject(). void sofa::component::statecontainer::registerMechanicalObject ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::statecontainer::regist,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html:2362,Usability,clear,clear,2362,;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec6Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec1Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec6Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Rigid3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Rigid2Types >;  . Typedef Documentation. ◆ nat. typedef std::size_t sofa::component::statecontainer::nat. Function Documentation. ◆ clear() [1/3]. template<> . void sofa::component::statecontainer::clear ; (; double & ; t). inline . ◆ clear() [2/3]. template<> . void sofa::component::statecontainer::clear ; (; float & ; t). inline . ◆ clear() [3/3]. template<class T > . void sofa::component::statecontainer::clear ; (; T & ; t). inline . ◆ getModuleName(). const char * sofa::component::statecontainer::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::statecontainer::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_STATECONTAINER_API void sofa::component::statecontainer::init ; (; ). ◆ initExternalModule(). void sofa::component::statecontainer::initExternalModule ; (; ). ◆ registerMappedObject(). void sofa::component::statecontainer::registerMappedObject ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMechanicalObject(). void sofa::component::statecontainer::registerMechanicalObject ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::statecontainer::registerObjects ; (; sofa::core::ObjectFactory * ; factory),MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html:2399,Usability,clear,clear,2399,_API MappedObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec6Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec1Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec6Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Rigid3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Rigid2Types >;  . Typedef Documentation. ◆ nat. typedef std::size_t sofa::component::statecontainer::nat. Function Documentation. ◆ clear() [1/3]. template<> . void sofa::component::statecontainer::clear ; (; double & ; t). inline . ◆ clear() [2/3]. template<> . void sofa::component::statecontainer::clear ; (; float & ; t). inline . ◆ clear() [3/3]. template<class T > . void sofa::component::statecontainer::clear ; (; T & ; t). inline . ◆ getModuleName(). const char * sofa::component::statecontainer::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::statecontainer::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_STATECONTAINER_API void sofa::component::statecontainer::init ; (; ). ◆ initExternalModule(). void sofa::component::statecontainer::initExternalModule ; (; ). ◆ registerMappedObject(). void sofa::component::statecontainer::registerMappedObject ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMechanicalObject(). void sofa::component::statecontainer::registerMechanicalObject ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::statecontainer::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MappedObject< Rigid2Ty,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html:2465,Usability,clear,clear,2465,A_COMPONENT_STATECONTAINER_API MappedObject< Vec6Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec1Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec6Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Rigid3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Rigid2Types >;  . Typedef Documentation. ◆ nat. typedef std::size_t sofa::component::statecontainer::nat. Function Documentation. ◆ clear() [1/3]. template<> . void sofa::component::statecontainer::clear ; (; double & ; t). inline . ◆ clear() [2/3]. template<> . void sofa::component::statecontainer::clear ; (; float & ; t). inline . ◆ clear() [3/3]. template<class T > . void sofa::component::statecontainer::clear ; (; T & ; t). inline . ◆ getModuleName(). const char * sofa::component::statecontainer::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::statecontainer::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_STATECONTAINER_API void sofa::component::statecontainer::init ; (; ). ◆ initExternalModule(). void sofa::component::statecontainer::initExternalModule ; (; ). ◆ registerMappedObject(). void sofa::component::statecontainer::registerMappedObject ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMechanicalObject(). void sofa::component::statecontainer::registerMechanicalObject ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::statecontainer::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MappedObject< Rigid2Types >. template class SOFA_COMPONENT_STATECONTAINER_A,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html:2501,Usability,clear,clear,2501,Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec1Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec6Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Rigid3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Rigid2Types >;  . Typedef Documentation. ◆ nat. typedef std::size_t sofa::component::statecontainer::nat. Function Documentation. ◆ clear() [1/3]. template<> . void sofa::component::statecontainer::clear ; (; double & ; t). inline . ◆ clear() [2/3]. template<> . void sofa::component::statecontainer::clear ; (; float & ; t). inline . ◆ clear() [3/3]. template<class T > . void sofa::component::statecontainer::clear ; (; T & ; t). inline . ◆ getModuleName(). const char * sofa::component::statecontainer::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::statecontainer::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_STATECONTAINER_API void sofa::component::statecontainer::init ; (; ). ◆ initExternalModule(). void sofa::component::statecontainer::initExternalModule ; (; ). ◆ registerMappedObject(). void sofa::component::statecontainer::registerMappedObject ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMechanicalObject(). void sofa::component::statecontainer::registerMechanicalObject ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::statecontainer::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MappedObject< Rigid2Types >. template class SOFA_COMPONENT_STATECONTAINER_API sofa::component::statecontainer::MappedObject<,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html:2575,Usability,clear,clear,2575,I MappedObject< Rigid3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec1Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec6Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Rigid3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Rigid2Types >;  . Typedef Documentation. ◆ nat. typedef std::size_t sofa::component::statecontainer::nat. Function Documentation. ◆ clear() [1/3]. template<> . void sofa::component::statecontainer::clear ; (; double & ; t). inline . ◆ clear() [2/3]. template<> . void sofa::component::statecontainer::clear ; (; float & ; t). inline . ◆ clear() [3/3]. template<class T > . void sofa::component::statecontainer::clear ; (; T & ; t). inline . ◆ getModuleName(). const char * sofa::component::statecontainer::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::statecontainer::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_STATECONTAINER_API void sofa::component::statecontainer::init ; (; ). ◆ initExternalModule(). void sofa::component::statecontainer::initExternalModule ; (; ). ◆ registerMappedObject(). void sofa::component::statecontainer::registerMappedObject ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMechanicalObject(). void sofa::component::statecontainer::registerMechanicalObject ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::statecontainer::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MappedObject< Rigid2Types >. template class SOFA_COMPONENT_STATECONTAINER_API sofa::component::statecontainer::MappedObject< Rigid2Types >. ◆ MappedObject< Rigid3Types >. template cla,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html:538,Energy Efficiency,efficient,efficient,538,"﻿. SOFA API: sofa::component::topology::container::dynamic Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::topology::container::dynamic Namespace Reference . Classes; class  DynamicSparseGridGeometryAlgorithms;  ; class  DynamicSparseGridTopologyContainer;  ; class  DynamicSparseGridTopologyModifier;  ; class  BasicArrayInterface;  A class used as an interface with an array : Useful to compute geometric information on each edge in an efficient way. More...;  ; class  EdgeSetGeometryAlgorithms;  ; class  EdgeSetTopologyContainer;  ; class  EdgeSetTopologyModifier;  ; class  HexahedronSetGeometryAlgorithms;  ; class  HexahedronSetTopologyContainer;  ; class  HexahedronSetTopologyModifier;  ; class  MultilevelHexahedronSetTopologyContainer;  ; class  MultilevelModification;  ; class  NumericalIntegrationDescriptor;  Cross product for 3-elements vectors. More...;  ; class  PointSetGeometryAlgorithms;  ; class  PointSetTopologyContainer;  ; class  PointSetTopologyModifier;  ; class  QuadSetGeometryAlgorithms;  ; class  QuadSetTopologyContainer;  ; class  QuadSetTopologyModifier;  ; class  TetrahedronSetGeometryAlgorithms;  ; class  TetrahedronSetTopologyContainer;  ; class  TetrahedronSetTopologyModifier;  ; class  TriangleSetGeometryAlgorithms;  ; class  TriangleSetTopologyContainer;  : Object that stores a set of triangles and provides access to each triangle and its edges and vertices More...;  ; class  TriangleSetTopologyModifier;  . Functions; template<class Real > ; Real areaProduct (const sofa::type::Vec< 3, Real > &a, const sofa::type::Vec< 3, Real > &b);  Cross product for 3-elements Vectors. More...;  ; template<class Real > ; Real areaProduct (const type::Vec< 2, Real > &a, const type::Vec< 2, Real > &b);  area for 2-elements sofa::type::vectors. More...;  ; template<class Real > ; Real areaProduct (const type::Vec< 1, Real > &, const type::Vec< 1, Real > &);  ar",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html:453,Integrability,interface,interface,453,"﻿. SOFA API: sofa::component::topology::container::dynamic Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::topology::container::dynamic Namespace Reference . Classes; class  DynamicSparseGridGeometryAlgorithms;  ; class  DynamicSparseGridTopologyContainer;  ; class  DynamicSparseGridTopologyModifier;  ; class  BasicArrayInterface;  A class used as an interface with an array : Useful to compute geometric information on each edge in an efficient way. More...;  ; class  EdgeSetGeometryAlgorithms;  ; class  EdgeSetTopologyContainer;  ; class  EdgeSetTopologyModifier;  ; class  HexahedronSetGeometryAlgorithms;  ; class  HexahedronSetTopologyContainer;  ; class  HexahedronSetTopologyModifier;  ; class  MultilevelHexahedronSetTopologyContainer;  ; class  MultilevelModification;  ; class  NumericalIntegrationDescriptor;  Cross product for 3-elements vectors. More...;  ; class  PointSetGeometryAlgorithms;  ; class  PointSetTopologyContainer;  ; class  PointSetTopologyModifier;  ; class  QuadSetGeometryAlgorithms;  ; class  QuadSetTopologyContainer;  ; class  QuadSetTopologyModifier;  ; class  TetrahedronSetGeometryAlgorithms;  ; class  TetrahedronSetTopologyContainer;  ; class  TetrahedronSetTopologyModifier;  ; class  TriangleSetGeometryAlgorithms;  ; class  TriangleSetTopologyContainer;  : Object that stores a set of triangles and provides access to each triangle and its edges and vertices More...;  ; class  TriangleSetTopologyModifier;  . Functions; template<class Real > ; Real areaProduct (const sofa::type::Vec< 3, Real > &a, const sofa::type::Vec< 3, Real > &b);  Cross product for 3-elements Vectors. More...;  ; template<class Real > ; Real areaProduct (const type::Vec< 2, Real > &a, const type::Vec< 2, Real > &b);  area for 2-elements sofa::type::vectors. More...;  ; template<class Real > ; Real areaProduct (const type::Vec< 1, Real > &, const type::Vec< 1, Real > &);  ar",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html:178,Modifiability,Variab,Variables,178,"﻿. SOFA API: sofa::component::topology::container::dynamic Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::topology::container::dynamic Namespace Reference . Classes; class  DynamicSparseGridGeometryAlgorithms;  ; class  DynamicSparseGridTopologyContainer;  ; class  DynamicSparseGridTopologyModifier;  ; class  BasicArrayInterface;  A class used as an interface with an array : Useful to compute geometric information on each edge in an efficient way. More...;  ; class  EdgeSetGeometryAlgorithms;  ; class  EdgeSetTopologyContainer;  ; class  EdgeSetTopologyModifier;  ; class  HexahedronSetGeometryAlgorithms;  ; class  HexahedronSetTopologyContainer;  ; class  HexahedronSetTopologyModifier;  ; class  MultilevelHexahedronSetTopologyContainer;  ; class  MultilevelModification;  ; class  NumericalIntegrationDescriptor;  Cross product for 3-elements vectors. More...;  ; class  PointSetGeometryAlgorithms;  ; class  PointSetTopologyContainer;  ; class  PointSetTopologyModifier;  ; class  QuadSetGeometryAlgorithms;  ; class  QuadSetTopologyContainer;  ; class  QuadSetTopologyModifier;  ; class  TetrahedronSetGeometryAlgorithms;  ; class  TetrahedronSetTopologyContainer;  ; class  TetrahedronSetTopologyModifier;  ; class  TriangleSetGeometryAlgorithms;  ; class  TriangleSetTopologyContainer;  : Object that stores a set of triangles and provides access to each triangle and its edges and vertices More...;  ; class  TriangleSetTopologyModifier;  . Functions; template<class Real > ; Real areaProduct (const sofa::type::Vec< 3, Real > &a, const sofa::type::Vec< 3, Real > &b);  Cross product for 3-elements Vectors. More...;  ; template<class Real > ; Real areaProduct (const type::Vec< 2, Real > &a, const type::Vec< 2, Real > &b);  area for 2-elements sofa::type::vectors. More...;  ; template<class Real > ; Real areaProduct (const type::Vec< 1, Real > &, const type::Vec< 1, Real > &);  ar",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html:7536,Modifiability,Variab,Variables,7536,,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html:20250,Modifiability,Variab,Variable,20250," bool & ; is_snap_1, . bool & ; is_snap_2 . ). ◆ tripleProduct() [1/3]. template<typename real > . real sofa::component::topology::container::dynamic::tripleProduct ; (; const sofa::type::Vec< 1, real > & ; , . const sofa::type::Vec< 1, real > & ; , . const sofa::type::Vec< 1, real > & ;  . ). inline . Volume invalid for 1-elements sofa::type::vectors. . ◆ tripleProduct() [2/3]. template<typename real > . real sofa::component::topology::container::dynamic::tripleProduct ; (; const sofa::type::Vec< 2, real > & ; , . const sofa::type::Vec< 2, real > & ; , . const sofa::type::Vec< 2, real > & ;  . ). inline . Volume invalid for 2-elements sofa::type::vectors. . ◆ tripleProduct() [3/3]. template<typename real > . real sofa::component::topology::container::dynamic::tripleProduct ; (; const sofa::type::Vec< 3, real > & ; a, . const sofa::type::Vec< 3, real > & ; b, . const sofa::type::Vec< 3, real > & ; c . ). inline . Volume (triple product) for 3-elements sofa::type::vectors. . Variable Documentation. ◆ DynamicSparseGridGeometryAlgorithms< Vec2Types >. template class SOFA_COMPONENT_TOPOLOGY_CONTAINER_DYNAMIC_API sofa::component::topology::container::dynamic::DynamicSparseGridGeometryAlgorithms< Vec2Types >. ◆ DynamicSparseGridGeometryAlgorithms< Vec3Types >. template class SOFA_COMPONENT_TOPOLOGY_CONTAINER_DYNAMIC_API sofa::component::topology::container::dynamic::DynamicSparseGridGeometryAlgorithms< Vec3Types >. ◆ EdgeSetGeometryAlgorithms< Rigid2Types >. template class SOFA_COMPONENT_TOPOLOGY_CONTAINER_DYNAMIC_API sofa::component::topology::container::dynamic::EdgeSetGeometryAlgorithms< Rigid2Types >. ◆ EdgeSetGeometryAlgorithms< Rigid3Types >. template class SOFA_COMPONENT_TOPOLOGY_CONTAINER_DYNAMIC_API sofa::component::topology::container::dynamic::EdgeSetGeometryAlgorithms< Rigid3Types >. ◆ EdgeSetGeometryAlgorithms< Vec1Types >. template class SOFA_COMPONENT_TOPOLOGY_CONTAINER_DYNAMIC_API sofa::component::topology::container::dynamic::EdgeSetGeometryAlgorithms< Ve",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html:1455,Security,access,access,1455,"space Reference . Classes; class  DynamicSparseGridGeometryAlgorithms;  ; class  DynamicSparseGridTopologyContainer;  ; class  DynamicSparseGridTopologyModifier;  ; class  BasicArrayInterface;  A class used as an interface with an array : Useful to compute geometric information on each edge in an efficient way. More...;  ; class  EdgeSetGeometryAlgorithms;  ; class  EdgeSetTopologyContainer;  ; class  EdgeSetTopologyModifier;  ; class  HexahedronSetGeometryAlgorithms;  ; class  HexahedronSetTopologyContainer;  ; class  HexahedronSetTopologyModifier;  ; class  MultilevelHexahedronSetTopologyContainer;  ; class  MultilevelModification;  ; class  NumericalIntegrationDescriptor;  Cross product for 3-elements vectors. More...;  ; class  PointSetGeometryAlgorithms;  ; class  PointSetTopologyContainer;  ; class  PointSetTopologyModifier;  ; class  QuadSetGeometryAlgorithms;  ; class  QuadSetTopologyContainer;  ; class  QuadSetTopologyModifier;  ; class  TetrahedronSetGeometryAlgorithms;  ; class  TetrahedronSetTopologyContainer;  ; class  TetrahedronSetTopologyModifier;  ; class  TriangleSetGeometryAlgorithms;  ; class  TriangleSetTopologyContainer;  : Object that stores a set of triangles and provides access to each triangle and its edges and vertices More...;  ; class  TriangleSetTopologyModifier;  . Functions; template<class Real > ; Real areaProduct (const sofa::type::Vec< 3, Real > &a, const sofa::type::Vec< 3, Real > &b);  Cross product for 3-elements Vectors. More...;  ; template<class Real > ; Real areaProduct (const type::Vec< 2, Real > &a, const type::Vec< 2, Real > &b);  area for 2-elements sofa::type::vectors. More...;  ; template<class Real > ; Real areaProduct (const type::Vec< 1, Real > &, const type::Vec< 1, Real > &);  area invalid for 1-elements sofa::type::vectors. More...;  ; template<class Real > ; type::Vec< 2, Real > ortho (const type::Vec< 2, Real > &in);  orthogonal of a 2D vector More...;  ; template<class Real > ; type::Vec< 2, Real > cross (const",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html:7479,Testability,Test,Test,7479,"ctory);  ; void registerTetrahedronSetGeometryAlgorithms (sofa::core::ObjectFactory *factory);  ; void registerTetrahedronSetTopologyContainer (sofa::core::ObjectFactory *factory);  ; void registerTetrahedronSetTopologyModifier (sofa::core::ObjectFactory *factory);  ; void registerTriangleSetGeometryAlgorithms (sofa::core::ObjectFactory *factory);  ; void registerTriangleSetTopologyContainer (sofa::core::ObjectFactory *factory);  ; void registerTriangleSetTopologyModifier (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  ; template<class Coord > ; bool is_point_in_quad (const Coord &p, const Coord &a, const Coord &b, const Coord &c, const Coord &d);  ; void snapping_test_quad (double epsilon, double alpha0, double alpha1, double alpha2, double alpha3, bool &is_snap_0, bool &is_snap_1, bool &is_snap_2, bool &is_snap_3);  ; void SOFA_COMPONENT_TOPOLOGY_CONTAINER_DYNAMIC_API snapping_test_triangle (SReal epsilon, SReal alpha0, SReal alpha1, SReal alpha2, bool &is_snap_0, bool &is_snap_1, bool &is_snap_2);  ; void SOFA_COMPONENT_TOPOLOGY_CONTAINER_DYNAMIC_API snapping_test_edge (SReal epsilon, SReal alpha0, SReal alpha1, bool &is_snap_0, bool &is_snap_1);  ; template<class Real > ; bool is_point_in_triangle (const sofa::type::Vec< 3, Real > &p, const sofa::type::Vec< 3, Real > &a, const sofa::type::Vec< 3, Real > &b, const sofa::type::Vec< 3, Real > &c);  ; template<class Real > ; bool is_point_in_halfplane (const sofa::type::Vec< 3, Real > &p, unsigned int e0, unsigned int e1, const sofa::type::Vec< 3, Real > &a, const sofa::type::Vec< 3, Real > &b, const sofa::type::Vec< 3, Real > &c, unsigned int ind_p0, unsigned int ind_p1, unsigned int ind_p2);  Test if a point p is in the right halfplane.",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html:12580,Testability,Test,Test,12580," ; (; const type::Vec< 2, Real > & ; , . const type::Vec< 2, Real > & ;  . ). cross product for 2-elements sofa::type::vectors. . ◆ getModuleName(). const char * sofa::component::topology::container::dynamic::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::topology::container::dynamic::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_TOPOLOGY_CONTAINER_DYNAMIC_API void sofa::component::topology::container::dynamic::init ; (; ). ◆ initExternalModule(). void sofa::component::topology::container::dynamic::initExternalModule ; (; ). ◆ is_point_in_halfplane(). template<class Real > . bool sofa::component::topology::container::dynamic::is_point_in_halfplane ; (; const sofa::type::Vec< 3, Real > & ; p, . unsigned int ; e0, . unsigned int ; e1, . const sofa::type::Vec< 3, Real > & ; a, . const sofa::type::Vec< 3, Real > & ; b, . const sofa::type::Vec< 3, Real > & ; c, . unsigned int ; ind_p0, . unsigned int ; ind_p1, . unsigned int ; ind_p2 . ). Test if a point p is in the right halfplane. . ◆ is_point_in_quad(). template<class Coord > . bool sofa::component::topology::container::dynamic::is_point_in_quad ; (; const Coord & ; p, . const Coord & ; a, . const Coord & ; b, . const Coord & ; c, . const Coord & ; d . ). ◆ is_point_in_triangle(). template<class Real > . bool sofa::component::topology::container::dynamic::is_point_in_triangle ; (; const sofa::type::Vec< 3, Real > & ; p, . const sofa::type::Vec< 3, Real > & ; a, . const sofa::type::Vec< 3, Real > & ; b, . const sofa::type::Vec< 3, Real > & ; c . ). ◆ lfactorial(). size_t sofa::component::topology::container::dynamic::lfactorial ; (; size_t ; n). inline . this function is only valid for small value of n which should be sufficient for a regular use. . ◆ multinomial() [1/2]. template<size_t N, class Real > . Real sofa::component::topology::container::dynamic::multinomial ; (; const size_t ; n, . const sofa::type::Vec< N, unsigned char > ; tbi . ). ◆ multinomial() [2/2]. template<class Real > ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1utility.html:167,Modifiability,Variab,Variables,167,﻿. SOFA API: sofa::component::topology::utility Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::topology::utility Namespace Reference . Classes; class  TopologicalChangeProcessor;  ; class  TriangleIncisionInformation;  ; class  TopologyBoundingTrasher;  ; class  TopologyChecker;  . Functions; void registerTopologicalChangeProcessor (sofa::core::ObjectFactory *factory);  ; void registerTopologyBoundingTrasher (sofa::core::ObjectFactory *factory);  ; void registerTopologyChecker (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; template class SOFA_COMPONENT_TOPOLOGY_UTILITY_API TopologyBoundingTrasher< Vec3Types >;  . Function Documentation. ◆ getModuleName(). const char * sofa::component::topology::utility::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::topology::utility::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_TOPOLOGY_UTILITY_API void sofa::component::topology::utility::init ; (; ). ◆ initExternalModule(). void sofa::component::topology::utility::initExternalModule ; (; ). ◆ registerObjects(). void sofa::component::topology::utility::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerTopologicalChangeProcessor(). void sofa::component::topology::utility::registerTopologicalChangeProcessor ; (; sofa::core::ObjectFactory * ; factory). ◆ registerTopologyBoundingTrasher(). void sofa::component::topology::utility::registerTopologyBoundingTrasher ; (; sofa::core::ObjectFactory * ; factory). ◆ registerTopologyChecker(). void sofa::component::topology::utility::registerTopologyChecker ; (; sofa::core::ObjectFactory * ; factory). V,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1utility.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1utility.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1utility.html:917,Modifiability,Variab,Variables,917,﻿. SOFA API: sofa::component::topology::utility Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::topology::utility Namespace Reference . Classes; class  TopologicalChangeProcessor;  ; class  TriangleIncisionInformation;  ; class  TopologyBoundingTrasher;  ; class  TopologyChecker;  . Functions; void registerTopologicalChangeProcessor (sofa::core::ObjectFactory *factory);  ; void registerTopologyBoundingTrasher (sofa::core::ObjectFactory *factory);  ; void registerTopologyChecker (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; template class SOFA_COMPONENT_TOPOLOGY_UTILITY_API TopologyBoundingTrasher< Vec3Types >;  . Function Documentation. ◆ getModuleName(). const char * sofa::component::topology::utility::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::topology::utility::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_TOPOLOGY_UTILITY_API void sofa::component::topology::utility::init ; (; ). ◆ initExternalModule(). void sofa::component::topology::utility::initExternalModule ; (; ). ◆ registerObjects(). void sofa::component::topology::utility::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerTopologicalChangeProcessor(). void sofa::component::topology::utility::registerTopologicalChangeProcessor ; (; sofa::core::ObjectFactory * ; factory). ◆ registerTopologyBoundingTrasher(). void sofa::component::topology::utility::registerTopologyBoundingTrasher ; (; sofa::core::ObjectFactory * ; factory). ◆ registerTopologyChecker(). void sofa::component::topology::utility::registerTopologyChecker ; (; sofa::core::ObjectFactory * ; factory). V,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1utility.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1utility.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1utility.html:2000,Modifiability,Variab,Variable,2000,; class  TriangleIncisionInformation;  ; class  TopologyBoundingTrasher;  ; class  TopologyChecker;  . Functions; void registerTopologicalChangeProcessor (sofa::core::ObjectFactory *factory);  ; void registerTopologyBoundingTrasher (sofa::core::ObjectFactory *factory);  ; void registerTopologyChecker (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; template class SOFA_COMPONENT_TOPOLOGY_UTILITY_API TopologyBoundingTrasher< Vec3Types >;  . Function Documentation. ◆ getModuleName(). const char * sofa::component::topology::utility::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::topology::utility::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_TOPOLOGY_UTILITY_API void sofa::component::topology::utility::init ; (; ). ◆ initExternalModule(). void sofa::component::topology::utility::initExternalModule ; (; ). ◆ registerObjects(). void sofa::component::topology::utility::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerTopologicalChangeProcessor(). void sofa::component::topology::utility::registerTopologicalChangeProcessor ; (; sofa::core::ObjectFactory * ; factory). ◆ registerTopologyBoundingTrasher(). void sofa::component::topology::utility::registerTopologyBoundingTrasher ; (; sofa::core::ObjectFactory * ; factory). ◆ registerTopologyChecker(). void sofa::component::topology::utility::registerTopologyChecker ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ TopologyBoundingTrasher< Vec3Types >. template class SOFA_COMPONENT_TOPOLOGY_UTILITY_API sofa::component::topology::utility::TopologyBoundingTrasher< Vec3Types >. sofacomponenttopologyutility; Generated on Mon Nov 11 2024 03:10:04 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1utility.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1utility.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:8536,Deployability,Configurat,ConfigurationSetting,8536,,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:9831,Deployability,Pipeline,Pipeline,9831,TWEEN_BASE_AND (sofa::core::objectmodel::BaseObject);  ;  SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND (sofa::core::objectmodel::ContextObject);  ;  SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND (sofa::core::objectmodel::ConfigurationSetting);  ;  SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND (sofa::core::behavior::BaseAnimationLoop);  ;  SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND (sofa::core::behavior::BaseMass);  ;  SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND (sofa::core::behavior::OdeSolver);  ;  SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND (sofa::core::behavior::ConstraintSolver);  ;  SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND (sofa::core::behavior::BaseLinearSolver);  ;  SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND (sofa::core::behavior::BaseMechanicalState);  ;  SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND (sofa::core::behavior::BaseForceField);  ;  SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND (sofa::core::behavior::BaseInteractionForceField);  ;  SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND (sofa::core::behavior::BaseProjectiveConstraintSet);  ;  SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND (sofa::core::behavior::BaseConstraintSet);  ;  SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND (sofa::core::topology::Topology);  ;  SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND (sofa::core::topology::BaseMeshTopology);  ;  SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND (sofa::core::topology::BaseTopologyObject);  ;  SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND (sofa::core::collision::Pipeline);  ;  SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND (sofa::core::visual::VisualLoop);  ;  SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND (sofa::core::visual::Shader);  ;  SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND (sofa::core::visual::VisualModel);  ;  SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND (sofa::core::visual::VisualManager);  ; template<class Source > ; sofa::core::objectmodel::Base * castToBase (Source *b);  Dynamic cast from the type parameter B* into Base*.,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:11035,Deployability,Configurat,ConfigurationSetting,11035,,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:12330,Deployability,Pipeline,Pipeline,12330,"QUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::objectmodel::BaseObject);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::objectmodel::ContextObject);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::objectmodel::ConfigurationSetting);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::behavior::BaseAnimationLoop);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::behavior::BaseMass);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::behavior::OdeSolver);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::behavior::ConstraintSolver);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::behavior::BaseLinearSolver);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::behavior::BaseMechanicalState);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::behavior::BaseForceField);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::behavior::BaseInteractionForceField);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::behavior::BaseProjectiveConstraintSet);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::behavior::BaseConstraintSet);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::topology::Topology);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::topology::BaseMeshTopology);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::topology::BaseTopologyObject);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::collision::Pipeline);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::visual::VisualLoop);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::visual::Shader);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::visual::VisualModel);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::visual::VisualManager);  ; SOFA_CORE_API void init ();  Initialize the SofaCore library, as well as its dependencies: SofaDefaultType, SofaHelper.",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:23197,Deployability,Pipeline,Pipeline,23197,E_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::behavior::BaseMass ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [9/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::behavior::BaseMechanicalState ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [10/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::behavior::BaseProjectiveConstraintSet ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [11/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::behavior::ConstraintSolver ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [12/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::behavior::OdeSolver ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [13/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::BehaviorModel ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [14/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::collision::Pipeline ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [15/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::CollisionModel ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [16/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::objectmodel::BaseObject ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [17/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::objectmodel::ConfigurationSetting ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [18/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::objectmodel::ContextObject ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [19/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::topology::BaseMeshTopology ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [20/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa:,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:23675,Deployability,Configurat,ConfigurationSetting,23675,::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::behavior::ConstraintSolver ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [12/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::behavior::OdeSolver ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [13/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::BehaviorModel ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [14/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::collision::Pipeline ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [15/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::CollisionModel ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [16/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::objectmodel::BaseObject ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [17/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::objectmodel::ConfigurationSetting ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [18/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::objectmodel::ContextObject ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [19/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::topology::BaseMeshTopology ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [20/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::topology::BaseTopologyObject ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [21/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::topology::Topology ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [22/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::visual::Shader ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [23/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::co,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:27398,Deployability,Pipeline,Pipeline,27398,_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::behavior::BaseMass ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [9/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::behavior::BaseMechanicalState ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [10/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::behavior::BaseProjectiveConstraintSet ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [11/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::behavior::ConstraintSolver ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [12/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::behavior::OdeSolver ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [13/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::BehaviorModel ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [14/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::collision::Pipeline ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [15/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::CollisionModel ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [16/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::objectmodel::BaseObject ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [17/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::objectmodel::ConfigurationSetting ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [18/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::objectmodel::ContextObject ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [19/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::topology::BaseMeshTopology ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [20/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa:,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:27876,Deployability,Configurat,ConfigurationSetting,27876,::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::behavior::ConstraintSolver ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [12/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::behavior::OdeSolver ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [13/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::BehaviorModel ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [14/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::collision::Pipeline ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [15/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::CollisionModel ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [16/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::objectmodel::BaseObject ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [17/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::objectmodel::ConfigurationSetting ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [18/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::objectmodel::ContextObject ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [19/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::topology::BaseMeshTopology ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [20/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::topology::BaseTopologyObject ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [21/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::topology::Topology ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [22/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::visual::Shader ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [23/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::co,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:19451,Energy Efficiency,reduce,reduce,19451,"string & ; text). ◆ castTo(). template<class Dest > . Dest sofa::core::castTo ; (; sofa::core::objectmodel::Base * ; base). Dynamic cast from Base* into the type parameter Dest. . ◆ castToBase(). template<class Source > . sofa::core::objectmodel::Base* sofa::core::castToBase ; (; Source * ; b). Dynamic cast from the type parameter B* into Base*. ; CORE::OPAQUE FUNCTION /////////////////////////////////////////////////; CORE::OPAQUE function are a groupe of function that make ""opaque"" some of the common sofa behaviors.; Core::Opaque functions are:; Base* sofa::core::castToBase(T*) replace dynamic_cast<Base*>(T*);; T* sofa::core::castTo(Base*) replace dynamic_cast<T*>(Base*);; sofa:core::objectmodel::base::GetClass<T>() replace T::GetClass();. These functions are called ""opaque"" as they work with only forward declaration of the involved types in comparison to class methods the requires the full class declaration to be used.; It is highly recommended to use as much as possible opaque function in header files as this allow to reduce the dependency tree.; Opaque function may be slower at runtime (by one function call) but this is true only if LTO isn't able to optimize them properly. If you have experience/feedback with LTO please join the discussion in https://github.com/sofa-framework/sofa/discussions/1822 Defines the baseline functions for a type all the types in-herit from Base. These are non-opaque function that needs to be specialized in order to implement an opaque version for a given type. . ◆ cleanup(). SOFA_CORE_API void sofa::core::cleanup ; (; ). Clean up the resources used by the SofaCore library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ findTemplatedCreator(). void sofa::core::findTemplatedCreator ; (; objectmodel::BaseContext * ; context, . const ObjectFactory::Creator::SPtr & ; creator, . const std::string & ; templateName, . std::map< std::string, std::vector< std::string >> & ; creatorsErrors, . std::vector< std::pair< std::string, ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:878,Integrability,interface,interface,878,"﻿. SOFA API: sofa::core Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::core Namespace Reference . Namespaces;  behavior;  For BaseMatrix. ;  ;  collision;  ;  constraintparams;  ;  execparams;  ;  loader;  ;  matrixaccumulator;  ;  mechanicalparams;  ;  objectmodel;  ;  topology;  ;  visual;  . Classes; class  State;  Component storing position and velocity vectors. More...;  ; struct  AccumulationVecId;  Proxy class for accessing elements within an imaginary container that represents the cumulative sum of multiple other containers. Each individual container is represented by a VecId. The class maintains a list of VecIdDeriv objects, which defines the containers contributing to the final cumulative sum. This class provides a simplified interface for accessing elements within the cumulative container. It allows retrieving specific elements using the overloaded subscript operator (operator[]). When accessing an element at a particular index, the class delegates the retrieval to the appropriate container represented by the associated VecIdDeriv. In addition to element retrieval, the class supports dynamic management of the contributing containers. It offers functions to add and remove VecId objects from the list of containers that contribute to the cumulative sum. More...;  ; class  MappingMatrixAccumulator;  ; class  ListMappingMatrixAccumulator;  ; class  GeometricStiffnessMatrix;  ; class  BaseMapping;  ; class  BaseMatrixAccumulatorComponent;  ; struct  get_base_object_strong;  ; class  BaseState;  Component storing position and velocity vectors. More...;  ; class  BehaviorModel;  Abstract Interface of components defining the behavior of a simulated object. More...;  ; class  CategoryLibrary;  An Generic Category of the Sofa Library. More...;  ; class  BaseCollisionElementIterator;  Base class for reference to an collision element defin",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:1750,Integrability,Interface,Interface,1750,"objects, which defines the containers contributing to the final cumulative sum. This class provides a simplified interface for accessing elements within the cumulative container. It allows retrieving specific elements using the overloaded subscript operator (operator[]). When accessing an element at a particular index, the class delegates the retrieval to the appropriate container represented by the associated VecIdDeriv. In addition to element retrieval, the class supports dynamic management of the contributing containers. It offers functions to add and remove VecId objects from the list of containers that contribute to the cumulative sum. More...;  ; class  MappingMatrixAccumulator;  ; class  ListMappingMatrixAccumulator;  ; class  GeometricStiffnessMatrix;  ; class  BaseMapping;  ; class  BaseMatrixAccumulatorComponent;  ; struct  get_base_object_strong;  ; class  BaseState;  Component storing position and velocity vectors. More...;  ; class  BehaviorModel;  Abstract Interface of components defining the behavior of a simulated object. More...;  ; class  CategoryLibrary;  An Generic Category of the Sofa Library. More...;  ; class  BaseCollisionElementIterator;  Base class for reference to an collision element defined by its index More...;  ; class  TCollisionElementIterator;  Reference to an collision element defined by its index inside a given collision model. More...;  ; class  CollisionElementIterator;  Reference to an abstract collision element. More...;  ; class  CollisionElementActiver;  ; class  CollisionModel;  Abstract CollisionModel interface. More...;  ; class  ComponentLibrary;  An Generic Component of the Sofa Library. More...;  ; class  ComponentNameHelper;  ; class  ConstraintParams;  ; class  DataEngine;  from a set of Data inputs computes a set of Data outputs More...;  ; struct  DataTracker;  ; class  DataTrackerDDGNode;  A DDGNode with trackable input Data (containing a DataTracker) More...;  ; class  DataTrackerCallback;  ; class  DataTrackerFun",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:2336,Integrability,interface,interface,2336," offers functions to add and remove VecId objects from the list of containers that contribute to the cumulative sum. More...;  ; class  MappingMatrixAccumulator;  ; class  ListMappingMatrixAccumulator;  ; class  GeometricStiffnessMatrix;  ; class  BaseMapping;  ; class  BaseMatrixAccumulatorComponent;  ; struct  get_base_object_strong;  ; class  BaseState;  Component storing position and velocity vectors. More...;  ; class  BehaviorModel;  Abstract Interface of components defining the behavior of a simulated object. More...;  ; class  CategoryLibrary;  An Generic Category of the Sofa Library. More...;  ; class  BaseCollisionElementIterator;  Base class for reference to an collision element defined by its index More...;  ; class  TCollisionElementIterator;  Reference to an collision element defined by its index inside a given collision model. More...;  ; class  CollisionElementIterator;  Reference to an abstract collision element. More...;  ; class  CollisionElementActiver;  ; class  CollisionModel;  Abstract CollisionModel interface. More...;  ; class  ComponentLibrary;  An Generic Component of the Sofa Library. More...;  ; class  ComponentNameHelper;  ; class  ConstraintParams;  ; class  DataEngine;  from a set of Data inputs computes a set of Data outputs More...;  ; struct  DataTracker;  ; class  DataTrackerDDGNode;  A DDGNode with trackable input Data (containing a DataTracker) More...;  ; class  DataTrackerCallback;  ; class  DataTrackerFunctor;  ; class  DerivativeMatrix;  ; class  ExecParams;  Class gathering parameters use by most components methods, and transmitted by all visitors. More...;  ; struct  CleanupCheck;  ; class  Mapping;  Specialized interface to convert a model state of type TIn to a model state of type TOut. This is basically a sofa::core::BaseMapping with given input and output types. More...;  ; class  MatrixAccumulatorInterface;  ; class  MatrixAccumulatorIndexChecker;  ; class  ListMatrixAccumulator;  ; class  MechanicalParams;  Class gat",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:2981,Integrability,interface,interface,2981,"ement defined by its index More...;  ; class  TCollisionElementIterator;  Reference to an collision element defined by its index inside a given collision model. More...;  ; class  CollisionElementIterator;  Reference to an abstract collision element. More...;  ; class  CollisionElementActiver;  ; class  CollisionModel;  Abstract CollisionModel interface. More...;  ; class  ComponentLibrary;  An Generic Component of the Sofa Library. More...;  ; class  ComponentNameHelper;  ; class  ConstraintParams;  ; class  DataEngine;  from a set of Data inputs computes a set of Data outputs More...;  ; struct  DataTracker;  ; class  DataTrackerDDGNode;  A DDGNode with trackable input Data (containing a DataTracker) More...;  ; class  DataTrackerCallback;  ; class  DataTrackerFunctor;  ; class  DerivativeMatrix;  ; class  ExecParams;  Class gathering parameters use by most components methods, and transmitted by all visitors. More...;  ; struct  CleanupCheck;  ; class  Mapping;  Specialized interface to convert a model state of type TIn to a model state of type TOut. This is basically a sofa::core::BaseMapping with given input and output types. More...;  ; class  MatrixAccumulatorInterface;  ; class  MatrixAccumulatorIndexChecker;  ; class  ListMatrixAccumulator;  ; class  MechanicalParams;  Class gathering parameters use by mechanical components methods, and transmitted by mechanical visitors. More...;  ; class  MechanicalStatesMatrixAccumulators;  ; class  Multi2Mapping;  Specialized interface to describe many to many mapping. The inputs can be of two different types, while all the outputs must be of the same type. More...;  ; class  MultiMapping;  Specialized interface to describe many to many mapping. All the input must have the same type, and all the output must have the same type. See also class Multi2Mapping. More...;  ; class  TMultiVecId;  ; struct  StateVecAccessor;  Helper class to access vectors of a given type in a given State. More...;  ; struct  StateVecAccessor< Da",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:3486,Integrability,interface,interface,3486,"r;  ; class  ConstraintParams;  ; class  DataEngine;  from a set of Data inputs computes a set of Data outputs More...;  ; struct  DataTracker;  ; class  DataTrackerDDGNode;  A DDGNode with trackable input Data (containing a DataTracker) More...;  ; class  DataTrackerCallback;  ; class  DataTrackerFunctor;  ; class  DerivativeMatrix;  ; class  ExecParams;  Class gathering parameters use by most components methods, and transmitted by all visitors. More...;  ; struct  CleanupCheck;  ; class  Mapping;  Specialized interface to convert a model state of type TIn to a model state of type TOut. This is basically a sofa::core::BaseMapping with given input and output types. More...;  ; class  MatrixAccumulatorInterface;  ; class  MatrixAccumulatorIndexChecker;  ; class  ListMatrixAccumulator;  ; class  MechanicalParams;  Class gathering parameters use by mechanical components methods, and transmitted by mechanical visitors. More...;  ; class  MechanicalStatesMatrixAccumulators;  ; class  Multi2Mapping;  Specialized interface to describe many to many mapping. The inputs can be of two different types, while all the outputs must be of the same type. More...;  ; class  MultiMapping;  Specialized interface to describe many to many mapping. All the input must have the same type, and all the output must have the same type. See also class Multi2Mapping. More...;  ; class  TMultiVecId;  ; struct  StateVecAccessor;  Helper class to access vectors of a given type in a given State. More...;  ; struct  StateVecAccessor< DataTypes, V_COORD, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_COORD, V_WRITE >;  ; struct  StateVecAccessor< DataTypes, V_DERIV, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_DERIV, V_WRITE >;  ; struct  StateVecAccessor< DataTypes, V_MATDERIV, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_MATDERIV, V_WRITE >;  ; struct  StateVecAccessor< DataTypes, V_ALL, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_ALL, V_WRITE >;  ; class  TMultiVecId< V_ALL",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:3666,Integrability,interface,interface,3666,"t Data (containing a DataTracker) More...;  ; class  DataTrackerCallback;  ; class  DataTrackerFunctor;  ; class  DerivativeMatrix;  ; class  ExecParams;  Class gathering parameters use by most components methods, and transmitted by all visitors. More...;  ; struct  CleanupCheck;  ; class  Mapping;  Specialized interface to convert a model state of type TIn to a model state of type TOut. This is basically a sofa::core::BaseMapping with given input and output types. More...;  ; class  MatrixAccumulatorInterface;  ; class  MatrixAccumulatorIndexChecker;  ; class  ListMatrixAccumulator;  ; class  MechanicalParams;  Class gathering parameters use by mechanical components methods, and transmitted by mechanical visitors. More...;  ; class  MechanicalStatesMatrixAccumulators;  ; class  Multi2Mapping;  Specialized interface to describe many to many mapping. The inputs can be of two different types, while all the outputs must be of the same type. More...;  ; class  MultiMapping;  Specialized interface to describe many to many mapping. All the input must have the same type, and all the output must have the same type. See also class Multi2Mapping. More...;  ; class  TMultiVecId;  ; struct  StateVecAccessor;  Helper class to access vectors of a given type in a given State. More...;  ; struct  StateVecAccessor< DataTypes, V_COORD, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_COORD, V_WRITE >;  ; struct  StateVecAccessor< DataTypes, V_DERIV, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_DERIV, V_WRITE >;  ; struct  StateVecAccessor< DataTypes, V_MATDERIV, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_MATDERIV, V_WRITE >;  ; struct  StateVecAccessor< DataTypes, V_ALL, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_ALL, V_WRITE >;  ; class  TMultiVecId< V_ALL, vaccess >;  ; struct  ObjectRegistrationEntry;  ; class  ObjectFactory;  ; class  ObjectCreator;  Typed Creator class used to create instances of object type RealObject. More...;  ; class  ObjectRegist",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:12757,Integrability,depend,dependencies,12757,"QUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::objectmodel::BaseObject);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::objectmodel::ContextObject);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::objectmodel::ConfigurationSetting);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::behavior::BaseAnimationLoop);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::behavior::BaseMass);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::behavior::OdeSolver);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::behavior::ConstraintSolver);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::behavior::BaseLinearSolver);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::behavior::BaseMechanicalState);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::behavior::BaseForceField);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::behavior::BaseInteractionForceField);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::behavior::BaseProjectiveConstraintSet);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::behavior::BaseConstraintSet);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::topology::Topology);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::topology::BaseMeshTopology);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::topology::BaseTopologyObject);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::collision::Pipeline);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::visual::VisualLoop);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::visual::Shader);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::visual::VisualModel);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::visual::VisualManager);  ; SOFA_CORE_API void init ();  Initialize the SofaCore library, as well as its dependencies: SofaDefaultType, SofaHelper.",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:13032,Integrability,depend,dependencies,13032,"RE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::topology::Topology);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::topology::BaseMeshTopology);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::topology::BaseTopologyObject);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::collision::Pipeline);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::visual::VisualLoop);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::visual::Shader);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::visual::VisualModel);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::visual::VisualManager);  ; SOFA_CORE_API void init ();  Initialize the SofaCore library, as well as its dependencies: SofaDefaultType, SofaHelper. More...;  ; SOFA_CORE_API bool isInitialized ();  Return true if and only if the SofaCore library has been initialized. More...;  ; SOFA_CORE_API void cleanup ();  Clean up the resources used by the SofaCore library, as well as its dependencies: SofaDefaultType, SofaHelper. More...;  ; SOFA_CORE_API bool isCleanedUp ();  Return true if and only if the SofaCore library has been cleaned up. More...;  ; void findTemplatedCreator (objectmodel::BaseContext *context, const ObjectFactory::Creator::SPtr &creator, const std::string &templateName, std::map< std::string, std::vector< std::string >> &creatorsErrors, std::vector< std::pair< std::string, ObjectFactory::Creator::SPtr > > &creators, objectmodel::BaseObjectDescription *arg);  ; void to_json (nlohmann::json &json, const sofa::core::ObjectFactory::Creator::SPtr &creator);  ; void to_json (nlohmann::json &json, const sofa::core::ObjectFactory::ClassEntry::SPtr &entry);  ;  SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND (sofa::simulation::Node);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::simulation::Node);  . Variables; template class SOFA_CORE_API Multi2Mapping< Vec1Types, Rigid3Types, Rigid3Types >;  ; template class SOFA",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:19462,Integrability,depend,dependency,19462,"string & ; text). ◆ castTo(). template<class Dest > . Dest sofa::core::castTo ; (; sofa::core::objectmodel::Base * ; base). Dynamic cast from Base* into the type parameter Dest. . ◆ castToBase(). template<class Source > . sofa::core::objectmodel::Base* sofa::core::castToBase ; (; Source * ; b). Dynamic cast from the type parameter B* into Base*. ; CORE::OPAQUE FUNCTION /////////////////////////////////////////////////; CORE::OPAQUE function are a groupe of function that make ""opaque"" some of the common sofa behaviors.; Core::Opaque functions are:; Base* sofa::core::castToBase(T*) replace dynamic_cast<Base*>(T*);; T* sofa::core::castTo(Base*) replace dynamic_cast<T*>(Base*);; sofa:core::objectmodel::base::GetClass<T>() replace T::GetClass();. These functions are called ""opaque"" as they work with only forward declaration of the involved types in comparison to class methods the requires the full class declaration to be used.; It is highly recommended to use as much as possible opaque function in header files as this allow to reduce the dependency tree.; Opaque function may be slower at runtime (by one function call) but this is true only if LTO isn't able to optimize them properly. If you have experience/feedback with LTO please join the discussion in https://github.com/sofa-framework/sofa/discussions/1822 Defines the baseline functions for a type all the types in-herit from Base. These are non-opaque function that needs to be specialized in order to implement an opaque version for a given type. . ◆ cleanup(). SOFA_CORE_API void sofa::core::cleanup ; (; ). Clean up the resources used by the SofaCore library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ findTemplatedCreator(). void sofa::core::findTemplatedCreator ; (; objectmodel::BaseContext * ; context, . const ObjectFactory::Creator::SPtr & ; creator, . const std::string & ; templateName, . std::map< std::string, std::vector< std::string >> & ; creatorsErrors, . std::vector< std::pair< std::string, ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:20061,Integrability,depend,dependencies,20061,"::castTo(Base*) replace dynamic_cast<T*>(Base*);; sofa:core::objectmodel::base::GetClass<T>() replace T::GetClass();. These functions are called ""opaque"" as they work with only forward declaration of the involved types in comparison to class methods the requires the full class declaration to be used.; It is highly recommended to use as much as possible opaque function in header files as this allow to reduce the dependency tree.; Opaque function may be slower at runtime (by one function call) but this is true only if LTO isn't able to optimize them properly. If you have experience/feedback with LTO please join the discussion in https://github.com/sofa-framework/sofa/discussions/1822 Defines the baseline functions for a type all the types in-herit from Base. These are non-opaque function that needs to be specialized in order to implement an opaque version for a given type. . ◆ cleanup(). SOFA_CORE_API void sofa::core::cleanup ; (; ). Clean up the resources used by the SofaCore library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ findTemplatedCreator(). void sofa::core::findTemplatedCreator ; (; objectmodel::BaseContext * ; context, . const ObjectFactory::Creator::SPtr & ; creator, . const std::string & ; templateName, . std::map< std::string, std::vector< std::string >> & ; creatorsErrors, . std::vector< std::pair< std::string, ObjectFactory::Creator::SPtr > > & ; creators, . objectmodel::BaseObjectDescription * ; arg . ). ◆ init(). SOFA_CORE_API void sofa::core::init ; (; ). Initialize the SofaCore library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ isCleanedUp(). SOFA_CORE_API bool sofa::core::isCleanedUp ; (; ). Return true if and only if the SofaCore library has been cleaned up. . ◆ isInitialized(). SOFA_CORE_API bool sofa::core::isInitialized ; (; ). Return true if and only if the SofaCore library has been initialized. . ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [1/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_B",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:20612,Integrability,depend,dependencies,20612,"y. If you have experience/feedback with LTO please join the discussion in https://github.com/sofa-framework/sofa/discussions/1822 Defines the baseline functions for a type all the types in-herit from Base. These are non-opaque function that needs to be specialized in order to implement an opaque version for a given type. . ◆ cleanup(). SOFA_CORE_API void sofa::core::cleanup ; (; ). Clean up the resources used by the SofaCore library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ findTemplatedCreator(). void sofa::core::findTemplatedCreator ; (; objectmodel::BaseContext * ; context, . const ObjectFactory::Creator::SPtr & ; creator, . const std::string & ; templateName, . std::map< std::string, std::vector< std::string >> & ; creatorsErrors, . std::vector< std::pair< std::string, ObjectFactory::Creator::SPtr > > & ; creators, . objectmodel::BaseObjectDescription * ; arg . ). ◆ init(). SOFA_CORE_API void sofa::core::init ; (; ). Initialize the SofaCore library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ isCleanedUp(). SOFA_CORE_API bool sofa::core::isCleanedUp ; (; ). Return true if and only if the SofaCore library has been cleaned up. . ◆ isInitialized(). SOFA_CORE_API bool sofa::core::isInitialized ; (; ). Return true if and only if the SofaCore library has been initialized. . ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [1/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::BaseMapping ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [2/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::BaseState ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [3/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::behavior::BaseAnimationLoop ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [4/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::behavior::BaseConstraintSet ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:185,Modifiability,Variab,Variables,185,"﻿. SOFA API: sofa::core Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::core Namespace Reference . Namespaces;  behavior;  For BaseMatrix. ;  ;  collision;  ;  constraintparams;  ;  execparams;  ;  loader;  ;  matrixaccumulator;  ;  mechanicalparams;  ;  objectmodel;  ;  topology;  ;  visual;  . Classes; class  State;  Component storing position and velocity vectors. More...;  ; struct  AccumulationVecId;  Proxy class for accessing elements within an imaginary container that represents the cumulative sum of multiple other containers. Each individual container is represented by a VecId. The class maintains a list of VecIdDeriv objects, which defines the containers contributing to the final cumulative sum. This class provides a simplified interface for accessing elements within the cumulative container. It allows retrieving specific elements using the overloaded subscript operator (operator[]). When accessing an element at a particular index, the class delegates the retrieval to the appropriate container represented by the associated VecIdDeriv. In addition to element retrieval, the class supports dynamic management of the contributing containers. It offers functions to add and remove VecId objects from the list of containers that contribute to the cumulative sum. More...;  ; class  MappingMatrixAccumulator;  ; class  ListMappingMatrixAccumulator;  ; class  GeometricStiffnessMatrix;  ; class  BaseMapping;  ; class  BaseMatrixAccumulatorComponent;  ; struct  get_base_object_strong;  ; class  BaseState;  Component storing position and velocity vectors. More...;  ; class  BehaviorModel;  Abstract Interface of components defining the behavior of a simulated object. More...;  ; class  CategoryLibrary;  An Generic Category of the Sofa Library. More...;  ; class  BaseCollisionElementIterator;  Base class for reference to an collision element defin",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:8536,Modifiability,Config,ConfigurationSetting,8536,,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:11035,Modifiability,Config,ConfigurationSetting,11035,,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:13885,Modifiability,Variab,Variables,13885,"; void to_json (nlohmann::json &json, const sofa::core::ObjectFactory::Creator::SPtr &creator);  ; void to_json (nlohmann::json &json, const sofa::core::ObjectFactory::ClassEntry::SPtr &entry);  ;  SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND (sofa::simulation::Node);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::simulation::Node);  . Variables; template class SOFA_CORE_API Multi2Mapping< Vec1Types, Rigid3Types, Rigid3Types >;  ; template class SOFA_CORE_API Multi2Mapping< Vec3Types, Rigid3Types, Vec3Types >;  ; template class SOFA_CORE_API Multi2Mapping< Vec3Types, Rigid3Types, Rigid3Types >;  ; template class SOFA_CORE_API Multi2Mapping< Vec3Types, Vec3Types, Vec3Types >;  ; template class SOFA_CORE_API Multi2Mapping< Vec3Types, Vec1Types, Vec3Types >;  ; template class SOFA_CORE_API Multi2Mapping< Vec1Types, Vec3Types, Rigid3Types >;  ; template class SOFA_CORE_API Multi2Mapping< Vec1Types, Rigid3Types, Vec3Types >;  ; template class SOFA_CORE_API Multi2Mapping< Vec1Types, Vec1Types, Rigid3Types >;  ; class SOFA_CORE_API BaseState;  ; template class SOFA_CORE_API State< Vec3dTypes >;  ; template class SOFA_CORE_API State< Vec2Types >;  ; template class SOFA_CORE_API State< Vec1Types >;  ; template class SOFA_CORE_API State< Vec6Types >;  ; template class SOFA_CORE_API State< Rigid3Types >;  ; template class SOFA_CORE_API State< Rigid2Types >;  ; template class SOFA_CORE_API State< Vec3fTypes >;  ; SOFA_CORE_API const std::unordered_map< VecType, std::string > VecTypeLabels;  ; template<class DataTypes , core::VecType vtype> ; constexpr sofa::Size StateTypeSize_v = StateTypeSize<DataTypes, vtype>::total_size;  . Typedef Documentation. ◆ ClassEntry. typedef sofa::core::ObjectFactory::ClassEntry sofa::core::ClassEntry. ◆ ConstMatrixDerivId. typedef TVecId<V_MATDERIV, V_READ > sofa::core::ConstMatrixDerivId. ◆ ConstMultiMatrixDerivId. typedef TMultiVecId<V_MATDERIV, V_READ> sofa::core::ConstMultiMatrixDerivId. ◆ ConstMultiVecCoordId. typedef TMultiVecId<V_",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:23675,Modifiability,Config,ConfigurationSetting,23675,::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::behavior::ConstraintSolver ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [12/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::behavior::OdeSolver ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [13/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::BehaviorModel ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [14/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::collision::Pipeline ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [15/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::CollisionModel ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [16/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::objectmodel::BaseObject ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [17/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::objectmodel::ConfigurationSetting ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [18/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::objectmodel::ContextObject ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [19/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::topology::BaseMeshTopology ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [20/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::topology::BaseTopologyObject ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [21/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::topology::Topology ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [22/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::visual::Shader ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [23/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::co,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:27876,Modifiability,Config,ConfigurationSetting,27876,::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::behavior::ConstraintSolver ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [12/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::behavior::OdeSolver ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [13/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::BehaviorModel ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [14/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::collision::Pipeline ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [15/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::CollisionModel ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [16/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::objectmodel::BaseObject ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [17/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::objectmodel::ConfigurationSetting ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [18/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::objectmodel::ContextObject ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [19/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::topology::BaseMeshTopology ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [20/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::topology::BaseTopologyObject ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [21/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::topology::Topology ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [22/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::visual::Shader ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [23/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::co,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:29641,Modifiability,Variab,Variable,29641,"NCTIONS_BETWEEN_BASE_AND ; (; sofa::core::visual::Shader ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [23/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::visual::VisualLoop ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [24/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::visual::VisualManager ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [25/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::core::visual::VisualModel ; ). ◆ SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND() [26/26]. sofa::core::SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND ; (; sofa::simulation::Node ; ). ◆ to_json() [1/2]. void sofa::core::to_json ; (; nlohmann::json & ; json, . const sofa::core::ObjectFactory::ClassEntry::SPtr & ; entry . ). inline . ◆ to_json() [2/2]. void sofa::core::to_json ; (; nlohmann::json & ; json, . const sofa::core::ObjectFactory::Creator::SPtr & ; creator . ). inline . Variable Documentation. ◆ BaseState. class SOFA_CORE_API sofa::core::BaseState. ◆ Multi2Mapping< Vec1Types, Rigid3Types, Rigid3Types >. template class SOFA_CORE_API sofa::core::Multi2Mapping< Vec1Types, Rigid3Types, Rigid3Types >. ◆ Multi2Mapping< Vec1Types, Rigid3Types, Vec3Types >. template class SOFA_CORE_API sofa::core::Multi2Mapping< Vec1Types, Rigid3Types, Vec3Types >. ◆ Multi2Mapping< Vec1Types, Vec1Types, Rigid3Types >. template class SOFA_CORE_API sofa::core::Multi2Mapping< Vec1Types, Vec1Types, Rigid3Types >. ◆ Multi2Mapping< Vec1Types, Vec3Types, Rigid3Types >. template class SOFA_CORE_API sofa::core::Multi2Mapping< Vec1Types, Vec3Types, Rigid3Types >. ◆ Multi2Mapping< Vec3Types, Rigid3Types, Rigid3Types >. template class SOFA_CORE_API sofa::core::Multi2Mapping< Vec3Types, Rigid3Types, Rigid3Types >. ◆ Multi2Mapping< Vec3Types, Rigid3Types, Vec3Types >. template class SOFA_CORE_API sofa::core::Multi2Mapping< Vec3Types, Rigid3Types, Vec3Types >. ◆ Multi2Mapping< Vec3Types, Vec1Types, Ve",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:329,Performance,load,loader,329,"﻿. SOFA API: sofa::core Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::core Namespace Reference . Namespaces;  behavior;  For BaseMatrix. ;  ;  collision;  ;  constraintparams;  ;  execparams;  ;  loader;  ;  matrixaccumulator;  ;  mechanicalparams;  ;  objectmodel;  ;  topology;  ;  visual;  . Classes; class  State;  Component storing position and velocity vectors. More...;  ; struct  AccumulationVecId;  Proxy class for accessing elements within an imaginary container that represents the cumulative sum of multiple other containers. Each individual container is represented by a VecId. The class maintains a list of VecIdDeriv objects, which defines the containers contributing to the final cumulative sum. This class provides a simplified interface for accessing elements within the cumulative container. It allows retrieving specific elements using the overloaded subscript operator (operator[]). When accessing an element at a particular index, the class delegates the retrieval to the appropriate container represented by the associated VecIdDeriv. In addition to element retrieval, the class supports dynamic management of the contributing containers. It offers functions to add and remove VecId objects from the list of containers that contribute to the cumulative sum. More...;  ; class  MappingMatrixAccumulator;  ; class  ListMappingMatrixAccumulator;  ; class  GeometricStiffnessMatrix;  ; class  BaseMapping;  ; class  BaseMatrixAccumulatorComponent;  ; struct  get_base_object_strong;  ; class  BaseState;  Component storing position and velocity vectors. More...;  ; class  BehaviorModel;  Abstract Interface of components defining the behavior of a simulated object. More...;  ; class  CategoryLibrary;  An Generic Category of the Sofa Library. More...;  ; class  BaseCollisionElementIterator;  Base class for reference to an collision element defin",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:19587,Performance,optimiz,optimize,19587," cast from Base* into the type parameter Dest. . ◆ castToBase(). template<class Source > . sofa::core::objectmodel::Base* sofa::core::castToBase ; (; Source * ; b). Dynamic cast from the type parameter B* into Base*. ; CORE::OPAQUE FUNCTION /////////////////////////////////////////////////; CORE::OPAQUE function are a groupe of function that make ""opaque"" some of the common sofa behaviors.; Core::Opaque functions are:; Base* sofa::core::castToBase(T*) replace dynamic_cast<Base*>(T*);; T* sofa::core::castTo(Base*) replace dynamic_cast<T*>(Base*);; sofa:core::objectmodel::base::GetClass<T>() replace T::GetClass();. These functions are called ""opaque"" as they work with only forward declaration of the involved types in comparison to class methods the requires the full class declaration to be used.; It is highly recommended to use as much as possible opaque function in header files as this allow to reduce the dependency tree.; Opaque function may be slower at runtime (by one function call) but this is true only if LTO isn't able to optimize them properly. If you have experience/feedback with LTO please join the discussion in https://github.com/sofa-framework/sofa/discussions/1822 Defines the baseline functions for a type all the types in-herit from Base. These are non-opaque function that needs to be specialized in order to implement an opaque version for a given type. . ◆ cleanup(). SOFA_CORE_API void sofa::core::cleanup ; (; ). Clean up the resources used by the SofaCore library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ findTemplatedCreator(). void sofa::core::findTemplatedCreator ; (; objectmodel::BaseContext * ; context, . const ObjectFactory::Creator::SPtr & ; creator, . const std::string & ; templateName, . std::map< std::string, std::vector< std::string >> & ; creatorsErrors, . std::vector< std::pair< std::string, ObjectFactory::Creator::SPtr > > & ; creators, . objectmodel::BaseObjectDescription * ; arg . ). ◆ init(). SOFA_CORE_API void sofa:",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:557,Security,access,accessing,557,"﻿. SOFA API: sofa::core Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::core Namespace Reference . Namespaces;  behavior;  For BaseMatrix. ;  ;  collision;  ;  constraintparams;  ;  execparams;  ;  loader;  ;  matrixaccumulator;  ;  mechanicalparams;  ;  objectmodel;  ;  topology;  ;  visual;  . Classes; class  State;  Component storing position and velocity vectors. More...;  ; struct  AccumulationVecId;  Proxy class for accessing elements within an imaginary container that represents the cumulative sum of multiple other containers. Each individual container is represented by a VecId. The class maintains a list of VecIdDeriv objects, which defines the containers contributing to the final cumulative sum. This class provides a simplified interface for accessing elements within the cumulative container. It allows retrieving specific elements using the overloaded subscript operator (operator[]). When accessing an element at a particular index, the class delegates the retrieval to the appropriate container represented by the associated VecIdDeriv. In addition to element retrieval, the class supports dynamic management of the contributing containers. It offers functions to add and remove VecId objects from the list of containers that contribute to the cumulative sum. More...;  ; class  MappingMatrixAccumulator;  ; class  ListMappingMatrixAccumulator;  ; class  GeometricStiffnessMatrix;  ; class  BaseMapping;  ; class  BaseMatrixAccumulatorComponent;  ; struct  get_base_object_strong;  ; class  BaseState;  Component storing position and velocity vectors. More...;  ; class  BehaviorModel;  Abstract Interface of components defining the behavior of a simulated object. More...;  ; class  CategoryLibrary;  An Generic Category of the Sofa Library. More...;  ; class  BaseCollisionElementIterator;  Base class for reference to an collision element defin",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:892,Security,access,accessing,892,"﻿. SOFA API: sofa::core Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::core Namespace Reference . Namespaces;  behavior;  For BaseMatrix. ;  ;  collision;  ;  constraintparams;  ;  execparams;  ;  loader;  ;  matrixaccumulator;  ;  mechanicalparams;  ;  objectmodel;  ;  topology;  ;  visual;  . Classes; class  State;  Component storing position and velocity vectors. More...;  ; struct  AccumulationVecId;  Proxy class for accessing elements within an imaginary container that represents the cumulative sum of multiple other containers. Each individual container is represented by a VecId. The class maintains a list of VecIdDeriv objects, which defines the containers contributing to the final cumulative sum. This class provides a simplified interface for accessing elements within the cumulative container. It allows retrieving specific elements using the overloaded subscript operator (operator[]). When accessing an element at a particular index, the class delegates the retrieval to the appropriate container represented by the associated VecIdDeriv. In addition to element retrieval, the class supports dynamic management of the contributing containers. It offers functions to add and remove VecId objects from the list of containers that contribute to the cumulative sum. More...;  ; class  MappingMatrixAccumulator;  ; class  ListMappingMatrixAccumulator;  ; class  GeometricStiffnessMatrix;  ; class  BaseMapping;  ; class  BaseMatrixAccumulatorComponent;  ; struct  get_base_object_strong;  ; class  BaseState;  Component storing position and velocity vectors. More...;  ; class  BehaviorModel;  Abstract Interface of components defining the behavior of a simulated object. More...;  ; class  CategoryLibrary;  An Generic Category of the Sofa Library. More...;  ; class  BaseCollisionElementIterator;  Base class for reference to an collision element defin",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:1042,Security,access,accessing,1042,"tion. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::core Namespace Reference . Namespaces;  behavior;  For BaseMatrix. ;  ;  collision;  ;  constraintparams;  ;  execparams;  ;  loader;  ;  matrixaccumulator;  ;  mechanicalparams;  ;  objectmodel;  ;  topology;  ;  visual;  . Classes; class  State;  Component storing position and velocity vectors. More...;  ; struct  AccumulationVecId;  Proxy class for accessing elements within an imaginary container that represents the cumulative sum of multiple other containers. Each individual container is represented by a VecId. The class maintains a list of VecIdDeriv objects, which defines the containers contributing to the final cumulative sum. This class provides a simplified interface for accessing elements within the cumulative container. It allows retrieving specific elements using the overloaded subscript operator (operator[]). When accessing an element at a particular index, the class delegates the retrieval to the appropriate container represented by the associated VecIdDeriv. In addition to element retrieval, the class supports dynamic management of the contributing containers. It offers functions to add and remove VecId objects from the list of containers that contribute to the cumulative sum. More...;  ; class  MappingMatrixAccumulator;  ; class  ListMappingMatrixAccumulator;  ; class  GeometricStiffnessMatrix;  ; class  BaseMapping;  ; class  BaseMatrixAccumulatorComponent;  ; struct  get_base_object_strong;  ; class  BaseState;  Component storing position and velocity vectors. More...;  ; class  BehaviorModel;  Abstract Interface of components defining the behavior of a simulated object. More...;  ; class  CategoryLibrary;  An Generic Category of the Sofa Library. More...;  ; class  BaseCollisionElementIterator;  Base class for reference to an collision element defined by its index More...;  ; class  TCollisionElementIterator;  Reference to an collision element defined by its ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:3901,Security,access,access,3901,"nsmitted by all visitors. More...;  ; struct  CleanupCheck;  ; class  Mapping;  Specialized interface to convert a model state of type TIn to a model state of type TOut. This is basically a sofa::core::BaseMapping with given input and output types. More...;  ; class  MatrixAccumulatorInterface;  ; class  MatrixAccumulatorIndexChecker;  ; class  ListMatrixAccumulator;  ; class  MechanicalParams;  Class gathering parameters use by mechanical components methods, and transmitted by mechanical visitors. More...;  ; class  MechanicalStatesMatrixAccumulators;  ; class  Multi2Mapping;  Specialized interface to describe many to many mapping. The inputs can be of two different types, while all the outputs must be of the same type. More...;  ; class  MultiMapping;  Specialized interface to describe many to many mapping. All the input must have the same type, and all the output must have the same type. See also class Multi2Mapping. More...;  ; class  TMultiVecId;  ; struct  StateVecAccessor;  Helper class to access vectors of a given type in a given State. More...;  ; struct  StateVecAccessor< DataTypes, V_COORD, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_COORD, V_WRITE >;  ; struct  StateVecAccessor< DataTypes, V_DERIV, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_DERIV, V_WRITE >;  ; struct  StateVecAccessor< DataTypes, V_MATDERIV, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_MATDERIV, V_WRITE >;  ; struct  StateVecAccessor< DataTypes, V_ALL, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_ALL, V_WRITE >;  ; class  TMultiVecId< V_ALL, vaccess >;  ; struct  ObjectRegistrationEntry;  ; class  ObjectFactory;  ; class  ObjectCreator;  Typed Creator class used to create instances of object type RealObject. More...;  ; class  ObjectRegistrationData;  Helper class used to register a class in the ObjectFactory. More...;  ; class  RegisterObject;  ; struct  ObjectFactoryJson;  ; class  PathResolver;  This class exposes an API to query a context to find Base* ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:4842,Security,expose,exposes,4842,"e...;  ; class  TMultiVecId;  ; struct  StateVecAccessor;  Helper class to access vectors of a given type in a given State. More...;  ; struct  StateVecAccessor< DataTypes, V_COORD, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_COORD, V_WRITE >;  ; struct  StateVecAccessor< DataTypes, V_DERIV, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_DERIV, V_WRITE >;  ; struct  StateVecAccessor< DataTypes, V_MATDERIV, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_MATDERIV, V_WRITE >;  ; struct  StateVecAccessor< DataTypes, V_ALL, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_ALL, V_WRITE >;  ; class  TMultiVecId< V_ALL, vaccess >;  ; struct  ObjectRegistrationEntry;  ; class  ObjectFactory;  ; class  ObjectCreator;  Typed Creator class used to create instances of object type RealObject. More...;  ; class  ObjectRegistrationData;  Helper class used to register a class in the ObjectFactory. More...;  ; class  RegisterObject;  ; struct  ObjectFactoryJson;  ; class  PathResolver;  This class exposes an API to query a context to find Base* or a BaseData*. More...;  ; class  SofaLibrary;  An Generic Library. More...;  ; class  TVecId;  ; class  TStandardVec;  ; class  TStandardVec< V_COORD, vaccess >;  ; class  TStandardVec< V_DERIV, vaccess >;  ; class  TStandardVec< V_MATDERIV, vaccess >;  ; class  TStandardVec< V_ALL, vaccess >;  ; class  BaseVecId;  ; class  VecIdAlignFix;  ; struct  VecIdProperties;  ; class  TVecId< V_ALL, vaccess >;  Identify any vector stored in State. More...;  ; struct  StateType;  ; struct  StateType< DataTypes, core::V_COORD >;  ; struct  StateType< DataTypes, core::V_DERIV >;  ; struct  StateTypeSize;  ; struct  StateTypeSize< DataTypes, core::V_COORD >;  ; struct  StateTypeSize< DataTypes, core::V_DERIV >;  ; struct  StateVecType;  ; struct  StateVecType< DataTypes, core::V_COORD >;  ; struct  StateVecType< DataTypes, core::V_DERIV >;  . Typedefs; template<matrixaccumulator::Contribution c> ; using get_base_object_strong_type = t",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:16114,Security,access,access,16114,"e vtype> ; constexpr sofa::Size StateTypeSize_v = StateTypeSize<DataTypes, vtype>::total_size;  . Typedef Documentation. ◆ ClassEntry. typedef sofa::core::ObjectFactory::ClassEntry sofa::core::ClassEntry. ◆ ConstMatrixDerivId. typedef TVecId<V_MATDERIV, V_READ > sofa::core::ConstMatrixDerivId. ◆ ConstMultiMatrixDerivId. typedef TMultiVecId<V_MATDERIV, V_READ> sofa::core::ConstMultiMatrixDerivId. ◆ ConstMultiVecCoordId. typedef TMultiVecId<V_COORD, V_READ> sofa::core::ConstMultiVecCoordId. ◆ ConstMultiVecDerivId. typedef TMultiVecId<V_DERIV, V_READ> sofa::core::ConstMultiVecDerivId. ◆ ConstMultiVecId. typedef TMultiVecId<V_ALL, V_READ> sofa::core::ConstMultiVecId. ◆ ConstVecCoordId. typedef TVecId<V_COORD , V_READ > sofa::core::ConstVecCoordId. Typedefs for each type of state vectors. . ◆ ConstVecDerivId. typedef TVecId<V_DERIV , V_READ > sofa::core::ConstVecDerivId. ◆ ConstVecId. typedef TVecId<V_ALL, V_READ> sofa::core::ConstVecId. Identify one vector stored in State A ConstVecId only provides a read-only access to the underlying vector. . ◆ Creator. typedef sofa::core::ObjectFactory::Creator sofa::core::Creator. ◆ get_base_object_strong_type. template<matrixaccumulator::Contribution c> . using sofa::core::get_base_object_strong_type = typedef typename get_base_object_strong<c>::type. Helper alias. . ◆ MatrixDerivId. typedef TVecId<V_MATDERIV, V_WRITE> sofa::core::MatrixDerivId. ◆ MultiMatrixDerivId. typedef TMultiVecId<V_MATDERIV, V_WRITE> sofa::core::MultiMatrixDerivId. ◆ MultiVecCoordId. typedef TMultiVecId<V_COORD, V_WRITE> sofa::core::MultiVecCoordId. ◆ MultiVecDerivId. typedef TMultiVecId<V_DERIV, V_WRITE> sofa::core::MultiVecDerivId. ◆ MultiVecId. typedef TMultiVecId<V_ALL, V_WRITE> sofa::core::MultiVecId. ◆ ObjectRegistrationEntry. typedef struct sofa::core::ObjectRegistrationEntry sofa::core::ObjectRegistrationEntry. ◆ OnCreateCallback. typedef std::function<void(sofa::core::objectmodel::Base*, sofa::core::objectmodel::BaseObjectDescription*)> sofa::core::",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:17773,Security,access,access,17773,"rivId. ◆ MultiVecId. typedef TMultiVecId<V_ALL, V_WRITE> sofa::core::MultiVecId. ◆ ObjectRegistrationEntry. typedef struct sofa::core::ObjectRegistrationEntry sofa::core::ObjectRegistrationEntry. ◆ OnCreateCallback. typedef std::function<void(sofa::core::objectmodel::Base*, sofa::core::objectmodel::BaseObjectDescription*)> sofa::core::OnCreateCallback. ◆ sptr. template<class T > . using sofa::core::sptr = typedef boost::intrusive_ptr<T>. ◆ StateType_t. template<class DataTypes , core::VecType vtype> . using sofa::core::StateType_t = typedef typename StateType<DataTypes, vtype>::type. ◆ StateVecType_t. template<class DataTypes , core::VecType vtype> . using sofa::core::StateVecType_t = typedef typename StateVecType<DataTypes, vtype>::type. ◆ VecCoordId. typedef TVecId<V_COORD , V_WRITE> sofa::core::VecCoordId. ◆ VecDerivId. typedef TVecId<V_DERIV , V_WRITE> sofa::core::VecDerivId. ◆ VecId. typedef TVecId<V_ALL, V_WRITE> sofa::core::VecId. Identify one vector stored in State A VecId provides a read-write access to the underlying vector. . Enumeration Type Documentation. ◆ anonymous enum. anonymous enum. EnumeratorSOFA_DATA_MAX_ASPECTS . ◆ ConstraintOrder. enum sofa::core::ConstraintOrder. strong . Description of the order of the constraint. . EnumeratorPOS ; VEL ; ACC ; POS_AND_VEL . ◆ VecAccess. enum sofa::core::VecAccess. Types of vectors that can be stored in State. . EnumeratorV_READ ; V_WRITE . ◆ VecType. enum sofa::core::VecType. Types of vectors that can be stored in State. . EnumeratorV_ALL ; V_COORD ; V_DERIV ; V_MATDERIV . Function Documentation. ◆ caseInsensitive(). std::string sofa::core::caseInsensitive ; (; const std::string & ; text). ◆ castTo(). template<class Dest > . Dest sofa::core::castTo ; (; sofa::core::objectmodel::Base * ; base). Dynamic cast from Base* into the type parameter Dest. . ◆ castToBase(). template<class Source > . sofa::core::objectmodel::Base* sofa::core::castToBase ; (; Source * ; b). Dynamic cast from the type parameter B* into Ba",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:867,Usability,simpl,simplified,867,"﻿. SOFA API: sofa::core Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::core Namespace Reference . Namespaces;  behavior;  For BaseMatrix. ;  ;  collision;  ;  constraintparams;  ;  execparams;  ;  loader;  ;  matrixaccumulator;  ;  mechanicalparams;  ;  objectmodel;  ;  topology;  ;  visual;  . Classes; class  State;  Component storing position and velocity vectors. More...;  ; struct  AccumulationVecId;  Proxy class for accessing elements within an imaginary container that represents the cumulative sum of multiple other containers. Each individual container is represented by a VecId. The class maintains a list of VecIdDeriv objects, which defines the containers contributing to the final cumulative sum. This class provides a simplified interface for accessing elements within the cumulative container. It allows retrieving specific elements using the overloaded subscript operator (operator[]). When accessing an element at a particular index, the class delegates the retrieval to the appropriate container represented by the associated VecIdDeriv. In addition to element retrieval, the class supports dynamic management of the contributing containers. It offers functions to add and remove VecId objects from the list of containers that contribute to the cumulative sum. More...;  ; class  MappingMatrixAccumulator;  ; class  ListMappingMatrixAccumulator;  ; class  GeometricStiffnessMatrix;  ; class  BaseMapping;  ; class  BaseMatrixAccumulatorComponent;  ; struct  get_base_object_strong;  ; class  BaseState;  Component storing position and velocity vectors. More...;  ; class  BehaviorModel;  Abstract Interface of components defining the behavior of a simulated object. More...;  ; class  CategoryLibrary;  An Generic Category of the Sofa Library. More...;  ; class  BaseCollisionElementIterator;  Base class for reference to an collision element defin",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:19634,Usability,feedback,feedback,19634,"model::Base* sofa::core::castToBase ; (; Source * ; b). Dynamic cast from the type parameter B* into Base*. ; CORE::OPAQUE FUNCTION /////////////////////////////////////////////////; CORE::OPAQUE function are a groupe of function that make ""opaque"" some of the common sofa behaviors.; Core::Opaque functions are:; Base* sofa::core::castToBase(T*) replace dynamic_cast<Base*>(T*);; T* sofa::core::castTo(Base*) replace dynamic_cast<T*>(Base*);; sofa:core::objectmodel::base::GetClass<T>() replace T::GetClass();. These functions are called ""opaque"" as they work with only forward declaration of the involved types in comparison to class methods the requires the full class declaration to be used.; It is highly recommended to use as much as possible opaque function in header files as this allow to reduce the dependency tree.; Opaque function may be slower at runtime (by one function call) but this is true only if LTO isn't able to optimize them properly. If you have experience/feedback with LTO please join the discussion in https://github.com/sofa-framework/sofa/discussions/1822 Defines the baseline functions for a type all the types in-herit from Base. These are non-opaque function that needs to be specialized in order to implement an opaque version for a given type. . ◆ cleanup(). SOFA_CORE_API void sofa::core::cleanup ; (; ). Clean up the resources used by the SofaCore library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ findTemplatedCreator(). void sofa::core::findTemplatedCreator ; (; objectmodel::BaseContext * ; context, . const ObjectFactory::Creator::SPtr & ; creator, . const std::string & ; templateName, . std::map< std::string, std::vector< std::string >> & ; creatorsErrors, . std::vector< std::pair< std::string, ObjectFactory::Creator::SPtr > > & ; creators, . objectmodel::BaseObjectDescription * ; arg . ). ◆ init(). SOFA_CORE_API void sofa::core::init ; (; ). Initialize the SofaCore library, as well as its dependencies: SofaDefaultType, SofaHelper.",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html:4092,Deployability,integrat,integration,4092,"tParams *, MultiVecId , MultiVecId ); The default implementation successively calls: prepareStates, buildSystem, solveSystem, applyCorrection. The parameters are defined in class ConstraintParams. More...;  ; class  CRSMultiMatrixAccessor;  ; class  DefaultMultiMatrixAccessor;  ; class  ForceField;  Component computing forces within a simulated body. More...;  ; class  LinearSolver;  Abstract interface for linear system solvers. More...;  ; class  LinearSolverAccessor;  ; class  Mass;  Component responsible for mass-related computations (gravity, acceleration). More...;  ; class  MatrixAccessorCompat;  ; class  AddToMatrixCompatMatrix;  ; class  ApplyConstraintCompat;  ; class  MechanicalMatrix;  ; class  MixedInteractionConstraint;  Component computing constraints between a pair of simulated body. More...;  ; class  MixedInteractionForceField;  Component computing forces between a pair of simulated body. More...;  ; class  MultiMatrix;  ; class  MultiMatrixAccessor;  ; class  TMultiVec;  ; class  OdeSolver;  Component responsible for timestep integration, i.e. advancing the state from time t to t+dt. More...;  ; class  PairInteractionConstraint;  Component computing constraints between a pair of simulated body. More...;  ; class  PairInteractionForceField;  Component computing forces between a pair of simulated body. More...;  ; class  PairInteractionProjectiveConstraintSet;  Component computing constraints between a pair of simulated body. More...;  ; class  PairStateAccessor;  ; class  ProjectiveConstraintSet;  Component computing constraints within a simulated body. More...;  ; class  RotationFinder;  ; class  SingleMatrixAccessor;  ; class  SingleStateAccessor;  ; class  StateAccessor;  . Typedefs; typedef TMultiVec< V_COORD > MultiVecCoord;  ; typedef TMultiVec< V_DERIV > MultiVecDeriv;  ; typedef TMultiVec< V_MATDERIV > MultiVecMatrixDeriv;  . Enumerations; enum class  BlocData { SCALAR; , MAT33; };  ; enum class  BlocPrecision { FLOAT; , DOUBLE; };  . Functio",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html:910,Integrability,Interface,Interface,910,"﻿. SOFA API: sofa::core::behavior Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::core::behavior Namespace Reference . For BaseMatrix. ; More... Classes; class  MechanicalState;  Component storing all state vectors of a simulated body (position, velocity, etc), using the datatype specified in the templace. More...;  ; class  BaseAnimationLoop;  Component responsible for main animation algorithms, managing how and when mechanical computation happens in one animation step. More...;  ; class  BaseConstraint;  Component computing constraints within a simulated body. More...;  ; class  BaseConstraintCorrection;  Component computing constraint forces within a simulated body using the compliance method. More...;  ; class  BaseConstraintSet;  ; class  BaseController;  BaseController Class. Interface of user interaction on SOFA Components. Empty class to provide an interface for the Factory. More...;  ; class  BaseForceField;  Component computing forces within simulated bodies. More...;  ; class  BaseInteractionConstraint;  BaseInteractionConstraint is a constraint linking several bodies (MechanicalState) together. More...;  ; class  BaseInteractionForceField;  BaseInteractionForceField is a force field linking several bodies (MechanicalState) together. More...;  ; class  BaseInteractionProjectiveConstraintSet;  BaseInteractionProjectiveConstraintSet is a constraint linking several bodies (MechanicalState) together. More...;  ; class  BaseLinearSolver;  Abstract base class (as type identifier) for linear system solvers without any API. More...;  ; class  StiffnessMatrixAccumulator;  ; class  ListStiffnessMatrixAccumulator;  ; class  DampingMatrixAccumulator;  ; class  ListDampingMatrixAccumulator;  ; class  StiffnessMatrix;  ; class  DampingMatrix;  ; class  MassMatrixAccumulator;  ; class  ListMassMatrixAccumulator;  ; class  MassMatrix;  ; class  BaseMass;  C",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html:986,Integrability,interface,interface,986,"﻿. SOFA API: sofa::core::behavior Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::core::behavior Namespace Reference . For BaseMatrix. ; More... Classes; class  MechanicalState;  Component storing all state vectors of a simulated body (position, velocity, etc), using the datatype specified in the templace. More...;  ; class  BaseAnimationLoop;  Component responsible for main animation algorithms, managing how and when mechanical computation happens in one animation step. More...;  ; class  BaseConstraint;  Component computing constraints within a simulated body. More...;  ; class  BaseConstraintCorrection;  Component computing constraint forces within a simulated body using the compliance method. More...;  ; class  BaseConstraintSet;  ; class  BaseController;  BaseController Class. Interface of user interaction on SOFA Components. Empty class to provide an interface for the Factory. More...;  ; class  BaseForceField;  Component computing forces within simulated bodies. More...;  ; class  BaseInteractionConstraint;  BaseInteractionConstraint is a constraint linking several bodies (MechanicalState) together. More...;  ; class  BaseInteractionForceField;  BaseInteractionForceField is a force field linking several bodies (MechanicalState) together. More...;  ; class  BaseInteractionProjectiveConstraintSet;  BaseInteractionProjectiveConstraintSet is a constraint linking several bodies (MechanicalState) together. More...;  ; class  BaseLinearSolver;  Abstract base class (as type identifier) for linear system solvers without any API. More...;  ; class  StiffnessMatrixAccumulator;  ; class  ListStiffnessMatrixAccumulator;  ; class  DampingMatrixAccumulator;  ; class  ListDampingMatrixAccumulator;  ; class  StiffnessMatrix;  ; class  DampingMatrix;  ; class  MassMatrixAccumulator;  ; class  ListMassMatrixAccumulator;  ; class  MassMatrix;  ; class  BaseMass;  C",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html:3428,Integrability,interface,interface,3428,"mponent computing projective constraints within a simulated body. More...;  ; class  BaseRotationFinder;  ; class  BaseVectorOperations;  ; struct  BlockType;  ; class  BlocMatrixWriter;  ; class  Constraint;  Component computing constraints within a simulated body. More...;  ; class  ConstraintCorrection;  ; class  ConstraintResolution;  Object computing a constraint resolution within a Gauss-Seidel algorithm. More...;  ; class  ConstraintSolver;  Component responsible for the expression and solution of system of equations related to constraints. The main method is solveConstraint(const ConstraintParams *, MultiVecId , MultiVecId ); The default implementation successively calls: prepareStates, buildSystem, solveSystem, applyCorrection. The parameters are defined in class ConstraintParams. More...;  ; class  CRSMultiMatrixAccessor;  ; class  DefaultMultiMatrixAccessor;  ; class  ForceField;  Component computing forces within a simulated body. More...;  ; class  LinearSolver;  Abstract interface for linear system solvers. More...;  ; class  LinearSolverAccessor;  ; class  Mass;  Component responsible for mass-related computations (gravity, acceleration). More...;  ; class  MatrixAccessorCompat;  ; class  AddToMatrixCompatMatrix;  ; class  ApplyConstraintCompat;  ; class  MechanicalMatrix;  ; class  MixedInteractionConstraint;  Component computing constraints between a pair of simulated body. More...;  ; class  MixedInteractionForceField;  Component computing forces between a pair of simulated body. More...;  ; class  MultiMatrix;  ; class  MultiMatrixAccessor;  ; class  TMultiVec;  ; class  OdeSolver;  Component responsible for timestep integration, i.e. advancing the state from time t to t+dt. More...;  ; class  PairInteractionConstraint;  Component computing constraints between a pair of simulated body. More...;  ; class  PairInteractionForceField;  Component computing forces between a pair of simulated body. More...;  ; class  PairInteractionProjectiveConstraintSe",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html:4092,Integrability,integrat,integration,4092,"tParams *, MultiVecId , MultiVecId ); The default implementation successively calls: prepareStates, buildSystem, solveSystem, applyCorrection. The parameters are defined in class ConstraintParams. More...;  ; class  CRSMultiMatrixAccessor;  ; class  DefaultMultiMatrixAccessor;  ; class  ForceField;  Component computing forces within a simulated body. More...;  ; class  LinearSolver;  Abstract interface for linear system solvers. More...;  ; class  LinearSolverAccessor;  ; class  Mass;  Component responsible for mass-related computations (gravity, acceleration). More...;  ; class  MatrixAccessorCompat;  ; class  AddToMatrixCompatMatrix;  ; class  ApplyConstraintCompat;  ; class  MechanicalMatrix;  ; class  MixedInteractionConstraint;  Component computing constraints between a pair of simulated body. More...;  ; class  MixedInteractionForceField;  Component computing forces between a pair of simulated body. More...;  ; class  MultiMatrix;  ; class  MultiMatrixAccessor;  ; class  TMultiVec;  ; class  OdeSolver;  Component responsible for timestep integration, i.e. advancing the state from time t to t+dt. More...;  ; class  PairInteractionConstraint;  Component computing constraints between a pair of simulated body. More...;  ; class  PairInteractionForceField;  Component computing forces between a pair of simulated body. More...;  ; class  PairInteractionProjectiveConstraintSet;  Component computing constraints between a pair of simulated body. More...;  ; class  PairStateAccessor;  ; class  ProjectiveConstraintSet;  Component computing constraints within a simulated body. More...;  ; class  RotationFinder;  ; class  SingleMatrixAccessor;  ; class  SingleStateAccessor;  ; class  StateAccessor;  . Typedefs; typedef TMultiVec< V_COORD > MultiVecCoord;  ; typedef TMultiVec< V_DERIV > MultiVecDeriv;  ; typedef TMultiVec< V_MATDERIV > MultiVecMatrixDeriv;  . Enumerations; enum class  BlocData { SCALAR; , MAT33; };  ; enum class  BlocPrecision { FLOAT; , DOUBLE; };  . Functio",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html:181,Modifiability,Variab,Variables,181,"﻿. SOFA API: sofa::core::behavior Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::core::behavior Namespace Reference . For BaseMatrix. ; More... Classes; class  MechanicalState;  Component storing all state vectors of a simulated body (position, velocity, etc), using the datatype specified in the templace. More...;  ; class  BaseAnimationLoop;  Component responsible for main animation algorithms, managing how and when mechanical computation happens in one animation step. More...;  ; class  BaseConstraint;  Component computing constraints within a simulated body. More...;  ; class  BaseConstraintCorrection;  Component computing constraint forces within a simulated body using the compliance method. More...;  ; class  BaseConstraintSet;  ; class  BaseController;  BaseController Class. Interface of user interaction on SOFA Components. Empty class to provide an interface for the Factory. More...;  ; class  BaseForceField;  Component computing forces within simulated bodies. More...;  ; class  BaseInteractionConstraint;  BaseInteractionConstraint is a constraint linking several bodies (MechanicalState) together. More...;  ; class  BaseInteractionForceField;  BaseInteractionForceField is a force field linking several bodies (MechanicalState) together. More...;  ; class  BaseInteractionProjectiveConstraintSet;  BaseInteractionProjectiveConstraintSet is a constraint linking several bodies (MechanicalState) together. More...;  ; class  BaseLinearSolver;  Abstract base class (as type identifier) for linear system solvers without any API. More...;  ; class  StiffnessMatrixAccumulator;  ; class  ListStiffnessMatrixAccumulator;  ; class  DampingMatrixAccumulator;  ; class  ListDampingMatrixAccumulator;  ; class  StiffnessMatrix;  ; class  DampingMatrix;  ; class  MassMatrixAccumulator;  ; class  ListMassMatrixAccumulator;  ; class  MassMatrix;  ; class  BaseMass;  C",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html:9245,Modifiability,Variab,Variables,9245,,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html:20871,Modifiability,Variab,Variable,20871,"aralgebra::BaseMatrix * ; J, . int ; offsetRow, . int ; offsetCol, . int ; JelementSize, . int ; MelementSize, . bool ; _debug . ). inline . ◆ opAddMulMJ_T4(). template<int MblocRsize, int MblocCsize, int JblocCsize, class JelementType > . bool sofa::core::behavior::opAddMulMJ_T4 ; (; linearalgebra::BaseMatrix * ; out, . linearalgebra::BaseMatrix * ; stiffMatrix2, . linearalgebra::BaseMatrix * ; J, . int ; offsetRow, . int ; offsetCol, . int ; MelementSize, . bool ; _debug . ). inline . ◆ opAddMulMJ_TBloc(). template<int MblocRsize, int MblocCsize, int JblocCsize, class JelementType , class MelementType > . bool sofa::core::behavior::opAddMulMJ_TBloc ; (; linearalgebra::BaseMatrix * ; out, . linearalgebra::BaseMatrix * ; stiffMatrix2, . linearalgebra::BaseMatrix * ; J, . int ; offsetRow, . int ; offsetCol, . bool ; _debug . ). inline . ◆ operator<<(). SOFA_CORE_API std::ostream & sofa::core::behavior::operator<< ; (; std::ostream & ; out, . const MechanicalMatrix & ; m . ). Variable Documentation. ◆ Constraint< Rigid2Types >. template class SOFA_CORE_API sofa::core::behavior::Constraint< Rigid2Types >. ◆ Constraint< Rigid3Types >. template class SOFA_CORE_API sofa::core::behavior::Constraint< Rigid3Types >. ◆ Constraint< Vec1Types >. template class SOFA_CORE_API sofa::core::behavior::Constraint< Vec1Types >. ◆ Constraint< Vec2Types >. template class SOFA_CORE_API sofa::core::behavior::Constraint< Vec2Types >. ◆ Constraint< Vec3Types >. template class SOFA_CORE_API sofa::core::behavior::Constraint< Vec3Types >. ◆ Constraint< Vec6Types >. template class SOFA_CORE_API sofa::core::behavior::Constraint< Vec6Types >. ◆ ConstraintCorrection< Rigid3Types >. template class SOFA_CORE_API sofa::core::behavior::ConstraintCorrection< Rigid3Types >. ◆ ConstraintCorrection< Vec1Types >. template class SOFA_CORE_API sofa::core::behavior::ConstraintCorrection< Vec1Types >. ◆ ConstraintCorrection< Vec2Types >. template class SOFA_CORE_API sofa::core::behavior::ConstraintCorrection< V",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1collision.html:403,Deployability,integrat,integration,403,"﻿. SOFA API: sofa::core::collision Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes . sofa::core::collision Namespace Reference . Classes; class  BroadPhaseDetection;  given a set of root collision models, computes potentially colliding pairs. More...;  ; class  CollisionAlgorithm;  ; class  CollisionGroupManager;  Given a set of contacts, create integration groups. More...;  ; class  Contact;  contact response component handling the response between a pair of models More...;  ; class  ContactManager;  Given a set of detected contact points, create contact response components. More...;  ; class  Detection;  ; class  DetectionOutput;  Generic description of a contact point, used for most collision models except special cases such as GPU-based collisions. More...;  ; class  DetectionOutputVector;  Abstract description of a set of contact point. More...;  ; class  TDetectionOutputVector;  Generic description of a set of contact point between two specific collision models. More...;  ; class  BaseIntersector;  ; class  ElementIntersector;  ; class  IntersectorMap;  ; class  Intersection;  Given 2 collision elements, test if an intersection is possible (for bounding volumes), or compute intersection points if any. More...;  ; class  MemberElementIntersector;  ; class  BaseIntersectorCreator;  ; class  IntersectorFactory;  ; class  IntersectorCreator;  ; class  NarrowPhaseDetection;  Given a set of potentially colliding pairs of models, compute set of contact points. More...;  ; class  Pipeline;  Pipeline component gather list of collision models and control the sequence of computations. More...;  . sofacorecollision; Generated on Mon Nov 11 2024 03:15:46 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1collision.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1collision.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1collision.html:1558,Deployability,Pipeline,Pipeline,1558,"﻿. SOFA API: sofa::core::collision Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes . sofa::core::collision Namespace Reference . Classes; class  BroadPhaseDetection;  given a set of root collision models, computes potentially colliding pairs. More...;  ; class  CollisionAlgorithm;  ; class  CollisionGroupManager;  Given a set of contacts, create integration groups. More...;  ; class  Contact;  contact response component handling the response between a pair of models More...;  ; class  ContactManager;  Given a set of detected contact points, create contact response components. More...;  ; class  Detection;  ; class  DetectionOutput;  Generic description of a contact point, used for most collision models except special cases such as GPU-based collisions. More...;  ; class  DetectionOutputVector;  Abstract description of a set of contact point. More...;  ; class  TDetectionOutputVector;  Generic description of a set of contact point between two specific collision models. More...;  ; class  BaseIntersector;  ; class  ElementIntersector;  ; class  IntersectorMap;  ; class  Intersection;  Given 2 collision elements, test if an intersection is possible (for bounding volumes), or compute intersection points if any. More...;  ; class  MemberElementIntersector;  ; class  BaseIntersectorCreator;  ; class  IntersectorFactory;  ; class  IntersectorCreator;  ; class  NarrowPhaseDetection;  Given a set of potentially colliding pairs of models, compute set of contact points. More...;  ; class  Pipeline;  Pipeline component gather list of collision models and control the sequence of computations. More...;  . sofacorecollision; Generated on Mon Nov 11 2024 03:15:46 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1collision.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1collision.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1collision.html:1569,Deployability,Pipeline,Pipeline,1569,"﻿. SOFA API: sofa::core::collision Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes . sofa::core::collision Namespace Reference . Classes; class  BroadPhaseDetection;  given a set of root collision models, computes potentially colliding pairs. More...;  ; class  CollisionAlgorithm;  ; class  CollisionGroupManager;  Given a set of contacts, create integration groups. More...;  ; class  Contact;  contact response component handling the response between a pair of models More...;  ; class  ContactManager;  Given a set of detected contact points, create contact response components. More...;  ; class  Detection;  ; class  DetectionOutput;  Generic description of a contact point, used for most collision models except special cases such as GPU-based collisions. More...;  ; class  DetectionOutputVector;  Abstract description of a set of contact point. More...;  ; class  TDetectionOutputVector;  Generic description of a set of contact point between two specific collision models. More...;  ; class  BaseIntersector;  ; class  ElementIntersector;  ; class  IntersectorMap;  ; class  Intersection;  Given 2 collision elements, test if an intersection is possible (for bounding volumes), or compute intersection points if any. More...;  ; class  MemberElementIntersector;  ; class  BaseIntersectorCreator;  ; class  IntersectorFactory;  ; class  IntersectorCreator;  ; class  NarrowPhaseDetection;  Given a set of potentially colliding pairs of models, compute set of contact points. More...;  ; class  Pipeline;  Pipeline component gather list of collision models and control the sequence of computations. More...;  . sofacorecollision; Generated on Mon Nov 11 2024 03:15:46 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1collision.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1collision.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1collision.html:403,Integrability,integrat,integration,403,"﻿. SOFA API: sofa::core::collision Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes . sofa::core::collision Namespace Reference . Classes; class  BroadPhaseDetection;  given a set of root collision models, computes potentially colliding pairs. More...;  ; class  CollisionAlgorithm;  ; class  CollisionGroupManager;  Given a set of contacts, create integration groups. More...;  ; class  Contact;  contact response component handling the response between a pair of models More...;  ; class  ContactManager;  Given a set of detected contact points, create contact response components. More...;  ; class  Detection;  ; class  DetectionOutput;  Generic description of a contact point, used for most collision models except special cases such as GPU-based collisions. More...;  ; class  DetectionOutputVector;  Abstract description of a set of contact point. More...;  ; class  TDetectionOutputVector;  Generic description of a set of contact point between two specific collision models. More...;  ; class  BaseIntersector;  ; class  ElementIntersector;  ; class  IntersectorMap;  ; class  Intersection;  Given 2 collision elements, test if an intersection is possible (for bounding volumes), or compute intersection points if any. More...;  ; class  MemberElementIntersector;  ; class  BaseIntersectorCreator;  ; class  IntersectorFactory;  ; class  IntersectorCreator;  ; class  NarrowPhaseDetection;  Given a set of potentially colliding pairs of models, compute set of contact points. More...;  ; class  Pipeline;  Pipeline component gather list of collision models and control the sequence of computations. More...;  . sofacorecollision; Generated on Mon Nov 11 2024 03:15:46 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1collision.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1collision.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1collision.html:577,Safety,detect,detected,577,"﻿. SOFA API: sofa::core::collision Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes . sofa::core::collision Namespace Reference . Classes; class  BroadPhaseDetection;  given a set of root collision models, computes potentially colliding pairs. More...;  ; class  CollisionAlgorithm;  ; class  CollisionGroupManager;  Given a set of contacts, create integration groups. More...;  ; class  Contact;  contact response component handling the response between a pair of models More...;  ; class  ContactManager;  Given a set of detected contact points, create contact response components. More...;  ; class  Detection;  ; class  DetectionOutput;  Generic description of a contact point, used for most collision models except special cases such as GPU-based collisions. More...;  ; class  DetectionOutputVector;  Abstract description of a set of contact point. More...;  ; class  TDetectionOutputVector;  Generic description of a set of contact point between two specific collision models. More...;  ; class  BaseIntersector;  ; class  ElementIntersector;  ; class  IntersectorMap;  ; class  Intersection;  Given 2 collision elements, test if an intersection is possible (for bounding volumes), or compute intersection points if any. More...;  ; class  MemberElementIntersector;  ; class  BaseIntersectorCreator;  ; class  IntersectorFactory;  ; class  IntersectorCreator;  ; class  NarrowPhaseDetection;  Given a set of potentially colliding pairs of models, compute set of contact points. More...;  ; class  Pipeline;  Pipeline component gather list of collision models and control the sequence of computations. More...;  . sofacorecollision; Generated on Mon Nov 11 2024 03:15:46 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1collision.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1collision.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1collision.html:657,Safety,Detect,Detection,657,"﻿. SOFA API: sofa::core::collision Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes . sofa::core::collision Namespace Reference . Classes; class  BroadPhaseDetection;  given a set of root collision models, computes potentially colliding pairs. More...;  ; class  CollisionAlgorithm;  ; class  CollisionGroupManager;  Given a set of contacts, create integration groups. More...;  ; class  Contact;  contact response component handling the response between a pair of models More...;  ; class  ContactManager;  Given a set of detected contact points, create contact response components. More...;  ; class  Detection;  ; class  DetectionOutput;  Generic description of a contact point, used for most collision models except special cases such as GPU-based collisions. More...;  ; class  DetectionOutputVector;  Abstract description of a set of contact point. More...;  ; class  TDetectionOutputVector;  Generic description of a set of contact point between two specific collision models. More...;  ; class  BaseIntersector;  ; class  ElementIntersector;  ; class  IntersectorMap;  ; class  Intersection;  Given 2 collision elements, test if an intersection is possible (for bounding volumes), or compute intersection points if any. More...;  ; class  MemberElementIntersector;  ; class  BaseIntersectorCreator;  ; class  IntersectorFactory;  ; class  IntersectorCreator;  ; class  NarrowPhaseDetection;  Given a set of potentially colliding pairs of models, compute set of contact points. More...;  ; class  Pipeline;  Pipeline component gather list of collision models and control the sequence of computations. More...;  . sofacorecollision; Generated on Mon Nov 11 2024 03:15:46 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1collision.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1collision.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1collision.html:678,Safety,Detect,DetectionOutput,678,"﻿. SOFA API: sofa::core::collision Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes . sofa::core::collision Namespace Reference . Classes; class  BroadPhaseDetection;  given a set of root collision models, computes potentially colliding pairs. More...;  ; class  CollisionAlgorithm;  ; class  CollisionGroupManager;  Given a set of contacts, create integration groups. More...;  ; class  Contact;  contact response component handling the response between a pair of models More...;  ; class  ContactManager;  Given a set of detected contact points, create contact response components. More...;  ; class  Detection;  ; class  DetectionOutput;  Generic description of a contact point, used for most collision models except special cases such as GPU-based collisions. More...;  ; class  DetectionOutputVector;  Abstract description of a set of contact point. More...;  ; class  TDetectionOutputVector;  Generic description of a set of contact point between two specific collision models. More...;  ; class  BaseIntersector;  ; class  ElementIntersector;  ; class  IntersectorMap;  ; class  Intersection;  Given 2 collision elements, test if an intersection is possible (for bounding volumes), or compute intersection points if any. More...;  ; class  MemberElementIntersector;  ; class  BaseIntersectorCreator;  ; class  IntersectorFactory;  ; class  IntersectorCreator;  ; class  NarrowPhaseDetection;  Given a set of potentially colliding pairs of models, compute set of contact points. More...;  ; class  Pipeline;  Pipeline component gather list of collision models and control the sequence of computations. More...;  . sofacorecollision; Generated on Mon Nov 11 2024 03:15:46 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1collision.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1collision.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1collision.html:837,Safety,Detect,DetectionOutputVector,837,"﻿. SOFA API: sofa::core::collision Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes . sofa::core::collision Namespace Reference . Classes; class  BroadPhaseDetection;  given a set of root collision models, computes potentially colliding pairs. More...;  ; class  CollisionAlgorithm;  ; class  CollisionGroupManager;  Given a set of contacts, create integration groups. More...;  ; class  Contact;  contact response component handling the response between a pair of models More...;  ; class  ContactManager;  Given a set of detected contact points, create contact response components. More...;  ; class  Detection;  ; class  DetectionOutput;  Generic description of a contact point, used for most collision models except special cases such as GPU-based collisions. More...;  ; class  DetectionOutputVector;  Abstract description of a set of contact point. More...;  ; class  TDetectionOutputVector;  Generic description of a set of contact point between two specific collision models. More...;  ; class  BaseIntersector;  ; class  ElementIntersector;  ; class  IntersectorMap;  ; class  Intersection;  Given 2 collision elements, test if an intersection is possible (for bounding volumes), or compute intersection points if any. More...;  ; class  MemberElementIntersector;  ; class  BaseIntersectorCreator;  ; class  IntersectorFactory;  ; class  IntersectorCreator;  ; class  NarrowPhaseDetection;  Given a set of potentially colliding pairs of models, compute set of contact points. More...;  ; class  Pipeline;  Pipeline component gather list of collision models and control the sequence of computations. More...;  . sofacorecollision; Generated on Mon Nov 11 2024 03:15:46 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1collision.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1collision.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1collision.html:1183,Testability,test,test,1183,"﻿. SOFA API: sofa::core::collision Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes . sofa::core::collision Namespace Reference . Classes; class  BroadPhaseDetection;  given a set of root collision models, computes potentially colliding pairs. More...;  ; class  CollisionAlgorithm;  ; class  CollisionGroupManager;  Given a set of contacts, create integration groups. More...;  ; class  Contact;  contact response component handling the response between a pair of models More...;  ; class  ContactManager;  Given a set of detected contact points, create contact response components. More...;  ; class  Detection;  ; class  DetectionOutput;  Generic description of a contact point, used for most collision models except special cases such as GPU-based collisions. More...;  ; class  DetectionOutputVector;  Abstract description of a set of contact point. More...;  ; class  TDetectionOutputVector;  Generic description of a set of contact point between two specific collision models. More...;  ; class  BaseIntersector;  ; class  ElementIntersector;  ; class  IntersectorMap;  ; class  Intersection;  Given 2 collision elements, test if an intersection is possible (for bounding volumes), or compute intersection points if any. More...;  ; class  MemberElementIntersector;  ; class  BaseIntersectorCreator;  ; class  IntersectorFactory;  ; class  IntersectorCreator;  ; class  NarrowPhaseDetection;  Given a set of potentially colliding pairs of models, compute set of contact points. More...;  ; class  Pipeline;  Pipeline component gather list of collision models and control the sequence of computations. More...;  . sofacorecollision; Generated on Mon Nov 11 2024 03:15:46 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1collision.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1collision.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1loader.html:25,Performance,load,loader,25,﻿. SOFA API: sofa::core::loader Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::core::loader Namespace Reference . Classes; class  BaseLoader;  ; class  ImageLoader;  ; class  MeshLoader;  ; class  SceneLoader;  ; class  VoxelLoader;  . Functions; bool SOFA_CORE_API canLoad (const char *filename);  . Function Documentation. ◆ canLoad(). bool SOFA_CORE_API sofa::core::loader::canLoad ; (; const char * ; filename). sofacoreloader; Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1loader.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1loader.html:162,Performance,load,loader,162,﻿. SOFA API: sofa::core::loader Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::core::loader Namespace Reference . Classes; class  BaseLoader;  ; class  ImageLoader;  ; class  MeshLoader;  ; class  SceneLoader;  ; class  VoxelLoader;  . Functions; bool SOFA_CORE_API canLoad (const char *filename);  . Function Documentation. ◆ canLoad(). bool SOFA_CORE_API sofa::core::loader::canLoad ; (; const char * ; filename). sofacoreloader; Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1loader.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1loader.html:446,Performance,load,loader,446,﻿. SOFA API: sofa::core::loader Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::core::loader Namespace Reference . Classes; class  BaseLoader;  ; class  ImageLoader;  ; class  MeshLoader;  ; class  SceneLoader;  ; class  VoxelLoader;  . Functions; bool SOFA_CORE_API canLoad (const char *filename);  . Function Documentation. ◆ canLoad(). bool SOFA_CORE_API sofa::core::loader::canLoad ; (; const char * ; filename). sofacoreloader; Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1loader.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1matrixaccumulator.html:190,Modifiability,Variab,Variables,190,"﻿. SOFA API: sofa::core::matrixaccumulator Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::core::matrixaccumulator Namespace Reference . Classes; struct  get_abstract_strong< Contribution::GEOMETRIC_STIFFNESS >;  ; struct  get_list_abstract_strong< Contribution::GEOMETRIC_STIFFNESS >;  ; struct  get_abstract_strong< Contribution::STIFFNESS >;  ; struct  get_abstract_strong< Contribution::DAMPING >;  ; struct  get_list_abstract_strong< Contribution::STIFFNESS >;  ; struct  get_list_abstract_strong< Contribution::DAMPING >;  ; struct  get_abstract_strong< Contribution::MASS >;  ; struct  get_list_abstract_strong< Contribution::MASS >;  ; class  no_check_policy;  ; struct  IndexVerificationStrategy;  ; struct  IndividualIndexVerificationStrategy;  ; struct  CompositeIndexVerificationStrategy;  The concatenation of multiple index verification strategies. More...;  ; struct  NoIndexVerification;  ; struct  RangeVerification;  ; struct  ContributionName;  ; struct  ContributionName< Contribution::STIFFNESS >;  ; struct  ContributionName< Contribution::MASS >;  ; struct  ContributionName< Contribution::DAMPING >;  ; struct  ContributionName< Contribution::GEOMETRIC_STIFFNESS >;  ; struct  get_abstract_strong;  ; struct  get_list_abstract_strong;  . Typedefs; template<Contribution c> ; using get_abstract_strong_type = typename get_abstract_strong< c >::type;  ; template<Contribution c> ; using get_component_type = typename get_abstract_strong< c >::ComponentType;  ; template<Contribution c> ; using get_matrix_builder_type = typename get_abstract_strong< c >::MatrixBuilderType;  ; template<Contribution c> ; using get_list_abstract_strong_type = typename get_list_abstract_strong< c >::type;  . Enumerations; enum class  Contribution : sofa::Size { STIFFNESS; , MASS; , DAMPING; , GEOMETRIC_STIFFNESS; };  . Functions; template<Contribution c> ; constexpr std::strin",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1matrixaccumulator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1matrixaccumulator.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1matrixaccumulator.html:2035,Modifiability,Variab,Variables,2035,"  ContributionName;  ; struct  ContributionName< Contribution::STIFFNESS >;  ; struct  ContributionName< Contribution::MASS >;  ; struct  ContributionName< Contribution::DAMPING >;  ; struct  ContributionName< Contribution::GEOMETRIC_STIFFNESS >;  ; struct  get_abstract_strong;  ; struct  get_list_abstract_strong;  . Typedefs; template<Contribution c> ; using get_abstract_strong_type = typename get_abstract_strong< c >::type;  ; template<Contribution c> ; using get_component_type = typename get_abstract_strong< c >::ComponentType;  ; template<Contribution c> ; using get_matrix_builder_type = typename get_abstract_strong< c >::MatrixBuilderType;  ; template<Contribution c> ; using get_list_abstract_strong_type = typename get_list_abstract_strong< c >::type;  . Enumerations; enum class  Contribution : sofa::Size { STIFFNESS; , MASS; , DAMPING; , GEOMETRIC_STIFFNESS; };  . Functions; template<Contribution c> ; constexpr std::string_view GetContributionName ();  . Variables; constexpr no_check_policy no_check {};  . Typedef Documentation. ◆ get_abstract_strong_type. template<Contribution c> . using sofa::core::matrixaccumulator::get_abstract_strong_type = typedef typename get_abstract_strong<c>::type. Helper alias; Example: get_abstract_strong_type<Contribution::STIFFNESS> . ◆ get_component_type. template<Contribution c> . using sofa::core::matrixaccumulator::get_component_type = typedef typename get_abstract_strong<c>::ComponentType. Helper alias; Example: get_component_type<Contribution::STIFFNESS> . ◆ get_list_abstract_strong_type. template<Contribution c> . using sofa::core::matrixaccumulator::get_list_abstract_strong_type = typedef typename get_list_abstract_strong<c>::type. ◆ get_matrix_builder_type. template<Contribution c> . using sofa::core::matrixaccumulator::get_matrix_builder_type = typedef typename get_abstract_strong<c>::MatrixBuilderType. Enumeration Type Documentation. ◆ Contribution. enum sofa::core::matrixaccumulator::Contribution : sofa::Size. strong .",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1matrixaccumulator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1matrixaccumulator.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1matrixaccumulator.html:3498,Modifiability,Variab,Variable,3498,";  ; template<Contribution c> ; using get_list_abstract_strong_type = typename get_list_abstract_strong< c >::type;  . Enumerations; enum class  Contribution : sofa::Size { STIFFNESS; , MASS; , DAMPING; , GEOMETRIC_STIFFNESS; };  . Functions; template<Contribution c> ; constexpr std::string_view GetContributionName ();  . Variables; constexpr no_check_policy no_check {};  . Typedef Documentation. ◆ get_abstract_strong_type. template<Contribution c> . using sofa::core::matrixaccumulator::get_abstract_strong_type = typedef typename get_abstract_strong<c>::type. Helper alias; Example: get_abstract_strong_type<Contribution::STIFFNESS> . ◆ get_component_type. template<Contribution c> . using sofa::core::matrixaccumulator::get_component_type = typedef typename get_abstract_strong<c>::ComponentType. Helper alias; Example: get_component_type<Contribution::STIFFNESS> . ◆ get_list_abstract_strong_type. template<Contribution c> . using sofa::core::matrixaccumulator::get_list_abstract_strong_type = typedef typename get_list_abstract_strong<c>::type. ◆ get_matrix_builder_type. template<Contribution c> . using sofa::core::matrixaccumulator::get_matrix_builder_type = typedef typename get_abstract_strong<c>::MatrixBuilderType. Enumeration Type Documentation. ◆ Contribution. enum sofa::core::matrixaccumulator::Contribution : sofa::Size. strong . Type of contribution added into the global matrix Since they are not treated equivalently, they need to be distinguished . EnumeratorSTIFFNESS ; MASS ; DAMPING ; GEOMETRIC_STIFFNESS . Function Documentation. ◆ GetContributionName(). template<Contribution c> . constexpr std::string_view sofa::core::matrixaccumulator::GetContributionName ; (; ). constexpr . Example: GetContributionName<Contribution::STIFFNESS>() returns ""Stiffness"" . Variable Documentation. ◆ no_check. constexpr no_check_policy sofa::core::matrixaccumulator::no_check {}. inlineconstexpr . sofacorematrixaccumulator; Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1matrixaccumulator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1matrixaccumulator.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:8329,Availability,error,error,8329,":ostream & operator<< (std::ostream &o, const sofa::core::objectmodel::TagSet &tagSet);  ; std::istream & operator>> (std::istream &in, sofa::core::objectmodel::TagSet &tagSet);  . Variables; template class SOFA_CORE_API Data< bool >;  . Typedef Documentation. ◆ AspectRef. using sofa::core::objectmodel::AspectRef = typedef sptr<Aspect>. Enumeration Type Documentation. ◆ ComponentState. enum sofa::core::objectmodel::ComponentState. strong . enum class is a C++ x11 feature (http://en.cppreference.com/w/cpp/language/enum), Indicate the state of a sofa object. . EnumeratorUndefined component that does not make use of this field have this one . Loading the component is loading but never passed successfully its init() function . Valid the component has passed successfully its init function . Dirty the component is ready to be used but requires a call to reinit . Busy the component is doing ""something"", don't trust its values for doing your computation . Invalid the component reached an error and is thus unable to behave normally. . ◆ DataEngineDataType. enum sofa::core::objectmodel::DataEngineDataType. strong . EnumeratorDataEngineNothing ; DataEngineInput ; DataEngineOutput . ◆ PathType. enum sofa::core::objectmodel::PathType. strong . EnumeratorFILE ; DIRECTORY ; BOTH . ◆ TypeOfInsertion. enum sofa::core::objectmodel::TypeOfInsertion. strong . Enum proposing two alternatives on where to add a new object in a node. . EnumeratorAtEnd ; AtBegin . Function Documentation. ◆ classidT(). template<class T > . const ClassInfo& sofa::core::objectmodel::classidT ; (; ). ◆ GetSofaTypeTemplateName() [1/2]. template<typename T > . std::string sofa::core::objectmodel::GetSofaTypeTemplateName ; (; const std::string ; prefix = """"). ◆ GetSofaTypeTemplateName() [2/2]. template<typename T1 , typename T2 , typename ... Ts> . std::string sofa::core::objectmodel::GetSofaTypeTemplateName ; (; const std::string ; prefix = """"). ◆ intrusive_ptr_add_ref(). SOFA_CORE_API void sofa::core::objectmode",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:2191,Deployability,Configurat,ConfigurationSetting,2191,".. > >;  ; class  TClass;  ; class  HasGetCustomTemplateName;  ; class  HasGetCustomClassName;  ; class  HasName;  ; class  HasDataTypeInfo;  ; class  HasGetDefaultTemplateName;  ; class  HasDeprecatedTemplateName;  ; class  HasDeprecatedShortName;  ; class  HasDeprecatedClassName;  ; class  BaseClassNameHelper;  ; class  BaseContext;  Base class for Context classes, storing shared variables and parameters. More...;  ; class  BaseData;  Abstract base class for Data. More...;  ; class  WriteAccessWithRawPtr;  ; class  BaseLink;  Abstract base class for all links in the scene grapn, independently of their type. More...;  ; class  BaseNode;  Base class for simulation nodes. More...;  ; class  BaseObject;  Base class for simulation components. More...;  ; class  BaseObjectDescription;  Base Interface for classes containing the description of an object, used to construct it. More...;  ; class  ClassInfo;  Meta information class. More...;  ; class  TClassInfo;  ; class  ConfigurationSetting;  Base class for all the configuration settings of SOFA. More...;  ; class  Context;  Implementation of BaseContext, storing all shared parameters in Datas. More...;  ; class  ContextObject;  Base class for simulation objects that modify the shared context (such as gravity, local coordinate system, ...). More...;  ; class  Data;  Container that holds a variable for a component. More...;  ; class  EmptyData;  ; class  DataContentValue;  ; class  DataContentValue< T, false >;  ; class  DataContentValue< T, true >;  ; class  DataFileName;  Data specialized to store filenames, potentially relative to the current directory at the time it was specified. More...;  ; class  DataFileNameVector;  ; class  DataLink;  DataLink stores a connection between two object of type Data<XXX> The class is templated by the Data type to connect. The class implements the AbstractDataLink interface. More...;  ; class  DDGNode;  A DDGNode is a vertex in the data dependencies graph. The data dependency graph is us",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:2237,Deployability,configurat,configuration,2237,".. > >;  ; class  TClass;  ; class  HasGetCustomTemplateName;  ; class  HasGetCustomClassName;  ; class  HasName;  ; class  HasDataTypeInfo;  ; class  HasGetDefaultTemplateName;  ; class  HasDeprecatedTemplateName;  ; class  HasDeprecatedShortName;  ; class  HasDeprecatedClassName;  ; class  BaseClassNameHelper;  ; class  BaseContext;  Base class for Context classes, storing shared variables and parameters. More...;  ; class  BaseData;  Abstract base class for Data. More...;  ; class  WriteAccessWithRawPtr;  ; class  BaseLink;  Abstract base class for all links in the scene grapn, independently of their type. More...;  ; class  BaseNode;  Base class for simulation nodes. More...;  ; class  BaseObject;  Base class for simulation components. More...;  ; class  BaseObjectDescription;  Base Interface for classes containing the description of an object, used to construct it. More...;  ; class  ClassInfo;  Meta information class. More...;  ; class  TClassInfo;  ; class  ConfigurationSetting;  Base class for all the configuration settings of SOFA. More...;  ; class  Context;  Implementation of BaseContext, storing all shared parameters in Datas. More...;  ; class  ContextObject;  Base class for simulation objects that modify the shared context (such as gravity, local coordinate system, ...). More...;  ; class  Data;  Container that holds a variable for a component. More...;  ; class  EmptyData;  ; class  DataContentValue;  ; class  DataContentValue< T, false >;  ; class  DataContentValue< T, true >;  ; class  DataFileName;  Data specialized to store filenames, potentially relative to the current directory at the time it was specified. More...;  ; class  DataFileNameVector;  ; class  DataLink;  DataLink stores a connection between two object of type Data<XXX> The class is templated by the Data type to connect. The class implements the AbstractDataLink interface. More...;  ; class  DDGNode;  A DDGNode is a vertex in the data dependencies graph. The data dependency graph is us",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:3219,Deployability,update,update,3219,"More...;  ; class  Context;  Implementation of BaseContext, storing all shared parameters in Datas. More...;  ; class  ContextObject;  Base class for simulation objects that modify the shared context (such as gravity, local coordinate system, ...). More...;  ; class  Data;  Container that holds a variable for a component. More...;  ; class  EmptyData;  ; class  DataContentValue;  ; class  DataContentValue< T, false >;  ; class  DataContentValue< T, true >;  ; class  DataFileName;  Data specialized to store filenames, potentially relative to the current directory at the time it was specified. More...;  ; class  DataFileNameVector;  ; class  DataLink;  DataLink stores a connection between two object of type Data<XXX> The class is templated by the Data type to connect. The class implements the AbstractDataLink interface. More...;  ; class  DDGNode;  A DDGNode is a vertex in the data dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. More...;  ; class  DetachNodeEvent;  ; class  Event;  Base class for all events received by the objects. More...;  ; class  GUIEvent;  This event notifies about GUI interaction. More...;  ; class  HapticDeviceEvent;  This event notifies about haptic device interaction. More...;  ; class  IdleEvent;  This event is propagated along the objects hierarchy at regular interval. More...;  ; class  JoystickEvent;  JoystickEvent Class. More...;  ; class  KeypressedEvent;  This event is propagated along the objects when a key on the keyboard is pressed. More...;  ; class  KeyreleasedEvent;  This event is propagated along the objects when a key on the keyboard is released. More...;  ; class  LinkTraitsDestPtr;  ; class  LinkTraitsDestPtr< TDestType, false >;  ; class  LinkTraitsDestPtr< TDestType, true >;  ; class  LinkTraitsValueType;  ; class  LinkTraitsValueType< TDestType, TDestPtr, strongLink, false >;  ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:3318,Deployability,update,update,3318,"More...;  ; class  Context;  Implementation of BaseContext, storing all shared parameters in Datas. More...;  ; class  ContextObject;  Base class for simulation objects that modify the shared context (such as gravity, local coordinate system, ...). More...;  ; class  Data;  Container that holds a variable for a component. More...;  ; class  EmptyData;  ; class  DataContentValue;  ; class  DataContentValue< T, false >;  ; class  DataContentValue< T, true >;  ; class  DataFileName;  Data specialized to store filenames, potentially relative to the current directory at the time it was specified. More...;  ; class  DataFileNameVector;  ; class  DataLink;  DataLink stores a connection between two object of type Data<XXX> The class is templated by the Data type to connect. The class implements the AbstractDataLink interface. More...;  ; class  DDGNode;  A DDGNode is a vertex in the data dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. More...;  ; class  DetachNodeEvent;  ; class  Event;  Base class for all events received by the objects. More...;  ; class  GUIEvent;  This event notifies about GUI interaction. More...;  ; class  HapticDeviceEvent;  This event notifies about haptic device interaction. More...;  ; class  IdleEvent;  This event is propagated along the objects hierarchy at regular interval. More...;  ; class  JoystickEvent;  JoystickEvent Class. More...;  ; class  KeypressedEvent;  This event is propagated along the objects when a key on the keyboard is pressed. More...;  ; class  KeyreleasedEvent;  This event is propagated along the objects when a key on the keyboard is released. More...;  ; class  LinkTraitsDestPtr;  ; class  LinkTraitsDestPtr< TDestType, false >;  ; class  LinkTraitsDestPtr< TDestType, true >;  ; class  LinkTraitsValueType;  ; class  LinkTraitsValueType< TDestType, TDestPtr, strongLink, false >;  ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:4020,Deployability,release,released,4020,"ect of type Data<XXX> The class is templated by the Data type to connect. The class implements the AbstractDataLink interface. More...;  ; class  DDGNode;  A DDGNode is a vertex in the data dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. More...;  ; class  DetachNodeEvent;  ; class  Event;  Base class for all events received by the objects. More...;  ; class  GUIEvent;  This event notifies about GUI interaction. More...;  ; class  HapticDeviceEvent;  This event notifies about haptic device interaction. More...;  ; class  IdleEvent;  This event is propagated along the objects hierarchy at regular interval. More...;  ; class  JoystickEvent;  JoystickEvent Class. More...;  ; class  KeypressedEvent;  This event is propagated along the objects when a key on the keyboard is pressed. More...;  ; class  KeyreleasedEvent;  This event is propagated along the objects when a key on the keyboard is released. More...;  ; class  LinkTraitsDestPtr;  ; class  LinkTraitsDestPtr< TDestType, false >;  ; class  LinkTraitsDestPtr< TDestType, true >;  ; class  LinkTraitsValueType;  ; class  LinkTraitsValueType< TDestType, TDestPtr, strongLink, false >;  ; class  LinkTraitsValueType< TDestType, TDestPtr, strongLink, true >;  ; class  LinkTraitsContainer;  ; class  SinglePtr;  Class to hold 0-or-1 pointer. The interface is similar to std::vector (size/[]/begin/end), plus an automatic conversion to one pointer. More...;  ; class  LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >;  ; class  LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >;  ; class  TLink;  Container of all links in the scenegraph, from a given type of object (Owner) to another (Dest) More...;  ; class  MultiLink;  Container of vectors of links in the scenegraph, from a given type of object (Owner) to another (Dest) More...;  ; class  MouseEvent;  MouseEven",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:2010,Integrability,Interface,Interface,2010,"lection base class. More...;  ; class  DeprecatedBaseClass;  ; struct  Parents;  ; struct  TClassParents;  ; struct  TClassParents< void >;  ; struct  TClassParents< Parents< Types... > >;  ; class  TClass;  ; class  HasGetCustomTemplateName;  ; class  HasGetCustomClassName;  ; class  HasName;  ; class  HasDataTypeInfo;  ; class  HasGetDefaultTemplateName;  ; class  HasDeprecatedTemplateName;  ; class  HasDeprecatedShortName;  ; class  HasDeprecatedClassName;  ; class  BaseClassNameHelper;  ; class  BaseContext;  Base class for Context classes, storing shared variables and parameters. More...;  ; class  BaseData;  Abstract base class for Data. More...;  ; class  WriteAccessWithRawPtr;  ; class  BaseLink;  Abstract base class for all links in the scene grapn, independently of their type. More...;  ; class  BaseNode;  Base class for simulation nodes. More...;  ; class  BaseObject;  Base class for simulation components. More...;  ; class  BaseObjectDescription;  Base Interface for classes containing the description of an object, used to construct it. More...;  ; class  ClassInfo;  Meta information class. More...;  ; class  TClassInfo;  ; class  ConfigurationSetting;  Base class for all the configuration settings of SOFA. More...;  ; class  Context;  Implementation of BaseContext, storing all shared parameters in Datas. More...;  ; class  ContextObject;  Base class for simulation objects that modify the shared context (such as gravity, local coordinate system, ...). More...;  ; class  Data;  Container that holds a variable for a component. More...;  ; class  EmptyData;  ; class  DataContentValue;  ; class  DataContentValue< T, false >;  ; class  DataContentValue< T, true >;  ; class  DataFileName;  Data specialized to store filenames, potentially relative to the current directory at the time it was specified. More...;  ; class  DataFileNameVector;  ; class  DataLink;  DataLink stores a connection between two object of type Data<XXX> The class is templated by the Data typ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:3088,Integrability,interface,interface,3088,", used to construct it. More...;  ; class  ClassInfo;  Meta information class. More...;  ; class  TClassInfo;  ; class  ConfigurationSetting;  Base class for all the configuration settings of SOFA. More...;  ; class  Context;  Implementation of BaseContext, storing all shared parameters in Datas. More...;  ; class  ContextObject;  Base class for simulation objects that modify the shared context (such as gravity, local coordinate system, ...). More...;  ; class  Data;  Container that holds a variable for a component. More...;  ; class  EmptyData;  ; class  DataContentValue;  ; class  DataContentValue< T, false >;  ; class  DataContentValue< T, true >;  ; class  DataFileName;  Data specialized to store filenames, potentially relative to the current directory at the time it was specified. More...;  ; class  DataFileNameVector;  ; class  DataLink;  DataLink stores a connection between two object of type Data<XXX> The class is templated by the Data type to connect. The class implements the AbstractDataLink interface. More...;  ; class  DDGNode;  A DDGNode is a vertex in the data dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. More...;  ; class  DetachNodeEvent;  ; class  Event;  Base class for all events received by the objects. More...;  ; class  GUIEvent;  This event notifies about GUI interaction. More...;  ; class  HapticDeviceEvent;  This event notifies about haptic device interaction. More...;  ; class  IdleEvent;  This event is propagated along the objects hierarchy at regular interval. More...;  ; class  JoystickEvent;  JoystickEvent Class. More...;  ; class  KeypressedEvent;  This event is propagated along the objects when a key on the keyboard is pressed. More...;  ; class  KeyreleasedEvent;  This event is propagated along the objects when a key on the keyboard is released. More...;  ; class  LinkTraitsDestPtr;  ; c",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:3162,Integrability,depend,dependencies,3162,"class. More...;  ; class  TClassInfo;  ; class  ConfigurationSetting;  Base class for all the configuration settings of SOFA. More...;  ; class  Context;  Implementation of BaseContext, storing all shared parameters in Datas. More...;  ; class  ContextObject;  Base class for simulation objects that modify the shared context (such as gravity, local coordinate system, ...). More...;  ; class  Data;  Container that holds a variable for a component. More...;  ; class  EmptyData;  ; class  DataContentValue;  ; class  DataContentValue< T, false >;  ; class  DataContentValue< T, true >;  ; class  DataFileName;  Data specialized to store filenames, potentially relative to the current directory at the time it was specified. More...;  ; class  DataFileNameVector;  ; class  DataLink;  DataLink stores a connection between two object of type Data<XXX> The class is templated by the Data type to connect. The class implements the AbstractDataLink interface. More...;  ; class  DDGNode;  A DDGNode is a vertex in the data dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. More...;  ; class  DetachNodeEvent;  ; class  Event;  Base class for all events received by the objects. More...;  ; class  GUIEvent;  This event notifies about GUI interaction. More...;  ; class  HapticDeviceEvent;  This event notifies about haptic device interaction. More...;  ; class  IdleEvent;  This event is propagated along the objects hierarchy at regular interval. More...;  ; class  JoystickEvent;  JoystickEvent Class. More...;  ; class  KeypressedEvent;  This event is propagated along the objects when a key on the keyboard is pressed. More...;  ; class  KeyreleasedEvent;  This event is propagated along the objects when a key on the keyboard is released. More...;  ; class  LinkTraitsDestPtr;  ; class  LinkTraitsDestPtr< TDestType, false >;  ; class  LinkTraitsDestPtr",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:3191,Integrability,depend,dependency,3191,"More...;  ; class  Context;  Implementation of BaseContext, storing all shared parameters in Datas. More...;  ; class  ContextObject;  Base class for simulation objects that modify the shared context (such as gravity, local coordinate system, ...). More...;  ; class  Data;  Container that holds a variable for a component. More...;  ; class  EmptyData;  ; class  DataContentValue;  ; class  DataContentValue< T, false >;  ; class  DataContentValue< T, true >;  ; class  DataFileName;  Data specialized to store filenames, potentially relative to the current directory at the time it was specified. More...;  ; class  DataFileNameVector;  ; class  DataLink;  DataLink stores a connection between two object of type Data<XXX> The class is templated by the Data type to connect. The class implements the AbstractDataLink interface. More...;  ; class  DDGNode;  A DDGNode is a vertex in the data dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. More...;  ; class  DetachNodeEvent;  ; class  Event;  Base class for all events received by the objects. More...;  ; class  GUIEvent;  This event notifies about GUI interaction. More...;  ; class  HapticDeviceEvent;  This event notifies about haptic device interaction. More...;  ; class  IdleEvent;  This event is propagated along the objects hierarchy at regular interval. More...;  ; class  JoystickEvent;  JoystickEvent Class. More...;  ; class  KeypressedEvent;  This event is propagated along the objects when a key on the keyboard is pressed. More...;  ; class  KeyreleasedEvent;  This event is propagated along the objects when a key on the keyboard is released. More...;  ; class  LinkTraitsDestPtr;  ; class  LinkTraitsDestPtr< TDestType, false >;  ; class  LinkTraitsDestPtr< TDestType, true >;  ; class  LinkTraitsValueType;  ; class  LinkTraitsValueType< TDestType, TDestPtr, strongLink, false >;  ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:4428,Integrability,interface,interface,4428,"class  GUIEvent;  This event notifies about GUI interaction. More...;  ; class  HapticDeviceEvent;  This event notifies about haptic device interaction. More...;  ; class  IdleEvent;  This event is propagated along the objects hierarchy at regular interval. More...;  ; class  JoystickEvent;  JoystickEvent Class. More...;  ; class  KeypressedEvent;  This event is propagated along the objects when a key on the keyboard is pressed. More...;  ; class  KeyreleasedEvent;  This event is propagated along the objects when a key on the keyboard is released. More...;  ; class  LinkTraitsDestPtr;  ; class  LinkTraitsDestPtr< TDestType, false >;  ; class  LinkTraitsDestPtr< TDestType, true >;  ; class  LinkTraitsValueType;  ; class  LinkTraitsValueType< TDestType, TDestPtr, strongLink, false >;  ; class  LinkTraitsValueType< TDestType, TDestPtr, strongLink, true >;  ; class  LinkTraitsContainer;  ; class  SinglePtr;  Class to hold 0-or-1 pointer. The interface is similar to std::vector (size/[]/begin/end), plus an automatic conversion to one pointer. More...;  ; class  LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >;  ; class  LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >;  ; class  TLink;  Container of all links in the scenegraph, from a given type of object (Owner) to another (Dest) More...;  ; class  MultiLink;  Container of vectors of links in the scenegraph, from a given type of object (Owner) to another (Dest) More...;  ; class  MouseEvent;  MouseEvent Class. More...;  ; class  RenamedData;  ; class  ScriptEvent;  Generic Event class to send a message through the simulation graph. More...;  ; class  New;  new operator for classes with smart pointers (such as all components deriving from Base) More...;  ; class  SPtr_dynamic_cast;  dynamic_cast operator for SPtr More...;  ; class  SPtr_static_cast;  static_cast operator for SPtr More...;  ; class  SPtr_const_cast;  const_cast operator for SPtr More...;  ; class  Tag;  A Tag is a string (internal",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:5068,Integrability,message,message,5068,"  LinkTraitsDestPtr;  ; class  LinkTraitsDestPtr< TDestType, false >;  ; class  LinkTraitsDestPtr< TDestType, true >;  ; class  LinkTraitsValueType;  ; class  LinkTraitsValueType< TDestType, TDestPtr, strongLink, false >;  ; class  LinkTraitsValueType< TDestType, TDestPtr, strongLink, true >;  ; class  LinkTraitsContainer;  ; class  SinglePtr;  Class to hold 0-or-1 pointer. The interface is similar to std::vector (size/[]/begin/end), plus an automatic conversion to one pointer. More...;  ; class  LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >;  ; class  LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >;  ; class  TLink;  Container of all links in the scenegraph, from a given type of object (Owner) to another (Dest) More...;  ; class  MultiLink;  Container of vectors of links in the scenegraph, from a given type of object (Owner) to another (Dest) More...;  ; class  MouseEvent;  MouseEvent Class. More...;  ; class  RenamedData;  ; class  ScriptEvent;  Generic Event class to send a message through the simulation graph. More...;  ; class  New;  new operator for classes with smart pointers (such as all components deriving from Base) More...;  ; class  SPtr_dynamic_cast;  dynamic_cast operator for SPtr More...;  ; class  SPtr_static_cast;  static_cast operator for SPtr More...;  ; class  SPtr_const_cast;  const_cast operator for SPtr More...;  ; class  Tag;  A Tag is a string (internally converted to an integer), attached to objects in order to define subsets to process by specific visitors. More...;  ; class  TagSet;  ; class  vectorData;  ; class  VectorLinks;  . Typedefs; using AspectRef = sptr< Aspect >;  . Enumerations; enum class  ComponentState { ;   Undefined; , Loading; , Valid; , Dirty; , ;   Busy; , Invalid. };  ; enum class  PathType { FILE; , DIRECTORY; , BOTH; };  ; enum class  TypeOfInsertion { AtEnd; , AtBegin; };  Enum proposing two alternatives on where to add a new object in a node. More...;  ; enum class  DataEngineDataType {",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:198,Modifiability,Variab,Variables,198,"﻿. SOFA API: sofa::core::objectmodel Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::core::objectmodel Namespace Reference . Namespaces;  base;  ;  basecontext;  ;  lifecycle;  . Classes; class  SingleLink;  Container of single links in the scenegraph, from a given type of object (Owner) to another (Dest) More...;  ; class  AbstractDataLink;  AbstractDataLink is the base class for every link between two data fields The targeted BaseData is called the ""target"", The base object owning the current ""child"" object is the ""owner"" it is possible to store a path in a DataLink, in that case, at each DataLink access the path is resolved to search for a corresponding Data until one is found. Once a Data is set, the path is discarded. More...;  ; class  Aspect;  ; class  AspectPool;  ; class  AspectBuffer;  ; class  Base;  Base class for everything. More...;  ; class  BaseClass;  Class hierarchy reflection base class. More...;  ; class  DeprecatedBaseClass;  ; struct  Parents;  ; struct  TClassParents;  ; struct  TClassParents< void >;  ; struct  TClassParents< Parents< Types... > >;  ; class  TClass;  ; class  HasGetCustomTemplateName;  ; class  HasGetCustomClassName;  ; class  HasName;  ; class  HasDataTypeInfo;  ; class  HasGetDefaultTemplateName;  ; class  HasDeprecatedTemplateName;  ; class  HasDeprecatedShortName;  ; class  HasDeprecatedClassName;  ; class  BaseClassNameHelper;  ; class  BaseContext;  Base class for Context classes, storing shared variables and parameters. More...;  ; class  BaseData;  Abstract base class for Data. More...;  ; class  WriteAccessWithRawPtr;  ; class  BaseLink;  Abstract base class for all links in the scene grapn, independently of their type. More...;  ; class  BaseNode;  Base class for simulation nodes. More...;  ; class  BaseObject;  Base class for simulation components. More...;  ; class  BaseObjectDescriptio",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:1597,Modifiability,variab,variables,1597,") to another (Dest) More...;  ; class  AbstractDataLink;  AbstractDataLink is the base class for every link between two data fields The targeted BaseData is called the ""target"", The base object owning the current ""child"" object is the ""owner"" it is possible to store a path in a DataLink, in that case, at each DataLink access the path is resolved to search for a corresponding Data until one is found. Once a Data is set, the path is discarded. More...;  ; class  Aspect;  ; class  AspectPool;  ; class  AspectBuffer;  ; class  Base;  Base class for everything. More...;  ; class  BaseClass;  Class hierarchy reflection base class. More...;  ; class  DeprecatedBaseClass;  ; struct  Parents;  ; struct  TClassParents;  ; struct  TClassParents< void >;  ; struct  TClassParents< Parents< Types... > >;  ; class  TClass;  ; class  HasGetCustomTemplateName;  ; class  HasGetCustomClassName;  ; class  HasName;  ; class  HasDataTypeInfo;  ; class  HasGetDefaultTemplateName;  ; class  HasDeprecatedTemplateName;  ; class  HasDeprecatedShortName;  ; class  HasDeprecatedClassName;  ; class  BaseClassNameHelper;  ; class  BaseContext;  Base class for Context classes, storing shared variables and parameters. More...;  ; class  BaseData;  Abstract base class for Data. More...;  ; class  WriteAccessWithRawPtr;  ; class  BaseLink;  Abstract base class for all links in the scene grapn, independently of their type. More...;  ; class  BaseNode;  Base class for simulation nodes. More...;  ; class  BaseObject;  Base class for simulation components. More...;  ; class  BaseObjectDescription;  Base Interface for classes containing the description of an object, used to construct it. More...;  ; class  ClassInfo;  Meta information class. More...;  ; class  TClassInfo;  ; class  ConfigurationSetting;  Base class for all the configuration settings of SOFA. More...;  ; class  Context;  Implementation of BaseContext, storing all shared parameters in Datas. More...;  ; class  ContextObject;  Base class for",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:2191,Modifiability,Config,ConfigurationSetting,2191,".. > >;  ; class  TClass;  ; class  HasGetCustomTemplateName;  ; class  HasGetCustomClassName;  ; class  HasName;  ; class  HasDataTypeInfo;  ; class  HasGetDefaultTemplateName;  ; class  HasDeprecatedTemplateName;  ; class  HasDeprecatedShortName;  ; class  HasDeprecatedClassName;  ; class  BaseClassNameHelper;  ; class  BaseContext;  Base class for Context classes, storing shared variables and parameters. More...;  ; class  BaseData;  Abstract base class for Data. More...;  ; class  WriteAccessWithRawPtr;  ; class  BaseLink;  Abstract base class for all links in the scene grapn, independently of their type. More...;  ; class  BaseNode;  Base class for simulation nodes. More...;  ; class  BaseObject;  Base class for simulation components. More...;  ; class  BaseObjectDescription;  Base Interface for classes containing the description of an object, used to construct it. More...;  ; class  ClassInfo;  Meta information class. More...;  ; class  TClassInfo;  ; class  ConfigurationSetting;  Base class for all the configuration settings of SOFA. More...;  ; class  Context;  Implementation of BaseContext, storing all shared parameters in Datas. More...;  ; class  ContextObject;  Base class for simulation objects that modify the shared context (such as gravity, local coordinate system, ...). More...;  ; class  Data;  Container that holds a variable for a component. More...;  ; class  EmptyData;  ; class  DataContentValue;  ; class  DataContentValue< T, false >;  ; class  DataContentValue< T, true >;  ; class  DataFileName;  Data specialized to store filenames, potentially relative to the current directory at the time it was specified. More...;  ; class  DataFileNameVector;  ; class  DataLink;  DataLink stores a connection between two object of type Data<XXX> The class is templated by the Data type to connect. The class implements the AbstractDataLink interface. More...;  ; class  DDGNode;  A DDGNode is a vertex in the data dependencies graph. The data dependency graph is us",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:2237,Modifiability,config,configuration,2237,".. > >;  ; class  TClass;  ; class  HasGetCustomTemplateName;  ; class  HasGetCustomClassName;  ; class  HasName;  ; class  HasDataTypeInfo;  ; class  HasGetDefaultTemplateName;  ; class  HasDeprecatedTemplateName;  ; class  HasDeprecatedShortName;  ; class  HasDeprecatedClassName;  ; class  BaseClassNameHelper;  ; class  BaseContext;  Base class for Context classes, storing shared variables and parameters. More...;  ; class  BaseData;  Abstract base class for Data. More...;  ; class  WriteAccessWithRawPtr;  ; class  BaseLink;  Abstract base class for all links in the scene grapn, independently of their type. More...;  ; class  BaseNode;  Base class for simulation nodes. More...;  ; class  BaseObject;  Base class for simulation components. More...;  ; class  BaseObjectDescription;  Base Interface for classes containing the description of an object, used to construct it. More...;  ; class  ClassInfo;  Meta information class. More...;  ; class  TClassInfo;  ; class  ConfigurationSetting;  Base class for all the configuration settings of SOFA. More...;  ; class  Context;  Implementation of BaseContext, storing all shared parameters in Datas. More...;  ; class  ContextObject;  Base class for simulation objects that modify the shared context (such as gravity, local coordinate system, ...). More...;  ; class  Data;  Container that holds a variable for a component. More...;  ; class  EmptyData;  ; class  DataContentValue;  ; class  DataContentValue< T, false >;  ; class  DataContentValue< T, true >;  ; class  DataFileName;  Data specialized to store filenames, potentially relative to the current directory at the time it was specified. More...;  ; class  DataFileNameVector;  ; class  DataLink;  DataLink stores a connection between two object of type Data<XXX> The class is templated by the Data type to connect. The class implements the AbstractDataLink interface. More...;  ; class  DDGNode;  A DDGNode is a vertex in the data dependencies graph. The data dependency graph is us",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:2567,Modifiability,variab,variable,2567,"ss for Context classes, storing shared variables and parameters. More...;  ; class  BaseData;  Abstract base class for Data. More...;  ; class  WriteAccessWithRawPtr;  ; class  BaseLink;  Abstract base class for all links in the scene grapn, independently of their type. More...;  ; class  BaseNode;  Base class for simulation nodes. More...;  ; class  BaseObject;  Base class for simulation components. More...;  ; class  BaseObjectDescription;  Base Interface for classes containing the description of an object, used to construct it. More...;  ; class  ClassInfo;  Meta information class. More...;  ; class  TClassInfo;  ; class  ConfigurationSetting;  Base class for all the configuration settings of SOFA. More...;  ; class  Context;  Implementation of BaseContext, storing all shared parameters in Datas. More...;  ; class  ContextObject;  Base class for simulation objects that modify the shared context (such as gravity, local coordinate system, ...). More...;  ; class  Data;  Container that holds a variable for a component. More...;  ; class  EmptyData;  ; class  DataContentValue;  ; class  DataContentValue< T, false >;  ; class  DataContentValue< T, true >;  ; class  DataFileName;  Data specialized to store filenames, potentially relative to the current directory at the time it was specified. More...;  ; class  DataFileNameVector;  ; class  DataLink;  DataLink stores a connection between two object of type Data<XXX> The class is templated by the Data type to connect. The class implements the AbstractDataLink interface. More...;  ; class  DDGNode;  A DDGNode is a vertex in the data dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. More...;  ; class  DetachNodeEvent;  ; class  Event;  Base class for all events received by the objects. More...;  ; class  GUIEvent;  This event notifies about GUI interaction. More...;  ; class  Hap",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:7515,Modifiability,Variab,Variables,7515,"objectmodel::BaseObject::SPtr &object);  ; void intrusive_ptr_add_ref (Aspect *a);  ; void intrusive_ptr_release (Aspect *a);  ; template<typename T > ; std::string GetSofaTypeTemplateName (const std::string prefix="""");  ; template<typename T1 , typename T2 , typename ... Ts> ; std::string GetSofaTypeTemplateName (const std::string prefix="""");  ; std::ostream & operator<< (std::ostream &out, const BaseContext &);  ; std::ostream & operator<< (std::ostream &out, const sofa::core::objectmodel::BaseData &df);  ; template<class T > ; const ClassInfo & classidT ();  ; std::ostream & operator<< (std::ostream &o, const ComponentState &s);  Defining the in/ou operator for use of component status with Data<> More...;  ; std::istream & operator>> (std::istream &i, ComponentState &s);  ; std::ostream & operator<< (std::ostream &o, const sofa::core::objectmodel::TagSet &tagSet);  ; std::istream & operator>> (std::istream &in, sofa::core::objectmodel::TagSet &tagSet);  . Variables; template class SOFA_CORE_API Data< bool >;  . Typedef Documentation. ◆ AspectRef. using sofa::core::objectmodel::AspectRef = typedef sptr<Aspect>. Enumeration Type Documentation. ◆ ComponentState. enum sofa::core::objectmodel::ComponentState. strong . enum class is a C++ x11 feature (http://en.cppreference.com/w/cpp/language/enum), Indicate the state of a sofa object. . EnumeratorUndefined component that does not make use of this field have this one . Loading the component is loading but never passed successfully its init() function . Valid the component has passed successfully its init function . Dirty the component is ready to be used but requires a call to reinit . Busy the component is doing ""something"", don't trust its values for doing your computation . Invalid the component reached an error and is thus unable to behave normally. . ◆ DataEngineDataType. enum sofa::core::objectmodel::DataEngineDataType. strong . EnumeratorDataEngineNothing ; DataEngineInput ; DataEngineOutput . ◆ PathType. enum so",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:11288,Modifiability,Variab,Variable,11288,"pect * ; a). ◆ operator<<() [1/5]. SOFA_CORE_API std::ostream & sofa::core::objectmodel::operator<< ; (; std::ostream & ; o, . const ComponentState & ; s . ). Defining the in/ou operator for use of component status with Data<> . ◆ operator<<() [2/5]. SOFA_CORE_API std::ostream & sofa::core::objectmodel::operator<< ; (; std::ostream & ; o, . const sofa::core::objectmodel::TagSet & ; tagSet . ). ◆ operator<<() [3/5]. std::ostream & sofa::core::objectmodel::operator<< ; (; std::ostream & ; o, . const Tag & ; t . ). ◆ operator<<() [4/5]. std::ostream& sofa::core::objectmodel::operator<< ; (; std::ostream & ; out, . const BaseContext & ;  . ). ◆ operator<<() [5/5]. SOFA_CORE_API std::ostream & sofa::core::objectmodel::operator<< ; (; std::ostream & ; out, . const sofa::core::objectmodel::BaseData & ; df . ). ◆ operator>>() [1/3]. SOFA_CORE_API std::istream & sofa::core::objectmodel::operator>> ; (; std::istream & ; i, . ComponentState & ; s . ). ◆ operator>>() [2/3]. std::istream & sofa::core::objectmodel::operator>> ; (; std::istream & ; i, . Tag & ; t . ). ◆ operator>>() [3/3]. SOFA_CORE_API std::istream & sofa::core::objectmodel::operator>> ; (; std::istream & ; in, . sofa::core::objectmodel::TagSet & ; tagSet . ). ◆ to_json() [1/4]. void sofa::core::objectmodel::to_json ; (; nlohmann::json & ; json, . const objectmodel::BaseClass & ; baseClass . ). inline . ◆ to_json() [2/4]. void sofa::core::objectmodel::to_json ; (; nlohmann::json & ; json, . const objectmodel::BaseData * ; data . ). inline . ◆ to_json() [3/4]. void sofa::core::objectmodel::to_json ; (; nlohmann::json & ; json, . const objectmodel::BaseLink * ; link . ). inline . ◆ to_json() [4/4]. void sofa::core::objectmodel::to_json ; (; nlohmann::json & ; json, . const objectmodel::BaseObject::SPtr & ; object . ). inline . Variable Documentation. ◆ Data< bool >. template class SOFA_CORE_API sofa::core::objectmodel::Data< bool >. sofacoreobjectmodel; Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:5767,Performance,Load,Loading,5767," of object (Owner) to another (Dest) More...;  ; class  MultiLink;  Container of vectors of links in the scenegraph, from a given type of object (Owner) to another (Dest) More...;  ; class  MouseEvent;  MouseEvent Class. More...;  ; class  RenamedData;  ; class  ScriptEvent;  Generic Event class to send a message through the simulation graph. More...;  ; class  New;  new operator for classes with smart pointers (such as all components deriving from Base) More...;  ; class  SPtr_dynamic_cast;  dynamic_cast operator for SPtr More...;  ; class  SPtr_static_cast;  static_cast operator for SPtr More...;  ; class  SPtr_const_cast;  const_cast operator for SPtr More...;  ; class  Tag;  A Tag is a string (internally converted to an integer), attached to objects in order to define subsets to process by specific visitors. More...;  ; class  TagSet;  ; class  vectorData;  ; class  VectorLinks;  . Typedefs; using AspectRef = sptr< Aspect >;  . Enumerations; enum class  ComponentState { ;   Undefined; , Loading; , Valid; , Dirty; , ;   Busy; , Invalid. };  ; enum class  PathType { FILE; , DIRECTORY; , BOTH; };  ; enum class  TypeOfInsertion { AtEnd; , AtBegin; };  Enum proposing two alternatives on where to add a new object in a node. More...;  ; enum class  DataEngineDataType { DataEngineNothing; , DataEngineInput; , DataEngineOutput; };  . Functions; SOFA_CORE_API std::ostream & operator<< (std::ostream &o, const Tag &t);  ; SOFA_CORE_API std::istream & operator>> (std::istream &i, Tag &t);  ; void to_json (nlohmann::json &json, const objectmodel::BaseClass &baseClass);  ; void to_json (nlohmann::json &json, const objectmodel::BaseData *data);  ; void to_json (nlohmann::json &json, const objectmodel::BaseLink *link);  ; void to_json (nlohmann::json &json, const objectmodel::BaseObject::SPtr &object);  ; void intrusive_ptr_add_ref (Aspect *a);  ; void intrusive_ptr_release (Aspect *a);  ; template<typename T > ; std::string GetSofaTypeTemplateName (const std::string prefix="""");",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:7982,Performance,Load,Loading,7982,"e::objectmodel::BaseData &df);  ; template<class T > ; const ClassInfo & classidT ();  ; std::ostream & operator<< (std::ostream &o, const ComponentState &s);  Defining the in/ou operator for use of component status with Data<> More...;  ; std::istream & operator>> (std::istream &i, ComponentState &s);  ; std::ostream & operator<< (std::ostream &o, const sofa::core::objectmodel::TagSet &tagSet);  ; std::istream & operator>> (std::istream &in, sofa::core::objectmodel::TagSet &tagSet);  . Variables; template class SOFA_CORE_API Data< bool >;  . Typedef Documentation. ◆ AspectRef. using sofa::core::objectmodel::AspectRef = typedef sptr<Aspect>. Enumeration Type Documentation. ◆ ComponentState. enum sofa::core::objectmodel::ComponentState. strong . enum class is a C++ x11 feature (http://en.cppreference.com/w/cpp/language/enum), Indicate the state of a sofa object. . EnumeratorUndefined component that does not make use of this field have this one . Loading the component is loading but never passed successfully its init() function . Valid the component has passed successfully its init function . Dirty the component is ready to be used but requires a call to reinit . Busy the component is doing ""something"", don't trust its values for doing your computation . Invalid the component reached an error and is thus unable to behave normally. . ◆ DataEngineDataType. enum sofa::core::objectmodel::DataEngineDataType. strong . EnumeratorDataEngineNothing ; DataEngineInput ; DataEngineOutput . ◆ PathType. enum sofa::core::objectmodel::PathType. strong . EnumeratorFILE ; DIRECTORY ; BOTH . ◆ TypeOfInsertion. enum sofa::core::objectmodel::TypeOfInsertion. strong . Enum proposing two alternatives on where to add a new object in a node. . EnumeratorAtEnd ; AtBegin . Function Documentation. ◆ classidT(). template<class T > . const ClassInfo& sofa::core::objectmodel::classidT ; (; ). ◆ GetSofaTypeTemplateName() [1/2]. template<typename T > . std::string sofa::core::objectmodel::GetSofaTypeT",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:8007,Performance,load,loading,8007,"e::objectmodel::BaseData &df);  ; template<class T > ; const ClassInfo & classidT ();  ; std::ostream & operator<< (std::ostream &o, const ComponentState &s);  Defining the in/ou operator for use of component status with Data<> More...;  ; std::istream & operator>> (std::istream &i, ComponentState &s);  ; std::ostream & operator<< (std::ostream &o, const sofa::core::objectmodel::TagSet &tagSet);  ; std::istream & operator>> (std::istream &in, sofa::core::objectmodel::TagSet &tagSet);  . Variables; template class SOFA_CORE_API Data< bool >;  . Typedef Documentation. ◆ AspectRef. using sofa::core::objectmodel::AspectRef = typedef sptr<Aspect>. Enumeration Type Documentation. ◆ ComponentState. enum sofa::core::objectmodel::ComponentState. strong . enum class is a C++ x11 feature (http://en.cppreference.com/w/cpp/language/enum), Indicate the state of a sofa object. . EnumeratorUndefined component that does not make use of this field have this one . Loading the component is loading but never passed successfully its init() function . Valid the component has passed successfully its init function . Dirty the component is ready to be used but requires a call to reinit . Busy the component is doing ""something"", don't trust its values for doing your computation . Invalid the component reached an error and is thus unable to behave normally. . ◆ DataEngineDataType. enum sofa::core::objectmodel::DataEngineDataType. strong . EnumeratorDataEngineNothing ; DataEngineInput ; DataEngineOutput . ◆ PathType. enum sofa::core::objectmodel::PathType. strong . EnumeratorFILE ; DIRECTORY ; BOTH . ◆ TypeOfInsertion. enum sofa::core::objectmodel::TypeOfInsertion. strong . Enum proposing two alternatives on where to add a new object in a node. . EnumeratorAtEnd ; AtBegin . Function Documentation. ◆ classidT(). template<class T > . const ClassInfo& sofa::core::objectmodel::classidT ; (; ). ◆ GetSofaTypeTemplateName() [1/2]. template<typename T > . std::string sofa::core::objectmodel::GetSofaTypeT",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:738,Security,access,access,738,"﻿. SOFA API: sofa::core::objectmodel Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::core::objectmodel Namespace Reference . Namespaces;  base;  ;  basecontext;  ;  lifecycle;  . Classes; class  SingleLink;  Container of single links in the scenegraph, from a given type of object (Owner) to another (Dest) More...;  ; class  AbstractDataLink;  AbstractDataLink is the base class for every link between two data fields The targeted BaseData is called the ""target"", The base object owning the current ""child"" object is the ""owner"" it is possible to store a path in a DataLink, in that case, at each DataLink access the path is resolved to search for a corresponding Data until one is found. Once a Data is set, the path is discarded. More...;  ; class  Aspect;  ; class  AspectPool;  ; class  AspectBuffer;  ; class  Base;  Base class for everything. More...;  ; class  BaseClass;  Class hierarchy reflection base class. More...;  ; class  DeprecatedBaseClass;  ; struct  Parents;  ; struct  TClassParents;  ; struct  TClassParents< void >;  ; struct  TClassParents< Parents< Types... > >;  ; class  TClass;  ; class  HasGetCustomTemplateName;  ; class  HasGetCustomClassName;  ; class  HasName;  ; class  HasDataTypeInfo;  ; class  HasGetDefaultTemplateName;  ; class  HasDeprecatedTemplateName;  ; class  HasDeprecatedShortName;  ; class  HasDeprecatedClassName;  ; class  BaseClassNameHelper;  ; class  BaseContext;  Base class for Context classes, storing shared variables and parameters. More...;  ; class  BaseData;  Abstract base class for Data. More...;  ; class  WriteAccessWithRawPtr;  ; class  BaseLink;  Abstract base class for all links in the scene grapn, independently of their type. More...;  ; class  BaseNode;  Base class for simulation nodes. More...;  ; class  BaseObject;  Base class for simulation components. More...;  ; class  BaseObjectDescriptio",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1topology.html:488,Integrability,Interface,Interface,488,"﻿. SOFA API: sofa::core::topology Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::core::topology Namespace Reference . Classes; class  DefaultMeshTopologyLoader;  ; class  BaseMeshTopology;  ; class  GeometryAlgorithms;  ; class  TopologyModifier;  ; class  TopologyContainer;  ; class  BaseTopologyData;  ; class  BaseTopologyObject;  ; class  TopologicalMapping;  This Interface is a new kind of Mapping, called TopologicalMapping, which converts an INPUT TOPOLOGY to an OUTPUT TOPOLOGY (both topologies are of type BaseTopology) More...;  ; class  Topology;  ; struct  TopologyElemID;  Topology identification of a primitive element. More...;  ; struct  PointAncestorElem;  Topology change information related to the ancestor topology element of a point. More...;  ; struct  ElemAncestorElem;  Topology change information related to the ancestor topology element of an edge. More...;  ; struct  TopologyChangeElementInfo;  ; struct  TopologyChangeElementInfo< Topology::Point >;  ; struct  TopologyChangeElementInfo< Topology::Edge >;  ; struct  TopologyChangeElementInfo< Topology::Triangle >;  ; struct  TopologyChangeElementInfo< Topology::Quad >;  ; struct  TopologyChangeElementInfo< Topology::Tetrahedron >;  ; struct  TopologyChangeElementInfo< Topology::Hexahedron >;  ; class  TopologyChange;  Base class to indicate a topology change occurred. More...;  ; class  EndingEvent;  ; class  PointsIndicesSwap;  ; class  PointsAdded;  ; class  PointsRemoved;  ; class  PointsRenumbering;  ; class  PointsMoved;  ; class  EdgesIndicesSwap;  ; class  EdgesAdded;  ; class  EdgesRemoved;  ; class  EdgesMoved_Removing;  ; class  EdgesMoved_Adding;  ; class  EdgesRenumbering;  ; class  TrianglesIndicesSwap;  ; class  TrianglesAdded;  ; class  TrianglesRemoved;  ; class  TrianglesMoved_Removing;  ; class  TrianglesMoved_Adding;  ; class  TrianglesRenumbering;  ; class  QuadsInd",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1topology.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1topology.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1topology.html:181,Modifiability,Variab,Variables,181,"﻿. SOFA API: sofa::core::topology Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::core::topology Namespace Reference . Classes; class  DefaultMeshTopologyLoader;  ; class  BaseMeshTopology;  ; class  GeometryAlgorithms;  ; class  TopologyModifier;  ; class  TopologyContainer;  ; class  BaseTopologyData;  ; class  BaseTopologyObject;  ; class  TopologicalMapping;  This Interface is a new kind of Mapping, called TopologicalMapping, which converts an INPUT TOPOLOGY to an OUTPUT TOPOLOGY (both topologies are of type BaseTopology) More...;  ; class  Topology;  ; struct  TopologyElemID;  Topology identification of a primitive element. More...;  ; struct  PointAncestorElem;  Topology change information related to the ancestor topology element of a point. More...;  ; struct  ElemAncestorElem;  Topology change information related to the ancestor topology element of an edge. More...;  ; struct  TopologyChangeElementInfo;  ; struct  TopologyChangeElementInfo< Topology::Point >;  ; struct  TopologyChangeElementInfo< Topology::Edge >;  ; struct  TopologyChangeElementInfo< Topology::Triangle >;  ; struct  TopologyChangeElementInfo< Topology::Quad >;  ; struct  TopologyChangeElementInfo< Topology::Tetrahedron >;  ; struct  TopologyChangeElementInfo< Topology::Hexahedron >;  ; class  TopologyChange;  Base class to indicate a topology change occurred. More...;  ; class  EndingEvent;  ; class  PointsIndicesSwap;  ; class  PointsAdded;  ; class  PointsRemoved;  ; class  PointsRenumbering;  ; class  PointsMoved;  ; class  EdgesIndicesSwap;  ; class  EdgesAdded;  ; class  EdgesRemoved;  ; class  EdgesMoved_Removing;  ; class  EdgesMoved_Adding;  ; class  EdgesRenumbering;  ; class  TrianglesIndicesSwap;  ; class  TrianglesAdded;  ; class  TrianglesRemoved;  ; class  TrianglesMoved_Removing;  ; class  TrianglesMoved_Adding;  ; class  TrianglesRenumbering;  ; class  QuadsInd",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1topology.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1topology.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1topology.html:7468,Modifiability,Variab,Variables,7468,"ogyElemID &d);  ; SOFA_CORE_API std::istream & operator>> (std::istream &in, TopologyElemID &);  ; SOFA_CORE_API std::ostream & operator<< (std::ostream &out, const PointAncestorElem &d);  ; SOFA_CORE_API std::istream & operator>> (std::istream &in, PointAncestorElem &);  ; template<int NV> ; SOFA_CORE_API std::ostream & operator<< (std::ostream &out, const ElemAncestorElem< NV > &d);  ; template<int NV> ; SOFA_CORE_API std::istream & operator>> (std::istream &in, ElemAncestorElem< NV > &);  ; template SOFA_CORE_API std::ostream & operator<< (std::ostream &out, const ElemAncestorElem< 2 > &d);  ; template SOFA_CORE_API std::ostream & operator<< (std::ostream &out, const ElemAncestorElem< 3 > &d);  ; template SOFA_CORE_API std::ostream & operator<< (std::ostream &out, const ElemAncestorElem< 4 > &d);  ; template SOFA_CORE_API std::ostream & operator<< (std::ostream &out, const ElemAncestorElem< 8 > &d);  . Variables; const unsigned int edgesInTetrahedronArray [6][2] = {{0,1}, {0,2}, {0,3}, {1,2}, {1,3}, {2,3}};  List of pair of vertex indices (edge) in a tetrahedron. More...;  ; const unsigned int trianglesOrientationInTetrahedronArray [4][3] = {{1,2,3}, {0,3,2}, {1,3,0}, {0,2,1}};  List of 3 vertex indices (triangle) in a tetrahedron. More...;  ; const unsigned int edgesInHexahedronArray [12][2] = {{0,1},{0,3},{0,4},{1,2},{1,5},{2,3},{2,6},{3,7},{4,5},{4,7},{5,6},{6,7}};  List of pair of vertex indices (edge) in a hexahedron. More...;  ; const unsigned int quadsOrientationInHexahedronArray [6][4] = {{0,3,2,1}, {4,5,6,7}, {0,1,5,4}, {1,2,6,5}, {2,3,7,6}, {3,0,4,7}};  List of 4 vertex indices (quad) in a hexahedron. More...;  ; const unsigned int verticesInHexahedronArray [2][2][2] = { {{0,4}, {3,7}}, {{1,5}, {2,6}} };  ; class SOFA_CORE_API TopologyChange;  ; class SOFA_CORE_API EndingEvent;  ; class SOFA_CORE_API PointsIndicesSwap;  ; class SOFA_CORE_API PointsAdded;  ; class SOFA_CORE_API PointsRemoved;  ; class SOFA_CORE_API PointsMoved;  ; class SOFA_CORE_API Poi",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1topology.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1topology.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1topology.html:17508,Modifiability,Variab,Variable,17508,"istream & sofa::core::topology::operator>> ; (; std::istream & ; in, . PointAncestorElem & ;  . ). ◆ operator>>() [4/5]. SOFA_CORE_API std::istream & sofa::core::topology::operator>> ; (; std::istream & ; in, . TopologyChange *& ; t . ). Input (empty) stream. . ◆ operator>>() [5/5]. SOFA_CORE_API std::istream & sofa::core::topology::operator>> ; (; std::istream & ; in, . TopologyElemID & ;  . ). ◆ parseElementTypeFromString(). SOFA_CORE_API geometry::ElementType sofa::core::topology::parseElementTypeFromString ; (; const std::string & ; s). ◆ parseElementTypeToString(). SOFA_CORE_API std::string sofa::core::topology::parseElementTypeToString ; (; geometry::ElementType ; t). ◆ parseTopologyChangeTypeFromString(). SOFA_CORE_API TopologyChangeType sofa::core::topology::parseTopologyChangeTypeFromString ; (; const std::string & ; s). ◆ parseTopologyChangeTypeToString(). SOFA_CORE_API std::string sofa::core::topology::parseTopologyChangeTypeToString ; (; TopologyChangeType ; t). Variable Documentation. ◆ EdgesAdded. class SOFA_CORE_API sofa::core::topology::EdgesAdded. ◆ EdgesIndicesSwap. class SOFA_CORE_API sofa::core::topology::EdgesIndicesSwap. ◆ edgesInHexahedronArray. SOFA_CORE_API const unsigned int sofa::core::topology::edgesInHexahedronArray = {{0,1},{0,3},{0,4},{1,2},{1,5},{2,3},{2,6},{3,7},{4,5},{4,7},{5,6},{6,7}}. List of pair of vertex indices (edge) in a hexahedron. . ◆ edgesInTetrahedronArray. SOFA_CORE_API const unsigned int sofa::core::topology::edgesInTetrahedronArray = {{0,1}, {0,2}, {0,3}, {1,2}, {1,3}, {2,3}}. List of pair of vertex indices (edge) in a tetrahedron. . ◆ EdgesMoved_Adding. class SOFA_CORE_API sofa::core::topology::EdgesMoved_Adding. ◆ EdgesMoved_Removing. class SOFA_CORE_API sofa::core::topology::EdgesMoved_Removing. ◆ EdgesRemoved. class SOFA_CORE_API sofa::core::topology::EdgesRemoved. ◆ EdgesRenumbering. class SOFA_CORE_API sofa::core::topology::EdgesRenumbering. ◆ EndingEvent. class SOFA_CORE_API sofa::core::topology::EndingEvent. ◆",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1topology.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1topology.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1visual.html:810,Integrability,interface,interface,810,"﻿. SOFA API: sofa::core::visual Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Enumerations |; Functions |; Variables . sofa::core::visual Namespace Reference . Namespaces;  visualparams;  . Classes; class  DisplayFlags;  Class which describes the display of components in a hierarchical fashion DisplayFlags are conveyed by the VisualParams, and therefore are accessible in a read only fashion inside a Component draw method. A component can tell if it should draw something on the display by looking at the current state of the displayFlags through the VisualParams parameter. DisplayFlags are embeddable inside a Data and can therefore read/write their state from a stream. More...;  ; class  FlagTreeItem;  ; class  Shader;  A basic interface to define a Shader for different system (OpenGL, DirectX, ...). More...;  ; class  ShaderElement;  A basic interface to define an element to be used with a Shader. More...;  ; struct  tristate;  ; class  VisualLoop;  ; class  VisualManager;  ; class  VisualModel;  An interface which all VisualModel inherit. More...;  ; class  VisualParams;  Class gathering parameters used by visual components and by the draw method of each component. Transmitted by visitors. More...;  ; class  VisualState;  . Enumerations; enum  { API_OpenGL = 0; , API_OGRE = 1; , API_OpenSceneGraph = 2; , API_OpenSG = 3; };  The enumeration used to describe potentially supported graphics API. More...;  . Functions; SOFA_CORE_API std::ostream & operator<< (std::ostream &os, const FlagTreeItem &root);  ; SOFA_CORE_API std::istream & operator>> (std::istream &in, FlagTreeItem &root);  ; SOFA_CORE_API std::ostream & operator<< (std::ostream &os, const DisplayFlags &flags);  ; SOFA_CORE_API std::istream & operator>> (std::istream &in, DisplayFlags &flags);  ; DisplayFlags merge_displayFlags (const DisplayFlags &previous, const DisplayFlags &current);  ; DisplayFlags difference_displayFlags (const Dis",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1visual.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1visual.html:927,Integrability,interface,interface,927,"﻿. SOFA API: sofa::core::visual Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Enumerations |; Functions |; Variables . sofa::core::visual Namespace Reference . Namespaces;  visualparams;  . Classes; class  DisplayFlags;  Class which describes the display of components in a hierarchical fashion DisplayFlags are conveyed by the VisualParams, and therefore are accessible in a read only fashion inside a Component draw method. A component can tell if it should draw something on the display by looking at the current state of the displayFlags through the VisualParams parameter. DisplayFlags are embeddable inside a Data and can therefore read/write their state from a stream. More...;  ; class  FlagTreeItem;  ; class  Shader;  A basic interface to define a Shader for different system (OpenGL, DirectX, ...). More...;  ; class  ShaderElement;  A basic interface to define an element to be used with a Shader. More...;  ; struct  tristate;  ; class  VisualLoop;  ; class  VisualManager;  ; class  VisualModel;  An interface which all VisualModel inherit. More...;  ; class  VisualParams;  Class gathering parameters used by visual components and by the draw method of each component. Transmitted by visitors. More...;  ; class  VisualState;  . Enumerations; enum  { API_OpenGL = 0; , API_OGRE = 1; , API_OpenSceneGraph = 2; , API_OpenSG = 3; };  The enumeration used to describe potentially supported graphics API. More...;  . Functions; SOFA_CORE_API std::ostream & operator<< (std::ostream &os, const FlagTreeItem &root);  ; SOFA_CORE_API std::istream & operator>> (std::istream &in, FlagTreeItem &root);  ; SOFA_CORE_API std::ostream & operator<< (std::ostream &os, const DisplayFlags &flags);  ; SOFA_CORE_API std::istream & operator>> (std::istream &in, DisplayFlags &flags);  ; DisplayFlags merge_displayFlags (const DisplayFlags &previous, const DisplayFlags &current);  ; DisplayFlags difference_displayFlags (const Dis",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1visual.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1visual.html:1088,Integrability,interface,interface,1088," API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Enumerations |; Functions |; Variables . sofa::core::visual Namespace Reference . Namespaces;  visualparams;  . Classes; class  DisplayFlags;  Class which describes the display of components in a hierarchical fashion DisplayFlags are conveyed by the VisualParams, and therefore are accessible in a read only fashion inside a Component draw method. A component can tell if it should draw something on the display by looking at the current state of the displayFlags through the VisualParams parameter. DisplayFlags are embeddable inside a Data and can therefore read/write their state from a stream. More...;  ; class  FlagTreeItem;  ; class  Shader;  A basic interface to define a Shader for different system (OpenGL, DirectX, ...). More...;  ; class  ShaderElement;  A basic interface to define an element to be used with a Shader. More...;  ; struct  tristate;  ; class  VisualLoop;  ; class  VisualManager;  ; class  VisualModel;  An interface which all VisualModel inherit. More...;  ; class  VisualParams;  Class gathering parameters used by visual components and by the draw method of each component. Transmitted by visitors. More...;  ; class  VisualState;  . Enumerations; enum  { API_OpenGL = 0; , API_OGRE = 1; , API_OpenSceneGraph = 2; , API_OpenSG = 3; };  The enumeration used to describe potentially supported graphics API. More...;  . Functions; SOFA_CORE_API std::ostream & operator<< (std::ostream &os, const FlagTreeItem &root);  ; SOFA_CORE_API std::istream & operator>> (std::istream &in, FlagTreeItem &root);  ; SOFA_CORE_API std::ostream & operator<< (std::ostream &os, const DisplayFlags &flags);  ; SOFA_CORE_API std::istream & operator>> (std::istream &in, DisplayFlags &flags);  ; DisplayFlags merge_displayFlags (const DisplayFlags &previous, const DisplayFlags &current);  ; DisplayFlags difference_displayFlags (const DisplayFlags &previous, const DisplayFlags &current);  ; trist",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1visual.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1visual.html:181,Modifiability,Variab,Variables,181,"﻿. SOFA API: sofa::core::visual Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Enumerations |; Functions |; Variables . sofa::core::visual Namespace Reference . Namespaces;  visualparams;  . Classes; class  DisplayFlags;  Class which describes the display of components in a hierarchical fashion DisplayFlags are conveyed by the VisualParams, and therefore are accessible in a read only fashion inside a Component draw method. A component can tell if it should draw something on the display by looking at the current state of the displayFlags through the VisualParams parameter. DisplayFlags are embeddable inside a Data and can therefore read/write their state from a stream. More...;  ; class  FlagTreeItem;  ; class  Shader;  A basic interface to define a Shader for different system (OpenGL, DirectX, ...). More...;  ; class  ShaderElement;  A basic interface to define an element to be used with a Shader. More...;  ; struct  tristate;  ; class  VisualLoop;  ; class  VisualManager;  ; class  VisualModel;  An interface which all VisualModel inherit. More...;  ; class  VisualParams;  Class gathering parameters used by visual components and by the draw method of each component. Transmitted by visitors. More...;  ; class  VisualState;  . Enumerations; enum  { API_OpenGL = 0; , API_OGRE = 1; , API_OpenSceneGraph = 2; , API_OpenSG = 3; };  The enumeration used to describe potentially supported graphics API. More...;  . Functions; SOFA_CORE_API std::ostream & operator<< (std::ostream &os, const FlagTreeItem &root);  ; SOFA_CORE_API std::istream & operator>> (std::istream &in, FlagTreeItem &root);  ; SOFA_CORE_API std::ostream & operator<< (std::ostream &os, const DisplayFlags &flags);  ; SOFA_CORE_API std::istream & operator>> (std::istream &in, DisplayFlags &flags);  ; DisplayFlags merge_displayFlags (const DisplayFlags &previous, const DisplayFlags &current);  ; DisplayFlags difference_displayFlags (const Dis",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1visual.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1visual.html:1120,Modifiability,inherit,inherit,1120," API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Enumerations |; Functions |; Variables . sofa::core::visual Namespace Reference . Namespaces;  visualparams;  . Classes; class  DisplayFlags;  Class which describes the display of components in a hierarchical fashion DisplayFlags are conveyed by the VisualParams, and therefore are accessible in a read only fashion inside a Component draw method. A component can tell if it should draw something on the display by looking at the current state of the displayFlags through the VisualParams parameter. DisplayFlags are embeddable inside a Data and can therefore read/write their state from a stream. More...;  ; class  FlagTreeItem;  ; class  Shader;  A basic interface to define a Shader for different system (OpenGL, DirectX, ...). More...;  ; class  ShaderElement;  A basic interface to define an element to be used with a Shader. More...;  ; struct  tristate;  ; class  VisualLoop;  ; class  VisualManager;  ; class  VisualModel;  An interface which all VisualModel inherit. More...;  ; class  VisualParams;  Class gathering parameters used by visual components and by the draw method of each component. Transmitted by visitors. More...;  ; class  VisualState;  . Enumerations; enum  { API_OpenGL = 0; , API_OGRE = 1; , API_OpenSceneGraph = 2; , API_OpenSG = 3; };  The enumeration used to describe potentially supported graphics API. More...;  . Functions; SOFA_CORE_API std::ostream & operator<< (std::ostream &os, const FlagTreeItem &root);  ; SOFA_CORE_API std::istream & operator>> (std::istream &in, FlagTreeItem &root);  ; SOFA_CORE_API std::ostream & operator<< (std::ostream &os, const DisplayFlags &flags);  ; SOFA_CORE_API std::istream & operator>> (std::istream &in, DisplayFlags &flags);  ; DisplayFlags merge_displayFlags (const DisplayFlags &previous, const DisplayFlags &current);  ; DisplayFlags difference_displayFlags (const DisplayFlags &previous, const DisplayFlags &current);  ; trist",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1visual.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1visual.html:2292,Modifiability,Variab,Variables,2292,"tions; enum  { API_OpenGL = 0; , API_OGRE = 1; , API_OpenSceneGraph = 2; , API_OpenSG = 3; };  The enumeration used to describe potentially supported graphics API. More...;  . Functions; SOFA_CORE_API std::ostream & operator<< (std::ostream &os, const FlagTreeItem &root);  ; SOFA_CORE_API std::istream & operator>> (std::istream &in, FlagTreeItem &root);  ; SOFA_CORE_API std::ostream & operator<< (std::ostream &os, const DisplayFlags &flags);  ; SOFA_CORE_API std::istream & operator>> (std::istream &in, DisplayFlags &flags);  ; DisplayFlags merge_displayFlags (const DisplayFlags &previous, const DisplayFlags &current);  ; DisplayFlags difference_displayFlags (const DisplayFlags &previous, const DisplayFlags &current);  ; tristate fusion_tristate (const tristate &lhs, const tristate &rhs);  ; tristate merge_tristate (const tristate &previous, const tristate &current);  ; tristate difference_tristate (const tristate &previous, const tristate &current);  . Variables; template class SOFA_CORE_API VisualState< Vec3Types >;  . Enumeration Type Documentation. ◆ anonymous enum. anonymous enum. The enumeration used to describe potentially supported graphics API. . EnumeratorAPI_OpenGL ; API_OGRE ; API_OpenSceneGraph ; API_OpenSG . Function Documentation. ◆ difference_displayFlags(). SOFA_CORE_API DisplayFlags sofa::core::visual::difference_displayFlags ; (; const DisplayFlags & ; previous, . const DisplayFlags & ; current . ). ◆ difference_tristate(). tristate sofa::core::visual::difference_tristate ; (; const tristate & ; previous, . const tristate & ; current . ). inline . ◆ fusion_tristate(). tristate sofa::core::visual::fusion_tristate ; (; const tristate & ; lhs, . const tristate & ; rhs . ). inline . ◆ merge_displayFlags(). SOFA_CORE_API DisplayFlags sofa::core::visual::merge_displayFlags ; (; const DisplayFlags & ; previous, . const DisplayFlags & ; current . ). ◆ merge_tristate(). tristate sofa::core::visual::merge_tristate ; (; const tristate & ; previous, . const tri",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1visual.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1visual.html:3864,Modifiability,Variab,Variable,3864,"n_tristate (const tristate &lhs, const tristate &rhs);  ; tristate merge_tristate (const tristate &previous, const tristate &current);  ; tristate difference_tristate (const tristate &previous, const tristate &current);  . Variables; template class SOFA_CORE_API VisualState< Vec3Types >;  . Enumeration Type Documentation. ◆ anonymous enum. anonymous enum. The enumeration used to describe potentially supported graphics API. . EnumeratorAPI_OpenGL ; API_OGRE ; API_OpenSceneGraph ; API_OpenSG . Function Documentation. ◆ difference_displayFlags(). SOFA_CORE_API DisplayFlags sofa::core::visual::difference_displayFlags ; (; const DisplayFlags & ; previous, . const DisplayFlags & ; current . ). ◆ difference_tristate(). tristate sofa::core::visual::difference_tristate ; (; const tristate & ; previous, . const tristate & ; current . ). inline . ◆ fusion_tristate(). tristate sofa::core::visual::fusion_tristate ; (; const tristate & ; lhs, . const tristate & ; rhs . ). inline . ◆ merge_displayFlags(). SOFA_CORE_API DisplayFlags sofa::core::visual::merge_displayFlags ; (; const DisplayFlags & ; previous, . const DisplayFlags & ; current . ). ◆ merge_tristate(). tristate sofa::core::visual::merge_tristate ; (; const tristate & ; previous, . const tristate & ; current . ). inline . ◆ operator<<() [1/2]. std::ostream & sofa::core::visual::operator<< ; (; std::ostream & ; os, . const DisplayFlags & ; flags . ). ◆ operator<<() [2/2]. std::ostream & sofa::core::visual::operator<< ; (; std::ostream & ; os, . const FlagTreeItem & ; root . ). ◆ operator>>() [1/2]. std::istream & sofa::core::visual::operator>> ; (; std::istream & ; in, . DisplayFlags & ; flags . ). ◆ operator>>() [2/2]. std::istream & sofa::core::visual::operator>> ; (; std::istream & ; in, . FlagTreeItem & ; root . ). Variable Documentation. ◆ VisualState< Vec3Types >. template class SOFA_CORE_API sofa::core::visual::VisualState< Vec3Types >. sofacorevisual; Generated on Mon Nov 11 2024 03:16:04 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1visual.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1visual.html:434,Security,access,accessible,434,"﻿. SOFA API: sofa::core::visual Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Enumerations |; Functions |; Variables . sofa::core::visual Namespace Reference . Namespaces;  visualparams;  . Classes; class  DisplayFlags;  Class which describes the display of components in a hierarchical fashion DisplayFlags are conveyed by the VisualParams, and therefore are accessible in a read only fashion inside a Component draw method. A component can tell if it should draw something on the display by looking at the current state of the displayFlags through the VisualParams parameter. DisplayFlags are embeddable inside a Data and can therefore read/write their state from a stream. More...;  ; class  FlagTreeItem;  ; class  Shader;  A basic interface to define a Shader for different system (OpenGL, DirectX, ...). More...;  ; class  ShaderElement;  A basic interface to define an element to be used with a Shader. More...;  ; struct  tristate;  ; class  VisualLoop;  ; class  VisualManager;  ; class  VisualModel;  An interface which all VisualModel inherit. More...;  ; class  VisualParams;  Class gathering parameters used by visual components and by the draw method of each component. Transmitted by visitors. More...;  ; class  VisualState;  . Enumerations; enum  { API_OpenGL = 0; , API_OGRE = 1; , API_OpenSceneGraph = 2; , API_OpenSG = 3; };  The enumeration used to describe potentially supported graphics API. More...;  . Functions; SOFA_CORE_API std::ostream & operator<< (std::ostream &os, const FlagTreeItem &root);  ; SOFA_CORE_API std::istream & operator>> (std::istream &in, FlagTreeItem &root);  ; SOFA_CORE_API std::ostream & operator<< (std::ostream &os, const DisplayFlags &flags);  ; SOFA_CORE_API std::istream & operator>> (std::istream &in, DisplayFlags &flags);  ; DisplayFlags merge_displayFlags (const DisplayFlags &previous, const DisplayFlags &current);  ; DisplayFlags difference_displayFlags (const Dis",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1visual.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html:1770,Integrability,wrap,wrap,1770,"e< sofa::defaulttype::RigidDeriv< N, Real > >;  ; class  EigenSparseToMapMapSparseMatrix;  ; struct  EigenSparseToMapMapSparseMatrixVec;  ; class  EigenSparseToMapMapSparseMatrix< sofa::type::Vec< N, Real > >;  ; class  EigenSparseToMapMapSparseMatrix< sofa::defaulttype::RigidDeriv< N, Real > >;  ; class  RigidCoord< 3, real >;  ; class  RigidCoord< 2, real >;  ; class  RigidDeriv< 3, real >;  ; class  RigidDeriv< 2, real >;  ; class  RigidMass< 3, real >;  ; class  RigidMass< 2, real >;  ; class  StdRigidTypes< 3, real >;  ; class  StdRigidTypes< 2, real >;  ; class  SolidTypes;  ; class  TemplateAliases;  Class used to store and resolve template aliases. More...;  ; class  RegisterTemplateAlias;  Helper class used to register a template alias in the TemplateAliases class. More...;  ; struct  DefaultDataTypeInfo;  ; class  DataTypeName;  ; class  HasGetTypeName;  add a compatibility layer to supper the new existing GetTypeName. More...;  ; class  DataTypeInfoDynamicWrapper;  wrap a DataTypeInfo type_traits in an AbstractTypeInfo More...;  ; struct  BoolTypeInfo;  ; struct  FixedArrayTypeInfo;  ; struct  IncompleteTypeInfo;  ; struct  IntegerTypeInfo;  ; struct  ScalarTypeInfo;  ; struct  SetTypeInfo;  ; struct  TextTypeInfo;  ; struct  VectorTypeInfo;  ; class  NameOnlyTypeInfo;  ; class  NoTypeInfo;  ; struct  DataTypeInfo< bool >;  ; struct  BoundingBoxTypeInfo;  ; struct  DataTypeInfo< type::BoundingBox >;  ; struct  DataTypeInfo< sofa::type::fixed_array< T, N > >;  ; struct  DataTypeInfo< char >;  ; struct  DataTypeInfo< unsigned char >;  ; struct  DataTypeInfo< short >;  ; struct  DataTypeInfo< unsigned short >;  ; struct  DataTypeInfo< int >;  ; struct  DataTypeInfo< unsigned int >;  ; struct  DataTypeInfo< long >;  ; struct  DataTypeInfo< unsigned long >;  ; struct  DataTypeInfo< long long >;  ; struct  DataTypeInfo< unsigned long long >;  ; struct  DataTypeInfo< sofa::type::Mat< L, C, real > >;  ; struct  DataTypeInfo< sofa::type::Quat< T > >;  ; class  Data",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1defaulttype.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html:4345,Integrability,wrap,wrap,4345,"dge >;  ; struct  DataTypeInfo< sofa::topology::Triangle >;  ; struct  DataTypeInfo< sofa::topology::Quad >;  ; struct  DataTypeInfo< sofa::topology::Tetrahedron >;  ; struct  DataTypeInfo< sofa::topology::Pyramid >;  ; struct  DataTypeInfo< sofa::topology::Pentahedron >;  ; struct  DataTypeInfo< sofa::topology::Hexahedron >;  ; struct  DataTypeInfo< sofa::type::Vec< N, real > >;  ; struct  DataTypeInfo< sofa::type::VecNoInit< N, real > >;  ; struct  DataTypeInfo< sofa::type::vector< T, Alloc > >;  ; struct  DataTypeInfo< sofa::type::vector< bool, Alloc > >;  ; struct  DataTypeInfo< sofa::type::vector< std::string, Alloc > >;  ; class  TypeInfoId;  Generates unique id for types. More...;  ; class  TypeInfoRegistry;  An unique singleton to register all the type info defined in Sofa. More...;  ; class  TypeInfoRegistryTools;  A dedicated class to hold helper functions for TypeInfoRegistryTools. More...;  . Typedefs; template<class T > ; using VirtualTypeInfo = DataTypeInfoDynamicWrapper< DataTypeInfo< T > >;  We make an alias to wrap around the old name to the new one. More...;  ; typedef StdRigidTypes< 2, double > Rigid2dTypes;  ; typedef RigidMass< 2, double > Rigid2dMass;  ; typedef StdRigidTypes< 2, float > Rigid2fTypes;  ; typedef RigidMass< 2, float > Rigid2fMass;  ; typedef StdRigidTypes< 2, SReal > Rigid2Types;  ; typedef RigidMass< 2, SReal > Rigid2Mass;  un-defined precision type More...;  ; typedef RigidMass< 3, double > Rigid3dMass;  ; typedef RigidMass< 3, float > Rigid3fMass;  ; typedef StdRigidTypes< 3, SReal > Rigid3Types;  un-defined precision type More...;  ; typedef RigidMass< 3, SReal > Rigid3Mass;  un-defined precision type More...;  ; typedef StdVectorTypes< sofa::type::Vec3d, sofa::type::Vec3d, double > Vec3dTypes;  3D DOFs, double precision More...;  ; typedef StdVectorTypes< sofa::type::Vec2d, sofa::type::Vec2d, double > Vec2dTypes;  2D DOFs, double precision More...;  ; typedef StdVectorTypes< sofa::type::Vec1d, sofa::type::Vec1d, double > Ve",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1defaulttype.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html:8457,Integrability,depend,dependency,8457,"ss  TypeInfoType { MISSING; , NAMEONLY; , COMPLETE; };  Encodes the different kind of type infos stored in the TypeInfoRegistry. More...;  . Functions; template<class Vec > ; void resetDataTypeVec (Vec &vec);  Function resetting all the element of a container with its default constructor value type. More...;  ; template<sofa::Size N, typename ValueType > ; void resetVecTypeVec (vector< Vec< N, ValueType > > &vec);  In case of a vector<Vec>, zero can be set directly with memset on all the memory space for a faster reset. More...;  ; template<> ; void resetDataTypeVec< vector< Vec< 6, float > > > (vector< Vec< 6, float > > &vec);  ; template<> ; void resetDataTypeVec< vector< Vec< 6, double > > > (vector< Vec< 6, double > > &vec);  ; template<> ; void resetDataTypeVec< vector< Vec< 3, float > > > (vector< Vec< 3, float > > &vec);  ; template<> ; void resetDataTypeVec< vector< Vec< 3, double > > > (vector< Vec< 3, double > > &vec);  ; template<> ; void resetDataTypeVec< vector< Vec< 2, float > > > (vector< Vec< 2, float > > &vec);  ; template<> ; void resetDataTypeVec< vector< Vec< 2, double > > > (vector< Vec< 2, double > > &vec);  ; template<> ; void resetDataTypeVec< vector< Vec< 1, float > > > (vector< Vec< 1, float > > &vec);  ; template<> ; void resetDataTypeVec< vector< Vec< 1, double > > > (vector< Vec< 1, double > > &vec);  ; SOFA_DEFAULTTYPE_API void init ();  Initialize the SofaDefaultType library, as well as it dependency: SofaHelper. More...;  ; SOFA_DEFAULTTYPE_API bool isInitialized ();  Return true if and only if the SofaDefaultType library has been initialized. More...;  ; SOFA_DEFAULTTYPE_API void cleanup ();  Clean up the resources used by the SofaDefaultType library, as well as its dependency: SofaHelper. More...;  ; SOFA_DEFAULTTYPE_API bool isCleanedUp ();  Return true if and only if the SofaDefaultType library has been cleaned up. More...;  ; template<class MatrixRow , class VecDeriv > ; VecDeriv::Real SparseMatrixVecDerivMult (const MatrixRow &r",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1defaulttype.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html:8741,Integrability,depend,dependency,8741,"r< Vec< 6, double > > > (vector< Vec< 6, double > > &vec);  ; template<> ; void resetDataTypeVec< vector< Vec< 3, float > > > (vector< Vec< 3, float > > &vec);  ; template<> ; void resetDataTypeVec< vector< Vec< 3, double > > > (vector< Vec< 3, double > > &vec);  ; template<> ; void resetDataTypeVec< vector< Vec< 2, float > > > (vector< Vec< 2, float > > &vec);  ; template<> ; void resetDataTypeVec< vector< Vec< 2, double > > > (vector< Vec< 2, double > > &vec);  ; template<> ; void resetDataTypeVec< vector< Vec< 1, float > > > (vector< Vec< 1, float > > &vec);  ; template<> ; void resetDataTypeVec< vector< Vec< 1, double > > > (vector< Vec< 1, double > > &vec);  ; SOFA_DEFAULTTYPE_API void init ();  Initialize the SofaDefaultType library, as well as it dependency: SofaHelper. More...;  ; SOFA_DEFAULTTYPE_API bool isInitialized ();  Return true if and only if the SofaDefaultType library has been initialized. More...;  ; SOFA_DEFAULTTYPE_API void cleanup ();  Clean up the resources used by the SofaDefaultType library, as well as its dependency: SofaHelper. More...;  ; SOFA_DEFAULTTYPE_API bool isCleanedUp ();  Return true if and only if the SofaDefaultType library has been cleaned up. More...;  ; template<class MatrixRow , class VecDeriv > ; VecDeriv::Real SparseMatrixVecDerivMult (const MatrixRow &row, const VecDeriv &vec);  ; template<typename LhsDeriv , typename RhsDeriv , typename Real > ; void addMultTransposeEigen (MapMapSparseMatrix< LhsDeriv > &lhs, const Eigen::SparseMatrix< Real, Eigen::RowMajor > &jacobian, const MapMapSparseMatrix< RhsDeriv > &rhs);  Computes lhs += jacobian^T * rhs. More...;  ; bool writeMatrixTxt (const std::string &filename, sofa::linearalgebra::BaseMatrix *matrix, int precision);  ; bool writeMatrixCsv (const std::string &filename, sofa::linearalgebra::BaseMatrix *matrix, int precision);  ; template<typename real , typename real2 > ; constexpr RigidDeriv< 3, real > operator* (RigidDeriv< 3, real > r, real2 a);  ; template<typename rea",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1defaulttype.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html:16800,Integrability,wrap,wrap,16800,") . ◆ Vec3dTypes. typedef StdVectorTypes< type::Vec3d, type::Vec3d, double > sofa::defaulttype::Vec3dTypes. 3D DOFs, double precision . ◆ Vec3fTypes. typedef StdVectorTypes< type::Vec3f, type::Vec3f, float > sofa::defaulttype::Vec3fTypes. 3f DOFs, single precision . ◆ Vec3Types. typedef StdVectorTypes<type::Vec3, type::Vec3, type::Vec3::value_type> sofa::defaulttype::Vec3Types. 3D DOFs, double precision (default) . ◆ Vec6dTypes. typedef StdVectorTypes< type::Vec6d, type::Vec6d, double > sofa::defaulttype::Vec6dTypes. 6D DOFs, double precision . ◆ Vec6fTypes. typedef StdVectorTypes< type::Vec6f, type::Vec6f, float > sofa::defaulttype::Vec6fTypes. 6f DOFs, single precision . ◆ Vec6Types. typedef StdVectorTypes<type::Vec6, type::Vec6, type::Vec6::value_type> sofa::defaulttype::Vec6Types. 6D DOFs, double precision (default) . ◆ VirtualTypeInfo. template<class T > . using sofa::defaulttype::VirtualTypeInfo = typedef DataTypeInfoDynamicWrapper<DataTypeInfo<T> >. We make an alias to wrap around the old name to the new one. . Enumeration Type Documentation. ◆ TypeInfoType. enum sofa::defaulttype::TypeInfoType. strong . Encodes the different kind of type infos stored in the TypeInfoRegistry. ; In the TyepeInfoRegistry we can store different type of type info depending on how much the developer want to provide precise information (or not) on its data type.; MISSING indicates that there was absolutely no valid information to trust in an AbstractTypeInfo object.; NAMEONLY indicates that only the getName() and getTypeName() function are returning valid information.; COMPLETE indicates that all the function like size/getSize/etc... are implemented. . EnumeratorMISSING ; NAMEONLY ; COMPLETE . Function Documentation. ◆ addMultTransposeEigen(). template<typename LhsDeriv , typename RhsDeriv , typename Real > . void sofa::defaulttype::addMultTransposeEigen ; (; MapMapSparseMatrix< LhsDeriv > & ; lhs, . const Eigen::SparseMatrix< Real, Eigen::RowMajor > & ; jacobian, . const MapMapSpar",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1defaulttype.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html:17079,Integrability,depend,depending,17079,"def StdVectorTypes<type::Vec3, type::Vec3, type::Vec3::value_type> sofa::defaulttype::Vec3Types. 3D DOFs, double precision (default) . ◆ Vec6dTypes. typedef StdVectorTypes< type::Vec6d, type::Vec6d, double > sofa::defaulttype::Vec6dTypes. 6D DOFs, double precision . ◆ Vec6fTypes. typedef StdVectorTypes< type::Vec6f, type::Vec6f, float > sofa::defaulttype::Vec6fTypes. 6f DOFs, single precision . ◆ Vec6Types. typedef StdVectorTypes<type::Vec6, type::Vec6, type::Vec6::value_type> sofa::defaulttype::Vec6Types. 6D DOFs, double precision (default) . ◆ VirtualTypeInfo. template<class T > . using sofa::defaulttype::VirtualTypeInfo = typedef DataTypeInfoDynamicWrapper<DataTypeInfo<T> >. We make an alias to wrap around the old name to the new one. . Enumeration Type Documentation. ◆ TypeInfoType. enum sofa::defaulttype::TypeInfoType. strong . Encodes the different kind of type infos stored in the TypeInfoRegistry. ; In the TyepeInfoRegistry we can store different type of type info depending on how much the developer want to provide precise information (or not) on its data type.; MISSING indicates that there was absolutely no valid information to trust in an AbstractTypeInfo object.; NAMEONLY indicates that only the getName() and getTypeName() function are returning valid information.; COMPLETE indicates that all the function like size/getSize/etc... are implemented. . EnumeratorMISSING ; NAMEONLY ; COMPLETE . Function Documentation. ◆ addMultTransposeEigen(). template<typename LhsDeriv , typename RhsDeriv , typename Real > . void sofa::defaulttype::addMultTransposeEigen ; (; MapMapSparseMatrix< LhsDeriv > & ; lhs, . const Eigen::SparseMatrix< Real, Eigen::RowMajor > & ; jacobian, . const MapMapSparseMatrix< RhsDeriv > & ; rhs . ). Computes lhs += jacobian^T * rhs. . ◆ cleanup(). SOFA_DEFAULTTYPE_API void sofa::defaulttype::cleanup ; (; ). Clean up the resources used by the SofaDefaultType library, as well as its dependency: SofaHelper. . ◆ getAngular() [1/2]. template<sofa::Si",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1defaulttype.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html:18029,Integrability,depend,dependency,18029,"egistry. ; In the TyepeInfoRegistry we can store different type of type info depending on how much the developer want to provide precise information (or not) on its data type.; MISSING indicates that there was absolutely no valid information to trust in an AbstractTypeInfo object.; NAMEONLY indicates that only the getName() and getTypeName() function are returning valid information.; COMPLETE indicates that all the function like size/getSize/etc... are implemented. . EnumeratorMISSING ; NAMEONLY ; COMPLETE . Function Documentation. ◆ addMultTransposeEigen(). template<typename LhsDeriv , typename RhsDeriv , typename Real > . void sofa::defaulttype::addMultTransposeEigen ; (; MapMapSparseMatrix< LhsDeriv > & ; lhs, . const Eigen::SparseMatrix< Real, Eigen::RowMajor > & ; jacobian, . const MapMapSparseMatrix< RhsDeriv > & ; rhs . ). Computes lhs += jacobian^T * rhs. . ◆ cleanup(). SOFA_DEFAULTTYPE_API void sofa::defaulttype::cleanup ; (; ). Clean up the resources used by the SofaDefaultType library, as well as its dependency: SofaHelper. . ◆ getAngular() [1/2]. template<sofa::Size N, typename T > . constexpr const RigidDeriv<N,T>::Rot& sofa::defaulttype::getAngular ; (; const RigidDeriv< N, T > & ; v). constexpr . ◆ getAngular() [2/2]. template<sofa::Size N, typename T > . constexpr RigidDeriv<N,T>::Rot& sofa::defaulttype::getAngular ; (; RigidDeriv< N, T > & ; v). constexpr . ◆ getLinear() [1/2]. template<sofa::Size N, typename T > . constexpr const RigidDeriv<N,T>::Pos& sofa::defaulttype::getLinear ; (; const RigidDeriv< N, T > & ; v). constexpr . ◆ getLinear() [2/2]. template<sofa::Size N, typename T > . constexpr RigidDeriv<N,T>::Pos& sofa::defaulttype::getLinear ; (; RigidDeriv< N, T > & ; v). constexpr . ◆ getTemplateAliasesMap(). TemplateAliasesMap& sofa::defaulttype::getTemplateAliasesMap ; (; ). ◆ getVCenter() [1/3]. template<sofa::Size N, typename T > . constexpr const RigidDeriv<N,T>::Pos& sofa::defaulttype::getVCenter ; (; const RigidDeriv< N, T > & ; v). co",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1defaulttype.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html:19921,Integrability,depend,dependency,19921,"const RigidDeriv<N,T>::Pos& sofa::defaulttype::getVCenter ; (; const RigidDeriv< N, T > & ; v). constexpr . ◆ getVCenter() [2/3]. template<typename T > . const Vec<3, T> sofa::defaulttype::getVCenter ; (; const Vec< 6, T > & ; v). ◆ getVCenter() [3/3]. template<sofa::Size N, typename T > . constexpr RigidDeriv<N,T>::Pos& sofa::defaulttype::getVCenter ; (; RigidDeriv< N, T > & ; v). constexpr . ◆ getVOrientation() [1/3]. template<sofa::Size N, typename T > . constexpr const RigidDeriv<N,T>::Rot& sofa::defaulttype::getVOrientation ; (; const RigidDeriv< N, T > & ; v). constexpr . ◆ getVOrientation() [2/3]. template<typename T > . const Vec<3, T> sofa::defaulttype::getVOrientation ; (; const Vec< 6, T > & ; v). ◆ getVOrientation() [3/3]. template<sofa::Size N, typename T > . constexpr RigidDeriv<N,T>::Rot& sofa::defaulttype::getVOrientation ; (; RigidDeriv< N, T > & ; v). constexpr . ◆ init(). SOFA_DEFAULTTYPE_API void sofa::defaulttype::init ; (; ). Initialize the SofaDefaultType library, as well as it dependency: SofaHelper. . ◆ isCleanedUp(). SOFA_DEFAULTTYPE_API bool sofa::defaulttype::isCleanedUp ; (; ). Return true if and only if the SofaDefaultType library has been cleaned up. . ◆ isDouble(). template<class T > . constexpr bool sofa::defaulttype::isDouble ; (; ). constexpr . ◆ isDouble< double >(). template<> . constexpr bool sofa::defaulttype::isDouble< double > ; (; ). constexpr . ◆ isInitialized(). SOFA_DEFAULTTYPE_API bool sofa::defaulttype::isInitialized ; (; ). Return true if and only if the SofaDefaultType library has been initialized. . ◆ isSRealDouble(). constexpr bool sofa::defaulttype::isSRealDouble ; (; ). constexpr . ◆ isSRealFloat(). constexpr bool sofa::defaulttype::isSRealFloat ; (; ). constexpr . ◆ operator*() [1/5]. template<typename real > . constexpr RigidDeriv<2,real> sofa::defaulttype::operator* ; (; const RigidDeriv< 2, real > & ; d, . const RigidMass< 2, real > & ; m . ). constexpr . ◆ operator*() [2/5]. template<typename real > . constex",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1defaulttype.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html:178,Modifiability,Variab,Variables,178,"﻿. SOFA API: sofa::defaulttype Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::defaulttype Namespace Reference . Classes; struct  DataTypeInfo;  ; struct  DataTypeInfo< sofa::core::objectmodel::Tag >;  ; struct  DataTypeInfo< sofa::core::objectmodel::TagSet >;  ; class  AbstractTypeInfo;  ; class  RigidDeriv;  ; class  RigidCoord;  ; class  RigidMass;  ; class  StdRigidTypes;  ; class  StdVectorTypes;  ; struct  CleanupCheck;  ; class  MapMapSparseMatrix;  ; class  MapMapSparseMatrixToEigenSparse;  ; class  MapMapSparseMatrixToEigenSparseVec;  ; class  MapMapSparseMatrixToEigenSparse< sofa::type::Vec< N, Real > >;  ; class  MapMapSparseMatrixToEigenSparse< sofa::defaulttype::RigidDeriv< N, Real > >;  ; class  EigenSparseToMapMapSparseMatrix;  ; struct  EigenSparseToMapMapSparseMatrixVec;  ; class  EigenSparseToMapMapSparseMatrix< sofa::type::Vec< N, Real > >;  ; class  EigenSparseToMapMapSparseMatrix< sofa::defaulttype::RigidDeriv< N, Real > >;  ; class  RigidCoord< 3, real >;  ; class  RigidCoord< 2, real >;  ; class  RigidDeriv< 3, real >;  ; class  RigidDeriv< 2, real >;  ; class  RigidMass< 3, real >;  ; class  RigidMass< 2, real >;  ; class  StdRigidTypes< 3, real >;  ; class  StdRigidTypes< 2, real >;  ; class  SolidTypes;  ; class  TemplateAliases;  Class used to store and resolve template aliases. More...;  ; class  RegisterTemplateAlias;  Helper class used to register a template alias in the TemplateAliases class. More...;  ; struct  DefaultDataTypeInfo;  ; class  DataTypeName;  ; class  HasGetTypeName;  add a compatibility layer to supper the new existing GetTypeName. More...;  ; class  DataTypeInfoDynamicWrapper;  wrap a DataTypeInfo type_traits in an AbstractTypeInfo More...;  ; struct  BoolTypeInfo;  ; struct  FixedArrayTypeInfo;  ; struct  IncompleteTypeInfo;  ; struct  IntegerTypeInfo;  ; struct  ScalarTypeInfo;  ; struct  SetTypeInfo;  ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1defaulttype.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html:13067,Modifiability,Variab,Variables,13067," > ; constexpr RigidDeriv< 3, real > operator/ (const RigidDeriv< 3, real > &d, const RigidMass< 3, real > &m);  ; template<typename real > ; constexpr RigidDeriv< 2, real > operator* (const RigidDeriv< 2, real > &d, const RigidMass< 2, real > &m);  ; template<typename real > ; constexpr RigidDeriv< 2, real > operator/ (const RigidDeriv< 2, real > &d, const RigidMass< 2, real > &m);  ; template<typename T > ; const Vec< 3, T > getVCenter (const Vec< 6, T > &v);  ; template<typename T > ; const Vec< 3, T > getVOrientation (const Vec< 6, T > &v);  ; TemplateAliasesMap & getTemplateAliasesMap ();  ; template<class T > ; constexpr bool isDouble ();  ; template<> ; constexpr bool isDouble< double > ();  ; constexpr bool isSRealDouble ();  ; constexpr bool isSRealFloat ();  ; Helpers; Helper Functions to more easily create tests and check the results. . Variables; std::unordered_map< std::string, MatrixExportFunction > matrixExporterMap;  ; sofa::helper::OptionsGroup matrixExporterOptionsGroup {""txt"", ""csv""};  ; template class SOFA_DEFAULTTYPE_API SolidTypes< double >;  ; template class SOFA_DEFAULTTYPE_API SolidTypes< float >;  . Typedef Documentation. ◆ MatrixExportFunction. using sofa::defaulttype::MatrixExportFunction = typedef std::function<bool(const std::string&, sofa::linearalgebra::BaseMatrix*, int precision)>. ◆ Rigid2dMass. typedef RigidMass< 2, double > sofa::defaulttype::Rigid2dMass. ◆ Rigid2dTypes. typedef StdRigidTypes< 2, double > sofa::defaulttype::Rigid2dTypes. ◆ Rigid2fMass. typedef RigidMass< 2, float > sofa::defaulttype::Rigid2fMass. ◆ Rigid2fTypes. typedef StdRigidTypes< 2, float > sofa::defaulttype::Rigid2fTypes. ◆ Rigid2Mass. typedef RigidMass< 2, SReal > sofa::defaulttype::Rigid2Mass. un-defined precision type . ◆ Rigid2Types. typedef StdRigidTypes< 2, SReal > sofa::defaulttype::Rigid2Types. ◆ Rigid3dMass. typedef RigidMass< 3, double > sofa::defaulttype::Rigid3dMass. ◆ Rigid3dTypes. typedef StdRigidTypes<3,double> sofa::defaulttype::Rigid3dTypes. ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1defaulttype.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html:26072,Modifiability,Variab,Variable,26072," system as the velocity of the origin. . ◆ velocityAtRotatedPoint() [3/4]. template<typename T , typename R > . constexpr RigidDeriv<3,R> sofa::defaulttype::velocityAtRotatedPoint ; (; const RigidDeriv< 3, R > & ; v, . const RigidCoord< 3, T > & ; p . ). constexpr . ◆ velocityAtRotatedPoint() [4/4]. template<typename T , typename R > . constexpr type::Vec<3,T> sofa::defaulttype::velocityAtRotatedPoint ; (; const RigidDeriv< 3, R > & ; v, . const type::Vec< 3, T > & ; p . ). constexpr . Velocity at point p, where p is the offset from the origin of the frame, given in the same coordinate system as the velocity of the origin. . ◆ writeMatrixCsv(). bool SOFA_DEFAULTTYPE_API sofa::defaulttype::writeMatrixCsv ; (; const std::string & ; filename, . sofa::linearalgebra::BaseMatrix * ; matrix, . int ; precision . ). ◆ writeMatrixTxt(). bool SOFA_DEFAULTTYPE_API sofa::defaulttype::writeMatrixTxt ; (; const std::string & ; filename, . sofa::linearalgebra::BaseMatrix * ; matrix, . int ; precision . ). Variable Documentation. ◆ matrixExporterMap. SOFA_DEFAULTTYPE_API std::unordered_map< std::string, MatrixExportFunction > sofa::defaulttype::matrixExporterMap. Initial value:{; {""txt"", writeMatrixTxt},; {""csv"", writeMatrixCsv},; }; sofa::defaulttype::writeMatrixCsvbool writeMatrixCsv(const std::string &filename, sofa::linearalgebra::BaseMatrix *matrix, int precision)Definition: MatrixExporter.cpp:51; sofa::defaulttype::writeMatrixTxtbool writeMatrixTxt(const std::string &filename, sofa::linearalgebra::BaseMatrix *matrix, int precision)Definition: MatrixExporter.cpp:38. ◆ matrixExporterOptionsGroup. SOFA_DEFAULTTYPE_API sofa::helper::OptionsGroup sofa::defaulttype::matrixExporterOptionsGroup {""txt"", ""csv""}. ◆ SolidTypes< double >. template class SOFA_DEFAULTTYPE_API sofa::defaulttype::SolidTypes< double >. ◆ SolidTypes< float >. template class SOFA_DEFAULTTYPE_API sofa::defaulttype::SolidTypes< float >. sofadefaulttype; Generated on Mon Nov 11 2024 03:17:11 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1defaulttype.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html:13036,Testability,test,tests,13036," operator/ (RigidDeriv< 2, real > r, real2 a);  ; template<typename R , typename T > ; constexpr type::Vec< 2, R > velocityAtRotatedPoint (const RigidDeriv< 2, T > &v, const type::Vec< 2, R > &p);  Velocity at point p, where p is the offset from the origin of the frame, given in the same coordinate system as the velocity of the origin. More...;  ; template<typename R , typename T > ; constexpr RigidDeriv< 2, T > velocityAtRotatedPoint (const RigidDeriv< 2, T > &v, const RigidCoord< 2, R > &p);  ; template<typename real > ; constexpr RigidDeriv< 3, real > operator* (const RigidDeriv< 3, real > &d, const RigidMass< 3, real > &m);  ; template<typename real > ; constexpr RigidDeriv< 3, real > operator* (const RigidMass< 3, real > &m, const RigidDeriv< 3, real > &d);  ; template<typename real > ; constexpr RigidDeriv< 3, real > operator/ (const RigidDeriv< 3, real > &d, const RigidMass< 3, real > &m);  ; template<typename real > ; constexpr RigidDeriv< 2, real > operator* (const RigidDeriv< 2, real > &d, const RigidMass< 2, real > &m);  ; template<typename real > ; constexpr RigidDeriv< 2, real > operator/ (const RigidDeriv< 2, real > &d, const RigidMass< 2, real > &m);  ; template<typename T > ; const Vec< 3, T > getVCenter (const Vec< 6, T > &v);  ; template<typename T > ; const Vec< 3, T > getVOrientation (const Vec< 6, T > &v);  ; TemplateAliasesMap & getTemplateAliasesMap ();  ; template<class T > ; constexpr bool isDouble ();  ; template<> ; constexpr bool isDouble< double > ();  ; constexpr bool isSRealDouble ();  ; constexpr bool isSRealFloat ();  ; Helpers; Helper Functions to more easily create tests and check the results. . Variables; std::unordered_map< std::string, MatrixExportFunction > matrixExporterMap;  ; sofa::helper::OptionsGroup matrixExporterOptionsGroup {""txt"", ""csv""};  ; template class SOFA_DEFAULTTYPE_API SolidTypes< double >;  ; template class SOFA_DEFAULTTYPE_API SolidTypes< float >;  . Typedef Documentation. ◆ MatrixExportFunction. using sofa::",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1defaulttype.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1geometry.html:177,Modifiability,Variab,Variables,177,"﻿. SOFA API: sofa::geometry Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Enumerations |; Functions |; Variables . sofa::geometry Namespace Reference . Namespaces;  proximity;  . Classes; struct  ElementInfo< sofa::core::topology::Topology::Point >;  ; struct  Edge;  ; struct  ElementInfo;  ; struct  Hexahedron;  ; struct  CleanupCheck;  ; struct  Pentahedron;  ; struct  Point;  ; struct  Pyramid;  ; struct  Quad;  ; struct  Tetrahedron;  ; struct  Triangle;  . Enumerations; enum class  ElementType : sofa::Size { ;   UNKNOWN; , POINT; , EDGE; , TRIANGLE; , ;   QUAD; , TETRAHEDRON; , HEXAHEDRON; , PENTAHEDRON; , ;   PYRAMID; , SIZE. };  The enumeration used to give unique identifiers to Topological objects. More...;  . Functions; constexpr const char * elementTypeToString (ElementType type);  ; SOFA_GEOMETRY_API void init ();  Initialize the Sofa.Geometry library. More...;  ; SOFA_GEOMETRY_API bool isInitialized ();  Return true if and only if the Sofa.Geometry library has been initialized. More...;  ; SOFA_GEOMETRY_API void cleanup ();  Clean up the resources used by the Sofa.Geometry library. More...;  ; SOFA_GEOMETRY_API bool isCleanedUp ();  Return true if and only if the Sofa.Geometry library has been cleaned up. More...;  ; SOFA_GEOMETRY_API void printUninitializedLibraryWarning (const std::string &library, const std::string &initFunction);  Print a warning about a library not being initialized (meant for internal use). More...;  ; SOFA_GEOMETRY_API void printLibraryNotCleanedUpWarning (const std::string &library, const std::string &cleanupFunction);  Print a warning about a library not being cleaned up (meant for internal use). More...;  . Variables; template struct SOFA_GEOMETRY_API ElementInfo< Edge >;  ; template struct SOFA_GEOMETRY_API ElementInfo< Hexahedron >;  ; template struct SOFA_GEOMETRY_API ElementInfo< Pentahedron >;  ; template struct SOFA_GEOMETRY_API ElementInfo< Point >;",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1geometry.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1geometry.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1geometry.html:1748,Modifiability,Variab,Variables,1748,"brary has been initialized. More...;  ; SOFA_GEOMETRY_API void cleanup ();  Clean up the resources used by the Sofa.Geometry library. More...;  ; SOFA_GEOMETRY_API bool isCleanedUp ();  Return true if and only if the Sofa.Geometry library has been cleaned up. More...;  ; SOFA_GEOMETRY_API void printUninitializedLibraryWarning (const std::string &library, const std::string &initFunction);  Print a warning about a library not being initialized (meant for internal use). More...;  ; SOFA_GEOMETRY_API void printLibraryNotCleanedUpWarning (const std::string &library, const std::string &cleanupFunction);  Print a warning about a library not being cleaned up (meant for internal use). More...;  . Variables; template struct SOFA_GEOMETRY_API ElementInfo< Edge >;  ; template struct SOFA_GEOMETRY_API ElementInfo< Hexahedron >;  ; template struct SOFA_GEOMETRY_API ElementInfo< Pentahedron >;  ; template struct SOFA_GEOMETRY_API ElementInfo< Point >;  ; template struct SOFA_GEOMETRY_API ElementInfo< Pyramid >;  ; template struct SOFA_GEOMETRY_API ElementInfo< Quad >;  ; template struct SOFA_GEOMETRY_API ElementInfo< Tetrahedron >;  ; template struct SOFA_GEOMETRY_API ElementInfo< Triangle >;  ; constexpr sofa::Size NumberOfElementType = static_cast<sofa::Size>(sofa::geometry::ElementType::SIZE);  . Enumeration Type Documentation. ◆ ElementType. enum sofa::geometry::ElementType : sofa::Size. strong . The enumeration used to give unique identifiers to Topological objects. . EnumeratorUNKNOWN ; POINT ; EDGE ; TRIANGLE ; QUAD ; TETRAHEDRON ; HEXAHEDRON ; PENTAHEDRON ; PYRAMID ; SIZE . Function Documentation. ◆ cleanup(). SOFA_GEOMETRY_API void sofa::geometry::cleanup ; (; ). Clean up the resources used by the Sofa.Geometry library. . ◆ elementTypeToString(). constexpr const char* sofa::geometry::elementTypeToString ; (; ElementType ; type). constexpr . ◆ init(). SOFA_GEOMETRY_API void sofa::geometry::init ; (; ). Initialize the Sofa.Geometry library. . ◆ isCleanedUp(). SOFA_GEOMETRY_A",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1geometry.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1geometry.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1geometry.html:3869,Modifiability,Variab,Variable,3869,"; (; ElementType ; type). constexpr . ◆ init(). SOFA_GEOMETRY_API void sofa::geometry::init ; (; ). Initialize the Sofa.Geometry library. . ◆ isCleanedUp(). SOFA_GEOMETRY_API bool sofa::geometry::isCleanedUp ; (; ). Return true if and only if the Sofa.Geometry library has been cleaned up. . ◆ isInitialized(). SOFA_GEOMETRY_API bool sofa::geometry::isInitialized ; (; ). Return true if and only if the Sofa.Geometry library has been initialized. . ◆ printLibraryNotCleanedUpWarning(). SOFA_GEOMETRY_API void sofa::geometry::printLibraryNotCleanedUpWarning ; (; const std::string & ; library, . const std::string & ; cleanupFunction . ). Print a warning about a library not being cleaned up (meant for internal use). . ◆ printUninitializedLibraryWarning(). SOFA_GEOMETRY_API void sofa::geometry::printUninitializedLibraryWarning ; (; const std::string & ; library, . const std::string & ; initFunction . ). Print a warning about a library not being initialized (meant for internal use). . Variable Documentation. ◆ ElementInfo< Edge >. template struct SOFA_GEOMETRY_API sofa::geometry::ElementInfo< Edge >. ◆ ElementInfo< Hexahedron >. template struct SOFA_GEOMETRY_API sofa::geometry::ElementInfo< Hexahedron >. ◆ ElementInfo< Pentahedron >. template struct SOFA_GEOMETRY_API sofa::geometry::ElementInfo< Pentahedron >. ◆ ElementInfo< Point >. template struct SOFA_GEOMETRY_API sofa::geometry::ElementInfo< Point >. ◆ ElementInfo< Pyramid >. template struct SOFA_GEOMETRY_API sofa::geometry::ElementInfo< Pyramid >. ◆ ElementInfo< Quad >. template struct SOFA_GEOMETRY_API sofa::geometry::ElementInfo< Quad >. ◆ ElementInfo< Tetrahedron >. template struct SOFA_GEOMETRY_API sofa::geometry::ElementInfo< Tetrahedron >. ◆ ElementInfo< Triangle >. template struct SOFA_GEOMETRY_API sofa::geometry::ElementInfo< Triangle >. ◆ NumberOfElementType. constexpr sofa::Size sofa::geometry::NumberOfElementType = static_cast<sofa::Size>(sofa::geometry::ElementType::SIZE). constexpr . sofageometry; Generated o",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1geometry.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1geometry.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl.html:2238,Integrability,depend,dependencies,2238,"at &radx, const float &rady, const float &radz, const int subd1=8, const int subd2=8);  ; template<typename V > ; void drawWireSphere (const V &center, const float &rad, const int subd1=8, const int subd2=8);  ; template<typename V > ; void drawTorus (const float *coordinateMatrix, const float &bodyRad=0.0, const float &rad=1.0, const int precision=20, const V &color=sofa::type::fixed_array< int, 3 >(255, 215, 180));  ; template<typename V > ; void drawEmptyParallelepiped (const V &vert1, const V &vert2, const V &vert3, const V &vert4, const V &vecFromFaceToOppositeFace, const float &rad=1.0, const int precision=8, const V &color=sofa::type::RGBAColor::red());  ; SOFA_GL_API void glfntInit (void);  ; SOFA_GL_API void glfntWriteBitmap (float x, float y, char *s);  ; SOFA_GL_API void glfntClose (void);  ; std::string CombineHeaders (std::string header, const std::string &shaderStage, std::string source);  ; SOFA_GL_API void init ();  Initialize the Sofa.GL library, as well as its dependencies: SofaDefaultType, SofaHelper. More...;  ; SOFA_GL_API bool isInitialized ();  Return true if and only if the Sofa.GL library has been initialized. More...;  ; SOFA_GL_API void cleanup ();  Clean up the resources used by the Sofa.GL library, as well as its dependencies: SofaDefaultType, SofaHelper. More...;  ; SOFA_GL_API bool isCleanedUp ();  Return true if and only if the Sofa.GL library has been cleaned up. More...;  ; template<int N> ; void glVertexNv (const float *);  ; template<> ; void glVertexNv< 3 > (const float *p);  ; template<> ; void glVertexNv< 2 > (const float *p);  ; template<> ; void glVertexNv< 1 > (const float *p);  ; template<int N> ; void glVertexNv (const double *p);  ; template<> ; void glVertexNv< 2 > (const double *p);  ; template<> ; void glVertexNv< 1 > (const double *p);  ; template<class Coord > ; void glVertexT (const Coord &c);  ; template<> ; void glVertexT< double > (const double &c);  ; template<> ; void glVertexT< float > (const float &c);  ; temp",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl.html:2507,Integrability,depend,dependencies,2507,"dinateMatrix, const float &bodyRad=0.0, const float &rad=1.0, const int precision=20, const V &color=sofa::type::fixed_array< int, 3 >(255, 215, 180));  ; template<typename V > ; void drawEmptyParallelepiped (const V &vert1, const V &vert2, const V &vert3, const V &vert4, const V &vecFromFaceToOppositeFace, const float &rad=1.0, const int precision=8, const V &color=sofa::type::RGBAColor::red());  ; SOFA_GL_API void glfntInit (void);  ; SOFA_GL_API void glfntWriteBitmap (float x, float y, char *s);  ; SOFA_GL_API void glfntClose (void);  ; std::string CombineHeaders (std::string header, const std::string &shaderStage, std::string source);  ; SOFA_GL_API void init ();  Initialize the Sofa.GL library, as well as its dependencies: SofaDefaultType, SofaHelper. More...;  ; SOFA_GL_API bool isInitialized ();  Return true if and only if the Sofa.GL library has been initialized. More...;  ; SOFA_GL_API void cleanup ();  Clean up the resources used by the Sofa.GL library, as well as its dependencies: SofaDefaultType, SofaHelper. More...;  ; SOFA_GL_API bool isCleanedUp ();  Return true if and only if the Sofa.GL library has been cleaned up. More...;  ; template<int N> ; void glVertexNv (const float *);  ; template<> ; void glVertexNv< 3 > (const float *p);  ; template<> ; void glVertexNv< 2 > (const float *p);  ; template<> ; void glVertexNv< 1 > (const float *p);  ; template<int N> ; void glVertexNv (const double *p);  ; template<> ; void glVertexNv< 2 > (const double *p);  ; template<> ; void glVertexNv< 1 > (const double *p);  ; template<class Coord > ; void glVertexT (const Coord &c);  ; template<> ; void glVertexT< double > (const double &c);  ; template<> ; void glVertexT< float > (const float &c);  ; template<int N> ; void glTexCoordNv (const float *);  ; template<> ; void glTexCoordNv< 3 > (const float *p);  ; template<> ; void glTexCoordNv< 2 > (const float *p);  ; template<> ; void glTexCoordNv< 1 > (const float *p);  ; template<int N> ; void glTexCoordNv (const dou",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl.html:5672,Integrability,depend,dependencies,5672,"; void glTranslateNv (const double *p);  ; template<> ; void glTranslateNv< 2 > (const double *p);  ; template<> ; void glTranslateNv< 1 > (const double *p);  ; template<class Coord > ; void glTranslateT (const Coord &c);  ; template<> ; void glTranslateT< double > (const double &c);  ; template<> ; void glTranslateT< float > (const float &c);  ; void glScale (const float &c1, const float &c2, const float &c3);  ; void glScale (const double &c1, const double &c2, const double &c3);  ; void glRotate (const GLfloat &value, const float &c1, const float &c2, const float &c3);  ; void glRotate (const GLdouble &value, const double &c1, const double &c2, const double &c3);  ; void glMultMatrix (const float *p);  ; void glMultMatrix (const double *p);  . Variables; bool GLSLIsSupported = false;  . Detailed Description; Forward declaration. ; Function Documentation. ◆ cleanup(). SOFA_GL_API void sofa::gl::cleanup ; (; ). Clean up the resources used by the Sofa.GL library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ CombineHeaders(). std::string sofa::gl::CombineHeaders ; (; std::string ; header, . const std::string & ; shaderStage, . std::string ; source . ). ◆ drawArrow(). template<typename V > . void sofa::gl::drawArrow ; (; const V & ; p1, . const V & ; p2, . const float & ; rad, . const int ; subd = 8 . ). ◆ drawCone(). template<typename V > . void sofa::gl::drawCone ; (; const V & ; p1, . const V & ; p2, . const float & ; radius1, . const float & ; radius2, . const int ; subd = 8 . ). ◆ drawCylinder(). template<typename V > . void sofa::gl::drawCylinder ; (; const V & ; p1, . const V & ; p2, . const float & ; rad, . const int ; subd = 8 . ). ◆ drawEllipsoid(). template<typename V > . void sofa::gl::drawEllipsoid ; (; const V & ; center, . const float & ; radx, . const float & ; rady, . const float & ; radz, . const int ; subd1 = 8, . const int ; subd2 = 8 . ). ◆ drawEmptyParallelepiped(). template<typename V > . void sofa::gl::drawEmptyParallelepiped ; ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl.html:12907,Integrability,depend,dependencies,12907," void sofa::gl::glTranslateNv< 2 > ; (; const float * ; p). inline . ◆ glTranslateT(). template<class Coord > . void sofa::gl::glTranslateT ; (; const Coord & ; c). inline . ◆ glTranslateT< double >(). template<> . void sofa::gl::glTranslateT< double > ; (; const double & ; c). inline . ◆ glTranslateT< float >(). template<> . void sofa::gl::glTranslateT< float > ; (; const float & ; c). inline . ◆ glVertexNv() [1/2]. template<int N> . void sofa::gl::glVertexNv ; (; const double * ; p). inline . ◆ glVertexNv() [2/2]. template<int N> . void sofa::gl::glVertexNv ; (; const float * ; ). inline . ◆ glVertexNv< 1 >() [1/2]. template<> . void sofa::gl::glVertexNv< 1 > ; (; const double * ; p). inline . ◆ glVertexNv< 1 >() [2/2]. template<> . void sofa::gl::glVertexNv< 1 > ; (; const float * ; p). inline . ◆ glVertexNv< 2 >() [1/2]. template<> . void sofa::gl::glVertexNv< 2 > ; (; const double * ; p). inline . ◆ glVertexNv< 2 >() [2/2]. template<> . void sofa::gl::glVertexNv< 2 > ; (; const float * ; p). inline . ◆ glVertexNv< 3 >(). template<> . void sofa::gl::glVertexNv< 3 > ; (; const float * ; p). inline . ◆ glVertexT(). template<class Coord > . void sofa::gl::glVertexT ; (; const Coord & ; c). inline . ◆ glVertexT< double >(). template<> . void sofa::gl::glVertexT< double > ; (; const double & ; c). inline . ◆ glVertexT< float >(). template<> . void sofa::gl::glVertexT< float > ; (; const float & ; c). inline . ◆ init(). SOFA_GL_API void sofa::gl::init ; (; ). Initialize the Sofa.GL library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ isCleanedUp(). SOFA_GL_API bool sofa::gl::isCleanedUp ; (; ). Return true if and only if the Sofa.GL library has been cleaned up. . ◆ isInitialized(). SOFA_GL_API bool sofa::gl::isInitialized ; (; ). Return true if and only if the Sofa.GL library has been initialized. . Variable Documentation. ◆ GLSLIsSupported. bool sofa::gl::GLSLIsSupported = false. sofagl; Generated on Mon Nov 11 2024 03:18:55 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl.html:155,Modifiability,Variab,Variables,155,"﻿. SOFA API: sofa::gl Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Functions |; Variables . sofa::gl Namespace Reference . Forward declaration. ; More... Namespaces;  component;  . Classes; class  Axis;  ; class  BasicShapesGL;  ; class  BasicShapesGL_Sphere;  ; class  BasicShapesGL_FakeSphere;  ; class  Capture;  ; class  Cylinder;  ; class  DrawToolGL;  ; struct  fboParameters;  ; class  FrameBufferObject;  ; class  GLSLFileListener;  ; class  GLSLShader;  ; class  GlText;  ; struct  CleanupCheck;  ; struct  Enable;  ; struct  Disable;  ; class  Texture;  ; class  TransformationGL;  ; class  VideoRecorderFFMPEG;  . Functions; template<typename V > ; void drawCone (const V &p1, const V &p2, const float &radius1, const float &radius2, const int subd=8);  ; template<typename V > ; void drawCylinder (const V &p1, const V &p2, const float &rad, const int subd=8);  ; template<typename V > ; void drawArrow (const V &p1, const V &p2, const float &rad, const int subd=8);  ; template<typename V > ; void drawSphere (const V &center, const float &rad, const int subd1=8, const int subd2=8);  ; template<typename V > ; void drawEllipsoid (const V &center, const float &radx, const float &rady, const float &radz, const int subd1=8, const int subd2=8);  ; template<typename V > ; void drawWireSphere (const V &center, const float &rad, const int subd1=8, const int subd2=8);  ; template<typename V > ; void drawTorus (const float *coordinateMatrix, const float &bodyRad=0.0, const float &rad=1.0, const int precision=20, const V &color=sofa::type::fixed_array< int, 3 >(255, 215, 180));  ; template<typename V > ; void drawEmptyParallelepiped (const V &vert1, const V &vert2, const V &vert3, const V &vert4, const V &vecFromFaceToOppositeFace, const float &rad=1.0, const int precision=8, const V &color=sofa::type::RGBAColor::red());  ; SOFA_GL_API void glfntInit (void);  ; SOFA_GL_API void glfntWriteBitmap (float x, fl",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl.html:5436,Modifiability,Variab,Variables,5436,"uble &c2, const double &c3);  ; template<int N> ; void glTranslateNv (const float *p);  ; template<> ; void glTranslateNv< 2 > (const float *p);  ; template<> ; void glTranslateNv< 1 > (const float *p);  ; template<int N> ; void glTranslateNv (const double *p);  ; template<> ; void glTranslateNv< 2 > (const double *p);  ; template<> ; void glTranslateNv< 1 > (const double *p);  ; template<class Coord > ; void glTranslateT (const Coord &c);  ; template<> ; void glTranslateT< double > (const double &c);  ; template<> ; void glTranslateT< float > (const float &c);  ; void glScale (const float &c1, const float &c2, const float &c3);  ; void glScale (const double &c1, const double &c2, const double &c3);  ; void glRotate (const GLfloat &value, const float &c1, const float &c2, const float &c3);  ; void glRotate (const GLdouble &value, const double &c1, const double &c2, const double &c3);  ; void glMultMatrix (const float *p);  ; void glMultMatrix (const double *p);  . Variables; bool GLSLIsSupported = false;  . Detailed Description; Forward declaration. ; Function Documentation. ◆ cleanup(). SOFA_GL_API void sofa::gl::cleanup ; (; ). Clean up the resources used by the Sofa.GL library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ CombineHeaders(). std::string sofa::gl::CombineHeaders ; (; std::string ; header, . const std::string & ; shaderStage, . std::string ; source . ). ◆ drawArrow(). template<typename V > . void sofa::gl::drawArrow ; (; const V & ; p1, . const V & ; p2, . const float & ; rad, . const int ; subd = 8 . ). ◆ drawCone(). template<typename V > . void sofa::gl::drawCone ; (; const V & ; p1, . const V & ; p2, . const float & ; radius1, . const float & ; radius2, . const int ; subd = 8 . ). ◆ drawCylinder(). template<typename V > . void sofa::gl::drawCylinder ; (; const V & ; p1, . const V & ; p2, . const float & ; rad, . const int ; subd = 8 . ). ◆ drawEllipsoid(). template<typename V > . void sofa::gl::drawEllipsoid ; (; const V & ; cente",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl.html:13225,Modifiability,Variab,Variable,13225," void sofa::gl::glTranslateNv< 2 > ; (; const float * ; p). inline . ◆ glTranslateT(). template<class Coord > . void sofa::gl::glTranslateT ; (; const Coord & ; c). inline . ◆ glTranslateT< double >(). template<> . void sofa::gl::glTranslateT< double > ; (; const double & ; c). inline . ◆ glTranslateT< float >(). template<> . void sofa::gl::glTranslateT< float > ; (; const float & ; c). inline . ◆ glVertexNv() [1/2]. template<int N> . void sofa::gl::glVertexNv ; (; const double * ; p). inline . ◆ glVertexNv() [2/2]. template<int N> . void sofa::gl::glVertexNv ; (; const float * ; ). inline . ◆ glVertexNv< 1 >() [1/2]. template<> . void sofa::gl::glVertexNv< 1 > ; (; const double * ; p). inline . ◆ glVertexNv< 1 >() [2/2]. template<> . void sofa::gl::glVertexNv< 1 > ; (; const float * ; p). inline . ◆ glVertexNv< 2 >() [1/2]. template<> . void sofa::gl::glVertexNv< 2 > ; (; const double * ; p). inline . ◆ glVertexNv< 2 >() [2/2]. template<> . void sofa::gl::glVertexNv< 2 > ; (; const float * ; p). inline . ◆ glVertexNv< 3 >(). template<> . void sofa::gl::glVertexNv< 3 > ; (; const float * ; p). inline . ◆ glVertexT(). template<class Coord > . void sofa::gl::glVertexT ; (; const Coord & ; c). inline . ◆ glVertexT< double >(). template<> . void sofa::gl::glVertexT< double > ; (; const double & ; c). inline . ◆ glVertexT< float >(). template<> . void sofa::gl::glVertexT< float > ; (; const float & ; c). inline . ◆ init(). SOFA_GL_API void sofa::gl::init ; (; ). Initialize the Sofa.GL library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ isCleanedUp(). SOFA_GL_API bool sofa::gl::isCleanedUp ; (; ). Return true if and only if the Sofa.GL library has been cleaned up. . ◆ isInitialized(). SOFA_GL_API bool sofa::gl::isInitialized ; (; ). Return true if and only if the Sofa.GL library has been initialized. . Variable Documentation. ◆ GLSLIsSupported. bool sofa::gl::GLSLIsSupported = false. sofagl; Generated on Mon Nov 11 2024 03:18:55 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1engine.html:160,Modifiability,Variab,Variables,160,"﻿. SOFA API: sofa::gl::component::engine Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::gl::component::engine Namespace Reference . Classes; class  TextureInterpolation;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; void init ();  . Variables; int TextureInterpolationClass;  ; template class SOFA_GL_COMPONENT_ENGINE_API TextureInterpolation< Vec1Types >;  ; template class SOFA_GL_COMPONENT_ENGINE_API TextureInterpolation< Vec2Types >;  ; template class SOFA_GL_COMPONENT_ENGINE_API TextureInterpolation< Vec3Types >;  . Function Documentation. ◆ getModuleName(). const char * sofa::gl::component::engine::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::gl::component::engine::getModuleVersion ; (; ). ◆ init(). SOFA_GL_COMPONENT_ENGINE_API void sofa::gl::component::engine::init ; (; ). ◆ initExternalModule(). void sofa::gl::component::engine::initExternalModule ; (; ). Variable Documentation. ◆ TextureInterpolation< Vec1Types >. template class SOFA_GL_COMPONENT_ENGINE_API sofa::gl::component::engine::TextureInterpolation< Vec1Types >. ◆ TextureInterpolation< Vec2Types >. template class SOFA_GL_COMPONENT_ENGINE_API sofa::gl::component::engine::TextureInterpolation< Vec2Types >. ◆ TextureInterpolation< Vec3Types >. template class SOFA_GL_COMPONENT_ENGINE_API sofa::gl::component::engine::TextureInterpolation< Vec3Types >. ◆ TextureInterpolationClass. int sofa::gl::component::engine::TextureInterpolationClass. Initial value:= core::RegisterObject(""Create texture coordinate for a given field""); .add< TextureInterpolation <Vec1Types> >(); .add< TextureInterpolation <Vec2Types> >(); .add< TextureInterpolation <Vec3Types> >(). sofaglcomponentengine; Generated on Mon Nov 11 2024 03:18:55 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1engine.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1engine.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1engine.html:477,Modifiability,Variab,Variables,477,"﻿. SOFA API: sofa::gl::component::engine Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::gl::component::engine Namespace Reference . Classes; class  TextureInterpolation;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; void init ();  . Variables; int TextureInterpolationClass;  ; template class SOFA_GL_COMPONENT_ENGINE_API TextureInterpolation< Vec1Types >;  ; template class SOFA_GL_COMPONENT_ENGINE_API TextureInterpolation< Vec2Types >;  ; template class SOFA_GL_COMPONENT_ENGINE_API TextureInterpolation< Vec3Types >;  . Function Documentation. ◆ getModuleName(). const char * sofa::gl::component::engine::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::gl::component::engine::getModuleVersion ; (; ). ◆ init(). SOFA_GL_COMPONENT_ENGINE_API void sofa::gl::component::engine::init ; (; ). ◆ initExternalModule(). void sofa::gl::component::engine::initExternalModule ; (; ). Variable Documentation. ◆ TextureInterpolation< Vec1Types >. template class SOFA_GL_COMPONENT_ENGINE_API sofa::gl::component::engine::TextureInterpolation< Vec1Types >. ◆ TextureInterpolation< Vec2Types >. template class SOFA_GL_COMPONENT_ENGINE_API sofa::gl::component::engine::TextureInterpolation< Vec2Types >. ◆ TextureInterpolation< Vec3Types >. template class SOFA_GL_COMPONENT_ENGINE_API sofa::gl::component::engine::TextureInterpolation< Vec3Types >. ◆ TextureInterpolationClass. int sofa::gl::component::engine::TextureInterpolationClass. Initial value:= core::RegisterObject(""Create texture coordinate for a given field""); .add< TextureInterpolation <Vec1Types> >(); .add< TextureInterpolation <Vec2Types> >(); .add< TextureInterpolation <Vec3Types> >(). sofaglcomponentengine; Generated on Mon Nov 11 2024 03:18:55 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1engine.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1engine.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1engine.html:1135,Modifiability,Variab,Variable,1135,"﻿. SOFA API: sofa::gl::component::engine Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::gl::component::engine Namespace Reference . Classes; class  TextureInterpolation;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; void init ();  . Variables; int TextureInterpolationClass;  ; template class SOFA_GL_COMPONENT_ENGINE_API TextureInterpolation< Vec1Types >;  ; template class SOFA_GL_COMPONENT_ENGINE_API TextureInterpolation< Vec2Types >;  ; template class SOFA_GL_COMPONENT_ENGINE_API TextureInterpolation< Vec3Types >;  . Function Documentation. ◆ getModuleName(). const char * sofa::gl::component::engine::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::gl::component::engine::getModuleVersion ; (; ). ◆ init(). SOFA_GL_COMPONENT_ENGINE_API void sofa::gl::component::engine::init ; (; ). ◆ initExternalModule(). void sofa::gl::component::engine::initExternalModule ; (; ). Variable Documentation. ◆ TextureInterpolation< Vec1Types >. template class SOFA_GL_COMPONENT_ENGINE_API sofa::gl::component::engine::TextureInterpolation< Vec1Types >. ◆ TextureInterpolation< Vec2Types >. template class SOFA_GL_COMPONENT_ENGINE_API sofa::gl::component::engine::TextureInterpolation< Vec2Types >. ◆ TextureInterpolation< Vec3Types >. template class SOFA_GL_COMPONENT_ENGINE_API sofa::gl::component::engine::TextureInterpolation< Vec3Types >. ◆ TextureInterpolationClass. int sofa::gl::component::engine::TextureInterpolationClass. Initial value:= core::RegisterObject(""Create texture coordinate for a given field""); .add< TextureInterpolation <Vec1Types> >(); .add< TextureInterpolation <Vec2Types> >(); .add< TextureInterpolation <Vec3Types> >(). sofaglcomponentengine; Generated on Mon Nov 11 2024 03:18:55 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1engine.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1engine.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering2d.html:165,Modifiability,Variab,Variables,165,"﻿. SOFA API: sofa::gl::component::rendering2d Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::gl::component::rendering2d Namespace Reference . Classes; class  OglColorMap;  ; class  OglLabel;  ; class  OglViewport;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; void init ();  . Variables; int OglColorMapClass;  ; int OglLabelClass;  ; int OglViewportClass;  . Function Documentation. ◆ getModuleName(). const char * sofa::gl::component::rendering2d::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::gl::component::rendering2d::getModuleVersion ; (; ). ◆ init(). SOFA_GL_COMPONENT_RENDERING2D_API void sofa::gl::component::rendering2d::init ; (; ). ◆ initExternalModule(). void sofa::gl::component::rendering2d::initExternalModule ; (; ). Variable Documentation. ◆ OglColorMapClass. int sofa::gl::component::rendering2d::OglColorMapClass. Initial value:= core::RegisterObject(""Provides color palette and support for conversion of numbers to colors.""); .add< OglColorMap >(); .addAlias(""ColorMap""). ◆ OglLabelClass. int sofa::gl::component::rendering2d::OglLabelClass. Initial value:= core::RegisterObject(""Display 2D text in the viewport.""); .add< OglLabel >(). ◆ OglViewportClass. int sofa::gl::component::rendering2d::OglViewportClass. Initial value:= core::RegisterObject(""OglViewport""); .add< OglViewport >(). sofaglcomponentrendering2d; Generated on Mon Nov 11 2024 03:18:55 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering2d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering2d.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering2d.html:521,Modifiability,Variab,Variables,521,"﻿. SOFA API: sofa::gl::component::rendering2d Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::gl::component::rendering2d Namespace Reference . Classes; class  OglColorMap;  ; class  OglLabel;  ; class  OglViewport;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; void init ();  . Variables; int OglColorMapClass;  ; int OglLabelClass;  ; int OglViewportClass;  . Function Documentation. ◆ getModuleName(). const char * sofa::gl::component::rendering2d::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::gl::component::rendering2d::getModuleVersion ; (; ). ◆ init(). SOFA_GL_COMPONENT_RENDERING2D_API void sofa::gl::component::rendering2d::init ; (; ). ◆ initExternalModule(). void sofa::gl::component::rendering2d::initExternalModule ; (; ). Variable Documentation. ◆ OglColorMapClass. int sofa::gl::component::rendering2d::OglColorMapClass. Initial value:= core::RegisterObject(""Provides color palette and support for conversion of numbers to colors.""); .add< OglColorMap >(); .addAlias(""ColorMap""). ◆ OglLabelClass. int sofa::gl::component::rendering2d::OglLabelClass. Initial value:= core::RegisterObject(""Display 2D text in the viewport.""); .add< OglLabel >(). ◆ OglViewportClass. int sofa::gl::component::rendering2d::OglViewportClass. Initial value:= core::RegisterObject(""OglViewport""); .add< OglViewport >(). sofaglcomponentrendering2d; Generated on Mon Nov 11 2024 03:18:55 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering2d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering2d.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering2d.html:996,Modifiability,Variab,Variable,996,"﻿. SOFA API: sofa::gl::component::rendering2d Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::gl::component::rendering2d Namespace Reference . Classes; class  OglColorMap;  ; class  OglLabel;  ; class  OglViewport;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; void init ();  . Variables; int OglColorMapClass;  ; int OglLabelClass;  ; int OglViewportClass;  . Function Documentation. ◆ getModuleName(). const char * sofa::gl::component::rendering2d::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::gl::component::rendering2d::getModuleVersion ; (; ). ◆ init(). SOFA_GL_COMPONENT_RENDERING2D_API void sofa::gl::component::rendering2d::init ; (; ). ◆ initExternalModule(). void sofa::gl::component::rendering2d::initExternalModule ; (; ). Variable Documentation. ◆ OglColorMapClass. int sofa::gl::component::rendering2d::OglColorMapClass. Initial value:= core::RegisterObject(""Provides color palette and support for conversion of numbers to colors.""); .add< OglColorMap >(); .addAlias(""ColorMap""). ◆ OglLabelClass. int sofa::gl::component::rendering2d::OglLabelClass. Initial value:= core::RegisterObject(""Display 2D text in the viewport.""); .add< OglLabel >(). ◆ OglViewportClass. int sofa::gl::component::rendering2d::OglViewportClass. Initial value:= core::RegisterObject(""OglViewport""); .add< OglViewport >(). sofaglcomponentrendering2d; Generated on Mon Nov 11 2024 03:18:55 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering2d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering2d.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering3d.html:165,Modifiability,Variab,Variables,165,"﻿. SOFA API: sofa::gl::component::rendering3d Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::gl::component::rendering3d Namespace Reference . Classes; class  ClipPlane;  ; class  DataDisplay;  ; class  MergeVisualModels;  ; class  OglCylinderModel;  ; class  OglModel;  Main class for rendering 3D model in SOFA. More...;  ; class  OglSceneFrame;  ; class  PointSplatModel;  ; class  SlicedVolumetricModel;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; void init ();  ; void glVertex3v (const float *d);  ; void glVertex3v (const double *d);  ; template<class T > ; GLuint glType ();  ; template<> ; GLuint glType< double > ();  ; template<> ; GLuint glType< float > ();  ; template<class InType , class OutType > ; void copyVector (const InType &src, OutType &dst);  . Variables; int ClipPlaneClass;  ; int DataDisplayClass;  ; int MergeVisualModelsClass;  ; int OglCylinderModelClass;  ; int OglModelClass;  ; int OglSceneFrameClass;  ; int PointSplatModelClass;  ; int SlicedVolumetricModelClass;  . Function Documentation. ◆ copyVector(). template<class InType , class OutType > . void sofa::gl::component::rendering3d::copyVector ; (; const InType & ; src, . OutType & ; dst . ). ◆ getModuleName(). const char * sofa::gl::component::rendering3d::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::gl::component::rendering3d::getModuleVersion ; (; ). ◆ glType(). template<class T > . GLuint sofa::gl::component::rendering3d::glType ; (; ). ◆ glType< double >(). template<> . GLuint sofa::gl::component::rendering3d::glType< double > ; (; ). ◆ glType< float >(). template<> . GLuint sofa::gl::component::rendering3d::glType< float > ; (; ). ◆ glVertex3v() [1/2]. void sofa::gl::component::rendering3d::glVertex3v ; (; const double * ; d). ◆ g",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering3d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering3d.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering3d.html:1014,Modifiability,Variab,Variables,1014," simuation. Classes |; Functions |; Variables . sofa::gl::component::rendering3d Namespace Reference . Classes; class  ClipPlane;  ; class  DataDisplay;  ; class  MergeVisualModels;  ; class  OglCylinderModel;  ; class  OglModel;  Main class for rendering 3D model in SOFA. More...;  ; class  OglSceneFrame;  ; class  PointSplatModel;  ; class  SlicedVolumetricModel;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; void init ();  ; void glVertex3v (const float *d);  ; void glVertex3v (const double *d);  ; template<class T > ; GLuint glType ();  ; template<> ; GLuint glType< double > ();  ; template<> ; GLuint glType< float > ();  ; template<class InType , class OutType > ; void copyVector (const InType &src, OutType &dst);  . Variables; int ClipPlaneClass;  ; int DataDisplayClass;  ; int MergeVisualModelsClass;  ; int OglCylinderModelClass;  ; int OglModelClass;  ; int OglSceneFrameClass;  ; int PointSplatModelClass;  ; int SlicedVolumetricModelClass;  . Function Documentation. ◆ copyVector(). template<class InType , class OutType > . void sofa::gl::component::rendering3d::copyVector ; (; const InType & ; src, . OutType & ; dst . ). ◆ getModuleName(). const char * sofa::gl::component::rendering3d::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::gl::component::rendering3d::getModuleVersion ; (; ). ◆ glType(). template<class T > . GLuint sofa::gl::component::rendering3d::glType ; (; ). ◆ glType< double >(). template<> . GLuint sofa::gl::component::rendering3d::glType< double > ; (; ). ◆ glType< float >(). template<> . GLuint sofa::gl::component::rendering3d::glType< float > ; (; ). ◆ glVertex3v() [1/2]. void sofa::gl::component::rendering3d::glVertex3v ; (; const double * ; d). ◆ glVertex3v() [2/2]. void sofa::gl::component::rendering3d::glVertex3v ; (; const float * ; d). ◆ init(). SOFA_GL_COMPONENT_RENDERI",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering3d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering3d.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering3d.html:2281,Modifiability,Variab,Variable,2281,"ate<class InType , class OutType > . void sofa::gl::component::rendering3d::copyVector ; (; const InType & ; src, . OutType & ; dst . ). ◆ getModuleName(). const char * sofa::gl::component::rendering3d::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::gl::component::rendering3d::getModuleVersion ; (; ). ◆ glType(). template<class T > . GLuint sofa::gl::component::rendering3d::glType ; (; ). ◆ glType< double >(). template<> . GLuint sofa::gl::component::rendering3d::glType< double > ; (; ). ◆ glType< float >(). template<> . GLuint sofa::gl::component::rendering3d::glType< float > ; (; ). ◆ glVertex3v() [1/2]. void sofa::gl::component::rendering3d::glVertex3v ; (; const double * ; d). ◆ glVertex3v() [2/2]. void sofa::gl::component::rendering3d::glVertex3v ; (; const float * ; d). ◆ init(). SOFA_GL_COMPONENT_RENDERING3D_API void sofa::gl::component::rendering3d::init ; (; ). ◆ initExternalModule(). void sofa::gl::component::rendering3d::initExternalModule ; (; ). Variable Documentation. ◆ ClipPlaneClass. int sofa::gl::component::rendering3d::ClipPlaneClass. Initial value:= core::RegisterObject(""OpenGL Clipping Plane""); .add< ClipPlane >(). ◆ DataDisplayClass. int sofa::gl::component::rendering3d::DataDisplayClass. Initial value:= core::RegisterObject(""Rendering of meshes colored by data""); .add< DataDisplay >(). ◆ MergeVisualModelsClass. int sofa::gl::component::rendering3d::MergeVisualModelsClass. Initial value:= core::RegisterObject(""Merge several visual models""); .add< MergeVisualModels >(true). ◆ OglCylinderModelClass. int sofa::gl::component::rendering3d::OglCylinderModelClass. Initial value:= core::RegisterObject(""A simple visualization for set of cylinder.""); .add< OglCylinderModel >(). ◆ OglModelClass. int sofa::gl::component::rendering3d::OglModelClass. Initial value:= core::RegisterObject(""Generic visual model for OpenGL display""); .add< OglModel >(). ◆ OglSceneFrameClass. int sofa::gl::component::rendering3d::OglSceneFrameClass. Initial value:=",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering3d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering3d.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering3d.html:2953,Usability,simpl,simple,2953,". void sofa::gl::component::rendering3d::glVertex3v ; (; const double * ; d). ◆ glVertex3v() [2/2]. void sofa::gl::component::rendering3d::glVertex3v ; (; const float * ; d). ◆ init(). SOFA_GL_COMPONENT_RENDERING3D_API void sofa::gl::component::rendering3d::init ; (; ). ◆ initExternalModule(). void sofa::gl::component::rendering3d::initExternalModule ; (; ). Variable Documentation. ◆ ClipPlaneClass. int sofa::gl::component::rendering3d::ClipPlaneClass. Initial value:= core::RegisterObject(""OpenGL Clipping Plane""); .add< ClipPlane >(). ◆ DataDisplayClass. int sofa::gl::component::rendering3d::DataDisplayClass. Initial value:= core::RegisterObject(""Rendering of meshes colored by data""); .add< DataDisplay >(). ◆ MergeVisualModelsClass. int sofa::gl::component::rendering3d::MergeVisualModelsClass. Initial value:= core::RegisterObject(""Merge several visual models""); .add< MergeVisualModels >(true). ◆ OglCylinderModelClass. int sofa::gl::component::rendering3d::OglCylinderModelClass. Initial value:= core::RegisterObject(""A simple visualization for set of cylinder.""); .add< OglCylinderModel >(). ◆ OglModelClass. int sofa::gl::component::rendering3d::OglModelClass. Initial value:= core::RegisterObject(""Generic visual model for OpenGL display""); .add< OglModel >(). ◆ OglSceneFrameClass. int sofa::gl::component::rendering3d::OglSceneFrameClass. Initial value:= core::RegisterObject(""Display a frame at the corner of the scene view""); .add< OglSceneFrame >(). ◆ PointSplatModelClass. int sofa::gl::component::rendering3d::PointSplatModelClass. Initial value:= core::RegisterObject(""A simple visualization for a cloud of points.""); .add< PointSplatModel >(); .addAlias(""PointSplat""). ◆ SlicedVolumetricModelClass. int sofa::gl::component::rendering3d::SlicedVolumetricModelClass. Initial value:= core::RegisterObject(""A simple visualization for a cloud of points.""); .add< SlicedVolumetricModel >(). sofaglcomponentrendering3d; Generated on Mon Nov 11 2024 03:18:55 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering3d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering3d.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering3d.html:3515,Usability,simpl,simple,3515,". void sofa::gl::component::rendering3d::glVertex3v ; (; const double * ; d). ◆ glVertex3v() [2/2]. void sofa::gl::component::rendering3d::glVertex3v ; (; const float * ; d). ◆ init(). SOFA_GL_COMPONENT_RENDERING3D_API void sofa::gl::component::rendering3d::init ; (; ). ◆ initExternalModule(). void sofa::gl::component::rendering3d::initExternalModule ; (; ). Variable Documentation. ◆ ClipPlaneClass. int sofa::gl::component::rendering3d::ClipPlaneClass. Initial value:= core::RegisterObject(""OpenGL Clipping Plane""); .add< ClipPlane >(). ◆ DataDisplayClass. int sofa::gl::component::rendering3d::DataDisplayClass. Initial value:= core::RegisterObject(""Rendering of meshes colored by data""); .add< DataDisplay >(). ◆ MergeVisualModelsClass. int sofa::gl::component::rendering3d::MergeVisualModelsClass. Initial value:= core::RegisterObject(""Merge several visual models""); .add< MergeVisualModels >(true). ◆ OglCylinderModelClass. int sofa::gl::component::rendering3d::OglCylinderModelClass. Initial value:= core::RegisterObject(""A simple visualization for set of cylinder.""); .add< OglCylinderModel >(). ◆ OglModelClass. int sofa::gl::component::rendering3d::OglModelClass. Initial value:= core::RegisterObject(""Generic visual model for OpenGL display""); .add< OglModel >(). ◆ OglSceneFrameClass. int sofa::gl::component::rendering3d::OglSceneFrameClass. Initial value:= core::RegisterObject(""Display a frame at the corner of the scene view""); .add< OglSceneFrame >(). ◆ PointSplatModelClass. int sofa::gl::component::rendering3d::PointSplatModelClass. Initial value:= core::RegisterObject(""A simple visualization for a cloud of points.""); .add< PointSplatModel >(); .addAlias(""PointSplat""). ◆ SlicedVolumetricModelClass. int sofa::gl::component::rendering3d::SlicedVolumetricModelClass. Initial value:= core::RegisterObject(""A simple visualization for a cloud of points.""); .add< SlicedVolumetricModel >(). sofaglcomponentrendering3d; Generated on Mon Nov 11 2024 03:18:55 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering3d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering3d.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering3d.html:3750,Usability,simpl,simple,3750,". void sofa::gl::component::rendering3d::glVertex3v ; (; const double * ; d). ◆ glVertex3v() [2/2]. void sofa::gl::component::rendering3d::glVertex3v ; (; const float * ; d). ◆ init(). SOFA_GL_COMPONENT_RENDERING3D_API void sofa::gl::component::rendering3d::init ; (; ). ◆ initExternalModule(). void sofa::gl::component::rendering3d::initExternalModule ; (; ). Variable Documentation. ◆ ClipPlaneClass. int sofa::gl::component::rendering3d::ClipPlaneClass. Initial value:= core::RegisterObject(""OpenGL Clipping Plane""); .add< ClipPlane >(). ◆ DataDisplayClass. int sofa::gl::component::rendering3d::DataDisplayClass. Initial value:= core::RegisterObject(""Rendering of meshes colored by data""); .add< DataDisplay >(). ◆ MergeVisualModelsClass. int sofa::gl::component::rendering3d::MergeVisualModelsClass. Initial value:= core::RegisterObject(""Merge several visual models""); .add< MergeVisualModels >(true). ◆ OglCylinderModelClass. int sofa::gl::component::rendering3d::OglCylinderModelClass. Initial value:= core::RegisterObject(""A simple visualization for set of cylinder.""); .add< OglCylinderModel >(). ◆ OglModelClass. int sofa::gl::component::rendering3d::OglModelClass. Initial value:= core::RegisterObject(""Generic visual model for OpenGL display""); .add< OglModel >(). ◆ OglSceneFrameClass. int sofa::gl::component::rendering3d::OglSceneFrameClass. Initial value:= core::RegisterObject(""Display a frame at the corner of the scene view""); .add< OglSceneFrame >(). ◆ PointSplatModelClass. int sofa::gl::component::rendering3d::PointSplatModelClass. Initial value:= core::RegisterObject(""A simple visualization for a cloud of points.""); .add< PointSplatModel >(); .addAlias(""PointSplat""). ◆ SlicedVolumetricModelClass. int sofa::gl::component::rendering3d::SlicedVolumetricModelClass. Initial value:= core::RegisterObject(""A simple visualization for a cloud of points.""); .add< SlicedVolumetricModel >(). sofaglcomponentrendering3d; Generated on Mon Nov 11 2024 03:18:55 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering3d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering3d.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html:7034,Availability,down,download,7034,"nst char * sofa::gl::component::shader::getModuleVersion ; (; ). ◆ init(). SOFA_GL_COMPONENT_SHADER_API void sofa::gl::component::shader::init ; (; ). ◆ initExternalModule(). void sofa::gl::component::shader::initExternalModule ; (; ). Variable Documentation. ◆ CompositingVisualLoopClass. int sofa::gl::component::shader::CompositingVisualLoopClass. Initial value:= core::RegisterObject(""Visual loop enabling multipass rendering. Needs multiple fbo data and a compositing shader""); .add< CompositingVisualLoop >(). ◆ DirectionalLightClass. int sofa::gl::component::shader::DirectionalLightClass. Initial value:= core::RegisterObject(""A directional light illuminating the scene with parallel rays of light (can cast shadows).""); .add< DirectionalLight >(). ◆ LightManagerClass. int sofa::gl::component::shader::LightManagerClass. Initial value:= RegisterObject; (""Manage a set of lights that can cast hard and soft shadows.Soft Shadows is done using Variance Shadow Mapping ""; ""(http://developer.download.nvidia.com/SDK/10.5/direct3d/Source/VarianceShadowMapping/Doc/VarianceShadowMapping.pdf)""); .add< LightManager >(); sofa::core::RegisterObjectDefinition: ObjectFactory.h:386; sofa::core::RegisterObject::addRegisterObject & add(bool defaultTemplate=false)Definition: ObjectFactory.h:402. ◆ OglFloat2AttributeClass. int sofa::gl::component::shader::OglFloat2AttributeClass = core::RegisterObject ( ""OglFloat2Attribute"" ).add< OglFloat2Attribute >(). ◆ OglFloat2VariableClass. int sofa::gl::component::shader::OglFloat2VariableClass. Initial value:= core::RegisterObject(""OglFloat2Variable""); .add< OglFloat2Variable >(). ◆ OglFloat3AttributeClass. int sofa::gl::component::shader::OglFloat3AttributeClass = core::RegisterObject ( ""OglFloat3Attribute"" ).add< OglFloat3Attribute >(). ◆ OglFloat3VariableClass. int sofa::gl::component::shader::OglFloat3VariableClass. Initial value:= core::RegisterObject(""OglFloat3Variable""); .add< OglFloat3Variable >(). ◆ OglFloat4AttributeClass. int sofa::gl::comp",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html:160,Modifiability,Variab,Variables,160,﻿. SOFA API: sofa::gl::component::shader Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::gl::component::shader Namespace Reference . Classes; class  CompositingVisualLoop;  ; class  Light;  Utility to cast Light into a Opengl scene. More...;  ; class  DirectionalLight;  ; class  PositionalLight;  ; class  SpotLight;  ; class  LightManager;  Utility to manage lights into an Opengl scene. More...;  ; class  OglAttribute;  ; class  OglFloatAttribute;  ; class  OglFloat2Attribute;  ; class  OglFloat3Attribute;  ; class  OglFloat4Attribute;  ; class  OglIntAttribute;  ; class  OglInt2Attribute;  ; class  OglInt3Attribute;  ; class  OglInt4Attribute;  ; class  OglUIntAttribute;  ; class  OglUInt2Attribute;  ; class  OglUInt3Attribute;  ; class  OglUInt4Attribute;  ; class  OglOITShader;  ; class  OglRenderingSRGB;  The utility to enable/disable sRGB rendering. More...;  ; class  OglShader;  Utility to use shader for a visual model in OpenGL. More...;  ; class  OglShaderElement;  Abstract class which defines a element to be used with a OglShader. More...;  ; class  OglShaderMacro;  Small class to define macro into an OglShader. More...;  ; class  OglShaderDefineMacro;  ; class  OglShaderVisualModel;  ; class  OglShadowShader;  ; class  OglTexture;  Defines an uniform sampler (texture) for a OglShader. More...;  ; class  OglTexture2D;  ; class  OglTexturePointer;  Defines an uniform sampler (texture) for a OglShader. More...;  ; class  OglVariable;  Defines an uniform variable for a OglShader. More...;  ; class  OglIntVariable;  ; class  OglInt2Variable;  ; class  OglInt3Variable;  ; class  OglInt4Variable;  ; class  OglFloatVariable;  ; class  OglFloat2Variable;  ; class  OglFloat3Variable;  ; class  OglFloat4Variable;  ; class  OglIntVectorVariable;  ; class  OglIntVector2Variable;  ; class  OglIntVector3Variable;  ; class  OglIntVector4Variable;  ; class  OglFloatVectorVariable;  ; cl,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html:1574,Modifiability,variab,variable,1574,ibute;  ; class  OglFloat3Attribute;  ; class  OglFloat4Attribute;  ; class  OglIntAttribute;  ; class  OglInt2Attribute;  ; class  OglInt3Attribute;  ; class  OglInt4Attribute;  ; class  OglUIntAttribute;  ; class  OglUInt2Attribute;  ; class  OglUInt3Attribute;  ; class  OglUInt4Attribute;  ; class  OglOITShader;  ; class  OglRenderingSRGB;  The utility to enable/disable sRGB rendering. More...;  ; class  OglShader;  Utility to use shader for a visual model in OpenGL. More...;  ; class  OglShaderElement;  Abstract class which defines a element to be used with a OglShader. More...;  ; class  OglShaderMacro;  Small class to define macro into an OglShader. More...;  ; class  OglShaderDefineMacro;  ; class  OglShaderVisualModel;  ; class  OglShadowShader;  ; class  OglTexture;  Defines an uniform sampler (texture) for a OglShader. More...;  ; class  OglTexture2D;  ; class  OglTexturePointer;  Defines an uniform sampler (texture) for a OglShader. More...;  ; class  OglVariable;  Defines an uniform variable for a OglShader. More...;  ; class  OglIntVariable;  ; class  OglInt2Variable;  ; class  OglInt3Variable;  ; class  OglInt4Variable;  ; class  OglFloatVariable;  ; class  OglFloat2Variable;  ; class  OglFloat3Variable;  ; class  OglFloat4Variable;  ; class  OglIntVectorVariable;  ; class  OglIntVector2Variable;  ; class  OglIntVector3Variable;  ; class  OglIntVector4Variable;  ; class  OglFloatVectorVariable;  ; class  OglFloatVector2Variable;  ; class  OglFloatVector3Variable;  ; class  OglFloatVector4Variable;  ; class  OglMatrix2Variable;  ; class  OglMatrix3Variable;  ; class  OglMatrix4Variable;  ; class  OglMatrix2x3Variable;  ; class  OglMatrix3x2Variable;  ; class  OglMatrix2x4Variable;  ; class  OglMatrix4x2Variable;  ; class  OglMatrix3x4Variable;  ; class  OglMatrix4x3Variable;  ; class  OglMatrix4VectorVariable;  ; class  VisualOITDrawVisitor;  ; class  OrderIndependentTransparencyManager;  Utility to manage transparency (translucency) into an Opengl scen,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html:3042,Modifiability,Variab,Variables,3042,"able;  ; class  OglMatrix4Variable;  ; class  OglMatrix2x3Variable;  ; class  OglMatrix3x2Variable;  ; class  OglMatrix2x4Variable;  ; class  OglMatrix4x2Variable;  ; class  OglMatrix3x4Variable;  ; class  OglMatrix4x3Variable;  ; class  OglMatrix4VectorVariable;  ; class  VisualOITDrawVisitor;  ; class  OrderIndependentTransparencyManager;  Utility to manage transparency (translucency) into an Opengl scene. More...;  ; class  PostProcessManager;  ; class  VisualManagerPass;  Render pass element: render the relevant tagged objects in a FBO. More...;  ; class  VisualManagerSecondaryPass;  Render pass element: render the relevant tagged objects in a FBO. More...;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; void init ();  . Variables; int CompositingVisualLoopClass;  ; int DirectionalLightClass;  ; int PositionalLightClass;  ; int SpotLightClass;  ; int LightManagerClass;  ; int OglFloatAttributeClass = core::RegisterObject ( ""OglFloatAttribute"" ).add< OglFloatAttribute >();  ; int OglFloat2AttributeClass = core::RegisterObject ( ""OglFloat2Attribute"" ).add< OglFloat2Attribute >();  ; int OglFloat3AttributeClass = core::RegisterObject ( ""OglFloat3Attribute"" ).add< OglFloat3Attribute >();  ; int OglFloat4AttributeClass = core::RegisterObject ( ""OglFloat4Attribute"" ).add< OglFloat4Attribute >();  ; int OglIntAttributeClass = core::RegisterObject ( ""OglIntAttribute"" ).add< OglIntAttribute >();  ; int OglInt2AttributeClass = core::RegisterObject ( ""OglInt2Attribute"" ).add< OglInt2Attribute >();  ; int OglInt3AttributeClass = core::RegisterObject ( ""OglInt3Attribute"" ).add< OglInt3Attribute >();  ; int OglInt4AttributeClass = core::RegisterObject ( ""OglInt4Attribute"" ).add< OglInt4Attribute >();  ; int OglUIntAttributeClass = core::RegisterObject ( ""OglUIntAttribute"" ).add< OglUIntAttribute >();  ; int OglUInt2AttributeCla",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html:6274,Modifiability,Variab,Variable,6274,"torVariableClass;  ; int OglFloatVector2VariableClass;  ; int OglFloatVector3VariableClass;  ; int OglFloatVector4VariableClass;  ; int OglMatrix2VariableClass;  ; int OglMatrix3VariableClass;  ; int OglMatrix4VariableClass;  ; int OglMatrix2x3VariableClass;  ; int OglMatrix3x2VariableClass;  ; int OglMatrix2x4VariableClass;  ; int OglMatrix4x2VariableClass;  ; int OglMatrix3x4VariableClass;  ; int OglMatrix4x3VariableClass;  ; int OglMatrix4VectorVariableClass;  ; int OrderIndependentTransparencyManagerClass;  ; int PostProcessManagerClass;  ; int VisualManagerPassClass;  ; int VisualManagerSecondaryPassClass;  . Function Documentation. ◆ getModuleName(). const char * sofa::gl::component::shader::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::gl::component::shader::getModuleVersion ; (; ). ◆ init(). SOFA_GL_COMPONENT_SHADER_API void sofa::gl::component::shader::init ; (; ). ◆ initExternalModule(). void sofa::gl::component::shader::initExternalModule ; (; ). Variable Documentation. ◆ CompositingVisualLoopClass. int sofa::gl::component::shader::CompositingVisualLoopClass. Initial value:= core::RegisterObject(""Visual loop enabling multipass rendering. Needs multiple fbo data and a compositing shader""); .add< CompositingVisualLoop >(). ◆ DirectionalLightClass. int sofa::gl::component::shader::DirectionalLightClass. Initial value:= core::RegisterObject(""A directional light illuminating the scene with parallel rays of light (can cast shadows).""); .add< DirectionalLight >(). ◆ LightManagerClass. int sofa::gl::component::shader::LightManagerClass. Initial value:= RegisterObject; (""Manage a set of lights that can cast hard and soft shadows.Soft Shadows is done using Variance Shadow Mapping ""; ""(http://developer.download.nvidia.com/SDK/10.5/direct3d/Source/VarianceShadowMapping/Doc/VarianceShadowMapping.pdf)""); .add< LightManager >(); sofa::core::RegisterObjectDefinition: ObjectFactory.h:386; sofa::core::RegisterObject::addRegisterObject & add(bool defaultTem",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html:8663,Modifiability,VARIAB,VARIABLE,8663,"Variable >(). ◆ OglFloat3AttributeClass. int sofa::gl::component::shader::OglFloat3AttributeClass = core::RegisterObject ( ""OglFloat3Attribute"" ).add< OglFloat3Attribute >(). ◆ OglFloat3VariableClass. int sofa::gl::component::shader::OglFloat3VariableClass. Initial value:= core::RegisterObject(""OglFloat3Variable""); .add< OglFloat3Variable >(). ◆ OglFloat4AttributeClass. int sofa::gl::component::shader::OglFloat4AttributeClass = core::RegisterObject ( ""OglFloat4Attribute"" ).add< OglFloat4Attribute >(). ◆ OglFloat4VariableClass. int sofa::gl::component::shader::OglFloat4VariableClass. Initial value:= core::RegisterObject(""OglFloat4Variable""); .add< OglFloat4Variable >(). ◆ OglFloatAttributeClass. int sofa::gl::component::shader::OglFloatAttributeClass = core::RegisterObject ( ""OglFloatAttribute"" ).add< OglFloatAttribute >(). ◆ OglFloatVariableClass. int sofa::gl::component::shader::OglFloatVariableClass. Initial value:= core::RegisterObject(""OglFloatVariable""); .add< OglFloatVariable >(); SINGLE FLOAT VARIABLE . ◆ OglFloatVector2VariableClass. int sofa::gl::component::shader::OglFloatVector2VariableClass. Initial value:= core::RegisterObject(""OglFloatVector2Variable""); .add< OglFloatVector2Variable >(). ◆ OglFloatVector3VariableClass. int sofa::gl::component::shader::OglFloatVector3VariableClass. Initial value:= core::RegisterObject(""OglFloatVector3Variable""); .add< OglFloatVector3Variable >(). ◆ OglFloatVector4VariableClass. int sofa::gl::component::shader::OglFloatVector4VariableClass. Initial value:= core::RegisterObject(""OglFloatVector4Variable""); .add< OglFloatVector4Variable >(). ◆ OglFloatVectorVariableClass. int sofa::gl::component::shader::OglFloatVectorVariableClass. Initial value:= core::RegisterObject(""OglFloatVectorVariable""); .add< OglFloatVectorVariable >(); FLOAT VECTOR VARIABLE . ◆ OglInt2AttributeClass. int sofa::gl::component::shader::OglInt2AttributeClass = core::RegisterObject ( ""OglInt2Attribute"" ).add< OglInt2Attribute >(). ◆ OglInt2VariableClas",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html:9463,Modifiability,VARIAB,VARIABLE,9463,"ribute"" ).add< OglFloatAttribute >(). ◆ OglFloatVariableClass. int sofa::gl::component::shader::OglFloatVariableClass. Initial value:= core::RegisterObject(""OglFloatVariable""); .add< OglFloatVariable >(); SINGLE FLOAT VARIABLE . ◆ OglFloatVector2VariableClass. int sofa::gl::component::shader::OglFloatVector2VariableClass. Initial value:= core::RegisterObject(""OglFloatVector2Variable""); .add< OglFloatVector2Variable >(). ◆ OglFloatVector3VariableClass. int sofa::gl::component::shader::OglFloatVector3VariableClass. Initial value:= core::RegisterObject(""OglFloatVector3Variable""); .add< OglFloatVector3Variable >(). ◆ OglFloatVector4VariableClass. int sofa::gl::component::shader::OglFloatVector4VariableClass. Initial value:= core::RegisterObject(""OglFloatVector4Variable""); .add< OglFloatVector4Variable >(). ◆ OglFloatVectorVariableClass. int sofa::gl::component::shader::OglFloatVectorVariableClass. Initial value:= core::RegisterObject(""OglFloatVectorVariable""); .add< OglFloatVectorVariable >(); FLOAT VECTOR VARIABLE . ◆ OglInt2AttributeClass. int sofa::gl::component::shader::OglInt2AttributeClass = core::RegisterObject ( ""OglInt2Attribute"" ).add< OglInt2Attribute >(). ◆ OglInt2VariableClass. int sofa::gl::component::shader::OglInt2VariableClass. Initial value:= core::RegisterObject(""OglInt2Variable""); .add< OglInt2Variable >(). ◆ OglInt3AttributeClass. int sofa::gl::component::shader::OglInt3AttributeClass = core::RegisterObject ( ""OglInt3Attribute"" ).add< OglInt3Attribute >(). ◆ OglInt3VariableClass. int sofa::gl::component::shader::OglInt3VariableClass. Initial value:= core::RegisterObject(""OglInt3Variable""); .add< OglInt3Variable >(). ◆ OglInt4AttributeClass. int sofa::gl::component::shader::OglInt4AttributeClass = core::RegisterObject ( ""OglInt4Attribute"" ).add< OglInt4Attribute >(). ◆ OglInt4VariableClass. int sofa::gl::component::shader::OglInt4VariableClass. Initial value:= core::RegisterObject(""OglInt4Variable""); .add< OglInt4Variable >(). ◆ OglIntAttributeClass.",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html:10741,Modifiability,VARIAB,VARIABLE,10741,"RegisterObject(""OglInt2Variable""); .add< OglInt2Variable >(). ◆ OglInt3AttributeClass. int sofa::gl::component::shader::OglInt3AttributeClass = core::RegisterObject ( ""OglInt3Attribute"" ).add< OglInt3Attribute >(). ◆ OglInt3VariableClass. int sofa::gl::component::shader::OglInt3VariableClass. Initial value:= core::RegisterObject(""OglInt3Variable""); .add< OglInt3Variable >(). ◆ OglInt4AttributeClass. int sofa::gl::component::shader::OglInt4AttributeClass = core::RegisterObject ( ""OglInt4Attribute"" ).add< OglInt4Attribute >(). ◆ OglInt4VariableClass. int sofa::gl::component::shader::OglInt4VariableClass. Initial value:= core::RegisterObject(""OglInt4Variable""); .add< OglInt4Variable >(). ◆ OglIntAttributeClass. int sofa::gl::component::shader::OglIntAttributeClass = core::RegisterObject ( ""OglIntAttribute"" ).add< OglIntAttribute >(). ◆ OglIntVariableClass. int sofa::gl::component::shader::OglIntVariableClass. Initial value:= core::RegisterObject(""OglIntVariable""); .add< OglIntVariable >(); SINGLE INT VARIABLE . ◆ OglIntVector2VariableClass. int sofa::gl::component::shader::OglIntVector2VariableClass. Initial value:= core::RegisterObject(""OglIntVector2Variable""); .add< OglIntVector2Variable >(). ◆ OglIntVector3VariableClass. int sofa::gl::component::shader::OglIntVector3VariableClass. Initial value:= core::RegisterObject(""OglIntVector3Variable""); .add< OglIntVector3Variable >(). ◆ OglIntVector4VariableClass. int sofa::gl::component::shader::OglIntVector4VariableClass. Initial value:= core::RegisterObject(""OglIntVector4Variable""); .add< OglIntVector4Variable >(). ◆ OglIntVectorVariableClass. int sofa::gl::component::shader::OglIntVectorVariableClass. Initial value:= core::RegisterObject(""OglIntVectorVariable""); .add< OglIntVectorVariable >(); INT VECTOR VARIABLE . ◆ OglMatrix2VariableClass. int sofa::gl::component::shader::OglMatrix2VariableClass. Initial value:= core::RegisterObject(""OglMatrix2Variable""); .add< OglMatrix2Variable >(); Matrix VARIABLE . ◆ OglMatrix2x3Var",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html:11507,Modifiability,VARIAB,VARIABLE,11507,"uteClass = core::RegisterObject ( ""OglIntAttribute"" ).add< OglIntAttribute >(). ◆ OglIntVariableClass. int sofa::gl::component::shader::OglIntVariableClass. Initial value:= core::RegisterObject(""OglIntVariable""); .add< OglIntVariable >(); SINGLE INT VARIABLE . ◆ OglIntVector2VariableClass. int sofa::gl::component::shader::OglIntVector2VariableClass. Initial value:= core::RegisterObject(""OglIntVector2Variable""); .add< OglIntVector2Variable >(). ◆ OglIntVector3VariableClass. int sofa::gl::component::shader::OglIntVector3VariableClass. Initial value:= core::RegisterObject(""OglIntVector3Variable""); .add< OglIntVector3Variable >(). ◆ OglIntVector4VariableClass. int sofa::gl::component::shader::OglIntVector4VariableClass. Initial value:= core::RegisterObject(""OglIntVector4Variable""); .add< OglIntVector4Variable >(). ◆ OglIntVectorVariableClass. int sofa::gl::component::shader::OglIntVectorVariableClass. Initial value:= core::RegisterObject(""OglIntVectorVariable""); .add< OglIntVectorVariable >(); INT VECTOR VARIABLE . ◆ OglMatrix2VariableClass. int sofa::gl::component::shader::OglMatrix2VariableClass. Initial value:= core::RegisterObject(""OglMatrix2Variable""); .add< OglMatrix2Variable >(); Matrix VARIABLE . ◆ OglMatrix2x3VariableClass. int sofa::gl::component::shader::OglMatrix2x3VariableClass. Initial value:= core::RegisterObject(""OglMatrix2x3Variable""); .add< OglMatrix2x3Variable >(). ◆ OglMatrix2x4VariableClass. int sofa::gl::component::shader::OglMatrix2x4VariableClass. Initial value:= core::RegisterObject(""OglMatrix2x4Variable""); .add< OglMatrix2x4Variable >(). ◆ OglMatrix3VariableClass. int sofa::gl::component::shader::OglMatrix3VariableClass. Initial value:= core::RegisterObject(""OglMatrix3Variable""); .add< OglMatrix3Variable >(). ◆ OglMatrix3x2VariableClass. int sofa::gl::component::shader::OglMatrix3x2VariableClass. Initial value:= core::RegisterObject(""OglMatrix3x2Variable""); .add< OglMatrix3x2Variable >(). ◆ OglMatrix3x4VariableClass. int sofa::gl::component::sh",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html:11700,Modifiability,VARIAB,VARIABLE,11700,"glIntVariable""); .add< OglIntVariable >(); SINGLE INT VARIABLE . ◆ OglIntVector2VariableClass. int sofa::gl::component::shader::OglIntVector2VariableClass. Initial value:= core::RegisterObject(""OglIntVector2Variable""); .add< OglIntVector2Variable >(). ◆ OglIntVector3VariableClass. int sofa::gl::component::shader::OglIntVector3VariableClass. Initial value:= core::RegisterObject(""OglIntVector3Variable""); .add< OglIntVector3Variable >(). ◆ OglIntVector4VariableClass. int sofa::gl::component::shader::OglIntVector4VariableClass. Initial value:= core::RegisterObject(""OglIntVector4Variable""); .add< OglIntVector4Variable >(). ◆ OglIntVectorVariableClass. int sofa::gl::component::shader::OglIntVectorVariableClass. Initial value:= core::RegisterObject(""OglIntVectorVariable""); .add< OglIntVectorVariable >(); INT VECTOR VARIABLE . ◆ OglMatrix2VariableClass. int sofa::gl::component::shader::OglMatrix2VariableClass. Initial value:= core::RegisterObject(""OglMatrix2Variable""); .add< OglMatrix2Variable >(); Matrix VARIABLE . ◆ OglMatrix2x3VariableClass. int sofa::gl::component::shader::OglMatrix2x3VariableClass. Initial value:= core::RegisterObject(""OglMatrix2x3Variable""); .add< OglMatrix2x3Variable >(). ◆ OglMatrix2x4VariableClass. int sofa::gl::component::shader::OglMatrix2x4VariableClass. Initial value:= core::RegisterObject(""OglMatrix2x4Variable""); .add< OglMatrix2x4Variable >(). ◆ OglMatrix3VariableClass. int sofa::gl::component::shader::OglMatrix3VariableClass. Initial value:= core::RegisterObject(""OglMatrix3Variable""); .add< OglMatrix3Variable >(). ◆ OglMatrix3x2VariableClass. int sofa::gl::component::shader::OglMatrix3x2VariableClass. Initial value:= core::RegisterObject(""OglMatrix3x2Variable""); .add< OglMatrix3x2Variable >(). ◆ OglMatrix3x4VariableClass. int sofa::gl::component::shader::OglMatrix3x4VariableClass. Initial value:= core::RegisterObject(""OglMatrix3x4Variable""); .add< OglMatrix3x4Variable >(). ◆ OglMatrix4VariableClass. int sofa::gl::component::shader::OglMatrix",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html:13006,Modifiability,VARIAB,VARIABLE,13006,"tial value:= core::RegisterObject(""OglMatrix2x4Variable""); .add< OglMatrix2x4Variable >(). ◆ OglMatrix3VariableClass. int sofa::gl::component::shader::OglMatrix3VariableClass. Initial value:= core::RegisterObject(""OglMatrix3Variable""); .add< OglMatrix3Variable >(). ◆ OglMatrix3x2VariableClass. int sofa::gl::component::shader::OglMatrix3x2VariableClass. Initial value:= core::RegisterObject(""OglMatrix3x2Variable""); .add< OglMatrix3x2Variable >(). ◆ OglMatrix3x4VariableClass. int sofa::gl::component::shader::OglMatrix3x4VariableClass. Initial value:= core::RegisterObject(""OglMatrix3x4Variable""); .add< OglMatrix3x4Variable >(). ◆ OglMatrix4VariableClass. int sofa::gl::component::shader::OglMatrix4VariableClass. Initial value:= core::RegisterObject(""OglMatrix4Variable""); .add< OglMatrix4Variable >(). ◆ OglMatrix4VectorVariableClass. int sofa::gl::component::shader::OglMatrix4VectorVariableClass. Initial value:= core::RegisterObject(""OglMatrix4VectorVariable""); .add< OglMatrix4VectorVariable >(); Matrix vector VARIABLE . ◆ OglMatrix4x2VariableClass. int sofa::gl::component::shader::OglMatrix4x2VariableClass. Initial value:= core::RegisterObject(""OglMatrix4x2Variable""); .add< OglMatrix4x2Variable >(). ◆ OglMatrix4x3VariableClass. int sofa::gl::component::shader::OglMatrix4x3VariableClass. Initial value:= core::RegisterObject(""OglMatrix4x3Variable""); .add< OglMatrix4x3Variable >(). ◆ OglOITShaderClass. int sofa::gl::component::shader::OglOITShaderClass. Initial value:= core::RegisterObject(""OglOITShader""); .add< OglOITShader >(). ◆ OglRenderingSRGBClass. int sofa::gl::component::shader::OglRenderingSRGBClass. Initial value:= core::RegisterObject(""OglRenderingSRGB""); .add< OglRenderingSRGB >(). ◆ OglShaderClass. int sofa::gl::component::shader::OglShaderClass. Initial value:= core::RegisterObject(""OglShader""); .add< OglShader >(). ◆ OglShaderDefineMacroClass. int sofa::gl::component::shader::OglShaderDefineMacroClass. Initial value:= core::RegisterObject(""OglShaderDefineMacro",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html:1141,Deployability,RELEASE,RELEASED,1141,"147. Open source framework for multi-physics simuation. Classes |; Enumerations |; Functions |; Variables . sofa::gui::common Namespace Reference . Classes; class  ArgumentParser;  ; class  BaseGUI;  ; class  BaseViewer;  ; class  ColourPickingVisitor;  ; class  FilesRecentlyOpenedManager;  ; class  GUIManager;  ; struct  MousePosition;  ; class  Operation;  ; class  AttachOperation;  ; class  ConstraintAttachOperation;  ; class  FixOperation;  ; class  AddFrameOperation;  ; class  AddRecordedCameraOperation;  ; class  StartNavigationOperation;  ; class  InciseOperation;  ; class  TopologyOperation;  ; class  AddSutureOperation;  ; class  OperationCreator;  ; class  TOperationCreator;  ; class  OperationFactory;  ; class  RegisterOperation;  ; class  CallBackPicker;  ; class  CallBackRender;  ; class  PickHandler;  ; class  BaseViewerArgument;  ; class  ViewerQtArgument;  . Enumerations; enum  { BTLEFT_MODE = 101; , BTRIGHT_MODE = 102; , BTMIDDLE_MODE = 103; };  ; enum  MOUSE_BUTTON { LEFT; , MIDDLE; , RIGHT; , NONE; };  ; enum  MOUSE_STATUS { PRESSED; , RELEASED; , ACTIVATED; , DEACTIVATED; };  . Functions; void decodeCollisionElement (const RGBAColor &colour, BodyPicked &body);  ; void decodePosition (BodyPicked &body, const RGBAColor &colour, const TriangleCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index);  ; void decodePosition (BodyPicked &body, const RGBAColor &colour, const SphereCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index);  ; void decodeCollisionElement (const sofa::type::Vec4f &colour, sofa::gui::component::performer::BodyPicked &body)=delete;  ; void decodePosition (sofa::gui::component::performer::BodyPicked &body, const sofa::type::Vec4f &colour, const sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index)=delete;  ; void decodePosition (sofa::gui::component::performer::BodyPicked &body, const sofa::type::Vec4f &colo",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1common.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html:2716,Deployability,RELEASE,RELEASED,2716,"d decodePosition (sofa::gui::component::performer::BodyPicked &body, const sofa::type::Vec4f &colour, const sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index)=delete;  ; void decodePosition (sofa::gui::component::performer::BodyPicked &body, const sofa::type::Vec4f &colour, const sofa::component::collision::geometry::SphereCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index)=delete;  ; void init ();  . Variables; FileRepository GuiDataRepository (""GUI_DATA_PATH"", { Utils::getSofaPathTo(""share/sofa/gui/qt"") }, { { Utils::getSofaPathTo(""etc/Sofa.Gui.Qt.ini"").c_str(), {""RESOURCES_DIR""} } });  . Enumeration Type Documentation. ◆ anonymous enum. anonymous enum. EnumeratorBTLEFT_MODE ; BTRIGHT_MODE ; BTMIDDLE_MODE . ◆ MOUSE_BUTTON. enum sofa::gui::common::MOUSE_BUTTON. EnumeratorLEFT ; MIDDLE ; RIGHT ; NONE . ◆ MOUSE_STATUS. enum sofa::gui::common::MOUSE_STATUS. EnumeratorPRESSED ; RELEASED ; ACTIVATED ; DEACTIVATED . Function Documentation. ◆ decodeCollisionElement() [1/2]. void SOFA_GUI_COMMON_API sofa::gui::common::decodeCollisionElement ; (; const RGBAColor & ; colour, . BodyPicked & ; body . ). ◆ decodeCollisionElement() [2/2]. void sofa::gui::common::decodeCollisionElement ; (; const sofa::type::Vec4f & ; colour, . sofa::gui::component::performer::BodyPicked & ; body . ). delete . ◆ decodePosition() [1/4]. void SOFA_GUI_COMMON_API sofa::gui::common::decodePosition ; (; BodyPicked & ; body, . const RGBAColor & ; colour, . const SphereCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). ◆ decodePosition() [2/4]. void SOFA_GUI_COMMON_API sofa::gui::common::decodePosition ; (; BodyPicked & ; body, . const RGBAColor & ; colour, . const TriangleCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). ◆ decodePosition() [3/4]. void sofa::gui::common::decodePosition ; (; sofa::gui::component::perform",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1common.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html:166,Modifiability,Variab,Variables,166,"﻿. SOFA API: sofa::gui::common Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Enumerations |; Functions |; Variables . sofa::gui::common Namespace Reference . Classes; class  ArgumentParser;  ; class  BaseGUI;  ; class  BaseViewer;  ; class  ColourPickingVisitor;  ; class  FilesRecentlyOpenedManager;  ; class  GUIManager;  ; struct  MousePosition;  ; class  Operation;  ; class  AttachOperation;  ; class  ConstraintAttachOperation;  ; class  FixOperation;  ; class  AddFrameOperation;  ; class  AddRecordedCameraOperation;  ; class  StartNavigationOperation;  ; class  InciseOperation;  ; class  TopologyOperation;  ; class  AddSutureOperation;  ; class  OperationCreator;  ; class  TOperationCreator;  ; class  OperationFactory;  ; class  RegisterOperation;  ; class  CallBackPicker;  ; class  CallBackRender;  ; class  PickHandler;  ; class  BaseViewerArgument;  ; class  ViewerQtArgument;  . Enumerations; enum  { BTLEFT_MODE = 101; , BTRIGHT_MODE = 102; , BTMIDDLE_MODE = 103; };  ; enum  MOUSE_BUTTON { LEFT; , MIDDLE; , RIGHT; , NONE; };  ; enum  MOUSE_STATUS { PRESSED; , RELEASED; , ACTIVATED; , DEACTIVATED; };  . Functions; void decodeCollisionElement (const RGBAColor &colour, BodyPicked &body);  ; void decodePosition (BodyPicked &body, const RGBAColor &colour, const TriangleCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index);  ; void decodePosition (BodyPicked &body, const RGBAColor &colour, const SphereCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index);  ; void decodeCollisionElement (const sofa::type::Vec4f &colour, sofa::gui::component::performer::BodyPicked &body)=delete;  ; void decodePosition (sofa::gui::component::performer::BodyPicked &body, const sofa::type::Vec4f &colour, const sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index)=delete;  ; void decodePosition (sofa::gui::",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1common.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html:2233,Modifiability,Variab,Variables,2233,"&body, const RGBAColor &colour, const TriangleCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index);  ; void decodePosition (BodyPicked &body, const RGBAColor &colour, const SphereCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index);  ; void decodeCollisionElement (const sofa::type::Vec4f &colour, sofa::gui::component::performer::BodyPicked &body)=delete;  ; void decodePosition (sofa::gui::component::performer::BodyPicked &body, const sofa::type::Vec4f &colour, const sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index)=delete;  ; void decodePosition (sofa::gui::component::performer::BodyPicked &body, const sofa::type::Vec4f &colour, const sofa::component::collision::geometry::SphereCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index)=delete;  ; void init ();  . Variables; FileRepository GuiDataRepository (""GUI_DATA_PATH"", { Utils::getSofaPathTo(""share/sofa/gui/qt"") }, { { Utils::getSofaPathTo(""etc/Sofa.Gui.Qt.ini"").c_str(), {""RESOURCES_DIR""} } });  . Enumeration Type Documentation. ◆ anonymous enum. anonymous enum. EnumeratorBTLEFT_MODE ; BTRIGHT_MODE ; BTMIDDLE_MODE . ◆ MOUSE_BUTTON. enum sofa::gui::common::MOUSE_BUTTON. EnumeratorLEFT ; MIDDLE ; RIGHT ; NONE . ◆ MOUSE_STATUS. enum sofa::gui::common::MOUSE_STATUS. EnumeratorPRESSED ; RELEASED ; ACTIVATED ; DEACTIVATED . Function Documentation. ◆ decodeCollisionElement() [1/2]. void SOFA_GUI_COMMON_API sofa::gui::common::decodeCollisionElement ; (; const RGBAColor & ; colour, . BodyPicked & ; body . ). ◆ decodeCollisionElement() [2/2]. void sofa::gui::common::decodeCollisionElement ; (; const sofa::type::Vec4f & ; colour, . sofa::gui::component::performer::BodyPicked & ; body . ). delete . ◆ decodePosition() [1/4]. void SOFA_GUI_COMMON_API sofa::gui::common::decodePosition ; (; BodyPicked & ; body, . const RGBAColor & ; colour, . const SphereCollisionModel< sofa:",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1common.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html:4324,Modifiability,Variab,Variable,4324,"PRESSED ; RELEASED ; ACTIVATED ; DEACTIVATED . Function Documentation. ◆ decodeCollisionElement() [1/2]. void SOFA_GUI_COMMON_API sofa::gui::common::decodeCollisionElement ; (; const RGBAColor & ; colour, . BodyPicked & ; body . ). ◆ decodeCollisionElement() [2/2]. void sofa::gui::common::decodeCollisionElement ; (; const sofa::type::Vec4f & ; colour, . sofa::gui::component::performer::BodyPicked & ; body . ). delete . ◆ decodePosition() [1/4]. void SOFA_GUI_COMMON_API sofa::gui::common::decodePosition ; (; BodyPicked & ; body, . const RGBAColor & ; colour, . const SphereCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). ◆ decodePosition() [2/4]. void SOFA_GUI_COMMON_API sofa::gui::common::decodePosition ; (; BodyPicked & ; body, . const RGBAColor & ; colour, . const TriangleCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). ◆ decodePosition() [3/4]. void sofa::gui::common::decodePosition ; (; sofa::gui::component::performer::BodyPicked & ; body, . const sofa::type::Vec4f & ; colour, . const sofa::component::collision::geometry::SphereCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). delete . ◆ decodePosition() [4/4]. void sofa::gui::common::decodePosition ; (; sofa::gui::component::performer::BodyPicked & ; body, . const sofa::type::Vec4f & ; colour, . const sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). delete . ◆ init(). void SOFA_GUI_COMMON_API sofa::gui::common::init ; (; ). Variable Documentation. ◆ GuiDataRepository. SOFA_GUI_COMMON_API sofa::helper::system::FileRepository sofa::gui::common::GuiDataRepository ; (; ""GUI_DATA_PATH"" ; , . { Utils::getSofaPathTo(""share/sofa/gui/qt"") } ; , . { { Utils::getSofaPathTo(""etc/Sofa.Gui.Qt.ini"").c_str(), {""RESOURCES_DIR""} } } ;  . ). sofaguicommon; Generated on Mon Nov 11 2024 03:19:18 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1common.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html:1680,Performance,perform,performer,1680,"; class  OperationCreator;  ; class  TOperationCreator;  ; class  OperationFactory;  ; class  RegisterOperation;  ; class  CallBackPicker;  ; class  CallBackRender;  ; class  PickHandler;  ; class  BaseViewerArgument;  ; class  ViewerQtArgument;  . Enumerations; enum  { BTLEFT_MODE = 101; , BTRIGHT_MODE = 102; , BTMIDDLE_MODE = 103; };  ; enum  MOUSE_BUTTON { LEFT; , MIDDLE; , RIGHT; , NONE; };  ; enum  MOUSE_STATUS { PRESSED; , RELEASED; , ACTIVATED; , DEACTIVATED; };  . Functions; void decodeCollisionElement (const RGBAColor &colour, BodyPicked &body);  ; void decodePosition (BodyPicked &body, const RGBAColor &colour, const TriangleCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index);  ; void decodePosition (BodyPicked &body, const RGBAColor &colour, const SphereCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index);  ; void decodeCollisionElement (const sofa::type::Vec4f &colour, sofa::gui::component::performer::BodyPicked &body)=delete;  ; void decodePosition (sofa::gui::component::performer::BodyPicked &body, const sofa::type::Vec4f &colour, const sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index)=delete;  ; void decodePosition (sofa::gui::component::performer::BodyPicked &body, const sofa::type::Vec4f &colour, const sofa::component::collision::geometry::SphereCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index)=delete;  ; void init ();  . Variables; FileRepository GuiDataRepository (""GUI_DATA_PATH"", { Utils::getSofaPathTo(""share/sofa/gui/qt"") }, { { Utils::getSofaPathTo(""etc/Sofa.Gui.Qt.ini"").c_str(), {""RESOURCES_DIR""} } });  . Enumeration Type Documentation. ◆ anonymous enum. anonymous enum. EnumeratorBTLEFT_MODE ; BTRIGHT_MODE ; BTMIDDLE_MODE . ◆ MOUSE_BUTTON. enum sofa::gui::common::MOUSE_BUTTON. EnumeratorLEFT ; MIDDLE ; RIGHT ; NONE . ◆ MOUSE_STATUS. enum sofa::gui::common::MOUSE_STATUS. EnumeratorPR",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1common.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html:1763,Performance,perform,performer,1763,"; class  OperationCreator;  ; class  TOperationCreator;  ; class  OperationFactory;  ; class  RegisterOperation;  ; class  CallBackPicker;  ; class  CallBackRender;  ; class  PickHandler;  ; class  BaseViewerArgument;  ; class  ViewerQtArgument;  . Enumerations; enum  { BTLEFT_MODE = 101; , BTRIGHT_MODE = 102; , BTMIDDLE_MODE = 103; };  ; enum  MOUSE_BUTTON { LEFT; , MIDDLE; , RIGHT; , NONE; };  ; enum  MOUSE_STATUS { PRESSED; , RELEASED; , ACTIVATED; , DEACTIVATED; };  . Functions; void decodeCollisionElement (const RGBAColor &colour, BodyPicked &body);  ; void decodePosition (BodyPicked &body, const RGBAColor &colour, const TriangleCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index);  ; void decodePosition (BodyPicked &body, const RGBAColor &colour, const SphereCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index);  ; void decodeCollisionElement (const sofa::type::Vec4f &colour, sofa::gui::component::performer::BodyPicked &body)=delete;  ; void decodePosition (sofa::gui::component::performer::BodyPicked &body, const sofa::type::Vec4f &colour, const sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index)=delete;  ; void decodePosition (sofa::gui::component::performer::BodyPicked &body, const sofa::type::Vec4f &colour, const sofa::component::collision::geometry::SphereCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index)=delete;  ; void init ();  . Variables; FileRepository GuiDataRepository (""GUI_DATA_PATH"", { Utils::getSofaPathTo(""share/sofa/gui/qt"") }, { { Utils::getSofaPathTo(""etc/Sofa.Gui.Qt.ini"").c_str(), {""RESOURCES_DIR""} } });  . Enumeration Type Documentation. ◆ anonymous enum. anonymous enum. EnumeratorBTLEFT_MODE ; BTRIGHT_MODE ; BTMIDDLE_MODE . ◆ MOUSE_BUTTON. enum sofa::gui::common::MOUSE_BUTTON. EnumeratorLEFT ; MIDDLE ; RIGHT ; NONE . ◆ MOUSE_STATUS. enum sofa::gui::common::MOUSE_STATUS. EnumeratorPR",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1common.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html:2012,Performance,perform,performer,2012,"; class  OperationCreator;  ; class  TOperationCreator;  ; class  OperationFactory;  ; class  RegisterOperation;  ; class  CallBackPicker;  ; class  CallBackRender;  ; class  PickHandler;  ; class  BaseViewerArgument;  ; class  ViewerQtArgument;  . Enumerations; enum  { BTLEFT_MODE = 101; , BTRIGHT_MODE = 102; , BTMIDDLE_MODE = 103; };  ; enum  MOUSE_BUTTON { LEFT; , MIDDLE; , RIGHT; , NONE; };  ; enum  MOUSE_STATUS { PRESSED; , RELEASED; , ACTIVATED; , DEACTIVATED; };  . Functions; void decodeCollisionElement (const RGBAColor &colour, BodyPicked &body);  ; void decodePosition (BodyPicked &body, const RGBAColor &colour, const TriangleCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index);  ; void decodePosition (BodyPicked &body, const RGBAColor &colour, const SphereCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index);  ; void decodeCollisionElement (const sofa::type::Vec4f &colour, sofa::gui::component::performer::BodyPicked &body)=delete;  ; void decodePosition (sofa::gui::component::performer::BodyPicked &body, const sofa::type::Vec4f &colour, const sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index)=delete;  ; void decodePosition (sofa::gui::component::performer::BodyPicked &body, const sofa::type::Vec4f &colour, const sofa::component::collision::geometry::SphereCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index)=delete;  ; void init ();  . Variables; FileRepository GuiDataRepository (""GUI_DATA_PATH"", { Utils::getSofaPathTo(""share/sofa/gui/qt"") }, { { Utils::getSofaPathTo(""etc/Sofa.Gui.Qt.ini"").c_str(), {""RESOURCES_DIR""} } });  . Enumeration Type Documentation. ◆ anonymous enum. anonymous enum. EnumeratorBTLEFT_MODE ; BTRIGHT_MODE ; BTMIDDLE_MODE . ◆ MOUSE_BUTTON. enum sofa::gui::common::MOUSE_BUTTON. EnumeratorLEFT ; MIDDLE ; RIGHT ; NONE . ◆ MOUSE_STATUS. enum sofa::gui::common::MOUSE_STATUS. EnumeratorPR",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1common.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html:3084,Performance,perform,performer,3084,"mponent::collision::geometry::SphereCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index)=delete;  ; void init ();  . Variables; FileRepository GuiDataRepository (""GUI_DATA_PATH"", { Utils::getSofaPathTo(""share/sofa/gui/qt"") }, { { Utils::getSofaPathTo(""etc/Sofa.Gui.Qt.ini"").c_str(), {""RESOURCES_DIR""} } });  . Enumeration Type Documentation. ◆ anonymous enum. anonymous enum. EnumeratorBTLEFT_MODE ; BTRIGHT_MODE ; BTMIDDLE_MODE . ◆ MOUSE_BUTTON. enum sofa::gui::common::MOUSE_BUTTON. EnumeratorLEFT ; MIDDLE ; RIGHT ; NONE . ◆ MOUSE_STATUS. enum sofa::gui::common::MOUSE_STATUS. EnumeratorPRESSED ; RELEASED ; ACTIVATED ; DEACTIVATED . Function Documentation. ◆ decodeCollisionElement() [1/2]. void SOFA_GUI_COMMON_API sofa::gui::common::decodeCollisionElement ; (; const RGBAColor & ; colour, . BodyPicked & ; body . ). ◆ decodeCollisionElement() [2/2]. void sofa::gui::common::decodeCollisionElement ; (; const sofa::type::Vec4f & ; colour, . sofa::gui::component::performer::BodyPicked & ; body . ). delete . ◆ decodePosition() [1/4]. void SOFA_GUI_COMMON_API sofa::gui::common::decodePosition ; (; BodyPicked & ; body, . const RGBAColor & ; colour, . const SphereCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). ◆ decodePosition() [2/4]. void SOFA_GUI_COMMON_API sofa::gui::common::decodePosition ; (; BodyPicked & ; body, . const RGBAColor & ; colour, . const TriangleCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). ◆ decodePosition() [3/4]. void sofa::gui::common::decodePosition ; (; sofa::gui::component::performer::BodyPicked & ; body, . const sofa::type::Vec4f & ; colour, . const sofa::component::collision::geometry::SphereCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). delete . ◆ decodePosition() [4/4]. void sofa::gui::common::decodePosition ; (; sofa::gui::component::performer::BodyPicked & ; body, . const sofa::type::Vec4f",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1common.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html:3717,Performance,perform,performer,3717,"eratorPRESSED ; RELEASED ; ACTIVATED ; DEACTIVATED . Function Documentation. ◆ decodeCollisionElement() [1/2]. void SOFA_GUI_COMMON_API sofa::gui::common::decodeCollisionElement ; (; const RGBAColor & ; colour, . BodyPicked & ; body . ). ◆ decodeCollisionElement() [2/2]. void sofa::gui::common::decodeCollisionElement ; (; const sofa::type::Vec4f & ; colour, . sofa::gui::component::performer::BodyPicked & ; body . ). delete . ◆ decodePosition() [1/4]. void SOFA_GUI_COMMON_API sofa::gui::common::decodePosition ; (; BodyPicked & ; body, . const RGBAColor & ; colour, . const SphereCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). ◆ decodePosition() [2/4]. void SOFA_GUI_COMMON_API sofa::gui::common::decodePosition ; (; BodyPicked & ; body, . const RGBAColor & ; colour, . const TriangleCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). ◆ decodePosition() [3/4]. void sofa::gui::common::decodePosition ; (; sofa::gui::component::performer::BodyPicked & ; body, . const sofa::type::Vec4f & ; colour, . const sofa::component::collision::geometry::SphereCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). delete . ◆ decodePosition() [4/4]. void sofa::gui::common::decodePosition ; (; sofa::gui::component::performer::BodyPicked & ; body, . const sofa::type::Vec4f & ; colour, . const sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). delete . ◆ init(). void SOFA_GUI_COMMON_API sofa::gui::common::init ; (; ). Variable Documentation. ◆ GuiDataRepository. SOFA_GUI_COMMON_API sofa::helper::system::FileRepository sofa::gui::common::GuiDataRepository ; (; ""GUI_DATA_PATH"" ; , . { Utils::getSofaPathTo(""share/sofa/gui/qt"") } ; , . { { Utils::getSofaPathTo(""etc/Sofa.Gui.Qt.ini"").c_str(), {""RESOURCES_DIR""} } } ;  . ). sofaguicommon; Generated on Mon Nov 11 2024 03:19:18 for SOFA API by 1.",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1common.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html:4032,Performance,perform,performer,4032,"PRESSED ; RELEASED ; ACTIVATED ; DEACTIVATED . Function Documentation. ◆ decodeCollisionElement() [1/2]. void SOFA_GUI_COMMON_API sofa::gui::common::decodeCollisionElement ; (; const RGBAColor & ; colour, . BodyPicked & ; body . ). ◆ decodeCollisionElement() [2/2]. void sofa::gui::common::decodeCollisionElement ; (; const sofa::type::Vec4f & ; colour, . sofa::gui::component::performer::BodyPicked & ; body . ). delete . ◆ decodePosition() [1/4]. void SOFA_GUI_COMMON_API sofa::gui::common::decodePosition ; (; BodyPicked & ; body, . const RGBAColor & ; colour, . const SphereCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). ◆ decodePosition() [2/4]. void SOFA_GUI_COMMON_API sofa::gui::common::decodePosition ; (; BodyPicked & ; body, . const RGBAColor & ; colour, . const TriangleCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). ◆ decodePosition() [3/4]. void sofa::gui::common::decodePosition ; (; sofa::gui::component::performer::BodyPicked & ; body, . const sofa::type::Vec4f & ; colour, . const sofa::component::collision::geometry::SphereCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). delete . ◆ decodePosition() [4/4]. void sofa::gui::common::decodePosition ; (; sofa::gui::component::performer::BodyPicked & ; body, . const sofa::type::Vec4f & ; colour, . const sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). delete . ◆ init(). void SOFA_GUI_COMMON_API sofa::gui::common::init ; (; ). Variable Documentation. ◆ GuiDataRepository. SOFA_GUI_COMMON_API sofa::helper::system::FileRepository sofa::gui::common::GuiDataRepository ; (; ""GUI_DATA_PATH"" ; , . { Utils::getSofaPathTo(""share/sofa/gui/qt"") } ; , . { { Utils::getSofaPathTo(""etc/Sofa.Gui.Qt.ini"").c_str(), {""RESOURCES_DIR""} } } ;  . ). sofaguicommon; Generated on Mon Nov 11 2024 03:19:18 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1common.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html:2259,Usability,GuiD,GuiDataRepository,2259,"&body, const RGBAColor &colour, const TriangleCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index);  ; void decodePosition (BodyPicked &body, const RGBAColor &colour, const SphereCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index);  ; void decodeCollisionElement (const sofa::type::Vec4f &colour, sofa::gui::component::performer::BodyPicked &body)=delete;  ; void decodePosition (sofa::gui::component::performer::BodyPicked &body, const sofa::type::Vec4f &colour, const sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index)=delete;  ; void decodePosition (sofa::gui::component::performer::BodyPicked &body, const sofa::type::Vec4f &colour, const sofa::component::collision::geometry::SphereCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index)=delete;  ; void init ();  . Variables; FileRepository GuiDataRepository (""GUI_DATA_PATH"", { Utils::getSofaPathTo(""share/sofa/gui/qt"") }, { { Utils::getSofaPathTo(""etc/Sofa.Gui.Qt.ini"").c_str(), {""RESOURCES_DIR""} } });  . Enumeration Type Documentation. ◆ anonymous enum. anonymous enum. EnumeratorBTLEFT_MODE ; BTRIGHT_MODE ; BTMIDDLE_MODE . ◆ MOUSE_BUTTON. enum sofa::gui::common::MOUSE_BUTTON. EnumeratorLEFT ; MIDDLE ; RIGHT ; NONE . ◆ MOUSE_STATUS. enum sofa::gui::common::MOUSE_STATUS. EnumeratorPRESSED ; RELEASED ; ACTIVATED ; DEACTIVATED . Function Documentation. ◆ decodeCollisionElement() [1/2]. void SOFA_GUI_COMMON_API sofa::gui::common::decodeCollisionElement ; (; const RGBAColor & ; colour, . BodyPicked & ; body . ). ◆ decodeCollisionElement() [2/2]. void sofa::gui::common::decodeCollisionElement ; (; const sofa::type::Vec4f & ; colour, . sofa::gui::component::performer::BodyPicked & ; body . ). delete . ◆ decodePosition() [1/4]. void SOFA_GUI_COMMON_API sofa::gui::common::decodePosition ; (; BodyPicked & ; body, . const RGBAColor & ; colour, . const SphereCollisionModel< sofa:",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1common.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html:4350,Usability,GuiD,GuiDataRepository,4350,"PRESSED ; RELEASED ; ACTIVATED ; DEACTIVATED . Function Documentation. ◆ decodeCollisionElement() [1/2]. void SOFA_GUI_COMMON_API sofa::gui::common::decodeCollisionElement ; (; const RGBAColor & ; colour, . BodyPicked & ; body . ). ◆ decodeCollisionElement() [2/2]. void sofa::gui::common::decodeCollisionElement ; (; const sofa::type::Vec4f & ; colour, . sofa::gui::component::performer::BodyPicked & ; body . ). delete . ◆ decodePosition() [1/4]. void SOFA_GUI_COMMON_API sofa::gui::common::decodePosition ; (; BodyPicked & ; body, . const RGBAColor & ; colour, . const SphereCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). ◆ decodePosition() [2/4]. void SOFA_GUI_COMMON_API sofa::gui::common::decodePosition ; (; BodyPicked & ; body, . const RGBAColor & ; colour, . const TriangleCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). ◆ decodePosition() [3/4]. void sofa::gui::common::decodePosition ; (; sofa::gui::component::performer::BodyPicked & ; body, . const sofa::type::Vec4f & ; colour, . const sofa::component::collision::geometry::SphereCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). delete . ◆ decodePosition() [4/4]. void sofa::gui::common::decodePosition ; (; sofa::gui::component::performer::BodyPicked & ; body, . const sofa::type::Vec4f & ; colour, . const sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). delete . ◆ init(). void SOFA_GUI_COMMON_API sofa::gui::common::init ; (; ). Variable Documentation. ◆ GuiDataRepository. SOFA_GUI_COMMON_API sofa::helper::system::FileRepository sofa::gui::common::GuiDataRepository ; (; ""GUI_DATA_PATH"" ; , . { Utils::getSofaPathTo(""share/sofa/gui/qt"") } ; , . { { Utils::getSofaPathTo(""etc/Sofa.Gui.Qt.ini"").c_str(), {""RESOURCES_DIR""} } } ;  . ). sofaguicommon; Generated on Mon Nov 11 2024 03:19:18 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1common.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html:4445,Usability,GuiD,GuiDataRepository,4445,"PRESSED ; RELEASED ; ACTIVATED ; DEACTIVATED . Function Documentation. ◆ decodeCollisionElement() [1/2]. void SOFA_GUI_COMMON_API sofa::gui::common::decodeCollisionElement ; (; const RGBAColor & ; colour, . BodyPicked & ; body . ). ◆ decodeCollisionElement() [2/2]. void sofa::gui::common::decodeCollisionElement ; (; const sofa::type::Vec4f & ; colour, . sofa::gui::component::performer::BodyPicked & ; body . ). delete . ◆ decodePosition() [1/4]. void SOFA_GUI_COMMON_API sofa::gui::common::decodePosition ; (; BodyPicked & ; body, . const RGBAColor & ; colour, . const SphereCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). ◆ decodePosition() [2/4]. void SOFA_GUI_COMMON_API sofa::gui::common::decodePosition ; (; BodyPicked & ; body, . const RGBAColor & ; colour, . const TriangleCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). ◆ decodePosition() [3/4]. void sofa::gui::common::decodePosition ; (; sofa::gui::component::performer::BodyPicked & ; body, . const sofa::type::Vec4f & ; colour, . const sofa::component::collision::geometry::SphereCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). delete . ◆ decodePosition() [4/4]. void sofa::gui::common::decodePosition ; (; sofa::gui::component::performer::BodyPicked & ; body, . const sofa::type::Vec4f & ; colour, . const sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). delete . ◆ init(). void SOFA_GUI_COMMON_API sofa::gui::common::init ; (; ). Variable Documentation. ◆ GuiDataRepository. SOFA_GUI_COMMON_API sofa::helper::system::FileRepository sofa::gui::common::GuiDataRepository ; (; ""GUI_DATA_PATH"" ; , . { Utils::getSofaPathTo(""share/sofa/gui/qt"") } ; , . { { Utils::getSofaPathTo(""etc/Sofa.Gui.Qt.ini"").c_str(), {""RESOURCES_DIR""} } } ;  . ). sofaguicommon; Generated on Mon Nov 11 2024 03:19:18 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1common.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html:1708,Deployability,configurat,configuration,1708,"();  ; void init ();  . Variables; int AddFrameButtonSettingClass;  ; int AddRecordedCameraButtonSettingClass;  ; int StartNavigationButtonSettingClass;  ; int AttachBodyButtonSettingClass;  ; int ConstraintAttachButtonSettingClass;  ; int FixPickedParticleButtonSettingClass;  . Function Documentation. ◆ getModuleName(). const char * sofa::gui::component::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::gui::component::getModuleVersion ; (; ). ◆ init(). SOFA_GUI_COMPONENT_API void sofa::gui::component::init ; (; ). ◆ initExternalModule(). void sofa::gui::component::initExternalModule ; (; ). Variable Documentation. ◆ AddFrameButtonSettingClass. int sofa::gui::component::AddFrameButtonSettingClass. Initial value:= core::RegisterObject(""Add a frame to a skinned model""); .add< AddFrameButtonSetting >(); .addAlias(""AddFrameButton""). ◆ AddRecordedCameraButtonSettingClass. int sofa::gui::component::AddRecordedCameraButtonSettingClass. Initial value:= core::RegisterObject(""Save Camera's View Point Button configuration""); .add< AddRecordedCameraButtonSetting >(); .addAlias(""AddRecordedCameraButton""). ◆ AttachBodyButtonSettingClass. int sofa::gui::component::AttachBodyButtonSettingClass. Initial value:= core::RegisterObject(""Attach Body Button configuration""); .add< AttachBodyButtonSetting >(); .addAlias(""AttachBodyButton""). ◆ ConstraintAttachButtonSettingClass. int sofa::gui::component::ConstraintAttachButtonSettingClass. Initial value:= core::RegisterObject(""Attach an object to the mouse using lagrangian multiplier""); .add< ConstraintAttachButtonSetting >(). ◆ FixPickedParticleButtonSettingClass. int sofa::gui::component::FixPickedParticleButtonSettingClass. Initial value:= core::RegisterObject(""Fix a picked particle in space""); .add< FixPickedParticleButtonSetting >(); .addAlias(""FixPickedParticleButton""). ◆ StartNavigationButtonSettingClass. int sofa::gui::component::StartNavigationButtonSettingClass. Initial value:= core::RegisterObject(""Start Navigation Bu",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html:1950,Deployability,configurat,configuration,1950,"tingClass;  ; int ConstraintAttachButtonSettingClass;  ; int FixPickedParticleButtonSettingClass;  . Function Documentation. ◆ getModuleName(). const char * sofa::gui::component::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::gui::component::getModuleVersion ; (; ). ◆ init(). SOFA_GUI_COMPONENT_API void sofa::gui::component::init ; (; ). ◆ initExternalModule(). void sofa::gui::component::initExternalModule ; (; ). Variable Documentation. ◆ AddFrameButtonSettingClass. int sofa::gui::component::AddFrameButtonSettingClass. Initial value:= core::RegisterObject(""Add a frame to a skinned model""); .add< AddFrameButtonSetting >(); .addAlias(""AddFrameButton""). ◆ AddRecordedCameraButtonSettingClass. int sofa::gui::component::AddRecordedCameraButtonSettingClass. Initial value:= core::RegisterObject(""Save Camera's View Point Button configuration""); .add< AddRecordedCameraButtonSetting >(); .addAlias(""AddRecordedCameraButton""). ◆ AttachBodyButtonSettingClass. int sofa::gui::component::AttachBodyButtonSettingClass. Initial value:= core::RegisterObject(""Attach Body Button configuration""); .add< AttachBodyButtonSetting >(); .addAlias(""AttachBodyButton""). ◆ ConstraintAttachButtonSettingClass. int sofa::gui::component::ConstraintAttachButtonSettingClass. Initial value:= core::RegisterObject(""Attach an object to the mouse using lagrangian multiplier""); .add< ConstraintAttachButtonSetting >(). ◆ FixPickedParticleButtonSettingClass. int sofa::gui::component::FixPickedParticleButtonSettingClass. Initial value:= core::RegisterObject(""Fix a picked particle in space""); .add< FixPickedParticleButtonSetting >(); .addAlias(""FixPickedParticleButton""). ◆ StartNavigationButtonSettingClass. int sofa::gui::component::StartNavigationButtonSettingClass. Initial value:= core::RegisterObject(""Start Navigation Button configuration""); .add< StartNavigationButtonSetting >(); .addAlias(""StartNavigationButton""). sofaguicomponent; Generated on Mon Nov 11 2024 03:19:19 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html:2687,Deployability,configurat,configuration,2687,"tingClass;  ; int ConstraintAttachButtonSettingClass;  ; int FixPickedParticleButtonSettingClass;  . Function Documentation. ◆ getModuleName(). const char * sofa::gui::component::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::gui::component::getModuleVersion ; (; ). ◆ init(). SOFA_GUI_COMPONENT_API void sofa::gui::component::init ; (; ). ◆ initExternalModule(). void sofa::gui::component::initExternalModule ; (; ). Variable Documentation. ◆ AddFrameButtonSettingClass. int sofa::gui::component::AddFrameButtonSettingClass. Initial value:= core::RegisterObject(""Add a frame to a skinned model""); .add< AddFrameButtonSetting >(); .addAlias(""AddFrameButton""). ◆ AddRecordedCameraButtonSettingClass. int sofa::gui::component::AddRecordedCameraButtonSettingClass. Initial value:= core::RegisterObject(""Save Camera's View Point Button configuration""); .add< AddRecordedCameraButtonSetting >(); .addAlias(""AddRecordedCameraButton""). ◆ AttachBodyButtonSettingClass. int sofa::gui::component::AttachBodyButtonSettingClass. Initial value:= core::RegisterObject(""Attach Body Button configuration""); .add< AttachBodyButtonSetting >(); .addAlias(""AttachBodyButton""). ◆ ConstraintAttachButtonSettingClass. int sofa::gui::component::ConstraintAttachButtonSettingClass. Initial value:= core::RegisterObject(""Attach an object to the mouse using lagrangian multiplier""); .add< ConstraintAttachButtonSetting >(). ◆ FixPickedParticleButtonSettingClass. int sofa::gui::component::FixPickedParticleButtonSettingClass. Initial value:= core::RegisterObject(""Fix a picked particle in space""); .add< FixPickedParticleButtonSetting >(); .addAlias(""FixPickedParticleButton""). ◆ StartNavigationButtonSettingClass. int sofa::gui::component::StartNavigationButtonSettingClass. Initial value:= core::RegisterObject(""Start Navigation Button configuration""); .add< StartNavigationButtonSetting >(); .addAlias(""StartNavigationButton""). sofaguicomponent; Generated on Mon Nov 11 2024 03:19:19 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html:167,Modifiability,Variab,Variables,167,"﻿. SOFA API: sofa::gui::component Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Functions |; Variables . sofa::gui::component Namespace Reference . Namespaces;  performer;  . Classes; class  AddFrameButtonSetting;  ; class  AddRecordedCameraButtonSetting;  ; class  StartNavigationButtonSetting;  ; class  AttachBodyButtonSetting;  ; class  ConstraintAttachButtonSetting;  ; class  FixPickedParticleButtonSetting;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; void init ();  . Variables; int AddFrameButtonSettingClass;  ; int AddRecordedCameraButtonSettingClass;  ; int StartNavigationButtonSettingClass;  ; int AttachBodyButtonSettingClass;  ; int ConstraintAttachButtonSettingClass;  ; int FixPickedParticleButtonSettingClass;  . Function Documentation. ◆ getModuleName(). const char * sofa::gui::component::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::gui::component::getModuleVersion ; (; ). ◆ init(). SOFA_GUI_COMPONENT_API void sofa::gui::component::init ; (; ). ◆ initExternalModule(). void sofa::gui::component::initExternalModule ; (; ). Variable Documentation. ◆ AddFrameButtonSettingClass. int sofa::gui::component::AddFrameButtonSettingClass. Initial value:= core::RegisterObject(""Add a frame to a skinned model""); .add< AddFrameButtonSetting >(); .addAlias(""AddFrameButton""). ◆ AddRecordedCameraButtonSettingClass. int sofa::gui::component::AddRecordedCameraButtonSettingClass. Initial value:= core::RegisterObject(""Save Camera's View Point Button configuration""); .add< AddRecordedCameraButtonSetting >(); .addAlias(""AddRecordedCameraButton""). ◆ AttachBodyButtonSettingClass. int sofa::gui::component::AttachBodyButtonSettingClass. Initial value:= core::RegisterObject(""Attach Body Button configuration""); .add< AttachBodyButtonSetting >();",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html:705,Modifiability,Variab,Variables,705,"﻿. SOFA API: sofa::gui::component Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Functions |; Variables . sofa::gui::component Namespace Reference . Namespaces;  performer;  . Classes; class  AddFrameButtonSetting;  ; class  AddRecordedCameraButtonSetting;  ; class  StartNavigationButtonSetting;  ; class  AttachBodyButtonSetting;  ; class  ConstraintAttachButtonSetting;  ; class  FixPickedParticleButtonSetting;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; void init ();  . Variables; int AddFrameButtonSettingClass;  ; int AddRecordedCameraButtonSettingClass;  ; int StartNavigationButtonSettingClass;  ; int AttachBodyButtonSettingClass;  ; int ConstraintAttachButtonSettingClass;  ; int FixPickedParticleButtonSettingClass;  . Function Documentation. ◆ getModuleName(). const char * sofa::gui::component::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::gui::component::getModuleVersion ; (; ). ◆ init(). SOFA_GUI_COMPONENT_API void sofa::gui::component::init ; (; ). ◆ initExternalModule(). void sofa::gui::component::initExternalModule ; (; ). Variable Documentation. ◆ AddFrameButtonSettingClass. int sofa::gui::component::AddFrameButtonSettingClass. Initial value:= core::RegisterObject(""Add a frame to a skinned model""); .add< AddFrameButtonSetting >(); .addAlias(""AddFrameButton""). ◆ AddRecordedCameraButtonSettingClass. int sofa::gui::component::AddRecordedCameraButtonSettingClass. Initial value:= core::RegisterObject(""Save Camera's View Point Button configuration""); .add< AddRecordedCameraButtonSetting >(); .addAlias(""AddRecordedCameraButton""). ◆ AttachBodyButtonSettingClass. int sofa::gui::component::AttachBodyButtonSettingClass. Initial value:= core::RegisterObject(""Attach Body Button configuration""); .add< AttachBodyButtonSetting >();",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html:1294,Modifiability,Variab,Variable,1294,"rdedCameraButtonSetting;  ; class  StartNavigationButtonSetting;  ; class  AttachBodyButtonSetting;  ; class  ConstraintAttachButtonSetting;  ; class  FixPickedParticleButtonSetting;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; void init ();  . Variables; int AddFrameButtonSettingClass;  ; int AddRecordedCameraButtonSettingClass;  ; int StartNavigationButtonSettingClass;  ; int AttachBodyButtonSettingClass;  ; int ConstraintAttachButtonSettingClass;  ; int FixPickedParticleButtonSettingClass;  . Function Documentation. ◆ getModuleName(). const char * sofa::gui::component::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::gui::component::getModuleVersion ; (; ). ◆ init(). SOFA_GUI_COMPONENT_API void sofa::gui::component::init ; (; ). ◆ initExternalModule(). void sofa::gui::component::initExternalModule ; (; ). Variable Documentation. ◆ AddFrameButtonSettingClass. int sofa::gui::component::AddFrameButtonSettingClass. Initial value:= core::RegisterObject(""Add a frame to a skinned model""); .add< AddFrameButtonSetting >(); .addAlias(""AddFrameButton""). ◆ AddRecordedCameraButtonSettingClass. int sofa::gui::component::AddRecordedCameraButtonSettingClass. Initial value:= core::RegisterObject(""Save Camera's View Point Button configuration""); .add< AddRecordedCameraButtonSetting >(); .addAlias(""AddRecordedCameraButton""). ◆ AttachBodyButtonSettingClass. int sofa::gui::component::AttachBodyButtonSettingClass. Initial value:= core::RegisterObject(""Attach Body Button configuration""); .add< AttachBodyButtonSetting >(); .addAlias(""AttachBodyButton""). ◆ ConstraintAttachButtonSettingClass. int sofa::gui::component::ConstraintAttachButtonSettingClass. Initial value:= core::RegisterObject(""Attach an object to the mouse using lagrangian multiplier""); .add< ConstraintAttachButtonSetting >(). ◆ FixPickedParticleButtonSetting",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html:1708,Modifiability,config,configuration,1708,"();  ; void init ();  . Variables; int AddFrameButtonSettingClass;  ; int AddRecordedCameraButtonSettingClass;  ; int StartNavigationButtonSettingClass;  ; int AttachBodyButtonSettingClass;  ; int ConstraintAttachButtonSettingClass;  ; int FixPickedParticleButtonSettingClass;  . Function Documentation. ◆ getModuleName(). const char * sofa::gui::component::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::gui::component::getModuleVersion ; (; ). ◆ init(). SOFA_GUI_COMPONENT_API void sofa::gui::component::init ; (; ). ◆ initExternalModule(). void sofa::gui::component::initExternalModule ; (; ). Variable Documentation. ◆ AddFrameButtonSettingClass. int sofa::gui::component::AddFrameButtonSettingClass. Initial value:= core::RegisterObject(""Add a frame to a skinned model""); .add< AddFrameButtonSetting >(); .addAlias(""AddFrameButton""). ◆ AddRecordedCameraButtonSettingClass. int sofa::gui::component::AddRecordedCameraButtonSettingClass. Initial value:= core::RegisterObject(""Save Camera's View Point Button configuration""); .add< AddRecordedCameraButtonSetting >(); .addAlias(""AddRecordedCameraButton""). ◆ AttachBodyButtonSettingClass. int sofa::gui::component::AttachBodyButtonSettingClass. Initial value:= core::RegisterObject(""Attach Body Button configuration""); .add< AttachBodyButtonSetting >(); .addAlias(""AttachBodyButton""). ◆ ConstraintAttachButtonSettingClass. int sofa::gui::component::ConstraintAttachButtonSettingClass. Initial value:= core::RegisterObject(""Attach an object to the mouse using lagrangian multiplier""); .add< ConstraintAttachButtonSetting >(). ◆ FixPickedParticleButtonSettingClass. int sofa::gui::component::FixPickedParticleButtonSettingClass. Initial value:= core::RegisterObject(""Fix a picked particle in space""); .add< FixPickedParticleButtonSetting >(); .addAlias(""FixPickedParticleButton""). ◆ StartNavigationButtonSettingClass. int sofa::gui::component::StartNavigationButtonSettingClass. Initial value:= core::RegisterObject(""Start Navigation Bu",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html:1950,Modifiability,config,configuration,1950,"tingClass;  ; int ConstraintAttachButtonSettingClass;  ; int FixPickedParticleButtonSettingClass;  . Function Documentation. ◆ getModuleName(). const char * sofa::gui::component::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::gui::component::getModuleVersion ; (; ). ◆ init(). SOFA_GUI_COMPONENT_API void sofa::gui::component::init ; (; ). ◆ initExternalModule(). void sofa::gui::component::initExternalModule ; (; ). Variable Documentation. ◆ AddFrameButtonSettingClass. int sofa::gui::component::AddFrameButtonSettingClass. Initial value:= core::RegisterObject(""Add a frame to a skinned model""); .add< AddFrameButtonSetting >(); .addAlias(""AddFrameButton""). ◆ AddRecordedCameraButtonSettingClass. int sofa::gui::component::AddRecordedCameraButtonSettingClass. Initial value:= core::RegisterObject(""Save Camera's View Point Button configuration""); .add< AddRecordedCameraButtonSetting >(); .addAlias(""AddRecordedCameraButton""). ◆ AttachBodyButtonSettingClass. int sofa::gui::component::AttachBodyButtonSettingClass. Initial value:= core::RegisterObject(""Attach Body Button configuration""); .add< AttachBodyButtonSetting >(); .addAlias(""AttachBodyButton""). ◆ ConstraintAttachButtonSettingClass. int sofa::gui::component::ConstraintAttachButtonSettingClass. Initial value:= core::RegisterObject(""Attach an object to the mouse using lagrangian multiplier""); .add< ConstraintAttachButtonSetting >(). ◆ FixPickedParticleButtonSettingClass. int sofa::gui::component::FixPickedParticleButtonSettingClass. Initial value:= core::RegisterObject(""Fix a picked particle in space""); .add< FixPickedParticleButtonSetting >(); .addAlias(""FixPickedParticleButton""). ◆ StartNavigationButtonSettingClass. int sofa::gui::component::StartNavigationButtonSettingClass. Initial value:= core::RegisterObject(""Start Navigation Button configuration""); .add< StartNavigationButtonSetting >(); .addAlias(""StartNavigationButton""). sofaguicomponent; Generated on Mon Nov 11 2024 03:19:19 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html:2687,Modifiability,config,configuration,2687,"tingClass;  ; int ConstraintAttachButtonSettingClass;  ; int FixPickedParticleButtonSettingClass;  . Function Documentation. ◆ getModuleName(). const char * sofa::gui::component::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::gui::component::getModuleVersion ; (; ). ◆ init(). SOFA_GUI_COMPONENT_API void sofa::gui::component::init ; (; ). ◆ initExternalModule(). void sofa::gui::component::initExternalModule ; (; ). Variable Documentation. ◆ AddFrameButtonSettingClass. int sofa::gui::component::AddFrameButtonSettingClass. Initial value:= core::RegisterObject(""Add a frame to a skinned model""); .add< AddFrameButtonSetting >(); .addAlias(""AddFrameButton""). ◆ AddRecordedCameraButtonSettingClass. int sofa::gui::component::AddRecordedCameraButtonSettingClass. Initial value:= core::RegisterObject(""Save Camera's View Point Button configuration""); .add< AddRecordedCameraButtonSetting >(); .addAlias(""AddRecordedCameraButton""). ◆ AttachBodyButtonSettingClass. int sofa::gui::component::AttachBodyButtonSettingClass. Initial value:= core::RegisterObject(""Attach Body Button configuration""); .add< AttachBodyButtonSetting >(); .addAlias(""AttachBodyButton""). ◆ ConstraintAttachButtonSettingClass. int sofa::gui::component::ConstraintAttachButtonSettingClass. Initial value:= core::RegisterObject(""Attach an object to the mouse using lagrangian multiplier""); .add< ConstraintAttachButtonSetting >(). ◆ FixPickedParticleButtonSettingClass. int sofa::gui::component::FixPickedParticleButtonSettingClass. Initial value:= core::RegisterObject(""Fix a picked particle in space""); .add< FixPickedParticleButtonSetting >(); .addAlias(""FixPickedParticleButton""). ◆ StartNavigationButtonSettingClass. int sofa::gui::component::StartNavigationButtonSettingClass. Initial value:= core::RegisterObject(""Start Navigation Button configuration""); .add< StartNavigationButtonSetting >(); .addAlias(""StartNavigationButton""). sofaguicomponent; Generated on Mon Nov 11 2024 03:19:19 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html:235,Performance,perform,performer,235,"﻿. SOFA API: sofa::gui::component Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Functions |; Variables . sofa::gui::component Namespace Reference . Namespaces;  performer;  . Classes; class  AddFrameButtonSetting;  ; class  AddRecordedCameraButtonSetting;  ; class  StartNavigationButtonSetting;  ; class  AttachBodyButtonSetting;  ; class  ConstraintAttachButtonSetting;  ; class  FixPickedParticleButtonSetting;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; void init ();  . Variables; int AddFrameButtonSettingClass;  ; int AddRecordedCameraButtonSettingClass;  ; int StartNavigationButtonSettingClass;  ; int AttachBodyButtonSettingClass;  ; int ConstraintAttachButtonSettingClass;  ; int FixPickedParticleButtonSettingClass;  . Function Documentation. ◆ getModuleName(). const char * sofa::gui::component::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::gui::component::getModuleVersion ; (; ). ◆ init(). SOFA_GUI_COMPONENT_API void sofa::gui::component::init ; (; ). ◆ initExternalModule(). void sofa::gui::component::initExternalModule ; (; ). Variable Documentation. ◆ AddFrameButtonSettingClass. int sofa::gui::component::AddFrameButtonSettingClass. Initial value:= core::RegisterObject(""Add a frame to a skinned model""); .add< AddFrameButtonSetting >(); .addAlias(""AddFrameButton""). ◆ AddRecordedCameraButtonSettingClass. int sofa::gui::component::AddRecordedCameraButtonSettingClass. Initial value:= core::RegisterObject(""Save Camera's View Point Button configuration""); .add< AddRecordedCameraButtonSetting >(); .addAlias(""AddRecordedCameraButton""). ◆ AttachBodyButtonSettingClass. int sofa::gui::component::AttachBodyButtonSettingClass. Initial value:= core::RegisterObject(""Attach Body Button configuration""); .add< AttachBodyButtonSetting >();",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:163,Modifiability,Variab,Variables,163,"﻿. SOFA API: sofa::gui::component::performer Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Variables . sofa::gui::component::performer Namespace Reference . Classes; class  AddRecordedCameraPerformer;  ; class  AttachBodyPerformer;  ; class  BaseAttachBodyPerformer;  ; class  ComponentMouseInteraction;  ; class  TComponentMouseInteraction;  ; class  ConstraintAttachBodyPerformer;  ; class  FixParticlePerformerConfiguration;  ; class  FixParticlePerformer;  ; class  InciseAlongPathPerformerConfiguration;  ; class  InciseAlongPathPerformer;  ; class  MouseInteractor;  class to execute specific tasks of the Mouse More...;  ; class  InteractionPerformer;  ; class  TInteractionPerformer;  ; struct  BodyPicked;  Represents a point on an object. More...;  ; class  BaseMouseInteractor;  ; class  RemovePrimitivePerformerConfiguration;  ; class  RemovePrimitivePerformer;  ; class  StartNavigationPerformer;  ; class  SuturePointPerformerConfiguration;  ; class  SuturePointPerformer;  ; class  TopologicalChangeManager;  a class to manage the handling of topological changes which have been requested from the Collision Model More...;  . Typedefs; using FixParticlePerformer3d = FixParticlePerformer< defaulttype::Vec3Types >;  . Variables; helper::Creator< InteractionPerformer::InteractionPerformerFactory, AddRecordedCameraPerformer > AddRecordedCameraPerformerClass (""AddRecordedCamera"");  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer< defaulttype::Vec2Types > > AttachBodyPerformerVec2dClass (""AttachBody"", true);  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer< defaulttype::Vec3Types > > AttachBodyPerformerVec3dClass (""AttachBody"", true);  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer< defaulttype::Rigid3Types > > AttachBodyPerformerRigid3dClass (""AttachBody"", true);  ; helper::Creat",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:1305,Modifiability,Variab,Variables,1305," Variables; helper::Creator< InteractionPerformer::InteractionPerformerFactory, AddRecordedCameraPerformer > AddRecordedCameraPerformerClass (""AddRecordedCamera"");  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer< defaulttype::Vec2Types > > AttachBodyPerformerVec2dClass (""AttachBody"", true);  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer< defaulttype::Vec3Types > > AttachBodyPerformerVec3dClass (""AttachBody"", true);  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer< defaulttype::Rigid3Types > > AttachBodyPerformerRigid3dClass (""AttachBody"", true);  ; helper::Creat",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:4602,Modifiability,Variab,Variable,4602,"SphereCollisionModel<defaulttype::Rigid3Types>>(&FixParticlePerformer3d::getFixationPointsSphere);  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, InciseAlongPathPerformer > InciseAlongPathPerformerClass (""InciseAlongPath"");  ; int MouseInteractorClass;  ; int MouseInteractorRigidClass;  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, RemovePrimitivePerformer< defaulttype::Vec3Types > > RemovePrimitivePerformerVec3Class (""RemovePrimitive"", true);  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, StartNavigationPerformer > StartNavigationPerformerClass (""StartNavigation"");  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, SuturePointPerformer< defaulttype::Vec3Types > > SuturePointPerformerVec3Class (""SuturePoints"", true);  . Typedef Documentation. ◆ FixParticlePerformer3d. using sofa::gui::component::performer::FixParticlePerformer3d = typedef FixParticlePerformer<defaulttype::Vec3Types>. Variable Documentation. ◆ AddRecordedCameraPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AddRecordedCameraPerformer> sofa::gui::component::performer::AddRecordedCameraPerformerClass(""AddRecordedCamera"") ; (; ""AddRecordedCamera"" ; ). ◆ AttachBodyPerformerRigid3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Rigid3Types> > sofa::gui::component::performer::AttachBodyPerformerRigid3dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ AttachBodyPerformerVec2dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Vec2Types> > sofa::gui::component::performer::AttachBodyPerformerVec2dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ AttachBodyPerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::AttachBodyPerformerVec3d",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:35,Performance,perform,performer,35,"﻿. SOFA API: sofa::gui::component::performer Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Variables . sofa::gui::component::performer Namespace Reference . Classes; class  AddRecordedCameraPerformer;  ; class  AttachBodyPerformer;  ; class  BaseAttachBodyPerformer;  ; class  ComponentMouseInteraction;  ; class  TComponentMouseInteraction;  ; class  ConstraintAttachBodyPerformer;  ; class  FixParticlePerformerConfiguration;  ; class  FixParticlePerformer;  ; class  InciseAlongPathPerformerConfiguration;  ; class  InciseAlongPathPerformer;  ; class  MouseInteractor;  class to execute specific tasks of the Mouse More...;  ; class  InteractionPerformer;  ; class  TInteractionPerformer;  ; struct  BodyPicked;  Represents a point on an object. More...;  ; class  BaseMouseInteractor;  ; class  RemovePrimitivePerformerConfiguration;  ; class  RemovePrimitivePerformer;  ; class  StartNavigationPerformer;  ; class  SuturePointPerformerConfiguration;  ; class  SuturePointPerformer;  ; class  TopologicalChangeManager;  a class to manage the handling of topological changes which have been requested from the Collision Model More...;  . Typedefs; using FixParticlePerformer3d = FixParticlePerformer< defaulttype::Vec3Types >;  . Variables; helper::Creator< InteractionPerformer::InteractionPerformerFactory, AddRecordedCameraPerformer > AddRecordedCameraPerformerClass (""AddRecordedCamera"");  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer< defaulttype::Vec2Types > > AttachBodyPerformerVec2dClass (""AttachBody"", true);  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer< defaulttype::Vec3Types > > AttachBodyPerformerVec3dClass (""AttachBody"", true);  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer< defaulttype::Rigid3Types > > AttachBodyPerformerRigid3dClass (""AttachBody"", true);  ; helper::Creat",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:197,Performance,perform,performer,197,"﻿. SOFA API: sofa::gui::component::performer Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Variables . sofa::gui::component::performer Namespace Reference . Classes; class  AddRecordedCameraPerformer;  ; class  AttachBodyPerformer;  ; class  BaseAttachBodyPerformer;  ; class  ComponentMouseInteraction;  ; class  TComponentMouseInteraction;  ; class  ConstraintAttachBodyPerformer;  ; class  FixParticlePerformerConfiguration;  ; class  FixParticlePerformer;  ; class  InciseAlongPathPerformerConfiguration;  ; class  InciseAlongPathPerformer;  ; class  MouseInteractor;  class to execute specific tasks of the Mouse More...;  ; class  InteractionPerformer;  ; class  TInteractionPerformer;  ; struct  BodyPicked;  Represents a point on an object. More...;  ; class  BaseMouseInteractor;  ; class  RemovePrimitivePerformerConfiguration;  ; class  RemovePrimitivePerformer;  ; class  StartNavigationPerformer;  ; class  SuturePointPerformerConfiguration;  ; class  SuturePointPerformer;  ; class  TopologicalChangeManager;  a class to manage the handling of topological changes which have been requested from the Collision Model More...;  . Typedefs; using FixParticlePerformer3d = FixParticlePerformer< defaulttype::Vec3Types >;  . Variables; helper::Creator< InteractionPerformer::InteractionPerformerFactory, AddRecordedCameraPerformer > AddRecordedCameraPerformerClass (""AddRecordedCamera"");  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer< defaulttype::Vec2Types > > AttachBodyPerformerVec2dClass (""AttachBody"", true);  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer< defaulttype::Vec3Types > > AttachBodyPerformerVec3dClass (""AttachBody"", true);  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer< defaulttype::Rigid3Types > > AttachBodyPerformerRigid3dClass (""AttachBody"", true);  ; helper::Creat",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:4512,Performance,perform,performer,4512,"igidSphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Rigid3Types>>(&FixParticlePerformer3d::getFixationPointsSphere);  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, InciseAlongPathPerformer > InciseAlongPathPerformerClass (""InciseAlongPath"");  ; int MouseInteractorClass;  ; int MouseInteractorRigidClass;  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, RemovePrimitivePerformer< defaulttype::Vec3Types > > RemovePrimitivePerformerVec3Class (""RemovePrimitive"", true);  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, StartNavigationPerformer > StartNavigationPerformerClass (""StartNavigation"");  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, SuturePointPerformer< defaulttype::Vec3Types > > SuturePointPerformerVec3Class (""SuturePoints"", true);  . Typedef Documentation. ◆ FixParticlePerformer3d. using sofa::gui::component::performer::FixParticlePerformer3d = typedef FixParticlePerformer<defaulttype::Vec3Types>. Variable Documentation. ◆ AddRecordedCameraPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AddRecordedCameraPerformer> sofa::gui::component::performer::AddRecordedCameraPerformerClass(""AddRecordedCamera"") ; (; ""AddRecordedCamera"" ; ). ◆ AttachBodyPerformerRigid3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Rigid3Types> > sofa::gui::component::performer::AttachBodyPerformerRigid3dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ AttachBodyPerformerVec2dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Vec2Types> > sofa::gui::component::performer::AttachBodyPerformerVec2dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ AttachBodyPerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype:",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:4778,Performance,perform,performer,4778,"PerformerFactory, InciseAlongPathPerformer > InciseAlongPathPerformerClass (""InciseAlongPath"");  ; int MouseInteractorClass;  ; int MouseInteractorRigidClass;  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, RemovePrimitivePerformer< defaulttype::Vec3Types > > RemovePrimitivePerformerVec3Class (""RemovePrimitive"", true);  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, StartNavigationPerformer > StartNavigationPerformerClass (""StartNavigation"");  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, SuturePointPerformer< defaulttype::Vec3Types > > SuturePointPerformerVec3Class (""SuturePoints"", true);  . Typedef Documentation. ◆ FixParticlePerformer3d. using sofa::gui::component::performer::FixParticlePerformer3d = typedef FixParticlePerformer<defaulttype::Vec3Types>. Variable Documentation. ◆ AddRecordedCameraPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AddRecordedCameraPerformer> sofa::gui::component::performer::AddRecordedCameraPerformerClass(""AddRecordedCamera"") ; (; ""AddRecordedCamera"" ; ). ◆ AttachBodyPerformerRigid3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Rigid3Types> > sofa::gui::component::performer::AttachBodyPerformerRigid3dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ AttachBodyPerformerVec2dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Vec2Types> > sofa::gui::component::performer::AttachBodyPerformerVec2dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ AttachBodyPerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::AttachBodyPerformerVec3dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ ComponentMouseInteractionRigid3Class. helper::Creator<ComponentMouseInteraction::Compone",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:5044,Performance,perform,performer,5044,"r< defaulttype::Vec3Types > > RemovePrimitivePerformerVec3Class (""RemovePrimitive"", true);  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, StartNavigationPerformer > StartNavigationPerformerClass (""StartNavigation"");  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, SuturePointPerformer< defaulttype::Vec3Types > > SuturePointPerformerVec3Class (""SuturePoints"", true);  . Typedef Documentation. ◆ FixParticlePerformer3d. using sofa::gui::component::performer::FixParticlePerformer3d = typedef FixParticlePerformer<defaulttype::Vec3Types>. Variable Documentation. ◆ AddRecordedCameraPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AddRecordedCameraPerformer> sofa::gui::component::performer::AddRecordedCameraPerformerClass(""AddRecordedCamera"") ; (; ""AddRecordedCamera"" ; ). ◆ AttachBodyPerformerRigid3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Rigid3Types> > sofa::gui::component::performer::AttachBodyPerformerRigid3dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ AttachBodyPerformerVec2dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Vec2Types> > sofa::gui::component::performer::AttachBodyPerformerVec2dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ AttachBodyPerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::AttachBodyPerformerVec3dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ ComponentMouseInteractionRigid3Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Rigid3Types> > sofa::gui::component::performer::ComponentMouseInteractionRigid3Class(""MouseSpringRigid3"", true) ; (; ""MouseSpringRigid3"" ; , . true ;  . ). ◆ ComponentMouseInteractionVe",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:5312,Performance,perform,performer,5312,"ionPerformer::InteractionPerformerFactory, SuturePointPerformer< defaulttype::Vec3Types > > SuturePointPerformerVec3Class (""SuturePoints"", true);  . Typedef Documentation. ◆ FixParticlePerformer3d. using sofa::gui::component::performer::FixParticlePerformer3d = typedef FixParticlePerformer<defaulttype::Vec3Types>. Variable Documentation. ◆ AddRecordedCameraPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AddRecordedCameraPerformer> sofa::gui::component::performer::AddRecordedCameraPerformerClass(""AddRecordedCamera"") ; (; ""AddRecordedCamera"" ; ). ◆ AttachBodyPerformerRigid3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Rigid3Types> > sofa::gui::component::performer::AttachBodyPerformerRigid3dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ AttachBodyPerformerVec2dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Vec2Types> > sofa::gui::component::performer::AttachBodyPerformerVec2dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ AttachBodyPerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::AttachBodyPerformerVec3dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ ComponentMouseInteractionRigid3Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Rigid3Types> > sofa::gui::component::performer::ComponentMouseInteractionRigid3Class(""MouseSpringRigid3"", true) ; (; ""MouseSpringRigid3"" ; , . true ;  . ). ◆ ComponentMouseInteractionVec2Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Vec2Types> > sofa::gui::component::performer::ComponentMouseInteractionVec2Class(""MouseSpringVec2"", true) ; (; ""MouseSpringVec2"" ; , . true ; ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:5578,Performance,perform,performer,5578,"def FixParticlePerformer<defaulttype::Vec3Types>. Variable Documentation. ◆ AddRecordedCameraPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AddRecordedCameraPerformer> sofa::gui::component::performer::AddRecordedCameraPerformerClass(""AddRecordedCamera"") ; (; ""AddRecordedCamera"" ; ). ◆ AttachBodyPerformerRigid3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Rigid3Types> > sofa::gui::component::performer::AttachBodyPerformerRigid3dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ AttachBodyPerformerVec2dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Vec2Types> > sofa::gui::component::performer::AttachBodyPerformerVec2dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ AttachBodyPerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::AttachBodyPerformerVec3dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ ComponentMouseInteractionRigid3Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Rigid3Types> > sofa::gui::component::performer::ComponentMouseInteractionRigid3Class(""MouseSpringRigid3"", true) ; (; ""MouseSpringRigid3"" ; , . true ;  . ). ◆ ComponentMouseInteractionVec2Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Vec2Types> > sofa::gui::component::performer::ComponentMouseInteractionVec2Class(""MouseSpringVec2"", true) ; (; ""MouseSpringVec2"" ; , . true ;  . ). ◆ ComponentMouseInteractionVec3Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Vec3Types> > sofa::gui::component::performer::ComponentMouseInteractionVec3Class(""MouseSpringVec3"", true)",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:5870,Performance,perform,performer,5870,"; ""AddRecordedCamera"" ; ). ◆ AttachBodyPerformerRigid3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Rigid3Types> > sofa::gui::component::performer::AttachBodyPerformerRigid3dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ AttachBodyPerformerVec2dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Vec2Types> > sofa::gui::component::performer::AttachBodyPerformerVec2dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ AttachBodyPerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::AttachBodyPerformerVec3dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ ComponentMouseInteractionRigid3Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Rigid3Types> > sofa::gui::component::performer::ComponentMouseInteractionRigid3Class(""MouseSpringRigid3"", true) ; (; ""MouseSpringRigid3"" ; , . true ;  . ). ◆ ComponentMouseInteractionVec2Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Vec2Types> > sofa::gui::component::performer::ComponentMouseInteractionVec2Class(""MouseSpringVec2"", true) ; (; ""MouseSpringVec2"" ; , . true ;  . ). ◆ ComponentMouseInteractionVec3Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Vec3Types> > sofa::gui::component::performer::ComponentMouseInteractionVec3Class(""MouseSpringVec3"", true) ; (; ""MouseSpringVec3"" ; , . true ;  . ). ◆ ConstraintAttachBodyPerformerRigidClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, ConstraintAttachBodyPerformer<defaulttype::RigidTypes> > sofa::gui::component::performer::ConstraintAttachBodyPerformerRigidClass(""Constrain",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:6179,Performance,perform,performer,6179,"BodyPerformerVec2dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Vec2Types> > sofa::gui::component::performer::AttachBodyPerformerVec2dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ AttachBodyPerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::AttachBodyPerformerVec3dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ ComponentMouseInteractionRigid3Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Rigid3Types> > sofa::gui::component::performer::ComponentMouseInteractionRigid3Class(""MouseSpringRigid3"", true) ; (; ""MouseSpringRigid3"" ; , . true ;  . ). ◆ ComponentMouseInteractionVec2Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Vec2Types> > sofa::gui::component::performer::ComponentMouseInteractionVec2Class(""MouseSpringVec2"", true) ; (; ""MouseSpringVec2"" ; , . true ;  . ). ◆ ComponentMouseInteractionVec3Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Vec3Types> > sofa::gui::component::performer::ComponentMouseInteractionVec3Class(""MouseSpringVec3"", true) ; (; ""MouseSpringVec3"" ; , . true ;  . ). ◆ ConstraintAttachBodyPerformerRigidClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, ConstraintAttachBodyPerformer<defaulttype::RigidTypes> > sofa::gui::component::performer::ConstraintAttachBodyPerformerRigidClass(""ConstraintAttachBody"", true) ; (; ""ConstraintAttachBody"" ; , . true ;  . ). ◆ ConstraintAttachBodyPerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, ConstraintAttachBodyPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::ConstraintAttachBodyPerformerVec3dClass(""",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:6482,Performance,perform,performer,6482,"tor<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::AttachBodyPerformerVec3dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ ComponentMouseInteractionRigid3Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Rigid3Types> > sofa::gui::component::performer::ComponentMouseInteractionRigid3Class(""MouseSpringRigid3"", true) ; (; ""MouseSpringRigid3"" ; , . true ;  . ). ◆ ComponentMouseInteractionVec2Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Vec2Types> > sofa::gui::component::performer::ComponentMouseInteractionVec2Class(""MouseSpringVec2"", true) ; (; ""MouseSpringVec2"" ; , . true ;  . ). ◆ ComponentMouseInteractionVec3Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Vec3Types> > sofa::gui::component::performer::ComponentMouseInteractionVec3Class(""MouseSpringVec3"", true) ; (; ""MouseSpringVec3"" ; , . true ;  . ). ◆ ConstraintAttachBodyPerformerRigidClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, ConstraintAttachBodyPerformer<defaulttype::RigidTypes> > sofa::gui::component::performer::ConstraintAttachBodyPerformerRigidClass(""ConstraintAttachBody"", true) ; (; ""ConstraintAttachBody"" ; , . true ;  . ). ◆ ConstraintAttachBodyPerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, ConstraintAttachBodyPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::ConstraintAttachBodyPerformerVec3dClass(""ConstraintAttachBody"", true) ; (; ""ConstraintAttachBody"" ; , . true ;  . ). ◆ FixParticlePerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, FixParticlePerformer3d > sofa::gui::component::performer::FixParticlePerformerVec3dClass(""FixParticle"", true) ; (; ""FixParticl",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:6784,Performance,perform,performer,6784,"tMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Rigid3Types> > sofa::gui::component::performer::ComponentMouseInteractionRigid3Class(""MouseSpringRigid3"", true) ; (; ""MouseSpringRigid3"" ; , . true ;  . ). ◆ ComponentMouseInteractionVec2Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Vec2Types> > sofa::gui::component::performer::ComponentMouseInteractionVec2Class(""MouseSpringVec2"", true) ; (; ""MouseSpringVec2"" ; , . true ;  . ). ◆ ComponentMouseInteractionVec3Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Vec3Types> > sofa::gui::component::performer::ComponentMouseInteractionVec3Class(""MouseSpringVec3"", true) ; (; ""MouseSpringVec3"" ; , . true ;  . ). ◆ ConstraintAttachBodyPerformerRigidClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, ConstraintAttachBodyPerformer<defaulttype::RigidTypes> > sofa::gui::component::performer::ConstraintAttachBodyPerformerRigidClass(""ConstraintAttachBody"", true) ; (; ""ConstraintAttachBody"" ; , . true ;  . ). ◆ ConstraintAttachBodyPerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, ConstraintAttachBodyPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::ConstraintAttachBodyPerformerVec3dClass(""ConstraintAttachBody"", true) ; (; ""ConstraintAttachBody"" ; , . true ;  . ). ◆ FixParticlePerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, FixParticlePerformer3d > sofa::gui::component::performer::FixParticlePerformerVec3dClass(""FixParticle"", true) ; (; ""FixParticle"" ; , . true ;  . ). ◆ InciseAlongPathPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, InciseAlongPathPerformer> sofa::gui::component::performer::InciseAlongPathPerformerClass(""InciseAlongPath"") ; (; ""InciseAlongPath"" ; ). ◆ MouseInteractorClass. int sofa::gui::component::perfo",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:7100,Performance,perform,performer,7100,"InteractionFactory, TComponentMouseInteraction<defaulttype::Vec2Types> > sofa::gui::component::performer::ComponentMouseInteractionVec2Class(""MouseSpringVec2"", true) ; (; ""MouseSpringVec2"" ; , . true ;  . ). ◆ ComponentMouseInteractionVec3Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Vec3Types> > sofa::gui::component::performer::ComponentMouseInteractionVec3Class(""MouseSpringVec3"", true) ; (; ""MouseSpringVec3"" ; , . true ;  . ). ◆ ConstraintAttachBodyPerformerRigidClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, ConstraintAttachBodyPerformer<defaulttype::RigidTypes> > sofa::gui::component::performer::ConstraintAttachBodyPerformerRigidClass(""ConstraintAttachBody"", true) ; (; ""ConstraintAttachBody"" ; , . true ;  . ). ◆ ConstraintAttachBodyPerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, ConstraintAttachBodyPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::ConstraintAttachBodyPerformerVec3dClass(""ConstraintAttachBody"", true) ; (; ""ConstraintAttachBody"" ; , . true ;  . ). ◆ FixParticlePerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, FixParticlePerformer3d > sofa::gui::component::performer::FixParticlePerformerVec3dClass(""FixParticle"", true) ; (; ""FixParticle"" ; , . true ;  . ). ◆ InciseAlongPathPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, InciseAlongPathPerformer> sofa::gui::component::performer::InciseAlongPathPerformerClass(""InciseAlongPath"") ; (; ""InciseAlongPath"" ; ). ◆ MouseInteractorClass. int sofa::gui::component::performer::MouseInteractorClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse""); .add< MouseInteractor<defaulttype::Vec2Types> >(); .add< MouseInteractor<defaulttype::Vec3Types> >(). ◆ MouseInteractorRigidClass. int sofa::gui::component::performer::MouseInteractorRigidCla",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:7376,Performance,perform,performer,7376,"teraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Vec3Types> > sofa::gui::component::performer::ComponentMouseInteractionVec3Class(""MouseSpringVec3"", true) ; (; ""MouseSpringVec3"" ; , . true ;  . ). ◆ ConstraintAttachBodyPerformerRigidClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, ConstraintAttachBodyPerformer<defaulttype::RigidTypes> > sofa::gui::component::performer::ConstraintAttachBodyPerformerRigidClass(""ConstraintAttachBody"", true) ; (; ""ConstraintAttachBody"" ; , . true ;  . ). ◆ ConstraintAttachBodyPerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, ConstraintAttachBodyPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::ConstraintAttachBodyPerformerVec3dClass(""ConstraintAttachBody"", true) ; (; ""ConstraintAttachBody"" ; , . true ;  . ). ◆ FixParticlePerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, FixParticlePerformer3d > sofa::gui::component::performer::FixParticlePerformerVec3dClass(""FixParticle"", true) ; (; ""FixParticle"" ; , . true ;  . ). ◆ InciseAlongPathPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, InciseAlongPathPerformer> sofa::gui::component::performer::InciseAlongPathPerformerClass(""InciseAlongPath"") ; (; ""InciseAlongPath"" ; ). ◆ MouseInteractorClass. int sofa::gui::component::performer::MouseInteractorClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse""); .add< MouseInteractor<defaulttype::Vec2Types> >(); .add< MouseInteractor<defaulttype::Vec3Types> >(). ◆ MouseInteractorRigidClass. int sofa::gui::component::performer::MouseInteractorRigidClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse and rigid objects""); .add< MouseInteractor<defaulttype::Rigid3Types> >(). ◆ RemovePrimitivePerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, Re",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:7625,Performance,perform,performer,7625,"achBodyPerformerRigidClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, ConstraintAttachBodyPerformer<defaulttype::RigidTypes> > sofa::gui::component::performer::ConstraintAttachBodyPerformerRigidClass(""ConstraintAttachBody"", true) ; (; ""ConstraintAttachBody"" ; , . true ;  . ). ◆ ConstraintAttachBodyPerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, ConstraintAttachBodyPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::ConstraintAttachBodyPerformerVec3dClass(""ConstraintAttachBody"", true) ; (; ""ConstraintAttachBody"" ; , . true ;  . ). ◆ FixParticlePerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, FixParticlePerformer3d > sofa::gui::component::performer::FixParticlePerformerVec3dClass(""FixParticle"", true) ; (; ""FixParticle"" ; , . true ;  . ). ◆ InciseAlongPathPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, InciseAlongPathPerformer> sofa::gui::component::performer::InciseAlongPathPerformerClass(""InciseAlongPath"") ; (; ""InciseAlongPath"" ; ). ◆ MouseInteractorClass. int sofa::gui::component::performer::MouseInteractorClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse""); .add< MouseInteractor<defaulttype::Vec2Types> >(); .add< MouseInteractor<defaulttype::Vec3Types> >(). ◆ MouseInteractorRigidClass. int sofa::gui::component::performer::MouseInteractorRigidClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse and rigid objects""); .add< MouseInteractor<defaulttype::Rigid3Types> >(). ◆ RemovePrimitivePerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, RemovePrimitivePerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::RemovePrimitivePerformerVec3Class(""RemovePrimitive"", true) ; (; ""RemovePrimitive"" ; , . true ;  . ). ◆ rigidSphereFixParticle. int sofa::gui::component::performer::rig",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:7763,Performance,perform,performer,7763,"a::gui::component::performer::ConstraintAttachBodyPerformerRigidClass(""ConstraintAttachBody"", true) ; (; ""ConstraintAttachBody"" ; , . true ;  . ). ◆ ConstraintAttachBodyPerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, ConstraintAttachBodyPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::ConstraintAttachBodyPerformerVec3dClass(""ConstraintAttachBody"", true) ; (; ""ConstraintAttachBody"" ; , . true ;  . ). ◆ FixParticlePerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, FixParticlePerformer3d > sofa::gui::component::performer::FixParticlePerformerVec3dClass(""FixParticle"", true) ; (; ""FixParticle"" ; , . true ;  . ). ◆ InciseAlongPathPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, InciseAlongPathPerformer> sofa::gui::component::performer::InciseAlongPathPerformerClass(""InciseAlongPath"") ; (; ""InciseAlongPath"" ; ). ◆ MouseInteractorClass. int sofa::gui::component::performer::MouseInteractorClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse""); .add< MouseInteractor<defaulttype::Vec2Types> >(); .add< MouseInteractor<defaulttype::Vec3Types> >(). ◆ MouseInteractorRigidClass. int sofa::gui::component::performer::MouseInteractorRigidClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse and rigid objects""); .add< MouseInteractor<defaulttype::Rigid3Types> >(). ◆ RemovePrimitivePerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, RemovePrimitivePerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::RemovePrimitivePerformerVec3Class(""RemovePrimitive"", true) ; (; ""RemovePrimitive"" ; , . true ;  . ). ◆ rigidSphereFixParticle. int sofa::gui::component::performer::rigidSphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Rigid3Types>>(&FixParticlePerformer3d::getFixationPo",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:7834,Performance,Perform,Perform,7834,"ntAttachBody"", true) ; (; ""ConstraintAttachBody"" ; , . true ;  . ). ◆ ConstraintAttachBodyPerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, ConstraintAttachBodyPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::ConstraintAttachBodyPerformerVec3dClass(""ConstraintAttachBody"", true) ; (; ""ConstraintAttachBody"" ; , . true ;  . ). ◆ FixParticlePerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, FixParticlePerformer3d > sofa::gui::component::performer::FixParticlePerformerVec3dClass(""FixParticle"", true) ; (; ""FixParticle"" ; , . true ;  . ). ◆ InciseAlongPathPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, InciseAlongPathPerformer> sofa::gui::component::performer::InciseAlongPathPerformerClass(""InciseAlongPath"") ; (; ""InciseAlongPath"" ; ). ◆ MouseInteractorClass. int sofa::gui::component::performer::MouseInteractorClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse""); .add< MouseInteractor<defaulttype::Vec2Types> >(); .add< MouseInteractor<defaulttype::Vec3Types> >(). ◆ MouseInteractorRigidClass. int sofa::gui::component::performer::MouseInteractorRigidClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse and rigid objects""); .add< MouseInteractor<defaulttype::Rigid3Types> >(). ◆ RemovePrimitivePerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, RemovePrimitivePerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::RemovePrimitivePerformerVec3Class(""RemovePrimitive"", true) ; (; ""RemovePrimitive"" ; , . true ;  . ). ◆ rigidSphereFixParticle. int sofa::gui::component::performer::rigidSphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Rigid3Types>>(&FixParticlePerformer3d::getFixationPointsSphere). ◆ sphereFixParticle. int sofa::gui::component::performer::sphereFi",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:8050,Performance,perform,performer,8050,"aulttype::Vec3Types> > sofa::gui::component::performer::ConstraintAttachBodyPerformerVec3dClass(""ConstraintAttachBody"", true) ; (; ""ConstraintAttachBody"" ; , . true ;  . ). ◆ FixParticlePerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, FixParticlePerformer3d > sofa::gui::component::performer::FixParticlePerformerVec3dClass(""FixParticle"", true) ; (; ""FixParticle"" ; , . true ;  . ). ◆ InciseAlongPathPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, InciseAlongPathPerformer> sofa::gui::component::performer::InciseAlongPathPerformerClass(""InciseAlongPath"") ; (; ""InciseAlongPath"" ; ). ◆ MouseInteractorClass. int sofa::gui::component::performer::MouseInteractorClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse""); .add< MouseInteractor<defaulttype::Vec2Types> >(); .add< MouseInteractor<defaulttype::Vec3Types> >(). ◆ MouseInteractorRigidClass. int sofa::gui::component::performer::MouseInteractorRigidClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse and rigid objects""); .add< MouseInteractor<defaulttype::Rigid3Types> >(). ◆ RemovePrimitivePerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, RemovePrimitivePerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::RemovePrimitivePerformerVec3Class(""RemovePrimitive"", true) ; (; ""RemovePrimitive"" ; , . true ;  . ). ◆ rigidSphereFixParticle. int sofa::gui::component::performer::rigidSphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Rigid3Types>>(&FixParticlePerformer3d::getFixationPointsSphere). ◆ sphereFixParticle. int sofa::gui::component::performer::sphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Vec3Types>>(&FixParticlePerformer3d::getFixationPointsSphere). ◆ StartNavigationPerformerClass. helper::Creator<Inter",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:8126,Performance,Perform,Perform,8126,"Class(""ConstraintAttachBody"", true) ; (; ""ConstraintAttachBody"" ; , . true ;  . ). ◆ FixParticlePerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, FixParticlePerformer3d > sofa::gui::component::performer::FixParticlePerformerVec3dClass(""FixParticle"", true) ; (; ""FixParticle"" ; , . true ;  . ). ◆ InciseAlongPathPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, InciseAlongPathPerformer> sofa::gui::component::performer::InciseAlongPathPerformerClass(""InciseAlongPath"") ; (; ""InciseAlongPath"" ; ). ◆ MouseInteractorClass. int sofa::gui::component::performer::MouseInteractorClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse""); .add< MouseInteractor<defaulttype::Vec2Types> >(); .add< MouseInteractor<defaulttype::Vec3Types> >(). ◆ MouseInteractorRigidClass. int sofa::gui::component::performer::MouseInteractorRigidClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse and rigid objects""); .add< MouseInteractor<defaulttype::Rigid3Types> >(). ◆ RemovePrimitivePerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, RemovePrimitivePerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::RemovePrimitivePerformerVec3Class(""RemovePrimitive"", true) ; (; ""RemovePrimitive"" ; , . true ;  . ). ◆ rigidSphereFixParticle. int sofa::gui::component::performer::rigidSphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Rigid3Types>>(&FixParticlePerformer3d::getFixationPointsSphere). ◆ sphereFixParticle. int sofa::gui::component::performer::sphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Vec3Types>>(&FixParticlePerformer3d::getFixationPointsSphere). ◆ StartNavigationPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, StartNavigationPerformer> sofa::gui::componen",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:8433,Performance,perform,performer,8433,"dClass(""FixParticle"", true) ; (; ""FixParticle"" ; , . true ;  . ). ◆ InciseAlongPathPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, InciseAlongPathPerformer> sofa::gui::component::performer::InciseAlongPathPerformerClass(""InciseAlongPath"") ; (; ""InciseAlongPath"" ; ). ◆ MouseInteractorClass. int sofa::gui::component::performer::MouseInteractorClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse""); .add< MouseInteractor<defaulttype::Vec2Types> >(); .add< MouseInteractor<defaulttype::Vec3Types> >(). ◆ MouseInteractorRigidClass. int sofa::gui::component::performer::MouseInteractorRigidClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse and rigid objects""); .add< MouseInteractor<defaulttype::Rigid3Types> >(). ◆ RemovePrimitivePerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, RemovePrimitivePerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::RemovePrimitivePerformerVec3Class(""RemovePrimitive"", true) ; (; ""RemovePrimitive"" ; , . true ;  . ). ◆ rigidSphereFixParticle. int sofa::gui::component::performer::rigidSphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Rigid3Types>>(&FixParticlePerformer3d::getFixationPointsSphere). ◆ sphereFixParticle. int sofa::gui::component::performer::sphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Vec3Types>>(&FixParticlePerformer3d::getFixationPointsSphere). ◆ StartNavigationPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, StartNavigationPerformer> sofa::gui::component::performer::StartNavigationPerformerClass(""StartNavigation"") ; (; ""StartNavigation"" ; ). ◆ SuturePointPerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, SuturePointPerformer<defaulttype::Vec3Types> > sofa::gui::component::perfor",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:8597,Performance,perform,performer,8597,"longPath"") ; (; ""InciseAlongPath"" ; ). ◆ MouseInteractorClass. int sofa::gui::component::performer::MouseInteractorClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse""); .add< MouseInteractor<defaulttype::Vec2Types> >(); .add< MouseInteractor<defaulttype::Vec3Types> >(). ◆ MouseInteractorRigidClass. int sofa::gui::component::performer::MouseInteractorRigidClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse and rigid objects""); .add< MouseInteractor<defaulttype::Rigid3Types> >(). ◆ RemovePrimitivePerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, RemovePrimitivePerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::RemovePrimitivePerformerVec3Class(""RemovePrimitive"", true) ; (; ""RemovePrimitive"" ; , . true ;  . ). ◆ rigidSphereFixParticle. int sofa::gui::component::performer::rigidSphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Rigid3Types>>(&FixParticlePerformer3d::getFixationPointsSphere). ◆ sphereFixParticle. int sofa::gui::component::performer::sphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Vec3Types>>(&FixParticlePerformer3d::getFixationPointsSphere). ◆ StartNavigationPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, StartNavigationPerformer> sofa::gui::component::performer::StartNavigationPerformerClass(""StartNavigation"") ; (; ""StartNavigation"" ; ). ◆ SuturePointPerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, SuturePointPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::SuturePointPerformerVec3Class(""SuturePoints"", true) ; (; ""SuturePoints"" ; , . true ;  . ). ◆ triangleFixParticle. int sofa::gui::component::performer::triangleFixParticle = FixParticlePerformer3d::RegisterSupportedModel<TriangleCollisionModel<defaulttype::V",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:8826,Performance,perform,performer,8826,"with the mouse""); .add< MouseInteractor<defaulttype::Vec2Types> >(); .add< MouseInteractor<defaulttype::Vec3Types> >(). ◆ MouseInteractorRigidClass. int sofa::gui::component::performer::MouseInteractorRigidClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse and rigid objects""); .add< MouseInteractor<defaulttype::Rigid3Types> >(). ◆ RemovePrimitivePerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, RemovePrimitivePerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::RemovePrimitivePerformerVec3Class(""RemovePrimitive"", true) ; (; ""RemovePrimitive"" ; , . true ;  . ). ◆ rigidSphereFixParticle. int sofa::gui::component::performer::rigidSphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Rigid3Types>>(&FixParticlePerformer3d::getFixationPointsSphere). ◆ sphereFixParticle. int sofa::gui::component::performer::sphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Vec3Types>>(&FixParticlePerformer3d::getFixationPointsSphere). ◆ StartNavigationPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, StartNavigationPerformer> sofa::gui::component::performer::StartNavigationPerformerClass(""StartNavigation"") ; (; ""StartNavigation"" ; ). ◆ SuturePointPerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, SuturePointPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::SuturePointPerformerVec3Class(""SuturePoints"", true) ; (; ""SuturePoints"" ; , . true ;  . ). ◆ triangleFixParticle. int sofa::gui::component::performer::triangleFixParticle = FixParticlePerformer3d::RegisterSupportedModel<TriangleCollisionModel<defaulttype::Vec3Types>>(&FixParticlePerformer3d::getFixationPointsTriangle<TriangleCollisionModel<defaulttype::Vec3Types>>). sofaguicomponentperformer; Generated on Mon Nov 11 2024 03:19:20 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:9149,Performance,perform,performer,9149,"with the mouse""); .add< MouseInteractor<defaulttype::Vec2Types> >(); .add< MouseInteractor<defaulttype::Vec3Types> >(). ◆ MouseInteractorRigidClass. int sofa::gui::component::performer::MouseInteractorRigidClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse and rigid objects""); .add< MouseInteractor<defaulttype::Rigid3Types> >(). ◆ RemovePrimitivePerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, RemovePrimitivePerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::RemovePrimitivePerformerVec3Class(""RemovePrimitive"", true) ; (; ""RemovePrimitive"" ; , . true ;  . ). ◆ rigidSphereFixParticle. int sofa::gui::component::performer::rigidSphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Rigid3Types>>(&FixParticlePerformer3d::getFixationPointsSphere). ◆ sphereFixParticle. int sofa::gui::component::performer::sphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Vec3Types>>(&FixParticlePerformer3d::getFixationPointsSphere). ◆ StartNavigationPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, StartNavigationPerformer> sofa::gui::component::performer::StartNavigationPerformerClass(""StartNavigation"") ; (; ""StartNavigation"" ; ). ◆ SuturePointPerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, SuturePointPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::SuturePointPerformerVec3Class(""SuturePoints"", true) ; (; ""SuturePoints"" ; , . true ;  . ). ◆ triangleFixParticle. int sofa::gui::component::performer::triangleFixParticle = FixParticlePerformer3d::RegisterSupportedModel<TriangleCollisionModel<defaulttype::Vec3Types>>(&FixParticlePerformer3d::getFixationPointsTriangle<TriangleCollisionModel<defaulttype::Vec3Types>>). sofaguicomponentperformer; Generated on Mon Nov 11 2024 03:19:20 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:9406,Performance,perform,performer,9406,"with the mouse""); .add< MouseInteractor<defaulttype::Vec2Types> >(); .add< MouseInteractor<defaulttype::Vec3Types> >(). ◆ MouseInteractorRigidClass. int sofa::gui::component::performer::MouseInteractorRigidClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse and rigid objects""); .add< MouseInteractor<defaulttype::Rigid3Types> >(). ◆ RemovePrimitivePerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, RemovePrimitivePerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::RemovePrimitivePerformerVec3Class(""RemovePrimitive"", true) ; (; ""RemovePrimitive"" ; , . true ;  . ). ◆ rigidSphereFixParticle. int sofa::gui::component::performer::rigidSphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Rigid3Types>>(&FixParticlePerformer3d::getFixationPointsSphere). ◆ sphereFixParticle. int sofa::gui::component::performer::sphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Vec3Types>>(&FixParticlePerformer3d::getFixationPointsSphere). ◆ StartNavigationPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, StartNavigationPerformer> sofa::gui::component::performer::StartNavigationPerformerClass(""StartNavigation"") ; (; ""StartNavigation"" ; ). ◆ SuturePointPerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, SuturePointPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::SuturePointPerformerVec3Class(""SuturePoints"", true) ; (; ""SuturePoints"" ; , . true ;  . ). ◆ triangleFixParticle. int sofa::gui::component::performer::triangleFixParticle = FixParticlePerformer3d::RegisterSupportedModel<TriangleCollisionModel<defaulttype::Vec3Types>>(&FixParticlePerformer3d::getFixationPointsTriangle<TriangleCollisionModel<defaulttype::Vec3Types>>). sofaguicomponentperformer; Generated on Mon Nov 11 2024 03:19:20 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:9557,Performance,perform,performer,9557,"with the mouse""); .add< MouseInteractor<defaulttype::Vec2Types> >(); .add< MouseInteractor<defaulttype::Vec3Types> >(). ◆ MouseInteractorRigidClass. int sofa::gui::component::performer::MouseInteractorRigidClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse and rigid objects""); .add< MouseInteractor<defaulttype::Rigid3Types> >(). ◆ RemovePrimitivePerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, RemovePrimitivePerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::RemovePrimitivePerformerVec3Class(""RemovePrimitive"", true) ; (; ""RemovePrimitive"" ; , . true ;  . ). ◆ rigidSphereFixParticle. int sofa::gui::component::performer::rigidSphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Rigid3Types>>(&FixParticlePerformer3d::getFixationPointsSphere). ◆ sphereFixParticle. int sofa::gui::component::performer::sphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Vec3Types>>(&FixParticlePerformer3d::getFixationPointsSphere). ◆ StartNavigationPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, StartNavigationPerformer> sofa::gui::component::performer::StartNavigationPerformerClass(""StartNavigation"") ; (; ""StartNavigation"" ; ). ◆ SuturePointPerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, SuturePointPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::SuturePointPerformerVec3Class(""SuturePoints"", true) ; (; ""SuturePoints"" ; , . true ;  . ). ◆ triangleFixParticle. int sofa::gui::component::performer::triangleFixParticle = FixParticlePerformer3d::RegisterSupportedModel<TriangleCollisionModel<defaulttype::Vec3Types>>(&FixParticlePerformer3d::getFixationPointsTriangle<TriangleCollisionModel<defaulttype::Vec3Types>>). sofaguicomponentperformer; Generated on Mon Nov 11 2024 03:19:20 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:6601,Deployability,update,update,6601,"; class  data_widget_container< sofa::core::topology::Topology::Tetrahedron >;  ; class  vector_data_trait< sofa::core::topology::Topology::Hexahedron >;  ; class  data_widget_container< sofa::core::topology::Topology::Hexahedron >;  ; class  vector_data_trait< sofa::type::Vec< N, T > >;  sofa::defaulttype::Vec support More...;  ; class  data_widget_container< sofa::type::Vec< N, T > >;  ; class  vector_data_trait< Quat< T > >;  std::helper::Quater support More...;  ; class  data_widget_container< Quat< T > >;  ; class  data_widget_trait< Polynomial_LD< Real, N > >;  ; class  vector_data_trait< sofa::type::Mat< L, C, T > >;  sofa::type::Mat support More...;  ; class  data_widget_container< sofa::type::Mat< L, C, T > >;  ; class  RadioDataWidget;  OptionsGroup support. More...;  ; class  SofaMouseManager;  ; class  SofaPluginManager;  ; union  ObjectModelPtr;  ; struct  ObjectModel;  ; class  SofaSceneGraphWidget;  ; class  CaptureOptionsWidget;  ; class  MovieOptionsWidget;  ; class  SofaVideoRecorderManager;  ; class  SofaWindowDataGraph;  ; class  ProfilerChartView;  The ProfilerChartView class is a override of QtCharts::QChartView to be able to catch mouse selection and update all widgets of. More...;  ; class  SofaWindowProfiler;  The SofaWindowProfiler class This class is a QDialog widget to display information recorded by AdvancedTimer mechanism At each step, info will be gathered from the AdvancedTimer using class sofa::helper::StepData Info will be displayed by: More...;  ; class  struct_data_trait;  Generic data structures support. More...;  ; class  struct_data_trait_var;  ; class  struct_data_widget_container;  ; class  struct_data_widget_container< T, 0 >;  ; class  default_struct_data_trait_var;  ; class  struct_data_trait< sofa::defaulttype::RigidCoord< N, T > >;  Rigids (as data-structures) support. More...;  ; class  data_widget_container< sofa::defaulttype::RigidCoord< N, T > >;  ; class  struct_data_trait< sofa::defaulttype::RigidMass< N, T > >;  ;",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:476,Integrability,Interface,Interface,476,"﻿. SOFA API: sofa::gui::qt Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::gui::qt Namespace Reference . Namespaces;  materialdatawidget_h;  Private namespace. ;  ;  qrgbacolorpicker_h;  Private namespace. ;  ;  rgbacolordatawidget_h;  ;  viewer;  . Classes; class  AboutSOFADialog;  ; class  DataFileNameWidget;  ; class  DataWidget;  Abstract Interface of a qwidget which allows to edit a data. More...;  ; class  TDataWidget;  This class is basically the same as DataWidget, except that it takes a template parameter so the actual type of Data can be retrieved through the getData() accessor. In most cases you will need to derive from this class to implement the edition of your data in the GUI. More...;  ; class  QPushButtonUpdater;  ; class  QDisplayDataInfoWidget;  ; class  DisplayFlagWidget;  ; class  DisplayFlagsDataWidget;  ; class  GenericDataWidget;  ; class  GenGraphForm;  ; class  GLPickHandler;  ; class  QDataSeries;  ; class  GraphSetting;  ; class  GraphOptionWidget;  ; class  GraphWidget;  ; class  graph_data_widget_container;  ; class  GraphDataWidget;  ; class  GraphDataWidget_Linear;  ; class  ObjectStateListener;  ; class  GraphListenerQListView;  ; class  GraphVisitor;  ; class  LinkWidget;  Abstract Interface of a qwidget which allows to edit a link. More...;  ; class  QDisplayLinkInfoWidget;  Widget used to display the name of a Link. More...;  ; class  ClickableTextEdit;  ; struct  ModifyObjectFlags;  ; class  ModifyObject;  ; class  BrowserHistoryEntry;  ; class  BrowserHistory;  ; class  SofaEnrichedPage;  ; class  DocBrowser;  ; class  InformationOnPickCallBack;  ; class  ColourPickingRenderCallBack;  ; struct  dataTime;  ; class  PieWidget;  ; class  ChartsWidget;  ; class  QDataDescriptionWidget;  ; class  QDisplayDataWidget;  ; class  QDataSimpleEdit;  ; class  QPoissonRatioWidget;  ; class  QDisplayLinkWidget;  ; c",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:1365,Integrability,Interface,Interface,1365,"paces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::gui::qt Namespace Reference . Namespaces;  materialdatawidget_h;  Private namespace. ;  ;  qrgbacolorpicker_h;  Private namespace. ;  ;  rgbacolordatawidget_h;  ;  viewer;  . Classes; class  AboutSOFADialog;  ; class  DataFileNameWidget;  ; class  DataWidget;  Abstract Interface of a qwidget which allows to edit a data. More...;  ; class  TDataWidget;  This class is basically the same as DataWidget, except that it takes a template parameter so the actual type of Data can be retrieved through the getData() accessor. In most cases you will need to derive from this class to implement the edition of your data in the GUI. More...;  ; class  QPushButtonUpdater;  ; class  QDisplayDataInfoWidget;  ; class  DisplayFlagWidget;  ; class  DisplayFlagsDataWidget;  ; class  GenericDataWidget;  ; class  GenGraphForm;  ; class  GLPickHandler;  ; class  QDataSeries;  ; class  GraphSetting;  ; class  GraphOptionWidget;  ; class  GraphWidget;  ; class  graph_data_widget_container;  ; class  GraphDataWidget;  ; class  GraphDataWidget_Linear;  ; class  ObjectStateListener;  ; class  GraphListenerQListView;  ; class  GraphVisitor;  ; class  LinkWidget;  Abstract Interface of a qwidget which allows to edit a link. More...;  ; class  QDisplayLinkInfoWidget;  Widget used to display the name of a Link. More...;  ; class  ClickableTextEdit;  ; struct  ModifyObjectFlags;  ; class  ModifyObject;  ; class  BrowserHistoryEntry;  ; class  BrowserHistory;  ; class  SofaEnrichedPage;  ; class  DocBrowser;  ; class  InformationOnPickCallBack;  ; class  ColourPickingRenderCallBack;  ; struct  dataTime;  ; class  PieWidget;  ; class  ChartsWidget;  ; class  QDataDescriptionWidget;  ; class  QDisplayDataWidget;  ; class  QDataSimpleEdit;  ; class  QPoissonRatioWidget;  ; class  QDisplayLinkWidget;  ; class  QLinkSimpleEdit;  ; class  QDisplayTreeItemWidget;  ; class  QDisplayPropertyWidget;  ; class  QEnergyStatWidget;  ; cla",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:9845,Integrability,Message,Message,9845," };  ; enum  SCRIPT_TYPE { PHP; , PERL; };  ; enum  ObjectModelType { typeNode; , typeObject; , typeData; };  ; enum  SofaListViewAttribute { SIMULATION; , VISUAL; , MODELER; };  . Functions; QString getExistingDirectory (QWidget *parent, const QString &dir, const char *name, const QString &caption);  ; QString getOpenFileName (QWidget *parent, const QString &startWith, const QString &filter, const char *name, const QString &caption, QString *selectedFilter);  ; QString getSaveFileName (QWidget *parent, const QString &startWith, const QString &filter, const char *name, const QString &caption, QString *selectedFilter);  ; void getFilesInDirectory (const QString &p, std::vector< QString > &files, bool recursive, const std::vector< QString > &filter);  ; QString removeFileExt (const QString &s);  ; const std::string getClass (core::objectmodel::Base *obj);  ; QPixmap * getPixmap (core::objectmodel::Base *obj, bool haveInfo, bool haveWarning, bool haveErrors);  ; void setMessageIconFrom (QTreeWidgetItem *item, Base *object);  ; bool cmpTime (const dataTime &a, const dataTime &b);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; void init ();  ; const std::string toHtmlString (const Message::Type t);  ; QString asQStr (const std::string &c);  ; std::string asStr (const QString &s);  ; template<class T > ; std::string toString (const T &v);  ; std::string toString (const std::string &s);  ; template<class T > ; void fromString (const std::string &s, T &v);  ; void fromString (const std::string &s, std::string &v);  ; void openInExternalEditor (const std::string filename, const int fileloc);  Open a file at given path and line number using an external editor. More...;  ; bool loadQtConfWithCustomPrefix (const std::string &qtConfPath, const std::string &prefix);  ; void redirectQtMessages (QtMsgType type, const QMessageLogContext &conte",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:59220,Integrability,Message,Message,59220,"useSpecular ;  . ). ◆ STRUCT_DATA_VAR_CHECK() [4/5]. template<> . sofa::gui::qt::STRUCT_DATA_VAR_CHECK ; (; sofa::type::Material ; , . 4 ; , . ""Emissive"" ; , . ""Emm"" ; , . sofa::type::RGBAColor ; , . emissive ; , . useEmissive ;  . ). ◆ STRUCT_DATA_VAR_CHECK() [5/5]. template<> . sofa::gui::qt::STRUCT_DATA_VAR_CHECK ; (; sofa::type::Material ; , . 5 ; , . ""Shininess"" ; , . ""Shin"" ; , . float ; , . shininess ; , . useShininess ;  . ). ◆ STRUCT_DATA_VAR_READONLY() [1/2]. template<class T > . sofa::gui::qt::STRUCT_DATA_VAR_READONLY ; (; sofa::defaulttype::RigidMass< 2 COMMA T > ; , . 3 ; , . ""Inertia Mass Matrix"" ; , . ""InertialMass"" ; , . T ; , . inertiaMassMatrix ;  . ). ◆ STRUCT_DATA_VAR_READONLY() [2/2]. template<class T > . sofa::gui::qt::STRUCT_DATA_VAR_READONLY ; (; sofa::defaulttype::RigidMass< 3 COMMA T > ; , . 3 ; , . ""Inertia Mass Matrix"" ; , . ""InertialMass"" ; , . typename data_type::Mat3x3 ; , . inertiaMassMatrix ;  . ). ◆ toHtmlString(). const std::string sofa::gui::qt::toHtmlString ; (; const Message::Type ; t). ◆ toString() [1/2]. std::string sofa::gui::qt::toString ; (; const std::string & ; s). inline . ◆ toString() [2/2]. template<class T > . std::string sofa::gui::qt::toString ; (; const T & ; v). inline . Variable Documentation. ◆ application. QApplication* sofa::gui::qt::application = nullptr. ◆ DW_Datafilename. helper::Creator<DataWidgetFactory,DataFileNameWidget> sofa::gui::qt::DW_Datafilename(""widget_filename"", false) ; (; ""widget_filename"" ; , . false ;  . ). ◆ DWClass_bool. Creator<DataWidgetFactory, SimpleDataWidget<bool> > sofa::gui::qt::DWClass_bool(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_char. Creator<DataWidgetFactory, SimpleDataWidget<char> > sofa::gui::qt::DWClass_char(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_DisplayFlags. helper::Creator<DataWidgetFactory, DisplayFlagsDataWidget > sofa::gui::qt::DWClass_DisplayFlags(""widget_displayFlags"", true) ; (; ""widget_displayFlags"" ; , . true ;  . ). ◆ DWC",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:188,Modifiability,Variab,Variables,188,"﻿. SOFA API: sofa::gui::qt Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::gui::qt Namespace Reference . Namespaces;  materialdatawidget_h;  Private namespace. ;  ;  qrgbacolorpicker_h;  Private namespace. ;  ;  rgbacolordatawidget_h;  ;  viewer;  . Classes; class  AboutSOFADialog;  ; class  DataFileNameWidget;  ; class  DataWidget;  Abstract Interface of a qwidget which allows to edit a data. More...;  ; class  TDataWidget;  This class is basically the same as DataWidget, except that it takes a template parameter so the actual type of Data can be retrieved through the getData() accessor. In most cases you will need to derive from this class to implement the edition of your data in the GUI. More...;  ; class  QPushButtonUpdater;  ; class  QDisplayDataInfoWidget;  ; class  DisplayFlagWidget;  ; class  DisplayFlagsDataWidget;  ; class  GenericDataWidget;  ; class  GenGraphForm;  ; class  GLPickHandler;  ; class  QDataSeries;  ; class  GraphSetting;  ; class  GraphOptionWidget;  ; class  GraphWidget;  ; class  graph_data_widget_container;  ; class  GraphDataWidget;  ; class  GraphDataWidget_Linear;  ; class  ObjectStateListener;  ; class  GraphListenerQListView;  ; class  GraphVisitor;  ; class  LinkWidget;  Abstract Interface of a qwidget which allows to edit a link. More...;  ; class  QDisplayLinkInfoWidget;  Widget used to display the name of a Link. More...;  ; class  ClickableTextEdit;  ; struct  ModifyObjectFlags;  ; class  ModifyObject;  ; class  BrowserHistoryEntry;  ; class  BrowserHistory;  ; class  SofaEnrichedPage;  ; class  DocBrowser;  ; class  InformationOnPickCallBack;  ; class  ColourPickingRenderCallBack;  ; struct  dataTime;  ; class  PieWidget;  ; class  ChartsWidget;  ; class  QDataDescriptionWidget;  ; class  QDisplayDataWidget;  ; class  QDataSimpleEdit;  ; class  QPoissonRatioWidget;  ; class  QDisplayLinkWidget;  ; c",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:2581,Modifiability,variab,variable-sized,2581,"es;  ; class  GraphSetting;  ; class  GraphOptionWidget;  ; class  GraphWidget;  ; class  graph_data_widget_container;  ; class  GraphDataWidget;  ; class  GraphDataWidget_Linear;  ; class  ObjectStateListener;  ; class  GraphListenerQListView;  ; class  GraphVisitor;  ; class  LinkWidget;  Abstract Interface of a qwidget which allows to edit a link. More...;  ; class  QDisplayLinkInfoWidget;  Widget used to display the name of a Link. More...;  ; class  ClickableTextEdit;  ; struct  ModifyObjectFlags;  ; class  ModifyObject;  ; class  BrowserHistoryEntry;  ; class  BrowserHistory;  ; class  SofaEnrichedPage;  ; class  DocBrowser;  ; class  InformationOnPickCallBack;  ; class  ColourPickingRenderCallBack;  ; struct  dataTime;  ; class  PieWidget;  ; class  ChartsWidget;  ; class  QDataDescriptionWidget;  ; class  QDisplayDataWidget;  ; class  QDataSimpleEdit;  ; class  QPoissonRatioWidget;  ; class  QDisplayLinkWidget;  ; class  QLinkSimpleEdit;  ; class  QDisplayTreeItemWidget;  ; class  QDisplayPropertyWidget;  ; class  QEnergyStatWidget;  ; class  QGraphStatWidget;  ; class  QMenuFilesRecentlyOpened;  ; class  flat_data_trait;  ; class  default_flat_data_trait;  ; class  flat_data_trait< T, TYPE_SINGLE >;  ; class  flat_struct_data_trait;  ; class  flat_struct_data_trait< T, 0 >;  ; class  flat_data_trait< T, TYPE_STRUCT >;  ; class  flat_vector_data_trait;  ; class  flat_data_trait< T, TYPE_VECTOR >;  ; class  table_data_widget_container;  ; class  vector_data_trait< std::vector< T > >;  variable-sized vectors support More...;  ; class  vector_data_trait< sofa::type::vector< T > >;  ; class  vector_data_trait< std::map< std::string, T > >;  std::map from strings support More...;  ; class  vector_data_trait< std::deque< T > >;  dequeues support More...;  ; class  QTableViewUpdater;  ; class  QTableModelUpdater;  ; class  QMomentumStatWidget;  ; class  QMouseOperation;  ; class  QAttachOperation;  ; class  QAddRecordedCameraOperation;  ; class  QStartNavigationOpe",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:18394,Modifiability,Variab,Variables,18394,,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:59443,Modifiability,Variab,Variable,59443,"HECK() [5/5]. template<> . sofa::gui::qt::STRUCT_DATA_VAR_CHECK ; (; sofa::type::Material ; , . 5 ; , . ""Shininess"" ; , . ""Shin"" ; , . float ; , . shininess ; , . useShininess ;  . ). ◆ STRUCT_DATA_VAR_READONLY() [1/2]. template<class T > . sofa::gui::qt::STRUCT_DATA_VAR_READONLY ; (; sofa::defaulttype::RigidMass< 2 COMMA T > ; , . 3 ; , . ""Inertia Mass Matrix"" ; , . ""InertialMass"" ; , . T ; , . inertiaMassMatrix ;  . ). ◆ STRUCT_DATA_VAR_READONLY() [2/2]. template<class T > . sofa::gui::qt::STRUCT_DATA_VAR_READONLY ; (; sofa::defaulttype::RigidMass< 3 COMMA T > ; , . 3 ; , . ""Inertia Mass Matrix"" ; , . ""InertialMass"" ; , . typename data_type::Mat3x3 ; , . inertiaMassMatrix ;  . ). ◆ toHtmlString(). const std::string sofa::gui::qt::toHtmlString ; (; const Message::Type ; t). ◆ toString() [1/2]. std::string sofa::gui::qt::toString ; (; const std::string & ; s). inline . ◆ toString() [2/2]. template<class T > . std::string sofa::gui::qt::toString ; (; const T & ; v). inline . Variable Documentation. ◆ application. QApplication* sofa::gui::qt::application = nullptr. ◆ DW_Datafilename. helper::Creator<DataWidgetFactory,DataFileNameWidget> sofa::gui::qt::DW_Datafilename(""widget_filename"", false) ; (; ""widget_filename"" ; , . false ;  . ). ◆ DWClass_bool. Creator<DataWidgetFactory, SimpleDataWidget<bool> > sofa::gui::qt::DWClass_bool(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_char. Creator<DataWidgetFactory, SimpleDataWidget<char> > sofa::gui::qt::DWClass_char(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_DisplayFlags. helper::Creator<DataWidgetFactory, DisplayFlagsDataWidget > sofa::gui::qt::DWClass_DisplayFlags(""widget_displayFlags"", true) ; (; ""widget_displayFlags"" ; , . true ;  . ). ◆ DWClass_double. Creator<DataWidgetFactory, SimpleDataWidget<double> > sofa::gui::qt::DWClass_double(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Edge. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Edge > > sof",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:10346,Performance,load,loadQtConfWithCustomPrefix,10346,,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:45420,Performance,load,loadQtConfWithCustomPrefix,45420,"bool ; recursive, . const std::vector< QString > & ; filter . ). ◆ getModuleName(). const char * sofa::gui::qt::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::gui::qt::getModuleVersion ; (; ). ◆ getOpenFileName(). QString SOFA_GUI_QT_API sofa::gui::qt::getOpenFileName ; (; QWidget * ; parent, . const QString & ; startWith, . const QString & ; filter, . const char * ; name, . const QString & ; caption, . QString * ; selectedFilter . ). ◆ getPixmap(). QPixmap * sofa::gui::qt::getPixmap ; (; core::objectmodel::Base * ; obj, . bool ; haveInfo, . bool ; haveWarning, . bool ; haveErrors . ). ◆ getSaveFileName(). QString SOFA_GUI_QT_API sofa::gui::qt::getSaveFileName ; (; QWidget * ; parent, . const QString & ; startWith, . const QString & ; filter, . const char * ; name, . const QString & ; caption, . QString * ; selectedFilter . ). ◆ init(). void SOFA_GUI_QT_API sofa::gui::qt::init ; (; ). ◆ initExternalModule(). void sofa::gui::qt::initExternalModule ; (; ). ◆ loadQtConfWithCustomPrefix(). bool sofa::gui::qt::loadQtConfWithCustomPrefix ; (; const std::string & ; qtConfPath, . const std::string & ; prefix . ). ◆ openInExternalEditor(). void sofa::gui::qt::openInExternalEditor ; (; const std::string ; filename, . const int ; fileloc . ). Open a file at given path and line number using an external editor. ; The external editor is defined in a QSettings with the following entries: [General] ExternalEditor=qtcreator ExternalEditorParams=-client ${filename}:${fileno} where ${filename} is expanded with the full path to the file where ${fileno} is expanded with the line number to open at. . ◆ redirectQtMessages(). void sofa::gui::qt::redirectQtMessages ; (; QtMsgType ; type, . const QMessageLogContext & ; context, . const QString & ; msg . ). ◆ removeFileExt(). QString sofa::gui::qt::removeFileExt ; (; const QString & ; s). ◆ setMessageIconFrom(). void sofa::gui::qt::setMessageIconFrom ; (; QTreeWidgetItem * ; item, . Base * ; object . ). ◆ STRUCT_DATA_VAR() [1/",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:45470,Performance,load,loadQtConfWithCustomPrefix,45470,". ). ◆ getModuleName(). const char * sofa::gui::qt::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::gui::qt::getModuleVersion ; (; ). ◆ getOpenFileName(). QString SOFA_GUI_QT_API sofa::gui::qt::getOpenFileName ; (; QWidget * ; parent, . const QString & ; startWith, . const QString & ; filter, . const char * ; name, . const QString & ; caption, . QString * ; selectedFilter . ). ◆ getPixmap(). QPixmap * sofa::gui::qt::getPixmap ; (; core::objectmodel::Base * ; obj, . bool ; haveInfo, . bool ; haveWarning, . bool ; haveErrors . ). ◆ getSaveFileName(). QString SOFA_GUI_QT_API sofa::gui::qt::getSaveFileName ; (; QWidget * ; parent, . const QString & ; startWith, . const QString & ; filter, . const char * ; name, . const QString & ; caption, . QString * ; selectedFilter . ). ◆ init(). void SOFA_GUI_QT_API sofa::gui::qt::init ; (; ). ◆ initExternalModule(). void sofa::gui::qt::initExternalModule ; (; ). ◆ loadQtConfWithCustomPrefix(). bool sofa::gui::qt::loadQtConfWithCustomPrefix ; (; const std::string & ; qtConfPath, . const std::string & ; prefix . ). ◆ openInExternalEditor(). void sofa::gui::qt::openInExternalEditor ; (; const std::string ; filename, . const int ; fileloc . ). Open a file at given path and line number using an external editor. ; The external editor is defined in a QSettings with the following entries: [General] ExternalEditor=qtcreator ExternalEditorParams=-client ${filename}:${fileno} where ${filename} is expanded with the full path to the file where ${fileno} is expanded with the line number to open at. . ◆ redirectQtMessages(). void sofa::gui::qt::redirectQtMessages ; (; QtMsgType ; type, . const QMessageLogContext & ; context, . const QString & ; msg . ). ◆ removeFileExt(). QString sofa::gui::qt::removeFileExt ; (; const QString & ; s). ◆ setMessageIconFrom(). void sofa::gui::qt::setMessageIconFrom ; (; QTreeWidgetItem * ; item, . Base * ; object . ). ◆ STRUCT_DATA_VAR() [1/58]. template<class T > . sofa::gui::qt::STRUCT_DATA_VAR ; (",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:717,Security,access,accessor,717,"﻿. SOFA API: sofa::gui::qt Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::gui::qt Namespace Reference . Namespaces;  materialdatawidget_h;  Private namespace. ;  ;  qrgbacolorpicker_h;  Private namespace. ;  ;  rgbacolordatawidget_h;  ;  viewer;  . Classes; class  AboutSOFADialog;  ; class  DataFileNameWidget;  ; class  DataWidget;  Abstract Interface of a qwidget which allows to edit a data. More...;  ; class  TDataWidget;  This class is basically the same as DataWidget, except that it takes a template parameter so the actual type of Data can be retrieved through the getData() accessor. In most cases you will need to derive from this class to implement the edition of your data in the GUI. More...;  ; class  QPushButtonUpdater;  ; class  QDisplayDataInfoWidget;  ; class  DisplayFlagWidget;  ; class  DisplayFlagsDataWidget;  ; class  GenericDataWidget;  ; class  GenGraphForm;  ; class  GLPickHandler;  ; class  QDataSeries;  ; class  GraphSetting;  ; class  GraphOptionWidget;  ; class  GraphWidget;  ; class  graph_data_widget_container;  ; class  GraphDataWidget;  ; class  GraphDataWidget_Linear;  ; class  ObjectStateListener;  ; class  GraphListenerQListView;  ; class  GraphVisitor;  ; class  LinkWidget;  Abstract Interface of a qwidget which allows to edit a link. More...;  ; class  QDisplayLinkInfoWidget;  Widget used to display the name of a Link. More...;  ; class  ClickableTextEdit;  ; struct  ModifyObjectFlags;  ; class  ModifyObject;  ; class  BrowserHistoryEntry;  ; class  BrowserHistory;  ; class  SofaEnrichedPage;  ; class  DocBrowser;  ; class  InformationOnPickCallBack;  ; class  ColourPickingRenderCallBack;  ; struct  dataTime;  ; class  PieWidget;  ; class  ChartsWidget;  ; class  QDataDescriptionWidget;  ; class  QDisplayDataWidget;  ; class  QDataSimpleEdit;  ; class  QPoissonRatioWidget;  ; class  QDisplayLinkWidget;  ; c",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:3851,Usability,Simpl,SimpleDataWidget,3851," support More...;  ; class  QTableViewUpdater;  ; class  QTableModelUpdater;  ; class  QMomentumStatWidget;  ; class  QMouseOperation;  ; class  QAttachOperation;  ; class  QAddRecordedCameraOperation;  ; class  QStartNavigationOperation;  ; class  QFixOperation;  ; class  QInciseOperation;  ; class  QTopologyOperation;  ; class  QAddSutureOperation;  ; class  QMouseWheelAdjustmentGuard;  Filter qt events to allows wheel event to only be accepted when the widget has focus. More...;  ; class  QSofaListView;  ; class  QSofaStatWidget;  ; class  vector_data_trait< sofa::component::topology::PointSubset >;  PointSubset support. More...;  ; class  QTableUpdater;  ; class  QTabulationModifyObject;  ; class  QTransformationWidget;  ; class  QVisitorControlPanel;  ; class  QSOFAApplication;  Custom QApplication class handling FileOpen events for MacOS. More...;  ; class  RealGUIFileListener;  ; class  RealGUI;  ; struct  ActivationFunctor;  ; class  data_widget_trait;  ; class  data_widget_container;  ; class  SimpleDataWidget;  This class manages the GUI of a BaseData, using the corresponding instance of data_widget_container. More...;  ; class  data_widget_trait< std::string >;  std::string support More...;  ; class  data_widget_trait< bool >;  bool support More...;  ; class  real_data_widget_trait;  float and double support More...;  ; class  data_widget_trait< float >;  ; class  data_widget_trait< double >;  ; class  int_data_widget_trait;  int, unsigned int, char and unsigned char support More...;  ; class  data_widget_trait< int >;  ; class  data_widget_trait< unsigned int >;  ; class  data_widget_trait< char >;  ; class  data_widget_trait< unsigned char >;  ; class  vector_data_trait;  arrays and vectors support More...;  ; class  fixed_vector_data_widget_container;  ; class  fixed_grid_data_widget_container;  ; class  vector_data_trait< sofa::type::fixed_array< T, N > >;  sofa::type::fixed_array support More...;  ; class  data_widget_container< sofa::type::fixed_arra",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:20595,Usability,Simpl,SimpleDataWidget,20595," Creator< DataWidgetFactory, GraphDataWidget_Linear< std::map< std::string, sofa::type::vector< double > > > > DWLClass_mapvectord (""graph_linear"", true);  ; Creator< DataWidgetFactory, GraphDataWidget_Linear< std::map< std::string, sofa::type::vector< Vec2d > > > > DWLClass_mapvector2d (""graph_linear"", true);  ; Creator< DataWidgetFactory, GraphDataWidget_Linear< std::map< std::string, std::deque< float > > > > DWLClass_mapdequef (""graph_linear"", true);  ; Creator< DataWidgetFactory, GraphDataWidget_Linear< std::map< std::string, std::deque< double > > > > DWLClass_mapdequed (""graph_linear"", true);  ; Creator< DataWidgetFactory, GraphDataWidget_Linear< std::map< std::string, std::deque< Vec2d > > > > DWLClass_mapdeque2d (""graph_linear"", true);  ; helper::Creator< DataWidgetFactory, QPoissonRatioWidget > DWClass_Poissonratio (""poissonRatio"", false);  ; RealGUI * gui = nullptr;  ; QApplication * application = nullptr;  ; const char * progname ="""";  ; Creator< DataWidgetFactory, SimpleDataWidget< bool > > DWClass_bool (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< char > > DWClass_char (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< unsigned char > > DWClass_uchar (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< int > > DWClass_int (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< unsigned int > > DWClass_uint (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< float > > DWClass_float (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< double > > DWClass_double (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< std::string > > DWClass_string (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, int > > > DWClass_Vec1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, unsigned int > > > DWClass_Vec1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, float > > > DWClass_Vec",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:20685,Usability,Simpl,SimpleDataWidget,20685,"ctor< double > > > > DWLClass_mapvectord (""graph_linear"", true);  ; Creator< DataWidgetFactory, GraphDataWidget_Linear< std::map< std::string, sofa::type::vector< Vec2d > > > > DWLClass_mapvector2d (""graph_linear"", true);  ; Creator< DataWidgetFactory, GraphDataWidget_Linear< std::map< std::string, std::deque< float > > > > DWLClass_mapdequef (""graph_linear"", true);  ; Creator< DataWidgetFactory, GraphDataWidget_Linear< std::map< std::string, std::deque< double > > > > DWLClass_mapdequed (""graph_linear"", true);  ; Creator< DataWidgetFactory, GraphDataWidget_Linear< std::map< std::string, std::deque< Vec2d > > > > DWLClass_mapdeque2d (""graph_linear"", true);  ; helper::Creator< DataWidgetFactory, QPoissonRatioWidget > DWClass_Poissonratio (""poissonRatio"", false);  ; RealGUI * gui = nullptr;  ; QApplication * application = nullptr;  ; const char * progname ="""";  ; Creator< DataWidgetFactory, SimpleDataWidget< bool > > DWClass_bool (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< char > > DWClass_char (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< unsigned char > > DWClass_uchar (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< int > > DWClass_int (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< unsigned int > > DWClass_uint (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< float > > DWClass_float (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< double > > DWClass_double (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< std::string > > DWClass_string (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, int > > > DWClass_Vec1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, unsigned int > > > DWClass_Vec1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, float > > > DWClass_Vec1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, double > > ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:20775,Usability,Simpl,SimpleDataWidget,20775,"tory, GraphDataWidget_Linear< std::map< std::string, sofa::type::vector< Vec2d > > > > DWLClass_mapvector2d (""graph_linear"", true);  ; Creator< DataWidgetFactory, GraphDataWidget_Linear< std::map< std::string, std::deque< float > > > > DWLClass_mapdequef (""graph_linear"", true);  ; Creator< DataWidgetFactory, GraphDataWidget_Linear< std::map< std::string, std::deque< double > > > > DWLClass_mapdequed (""graph_linear"", true);  ; Creator< DataWidgetFactory, GraphDataWidget_Linear< std::map< std::string, std::deque< Vec2d > > > > DWLClass_mapdeque2d (""graph_linear"", true);  ; helper::Creator< DataWidgetFactory, QPoissonRatioWidget > DWClass_Poissonratio (""poissonRatio"", false);  ; RealGUI * gui = nullptr;  ; QApplication * application = nullptr;  ; const char * progname ="""";  ; Creator< DataWidgetFactory, SimpleDataWidget< bool > > DWClass_bool (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< char > > DWClass_char (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< unsigned char > > DWClass_uchar (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< int > > DWClass_int (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< unsigned int > > DWClass_uint (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< float > > DWClass_float (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< double > > DWClass_double (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< std::string > > DWClass_string (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, int > > > DWClass_Vec1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, unsigned int > > > DWClass_Vec1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, float > > > DWClass_Vec1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, double > > > DWClass_Vec1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:20875,Usability,Simpl,SimpleDataWidget,20875,"ector2d (""graph_linear"", true);  ; Creator< DataWidgetFactory, GraphDataWidget_Linear< std::map< std::string, std::deque< float > > > > DWLClass_mapdequef (""graph_linear"", true);  ; Creator< DataWidgetFactory, GraphDataWidget_Linear< std::map< std::string, std::deque< double > > > > DWLClass_mapdequed (""graph_linear"", true);  ; Creator< DataWidgetFactory, GraphDataWidget_Linear< std::map< std::string, std::deque< Vec2d > > > > DWLClass_mapdeque2d (""graph_linear"", true);  ; helper::Creator< DataWidgetFactory, QPoissonRatioWidget > DWClass_Poissonratio (""poissonRatio"", false);  ; RealGUI * gui = nullptr;  ; QApplication * application = nullptr;  ; const char * progname ="""";  ; Creator< DataWidgetFactory, SimpleDataWidget< bool > > DWClass_bool (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< char > > DWClass_char (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< unsigned char > > DWClass_uchar (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< int > > DWClass_int (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< unsigned int > > DWClass_uint (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< float > > DWClass_float (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< double > > DWClass_double (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< std::string > > DWClass_string (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, int > > > DWClass_Vec1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, unsigned int > > > DWClass_Vec1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, float > > > DWClass_Vec1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, double > > > DWClass_Vec1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, int > > > DWClass_Vec2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:20963,Usability,Simpl,SimpleDataWidget,20963,"td::map< std::string, std::deque< float > > > > DWLClass_mapdequef (""graph_linear"", true);  ; Creator< DataWidgetFactory, GraphDataWidget_Linear< std::map< std::string, std::deque< double > > > > DWLClass_mapdequed (""graph_linear"", true);  ; Creator< DataWidgetFactory, GraphDataWidget_Linear< std::map< std::string, std::deque< Vec2d > > > > DWLClass_mapdeque2d (""graph_linear"", true);  ; helper::Creator< DataWidgetFactory, QPoissonRatioWidget > DWClass_Poissonratio (""poissonRatio"", false);  ; RealGUI * gui = nullptr;  ; QApplication * application = nullptr;  ; const char * progname ="""";  ; Creator< DataWidgetFactory, SimpleDataWidget< bool > > DWClass_bool (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< char > > DWClass_char (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< unsigned char > > DWClass_uchar (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< int > > DWClass_int (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< unsigned int > > DWClass_uint (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< float > > DWClass_float (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< double > > DWClass_double (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< std::string > > DWClass_string (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, int > > > DWClass_Vec1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, unsigned int > > > DWClass_Vec1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, float > > > DWClass_Vec1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, double > > > DWClass_Vec1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, int > > > DWClass_Vec2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, unsigned int > > > DWClass_Vec2u (""default"", true);  ; Creator< DataWidgetFactory, Sim",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:21061,Usability,Simpl,SimpleDataWidget,21061,"tor< DataWidgetFactory, GraphDataWidget_Linear< std::map< std::string, std::deque< double > > > > DWLClass_mapdequed (""graph_linear"", true);  ; Creator< DataWidgetFactory, GraphDataWidget_Linear< std::map< std::string, std::deque< Vec2d > > > > DWLClass_mapdeque2d (""graph_linear"", true);  ; helper::Creator< DataWidgetFactory, QPoissonRatioWidget > DWClass_Poissonratio (""poissonRatio"", false);  ; RealGUI * gui = nullptr;  ; QApplication * application = nullptr;  ; const char * progname ="""";  ; Creator< DataWidgetFactory, SimpleDataWidget< bool > > DWClass_bool (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< char > > DWClass_char (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< unsigned char > > DWClass_uchar (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< int > > DWClass_int (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< unsigned int > > DWClass_uint (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< float > > DWClass_float (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< double > > DWClass_double (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< std::string > > DWClass_string (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, int > > > DWClass_Vec1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, unsigned int > > > DWClass_Vec1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, float > > > DWClass_Vec1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, double > > > DWClass_Vec1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, int > > > DWClass_Vec2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, unsigned int > > > DWClass_Vec2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, float > > > DWClass_Vec2f (""default"", true);  ; Creator< DataWidgetFactory,",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:21153,Usability,Simpl,SimpleDataWidget,21153,"> > > DWLClass_mapdequed (""graph_linear"", true);  ; Creator< DataWidgetFactory, GraphDataWidget_Linear< std::map< std::string, std::deque< Vec2d > > > > DWLClass_mapdeque2d (""graph_linear"", true);  ; helper::Creator< DataWidgetFactory, QPoissonRatioWidget > DWClass_Poissonratio (""poissonRatio"", false);  ; RealGUI * gui = nullptr;  ; QApplication * application = nullptr;  ; const char * progname ="""";  ; Creator< DataWidgetFactory, SimpleDataWidget< bool > > DWClass_bool (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< char > > DWClass_char (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< unsigned char > > DWClass_uchar (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< int > > DWClass_int (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< unsigned int > > DWClass_uint (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< float > > DWClass_float (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< double > > DWClass_double (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< std::string > > DWClass_string (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, int > > > DWClass_Vec1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, unsigned int > > > DWClass_Vec1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, float > > > DWClass_Vec1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, double > > > DWClass_Vec1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, int > > > DWClass_Vec2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, unsigned int > > > DWClass_Vec2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, float > > > DWClass_Vec2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, double > > > DWClass_Vec2d (""default"", true);  ; Creator< DataWid",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:21247,Usability,Simpl,SimpleDataWidget,21247,"t_Linear< std::map< std::string, std::deque< Vec2d > > > > DWLClass_mapdeque2d (""graph_linear"", true);  ; helper::Creator< DataWidgetFactory, QPoissonRatioWidget > DWClass_Poissonratio (""poissonRatio"", false);  ; RealGUI * gui = nullptr;  ; QApplication * application = nullptr;  ; const char * progname ="""";  ; Creator< DataWidgetFactory, SimpleDataWidget< bool > > DWClass_bool (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< char > > DWClass_char (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< unsigned char > > DWClass_uchar (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< int > > DWClass_int (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< unsigned int > > DWClass_uint (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< float > > DWClass_float (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< double > > DWClass_double (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< std::string > > DWClass_string (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, int > > > DWClass_Vec1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, unsigned int > > > DWClass_Vec1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, float > > > DWClass_Vec1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, double > > > DWClass_Vec1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, int > > > DWClass_Vec2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, unsigned int > > > DWClass_Vec2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, float > > > DWClass_Vec2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, double > > > DWClass_Vec2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, int > > > DWClass_Vec3i (""default"", true);  ; Creator< D",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:21346,Usability,Simpl,SimpleDataWidget,21346,"e);  ; helper::Creator< DataWidgetFactory, QPoissonRatioWidget > DWClass_Poissonratio (""poissonRatio"", false);  ; RealGUI * gui = nullptr;  ; QApplication * application = nullptr;  ; const char * progname ="""";  ; Creator< DataWidgetFactory, SimpleDataWidget< bool > > DWClass_bool (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< char > > DWClass_char (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< unsigned char > > DWClass_uchar (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< int > > DWClass_int (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< unsigned int > > DWClass_uint (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< float > > DWClass_float (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< double > > DWClass_double (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< std::string > > DWClass_string (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, int > > > DWClass_Vec1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, unsigned int > > > DWClass_Vec1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, float > > > DWClass_Vec1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, double > > > DWClass_Vec1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, int > > > DWClass_Vec2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, unsigned int > > > DWClass_Vec2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, float > > > DWClass_Vec2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, double > > > DWClass_Vec2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, int > > > DWClass_Vec3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, unsigned int > > > DWClass_Vec3u (""default"", true);  ; ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:21446,Usability,Simpl,SimpleDataWidget,21446,""", false);  ; RealGUI * gui = nullptr;  ; QApplication * application = nullptr;  ; const char * progname ="""";  ; Creator< DataWidgetFactory, SimpleDataWidget< bool > > DWClass_bool (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< char > > DWClass_char (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< unsigned char > > DWClass_uchar (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< int > > DWClass_int (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< unsigned int > > DWClass_uint (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< float > > DWClass_float (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< double > > DWClass_double (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< std::string > > DWClass_string (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, int > > > DWClass_Vec1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, unsigned int > > > DWClass_Vec1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, float > > > DWClass_Vec1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, double > > > DWClass_Vec1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, int > > > DWClass_Vec2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, unsigned int > > > DWClass_Vec2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, float > > > DWClass_Vec2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, double > > > DWClass_Vec2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, int > > > DWClass_Vec3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, unsigned int > > > DWClass_Vec3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, float > > > DWClass_Vec3f (""default"", true);  ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:21555,Usability,Simpl,SimpleDataWidget,21555,"  ; Creator< DataWidgetFactory, SimpleDataWidget< bool > > DWClass_bool (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< char > > DWClass_char (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< unsigned char > > DWClass_uchar (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< int > > DWClass_int (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< unsigned int > > DWClass_uint (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< float > > DWClass_float (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< double > > DWClass_double (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< std::string > > DWClass_string (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, int > > > DWClass_Vec1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, unsigned int > > > DWClass_Vec1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, float > > > DWClass_Vec1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, double > > > DWClass_Vec1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, int > > > DWClass_Vec2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, unsigned int > > > DWClass_Vec2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, float > > > DWClass_Vec2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, double > > > DWClass_Vec2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, int > > > DWClass_Vec3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, unsigned int > > > DWClass_Vec3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, float > > > DWClass_Vec3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, double > > > DWClass_Vec3d (""default"", true);  ; Crea",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:21657,Usability,Simpl,SimpleDataWidget,21657," DataWidgetFactory, SimpleDataWidget< char > > DWClass_char (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< unsigned char > > DWClass_uchar (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< int > > DWClass_int (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< unsigned int > > DWClass_uint (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< float > > DWClass_float (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< double > > DWClass_double (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< std::string > > DWClass_string (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, int > > > DWClass_Vec1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, unsigned int > > > DWClass_Vec1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, float > > > DWClass_Vec1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, double > > > DWClass_Vec1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, int > > > DWClass_Vec2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, unsigned int > > > DWClass_Vec2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, float > > > DWClass_Vec2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, double > > > DWClass_Vec2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, int > > > DWClass_Vec3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, unsigned int > > > DWClass_Vec3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, float > > > DWClass_Vec3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, double > > > DWClass_Vec3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, int > > > DWClass_Vec4i (""default"", true);  ; Creato",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:21760,Usability,Simpl,SimpleDataWidget,21760,"ctory, SimpleDataWidget< unsigned char > > DWClass_uchar (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< int > > DWClass_int (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< unsigned int > > DWClass_uint (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< float > > DWClass_float (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< double > > DWClass_double (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< std::string > > DWClass_string (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, int > > > DWClass_Vec1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, unsigned int > > > DWClass_Vec1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, float > > > DWClass_Vec1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, double > > > DWClass_Vec1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, int > > > DWClass_Vec2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, unsigned int > > > DWClass_Vec2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, float > > > DWClass_Vec2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, double > > > DWClass_Vec2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, int > > > DWClass_Vec3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, unsigned int > > > DWClass_Vec3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, float > > > DWClass_Vec3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, double > > > DWClass_Vec3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, int > > > DWClass_Vec4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, unsigned int > > > DWClass_Vec4u (""default"", true);  ; ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:21860,Usability,Simpl,SimpleDataWidget,21860,"ctory, SimpleDataWidget< int > > DWClass_int (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< unsigned int > > DWClass_uint (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< float > > DWClass_float (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< double > > DWClass_double (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< std::string > > DWClass_string (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, int > > > DWClass_Vec1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, unsigned int > > > DWClass_Vec1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, float > > > DWClass_Vec1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, double > > > DWClass_Vec1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, int > > > DWClass_Vec2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, unsigned int > > > DWClass_Vec2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, float > > > DWClass_Vec2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, double > > > DWClass_Vec2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, int > > > DWClass_Vec3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, unsigned int > > > DWClass_Vec3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, float > > > DWClass_Vec3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, double > > > DWClass_Vec3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, int > > > DWClass_Vec4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, unsigned int > > > DWClass_Vec4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, float > > > DWClass_Vec4f (""default"", true);  ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:21969,Usability,Simpl,SimpleDataWidget,21969,"et< unsigned int > > DWClass_uint (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< float > > DWClass_float (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< double > > DWClass_double (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< std::string > > DWClass_string (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, int > > > DWClass_Vec1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, unsigned int > > > DWClass_Vec1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, float > > > DWClass_Vec1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, double > > > DWClass_Vec1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, int > > > DWClass_Vec2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, unsigned int > > > DWClass_Vec2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, float > > > DWClass_Vec2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, double > > > DWClass_Vec2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, int > > > DWClass_Vec3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, unsigned int > > > DWClass_Vec3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, float > > > DWClass_Vec3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, double > > > DWClass_Vec3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, int > > > DWClass_Vec4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, unsigned int > > > DWClass_Vec4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, float > > > DWClass_Vec4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, double > > > DWClass_Vec4d (""default"", true);  ; Crea",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:22071,Usability,Simpl,SimpleDataWidget,22071,"float > > DWClass_float (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< double > > DWClass_double (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< std::string > > DWClass_string (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, int > > > DWClass_Vec1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, unsigned int > > > DWClass_Vec1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, float > > > DWClass_Vec1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, double > > > DWClass_Vec1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, int > > > DWClass_Vec2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, unsigned int > > > DWClass_Vec2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, float > > > DWClass_Vec2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, double > > > DWClass_Vec2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, int > > > DWClass_Vec3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, unsigned int > > > DWClass_Vec3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, float > > > DWClass_Vec3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, double > > > DWClass_Vec3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, int > > > DWClass_Vec4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, unsigned int > > > DWClass_Vec4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, float > > > DWClass_Vec4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, double > > > DWClass_Vec4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, int > > > DWClass_Vec6i (""default"", true);  ; Creato",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:22174,Usability,Simpl,SimpleDataWidget,22174,"DWClass_double (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< std::string > > DWClass_string (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, int > > > DWClass_Vec1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, unsigned int > > > DWClass_Vec1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, float > > > DWClass_Vec1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, double > > > DWClass_Vec1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, int > > > DWClass_Vec2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, unsigned int > > > DWClass_Vec2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, float > > > DWClass_Vec2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, double > > > DWClass_Vec2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, int > > > DWClass_Vec3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, unsigned int > > > DWClass_Vec3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, float > > > DWClass_Vec3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, double > > > DWClass_Vec3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, int > > > DWClass_Vec4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, unsigned int > > > DWClass_Vec4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, float > > > DWClass_Vec4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, double > > > DWClass_Vec4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, int > > > DWClass_Vec6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, unsigned int > > > DWClass_Vec6u (""default"", true);  ; ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:22274,Usability,Simpl,SimpleDataWidget,22274,"WClass_string (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, int > > > DWClass_Vec1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, unsigned int > > > DWClass_Vec1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, float > > > DWClass_Vec1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, double > > > DWClass_Vec1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, int > > > DWClass_Vec2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, unsigned int > > > DWClass_Vec2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, float > > > DWClass_Vec2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, double > > > DWClass_Vec2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, int > > > DWClass_Vec3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, unsigned int > > > DWClass_Vec3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, float > > > DWClass_Vec3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, double > > > DWClass_Vec3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, int > > > DWClass_Vec4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, unsigned int > > > DWClass_Vec4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, float > > > DWClass_Vec4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, double > > > DWClass_Vec4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, int > > > DWClass_Vec6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, unsigned int > > > DWClass_Vec6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, float > > > DWClass_Vec6f (""default"", true);  ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:22383,Usability,Simpl,SimpleDataWidget,22383,"ec1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, unsigned int > > > DWClass_Vec1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, float > > > DWClass_Vec1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, double > > > DWClass_Vec1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, int > > > DWClass_Vec2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, unsigned int > > > DWClass_Vec2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, float > > > DWClass_Vec2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, double > > > DWClass_Vec2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, int > > > DWClass_Vec3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, unsigned int > > > DWClass_Vec3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, float > > > DWClass_Vec3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, double > > > DWClass_Vec3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, int > > > DWClass_Vec4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, unsigned int > > > DWClass_Vec4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, float > > > DWClass_Vec4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, double > > > DWClass_Vec4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, int > > > DWClass_Vec6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, unsigned int > > > DWClass_Vec6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, float > > > DWClass_Vec6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, double > > > DWClass_Vec6d (""default"", true);  ; Crea",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:22485,Usability,Simpl,SimpleDataWidget,22485,"Class_Vec1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, float > > > DWClass_Vec1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, double > > > DWClass_Vec1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, int > > > DWClass_Vec2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, unsigned int > > > DWClass_Vec2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, float > > > DWClass_Vec2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, double > > > DWClass_Vec2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, int > > > DWClass_Vec3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, unsigned int > > > DWClass_Vec3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, float > > > DWClass_Vec3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, double > > > DWClass_Vec3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, int > > > DWClass_Vec4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, unsigned int > > > DWClass_Vec4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, float > > > DWClass_Vec4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, double > > > DWClass_Vec4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, int > > > DWClass_Vec6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, unsigned int > > > DWClass_Vec6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, float > > > DWClass_Vec6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, double > > > DWClass_Vec6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, int > > > DWClass_Vec8i (""default"", true);  ; Creato",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:22588,Usability,Simpl,SimpleDataWidget,22588,"lass_Vec1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 1, double > > > DWClass_Vec1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, int > > > DWClass_Vec2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, unsigned int > > > DWClass_Vec2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, float > > > DWClass_Vec2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, double > > > DWClass_Vec2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, int > > > DWClass_Vec3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, unsigned int > > > DWClass_Vec3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, float > > > DWClass_Vec3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, double > > > DWClass_Vec3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, int > > > DWClass_Vec4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, unsigned int > > > DWClass_Vec4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, float > > > DWClass_Vec4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, double > > > DWClass_Vec4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, int > > > DWClass_Vec6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, unsigned int > > > DWClass_Vec6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, float > > > DWClass_Vec6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, double > > > DWClass_Vec6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, int > > > DWClass_Vec8i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, unsigned int > > > DWClass_Vec8u (""default"", true);  ; ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:22688,Usability,Simpl,SimpleDataWidget,22688,"DWClass_Vec1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, int > > > DWClass_Vec2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, unsigned int > > > DWClass_Vec2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, float > > > DWClass_Vec2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, double > > > DWClass_Vec2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, int > > > DWClass_Vec3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, unsigned int > > > DWClass_Vec3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, float > > > DWClass_Vec3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, double > > > DWClass_Vec3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, int > > > DWClass_Vec4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, unsigned int > > > DWClass_Vec4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, float > > > DWClass_Vec4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, double > > > DWClass_Vec4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, int > > > DWClass_Vec6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, unsigned int > > > DWClass_Vec6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, float > > > DWClass_Vec6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, double > > > DWClass_Vec6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, int > > > DWClass_Vec8i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, unsigned int > > > DWClass_Vec8u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 1 > > > DWClass_fixed_array1i (""defa",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:22797,Usability,Simpl,SimpleDataWidget,22797,"ec2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, unsigned int > > > DWClass_Vec2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, float > > > DWClass_Vec2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, double > > > DWClass_Vec2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, int > > > DWClass_Vec3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, unsigned int > > > DWClass_Vec3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, float > > > DWClass_Vec3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, double > > > DWClass_Vec3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, int > > > DWClass_Vec4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, unsigned int > > > DWClass_Vec4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, float > > > DWClass_Vec4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, double > > > DWClass_Vec4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, int > > > DWClass_Vec6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, unsigned int > > > DWClass_Vec6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, float > > > DWClass_Vec6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, double > > > DWClass_Vec6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, int > > > DWClass_Vec8i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, unsigned int > > > DWClass_Vec8u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 1 > > > DWClass_fixed_array1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 1 > > > DWClass_fixe",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:22899,Usability,Simpl,SimpleDataWidget,22899,"Class_Vec2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, float > > > DWClass_Vec2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, double > > > DWClass_Vec2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, int > > > DWClass_Vec3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, unsigned int > > > DWClass_Vec3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, float > > > DWClass_Vec3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, double > > > DWClass_Vec3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, int > > > DWClass_Vec4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, unsigned int > > > DWClass_Vec4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, float > > > DWClass_Vec4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, double > > > DWClass_Vec4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, int > > > DWClass_Vec6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, unsigned int > > > DWClass_Vec6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, float > > > DWClass_Vec6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, double > > > DWClass_Vec6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, int > > > DWClass_Vec8i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, unsigned int > > > DWClass_Vec8u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 1 > > > DWClass_fixed_array1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 1 > > > DWClass_fixed_array1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 2 > > ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:23002,Usability,Simpl,SimpleDataWidget,23002,"lass_Vec2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 2, double > > > DWClass_Vec2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, int > > > DWClass_Vec3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, unsigned int > > > DWClass_Vec3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, float > > > DWClass_Vec3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, double > > > DWClass_Vec3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, int > > > DWClass_Vec4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, unsigned int > > > DWClass_Vec4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, float > > > DWClass_Vec4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, double > > > DWClass_Vec4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, int > > > DWClass_Vec6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, unsigned int > > > DWClass_Vec6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, float > > > DWClass_Vec6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, double > > > DWClass_Vec6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, int > > > DWClass_Vec8i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, unsigned int > > > DWClass_Vec8u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 1 > > > DWClass_fixed_array1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 1 > > > DWClass_fixed_array1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 2 > > > DWClass_fixed_array2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:23102,Usability,Simpl,SimpleDataWidget,23102,"DWClass_Vec2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, int > > > DWClass_Vec3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, unsigned int > > > DWClass_Vec3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, float > > > DWClass_Vec3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, double > > > DWClass_Vec3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, int > > > DWClass_Vec4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, unsigned int > > > DWClass_Vec4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, float > > > DWClass_Vec4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, double > > > DWClass_Vec4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, int > > > DWClass_Vec6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, unsigned int > > > DWClass_Vec6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, float > > > DWClass_Vec6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, double > > > DWClass_Vec6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, int > > > DWClass_Vec8i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, unsigned int > > > DWClass_Vec8u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 1 > > > DWClass_fixed_array1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 1 > > > DWClass_fixed_array1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 2 > > > DWClass_fixed_array2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 2 > > > DWClass_fixed_array2u (""default"", true);  ; Creator< DataWidgetFactory, Simp",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:23211,Usability,Simpl,SimpleDataWidget,23211,"ec3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, unsigned int > > > DWClass_Vec3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, float > > > DWClass_Vec3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, double > > > DWClass_Vec3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, int > > > DWClass_Vec4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, unsigned int > > > DWClass_Vec4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, float > > > DWClass_Vec4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, double > > > DWClass_Vec4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, int > > > DWClass_Vec6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, unsigned int > > > DWClass_Vec6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, float > > > DWClass_Vec6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, double > > > DWClass_Vec6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, int > > > DWClass_Vec8i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, unsigned int > > > DWClass_Vec8u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 1 > > > DWClass_fixed_array1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 1 > > > DWClass_fixed_array1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 2 > > > DWClass_fixed_array2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 2 > > > DWClass_fixed_array2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 3 > > > DWClass_fixed_array3i (""default"", true);  ; Creator< DataWidgetFactor",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:23313,Usability,Simpl,SimpleDataWidget,23313,"Class_Vec3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, float > > > DWClass_Vec3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, double > > > DWClass_Vec3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, int > > > DWClass_Vec4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, unsigned int > > > DWClass_Vec4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, float > > > DWClass_Vec4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, double > > > DWClass_Vec4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, int > > > DWClass_Vec6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, unsigned int > > > DWClass_Vec6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, float > > > DWClass_Vec6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, double > > > DWClass_Vec6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, int > > > DWClass_Vec8i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, unsigned int > > > DWClass_Vec8u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 1 > > > DWClass_fixed_array1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 1 > > > DWClass_fixed_array1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 2 > > > DWClass_fixed_array2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 2 > > > DWClass_fixed_array2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 3 > > > DWClass_fixed_array3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 3 > > > DWClass_fixed_array3u (""default"", true);  ; Cr",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:23416,Usability,Simpl,SimpleDataWidget,23416,"lass_Vec3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 3, double > > > DWClass_Vec3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, int > > > DWClass_Vec4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, unsigned int > > > DWClass_Vec4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, float > > > DWClass_Vec4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, double > > > DWClass_Vec4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, int > > > DWClass_Vec6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, unsigned int > > > DWClass_Vec6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, float > > > DWClass_Vec6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, double > > > DWClass_Vec6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, int > > > DWClass_Vec8i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, unsigned int > > > DWClass_Vec8u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 1 > > > DWClass_fixed_array1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 1 > > > DWClass_fixed_array1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 2 > > > DWClass_fixed_array2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 2 > > > DWClass_fixed_array2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 3 > > > DWClass_fixed_array3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 3 > > > DWClass_fixed_array3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 4 > > > DWClass_fixed_array4i (""default"",",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:23516,Usability,Simpl,SimpleDataWidget,23516,"DWClass_Vec3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, int > > > DWClass_Vec4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, unsigned int > > > DWClass_Vec4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, float > > > DWClass_Vec4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, double > > > DWClass_Vec4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, int > > > DWClass_Vec6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, unsigned int > > > DWClass_Vec6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, float > > > DWClass_Vec6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, double > > > DWClass_Vec6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, int > > > DWClass_Vec8i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, unsigned int > > > DWClass_Vec8u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 1 > > > DWClass_fixed_array1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 1 > > > DWClass_fixed_array1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 2 > > > DWClass_fixed_array2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 2 > > > DWClass_fixed_array2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 3 > > > DWClass_fixed_array3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 3 > > > DWClass_fixed_array3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 4 > > > DWClass_fixed_array4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 4 > > > DWClass_",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:23625,Usability,Simpl,SimpleDataWidget,23625,"ec4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, unsigned int > > > DWClass_Vec4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, float > > > DWClass_Vec4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, double > > > DWClass_Vec4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, int > > > DWClass_Vec6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, unsigned int > > > DWClass_Vec6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, float > > > DWClass_Vec6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, double > > > DWClass_Vec6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, int > > > DWClass_Vec8i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, unsigned int > > > DWClass_Vec8u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 1 > > > DWClass_fixed_array1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 1 > > > DWClass_fixed_array1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 2 > > > DWClass_fixed_array2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 2 > > > DWClass_fixed_array2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 3 > > > DWClass_fixed_array3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 3 > > > DWClass_fixed_array3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 4 > > > DWClass_fixed_array4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 4 > > > DWClass_fixed_array4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 6 > > > D",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:23741,Usability,Simpl,SimpleDataWidget,23741,"default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, float > > > DWClass_Vec4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 4, double > > > DWClass_Vec4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, int > > > DWClass_Vec6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, unsigned int > > > DWClass_Vec6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, float > > > DWClass_Vec6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, double > > > DWClass_Vec6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, int > > > DWClass_Vec8i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, unsigned int > > > DWClass_Vec8u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 1 > > > DWClass_fixed_array1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 1 > > > DWClass_fixed_array1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 2 > > > DWClass_fixed_array2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 2 > > > DWClass_fixed_array2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 3 > > > DWClass_fixed_array3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 3 > > > DWClass_fixed_array3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 4 > > > DWClass_fixed_array4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 4 > > > DWClass_fixed_array4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 6 > > > DWClass_fixed_array6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:23866,Usability,Simpl,SimpleDataWidget,23866,"ator< DataWidgetFactory, SimpleDataWidget< Vec< 4, double > > > DWClass_Vec4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, int > > > DWClass_Vec6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, unsigned int > > > DWClass_Vec6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, float > > > DWClass_Vec6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, double > > > DWClass_Vec6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, int > > > DWClass_Vec8i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, unsigned int > > > DWClass_Vec8u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 1 > > > DWClass_fixed_array1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 1 > > > DWClass_fixed_array1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 2 > > > DWClass_fixed_array2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 2 > > > DWClass_fixed_array2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 3 > > > DWClass_fixed_array3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 3 > > > DWClass_fixed_array3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 4 > > > DWClass_fixed_array4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 4 > > > DWClass_fixed_array4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 6 > > > DWClass_fixed_array6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 6 > > > DWClass_fixed_array6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 8 > > > D",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:23982,Usability,Simpl,SimpleDataWidget,23982,"getFactory, SimpleDataWidget< Vec< 6, int > > > DWClass_Vec6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, unsigned int > > > DWClass_Vec6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, float > > > DWClass_Vec6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, double > > > DWClass_Vec6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, int > > > DWClass_Vec8i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, unsigned int > > > DWClass_Vec8u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 1 > > > DWClass_fixed_array1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 1 > > > DWClass_fixed_array1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 2 > > > DWClass_fixed_array2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 2 > > > DWClass_fixed_array2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 3 > > > DWClass_fixed_array3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 3 > > > DWClass_fixed_array3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 4 > > > DWClass_fixed_array4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 4 > > > DWClass_fixed_array4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 6 > > > DWClass_fixed_array6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 6 > > > DWClass_fixed_array6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 8 > > > DWClass_fixed_array8i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:24107,Usability,Simpl,SimpleDataWidget,24107,"get< Vec< 6, unsigned int > > > DWClass_Vec6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, float > > > DWClass_Vec6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, double > > > DWClass_Vec6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, int > > > DWClass_Vec8i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, unsigned int > > > DWClass_Vec8u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 1 > > > DWClass_fixed_array1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 1 > > > DWClass_fixed_array1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 2 > > > DWClass_fixed_array2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 2 > > > DWClass_fixed_array2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 3 > > > DWClass_fixed_array3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 3 > > > DWClass_fixed_array3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 4 > > > DWClass_fixed_array4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 4 > > > DWClass_fixed_array4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 6 > > > DWClass_fixed_array6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 6 > > > DWClass_fixed_array6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 8 > > > DWClass_fixed_array8i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 8 > > > DWClass_fixed_array8u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topol",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:24223,Usability,Simpl,SimpleDataWidget,24223,"c< 6, float > > > DWClass_Vec6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 6, double > > > DWClass_Vec6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, int > > > DWClass_Vec8i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, unsigned int > > > DWClass_Vec8u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 1 > > > DWClass_fixed_array1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 1 > > > DWClass_fixed_array1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 2 > > > DWClass_fixed_array2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 2 > > > DWClass_fixed_array2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 3 > > > DWClass_fixed_array3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 3 > > > DWClass_fixed_array3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 4 > > > DWClass_fixed_array4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 4 > > > DWClass_fixed_array4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 6 > > > DWClass_fixed_array6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 6 > > > DWClass_fixed_array6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 8 > > > DWClass_fixed_array8i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 8 > > > DWClass_fixed_array8u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Edge > > DWClass_Edge (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology:",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:24348,Usability,Simpl,SimpleDataWidget,24348,"ass_Vec6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, int > > > DWClass_Vec8i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, unsigned int > > > DWClass_Vec8u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 1 > > > DWClass_fixed_array1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 1 > > > DWClass_fixed_array1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 2 > > > DWClass_fixed_array2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 2 > > > DWClass_fixed_array2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 3 > > > DWClass_fixed_array3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 3 > > > DWClass_fixed_array3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 4 > > > DWClass_fixed_array4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 4 > > > DWClass_fixed_array4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 6 > > > DWClass_fixed_array6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 6 > > > DWClass_fixed_array6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 8 > > > DWClass_fixed_array8i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 8 > > > DWClass_fixed_array8u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Edge > > DWClass_Edge (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Triangle > > DWClass_Triangle (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topo",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:24464,Usability,Simpl,SimpleDataWidget,24464,"ult"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Vec< 8, unsigned int > > > DWClass_Vec8u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 1 > > > DWClass_fixed_array1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 1 > > > DWClass_fixed_array1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 2 > > > DWClass_fixed_array2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 2 > > > DWClass_fixed_array2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 3 > > > DWClass_fixed_array3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 3 > > > DWClass_fixed_array3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 4 > > > DWClass_fixed_array4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 4 > > > DWClass_fixed_array4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 6 > > > DWClass_fixed_array6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 6 > > > DWClass_fixed_array6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 8 > > > DWClass_fixed_array8i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 8 > > > DWClass_fixed_array8u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Edge > > DWClass_Edge (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Triangle > > DWClass_Triangle (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Quad > > DWClass_Quad (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:24589,Usability,Simpl,SimpleDataWidget,24589,"Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 1 > > > DWClass_fixed_array1i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 1 > > > DWClass_fixed_array1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 2 > > > DWClass_fixed_array2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 2 > > > DWClass_fixed_array2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 3 > > > DWClass_fixed_array3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 3 > > > DWClass_fixed_array3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 4 > > > DWClass_fixed_array4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 4 > > > DWClass_fixed_array4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 6 > > > DWClass_fixed_array6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 6 > > > DWClass_fixed_array6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 8 > > > DWClass_fixed_array8i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 8 > > > DWClass_fixed_array8u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Edge > > DWClass_Edge (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Triangle > > DWClass_Triangle (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Quad > > DWClass_Quad (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Tetrahedron > > DWClass_Tetrahedron (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget<",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:24705,Usability,Simpl,SimpleDataWidget,24705,"Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 1 > > > DWClass_fixed_array1u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 2 > > > DWClass_fixed_array2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 2 > > > DWClass_fixed_array2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 3 > > > DWClass_fixed_array3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 3 > > > DWClass_fixed_array3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 4 > > > DWClass_fixed_array4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 4 > > > DWClass_fixed_array4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 6 > > > DWClass_fixed_array6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 6 > > > DWClass_fixed_array6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 8 > > > DWClass_fixed_array8i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 8 > > > DWClass_fixed_array8u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Edge > > DWClass_Edge (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Triangle > > DWClass_Triangle (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Quad > > DWClass_Quad (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Tetrahedron > > DWClass_Tetrahedron (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Hexahedron > > DWClass_Hexahedron (""default"", true);  ; Creator< DataWidgetFactory,",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:24830,Usability,Simpl,SimpleDataWidget,24830,"Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 2 > > > DWClass_fixed_array2i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 2 > > > DWClass_fixed_array2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 3 > > > DWClass_fixed_array3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 3 > > > DWClass_fixed_array3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 4 > > > DWClass_fixed_array4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 4 > > > DWClass_fixed_array4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 6 > > > DWClass_fixed_array6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 6 > > > DWClass_fixed_array6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 8 > > > DWClass_fixed_array8i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 8 > > > DWClass_fixed_array8u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Edge > > DWClass_Edge (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Triangle > > DWClass_Triangle (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Quad > > DWClass_Quad (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Tetrahedron > > DWClass_Tetrahedron (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Hexahedron > > DWClass_Hexahedron (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 1 > > > DWClass_fixed_array1f (""default"", true);  ; Creator< DataWidgetFactory, Simple",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:24946,Usability,Simpl,SimpleDataWidget,24946,"Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 2 > > > DWClass_fixed_array2u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 3 > > > DWClass_fixed_array3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 3 > > > DWClass_fixed_array3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 4 > > > DWClass_fixed_array4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 4 > > > DWClass_fixed_array4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 6 > > > DWClass_fixed_array6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 6 > > > DWClass_fixed_array6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 8 > > > DWClass_fixed_array8i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 8 > > > DWClass_fixed_array8u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Edge > > DWClass_Edge (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Triangle > > DWClass_Triangle (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Quad > > DWClass_Quad (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Tetrahedron > > DWClass_Tetrahedron (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Hexahedron > > DWClass_Hexahedron (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 1 > > > DWClass_fixed_array1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 1 > > > DWClass_fixed_array1d (""default"", true);  ; Creator< DataWidgetFactory, Sim",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:25071,Usability,Simpl,SimpleDataWidget,25071,"Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 3 > > > DWClass_fixed_array3i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 3 > > > DWClass_fixed_array3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 4 > > > DWClass_fixed_array4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 4 > > > DWClass_fixed_array4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 6 > > > DWClass_fixed_array6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 6 > > > DWClass_fixed_array6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 8 > > > DWClass_fixed_array8i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 8 > > > DWClass_fixed_array8u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Edge > > DWClass_Edge (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Triangle > > DWClass_Triangle (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Quad > > DWClass_Quad (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Tetrahedron > > DWClass_Tetrahedron (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Hexahedron > > DWClass_Hexahedron (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 1 > > > DWClass_fixed_array1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 1 > > > DWClass_fixed_array1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 2 > > > DWClass_fixed_array2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleData",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:25193,Usability,Simpl,SimpleDataWidget,25193,"r< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 3 > > > DWClass_fixed_array3u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 4 > > > DWClass_fixed_array4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 4 > > > DWClass_fixed_array4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 6 > > > DWClass_fixed_array6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 6 > > > DWClass_fixed_array6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 8 > > > DWClass_fixed_array8i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 8 > > > DWClass_fixed_array8u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Edge > > DWClass_Edge (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Triangle > > DWClass_Triangle (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Quad > > DWClass_Quad (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Tetrahedron > > DWClass_Tetrahedron (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Hexahedron > > DWClass_Hexahedron (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 1 > > > DWClass_fixed_array1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 1 > > > DWClass_fixed_array1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 2 > > > DWClass_fixed_array2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 2 > > > DWClass_fixed_array2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWid",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:25323,Usability,Simpl,SimpleDataWidget,25323,"taWidgetFactory, SimpleDataWidget< fixed_array< int, 4 > > > DWClass_fixed_array4i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 4 > > > DWClass_fixed_array4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 6 > > > DWClass_fixed_array6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 6 > > > DWClass_fixed_array6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 8 > > > DWClass_fixed_array8i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 8 > > > DWClass_fixed_array8u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Edge > > DWClass_Edge (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Triangle > > DWClass_Triangle (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Quad > > DWClass_Quad (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Tetrahedron > > DWClass_Tetrahedron (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Hexahedron > > DWClass_Hexahedron (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 1 > > > DWClass_fixed_array1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 1 > > > DWClass_fixed_array1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 2 > > > DWClass_fixed_array2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 2 > > > DWClass_fixed_array2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 3 > > > DWClass_fixed_array3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_a",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:25445,Usability,Simpl,SimpleDataWidget,25445,"etFactory, SimpleDataWidget< fixed_array< unsigned int, 4 > > > DWClass_fixed_array4u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 6 > > > DWClass_fixed_array6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 6 > > > DWClass_fixed_array6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 8 > > > DWClass_fixed_array8i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 8 > > > DWClass_fixed_array8u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Edge > > DWClass_Edge (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Triangle > > DWClass_Triangle (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Quad > > DWClass_Quad (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Tetrahedron > > DWClass_Tetrahedron (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Hexahedron > > DWClass_Hexahedron (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 1 > > > DWClass_fixed_array1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 1 > > > DWClass_fixed_array1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 2 > > > DWClass_fixed_array2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 2 > > > DWClass_fixed_array2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 3 > > > DWClass_fixed_array3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 3 > > > DWClass_fixed_array3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_arra",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:25581,Usability,Simpl,SimpleDataWidget,25581,"SimpleDataWidget< fixed_array< int, 6 > > > DWClass_fixed_array6i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 6 > > > DWClass_fixed_array6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 8 > > > DWClass_fixed_array8i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 8 > > > DWClass_fixed_array8u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Edge > > DWClass_Edge (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Triangle > > DWClass_Triangle (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Quad > > DWClass_Quad (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Tetrahedron > > DWClass_Tetrahedron (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Hexahedron > > DWClass_Hexahedron (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 1 > > > DWClass_fixed_array1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 1 > > > DWClass_fixed_array1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 2 > > > DWClass_fixed_array2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 2 > > > DWClass_fixed_array2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 3 > > > DWClass_fixed_array3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 3 > > > DWClass_fixed_array3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 4 > > > DWClass_fixed_array4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 4 > > >",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:25715,Usability,Simpl,SimpleDataWidget,25715,"fixed_array< unsigned int, 6 > > > DWClass_fixed_array6u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< int, 8 > > > DWClass_fixed_array8i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 8 > > > DWClass_fixed_array8u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Edge > > DWClass_Edge (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Triangle > > DWClass_Triangle (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Quad > > DWClass_Quad (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Tetrahedron > > DWClass_Tetrahedron (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Hexahedron > > DWClass_Hexahedron (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 1 > > > DWClass_fixed_array1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 1 > > > DWClass_fixed_array1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 2 > > > DWClass_fixed_array2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 2 > > > DWClass_fixed_array2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 3 > > > DWClass_fixed_array3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 3 > > > DWClass_fixed_array3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 4 > > > DWClass_fixed_array4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 4 > > > DWClass_fixed_array4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 6 > > > DWClass_fixed_a",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:25833,Usability,Simpl,SimpleDataWidget,25833,"idget< fixed_array< int, 8 > > > DWClass_fixed_array8i (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< unsigned int, 8 > > > DWClass_fixed_array8u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Edge > > DWClass_Edge (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Triangle > > DWClass_Triangle (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Quad > > DWClass_Quad (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Tetrahedron > > DWClass_Tetrahedron (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Hexahedron > > DWClass_Hexahedron (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 1 > > > DWClass_fixed_array1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 1 > > > DWClass_fixed_array1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 2 > > > DWClass_fixed_array2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 2 > > > DWClass_fixed_array2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 3 > > > DWClass_fixed_array3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 3 > > > DWClass_fixed_array3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 4 > > > DWClass_fixed_array4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 4 > > > DWClass_fixed_array4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 6 > > > DWClass_fixed_array6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 6 > > > DWClass_fixed_",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:25952,Usability,Simpl,SimpleDataWidget,25952,"et< fixed_array< unsigned int, 8 > > > DWClass_fixed_array8u (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Edge > > DWClass_Edge (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Triangle > > DWClass_Triangle (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Quad > > DWClass_Quad (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Tetrahedron > > DWClass_Tetrahedron (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Hexahedron > > DWClass_Hexahedron (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 1 > > > DWClass_fixed_array1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 1 > > > DWClass_fixed_array1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 2 > > > DWClass_fixed_array2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 2 > > > DWClass_fixed_array2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 3 > > > DWClass_fixed_array3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 3 > > > DWClass_fixed_array3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 4 > > > DWClass_fixed_array4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 4 > > > DWClass_fixed_array4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 6 > > > DWClass_fixed_array6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 6 > > > DWClass_fixed_array6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 8 > > > DWClass_fixed_a",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:26070,Usability,Simpl,SimpleDataWidget,26070,"ataWidget< sofa::core::topology::Topology::Edge > > DWClass_Edge (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Triangle > > DWClass_Triangle (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Quad > > DWClass_Quad (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Tetrahedron > > DWClass_Tetrahedron (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Hexahedron > > DWClass_Hexahedron (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 1 > > > DWClass_fixed_array1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 1 > > > DWClass_fixed_array1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 2 > > > DWClass_fixed_array2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 2 > > > DWClass_fixed_array2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 3 > > > DWClass_fixed_array3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 3 > > > DWClass_fixed_array3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 4 > > > DWClass_fixed_array4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 4 > > > DWClass_fixed_array4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 6 > > > DWClass_fixed_array6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 6 > > > DWClass_fixed_array6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 8 > > > DWClass_fixed_array8f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 8 > > > DWClass_fixed_",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:26189,Usability,Simpl,SimpleDataWidget,26189,"leDataWidget< sofa::core::topology::Topology::Triangle > > DWClass_Triangle (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Quad > > DWClass_Quad (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Tetrahedron > > DWClass_Tetrahedron (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Hexahedron > > DWClass_Hexahedron (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 1 > > > DWClass_fixed_array1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 1 > > > DWClass_fixed_array1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 2 > > > DWClass_fixed_array2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 2 > > > DWClass_fixed_array2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 3 > > > DWClass_fixed_array3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 3 > > > DWClass_fixed_array3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 4 > > > DWClass_fixed_array4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 4 > > > DWClass_fixed_array4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 6 > > > DWClass_fixed_array6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 6 > > > DWClass_fixed_array6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 8 > > > DWClass_fixed_array8f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 8 > > > DWClass_fixed_array8d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::type::Quat< float > > > DWClass_Quatf",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:26307,Usability,Simpl,SimpleDataWidget,26307,"actory, SimpleDataWidget< sofa::core::topology::Topology::Quad > > DWClass_Quad (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Tetrahedron > > DWClass_Tetrahedron (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Hexahedron > > DWClass_Hexahedron (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 1 > > > DWClass_fixed_array1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 1 > > > DWClass_fixed_array1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 2 > > > DWClass_fixed_array2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 2 > > > DWClass_fixed_array2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 3 > > > DWClass_fixed_array3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 3 > > > DWClass_fixed_array3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 4 > > > DWClass_fixed_array4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 4 > > > DWClass_fixed_array4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 6 > > > DWClass_fixed_array6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 6 > > > DWClass_fixed_array6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 8 > > > DWClass_fixed_array8f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 8 > > > DWClass_fixed_array8d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::type::Quat< float > > > DWClass_Quatf (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::type::Quat< double > > > DWClass_Quatd (""de",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:26426,Usability,Simpl,SimpleDataWidget,26426,"etFactory, SimpleDataWidget< sofa::core::topology::Topology::Tetrahedron > > DWClass_Tetrahedron (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Hexahedron > > DWClass_Hexahedron (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 1 > > > DWClass_fixed_array1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 1 > > > DWClass_fixed_array1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 2 > > > DWClass_fixed_array2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 2 > > > DWClass_fixed_array2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 3 > > > DWClass_fixed_array3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 3 > > > DWClass_fixed_array3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 4 > > > DWClass_fixed_array4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 4 > > > DWClass_fixed_array4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 6 > > > DWClass_fixed_array6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 6 > > > DWClass_fixed_array6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 8 > > > DWClass_fixed_array8f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 8 > > > DWClass_fixed_array8d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::type::Quat< float > > > DWClass_Quatf (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::type::Quat< double > > > DWClass_Quatd (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 5 > > > DWClass_Po",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:26544,Usability,Simpl,SimpleDataWidget,26544," Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Hexahedron > > DWClass_Hexahedron (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 1 > > > DWClass_fixed_array1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 1 > > > DWClass_fixed_array1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 2 > > > DWClass_fixed_array2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 2 > > > DWClass_fixed_array2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 3 > > > DWClass_fixed_array3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 3 > > > DWClass_fixed_array3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 4 > > > DWClass_fixed_array4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 4 > > > DWClass_fixed_array4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 6 > > > DWClass_fixed_array6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 6 > > > DWClass_fixed_array6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 8 > > > DWClass_fixed_array8f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 8 > > > DWClass_fixed_array8d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::type::Quat< float > > > DWClass_Quatf (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::type::Quat< double > > > DWClass_Quatd (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 5 > > > DWClass_PolynomialLD5d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:26663,Usability,Simpl,SimpleDataWidget,26663,"ult"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 1 > > > DWClass_fixed_array1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 1 > > > DWClass_fixed_array1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 2 > > > DWClass_fixed_array2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 2 > > > DWClass_fixed_array2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 3 > > > DWClass_fixed_array3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 3 > > > DWClass_fixed_array3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 4 > > > DWClass_fixed_array4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 4 > > > DWClass_fixed_array4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 6 > > > DWClass_fixed_array6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 6 > > > DWClass_fixed_array6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 8 > > > DWClass_fixed_array8f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 8 > > > DWClass_fixed_array8d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::type::Quat< float > > > DWClass_Quatf (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::type::Quat< double > > > DWClass_Quatd (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 5 > > > DWClass_PolynomialLD5d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 4 > > > DWClass_PolynomialLD4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polyno",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:26781,Usability,Simpl,SimpleDataWidget,26781,"ult"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 1 > > > DWClass_fixed_array1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 2 > > > DWClass_fixed_array2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 2 > > > DWClass_fixed_array2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 3 > > > DWClass_fixed_array3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 3 > > > DWClass_fixed_array3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 4 > > > DWClass_fixed_array4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 4 > > > DWClass_fixed_array4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 6 > > > DWClass_fixed_array6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 6 > > > DWClass_fixed_array6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 8 > > > DWClass_fixed_array8f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 8 > > > DWClass_fixed_array8d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::type::Quat< float > > > DWClass_Quatf (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::type::Quat< double > > > DWClass_Quatd (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 5 > > > DWClass_PolynomialLD5d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 4 > > > DWClass_PolynomialLD4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 3 > > > DWClass_PolynomialLD3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< so",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:26900,Usability,Simpl,SimpleDataWidget,26900,"ult"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 2 > > > DWClass_fixed_array2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 2 > > > DWClass_fixed_array2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 3 > > > DWClass_fixed_array3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 3 > > > DWClass_fixed_array3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 4 > > > DWClass_fixed_array4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 4 > > > DWClass_fixed_array4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 6 > > > DWClass_fixed_array6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 6 > > > DWClass_fixed_array6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 8 > > > DWClass_fixed_array8f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 8 > > > DWClass_fixed_array8d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::type::Quat< float > > > DWClass_Quatf (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::type::Quat< double > > > DWClass_Quatd (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 5 > > > DWClass_PolynomialLD5d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 4 > > > DWClass_PolynomialLD4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 3 > > > DWClass_PolynomialLD3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 2 > > > DWClass_PolynomialLD2d (""default"", true);  ; Creator< DataWidgetFactory, Sim",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:27018,Usability,Simpl,SimpleDataWidget,27018,"ult"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 2 > > > DWClass_fixed_array2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 3 > > > DWClass_fixed_array3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 3 > > > DWClass_fixed_array3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 4 > > > DWClass_fixed_array4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 4 > > > DWClass_fixed_array4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 6 > > > DWClass_fixed_array6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 6 > > > DWClass_fixed_array6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 8 > > > DWClass_fixed_array8f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 8 > > > DWClass_fixed_array8d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::type::Quat< float > > > DWClass_Quatf (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::type::Quat< double > > > DWClass_Quatd (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 5 > > > DWClass_PolynomialLD5d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 4 > > > DWClass_PolynomialLD4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 3 > > > DWClass_PolynomialLD3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 2 > > > DWClass_PolynomialLD2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 1 > > > DWClass_PolynomialLD1d (""default"", true);  ; Creator< Data",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:27137,Usability,Simpl,SimpleDataWidget,27137,"ult"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 3 > > > DWClass_fixed_array3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 3 > > > DWClass_fixed_array3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 4 > > > DWClass_fixed_array4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 4 > > > DWClass_fixed_array4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 6 > > > DWClass_fixed_array6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 6 > > > DWClass_fixed_array6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 8 > > > DWClass_fixed_array8f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 8 > > > DWClass_fixed_array8d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::type::Quat< float > > > DWClass_Quatf (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::type::Quat< double > > > DWClass_Quatd (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 5 > > > DWClass_PolynomialLD5d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 4 > > > DWClass_PolynomialLD4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 3 > > > DWClass_PolynomialLD3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 2 > > > DWClass_PolynomialLD2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 1 > > > DWClass_PolynomialLD1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,5 > > > DWClass_PolynomialLD5f (""default"", true);  ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:27249,Usability,Simpl,SimpleDataWidget,27249,"(""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 3 > > > DWClass_fixed_array3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 4 > > > DWClass_fixed_array4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 4 > > > DWClass_fixed_array4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 6 > > > DWClass_fixed_array6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 6 > > > DWClass_fixed_array6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 8 > > > DWClass_fixed_array8f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 8 > > > DWClass_fixed_array8d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::type::Quat< float > > > DWClass_Quatf (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::type::Quat< double > > > DWClass_Quatd (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 5 > > > DWClass_PolynomialLD5d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 4 > > > DWClass_PolynomialLD4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 3 > > > DWClass_PolynomialLD3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 2 > > > DWClass_PolynomialLD2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 1 > > > DWClass_PolynomialLD1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,5 > > > DWClass_PolynomialLD5f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,4 > > > DWClass_PolynomialLD4",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:27362,Usability,Simpl,SimpleDataWidget,27362,"ray3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 4 > > > DWClass_fixed_array4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 4 > > > DWClass_fixed_array4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 6 > > > DWClass_fixed_array6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 6 > > > DWClass_fixed_array6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 8 > > > DWClass_fixed_array8f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 8 > > > DWClass_fixed_array8d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::type::Quat< float > > > DWClass_Quatf (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::type::Quat< double > > > DWClass_Quatd (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 5 > > > DWClass_PolynomialLD5d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 4 > > > DWClass_PolynomialLD4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 3 > > > DWClass_PolynomialLD3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 2 > > > DWClass_PolynomialLD2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 1 > > > DWClass_PolynomialLD1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,5 > > > DWClass_PolynomialLD5f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,4 > > > DWClass_PolynomialLD4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,3 > > > ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:27498,Usability,Simpl,SimpleDataWidget,27498,"true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 4 > > > DWClass_fixed_array4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 6 > > > DWClass_fixed_array6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 6 > > > DWClass_fixed_array6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 8 > > > DWClass_fixed_array8f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 8 > > > DWClass_fixed_array8d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::type::Quat< float > > > DWClass_Quatf (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::type::Quat< double > > > DWClass_Quatd (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 5 > > > DWClass_PolynomialLD5d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 4 > > > DWClass_PolynomialLD4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 3 > > > DWClass_PolynomialLD3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 2 > > > DWClass_PolynomialLD2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 1 > > > DWClass_PolynomialLD1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,5 > > > DWClass_PolynomialLD5f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,4 > > > DWClass_PolynomialLD4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,3 > > > DWClass_PolynomialLD3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,2 > > > DW",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:27634,Usability,Simpl,SimpleDataWidget,27634,"< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 6 > > > DWClass_fixed_array6f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 6 > > > DWClass_fixed_array6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 8 > > > DWClass_fixed_array8f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 8 > > > DWClass_fixed_array8d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::type::Quat< float > > > DWClass_Quatf (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::type::Quat< double > > > DWClass_Quatd (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 5 > > > DWClass_PolynomialLD5d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 4 > > > DWClass_PolynomialLD4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 3 > > > DWClass_PolynomialLD3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 2 > > > DWClass_PolynomialLD2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 1 > > > DWClass_PolynomialLD1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,5 > > > DWClass_PolynomialLD5f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,4 > > > DWClass_PolynomialLD4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,3 > > > DWClass_PolynomialLD3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,2 > > > DWClass_PolynomialLD2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,1 > > > DWCl",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:27770,Usability,Simpl,SimpleDataWidget,27770,"y, SimpleDataWidget< fixed_array< double, 6 > > > DWClass_fixed_array6d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< float, 8 > > > DWClass_fixed_array8f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 8 > > > DWClass_fixed_array8d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::type::Quat< float > > > DWClass_Quatf (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::type::Quat< double > > > DWClass_Quatd (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 5 > > > DWClass_PolynomialLD5d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 4 > > > DWClass_PolynomialLD4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 3 > > > DWClass_PolynomialLD3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 2 > > > DWClass_PolynomialLD2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 1 > > > DWClass_PolynomialLD1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,5 > > > DWClass_PolynomialLD5f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,4 > > > DWClass_PolynomialLD4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,3 > > > DWClass_PolynomialLD3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,2 > > > DWClass_PolynomialLD2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,1 > > > DWClass_PolynomialLD1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, float > > > DWClass_Mat22f (""default"",",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:27906,Usability,Simpl,SimpleDataWidget,27906,"et< fixed_array< float, 8 > > > DWClass_fixed_array8f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< fixed_array< double, 8 > > > DWClass_fixed_array8d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::type::Quat< float > > > DWClass_Quatf (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::type::Quat< double > > > DWClass_Quatd (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 5 > > > DWClass_PolynomialLD5d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 4 > > > DWClass_PolynomialLD4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 3 > > > DWClass_PolynomialLD3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 2 > > > DWClass_PolynomialLD2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 1 > > > DWClass_PolynomialLD1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,5 > > > DWClass_PolynomialLD5f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,4 > > > DWClass_PolynomialLD4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,3 > > > DWClass_PolynomialLD3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,2 > > > DWClass_PolynomialLD2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,1 > > > DWClass_PolynomialLD1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, float > > > DWClass_Mat22f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, double > > > DWClass_Mat22d (""default"", true);  ; Creator< DataWidge",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:28042,Usability,Simpl,SimpleDataWidget,28042,"ouble, 8 > > > DWClass_fixed_array8d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::type::Quat< float > > > DWClass_Quatf (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::type::Quat< double > > > DWClass_Quatd (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 5 > > > DWClass_PolynomialLD5d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 4 > > > DWClass_PolynomialLD4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 3 > > > DWClass_PolynomialLD3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 2 > > > DWClass_PolynomialLD2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 1 > > > DWClass_PolynomialLD1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,5 > > > DWClass_PolynomialLD5f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,4 > > > DWClass_PolynomialLD4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,3 > > > DWClass_PolynomialLD3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,2 > > > DWClass_PolynomialLD2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,1 > > > DWClass_PolynomialLD1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, float > > > DWClass_Mat22f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, double > > > DWClass_Mat22d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, float > > > DWClass_Mat23f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Ma",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:28176,Usability,Simpl,SimpleDataWidget,28176," DWClass_Quatf (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::type::Quat< double > > > DWClass_Quatd (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 5 > > > DWClass_PolynomialLD5d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 4 > > > DWClass_PolynomialLD4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 3 > > > DWClass_PolynomialLD3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 2 > > > DWClass_PolynomialLD2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 1 > > > DWClass_PolynomialLD1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,5 > > > DWClass_PolynomialLD5f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,4 > > > DWClass_PolynomialLD4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,3 > > > DWClass_PolynomialLD3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,2 > > > DWClass_PolynomialLD2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,1 > > > DWClass_PolynomialLD1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, float > > > DWClass_Mat22f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, double > > > DWClass_Mat22d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, float > > > DWClass_Mat23f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, double > > > DWClass_Mat23d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 3, float > > > DWClas",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:28310,Usability,Simpl,SimpleDataWidget,28310,"ult"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 5 > > > DWClass_PolynomialLD5d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 4 > > > DWClass_PolynomialLD4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 3 > > > DWClass_PolynomialLD3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 2 > > > DWClass_PolynomialLD2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 1 > > > DWClass_PolynomialLD1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,5 > > > DWClass_PolynomialLD5f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,4 > > > DWClass_PolynomialLD4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,3 > > > DWClass_PolynomialLD3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,2 > > > DWClass_PolynomialLD2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,1 > > > DWClass_PolynomialLD1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, float > > > DWClass_Mat22f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, double > > > DWClass_Mat22d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, float > > > DWClass_Mat23f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, double > > > DWClass_Mat23d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 3, float > > > DWClass_Mat33f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 3, double > > > DWClass_Mat33d (""default"", true);",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:28444,Usability,Simpl,SimpleDataWidget,28444,"fault"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 4 > > > DWClass_PolynomialLD4d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 3 > > > DWClass_PolynomialLD3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 2 > > > DWClass_PolynomialLD2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 1 > > > DWClass_PolynomialLD1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,5 > > > DWClass_PolynomialLD5f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,4 > > > DWClass_PolynomialLD4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,3 > > > DWClass_PolynomialLD3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,2 > > > DWClass_PolynomialLD2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,1 > > > DWClass_PolynomialLD1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, float > > > DWClass_Mat22f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, double > > > DWClass_Mat22d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, float > > > DWClass_Mat23f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, double > > > DWClass_Mat23d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 3, float > > > DWClass_Mat33f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 3, double > > > DWClass_Mat33d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 4, float > > > DWClass_Mat34f (""default"", true);  ; Creator< DataWidgetFacto",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:28578,Usability,Simpl,SimpleDataWidget,28578,"default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 3 > > > DWClass_PolynomialLD3d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 2 > > > DWClass_PolynomialLD2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 1 > > > DWClass_PolynomialLD1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,5 > > > DWClass_PolynomialLD5f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,4 > > > DWClass_PolynomialLD4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,3 > > > DWClass_PolynomialLD3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,2 > > > DWClass_PolynomialLD2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,1 > > > DWClass_PolynomialLD1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, float > > > DWClass_Mat22f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, double > > > DWClass_Mat22d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, float > > > DWClass_Mat23f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, double > > > DWClass_Mat23d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 3, float > > > DWClass_Mat33f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 3, double > > > DWClass_Mat33d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 4, float > > > DWClass_Mat34f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 4, double > > > DWClass_Mat34d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:28712,Usability,Simpl,SimpleDataWidget,28712,"(""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 2 > > > DWClass_PolynomialLD2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 1 > > > DWClass_PolynomialLD1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,5 > > > DWClass_PolynomialLD5f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,4 > > > DWClass_PolynomialLD4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,3 > > > DWClass_PolynomialLD3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,2 > > > DWClass_PolynomialLD2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,1 > > > DWClass_PolynomialLD1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, float > > > DWClass_Mat22f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, double > > > DWClass_Mat22d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, float > > > DWClass_Mat23f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, double > > > DWClass_Mat23d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 3, float > > > DWClass_Mat33f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 3, double > > > DWClass_Mat33d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 4, float > > > DWClass_Mat34f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 4, double > > > DWClass_Mat34d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 4, 4, float > > > DWClass_Mat44f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 4, 4, double > > > DWClass_M",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:28818,Usability,Simpl,SimpleDataWidget,28818," > > > DWClass_PolynomialLD2d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< double, 1 > > > DWClass_PolynomialLD1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,5 > > > DWClass_PolynomialLD5f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,4 > > > DWClass_PolynomialLD4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,3 > > > DWClass_PolynomialLD3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,2 > > > DWClass_PolynomialLD2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,1 > > > DWClass_PolynomialLD1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, float > > > DWClass_Mat22f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, double > > > DWClass_Mat22d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, float > > > DWClass_Mat23f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, double > > > DWClass_Mat23d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 3, float > > > DWClass_Mat33f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 3, double > > > DWClass_Mat33d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 4, float > > > DWClass_Mat34f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 4, double > > > DWClass_Mat34d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 4, 4, float > > > DWClass_Mat44f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 4, 4, double > > > DWClass_Mat44d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 6, 6, float > > > DWClass_M",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:28925,Usability,Simpl,SimpleDataWidget,28925,"per::Polynomial_LD< double, 1 > > > DWClass_PolynomialLD1d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,5 > > > DWClass_PolynomialLD5f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,4 > > > DWClass_PolynomialLD4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,3 > > > DWClass_PolynomialLD3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,2 > > > DWClass_PolynomialLD2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,1 > > > DWClass_PolynomialLD1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, float > > > DWClass_Mat22f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, double > > > DWClass_Mat22d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, float > > > DWClass_Mat23f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, double > > > DWClass_Mat23d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 3, float > > > DWClass_Mat33f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 3, double > > > DWClass_Mat33d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 4, float > > > DWClass_Mat34f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 4, double > > > DWClass_Mat34d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 4, 4, float > > > DWClass_Mat44f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 4, 4, double > > > DWClass_Mat44d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 6, 6, float > > > DWClass_Mat66f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 6, 6, double > > > DWClass_M",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:29031,Usability,Simpl,SimpleDataWidget,29031,"y, SimpleDataWidget< sofa::helper::Polynomial_LD< float,5 > > > DWClass_PolynomialLD5f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,4 > > > DWClass_PolynomialLD4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,3 > > > DWClass_PolynomialLD3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,2 > > > DWClass_PolynomialLD2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,1 > > > DWClass_PolynomialLD1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, float > > > DWClass_Mat22f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, double > > > DWClass_Mat22d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, float > > > DWClass_Mat23f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, double > > > DWClass_Mat23d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 3, float > > > DWClass_Mat33f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 3, double > > > DWClass_Mat33d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 4, float > > > DWClass_Mat34f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 4, double > > > DWClass_Mat34d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 4, 4, float > > > DWClass_Mat44f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 4, 4, double > > > DWClass_Mat44d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 6, 6, float > > > DWClass_Mat66f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 6, 6, double > > > DWClass_Mat66d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::objectmodel::TagSet ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:29138,Usability,Simpl,SimpleDataWidget,29138,"; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,4 > > > DWClass_PolynomialLD4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,3 > > > DWClass_PolynomialLD3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,2 > > > DWClass_PolynomialLD2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,1 > > > DWClass_PolynomialLD1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, float > > > DWClass_Mat22f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, double > > > DWClass_Mat22d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, float > > > DWClass_Mat23f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, double > > > DWClass_Mat23d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 3, float > > > DWClass_Mat33f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 3, double > > > DWClass_Mat33d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 4, float > > > DWClass_Mat34f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 4, double > > > DWClass_Mat34d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 4, 4, float > > > DWClass_Mat44f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 4, 4, double > > > DWClass_Mat44d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 6, 6, float > > > DWClass_Mat66f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 6, 6, double > > > DWClass_Mat66d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::objectmodel::TagSet > > DWClass_TagSet (""default"", true);  ; Creator< DataWidgetFactory, RadioDataWidget > DWClass_OptionsGroup",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:29244,Usability,Simpl,SimpleDataWidget,29244,"dget< sofa::helper::Polynomial_LD< float,4 > > > DWClass_PolynomialLD4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,3 > > > DWClass_PolynomialLD3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,2 > > > DWClass_PolynomialLD2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,1 > > > DWClass_PolynomialLD1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, float > > > DWClass_Mat22f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, double > > > DWClass_Mat22d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, float > > > DWClass_Mat23f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, double > > > DWClass_Mat23d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 3, float > > > DWClass_Mat33f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 3, double > > > DWClass_Mat33d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 4, float > > > DWClass_Mat34f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 4, double > > > DWClass_Mat34d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 4, 4, float > > > DWClass_Mat44f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 4, 4, double > > > DWClass_Mat44d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 6, 6, float > > > DWClass_Mat66f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 6, 6, double > > > DWClass_Mat66d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::objectmodel::TagSet > > DWClass_TagSet (""default"", true);  ; Creator< DataWidgetFactory, RadioDataWidget > DWClass_OptionsGroup (""default"", true);  OptionsGroup support.",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:29351,Usability,Simpl,SimpleDataWidget,29351,"dget< sofa::helper::Polynomial_LD< float,4 > > > DWClass_PolynomialLD4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,3 > > > DWClass_PolynomialLD3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,2 > > > DWClass_PolynomialLD2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,1 > > > DWClass_PolynomialLD1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, float > > > DWClass_Mat22f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, double > > > DWClass_Mat22d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, float > > > DWClass_Mat23f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, double > > > DWClass_Mat23d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 3, float > > > DWClass_Mat33f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 3, double > > > DWClass_Mat33d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 4, float > > > DWClass_Mat34f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 4, double > > > DWClass_Mat34d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 4, 4, float > > > DWClass_Mat44f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 4, 4, double > > > DWClass_Mat44d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 6, 6, float > > > DWClass_Mat66f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 6, 6, double > > > DWClass_Mat66d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::objectmodel::TagSet > > DWClass_TagSet (""default"", true);  ; Creator< DataWidgetFactory, RadioDataWidget > DWClass_OptionsGroup (""default"", true);  OptionsGroup support.",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:29457,Usability,Simpl,SimpleDataWidget,29457,"dget< sofa::helper::Polynomial_LD< float,4 > > > DWClass_PolynomialLD4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,3 > > > DWClass_PolynomialLD3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,2 > > > DWClass_PolynomialLD2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,1 > > > DWClass_PolynomialLD1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, float > > > DWClass_Mat22f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, double > > > DWClass_Mat22d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, float > > > DWClass_Mat23f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, double > > > DWClass_Mat23d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 3, float > > > DWClass_Mat33f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 3, double > > > DWClass_Mat33d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 4, float > > > DWClass_Mat34f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 4, double > > > DWClass_Mat34d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 4, 4, float > > > DWClass_Mat44f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 4, 4, double > > > DWClass_Mat44d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 6, 6, float > > > DWClass_Mat66f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 6, 6, double > > > DWClass_Mat66d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::objectmodel::TagSet > > DWClass_TagSet (""default"", true);  ; Creator< DataWidgetFactory, RadioDataWidget > DWClass_OptionsGroup (""default"", true);  OptionsGroup support.",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:29564,Usability,Simpl,SimpleDataWidget,29564,"dget< sofa::helper::Polynomial_LD< float,4 > > > DWClass_PolynomialLD4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,3 > > > DWClass_PolynomialLD3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,2 > > > DWClass_PolynomialLD2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,1 > > > DWClass_PolynomialLD1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, float > > > DWClass_Mat22f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, double > > > DWClass_Mat22d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, float > > > DWClass_Mat23f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, double > > > DWClass_Mat23d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 3, float > > > DWClass_Mat33f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 3, double > > > DWClass_Mat33d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 4, float > > > DWClass_Mat34f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 4, double > > > DWClass_Mat34d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 4, 4, float > > > DWClass_Mat44f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 4, 4, double > > > DWClass_Mat44d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 6, 6, float > > > DWClass_Mat66f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 6, 6, double > > > DWClass_Mat66d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::objectmodel::TagSet > > DWClass_TagSet (""default"", true);  ; Creator< DataWidgetFactory, RadioDataWidget > DWClass_OptionsGroup (""default"", true);  OptionsGroup support.",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:29670,Usability,Simpl,SimpleDataWidget,29670,"dget< sofa::helper::Polynomial_LD< float,4 > > > DWClass_PolynomialLD4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,3 > > > DWClass_PolynomialLD3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,2 > > > DWClass_PolynomialLD2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,1 > > > DWClass_PolynomialLD1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, float > > > DWClass_Mat22f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, double > > > DWClass_Mat22d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, float > > > DWClass_Mat23f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, double > > > DWClass_Mat23d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 3, float > > > DWClass_Mat33f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 3, double > > > DWClass_Mat33d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 4, float > > > DWClass_Mat34f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 4, double > > > DWClass_Mat34d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 4, 4, float > > > DWClass_Mat44f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 4, 4, double > > > DWClass_Mat44d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 6, 6, float > > > DWClass_Mat66f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 6, 6, double > > > DWClass_Mat66d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::objectmodel::TagSet > > DWClass_TagSet (""default"", true);  ; Creator< DataWidgetFactory, RadioDataWidget > DWClass_OptionsGroup (""default"", true);  OptionsGroup support.",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:29777,Usability,Simpl,SimpleDataWidget,29777,"dget< sofa::helper::Polynomial_LD< float,4 > > > DWClass_PolynomialLD4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,3 > > > DWClass_PolynomialLD3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,2 > > > DWClass_PolynomialLD2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,1 > > > DWClass_PolynomialLD1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, float > > > DWClass_Mat22f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, double > > > DWClass_Mat22d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, float > > > DWClass_Mat23f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, double > > > DWClass_Mat23d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 3, float > > > DWClass_Mat33f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 3, double > > > DWClass_Mat33d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 4, float > > > DWClass_Mat34f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 4, double > > > DWClass_Mat34d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 4, 4, float > > > DWClass_Mat44f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 4, 4, double > > > DWClass_Mat44d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 6, 6, float > > > DWClass_Mat66f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 6, 6, double > > > DWClass_Mat66d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::objectmodel::TagSet > > DWClass_TagSet (""default"", true);  ; Creator< DataWidgetFactory, RadioDataWidget > DWClass_OptionsGroup (""default"", true);  OptionsGroup support.",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:29883,Usability,Simpl,SimpleDataWidget,29883,"dget< sofa::helper::Polynomial_LD< float,4 > > > DWClass_PolynomialLD4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,3 > > > DWClass_PolynomialLD3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,2 > > > DWClass_PolynomialLD2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,1 > > > DWClass_PolynomialLD1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, float > > > DWClass_Mat22f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, double > > > DWClass_Mat22d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, float > > > DWClass_Mat23f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, double > > > DWClass_Mat23d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 3, float > > > DWClass_Mat33f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 3, double > > > DWClass_Mat33d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 4, float > > > DWClass_Mat34f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 4, double > > > DWClass_Mat34d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 4, 4, float > > > DWClass_Mat44f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 4, 4, double > > > DWClass_Mat44d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 6, 6, float > > > DWClass_Mat66f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 6, 6, double > > > DWClass_Mat66d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::objectmodel::TagSet > > DWClass_TagSet (""default"", true);  ; Creator< DataWidgetFactory, RadioDataWidget > DWClass_OptionsGroup (""default"", true);  OptionsGroup support.",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:29990,Usability,Simpl,SimpleDataWidget,29990,"dget< sofa::helper::Polynomial_LD< float,4 > > > DWClass_PolynomialLD4f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,3 > > > DWClass_PolynomialLD3f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,2 > > > DWClass_PolynomialLD2f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD< float,1 > > > DWClass_PolynomialLD1f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, float > > > DWClass_Mat22f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 2, double > > > DWClass_Mat22d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, float > > > DWClass_Mat23f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 2, 3, double > > > DWClass_Mat23d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 3, float > > > DWClass_Mat33f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 3, double > > > DWClass_Mat33d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 4, float > > > DWClass_Mat34f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 3, 4, double > > > DWClass_Mat34d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 4, 4, float > > > DWClass_Mat44f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 4, 4, double > > > DWClass_Mat44d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 6, 6, float > > > DWClass_Mat66f (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< Mat< 6, 6, double > > > DWClass_Mat66d (""default"", true);  ; Creator< DataWidgetFactory, SimpleDataWidget< sofa::core::objectmodel::TagSet > > DWClass_TagSet (""default"", true);  ; Creator< DataWidgetFactory, RadioDataWidget > DWClass_OptionsGroup (""default"", true);  OptionsGroup support.",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:30230,Usability,Simpl,SimpleDataWidget,30230,,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:30346,Usability,Simpl,SimpleDataWidget,30346,,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:30463,Usability,Simpl,SimpleDataWidget,30463,,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:30577,Usability,Simpl,SimpleDataWidget,30577,,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:30692,Usability,Simpl,SimpleDataWidget,30692,,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:30808,Usability,Simpl,SimpleDataWidget,30808,,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:30925,Usability,Simpl,SimpleDataWidget,30925,,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:31039,Usability,Simpl,SimpleDataWidget,31039,,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:59750,Usability,Simpl,SimpleDataWidget,59750," ; , . 3 ; , . ""Inertia Mass Matrix"" ; , . ""InertialMass"" ; , . T ; , . inertiaMassMatrix ;  . ). ◆ STRUCT_DATA_VAR_READONLY() [2/2]. template<class T > . sofa::gui::qt::STRUCT_DATA_VAR_READONLY ; (; sofa::defaulttype::RigidMass< 3 COMMA T > ; , . 3 ; , . ""Inertia Mass Matrix"" ; , . ""InertialMass"" ; , . typename data_type::Mat3x3 ; , . inertiaMassMatrix ;  . ). ◆ toHtmlString(). const std::string sofa::gui::qt::toHtmlString ; (; const Message::Type ; t). ◆ toString() [1/2]. std::string sofa::gui::qt::toString ; (; const std::string & ; s). inline . ◆ toString() [2/2]. template<class T > . std::string sofa::gui::qt::toString ; (; const T & ; v). inline . Variable Documentation. ◆ application. QApplication* sofa::gui::qt::application = nullptr. ◆ DW_Datafilename. helper::Creator<DataWidgetFactory,DataFileNameWidget> sofa::gui::qt::DW_Datafilename(""widget_filename"", false) ; (; ""widget_filename"" ; , . false ;  . ). ◆ DWClass_bool. Creator<DataWidgetFactory, SimpleDataWidget<bool> > sofa::gui::qt::DWClass_bool(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_char. Creator<DataWidgetFactory, SimpleDataWidget<char> > sofa::gui::qt::DWClass_char(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_DisplayFlags. helper::Creator<DataWidgetFactory, DisplayFlagsDataWidget > sofa::gui::qt::DWClass_DisplayFlags(""widget_displayFlags"", true) ; (; ""widget_displayFlags"" ; , . true ;  . ). ◆ DWClass_double. Creator<DataWidgetFactory, SimpleDataWidget<double> > sofa::gui::qt::DWClass_double(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Edge. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Edge > > sofa::gui::qt::DWClass_Edge(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,1> > > sofa::gui::qt::DWClass_fixed_array1d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1f. Creator<DataWidgetFactory, SimpleDataWidge",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:59897,Usability,Simpl,SimpleDataWidget,59897,"s T > . sofa::gui::qt::STRUCT_DATA_VAR_READONLY ; (; sofa::defaulttype::RigidMass< 3 COMMA T > ; , . 3 ; , . ""Inertia Mass Matrix"" ; , . ""InertialMass"" ; , . typename data_type::Mat3x3 ; , . inertiaMassMatrix ;  . ). ◆ toHtmlString(). const std::string sofa::gui::qt::toHtmlString ; (; const Message::Type ; t). ◆ toString() [1/2]. std::string sofa::gui::qt::toString ; (; const std::string & ; s). inline . ◆ toString() [2/2]. template<class T > . std::string sofa::gui::qt::toString ; (; const T & ; v). inline . Variable Documentation. ◆ application. QApplication* sofa::gui::qt::application = nullptr. ◆ DW_Datafilename. helper::Creator<DataWidgetFactory,DataFileNameWidget> sofa::gui::qt::DW_Datafilename(""widget_filename"", false) ; (; ""widget_filename"" ; , . false ;  . ). ◆ DWClass_bool. Creator<DataWidgetFactory, SimpleDataWidget<bool> > sofa::gui::qt::DWClass_bool(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_char. Creator<DataWidgetFactory, SimpleDataWidget<char> > sofa::gui::qt::DWClass_char(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_DisplayFlags. helper::Creator<DataWidgetFactory, DisplayFlagsDataWidget > sofa::gui::qt::DWClass_DisplayFlags(""widget_displayFlags"", true) ; (; ""widget_displayFlags"" ; , . true ;  . ). ◆ DWClass_double. Creator<DataWidgetFactory, SimpleDataWidget<double> > sofa::gui::qt::DWClass_double(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Edge. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Edge > > sofa::gui::qt::DWClass_Edge(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,1> > > sofa::gui::qt::DWClass_fixed_array1d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,1> > > sofa::gui::qt::DWClass_fixed_array1f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1i. Creato",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:60241,Usability,Simpl,SimpleDataWidget,60241,"fa::gui::qt::toString ; (; const std::string & ; s). inline . ◆ toString() [2/2]. template<class T > . std::string sofa::gui::qt::toString ; (; const T & ; v). inline . Variable Documentation. ◆ application. QApplication* sofa::gui::qt::application = nullptr. ◆ DW_Datafilename. helper::Creator<DataWidgetFactory,DataFileNameWidget> sofa::gui::qt::DW_Datafilename(""widget_filename"", false) ; (; ""widget_filename"" ; , . false ;  . ). ◆ DWClass_bool. Creator<DataWidgetFactory, SimpleDataWidget<bool> > sofa::gui::qt::DWClass_bool(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_char. Creator<DataWidgetFactory, SimpleDataWidget<char> > sofa::gui::qt::DWClass_char(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_DisplayFlags. helper::Creator<DataWidgetFactory, DisplayFlagsDataWidget > sofa::gui::qt::DWClass_DisplayFlags(""widget_displayFlags"", true) ; (; ""widget_displayFlags"" ; , . true ;  . ). ◆ DWClass_double. Creator<DataWidgetFactory, SimpleDataWidget<double> > sofa::gui::qt::DWClass_double(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Edge. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Edge > > sofa::gui::qt::DWClass_Edge(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,1> > > sofa::gui::qt::DWClass_fixed_array1d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,1> > > sofa::gui::qt::DWClass_fixed_array1f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,1> > > sofa::gui::qt::DWClass_fixed_array1i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,1> > > sofa::gui::qt::DWClass_fixed_array1u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWCl",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:60392,Usability,Simpl,SimpleDataWidget,60392," . Variable Documentation. ◆ application. QApplication* sofa::gui::qt::application = nullptr. ◆ DW_Datafilename. helper::Creator<DataWidgetFactory,DataFileNameWidget> sofa::gui::qt::DW_Datafilename(""widget_filename"", false) ; (; ""widget_filename"" ; , . false ;  . ). ◆ DWClass_bool. Creator<DataWidgetFactory, SimpleDataWidget<bool> > sofa::gui::qt::DWClass_bool(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_char. Creator<DataWidgetFactory, SimpleDataWidget<char> > sofa::gui::qt::DWClass_char(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_DisplayFlags. helper::Creator<DataWidgetFactory, DisplayFlagsDataWidget > sofa::gui::qt::DWClass_DisplayFlags(""widget_displayFlags"", true) ; (; ""widget_displayFlags"" ; , . true ;  . ). ◆ DWClass_double. Creator<DataWidgetFactory, SimpleDataWidget<double> > sofa::gui::qt::DWClass_double(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Edge. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Edge > > sofa::gui::qt::DWClass_Edge(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,1> > > sofa::gui::qt::DWClass_fixed_array1d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,1> > > sofa::gui::qt::DWClass_fixed_array1f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,1> > > sofa::gui::qt::DWClass_fixed_array1i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,1> > > sofa::gui::qt::DWClass_fixed_array1u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,2> > > sofa::gui::qt::DWClass_fixed_array2d(""default"", true) ; (; ""default"" ; , . t",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:60582,Usability,Simpl,SimpleDataWidget,60582,"tafilename(""widget_filename"", false) ; (; ""widget_filename"" ; , . false ;  . ). ◆ DWClass_bool. Creator<DataWidgetFactory, SimpleDataWidget<bool> > sofa::gui::qt::DWClass_bool(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_char. Creator<DataWidgetFactory, SimpleDataWidget<char> > sofa::gui::qt::DWClass_char(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_DisplayFlags. helper::Creator<DataWidgetFactory, DisplayFlagsDataWidget > sofa::gui::qt::DWClass_DisplayFlags(""widget_displayFlags"", true) ; (; ""widget_displayFlags"" ; , . true ;  . ). ◆ DWClass_double. Creator<DataWidgetFactory, SimpleDataWidget<double> > sofa::gui::qt::DWClass_double(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Edge. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Edge > > sofa::gui::qt::DWClass_Edge(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,1> > > sofa::gui::qt::DWClass_fixed_array1d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,1> > > sofa::gui::qt::DWClass_fixed_array1f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,1> > > sofa::gui::qt::DWClass_fixed_array1i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,1> > > sofa::gui::qt::DWClass_fixed_array1u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,2> > > sofa::gui::qt::DWClass_fixed_array2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,2> > > sofa::gui::qt::DWClass_fixed_array2f(""default"", true) ; (; ""default"" ; , . true ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:60766,Usability,Simpl,SimpleDataWidget,60766,"t"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_char. Creator<DataWidgetFactory, SimpleDataWidget<char> > sofa::gui::qt::DWClass_char(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_DisplayFlags. helper::Creator<DataWidgetFactory, DisplayFlagsDataWidget > sofa::gui::qt::DWClass_DisplayFlags(""widget_displayFlags"", true) ; (; ""widget_displayFlags"" ; , . true ;  . ). ◆ DWClass_double. Creator<DataWidgetFactory, SimpleDataWidget<double> > sofa::gui::qt::DWClass_double(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Edge. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Edge > > sofa::gui::qt::DWClass_Edge(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,1> > > sofa::gui::qt::DWClass_fixed_array1d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,1> > > sofa::gui::qt::DWClass_fixed_array1f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,1> > > sofa::gui::qt::DWClass_fixed_array1i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,1> > > sofa::gui::qt::DWClass_fixed_array1u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,2> > > sofa::gui::qt::DWClass_fixed_array2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,2> > > sofa::gui::qt::DWClass_fixed_array2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,2> > > sofa::gui::qt::DWClass_fixed_array2i(""default"", true) ; (; ""default"" ; , . true ;  ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:60949,Usability,Simpl,SimpleDataWidget,60949," ;  . ). ◆ DWClass_DisplayFlags. helper::Creator<DataWidgetFactory, DisplayFlagsDataWidget > sofa::gui::qt::DWClass_DisplayFlags(""widget_displayFlags"", true) ; (; ""widget_displayFlags"" ; , . true ;  . ). ◆ DWClass_double. Creator<DataWidgetFactory, SimpleDataWidget<double> > sofa::gui::qt::DWClass_double(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Edge. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Edge > > sofa::gui::qt::DWClass_Edge(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,1> > > sofa::gui::qt::DWClass_fixed_array1d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,1> > > sofa::gui::qt::DWClass_fixed_array1f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,1> > > sofa::gui::qt::DWClass_fixed_array1i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,1> > > sofa::gui::qt::DWClass_fixed_array1u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,2> > > sofa::gui::qt::DWClass_fixed_array2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,2> > > sofa::gui::qt::DWClass_fixed_array2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,2> > > sofa::gui::qt::DWClass_fixed_array2i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,2> > > sofa::gui::qt::DWClass_fixed_array2u(""default"", true) ; (; ""default"" ; , . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:61130,Usability,Simpl,SimpleDataWidget,61130," , . true ;  . ). ◆ DWClass_double. Creator<DataWidgetFactory, SimpleDataWidget<double> > sofa::gui::qt::DWClass_double(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Edge. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Edge > > sofa::gui::qt::DWClass_Edge(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,1> > > sofa::gui::qt::DWClass_fixed_array1d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,1> > > sofa::gui::qt::DWClass_fixed_array1f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,1> > > sofa::gui::qt::DWClass_fixed_array1i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,1> > > sofa::gui::qt::DWClass_fixed_array1u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,2> > > sofa::gui::qt::DWClass_fixed_array2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,2> > > sofa::gui::qt::DWClass_fixed_array2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,2> > > sofa::gui::qt::DWClass_fixed_array2i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,2> > > sofa::gui::qt::DWClass_fixed_array2u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,3> > > sofa::gui::qt::DWClass_fixed_array3d(""default"", true) ; (; ""default"" ; , . t",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:61320,Usability,Simpl,SimpleDataWidget,61320,"Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Edge > > sofa::gui::qt::DWClass_Edge(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,1> > > sofa::gui::qt::DWClass_fixed_array1d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,1> > > sofa::gui::qt::DWClass_fixed_array1f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,1> > > sofa::gui::qt::DWClass_fixed_array1i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,1> > > sofa::gui::qt::DWClass_fixed_array1u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,2> > > sofa::gui::qt::DWClass_fixed_array2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,2> > > sofa::gui::qt::DWClass_fixed_array2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,2> > > sofa::gui::qt::DWClass_fixed_array2i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,2> > > sofa::gui::qt::DWClass_fixed_array2u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,3> > > sofa::gui::qt::DWClass_fixed_array3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,3> > > sofa::gui::qt::DWClass_fixed_array3f(""default"", true) ; (; ""default"" ; , . true ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:61504,Usability,Simpl,SimpleDataWidget,61504,"ray1d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,1> > > sofa::gui::qt::DWClass_fixed_array1d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,1> > > sofa::gui::qt::DWClass_fixed_array1f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,1> > > sofa::gui::qt::DWClass_fixed_array1i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,1> > > sofa::gui::qt::DWClass_fixed_array1u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,2> > > sofa::gui::qt::DWClass_fixed_array2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,2> > > sofa::gui::qt::DWClass_fixed_array2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,2> > > sofa::gui::qt::DWClass_fixed_array2i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,2> > > sofa::gui::qt::DWClass_fixed_array2u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,3> > > sofa::gui::qt::DWClass_fixed_array3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,3> > > sofa::gui::qt::DWClass_fixed_array3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,3> > > sofa::gui::qt::DWClass_fixed_array3i(""default"", true) ; (; ""default"" ; , . true ;  ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:61687,Usability,Simpl,SimpleDataWidget,61687,"array1f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,1> > > sofa::gui::qt::DWClass_fixed_array1f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,1> > > sofa::gui::qt::DWClass_fixed_array1i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,1> > > sofa::gui::qt::DWClass_fixed_array1u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,2> > > sofa::gui::qt::DWClass_fixed_array2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,2> > > sofa::gui::qt::DWClass_fixed_array2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,2> > > sofa::gui::qt::DWClass_fixed_array2i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,2> > > sofa::gui::qt::DWClass_fixed_array2u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,3> > > sofa::gui::qt::DWClass_fixed_array3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,3> > > sofa::gui::qt::DWClass_fixed_array3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,3> > > sofa::gui::qt::DWClass_fixed_array3i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,3> > > sofa::gui::qt::DWClass_fixed_array3u(""default"", true) ; (; ""default"" ; , . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:61868,Usability,Simpl,SimpleDataWidget,61868,"ay1i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,1> > > sofa::gui::qt::DWClass_fixed_array1i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array1u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,1> > > sofa::gui::qt::DWClass_fixed_array1u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,2> > > sofa::gui::qt::DWClass_fixed_array2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,2> > > sofa::gui::qt::DWClass_fixed_array2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,2> > > sofa::gui::qt::DWClass_fixed_array2i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,2> > > sofa::gui::qt::DWClass_fixed_array2u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,3> > > sofa::gui::qt::DWClass_fixed_array3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,3> > > sofa::gui::qt::DWClass_fixed_array3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,3> > > sofa::gui::qt::DWClass_fixed_array3i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,3> > > sofa::gui::qt::DWClass_fixed_array3u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,4> > > sofa::gui::qt::DWClass_fixed_array4d(""default"", true) ; (; ""default"" ; , . t",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:62058,Usability,Simpl,SimpleDataWidget,62058,"Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,1> > > sofa::gui::qt::DWClass_fixed_array1u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,2> > > sofa::gui::qt::DWClass_fixed_array2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,2> > > sofa::gui::qt::DWClass_fixed_array2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,2> > > sofa::gui::qt::DWClass_fixed_array2i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,2> > > sofa::gui::qt::DWClass_fixed_array2u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,3> > > sofa::gui::qt::DWClass_fixed_array3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,3> > > sofa::gui::qt::DWClass_fixed_array3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,3> > > sofa::gui::qt::DWClass_fixed_array3i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,3> > > sofa::gui::qt::DWClass_fixed_array3u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,4> > > sofa::gui::qt::DWClass_fixed_array4d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,4> > > sofa::gui::qt::DWClass_fixed_array4f(""default"", true) ; (; ""default"" ; , . true ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:62242,Usability,Simpl,SimpleDataWidget,62242,"ray2d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,2> > > sofa::gui::qt::DWClass_fixed_array2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,2> > > sofa::gui::qt::DWClass_fixed_array2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,2> > > sofa::gui::qt::DWClass_fixed_array2i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,2> > > sofa::gui::qt::DWClass_fixed_array2u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,3> > > sofa::gui::qt::DWClass_fixed_array3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,3> > > sofa::gui::qt::DWClass_fixed_array3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,3> > > sofa::gui::qt::DWClass_fixed_array3i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,3> > > sofa::gui::qt::DWClass_fixed_array3u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,4> > > sofa::gui::qt::DWClass_fixed_array4d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,4> > > sofa::gui::qt::DWClass_fixed_array4f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,4> > > sofa::gui::qt::DWClass_fixed_array4i(""default"", true) ; (; ""default"" ; , . true ;  ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:62425,Usability,Simpl,SimpleDataWidget,62425,"array2f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,2> > > sofa::gui::qt::DWClass_fixed_array2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,2> > > sofa::gui::qt::DWClass_fixed_array2i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,2> > > sofa::gui::qt::DWClass_fixed_array2u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,3> > > sofa::gui::qt::DWClass_fixed_array3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,3> > > sofa::gui::qt::DWClass_fixed_array3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,3> > > sofa::gui::qt::DWClass_fixed_array3i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,3> > > sofa::gui::qt::DWClass_fixed_array3u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,4> > > sofa::gui::qt::DWClass_fixed_array4d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,4> > > sofa::gui::qt::DWClass_fixed_array4f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,4> > > sofa::gui::qt::DWClass_fixed_array4i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,4> > > sofa::gui::qt::DWClass_fixed_array4u(""default"", true) ; (; ""default"" ; , . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:62606,Usability,Simpl,SimpleDataWidget,62606,"ay2i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,2> > > sofa::gui::qt::DWClass_fixed_array2i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array2u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,2> > > sofa::gui::qt::DWClass_fixed_array2u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,3> > > sofa::gui::qt::DWClass_fixed_array3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,3> > > sofa::gui::qt::DWClass_fixed_array3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,3> > > sofa::gui::qt::DWClass_fixed_array3i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,3> > > sofa::gui::qt::DWClass_fixed_array3u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,4> > > sofa::gui::qt::DWClass_fixed_array4d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,4> > > sofa::gui::qt::DWClass_fixed_array4f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,4> > > sofa::gui::qt::DWClass_fixed_array4i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,4> > > sofa::gui::qt::DWClass_fixed_array4u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,6> > > sofa::gui::qt::DWClass_fixed_array6d(""default"", true) ; (; ""default"" ; , . t",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:62796,Usability,Simpl,SimpleDataWidget,62796,"Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,2> > > sofa::gui::qt::DWClass_fixed_array2u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,3> > > sofa::gui::qt::DWClass_fixed_array3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,3> > > sofa::gui::qt::DWClass_fixed_array3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,3> > > sofa::gui::qt::DWClass_fixed_array3i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,3> > > sofa::gui::qt::DWClass_fixed_array3u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,4> > > sofa::gui::qt::DWClass_fixed_array4d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,4> > > sofa::gui::qt::DWClass_fixed_array4f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,4> > > sofa::gui::qt::DWClass_fixed_array4i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,4> > > sofa::gui::qt::DWClass_fixed_array4u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,6> > > sofa::gui::qt::DWClass_fixed_array6d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,6> > > sofa::gui::qt::DWClass_fixed_array6f(""default"", true) ; (; ""default"" ; , . true ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:62980,Usability,Simpl,SimpleDataWidget,62980,"ray3d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,3> > > sofa::gui::qt::DWClass_fixed_array3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,3> > > sofa::gui::qt::DWClass_fixed_array3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,3> > > sofa::gui::qt::DWClass_fixed_array3i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,3> > > sofa::gui::qt::DWClass_fixed_array3u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,4> > > sofa::gui::qt::DWClass_fixed_array4d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,4> > > sofa::gui::qt::DWClass_fixed_array4f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,4> > > sofa::gui::qt::DWClass_fixed_array4i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,4> > > sofa::gui::qt::DWClass_fixed_array4u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,6> > > sofa::gui::qt::DWClass_fixed_array6d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,6> > > sofa::gui::qt::DWClass_fixed_array6f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,6> > > sofa::gui::qt::DWClass_fixed_array6i(""default"", true) ; (; ""default"" ; , . true ;  ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:63163,Usability,Simpl,SimpleDataWidget,63163,"array3f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,3> > > sofa::gui::qt::DWClass_fixed_array3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,3> > > sofa::gui::qt::DWClass_fixed_array3i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,3> > > sofa::gui::qt::DWClass_fixed_array3u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,4> > > sofa::gui::qt::DWClass_fixed_array4d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,4> > > sofa::gui::qt::DWClass_fixed_array4f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,4> > > sofa::gui::qt::DWClass_fixed_array4i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,4> > > sofa::gui::qt::DWClass_fixed_array4u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,6> > > sofa::gui::qt::DWClass_fixed_array6d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,6> > > sofa::gui::qt::DWClass_fixed_array6f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,6> > > sofa::gui::qt::DWClass_fixed_array6i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,6> > > sofa::gui::qt::DWClass_fixed_array6u(""default"", true) ; (; ""default"" ; , . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:63344,Usability,Simpl,SimpleDataWidget,63344,"ay3i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,3> > > sofa::gui::qt::DWClass_fixed_array3i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array3u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,3> > > sofa::gui::qt::DWClass_fixed_array3u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,4> > > sofa::gui::qt::DWClass_fixed_array4d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,4> > > sofa::gui::qt::DWClass_fixed_array4f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,4> > > sofa::gui::qt::DWClass_fixed_array4i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,4> > > sofa::gui::qt::DWClass_fixed_array4u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,6> > > sofa::gui::qt::DWClass_fixed_array6d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,6> > > sofa::gui::qt::DWClass_fixed_array6f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,6> > > sofa::gui::qt::DWClass_fixed_array6i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,6> > > sofa::gui::qt::DWClass_fixed_array6u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,8> > > sofa::gui::qt::DWClass_fixed_array8d(""default"", true) ; (; ""default"" ; , . t",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:63534,Usability,Simpl,SimpleDataWidget,63534,"Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,3> > > sofa::gui::qt::DWClass_fixed_array3u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,4> > > sofa::gui::qt::DWClass_fixed_array4d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,4> > > sofa::gui::qt::DWClass_fixed_array4f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,4> > > sofa::gui::qt::DWClass_fixed_array4i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,4> > > sofa::gui::qt::DWClass_fixed_array4u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,6> > > sofa::gui::qt::DWClass_fixed_array6d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,6> > > sofa::gui::qt::DWClass_fixed_array6f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,6> > > sofa::gui::qt::DWClass_fixed_array6i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,6> > > sofa::gui::qt::DWClass_fixed_array6u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,8> > > sofa::gui::qt::DWClass_fixed_array8d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,8> > > sofa::gui::qt::DWClass_fixed_array8f(""default"", true) ; (; ""default"" ; , . true ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:63718,Usability,Simpl,SimpleDataWidget,63718,"ray4d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,4> > > sofa::gui::qt::DWClass_fixed_array4d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,4> > > sofa::gui::qt::DWClass_fixed_array4f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,4> > > sofa::gui::qt::DWClass_fixed_array4i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,4> > > sofa::gui::qt::DWClass_fixed_array4u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,6> > > sofa::gui::qt::DWClass_fixed_array6d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,6> > > sofa::gui::qt::DWClass_fixed_array6f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,6> > > sofa::gui::qt::DWClass_fixed_array6i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,6> > > sofa::gui::qt::DWClass_fixed_array6u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,8> > > sofa::gui::qt::DWClass_fixed_array8d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,8> > > sofa::gui::qt::DWClass_fixed_array8f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,8> > > sofa::gui::qt::DWClass_fixed_array8i(""default"", true) ; (; ""default"" ; , . true ;  ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:63901,Usability,Simpl,SimpleDataWidget,63901,"array4f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,4> > > sofa::gui::qt::DWClass_fixed_array4f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,4> > > sofa::gui::qt::DWClass_fixed_array4i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,4> > > sofa::gui::qt::DWClass_fixed_array4u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,6> > > sofa::gui::qt::DWClass_fixed_array6d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,6> > > sofa::gui::qt::DWClass_fixed_array6f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,6> > > sofa::gui::qt::DWClass_fixed_array6i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,6> > > sofa::gui::qt::DWClass_fixed_array6u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,8> > > sofa::gui::qt::DWClass_fixed_array8d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,8> > > sofa::gui::qt::DWClass_fixed_array8f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,8> > > sofa::gui::qt::DWClass_fixed_array8i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,8> > > sofa::gui::qt::DWClass_fixed_array8u(""default"", true) ; (; ""default"" ; , . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:64082,Usability,Simpl,SimpleDataWidget,64082,"ay4i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,4> > > sofa::gui::qt::DWClass_fixed_array4i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array4u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,4> > > sofa::gui::qt::DWClass_fixed_array4u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,6> > > sofa::gui::qt::DWClass_fixed_array6d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,6> > > sofa::gui::qt::DWClass_fixed_array6f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,6> > > sofa::gui::qt::DWClass_fixed_array6i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,6> > > sofa::gui::qt::DWClass_fixed_array6u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,8> > > sofa::gui::qt::DWClass_fixed_array8d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,8> > > sofa::gui::qt::DWClass_fixed_array8f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,8> > > sofa::gui::qt::DWClass_fixed_array8i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,8> > > sofa::gui::qt::DWClass_fixed_array8u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_float. Creator<DataWidgetFactory, SimpleDataWidget<float> > sofa::gui::qt::DWClass_float(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Hexahedron. ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:64272,Usability,Simpl,SimpleDataWidget,64272,"Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,4> > > sofa::gui::qt::DWClass_fixed_array4u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,6> > > sofa::gui::qt::DWClass_fixed_array6d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,6> > > sofa::gui::qt::DWClass_fixed_array6f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,6> > > sofa::gui::qt::DWClass_fixed_array6i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,6> > > sofa::gui::qt::DWClass_fixed_array6u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,8> > > sofa::gui::qt::DWClass_fixed_array8d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,8> > > sofa::gui::qt::DWClass_fixed_array8f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,8> > > sofa::gui::qt::DWClass_fixed_array8i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,8> > > sofa::gui::qt::DWClass_fixed_array8u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_float. Creator<DataWidgetFactory, SimpleDataWidget<float> > sofa::gui::qt::DWClass_float(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Hexahedron. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Hexahedron > > sofa::gui::qt::DWClass_Hexahedron(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:64456,Usability,Simpl,SimpleDataWidget,64456,"ray6d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,6> > > sofa::gui::qt::DWClass_fixed_array6d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,6> > > sofa::gui::qt::DWClass_fixed_array6f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,6> > > sofa::gui::qt::DWClass_fixed_array6i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,6> > > sofa::gui::qt::DWClass_fixed_array6u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,8> > > sofa::gui::qt::DWClass_fixed_array8d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,8> > > sofa::gui::qt::DWClass_fixed_array8f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,8> > > sofa::gui::qt::DWClass_fixed_array8i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,8> > > sofa::gui::qt::DWClass_fixed_array8u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_float. Creator<DataWidgetFactory, SimpleDataWidget<float> > sofa::gui::qt::DWClass_float(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Hexahedron. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Hexahedron > > sofa::gui::qt::DWClass_Hexahedron(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_int. Creator<DataWidgetFactory, SimpleDataWidget<int> > sofa::gui::qt::DWClass_int(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_mapdeque2d. Creator<DataWidgetFactory, G",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:64639,Usability,Simpl,SimpleDataWidget,64639,"array6f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,6> > > sofa::gui::qt::DWClass_fixed_array6f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,6> > > sofa::gui::qt::DWClass_fixed_array6i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,6> > > sofa::gui::qt::DWClass_fixed_array6u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,8> > > sofa::gui::qt::DWClass_fixed_array8d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,8> > > sofa::gui::qt::DWClass_fixed_array8f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,8> > > sofa::gui::qt::DWClass_fixed_array8i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,8> > > sofa::gui::qt::DWClass_fixed_array8u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_float. Creator<DataWidgetFactory, SimpleDataWidget<float> > sofa::gui::qt::DWClass_float(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Hexahedron. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Hexahedron > > sofa::gui::qt::DWClass_Hexahedron(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_int. Creator<DataWidgetFactory, SimpleDataWidget<int> > sofa::gui::qt::DWClass_int(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_mapdeque2d. Creator<DataWidgetFactory, GraphDataWidget< std::map< std::string, std::deque<Vec2d> > > > sofa::gui::qt::DWClass_mapdeque2d(""graph"", true) ; (; ""graph"" ; , . true ;  . ). ◆ DWClass_mapdequed. Creator<DataWidge",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:64820,Usability,Simpl,SimpleDataWidget,64820,"ay6i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,6> > > sofa::gui::qt::DWClass_fixed_array6i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array6u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,6> > > sofa::gui::qt::DWClass_fixed_array6u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,8> > > sofa::gui::qt::DWClass_fixed_array8d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,8> > > sofa::gui::qt::DWClass_fixed_array8f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,8> > > sofa::gui::qt::DWClass_fixed_array8i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,8> > > sofa::gui::qt::DWClass_fixed_array8u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_float. Creator<DataWidgetFactory, SimpleDataWidget<float> > sofa::gui::qt::DWClass_float(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Hexahedron. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Hexahedron > > sofa::gui::qt::DWClass_Hexahedron(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_int. Creator<DataWidgetFactory, SimpleDataWidget<int> > sofa::gui::qt::DWClass_int(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_mapdeque2d. Creator<DataWidgetFactory, GraphDataWidget< std::map< std::string, std::deque<Vec2d> > > > sofa::gui::qt::DWClass_mapdeque2d(""graph"", true) ; (; ""graph"" ; , . true ;  . ). ◆ DWClass_mapdequed. Creator<DataWidgetFactory, GraphDataWidget< std::map< std::string, std::deque<double> > > > sofa::gui::qt::DWClass_mapdequed(""graph"", true) ; (; ""graph"" ; , . true ;  . ). ◆ DWClass_mapdequef. Creator<D",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:65002,Usability,Simpl,SimpleDataWidget,65002,"Class_fixed_array6u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,6> > > sofa::gui::qt::DWClass_fixed_array6u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,8> > > sofa::gui::qt::DWClass_fixed_array8d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,8> > > sofa::gui::qt::DWClass_fixed_array8f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,8> > > sofa::gui::qt::DWClass_fixed_array8i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,8> > > sofa::gui::qt::DWClass_fixed_array8u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_float. Creator<DataWidgetFactory, SimpleDataWidget<float> > sofa::gui::qt::DWClass_float(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Hexahedron. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Hexahedron > > sofa::gui::qt::DWClass_Hexahedron(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_int. Creator<DataWidgetFactory, SimpleDataWidget<int> > sofa::gui::qt::DWClass_int(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_mapdeque2d. Creator<DataWidgetFactory, GraphDataWidget< std::map< std::string, std::deque<Vec2d> > > > sofa::gui::qt::DWClass_mapdeque2d(""graph"", true) ; (; ""graph"" ; , . true ;  . ). ◆ DWClass_mapdequed. Creator<DataWidgetFactory, GraphDataWidget< std::map< std::string, std::deque<double> > > > sofa::gui::qt::DWClass_mapdequed(""graph"", true) ; (; ""graph"" ; , . true ;  . ). ◆ DWClass_mapdequef. Creator<DataWidgetFactory, GraphDataWidget< std::map< std::string, std::deque<float> > > > sofa::gui::qt::DWClass_mapdequef(""graph"", true) ; (; ""graph"" ; , . true ;  . ). ◆ DW",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:65157,Usability,Simpl,SimpleDataWidget,65157," ;  . ). ◆ DWClass_fixed_array8d. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<double,8> > > sofa::gui::qt::DWClass_fixed_array8d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,8> > > sofa::gui::qt::DWClass_fixed_array8f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,8> > > sofa::gui::qt::DWClass_fixed_array8i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,8> > > sofa::gui::qt::DWClass_fixed_array8u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_float. Creator<DataWidgetFactory, SimpleDataWidget<float> > sofa::gui::qt::DWClass_float(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Hexahedron. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Hexahedron > > sofa::gui::qt::DWClass_Hexahedron(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_int. Creator<DataWidgetFactory, SimpleDataWidget<int> > sofa::gui::qt::DWClass_int(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_mapdeque2d. Creator<DataWidgetFactory, GraphDataWidget< std::map< std::string, std::deque<Vec2d> > > > sofa::gui::qt::DWClass_mapdeque2d(""graph"", true) ; (; ""graph"" ; , . true ;  . ). ◆ DWClass_mapdequed. Creator<DataWidgetFactory, GraphDataWidget< std::map< std::string, std::deque<double> > > > sofa::gui::qt::DWClass_mapdequed(""graph"", true) ; (; ""graph"" ; , . true ;  . ). ◆ DWClass_mapdequef. Creator<DataWidgetFactory, GraphDataWidget< std::map< std::string, std::deque<float> > > > sofa::gui::qt::DWClass_mapdequef(""graph"", true) ; (; ""graph"" ; , . true ;  . ). ◆ DWClass_mapvector2d. Creator<DataWidgetFactory, GraphDataWidget< std::map< std::string, sofa::type::vector<Vec2d> > > > sofa::gui::qt::DWClass_mapvector2d(""graph"", true) ; (; ""gra",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:65349,Usability,Simpl,SimpleDataWidget,65349,"ault"" ; , . true ;  . ). ◆ DWClass_fixed_array8f. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<float,8> > > sofa::gui::qt::DWClass_fixed_array8f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8i. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<int,8> > > sofa::gui::qt::DWClass_fixed_array8i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_fixed_array8u. Creator<DataWidgetFactory, SimpleDataWidget< fixed_array<unsigned int,8> > > sofa::gui::qt::DWClass_fixed_array8u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_float. Creator<DataWidgetFactory, SimpleDataWidget<float> > sofa::gui::qt::DWClass_float(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Hexahedron. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Hexahedron > > sofa::gui::qt::DWClass_Hexahedron(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_int. Creator<DataWidgetFactory, SimpleDataWidget<int> > sofa::gui::qt::DWClass_int(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_mapdeque2d. Creator<DataWidgetFactory, GraphDataWidget< std::map< std::string, std::deque<Vec2d> > > > sofa::gui::qt::DWClass_mapdeque2d(""graph"", true) ; (; ""graph"" ; , . true ;  . ). ◆ DWClass_mapdequed. Creator<DataWidgetFactory, GraphDataWidget< std::map< std::string, std::deque<double> > > > sofa::gui::qt::DWClass_mapdequed(""graph"", true) ; (; ""graph"" ; , . true ;  . ). ◆ DWClass_mapdequef. Creator<DataWidgetFactory, GraphDataWidget< std::map< std::string, std::deque<float> > > > sofa::gui::qt::DWClass_mapdequef(""graph"", true) ; (; ""graph"" ; , . true ;  . ). ◆ DWClass_mapvector2d. Creator<DataWidgetFactory, GraphDataWidget< std::map< std::string, sofa::type::vector<Vec2d> > > > sofa::gui::qt::DWClass_mapvector2d(""graph"", true) ; (; ""graph"" ; , . true ;  . ). ◆ DWClass_mapvectord. Creator<DataWidgetFactory, GraphDataWidget< std::map< std::string, sofa::type::vector<double> > > > sofa::gui::qt::DWClass_",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:66684,Usability,Simpl,SimpleDataWidget,66684,"d::string, std::deque<double> > > > sofa::gui::qt::DWClass_mapdequed(""graph"", true) ; (; ""graph"" ; , . true ;  . ). ◆ DWClass_mapdequef. Creator<DataWidgetFactory, GraphDataWidget< std::map< std::string, std::deque<float> > > > sofa::gui::qt::DWClass_mapdequef(""graph"", true) ; (; ""graph"" ; , . true ;  . ). ◆ DWClass_mapvector2d. Creator<DataWidgetFactory, GraphDataWidget< std::map< std::string, sofa::type::vector<Vec2d> > > > sofa::gui::qt::DWClass_mapvector2d(""graph"", true) ; (; ""graph"" ; , . true ;  . ). ◆ DWClass_mapvectord. Creator<DataWidgetFactory, GraphDataWidget< std::map< std::string, sofa::type::vector<double> > > > sofa::gui::qt::DWClass_mapvectord(""graph"", true) ; (; ""graph"" ; , . true ;  . ). ◆ DWClass_mapvectorf. Creator<DataWidgetFactory, GraphDataWidget< std::map< std::string, sofa::type::vector<float> > > > sofa::gui::qt::DWClass_mapvectorf(""graph"", true) ; (; ""graph"" ; , . true ;  . ). ◆ DWClass_Mat22d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<2,2,double> > > sofa::gui::qt::DWClass_Mat22d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat22f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<2,2,float> > > sofa::gui::qt::DWClass_Mat22f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat23d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<2,3,double> > > sofa::gui::qt::DWClass_Mat23d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat23f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<2,3,float> > > sofa::gui::qt::DWClass_Mat23f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat33d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,3,double> > > sofa::gui::qt::DWClass_Mat33d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat33f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,3,float> > > sofa::gui::qt::DWClass_Mat33f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat34d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,4,double> > > sofa::gui::qt::DWCla",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:66848,Usability,Simpl,SimpleDataWidget,66848,"GraphDataWidget< std::map< std::string, std::deque<float> > > > sofa::gui::qt::DWClass_mapdequef(""graph"", true) ; (; ""graph"" ; , . true ;  . ). ◆ DWClass_mapvector2d. Creator<DataWidgetFactory, GraphDataWidget< std::map< std::string, sofa::type::vector<Vec2d> > > > sofa::gui::qt::DWClass_mapvector2d(""graph"", true) ; (; ""graph"" ; , . true ;  . ). ◆ DWClass_mapvectord. Creator<DataWidgetFactory, GraphDataWidget< std::map< std::string, sofa::type::vector<double> > > > sofa::gui::qt::DWClass_mapvectord(""graph"", true) ; (; ""graph"" ; , . true ;  . ). ◆ DWClass_mapvectorf. Creator<DataWidgetFactory, GraphDataWidget< std::map< std::string, sofa::type::vector<float> > > > sofa::gui::qt::DWClass_mapvectorf(""graph"", true) ; (; ""graph"" ; , . true ;  . ). ◆ DWClass_Mat22d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<2,2,double> > > sofa::gui::qt::DWClass_Mat22d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat22f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<2,2,float> > > sofa::gui::qt::DWClass_Mat22f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat23d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<2,3,double> > > sofa::gui::qt::DWClass_Mat23d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat23f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<2,3,float> > > sofa::gui::qt::DWClass_Mat23f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat33d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,3,double> > > sofa::gui::qt::DWClass_Mat33d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat33f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,3,float> > > sofa::gui::qt::DWClass_Mat33f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat34d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,4,double> > > sofa::gui::qt::DWClass_Mat34d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat34f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,4,float> > > sofa::gui::qt::DWCla",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:67011,Usability,Simpl,SimpleDataWidget,67011,"2d. Creator<DataWidgetFactory, GraphDataWidget< std::map< std::string, sofa::type::vector<Vec2d> > > > sofa::gui::qt::DWClass_mapvector2d(""graph"", true) ; (; ""graph"" ; , . true ;  . ). ◆ DWClass_mapvectord. Creator<DataWidgetFactory, GraphDataWidget< std::map< std::string, sofa::type::vector<double> > > > sofa::gui::qt::DWClass_mapvectord(""graph"", true) ; (; ""graph"" ; , . true ;  . ). ◆ DWClass_mapvectorf. Creator<DataWidgetFactory, GraphDataWidget< std::map< std::string, sofa::type::vector<float> > > > sofa::gui::qt::DWClass_mapvectorf(""graph"", true) ; (; ""graph"" ; , . true ;  . ). ◆ DWClass_Mat22d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<2,2,double> > > sofa::gui::qt::DWClass_Mat22d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat22f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<2,2,float> > > sofa::gui::qt::DWClass_Mat22f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat23d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<2,3,double> > > sofa::gui::qt::DWClass_Mat23d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat23f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<2,3,float> > > sofa::gui::qt::DWClass_Mat23f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat33d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,3,double> > > sofa::gui::qt::DWClass_Mat33d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat33f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,3,float> > > sofa::gui::qt::DWClass_Mat33f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat34d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,4,double> > > sofa::gui::qt::DWClass_Mat34d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat34f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,4,float> > > sofa::gui::qt::DWClass_Mat34f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat44d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<4,4,double> > > sofa::gui::qt::DWCla",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:67175,Usability,Simpl,SimpleDataWidget,67175,""" ; , . true ;  . ). ◆ DWClass_mapvectord. Creator<DataWidgetFactory, GraphDataWidget< std::map< std::string, sofa::type::vector<double> > > > sofa::gui::qt::DWClass_mapvectord(""graph"", true) ; (; ""graph"" ; , . true ;  . ). ◆ DWClass_mapvectorf. Creator<DataWidgetFactory, GraphDataWidget< std::map< std::string, sofa::type::vector<float> > > > sofa::gui::qt::DWClass_mapvectorf(""graph"", true) ; (; ""graph"" ; , . true ;  . ). ◆ DWClass_Mat22d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<2,2,double> > > sofa::gui::qt::DWClass_Mat22d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat22f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<2,2,float> > > sofa::gui::qt::DWClass_Mat22f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat23d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<2,3,double> > > sofa::gui::qt::DWClass_Mat23d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat23f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<2,3,float> > > sofa::gui::qt::DWClass_Mat23f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat33d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,3,double> > > sofa::gui::qt::DWClass_Mat33d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat33f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,3,float> > > sofa::gui::qt::DWClass_Mat33f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat34d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,4,double> > > sofa::gui::qt::DWClass_Mat34d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat34f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,4,float> > > sofa::gui::qt::DWClass_Mat34f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat44d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<4,4,double> > > sofa::gui::qt::DWClass_Mat44d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat44f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<4,4,float> > > sofa::gui::qt::DWCla",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:67338,Usability,Simpl,SimpleDataWidget,67338,"ss_mapvectord(""graph"", true) ; (; ""graph"" ; , . true ;  . ). ◆ DWClass_mapvectorf. Creator<DataWidgetFactory, GraphDataWidget< std::map< std::string, sofa::type::vector<float> > > > sofa::gui::qt::DWClass_mapvectorf(""graph"", true) ; (; ""graph"" ; , . true ;  . ). ◆ DWClass_Mat22d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<2,2,double> > > sofa::gui::qt::DWClass_Mat22d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat22f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<2,2,float> > > sofa::gui::qt::DWClass_Mat22f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat23d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<2,3,double> > > sofa::gui::qt::DWClass_Mat23d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat23f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<2,3,float> > > sofa::gui::qt::DWClass_Mat23f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat33d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,3,double> > > sofa::gui::qt::DWClass_Mat33d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat33f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,3,float> > > sofa::gui::qt::DWClass_Mat33f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat34d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,4,double> > > sofa::gui::qt::DWClass_Mat34d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat34f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,4,float> > > sofa::gui::qt::DWClass_Mat34f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat44d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<4,4,double> > > sofa::gui::qt::DWClass_Mat44d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat44f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<4,4,float> > > sofa::gui::qt::DWClass_Mat44f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat66d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<6,6,double> > > sofa::gui::qt::DWCla",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:67502,Usability,Simpl,SimpleDataWidget,67502,"ctor<float> > > > sofa::gui::qt::DWClass_mapvectorf(""graph"", true) ; (; ""graph"" ; , . true ;  . ). ◆ DWClass_Mat22d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<2,2,double> > > sofa::gui::qt::DWClass_Mat22d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat22f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<2,2,float> > > sofa::gui::qt::DWClass_Mat22f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat23d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<2,3,double> > > sofa::gui::qt::DWClass_Mat23d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat23f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<2,3,float> > > sofa::gui::qt::DWClass_Mat23f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat33d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,3,double> > > sofa::gui::qt::DWClass_Mat33d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat33f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,3,float> > > sofa::gui::qt::DWClass_Mat33f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat34d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,4,double> > > sofa::gui::qt::DWClass_Mat34d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat34f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,4,float> > > sofa::gui::qt::DWClass_Mat34f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat44d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<4,4,double> > > sofa::gui::qt::DWClass_Mat44d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat44f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<4,4,float> > > sofa::gui::qt::DWClass_Mat44f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat66d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<6,6,double> > > sofa::gui::qt::DWClass_Mat66d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat66f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<6,6,float> > > sofa::gui::qt::DWCla",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:67665,Usability,Simpl,SimpleDataWidget,67665,"at<2,2,double> > > sofa::gui::qt::DWClass_Mat22d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat22f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<2,2,float> > > sofa::gui::qt::DWClass_Mat22f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat23d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<2,3,double> > > sofa::gui::qt::DWClass_Mat23d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat23f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<2,3,float> > > sofa::gui::qt::DWClass_Mat23f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat33d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,3,double> > > sofa::gui::qt::DWClass_Mat33d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat33f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,3,float> > > sofa::gui::qt::DWClass_Mat33f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat34d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,4,double> > > sofa::gui::qt::DWClass_Mat34d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat34f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,4,float> > > sofa::gui::qt::DWClass_Mat34f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat44d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<4,4,double> > > sofa::gui::qt::DWClass_Mat44d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat44f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<4,4,float> > > sofa::gui::qt::DWClass_Mat44f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat66d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<6,6,double> > > sofa::gui::qt::DWClass_Mat66d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat66f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<6,6,float> > > sofa::gui::qt::DWClass_Mat66f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_OptionsGroup. Creator<DataWidgetFactory,RadioDataWidget> sofa::gui::qt::DWClass_OptionsGroup(",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:67829,Usability,Simpl,SimpleDataWidget,67829,"at<2,2,float> > > sofa::gui::qt::DWClass_Mat22f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat23d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<2,3,double> > > sofa::gui::qt::DWClass_Mat23d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat23f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<2,3,float> > > sofa::gui::qt::DWClass_Mat23f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat33d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,3,double> > > sofa::gui::qt::DWClass_Mat33d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat33f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,3,float> > > sofa::gui::qt::DWClass_Mat33f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat34d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,4,double> > > sofa::gui::qt::DWClass_Mat34d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat34f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,4,float> > > sofa::gui::qt::DWClass_Mat34f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat44d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<4,4,double> > > sofa::gui::qt::DWClass_Mat44d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat44f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<4,4,float> > > sofa::gui::qt::DWClass_Mat44f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat66d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<6,6,double> > > sofa::gui::qt::DWClass_Mat66d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat66f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<6,6,float> > > sofa::gui::qt::DWClass_Mat66f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_OptionsGroup. Creator<DataWidgetFactory,RadioDataWidget> sofa::gui::qt::DWClass_OptionsGroup(""default"", true) ; (; ""default"" ; , . true ;  . ). OptionsGroup support. . ◆ DWClass_Poissonratio. helper::Creator<DataWidgetFactory, QPoissonRatioWidget> sofa::gu",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:67992,Usability,Simpl,SimpleDataWidget,67992,"at<2,3,double> > > sofa::gui::qt::DWClass_Mat23d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat23f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<2,3,float> > > sofa::gui::qt::DWClass_Mat23f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat33d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,3,double> > > sofa::gui::qt::DWClass_Mat33d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat33f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,3,float> > > sofa::gui::qt::DWClass_Mat33f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat34d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,4,double> > > sofa::gui::qt::DWClass_Mat34d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat34f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,4,float> > > sofa::gui::qt::DWClass_Mat34f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat44d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<4,4,double> > > sofa::gui::qt::DWClass_Mat44d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat44f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<4,4,float> > > sofa::gui::qt::DWClass_Mat44f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat66d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<6,6,double> > > sofa::gui::qt::DWClass_Mat66d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat66f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<6,6,float> > > sofa::gui::qt::DWClass_Mat66f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_OptionsGroup. Creator<DataWidgetFactory,RadioDataWidget> sofa::gui::qt::DWClass_OptionsGroup(""default"", true) ; (; ""default"" ; , . true ;  . ). OptionsGroup support. . ◆ DWClass_Poissonratio. helper::Creator<DataWidgetFactory, QPoissonRatioWidget> sofa::gui::qt::DWClass_Poissonratio(""poissonRatio"", false) ; (; ""poissonRatio"" ; , . false ;  . ). ◆ DWClass_PolynomialLD1d. Creator<DataWidgetFactory, SimpleDataWidget< so",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:68156,Usability,Simpl,SimpleDataWidget,68156,"at<2,3,float> > > sofa::gui::qt::DWClass_Mat23f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat33d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,3,double> > > sofa::gui::qt::DWClass_Mat33d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat33f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,3,float> > > sofa::gui::qt::DWClass_Mat33f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat34d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,4,double> > > sofa::gui::qt::DWClass_Mat34d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat34f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,4,float> > > sofa::gui::qt::DWClass_Mat34f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat44d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<4,4,double> > > sofa::gui::qt::DWClass_Mat44d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat44f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<4,4,float> > > sofa::gui::qt::DWClass_Mat44f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat66d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<6,6,double> > > sofa::gui::qt::DWClass_Mat66d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat66f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<6,6,float> > > sofa::gui::qt::DWClass_Mat66f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_OptionsGroup. Creator<DataWidgetFactory,RadioDataWidget> sofa::gui::qt::DWClass_OptionsGroup(""default"", true) ; (; ""default"" ; , . true ;  . ). OptionsGroup support. . ◆ DWClass_Poissonratio. helper::Creator<DataWidgetFactory, QPoissonRatioWidget> sofa::gui::qt::DWClass_Poissonratio(""poissonRatio"", false) ; (; ""poissonRatio"" ; , . false ;  . ). ◆ DWClass_PolynomialLD1d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,1> > > sofa::gui::qt::DWClass_PolynomialLD1d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD1f. Creator<",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:68319,Usability,Simpl,SimpleDataWidget,68319,"at<3,3,double> > > sofa::gui::qt::DWClass_Mat33d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat33f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,3,float> > > sofa::gui::qt::DWClass_Mat33f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat34d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,4,double> > > sofa::gui::qt::DWClass_Mat34d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat34f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,4,float> > > sofa::gui::qt::DWClass_Mat34f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat44d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<4,4,double> > > sofa::gui::qt::DWClass_Mat44d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat44f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<4,4,float> > > sofa::gui::qt::DWClass_Mat44f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat66d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<6,6,double> > > sofa::gui::qt::DWClass_Mat66d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat66f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<6,6,float> > > sofa::gui::qt::DWClass_Mat66f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_OptionsGroup. Creator<DataWidgetFactory,RadioDataWidget> sofa::gui::qt::DWClass_OptionsGroup(""default"", true) ; (; ""default"" ; , . true ;  . ). OptionsGroup support. . ◆ DWClass_Poissonratio. helper::Creator<DataWidgetFactory, QPoissonRatioWidget> sofa::gui::qt::DWClass_Poissonratio(""poissonRatio"", false) ; (; ""poissonRatio"" ; , . false ;  . ). ◆ DWClass_PolynomialLD1d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,1> > > sofa::gui::qt::DWClass_PolynomialLD1d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD1f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,1> > > sofa::gui::qt::DWClass_PolynomialLD1f(""default"", true) ; (; ""default"" ; , . true ;  .",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:68483,Usability,Simpl,SimpleDataWidget,68483,"at<3,3,float> > > sofa::gui::qt::DWClass_Mat33f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat34d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,4,double> > > sofa::gui::qt::DWClass_Mat34d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat34f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<3,4,float> > > sofa::gui::qt::DWClass_Mat34f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat44d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<4,4,double> > > sofa::gui::qt::DWClass_Mat44d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat44f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<4,4,float> > > sofa::gui::qt::DWClass_Mat44f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat66d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<6,6,double> > > sofa::gui::qt::DWClass_Mat66d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat66f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<6,6,float> > > sofa::gui::qt::DWClass_Mat66f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_OptionsGroup. Creator<DataWidgetFactory,RadioDataWidget> sofa::gui::qt::DWClass_OptionsGroup(""default"", true) ; (; ""default"" ; , . true ;  . ). OptionsGroup support. . ◆ DWClass_Poissonratio. helper::Creator<DataWidgetFactory, QPoissonRatioWidget> sofa::gui::qt::DWClass_Poissonratio(""poissonRatio"", false) ; (; ""poissonRatio"" ; , . false ;  . ). ◆ DWClass_PolynomialLD1d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,1> > > sofa::gui::qt::DWClass_PolynomialLD1d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD1f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,1> > > sofa::gui::qt::DWClass_PolynomialLD1f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD2d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,2> > > sofa::gui::qt::DWClass_PolynomialLD2d(""default",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:69011,Usability,Simpl,SimpleDataWidget,69011,"ault"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat44f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<4,4,float> > > sofa::gui::qt::DWClass_Mat44f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat66d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<6,6,double> > > sofa::gui::qt::DWClass_Mat66d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat66f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<6,6,float> > > sofa::gui::qt::DWClass_Mat66f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_OptionsGroup. Creator<DataWidgetFactory,RadioDataWidget> sofa::gui::qt::DWClass_OptionsGroup(""default"", true) ; (; ""default"" ; , . true ;  . ). OptionsGroup support. . ◆ DWClass_Poissonratio. helper::Creator<DataWidgetFactory, QPoissonRatioWidget> sofa::gui::qt::DWClass_Poissonratio(""poissonRatio"", false) ; (; ""poissonRatio"" ; , . false ;  . ). ◆ DWClass_PolynomialLD1d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,1> > > sofa::gui::qt::DWClass_PolynomialLD1d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD1f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,1> > > sofa::gui::qt::DWClass_PolynomialLD1f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD2d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,2> > > sofa::gui::qt::DWClass_PolynomialLD2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD2f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,2> > > sofa::gui::qt::DWClass_PolynomialLD2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD3d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,3> > > sofa::gui::qt::DWClass_PolynomialLD3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD3f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_L",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:69213,Usability,Simpl,SimpleDataWidget,69213,";  . ). ◆ DWClass_Mat66d. Creator<DataWidgetFactory, SimpleDataWidget< Mat<6,6,double> > > sofa::gui::qt::DWClass_Mat66d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Mat66f. Creator<DataWidgetFactory, SimpleDataWidget< Mat<6,6,float> > > sofa::gui::qt::DWClass_Mat66f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_OptionsGroup. Creator<DataWidgetFactory,RadioDataWidget> sofa::gui::qt::DWClass_OptionsGroup(""default"", true) ; (; ""default"" ; , . true ;  . ). OptionsGroup support. . ◆ DWClass_Poissonratio. helper::Creator<DataWidgetFactory, QPoissonRatioWidget> sofa::gui::qt::DWClass_Poissonratio(""poissonRatio"", false) ; (; ""poissonRatio"" ; , . false ;  . ). ◆ DWClass_PolynomialLD1d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,1> > > sofa::gui::qt::DWClass_PolynomialLD1d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD1f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,1> > > sofa::gui::qt::DWClass_PolynomialLD1f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD2d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,2> > > sofa::gui::qt::DWClass_PolynomialLD2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD2f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,2> > > sofa::gui::qt::DWClass_PolynomialLD2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD3d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,3> > > sofa::gui::qt::DWClass_PolynomialLD3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD3f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,3> > > sofa::gui::qt::DWClass_PolynomialLD3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD4d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_L",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:69415,Usability,Simpl,SimpleDataWidget,69415,"WidgetFactory, SimpleDataWidget< Mat<6,6,float> > > sofa::gui::qt::DWClass_Mat66f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_OptionsGroup. Creator<DataWidgetFactory,RadioDataWidget> sofa::gui::qt::DWClass_OptionsGroup(""default"", true) ; (; ""default"" ; , . true ;  . ). OptionsGroup support. . ◆ DWClass_Poissonratio. helper::Creator<DataWidgetFactory, QPoissonRatioWidget> sofa::gui::qt::DWClass_Poissonratio(""poissonRatio"", false) ; (; ""poissonRatio"" ; , . false ;  . ). ◆ DWClass_PolynomialLD1d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,1> > > sofa::gui::qt::DWClass_PolynomialLD1d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD1f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,1> > > sofa::gui::qt::DWClass_PolynomialLD1f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD2d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,2> > > sofa::gui::qt::DWClass_PolynomialLD2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD2f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,2> > > sofa::gui::qt::DWClass_PolynomialLD2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD3d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,3> > > sofa::gui::qt::DWClass_PolynomialLD3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD3f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,3> > > sofa::gui::qt::DWClass_PolynomialLD3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD4d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,4> > > sofa::gui::qt::DWClass_PolynomialLD4d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD4f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_L",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:69617,Usability,Simpl,SimpleDataWidget,69617,"fa::gui::qt::DWClass_OptionsGroup(""default"", true) ; (; ""default"" ; , . true ;  . ). OptionsGroup support. . ◆ DWClass_Poissonratio. helper::Creator<DataWidgetFactory, QPoissonRatioWidget> sofa::gui::qt::DWClass_Poissonratio(""poissonRatio"", false) ; (; ""poissonRatio"" ; , . false ;  . ). ◆ DWClass_PolynomialLD1d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,1> > > sofa::gui::qt::DWClass_PolynomialLD1d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD1f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,1> > > sofa::gui::qt::DWClass_PolynomialLD1f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD2d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,2> > > sofa::gui::qt::DWClass_PolynomialLD2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD2f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,2> > > sofa::gui::qt::DWClass_PolynomialLD2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD3d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,3> > > sofa::gui::qt::DWClass_PolynomialLD3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD3f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,3> > > sofa::gui::qt::DWClass_PolynomialLD3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD4d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,4> > > sofa::gui::qt::DWClass_PolynomialLD4d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD4f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,4> > > sofa::gui::qt::DWClass_PolynomialLD4f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD5d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_L",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:69819,Usability,Simpl,SimpleDataWidget,69819,"::DWClass_Poissonratio(""poissonRatio"", false) ; (; ""poissonRatio"" ; , . false ;  . ). ◆ DWClass_PolynomialLD1d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,1> > > sofa::gui::qt::DWClass_PolynomialLD1d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD1f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,1> > > sofa::gui::qt::DWClass_PolynomialLD1f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD2d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,2> > > sofa::gui::qt::DWClass_PolynomialLD2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD2f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,2> > > sofa::gui::qt::DWClass_PolynomialLD2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD3d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,3> > > sofa::gui::qt::DWClass_PolynomialLD3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD3f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,3> > > sofa::gui::qt::DWClass_PolynomialLD3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD4d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,4> > > sofa::gui::qt::DWClass_PolynomialLD4d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD4f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,4> > > sofa::gui::qt::DWClass_PolynomialLD4f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD5d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,5> > > sofa::gui::qt::DWClass_PolynomialLD5d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD5f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_L",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:70021,Usability,Simpl,SimpleDataWidget,70021,"a::gui::qt::DWClass_PolynomialLD1d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD1f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,1> > > sofa::gui::qt::DWClass_PolynomialLD1f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD2d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,2> > > sofa::gui::qt::DWClass_PolynomialLD2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD2f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,2> > > sofa::gui::qt::DWClass_PolynomialLD2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD3d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,3> > > sofa::gui::qt::DWClass_PolynomialLD3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD3f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,3> > > sofa::gui::qt::DWClass_PolynomialLD3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD4d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,4> > > sofa::gui::qt::DWClass_PolynomialLD4d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD4f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,4> > > sofa::gui::qt::DWClass_PolynomialLD4f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD5d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,5> > > sofa::gui::qt::DWClass_PolynomialLD5d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD5f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,5> > > sofa::gui::qt::DWClass_PolynomialLD5f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Quad. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Quad",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:70223,Usability,Simpl,SimpleDataWidget,70223,"a::gui::qt::DWClass_PolynomialLD1f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD2d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,2> > > sofa::gui::qt::DWClass_PolynomialLD2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD2f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,2> > > sofa::gui::qt::DWClass_PolynomialLD2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD3d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,3> > > sofa::gui::qt::DWClass_PolynomialLD3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD3f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,3> > > sofa::gui::qt::DWClass_PolynomialLD3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD4d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,4> > > sofa::gui::qt::DWClass_PolynomialLD4d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD4f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,4> > > sofa::gui::qt::DWClass_PolynomialLD4f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD5d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,5> > > sofa::gui::qt::DWClass_PolynomialLD5d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD5f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,5> > > sofa::gui::qt::DWClass_PolynomialLD5f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Quad. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Quad > > sofa::gui::qt::DWClass_Quad(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Quatd. Creator<DataWidgetFactory, SimpleDataWidget< sofa::type::Quat<double> > > sofa::gui::qt::DWClass_Quat",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:70425,Usability,Simpl,SimpleDataWidget,70425,"a::gui::qt::DWClass_PolynomialLD2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD2f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,2> > > sofa::gui::qt::DWClass_PolynomialLD2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD3d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,3> > > sofa::gui::qt::DWClass_PolynomialLD3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD3f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,3> > > sofa::gui::qt::DWClass_PolynomialLD3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD4d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,4> > > sofa::gui::qt::DWClass_PolynomialLD4d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD4f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,4> > > sofa::gui::qt::DWClass_PolynomialLD4f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD5d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,5> > > sofa::gui::qt::DWClass_PolynomialLD5d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD5f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,5> > > sofa::gui::qt::DWClass_PolynomialLD5f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Quad. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Quad > > sofa::gui::qt::DWClass_Quad(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Quatd. Creator<DataWidgetFactory, SimpleDataWidget< sofa::type::Quat<double> > > sofa::gui::qt::DWClass_Quatd(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Quatf. Creator<DataWidgetFactory, SimpleDataWidget< sofa::type::Quat<float> > > sofa::gui::qt::DWClass_Quatf(""default"", true) ; (; ""default",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:70627,Usability,Simpl,SimpleDataWidget,70627,"a::gui::qt::DWClass_PolynomialLD2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD3d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,3> > > sofa::gui::qt::DWClass_PolynomialLD3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD3f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,3> > > sofa::gui::qt::DWClass_PolynomialLD3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD4d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,4> > > sofa::gui::qt::DWClass_PolynomialLD4d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD4f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,4> > > sofa::gui::qt::DWClass_PolynomialLD4f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD5d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,5> > > sofa::gui::qt::DWClass_PolynomialLD5d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD5f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,5> > > sofa::gui::qt::DWClass_PolynomialLD5f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Quad. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Quad > > sofa::gui::qt::DWClass_Quad(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Quatd. Creator<DataWidgetFactory, SimpleDataWidget< sofa::type::Quat<double> > > sofa::gui::qt::DWClass_Quatd(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Quatf. Creator<DataWidgetFactory, SimpleDataWidget< sofa::type::Quat<float> > > sofa::gui::qt::DWClass_Quatf(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord2d. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<2,double> > > sofa::gui::qt::DWClass_RigidCoord2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:70829,Usability,Simpl,SimpleDataWidget,70829,"a::gui::qt::DWClass_PolynomialLD3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD3f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,3> > > sofa::gui::qt::DWClass_PolynomialLD3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD4d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,4> > > sofa::gui::qt::DWClass_PolynomialLD4d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD4f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,4> > > sofa::gui::qt::DWClass_PolynomialLD4f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD5d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,5> > > sofa::gui::qt::DWClass_PolynomialLD5d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD5f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,5> > > sofa::gui::qt::DWClass_PolynomialLD5f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Quad. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Quad > > sofa::gui::qt::DWClass_Quad(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Quatd. Creator<DataWidgetFactory, SimpleDataWidget< sofa::type::Quat<double> > > sofa::gui::qt::DWClass_Quatd(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Quatf. Creator<DataWidgetFactory, SimpleDataWidget< sofa::type::Quat<float> > > sofa::gui::qt::DWClass_Quatf(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord2d. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<2,double> > > sofa::gui::qt::DWClass_RigidCoord2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord2f. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<2,float> > > sofa::gui::qt::DWClass_RigidCoord2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord3d",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:71021,Usability,Simpl,SimpleDataWidget,71021,"oat ,3> > > sofa::gui::qt::DWClass_PolynomialLD3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD4d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,4> > > sofa::gui::qt::DWClass_PolynomialLD4d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD4f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,4> > > sofa::gui::qt::DWClass_PolynomialLD4f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD5d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,5> > > sofa::gui::qt::DWClass_PolynomialLD5d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD5f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,5> > > sofa::gui::qt::DWClass_PolynomialLD5f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Quad. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Quad > > sofa::gui::qt::DWClass_Quad(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Quatd. Creator<DataWidgetFactory, SimpleDataWidget< sofa::type::Quat<double> > > sofa::gui::qt::DWClass_Quatd(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Quatf. Creator<DataWidgetFactory, SimpleDataWidget< sofa::type::Quat<float> > > sofa::gui::qt::DWClass_Quatf(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord2d. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<2,double> > > sofa::gui::qt::DWClass_RigidCoord2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord2f. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<2,float> > > sofa::gui::qt::DWClass_RigidCoord2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord3d. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<3,double> > > sofa::gui::qt::DWClass_RigidCoord3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord3f. Cre",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:71203,Usability,Simpl,SimpleDataWidget,71203,"::helper::Polynomial_LD<double,4> > > sofa::gui::qt::DWClass_PolynomialLD4d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD4f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,4> > > sofa::gui::qt::DWClass_PolynomialLD4f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD5d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,5> > > sofa::gui::qt::DWClass_PolynomialLD5d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD5f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,5> > > sofa::gui::qt::DWClass_PolynomialLD5f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Quad. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Quad > > sofa::gui::qt::DWClass_Quad(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Quatd. Creator<DataWidgetFactory, SimpleDataWidget< sofa::type::Quat<double> > > sofa::gui::qt::DWClass_Quatd(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Quatf. Creator<DataWidgetFactory, SimpleDataWidget< sofa::type::Quat<float> > > sofa::gui::qt::DWClass_Quatf(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord2d. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<2,double> > > sofa::gui::qt::DWClass_RigidCoord2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord2f. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<2,float> > > sofa::gui::qt::DWClass_RigidCoord2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord3d. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<3,double> > > sofa::gui::qt::DWClass_RigidCoord3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord3f. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<3,float> > > sofa::gui::qt::DWClass_RigidCoord3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidMass2d. C",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:71374,Usability,Simpl,SimpleDataWidget,71374,"Factory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,4> > > sofa::gui::qt::DWClass_PolynomialLD4f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD5d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,5> > > sofa::gui::qt::DWClass_PolynomialLD5d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD5f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,5> > > sofa::gui::qt::DWClass_PolynomialLD5f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Quad. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Quad > > sofa::gui::qt::DWClass_Quad(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Quatd. Creator<DataWidgetFactory, SimpleDataWidget< sofa::type::Quat<double> > > sofa::gui::qt::DWClass_Quatd(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Quatf. Creator<DataWidgetFactory, SimpleDataWidget< sofa::type::Quat<float> > > sofa::gui::qt::DWClass_Quatf(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord2d. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<2,double> > > sofa::gui::qt::DWClass_RigidCoord2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord2f. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<2,float> > > sofa::gui::qt::DWClass_RigidCoord2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord3d. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<3,double> > > sofa::gui::qt::DWClass_RigidCoord3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord3f. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<3,float> > > sofa::gui::qt::DWClass_RigidCoord3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidMass2d. Creator<DataWidgetFactory, SimpleDataWidget< RigidMass<2,double> > > sofa::gui::qt::DWClass_RigidMass2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidM",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:71551,Usability,Simpl,SimpleDataWidget,71551,"D5d. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<double,5> > > sofa::gui::qt::DWClass_PolynomialLD5d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_PolynomialLD5f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,5> > > sofa::gui::qt::DWClass_PolynomialLD5f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Quad. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Quad > > sofa::gui::qt::DWClass_Quad(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Quatd. Creator<DataWidgetFactory, SimpleDataWidget< sofa::type::Quat<double> > > sofa::gui::qt::DWClass_Quatd(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Quatf. Creator<DataWidgetFactory, SimpleDataWidget< sofa::type::Quat<float> > > sofa::gui::qt::DWClass_Quatf(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord2d. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<2,double> > > sofa::gui::qt::DWClass_RigidCoord2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord2f. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<2,float> > > sofa::gui::qt::DWClass_RigidCoord2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord3d. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<3,double> > > sofa::gui::qt::DWClass_RigidCoord3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord3f. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<3,float> > > sofa::gui::qt::DWClass_RigidCoord3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidMass2d. Creator<DataWidgetFactory, SimpleDataWidget< RigidMass<2,double> > > sofa::gui::qt::DWClass_RigidMass2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidMass2f. Creator<DataWidgetFactory, SimpleDataWidget< RigidMass<2,float> > > sofa::gui::qt::DWClass_RigidMass2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidMas",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:71732,Usability,Simpl,SimpleDataWidget,71732," ◆ DWClass_PolynomialLD5f. Creator<DataWidgetFactory, SimpleDataWidget< sofa::helper::Polynomial_LD<float ,5> > > sofa::gui::qt::DWClass_PolynomialLD5f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Quad. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Quad > > sofa::gui::qt::DWClass_Quad(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Quatd. Creator<DataWidgetFactory, SimpleDataWidget< sofa::type::Quat<double> > > sofa::gui::qt::DWClass_Quatd(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Quatf. Creator<DataWidgetFactory, SimpleDataWidget< sofa::type::Quat<float> > > sofa::gui::qt::DWClass_Quatf(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord2d. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<2,double> > > sofa::gui::qt::DWClass_RigidCoord2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord2f. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<2,float> > > sofa::gui::qt::DWClass_RigidCoord2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord3d. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<3,double> > > sofa::gui::qt::DWClass_RigidCoord3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord3f. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<3,float> > > sofa::gui::qt::DWClass_RigidCoord3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidMass2d. Creator<DataWidgetFactory, SimpleDataWidget< RigidMass<2,double> > > sofa::gui::qt::DWClass_RigidMass2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidMass2f. Creator<DataWidgetFactory, SimpleDataWidget< RigidMass<2,float> > > sofa::gui::qt::DWClass_RigidMass2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidMass3d. Creator<DataWidgetFactory, SimpleDataWidget< RigidMass<3,double> > > sofa::gui::qt::DWClass_RigidMass3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidMass3f",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:71912,Usability,Simpl,SimpleDataWidget,71912,"t"" ; , . true ;  . ). ◆ DWClass_Quad. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Quad > > sofa::gui::qt::DWClass_Quad(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Quatd. Creator<DataWidgetFactory, SimpleDataWidget< sofa::type::Quat<double> > > sofa::gui::qt::DWClass_Quatd(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Quatf. Creator<DataWidgetFactory, SimpleDataWidget< sofa::type::Quat<float> > > sofa::gui::qt::DWClass_Quatf(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord2d. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<2,double> > > sofa::gui::qt::DWClass_RigidCoord2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord2f. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<2,float> > > sofa::gui::qt::DWClass_RigidCoord2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord3d. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<3,double> > > sofa::gui::qt::DWClass_RigidCoord3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord3f. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<3,float> > > sofa::gui::qt::DWClass_RigidCoord3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidMass2d. Creator<DataWidgetFactory, SimpleDataWidget< RigidMass<2,double> > > sofa::gui::qt::DWClass_RigidMass2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidMass2f. Creator<DataWidgetFactory, SimpleDataWidget< RigidMass<2,float> > > sofa::gui::qt::DWClass_RigidMass2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidMass3d. Creator<DataWidgetFactory, SimpleDataWidget< RigidMass<3,double> > > sofa::gui::qt::DWClass_RigidMass3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidMass3f. Creator<DataWidgetFactory, SimpleDataWidget< RigidMass<3,float> > > sofa::gui::qt::DWClass_RigidMass3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_SeqEdges. Crea",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:72093,Usability,Simpl,SimpleDataWidget,72093,"lt"" ; , . true ;  . ). ◆ DWClass_Quatd. Creator<DataWidgetFactory, SimpleDataWidget< sofa::type::Quat<double> > > sofa::gui::qt::DWClass_Quatd(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Quatf. Creator<DataWidgetFactory, SimpleDataWidget< sofa::type::Quat<float> > > sofa::gui::qt::DWClass_Quatf(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord2d. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<2,double> > > sofa::gui::qt::DWClass_RigidCoord2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord2f. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<2,float> > > sofa::gui::qt::DWClass_RigidCoord2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord3d. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<3,double> > > sofa::gui::qt::DWClass_RigidCoord3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord3f. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<3,float> > > sofa::gui::qt::DWClass_RigidCoord3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidMass2d. Creator<DataWidgetFactory, SimpleDataWidget< RigidMass<2,double> > > sofa::gui::qt::DWClass_RigidMass2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidMass2f. Creator<DataWidgetFactory, SimpleDataWidget< RigidMass<2,float> > > sofa::gui::qt::DWClass_RigidMass2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidMass3d. Creator<DataWidgetFactory, SimpleDataWidget< RigidMass<3,double> > > sofa::gui::qt::DWClass_RigidMass3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidMass3f. Creator<DataWidgetFactory, SimpleDataWidget< RigidMass<3,float> > > sofa::gui::qt::DWClass_RigidMass3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_SeqEdges. Creator<DataWidgetFactory, TableDataWidget< sofa::core::topology::BaseMeshTopology::SeqEdges > > sofa::gui::qt::DWClass_SeqEdges(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWC",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:72272,Usability,Simpl,SimpleDataWidget,72272,". true ;  . ). ◆ DWClass_Quatf. Creator<DataWidgetFactory, SimpleDataWidget< sofa::type::Quat<float> > > sofa::gui::qt::DWClass_Quatf(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord2d. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<2,double> > > sofa::gui::qt::DWClass_RigidCoord2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord2f. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<2,float> > > sofa::gui::qt::DWClass_RigidCoord2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord3d. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<3,double> > > sofa::gui::qt::DWClass_RigidCoord3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord3f. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<3,float> > > sofa::gui::qt::DWClass_RigidCoord3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidMass2d. Creator<DataWidgetFactory, SimpleDataWidget< RigidMass<2,double> > > sofa::gui::qt::DWClass_RigidMass2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidMass2f. Creator<DataWidgetFactory, SimpleDataWidget< RigidMass<2,float> > > sofa::gui::qt::DWClass_RigidMass2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidMass3d. Creator<DataWidgetFactory, SimpleDataWidget< RigidMass<3,double> > > sofa::gui::qt::DWClass_RigidMass3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidMass3f. Creator<DataWidgetFactory, SimpleDataWidget< RigidMass<3,float> > > sofa::gui::qt::DWClass_RigidMass3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_SeqEdges. Creator<DataWidgetFactory, TableDataWidget< sofa::core::topology::BaseMeshTopology::SeqEdges > > sofa::gui::qt::DWClass_SeqEdges(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_SeqHexahedra. Creator<DataWidgetFactory, TableDataWidget< sofa::core::topology::BaseMeshTopology::SeqHexahedra > > sofa::gui::qt::DWClass_SeqHexahedra(""default"", true) ; (; ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:72450,Usability,Simpl,SimpleDataWidget,72450,";  . ). ◆ DWClass_RigidCoord2d. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<2,double> > > sofa::gui::qt::DWClass_RigidCoord2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord2f. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<2,float> > > sofa::gui::qt::DWClass_RigidCoord2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord3d. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<3,double> > > sofa::gui::qt::DWClass_RigidCoord3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord3f. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<3,float> > > sofa::gui::qt::DWClass_RigidCoord3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidMass2d. Creator<DataWidgetFactory, SimpleDataWidget< RigidMass<2,double> > > sofa::gui::qt::DWClass_RigidMass2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidMass2f. Creator<DataWidgetFactory, SimpleDataWidget< RigidMass<2,float> > > sofa::gui::qt::DWClass_RigidMass2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidMass3d. Creator<DataWidgetFactory, SimpleDataWidget< RigidMass<3,double> > > sofa::gui::qt::DWClass_RigidMass3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidMass3f. Creator<DataWidgetFactory, SimpleDataWidget< RigidMass<3,float> > > sofa::gui::qt::DWClass_RigidMass3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_SeqEdges. Creator<DataWidgetFactory, TableDataWidget< sofa::core::topology::BaseMeshTopology::SeqEdges > > sofa::gui::qt::DWClass_SeqEdges(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_SeqHexahedra. Creator<DataWidgetFactory, TableDataWidget< sofa::core::topology::BaseMeshTopology::SeqHexahedra > > sofa::gui::qt::DWClass_SeqHexahedra(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_SeqQuads. Creator<DataWidgetFactory, TableDataWidget< sofa::core::topology::BaseMeshTopology::SeqQuads > > sofa::gui::qt::DWClass_SeqQuads(",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:72627,Usability,Simpl,SimpleDataWidget,72627,"ue ;  . ). ◆ DWClass_RigidCoord2f. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<2,float> > > sofa::gui::qt::DWClass_RigidCoord2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord3d. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<3,double> > > sofa::gui::qt::DWClass_RigidCoord3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord3f. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<3,float> > > sofa::gui::qt::DWClass_RigidCoord3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidMass2d. Creator<DataWidgetFactory, SimpleDataWidget< RigidMass<2,double> > > sofa::gui::qt::DWClass_RigidMass2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidMass2f. Creator<DataWidgetFactory, SimpleDataWidget< RigidMass<2,float> > > sofa::gui::qt::DWClass_RigidMass2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidMass3d. Creator<DataWidgetFactory, SimpleDataWidget< RigidMass<3,double> > > sofa::gui::qt::DWClass_RigidMass3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidMass3f. Creator<DataWidgetFactory, SimpleDataWidget< RigidMass<3,float> > > sofa::gui::qt::DWClass_RigidMass3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_SeqEdges. Creator<DataWidgetFactory, TableDataWidget< sofa::core::topology::BaseMeshTopology::SeqEdges > > sofa::gui::qt::DWClass_SeqEdges(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_SeqHexahedra. Creator<DataWidgetFactory, TableDataWidget< sofa::core::topology::BaseMeshTopology::SeqHexahedra > > sofa::gui::qt::DWClass_SeqHexahedra(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_SeqQuads. Creator<DataWidgetFactory, TableDataWidget< sofa::core::topology::BaseMeshTopology::SeqQuads > > sofa::gui::qt::DWClass_SeqQuads(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_SeqTetrahedra. Creator<DataWidgetFactory, TableDataWidget< sofa::core::topology::BaseMeshTopology::SeqTetrahedra > >",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:72805,Usability,Simpl,SimpleDataWidget,72805," true ;  . ). ◆ DWClass_RigidCoord3d. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<3,double> > > sofa::gui::qt::DWClass_RigidCoord3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidCoord3f. Creator<DataWidgetFactory, SimpleDataWidget< RigidCoord<3,float> > > sofa::gui::qt::DWClass_RigidCoord3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidMass2d. Creator<DataWidgetFactory, SimpleDataWidget< RigidMass<2,double> > > sofa::gui::qt::DWClass_RigidMass2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidMass2f. Creator<DataWidgetFactory, SimpleDataWidget< RigidMass<2,float> > > sofa::gui::qt::DWClass_RigidMass2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidMass3d. Creator<DataWidgetFactory, SimpleDataWidget< RigidMass<3,double> > > sofa::gui::qt::DWClass_RigidMass3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_RigidMass3f. Creator<DataWidgetFactory, SimpleDataWidget< RigidMass<3,float> > > sofa::gui::qt::DWClass_RigidMass3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_SeqEdges. Creator<DataWidgetFactory, TableDataWidget< sofa::core::topology::BaseMeshTopology::SeqEdges > > sofa::gui::qt::DWClass_SeqEdges(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_SeqHexahedra. Creator<DataWidgetFactory, TableDataWidget< sofa::core::topology::BaseMeshTopology::SeqHexahedra > > sofa::gui::qt::DWClass_SeqHexahedra(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_SeqQuads. Creator<DataWidgetFactory, TableDataWidget< sofa::core::topology::BaseMeshTopology::SeqQuads > > sofa::gui::qt::DWClass_SeqQuads(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_SeqTetrahedra. Creator<DataWidgetFactory, TableDataWidget< sofa::core::topology::BaseMeshTopology::SeqTetrahedra > > sofa::gui::qt::DWClass_SeqTetrahedra(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_SeqTriangles. Creator<DataWidgetFactory, TableDataWidget< sofa::core::topology:",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:76374,Usability,Simpl,SimpleDataWidget,76374," std::vector<fixed_array<unsigned int,4> > > > sofa::gui::qt::DWClass_stdvectorA4u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_stdvectorA6i. Creator<DataWidgetFactory, TableDataWidget< std::vector<fixed_array<int,6> > > > sofa::gui::qt::DWClass_stdvectorA6i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_stdvectorA6u. Creator<DataWidgetFactory, TableDataWidget< std::vector<fixed_array<unsigned int,6> > > > sofa::gui::qt::DWClass_stdvectorA6u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_stdvectorA8i. Creator<DataWidgetFactory, TableDataWidget< std::vector<fixed_array<int,8> > > > sofa::gui::qt::DWClass_stdvectorA8i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_stdvectorA8u. Creator<DataWidgetFactory, TableDataWidget< std::vector<fixed_array<unsigned int,8> > > > sofa::gui::qt::DWClass_stdvectorA8u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_string. Creator<DataWidgetFactory, SimpleDataWidget<std::string> > sofa::gui::qt::DWClass_string(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_TagSet. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::objectmodel::TagSet > > sofa::gui::qt::DWClass_TagSet(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Tetrahedron. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Tetrahedron > > sofa::gui::qt::DWClass_Tetrahedron(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Triangle. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Triangle > > sofa::gui::qt::DWClass_Triangle(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_uchar. Creator<DataWidgetFactory, SimpleDataWidget<unsigned char> > sofa::gui::qt::DWClass_uchar(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_uint. Creator<DataWidgetFactory, SimpleDataWidget<unsigned int> > sofa::gui::qt::DWClass_uint(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1d. Creator<DataWidget",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:76532,Usability,Simpl,SimpleDataWidget,76532,"aWidgetFactory, TableDataWidget< std::vector<fixed_array<int,6> > > > sofa::gui::qt::DWClass_stdvectorA6i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_stdvectorA6u. Creator<DataWidgetFactory, TableDataWidget< std::vector<fixed_array<unsigned int,6> > > > sofa::gui::qt::DWClass_stdvectorA6u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_stdvectorA8i. Creator<DataWidgetFactory, TableDataWidget< std::vector<fixed_array<int,8> > > > sofa::gui::qt::DWClass_stdvectorA8i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_stdvectorA8u. Creator<DataWidgetFactory, TableDataWidget< std::vector<fixed_array<unsigned int,8> > > > sofa::gui::qt::DWClass_stdvectorA8u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_string. Creator<DataWidgetFactory, SimpleDataWidget<std::string> > sofa::gui::qt::DWClass_string(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_TagSet. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::objectmodel::TagSet > > sofa::gui::qt::DWClass_TagSet(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Tetrahedron. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Tetrahedron > > sofa::gui::qt::DWClass_Tetrahedron(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Triangle. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Triangle > > sofa::gui::qt::DWClass_Triangle(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_uchar. Creator<DataWidgetFactory, SimpleDataWidget<unsigned char> > sofa::gui::qt::DWClass_uchar(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_uint. Creator<DataWidgetFactory, SimpleDataWidget<unsigned int> > sofa::gui::qt::DWClass_uint(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,double> > > sofa::gui::qt::DWClass_Vec1d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1f. Creator<DataWidgetFactory, ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:76717,Usability,Simpl,SimpleDataWidget,76717,"idgetFactory, TableDataWidget< std::vector<fixed_array<unsigned int,6> > > > sofa::gui::qt::DWClass_stdvectorA6u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_stdvectorA8i. Creator<DataWidgetFactory, TableDataWidget< std::vector<fixed_array<int,8> > > > sofa::gui::qt::DWClass_stdvectorA8i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_stdvectorA8u. Creator<DataWidgetFactory, TableDataWidget< std::vector<fixed_array<unsigned int,8> > > > sofa::gui::qt::DWClass_stdvectorA8u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_string. Creator<DataWidgetFactory, SimpleDataWidget<std::string> > sofa::gui::qt::DWClass_string(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_TagSet. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::objectmodel::TagSet > > sofa::gui::qt::DWClass_TagSet(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Tetrahedron. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Tetrahedron > > sofa::gui::qt::DWClass_Tetrahedron(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Triangle. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Triangle > > sofa::gui::qt::DWClass_Triangle(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_uchar. Creator<DataWidgetFactory, SimpleDataWidget<unsigned char> > sofa::gui::qt::DWClass_uchar(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_uint. Creator<DataWidgetFactory, SimpleDataWidget<unsigned int> > sofa::gui::qt::DWClass_uint(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,double> > > sofa::gui::qt::DWClass_Vec1d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,float> > > sofa::gui::qt::DWClass_Vec1f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,int> > > s",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:76916,Usability,Simpl,SimpleDataWidget,76916,"DataWidgetFactory, TableDataWidget< std::vector<fixed_array<int,8> > > > sofa::gui::qt::DWClass_stdvectorA8i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_stdvectorA8u. Creator<DataWidgetFactory, TableDataWidget< std::vector<fixed_array<unsigned int,8> > > > sofa::gui::qt::DWClass_stdvectorA8u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_string. Creator<DataWidgetFactory, SimpleDataWidget<std::string> > sofa::gui::qt::DWClass_string(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_TagSet. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::objectmodel::TagSet > > sofa::gui::qt::DWClass_TagSet(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Tetrahedron. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Tetrahedron > > sofa::gui::qt::DWClass_Tetrahedron(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Triangle. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Triangle > > sofa::gui::qt::DWClass_Triangle(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_uchar. Creator<DataWidgetFactory, SimpleDataWidget<unsigned char> > sofa::gui::qt::DWClass_uchar(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_uint. Creator<DataWidgetFactory, SimpleDataWidget<unsigned int> > sofa::gui::qt::DWClass_uint(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,double> > > sofa::gui::qt::DWClass_Vec1d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,float> > > sofa::gui::qt::DWClass_Vec1f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,int> > > sofa::gui::qt::DWClass_Vec1i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,unsigned int> > > sofa::gui::qt::DWClass_Vec1u(""d",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:77106,Usability,Simpl,SimpleDataWidget,77106,"ectorA8u. Creator<DataWidgetFactory, TableDataWidget< std::vector<fixed_array<unsigned int,8> > > > sofa::gui::qt::DWClass_stdvectorA8u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_string. Creator<DataWidgetFactory, SimpleDataWidget<std::string> > sofa::gui::qt::DWClass_string(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_TagSet. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::objectmodel::TagSet > > sofa::gui::qt::DWClass_TagSet(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Tetrahedron. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Tetrahedron > > sofa::gui::qt::DWClass_Tetrahedron(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Triangle. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Triangle > > sofa::gui::qt::DWClass_Triangle(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_uchar. Creator<DataWidgetFactory, SimpleDataWidget<unsigned char> > sofa::gui::qt::DWClass_uchar(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_uint. Creator<DataWidgetFactory, SimpleDataWidget<unsigned int> > sofa::gui::qt::DWClass_uint(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,double> > > sofa::gui::qt::DWClass_Vec1d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,float> > > sofa::gui::qt::DWClass_Vec1f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,int> > > sofa::gui::qt::DWClass_Vec1i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,unsigned int> > > sofa::gui::qt::DWClass_Vec1u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,double> > > sofa::gui::qt::DWClass_Vec2d(""default"", true)",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:77263,Usability,Simpl,SimpleDataWidget,77263,"; ""default"" ; , . true ;  . ). ◆ DWClass_string. Creator<DataWidgetFactory, SimpleDataWidget<std::string> > sofa::gui::qt::DWClass_string(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_TagSet. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::objectmodel::TagSet > > sofa::gui::qt::DWClass_TagSet(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Tetrahedron. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Tetrahedron > > sofa::gui::qt::DWClass_Tetrahedron(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Triangle. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Triangle > > sofa::gui::qt::DWClass_Triangle(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_uchar. Creator<DataWidgetFactory, SimpleDataWidget<unsigned char> > sofa::gui::qt::DWClass_uchar(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_uint. Creator<DataWidgetFactory, SimpleDataWidget<unsigned int> > sofa::gui::qt::DWClass_uint(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,double> > > sofa::gui::qt::DWClass_Vec1d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,float> > > sofa::gui::qt::DWClass_Vec1f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,int> > > sofa::gui::qt::DWClass_Vec1i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,unsigned int> > > sofa::gui::qt::DWClass_Vec1u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,double> > > sofa::gui::qt::DWClass_Vec2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,float> > > sofa::gui::qt::DWClass_Vec2f(""default"", tr",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:77419,Usability,Simpl,SimpleDataWidget,77419,"; ""default"" ; , . true ;  . ). ◆ DWClass_TagSet. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::objectmodel::TagSet > > sofa::gui::qt::DWClass_TagSet(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Tetrahedron. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Tetrahedron > > sofa::gui::qt::DWClass_Tetrahedron(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Triangle. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Triangle > > sofa::gui::qt::DWClass_Triangle(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_uchar. Creator<DataWidgetFactory, SimpleDataWidget<unsigned char> > sofa::gui::qt::DWClass_uchar(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_uint. Creator<DataWidgetFactory, SimpleDataWidget<unsigned int> > sofa::gui::qt::DWClass_uint(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,double> > > sofa::gui::qt::DWClass_Vec1d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,float> > > sofa::gui::qt::DWClass_Vec1f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,int> > > sofa::gui::qt::DWClass_Vec1i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,unsigned int> > > sofa::gui::qt::DWClass_Vec1u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,double> > > sofa::gui::qt::DWClass_Vec2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,float> > > sofa::gui::qt::DWClass_Vec2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,int> > > sofa::gui::qt::DWClass_Vec2i(""default"", tru",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:77579,Usability,Simpl,SimpleDataWidget,77579,"(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Tetrahedron. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Tetrahedron > > sofa::gui::qt::DWClass_Tetrahedron(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Triangle. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Triangle > > sofa::gui::qt::DWClass_Triangle(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_uchar. Creator<DataWidgetFactory, SimpleDataWidget<unsigned char> > sofa::gui::qt::DWClass_uchar(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_uint. Creator<DataWidgetFactory, SimpleDataWidget<unsigned int> > sofa::gui::qt::DWClass_uint(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,double> > > sofa::gui::qt::DWClass_Vec1d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,float> > > sofa::gui::qt::DWClass_Vec1f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,int> > > sofa::gui::qt::DWClass_Vec1i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,unsigned int> > > sofa::gui::qt::DWClass_Vec1u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,double> > > sofa::gui::qt::DWClass_Vec2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,float> > > sofa::gui::qt::DWClass_Vec2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,int> > > sofa::gui::qt::DWClass_Vec2i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,unsigned int> > > sofa::gui::qt::DWClass_Vec2u(""default",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:77738,Usability,Simpl,SimpleDataWidget,77738,"edron > > sofa::gui::qt::DWClass_Tetrahedron(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Triangle. Creator<DataWidgetFactory, SimpleDataWidget< sofa::core::topology::Topology::Triangle > > sofa::gui::qt::DWClass_Triangle(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_uchar. Creator<DataWidgetFactory, SimpleDataWidget<unsigned char> > sofa::gui::qt::DWClass_uchar(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_uint. Creator<DataWidgetFactory, SimpleDataWidget<unsigned int> > sofa::gui::qt::DWClass_uint(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,double> > > sofa::gui::qt::DWClass_Vec1d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,float> > > sofa::gui::qt::DWClass_Vec1f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,int> > > sofa::gui::qt::DWClass_Vec1i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,unsigned int> > > sofa::gui::qt::DWClass_Vec1u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,double> > > sofa::gui::qt::DWClass_Vec2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,float> > > sofa::gui::qt::DWClass_Vec2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,int> > > sofa::gui::qt::DWClass_Vec2i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,unsigned int> > > sofa::gui::qt::DWClass_Vec2u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,double> > > sofa::gui::qt::DWClass_Vec3d(""defau",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:77895,Usability,Simpl,SimpleDataWidget,77895,"ofa::core::topology::Topology::Triangle > > sofa::gui::qt::DWClass_Triangle(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_uchar. Creator<DataWidgetFactory, SimpleDataWidget<unsigned char> > sofa::gui::qt::DWClass_uchar(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_uint. Creator<DataWidgetFactory, SimpleDataWidget<unsigned int> > sofa::gui::qt::DWClass_uint(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,double> > > sofa::gui::qt::DWClass_Vec1d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,float> > > sofa::gui::qt::DWClass_Vec1f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,int> > > sofa::gui::qt::DWClass_Vec1i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,unsigned int> > > sofa::gui::qt::DWClass_Vec1u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,double> > > sofa::gui::qt::DWClass_Vec2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,float> > > sofa::gui::qt::DWClass_Vec2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,int> > > sofa::gui::qt::DWClass_Vec2i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,unsigned int> > > sofa::gui::qt::DWClass_Vec2u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,double> > > sofa::gui::qt::DWClass_Vec3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,float> > > sofa::gui::qt::DWClass_Vec3f(""default",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:78061,Usability,Simpl,SimpleDataWidget,78061,"actory, SimpleDataWidget<unsigned char> > sofa::gui::qt::DWClass_uchar(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_uint. Creator<DataWidgetFactory, SimpleDataWidget<unsigned int> > sofa::gui::qt::DWClass_uint(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,double> > > sofa::gui::qt::DWClass_Vec1d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,float> > > sofa::gui::qt::DWClass_Vec1f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,int> > > sofa::gui::qt::DWClass_Vec1i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,unsigned int> > > sofa::gui::qt::DWClass_Vec1u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,double> > > sofa::gui::qt::DWClass_Vec2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,float> > > sofa::gui::qt::DWClass_Vec2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,int> > > sofa::gui::qt::DWClass_Vec2i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,unsigned int> > > sofa::gui::qt::DWClass_Vec2u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,double> > > sofa::gui::qt::DWClass_Vec3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,float> > > sofa::gui::qt::DWClass_Vec3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,int> > > sofa::gui::qt::DWClass_Vec3i(""default"", tru",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:78221,Usability,Simpl,SimpleDataWidget,78221,"tory, SimpleDataWidget<unsigned int> > sofa::gui::qt::DWClass_uint(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,double> > > sofa::gui::qt::DWClass_Vec1d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,float> > > sofa::gui::qt::DWClass_Vec1f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,int> > > sofa::gui::qt::DWClass_Vec1i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,unsigned int> > > sofa::gui::qt::DWClass_Vec1u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,double> > > sofa::gui::qt::DWClass_Vec2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,float> > > sofa::gui::qt::DWClass_Vec2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,int> > > sofa::gui::qt::DWClass_Vec2i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,unsigned int> > > sofa::gui::qt::DWClass_Vec2u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,double> > > sofa::gui::qt::DWClass_Vec3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,float> > > sofa::gui::qt::DWClass_Vec3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,int> > > sofa::gui::qt::DWClass_Vec3i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,unsigned int> > > sofa::gui::qt::DWClass_Vec3u(""default",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:78380,Usability,Simpl,SimpleDataWidget,78380,"ry, SimpleDataWidget< Vec<1,double> > > sofa::gui::qt::DWClass_Vec1d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,float> > > sofa::gui::qt::DWClass_Vec1f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,int> > > sofa::gui::qt::DWClass_Vec1i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,unsigned int> > > sofa::gui::qt::DWClass_Vec1u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,double> > > sofa::gui::qt::DWClass_Vec2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,float> > > sofa::gui::qt::DWClass_Vec2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,int> > > sofa::gui::qt::DWClass_Vec2i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,unsigned int> > > sofa::gui::qt::DWClass_Vec2u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,double> > > sofa::gui::qt::DWClass_Vec3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,float> > > sofa::gui::qt::DWClass_Vec3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,int> > > sofa::gui::qt::DWClass_Vec3i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,unsigned int> > > sofa::gui::qt::DWClass_Vec3u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,double> > > sofa::gui::qt::DWClass_Vec4d(""defau",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:78537,Usability,Simpl,SimpleDataWidget,78537,", SimpleDataWidget< Vec<1,float> > > sofa::gui::qt::DWClass_Vec1f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,int> > > sofa::gui::qt::DWClass_Vec1i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,unsigned int> > > sofa::gui::qt::DWClass_Vec1u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,double> > > sofa::gui::qt::DWClass_Vec2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,float> > > sofa::gui::qt::DWClass_Vec2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,int> > > sofa::gui::qt::DWClass_Vec2i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,unsigned int> > > sofa::gui::qt::DWClass_Vec2u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,double> > > sofa::gui::qt::DWClass_Vec3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,float> > > sofa::gui::qt::DWClass_Vec3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,int> > > sofa::gui::qt::DWClass_Vec3i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,unsigned int> > > sofa::gui::qt::DWClass_Vec3u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,double> > > sofa::gui::qt::DWClass_Vec4d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,float> > > sofa::gui::qt::DWClass_Vec4f(""default",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:78703,Usability,Simpl,SimpleDataWidget,78703,"mpleDataWidget< Vec<1,int> > > sofa::gui::qt::DWClass_Vec1i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec1u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<1,unsigned int> > > sofa::gui::qt::DWClass_Vec1u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,double> > > sofa::gui::qt::DWClass_Vec2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,float> > > sofa::gui::qt::DWClass_Vec2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,int> > > sofa::gui::qt::DWClass_Vec2i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,unsigned int> > > sofa::gui::qt::DWClass_Vec2u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,double> > > sofa::gui::qt::DWClass_Vec3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,float> > > sofa::gui::qt::DWClass_Vec3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,int> > > sofa::gui::qt::DWClass_Vec3i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,unsigned int> > > sofa::gui::qt::DWClass_Vec3u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,double> > > sofa::gui::qt::DWClass_Vec4d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,float> > > sofa::gui::qt::DWClass_Vec4f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,int> > > sofa::gui::qt::DWClass_Vec4i(""default"", tru",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:78863,Usability,Simpl,SimpleDataWidget,78863,"leDataWidget< Vec<1,unsigned int> > > sofa::gui::qt::DWClass_Vec1u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,double> > > sofa::gui::qt::DWClass_Vec2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,float> > > sofa::gui::qt::DWClass_Vec2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,int> > > sofa::gui::qt::DWClass_Vec2i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,unsigned int> > > sofa::gui::qt::DWClass_Vec2u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,double> > > sofa::gui::qt::DWClass_Vec3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,float> > > sofa::gui::qt::DWClass_Vec3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,int> > > sofa::gui::qt::DWClass_Vec3i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,unsigned int> > > sofa::gui::qt::DWClass_Vec3u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,double> > > sofa::gui::qt::DWClass_Vec4d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,float> > > sofa::gui::qt::DWClass_Vec4f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,int> > > sofa::gui::qt::DWClass_Vec4i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,unsigned int> > > sofa::gui::qt::DWClass_Vec4u(""default",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:79022,Usability,Simpl,SimpleDataWidget,79022,"ry, SimpleDataWidget< Vec<2,double> > > sofa::gui::qt::DWClass_Vec2d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,float> > > sofa::gui::qt::DWClass_Vec2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,int> > > sofa::gui::qt::DWClass_Vec2i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,unsigned int> > > sofa::gui::qt::DWClass_Vec2u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,double> > > sofa::gui::qt::DWClass_Vec3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,float> > > sofa::gui::qt::DWClass_Vec3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,int> > > sofa::gui::qt::DWClass_Vec3i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,unsigned int> > > sofa::gui::qt::DWClass_Vec3u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,double> > > sofa::gui::qt::DWClass_Vec4d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,float> > > sofa::gui::qt::DWClass_Vec4f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,int> > > sofa::gui::qt::DWClass_Vec4i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,unsigned int> > > sofa::gui::qt::DWClass_Vec4u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,double> > > sofa::gui::qt::DWClass_Vec6d(""defau",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:79179,Usability,Simpl,SimpleDataWidget,79179,", SimpleDataWidget< Vec<2,float> > > sofa::gui::qt::DWClass_Vec2f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,int> > > sofa::gui::qt::DWClass_Vec2i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,unsigned int> > > sofa::gui::qt::DWClass_Vec2u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,double> > > sofa::gui::qt::DWClass_Vec3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,float> > > sofa::gui::qt::DWClass_Vec3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,int> > > sofa::gui::qt::DWClass_Vec3i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,unsigned int> > > sofa::gui::qt::DWClass_Vec3u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,double> > > sofa::gui::qt::DWClass_Vec4d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,float> > > sofa::gui::qt::DWClass_Vec4f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,int> > > sofa::gui::qt::DWClass_Vec4i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,unsigned int> > > sofa::gui::qt::DWClass_Vec4u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,double> > > sofa::gui::qt::DWClass_Vec6d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,float> > > sofa::gui::qt::DWClass_Vec6f(""default",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:79345,Usability,Simpl,SimpleDataWidget,79345,"mpleDataWidget< Vec<2,int> > > sofa::gui::qt::DWClass_Vec2i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec2u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<2,unsigned int> > > sofa::gui::qt::DWClass_Vec2u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,double> > > sofa::gui::qt::DWClass_Vec3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,float> > > sofa::gui::qt::DWClass_Vec3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,int> > > sofa::gui::qt::DWClass_Vec3i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,unsigned int> > > sofa::gui::qt::DWClass_Vec3u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,double> > > sofa::gui::qt::DWClass_Vec4d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,float> > > sofa::gui::qt::DWClass_Vec4f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,int> > > sofa::gui::qt::DWClass_Vec4i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,unsigned int> > > sofa::gui::qt::DWClass_Vec4u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,double> > > sofa::gui::qt::DWClass_Vec6d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,float> > > sofa::gui::qt::DWClass_Vec6f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,int> > > sofa::gui::qt::DWClass_Vec6i(""default"", tru",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:79505,Usability,Simpl,SimpleDataWidget,79505,"leDataWidget< Vec<2,unsigned int> > > sofa::gui::qt::DWClass_Vec2u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,double> > > sofa::gui::qt::DWClass_Vec3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,float> > > sofa::gui::qt::DWClass_Vec3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,int> > > sofa::gui::qt::DWClass_Vec3i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,unsigned int> > > sofa::gui::qt::DWClass_Vec3u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,double> > > sofa::gui::qt::DWClass_Vec4d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,float> > > sofa::gui::qt::DWClass_Vec4f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,int> > > sofa::gui::qt::DWClass_Vec4i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,unsigned int> > > sofa::gui::qt::DWClass_Vec4u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,double> > > sofa::gui::qt::DWClass_Vec6d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,float> > > sofa::gui::qt::DWClass_Vec6f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,int> > > sofa::gui::qt::DWClass_Vec6i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,unsigned int> > > sofa::gui::qt::DWClass_Vec6u(""default",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:79664,Usability,Simpl,SimpleDataWidget,79664,"ry, SimpleDataWidget< Vec<3,double> > > sofa::gui::qt::DWClass_Vec3d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,float> > > sofa::gui::qt::DWClass_Vec3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,int> > > sofa::gui::qt::DWClass_Vec3i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,unsigned int> > > sofa::gui::qt::DWClass_Vec3u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,double> > > sofa::gui::qt::DWClass_Vec4d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,float> > > sofa::gui::qt::DWClass_Vec4f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,int> > > sofa::gui::qt::DWClass_Vec4i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,unsigned int> > > sofa::gui::qt::DWClass_Vec4u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,double> > > sofa::gui::qt::DWClass_Vec6d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,float> > > sofa::gui::qt::DWClass_Vec6f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,int> > > sofa::gui::qt::DWClass_Vec6i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,unsigned int> > > sofa::gui::qt::DWClass_Vec6u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec8i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<8,int> > > sofa::gui::qt::DWClass_Vec8i(""default""",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:79821,Usability,Simpl,SimpleDataWidget,79821,", SimpleDataWidget< Vec<3,float> > > sofa::gui::qt::DWClass_Vec3f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,int> > > sofa::gui::qt::DWClass_Vec3i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,unsigned int> > > sofa::gui::qt::DWClass_Vec3u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,double> > > sofa::gui::qt::DWClass_Vec4d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,float> > > sofa::gui::qt::DWClass_Vec4f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,int> > > sofa::gui::qt::DWClass_Vec4i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,unsigned int> > > sofa::gui::qt::DWClass_Vec4u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,double> > > sofa::gui::qt::DWClass_Vec6d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,float> > > sofa::gui::qt::DWClass_Vec6f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,int> > > sofa::gui::qt::DWClass_Vec6i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,unsigned int> > > sofa::gui::qt::DWClass_Vec6u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec8i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<8,int> > > sofa::gui::qt::DWClass_Vec8i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec8u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<8,unsigned int> > > sofa::gui::qt::DWClass_Vec8u(""def",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:79987,Usability,Simpl,SimpleDataWidget,79987,"mpleDataWidget< Vec<3,int> > > sofa::gui::qt::DWClass_Vec3i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec3u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<3,unsigned int> > > sofa::gui::qt::DWClass_Vec3u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,double> > > sofa::gui::qt::DWClass_Vec4d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,float> > > sofa::gui::qt::DWClass_Vec4f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,int> > > sofa::gui::qt::DWClass_Vec4i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,unsigned int> > > sofa::gui::qt::DWClass_Vec4u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,double> > > sofa::gui::qt::DWClass_Vec6d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,float> > > sofa::gui::qt::DWClass_Vec6f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,int> > > sofa::gui::qt::DWClass_Vec6i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,unsigned int> > > sofa::gui::qt::DWClass_Vec6u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec8i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<8,int> > > sofa::gui::qt::DWClass_Vec8i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec8u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<8,unsigned int> > > sofa::gui::qt::DWClass_Vec8u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_vectorA1i. Creator<DataWidgetFactory, TableDataWidget< sofa::type::vector<fixed_array<int,1> > > > sofa::g",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:80147,Usability,Simpl,SimpleDataWidget,80147,"leDataWidget< Vec<3,unsigned int> > > sofa::gui::qt::DWClass_Vec3u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,double> > > sofa::gui::qt::DWClass_Vec4d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,float> > > sofa::gui::qt::DWClass_Vec4f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,int> > > sofa::gui::qt::DWClass_Vec4i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,unsigned int> > > sofa::gui::qt::DWClass_Vec4u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,double> > > sofa::gui::qt::DWClass_Vec6d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,float> > > sofa::gui::qt::DWClass_Vec6f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,int> > > sofa::gui::qt::DWClass_Vec6i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,unsigned int> > > sofa::gui::qt::DWClass_Vec6u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec8i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<8,int> > > sofa::gui::qt::DWClass_Vec8i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec8u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<8,unsigned int> > > sofa::gui::qt::DWClass_Vec8u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_vectorA1i. Creator<DataWidgetFactory, TableDataWidget< sofa::type::vector<fixed_array<int,1> > > > sofa::gui::qt::DWClass_vectorA1i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_vectorA1u. Creator<DataWidgetFactory, TableDataWidget< sofa::type::vector",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:80306,Usability,Simpl,SimpleDataWidget,80306,"ry, SimpleDataWidget< Vec<4,double> > > sofa::gui::qt::DWClass_Vec4d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,float> > > sofa::gui::qt::DWClass_Vec4f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,int> > > sofa::gui::qt::DWClass_Vec4i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,unsigned int> > > sofa::gui::qt::DWClass_Vec4u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,double> > > sofa::gui::qt::DWClass_Vec6d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,float> > > sofa::gui::qt::DWClass_Vec6f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,int> > > sofa::gui::qt::DWClass_Vec6i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,unsigned int> > > sofa::gui::qt::DWClass_Vec6u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec8i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<8,int> > > sofa::gui::qt::DWClass_Vec8i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec8u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<8,unsigned int> > > sofa::gui::qt::DWClass_Vec8u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_vectorA1i. Creator<DataWidgetFactory, TableDataWidget< sofa::type::vector<fixed_array<int,1> > > > sofa::gui::qt::DWClass_vectorA1i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_vectorA1u. Creator<DataWidgetFactory, TableDataWidget< sofa::type::vector<fixed_array<unsigned int,1> > > > sofa::gui::qt::DWClass_vectorA1u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_vectorA2i. Creator<DataWidget",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:80463,Usability,Simpl,SimpleDataWidget,80463,", SimpleDataWidget< Vec<4,float> > > sofa::gui::qt::DWClass_Vec4f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,int> > > sofa::gui::qt::DWClass_Vec4i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,unsigned int> > > sofa::gui::qt::DWClass_Vec4u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,double> > > sofa::gui::qt::DWClass_Vec6d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,float> > > sofa::gui::qt::DWClass_Vec6f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,int> > > sofa::gui::qt::DWClass_Vec6i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,unsigned int> > > sofa::gui::qt::DWClass_Vec6u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec8i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<8,int> > > sofa::gui::qt::DWClass_Vec8i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec8u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<8,unsigned int> > > sofa::gui::qt::DWClass_Vec8u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_vectorA1i. Creator<DataWidgetFactory, TableDataWidget< sofa::type::vector<fixed_array<int,1> > > > sofa::gui::qt::DWClass_vectorA1i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_vectorA1u. Creator<DataWidgetFactory, TableDataWidget< sofa::type::vector<fixed_array<unsigned int,1> > > > sofa::gui::qt::DWClass_vectorA1u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_vectorA2i. Creator<DataWidgetFactory, TableDataWidget< sofa::type::vector<fixed_array<int,2> > > > sofa::gui::qt::DWClass_vectorA2i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWCla",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:80629,Usability,Simpl,SimpleDataWidget,80629,"SimpleDataWidget< Vec<4,int> > > sofa::gui::qt::DWClass_Vec4i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec4u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<4,unsigned int> > > sofa::gui::qt::DWClass_Vec4u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,double> > > sofa::gui::qt::DWClass_Vec6d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,float> > > sofa::gui::qt::DWClass_Vec6f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,int> > > sofa::gui::qt::DWClass_Vec6i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,unsigned int> > > sofa::gui::qt::DWClass_Vec6u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec8i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<8,int> > > sofa::gui::qt::DWClass_Vec8i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec8u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<8,unsigned int> > > sofa::gui::qt::DWClass_Vec8u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_vectorA1i. Creator<DataWidgetFactory, TableDataWidget< sofa::type::vector<fixed_array<int,1> > > > sofa::gui::qt::DWClass_vectorA1i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_vectorA1u. Creator<DataWidgetFactory, TableDataWidget< sofa::type::vector<fixed_array<unsigned int,1> > > > sofa::gui::qt::DWClass_vectorA1u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_vectorA2i. Creator<DataWidgetFactory, TableDataWidget< sofa::type::vector<fixed_array<int,2> > > > sofa::gui::qt::DWClass_vectorA2i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_vectorA2u. Creator<DataWidgetFactory, TableDataWidget< sofa::type::vector<fixed_array<unsigned int,2> > > > sofa::gui::qt::DWClass_vectorA2u(""default"", true) ;",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:80786,Usability,Simpl,SimpleDataWidget,80786,"eDataWidget< Vec<4,unsigned int> > > sofa::gui::qt::DWClass_Vec4u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6d. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,double> > > sofa::gui::qt::DWClass_Vec6d(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6f. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,float> > > sofa::gui::qt::DWClass_Vec6f(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,int> > > sofa::gui::qt::DWClass_Vec6i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec6u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<6,unsigned int> > > sofa::gui::qt::DWClass_Vec6u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec8i. Creator<DataWidgetFactory, SimpleDataWidget< Vec<8,int> > > sofa::gui::qt::DWClass_Vec8i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_Vec8u. Creator<DataWidgetFactory, SimpleDataWidget< Vec<8,unsigned int> > > sofa::gui::qt::DWClass_Vec8u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_vectorA1i. Creator<DataWidgetFactory, TableDataWidget< sofa::type::vector<fixed_array<int,1> > > > sofa::gui::qt::DWClass_vectorA1i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_vectorA1u. Creator<DataWidgetFactory, TableDataWidget< sofa::type::vector<fixed_array<unsigned int,1> > > > sofa::gui::qt::DWClass_vectorA1u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_vectorA2i. Creator<DataWidgetFactory, TableDataWidget< sofa::type::vector<fixed_array<int,2> > > > sofa::gui::qt::DWClass_vectorA2i(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_vectorA2u. Creator<DataWidgetFactory, TableDataWidget< sofa::type::vector<fixed_array<unsigned int,2> > > > sofa::gui::qt::DWClass_vectorA2u(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_vectorA3d. Creator<DataWidgetFactory, TableDataWidget< sofa::type::vector<fixed_array<double,3> > > > sofa::gui::qt::D",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1materialdatawidget__h.html:167,Modifiability,Variab,Variables,167,"﻿. SOFA API: sofa::gui::qt::materialdatawidget_h Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Variables . sofa::gui::qt::materialdatawidget_h Namespace Reference . Private namespace. ; More... Classes; class  MaterialDataWidget;  ; class  VectorMaterialDataWidget;  . Typedefs; typedef type::vector< Material > VectorMaterial;  . Variables; helper::Creator< DataWidgetFactory, MaterialDataWidget > DWClass_MeshMaterial (""default"", true);  ; helper::Creator< DataWidgetFactory, VectorMaterialDataWidget > DWClass_MeshVectorMaterial (""default"", true);  . Detailed Description; Private namespace. ; Typedef Documentation. ◆ VectorMaterial. typedef type::vector<Material> sofa::gui::qt::materialdatawidget_h::VectorMaterial. Variable Documentation. ◆ DWClass_MeshMaterial. helper::Creator<DataWidgetFactory,MaterialDataWidget> sofa::gui::qt::materialdatawidget_h::DWClass_MeshMaterial(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_MeshVectorMaterial. helper::Creator<DataWidgetFactory,VectorMaterialDataWidget> sofa::gui::qt::materialdatawidget_h::DWClass_MeshVectorMaterial(""default"", true) ; (; ""default"" ; , . true ;  . ). sofaguiqtmaterialdatawidget_h; Generated on Mon Nov 11 2024 03:25:44 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1materialdatawidget__h.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1materialdatawidget__h.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1materialdatawidget__h.html:403,Modifiability,Variab,Variables,403,"﻿. SOFA API: sofa::gui::qt::materialdatawidget_h Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Variables . sofa::gui::qt::materialdatawidget_h Namespace Reference . Private namespace. ; More... Classes; class  MaterialDataWidget;  ; class  VectorMaterialDataWidget;  . Typedefs; typedef type::vector< Material > VectorMaterial;  . Variables; helper::Creator< DataWidgetFactory, MaterialDataWidget > DWClass_MeshMaterial (""default"", true);  ; helper::Creator< DataWidgetFactory, VectorMaterialDataWidget > DWClass_MeshVectorMaterial (""default"", true);  . Detailed Description; Private namespace. ; Typedef Documentation. ◆ VectorMaterial. typedef type::vector<Material> sofa::gui::qt::materialdatawidget_h::VectorMaterial. Variable Documentation. ◆ DWClass_MeshMaterial. helper::Creator<DataWidgetFactory,MaterialDataWidget> sofa::gui::qt::materialdatawidget_h::DWClass_MeshMaterial(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_MeshVectorMaterial. helper::Creator<DataWidgetFactory,VectorMaterialDataWidget> sofa::gui::qt::materialdatawidget_h::DWClass_MeshVectorMaterial(""default"", true) ; (; ""default"" ; , . true ;  . ). sofaguiqtmaterialdatawidget_h; Generated on Mon Nov 11 2024 03:25:44 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1materialdatawidget__h.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1materialdatawidget__h.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1materialdatawidget__h.html:794,Modifiability,Variab,Variable,794,"﻿. SOFA API: sofa::gui::qt::materialdatawidget_h Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Variables . sofa::gui::qt::materialdatawidget_h Namespace Reference . Private namespace. ; More... Classes; class  MaterialDataWidget;  ; class  VectorMaterialDataWidget;  . Typedefs; typedef type::vector< Material > VectorMaterial;  . Variables; helper::Creator< DataWidgetFactory, MaterialDataWidget > DWClass_MeshMaterial (""default"", true);  ; helper::Creator< DataWidgetFactory, VectorMaterialDataWidget > DWClass_MeshVectorMaterial (""default"", true);  . Detailed Description; Private namespace. ; Typedef Documentation. ◆ VectorMaterial. typedef type::vector<Material> sofa::gui::qt::materialdatawidget_h::VectorMaterial. Variable Documentation. ◆ DWClass_MeshMaterial. helper::Creator<DataWidgetFactory,MaterialDataWidget> sofa::gui::qt::materialdatawidget_h::DWClass_MeshMaterial(""default"", true) ; (; ""default"" ; , . true ;  . ). ◆ DWClass_MeshVectorMaterial. helper::Creator<DataWidgetFactory,VectorMaterialDataWidget> sofa::gui::qt::materialdatawidget_h::DWClass_MeshVectorMaterial(""default"", true) ; (; ""default"" ; , . true ;  . ). sofaguiqtmaterialdatawidget_h; Generated on Mon Nov 11 2024 03:25:44 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1materialdatawidget__h.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1materialdatawidget__h.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1rgbacolordatawidget__h.html:156,Modifiability,Variab,Variables,156,"﻿. SOFA API: sofa::gui::qt::rgbacolordatawidget_h Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Variables . sofa::gui::qt::rgbacolordatawidget_h Namespace Reference . Classes; class  RGBAColorDataWidget;  . Variables; helper::Creator< DataWidgetFactory, RGBAColorDataWidget > DWClass (""default"", true);  . Variable Documentation. ◆ DWClass. helper::Creator<DataWidgetFactory, RGBAColorDataWidget> sofa::gui::qt::rgbacolordatawidget_h::DWClass(""default"", true) ; (; ""default"" ; , . true ;  . ). sofaguiqtrgbacolordatawidget_h; Generated on Mon Nov 11 2024 03:25:44 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1rgbacolordatawidget__h.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1rgbacolordatawidget__h.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1rgbacolordatawidget__h.html:267,Modifiability,Variab,Variables,267,"﻿. SOFA API: sofa::gui::qt::rgbacolordatawidget_h Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Variables . sofa::gui::qt::rgbacolordatawidget_h Namespace Reference . Classes; class  RGBAColorDataWidget;  . Variables; helper::Creator< DataWidgetFactory, RGBAColorDataWidget > DWClass (""default"", true);  . Variable Documentation. ◆ DWClass. helper::Creator<DataWidgetFactory, RGBAColorDataWidget> sofa::gui::qt::rgbacolordatawidget_h::DWClass(""default"", true) ; (; ""default"" ; , . true ;  . ). sofaguiqtrgbacolordatawidget_h; Generated on Mon Nov 11 2024 03:25:44 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1rgbacolordatawidget__h.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1rgbacolordatawidget__h.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1rgbacolordatawidget__h.html:366,Modifiability,Variab,Variable,366,"﻿. SOFA API: sofa::gui::qt::rgbacolordatawidget_h Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Variables . sofa::gui::qt::rgbacolordatawidget_h Namespace Reference . Classes; class  RGBAColorDataWidget;  . Variables; helper::Creator< DataWidgetFactory, RGBAColorDataWidget > DWClass (""default"", true);  . Variable Documentation. ◆ DWClass. helper::Creator<DataWidgetFactory, RGBAColorDataWidget> sofa::gui::qt::rgbacolordatawidget_h::DWClass(""default"", true) ; (; ""default"" ; , . true ;  . ). sofaguiqtrgbacolordatawidget_h; Generated on Mon Nov 11 2024 03:25:44 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1rgbacolordatawidget__h.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1rgbacolordatawidget__h.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1viewer_1_1qgl.html:146,Modifiability,Variab,Variables,146,"﻿. SOFA API: sofa::gui::qt::viewer::qgl Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Variables . sofa::gui::qt::viewer::qgl Namespace Reference . Classes; class  QtGLViewer;  . Variables; helper::SofaViewerCreator< QtGLViewer > QtGLViewer_class (""qglviewer"", false);  . Variable Documentation. ◆ QtGLViewer_class. helper::SofaViewerCreator<QtGLViewer> sofa::gui::qt::viewer::qgl::QtGLViewer_class(""qglviewer"", false) ; (; ""qglviewer"" ; , . false ;  . ). sofaguiqtviewerqgl; Generated on Mon Nov 11 2024 03:25:44 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1viewer_1_1qgl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1viewer_1_1qgl.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1viewer_1_1qgl.html:238,Modifiability,Variab,Variables,238,"﻿. SOFA API: sofa::gui::qt::viewer::qgl Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Variables . sofa::gui::qt::viewer::qgl Namespace Reference . Classes; class  QtGLViewer;  . Variables; helper::SofaViewerCreator< QtGLViewer > QtGLViewer_class (""qglviewer"", false);  . Variable Documentation. ◆ QtGLViewer_class. helper::SofaViewerCreator<QtGLViewer> sofa::gui::qt::viewer::qgl::QtGLViewer_class(""qglviewer"", false) ; (; ""qglviewer"" ; , . false ;  . ). sofaguiqtviewerqgl; Generated on Mon Nov 11 2024 03:25:44 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1viewer_1_1qgl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1viewer_1_1qgl.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1viewer_1_1qgl.html:331,Modifiability,Variab,Variable,331,"﻿. SOFA API: sofa::gui::qt::viewer::qgl Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Variables . sofa::gui::qt::viewer::qgl Namespace Reference . Classes; class  QtGLViewer;  . Variables; helper::SofaViewerCreator< QtGLViewer > QtGLViewer_class (""qglviewer"", false);  . Variable Documentation. ◆ QtGLViewer_class. helper::SofaViewerCreator<QtGLViewer> sofa::gui::qt::viewer::qgl::QtGLViewer_class(""qglviewer"", false) ; (; ""qglviewer"" ; , . false ;  . ). sofaguiqtviewerqgl; Generated on Mon Nov 11 2024 03:25:44 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1viewer_1_1qgl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1viewer_1_1qgl.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1viewer_1_1qt.html:157,Modifiability,Variab,Variables,157,"﻿. SOFA API: sofa::gui::qt::viewer::qt Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Variables . sofa::gui::qt::viewer::qt Namespace Reference . Classes; class  QtViewer;  . Typedefs; typedef QGLWidget QOpenGLWidget;  . Variables; helper::SofaViewerCreator< QtViewer > QtViewer_class (""qt"", false);  . Typedef Documentation. ◆ QOpenGLWidget. typedef QGLWidget sofa::gui::qt::viewer::qt::QOpenGLWidget. Variable Documentation. ◆ QtViewer_class. helper::SofaViewerCreator< QtViewer> sofa::gui::qt::viewer::qt::QtViewer_class(""qt"", false) ; (; ""qt"" ; , . false ;  . ). sofaguiqtviewerqt; Generated on Mon Nov 11 2024 03:25:55 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1viewer_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1viewer_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1viewer_1_1qt.html:292,Modifiability,Variab,Variables,292,"﻿. SOFA API: sofa::gui::qt::viewer::qt Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Variables . sofa::gui::qt::viewer::qt Namespace Reference . Classes; class  QtViewer;  . Typedefs; typedef QGLWidget QOpenGLWidget;  . Variables; helper::SofaViewerCreator< QtViewer > QtViewer_class (""qt"", false);  . Typedef Documentation. ◆ QOpenGLWidget. typedef QGLWidget sofa::gui::qt::viewer::qt::QOpenGLWidget. Variable Documentation. ◆ QtViewer_class. helper::SofaViewerCreator< QtViewer> sofa::gui::qt::viewer::qt::QtViewer_class(""qt"", false) ; (; ""qt"" ; , . false ;  . ). sofaguiqtviewerqt; Generated on Mon Nov 11 2024 03:25:55 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1viewer_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1viewer_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1viewer_1_1qt.html:474,Modifiability,Variab,Variable,474,"﻿. SOFA API: sofa::gui::qt::viewer::qt Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Variables . sofa::gui::qt::viewer::qt Namespace Reference . Classes; class  QtViewer;  . Typedefs; typedef QGLWidget QOpenGLWidget;  . Variables; helper::SofaViewerCreator< QtViewer > QtViewer_class (""qt"", false);  . Typedef Documentation. ◆ QOpenGLWidget. typedef QGLWidget sofa::gui::qt::viewer::qt::QOpenGLWidget. Variable Documentation. ◆ QtViewer_class. helper::SofaViewerCreator< QtViewer> sofa::gui::qt::viewer::qt::QtViewer_class(""qt"", false) ; (; ""qt"" ; , . false ;  . ). sofaguiqtviewerqt; Generated on Mon Nov 11 2024 03:25:55 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1viewer_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt_1_1viewer_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:17005,Availability,down,downcaseString,17005,"lass T > ; bool isClamped (const T &value, const T &low, const T &high);  ; template<class T > ; T sign (const T &v);  ; template<class T > ; T sign0 (const T &v);  ; template<class T > ; bool isEqual (T x, T y, T threshold=(std::numeric_limits< T >::epsilon)());  ; template<class T > ; bool isNull (T x, T threshold=(std::numeric_limits< T >::epsilon)());  ; double rcos (double x);  ; float rcos (float x);  ; double rsin (double x);  ; float rsin (float x);  ; template<class T > ; T rcos (const T &a);  ; template<class T > ; T rsin (const T &a);  ; template<class Container > ; type::vector< unsigned > sortedPermutation (const Container &values);  Return a sorted permutation of the container, i.e. a list of indices corresponding to increasing entries. More...;  ; std::wstring widenString (const std::string &s);  Convert a string to a wstring. More...;  ; std::string narrowString (const std::wstring &ws);  Convert a wstring to a string. More...;  ; std::string downcaseString (const std::string &s);  Convert a string to lower case. More...;  ; std::string upcaseString (const std::string &s);  Convert a string to upper case. More...;  ; std::vector< std::string > split (const std::string &s, char delimiter);  Taken from https://www.fluentcpp.com/2017/04/21/how-to-split-a-string-in-c/. More...;  ; char * getAStringCopy (const char *c);  returns a copy of the string given in argument. More...;  ; void replaceAll (std::string &str, const std::string &search, const std::string &replace);  replace all occurrence of ""search"" by the ""replace"" string. More...;  ; bool ends_with (const std::string &suffix, const std::string &full);  returns true if the suffix if located at the end of the ""full"" string. More...;  ; bool starts_with (const std::string &prefix, const std::string &full);  returns true if the prefix if located at the beginning of the ""full"" string. More...;  ; std::string safeCharToString (const char *c);  converts a char* string into a c++ string. The special case w",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:21742,Availability,down,downcaseString,21742," sofa::helper::system::thread::ctime_t sofa::helper::ctime_t. ◆ FemClipsReal. typedef SReal sofa::helper::FemClipsReal. ◆ integer_id_name. typedef const char*(* sofa::helper::integer_id_name) (). ◆ SimpleTimer. typedef TSimpleTimer sofa::helper::SimpleTimer. Enumeration Type Documentation. ◆ anonymous enum. anonymous enum. EnumeratorNDefaultColorMapSchemes . Function Documentation. ◆ absError(). SOFA_HELPER_API SReal sofa::helper::absError ; (; SReal ; f1x, . SReal ; f1y, . SReal ; f1z, . SReal ; f2x, . SReal ; f2y, . SReal ; f2z . ). inline . ◆ add3Dof(). SOFA_HELPER_API void sofa::helper::add3Dof ; (; SReal * ; vector, . int ; index, . SReal ; vx, . SReal ; vy, . SReal ; vz . ). inline . ◆ choose_next(). unsigned int sofa::helper::choose_next ; (; SReal ; x, . SReal ; y, . SReal ; z, . unsigned int ; a, . unsigned int ; b, . unsigned int ; c . ). inline . ◆ cleanup(). SOFA_HELPER_API void sofa::helper::cleanup ; (; ). Clean up the resources used by the SofaHelper library. . ◆ downcaseString(). SOFA_HELPER_API std::string sofa::helper::downcaseString ; (; const std::string & ; s). Convert a string to lower case. . ◆ drand() [1/3]. double sofa::helper::drand ; (; ). inline . ◆ drand() [2/3]. double sofa::helper::drand ; (; double ; max). inline . ◆ drand() [3/3]. double sofa::helper::drand ; (; double ; min, . double ; max . ). inline . ◆ drandpos(). double sofa::helper::drandpos ; (; double ; max). inline . ◆ dsyev2(). template<class Real > . void sofa::helper::dsyev2 ; (; Real ; A, . Real ; B, . Real ; C, . Real & ; rt1, . Real & ; rt2, . Real & ; cs, . Real & ; sn . ). inline . ◆ dsyevc3(). template<class Real > . int sofa::helper::dsyevc3 ; (; const type::Mat< 3, 3, Real > & ; A, . type::Vec< 3, Real > & ; w . ). ◆ dsyevq3(). template<class Real > . int sofa::helper::dsyevq3 ; (; const type::Mat< 3, 3, Real > & ; A, . type::Mat< 3, 3, Real > & ; Q, . type::Vec< 3, Real > & ; w . ). ◆ dsytrd3(). template<class Real > . void sofa::helper::dsytrd3 ; (; const type::",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:21802,Availability,down,downcaseString,21802,"time_t. ◆ FemClipsReal. typedef SReal sofa::helper::FemClipsReal. ◆ integer_id_name. typedef const char*(* sofa::helper::integer_id_name) (). ◆ SimpleTimer. typedef TSimpleTimer sofa::helper::SimpleTimer. Enumeration Type Documentation. ◆ anonymous enum. anonymous enum. EnumeratorNDefaultColorMapSchemes . Function Documentation. ◆ absError(). SOFA_HELPER_API SReal sofa::helper::absError ; (; SReal ; f1x, . SReal ; f1y, . SReal ; f1z, . SReal ; f2x, . SReal ; f2y, . SReal ; f2z . ). inline . ◆ add3Dof(). SOFA_HELPER_API void sofa::helper::add3Dof ; (; SReal * ; vector, . int ; index, . SReal ; vx, . SReal ; vy, . SReal ; vz . ). inline . ◆ choose_next(). unsigned int sofa::helper::choose_next ; (; SReal ; x, . SReal ; y, . SReal ; z, . unsigned int ; a, . unsigned int ; b, . unsigned int ; c . ). inline . ◆ cleanup(). SOFA_HELPER_API void sofa::helper::cleanup ; (; ). Clean up the resources used by the SofaHelper library. . ◆ downcaseString(). SOFA_HELPER_API std::string sofa::helper::downcaseString ; (; const std::string & ; s). Convert a string to lower case. . ◆ drand() [1/3]. double sofa::helper::drand ; (; ). inline . ◆ drand() [2/3]. double sofa::helper::drand ; (; double ; max). inline . ◆ drand() [3/3]. double sofa::helper::drand ; (; double ; min, . double ; max . ). inline . ◆ drandpos(). double sofa::helper::drandpos ; (; double ; max). inline . ◆ dsyev2(). template<class Real > . void sofa::helper::dsyev2 ; (; Real ; A, . Real ; B, . Real ; C, . Real & ; rt1, . Real & ; rt2, . Real & ; cs, . Real & ; sn . ). inline . ◆ dsyevc3(). template<class Real > . int sofa::helper::dsyevc3 ; (; const type::Mat< 3, 3, Real > & ; A, . type::Vec< 3, Real > & ; w . ). ◆ dsyevq3(). template<class Real > . int sofa::helper::dsyevq3 ; (; const type::Mat< 3, 3, Real > & ; A, . type::Mat< 3, 3, Real > & ; Q, . type::Vec< 3, Real > & ; w . ). ◆ dsytrd3(). template<class Real > . void sofa::helper::dsytrd3 ; (; const type::Mat< 3, 3, Real > & ; A, . type::Mat< 3, 3, Real > & ;",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:31428,Availability,failure,failure,31428,"; Template Parameters. TTarget type ; USource type . Parameters. uValue to cast . ReturnsThe value converted to the target type . ◆ narrow_cast_check(). template<class T , class U > . constexpr T sofa::helper::narrow_cast_check ; (; U ; u). constexpr . Explicit narrow conversion checking that the value is unchanged by the cast. If the value changed, an exception is thrown Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) . ◆ narrow_cast_nocheck(). template<class T , class U > . constexpr T sofa::helper::narrow_cast_nocheck ; (; U && ; u). constexprnoexcept . Explicit narrow conversion Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) ; Template Parameters. TTarget type ; USource type . Parameters. uValue to cast . ReturnsThe value converted to the target type . ◆ narrowString(). SOFA_HELPER_API std::string sofa::helper::narrowString ; (; const std::wstring & ; ws). Convert a wstring to a string. ; ReturnsThe converted string on success, or an empty string on failure. . ◆ nlcp_gaussseidel(). SOFA_HELPER_API int sofa::helper::nlcp_gaussseidel ; (; int ; dim, . SReal * ; dfree, . SReal ** ; W, . SReal * ; f, . SReal ; mu, . SReal ; tol, . int ; numItMax, . bool ; useInitialF, . bool ; verbose, . SReal ; minW, . SReal ; maxF, . std::vector< SReal > * ; residuals, . std::vector< SReal > * ; violations . ). ◆ nlcp_gaussseidelTimed(). SOFA_HELPER_API int sofa::helper::nlcp_gaussseidelTimed ; (; int ; dim, . SReal * ; dfree, . SReal ** ; W, . SReal * ; f, . SReal ; mu, . SReal ; tol, . int ; numItMax, . bool ; useInitialF, . SReal ; timeout, . bool ; verbose . ). ◆ nlcp_multiGrid(). SOFA_HELPER_API int sofa::helper::nlcp_multiGrid ; (; int ; dim, . SReal * ; dfree, . SReal ** ; W, . SReal * ; f, . SReal ; mu, . SReal ; tol, . int ; numItMax, . bool ; useInitialF, . SReal ** ; W_coarse, . std::vector< int > & ; contact_group, . unsigned int ; num_group, . bool ; verbose . ). ◆ nlcp_multiGrid_2levels(). SOFA_HELPER_API in",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:44113,Availability,failure,failure,44113," for double and int used only for the tests now. . ◆ starts_with(). SOFA_HELPER_API bool sofa::helper::starts_with ; (; const std::string & ; prefix, . const std::string & ; full . ). returns true if the prefix if located at the beginning of the ""full"" string. . ◆ strToDouble(). double sofa::helper::strToDouble ; (; std::string const & ; stringToConvert, . std::size_t const ; precision . ). ◆ SWAP(). template<class T > . void sofa::helper::SWAP ; (; T & ; a, . T & ; b . ). inline . ◆ upcaseString(). SOFA_HELPER_API std::string sofa::helper::upcaseString ; (; const std::string & ; s). Convert a string to upper case. . ◆ vector_access_failure(). void SOFA_HELPER_API sofa::helper::vector_access_failure ; (; const void * ; vec, . unsigned ; size, . unsigned ; i, . const std::type_info & ; type, . const char * ; tindex . ). ◆ widenString(). SOFA_HELPER_API std::wstring sofa::helper::widenString ; (; const std::string & ; s). Convert a string to a wstring. ; ReturnsThe converted string on success, or an empty string on failure. . Variable Documentation. ◆ activeTimers. std::atomic<int> sofa::helper::activeTimers. ◆ base. SReal SReal SReal SReal int* sofa::helper::base. ◆ Decompose< double >. template class SOFA_HELPER_API sofa::helper::Decompose< double >. ◆ Decompose< float >. template class SOFA_HELPER_API sofa::helper::Decompose< float >. ◆ dim. SReal SReal int sofa::helper::dim = delete. ◆ f. SReal SReal* sofa::helper::f. ◆ forceNarrowCastChecking. constexpr bool sofa::helper::forceNarrowCastChecking = true. constexpr . If true, narrow_cast will check if the value changed after the narrow conversion. Otherwise, no check is performed. . ◆ kMutex. std::mutex sofa::helper::kMutex. ◆ kTagList. TagList sofa::helper::kTagList { {""0"", ""Visual""} }. ◆ M. SReal ** sofa::helper::M. ◆ MarchingCubeEdgeTable. SOFA_HELPER_API const int sofa::helper::MarchingCubeEdgeTable. ◆ MarchingCubeFaceTable. SOFA_HELPER_API const int sofa::helper::MarchingCubeFaceTable. Initial value:=; {; 0x0 ,",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:775,Deployability,update,update,775,"﻿. SOFA API: sofa::helper Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::helper Namespace Reference . Namespaces;  advancedtimer;  ;  console;  ;  io;  This allow MeshTrian to interact with the messaging system. ;  ;  lifecycle;  ;  logging;  This allow Base object to interact with the messaging system. ;  ;  messaging;  ;  polygon_cube_intersection;  ;  system;  ;  visual;  . Classes; class  ReadAccessor< core::objectmodel::Data< T > >;  ; class  WriteAccessor< core::objectmodel::Data< T > >;  ; class  WriteOnlyAccessor< core::objectmodel::Data< T > >;  The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. More...;  ; class  ReadAccessor;  ; class  ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  ReadAccessorVector;  ; class  WriteAccessor;  ; class  WriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  WriteAccessorVector;  WriteAccessor implementation class for vector types. More...;  ; class  WriteOnlyAccessor;  ; class  WriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  TimerData;  ; class  Record;  ; class  StepData;  ; class  AdvancedTimer;  ; class  BackTrace;  ; class  ColorMap;  ; class  Decompose;  ; class  NoArgument;  Allow us to use BaseCreator and Factory without using any Arguments. More...;  ; class  BaseCreator;  ; class  Factory;  ; class  Creator;  ; class  CreatorFn;  ; class  BasicDispatcher;  ; class  FnDispatcher;  ; class  SingletonFnDispatcher;  ; struct  GenerateRigidInfo;  storing rigid infos needed for RigidMass More...;  ; struct  IndexOpenMP;  ; struct  CleanupCheck;  ; ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:878,Deployability,update,updates,878,"﻿. SOFA API: sofa::helper Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::helper Namespace Reference . Namespaces;  advancedtimer;  ;  console;  ;  io;  This allow MeshTrian to interact with the messaging system. ;  ;  lifecycle;  ;  logging;  This allow Base object to interact with the messaging system. ;  ;  messaging;  ;  polygon_cube_intersection;  ;  system;  ;  visual;  . Classes; class  ReadAccessor< core::objectmodel::Data< T > >;  ; class  WriteAccessor< core::objectmodel::Data< T > >;  ; class  WriteOnlyAccessor< core::objectmodel::Data< T > >;  The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. More...;  ; class  ReadAccessor;  ; class  ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  ReadAccessorVector;  ; class  WriteAccessor;  ; class  WriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  WriteAccessorVector;  WriteAccessor implementation class for vector types. More...;  ; class  WriteOnlyAccessor;  ; class  WriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  TimerData;  ; class  Record;  ; class  StepData;  ; class  AdvancedTimer;  ; class  BackTrace;  ; class  ColorMap;  ; class  Decompose;  ; class  NoArgument;  Allow us to use BaseCreator and Factory without using any Arguments. More...;  ; class  BaseCreator;  ; class  Factory;  ; class  Creator;  ; class  CreatorFn;  ; class  BasicDispatcher;  ; class  FnDispatcher;  ; class  SingletonFnDispatcher;  ; struct  GenerateRigidInfo;  storing rigid infos needed for RigidMass More...;  ; struct  IndexOpenMP;  ; struct  CleanupCheck;  ; ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:187,Modifiability,Variab,Variables,187,"﻿. SOFA API: sofa::helper Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::helper Namespace Reference . Namespaces;  advancedtimer;  ;  console;  ;  io;  This allow MeshTrian to interact with the messaging system. ;  ;  lifecycle;  ;  logging;  This allow Base object to interact with the messaging system. ;  ;  messaging;  ;  polygon_cube_intersection;  ;  system;  ;  visual;  . Classes; class  ReadAccessor< core::objectmodel::Data< T > >;  ; class  WriteAccessor< core::objectmodel::Data< T > >;  ; class  WriteOnlyAccessor< core::objectmodel::Data< T > >;  The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. More...;  ; class  ReadAccessor;  ; class  ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  ReadAccessorVector;  ; class  WriteAccessor;  ; class  WriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  WriteAccessorVector;  WriteAccessor implementation class for vector types. More...;  ; class  WriteOnlyAccessor;  ; class  WriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  TimerData;  ; class  Record;  ; class  StepData;  ; class  AdvancedTimer;  ; class  BackTrace;  ; class  ColorMap;  ; class  Decompose;  ; class  NoArgument;  Allow us to use BaseCreator and Factory without using any Arguments. More...;  ; class  BaseCreator;  ; class  Factory;  ; class  Creator;  ; class  CreatorFn;  ; class  BasicDispatcher;  ; class  FnDispatcher;  ; class  SingletonFnDispatcher;  ; struct  GenerateRigidInfo;  storing rigid infos needed for RigidMass More...;  ; struct  IndexOpenMP;  ; struct  CleanupCheck;  ; ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:3222,Modifiability,variab,variables,3222,"ation class for vector_id types. More...;  ; class  ReadAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >;  ; class  WriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >;  ; class  kdTree;  ; class  LCP;  ; class  LocalBlock33;  ; class  ptr_stable_id;  ; class  ptr_stable_compare;  A comparison object that order pointers in a stable way, i.e. in the order pointers are presented. More...;  ; class  ptr_stable_compare< T * >;  ; class  ptr_stable_compare< std::pair< T *, T * > >;  ; class  map_ptr_stable_compare;  A map container that order pointers in a stable way, i.e. in the order pointers are presented. More...;  ; class  MarchingCubeUtility;  ; class  MemoryManager;  ; class  NameDecoder;  ; struct  narrowing_error;  ; class  OptionsGroup;  OptionsGroup is a kind of data for a radio button. It has a list of text representing a list of choices, and a integer number indicating the choice selected. More...;  ; class  OwnershipSPtr;  ; class  Monomial_LD;  A generic monomial with N variables of type Real. A monomial is one term of a polynomial. More...;  ; class  Polynomial_LD;  A generic polynomial with N variables of type Real. A polynomial is a list composed of several monomials. More...;  ; class  RandomGenerator;  ; struct  IsEqual;  ; struct  IsEqual< true >;  ; struct  IsNull;  ; struct  IsNull< true >;  ; struct  ScopedAdvancedTimer;  ; class  TSimpleTimer;  ; struct  CompareIndirect;  ; class  TagList;  ; class  TagFactory;  ; class  TriangleOctreeRoot;  ; class  TriangleOctree;  ; class  TypeInfo;  ; class  Utils;  Contains possibly useful functions, that don't fit anywhere else. More...;  ; class  BaseCreator< sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >;  ; class  SofaViewerFactory;  ; class  SofaViewerCreator;  . Typedefs; typedef sofa::helper::system::thread::ctime_t ctime_t;  ; typedef sofa::helper::system::thread::CTime CTime;  ; typedef const char *(* integer_id_name) ();  ; typedef SReal Fem",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:3349,Modifiability,variab,variables,3349,"ccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >;  ; class  kdTree;  ; class  LCP;  ; class  LocalBlock33;  ; class  ptr_stable_id;  ; class  ptr_stable_compare;  A comparison object that order pointers in a stable way, i.e. in the order pointers are presented. More...;  ; class  ptr_stable_compare< T * >;  ; class  ptr_stable_compare< std::pair< T *, T * > >;  ; class  map_ptr_stable_compare;  A map container that order pointers in a stable way, i.e. in the order pointers are presented. More...;  ; class  MarchingCubeUtility;  ; class  MemoryManager;  ; class  NameDecoder;  ; struct  narrowing_error;  ; class  OptionsGroup;  OptionsGroup is a kind of data for a radio button. It has a list of text representing a list of choices, and a integer number indicating the choice selected. More...;  ; class  OwnershipSPtr;  ; class  Monomial_LD;  A generic monomial with N variables of type Real. A monomial is one term of a polynomial. More...;  ; class  Polynomial_LD;  A generic polynomial with N variables of type Real. A polynomial is a list composed of several monomials. More...;  ; class  RandomGenerator;  ; struct  IsEqual;  ; struct  IsEqual< true >;  ; struct  IsNull;  ; struct  IsNull< true >;  ; struct  ScopedAdvancedTimer;  ; class  TSimpleTimer;  ; struct  CompareIndirect;  ; class  TagList;  ; class  TagFactory;  ; class  TriangleOctreeRoot;  ; class  TriangleOctree;  ; class  TypeInfo;  ; class  Utils;  Contains possibly useful functions, that don't fit anywhere else. More...;  ; class  BaseCreator< sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >;  ; class  SofaViewerFactory;  ; class  SofaViewerCreator;  . Typedefs; typedef sofa::helper::system::thread::ctime_t ctime_t;  ; typedef sofa::helper::system::thread::CTime CTime;  ; typedef const char *(* integer_id_name) ();  ; typedef SReal FemClipsReal;  ; typedef TSimpleTimer SimpleTimer;  . Enumerations; enum  { NDefaultColorMapSchemes = 20; };  . Functions; template<class T >",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:18954,Modifiability,Variab,Variables,18954,"characters);  Removes specified trailing characters from a string view. More...;  ; template<class InputIt , class S > ; std::string join (InputIt first, InputIt last, const S &delim);  ; template<class InputIt , class UnaryFunction , class S > ; std::string join (InputIt first, InputIt last, UnaryFunction f, const S &delim);  ; template<class S , class Container > ; std::string join (const Container &elems, const S &delim);  Join a container into a single string, separated by the provided delimiter. More...;  ; unsigned int choose_next (SReal x, SReal y, SReal z, unsigned int a, unsigned int b, unsigned int c);  . Variables; std::map< AdvancedTimer::IdTimer, TimerData > timers;  ; std::atomic< int > activeTimers;  ; AdvancedTimer::SyncCallBack syncCallBack = nullptr;  ; void * syncCallBackData = nullptr;  ; template class SOFA_HELPER_API Decompose< double >;  ; template class SOFA_HELPER_API Decompose< float >;  ; SReal SReal SReal SReal ** M;  ; SReal SReal SReal SReal int * base;  ; SReal SReal SReal SReal int SReal ** mat;  ; SReal SReal SReal SReal int SReal int dim = delete;  ; SReal SReal * f;  ; const int MarchingCubeEdgeTable [256];  ; const int MarchingCubeFaceTable [256];  ; const int MarchingCubeTriTable [256][16];  ; constexpr bool forceNarrowCastChecking = true;  If true, narrow_cast will check if the value changed after the narrow conversion. Otherwise, no check is performed. More...;  ; template class SOFA_HELPER_API Monomial_LD< double, 1 >;  ; template class SOFA_HELPER_API Monomial_LD< double, 2 >;  ; template class SOFA_HELPER_API Monomial_LD< double, 3 >;  ; template class SOFA_HELPER_API Monomial_LD< double, 4 >;  ; template class SOFA_HELPER_API Monomial_LD< double, 5 >;  ; template class SOFA_HELPER_API Polynomial_LD< double, 1 >;  ; template class SOFA_HELPER_API Polynomial_LD< double, 2 >;  ; template class SOFA_HELPER_API Polynomial_LD< double, 3 >;  ; template class SOFA_HELPER_API Polynomial_LD< double, 4 >;  ; template class SOFA_HELPER_",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:44124,Modifiability,Variab,Variable,44124,"◆ starts_with(). SOFA_HELPER_API bool sofa::helper::starts_with ; (; const std::string & ; prefix, . const std::string & ; full . ). returns true if the prefix if located at the beginning of the ""full"" string. . ◆ strToDouble(). double sofa::helper::strToDouble ; (; std::string const & ; stringToConvert, . std::size_t const ; precision . ). ◆ SWAP(). template<class T > . void sofa::helper::SWAP ; (; T & ; a, . T & ; b . ). inline . ◆ upcaseString(). SOFA_HELPER_API std::string sofa::helper::upcaseString ; (; const std::string & ; s). Convert a string to upper case. . ◆ vector_access_failure(). void SOFA_HELPER_API sofa::helper::vector_access_failure ; (; const void * ; vec, . unsigned ; size, . unsigned ; i, . const std::type_info & ; type, . const char * ; tindex . ). ◆ widenString(). SOFA_HELPER_API std::wstring sofa::helper::widenString ; (; const std::string & ; s). Convert a string to a wstring. ; ReturnsThe converted string on success, or an empty string on failure. . Variable Documentation. ◆ activeTimers. std::atomic<int> sofa::helper::activeTimers. ◆ base. SReal SReal SReal SReal int* sofa::helper::base. ◆ Decompose< double >. template class SOFA_HELPER_API sofa::helper::Decompose< double >. ◆ Decompose< float >. template class SOFA_HELPER_API sofa::helper::Decompose< float >. ◆ dim. SReal SReal int sofa::helper::dim = delete. ◆ f. SReal SReal* sofa::helper::f. ◆ forceNarrowCastChecking. constexpr bool sofa::helper::forceNarrowCastChecking = true. constexpr . If true, narrow_cast will check if the value changed after the narrow conversion. Otherwise, no check is performed. . ◆ kMutex. std::mutex sofa::helper::kMutex. ◆ kTagList. TagList sofa::helper::kTagList { {""0"", ""Visual""} }. ◆ M. SReal ** sofa::helper::M. ◆ MarchingCubeEdgeTable. SOFA_HELPER_API const int sofa::helper::MarchingCubeEdgeTable. ◆ MarchingCubeFaceTable. SOFA_HELPER_API const int sofa::helper::MarchingCubeFaceTable. Initial value:=; {; 0x0 , 0x19, 0x15, 0x1d, 0x25, 0x3d, 0x35, 0x3d, 0x29, 0",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:19734,Performance,perform,performed,19734,"ntainer &elems, const S &delim);  Join a container into a single string, separated by the provided delimiter. More...;  ; unsigned int choose_next (SReal x, SReal y, SReal z, unsigned int a, unsigned int b, unsigned int c);  . Variables; std::map< AdvancedTimer::IdTimer, TimerData > timers;  ; std::atomic< int > activeTimers;  ; AdvancedTimer::SyncCallBack syncCallBack = nullptr;  ; void * syncCallBackData = nullptr;  ; template class SOFA_HELPER_API Decompose< double >;  ; template class SOFA_HELPER_API Decompose< float >;  ; SReal SReal SReal SReal ** M;  ; SReal SReal SReal SReal int * base;  ; SReal SReal SReal SReal int SReal ** mat;  ; SReal SReal SReal SReal int SReal int dim = delete;  ; SReal SReal * f;  ; const int MarchingCubeEdgeTable [256];  ; const int MarchingCubeFaceTable [256];  ; const int MarchingCubeTriTable [256][16];  ; constexpr bool forceNarrowCastChecking = true;  If true, narrow_cast will check if the value changed after the narrow conversion. Otherwise, no check is performed. More...;  ; template class SOFA_HELPER_API Monomial_LD< double, 1 >;  ; template class SOFA_HELPER_API Monomial_LD< double, 2 >;  ; template class SOFA_HELPER_API Monomial_LD< double, 3 >;  ; template class SOFA_HELPER_API Monomial_LD< double, 4 >;  ; template class SOFA_HELPER_API Monomial_LD< double, 5 >;  ; template class SOFA_HELPER_API Polynomial_LD< double, 1 >;  ; template class SOFA_HELPER_API Polynomial_LD< double, 2 >;  ; template class SOFA_HELPER_API Polynomial_LD< double, 3 >;  ; template class SOFA_HELPER_API Polynomial_LD< double, 4 >;  ; template class SOFA_HELPER_API Polynomial_LD< double, 5 >;  ; std::mutex kMutex;  ; TagList kTagList { {""0"", ""Visual""} };  . Detailed Description; Helpers to apply Eigen matrix methods to the Mat sofa type; Utility to compute the sorted permutation of a container. See example at the end of the file Francois Faure, April 2012 ; Typedef Documentation. ◆ CTime. typedef sofa::helper::system::thread::CTime sofa::helper::CTi",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:44733,Performance,perform,performed,44733,"ailure(). void SOFA_HELPER_API sofa::helper::vector_access_failure ; (; const void * ; vec, . unsigned ; size, . unsigned ; i, . const std::type_info & ; type, . const char * ; tindex . ). ◆ widenString(). SOFA_HELPER_API std::wstring sofa::helper::widenString ; (; const std::string & ; s). Convert a string to a wstring. ; ReturnsThe converted string on success, or an empty string on failure. . Variable Documentation. ◆ activeTimers. std::atomic<int> sofa::helper::activeTimers. ◆ base. SReal SReal SReal SReal int* sofa::helper::base. ◆ Decompose< double >. template class SOFA_HELPER_API sofa::helper::Decompose< double >. ◆ Decompose< float >. template class SOFA_HELPER_API sofa::helper::Decompose< float >. ◆ dim. SReal SReal int sofa::helper::dim = delete. ◆ f. SReal SReal* sofa::helper::f. ◆ forceNarrowCastChecking. constexpr bool sofa::helper::forceNarrowCastChecking = true. constexpr . If true, narrow_cast will check if the value changed after the narrow conversion. Otherwise, no check is performed. . ◆ kMutex. std::mutex sofa::helper::kMutex. ◆ kTagList. TagList sofa::helper::kTagList { {""0"", ""Visual""} }. ◆ M. SReal ** sofa::helper::M. ◆ MarchingCubeEdgeTable. SOFA_HELPER_API const int sofa::helper::MarchingCubeEdgeTable. ◆ MarchingCubeFaceTable. SOFA_HELPER_API const int sofa::helper::MarchingCubeFaceTable. Initial value:=; {; 0x0 , 0x19, 0x15, 0x1d, 0x25, 0x3d, 0x35, 0x3d, 0x29, 0x39,; 0x3d, 0x3d, 0x2d, 0x3d, 0x3d, 0x3c, 0x1a, 0x1b, 0x1f, 0x1f,; 0x3f, 0x3f, 0x3f, 0x3f, 0x3b, 0x3b, 0x3f, 0x3f, 0x3f, 0x3f,; 0x3f, 0x3e, 0x16, 0x1f, 0x17, 0x1f, 0x37, 0x3f, 0x37, 0x3f,; 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3e, 0x1e, 0x1f,; 0x1f, 0xf , 0x3f, 0x3f, 0x3f, 0x2f, 0x3f, 0x3f, 0x3f, 0x2f,; 0x3f, 0x3f, 0x3f, 0x2e, 0x26, 0x3f, 0x37, 0x3f, 0x27, 0x3f,; 0x37, 0x3f, 0x2f, 0x3f, 0x3f, 0x3f, 0x2f, 0x3f, 0x3f, 0x3e,; 0x3e, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f,; 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3e, 0x36, 0x3f, 0x37, 0x3f,; 0x37, 0x3f, 0x33, 0x3b, 0x3f, 0x3f, ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:854,Safety,avoid,avoids,854,"﻿. SOFA API: sofa::helper Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::helper Namespace Reference . Namespaces;  advancedtimer;  ;  console;  ;  io;  This allow MeshTrian to interact with the messaging system. ;  ;  lifecycle;  ;  logging;  This allow Base object to interact with the messaging system. ;  ;  messaging;  ;  polygon_cube_intersection;  ;  system;  ;  visual;  . Classes; class  ReadAccessor< core::objectmodel::Data< T > >;  ; class  WriteAccessor< core::objectmodel::Data< T > >;  ; class  WriteOnlyAccessor< core::objectmodel::Data< T > >;  The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. More...;  ; class  ReadAccessor;  ; class  ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  ReadAccessorVector;  ; class  WriteAccessor;  ; class  WriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  WriteAccessorVector;  WriteAccessor implementation class for vector types. More...;  ; class  WriteOnlyAccessor;  ; class  WriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  TimerData;  ; class  Record;  ; class  StepData;  ; class  AdvancedTimer;  ; class  BackTrace;  ; class  ColorMap;  ; class  Decompose;  ; class  NoArgument;  Allow us to use BaseCreator and Factory without using any Arguments. More...;  ; class  BaseCreator;  ; class  Factory;  ; class  Creator;  ; class  CreatorFn;  ; class  BasicDispatcher;  ; class  FnDispatcher;  ; class  SingletonFnDispatcher;  ; struct  GenerateRigidInfo;  storing rigid infos needed for RigidMass More...;  ; struct  IndexOpenMP;  ; struct  CleanupCheck;  ; ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:11956,Safety,timeout,timeout,11956,"W, SReal *f, SReal mu, SReal tol, int numItMax, bool useInitialF, std::vector< std::vector< int > > &contact_group_hierarchy, std::vector< unsigned int > Tab_num_group, std::vector< std::vector< int > > &constraint_group_hierarchy, std::vector< std::vector< SReal > > &constraint_group_fact_hierarchy, bool verbose, std::vector< SReal > *residualsN, std::vector< SReal > *residualLevels, std::vector< SReal > *violations);  ; int nlcp_multiGrid (int dim, SReal *dfree, SReal **W, SReal *f, SReal mu, SReal tol, int numItMax, bool useInitialF, SReal **W_coarse, std::vector< int > &contact_group, unsigned int num_group, bool verbose);  ; int nlcp_gaussseidel (int dim, SReal *dfree, SReal **W, SReal *f, SReal mu, SReal tol, int numItMax, bool useInitialF, bool verbose, SReal minW, SReal maxF, std::vector< SReal > *residuals, std::vector< SReal > *violations);  ; int nlcp_gaussseidelTimed (int dim, SReal *dfree, SReal **W, SReal *f, SReal mu, SReal tol, int numItMax, bool useInitialF, SReal timeout, bool verbose);  ; void gaussSeidelLCP1 (int dim, FemClipsReal *q, FemClipsReal **M, FemClipsReal *res, SReal tol, int numItMax, SReal minW, SReal maxF, std::vector< SReal > *residuals);  ; SOFA_HELPER_API void set3Dof (SReal *vector, int index, SReal vx, SReal vy, SReal vz);  ; SOFA_HELPER_API void add3Dof (SReal *vector, int index, SReal vx, SReal vy, SReal vz);  ; SOFA_HELPER_API SReal normError (SReal f1x, SReal f1y, SReal f1z, SReal f2x, SReal f2y, SReal f2z);  ; SOFA_HELPER_API SReal absError (SReal f1x, SReal f1y, SReal f1z, SReal f2x, SReal f2y, SReal f2z);  ;  SOFA_LCPCALC_RESOUDRELCP_DISABLED () int resoudreLCP(int;  ; SReal SReal SReal * SOFA_LCPCALC_AFFICHESYST_DISABLED () void afficheSyst(SReal *q;  ;  SOFA_LCPCALC_AFFICHELCP_DISABLED () void afficheLCP(SReal *q;  ; SOFA_HELPER_API void resultToString (std::ostream &s, SReal *f, int dim);  ; template<Size NumRows, Size NumCols, class Real > ; Eigen::Matrix< Real, NumRows, NumCols > eigenMat (const type::Mat< NumRows, N",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:17936,Safety,safe,safeCharToString,17936,"g to a string. More...;  ; std::string downcaseString (const std::string &s);  Convert a string to lower case. More...;  ; std::string upcaseString (const std::string &s);  Convert a string to upper case. More...;  ; std::vector< std::string > split (const std::string &s, char delimiter);  Taken from https://www.fluentcpp.com/2017/04/21/how-to-split-a-string-in-c/. More...;  ; char * getAStringCopy (const char *c);  returns a copy of the string given in argument. More...;  ; void replaceAll (std::string &str, const std::string &search, const std::string &replace);  replace all occurrence of ""search"" by the ""replace"" string. More...;  ; bool ends_with (const std::string &suffix, const std::string &full);  returns true if the suffix if located at the end of the ""full"" string. More...;  ; bool starts_with (const std::string &prefix, const std::string &full);  returns true if the prefix if located at the beginning of the ""full"" string. More...;  ; std::string safeCharToString (const char *c);  converts a char* string into a c++ string. The special case with nullptr is coerced to an empty string. More...;  ; std::string_view removeTrailingCharacter (std::string_view sv, char character);  Removes specified trailing character from a string view. More...;  ; std::string_view removeTrailingCharacters (std::string_view sv, std::initializer_list< char > characters);  Removes specified trailing characters from a string view. More...;  ; template<class InputIt , class S > ; std::string join (InputIt first, InputIt last, const S &delim);  ; template<class InputIt , class UnaryFunction , class S > ; std::string join (InputIt first, InputIt last, UnaryFunction f, const S &delim);  ; template<class S , class Container > ; std::string join (const Container &elems, const S &delim);  Join a container into a single string, separated by the provided delimiter. More...;  ; unsigned int choose_next (SReal x, SReal y, SReal z, unsigned int a, unsigned int b, unsigned int c);  . Variables; s",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:32006,Safety,timeout,timeout,32006,"w conversion Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) ; Template Parameters. TTarget type ; USource type . Parameters. uValue to cast . ReturnsThe value converted to the target type . ◆ narrowString(). SOFA_HELPER_API std::string sofa::helper::narrowString ; (; const std::wstring & ; ws). Convert a wstring to a string. ; ReturnsThe converted string on success, or an empty string on failure. . ◆ nlcp_gaussseidel(). SOFA_HELPER_API int sofa::helper::nlcp_gaussseidel ; (; int ; dim, . SReal * ; dfree, . SReal ** ; W, . SReal * ; f, . SReal ; mu, . SReal ; tol, . int ; numItMax, . bool ; useInitialF, . bool ; verbose, . SReal ; minW, . SReal ; maxF, . std::vector< SReal > * ; residuals, . std::vector< SReal > * ; violations . ). ◆ nlcp_gaussseidelTimed(). SOFA_HELPER_API int sofa::helper::nlcp_gaussseidelTimed ; (; int ; dim, . SReal * ; dfree, . SReal ** ; W, . SReal * ; f, . SReal ; mu, . SReal ; tol, . int ; numItMax, . bool ; useInitialF, . SReal ; timeout, . bool ; verbose . ). ◆ nlcp_multiGrid(). SOFA_HELPER_API int sofa::helper::nlcp_multiGrid ; (; int ; dim, . SReal * ; dfree, . SReal ** ; W, . SReal * ; f, . SReal ; mu, . SReal ; tol, . int ; numItMax, . bool ; useInitialF, . SReal ** ; W_coarse, . std::vector< int > & ; contact_group, . unsigned int ; num_group, . bool ; verbose . ). ◆ nlcp_multiGrid_2levels(). SOFA_HELPER_API int sofa::helper::nlcp_multiGrid_2levels ; (; int ; dim, . SReal * ; dfree, . SReal ** ; W, . SReal * ; f, . SReal ; mu, . SReal ; tol, . int ; numItMax, . bool ; useInitialF, . std::vector< int > & ; contact_group, . unsigned int ; num_group, . std::vector< int > & ; constraint_group, . std::vector< SReal > & ; constraint_group_fact, . bool ; verbose, . std::vector< SReal > * ; residuals1, . std::vector< SReal > * ; residuals2 . ). new multigrid resolution of a problem with projection & prolongation . ◆ nlcp_multiGrid_Nlevels(). int sofa::helper::nlcp_multiGrid_Nlevels ; (; int ; dim, . SReal * ; dfre",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:40475,Safety,safe,safeCharToString,40475,"r ; (; real ; r). inline . ◆ rlerp(). template<class T > . T sofa::helper::rlerp ; (; const T & ; a, . const T & ; b, . float ; f . ). inline . ◆ rmax(). template<class real > . real sofa::helper::rmax ; (; real ; r, . real ; s . ). inline . ◆ rmin(). template<class real > . real sofa::helper::rmin ; (; real ; r, . real ; s . ). inline . ◆ rnear(). template<class real > . int sofa::helper::rnear ; (; real ; r). inline . ◆ round(). template<class T > . T sofa::helper::round ; (; const T & ; x). inline . ◆ rsin() [1/3]. template<class T > . T sofa::helper::rsin ; (; const T & ; a). inline . ◆ rsin() [2/3]. double sofa::helper::rsin ; (; double ; x). inline . ◆ rsin() [3/3]. float sofa::helper::rsin ; (; float ; x). inline . ◆ rsqrt() [1/3]. double sofa::helper::rsqrt ; (; const double & ; a). inline . ◆ rsqrt() [2/3]. long double sofa::helper::rsqrt ; (; const long double & ; a). inline . ◆ rsqrt() [3/3]. template<class T > . T sofa::helper::rsqrt ; (; const T & ; a). inline . ◆ safeCharToString(). SOFA_HELPER_API std::string sofa::helper::safeCharToString ; (; const char * ; c). converts a char* string into a c++ string. The special case with nullptr is coerced to an empty string. . ◆ set3Dof(). SOFA_HELPER_API void sofa::helper::set3Dof ; (; SReal * ; vector, . int ; index, . SReal ; vx, . SReal ; vy, . SReal ; vz . ). inline . ◆ setCurRecords(). void sofa::helper::setCurRecords ; (; type::vector< Record > * ; ptr). ◆ shft3(). void sofa::helper::shft3 ; (; double & ; a, . double & ; b, . double & ; c, . const double ; d . ). inline . ◆ SIGN(). template<class T > . const T sofa::helper::SIGN ; (; const T & ; a, . const T & ; b . ). inline . ◆ sign(). template<class T > . T sofa::helper::sign ; (; const T & ; v). inline . ◆ sign0(). template<class T > . T sofa::helper::sign0 ; (; const T & ; v). inline . ◆ SOFA_LCPCALC_AFFICHELCP_DISABLED(). sofa::helper::SOFA_LCPCALC_AFFICHELCP_DISABLED ; (; ). ◆ SOFA_LCPCALC_AFFICHESYST_DISABLED(). SReal SReal SReal* sofa::helper::S",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:40537,Safety,safe,safeCharToString,40537," T > . T sofa::helper::rlerp ; (; const T & ; a, . const T & ; b, . float ; f . ). inline . ◆ rmax(). template<class real > . real sofa::helper::rmax ; (; real ; r, . real ; s . ). inline . ◆ rmin(). template<class real > . real sofa::helper::rmin ; (; real ; r, . real ; s . ). inline . ◆ rnear(). template<class real > . int sofa::helper::rnear ; (; real ; r). inline . ◆ round(). template<class T > . T sofa::helper::round ; (; const T & ; x). inline . ◆ rsin() [1/3]. template<class T > . T sofa::helper::rsin ; (; const T & ; a). inline . ◆ rsin() [2/3]. double sofa::helper::rsin ; (; double ; x). inline . ◆ rsin() [3/3]. float sofa::helper::rsin ; (; float ; x). inline . ◆ rsqrt() [1/3]. double sofa::helper::rsqrt ; (; const double & ; a). inline . ◆ rsqrt() [2/3]. long double sofa::helper::rsqrt ; (; const long double & ; a). inline . ◆ rsqrt() [3/3]. template<class T > . T sofa::helper::rsqrt ; (; const T & ; a). inline . ◆ safeCharToString(). SOFA_HELPER_API std::string sofa::helper::safeCharToString ; (; const char * ; c). converts a char* string into a c++ string. The special case with nullptr is coerced to an empty string. . ◆ set3Dof(). SOFA_HELPER_API void sofa::helper::set3Dof ; (; SReal * ; vector, . int ; index, . SReal ; vx, . SReal ; vy, . SReal ; vz . ). inline . ◆ setCurRecords(). void sofa::helper::setCurRecords ; (; type::vector< Record > * ; ptr). ◆ shft3(). void sofa::helper::shft3 ; (; double & ; a, . double & ; b, . double & ; c, . const double ; d . ). inline . ◆ SIGN(). template<class T > . const T sofa::helper::SIGN ; (; const T & ; a, . const T & ; b . ). inline . ◆ sign(). template<class T > . T sofa::helper::sign ; (; const T & ; v). inline . ◆ sign0(). template<class T > . T sofa::helper::sign0 ; (; const T & ; v). inline . ◆ SOFA_LCPCALC_AFFICHELCP_DISABLED(). sofa::helper::SOFA_LCPCALC_AFFICHELCP_DISABLED ; (; ). ◆ SOFA_LCPCALC_AFFICHESYST_DISABLED(). SReal SReal SReal* sofa::helper::SOFA_LCPCALC_AFFICHESYST_DISABLED ; (; ). ◆ SOFA_LCPCA",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:727,Security,access,access,727,"﻿. SOFA API: sofa::helper Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::helper Namespace Reference . Namespaces;  advancedtimer;  ;  console;  ;  io;  This allow MeshTrian to interact with the messaging system. ;  ;  lifecycle;  ;  logging;  This allow Base object to interact with the messaging system. ;  ;  messaging;  ;  polygon_cube_intersection;  ;  system;  ;  visual;  . Classes; class  ReadAccessor< core::objectmodel::Data< T > >;  ; class  WriteAccessor< core::objectmodel::Data< T > >;  ; class  WriteOnlyAccessor< core::objectmodel::Data< T > >;  The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. More...;  ; class  ReadAccessor;  ; class  ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  ReadAccessorVector;  ; class  WriteAccessor;  ; class  WriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  WriteAccessorVector;  WriteAccessor implementation class for vector types. More...;  ; class  WriteOnlyAccessor;  ; class  WriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  TimerData;  ; class  Record;  ; class  StepData;  ; class  AdvancedTimer;  ; class  BackTrace;  ; class  ColorMap;  ; class  Decompose;  ; class  NoArgument;  Allow us to use BaseCreator and Factory without using any Arguments. More...;  ; class  BaseCreator;  ; class  Factory;  ; class  Creator;  ; class  CreatorFn;  ; class  BasicDispatcher;  ; class  FnDispatcher;  ; class  SingletonFnDispatcher;  ; struct  GenerateRigidInfo;  storing rigid infos needed for RigidMass More...;  ; struct  IndexOpenMP;  ; struct  CleanupCheck;  ; ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:26679,Security,access,accessor,26679,"elper::getAStringCopy ; (; const char * ; c). returns a copy of the string given in argument. . ◆ getClosestMatch(). std::vector< std::tuple< std::string, SReal > > SOFA_HELPER_API sofa::helper::getClosestMatch ; (; const std::string & ; needle, . const std::vector< std::string > & ; haystack, . const Size ; numEntries, . const SReal ; threshold . ). Search for the the closest match to the string passed in the ""needle"" argument within the vector of ""haystack"" arguments. . ◆ getCurRecords(). type::vector<Record>* sofa::helper::getCurRecords ; (; ). ◆ getCurTimer(). std::stack<AdvancedTimer::IdTimer>& sofa::helper::getCurTimer ; (; ). ◆ getFactoryLog(). SOFA_HELPER_API std::string & sofa::helper::getFactoryLog ; (; ). ◆ getNoVal(). std::string sofa::helper::getNoVal ; (; ). ◆ getReadAccessor(). template<class T > . ReadAccessor<core::objectmodel::Data<T> > sofa::helper::getReadAccessor ; (; const core::objectmodel::Data< T > & ; data). Returns a read accessor from the provided Data<> Example of use: auto points = getReadAccessor(d_points) . ◆ getTime(). std::string sofa::helper::getTime ; (; ctime_t ; t, . int ; niter = 1 . ). ◆ gettypename(). SOFA_HELPER_API std::string sofa::helper::gettypename ; (; const std::type_info & ; t). Decode the type's name to a more readable form if possible. . ◆ getVal() [1/2]. std::string sofa::helper::getVal ; (; double ; v). ◆ getVal() [2/2]. std::string sofa::helper::getVal ; (; double ; v, . int ; niter . ). ◆ getWriteAccessor(). template<class T > . WriteAccessor<core::objectmodel::Data<T> > sofa::helper::getWriteAccessor ; (; core::objectmodel::Data< T > & ; data). Returns a write only accessor from the provided Data<> Example of use: auto points = getWriteOnlyAccessor(d_points) . ◆ getWriteOnlyAccessor(). template<class T > . WriteOnlyAccessor<core::objectmodel::Data<T> > sofa::helper::getWriteOnlyAccessor ; (; core::objectmodel::Data< T > & ; data). Returns a write only accessor from the provided Data<> WriteOnly accessors are fa",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:27365,Security,access,accessor,27365,"g & sofa::helper::getFactoryLog ; (; ). ◆ getNoVal(). std::string sofa::helper::getNoVal ; (; ). ◆ getReadAccessor(). template<class T > . ReadAccessor<core::objectmodel::Data<T> > sofa::helper::getReadAccessor ; (; const core::objectmodel::Data< T > & ; data). Returns a read accessor from the provided Data<> Example of use: auto points = getReadAccessor(d_points) . ◆ getTime(). std::string sofa::helper::getTime ; (; ctime_t ; t, . int ; niter = 1 . ). ◆ gettypename(). SOFA_HELPER_API std::string sofa::helper::gettypename ; (; const std::type_info & ; t). Decode the type's name to a more readable form if possible. . ◆ getVal() [1/2]. std::string sofa::helper::getVal ; (; double ; v). ◆ getVal() [2/2]. std::string sofa::helper::getVal ; (; double ; v, . int ; niter . ). ◆ getWriteAccessor(). template<class T > . WriteAccessor<core::objectmodel::Data<T> > sofa::helper::getWriteAccessor ; (; core::objectmodel::Data< T > & ; data). Returns a write only accessor from the provided Data<> Example of use: auto points = getWriteOnlyAccessor(d_points) . ◆ getWriteOnlyAccessor(). template<class T > . WriteOnlyAccessor<core::objectmodel::Data<T> > sofa::helper::getWriteOnlyAccessor ; (; core::objectmodel::Data< T > & ; data). Returns a write only accessor from the provided Data<> WriteOnly accessors are faster than WriteAccessor because as the data is only read this means there is no need to pull the data from the parents Example of use: auto points = getWriteOnlyAccessor(d_points) . ◆ init(). SOFA_HELPER_API void sofa::helper::init ; (; ). Initialize the SofaHelper library. . ◆ irand(). int sofa::helper::irand ; (; ). inline . ◆ isClamped(). template<class T > . bool sofa::helper::isClamped ; (; const T & ; value, . const T & ; low, . const T & ; high . ). inline . ◆ isCleanedUp(). SOFA_HELPER_API bool sofa::helper::isCleanedUp ; (; ). Return true if and only if the SofaHelper library has been cleaned up. . ◆ isEqual(). template<class T > . bool sofa::helper::isEqual ; (; T ; ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:27657,Security,access,accessor,27657,"s) . ◆ getTime(). std::string sofa::helper::getTime ; (; ctime_t ; t, . int ; niter = 1 . ). ◆ gettypename(). SOFA_HELPER_API std::string sofa::helper::gettypename ; (; const std::type_info & ; t). Decode the type's name to a more readable form if possible. . ◆ getVal() [1/2]. std::string sofa::helper::getVal ; (; double ; v). ◆ getVal() [2/2]. std::string sofa::helper::getVal ; (; double ; v, . int ; niter . ). ◆ getWriteAccessor(). template<class T > . WriteAccessor<core::objectmodel::Data<T> > sofa::helper::getWriteAccessor ; (; core::objectmodel::Data< T > & ; data). Returns a write only accessor from the provided Data<> Example of use: auto points = getWriteOnlyAccessor(d_points) . ◆ getWriteOnlyAccessor(). template<class T > . WriteOnlyAccessor<core::objectmodel::Data<T> > sofa::helper::getWriteOnlyAccessor ; (; core::objectmodel::Data< T > & ; data). Returns a write only accessor from the provided Data<> WriteOnly accessors are faster than WriteAccessor because as the data is only read this means there is no need to pull the data from the parents Example of use: auto points = getWriteOnlyAccessor(d_points) . ◆ init(). SOFA_HELPER_API void sofa::helper::init ; (; ). Initialize the SofaHelper library. . ◆ irand(). int sofa::helper::irand ; (; ). inline . ◆ isClamped(). template<class T > . bool sofa::helper::isClamped ; (; const T & ; value, . const T & ; low, . const T & ; high . ). inline . ◆ isCleanedUp(). SOFA_HELPER_API bool sofa::helper::isCleanedUp ; (; ). Return true if and only if the SofaHelper library has been cleaned up. . ◆ isEqual(). template<class T > . bool sofa::helper::isEqual ; (; T ; x, . T ; y, . T ; threshold = (std::numeric_limits<T>::epsilon)() . ). inline . number comparison rough floating point comparison (threshold) exact integer comparison . ◆ isInitialized(). SOFA_HELPER_API bool sofa::helper::isInitialized ; (; ). Return true if and only if the SofaHelper library has been initialized. . ◆ isNull(). template<class T > . bool sofa::he",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:27701,Security,access,accessors,27701,"s) . ◆ getTime(). std::string sofa::helper::getTime ; (; ctime_t ; t, . int ; niter = 1 . ). ◆ gettypename(). SOFA_HELPER_API std::string sofa::helper::gettypename ; (; const std::type_info & ; t). Decode the type's name to a more readable form if possible. . ◆ getVal() [1/2]. std::string sofa::helper::getVal ; (; double ; v). ◆ getVal() [2/2]. std::string sofa::helper::getVal ; (; double ; v, . int ; niter . ). ◆ getWriteAccessor(). template<class T > . WriteAccessor<core::objectmodel::Data<T> > sofa::helper::getWriteAccessor ; (; core::objectmodel::Data< T > & ; data). Returns a write only accessor from the provided Data<> Example of use: auto points = getWriteOnlyAccessor(d_points) . ◆ getWriteOnlyAccessor(). template<class T > . WriteOnlyAccessor<core::objectmodel::Data<T> > sofa::helper::getWriteOnlyAccessor ; (; core::objectmodel::Data< T > & ; data). Returns a write only accessor from the provided Data<> WriteOnly accessors are faster than WriteAccessor because as the data is only read this means there is no need to pull the data from the parents Example of use: auto points = getWriteOnlyAccessor(d_points) . ◆ init(). SOFA_HELPER_API void sofa::helper::init ; (; ). Initialize the SofaHelper library. . ◆ irand(). int sofa::helper::irand ; (; ). inline . ◆ isClamped(). template<class T > . bool sofa::helper::isClamped ; (; const T & ; value, . const T & ; low, . const T & ; high . ). inline . ◆ isCleanedUp(). SOFA_HELPER_API bool sofa::helper::isCleanedUp ; (; ). Return true if and only if the SofaHelper library has been cleaned up. . ◆ isEqual(). template<class T > . bool sofa::helper::isEqual ; (; T ; x, . T ; y, . T ; threshold = (std::numeric_limits<T>::epsilon)() . ). inline . number comparison rough floating point comparison (threshold) exact integer comparison . ◆ isInitialized(). SOFA_HELPER_API bool sofa::helper::isInitialized ; (; ). Return true if and only if the SofaHelper library has been initialized. . ◆ isNull(). template<class T > . bool sofa::he",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:365,Testability,log,logging,365,"﻿. SOFA API: sofa::helper Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::helper Namespace Reference . Namespaces;  advancedtimer;  ;  console;  ;  io;  This allow MeshTrian to interact with the messaging system. ;  ;  lifecycle;  ;  logging;  This allow Base object to interact with the messaging system. ;  ;  messaging;  ;  polygon_cube_intersection;  ;  system;  ;  visual;  . Classes; class  ReadAccessor< core::objectmodel::Data< T > >;  ; class  WriteAccessor< core::objectmodel::Data< T > >;  ; class  WriteOnlyAccessor< core::objectmodel::Data< T > >;  The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. More...;  ; class  ReadAccessor;  ; class  ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  ReadAccessorVector;  ; class  WriteAccessor;  ; class  WriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  WriteAccessorVector;  WriteAccessor implementation class for vector types. More...;  ; class  WriteOnlyAccessor;  ; class  WriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  TimerData;  ; class  Record;  ; class  StepData;  ; class  AdvancedTimer;  ; class  BackTrace;  ; class  ColorMap;  ; class  Decompose;  ; class  NoArgument;  Allow us to use BaseCreator and Factory without using any Arguments. More...;  ; class  BaseCreator;  ; class  Factory;  ; class  Creator;  ; class  CreatorFn;  ; class  BasicDispatcher;  ; class  FnDispatcher;  ; class  SingletonFnDispatcher;  ; struct  GenerateRigidInfo;  storing rigid infos needed for RigidMass More...;  ; struct  IndexOpenMP;  ; struct  CleanupCheck;  ; ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:6571,Testability,log,log,6571,"(const type::Mat< 3, 3, Real > &A, type::Vec< 3, Real > &w);  ; template<class Real > ; void dsytrd3 (const type::Mat< 3, 3, Real > &A, type::Mat< 3, 3, Real > &Q, type::Vec< 3, Real > &d, type::Vec< 3, Real > &e);  ; template<class Real > ; int dsyevq3 (const type::Mat< 3, 3, Real > &A, type::Mat< 3, 3, Real > &Q, type::Vec< 3, Real > &w);  ; template<class Real > ; void dsyev2 (Real A, Real B, Real C, Real &rt1, Real &rt2, Real &cs, Real &sn);  ; std::vector< std::tuple< std::string, SReal > > SOFA_HELPER_API getClosestMatch (const std::string &needle, const std::vector< std::string > &haystack, const Size numEntries=5, const SReal threshold=0.5_sreal);  Search for the the closest match to the string passed in the ""needle"" argument within the vector of ""haystack"" arguments. More...;  ; SOFA_HELPER_API std::string gettypename (const std::type_info &t);  Decode the type's name to a more readable form if possible. More...;  ; SOFA_HELPER_API std::string & getFactoryLog ();  ; SOFA_HELPER_API void printFactoryLog (std::ostream &out);  Print factory log. More...;  ; template SOFA_HELPER_API void logFactoryRegister< std::string > (const std::string &baseclass, const std::string &classname, std::string key, bool multi);  ; template<class TKey > ; void logFactoryRegister (const std::string &baseclass, const std::string &classname, TKey key, bool multi);  Log classes registered in the factory. More...;  ; template SOFA_HELPER_API void logFactoryRegister (const std::string &baseclass, const std::string &classname, std::string key, bool multi);  ; template<typename Rigid3MassType > ; void generateRigid (Rigid3MassType &mass, type::Vec3 &center, const helper::io::Mesh *mesh);  base function to compute center of mass, mass and inertia tensor from a mesh More...;  ; template<typename Rigid3MassType > ; void generateRigid (Rigid3MassType &mass, type::Vec3 &center, io::Mesh *mesh, SReal density, const type::Vec3 &scale=type::Vec3(1, 1, 1), const type::Vec3 &rotation=type::Vec3(0, ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:6618,Testability,log,logFactoryRegister,6618,"int dsyevq3 (const type::Mat< 3, 3, Real > &A, type::Mat< 3, 3, Real > &Q, type::Vec< 3, Real > &w);  ; template<class Real > ; void dsyev2 (Real A, Real B, Real C, Real &rt1, Real &rt2, Real &cs, Real &sn);  ; std::vector< std::tuple< std::string, SReal > > SOFA_HELPER_API getClosestMatch (const std::string &needle, const std::vector< std::string > &haystack, const Size numEntries=5, const SReal threshold=0.5_sreal);  Search for the the closest match to the string passed in the ""needle"" argument within the vector of ""haystack"" arguments. More...;  ; SOFA_HELPER_API std::string gettypename (const std::type_info &t);  Decode the type's name to a more readable form if possible. More...;  ; SOFA_HELPER_API std::string & getFactoryLog ();  ; SOFA_HELPER_API void printFactoryLog (std::ostream &out);  Print factory log. More...;  ; template SOFA_HELPER_API void logFactoryRegister< std::string > (const std::string &baseclass, const std::string &classname, std::string key, bool multi);  ; template<class TKey > ; void logFactoryRegister (const std::string &baseclass, const std::string &classname, TKey key, bool multi);  Log classes registered in the factory. More...;  ; template SOFA_HELPER_API void logFactoryRegister (const std::string &baseclass, const std::string &classname, std::string key, bool multi);  ; template<typename Rigid3MassType > ; void generateRigid (Rigid3MassType &mass, type::Vec3 &center, const helper::io::Mesh *mesh);  base function to compute center of mass, mass and inertia tensor from a mesh More...;  ; template<typename Rigid3MassType > ; void generateRigid (Rigid3MassType &mass, type::Vec3 &center, io::Mesh *mesh, SReal density, const type::Vec3 &scale=type::Vec3(1, 1, 1), const type::Vec3 &rotation=type::Vec3(0, 0, 0));  user friendly function to compute center of mass, mass and inertia tensor from a mesh, a density, a scale and a rotation More...;  ; template<typename Rigid3MassType > ; bool generateRigid (Rigid3MassType &mass, type::Vec3 &center, ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:6775,Testability,log,logFactoryRegister,6775,"int dsyevq3 (const type::Mat< 3, 3, Real > &A, type::Mat< 3, 3, Real > &Q, type::Vec< 3, Real > &w);  ; template<class Real > ; void dsyev2 (Real A, Real B, Real C, Real &rt1, Real &rt2, Real &cs, Real &sn);  ; std::vector< std::tuple< std::string, SReal > > SOFA_HELPER_API getClosestMatch (const std::string &needle, const std::vector< std::string > &haystack, const Size numEntries=5, const SReal threshold=0.5_sreal);  Search for the the closest match to the string passed in the ""needle"" argument within the vector of ""haystack"" arguments. More...;  ; SOFA_HELPER_API std::string gettypename (const std::type_info &t);  Decode the type's name to a more readable form if possible. More...;  ; SOFA_HELPER_API std::string & getFactoryLog ();  ; SOFA_HELPER_API void printFactoryLog (std::ostream &out);  Print factory log. More...;  ; template SOFA_HELPER_API void logFactoryRegister< std::string > (const std::string &baseclass, const std::string &classname, std::string key, bool multi);  ; template<class TKey > ; void logFactoryRegister (const std::string &baseclass, const std::string &classname, TKey key, bool multi);  Log classes registered in the factory. More...;  ; template SOFA_HELPER_API void logFactoryRegister (const std::string &baseclass, const std::string &classname, std::string key, bool multi);  ; template<typename Rigid3MassType > ; void generateRigid (Rigid3MassType &mass, type::Vec3 &center, const helper::io::Mesh *mesh);  base function to compute center of mass, mass and inertia tensor from a mesh More...;  ; template<typename Rigid3MassType > ; void generateRigid (Rigid3MassType &mass, type::Vec3 &center, io::Mesh *mesh, SReal density, const type::Vec3 &scale=type::Vec3(1, 1, 1), const type::Vec3 &rotation=type::Vec3(0, 0, 0));  user friendly function to compute center of mass, mass and inertia tensor from a mesh, a density, a scale and a rotation More...;  ; template<typename Rigid3MassType > ; bool generateRigid (Rigid3MassType &mass, type::Vec3 &center, ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:6879,Testability,Log,Log,6879,"int dsyevq3 (const type::Mat< 3, 3, Real > &A, type::Mat< 3, 3, Real > &Q, type::Vec< 3, Real > &w);  ; template<class Real > ; void dsyev2 (Real A, Real B, Real C, Real &rt1, Real &rt2, Real &cs, Real &sn);  ; std::vector< std::tuple< std::string, SReal > > SOFA_HELPER_API getClosestMatch (const std::string &needle, const std::vector< std::string > &haystack, const Size numEntries=5, const SReal threshold=0.5_sreal);  Search for the the closest match to the string passed in the ""needle"" argument within the vector of ""haystack"" arguments. More...;  ; SOFA_HELPER_API std::string gettypename (const std::type_info &t);  Decode the type's name to a more readable form if possible. More...;  ; SOFA_HELPER_API std::string & getFactoryLog ();  ; SOFA_HELPER_API void printFactoryLog (std::ostream &out);  Print factory log. More...;  ; template SOFA_HELPER_API void logFactoryRegister< std::string > (const std::string &baseclass, const std::string &classname, std::string key, bool multi);  ; template<class TKey > ; void logFactoryRegister (const std::string &baseclass, const std::string &classname, TKey key, bool multi);  Log classes registered in the factory. More...;  ; template SOFA_HELPER_API void logFactoryRegister (const std::string &baseclass, const std::string &classname, std::string key, bool multi);  ; template<typename Rigid3MassType > ; void generateRigid (Rigid3MassType &mass, type::Vec3 &center, const helper::io::Mesh *mesh);  base function to compute center of mass, mass and inertia tensor from a mesh More...;  ; template<typename Rigid3MassType > ; void generateRigid (Rigid3MassType &mass, type::Vec3 &center, io::Mesh *mesh, SReal density, const type::Vec3 &scale=type::Vec3(1, 1, 1), const type::Vec3 &rotation=type::Vec3(0, 0, 0));  user friendly function to compute center of mass, mass and inertia tensor from a mesh, a density, a scale and a rotation More...;  ; template<typename Rigid3MassType > ; bool generateRigid (Rigid3MassType &mass, type::Vec3 &center, ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:6960,Testability,log,logFactoryRegister,6960,"ystack, const Size numEntries=5, const SReal threshold=0.5_sreal);  Search for the the closest match to the string passed in the ""needle"" argument within the vector of ""haystack"" arguments. More...;  ; SOFA_HELPER_API std::string gettypename (const std::type_info &t);  Decode the type's name to a more readable form if possible. More...;  ; SOFA_HELPER_API std::string & getFactoryLog ();  ; SOFA_HELPER_API void printFactoryLog (std::ostream &out);  Print factory log. More...;  ; template SOFA_HELPER_API void logFactoryRegister< std::string > (const std::string &baseclass, const std::string &classname, std::string key, bool multi);  ; template<class TKey > ; void logFactoryRegister (const std::string &baseclass, const std::string &classname, TKey key, bool multi);  Log classes registered in the factory. More...;  ; template SOFA_HELPER_API void logFactoryRegister (const std::string &baseclass, const std::string &classname, std::string key, bool multi);  ; template<typename Rigid3MassType > ; void generateRigid (Rigid3MassType &mass, type::Vec3 &center, const helper::io::Mesh *mesh);  base function to compute center of mass, mass and inertia tensor from a mesh More...;  ; template<typename Rigid3MassType > ; void generateRigid (Rigid3MassType &mass, type::Vec3 &center, io::Mesh *mesh, SReal density, const type::Vec3 &scale=type::Vec3(1, 1, 1), const type::Vec3 &rotation=type::Vec3(0, 0, 0));  user friendly function to compute center of mass, mass and inertia tensor from a mesh, a density, a scale and a rotation More...;  ; template<typename Rigid3MassType > ; bool generateRigid (Rigid3MassType &mass, type::Vec3 &center, const std::string &meshFilename, SReal density, const type::Vec3 &scale=type::Vec3(1, 1, 1), const type::Vec3 &rotation=type::Vec3(0, 0, 0));  user friendly function to compute center of mass, mass and inertia tensor from a mesh file, a density, a scale and a rotation More...;  ; template<typename Rigid3MassType > ; void generateRigid (GenerateRigidInfo ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:28872,Testability,test,test,28872,"◆ init(). SOFA_HELPER_API void sofa::helper::init ; (; ). Initialize the SofaHelper library. . ◆ irand(). int sofa::helper::irand ; (; ). inline . ◆ isClamped(). template<class T > . bool sofa::helper::isClamped ; (; const T & ; value, . const T & ; low, . const T & ; high . ). inline . ◆ isCleanedUp(). SOFA_HELPER_API bool sofa::helper::isCleanedUp ; (; ). Return true if and only if the SofaHelper library has been cleaned up. . ◆ isEqual(). template<class T > . bool sofa::helper::isEqual ; (; T ; x, . T ; y, . T ; threshold = (std::numeric_limits<T>::epsilon)() . ). inline . number comparison rough floating point comparison (threshold) exact integer comparison . ◆ isInitialized(). SOFA_HELPER_API bool sofa::helper::isInitialized ; (; ). Return true if and only if the SofaHelper library has been initialized. . ◆ isNull(). template<class T > . bool sofa::helper::isNull ; (; T ; x, . T ; threshold = (std::numeric_limits<T>::epsilon)() . ). inline . number null test rough floating point test ( <= threshold) exact integer test . ◆ join() [1/3]. template<class S , class Container > . std::string sofa::helper::join ; (; const Container & ; elems, . const S & ; delim . ). Join a container into a single string, separated by the provided delimiter. . ◆ join() [2/3]. template<class InputIt , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . const S & ; delim . ). ◆ join() [3/3]. template<class InputIt , class UnaryFunction , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . UnaryFunction ; f, . const S & ; delim . ). ◆ logFactoryRegister() [1/2]. template SOFA_HELPER_API void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ logFactoryRegister() [2/2]. template<class TKey > . void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . TKey ; key, . bool ; mu",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:28898,Testability,test,test,28898,"◆ init(). SOFA_HELPER_API void sofa::helper::init ; (; ). Initialize the SofaHelper library. . ◆ irand(). int sofa::helper::irand ; (; ). inline . ◆ isClamped(). template<class T > . bool sofa::helper::isClamped ; (; const T & ; value, . const T & ; low, . const T & ; high . ). inline . ◆ isCleanedUp(). SOFA_HELPER_API bool sofa::helper::isCleanedUp ; (; ). Return true if and only if the SofaHelper library has been cleaned up. . ◆ isEqual(). template<class T > . bool sofa::helper::isEqual ; (; T ; x, . T ; y, . T ; threshold = (std::numeric_limits<T>::epsilon)() . ). inline . number comparison rough floating point comparison (threshold) exact integer comparison . ◆ isInitialized(). SOFA_HELPER_API bool sofa::helper::isInitialized ; (; ). Return true if and only if the SofaHelper library has been initialized. . ◆ isNull(). template<class T > . bool sofa::helper::isNull ; (; T ; x, . T ; threshold = (std::numeric_limits<T>::epsilon)() . ). inline . number null test rough floating point test ( <= threshold) exact integer test . ◆ join() [1/3]. template<class S , class Container > . std::string sofa::helper::join ; (; const Container & ; elems, . const S & ; delim . ). Join a container into a single string, separated by the provided delimiter. . ◆ join() [2/3]. template<class InputIt , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . const S & ; delim . ). ◆ join() [3/3]. template<class InputIt , class UnaryFunction , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . UnaryFunction ; f, . const S & ; delim . ). ◆ logFactoryRegister() [1/2]. template SOFA_HELPER_API void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ logFactoryRegister() [2/2]. template<class TKey > . void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . TKey ; key, . bool ; mu",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:28933,Testability,test,test,28933,"◆ init(). SOFA_HELPER_API void sofa::helper::init ; (; ). Initialize the SofaHelper library. . ◆ irand(). int sofa::helper::irand ; (; ). inline . ◆ isClamped(). template<class T > . bool sofa::helper::isClamped ; (; const T & ; value, . const T & ; low, . const T & ; high . ). inline . ◆ isCleanedUp(). SOFA_HELPER_API bool sofa::helper::isCleanedUp ; (; ). Return true if and only if the SofaHelper library has been cleaned up. . ◆ isEqual(). template<class T > . bool sofa::helper::isEqual ; (; T ; x, . T ; y, . T ; threshold = (std::numeric_limits<T>::epsilon)() . ). inline . number comparison rough floating point comparison (threshold) exact integer comparison . ◆ isInitialized(). SOFA_HELPER_API bool sofa::helper::isInitialized ; (; ). Return true if and only if the SofaHelper library has been initialized. . ◆ isNull(). template<class T > . bool sofa::helper::isNull ; (; T ; x, . T ; threshold = (std::numeric_limits<T>::epsilon)() . ). inline . number null test rough floating point test ( <= threshold) exact integer test . ◆ join() [1/3]. template<class S , class Container > . std::string sofa::helper::join ; (; const Container & ; elems, . const S & ; delim . ). Join a container into a single string, separated by the provided delimiter. . ◆ join() [2/3]. template<class InputIt , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . const S & ; delim . ). ◆ join() [3/3]. template<class InputIt , class UnaryFunction , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . UnaryFunction ; f, . const S & ; delim . ). ◆ logFactoryRegister() [1/2]. template SOFA_HELPER_API void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ logFactoryRegister() [2/2]. template<class TKey > . void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . TKey ; key, . bool ; mu",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:29504,Testability,log,logFactoryRegister,29504,"oint comparison (threshold) exact integer comparison . ◆ isInitialized(). SOFA_HELPER_API bool sofa::helper::isInitialized ; (; ). Return true if and only if the SofaHelper library has been initialized. . ◆ isNull(). template<class T > . bool sofa::helper::isNull ; (; T ; x, . T ; threshold = (std::numeric_limits<T>::epsilon)() . ). inline . number null test rough floating point test ( <= threshold) exact integer test . ◆ join() [1/3]. template<class S , class Container > . std::string sofa::helper::join ; (; const Container & ; elems, . const S & ; delim . ). Join a container into a single string, separated by the provided delimiter. . ◆ join() [2/3]. template<class InputIt , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . const S & ; delim . ). ◆ join() [3/3]. template<class InputIt , class UnaryFunction , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . UnaryFunction ; f, . const S & ; delim . ). ◆ logFactoryRegister() [1/2]. template SOFA_HELPER_API void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ logFactoryRegister() [2/2]. template<class TKey > . void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . TKey ; key, . bool ; multi . ). Log classes registered in the factory. . ◆ logFactoryRegister< std::string >(). template SOFA_HELPER_API void sofa::helper::logFactoryRegister< std::string > ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ narrow_cast(). template<class T , class U > . constexpr T sofa::helper::narrow_cast ; (; U && ; u). constexpr . Explicit narrow conversion Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) ; Template Parameters. TTarget type ; USource type . Parameters. uValue to cast . ReturnsThe value converted to the t",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:29576,Testability,log,logFactoryRegister,29576,"ized(). SOFA_HELPER_API bool sofa::helper::isInitialized ; (; ). Return true if and only if the SofaHelper library has been initialized. . ◆ isNull(). template<class T > . bool sofa::helper::isNull ; (; T ; x, . T ; threshold = (std::numeric_limits<T>::epsilon)() . ). inline . number null test rough floating point test ( <= threshold) exact integer test . ◆ join() [1/3]. template<class S , class Container > . std::string sofa::helper::join ; (; const Container & ; elems, . const S & ; delim . ). Join a container into a single string, separated by the provided delimiter. . ◆ join() [2/3]. template<class InputIt , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . const S & ; delim . ). ◆ join() [3/3]. template<class InputIt , class UnaryFunction , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . UnaryFunction ; f, . const S & ; delim . ). ◆ logFactoryRegister() [1/2]. template SOFA_HELPER_API void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ logFactoryRegister() [2/2]. template<class TKey > . void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . TKey ; key, . bool ; multi . ). Log classes registered in the factory. . ◆ logFactoryRegister< std::string >(). template SOFA_HELPER_API void sofa::helper::logFactoryRegister< std::string > ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ narrow_cast(). template<class T , class U > . constexpr T sofa::helper::narrow_cast ; (; U && ; u). constexpr . Explicit narrow conversion Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) ; Template Parameters. TTarget type ; USource type . Parameters. uValue to cast . ReturnsThe value converted to the target type . ◆ narrow_cast_check(). template<class T , class U > . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:29711,Testability,log,logFactoryRegister,29711,"isNull(). template<class T > . bool sofa::helper::isNull ; (; T ; x, . T ; threshold = (std::numeric_limits<T>::epsilon)() . ). inline . number null test rough floating point test ( <= threshold) exact integer test . ◆ join() [1/3]. template<class S , class Container > . std::string sofa::helper::join ; (; const Container & ; elems, . const S & ; delim . ). Join a container into a single string, separated by the provided delimiter. . ◆ join() [2/3]. template<class InputIt , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . const S & ; delim . ). ◆ join() [3/3]. template<class InputIt , class UnaryFunction , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . UnaryFunction ; f, . const S & ; delim . ). ◆ logFactoryRegister() [1/2]. template SOFA_HELPER_API void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ logFactoryRegister() [2/2]. template<class TKey > . void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . TKey ; key, . bool ; multi . ). Log classes registered in the factory. . ◆ logFactoryRegister< std::string >(). template SOFA_HELPER_API void sofa::helper::logFactoryRegister< std::string > ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ narrow_cast(). template<class T , class U > . constexpr T sofa::helper::narrow_cast ; (; U && ; u). constexpr . Explicit narrow conversion Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) ; Template Parameters. TTarget type ; USource type . Parameters. uValue to cast . ReturnsThe value converted to the target type . ◆ narrow_cast_check(). template<class T , class U > . constexpr T sofa::helper::narrow_cast_check ; (; U ; u). constexpr . Explicit narrow conversion checking that the value is unchanged by the ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:29782,Testability,log,logFactoryRegister,29782,"eshold = (std::numeric_limits<T>::epsilon)() . ). inline . number null test rough floating point test ( <= threshold) exact integer test . ◆ join() [1/3]. template<class S , class Container > . std::string sofa::helper::join ; (; const Container & ; elems, . const S & ; delim . ). Join a container into a single string, separated by the provided delimiter. . ◆ join() [2/3]. template<class InputIt , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . const S & ; delim . ). ◆ join() [3/3]. template<class InputIt , class UnaryFunction , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . UnaryFunction ; f, . const S & ; delim . ). ◆ logFactoryRegister() [1/2]. template SOFA_HELPER_API void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ logFactoryRegister() [2/2]. template<class TKey > . void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . TKey ; key, . bool ; multi . ). Log classes registered in the factory. . ◆ logFactoryRegister< std::string >(). template SOFA_HELPER_API void sofa::helper::logFactoryRegister< std::string > ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ narrow_cast(). template<class T , class U > . constexpr T sofa::helper::narrow_cast ; (; U && ; u). constexpr . Explicit narrow conversion Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) ; Template Parameters. TTarget type ; USource type . Parameters. uValue to cast . ReturnsThe value converted to the target type . ◆ narrow_cast_check(). template<class T , class U > . constexpr T sofa::helper::narrow_cast_check ; (; U ; u). constexpr . Explicit narrow conversion checking that the value is unchanged by the cast. If the value changed, an exception is thrown Inspired by the Guidelines ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:29908,Testability,Log,Log,29908,"nteger test . ◆ join() [1/3]. template<class S , class Container > . std::string sofa::helper::join ; (; const Container & ; elems, . const S & ; delim . ). Join a container into a single string, separated by the provided delimiter. . ◆ join() [2/3]. template<class InputIt , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . const S & ; delim . ). ◆ join() [3/3]. template<class InputIt , class UnaryFunction , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . UnaryFunction ; f, . const S & ; delim . ). ◆ logFactoryRegister() [1/2]. template SOFA_HELPER_API void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ logFactoryRegister() [2/2]. template<class TKey > . void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . TKey ; key, . bool ; multi . ). Log classes registered in the factory. . ◆ logFactoryRegister< std::string >(). template SOFA_HELPER_API void sofa::helper::logFactoryRegister< std::string > ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ narrow_cast(). template<class T , class U > . constexpr T sofa::helper::narrow_cast ; (; U && ; u). constexpr . Explicit narrow conversion Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) ; Template Parameters. TTarget type ; USource type . Parameters. uValue to cast . ReturnsThe value converted to the target type . ◆ narrow_cast_check(). template<class T , class U > . constexpr T sofa::helper::narrow_cast_check ; (; U ; u). constexpr . Explicit narrow conversion checking that the value is unchanged by the cast. If the value changed, an exception is thrown Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) . ◆ narrow_cast_nocheck(). template<class T , class U > . constexpr T sofa:",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:29951,Testability,log,logFactoryRegister,29951,"ass S , class Container > . std::string sofa::helper::join ; (; const Container & ; elems, . const S & ; delim . ). Join a container into a single string, separated by the provided delimiter. . ◆ join() [2/3]. template<class InputIt , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . const S & ; delim . ). ◆ join() [3/3]. template<class InputIt , class UnaryFunction , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . UnaryFunction ; f, . const S & ; delim . ). ◆ logFactoryRegister() [1/2]. template SOFA_HELPER_API void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ logFactoryRegister() [2/2]. template<class TKey > . void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . TKey ; key, . bool ; multi . ). Log classes registered in the factory. . ◆ logFactoryRegister< std::string >(). template SOFA_HELPER_API void sofa::helper::logFactoryRegister< std::string > ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ narrow_cast(). template<class T , class U > . constexpr T sofa::helper::narrow_cast ; (; U && ; u). constexpr . Explicit narrow conversion Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) ; Template Parameters. TTarget type ; USource type . Parameters. uValue to cast . ReturnsThe value converted to the target type . ◆ narrow_cast_check(). template<class T , class U > . constexpr T sofa::helper::narrow_cast_check ; (; U ; u). constexpr . Explicit narrow conversion checking that the value is unchanged by the cast. If the value changed, an exception is thrown Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) . ◆ narrow_cast_nocheck(). template<class T , class U > . constexpr T sofa::helper::narrow_cast_nocheck ; (; U && ; ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:30032,Testability,log,logFactoryRegister,30032," & ; elems, . const S & ; delim . ). Join a container into a single string, separated by the provided delimiter. . ◆ join() [2/3]. template<class InputIt , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . const S & ; delim . ). ◆ join() [3/3]. template<class InputIt , class UnaryFunction , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . UnaryFunction ; f, . const S & ; delim . ). ◆ logFactoryRegister() [1/2]. template SOFA_HELPER_API void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ logFactoryRegister() [2/2]. template<class TKey > . void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . TKey ; key, . bool ; multi . ). Log classes registered in the factory. . ◆ logFactoryRegister< std::string >(). template SOFA_HELPER_API void sofa::helper::logFactoryRegister< std::string > ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ narrow_cast(). template<class T , class U > . constexpr T sofa::helper::narrow_cast ; (; U && ; u). constexpr . Explicit narrow conversion Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) ; Template Parameters. TTarget type ; USource type . Parameters. uValue to cast . ReturnsThe value converted to the target type . ◆ narrow_cast_check(). template<class T , class U > . constexpr T sofa::helper::narrow_cast_check ; (; U ; u). constexpr . Explicit narrow conversion checking that the value is unchanged by the cast. If the value changed, an exception is thrown Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) . ◆ narrow_cast_nocheck(). template<class T , class U > . constexpr T sofa::helper::narrow_cast_nocheck ; (; U && ; u). constexprnoexcept . Explicit narrow conversion Inspired by the Guidelines ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:35533,Testability,log,log,35533,"/3]. template<typename FReal , unsigned int FN> . std::ostream& sofa::helper::operator<< ; (; std::ostream & ; out, . const Monomial_LD< FReal, FN > & ; m_monomial . ). inline . ◆ operator<<() [3/3]. template<typename FReal , unsigned int FN> . std::ostream& sofa::helper::operator<< ; (; std::ostream & ; stream, . const Polynomial_LD< FReal, FN > & ; m_polynomial . ). inline . ◆ operator>>() [1/3]. template<typename FReal , unsigned int FN> . std::istream& sofa::helper::operator>> ; (; std::istream & ; in, . Monomial_LD< FReal, FN > & ; m_monomial . ). inline . ◆ operator>>() [2/3]. std::istream& sofa::helper::operator>> ; (; std::istream & ; in, . OptionsGroup & ; m_trick . ). inline . ◆ operator>>() [3/3]. template<typename FReal , unsigned int FN> . std::istream& sofa::helper::operator>> ; (; std::istream & ; stream, . Polynomial_LD< FReal, FN > & ; m_polynomial . ). inline . ◆ printFactoryLog(). SOFA_HELPER_API void sofa::helper::printFactoryLog ; (; std::ostream & ; out). Print factory log. . ◆ printLCP() [1/2]. SOFA_HELPER_API void sofa::helper::printLCP ; (; SReal * ; q, . SReal ** ; M, . int ; dim . ). ◆ printLCP() [2/2]. SOFA_HELPER_API void sofa::helper::printLCP ; (; SReal * ; q, . SReal ** ; M, . SReal * ; f, . int ; dim . ). ◆ printLibraryNotCleanedUpWarning(). SOFA_HELPER_API void sofa::helper::printLibraryNotCleanedUpWarning ; (; const std::string & ; library, . const std::string & ; cleanupFunction . ). Print a warning about a library not being cleaned up (meant for internal use). . ◆ printNoVal(). void sofa::helper::printNoVal ; (; std::ostream & ; out). ◆ printSyst(). SOFA_HELPER_API void sofa::helper::printSyst ; (; SReal * ; q, . SReal ** ; M, . int * ; base, . SReal ** ; mat, . int ; dim . ). ◆ printTime(). void sofa::helper::printTime ; (; std::ostream & ; out, . ctime_t ; t, . int ; niter = 1 . ). ◆ printUninitializedLibraryWarning(). SOFA_HELPER_API void sofa::helper::printUninitializedLibraryWarning ; (; const std::string & ; library, . const",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:43122,Testability,test,tests,43122,"ec(). template<Size NumRows, class Real > . type::Vec<NumRows, Real> sofa::helper::sofaVec ; (; const Eigen::Matrix< Real, NumRows, 1 > & ; evec). ◆ solveLCP(). SOFA_HELPER_API int sofa::helper::solveLCP ; (; int ; dim, . SReal * ; q, . SReal ** ; M, . SReal * ; res . ). ◆ sortedPermutation(). template<class Container > . type::vector<unsigned> sofa::helper::sortedPermutation ; (; const Container & ; values). Return a sorted permutation of the container, i.e. a list of indices corresponding to increasing entries. . ◆ split(). std::vector< std::string > SOFA_HELPER_API sofa::helper::split ; (; const std::string & ; s, . char ; delimiter . ). Taken from https://www.fluentcpp.com/2017/04/21/how-to-split-a-string-in-c/. ; Split one string by a given delimiter and returns that into a std::vector. . ◆ SQR(). template<class T > . const T sofa::helper::SQR ; (; const T & ; a). inline . ◆ srand(). void sofa::helper::srand ; (; unsigned ; seed). inline . Define random methods srand and rand for double and int used only for the tests now. . ◆ starts_with(). SOFA_HELPER_API bool sofa::helper::starts_with ; (; const std::string & ; prefix, . const std::string & ; full . ). returns true if the prefix if located at the beginning of the ""full"" string. . ◆ strToDouble(). double sofa::helper::strToDouble ; (; std::string const & ; stringToConvert, . std::size_t const ; precision . ). ◆ SWAP(). template<class T > . void sofa::helper::SWAP ; (; T & ; a, . T & ; b . ). inline . ◆ upcaseString(). SOFA_HELPER_API std::string sofa::helper::upcaseString ; (; const std::string & ; s). Convert a string to upper case. . ◆ vector_access_failure(). void SOFA_HELPER_API sofa::helper::vector_access_failure ; (; const void * ; vec, . unsigned ; size, . unsigned ; i, . const std::type_info & ; type, . const char * ; tindex . ). ◆ widenString(). SOFA_HELPER_API std::wstring sofa::helper::widenString ; (; const std::string & ; s). Convert a string to a wstring. ; ReturnsThe converted string on success,",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:4230,Usability,Simpl,SimpleTimer,4230,"e selected. More...;  ; class  OwnershipSPtr;  ; class  Monomial_LD;  A generic monomial with N variables of type Real. A monomial is one term of a polynomial. More...;  ; class  Polynomial_LD;  A generic polynomial with N variables of type Real. A polynomial is a list composed of several monomials. More...;  ; class  RandomGenerator;  ; struct  IsEqual;  ; struct  IsEqual< true >;  ; struct  IsNull;  ; struct  IsNull< true >;  ; struct  ScopedAdvancedTimer;  ; class  TSimpleTimer;  ; struct  CompareIndirect;  ; class  TagList;  ; class  TagFactory;  ; class  TriangleOctreeRoot;  ; class  TriangleOctree;  ; class  TypeInfo;  ; class  Utils;  Contains possibly useful functions, that don't fit anywhere else. More...;  ; class  BaseCreator< sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >;  ; class  SofaViewerFactory;  ; class  SofaViewerCreator;  . Typedefs; typedef sofa::helper::system::thread::ctime_t ctime_t;  ; typedef sofa::helper::system::thread::CTime CTime;  ; typedef const char *(* integer_id_name) ();  ; typedef SReal FemClipsReal;  ; typedef TSimpleTimer SimpleTimer;  . Enumerations; enum  { NDefaultColorMapSchemes = 20; };  . Functions; template<class T > ; WriteAccessor< core::objectmodel::Data< T > > getWriteAccessor (core::objectmodel::Data< T > &data);  ; template<class T > ; ReadAccessor< core::objectmodel::Data< T > > getReadAccessor (const core::objectmodel::Data< T > &data);  ; template<class T > ; WriteOnlyAccessor< core::objectmodel::Data< T > > getWriteOnlyAccessor (core::objectmodel::Data< T > &data);  ;  SOFA_THREAD_SPECIFIC_PTR (std::stack< AdvancedTimer::IdTimer >, curTimerThread);  ;  SOFA_THREAD_SPECIFIC_PTR (type::vector< Record >, curRecordsThread);  ; std::stack< AdvancedTimer::IdTimer > & getCurTimer ();  ; type::vector< Record > * getCurRecords ();  ; void setCurRecords (type::vector< Record > *ptr);  ; void printVal (std::ostream &out, double v);  ; void printNoVal (std::ostream &out);  ; void printVal (std::os",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:13514,Usability,Guid,Guidelines,13514,"unsigned int num_group, bool verbose);  ; int nlcp_gaussseidel (int dim, SReal *dfree, SReal **W, SReal *f, SReal mu, SReal tol, int numItMax, bool useInitialF, bool verbose, SReal minW, SReal maxF, std::vector< SReal > *residuals, std::vector< SReal > *violations);  ; int nlcp_gaussseidelTimed (int dim, SReal *dfree, SReal **W, SReal *f, SReal mu, SReal tol, int numItMax, bool useInitialF, SReal timeout, bool verbose);  ; void gaussSeidelLCP1 (int dim, FemClipsReal *q, FemClipsReal **M, FemClipsReal *res, SReal tol, int numItMax, SReal minW, SReal maxF, std::vector< SReal > *residuals);  ; SOFA_HELPER_API void set3Dof (SReal *vector, int index, SReal vx, SReal vy, SReal vz);  ; SOFA_HELPER_API void add3Dof (SReal *vector, int index, SReal vx, SReal vy, SReal vz);  ; SOFA_HELPER_API SReal normError (SReal f1x, SReal f1y, SReal f1z, SReal f2x, SReal f2y, SReal f2z);  ; SOFA_HELPER_API SReal absError (SReal f1x, SReal f1y, SReal f1z, SReal f2x, SReal f2y, SReal f2z);  ;  SOFA_LCPCALC_RESOUDRELCP_DISABLED () int resoudreLCP(int;  ; SReal SReal SReal * SOFA_LCPCALC_AFFICHESYST_DISABLED () void afficheSyst(SReal *q;  ;  SOFA_LCPCALC_AFFICHELCP_DISABLED () void afficheLCP(SReal *q;  ; SOFA_HELPER_API void resultToString (std::ostream &s, SReal *f, int dim);  ; template<Size NumRows, Size NumCols, class Real > ; Eigen::Matrix< Real, NumRows, NumCols > eigenMat (const type::Mat< NumRows, NumCols, Real > &mat);  ; template<Size NumRows, Size NumCols, class Real > ; type::Mat< NumRows, NumCols, Real > sofaMat (const Eigen::Matrix< Real, NumRows, NumCols > &emat);  ; template<Size NumRows, class Real > ; type::Vec< NumRows, Real > sofaVec (const Eigen::Matrix< Real, NumRows, 1 > &evec);  ; template<Size NumRows, class Real > ; Eigen::Matrix< Real, NumRows, 1 > eigenVec (const type::Vec< NumRows, Real > &vec);  ; template<class T , class U > ; constexpr T narrow_cast_nocheck (U &&u) noexcept;  Explicit narrow conversion Inspired by the Guidelines Support Library (https://github.",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:13767,Usability,Guid,Guidelines,13767,"PCALC_AFFICHELCP_DISABLED () void afficheLCP(SReal *q;  ; SOFA_HELPER_API void resultToString (std::ostream &s, SReal *f, int dim);  ; template<Size NumRows, Size NumCols, class Real > ; Eigen::Matrix< Real, NumRows, NumCols > eigenMat (const type::Mat< NumRows, NumCols, Real > &mat);  ; template<Size NumRows, Size NumCols, class Real > ; type::Mat< NumRows, NumCols, Real > sofaMat (const Eigen::Matrix< Real, NumRows, NumCols > &emat);  ; template<Size NumRows, class Real > ; type::Vec< NumRows, Real > sofaVec (const Eigen::Matrix< Real, NumRows, 1 > &evec);  ; template<Size NumRows, class Real > ; Eigen::Matrix< Real, NumRows, 1 > eigenVec (const type::Vec< NumRows, Real > &vec);  ; template<class T , class U > ; constexpr T narrow_cast_nocheck (U &&u) noexcept;  Explicit narrow conversion Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) More...;  ; template<class T , class U > ; constexpr T narrow_cast_check (U u);  ; template<class T , class U > ; constexpr T narrow_cast (U &&u);  Explicit narrow conversion Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) More...;  ; std::ostream & operator<< (std::ostream &on, const OptionsGroup &m_trick);  ; std::istream & operator>> (std::istream &in, OptionsGroup &m_trick);  ; template<typename FReal , unsigned int FN> ; std::ostream & operator<< (std::ostream &out, const Monomial_LD< FReal, FN > &m_monomial);  ; template<typename FReal , unsigned int FN> ; std::istream & operator>> (std::istream &in, Monomial_LD< FReal, FN > &m_monomial);  ; template<typename FReal , unsigned int FN> ; std::ostream & operator<< (std::ostream &stream, const Polynomial_LD< FReal, FN > &m_polynomial);  ; template<typename FReal , unsigned int FN> ; std::istream & operator>> (std::istream &stream, Polynomial_LD< FReal, FN > &m_polynomial);  ; template<typename FReal , unsigned int FN> ; Monomial_LD< FReal, FN > & operator* (const FReal &alpha, Monomial_LD< FReal, FN > &r);  ; template<type",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:20947,Usability,Simpl,SimpleTimer,20947," SOFA_HELPER_API Monomial_LD< double, 4 >;  ; template class SOFA_HELPER_API Monomial_LD< double, 5 >;  ; template class SOFA_HELPER_API Polynomial_LD< double, 1 >;  ; template class SOFA_HELPER_API Polynomial_LD< double, 2 >;  ; template class SOFA_HELPER_API Polynomial_LD< double, 3 >;  ; template class SOFA_HELPER_API Polynomial_LD< double, 4 >;  ; template class SOFA_HELPER_API Polynomial_LD< double, 5 >;  ; std::mutex kMutex;  ; TagList kTagList { {""0"", ""Visual""} };  . Detailed Description; Helpers to apply Eigen matrix methods to the Mat sofa type; Utility to compute the sorted permutation of a container. See example at the end of the file Francois Faure, April 2012 ; Typedef Documentation. ◆ CTime. typedef sofa::helper::system::thread::CTime sofa::helper::CTime. ◆ ctime_t. typedef sofa::helper::system::thread::ctime_t sofa::helper::ctime_t. ◆ FemClipsReal. typedef SReal sofa::helper::FemClipsReal. ◆ integer_id_name. typedef const char*(* sofa::helper::integer_id_name) (). ◆ SimpleTimer. typedef TSimpleTimer sofa::helper::SimpleTimer. Enumeration Type Documentation. ◆ anonymous enum. anonymous enum. EnumeratorNDefaultColorMapSchemes . Function Documentation. ◆ absError(). SOFA_HELPER_API SReal sofa::helper::absError ; (; SReal ; f1x, . SReal ; f1y, . SReal ; f1z, . SReal ; f2x, . SReal ; f2y, . SReal ; f2z . ). inline . ◆ add3Dof(). SOFA_HELPER_API void sofa::helper::add3Dof ; (; SReal * ; vector, . int ; index, . SReal ; vx, . SReal ; vy, . SReal ; vz . ). inline . ◆ choose_next(). unsigned int sofa::helper::choose_next ; (; SReal ; x, . SReal ; y, . SReal ; z, . unsigned int ; a, . unsigned int ; b, . unsigned int ; c . ). inline . ◆ cleanup(). SOFA_HELPER_API void sofa::helper::cleanup ; (; ). Clean up the resources used by the SofaHelper library. . ◆ downcaseString(). SOFA_HELPER_API std::string sofa::helper::downcaseString ; (; const std::string & ; s). Convert a string to lower case. . ◆ drand() [1/3]. double sofa::helper::drand ; (; ). inline . ◆ drand()",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:20995,Usability,Simpl,SimpleTimer,20995,"uble, 4 >;  ; template class SOFA_HELPER_API Monomial_LD< double, 5 >;  ; template class SOFA_HELPER_API Polynomial_LD< double, 1 >;  ; template class SOFA_HELPER_API Polynomial_LD< double, 2 >;  ; template class SOFA_HELPER_API Polynomial_LD< double, 3 >;  ; template class SOFA_HELPER_API Polynomial_LD< double, 4 >;  ; template class SOFA_HELPER_API Polynomial_LD< double, 5 >;  ; std::mutex kMutex;  ; TagList kTagList { {""0"", ""Visual""} };  . Detailed Description; Helpers to apply Eigen matrix methods to the Mat sofa type; Utility to compute the sorted permutation of a container. See example at the end of the file Francois Faure, April 2012 ; Typedef Documentation. ◆ CTime. typedef sofa::helper::system::thread::CTime sofa::helper::CTime. ◆ ctime_t. typedef sofa::helper::system::thread::ctime_t sofa::helper::ctime_t. ◆ FemClipsReal. typedef SReal sofa::helper::FemClipsReal. ◆ integer_id_name. typedef const char*(* sofa::helper::integer_id_name) (). ◆ SimpleTimer. typedef TSimpleTimer sofa::helper::SimpleTimer. Enumeration Type Documentation. ◆ anonymous enum. anonymous enum. EnumeratorNDefaultColorMapSchemes . Function Documentation. ◆ absError(). SOFA_HELPER_API SReal sofa::helper::absError ; (; SReal ; f1x, . SReal ; f1y, . SReal ; f1z, . SReal ; f2x, . SReal ; f2y, . SReal ; f2z . ). inline . ◆ add3Dof(). SOFA_HELPER_API void sofa::helper::add3Dof ; (; SReal * ; vector, . int ; index, . SReal ; vx, . SReal ; vy, . SReal ; vz . ). inline . ◆ choose_next(). unsigned int sofa::helper::choose_next ; (; SReal ; x, . SReal ; y, . SReal ; z, . unsigned int ; a, . unsigned int ; b, . unsigned int ; c . ). inline . ◆ cleanup(). SOFA_HELPER_API void sofa::helper::cleanup ; (; ). Clean up the resources used by the SofaHelper library. . ◆ downcaseString(). SOFA_HELPER_API std::string sofa::helper::downcaseString ; (; const std::string & ; s). Convert a string to lower case. . ◆ drand() [1/3]. double sofa::helper::drand ; (; ). inline . ◆ drand() [2/3]. double sofa::helper::dr",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:30337,Usability,Guid,Guidelines,30337,"lass InputIt , class UnaryFunction , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . UnaryFunction ; f, . const S & ; delim . ). ◆ logFactoryRegister() [1/2]. template SOFA_HELPER_API void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ logFactoryRegister() [2/2]. template<class TKey > . void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . TKey ; key, . bool ; multi . ). Log classes registered in the factory. . ◆ logFactoryRegister< std::string >(). template SOFA_HELPER_API void sofa::helper::logFactoryRegister< std::string > ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ narrow_cast(). template<class T , class U > . constexpr T sofa::helper::narrow_cast ; (; U && ; u). constexpr . Explicit narrow conversion Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) ; Template Parameters. TTarget type ; USource type . Parameters. uValue to cast . ReturnsThe value converted to the target type . ◆ narrow_cast_check(). template<class T , class U > . constexpr T sofa::helper::narrow_cast_check ; (; U ; u). constexpr . Explicit narrow conversion checking that the value is unchanged by the cast. If the value changed, an exception is thrown Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) . ◆ narrow_cast_nocheck(). template<class T , class U > . constexpr T sofa::helper::narrow_cast_nocheck ; (; U && ; u). constexprnoexcept . Explicit narrow conversion Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) ; Template Parameters. TTarget type ; USource type . Parameters. uValue to cast . ReturnsThe value converted to the target type . ◆ narrowString(). SOFA_HELPER_API std::string sofa::helper::narrowString ; (; const std::wstring & ; ws). Conv",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:30790,Usability,Guid,Guidelines,30790,"::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . TKey ; key, . bool ; multi . ). Log classes registered in the factory. . ◆ logFactoryRegister< std::string >(). template SOFA_HELPER_API void sofa::helper::logFactoryRegister< std::string > ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ narrow_cast(). template<class T , class U > . constexpr T sofa::helper::narrow_cast ; (; U && ; u). constexpr . Explicit narrow conversion Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) ; Template Parameters. TTarget type ; USource type . Parameters. uValue to cast . ReturnsThe value converted to the target type . ◆ narrow_cast_check(). template<class T , class U > . constexpr T sofa::helper::narrow_cast_check ; (; U ; u). constexpr . Explicit narrow conversion checking that the value is unchanged by the cast. If the value changed, an exception is thrown Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) . ◆ narrow_cast_nocheck(). template<class T , class U > . constexpr T sofa::helper::narrow_cast_nocheck ; (; U && ; u). constexprnoexcept . Explicit narrow conversion Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) ; Template Parameters. TTarget type ; USource type . Parameters. uValue to cast . ReturnsThe value converted to the target type . ◆ narrowString(). SOFA_HELPER_API std::string sofa::helper::narrowString ; (; const std::wstring & ; ws). Convert a wstring to a string. ; ReturnsThe converted string on success, or an empty string on failure. . ◆ nlcp_gaussseidel(). SOFA_HELPER_API int sofa::helper::nlcp_gaussseidel ; (; int ; dim, . SReal * ; dfree, . SReal ** ; W, . SReal * ; f, . SReal ; mu, . SReal ; tol, . int ; numItMax, . bool ; useInitialF, . bool ; verbose, . SReal ; minW, . SReal ; maxF, . std::vector< SReal > * ; residuals, . std::vector< SReal > * ; violations . ). ◆ n",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:31035,Usability,Guid,Guidelines,31035,"gFactoryRegister< std::string > ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ narrow_cast(). template<class T , class U > . constexpr T sofa::helper::narrow_cast ; (; U && ; u). constexpr . Explicit narrow conversion Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) ; Template Parameters. TTarget type ; USource type . Parameters. uValue to cast . ReturnsThe value converted to the target type . ◆ narrow_cast_check(). template<class T , class U > . constexpr T sofa::helper::narrow_cast_check ; (; U ; u). constexpr . Explicit narrow conversion checking that the value is unchanged by the cast. If the value changed, an exception is thrown Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) . ◆ narrow_cast_nocheck(). template<class T , class U > . constexpr T sofa::helper::narrow_cast_nocheck ; (; U && ; u). constexprnoexcept . Explicit narrow conversion Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) ; Template Parameters. TTarget type ; USource type . Parameters. uValue to cast . ReturnsThe value converted to the target type . ◆ narrowString(). SOFA_HELPER_API std::string sofa::helper::narrowString ; (; const std::wstring & ; ws). Convert a wstring to a string. ; ReturnsThe converted string on success, or an empty string on failure. . ◆ nlcp_gaussseidel(). SOFA_HELPER_API int sofa::helper::nlcp_gaussseidel ; (; int ; dim, . SReal * ; dfree, . SReal ** ; W, . SReal * ; f, . SReal ; mu, . SReal ; tol, . int ; numItMax, . bool ; useInitialF, . bool ; verbose, . SReal ; minW, . SReal ; maxF, . std::vector< SReal > * ; residuals, . std::vector< SReal > * ; violations . ). ◆ nlcp_gaussseidelTimed(). SOFA_HELPER_API int sofa::helper::nlcp_gaussseidelTimed ; (; int ; dim, . SReal * ; dfree, . SReal ** ; W, . SReal * ; f, . SReal ; mu, . SReal ; tol, . int ; numItMax, . bool ; useInitialF, . SReal ; timeout, . bool ; verbose . )",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1io.html:136,Modifiability,Variab,Variables,136,"﻿. SOFA API: sofa::helper::io Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Variables . sofa::helper::io Namespace Reference . This allow MeshTrian to interact with the messaging system. ; More... Classes; class  BaseFileAccessCreator;  ; class  FileAccessCreator;  ; class  BaseFileAccess;  ; class  File;  ; class  FileAccess;  ; class  Image;  ; struct  DDSHeader;  ; class  ImageDDS;  ; class  ImageRAW;  ; class  Mesh;  ; class  MeshGmsh;  ; class  MeshOBJ;  ; class  MeshTopologyLoader;  ; class  SphereLoaderDataHook;  Inherit this class to load data from sphere description. More...;  ; class  SphereLoader;  ; class  STBImageCreators;  ; class  STBImage;  ; class  TriangleLoader;  ; class  XspLoaderDataHook;  Inherit this class to load data from a Xsp file. More...;  ; class  XspLoader;  . Variables; Creator< Image::FactoryImage, ImageDDS > ImageDDSClass (""dds"");  ; Creator< Mesh::FactoryMesh, MeshGmsh > MeshGmshClass (""gmsh"");  ; Creator< Mesh::FactoryMesh, MeshOBJ > MeshOBJClass (""obj"");  ; Creator< Mesh::FactoryMesh, MeshOBJ > MeshOBJClass2 (""OBJ"");  ; const auto stbImageCreation = STBImageCreators();  . Detailed Description; This allow MeshTrian to interact with the messaging system. ; For SOFA_HELPER_API.; This register the TriangleLoader object to the logging system so that we can use msg_*(this); For size_t For std::string ; Variable Documentation. ◆ ImageDDSClass. Creator<Image::FactoryImage,ImageDDS> sofa::helper::io::ImageDDSClass(""dds"") ; (; ""dds"" ; ). ◆ MeshGmshClass. Creator<Mesh::FactoryMesh, MeshGmsh> sofa::helper::io::MeshGmshClass(""gmsh"") ; (; ""gmsh"" ; ). ◆ MeshOBJClass. Creator<Mesh::FactoryMesh,MeshOBJ> sofa::helper::io::MeshOBJClass(""obj"") ; (; ""obj"" ; ). ◆ MeshOBJClass2. Creator<Mesh::FactoryMesh, MeshOBJ> sofa::helper::io::MeshOBJClass2(""OBJ"") ; (; ""OBJ"" ; ). ◆ stbImageCreation. const auto sofa::helper::io::stbImageCreation = STBImageCreators(). sofahelperio; Generated on Mon Nov 11 20",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1io.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1io.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1io.html:586,Modifiability,Inherit,Inherit,586,"﻿. SOFA API: sofa::helper::io Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Variables . sofa::helper::io Namespace Reference . This allow MeshTrian to interact with the messaging system. ; More... Classes; class  BaseFileAccessCreator;  ; class  FileAccessCreator;  ; class  BaseFileAccess;  ; class  File;  ; class  FileAccess;  ; class  Image;  ; struct  DDSHeader;  ; class  ImageDDS;  ; class  ImageRAW;  ; class  Mesh;  ; class  MeshGmsh;  ; class  MeshOBJ;  ; class  MeshTopologyLoader;  ; class  SphereLoaderDataHook;  Inherit this class to load data from sphere description. More...;  ; class  SphereLoader;  ; class  STBImageCreators;  ; class  STBImage;  ; class  TriangleLoader;  ; class  XspLoaderDataHook;  Inherit this class to load data from a Xsp file. More...;  ; class  XspLoader;  . Variables; Creator< Image::FactoryImage, ImageDDS > ImageDDSClass (""dds"");  ; Creator< Mesh::FactoryMesh, MeshGmsh > MeshGmshClass (""gmsh"");  ; Creator< Mesh::FactoryMesh, MeshOBJ > MeshOBJClass (""obj"");  ; Creator< Mesh::FactoryMesh, MeshOBJ > MeshOBJClass2 (""OBJ"");  ; const auto stbImageCreation = STBImageCreators();  . Detailed Description; This allow MeshTrian to interact with the messaging system. ; For SOFA_HELPER_API.; This register the TriangleLoader object to the logging system so that we can use msg_*(this); For size_t For std::string ; Variable Documentation. ◆ ImageDDSClass. Creator<Image::FactoryImage,ImageDDS> sofa::helper::io::ImageDDSClass(""dds"") ; (; ""dds"" ; ). ◆ MeshGmshClass. Creator<Mesh::FactoryMesh, MeshGmsh> sofa::helper::io::MeshGmshClass(""gmsh"") ; (; ""gmsh"" ; ). ◆ MeshOBJClass. Creator<Mesh::FactoryMesh,MeshOBJ> sofa::helper::io::MeshOBJClass(""obj"") ; (; ""obj"" ; ). ◆ MeshOBJClass2. Creator<Mesh::FactoryMesh, MeshOBJ> sofa::helper::io::MeshOBJClass2(""OBJ"") ; (; ""OBJ"" ; ). ◆ stbImageCreation. const auto sofa::helper::io::stbImageCreation = STBImageCreators(). sofahelperio; Generated on Mon Nov 11 20",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1io.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1io.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1io.html:780,Modifiability,Inherit,Inherit,780,"﻿. SOFA API: sofa::helper::io Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Variables . sofa::helper::io Namespace Reference . This allow MeshTrian to interact with the messaging system. ; More... Classes; class  BaseFileAccessCreator;  ; class  FileAccessCreator;  ; class  BaseFileAccess;  ; class  File;  ; class  FileAccess;  ; class  Image;  ; struct  DDSHeader;  ; class  ImageDDS;  ; class  ImageRAW;  ; class  Mesh;  ; class  MeshGmsh;  ; class  MeshOBJ;  ; class  MeshTopologyLoader;  ; class  SphereLoaderDataHook;  Inherit this class to load data from sphere description. More...;  ; class  SphereLoader;  ; class  STBImageCreators;  ; class  STBImage;  ; class  TriangleLoader;  ; class  XspLoaderDataHook;  Inherit this class to load data from a Xsp file. More...;  ; class  XspLoader;  . Variables; Creator< Image::FactoryImage, ImageDDS > ImageDDSClass (""dds"");  ; Creator< Mesh::FactoryMesh, MeshGmsh > MeshGmshClass (""gmsh"");  ; Creator< Mesh::FactoryMesh, MeshOBJ > MeshOBJClass (""obj"");  ; Creator< Mesh::FactoryMesh, MeshOBJ > MeshOBJClass2 (""OBJ"");  ; const auto stbImageCreation = STBImageCreators();  . Detailed Description; This allow MeshTrian to interact with the messaging system. ; For SOFA_HELPER_API.; This register the TriangleLoader object to the logging system so that we can use msg_*(this); For size_t For std::string ; Variable Documentation. ◆ ImageDDSClass. Creator<Image::FactoryImage,ImageDDS> sofa::helper::io::ImageDDSClass(""dds"") ; (; ""dds"" ; ). ◆ MeshGmshClass. Creator<Mesh::FactoryMesh, MeshGmsh> sofa::helper::io::MeshGmshClass(""gmsh"") ; (; ""gmsh"" ; ). ◆ MeshOBJClass. Creator<Mesh::FactoryMesh,MeshOBJ> sofa::helper::io::MeshOBJClass(""obj"") ; (; ""obj"" ; ). ◆ MeshOBJClass2. Creator<Mesh::FactoryMesh, MeshOBJ> sofa::helper::io::MeshOBJClass2(""OBJ"") ; (; ""OBJ"" ; ). ◆ stbImageCreation. const auto sofa::helper::io::stbImageCreation = STBImageCreators(). sofahelperio; Generated on Mon Nov 11 20",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1io.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1io.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1io.html:862,Modifiability,Variab,Variables,862,"er::io Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Variables . sofa::helper::io Namespace Reference . This allow MeshTrian to interact with the messaging system. ; More... Classes; class  BaseFileAccessCreator;  ; class  FileAccessCreator;  ; class  BaseFileAccess;  ; class  File;  ; class  FileAccess;  ; class  Image;  ; struct  DDSHeader;  ; class  ImageDDS;  ; class  ImageRAW;  ; class  Mesh;  ; class  MeshGmsh;  ; class  MeshOBJ;  ; class  MeshTopologyLoader;  ; class  SphereLoaderDataHook;  Inherit this class to load data from sphere description. More...;  ; class  SphereLoader;  ; class  STBImageCreators;  ; class  STBImage;  ; class  TriangleLoader;  ; class  XspLoaderDataHook;  Inherit this class to load data from a Xsp file. More...;  ; class  XspLoader;  . Variables; Creator< Image::FactoryImage, ImageDDS > ImageDDSClass (""dds"");  ; Creator< Mesh::FactoryMesh, MeshGmsh > MeshGmshClass (""gmsh"");  ; Creator< Mesh::FactoryMesh, MeshOBJ > MeshOBJClass (""obj"");  ; Creator< Mesh::FactoryMesh, MeshOBJ > MeshOBJClass2 (""OBJ"");  ; const auto stbImageCreation = STBImageCreators();  . Detailed Description; This allow MeshTrian to interact with the messaging system. ; For SOFA_HELPER_API.; This register the TriangleLoader object to the logging system so that we can use msg_*(this); For size_t For std::string ; Variable Documentation. ◆ ImageDDSClass. Creator<Image::FactoryImage,ImageDDS> sofa::helper::io::ImageDDSClass(""dds"") ; (; ""dds"" ; ). ◆ MeshGmshClass. Creator<Mesh::FactoryMesh, MeshGmsh> sofa::helper::io::MeshGmshClass(""gmsh"") ; (; ""gmsh"" ; ). ◆ MeshOBJClass. Creator<Mesh::FactoryMesh,MeshOBJ> sofa::helper::io::MeshOBJClass(""obj"") ; (; ""obj"" ; ). ◆ MeshOBJClass2. Creator<Mesh::FactoryMesh, MeshOBJ> sofa::helper::io::MeshOBJClass2(""OBJ"") ; (; ""OBJ"" ; ). ◆ stbImageCreation. const auto sofa::helper::io::stbImageCreation = STBImageCreators(). sofahelperio; Generated on Mon Nov 11 2024 03:31:03 for SOFA A",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1io.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1io.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1io.html:1415,Modifiability,Variab,Variable,1415,"ce Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Variables . sofa::helper::io Namespace Reference . This allow MeshTrian to interact with the messaging system. ; More... Classes; class  BaseFileAccessCreator;  ; class  FileAccessCreator;  ; class  BaseFileAccess;  ; class  File;  ; class  FileAccess;  ; class  Image;  ; struct  DDSHeader;  ; class  ImageDDS;  ; class  ImageRAW;  ; class  Mesh;  ; class  MeshGmsh;  ; class  MeshOBJ;  ; class  MeshTopologyLoader;  ; class  SphereLoaderDataHook;  Inherit this class to load data from sphere description. More...;  ; class  SphereLoader;  ; class  STBImageCreators;  ; class  STBImage;  ; class  TriangleLoader;  ; class  XspLoaderDataHook;  Inherit this class to load data from a Xsp file. More...;  ; class  XspLoader;  . Variables; Creator< Image::FactoryImage, ImageDDS > ImageDDSClass (""dds"");  ; Creator< Mesh::FactoryMesh, MeshGmsh > MeshGmshClass (""gmsh"");  ; Creator< Mesh::FactoryMesh, MeshOBJ > MeshOBJClass (""obj"");  ; Creator< Mesh::FactoryMesh, MeshOBJ > MeshOBJClass2 (""OBJ"");  ; const auto stbImageCreation = STBImageCreators();  . Detailed Description; This allow MeshTrian to interact with the messaging system. ; For SOFA_HELPER_API.; This register the TriangleLoader object to the logging system so that we can use msg_*(this); For size_t For std::string ; Variable Documentation. ◆ ImageDDSClass. Creator<Image::FactoryImage,ImageDDS> sofa::helper::io::ImageDDSClass(""dds"") ; (; ""dds"" ; ). ◆ MeshGmshClass. Creator<Mesh::FactoryMesh, MeshGmsh> sofa::helper::io::MeshGmshClass(""gmsh"") ; (; ""gmsh"" ; ). ◆ MeshOBJClass. Creator<Mesh::FactoryMesh,MeshOBJ> sofa::helper::io::MeshOBJClass(""obj"") ; (; ""obj"" ; ). ◆ MeshOBJClass2. Creator<Mesh::FactoryMesh, MeshOBJ> sofa::helper::io::MeshOBJClass2(""OBJ"") ; (; ""OBJ"" ; ). ◆ stbImageCreation. const auto sofa::helper::io::stbImageCreation = STBImageCreators(). sofahelperio; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1io.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1io.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1io.html:608,Performance,load,load,608,"﻿. SOFA API: sofa::helper::io Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Variables . sofa::helper::io Namespace Reference . This allow MeshTrian to interact with the messaging system. ; More... Classes; class  BaseFileAccessCreator;  ; class  FileAccessCreator;  ; class  BaseFileAccess;  ; class  File;  ; class  FileAccess;  ; class  Image;  ; struct  DDSHeader;  ; class  ImageDDS;  ; class  ImageRAW;  ; class  Mesh;  ; class  MeshGmsh;  ; class  MeshOBJ;  ; class  MeshTopologyLoader;  ; class  SphereLoaderDataHook;  Inherit this class to load data from sphere description. More...;  ; class  SphereLoader;  ; class  STBImageCreators;  ; class  STBImage;  ; class  TriangleLoader;  ; class  XspLoaderDataHook;  Inherit this class to load data from a Xsp file. More...;  ; class  XspLoader;  . Variables; Creator< Image::FactoryImage, ImageDDS > ImageDDSClass (""dds"");  ; Creator< Mesh::FactoryMesh, MeshGmsh > MeshGmshClass (""gmsh"");  ; Creator< Mesh::FactoryMesh, MeshOBJ > MeshOBJClass (""obj"");  ; Creator< Mesh::FactoryMesh, MeshOBJ > MeshOBJClass2 (""OBJ"");  ; const auto stbImageCreation = STBImageCreators();  . Detailed Description; This allow MeshTrian to interact with the messaging system. ; For SOFA_HELPER_API.; This register the TriangleLoader object to the logging system so that we can use msg_*(this); For size_t For std::string ; Variable Documentation. ◆ ImageDDSClass. Creator<Image::FactoryImage,ImageDDS> sofa::helper::io::ImageDDSClass(""dds"") ; (; ""dds"" ; ). ◆ MeshGmshClass. Creator<Mesh::FactoryMesh, MeshGmsh> sofa::helper::io::MeshGmshClass(""gmsh"") ; (; ""gmsh"" ; ). ◆ MeshOBJClass. Creator<Mesh::FactoryMesh,MeshOBJ> sofa::helper::io::MeshOBJClass(""obj"") ; (; ""obj"" ; ). ◆ MeshOBJClass2. Creator<Mesh::FactoryMesh, MeshOBJ> sofa::helper::io::MeshOBJClass2(""OBJ"") ; (; ""OBJ"" ; ). ◆ stbImageCreation. const auto sofa::helper::io::stbImageCreation = STBImageCreators(). sofahelperio; Generated on Mon Nov 11 20",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1io.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1io.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1io.html:802,Performance,load,load,802,"﻿. SOFA API: sofa::helper::io Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Variables . sofa::helper::io Namespace Reference . This allow MeshTrian to interact with the messaging system. ; More... Classes; class  BaseFileAccessCreator;  ; class  FileAccessCreator;  ; class  BaseFileAccess;  ; class  File;  ; class  FileAccess;  ; class  Image;  ; struct  DDSHeader;  ; class  ImageDDS;  ; class  ImageRAW;  ; class  Mesh;  ; class  MeshGmsh;  ; class  MeshOBJ;  ; class  MeshTopologyLoader;  ; class  SphereLoaderDataHook;  Inherit this class to load data from sphere description. More...;  ; class  SphereLoader;  ; class  STBImageCreators;  ; class  STBImage;  ; class  TriangleLoader;  ; class  XspLoaderDataHook;  Inherit this class to load data from a Xsp file. More...;  ; class  XspLoader;  . Variables; Creator< Image::FactoryImage, ImageDDS > ImageDDSClass (""dds"");  ; Creator< Mesh::FactoryMesh, MeshGmsh > MeshGmshClass (""gmsh"");  ; Creator< Mesh::FactoryMesh, MeshOBJ > MeshOBJClass (""obj"");  ; Creator< Mesh::FactoryMesh, MeshOBJ > MeshOBJClass2 (""OBJ"");  ; const auto stbImageCreation = STBImageCreators();  . Detailed Description; This allow MeshTrian to interact with the messaging system. ; For SOFA_HELPER_API.; This register the TriangleLoader object to the logging system so that we can use msg_*(this); For size_t For std::string ; Variable Documentation. ◆ ImageDDSClass. Creator<Image::FactoryImage,ImageDDS> sofa::helper::io::ImageDDSClass(""dds"") ; (; ""dds"" ; ). ◆ MeshGmshClass. Creator<Mesh::FactoryMesh, MeshGmsh> sofa::helper::io::MeshGmshClass(""gmsh"") ; (; ""gmsh"" ; ). ◆ MeshOBJClass. Creator<Mesh::FactoryMesh,MeshOBJ> sofa::helper::io::MeshOBJClass(""obj"") ; (; ""obj"" ; ). ◆ MeshOBJClass2. Creator<Mesh::FactoryMesh, MeshOBJ> sofa::helper::io::MeshOBJClass2(""OBJ"") ; (; ""OBJ"" ; ). ◆ stbImageCreation. const auto sofa::helper::io::stbImageCreation = STBImageCreators(). sofahelperio; Generated on Mon Nov 11 20",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1io.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1io.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1io.html:1339,Testability,log,logging,1339,"ce Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Variables . sofa::helper::io Namespace Reference . This allow MeshTrian to interact with the messaging system. ; More... Classes; class  BaseFileAccessCreator;  ; class  FileAccessCreator;  ; class  BaseFileAccess;  ; class  File;  ; class  FileAccess;  ; class  Image;  ; struct  DDSHeader;  ; class  ImageDDS;  ; class  ImageRAW;  ; class  Mesh;  ; class  MeshGmsh;  ; class  MeshOBJ;  ; class  MeshTopologyLoader;  ; class  SphereLoaderDataHook;  Inherit this class to load data from sphere description. More...;  ; class  SphereLoader;  ; class  STBImageCreators;  ; class  STBImage;  ; class  TriangleLoader;  ; class  XspLoaderDataHook;  Inherit this class to load data from a Xsp file. More...;  ; class  XspLoader;  . Variables; Creator< Image::FactoryImage, ImageDDS > ImageDDSClass (""dds"");  ; Creator< Mesh::FactoryMesh, MeshGmsh > MeshGmshClass (""gmsh"");  ; Creator< Mesh::FactoryMesh, MeshOBJ > MeshOBJClass (""obj"");  ; Creator< Mesh::FactoryMesh, MeshOBJ > MeshOBJClass2 (""OBJ"");  ; const auto stbImageCreation = STBImageCreators();  . Detailed Description; This allow MeshTrian to interact with the messaging system. ; For SOFA_HELPER_API.; This register the TriangleLoader object to the logging system so that we can use msg_*(this); For size_t For std::string ; Variable Documentation. ◆ ImageDDSClass. Creator<Image::FactoryImage,ImageDDS> sofa::helper::io::ImageDDSClass(""dds"") ; (; ""dds"" ; ). ◆ MeshGmshClass. Creator<Mesh::FactoryMesh, MeshGmsh> sofa::helper::io::MeshGmshClass(""gmsh"") ; (; ""gmsh"" ; ). ◆ MeshOBJClass. Creator<Mesh::FactoryMesh,MeshOBJ> sofa::helper::io::MeshOBJClass(""obj"") ; (; ""obj"" ; ). ◆ MeshOBJClass2. Creator<Mesh::FactoryMesh, MeshOBJ> sofa::helper::io::MeshOBJClass2(""OBJ"") ; (; ""OBJ"" ; ). ◆ stbImageCreation. const auto sofa::helper::io::stbImageCreation = STBImageCreators(). sofahelperio; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1io.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1io.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1lifecycle.html:143,Modifiability,Variab,Variables,143,"﻿. SOFA API: sofa::helper::lifecycle Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Variables . sofa::helper::lifecycle Namespace Reference . Classes; class  ComponentChange;  ; class  Deprecated;  ; class  Pluginized;  ; class  Removed;  ; class  Moved;  ; class  Renamed;  ; class  Dealiased;  . Variables; const std::map< std::string, Deprecated, std::less<> > deprecatedComponents;  ; const std::map< std::string, ComponentChange, std::less<> > movedComponents;  ; const std::map< std::string, ComponentChange, std::less<> > uncreatableComponents;  ; const std::map< std::string, Renamed, std::less<> > renamedComponents;  ; const std::map< std::string, Dealiased, std::less<> > dealiasedComponents;  . Variable Documentation. ◆ dealiasedComponents. SOFA_HELPER_API const std::map< std::string, Dealiased, std::less<> > sofa::helper::lifecycle::dealiasedComponents. ◆ deprecatedComponents. SOFA_HELPER_API const std::map< std::string, Deprecated, std::less<> > sofa::helper::lifecycle::deprecatedComponents. Initial value:= {; {""RayTraceDetection"", Deprecated(""v21.06"", ""v21.12"")},; {""BruteForceDetection"", Deprecated(""v21.06"", ""v21.12"")},; {""DirectSAP"", Deprecated(""v21.06"", ""v21.12"")},; {""RigidRigidMapping"", Deprecated(""v23.06"", ""v23.12"", ""You can use the component RigidMapping with template='Rigid3,Rigid3' instead."")},; }. ◆ movedComponents. SOFA_HELPER_API const std::map< std::string, ComponentChange, std::less<> > sofa::helper::lifecycle::movedComponents. ◆ renamedComponents. SOFA_HELPER_API const std::map< std::string, Renamed, std::less<> > sofa::helper::lifecycle::renamedComponents. ◆ uncreatableComponents. SOFA_HELPER_API const std::map< std::string, ComponentChange, std::less<> > sofa::helper::lifecycle::uncreatableComponents. sofahelperlifecycle; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1lifecycle.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1lifecycle.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1lifecycle.html:266,Modifiability,Plugin,Pluginized,266,"﻿. SOFA API: sofa::helper::lifecycle Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Variables . sofa::helper::lifecycle Namespace Reference . Classes; class  ComponentChange;  ; class  Deprecated;  ; class  Pluginized;  ; class  Removed;  ; class  Moved;  ; class  Renamed;  ; class  Dealiased;  . Variables; const std::map< std::string, Deprecated, std::less<> > deprecatedComponents;  ; const std::map< std::string, ComponentChange, std::less<> > movedComponents;  ; const std::map< std::string, ComponentChange, std::less<> > uncreatableComponents;  ; const std::map< std::string, Renamed, std::less<> > renamedComponents;  ; const std::map< std::string, Dealiased, std::less<> > dealiasedComponents;  . Variable Documentation. ◆ dealiasedComponents. SOFA_HELPER_API const std::map< std::string, Dealiased, std::less<> > sofa::helper::lifecycle::dealiasedComponents. ◆ deprecatedComponents. SOFA_HELPER_API const std::map< std::string, Deprecated, std::less<> > sofa::helper::lifecycle::deprecatedComponents. Initial value:= {; {""RayTraceDetection"", Deprecated(""v21.06"", ""v21.12"")},; {""BruteForceDetection"", Deprecated(""v21.06"", ""v21.12"")},; {""DirectSAP"", Deprecated(""v21.06"", ""v21.12"")},; {""RigidRigidMapping"", Deprecated(""v23.06"", ""v23.12"", ""You can use the component RigidMapping with template='Rigid3,Rigid3' instead."")},; }. ◆ movedComponents. SOFA_HELPER_API const std::map< std::string, ComponentChange, std::less<> > sofa::helper::lifecycle::movedComponents. ◆ renamedComponents. SOFA_HELPER_API const std::map< std::string, Renamed, std::less<> > sofa::helper::lifecycle::renamedComponents. ◆ uncreatableComponents. SOFA_HELPER_API const std::map< std::string, ComponentChange, std::less<> > sofa::helper::lifecycle::uncreatableComponents. sofahelperlifecycle; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1lifecycle.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1lifecycle.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1lifecycle.html:357,Modifiability,Variab,Variables,357,"﻿. SOFA API: sofa::helper::lifecycle Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Variables . sofa::helper::lifecycle Namespace Reference . Classes; class  ComponentChange;  ; class  Deprecated;  ; class  Pluginized;  ; class  Removed;  ; class  Moved;  ; class  Renamed;  ; class  Dealiased;  . Variables; const std::map< std::string, Deprecated, std::less<> > deprecatedComponents;  ; const std::map< std::string, ComponentChange, std::less<> > movedComponents;  ; const std::map< std::string, ComponentChange, std::less<> > uncreatableComponents;  ; const std::map< std::string, Renamed, std::less<> > renamedComponents;  ; const std::map< std::string, Dealiased, std::less<> > dealiasedComponents;  . Variable Documentation. ◆ dealiasedComponents. SOFA_HELPER_API const std::map< std::string, Dealiased, std::less<> > sofa::helper::lifecycle::dealiasedComponents. ◆ deprecatedComponents. SOFA_HELPER_API const std::map< std::string, Deprecated, std::less<> > sofa::helper::lifecycle::deprecatedComponents. Initial value:= {; {""RayTraceDetection"", Deprecated(""v21.06"", ""v21.12"")},; {""BruteForceDetection"", Deprecated(""v21.06"", ""v21.12"")},; {""DirectSAP"", Deprecated(""v21.06"", ""v21.12"")},; {""RigidRigidMapping"", Deprecated(""v23.06"", ""v23.12"", ""You can use the component RigidMapping with template='Rigid3,Rigid3' instead."")},; }. ◆ movedComponents. SOFA_HELPER_API const std::map< std::string, ComponentChange, std::less<> > sofa::helper::lifecycle::movedComponents. ◆ renamedComponents. SOFA_HELPER_API const std::map< std::string, Renamed, std::less<> > sofa::helper::lifecycle::renamedComponents. ◆ uncreatableComponents. SOFA_HELPER_API const std::map< std::string, ComponentChange, std::less<> > sofa::helper::lifecycle::uncreatableComponents. sofahelperlifecycle; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1lifecycle.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1lifecycle.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1lifecycle.html:766,Modifiability,Variab,Variable,766,"﻿. SOFA API: sofa::helper::lifecycle Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Variables . sofa::helper::lifecycle Namespace Reference . Classes; class  ComponentChange;  ; class  Deprecated;  ; class  Pluginized;  ; class  Removed;  ; class  Moved;  ; class  Renamed;  ; class  Dealiased;  . Variables; const std::map< std::string, Deprecated, std::less<> > deprecatedComponents;  ; const std::map< std::string, ComponentChange, std::less<> > movedComponents;  ; const std::map< std::string, ComponentChange, std::less<> > uncreatableComponents;  ; const std::map< std::string, Renamed, std::less<> > renamedComponents;  ; const std::map< std::string, Dealiased, std::less<> > dealiasedComponents;  . Variable Documentation. ◆ dealiasedComponents. SOFA_HELPER_API const std::map< std::string, Dealiased, std::less<> > sofa::helper::lifecycle::dealiasedComponents. ◆ deprecatedComponents. SOFA_HELPER_API const std::map< std::string, Deprecated, std::less<> > sofa::helper::lifecycle::deprecatedComponents. Initial value:= {; {""RayTraceDetection"", Deprecated(""v21.06"", ""v21.12"")},; {""BruteForceDetection"", Deprecated(""v21.06"", ""v21.12"")},; {""DirectSAP"", Deprecated(""v21.06"", ""v21.12"")},; {""RigidRigidMapping"", Deprecated(""v23.06"", ""v23.12"", ""You can use the component RigidMapping with template='Rigid3,Rigid3' instead."")},; }. ◆ movedComponents. SOFA_HELPER_API const std::map< std::string, ComponentChange, std::less<> > sofa::helper::lifecycle::movedComponents. ◆ renamedComponents. SOFA_HELPER_API const std::map< std::string, Renamed, std::less<> > sofa::helper::lifecycle::renamedComponents. ◆ uncreatableComponents. SOFA_HELPER_API const std::map< std::string, ComponentChange, std::less<> > sofa::helper::lifecycle::uncreatableComponents. sofahelperlifecycle; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1lifecycle.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1lifecycle.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:402,Integrability,rout,routingmessagehandler,402,"﻿. SOFA API: sofa::helper::logging Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions . sofa::helper::logging Namespace Reference . This allow Base object to interact with the messaging system. ; More... Namespaces;  countingmessagehandler;  ;  loggingmessagehandler;  ;  percomponentloggingmessagehandler;  ;  routingmessagehandler;  . Classes; class  RichConsoleStyleMessageFormatter;  The RichConsoleStyleMessageFormatter class. More...;  ; class  SofaComponentInfo;  ; class  ClangMessageHandler;  ; class  ClangStyleMessageFormatter;  ; struct  ComponentInfo;  ; class  ConsoleMessageHandler;  ; class  MainConsoleMessageHandler;  The MainConsoleMessageHandler class contains a singleton to ConsoleMessageHandler and offer static version of ConsoleMessageHandler API. More...;  ; class  DefaultStyleMessageFormatter;  ; class  ExceptionMessageHandler;  ; struct  FileInfo;  ; struct  FileInfoOwningFilename;  To keep a trace (file,line) from where the message have been created. More...;  ; class  FileMessageHandler;  ; class  Message;  ; class  MessageDispatcherImpl;  ; class  MessageDispatcher;  ; class  MessageFormatter;  ; class  MessageHandler;  ; class  SilentMessageHandler;  This class is a MessageHandler that simply do nothing with the message. More...;  ; class  TracyMessageHandler;  Send the message to the Tracy profiler. More...;  ; class  MainTracyMessageHandler;  The MainTracyMessageHandler class contains a singleton to TracyMessageHandler and offer static version of TracyMessageHandler API. More...;  . Typedefs; typedef boost::tokenizer< boost::char_separator< char > > tokenizer;  . Functions; void simpleFormat (size_t jsize, const std::string &text, size_t line_length, std::ostream &wrapped);  simpleFormat a text containing our markdown 'tags' More...;  ; bool notMuted (const sofa::core::objectmodel::Base *t);  ; bool notMuted (sofa::core::objectmodel::Base *t);  ; Compone",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:1048,Integrability,message,message,1048,"﻿. SOFA API: sofa::helper::logging Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions . sofa::helper::logging Namespace Reference . This allow Base object to interact with the messaging system. ; More... Namespaces;  countingmessagehandler;  ;  loggingmessagehandler;  ;  percomponentloggingmessagehandler;  ;  routingmessagehandler;  . Classes; class  RichConsoleStyleMessageFormatter;  The RichConsoleStyleMessageFormatter class. More...;  ; class  SofaComponentInfo;  ; class  ClangMessageHandler;  ; class  ClangStyleMessageFormatter;  ; struct  ComponentInfo;  ; class  ConsoleMessageHandler;  ; class  MainConsoleMessageHandler;  The MainConsoleMessageHandler class contains a singleton to ConsoleMessageHandler and offer static version of ConsoleMessageHandler API. More...;  ; class  DefaultStyleMessageFormatter;  ; class  ExceptionMessageHandler;  ; struct  FileInfo;  ; struct  FileInfoOwningFilename;  To keep a trace (file,line) from where the message have been created. More...;  ; class  FileMessageHandler;  ; class  Message;  ; class  MessageDispatcherImpl;  ; class  MessageDispatcher;  ; class  MessageFormatter;  ; class  MessageHandler;  ; class  SilentMessageHandler;  This class is a MessageHandler that simply do nothing with the message. More...;  ; class  TracyMessageHandler;  Send the message to the Tracy profiler. More...;  ; class  MainTracyMessageHandler;  The MainTracyMessageHandler class contains a singleton to TracyMessageHandler and offer static version of TracyMessageHandler API. More...;  . Typedefs; typedef boost::tokenizer< boost::char_separator< char > > tokenizer;  . Functions; void simpleFormat (size_t jsize, const std::string &text, size_t line_length, std::ostream &wrapped);  simpleFormat a text containing our markdown 'tags' More...;  ; bool notMuted (const sofa::core::objectmodel::Base *t);  ; bool notMuted (sofa::core::objectmodel::Base *t);  ; Compone",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:1124,Integrability,Message,Message,1124,"nce . This allow Base object to interact with the messaging system. ; More... Namespaces;  countingmessagehandler;  ;  loggingmessagehandler;  ;  percomponentloggingmessagehandler;  ;  routingmessagehandler;  . Classes; class  RichConsoleStyleMessageFormatter;  The RichConsoleStyleMessageFormatter class. More...;  ; class  SofaComponentInfo;  ; class  ClangMessageHandler;  ; class  ClangStyleMessageFormatter;  ; struct  ComponentInfo;  ; class  ConsoleMessageHandler;  ; class  MainConsoleMessageHandler;  The MainConsoleMessageHandler class contains a singleton to ConsoleMessageHandler and offer static version of ConsoleMessageHandler API. More...;  ; class  DefaultStyleMessageFormatter;  ; class  ExceptionMessageHandler;  ; struct  FileInfo;  ; struct  FileInfoOwningFilename;  To keep a trace (file,line) from where the message have been created. More...;  ; class  FileMessageHandler;  ; class  Message;  ; class  MessageDispatcherImpl;  ; class  MessageDispatcher;  ; class  MessageFormatter;  ; class  MessageHandler;  ; class  SilentMessageHandler;  This class is a MessageHandler that simply do nothing with the message. More...;  ; class  TracyMessageHandler;  Send the message to the Tracy profiler. More...;  ; class  MainTracyMessageHandler;  The MainTracyMessageHandler class contains a singleton to TracyMessageHandler and offer static version of TracyMessageHandler API. More...;  . Typedefs; typedef boost::tokenizer< boost::char_separator< char > > tokenizer;  . Functions; void simpleFormat (size_t jsize, const std::string &text, size_t line_length, std::ostream &wrapped);  simpleFormat a text containing our markdown 'tags' More...;  ; bool notMuted (const sofa::core::objectmodel::Base *t);  ; bool notMuted (sofa::core::objectmodel::Base *t);  ; ComponentInfo::SPtr getComponentInfo (const sofa::core::objectmodel::Base *t);  This construct a new ComponentInfo object from a Base object. More...;  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo &nfo",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:1143,Integrability,Message,MessageDispatcherImpl,1143,"nce . This allow Base object to interact with the messaging system. ; More... Namespaces;  countingmessagehandler;  ;  loggingmessagehandler;  ;  percomponentloggingmessagehandler;  ;  routingmessagehandler;  . Classes; class  RichConsoleStyleMessageFormatter;  The RichConsoleStyleMessageFormatter class. More...;  ; class  SofaComponentInfo;  ; class  ClangMessageHandler;  ; class  ClangStyleMessageFormatter;  ; struct  ComponentInfo;  ; class  ConsoleMessageHandler;  ; class  MainConsoleMessageHandler;  The MainConsoleMessageHandler class contains a singleton to ConsoleMessageHandler and offer static version of ConsoleMessageHandler API. More...;  ; class  DefaultStyleMessageFormatter;  ; class  ExceptionMessageHandler;  ; struct  FileInfo;  ; struct  FileInfoOwningFilename;  To keep a trace (file,line) from where the message have been created. More...;  ; class  FileMessageHandler;  ; class  Message;  ; class  MessageDispatcherImpl;  ; class  MessageDispatcher;  ; class  MessageFormatter;  ; class  MessageHandler;  ; class  SilentMessageHandler;  This class is a MessageHandler that simply do nothing with the message. More...;  ; class  TracyMessageHandler;  Send the message to the Tracy profiler. More...;  ; class  MainTracyMessageHandler;  The MainTracyMessageHandler class contains a singleton to TracyMessageHandler and offer static version of TracyMessageHandler API. More...;  . Typedefs; typedef boost::tokenizer< boost::char_separator< char > > tokenizer;  . Functions; void simpleFormat (size_t jsize, const std::string &text, size_t line_length, std::ostream &wrapped);  simpleFormat a text containing our markdown 'tags' More...;  ; bool notMuted (const sofa::core::objectmodel::Base *t);  ; bool notMuted (sofa::core::objectmodel::Base *t);  ; ComponentInfo::SPtr getComponentInfo (const sofa::core::objectmodel::Base *t);  This construct a new ComponentInfo object from a Base object. More...;  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo &nfo",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:1176,Integrability,Message,MessageDispatcher,1176,"nce . This allow Base object to interact with the messaging system. ; More... Namespaces;  countingmessagehandler;  ;  loggingmessagehandler;  ;  percomponentloggingmessagehandler;  ;  routingmessagehandler;  . Classes; class  RichConsoleStyleMessageFormatter;  The RichConsoleStyleMessageFormatter class. More...;  ; class  SofaComponentInfo;  ; class  ClangMessageHandler;  ; class  ClangStyleMessageFormatter;  ; struct  ComponentInfo;  ; class  ConsoleMessageHandler;  ; class  MainConsoleMessageHandler;  The MainConsoleMessageHandler class contains a singleton to ConsoleMessageHandler and offer static version of ConsoleMessageHandler API. More...;  ; class  DefaultStyleMessageFormatter;  ; class  ExceptionMessageHandler;  ; struct  FileInfo;  ; struct  FileInfoOwningFilename;  To keep a trace (file,line) from where the message have been created. More...;  ; class  FileMessageHandler;  ; class  Message;  ; class  MessageDispatcherImpl;  ; class  MessageDispatcher;  ; class  MessageFormatter;  ; class  MessageHandler;  ; class  SilentMessageHandler;  This class is a MessageHandler that simply do nothing with the message. More...;  ; class  TracyMessageHandler;  Send the message to the Tracy profiler. More...;  ; class  MainTracyMessageHandler;  The MainTracyMessageHandler class contains a singleton to TracyMessageHandler and offer static version of TracyMessageHandler API. More...;  . Typedefs; typedef boost::tokenizer< boost::char_separator< char > > tokenizer;  . Functions; void simpleFormat (size_t jsize, const std::string &text, size_t line_length, std::ostream &wrapped);  simpleFormat a text containing our markdown 'tags' More...;  ; bool notMuted (const sofa::core::objectmodel::Base *t);  ; bool notMuted (sofa::core::objectmodel::Base *t);  ; ComponentInfo::SPtr getComponentInfo (const sofa::core::objectmodel::Base *t);  This construct a new ComponentInfo object from a Base object. More...;  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo &nfo",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:1205,Integrability,Message,MessageFormatter,1205,"nce . This allow Base object to interact with the messaging system. ; More... Namespaces;  countingmessagehandler;  ;  loggingmessagehandler;  ;  percomponentloggingmessagehandler;  ;  routingmessagehandler;  . Classes; class  RichConsoleStyleMessageFormatter;  The RichConsoleStyleMessageFormatter class. More...;  ; class  SofaComponentInfo;  ; class  ClangMessageHandler;  ; class  ClangStyleMessageFormatter;  ; struct  ComponentInfo;  ; class  ConsoleMessageHandler;  ; class  MainConsoleMessageHandler;  The MainConsoleMessageHandler class contains a singleton to ConsoleMessageHandler and offer static version of ConsoleMessageHandler API. More...;  ; class  DefaultStyleMessageFormatter;  ; class  ExceptionMessageHandler;  ; struct  FileInfo;  ; struct  FileInfoOwningFilename;  To keep a trace (file,line) from where the message have been created. More...;  ; class  FileMessageHandler;  ; class  Message;  ; class  MessageDispatcherImpl;  ; class  MessageDispatcher;  ; class  MessageFormatter;  ; class  MessageHandler;  ; class  SilentMessageHandler;  This class is a MessageHandler that simply do nothing with the message. More...;  ; class  TracyMessageHandler;  Send the message to the Tracy profiler. More...;  ; class  MainTracyMessageHandler;  The MainTracyMessageHandler class contains a singleton to TracyMessageHandler and offer static version of TracyMessageHandler API. More...;  . Typedefs; typedef boost::tokenizer< boost::char_separator< char > > tokenizer;  . Functions; void simpleFormat (size_t jsize, const std::string &text, size_t line_length, std::ostream &wrapped);  simpleFormat a text containing our markdown 'tags' More...;  ; bool notMuted (const sofa::core::objectmodel::Base *t);  ; bool notMuted (sofa::core::objectmodel::Base *t);  ; ComponentInfo::SPtr getComponentInfo (const sofa::core::objectmodel::Base *t);  This construct a new ComponentInfo object from a Base object. More...;  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo &nfo",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:1233,Integrability,Message,MessageHandler,1233,"nce . This allow Base object to interact with the messaging system. ; More... Namespaces;  countingmessagehandler;  ;  loggingmessagehandler;  ;  percomponentloggingmessagehandler;  ;  routingmessagehandler;  . Classes; class  RichConsoleStyleMessageFormatter;  The RichConsoleStyleMessageFormatter class. More...;  ; class  SofaComponentInfo;  ; class  ClangMessageHandler;  ; class  ClangStyleMessageFormatter;  ; struct  ComponentInfo;  ; class  ConsoleMessageHandler;  ; class  MainConsoleMessageHandler;  The MainConsoleMessageHandler class contains a singleton to ConsoleMessageHandler and offer static version of ConsoleMessageHandler API. More...;  ; class  DefaultStyleMessageFormatter;  ; class  ExceptionMessageHandler;  ; struct  FileInfo;  ; struct  FileInfoOwningFilename;  To keep a trace (file,line) from where the message have been created. More...;  ; class  FileMessageHandler;  ; class  Message;  ; class  MessageDispatcherImpl;  ; class  MessageDispatcher;  ; class  MessageFormatter;  ; class  MessageHandler;  ; class  SilentMessageHandler;  This class is a MessageHandler that simply do nothing with the message. More...;  ; class  TracyMessageHandler;  Send the message to the Tracy profiler. More...;  ; class  MainTracyMessageHandler;  The MainTracyMessageHandler class contains a singleton to TracyMessageHandler and offer static version of TracyMessageHandler API. More...;  . Typedefs; typedef boost::tokenizer< boost::char_separator< char > > tokenizer;  . Functions; void simpleFormat (size_t jsize, const std::string &text, size_t line_length, std::ostream &wrapped);  simpleFormat a text containing our markdown 'tags' More...;  ; bool notMuted (const sofa::core::objectmodel::Base *t);  ; bool notMuted (sofa::core::objectmodel::Base *t);  ; ComponentInfo::SPtr getComponentInfo (const sofa::core::objectmodel::Base *t);  This construct a new ComponentInfo object from a Base object. More...;  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo &nfo",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:1298,Integrability,Message,MessageHandler,1298,"nce . This allow Base object to interact with the messaging system. ; More... Namespaces;  countingmessagehandler;  ;  loggingmessagehandler;  ;  percomponentloggingmessagehandler;  ;  routingmessagehandler;  . Classes; class  RichConsoleStyleMessageFormatter;  The RichConsoleStyleMessageFormatter class. More...;  ; class  SofaComponentInfo;  ; class  ClangMessageHandler;  ; class  ClangStyleMessageFormatter;  ; struct  ComponentInfo;  ; class  ConsoleMessageHandler;  ; class  MainConsoleMessageHandler;  The MainConsoleMessageHandler class contains a singleton to ConsoleMessageHandler and offer static version of ConsoleMessageHandler API. More...;  ; class  DefaultStyleMessageFormatter;  ; class  ExceptionMessageHandler;  ; struct  FileInfo;  ; struct  FileInfoOwningFilename;  To keep a trace (file,line) from where the message have been created. More...;  ; class  FileMessageHandler;  ; class  Message;  ; class  MessageDispatcherImpl;  ; class  MessageDispatcher;  ; class  MessageFormatter;  ; class  MessageHandler;  ; class  SilentMessageHandler;  This class is a MessageHandler that simply do nothing with the message. More...;  ; class  TracyMessageHandler;  Send the message to the Tracy profiler. More...;  ; class  MainTracyMessageHandler;  The MainTracyMessageHandler class contains a singleton to TracyMessageHandler and offer static version of TracyMessageHandler API. More...;  . Typedefs; typedef boost::tokenizer< boost::char_separator< char > > tokenizer;  . Functions; void simpleFormat (size_t jsize, const std::string &text, size_t line_length, std::ostream &wrapped);  simpleFormat a text containing our markdown 'tags' More...;  ; bool notMuted (const sofa::core::objectmodel::Base *t);  ; bool notMuted (sofa::core::objectmodel::Base *t);  ; ComponentInfo::SPtr getComponentInfo (const sofa::core::objectmodel::Base *t);  This construct a new ComponentInfo object from a Base object. More...;  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo &nfo",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:1345,Integrability,message,message,1345,"nce . This allow Base object to interact with the messaging system. ; More... Namespaces;  countingmessagehandler;  ;  loggingmessagehandler;  ;  percomponentloggingmessagehandler;  ;  routingmessagehandler;  . Classes; class  RichConsoleStyleMessageFormatter;  The RichConsoleStyleMessageFormatter class. More...;  ; class  SofaComponentInfo;  ; class  ClangMessageHandler;  ; class  ClangStyleMessageFormatter;  ; struct  ComponentInfo;  ; class  ConsoleMessageHandler;  ; class  MainConsoleMessageHandler;  The MainConsoleMessageHandler class contains a singleton to ConsoleMessageHandler and offer static version of ConsoleMessageHandler API. More...;  ; class  DefaultStyleMessageFormatter;  ; class  ExceptionMessageHandler;  ; struct  FileInfo;  ; struct  FileInfoOwningFilename;  To keep a trace (file,line) from where the message have been created. More...;  ; class  FileMessageHandler;  ; class  Message;  ; class  MessageDispatcherImpl;  ; class  MessageDispatcher;  ; class  MessageFormatter;  ; class  MessageHandler;  ; class  SilentMessageHandler;  This class is a MessageHandler that simply do nothing with the message. More...;  ; class  TracyMessageHandler;  Send the message to the Tracy profiler. More...;  ; class  MainTracyMessageHandler;  The MainTracyMessageHandler class contains a singleton to TracyMessageHandler and offer static version of TracyMessageHandler API. More...;  . Typedefs; typedef boost::tokenizer< boost::char_separator< char > > tokenizer;  . Functions; void simpleFormat (size_t jsize, const std::string &text, size_t line_length, std::ostream &wrapped);  simpleFormat a text containing our markdown 'tags' More...;  ; bool notMuted (const sofa::core::objectmodel::Base *t);  ; bool notMuted (sofa::core::objectmodel::Base *t);  ; ComponentInfo::SPtr getComponentInfo (const sofa::core::objectmodel::Base *t);  This construct a new ComponentInfo object from a Base object. More...;  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo &nfo",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:1404,Integrability,message,message,1404,"  ;  routingmessagehandler;  . Classes; class  RichConsoleStyleMessageFormatter;  The RichConsoleStyleMessageFormatter class. More...;  ; class  SofaComponentInfo;  ; class  ClangMessageHandler;  ; class  ClangStyleMessageFormatter;  ; struct  ComponentInfo;  ; class  ConsoleMessageHandler;  ; class  MainConsoleMessageHandler;  The MainConsoleMessageHandler class contains a singleton to ConsoleMessageHandler and offer static version of ConsoleMessageHandler API. More...;  ; class  DefaultStyleMessageFormatter;  ; class  ExceptionMessageHandler;  ; struct  FileInfo;  ; struct  FileInfoOwningFilename;  To keep a trace (file,line) from where the message have been created. More...;  ; class  FileMessageHandler;  ; class  Message;  ; class  MessageDispatcherImpl;  ; class  MessageDispatcher;  ; class  MessageFormatter;  ; class  MessageHandler;  ; class  SilentMessageHandler;  This class is a MessageHandler that simply do nothing with the message. More...;  ; class  TracyMessageHandler;  Send the message to the Tracy profiler. More...;  ; class  MainTracyMessageHandler;  The MainTracyMessageHandler class contains a singleton to TracyMessageHandler and offer static version of TracyMessageHandler API. More...;  . Typedefs; typedef boost::tokenizer< boost::char_separator< char > > tokenizer;  . Functions; void simpleFormat (size_t jsize, const std::string &text, size_t line_length, std::ostream &wrapped);  simpleFormat a text containing our markdown 'tags' More...;  ; bool notMuted (const sofa::core::objectmodel::Base *t);  ; bool notMuted (sofa::core::objectmodel::Base *t);  ; ComponentInfo::SPtr getComponentInfo (const sofa::core::objectmodel::Base *t);  This construct a new ComponentInfo object from a Base object. More...;  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo &nfo);  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo *nfo);  ; const ComponentInfo::SPtr getComponentInfo (const std::string &s);  This function is used in the m",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:1808,Integrability,wrap,wrapped,1808,"nsoleMessageHandler and offer static version of ConsoleMessageHandler API. More...;  ; class  DefaultStyleMessageFormatter;  ; class  ExceptionMessageHandler;  ; struct  FileInfo;  ; struct  FileInfoOwningFilename;  To keep a trace (file,line) from where the message have been created. More...;  ; class  FileMessageHandler;  ; class  Message;  ; class  MessageDispatcherImpl;  ; class  MessageDispatcher;  ; class  MessageFormatter;  ; class  MessageHandler;  ; class  SilentMessageHandler;  This class is a MessageHandler that simply do nothing with the message. More...;  ; class  TracyMessageHandler;  Send the message to the Tracy profiler. More...;  ; class  MainTracyMessageHandler;  The MainTracyMessageHandler class contains a singleton to TracyMessageHandler and offer static version of TracyMessageHandler API. More...;  . Typedefs; typedef boost::tokenizer< boost::char_separator< char > > tokenizer;  . Functions; void simpleFormat (size_t jsize, const std::string &text, size_t line_length, std::ostream &wrapped);  simpleFormat a text containing our markdown 'tags' More...;  ; bool notMuted (const sofa::core::objectmodel::Base *t);  ; bool notMuted (sofa::core::objectmodel::Base *t);  ; ComponentInfo::SPtr getComponentInfo (const sofa::core::objectmodel::Base *t);  This construct a new ComponentInfo object from a Base object. More...;  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo &nfo);  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo *nfo);  ; const ComponentInfo::SPtr getComponentInfo (const std::string &s);  This function is used in the msg_* macro to handle emitting case based on string. More...;  ; const ComponentInfo::SPtr getComponentInfo (const ComponentInfo::SPtr &s);  This function is used in the msg_* macro to handle emitting case based on string. More...;  ; bool notMuted (const ComponentInfo::SPtr &);  ; bool notMuted (const std::string &);  This function is used in the msg_* macro to handle string based on strin",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:2855,Integrability,Message,Message,2855,"Base *t);  ; bool notMuted (sofa::core::objectmodel::Base *t);  ; ComponentInfo::SPtr getComponentInfo (const sofa::core::objectmodel::Base *t);  This construct a new ComponentInfo object from a Base object. More...;  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo &nfo);  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo *nfo);  ; const ComponentInfo::SPtr getComponentInfo (const std::string &s);  This function is used in the msg_* macro to handle emitting case based on string. More...;  ; const ComponentInfo::SPtr getComponentInfo (const ComponentInfo::SPtr &s);  This function is used in the msg_* macro to handle emitting case based on string. More...;  ; bool notMuted (const ComponentInfo::SPtr &);  ; bool notMuted (const std::string &);  This function is used in the msg_* macro to handle string based on string. More...;  ; const SOFA_HELPER_API std::string toString (const Message::Type type);  ; std::ostream & operator<< (std::ostream &s, const Message &m);  ; std::vector< MessageHandler * > getDefaultMessageHandlers ();  ; MessageDispatcherImpl * getMainInstance ();  . Detailed Description; This allow Base object to interact with the messaging system. ; Typedef Documentation. ◆ tokenizer. typedef boost::tokenizer<boost::char_separator<char> > sofa::helper::logging::tokenizer. Function Documentation. ◆ getComponentInfo() [1/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const ComponentInfo::SPtr & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getComponentInfo() [2/3]. ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const sofa::core::objectmodel::Base * ; t). inline . This construct a new ComponentInfo object from a Base object. . ◆ getComponentInfo() [3/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case b",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:2929,Integrability,Message,Message,2929,"Base *t);  ; bool notMuted (sofa::core::objectmodel::Base *t);  ; ComponentInfo::SPtr getComponentInfo (const sofa::core::objectmodel::Base *t);  This construct a new ComponentInfo object from a Base object. More...;  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo &nfo);  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo *nfo);  ; const ComponentInfo::SPtr getComponentInfo (const std::string &s);  This function is used in the msg_* macro to handle emitting case based on string. More...;  ; const ComponentInfo::SPtr getComponentInfo (const ComponentInfo::SPtr &s);  This function is used in the msg_* macro to handle emitting case based on string. More...;  ; bool notMuted (const ComponentInfo::SPtr &);  ; bool notMuted (const std::string &);  This function is used in the msg_* macro to handle string based on string. More...;  ; const SOFA_HELPER_API std::string toString (const Message::Type type);  ; std::ostream & operator<< (std::ostream &s, const Message &m);  ; std::vector< MessageHandler * > getDefaultMessageHandlers ();  ; MessageDispatcherImpl * getMainInstance ();  . Detailed Description; This allow Base object to interact with the messaging system. ; Typedef Documentation. ◆ tokenizer. typedef boost::tokenizer<boost::char_separator<char> > sofa::helper::logging::tokenizer. Function Documentation. ◆ getComponentInfo() [1/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const ComponentInfo::SPtr & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getComponentInfo() [2/3]. ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const sofa::core::objectmodel::Base * ; t). inline . This construct a new ComponentInfo object from a Base object. . ◆ getComponentInfo() [3/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case b",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:2958,Integrability,Message,MessageHandler,2958,"Base *t);  ; bool notMuted (sofa::core::objectmodel::Base *t);  ; ComponentInfo::SPtr getComponentInfo (const sofa::core::objectmodel::Base *t);  This construct a new ComponentInfo object from a Base object. More...;  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo &nfo);  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo *nfo);  ; const ComponentInfo::SPtr getComponentInfo (const std::string &s);  This function is used in the msg_* macro to handle emitting case based on string. More...;  ; const ComponentInfo::SPtr getComponentInfo (const ComponentInfo::SPtr &s);  This function is used in the msg_* macro to handle emitting case based on string. More...;  ; bool notMuted (const ComponentInfo::SPtr &);  ; bool notMuted (const std::string &);  This function is used in the msg_* macro to handle string based on string. More...;  ; const SOFA_HELPER_API std::string toString (const Message::Type type);  ; std::ostream & operator<< (std::ostream &s, const Message &m);  ; std::vector< MessageHandler * > getDefaultMessageHandlers ();  ; MessageDispatcherImpl * getMainInstance ();  . Detailed Description; This allow Base object to interact with the messaging system. ; Typedef Documentation. ◆ tokenizer. typedef boost::tokenizer<boost::char_separator<char> > sofa::helper::logging::tokenizer. Function Documentation. ◆ getComponentInfo() [1/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const ComponentInfo::SPtr & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getComponentInfo() [2/3]. ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const sofa::core::objectmodel::Base * ; t). inline . This construct a new ComponentInfo object from a Base object. . ◆ getComponentInfo() [3/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case b",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:3010,Integrability,Message,MessageDispatcherImpl,3010,"Base *t);  ; bool notMuted (sofa::core::objectmodel::Base *t);  ; ComponentInfo::SPtr getComponentInfo (const sofa::core::objectmodel::Base *t);  This construct a new ComponentInfo object from a Base object. More...;  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo &nfo);  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo *nfo);  ; const ComponentInfo::SPtr getComponentInfo (const std::string &s);  This function is used in the msg_* macro to handle emitting case based on string. More...;  ; const ComponentInfo::SPtr getComponentInfo (const ComponentInfo::SPtr &s);  This function is used in the msg_* macro to handle emitting case based on string. More...;  ; bool notMuted (const ComponentInfo::SPtr &);  ; bool notMuted (const std::string &);  This function is used in the msg_* macro to handle string based on string. More...;  ; const SOFA_HELPER_API std::string toString (const Message::Type type);  ; std::ostream & operator<< (std::ostream &s, const Message &m);  ; std::vector< MessageHandler * > getDefaultMessageHandlers ();  ; MessageDispatcherImpl * getMainInstance ();  . Detailed Description; This allow Base object to interact with the messaging system. ; Typedef Documentation. ◆ tokenizer. typedef boost::tokenizer<boost::char_separator<char> > sofa::helper::logging::tokenizer. Function Documentation. ◆ getComponentInfo() [1/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const ComponentInfo::SPtr & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getComponentInfo() [2/3]. ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const sofa::core::objectmodel::Base * ; t). inline . This construct a new ComponentInfo object from a Base object. . ◆ getComponentInfo() [3/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case b",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:3989,Integrability,Message,MessageHandler,3989,"spatcherImpl * getMainInstance ();  . Detailed Description; This allow Base object to interact with the messaging system. ; Typedef Documentation. ◆ tokenizer. typedef boost::tokenizer<boost::char_separator<char> > sofa::helper::logging::tokenizer. Function Documentation. ◆ getComponentInfo() [1/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const ComponentInfo::SPtr & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getComponentInfo() [2/3]. ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const sofa::core::objectmodel::Base * ; t). inline . This construct a new ComponentInfo object from a Base object. . ◆ getComponentInfo() [3/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::h",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:4124,Integrability,message,message,4124,"ract with the messaging system. ; Typedef Documentation. ◆ tokenizer. typedef boost::tokenizer<boost::char_separator<char> > sofa::helper::logging::tokenizer. Function Documentation. ◆ getComponentInfo() [1/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const ComponentInfo::SPtr & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getComponentInfo() [2/3]. ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const sofa::core::objectmodel::Base * ; t). inline . This construct a new ComponentInfo object from a Base object. . ◆ getComponentInfo() [3/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:4181,Integrability,message,message,4181," ◆ tokenizer. typedef boost::tokenizer<boost::char_separator<char> > sofa::helper::logging::tokenizer. Function Documentation. ◆ getComponentInfo() [1/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const ComponentInfo::SPtr & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getComponentInfo() [2/3]. ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const sofa::core::objectmodel::Base * ; t). inline . This construct a new ComponentInfo object from a Base object. . ◆ getComponentInfo() [3/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:4273,Integrability,Message,MessageDispatcherImpl,4273,"nfo() [1/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const ComponentInfo::SPtr & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getComponentInfo() [2/3]. ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const sofa::core::objectmodel::Base * ; t). inline . This construct a new ComponentInfo object from a Base object. . ◆ getComponentInfo() [3/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa::helper::logging::operator<< ; (; std::ostream & ; s, . const Message & ; m . ). ◆ simpleFormat(). void sofa::helper::logging::simpleFormat ;",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:5228,Integrability,Message,Message,5228,"the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa::helper::logging::operator<< ; (; std::ostream & ; s, . const Message & ; m . ). ◆ simpleFormat(). void sofa::helper::logging::simpleFormat ; (; size_t ; jsize, . const std::string & ; text, . size_t ; line_length, . std::ostream & ; wrapped . ). simpleFormat a text containing our markdown 'tags' ; Parameters. jsizesize of the line prefix to fill with space (for left side alignment) ; textthe text to format ; line_lengthnumber of column to render to to ; wrappedthe destination stream where to write the formatted text. . ◆ toString(). SOFA_HELPER_API const std::string sofa::helper::logging::toString ; (; const Message::Type ; type). sofahelperlogging; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:5400,Integrability,wrap,wrapped,5400,"the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa::helper::logging::operator<< ; (; std::ostream & ; s, . const Message & ; m . ). ◆ simpleFormat(). void sofa::helper::logging::simpleFormat ; (; size_t ; jsize, . const std::string & ; text, . size_t ; line_length, . std::ostream & ; wrapped . ). simpleFormat a text containing our markdown 'tags' ; Parameters. jsizesize of the line prefix to fill with space (for left side alignment) ; textthe text to format ; line_lengthnumber of column to render to to ; wrappedthe destination stream where to write the formatted text. . ◆ toString(). SOFA_HELPER_API const std::string sofa::helper::logging::toString ; (; const Message::Type ; type). sofahelperlogging; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:5625,Integrability,wrap,wrappedthe,5625,"the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa::helper::logging::operator<< ; (; std::ostream & ; s, . const Message & ; m . ). ◆ simpleFormat(). void sofa::helper::logging::simpleFormat ; (; size_t ; jsize, . const std::string & ; text, . size_t ; line_length, . std::ostream & ; wrapped . ). simpleFormat a text containing our markdown 'tags' ; Parameters. jsizesize of the line prefix to fill with space (for left side alignment) ; textthe text to format ; line_lengthnumber of column to render to to ; wrappedthe destination stream where to write the formatted text. . ◆ toString(). SOFA_HELPER_API const std::string sofa::helper::logging::toString ; (; const Message::Type ; type). sofahelperlogging; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:5783,Integrability,Message,Message,5783,"the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa::helper::logging::operator<< ; (; std::ostream & ; s, . const Message & ; m . ). ◆ simpleFormat(). void sofa::helper::logging::simpleFormat ; (; size_t ; jsize, . const std::string & ; text, . size_t ; line_length, . std::ostream & ; wrapped . ). simpleFormat a text containing our markdown 'tags' ; Parameters. jsizesize of the line prefix to fill with space (for left side alignment) ; textthe text to format ; line_lengthnumber of column to render to to ; wrappedthe destination stream where to write the formatted text. . ◆ toString(). SOFA_HELPER_API const std::string sofa::helper::logging::toString ; (; const Message::Type ; type). sofahelperlogging; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:4110,Security,access,access,4110,"ract with the messaging system. ; Typedef Documentation. ◆ tokenizer. typedef boost::tokenizer<boost::char_separator<char> > sofa::helper::logging::tokenizer. Function Documentation. ◆ getComponentInfo() [1/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const ComponentInfo::SPtr & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getComponentInfo() [2/3]. ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const sofa::core::objectmodel::Base * ; t). inline . This construct a new ComponentInfo object from a Base object. . ◆ getComponentInfo() [3/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:27,Testability,log,logging,27,"﻿. SOFA API: sofa::helper::logging Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions . sofa::helper::logging Namespace Reference . This allow Base object to interact with the messaging system. ; More... Namespaces;  countingmessagehandler;  ;  loggingmessagehandler;  ;  percomponentloggingmessagehandler;  ;  routingmessagehandler;  . Classes; class  RichConsoleStyleMessageFormatter;  The RichConsoleStyleMessageFormatter class. More...;  ; class  SofaComponentInfo;  ; class  ClangMessageHandler;  ; class  ClangStyleMessageFormatter;  ; struct  ComponentInfo;  ; class  ConsoleMessageHandler;  ; class  MainConsoleMessageHandler;  The MainConsoleMessageHandler class contains a singleton to ConsoleMessageHandler and offer static version of ConsoleMessageHandler API. More...;  ; class  DefaultStyleMessageFormatter;  ; class  ExceptionMessageHandler;  ; struct  FileInfo;  ; struct  FileInfoOwningFilename;  To keep a trace (file,line) from where the message have been created. More...;  ; class  FileMessageHandler;  ; class  Message;  ; class  MessageDispatcherImpl;  ; class  MessageDispatcher;  ; class  MessageFormatter;  ; class  MessageHandler;  ; class  SilentMessageHandler;  This class is a MessageHandler that simply do nothing with the message. More...;  ; class  TracyMessageHandler;  Send the message to the Tracy profiler. More...;  ; class  MainTracyMessageHandler;  The MainTracyMessageHandler class contains a singleton to TracyMessageHandler and offer static version of TracyMessageHandler API. More...;  . Typedefs; typedef boost::tokenizer< boost::char_separator< char > > tokenizer;  . Functions; void simpleFormat (size_t jsize, const std::string &text, size_t line_length, std::ostream &wrapped);  simpleFormat a text containing our markdown 'tags' More...;  ; bool notMuted (const sofa::core::objectmodel::Base *t);  ; bool notMuted (sofa::core::objectmodel::Base *t);  ; Compone",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:193,Testability,log,logging,193,"﻿. SOFA API: sofa::helper::logging Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions . sofa::helper::logging Namespace Reference . This allow Base object to interact with the messaging system. ; More... Namespaces;  countingmessagehandler;  ;  loggingmessagehandler;  ;  percomponentloggingmessagehandler;  ;  routingmessagehandler;  . Classes; class  RichConsoleStyleMessageFormatter;  The RichConsoleStyleMessageFormatter class. More...;  ; class  SofaComponentInfo;  ; class  ClangMessageHandler;  ; class  ClangStyleMessageFormatter;  ; struct  ComponentInfo;  ; class  ConsoleMessageHandler;  ; class  MainConsoleMessageHandler;  The MainConsoleMessageHandler class contains a singleton to ConsoleMessageHandler and offer static version of ConsoleMessageHandler API. More...;  ; class  DefaultStyleMessageFormatter;  ; class  ExceptionMessageHandler;  ; struct  FileInfo;  ; struct  FileInfoOwningFilename;  To keep a trace (file,line) from where the message have been created. More...;  ; class  FileMessageHandler;  ; class  Message;  ; class  MessageDispatcherImpl;  ; class  MessageDispatcher;  ; class  MessageFormatter;  ; class  MessageHandler;  ; class  SilentMessageHandler;  This class is a MessageHandler that simply do nothing with the message. More...;  ; class  TracyMessageHandler;  Send the message to the Tracy profiler. More...;  ; class  MainTracyMessageHandler;  The MainTracyMessageHandler class contains a singleton to TracyMessageHandler and offer static version of TracyMessageHandler API. More...;  . Typedefs; typedef boost::tokenizer< boost::char_separator< char > > tokenizer;  . Functions; void simpleFormat (size_t jsize, const std::string &text, size_t line_length, std::ostream &wrapped);  simpleFormat a text containing our markdown 'tags' More...;  ; bool notMuted (const sofa::core::objectmodel::Base *t);  ; bool notMuted (sofa::core::objectmodel::Base *t);  ; Compone",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:336,Testability,log,loggingmessagehandler,336,"﻿. SOFA API: sofa::helper::logging Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions . sofa::helper::logging Namespace Reference . This allow Base object to interact with the messaging system. ; More... Namespaces;  countingmessagehandler;  ;  loggingmessagehandler;  ;  percomponentloggingmessagehandler;  ;  routingmessagehandler;  . Classes; class  RichConsoleStyleMessageFormatter;  The RichConsoleStyleMessageFormatter class. More...;  ; class  SofaComponentInfo;  ; class  ClangMessageHandler;  ; class  ClangStyleMessageFormatter;  ; struct  ComponentInfo;  ; class  ConsoleMessageHandler;  ; class  MainConsoleMessageHandler;  The MainConsoleMessageHandler class contains a singleton to ConsoleMessageHandler and offer static version of ConsoleMessageHandler API. More...;  ; class  DefaultStyleMessageFormatter;  ; class  ExceptionMessageHandler;  ; struct  FileInfo;  ; struct  FileInfoOwningFilename;  To keep a trace (file,line) from where the message have been created. More...;  ; class  FileMessageHandler;  ; class  Message;  ; class  MessageDispatcherImpl;  ; class  MessageDispatcher;  ; class  MessageFormatter;  ; class  MessageHandler;  ; class  SilentMessageHandler;  This class is a MessageHandler that simply do nothing with the message. More...;  ; class  TracyMessageHandler;  Send the message to the Tracy profiler. More...;  ; class  MainTracyMessageHandler;  The MainTracyMessageHandler class contains a singleton to TracyMessageHandler and offer static version of TracyMessageHandler API. More...;  . Typedefs; typedef boost::tokenizer< boost::char_separator< char > > tokenizer;  . Functions; void simpleFormat (size_t jsize, const std::string &text, size_t line_length, std::ostream &wrapped);  simpleFormat a text containing our markdown 'tags' More...;  ; bool notMuted (const sofa::core::objectmodel::Base *t);  ; bool notMuted (sofa::core::objectmodel::Base *t);  ; Compone",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:3248,Testability,log,logging,3248,"; std::ostream & operator<< (std::ostream &out, const ComponentInfo *nfo);  ; const ComponentInfo::SPtr getComponentInfo (const std::string &s);  This function is used in the msg_* macro to handle emitting case based on string. More...;  ; const ComponentInfo::SPtr getComponentInfo (const ComponentInfo::SPtr &s);  This function is used in the msg_* macro to handle emitting case based on string. More...;  ; bool notMuted (const ComponentInfo::SPtr &);  ; bool notMuted (const std::string &);  This function is used in the msg_* macro to handle string based on string. More...;  ; const SOFA_HELPER_API std::string toString (const Message::Type type);  ; std::ostream & operator<< (std::ostream &s, const Message &m);  ; std::vector< MessageHandler * > getDefaultMessageHandlers ();  ; MessageDispatcherImpl * getMainInstance ();  . Detailed Description; This allow Base object to interact with the messaging system. ; Typedef Documentation. ◆ tokenizer. typedef boost::tokenizer<boost::char_separator<char> > sofa::helper::logging::tokenizer. Function Documentation. ◆ getComponentInfo() [1/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const ComponentInfo::SPtr & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getComponentInfo() [2/3]. ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const sofa::core::objectmodel::Base * ; t). inline . This construct a new ComponentInfo object from a Base object. . ◆ getComponentInfo() [3/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:3360,Testability,log,logging,3360,"s function is used in the msg_* macro to handle emitting case based on string. More...;  ; const ComponentInfo::SPtr getComponentInfo (const ComponentInfo::SPtr &s);  This function is used in the msg_* macro to handle emitting case based on string. More...;  ; bool notMuted (const ComponentInfo::SPtr &);  ; bool notMuted (const std::string &);  This function is used in the msg_* macro to handle string based on string. More...;  ; const SOFA_HELPER_API std::string toString (const Message::Type type);  ; std::ostream & operator<< (std::ostream &s, const Message &m);  ; std::vector< MessageHandler * > getDefaultMessageHandlers ();  ; MessageDispatcherImpl * getMainInstance ();  . Detailed Description; This allow Base object to interact with the messaging system. ; Typedef Documentation. ◆ tokenizer. typedef boost::tokenizer<boost::char_separator<char> > sofa::helper::logging::tokenizer. Function Documentation. ◆ getComponentInfo() [1/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const ComponentInfo::SPtr & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getComponentInfo() [2/3]. ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const sofa::core::objectmodel::Base * ; t). inline . This construct a new ComponentInfo object from a Base object. . ◆ getComponentInfo() [3/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:3580,Testability,log,logging,3580,"ase based on string. More...;  ; bool notMuted (const ComponentInfo::SPtr &);  ; bool notMuted (const std::string &);  This function is used in the msg_* macro to handle string based on string. More...;  ; const SOFA_HELPER_API std::string toString (const Message::Type type);  ; std::ostream & operator<< (std::ostream &s, const Message &m);  ; std::vector< MessageHandler * > getDefaultMessageHandlers ();  ; MessageDispatcherImpl * getMainInstance ();  . Detailed Description; This allow Base object to interact with the messaging system. ; Typedef Documentation. ◆ tokenizer. typedef boost::tokenizer<boost::char_separator<char> > sofa::helper::logging::tokenizer. Function Documentation. ◆ getComponentInfo() [1/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const ComponentInfo::SPtr & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getComponentInfo() [2/3]. ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const sofa::core::objectmodel::Base * ; t). inline . This construct a new ComponentInfo object from a Base object. . ◆ getComponentInfo() [3/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper:",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:3796,Testability,log,logging,3796,"; const SOFA_HELPER_API std::string toString (const Message::Type type);  ; std::ostream & operator<< (std::ostream &s, const Message &m);  ; std::vector< MessageHandler * > getDefaultMessageHandlers ();  ; MessageDispatcherImpl * getMainInstance ();  . Detailed Description; This allow Base object to interact with the messaging system. ; Typedef Documentation. ◆ tokenizer. typedef boost::tokenizer<boost::char_separator<char> > sofa::helper::logging::tokenizer. Function Documentation. ◆ getComponentInfo() [1/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const ComponentInfo::SPtr & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getComponentInfo() [2/3]. ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const sofa::core::objectmodel::Base * ; t). inline . This construct a new ComponentInfo object from a Base object. . ◆ getComponentInfo() [3/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::c",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:4020,Testability,log,logging,4020,"spatcherImpl * getMainInstance ();  . Detailed Description; This allow Base object to interact with the messaging system. ; Typedef Documentation. ◆ tokenizer. typedef boost::tokenizer<boost::char_separator<char> > sofa::helper::logging::tokenizer. Function Documentation. ◆ getComponentInfo() [1/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const ComponentInfo::SPtr & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getComponentInfo() [2/3]. ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const sofa::core::objectmodel::Base * ; t). inline . This construct a new ComponentInfo object from a Base object. . ◆ getComponentInfo() [3/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::h",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:4310,Testability,log,logging,4310,"nfo() [1/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const ComponentInfo::SPtr & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getComponentInfo() [2/3]. ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const sofa::core::objectmodel::Base * ; t). inline . This construct a new ComponentInfo object from a Base object. . ◆ getComponentInfo() [3/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa::helper::logging::operator<< ; (; std::ostream & ; s, . const Message & ; m . ). ◆ simpleFormat(). void sofa::helper::logging::simpleFormat ;",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:4382,Testability,log,logging,4382,"mponentInfo::SPtr & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getComponentInfo() [2/3]. ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const sofa::core::objectmodel::Base * ; t). inline . This construct a new ComponentInfo object from a Base object. . ◆ getComponentInfo() [3/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa::helper::logging::operator<< ; (; std::ostream & ; s, . const Message & ; m . ). ◆ simpleFormat(). void sofa::helper::logging::simpleFormat ; (; size_t ; jsize, . const std::string & ; text, . size_t ; line_length, . std::ostream & ; ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:4486,Testability,log,logging,4486,"tring. . ◆ getComponentInfo() [2/3]. ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const sofa::core::objectmodel::Base * ; t). inline . This construct a new ComponentInfo object from a Base object. . ◆ getComponentInfo() [3/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa::helper::logging::operator<< ; (; std::ostream & ; s, . const Message & ; m . ). ◆ simpleFormat(). void sofa::helper::logging::simpleFormat ; (; size_t ; jsize, . const std::string & ; text, . size_t ; line_length, . std::ostream & ; wrapped . ). simpleFormat a text containing our markdown 'tags' ; Parameters. jsizesize of the line prefix to",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:4601,Testability,log,logging,4601,"st sofa::core::objectmodel::Base * ; t). inline . This construct a new ComponentInfo object from a Base object. . ◆ getComponentInfo() [3/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa::helper::logging::operator<< ; (; std::ostream & ; s, . const Message & ; m . ). ◆ simpleFormat(). void sofa::helper::logging::simpleFormat ; (; size_t ; jsize, . const std::string & ; text, . size_t ; line_length, . std::ostream & ; wrapped . ). simpleFormat a text containing our markdown 'tags' ; Parameters. jsizesize of the line prefix to fill with space (for left side alignment) ; textthe text to format ; line_lengthnumber of column to rende",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:4774,Testability,log,logging,4774,"::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa::helper::logging::operator<< ; (; std::ostream & ; s, . const Message & ; m . ). ◆ simpleFormat(). void sofa::helper::logging::simpleFormat ; (; size_t ; jsize, . const std::string & ; text, . size_t ; line_length, . std::ostream & ; wrapped . ). simpleFormat a text containing our markdown 'tags' ; Parameters. jsizesize of the line prefix to fill with space (for left side alignment) ; textthe text to format ; line_lengthnumber of column to render to to ; wrappedthe destination stream where to write the formatted text. . ◆ toString(). SOFA_HELPER_API const std::string sofa::helper::logging::toString ; (; const Message::Ty",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:4894,Testability,log,logging,4894,"the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa::helper::logging::operator<< ; (; std::ostream & ; s, . const Message & ; m . ). ◆ simpleFormat(). void sofa::helper::logging::simpleFormat ; (; size_t ; jsize, . const std::string & ; text, . size_t ; line_length, . std::ostream & ; wrapped . ). simpleFormat a text containing our markdown 'tags' ; Parameters. jsizesize of the line prefix to fill with space (for left side alignment) ; textthe text to format ; line_lengthnumber of column to render to to ; wrappedthe destination stream where to write the formatted text. . ◆ toString(). SOFA_HELPER_API const std::string sofa::helper::logging::toString ; (; const Message::Type ; type). sofahelperlogging; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:5026,Testability,log,logging,5026,"the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa::helper::logging::operator<< ; (; std::ostream & ; s, . const Message & ; m . ). ◆ simpleFormat(). void sofa::helper::logging::simpleFormat ; (; size_t ; jsize, . const std::string & ; text, . size_t ; line_length, . std::ostream & ; wrapped . ). simpleFormat a text containing our markdown 'tags' ; Parameters. jsizesize of the line prefix to fill with space (for left side alignment) ; textthe text to format ; line_lengthnumber of column to render to to ; wrappedthe destination stream where to write the formatted text. . ◆ toString(). SOFA_HELPER_API const std::string sofa::helper::logging::toString ; (; const Message::Type ; type). sofahelperlogging; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:5175,Testability,log,logging,5175,"the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa::helper::logging::operator<< ; (; std::ostream & ; s, . const Message & ; m . ). ◆ simpleFormat(). void sofa::helper::logging::simpleFormat ; (; size_t ; jsize, . const std::string & ; text, . size_t ; line_length, . std::ostream & ; wrapped . ). simpleFormat a text containing our markdown 'tags' ; Parameters. jsizesize of the line prefix to fill with space (for left side alignment) ; textthe text to format ; line_lengthnumber of column to render to to ; wrappedthe destination stream where to write the formatted text. . ◆ toString(). SOFA_HELPER_API const std::string sofa::helper::logging::toString ; (; const Message::Type ; type). sofahelperlogging; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:5284,Testability,log,logging,5284,"the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa::helper::logging::operator<< ; (; std::ostream & ; s, . const Message & ; m . ). ◆ simpleFormat(). void sofa::helper::logging::simpleFormat ; (; size_t ; jsize, . const std::string & ; text, . size_t ; line_length, . std::ostream & ; wrapped . ). simpleFormat a text containing our markdown 'tags' ; Parameters. jsizesize of the line prefix to fill with space (for left side alignment) ; textthe text to format ; line_lengthnumber of column to render to to ; wrappedthe destination stream where to write the formatted text. . ◆ toString(). SOFA_HELPER_API const std::string sofa::helper::logging::toString ; (; const Message::Type ; type). sofahelperlogging; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:5754,Testability,log,logging,5754,"the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa::helper::logging::operator<< ; (; std::ostream & ; s, . const Message & ; m . ). ◆ simpleFormat(). void sofa::helper::logging::simpleFormat ; (; size_t ; jsize, . const std::string & ; text, . size_t ; line_length, . std::ostream & ; wrapped . ). simpleFormat a text containing our markdown 'tags' ; Parameters. jsizesize of the line prefix to fill with space (for left side alignment) ; textthe text to format ; line_lengthnumber of column to render to to ; wrappedthe destination stream where to write the formatted text. . ◆ toString(). SOFA_HELPER_API const std::string sofa::helper::logging::toString ; (; const Message::Type ; type). sofahelperlogging; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:1318,Usability,simpl,simply,1318,"nce . This allow Base object to interact with the messaging system. ; More... Namespaces;  countingmessagehandler;  ;  loggingmessagehandler;  ;  percomponentloggingmessagehandler;  ;  routingmessagehandler;  . Classes; class  RichConsoleStyleMessageFormatter;  The RichConsoleStyleMessageFormatter class. More...;  ; class  SofaComponentInfo;  ; class  ClangMessageHandler;  ; class  ClangStyleMessageFormatter;  ; struct  ComponentInfo;  ; class  ConsoleMessageHandler;  ; class  MainConsoleMessageHandler;  The MainConsoleMessageHandler class contains a singleton to ConsoleMessageHandler and offer static version of ConsoleMessageHandler API. More...;  ; class  DefaultStyleMessageFormatter;  ; class  ExceptionMessageHandler;  ; struct  FileInfo;  ; struct  FileInfoOwningFilename;  To keep a trace (file,line) from where the message have been created. More...;  ; class  FileMessageHandler;  ; class  Message;  ; class  MessageDispatcherImpl;  ; class  MessageDispatcher;  ; class  MessageFormatter;  ; class  MessageHandler;  ; class  SilentMessageHandler;  This class is a MessageHandler that simply do nothing with the message. More...;  ; class  TracyMessageHandler;  Send the message to the Tracy profiler. More...;  ; class  MainTracyMessageHandler;  The MainTracyMessageHandler class contains a singleton to TracyMessageHandler and offer static version of TracyMessageHandler API. More...;  . Typedefs; typedef boost::tokenizer< boost::char_separator< char > > tokenizer;  . Functions; void simpleFormat (size_t jsize, const std::string &text, size_t line_length, std::ostream &wrapped);  simpleFormat a text containing our markdown 'tags' More...;  ; bool notMuted (const sofa::core::objectmodel::Base *t);  ; bool notMuted (sofa::core::objectmodel::Base *t);  ; ComponentInfo::SPtr getComponentInfo (const sofa::core::objectmodel::Base *t);  This construct a new ComponentInfo object from a Base object. More...;  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo &nfo",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:1721,Usability,simpl,simpleFormat,1721,"nsoleMessageHandler and offer static version of ConsoleMessageHandler API. More...;  ; class  DefaultStyleMessageFormatter;  ; class  ExceptionMessageHandler;  ; struct  FileInfo;  ; struct  FileInfoOwningFilename;  To keep a trace (file,line) from where the message have been created. More...;  ; class  FileMessageHandler;  ; class  Message;  ; class  MessageDispatcherImpl;  ; class  MessageDispatcher;  ; class  MessageFormatter;  ; class  MessageHandler;  ; class  SilentMessageHandler;  This class is a MessageHandler that simply do nothing with the message. More...;  ; class  TracyMessageHandler;  Send the message to the Tracy profiler. More...;  ; class  MainTracyMessageHandler;  The MainTracyMessageHandler class contains a singleton to TracyMessageHandler and offer static version of TracyMessageHandler API. More...;  . Typedefs; typedef boost::tokenizer< boost::char_separator< char > > tokenizer;  . Functions; void simpleFormat (size_t jsize, const std::string &text, size_t line_length, std::ostream &wrapped);  simpleFormat a text containing our markdown 'tags' More...;  ; bool notMuted (const sofa::core::objectmodel::Base *t);  ; bool notMuted (sofa::core::objectmodel::Base *t);  ; ComponentInfo::SPtr getComponentInfo (const sofa::core::objectmodel::Base *t);  This construct a new ComponentInfo object from a Base object. More...;  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo &nfo);  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo *nfo);  ; const ComponentInfo::SPtr getComponentInfo (const std::string &s);  This function is used in the msg_* macro to handle emitting case based on string. More...;  ; const ComponentInfo::SPtr getComponentInfo (const ComponentInfo::SPtr &s);  This function is used in the msg_* macro to handle emitting case based on string. More...;  ; bool notMuted (const ComponentInfo::SPtr &);  ; bool notMuted (const std::string &);  This function is used in the msg_* macro to handle string based on strin",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:1819,Usability,simpl,simpleFormat,1819,"nsoleMessageHandler and offer static version of ConsoleMessageHandler API. More...;  ; class  DefaultStyleMessageFormatter;  ; class  ExceptionMessageHandler;  ; struct  FileInfo;  ; struct  FileInfoOwningFilename;  To keep a trace (file,line) from where the message have been created. More...;  ; class  FileMessageHandler;  ; class  Message;  ; class  MessageDispatcherImpl;  ; class  MessageDispatcher;  ; class  MessageFormatter;  ; class  MessageHandler;  ; class  SilentMessageHandler;  This class is a MessageHandler that simply do nothing with the message. More...;  ; class  TracyMessageHandler;  Send the message to the Tracy profiler. More...;  ; class  MainTracyMessageHandler;  The MainTracyMessageHandler class contains a singleton to TracyMessageHandler and offer static version of TracyMessageHandler API. More...;  . Typedefs; typedef boost::tokenizer< boost::char_separator< char > > tokenizer;  . Functions; void simpleFormat (size_t jsize, const std::string &text, size_t line_length, std::ostream &wrapped);  simpleFormat a text containing our markdown 'tags' More...;  ; bool notMuted (const sofa::core::objectmodel::Base *t);  ; bool notMuted (sofa::core::objectmodel::Base *t);  ; ComponentInfo::SPtr getComponentInfo (const sofa::core::objectmodel::Base *t);  This construct a new ComponentInfo object from a Base object. More...;  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo &nfo);  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo *nfo);  ; const ComponentInfo::SPtr getComponentInfo (const std::string &s);  This function is used in the msg_* macro to handle emitting case based on string. More...;  ; const ComponentInfo::SPtr getComponentInfo (const ComponentInfo::SPtr &s);  This function is used in the msg_* macro to handle emitting case based on string. More...;  ; bool notMuted (const ComponentInfo::SPtr &);  ; bool notMuted (const std::string &);  This function is used in the msg_* macro to handle string based on strin",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:5249,Usability,simpl,simpleFormat,5249,"the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa::helper::logging::operator<< ; (; std::ostream & ; s, . const Message & ; m . ). ◆ simpleFormat(). void sofa::helper::logging::simpleFormat ; (; size_t ; jsize, . const std::string & ; text, . size_t ; line_length, . std::ostream & ; wrapped . ). simpleFormat a text containing our markdown 'tags' ; Parameters. jsizesize of the line prefix to fill with space (for left side alignment) ; textthe text to format ; line_lengthnumber of column to render to to ; wrappedthe destination stream where to write the formatted text. . ◆ toString(). SOFA_HELPER_API const std::string sofa::helper::logging::toString ; (; const Message::Type ; type). sofahelperlogging; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:5293,Usability,simpl,simpleFormat,5293,"the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa::helper::logging::operator<< ; (; std::ostream & ; s, . const Message & ; m . ). ◆ simpleFormat(). void sofa::helper::logging::simpleFormat ; (; size_t ; jsize, . const std::string & ; text, . size_t ; line_length, . std::ostream & ; wrapped . ). simpleFormat a text containing our markdown 'tags' ; Parameters. jsizesize of the line prefix to fill with space (for left side alignment) ; textthe text to format ; line_lengthnumber of column to render to to ; wrappedthe destination stream where to write the formatted text. . ◆ toString(). SOFA_HELPER_API const std::string sofa::helper::logging::toString ; (; const Message::Type ; type). sofahelperlogging; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:5413,Usability,simpl,simpleFormat,5413,"the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa::helper::logging::operator<< ; (; std::ostream & ; s, . const Message & ; m . ). ◆ simpleFormat(). void sofa::helper::logging::simpleFormat ; (; size_t ; jsize, . const std::string & ; text, . size_t ; line_length, . std::ostream & ; wrapped . ). simpleFormat a text containing our markdown 'tags' ; Parameters. jsizesize of the line prefix to fill with space (for left side alignment) ; textthe text to format ; line_lengthnumber of column to render to to ; wrappedthe destination stream where to write the formatted text. . ◆ toString(). SOFA_HELPER_API const std::string sofa::helper::logging::toString ; (; const Message::Type ; type). sofahelperlogging; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1countingmessagehandler.html:316,Integrability,message,messages,316,﻿. SOFA API: sofa::helper::logging::countingmessagehandler Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes . sofa::helper::logging::countingmessagehandler Namespace Reference . Classes; class  CountingMessageHandler;  The CountingMessageHandler class count the messages by types. More...;  ; class  MainCountingMessageHandler;  The MainCountingMessageHandler class contains a singleton to CountingMessageHandler and offer static version of CountingMessageHandler API. More...;  . Detailed Description; I use a per-file namespace so that I can employ the 'using' keywords without fearing it will leak names into the global namespace. When closing this namespace selected objects from this per-file namespace are then imported into their parent namespace for ease of use. . sofahelperloggingcountingmessagehandler; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1countingmessagehandler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1countingmessagehandler.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1countingmessagehandler.html:27,Testability,log,logging,27,﻿. SOFA API: sofa::helper::logging::countingmessagehandler Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes . sofa::helper::logging::countingmessagehandler Namespace Reference . Classes; class  CountingMessageHandler;  The CountingMessageHandler class count the messages by types. More...;  ; class  MainCountingMessageHandler;  The MainCountingMessageHandler class contains a singleton to CountingMessageHandler and offer static version of CountingMessageHandler API. More...;  . Detailed Description; I use a per-file namespace so that I can employ the 'using' keywords without fearing it will leak names into the global namespace. When closing this namespace selected objects from this per-file namespace are then imported into their parent namespace for ease of use. . sofahelperloggingcountingmessagehandler; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1countingmessagehandler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1countingmessagehandler.html
